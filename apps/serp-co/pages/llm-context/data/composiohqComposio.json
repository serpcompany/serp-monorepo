[
  {
    "owner": "composiohq",
    "repo": "composio",
    "content": "TITLE: Executing the LlamaIndex Agent Chat in Python\nDESCRIPTION: Executes the previously defined LlamaIndex agent using its `chat` method. A natural language instruction (\"Star a repo composiohq/composio on GitHub\") is provided. The agent interprets this request, selects the appropriate Composio tool (GitHub star action), and executes it to fulfill the user's goal. Requires an initialized `agent` variable.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/llamaindex.mdx#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nresult = agent.chat(\"Star a repo composiohq/composio on GitHub\")\n```\n\n----------------------------------------\n\nTITLE: Defining CrewAI Agent, Task, and Crew for GitHub Automation - Python\nDESCRIPTION: This snippet defines a CrewAI agent capable of interfacing with GitHub via Composio tools, creates a task to star a specific GitHub repository, and builds the Crew to coordinate the workflow. Requires initialized llm and tools objects. Key parameters include the agent's role, goal, task description, and connections. Output is the object structure encapsulating the agent workflow.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/crewai.mdx#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ncrewai_agent = Agent(\n    role=\"GitHub Agent\",\n    goal=\"You take action on GitHub using GitHub APIs\",\n    backstory=\"You are AI agent that is responsible for taking actions on GitHub on behalf of users using GitHub APIs\",\n    verbose=True,\n    tools=tools,\n    llm=llm,\n)\n\ntask = Task(\n    description=\"Star a repo composiohq/composio on GitHub\",\n    agent=crewai_agent,\n    expected_output=\"Status of the operation\"\n)\n\ncrew = Crew(\n    agents = [crewai_agent],\n    tasks = [task]\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Composio Plugins for Python LLM Frameworks\nDESCRIPTION: Commands to install Composio plugins for specific LLM frameworks like CrewAI and LangChain using pip or uv package managers.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: pip\nCODE:\n```\npip install composio_crewai      # For CrewAI\npip install composio_langchain   # For LangChain\n```\n\nLANGUAGE: uv\nCODE:\n```\nuv add composio_crewai      # For CrewAI\nuv add composio_langchain   # For LangChain\n```\n\n----------------------------------------\n\nTITLE: Creating a Research Agent to Automate GitHub Issues with LlamaIndex and OpenAI (Python)\nDESCRIPTION: This Python code initializes a research agent using LlamaIndex, composio_llamaindex, and OpenAI models to search for research papers on a specified topic via ArXiv, organizes the top results, and creates GitHub issues in the specified repository. It loads environment variables, prepares the necessary toolsets (Composio and ArXiv), configures the agent with system messages, and executes research-to-issue creation via a prompt that details the expectations for the created issues. Dependencies include composio_llamaindex, llama_index, and dotenv; environment variables (e.g., API keys) must be set. Inputs include the research topic, target repository, and number of issues; outputs are the outcome from agent interaction (potentially issue URLs or confirmation). Limitations include external API reliability, environment setup, and restriction to the defined tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\\nimport dotenv\\n\\nfrom composio_llamaindex import Action, ComposioToolSet\\nfrom llama_index.core.llms import ChatMessage\\nfrom llama_index.llms.openai import OpenAI\\nfrom llama_index.agent.openai import OpenAIAgent\\nfrom llama_index.tools.arxiv.base import ArxivToolSpec\\n\\n# Load environment variables\\ndotenv.load_dotenv()\\n\\n# Initialize the language model\\nllm = OpenAI(model=\\\"gpt-4o\\\")\\n\\n# Set research parameters\\nresearch_topic = \\\"LLM agents function calling\\\"\\ntarget_repo = \\\"composiohq/composio\\\"\\nn_issues = 3\\n\\ndef main():\\n    # Get Composio toolset and add ArXiv tools\\n    composio_toolset = ComposioToolSet()\\n    github_tools = composio_toolset.get_actions(actions=[Action.GITHUB_CREATE_AN_ISSUE])\\n    arxiv_tool = ArxivToolSpec()\\n    \\n    # Define system message\\n    prefix_messages = [\\n        ChatMessage(\\n            role=\\\"system\\\",\\n            content=(\\n                \\\"You are now a research agent, and whatever you are \\\"\\n                \\\"requested, you will try to execute utilizing your tools.\\\"\\n            ),\\n        )\\n    ]\\n    \\n    # Create the agent with tools\\n    agent = OpenAIAgent.from_tools(\\n        tools=github_tools + arxiv_tool.to_tool_list(),\\n        llm=llm,\\n        prefix_messages=prefix_messages,\\n        max_function_calls=10,\\n        allow_parallel_tool_calls=False,\\n        verbose=True,\\n    )\\n    \\n    # Create the research prompt\\n    prompt = (\\n        f\\\"Please research on Arxiv about `{research_topic}`, Organize \\\"\\n        f\\\"the top {n_issues} results as {n_issues} issues for \\\"\\n        f\\\"a github repository, finally raise those issues with proper, \\\"\\n        f\\\"title, body, implementation guidance and reference in \\\"\\n        f\\\"{target_repo} repo, as well as relevant tags and assignee as \\\"\\n        \\\"the repo owner.\\\"\\n    )\\n    \\n    # Execute the agent\\n    response = agent.chat(prompt)\\n    \\n    # Print the result\\n    print(\\\"Response:\\\", response)\\n\\nif __name__ == \\\"__main__\\\":\\n    main()\n```\n\n----------------------------------------\n\nTITLE: Logging in to Composio and Getting API Key\nDESCRIPTION: Command to authenticate with Composio and obtain an API key. The key should be set as an environment variable named COMPOSIO_API_KEY for the SDK to function properly.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/welcome.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposio login\n```\n\n----------------------------------------\n\nTITLE: Integrating GitHub Tools with Composio for Griptape Operations\nDESCRIPTION: Python code that demonstrates how to create a Composio toolset, retrieve GitHub-specific tools, and initialize a Griptape agent with those tools to enable GitHub operations.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/griptape/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncomposio_toolset = ComposioToolSet()\ncomposio_tools = composio_toolset.get_tools(tools = App.GITHUB)\n\nagent = Agent(\n    tools=composio_tools\n)\n```\n\n----------------------------------------\n\nTITLE: Running SQL Queries and Data Visualization with Composio, LangChain, and OpenAI in Python\nDESCRIPTION: This Python snippet initializes environment variables, a language model (GPT-4o via ChatOpenAI), and the Composio toolset for SQL, file, and code interpretation tasks. It builds agent executors with LangChain to first execute an SQL query against a SQLite database, saves the result to a file, and then creates a bar chart visualization based on results, saving the image file. Required dependencies are composio_langchain, langchain, langchain_openai, and dotenv. Inputs include the database query and resulting data; outputs are the query results and a chart image, and the entire workflow is encapsulated in a main() function. The implementation assumes environment variables are pre-set and that the required tools and database exist; it prints outputs for each step.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/sql-agent.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\\nimport dotenv\\n\\nfrom composio_langchain import App, ComposioToolSet\\nfrom langchain import hub\\nfrom langchain.agents import AgentExecutor, create_openai_functions_agent\\nfrom langchain_openai import ChatOpenAI\\n\\n# Load environment variables\\ndotenv.load_dotenv()\\n\\n# Initialize the language model\\nllm = ChatOpenAI(model=\\\"gpt-4o\\\")\\n\\n# Initialize the Composio ToolSet\\ncomposio_toolset = ComposioToolSet()\\n\\n# Get tools for SQL and File operations\\nsql_file_tools = composio_toolset.get_tools(apps=[App.SQLTOOL, App.FILETOOL])\\n\\n# Get tools for code interpreter (for plotting graphs)\\ncode_tools = composio_toolset.get_tools(apps=[App.CODEINTERPRETER])\\n\\n# Pull the prompt template for the agent\\nprompt = hub.pull(\\\"hwchase17/openai-functions-agent\\\")\\n\\n# Create the agent for SQL and File operations\\nsql_agent = create_openai_functions_agent(llm, sql_file_tools, prompt)\\nsql_executor = AgentExecutor(agent=sql_agent, tools=sql_file_tools, verbose=True)\\n\\n# Create the agent for data visualization\\nvisualization_agent = create_openai_functions_agent(llm, code_tools, prompt)\\nvisualization_executor = AgentExecutor(agent=visualization_agent, tools=code_tools, verbose=True)\\n\\n# Define the SQL query task\\nquery_task = (\\n    \\\"Connect to the SQLite database 'companydb' and execute the following query: \\\"\\n    \\\"SELECT * FROM MOCK_DATA ORDER BY salary DESC LIMIT 10. \\\"\\n    \\\"Save the results to a file named 'top_salaries.txt' and return the content.\\\"\\n)\\n\\ndef main():\\n    # First, execute SQL query\\n    sql_result = sql_executor.invoke({\\\"input\\\": query_task})\\n    print(f\\\"SQL Query Result: {sql_result['output']}\\\")\\n    \\n    # Then, create visualization\\n    visualization_task = (\\n        f\\\"Using the following data from the top 10 highest salaries: {sql_result['output']}\\\\n\\\"\\n        \\\"Create a bar chart showing first_name on the x-axis and salary on the y-axis. \\\"\\n        \\\"Save the visualization as 'salary_chart.png'.\\\"\\n    )\\n    visualization_result = visualization_executor.invoke({\\\"input\\\": visualization_task})\\n    print(f\\\"Visualization Result: {visualization_result['output']}\\\")\\n    \\n    return \\\"Workflow completed successfully!\\\"\\n\\nif __name__ == \\\"__main__\\\":\\n    main()\n```\n\n----------------------------------------\n\nTITLE: Complete Python Implementation of Code Execution Agent\nDESCRIPTION: The complete Python implementation of the Code Execution Agent using ComposioCrewAI. It sets up the environment, initializes tools and the language model, defines an agent and task, and executes the code to generate the Fibonacci sequence.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/code-execution-agent.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom composio_crewai import Action, App, ComposioToolSet\nfrom crewai import Agent, Crew, Process, Task\nfrom dotenv import load_dotenv\nfrom langchain_openai import ChatOpenAI\n\n# Load environment variables\nload_dotenv()\n\n# Set up Composio tools\ncomposio_toolset = ComposioToolSet()\n\n# Get tools from the Code Interpreter app\ntools = composio_toolset.get_tools(apps=[App.CODEINTERPRETER])\n\n# Initialize the language model\nllm = ChatOpenAI(model=\"gpt-4o\")\n\n# Define the Python executor agent\npython_executor_agent = Agent(\n    role=\"Python Executor\",\n    goal=\"Execute Python code to solve problems\",\n    backstory=\"\"\"You are an expert Python developer specializing in executing code to solve various problems.\n    Your job is to analyze problems, write efficient Python code to solve them, and execute the code to ensure it works correctly.\"\"\",\n    verbose=True,\n    allow_delegation=False,\n    tools=tools,\n    llm=llm\n)\n\n# Define a task for the agent\ntask = Task(\n    description=\"\"\"Write a Python function to calculate the Fibonacci sequence up to the 10th number.\n                Then, execute the code and return the result.\"\"\",\n    expected_output=\"The Fibonacci sequence and the execution result\",\n    agent=python_executor_agent\n)\n\n# Create a crew with the agent and task\ncrew = Crew(\n    agents=[python_executor_agent],\n    tasks=[task],\n    verbose=2,\n    process=Process.sequential\n)\n\n# Execute the task\nresult = crew.kickoff()\nprint(f\"Result: {result}\")\n```\n\n----------------------------------------\n\nTITLE: Defining File Structure for Composio Local Tools in Bash\nDESCRIPTION: Specifies the standard directory layout for organizing files related to a new custom local tool within the Composio project. Each tool resides in its own directory under `composio/tools/local/`, containing an `__init__.py`, `tool.py`, and an `actions/` subdirectory for action definitions.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/adding-local-tool.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposio/\n└── tools/\n   └── local/\n       └── <tool_name>/\n           ├── __init__.py\n           ├── tool.py\n           └── actions/\n               ├── __init__.py\n               └── <action_name>.py \n```\n\n----------------------------------------\n\nTITLE: Implementing Research Functionality for the Agent\nDESCRIPTION: Main logic for the Research Agent. Python defines a main function that creates a research prompt, executes the agent, and displays the response. JavaScript creates an Express endpoint that handles the research request, sets up an assistant and thread, manages tool calls, and returns results to the client, along with server initialization.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Define main function to run the agent\ndef main():\n    # Create the research prompt\n    prompt = (\n        f\"Please research on Arxiv about `{research_topic}`, Organize \"\n        f\"the top {n_issues} results as {n_issues} issues for \"\n        f\"a github repository, finally raise those issues with proper, \"\n        f\"title, body, implementation guidance and reference in \"\n        f\"{target_repo} repo, as well as relevant tags and assignee as \"\n        \"the repo owner.\"\n    )\n    \n    # Execute the agent\n    response = agent.chat(prompt)\n    \n    # Print the result\n    print(\"Response:\", response)\n    \n# Run the main function\nif __name__ == \"__main__\":\n    main()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Create endpoint to trigger the research\napp.get('/research', async (req, res) => {\n    try {\n        // Get the tools\n        const tools = await getTools();\n        \n        // Create assistant\n        const assistant = await createAssistant(tools);\n        \n        // Create the research prompt\n        const prompt = `Please research about \\`${researchTopic}\\`, organize \n            the top ${nIssues} results as ${nIssues} issues for \n            a GitHub repository, and finally raise those issues with proper \n            title, body, implementation guidance, and references in \n            the ${targetRepo} repo, as well as relevant tags and assignees as \n            the repo owner.`;\n        \n        // Create a thread with the user's request\n        const thread = await client.beta.threads.create({\n            messages: [{\n                role: \"user\",\n                content: prompt\n            }]\n        });\n        \n        // Start the assistant run\n        let run = await client.beta.threads.runs.create(thread.id, {\n            assistant_id: assistant.id,\n        });\n        \n        // Handle tool calls and wait for completion\n        run = await toolset.wait_and_handle_assistant_tool_calls(client, run, thread);\n        \n        // Check if the run completed successfully\n        if (run.status === \"completed\") {\n            const messages = await client.beta.threads.messages.list(thread.id);\n            res.json({ status: 'success', messages: messages.data });\n        } else {\n            res.status(500).json({ status: 'error', message: 'Run did not complete', run });\n        }\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ status: 'error', message: error.message });\n    }\n});\n\n// Start the Express server\napp.listen(PORT, () => {\n    console.log(`Research Agent server is running on port ${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Executing GitHub Action with OpenAI Assistant in JavaScript\nDESCRIPTION: Demonstrates using the Composio JavaScript SDK (`composio-core`) with the OpenAI SDK (`openai`) to create an assistant that stars a GitHub repository. Requires Node.js environment, `composio-core` and `openai` packages, API keys via environment variables (COMPOSIO_API_KEY, OPENAI_API_KEY), and a connected GitHub account. The script initializes clients, fetches tools, creates an assistant, defines an execution function, runs the task, and handles tool calls.\nSOURCE: https://github.com/composiohq/composio/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OpenAIToolSet } from \"composio-core\";\nimport OpenAI from \"openai\";\n\nconst toolset = new OpenAIToolSet({ apiKey: process.env.COMPOSIO_API_KEY });\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nconst tools = await toolset.getTools({ \n  actions: [\"GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER\"] \n});\n\nasync function createGithubAssistant(openai, tools) {\n  return await openai.beta.assistants.create({\n    name: \"Github Assistant\",\n    instructions: \"You're a GitHub Assistant, you can do operations on GitHub\",\n    tools: tools,\n    model: \"gpt-4o\"\n  });\n}\n\nasync function executeAssistantTask(openai, toolset, assistant, task) {\n  const thread = await openai.beta.threads.create();\n  \n  const run = await openai.beta.threads.runs.create(thread.id, {\n    assistant_id: assistant.id,\n    instructions: task,\n    tools: tools,\n    model: \"gpt-4o\",\n    stream: false\n  });\n  \n  const call = await toolset.waitAndHandleAssistantToolCalls(openai, run, thread);\n  console.log(call);\n}\n\n(async () => {\n  const githubAssistant = await createGithubAssistant(openai, tools);\n  \n  await executeAssistantTask(\n    openai,\n    toolset,\n    githubAssistant,\n    \"Star the repository 'composiohq/composio'\"\n  );\n})();\n```\n\n----------------------------------------\n\nTITLE: Defining Response Generation Logic and Preprocessor in Python\nDESCRIPTION: Defines an asynchronous function `generate_response` that takes a payload dictionary. It extracts Slack message details (timestamp, thread timestamp, channel), checks if the thread identified by `thread_ts` is already in the `responded_threads` set to avoid duplicates, and adds the `thread_ts` if it's a new thread. It also defines a nested preprocessor function `slack_send_message_preprocessor` designed to automatically inject required parameters (`thread_ts`, `channel`, `mrkdwn=False`) into Slack message sending actions triggered later.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def generate_response(payload: Dict[str, Any]):\n    ts = payload.get(\"data\", {}).get(\"ts\", \"\")\n    thread_ts = payload.get(\"data\", {}).get(\"thread_ts\", ts)\n    channel = payload.get(\"data\", {}).get(\"channel\", \"\")\n    \n    # Skip if already responded\n    if thread_ts in responded_threads:\n        return\n    \n    responded_threads.add(thread_ts)\n    \n    # Preprocessor to automatically inject Slack-specific parameters\n    def slack_send_message_preprocessor(inputs: Dict[str, Any]) -> Dict[str, Any]:\n        inputs[\"thread_ts\"] = ts          # Ensure reply goes to the correct thread\n        inputs[\"channel\"] = channel       # Target the specific channel\n        inputs[\"mrkdwn\"] = False         # Disable markdown for greentext formatting\n        return inputs\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAI Agent with Composio Tools\nDESCRIPTION: Complete example demonstrating how to initialize the Composio toolset, create an OpenAI Agent with GitHub tools, and run a task asynchronously. This demonstrates the integration between Composio and OpenAI Agents framework.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/openai_agents/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport dotenv\nfrom agents import Agent, Runner\n\nfrom composio_openai_agents import Action, ComposioToolSet\n\n# Load environment variables from .env\ndotenv.load_dotenv()\n\n# Initialize Composio toolset\ncomposio_toolset = ComposioToolSet()\n\n# Get all the tools\ntools = composio_toolset.get_tools(actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER])\n\n# Create an agent with the tools\nagent = Agent(\n    name=\"GitHub Agent\",\n    instructions=\"You are a helpful assistant that helps users with GitHub tasks.\",\n    tools=tools,\n)\n\n# Run the agent\nasync def main():\n    result = await Runner.run(agent, \"Star the repository composiohq/composio on GitHub\")\n    print(result.final_output)\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Complete JavaScript Implementation of Code Execution Agent\nDESCRIPTION: The complete JavaScript implementation of the Code Execution Agent using Composio Core. It configures the environment, sets up the agent with tools from Composio, and defines a function to solve and execute code for the Fibonacci sequence problem.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/code-execution-agent.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport dotenv from 'dotenv';\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { AgentExecutor, createOpenAIFunctionsAgent } from \"langchain/agents\";\nimport { pull } from \"langchain/hub\";\nimport { LangchainToolSet } from \"composio-core\";\n\ndotenv.config();\n\n// Set up Composio tools\nconst composioToolset = new LangchainToolSet({\n    apiKey: process.env.COMPOSIO_API_KEY\n});\n\nasync function main() {\n    // Get specific tools for code execution\n    const tools = await composioToolset.getTools({\n        actions: [\"codeinterpreter_execute_code\"]\n    });\n\n    // Initialize the language model\n    const llm = new ChatOpenAI({ model: \"gpt-4o\" });\n\n    // Create the agent\n    const prompt = await pull(\"hwchase17/openai-functions-agent\");\n    const agent = await createOpenAIFunctionsAgent({\n        llm,\n        tools,\n        prompt\n    });\n    \n    // Set up the agent executor\n    const agentExecutor = new AgentExecutor({\n        agent,\n        tools,\n        verbose: true\n    });\n\n    // Define the code execution function\n    async function executeCodeAgent(problem) {\n        const result = await agentExecutor.invoke({\n            input: `Write code to solve the following problem and execute it: ${problem}`\n        });\n        \n        return result.output;\n    }\n    \n    // Run the agent with a sample problem\n    const problem = \"Write a function to calculate the Fibonacci sequence up to the 10th number and display the result.\";\n    \n    const result = await executeCodeAgent(problem);\n    console.log(\"Result:\", result);\n}\n\nmain().catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Executing GitHub Repository Star Action with Claude\nDESCRIPTION: Creates a chat completion request to Claude with GitHub tools to star a repository based on conversational instructions.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/claude/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmy_task = \"Star a repo composiohq/composio on GitHub\"\n\n# Create a chat completion request to decide on the action\nresponse = client.beta.tools.messages.create(\n    model=\"claude-3-opus-20240229\",\n    max_tokens=1024,\n    tools= actions,\n    messages=[{\"role\": \"user\", \"content\": \"Star me composiohq/composio repo in github.\"}],\n)\npprint(response)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Function Calling Agent Worker for GitHub Operations\nDESCRIPTION: Setting up a LlamaIndex agent with system prompts and function calling capabilities to execute GitHub operations through natural language commands.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/llamaindex/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprefix_messages = [\n    ChatMessage(\n        role=\"system\",\n        content=(\n            \"You are now a integration agent, and what  ever you are requested, you will try to execute utilizing your toools.\"\n        ),\n    )\n]\n\nagent = FunctionCallingAgentWorker(\n    tools=tools,\n    llm=llm,\n    prefix_messages=prefix_messages,\n    max_function_calls=10,\n    allow_parallel_tool_calls=False,\n    verbose=True,\n).as_agent()\n```\n\n----------------------------------------\n\nTITLE: Importing libraries and initializing Composio and OpenAI clients\nDESCRIPTION: Code to import the necessary libraries and initialize the OpenAI client and Composio toolset. This setup is required before working with Composio tools and OpenAI assistants.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\nfrom composio_openai import ComposioToolSet, Action\n\nopenai_client = OpenAI()\ncomposio_toolset = ComposioToolSet()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OpenAIToolSet } from \"composio-core\";\nimport OpenAI from \"openai\";\n\nconst toolset = new OpenAIToolSet();\nconst openai = new OpenAI();\n```\n\n----------------------------------------\n\nTITLE: Managing RAG Knowledge Base with CrewAI and Composio in Python\nDESCRIPTION: This Python script utilizes the CrewAI framework and Composio RAG tools to automate knowledge base management. It initializes an OpenAI LLM (gpt-4o), sets up Composio tools for RAG, defines an agent (`rag_agent`) to handle RAG tasks, creates tasks for adding content (list of capital cities) and querying the knowledge base, and executes these tasks sequentially using a Crew. Dependencies include `composio_crewai`, `crewai`, `dotenv`, and `langchain_openai`, and requires environment variables (e.g., OpenAI API key) loaded via `.env`.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n```python Python\nimport os\nimport textwrap\n\nfrom composio_crewai import Action, App, ComposioToolSet\nfrom crewai import Agent, Crew, Process, Task\nfrom dotenv import load_dotenv\nfrom langchain_openai import ChatOpenAI\n\n# Load environment variables\nload_dotenv()\n\n# Initialize the language model\nllm = ChatOpenAI(model=\"gpt-4o\")\n\n# Set up Composio tools\ncomposio_toolset = ComposioToolSet()\n\n# Get tools for RAG operations\nrag_tools = composio_toolset.get_tools(apps=[App.RAG])\n\n# Define the RAG Agent\nrag_agent = Agent(\n    role=\"RAG Knowledge Base Manager\",\n    goal=\"Manage a knowledge base using RAG tools\",\n    backstory=\"\"\"You are an expert in managing knowledge bases and retrieving information.\n    Your job is to add content to the knowledge base and retrieve answers to user queries.\n    You use RAG (Retrieval-Augmented Generation) tools to efficiently store and retrieve information.\"\"\",\n    verbose=True,\n    allow_delegation=False,\n    tools=rag_tools,\n    llm=llm\n)\n\n# Define task for adding content\nadd_content_task = Task(\n    description=\"\"\"Add the following information to the knowledge base:\n    \n    1. Paris is the capital city of France.\n    2. London is the capital city of the United Kingdom.\n    3. Washington D.C. is the capital city of the United States.\n    4. Tokyo is the capital city of Japan.\n    5. Berlin is the capital city of Germany.\n    \n    Make sure to confirm that each piece of information is successfully added.\"\"\",\n    expected_output=\"Confirmation that all information was added to the knowledge base\",\n    agent=rag_agent\n)\n\n# Define task for querying\nquery_task = Task(\n    description=\"\"\"Query the knowledge base to answer the following question:\n    \"What is the capital of France?\"\n    \n    Return the answer with any supporting information from the knowledge base.\"\"\",\n    expected_output=\"The answer to the question based on the knowledge base\",\n    agent=rag_agent,\n    context=[add_content_task]  # This task depends on content being added first\n)\n\n# Create a crew with the agent and tasks\ncrew = Crew(\n    agents=[rag_agent],\n    tasks=[add_content_task, query_task],\n    verbose=2,\n    process=Process.sequential  # Tasks must run in order\n)\n\n# Execute the workflow\nresult = crew.kickoff()\nprint(textwrap.fill(f\"Final Result: {result}\", width=80))\n```\n```\n\n----------------------------------------\n\nTITLE: Complete Calendar Agent Implementation in JavaScript\nDESCRIPTION: This is the complete implementation of the Calendar Agent in JavaScript. It imports the necessary packages, initializes the language model, configures Google Calendar tools, defines utility functions for date/time, sets up the todo list, and creates/executes the agent to schedule calendar events.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/calendar-agent.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport dotenv from 'dotenv';\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { AgentExecutor, createOpenAIFunctionsAgent } from \"langchain/agents\";\nimport { pull } from \"langchain/hub\";\nimport { LangchainToolSet } from \"composio-core\";\n\ndotenv.config();\n\n// Initialize the language model\nconst llm = new ChatOpenAI({ model: \"gpt-4-turbo\"});\n\n// Define tools for the agents\nconst composioToolset = new LangchainToolSet({\n    apiKey: process.env.COMPOSIO_API_KEY\n});\n\n// Retrieve the current date and time\nconst getCurrentDate = () => new Date().toISOString().split('T')[0];\nconst getTimezone = () => new Date().toLocaleTimeString('en-us', { timeZoneName: 'short' }).split(' ')[2];\n\nconst date = getCurrentDate();\nconst timezone = getTimezone();\n\n// Setup Todo\nconst todo = `\n    1PM - 3PM -> Code solo\n`;\n\nasync function runAgent() {\n    const tools = await composioToolset.getTools({\n    actions: [\"googlecalendar_create_event\", \"googlecalendar_list_events\"]\n});\n    const prompt = await pull(\"hwchase17/openai-functions-agent\");\n    const agent = await createOpenAIFunctionsAgent({\n        llm,\n        tools,\n        prompt\n    });\n\nconst agentExecutor = new AgentExecutor({\n    agent,\n    tools,\n    verbose: true,\n});\n\nconst result = await agentExecutor.invoke({\n    input: `Book slots according to this todo list: ${todo}. \n            Label them with the work provided to be done in that time period. \n            Schedule it for today. Today's date is ${date} (it's in YYYY-MM-DD format) \n            and make the timezone be ${timezone}.`\n});\n\nconsole.log(result.output);\nreturn \"Agent execution completed\";\n}\n\nrunAgent().then(console.log).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Installing Composio Python Core Libraries\nDESCRIPTION: Command to install the core Composio libraries for Python using pip or uv package managers. Requires Python 3.8+.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\npip install composio_core composio_openai\n```\n\nLANGUAGE: uv\nCODE:\n```\nuv add composio_core composio_openai\n```\n\n----------------------------------------\n\nTITLE: Executing GitHub Action with OpenAI Assistant in Python\nDESCRIPTION: Demonstrates creating an OpenAI assistant configured with a Composio GitHub tool to star a specific repository. It requires `openai` and `composio-openai` packages, environment variables for API keys (COMPOSIO_API_KEY, OPENAI_API_KEY), and a pre-connected GitHub account. The script initializes clients, fetches the tool, creates an assistant and thread, executes the run, and handles tool calls.\nSOURCE: https://github.com/composiohq/composio/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\nfrom composio_openai import ComposioToolSet, App, Action\n\n# Initialize OpenAI client\nopenai_client = OpenAI(\n    api_key=\"{{OPENAIKEY}}\"\n)\n\n# Initialize the Composio Tool Set\ncomposio_tool_set = ComposioToolSet()\n\n# Get GitHub tools that are pre-configured\nactions = composio_tool_set.get_actions(\n    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]\n)\n\nmy_task = \"Star a repo composiodev/composio on GitHub\"\n\n# Setup OpenAI assistant\nassistant_instruction = \"You are a super intelligent personal assistant\"\nassistant = openai_client.beta.assistants.create(\n    name=\"Personal Assistant\",\n    instructions=assistant_instruction,\n    model=\"gpt-4-turbo\",\n    tools=actions,\n)\n\n# Create a thread\nthread = openai_client.beta.threads.create()\n\n# Add user message to thread\nmessage = openai_client.beta.threads.messages.create(\n    thread_id=thread.id,\n    role=\"user\",\n    content=my_task\n)\n\n# Execute Agent with integrations\nrun = openai_client.beta.threads.runs.create(\n    thread_id=thread.id,\n    assistant_id=assistant.id\n)\n\n# Execute Function calls\nresponse_after_tool_calls = composio_tool_set.wait_and_handle_assistant_tool_calls(\n    client=openai_client,\n    run=run,\n    thread=thread,\n)\n\nprint(response_after_tool_calls)\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Initializing Toolset & LLM - Python\nDESCRIPTION: This snippet imports core classes from composio_crewai, crewai, and langchain_openai. It creates a ComposioToolSet instance with your Composio API key and initializes a ChatOpenAI language model with the OpenAI API key. Replace the placeholders with actual API keys. Dependencies include the previously installed packages. This setup is necessary to grant agent and tool access for subsequent operations.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/crewai.mdx#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom composio_crewai import ComposioToolSet, App\nfrom crewai import Agent, Task, Crew\nfrom langchain_openai import ChatOpenAI\n\ntoolset = ComposioToolSet(api_key=\"<your-composio-api-key>\")\nllm = ChatOpenAI(api_key=\"<your-openai-api-key>\")\n```\n\n----------------------------------------\n\nTITLE: Full Composio GitHub Connection and Action Execution Flow in Python\nDESCRIPTION: A complete Python script (`connect_and_fetch_github.py`) illustrating the end-to-end Composio process. It covers loading environment variables (requires `COMPOSIO_API_KEY`), identifying the user entity, initiating an OAuth connection for GitHub using `entity.initiate_connection`, handling the redirect URL, polling for the connection to become active using `connection_request.wait_until_active`, and finally executing an action (`GITHUB_GET_THE_AUTHENTICATED_USER`) using the entity ID. Includes basic error handling. Requires the `composio-openai` and `python-dotenv` packages.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# filename: connect_and_fetch_github.py\nfrom composio_openai import ComposioToolSet, Action, App\nfrom dotenv import load_dotenv\nimport os\nimport sys\nimport time\n\n# Load environment variables from .env file\n# Ensure COMPOSIO_API_KEY is set\nload_dotenv()\n\ndef run_auth_flow():\n    # --- 1. Identify User & App ---\n    user_id_in_my_app = \"user-quickstart-py-example\" # Example user ID\n    app_to_connect = App.GITHUB # Use Enum for clarity\n\n    print(f\"--- Starting GitHub connection for Entity: {user_id_in_my_app} ---\")\n\n    toolset = ComposioToolSet()\n    entity = toolset.get_entity(id=user_id_in_my_app)\n\n    active_connection = None # Initialize variable\n\n    try:\n        # --- 2. Initiate Connection ---\n        print(f\"Initiating {app_to_connect.value} connection...\")\n        # Use app_name; SDK finds appropriate integration\n        connection_request = entity.initiate_connection(app_name=app_to_connect)\n\n        # --- 3. Handle Redirect & Wait for Activation (OAuth) ---\n        if connection_request.redirectUrl:\n            print(\"\\n!!! ACTION REQUIRED !!!\")\n            print(f\"Please visit this URL to authorize the connection:\\n{connection_request.redirectUrl}\\n\")\n            print(\"Waiting for connection to become active (up to 120 seconds)...\")\n\n            try:\n                # Poll Composio until the connection is marked active\n                active_connection = connection_request.wait_until_active(\n                    client=toolset.client, # Pass the underlying client\n                    timeout=120\n                )\n                print(f\"\\nConnection successful! ID: {active_connection.id}\")\n                # In a real app, you'd store active_connection.id linked to user_id_in_my_app\n            except Exception as e:\n                print(f\"Error waiting for connection: {e}\", file=sys.stderr)\n                print(\"Please ensure you visited the URL and approved the connection.\")\n                return # Exit if connection failed\n\n        else:\n            # Handle non-OAuth flows if needed (e.g., API Key where connection is instant)\n            print(\"Connection established (non-OAuth flow). Fetching details...\")\n            # Fetch the connection details using the ID from the request\n            active_connection = toolset.client.connected_accounts.get(connection_id=connection_request.connectedAccountId)\n            if active_connection.status != \"ACTIVE\":\n                 print(f\"Connection is not active (Status: {active_connection.status}). Exiting.\", file=sys.stderr)\n                 return\n\n\n        # --- 4. Execute Action ---\n        if active_connection and active_connection.status == \"ACTIVE\":\n            print(f\"\\nExecuting action using connection ID: {active_connection.id}\")\n            print(f\"Fetching GitHub username for entity: {user_id_in_my_app}...\")\n\n            user_info = toolset.execute_action(\n                action=Action.GITHUB_GET_THE_AUTHENTICATED_USER,\n                params={},\n                # Provide context via entity_id (recommended)\n                entity_id=user_id_in_my_app\n                # OR precisely target the connection (if ID was stored)\n                # connected_account_id=active_connection.id\n            )\n\n            print(\"\\n--- Execution Result ---\")\n            if user_info.get(\"successful\"):\n                username = user_info.get(\"data\", {}).get(\"login\", \"N/A\")\n                print(f\"Successfully fetched GitHub username: {username}\")\n            else:\n                print(f\"Failed to fetch user info: {user_info.get('error', 'Unknown error')}\")\n            # import json\n            # print(\"\\nFull response:\")\n            # print(json.dumps(user_info, indent=2))\n        else:\n             print(\"\\nSkipping action execution as connection is not active.\")\n\n\n    except Exception as e:\n        print(f\"\\nAn unexpected error occurred: {e}\", file=sys.stderr)\n\nif __name__ == \"__main__\":\n    run_auth_flow()\n```\n\n----------------------------------------\n\nTITLE: Executing the OpenAI Assistant with Composio tool handling\nDESCRIPTION: Code to execute an Assistant task that uses Composio tools. In Python, it prints the response, while JavaScript provides both streaming and non-streaming implementations.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint(response_after_tool_calls)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n//With Streaming\nasync function executeAssistantTask(openai, toolset, assistant, task) {\n    const thread = await openai.beta.threads.create();\n    const run = await openai.beta.threads.runs.create(thread.id, {\n        assistant_id: assistant.id,\n        instructions: task,\n        tools: tools,\n        model: \"gpt-4o-mini\",\n        stream: true\n    });\n\n    for await (const result of toolset.waitAndHandleAssistantStreamToolCalls(openai, run, thread)) {\n        console.log(result);\n    }\n}\n\n// Without Streaming\nasync function executeAssistantTask(openai, toolset, assistant, task) {\n    const thread = await openai.beta.threads.create();\n    const run = await openai.beta.threads.runs.create(thread.id, {\n        assistant_id: assistant.id,\n        instructions: task,\n        tools: tools,\n        model: \"gpt-4o-mini\",\n        stream: false\n    });\n    const call = await toolset.waitAndHandleAssistantToolCalls(openai, run, thread);\n    console.log(call);\n}\n\n(async() => {\n    const githubAssistant = await createGithubAssistant(openai, tools);\n    await executeAssistantTask(\n        openai, \n        toolset, \n        githubAssistant, \n        \"Star the repository 'composiohq/composio'\"\n    );\n})();\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Initializing Composio Tools and LLM\nDESCRIPTION: Import the required libraries and initialize the ChatOpenAI LLM and Composio toolset. This creates the foundation for using Composio tools with LangChain agents.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain.agents import create_openai_functions_agent, AgentExecutor\nfrom langchain import hub\nfrom langchain_openai import ChatOpenAI\nfrom composio_langchain import ComposioToolSet, App\n\nllm = ChatOpenAI()\ncomposio_toolset = ComposioToolSet()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { createOpenAIFunctionsAgent, AgentExecutor } from \"langchain/agents\";\nimport { LangchainToolSet } from \"composio-core\";\nimport { pull } from \"langchain/hub\";\n\nconst llm = new ChatOpenAI();\nconst toolset = new LangchainToolSet();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Composio Agent with OpenAI Integration - Python\nDESCRIPTION: Demonstrates how to connect OpenAI's client library with the Composio toolset for automating agentic tasks, such as starring a GitHub repository. Requires the `openai` and `composio-openai` Python packages; expects the user to have an OpenAI API key and GitHub integration configured. The code initializes Composio, fetches a relevant GitHub action, sets up an OpenAI assistant, handles threading and tool executions, and prints the result. Parameters include the OpenAI API key, user-defined task, and optional assistant instructions. Outputs assistant responses and integration results; may require additional setup for authentication and API access.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\nfrom composio_openai import ComposioToolSet, App, Action\n\nopenai_client = OpenAI(\n    api_key=\"{{OPENAIKEY}}\"\n)\n\n# Initialise the Composio Tool Set\n\ncomposio_tool_set = ComposioToolSet()\n\n# Get GitHub tools that are pre-configured\nactions = composio_tool_set.get_actions(\n    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]\n)\n\nmy_task = \"Star a repo composiodev/composio on GitHub\"\n\n# Setup openai assistant\nassistant_instruction = \"You are a super intelligent personal assistant\"\n\nassistant = openai_client.beta.assistants.create(\n    name=\"Personal Assistant\",\n    instructions=assistant_instruction,\n    model=\"gpt-4-turbo\",\n    tools=actions,\n)\n\n# create a thread\nthread = openai_client.beta.threads.create()\n\nmessage = openai_client.beta.threads.messages.create(\n    thread_id=thread.id,\n    role=\"user\",\n    content=my_task\n)\n\n# Execute Agent with integrations\nrun = openai_client.beta.threads.runs.create(\n    thread_id=thread.id,\n    assistant_id=assistant.id\n)\n\n\n# Execute Function calls\nresponse_after_tool_calls = composio_tool_set.wait_and_handle_assistant_tool_calls(\n    client=openai_client,\n    run=run,\n    thread=thread,\n)\n\nprint(response_after_tool_calls)\n```\n\n----------------------------------------\n\nTITLE: Fetching Composio Tool Definitions\nDESCRIPTION: Code for retrieving specific tool definitions from Composio, formatted for LLM consumption.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/introduction.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Fetch the tool for getting the authenticated user's GitHub info\ntools = toolset.get_tools(actions=[Action.GITHUB_GET_THE_AUTHENTICATED_USER])\nprint(f\"Fetched {len(tools)} tool(s) for the LLM.\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Fetch the tool for getting the authenticated user's GitHub info\nconst tools = await toolset.getTools({ actions: [\"GITHUB_GET_THE_AUTHENTICATED_USER\"] });\nconsole.log(`Fetched ${tools.length} tool(s) for the LLM.`);\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Composio with LangChain\nDESCRIPTION: Install the necessary packages to use Composio with LangChain. For Python, this includes composio-langchain and langchain_openai. For JavaScript, it includes composio-core, langchain, and @langchain/openai.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-langchain langchain_openai\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install composio-core langchain @langchain/openai\n```\n\n----------------------------------------\n\nTITLE: Integrating GitHub Tools with Composio\nDESCRIPTION: Imports necessary Composio components and retrieves GitHub-specific tools. This code creates a toolset that enables OpenAI models to access GitHub functionality through Composio's integration layer.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/openai/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_openai import App, ComposioToolSet\n\ntoolset = ComposioToolSet()\nactions = toolset.get_tools(apps=[App.GITHUB])\n```\n\n----------------------------------------\n\nTITLE: Setting Up Composio Tools for Research Agent\nDESCRIPTION: Initialize the tools the Research Agent will use. Python code sets up Composio toolset with GitHub issue creation and ArXiv tools, while also defining a system message for the agent. JavaScript initializes the Composio toolset with the API key and creates a function to get tools for search and GitHub interactions.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Get Composio toolset and add ArXiv tools\ncomposio_toolset = ComposioToolSet()\ngithub_tools = composio_toolset.get_actions(actions=[Action.GITHUB_CREATE_AN_ISSUE])\narxiv_tool = ArxivToolSpec()\n\n# Define system message\nprefix_messages = [\n    ChatMessage(\n        role=\"system\",\n        content=(\n            \"You are now a research agent, and whatever you are \"\n            \"requested, you will try to execute utilizing your tools.\"\n        ),\n    )\n]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize the Composio toolset\nconst toolset = new OpenAIToolSet({\n    apiKey: process.env.COMPOSIO_API_KEY,\n});\n\n// Get the necessary tools for research and GitHub interaction\nconst getTools = async () => {\n    return await toolset.get_actions([\n        Action.SERPAPI_SEARCH,\n        Action.GITHUB_USERS_GET_AUTHENTICATED,\n        Action.GITHUB_ISSUES_CREATE\n    ]);\n};\n```\n\n----------------------------------------\n\nTITLE: Automating Newsletter Summarization and Delivery with Composio - Python\nDESCRIPTION: This snippet implements a sequential multi-agent workflow for retrieving, summarizing, and emailing newsletter emails using the Composio CrewAI and LangChain OpenAI in Python. It loads configuration from environment variables, sets up three agent roles (fetcher, summarizer, sender), each with associated tasks, and orchestrates the end-to-end flow using the Crew object. Dependencies include 'composio_crewai', 'crewai', 'langchain_openai', 'python-dotenv', and Gmail API credentials. Agents communicate via tasks: one fetches emails within the specified date range, another summarizes them, and the last sends the compiled digest, with tasks sequenced via context lists. Inputs: date range, agent/task definitions; Output: status/result of the sent summary email.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\\nfrom datetime import datetime, timedelta\\n\\nfrom composio_crewai import App, ComposioToolSet\\nfrom crewai import Agent, Crew, Process, Task\\nfrom dotenv import load_dotenv\\nfrom langchain_openai import ChatOpenAI\\n\\n# Load environment variables\\nload_dotenv()\\n\\n# Initialize the language model\\nllm = ChatOpenAI(model=\\\"gpt-4o\\\")\\n\\n# Set up Composio tools\\ncomposio_toolset = ComposioToolSet()\\n  \\n# Get Gmail tools\\ngmail_tools = composio_toolset.get_tools(apps=[App.GMAIL])\\n  \\n# Get today's date and the date from 7 days ago\\ntoday = datetime.today().strftime(\\\"%Y/%m/%d\\\")\\nweek_ago = (datetime.today() - timedelta(days=7)).strftime(\\\"%Y/%m/%d\\\")\\n\\n# Define the Email Fetcher Agent\\nemail_fetcher = Agent(\\n    role=\\\"Email Fetcher\\\",\\n    goal=\\\"Fetch all newsletter emails\\\",\\n    backstory=\\\"\"\"You are an Email Fetcher specialized in finding newsletter emails.\\n    Your job is to identify and retrieve recent newsletter emails from the user's inbox.\"\"\\\",\\n    verbose=True,\\n    tools=gmail_tools,\\n    llm=llm\\n)\\n\\n# Define the Email Summarizer Agent\\nsummarizer = Agent(\\n    role=\\\"Newsletter Summarizer\\\",\\n    goal=\\\"Create concise summaries of newsletter content\\\",\\n    backstory=\\\"\"\"You are a Newsletter Summarizer who excels at distilling information.\\n    You can read newsletter emails and create brief, informative summaries of their main points.\"\"\\\",\\n    verbose=True,\\n    llm=llm\\n)\\n\\n# Define the Email Sender Agent\\nemail_sender = Agent(\\n    role=\\\"Email Sender\\\",\\n    goal=\\\"Send email with newsletter summaries\\\",\\n    backstory=\\\"\"\"You are an Email Sender who specializes in composing and sending emails.\\n    You take summaries and convert them into well-formatted emails before sending them to recipients.\"\"\\\",\\n    verbose=True,\\n    tools=gmail_tools,\\n    llm=llm\\n)\\n\\n# Define tasks for each agent\\nfetch_task = Task(\\n    description=f\\\"\"\"Search for newsletter emails in the inbox from {week_ago} to {today}.\\n    Return a list of emails with their subjects, senders, and content.\"\"\\\",\\n    expected_output=\\\"A list of newsletter emails with their content\\\",\\n    agent=email_fetcher\\n)\\n\\nsummarize_task = Task(\\n    description=\\\"\"\"Create a concise summary of each newsletter email.\\n    Identify the key points, announcements, and insights from each newsletter.\\n    Format your summaries neatly with bullet points.\"\"\\\",\\n    expected_output=\\\"Summarized content from all newsletters\\\",\\n    agent=summarizer,\\n    context=[fetch_task]\\n)\\n\\nsend_task = Task(\\n    description=\\\"\"\"Compose an email with the newsletter summaries.\\n    Send it to youremail@example.com with the subject 'Weekly Newsletter Digest'.\\n    Format the email in a reader-friendly way with headings for each newsletter.\"\"\\\",\\n    expected_output=\\\"Confirmation that the email was sent\\\",\\n    agent=email_sender,\\n    context=[summarize_task]\\n)\\n\\n# Create and run the crew\\ncrew = Crew(\\n    agents=[email_fetcher, summarizer, email_sender],\\n    tasks=[fetch_task, summarize_task, send_task],\\n    verbose=2,\\n    process=Process.sequential\\n)\\n\\n# Execute the workflow\\nresult = crew.kickoff()\\nprint(f\\\"Result: {result}\\\")\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Initializing ComposioToolSet\nDESCRIPTION: Import necessary dependencies and initialize the Composio toolset for LangGraph integration\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langgraph.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Literal\nfrom langchain_openai import ChatOpenAI\nfrom langgraph.graph import MessagesState, StateGraph\nfrom langgraph.prebuilt import ToolNode\nfrom composio_langgraph import Action, ComposioToolSet, App\n\ncomposio_toolset = ComposioToolSet()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LangGraphToolSet } from \"composio-core\";\nimport { ToolNode } from \"@langchain/langgraph/prebuilt\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { StateGraph, END, MessagesAnnotation, START } from \"@langchain/langgraph\";\nimport { HumanMessage } from \"@langchain/core/messages\";\n\nconst composioToolset = new LangGraphToolSet();\n```\n\n----------------------------------------\n\nTITLE: Initializing Host Workspace in Python\nDESCRIPTION: Sets up a host workspace to run local tools directly on the machine. Uses OpenAI client to list files in the current directory using the FILETOOL_LIST_FILES tool.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/workspaces/workspaces.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_openai import ComposioToolSet, App, Action, WorkspaceType\nfrom openai import OpenAI\n\nclient = OpenAI()\n\ntoolset = ComposioToolSet(workspace_config=WorkspaceType.Host())\nentity = toolset.get_entity(id=\"default\")\ntools = toolset.get_tools([\"FILETOOL_LIST_FILES\"])\n\nquestion = \"List all files in the current directory\"\n\nresponse = client.chat.completions.create(\n    model=\"gpt-4o-mini\",\n    max_tokens=1024,\n    tools=tools,\n    messages=[{\"role\": \"user\", \"content\": question}],\n)\nresult = toolset.handle_tool_calls(response)\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Configuring Composio Slack Tool and Calling OpenAI API in Python\nDESCRIPTION: Configures the Composio `SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL` tool using `toolset.get_tools`. It attaches the previously defined `slack_send_message_preprocessor` to automatically handle message parameters like thread timestamp, channel, and markdown settings. Subsequently, it calls the OpenAI `chat.completions.create` method using the `gpt-4.5-preview` model, providing a system prompt for generating snarky greentext responses, the user's message content from the payload, and the configured Composio tools. Finally, it processes any tool calls returned by the OpenAI response using `toolset.handle_tool_calls` with the default entity.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Configure tools with the preprocessor to handle Slack-specific parameters\ntools = toolset.get_tools(\n    [Action.SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL],\n    processors={\n        \"pre\": {\n            Action.SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL: slack_send_message_preprocessor\n        }\n    }\n)\n\nresponse = client.chat.completions.create(\n    model=\"gpt-4.5-preview\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"Given a slack text. Generate a snarky greentext response mocking the user. Render the response in ``` codeblocks\"},\n        {\"role\": \"user\", \"content\": payload.get(\"data\", {}).get(\"text\")}\n    ],\n    tools=tools,\n    tool_choice=\"required\"\n)\ntoolset.handle_tool_calls(response, entity_id=\"default\")\n```\n\n----------------------------------------\n\nTITLE: Full Composio GitHub Connection and Action Execution Flow in TypeScript\nDESCRIPTION: A complete TypeScript script (`connectAndFetchGithub.ts`) showing the end-to-end Composio process. It includes setting up the environment (requires `COMPOSIO_API_KEY`), identifying the user entity using `toolset.getEntity`, initiating a GitHub OAuth connection via `entity.initiateConnection`, handling the redirect URL, polling for activation using `connectionRequest.waitUntilActive`, and executing the `GITHUB_GET_THE_AUTHENTICATED_USER` action. Includes basic error handling and uses async/await. Requires the `composio-core` and `dotenv` packages.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// filename: connectAndFetchGithub.ts\nimport { OpenAIToolSet, Action, App, ConnectionRequest } from \"composio-core\";\nimport dotenv from \"dotenv\";\n\n// Load environment variables from .env file\n// Ensure COMPOSIO_API_KEY is set\ndotenv.config();\n\n// Helper function to introduce delay\nconst sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nasync function main() { // Renamed to main for standard practice\n    // --- 1. Identify User & App ---\n    const userIdInMyApp = \"user-quickstart-ts-example\"; // Example user ID\n    const appToConnect = App.GITHUB; // Use Enum\n\n    console.log(`--- Starting GitHub connection for Entity: ${userIdInMyApp} ---`);\n\n    const toolset = new OpenAIToolSet(); // Initialize ToolSet\n    let connectionRequest: ConnectionRequest | null = null;\n    let activeConnection: any = null; // Initialize variable\n\n    try {\n        const entity = await toolset.getEntity(userIdInMyApp);\n\n        // --- 2. Initiate Connection ---\n        console.log(`Initiating ${appToConnect} connection...`);\n        // Use appName; SDK finds appropriate integration\n        connectionRequest = await entity.initiateConnection({\n            appName: appToConnect,\n        });\n\n        // --- 3. Handle Redirect & Wait for Activation (OAuth) ---\n        if (connectionRequest?.redirectUrl) {\n            console.log(\"\\n!!! ACTION REQUIRED !!!\");\n            console.log(`Please visit this URL to authorize the connection:\\n${connectionRequest.redirectUrl}\\n`);\n            console.log(\"Waiting for connection to become active (up to 120 seconds)...\");\n\n            try {\n                // Poll Composio until the connection is marked active\n                activeConnection = await connectionRequest.waitUntilActive(120); // Wait up to 120 seconds\n                console.log(`\\nConnection successful! ID: ${activeConnection.id}`);\n                // In a real app, you'd store activeConnection.id linked to userIdInMyApp\n            } catch (e) {\n                console.error(\"Error waiting for connection:\", e);\n                console.error(\"Please ensure you visited the URL and approved the connection.\");\n                return; // Exit if connection failed\n            }\n        } else if (connectionRequest?.connectedAccountId) {\n             // Handle non-OAuth flows if needed\n             console.log(\"Connection established (non-OAuth flow). Fetching details...\");\n             // Wait a moment for backend processing if needed, then fetch details\n             await sleep(2000); // Small delay might be needed\n             activeConnection = await toolset.client.connectedAccounts.get({\n                 connectedAccountId: connectionRequest.connectedAccountId\n             });\n              if (activeConnection.status !== \"ACTIVE\") {\n                 console.error(`Connection is not active (Status: ${activeConnection.status}). Exiting.`);\n                 return;\n              }\n              console.log(`Connection active! ID: ${activeConnection.id}`);\n        } else {\n             console.error(\"Failed to initiate connection properly.\");\n             return;\n        }\n\n        // --- 4. Execute Action ---\n        // [Code for executing the action would go here, similar to the Python example]\n        // For brevity, the execution part is omitted but follows the pattern shown earlier.\n        // You would typically call toolset.executeAction here using entityId or activeConnection.id\n\n    } catch (error) {\n        console.error(\"\\nAn unexpected error occurred:\", error);\n    }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Complete Research Assistant Implementation in Python\nDESCRIPTION: This snippet combines all the previous steps into a complete implementation of the research assistant. It includes importing libraries, initializing the language model and tools, defining the agent and task, and executing the research process.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/research_assistant.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom crewai import Agent, Task, Crew, Process\nfrom composio_langchain import ComposioToolSet, App\nfrom langchain_openai import ChatOpenAI\nimport os\nimport dotenv\n\n# Load environment variables\ndotenv.load_dotenv()\n\n# Initialize the language model with OpenAI API key and model name\nllm = ChatOpenAI(\n    openai_api_key=os.environ[\"OPENAI_API_KEY\"],\n    model_name=\"gpt-4o\"\n)\n\n# Setup tools using ComposioToolSet\ncomposio_toolset = ComposioToolSet()\ntools = composio_toolset.get_tools(apps=[App.SERPAPI])\n\n# Define the Researcher agent with its role, goal, and backstory\nresearcher = Agent(\n    role='Researcher',\n    goal='Search the internet for the information requested',\n    backstory=\"\"\"\n    You are a researcher. Using the information in the task, you find out some of the most popular facts about the topic along with some of the trending aspects.\n    You provide a lot of information thereby allowing a choice in the content selected for the final blog.\n    \"\"\",\n    verbose=True,  # Enable verbose logging for the agent\n    allow_delegation=False,  # Disable delegation\n    tools=tools,  # Assign the tools to the agent\n    llm=llm  # Assign the language model to the agent\n)\n\n# Define the research task with its description and expected output\ntask1 = Task(\n    description=\"\"\"\n    Research about open source LLMs vs closed source LLMs.\n    Your final answer MUST be a full analysis report\n    \"\"\", #you can add your own topic after \"Research about {your topic}\"\n    expected_output='When the research report is ready',  # Define the expected output\n    agent=researcher  # Assign the task to the researcher agent\n)\n\n# Execute the task\ntask1.execute()\n\n# Print the result of the task execution\nprint(task1.result)\n```\n\n----------------------------------------\n\nTITLE: Complete Calendar Agent Implementation in Python\nDESCRIPTION: This is the complete implementation of the Calendar Agent in Python. It includes importing packages, initializing the language model, setting up Google Calendar tools, defining the todo list, and creating/executing the agent that converts todo list items into calendar events.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/calendar-agent.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Import base packages\nimport os\nfrom datetime import datetime\n\nfrom composio_crewai import App, ComposioToolSet\nfrom crewai import Agent, Task\nfrom dotenv import load_dotenv\nfrom langchain_openai import ChatOpenAI\n\n# Load environment variables\nload_dotenv()\n\n# Initialize the language model\nllm = ChatOpenAI(model=\"gpt-4o\")\n\n# Define tools for the agents\n# We are using Google calendar tool from composio to connect to our calendar account.\ncomposio_toolset = ComposioToolSet()\ntools = composio_toolset.get_tools(apps=[App.GOOGLECALENDAR])\n\n# Retrieve the current date and time\ndate = datetime.today().strftime(\"%Y-%m-%d\")\ntimezone = datetime.now().astimezone().tzinfo\n\n# Setup Todo\ntodo = \"\"\"\n    1PM - 3PM -> Code,\n    5PM - 7PM -> Meeting,\n    9AM - 12AM -> Learn something,\n    8PM - 10PM -> Game\n\"\"\"\n\n# Create and Execute Agent.\ndef run_crew():\n    calendar_agent = Agent(\n        role=\"Google Calendar Agent\",\n        goal=\"\"\"You take action on Google Calendar using Google Calendar APIs\"\"\",\n        backstory=\"\"\"You are an AI agent responsible for taking actions on Google Calendar on users' behalf.\n        You need to take action on Calendar using Google Calendar APIs. Use correct tools to run APIs from the given tool-set.\"\"\",\n        verbose=True,\n        tools=tools,\n        llm=llm,\n    )\n    task = Task(\n        description=f\"Book slots according to {todo}. Label them with the work provided to be done in that time period. Schedule it for today. Today's date is {date} (it's in YYYY-MM-DD format) and make the timezone be {timezone}.\",\n        agent=calendar_agent,\n        expected_output=\"if free slot is found\",\n    )\n    crew = Crew(agents=[calendar_agent], tasks=[task])\n    result = crew.kickoff()\n    print(result)\n    return result\n\nrun_crew()\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Tools via ComposioToolSet\nDESCRIPTION: Code to initialize the Composio toolset and fetch specific GitHub actions that will be available to the LangGraph agent, such as starring repositories and getting authenticated user information.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langgraph/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_langgraph import Action, ComposioToolSet\n\n# Initialize the toolset for GitHub\ncomposio_toolset = ComposioToolSet()\ntools = composio_toolset.get_actions(\n    actions=[\n        Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER,\n        Action.GITHUB_USERS_GET_AUTHENTICATED,\n    ])\ntool_node = ToolNode(tools)\n```\n\n----------------------------------------\n\nTITLE: Executing GitHub Repository Star Task with Autogen Agent\nDESCRIPTION: Demonstrates how to initiate a task with the configured agent to star a GitHub repository using natural language commands. The task is executed through the UserProxyAgent initiating a chat with the AssistantAgent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/autogen/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntask = \"Star a repo composiohq/composio on GitHub\"\n\n# Initiate the task\nresponse = user_proxy.initiate_chat(chatbot, message=task)\n\nprint(response.chat_history)\n```\n\n----------------------------------------\n\nTITLE: Initializing Language Model and Defining Tools for SQL Agent\nDESCRIPTION: Setup code for initializing the language model (GPT-4) and defining the necessary tools for SQL operations, file operations, and code interpretation for data visualization. The Python implementation directly creates tool instances while JavaScript defines async functions to retrieve tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/sql-agent.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Initialize the language model\nllm = ChatOpenAI(model=\"gpt-4o\")\n\n# Initialize the Composio ToolSet\ncomposio_toolset = ComposioToolSet()\n\n# Get tools for SQL and File operations\nsql_file_tools = composio_toolset.get_tools(apps=[App.SQLTOOL, App.FILETOOL])\n\n# Get tools for code interpreter (for plotting graphs)\ncode_tools = composio_toolset.get_tools(apps=[App.CODEINTERPRETER])\n\n# Get all tools combined\nall_tools = composio_toolset.get_tools(apps=[App.SQLTOOL, App.FILETOOL, App.CODEINTERPRETER])\n\n# Pull the prompt template for the agent\nprompt = hub.pull(\"hwchase17/openai-functions-agent\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize the Composio ToolSet\nconst composioToolset = new ComposioToolSet({\n    apiKey: process.env.COMPOSIO_API_KEY\n});\n\n// Initialize the language model\nconst llm = new ChatOpenAI({ model: \"gpt-4-turbo\" });\n\n// Function to get SQL and File tools\nconst getSQLTools = async () => {\n    return await composioToolset.getTools({ \n        apps: [\"sqltool\", \"filetool\"] \n    });\n};\n\n// Function to get all tools including code interpreter\nconst getAllTools = async () => {\n    return await composioToolset.getTools({ \n        apps: [\"sqltool\", \"filetool\", \"codeinterpreter\"] \n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Executing LangChain Agent to Star a GitHub Repository\nDESCRIPTION: This code demonstrates how to create and execute a LangChain agent to perform a task, specifically starring a repository on GitHub using natural language input.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langchain/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntask = \"Star a repo composiohq/composio on GitHub\"\n\n# Create and set up the agent\nagent = create_openai_functions_agent(llm, tools, prompt)\nagent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)\n\n# Execute the task\nagent_executor.invoke({\"input\": task})\n```\n\n----------------------------------------\n\nTITLE: Initializing Base Packages and LLM Configuration\nDESCRIPTION: Setting up necessary imports and configuring the Groq LLM with specific model parameters.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/groq.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Initialise imports\nfrom langchain.agents import AgentExecutor\nfrom langchain import hub\nfrom langchain_groq import ChatGroq\nfrom langgraph.prebuilt import create_react_agent\n\nllm = ChatGroq(model=\"mixtral-8x7b-32768\", temperature=0)\n\nprompt = hub.pull(\"hwchase17/react\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Importing necessary modules from langchain and composio-core packages\nimport dotenv from 'dotenv';\ndotenv.config();\n\nimport { ChatGroq } from \"@langchain/groq\";\nimport { AgentExecutor, createReactAgent } from \"langchain/agents\";\nimport { LangchainToolSet } from \"composio-core\";\nimport { pull } from \"langchain/hub\";\n\n\n// Creating an instance of ChatGroq with specific model and temperature settings\nconst llm = new ChatGroq({\n  model: \"mixtral-8x7b-32768\",\n  temperature: 0,\n});\n\n// Pulling a chat prompt template asynchronously using the pull function\nconst prompt = await pull<ChatPromptTemplate>(\n\"hwchase17/react\"\n);\n```\n\n----------------------------------------\n\nTITLE: Webhook Server Implementation\nDESCRIPTION: Example implementations of webhook servers in Python (using FastAPI) and TypeScript (using Express) to handle incoming trigger events. Includes request handling and payload processing.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Request\nfrom typing import Dict, Any\nimport uvicorn\nimport json\n\napp = FastAPI(title=\"Webhook Demo\")\n\n@app.post(\"/webhook\")\nasync def webhook_handler(request: Request):\n    # Get the raw payload\n    payload = await request.json()\n    \n    # Log the received webhook data\n    print(\"Received webhook payload:\")\n    print(json.dumps(payload, indent=2))\n    \n    # Return a success response\n    return {\"status\": \"success\", \"message\": \"Webhook received\"}\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\nimport type { Request, Response } from 'express';\nimport bodyParser from 'body-parser';\n\nconst app = express();\napp.use(bodyParser.json());\n\napp.post('/webhook', async (req: Request, res: Response) => {\n    const payload = req.body;\n    console.log('Received webhook payload:');\n    console.log(JSON.stringify(payload, null, 2));\n    res.status(200).json({ status: 'success', message: 'Webhook received' });\n});\n\nconst PORT = process.env.PORT || 8000;\n\napp.listen(PORT, () => {\n    console.log(`Server is running on http://0.0.0.0:${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Direct Tool Execution - Python Implementation\nDESCRIPTION: Shows how to directly execute a GitHub issue creation tool using Python. The example includes error handling and demonstrates parameter passing for the action execution.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/executing-tools.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_openai import ComposioToolSet, Action\n# Assumes toolset is initialized and authenticated\n\ntoolset = ComposioToolSet()\n\nprint(\"Creating GitHub issue directly...\")\ntry:\n    result = toolset.execute_action(\n        action=Action.GITHUB_CREATE_AN_ISSUE,\n        params={\n            \"owner\": \"composiohq\",  # Replace with actual owner\n            \"repo\": \"agi\",  # Replace with actual repo\n            \"title\": \"New Issue via Composio execute_action\",\n            \"body\": \"This issue was created directly using the Composio SDK.\",\n            # Other optional params like 'assignees', 'labels' can be added here\n        },\n        # entity_id=\"your-user-id\" # Optional: Specify if not 'default'\n    )\n\n    if result.get(\"successful\"):\n        print(\"Successfully created issue!\")\n        # Issue details are often in result['data']\n        print(\"Issue URL:\", result.get(\"data\", {}).get(\"html_url\"))\n    else:\n        print(\"Failed to create issue:\", result.get(\"error\"))\n\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Composio Tools for AI Agent\nDESCRIPTION: Sets up the Composio toolset and retrieves the SERP API tool for use in the AI agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/news_summary_agent.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncomposio_toolset = ComposioToolSet()\ntools = composio_toolset.get_tools(apps=[App.SERPAPI])\n```\n\n----------------------------------------\n\nTITLE: Listing Required Python Packages\nDESCRIPTION: A simple list of Python package dependencies needed for the project. It includes CrewAI for agent-based workflows, a Composio integration with CrewAI, LangChain's OpenAI integration, and python-dotenv for managing environment variables.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/crewai/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncrewai\ncomposio-crewai\nlangchain-openai\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Calendar Agent\nDESCRIPTION: These commands install the necessary packages for the Calendar Agent project in both Python and JavaScript environments. For Python, it uses composio-crewai and langchain-openai. For JavaScript, it uses composio-core, dotenv, langchain, and @langchain/openai.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/calendar-agent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install composio-crewai langchain-openai\n```\n\nLANGUAGE: javascript\nCODE:\n```\npnpm add composio-core dotenv langchain @langchain/openai\n```\n\n----------------------------------------\n\nTITLE: Initiating GitHub Connection Programmatically in Python\nDESCRIPTION: Uses the `ComposioToolSet` instance's `initiate_connection` method to start the OAuth authentication flow for the GitHub app (`App.GITHUB`). It prints the unique redirect URL that the user must visit in their browser to authorize the connection. Requires `composio_llamaindex` library, an initialized `ComposioToolSet`, and the `COMPOSIO_API_KEY` environment variable set.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/llamaindex.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrequest = toolset.initiate_connection(app=App.GITHUB)\nprint(f\"Open this URL to authenticate: {request.redirectUrl}\")\n```\n\n----------------------------------------\n\nTITLE: Finding Composio Tools by Use Case in TypeScript (Experimental)\nDESCRIPTION: Demonstrates an experimental feature using `toolset.client.actions.findActionEnumsByUseCase`. It takes a natural language `useCase` query (e.g., \"create a new page in notion\") and optionally filters by `apps` to find relevant action name strings via semantic search. The found action names are then passed to `toolset.getTools` to fetch the actual tool schemas. The `advanced: true` flag can be used for complex queries.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nasync function fetchToolsByUseCase() {\n  // Describe the task\n  const query = \"create a new page in notion\";\n\n  // Find relevant action ENUMS\n  const relevantActions = await toolset.client.actions.findActionEnumsByUseCase({\n      useCase: query,\n      apps: [App.NOTION] // Optionally scope the search\n      // advanced: true // Use for complex queries needing multiple tools\n  });\n\n  console.log(\"Found relevant action enums:\", relevantActions);\n\n  // Fetch the actual tool schemas for the found actions\n  if (relevantActions && relevantActions.length > 0) {\n      const notionTools = await toolset.getTools({ actions: relevantActions });\n      console.log(`Fetched ${notionTools.length} tool(s) for the use case.`);\n  } else {\n      console.log(\"No relevant actions found for the use case.\");\n  }\n}\n\n// Use the `notionTools` in your agent\n\nfetchToolsByUseCase();\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Tools using ComposioToolSet in Python\nDESCRIPTION: Retrieves all available Composio tools associated with the connected GitHub app (`App.GITHUB`) using the `get_tools` method of the `ComposioToolSet` instance. These tools represent the actions (like starring a repo) that the LlamaIndex agent can perform on GitHub via Composio. Requires a previously connected GitHub account and an initialized `ComposioToolSet`.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/llamaindex.mdx#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntools = toolset.get_tools(apps=[App.GITHUB])\n```\n\n----------------------------------------\n\nTITLE: Direct Tool Execution - TypeScript Implementation\nDESCRIPTION: Demonstrates direct execution of a GitHub issue creation tool using TypeScript. Includes error handling and shows how to handle the response data.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/executing-tools.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAIToolSet } from \"composio-core\";\n// Assumes toolset is initialized and authenticated\n\nconst toolset = new OpenAIToolSet();\n\nasync function createIssue() {\n  console.log(\"Creating GitHub issue directly...\");\n  try {\n    const result = await toolset.executeAction({\n      action: \"GITHUB_CREATE_AN_ISSUE\", // Use Enum for type safety\n      params: {\n        owner: \"composiohq\", // Replace with actual owner\n        repo: \"agi\", // Replace with actual repo\n        title: \"New Issue via Composio executeAction\",\n        body: \"This issue was created directly using the Composio SDK.\",\n      },\n      // entityId: \"your-user-id\" // Optional: Specify if not 'default'\n    });\n\n    if (result.successful) {\n      console.log(\"Successfully created issue!\");\n      // Issue details are often in result.data\n      console.log(\"Issue URL:\", (result.data as any)?.html_url);\n    } else {\n      console.error(\"Failed to create issue:\", result.error);\n    }\n  } catch (error) {\n    console.error(\"An error occurred:\", error);\n  }\n}\n\ncreateIssue();\n```\n\n----------------------------------------\n\nTITLE: Initializing Tools for Research Assistant in Python\nDESCRIPTION: This code initializes the ComposioToolSet and retrieves tools for SerpAPI search functionality.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/research_assistant.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncomposio_toolset = ComposioToolSet()\ntools = composio_toolset.get_tools(actions=[Action.SERPAPI_SEARCH])\n```\n\n----------------------------------------\n\nTITLE: Initializing Language Model and Tools for Calendar Agent\nDESCRIPTION: This code initializes the language model (GPT-4 variants) and sets up Google Calendar tools from Composio. It also retrieves the current date and timezone information needed for scheduling calendar events correctly.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/calendar-agent.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\n\n# Initialize the language model\nllm = ChatOpenAI(model=\"gpt-4o\")\n\n# Define tools for the agents\n# We are using Google calendar tool from composio to connect to our calendar account.\ncomposio_toolset = ComposioToolSet()\ntools = composio_toolset.get_tools(apps=[App.GOOGLECALENDAR])\n\n# Retrieve the current date and time\ndate = datetime.today().strftime(\"%Y-%m-%d\")\ntimezone = datetime.now().astimezone().tzinfo\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize the language model\nconst llm = new ChatOpenAI({ model: \"gpt-4-turbo\" });\n\n// Define tools for the agents\n// We are using Google calendar tool from composio to connect to our calendar account.\nconst composioToolset = new LangchainToolSet({\n    apiKey: process.env.COMPOSIO_API_KEY\n});\nconst tools = await composioToolset.getTools({\n    actions: [\"googlecalendar_create_event\", \"googlecalendar_list_events\"]\n});\n\n// Retrieve the current date and time\nconst getCurrentDate = () => new Date().toISOString().split('T')[0];\nconst getTimezone = () => new Date().toLocaleTimeString('en-us', { timeZoneName: 'short' }).split(' ')[2];\n\nconst date = getCurrentDate();\nconst timezone = getTimezone();\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing Langchain Agent\nDESCRIPTION: Function to create and execute a Langchain agent that can create GitHub issues. Uses GPT-4 model and includes setup for tools, prompt creation, and agent execution.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain-js.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function executeAgent (entityName){\n        // Create entity and get tools\n        const entity = toolset.client.getEntity(entityName)\n        await setupUserConnectionIfNotExists(entity.id);\n        const tools = await toolset.getTools({ actions: [\"github_issues_create\"] },entity.id);\n\n        // Create an agent\n        const prompt = await pull(\"hwchase17/openai-functions-agent\");\n        const llm = new ChatOpenAI({\n            model: \"gpt-4o\",\n            apiKey: process.env.OPEN_AI_API_KEY\n        });\n  \n        const agent = await createOpenAIFunctionsAgent({\n            llm,\n            tools: tools,\n            prompt,\n        });\n        const agentExecutor = new AgentExecutor({agent,tools,verbose: true,});\n\n        // Invoke the agent\n        const body = \"TITLE: HELLO WORLD, DESCRIPTION: HELLO WORLD for the repo - himanshu-dixit/custom-repo-breaking\"\n        const result = await agentExecutor.invoke({\n            input: \"Please create another github issue with the summary and description with the following details of another issue:- , \" + JSON.stringify(body)\n        });\n\n        console.log(result.output)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks and Execution Logic for Code Execution Agent\nDESCRIPTION: Creates a task for the agent and sets up the execution function. Both implementations solve a Fibonacci sequence problem, but Python uses CrewAI's task-based architecture while JavaScript implements a custom function.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/code-execution-agent.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Define a task for the agent\ntask = Task(\n    description=\"\"\"Write a Python function to calculate the Fibonacci sequence up to the 10th number.\n                Then, execute the code and return the result.\"\"\",\n    expected_output=\"The Fibonacci sequence and the execution result\",\n    agent=python_executor_agent\n)\n\n# Create a crew with the agent and task\ncrew = Crew(\n    agents=[python_executor_agent],\n    tasks=[task],\n    verbose=2,\n    process=Process.sequential\n)\n\n# Execute the task\nresult = crew.kickoff()\nprint(f\"Result: {result}\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Define the code execution function\nasync function executeCodeAgent(problem) {\n    const result = await agentExecutor.invoke({\n        input: `Write code to solve the following problem and execute it: ${problem}`\n    });\n    \n    return result.output;\n}\n\n// Run the agent with a sample problem\nconst problem = \"Write a function to calculate the Fibonacci sequence up to the 10th number and display the result.\";\n\nexecuteCodeAgent(problem)\n    .then(result => console.log(\"Result:\", result))\n    .catch(error => console.error(\"Error:\", error));\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tool Processors Structure in Python\nDESCRIPTION: Demonstrates the conceptual structure for applying different types of processors (schema, pre, and post) to Composio tools. Shows how to define and register processor functions for different processing stages.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/processing-tools.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef my_schema_processor(schema: dict) -> dict: ...\ndef my_preprocessor(inputs: dict) -> dict: ...\ndef my_postprocessor(result: dict) -> dict: ...\n\ntools = toolset.get_tools(\n    actions=[Action.SOME_ACTION],\n    processors={\n        # Applied BEFORE the LLM sees the schema\n        \"schema\": {Action.SOME_ACTION: my_schema_processor},\n\n        # Applied BEFORE the tool executes\n        \"pre\": {Action.SOME_ACTION: my_preprocessor},\n\n        # Applied AFTER the tool executes, BEFORE the result is returned\n        \"post\": {Action.SOME_ACTION: my_postprocessor}\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Executing a Lyzr Agent with Composio GitHub Integration\nDESCRIPTION: Python code that creates and executes a Lyzr agent configured to interact with GitHub through Composio. The agent is tasked with starring a specific repository using the GitHub API.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/lyzr.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlyzr_agent = Agent(\n    role=\"Github Agent\",\n    prompt_persona=\"You are AI agent that is responsible for taking actions on Github on users behalf. You need to take action on Github using Github APIs\",\n)\n\ncomposio_toolset = ComposioToolSet().get_lyzr_tool(Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER)\n\ntask = Task(\n    name=\"Github Starring\",\n    agent=lyzr_agent,\n    tool=composio_toolset,\n    model=open_ai_text_completion_model,\n    instructions=\"Star a repo composiohq/composio on GitHub\",\n)\n\nLinearSyncPipeline(name=\"Composio Lyzr\", completion_message=\"Task completed\",tasks=[task]).run()\n```\n\n----------------------------------------\n\nTITLE: Defining a Composio Local Tool Class in Python\nDESCRIPTION: Provides a template for defining the main class for a custom local tool in `tool.py`. The class should inherit from `composio.tools.local.base.Tool` and implement the `actions` method to return a list of action classes associated with this tool. Optional triggers can be defined in the `triggers` method.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/adding-local-tool.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typing as t\nfrom composio.tools.local.base import Action, Tool\nfrom .actions.<action_name> import <ActionName>  # Import your action class\n\nclass <ToolName>(Tool):\n    \"\"\"\n    Description of your tool.\n    \"\"\"\n\n    def actions(self) -> list[t.Type[Action]]:\n        return [<ActionName>]\n\n    def triggers(self) -> list:\n        return []  # If applicable, define triggers here\n```\n\n----------------------------------------\n\nTITLE: Importing Langchain and Composio Dependencies\nDESCRIPTION: Import required dependencies from Langchain and Composio core libraries for agent creation and execution.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain-js.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { createOpenAIFunctionsAgent, AgentExecutor } from \"langchain/agents\";\nimport { pull } from \"langchain/hub\";\nimport { LangchainToolSet } from \"composio-core\";\n```\n\n----------------------------------------\n\nTITLE: Installing Composio Core - Bash\nDESCRIPTION: Installs the core Composio package using pip, which is the primary way to get started with the toolkit. Suitable for any environment with pip available. Required before attempting to use Composio in your code. This command is expected to be run in the terminal and takes no additional parameters.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-core\n```\n\n----------------------------------------\n\nTITLE: Setting up Language Model for Code Execution Agent\nDESCRIPTION: Initializes the OpenAI language model (GPT-4o) that will power the agent's code generation and problem-solving capabilities.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/code-execution-agent.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Initialize the language model\nllm = ChatOpenAI(model=\"gpt-4o\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize the language model\nconst llm = new ChatOpenAI({ model: \"gpt-4o\" });\n```\n\n----------------------------------------\n\nTITLE: Executing the GitHub Issue Creation Agent\nDESCRIPTION: Example of how to invoke the executeAgent function with a specific GitHub repository.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai-js.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexecuteAgent(\"himanshu-dixit/custom-repo-breaking\")\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Composio Tool for OpenAI Agents Integration in Python\nDESCRIPTION: This function adapts a Composio tool to be used as an OpenAI Agents FunctionTool object by transforming its schema and wrapping its execution logic. It enforces the required parameter schema, serializes all inputs and outputs as JSON strings, and handles errors for API expectations. Dependencies include the OpenAI FunctionTool class, the Composio action execution method, and JSON for serialization. Inputs are the tool schema and optional entity ID; outputs are a FunctionTool instance with strict schema enforcement.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef _wrap_tool(\\n    self,\\n    schema: t.Dict[str, t.Any],\\n    entity_id: t.Optional[str] = None,\\n) -> FunctionTool:\\n    \\\"\\\"\\\"Wraps composio tool as OpenAI Agents FunctionTool object.\\\"\\\"\\\"\\n    action = schema[\\\"name\\\"]\\n    description = schema[\\\"description\\\"]\\n    schema_params = schema[\\\"parameters\\\"]\\n    \\n    # Create a function that accepts explicit JSON string for parameters\\n    def execute_action_wrapper(ctx, args_json):\\n        \\\"\\\"\\\"Execute Composio action with the given arguments.\\\"\\\"\\\"\\n        try:\\n            # Parse the args_json into a dict\\n            import json\\n            kwargs = json.loads(args_json) if args_json else {}\\n            \\n            result = self.execute_action(\\n                action=action,\\n                params=kwargs,\\n                entity_id=entity_id or self.entity_id,\\n                _check_requested_actions=True,\\n            )\\n            \\n            # Serialize result to JSON string for OpenAI API\\n            if not isinstance(result, dict):\\n                result_dict = {\\\"result\\\": result}\\n            else:\\n                result_dict = result\\n            \\n            return json.dumps(result_dict)\\n            \\n        except Exception as e:\\n            # Handle errors consistently\\n            return json.dumps({\\n                \\\"successful\\\": False, \\n                \\\"error\\\": str(e),\\n                \\\"data\\\": None,\\n            })\\n    \\n    # Add required schema properties for OpenAI\\n    modified_schema = schema_params.copy()\\n    modified_schema[\\\"additionalProperties\\\"] = False\\n    \\n    # Create a framework-specific tool\\n    tool = FunctionTool(\\n        name=action,\\n        description=description,\\n        params_json_schema=modified_schema,\\n        on_invoke_tool=execute_action_wrapper,\\n        strict_json_schema=True,\\n    )\\n    \\n    return tool\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Initializing Composio/LLM in Python\nDESCRIPTION: Imports required classes from `llama_index` and `composio_llamaindex` (OpenAI LLM, ChatMessage, AgentWorker, App, ComposioToolSet). It then initializes an instance of the `ComposioToolSet` for managing tools and connections, and an `OpenAI` LLM instance to power the agent. Requires `OPENAI_API_KEY` environment variable to be set.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/llamaindex.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_index.llms.openai import OpenAI\nfrom llama_index.core.llms import ChatMessage\nfrom llama_index.core.agent import FunctionCallingAgentWorker\nfrom composio_llamaindex import App, ComposioToolSet\n\ntoolset = ComposioToolSet()\nllm = OpenAI()\n```\n\n----------------------------------------\n\nTITLE: Complete Voice Integration Example\nDESCRIPTION: A comprehensive example showing how to set up a complete voice agent session with LiveKit, including STT, LLM, TTS, VAD, and turn detection components.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/livekit/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom livekit.agents.voice import AgentSession\nfrom livekit.plugins import (\n    openai,\n    cartesia,\n    deepgram,\n    silero,\n    turn_detector,\n)\n\nasync def setup_agent_session():\n    session = AgentSession(\n        stt=deepgram.STT(),\n        llm=openai.LLM(model=\"gpt-4o\"),\n        tts=cartesia.TTS(),\n        vad=silero.VAD.load(),\n        turn_detection=turn_detector.EOUModel(),\n    )\n    \n    await session.start(\n        room=ctx.room,\n        agent=Assistant(),\n    )\n```\n\n----------------------------------------\n\nTITLE: Exposing a Research Agent as an Express API with OpenAI and Composio-Core (JavaScript)\nDESCRIPTION: This JavaScript snippet sets up an Express.js web server that serves a '/research' endpoint to automate researching a topic and creating GitHub issues using an OpenAI assistant along with composio-core's tool integrations. The endpoint loads configuration via dotenv, initializes toolsets for search (SERPAPI) and GitHub, builds the assistant, creates a user prompt, and coordinates the assistant run including handling required tools. Dependencies include express, composio-core, openai, and dotenv, as well as relevant API keys. Inputs are HTTP GET requests to '/research'; outputs are JSON objects containing research outcomes or errors. The implementation relies on asynchronous processing and assumes authentication with external providers is valid.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\\nimport { OpenAI } from \\\"openai\\\";\\nimport { OpenAIToolSet, Action } from \\\"composio-core\\\";\\nimport dotenv from 'dotenv';\\n\\ndotenv.config();\\n\\n// Create Express app\\nconst app = express();\\nconst PORT = process.env.PORT || 2001;\\n\\n// Set research parameters\\nconst researchTopic = \\\"LLM agents function calling\\\";\\nconst targetRepo = \\\"composiohq/composio\\\";\\nconst nIssues = 3;\\n\\n// Configure Express\\napp.use(express.json());\\n\\n// Initialize the Composio toolset\\nconst toolset = new OpenAIToolSet({\\n    apiKey: process.env.COMPOSIO_API_KEY,\\n});\\n\\n// Initialize OpenAI client\\nconst client = new OpenAI({\\n    apiKey: process.env.OPENAI_API_KEY\\n});\\n\\n// Create endpoint to trigger the research\\napp.get('/research', async (req, res) => {\\n    try {\\n        // Get the necessary tools for research and GitHub interaction\\n        const tools = await toolset.get_actions([\\n            Action.SERPAPI_SEARCH,\\n            Action.GITHUB_USERS_GET_AUTHENTICATED,\\n            Action.GITHUB_ISSUES_CREATE\\n        ]);\\n        \\n        // Create assistant\\n        const assistant = await client.beta.assistants.create({\\n            model: \\\"gpt-4-turbo\\\",\\n            description: \\\"Research Agent that interacts with GitHub\\\",\\n            instructions: \\\"You are a helpful assistant that researches topics and creates GitHub issues\\\",\\n            tools: tools,\\n        });\\n        \\n        // Create the research prompt\\n        const prompt = `Please research about \\`${researchTopic}\\`, organize \\n            the top ${nIssues} results as ${nIssues} issues for \\n            a GitHub repository, and finally raise those issues with proper \\n            title, body, implementation guidance, and references in \\n            the ${targetRepo} repo, as well as relevant tags and assignees as \\n            the repo owner.`;\\n        \\n        // Create a thread with the user's request\\n        const thread = await client.beta.threads.create({\\n            messages: [{\\n                role: \\\"user\\\",\\n                content: prompt\\n            }]\\n        });\\n        \\n        // Start the assistant run\\n        let run = await client.beta.threads.runs.create(thread.id, {\\n            assistant_id: assistant.id,\\n        });\\n        \\n        // Handle tool calls and wait for completion\\n        run = await toolset.wait_and_handle_assistant_tool_calls(client, run, thread);\\n        \\n        // Check if the run completed successfully\\n        if (run.status === \\\"completed\\\") {\\n            const messages = await client.beta.threads.messages.list(thread.id);\\n            res.json({ status: 'success', messages: messages.data });\\n        } else {\\n            res.status(500).json({ status: 'error', message: 'Run did not complete', run });\\n        }\\n    } catch (error) {\\n        console.error(error);\\n        res.status(500).json({ status: 'error', message: error.message });\\n    }\\n});\\n\\n// Start the Express server\\napp.listen(PORT, () => {\\n    console.log(`Research Agent server is running on port ${PORT}`);\\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Tools from Composio\nDESCRIPTION: Retrieves all tools available for GitHub from the Composio toolset. Alternatively, specific actions can be obtained and filtered using the usecase and tags parameters as explained in the documentation.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/vercel.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tools = await toolset.getTools({ apps: [\"github\"] });\n```\n\n----------------------------------------\n\nTITLE: Executing Gemini Agent to Star GitHub Repository via Composio (Python)\nDESCRIPTION: Creates a Gemini chat session (`client.chats.create`) using a specified model ('gemini-2.0-flash') and the previously created configuration containing Composio tools. It then sends a natural language message asking to star a specific GitHub repository. Gemini interprets the request, identifies the appropriate Composio tool (GitHub star action), executes it using the configured connection, and the agent's text response is printed.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/gemini.mdx#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nchat = client.chats.create(model=\"gemini-2.0-flash\", config=config)\n\nresponse = chat.send_message(\n    \"Can you star composiohq/composio repository on github\",\n)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Initializing Language Model for Research Assistant in Python\nDESCRIPTION: This snippet initializes the ChatOpenAI language model using the OpenAI API key from environment variables. It sets up the model with the 'gpt-4o' model name.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/research_assistant.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndotenv.load_dotenv()\nopenai_api_key = os.getenv(\"OPENAI_API_KEY\")\nif not openai_api_key:\n    raise ValueError(\"The OPENAI_API_KEY environment variable is not set.\")\nllm = ChatOpenAI(openai_api_key=openai_api_key, model_name=\"gpt-4o\")\n```\n\n----------------------------------------\n\nTITLE: Processing OpenAI Response to Execute GitHub Actions\nDESCRIPTION: Handles the tool calls generated by the OpenAI model's response. This code processes the AI's decision and executes the actual GitHub API calls to perform the requested action (starring a repository).\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/openai/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresult = toolset.handle_tool_calls(response)\npprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Specific Composio Tools in TypeScript\nDESCRIPTION: Illustrates fetching multiple specific tools using `toolset.getTools` by providing an array of action name strings (e.g., \"GITHUB_GET_THE_AUTHENTICATED_USER\", \"GITHUB_LIST_REPOSITORIES_FOR_THE_AUTHENTICATED_USER\") to the `actions` parameter. Logs the count and schemas of the fetched tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function fetchSpecificTools() {\n  // Fetch specific tools by action name\n  const githubTools = await toolset.getTools({\n      actions: [\"GITHUB_GET_THE_AUTHENTICATED_USER\", \"GITHUB_LIST_REPOSITORIES_FOR_THE_AUTHENTICATED_USER\"]\n  });\n\n  console.log(`Fetched ${githubTools.length} tools.`);\n  // Output contains schemas for the specified actions.\n}\n\nfetchSpecificTools();\n```\n\n----------------------------------------\n\nTITLE: Initializing Composio and Autogen Configuration\nDESCRIPTION: Setting up the ComposioToolSet and configuring the LLM with necessary API keys and model settings\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/autogen.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom autogen import AssistantAgent, UserProxyAgent\nfrom composio_autogen import ComposioToolSet, App\n\ntoolset = ComposioToolSet(api_key=\"<your-composio-api-key>\")\nllm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": \"<your-api-key>\",\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Composio and Connecting GitHub Account\nDESCRIPTION: Commands for installing the Composio LangChain package, connecting your GitHub account, and viewing available applications that can be connected.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/agno/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composio LangChain package\npip install composio-agno\n\n# Connect your GitHub account\ncomposio add github\n\n# View available applications you can connect with\ncomposio apps\n```\n\n----------------------------------------\n\nTITLE: Initializing Composio and OpenAI Clients\nDESCRIPTION: Code for initializing the Composio toolset and OpenAI client in both Python and TypeScript. Requires environment variables for API keys.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/introduction.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_openai import ComposioToolSet, App, Action\nfrom openai import OpenAI\n# Assumes .env file with API keys is loaded\n\nclient = OpenAI()\ntoolset = ComposioToolSet() # Uses default entity_id\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAIToolSet, App, Action } from \"composio-core\";\nimport { OpenAI } from \"openai\";\n// Assumes .env file with API keys is loaded\n\nconst client = new OpenAI();\nconst toolset = new OpenAIToolSet(); // Uses default entityId\n```\n\n----------------------------------------\n\nTITLE: Setting up SQL Query Agent\nDESCRIPTION: Implementation of an agent specifically for executing SQL queries and saving results to files. The agent is created with SQL and file operation tools, then tasked with connecting to a database, executing a query, and saving results to a text file. Both Python and JavaScript implementations follow similar patterns with language-specific syntax.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/sql-agent.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Create the agent for SQL and File operations\nsql_agent = create_openai_functions_agent(llm, sql_file_tools, prompt)\nsql_executor = AgentExecutor(agent=sql_agent, tools=sql_file_tools, verbose=True)\n\n# Define the SQL query task\nquery_task = (\n    \"Connect to the SQLite database 'companydb' and execute the following query: \"\n    \"SELECT * FROM MOCK_DATA ORDER BY salary DESC LIMIT 10. \"\n    \"Save the results to a file named 'top_salaries.txt' and return the content.\"\n)\n\n# Execute the SQL query task\nsql_result = sql_executor.invoke({\"input\": query_task})\nprint(f\"SQL Query Result: {sql_result['output']}\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to execute SQL queries\nasync function executeSQLQuery(query) {\n    // Get SQL and File tools\n    const sqlTools = await getSQLTools();\n    \n    // Create the agent prompt\n    const prompt = await pull(\"hwchase17/openai-functions-agent\");\n    \n    // Create the agent for SQL operations\n    const agent = await createOpenAIFunctionsAgent({ \n        llm, \n        tools: sqlTools, \n        prompt \n    });\n\n    // Create the agent executor\n    const agentExecutor = new AgentExecutor({\n        agent,\n        tools: sqlTools,\n        verbose: true,\n    });\n\n    // Execute the SQL query\n    const result = await agentExecutor.invoke({\n        input: `Connect to the SQLite database 'companydb' and execute the following query: ${query}. \n                Save the results to a file named 'query_results.txt' and return the content.`\n    });\n\n    console.log(\"SQL Query Result:\", result.output);\n    return result.output;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Agents and Tasks for Newsletter Summarization\nDESCRIPTION: This code defines the agents (Email Fetcher, Newsletter Summarizer, Email Sender) and their corresponding tasks for the newsletter summarization process. It includes detailed task descriptions and agent configurations.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Define the Email Fetcher Agent\nemail_fetcher = Agent(\n    role=\"Email Fetcher\",\n    goal=\"Fetch all newsletter emails\",\n    backstory=\"\"\"You are an Email Fetcher specialized in finding newsletter emails.\n    Your job is to identify and retrieve recent newsletter emails from the user's inbox.\"\"\",\n    verbose=True,\n    tools=gmail_tools,\n    llm=llm\n)\n\n# Define the Email Summarizer Agent\nsummarizer = Agent(\n    role=\"Newsletter Summarizer\",\n    goal=\"Create concise summaries of newsletter content\",\n    backstory=\"\"\"You are a Newsletter Summarizer who excels at distilling information.\n    You can read newsletter emails and create brief, informative summaries of their main points.\"\"\",\n    verbose=True,\n    llm=llm\n)\n\n# Define the Email Sender Agent\nemail_sender = Agent(\n    role=\"Email Sender\",\n    goal=\"Send email with newsletter summaries\",\n    backstory=\"\"\"You are an Email Sender who specializes in composing and sending emails.\n    You take summaries and convert them into well-formatted emails before sending them to recipients.\"\"\",\n    verbose=True,\n    tools=gmail_tools,\n    llm=llm\n)\n\n# Define tasks for each agent\nfetch_task = Task(\n    description=f\"\"\"Search for newsletter emails in the inbox from {week_ago} to {today}.\n    Return a list of emails with their subjects, senders, and content.\"\"\",\n    expected_output=\"A list of newsletter emails with their content\",\n    agent=email_fetcher\n)\n\nsummarize_task = Task(\n    description=\"\"\"Create a concise summary of each newsletter email.\n    Identify the key points, announcements, and insights from each newsletter.\n    Format your summaries neatly with bullet points.\"\"\",\n    expected_output=\"Summarized content from all newsletters\",\n    agent=summarizer,\n    context=[fetch_task]\n)\n\nsend_task = Task(\n    description=\"\"\"Compose an email with the newsletter summaries.\n    Send it to youremail@example.com with the subject 'Weekly Newsletter Digest'.\n    Format the email in a reader-friendly way with headings for each newsletter.\"\"\",\n    expected_output=\"Confirmation that the email was sent\",\n    agent=email_sender,\n    context=[summarize_task]\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\napp.post(\"/summarize-newsletters\", async (c) => {\n    // Set up connection\n    const { ok, connectionId, error } = await setupConnection(c);\n    if (!ok) return c.json({ error }, 400);\n    \n    // Get Gmail tools\n    const tools = await composioToolset.getTools({\n        actions: [\"gmail_list_messages\", \"gmail_get_message\", \"gmail_send_email\"],\n        connectionId\n    });\n    \n    // Get today's date and the date from 7 days ago\n    const today = new Date().toLocaleDateString(\"en-US\", {\n        year: \"numeric\",\n        month: \"2-digit\",\n        day: \"2-digit\"\n    }).replace(/\\//g, \"/\");\n    \n    const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toLocaleDateString(\"en-US\", {\n        year: \"numeric\",\n        month: \"2-digit\",\n        day: \"2-digit\"\n    }).replace(/\\//g, \"/\");\n    \n    try {\n        // Process instructions for the AI\n        const instructions = `\n            1. Search for newsletter emails in the inbox from ${weekAgo} to ${today}\n            2. For each newsletter found:\n               - Read the content\n               - Create a concise summary highlighting key points\n            3. Compose a single email with all summaries organized clearly\n            4. Send the summary email to the specified recipient with the subject 'Weekly Newsletter Digest'\n        `;\n        \n        // Message to process with tool calling\n        const message = {\n            role: \"user\",\n            content: instructions\n        };\n        \n        // Process the message with tool calling\n        const result = await composioToolset.process({\n            messages: [message],\n            tools,\n            llm,\n            recipient: \"youremail@example.com\"  // Replace with actual recipient\n        });\n        \n        return c.json({ status: \"success\", result });\n    } catch (error) {\n        console.error(\"Error:\", error);\n        return c.json({ status: \"error\", message: error.message }, 500);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Gemini Agent Commands to Star GitHub Repository\nDESCRIPTION: Configures and executes the Gemini agent to perform a GitHub action (starring a repository) based on conversational instructions. Uses the chat interface to communicate with the model.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/gemini/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Use the chat interface.\nchat = client.chats.create(model=\"gemini-2.0-flash\", config=config)\nresponse = chat.send_message(\n    \"Can you star composiohq/composio repository on github\",\n)\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Executing Composio GitHub Action by Entity ID in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to use the `toolset.executeAction` method to retrieve the authenticated GitHub user's details through Composio. It specifies the action and uses the `entityId` to associate the action with the application user, allowing Composio to manage the connection. It includes basic error handling with a try-catch block and checks the `successful` flag in the response.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(`\\nFetching GitHub username for entity: ${userIdInMyApp}`);\ntry {\n    const user_info = await toolset.executeAction({\n        action: Action.GITHUB_GET_THE_AUTHENTICATED_USER,\n        params: {},\n        entityId: userIdInMyApp // Specify the user context\n        // Or use connectionId if you have it and need precision:\n        // connectedAccountId: activeConnection?.id\n    });\n\n    if (user_info.successful) {\n        console.log(\"GitHub username:\", (user_info.data as any)?.login);\n    } else {\n        console.error(\"Failed to fetch user:\", user_info.error);\n    }\n} catch (error) {\n    console.error(\"Error during execution:\", error);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Composio Tools by App in Python\nDESCRIPTION: Uses an existing `ComposioToolSet` instance (`toolset`) and the `get_tools` method, specifying the application using `App.GITHUB` in the `apps` list. This fetches the default set of tools (tagged as 'important') for the connected GitHub app. Prints the number of tools fetched and their schemas.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Fetch default tools for the connected GitHub app\ngithub_tools = toolset.get_tools(apps=[App.GITHUB])\n\nprint(f\"Fetched {len(github_tools)} tools for GitHub.\")\n# Output contains schemas for 'important' GitHub tools.\n```\n\n----------------------------------------\n\nTITLE: Installing Composio LlamaIndex Package and Connecting GitHub Account\nDESCRIPTION: Commands for installing the Composio LlamaIndex package, connecting a GitHub account, and viewing available applications that can be integrated with Composio.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/llamaindex/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composio llamaindex package\npip install composio-llamaindex\n\n# Connect your GitHub account\ncomposio-cli add github\n\n# View available applications you can connect with\ncomposio-cli show-apps\n```\n\n----------------------------------------\n\nTITLE: Defining Agno Agent\nDESCRIPTION: Initialize an Agno agent with the retrieved GitHub tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/agno.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagent = Agent(tools=tools, show_tool_calls=True)\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Specific Composio Tools in Python\nDESCRIPTION: Demonstrates fetching multiple specific tools using `toolset.get_tools` by providing a list of `Action` enums (e.g., `Action.GITHUB_GET_THE_AUTHENTICATED_USER`, `Action.GITHUB_LIST_REPOSITORIES_FOR_THE_AUTHENTICATED_USER`) to the `actions` parameter. Prints the count and schemas of the fetched tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Fetch specific tools by action name\ngithub_tools = toolset.get_tools(\n    actions=[\n        Action.GITHUB_GET_THE_AUTHENTICATED_USER,\n        Action.GITHUB_LIST_REPOSITORIES_FOR_THE_AUTHENTICATED_USER\n    ]\n)\n\nprint(f\"Fetched {len(github_tools)} tools.\")\n# Output contains schemas for the specified actions.\n```\n\n----------------------------------------\n\nTITLE: Authenticating Composio and Adding GitHub Integration (CLI)\nDESCRIPTION: Uses the Composio Command Line Interface (CLI) to first log in to the user's Composio account and then add the GitHub integration. This establishes the necessary connection for Composio to perform actions on the user's GitHub account.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/gemini.mdx#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposio login \ncomposio add github\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Connection in Composio\nDESCRIPTION: Shows how to fetch details about a specific connection using its unique connection ID. This code retrieves and displays connection details including the app name and connection status.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/connection.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconnection_id = \"1d28bbbb-91d0-4181-b4e5-088bab0d7779\"\n\nconnection = toolset.get_connected_account(connection_id)\nprint(f\"Details for {connection.id}: App={connection.appName}, Status={connection.status}\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst connectionId = \"1d28bbbb-91d0-4181-b4e5-088bab0d7779\";\n\nconst connection = await toolset.connectedAccounts.get({\n    connectedAccountId: connectionId,\n});\nconsole.log(\n    `Details for ${connection.id}: App=${connection.appName}, Status=${connection.status}`\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Environments and Tools for Newsletter Summarizer\nDESCRIPTION: This snippet sets up the necessary configurations for agents and tools, initializes the language model, and prepares date ranges for email fetching. It also includes JavaScript-specific setup for Cloudflare and connection handling.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\n\n# Initialize the language model\nllm = ChatOpenAI(model=\"gpt-4o\")\n\n# Set up Composio tools\ncomposio_toolset = ComposioToolSet()\n\n# Get Gmail tools\ngmail_tools = composio_toolset.get_tools(apps=[App.GMAIL])\n\n# Get today's date and the date from 7 days ago\ntoday = datetime.today().strftime(\"%Y/%m/%d\")\nweek_ago = (datetime.today() - timedelta(days=7)).strftime(\"%Y/%m/%d\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize the language model\nconst llm = new ChatOpenAI({ model: \"gpt-4o\" });\n\n// Create Hono app\nconst app = new Hono();\n\n// Configure Composio\nconst composioToolset = new CloudflareToolSet({\n    apiKey: process.env.COMPOSIO_API_KEY\n});\n\n// Function to set up connected account\nconst setupConnection = async (c) => {\n    const connectionId = c.req.headers.get(\"x-connection-id\");\n    \n    if (!connectionId) {\n        return { \n            ok: false, \n            error: \"No connection ID provided in headers\" \n        };\n    }\n    \n    return { ok: true, connectionId };\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Composio Actions in TypeScript\nDESCRIPTION: Initializes `OpenAIToolSet` from `composio-core` and uses the asynchronous `getTools` method with a specific action name string (\"GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER\") in the `actions` array to fetch the schema definition for that action. Assumes the Composio API key is available in environment variables. Logs the fetched tool schema.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAIToolSet } from \"composio-core\";\n\n// Initialize ToolSet (assuming API key is in env)\nconst toolset = new OpenAIToolSet();\n\nasync function fetchSpecificTool() {\n    // Fetch only the tool for starring a GitHub repo\n    const githubStarTool = await toolset.getTools({\n        actions: [\"GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER\"]\n    });\n\n    console.log(githubStarTool);\n    // Output will contain the schema for the specified action.\n}\n\nfetchSpecificTool();\n```\n\n----------------------------------------\n\nTITLE: Filtering Composio App Tools by Tags in Python\nDESCRIPTION: Shows how to fetch tools for a specific application (`App.JIRA`) and further filter them by providing a list of tags (e.g., [\"Issues\"]) to the `tags` parameter of `toolset.get_tools`. Note that tag names are case-sensitive. Prints the count of fetched tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Fetch only Jira tools related to 'Issues'\njira_issue_tools = toolset.get_tools(\n    apps=[App.JIRA],\n    tags=[\"Issues\"] # Tag names are case-sensitive\n)\n\nprint(f\"Fetched {len(jira_issue_tools)} Jira tools tagged with 'Issues'.\")\n```\n\n----------------------------------------\n\nTITLE: Executing Agent Tasks\nDESCRIPTION: Example of running the agent with a specific GitHub task and handling the results.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/pydanticai/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Define task\ntask = \"Star a repo composiohq/composio on GitHub\"\n\n# Run the agent synchronously\nresult = agent.run_sync(task)\nprint(\"Result:\", result.data)\nprint(\"Trace:\\n\\n\", result.all_messages())\n```\n\n----------------------------------------\n\nTITLE: Importing Base Packages for Calendar Agent\nDESCRIPTION: These imports set up the necessary libraries for the Calendar Agent. The Python version uses composio_crewai, crewai, dotenv, and langchain_openai. The JavaScript version imports dotenv, ChatOpenAI, agent components from langchain, and LangchainToolSet from composio-core.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/calendar-agent.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom datetime import datetime\n\nfrom composio_crewai import App, ComposioToolSet\nfrom crewai import Agent, Task\nfrom dotenv import load_dotenv\nfrom langchain_openai import ChatOpenAI\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport dotenv from 'dotenv';\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { AgentExecutor, createOpenAIFunctionsAgent } from \"langchain/agents\";\nimport { pull } from \"langchain/hub\";\nimport { LangchainToolSet } from \"composio-core\";\n\ndotenv.config();\n```\n\n----------------------------------------\n\nTITLE: Filtering Specific Actions and Apps\nDESCRIPTION: Examples of restricting agent access to specific actions and tools within Composio.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/groq.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# To restrict agents from using all the actions, filter specific actions\ntools = composio_toolset.get_tools(apps=[App.GITHUB])\n```\n\nLANGUAGE: bash\nCODE:\n```\n# To restrict agents from using all tools, filter specific tools \ntools = composio_toolset.get_tools(actions=[Action.GITHUB_CREATE_ISSUE])\n```\n\n----------------------------------------\n\nTITLE: Executing a Mastra Agent to Star a GitHub Repository - JavaScript\nDESCRIPTION: Creates and executes a Mastra agent configured with the OpenAI GPT-4o-mini model and GitHub tools retrieved via Composio MCP. The agent is instructed to star a specific GitHub repository and streams its text output to the console. Dependencies: MCPConfiguration, Agent, openai. Inputs: Task prompt string. Outputs: Streaming text output representing agent actions. Limitations: Requires async context and valid tool/server configuration.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/mastra.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst mcp = new MCPConfiguration({\n    servers: {\n        github: {\n        url: new URL(\"https://mcp.composio.dev/github/[private-url-path]\"),\n        },\n    },\n});\n\nconst agent = new Agent({\n    name: \"CLI Assistant\",\n    instructions: \"You help users star GitHub repositories\",\n    model: openai(\"gpt-4o-mini\"),\n    tools: await mcp.getTools(),\n});\n\nconst stream = await agent.stream(\"Please star the repository 'composiohq/composio'\");\n\nfor await (const chunk of stream.textStream) {\n    process.stdout.write(chunk);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing Composio GitHub Action by Connection ID in Python\nDESCRIPTION: This Python snippet demonstrates an alternative method for executing a Composio action (`GITHUB_GET_THE_AUTHENTICATED_USER`) by directly providing the `connected_account_id`. This approach bypasses the need for Composio to look up the connection based on the `entity_id`, offering more precise control if the specific connection ID is already known.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nuser_info_direct = toolset.execute_action(\n    action=Action.GITHUB_GET_THE_AUTHENTICATED_USER,\n    params={},\n    connected_account_id=active_connection.id\n)\n```\n\n----------------------------------------\n\nTITLE: Complete Composio GitHub Integration in Python\nDESCRIPTION: Full Python implementation that combines initialization and execution to fetch GitHub username using Composio. This complete script handles the entire workflow from tools setup to result display.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/quickstart.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_openai import ComposioToolSet, Action\nfrom openai import OpenAI\n\ntoolset = ComposioToolSet()\nclient = OpenAI()\n\ntools = toolset.get_tools(actions=[Action.GITHUB_GET_THE_AUTHENTICATED_USER])\ntask = \"Get my GitHub username.\"\nmessages = [\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant that can use tools.\"},\n    {\"role\": \"user\", \"content\": task},\n]\nresponse = client.chat.completions.create(\n    model=\"gpt-4o-mini\", \n    messages=messages,\n    tools=tools,\n    tool_choice=\"auto\",\n)\nresult = toolset.handle_tool_calls(response)\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Finding Composio Tools by Use Case in Python (Experimental)\nDESCRIPTION: Illustrates an experimental feature using `toolset.find_actions_by_use_case`. It takes a natural language `use_case` query (e.g., \"create a new page in notion\") and optionally filters by `apps` to find relevant `Action` enums via semantic search. The found enums are then passed to `toolset.get_tools` to fetch the actual tool schemas. The `advanced=True` flag can be used for complex queries.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Describe the task\nquery = \"create a new page in notion\"\n\n# Find relevant action ENUMS (Python-specific helper)\nrelevant_actions = toolset.find_actions_by_use_case(\n    use_case=query,\n    apps=[App.NOTION] # Optionally scope the search to specific apps\n    # advanced=True # Use for complex queries needing multiple tools\n)\n\nprint(f\"Found relevant actions: {relevant_actions}\")\n\n# Fetch the actual tool schemas for the found actions\nif relevant_actions:\n    notion_tools = toolset.get_tools(actions=relevant_actions)\n    print(f\"Fetched {len(notion_tools)} tool(s) for the use case.\")\nelse:\n    print(\"No relevant actions found for the use case.\")\n\n# Use the `notion_tools` in your agent\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Composio Tools for GitHub and Configuring Gemini (Python)\nDESCRIPTION: Retrieves available Composio tools specifically for the GitHub application using `toolset.get_tools(apps=[App.GITHUB])`. The fetched tools are then used to create a Gemini generation configuration object (`types.GenerateContentConfig`), enabling the Gemini model to utilize these specific GitHub actions.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/gemini.mdx#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ntools = toolset.get_tools(\n    apps=[\n        App.GITHUB\n    ]\n)\n\nconfig = types.GenerateContentConfig(tools=tools)\n```\n\n----------------------------------------\n\nTITLE: Defining a LangChain Agent with Composio Tools\nDESCRIPTION: Create a LangChain agent using OpenAI functions format with the retrieved Composio tools. This configures the agent with the appropriate prompt template and tools to execute GitHub operations.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprompt = hub.pull(\"hwchase17/openai-functions-agent\")\nagent = create_openai_functions_agent(llm, tools, prompt)\nagent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst prompt = await pull(\n    \"hwchase17/openai-functions-agent\"\n);\nconst agent = await createOpenAIFunctionsAgent({\n    llm,\n    tools: tools,\n    prompt,\n});\nconst agentExecutor = new AgentExecutor({ agent, tools, verbose: true });\n```\n\n----------------------------------------\n\nTITLE: Initializing LLM for AI News Agent\nDESCRIPTION: Initializes the Hugging Face language model and chat model for use in the AI agent, using environment variables for API tokens.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/news_summary_agent.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndotenv.load_dotenv()\nllm = HuggingFaceEndpoint(repo_id=\"HuggingFaceH4/zephyr-7b-beta\", huggingfacehub_api_token=os.getenv(\"HUGGINGFACEHUB_API_TOKEN\"))\nchat_model = ChatHuggingFace(llm=llm)\n```\n\n----------------------------------------\n\nTITLE: Advanced Composio Tool Configuration\nDESCRIPTION: Examples of more complex tool configurations including multiple actions and app-specific tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/smolagent/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Using multiple tools\ntools = composio_toolset.get_tools(\n    actions=[\n        Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER,\n        Action.GITHUB_CREATE_REPOSITORY\n    ],\n)\n\n# Using app-specific tools\ntools = composio_toolset.get_tools(\n    apps=[App.GITHUB],\n)\n```\n\n----------------------------------------\n\nTITLE: Executing RAG Workflow\nDESCRIPTION: Running the complete RAG workflow including content addition and querying\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create a crew with the agent and tasks\ncrew = Crew(\n    agents=[rag_agent],\n    tasks=[add_content_task, query_task],\n    verbose=2,\n    process=Process.sequential  # Tasks must run in order\n)\n\n# Execute the workflow\nresult = crew.kickoff()\nprint(textwrap.fill(f\"Final Result: {result}\", width=80))\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Main function to run the RAG workflow\n(async () => {\n    try {\n        const tools = await getTools();\n        const agentExecutor = await createAgent(tools);\n        \n        // Add content first\n        await addContent(agentExecutor);\n        \n        // Then query the knowledge base\n        await queryKnowledgeBase(agentExecutor);\n        \n        console.log(\"RAG workflow completed successfully\");\n    } catch (error) {\n        console.error(\"Error:\", error);\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Defining a LlamaIndex FunctionCallingAgentWorker in Python\nDESCRIPTION: Creates and configures a LlamaIndex `FunctionCallingAgentWorker`. It sets up system instructions (`prefix_messages`) defining the agent's role, provides the fetched Composio tools (`tools`), specifies the OpenAI LLM (`llm`), and configures agent behavior like maximum function calls and verbosity. The worker is then converted into a runnable agent using `.as_agent()`. Requires initialized `tools` and `llm` variables.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/llamaindex.mdx#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nprefix_messages = [\n    ChatMessage(\n        role=\"system\",\n        content=(\n            \"You are a Github Agent, and you can use tools to perform actions on Github.\"\n        ),\n    )\n]\n\nagent = FunctionCallingAgentWorker(\n    tools=tools,\n    llm=llm,\n    prefix_messages=prefix_messages,\n    max_function_calls=10,\n    allow_parallel_tool_calls=False,\n    verbose=True,\n).as_agent()\n```\n\n----------------------------------------\n\nTITLE: Starting CrewAI Workflow (Kickoff) and Printing Result - Python\nDESCRIPTION: This final snippet launches the workflow by calling kickoff on the Crew object and prints the result. It assumes all previous setup steps are complete and all dependencies are satisfied. Input is a fully defined Crew object; the output is the result of the crew operation, typically a status or result string indicating success or failure of the GitHub repo starring action.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/crewai.mdx#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nresult = crew.kickoff()\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Importing Base Packages for Research Agent\nDESCRIPTION: Essential library imports for the Research Agent project. Python imports include composio_llamaindex, llama_index components, and ArXiv tools. JavaScript imports include express, OpenAI, Composio core components, and dotenv for environment configuration.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport dotenv\n\nfrom composio_llamaindex import Action, ComposioToolSet\nfrom llama_index.core.llms import ChatMessage\nfrom llama_index.llms.openai import OpenAI\nfrom llama_index.agent.openai import OpenAIAgent\nfrom llama_index.tools.arxiv.base import ArxivToolSpec\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\nimport { OpenAI } from \"openai\";\nimport { OpenAIToolSet, Action } from \"composio-core\";\nimport dotenv from 'dotenv';\n\ndotenv.config();\n```\n\n----------------------------------------\n\nTITLE: Executing Tool Calls with Composio\nDESCRIPTION: Processes the AI response to execute the requested GitHub action through Composio's tool handling functionality.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/litellm.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresult = toolset.handle_tool_calls(response=response)\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Number Operations with Python Decorators\nDESCRIPTION: Demonstrates creating custom tools using the @action decorator in Python to wrap basic arithmetic functions. Shows type annotation usage and custom tool naming.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/custom-tools.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom composio import action\nfrom typing import Annotated # Recommended for descriptions\n\n# Define a simple function\n@action # Decorate it to make it a Composio tool\ndef add_numbers(\n    a: Annotated[int, \"The first number to add\"],\n    b: Annotated[int, \"The second number to add\"]\n) -> int:\n    \"\"\"Adds two integers and returns the result.\"\"\"\n    print(f\"Executing add_numbers: Adding {a} and {b}\")\n    return a + b\n\n# Optionally, provide a custom name for the tool\n@action(toolname=\"calculator_multiply\")\ndef multiply_numbers(\n    a: Annotated[int, \"The first number\"],\n    b: Annotated[int, \"The second number\"]\n) -> int:\n    \"\"\"Multiplies two integers.\"\"\"\n    print(f\"Executing multiply_numbers: Multiplying {a} by {b}\")\n    return a * b\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub LangChain Tools via Composio\nDESCRIPTION: This snippet shows how to access GitHub tools provided by Composio for LangChain by initializing the toolset for GitHub.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langchain/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_langchain import ComposioToolSet, Action, App\n\n# Initialize the toolset for GitHub\ntools = ComposioToolSet(apps=[App.GITHUB])\n```\n\n----------------------------------------\n\nTITLE: Setup Configuration for Integration Package (Python)\nDESCRIPTION: The setup.py snippet defines metadata and dependencies for packaging the Composio framework integration. It uses setuptools for build/install, pulls a long description from README.md, and specifies Python version constraints and framework dependencies. Inputs: package and author details, dependency versions, and package classifiers. Ensures installation is compatible with Python 3.9+ and includes all package data during distribution.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nSetup configuration for Composio [Your Framework] plugin\n\"\"\"\n\nfrom pathlib import Path\nfrom setuptools import setup, find_packages\n\nsetup(\n    name=\"composio_yourframework\",\n    version=\"0.1.0\",\n    author=\"Your Name\",\n    author_email=\"your.email@example.com\",\n    description=\"Use Composio with [Your Framework]\",\n    long_description=(Path(__file__).parent / \"README.md\").read_text(encoding=\"utf-8\"),\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/ComposioHQ/composio\",\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: OS Independent\",\n    ],\n    python_requires=\">=3.9,<4\",\n    packages=find_packages(),\n    install_requires=[\n        \"composio_core>=0.7.0,<0.8.0\",\n        \"your-framework>=X.Y.Z\",  # Replace with actual dependency\n        \"pydantic>=2.0.0\",\n        \"typing-extensions>=4.0.0\",\n    ],\n    include_package_data=True,\n)\n```\n\n----------------------------------------\n\nTITLE: GitHub Repository Topics Tool Implementation in Python\nDESCRIPTION: Implementation of a custom tool to fetch GitHub repository topics using Composio's managed authentication system in Python.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/custom-tools.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom composio import action, ComposioToolSet\nimport typing as t\n\ntoolset = ComposioToolSet()\n\n@action(toolname=\"github\") # Associate with GitHub app for auth\ndef get_github_repo_topics(\n    owner: Annotated[str, \"Repository owner username\"],\n    repo: Annotated[str, \"Repository name\"],\n    execute_request: t.Callable # Injected by Composio\n) -> dict:\n    \"\"\"Gets the topics associated with a specific GitHub repository.\"\"\"\n    print(f\"Getting topics for {owner}/{repo} using Composio-managed GitHub auth...\")\n    try:\n        # Call the GitHub API endpoint using the injected function\n        response_data = execute_request(\n            endpoint=f\"/repos/{owner}/{repo}/topics\", # API path relative to base URL\n            method=\"GET\"\n            # Body/parameters usually not needed when relying on managed auth\n        )\n        # Ensure response_data is a dictionary before accessing 'names'\n        if isinstance(response_data, dict):\n             return {\"topics\": response_data.get(\"names\", [])}\n        else:\n             # Handle unexpected response format\n             print(f\"Warning: Unexpected response format from execute_request: {type(response_data)}\")\n             return {\"error\": \"Failed to parse topics\", \"raw_response\": response_data}\n\n    except Exception as e:\n        print(f\"Error executing request for topics: {e}\")\n        return {\"error\": str(e)}\n```\n\n----------------------------------------\n\nTITLE: Installing Composio Autogen and Connecting GitHub Account\nDESCRIPTION: Commands to install the Composio Autogen package and connect your GitHub account to enable agent functionality. The commands also show how to view all supported applications.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/autogen/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-autogen\ncomposio-cli add github  # Connect your GitHub account\ncomposio-cli show-apps   # Check all supported apps\n```\n\n----------------------------------------\n\nTITLE: Importing Required Griptape and Composio Packages\nDESCRIPTION: Python imports needed for setting up Griptape agent with Composio integration. Includes core Griptape structures, utils, and Composio specific imports.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/griptape.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom griptape.structures import Agent\nfrom griptape.utils import Chat\nfrom composio_griptape import App, Action, Tag, ComposioToolSet\nimport dotenv\n\ndotenv.load_dotenv()\n```\n\n----------------------------------------\n\nTITLE: Checking LangChain Agent Response for GitHub Action\nDESCRIPTION: This snippet shows the expected output when validating the execution and response from the agent after starring a GitHub repository.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langchain/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> Entering new AgentExecutor chain...\n> Invoking: `github_star_repo` with `{'owner': 'composiohq', 'repo': 'composio'}`\n> {'execution_details': {'executed': True}, 'response_data': ''}\n> I have successfully starred the repository composiohq/composio on GitHub.\n```\n\n----------------------------------------\n\nTITLE: Executing GitHub Get User Action with Composio SDK (Entity ID) in TypeScript\nDESCRIPTION: This TypeScript snippet checks if a Composio connection (`activeConnection`) associated with `userIdInMyApp` is active. If active, it executes the `GITHUB_GET_THE_AUTHENTICATED_USER` action via `toolset.executeAction`, using the `entityId` for context. It logs the fetched GitHub username on success or an error message on failure. Includes error handling for the asynchronous operation and a call to `main()` to initiate execution. Dependencies include the `toolset` object, `Action` enum, `activeConnection` object, and `userIdInMyApp` variable.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nif (activeConnection && activeConnection.status === \"ACTIVE\") {\n    console.log(`\\nExecuting action using connection ID: ${activeConnection.id}`);\n    console.log(`Fetching GitHub username for entity: ${userIdInMyApp}...`);\n\n    const user_info = await toolset.executeAction({\n        action: Action.GITHUB_GET_THE_AUTHENTICATED_USER, // Use Enum\n        params: {},\n        // Provide context via entityId (recommended)\n        entityId: userIdInMyApp\n        // OR precisely target the connection (if ID was stored)\n        // connectedAccountId: activeConnection.id\n    });\n\n    console.log(\"\\n--- Execution Result ---\");\n    if (user_info.successful) {\n        const username = (user_info.data as any)?.login ?? \"N/A\";\n        console.log(`Successfully fetched GitHub username: ${username}`);\n    } else {\n        console.error(`Failed to fetch user info: ${user_info.error ?? 'Unknown error'}`);\n    }\n    // console.log(\"\\nFull response:\");\n    // console.log(JSON.stringify(user_info, null, 2));\n\n} else {\n     console.log(\"\\nSkipping action execution as connection is not active.\");\n}\n\n} catch (error) {\n    console.error(\"\\nAn unexpected error occurred:\", error);\n}\n}\n\n// Run the async function\nmain();\n```\n\n----------------------------------------\n\nTITLE: Fetching Raw Action Schema in TypeScript with Composio SDK\nDESCRIPTION: This TypeScript snippet demonstrates how to initialize the ComposioToolSet and conceptually fetch the raw schema for a specific action (GOOGLECALENDAR_LIST_CALENDARS). It uses a method like `getActionsSchema` or direct client access to retrieve the schema details, potentially bypassing connection checks. The retrieved schema (assumed to be in `calendarSchemas`) is then logged to the console. Note that the exact method and parameters for bypassing connection checks might differ based on the specific SDK version and might require using the underlying client directly.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ComposioToolSet, Action, App } from \"composio-core\"; // Use base ComposioToolSet\n\n// Initialize base ToolSet\nconst baseToolset = new ComposioToolSet();\n\nasync function inspectSchema() {\n    // Get the raw schema for a specific Google Calendar action\n    // Bypass the check for an active Google Calendar connection\n    const calendarSchemas = await baseToolset.getActionsSchema( // Note: Method name might differ slightly or require client access depending on SDK version/structure\n       { actions: [Action.GOOGLECALENDAR_LIST_CALENDARS] },\n       undefined, // entityId - not relevant here\n       // Pass underlying client option if needed, or use client directly:\n       // await baseToolset.client.actions.get({ actions: [Action.GOOGLECALENDAR_LIST_CALENDARS] })\n       // The exact TS equivalent depends on how schema fetching bypassing checks is exposed.\n       // Assuming getActionsSchema handles it conceptually:\n       // check_connected_accounts=false equivalent might be implicit or require direct client usage.\n       // This example assumes a conceptual equivalent exists on the toolset for simplicity.\n    );\n\n\n    if (calendarSchemas && calendarSchemas.length > 0) {\n        console.log(\"Raw Schema for GOOGLECALENDAR_LIST_CALENDARS:\");\n        // calendarSchemas is an array, access the first element\n        console.log(JSON.stringify(calendarSchemas[0], null, 2));\n         // Adjust access based on actual return type (might be ActionModel-like objects)\n    } else {\n        console.log(\"Schema not found.\");\n    }\n\n     // Fetching by app:\n     // const githubSchemas = await baseToolset.getActionsSchema({ apps: [\"github\"] });\n}\n\ninspectSchema();\n\n// Note: The TypeScript example is conceptual. Direct schema fetching bypassing connection checks\n// might require using `baseToolset.client.actions.get(...)` directly if `getActionsSchema`\n// on the ToolSet enforces checks or framework formatting. Refer to TS SDK specifics.\n```\n\n----------------------------------------\n\nTITLE: Managing RAG Knowledge Base with Langchain.js and Composio in JavaScript\nDESCRIPTION: This JavaScript script uses Langchain.js and Composio tools to interact with a RAG knowledge base within a Docker-based Composio workspace. It initializes an OpenAI LLM (gpt-4-turbo), configures Composio tools using an API key and specifies a Docker workspace, gets specific RAG tools (`rag_add_content`, `rag_get_content`, `rag_query`), creates a Langchain agent using a pulled prompt, and uses an AgentExecutor to first add content (capital cities) and then query the knowledge base. Dependencies include `dotenv`, `composio-core`, `@langchain/openai`, and `langchain`, and requires environment variables (OpenAI and Composio API keys) loaded via `.env`.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript JavaScript\nimport dotenv from 'dotenv';\nimport { LangchainToolSet } from \"composio-core\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { AgentExecutor, createOpenAIFunctionsAgent } from \"langchain/agents\";\nimport { pull } from \"langchain/hub\";\n\ndotenv.config();\n\n// Initialize the language model\nconst llm = new ChatOpenAI({ model: \"gpt-4-turbo\" });\n\n// Setup Composio tools with workspace environment\nconst composioToolset = new LangchainToolSet({\n    apiKey: process.env.COMPOSIO_API_KEY,\n    workspace: {\n        type: \"docker\"\n    }\n});\n\n// Main function to run the RAG workflow\n(async () => {\n    try {\n        // Get tools for RAG operations\n        const tools = await composioToolset.getTools({\n            actions: [\"rag_add_content\", \"rag_get_content\", \"rag_query\"]\n        });\n        \n        // Create the agent\n        const prompt = await pull(\"hwchase17/openai-functions-agent\");\n        const agent = await createOpenAIFunctionsAgent({\n            llm,\n            tools,\n            prompt\n        });\n        \n        // Set up the agent executor\n        const agentExecutor = new AgentExecutor({\n            agent,\n            tools,\n            verbose: true\n        });\n        \n        // Add content to the knowledge base\n        const content = `\n            1. Paris is the capital city of France.\n            2. London is the capital city of the United Kingdom.\n            3. Washington D.C. is the capital city of the United States.\n            4. Tokyo is the capital city of Japan.\n            5. Berlin is the capital city of Germany.\n        `;\n        \n        const addResult = await agentExecutor.invoke({\n            input: `Add the following information to the knowledge base: ${content}`\n        });\n        \n        console.log(\"Content Added:\", addResult.output);\n        \n        // Query the knowledge base\n        const query = \"What is the capital of France?\";\n        \n        const queryResult = await agentExecutor.invoke({\n            input: `Query the knowledge base to answer the following question: \"${query}\"`\n        });\n        \n        console.log(\"Query Result:\", queryResult.output);\n        console.log(\"RAG workflow completed successfully\");\n    } catch (error) {\n        console.error(\"Error:\", error);\n    }\n})();\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Specific Apps in Composio LangChain Tools\nDESCRIPTION: This snippet shows how to restrict the tools an agent can use by allowing usage of only specific apps, in this case, Asana and GitHub.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langchain/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Allow usage of Asana and GitHub only\ntoolsAsanaGithub = ComposioToolSet(apps=[App.ASANA, App.GITHUB])\n```\n\n----------------------------------------\n\nTITLE: Enabling Triggers in Python and TypeScript\nDESCRIPTION: Demonstrates how to enable a Slack message trigger using both Python and TypeScript SDKs. Includes initialization of the ComposioToolSet and setting up triggers for a specific user entity.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_openai import ComposioToolSet\n\ntoolset = ComposioToolSet()\n\nuser_id = \"default\" # User ID referencing an entity retrieved from application logic\nentity = toolset.get_entity(id=user_id)\ntriggers = toolset.get_trigger(\"SLACK_RECEIVE_MESSAGE\")\n\nres = entity.enable_trigger(\n    app=App.SLACK,\n    trigger_name=\"SLACK_RECEIVE_MESSAGE\",\n    config={}\n)\n\nprint(res[\"status\"])\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ComposioToolSet } from \"composio-core\";\nconst toolset = new ComposioToolSet();\n\nconst userId = \"default\";\n\nconst entity = await toolset.getEntity(userId);\n\nconst trigger = await toolset.triggers.get({\n  triggerId: \"SLACK_RECEIVE_MESSAGE\",\n});\n\nconst res = await entity.setupTrigger({\n  triggerName: \"SLACK_RECEIVE_MESSAGE\",\n  app: \"slack\",\n  config: {},\n});\n\nconsole.log(res.status);\n```\n\n----------------------------------------\n\nTITLE: Implementing FastAPI Webhook Endpoint and Running Server in Python\nDESCRIPTION: Defines a FastAPI POST endpoint at `/webhook` using the `@app.post` decorator. The asynchronous `webhook_handler` function receives incoming HTTP requests, parses the JSON payload, checks if the payload type is `slack_receive_message` and if the message originates from a specific channel (`YOUR_CHANNEL_ID` needs replacement). If conditions are met, it calls the `generate_response` function to handle the message. It returns a JSON response indicating success. Finally, it uses `uvicorn.run` to start the ASGI server, making the FastAPI application listen on all interfaces (`0.0.0.0`) on port 8000.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/webhook\")\nasync def webhook_handler(request: Request):\n    payload = await request.json()\n    if payload.get(\"type\") == \"slack_receive_message\":\n        channel = payload.get(\"data\", {}).get(\"channel\")\n        if channel == \"YOUR_CHANNEL_ID\":  # Replace with your channel ID\n            await generate_response(payload)\n    return {\"status\": \"success\", \"message\": \"Webhook received\"}\n\nuvicorn.run(app, host=\"0.0.0.0\", port=8000)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Raw Composio Tool Schemas in Python\nDESCRIPTION: Shows how to retrieve the raw JSON schema definition of specific actions using the base `ComposioToolSet` from the `composio` library and its `get_action_schemas` method. Setting `check_connected_accounts=False` allows fetching schemas even for apps not currently connected. This is useful for exploration, debugging, or custom logic. The example fetches the schema for `Action.GOOGLECALENDAR_LIST_CALENDARS` and prints it.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom composio import ComposioToolSet, Action, App # Use base ComposioToolSet for schema inspection\n\n# Initialize base ToolSet\nbase_toolset = ComposioToolSet()\n\n# Get the raw schema for a specific Google Calendar action\n# Bypass the check for an active Google Calendar connection\ncalendar_schemas = base_toolset.get_action_schemas(\n    actions=[Action.GOOGLECALENDAR_LIST_CALENDARS],\n    check_connected_accounts=False\n)\n\nif calendar_schemas:\n    import json\n    print(\"Raw Schema for GOOGLECALENDAR_LIST_CALENDARS:\")\n    # calendar_schemas is a list, access the first element\n    print(json.dumps(calendar_schemas[0].model_dump(), indent=2))\nelse:\n    print(\"Schema not found.\")\n\n# You can also fetch schemas by app or tags similarly\n# github_schemas = base_toolset.get_action_schemas(\n#    apps=[App.GITHUB], check_connected_accounts=False\n#\n```\n\n----------------------------------------\n\nTITLE: Executing the LangChain Agent to Star a GitHub Repository\nDESCRIPTION: Execute the LangChain agent with a specific task to star a GitHub repository. The agent uses the Composio tools to interact with GitHub and perform the requested action.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntask = \"Star a repo composiohq/composio on GitHub\"\nagent_executor.invoke({\"input\": task})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await agentExecutor.invoke({ input: \"Star a repo composiohq/composio on GitHub\" });\nconsole.log(response);\n```\n\n----------------------------------------\n\nTITLE: Initializing Google AI with Composio Integration\nDESCRIPTION: Sets up the basic configuration for using Google AI with Composio, including environment variables, toolset initialization, and model setup\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/google.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dotenv\nfrom composio_google import App, ComposioToolset\nfrom vertexai.generative_models import GenerativeModel\n\n# Load environment variables from .env\ndotenv.load_dotenv()\n\n# Initialize the Composio Toolset\ncomposio_toolset = ComposioToolset()\n\n# Get GitHub tools that are pre-configured\ntool = composio_toolset.get_tool(apps=[App.GITHUB])\n\n# Initialize the Google AI Gemini model\nmodel = GenerativeModel(\"gemini-1.5-pro\", tools=[tool])\n```\n\n----------------------------------------\n\nTITLE: Installing Composio LangChain Package and Setting Up GitHub Connection\nDESCRIPTION: Commands to install the Composio-Lyzr package, connect a GitHub account, and view available applications for integration.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/lyzr/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composio LangChain package\npip install composio-lyzr\n\n# Connect your GitHub account\ncomposio-cli add github\n\n# View available applications you can connect with\ncomposio-cli show-apps\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Google AI Python Client\nDESCRIPTION: This code snippet demonstrates how to import the necessary package from Google AI Python and initialize the GenerativeModel client for Gemini Pro.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/google/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vertexai.generative_models import GenerativeModel\n\n# Initialize Google AI Python client\nmodel = GenerativeModel(\"gemini-pro\")\n```\n\n----------------------------------------\n\nTITLE: Defining an AI Agent with OpenAI and Composio Tools\nDESCRIPTION: Configures an AI agent using the OpenAI model (gpt-4o-mini) with the fetched GitHub tools. The agent is given a prompt to star the 'composiohq/composio' repository and is allowed up to 5 tool roundtrips to complete the task.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/vercel.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst output = await generateText({\n    model: openai(\"gpt-4o-mini\"),\n    streamText: false,\n    tools,\n    prompt: 'Star the repository \"composiohq/composio\"',\n    maxToolRoundtrips: 5,\n});\n```\n\n----------------------------------------\n\nTITLE: Complete AI News Retrieval and Summarization Script\nDESCRIPTION: Combines all previous steps into a single script for setting up and executing the AI news retrieval and summarization agent using Composio and Langchain.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/news_summary_agent.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain import hub\nfrom langchain.agents import AgentExecutor, load_tools\nfrom langchain.agents.format_scratchpad import format_log_to_str\nfrom langchain.agents.output_parsers import (\n    ReActJsonSingleInputOutputParser,\n)\nfrom langchain.tools.render import render_text_description\nfrom langchain_community.utilities import SerpAPIWrapper\nfrom langchain_community.llms import HuggingFaceEndpoint\nfrom langchain_community.chat_models.huggingface import ChatHuggingFace\nfrom composio_langchain import ComposioToolSet, Action, App\n\n\nllm = HuggingFaceEndpoint(repo_id=\"HuggingFaceH4/zephyr-7b-beta\", huggingfacehub_api_token=os.getenv(\"HUGGINGFACEHUB_API_TOKEN\"))\n\nchat_model = ChatHuggingFace(llm=llm)\n# Import from composio_langchain\n\n\n# setup tools\ncomposio_toolset = ComposioToolSet()\ntools = composio_toolset.get_tools(apps=[App.SERPAPI])\n\n# setup ReAct style prompt\nprompt = hub.pull(\"hwchase17/react-json\")\nprompt = prompt.partial(\n    tools=render_text_description(tools),\n    tool_names=\", \".join([t.name for t in tools]),\n)\n\n# define the agent\nchat_model_with_stop = chat_model.bind(stop=[\"\\nInvalidStop\"])\nagent = (\n    {\n        \"input\": lambda x: x[\"input\"],\n        \"agent_scratchpad\": lambda x: format_log_to_str(x[\"intermediate_steps\"]),\n    }\n    | prompt\n    | chat_model_with_stop\n    | ReActJsonSingleInputOutputParser()\n)\n\n# instantiate AgentExecutor\nagent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True, handle_parsing_errors=True)\nagent_executor.return_intermediate_steps = True\nres = agent_executor.invoke(\n    {\n        \"input\": \"Use SERP to find the one latest AI news, take only description of article.\"\n    }\n)\n\nres2 = agent_executor.invoke({\n    \"input\": res['output']+' Summarize this'\n})\n```\n\n----------------------------------------\n\nTITLE: Executing the Workflow\nDESCRIPTION: Run the workflow with a specific task to star a GitHub repository\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langgraph.mdx#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfor chunk in app.stream(\n    {\n        \"messages\": [\n            (\n                \"human\",\n                \"Star the GitHub Repository composiohq/composio\",\n            )\n        ]\n    },\n    stream_mode=\"values\",\n):\n    chunk[\"messages\"][-1].pretty_print()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = await app.invoke({\n    messages: [\n        new HumanMessage(\"Star the GitHub Repository composiohq/composio\"),\n    ],\n});\n\nconsole.log(stream.messages[stream.messages.length - 1].content);\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Client for Composio Integration\nDESCRIPTION: Sets up the environment by importing required OpenAI packages and initializing the OpenAI client. This establishes the foundation for using OpenAI models with Composio's extended capabilities.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/openai/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\n\n# Initialize OpenAI client\nopenai_client = OpenAI()\n```\n\n----------------------------------------\n\nTITLE: Executing Agent Tasks\nDESCRIPTION: Creating and executing an agent to perform GitHub operations using the configured tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/groq.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntask = \"Star a repo composiohq/composio on GitHub\"\n\nagent = create_react_agent(llm, tools)\nagent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)\n\n# Execute using agent_executor\ninputs = {\"messages\": [(\"user\",  task)]}\nagent_executor.invoke(input=inputs)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Create an OpenAI functions agent with the provided LLM, tools, and prompt\nconst agent = await createReactAgent({\n      llm,\n      tools: tools,\n  });\n\n// Initialize the agent executor with verbosity enabled\nconst agentExecutor = new AgentExecutor({ agent, tools, verbose: true });\n\n// Invoke the agent to perform the task of starring a GitHub repository\nconst response = await agentExecutor.invoke({\"messages\": [(\"user\",  task)]});\n\n// Output the response from the agent execution\nconsole.log(response);\n```\n\n----------------------------------------\n\nTITLE: Executing Agent Task for GitHub Repository Starring\nDESCRIPTION: This code defines a task to star a specific GitHub repository and sends a message to the model to execute this task.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/google/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Define task\ntask = \"Star a repo composiohq/composio on GitHub\"\n\n# Send a message to the model\nresponse = chat.send_message(task)\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Composio Actions in Python\nDESCRIPTION: Initializes `ComposioToolSet` from `composio_openai` and uses `get_tools` with a specific `Action` enum (`Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER`) to fetch the schema definition for only that action. Assumes the Composio API key is available in environment variables. Prints the fetched tool schema.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_openai import ComposioToolSet, Action\n\n# Initialize ToolSet (assuming API key is in env)\ntoolset = ComposioToolSet()\n\n# Fetch only the tool for starring a GitHub repo\ngithub_star_tool = toolset.get_tools(\n    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]\n)\n\nprint(github_star_tool)\n# Output will contain the schema for the specified action.\n```\n\n----------------------------------------\n\nTITLE: Declaring Python Package Dependencies for Composio Project\nDESCRIPTION: This list specifies the required Python packages for the 'composiohq/composio' project. Dependencies include 'chromadb' for vector storage, 'sentence-transformers' and 'open-clip-torch' for generating embeddings, and 'composio-langchain' and 'langchain-openai' for integration with the LangChain framework and OpenAI models. These are typically listed in a requirements file (e.g., requirements.txt) and installed using a package manager like pip.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_langchain/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nchromadb\nsentence-transformers\nopen-clip-torch\ncomposio-langchain\nlangchain-openai\n```\n\n----------------------------------------\n\nTITLE: Automatic Tool Execution with Vercel AI SDK\nDESCRIPTION: Demonstrates how to automatically execute Composio tools using Vercel AI SDK. The example shows fetching GitHub user authentication tools and executing them through the framework's generateText function.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/executing-tools.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VercelAIToolSet } from \"composio-core\";\nimport { generateText } from 'ai';\nimport { openai } from '@ai-sdk/openai';\n\nconst toolset = new VercelAIToolSet(); // Gets API key from env\n\nasync function runVercelExample() {\n  const { tool } = await import('ai'); // Vercel AI SDK tool definition type\n\n  // 1. Fetch tool - Composio formats it for Vercel, including an 'execute' function\n  const tools = await toolset.getTools({ actions: [\"GITHUB_GET_THE_AUTHENTICATED_USER\"] });\n\n  // 2. Use the tool with the framework's function (e.g., generateText)\n  const { text, toolResults } = await generateText({\n    model: openai('gpt-4o-mini'),\n    prompt: 'Get my GitHub username',\n    tools: tools // Provide the Composio-generated tool definitions\n  });\n\n  // 3. Framework internally calls the 'execute' method on the chosen tool.\n  //    Composio's wrapper inside 'execute' handles the actual API call.\n  console.log(\"Tool Results:\", toolResults);\n  console.log(\"Final Text:\", text);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Data Visualization Agent\nDESCRIPTION: Implementation of an agent for processing data and generating visualizations. This agent uses code interpretation tools to create graphical representations of the SQL query results. It takes data from the SQL query, creates a bar chart visualization, and saves it as an image file.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/sql-agent.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Create the agent for data visualization\nvisualization_agent = create_openai_functions_agent(llm, code_tools, prompt)\nvisualization_executor = AgentExecutor(agent=visualization_agent, tools=code_tools, verbose=True)\n\n# Define the visualization task\nvisualization_task = (\n    f\"Using the following data from the top 10 highest salaries: {sql_result['output']}\\n\"\n    \"Create a bar chart showing first_name on the x-axis and salary on the y-axis. \"\n    \"Save the visualization as 'salary_chart.png'.\"\n)\n\n# Execute the visualization task\nvisualization_result = visualization_executor.invoke({\"input\": visualization_task})\nprint(f\"Visualization Result: {visualization_result['output']}\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to create data visualizations\nasync function createVisualization(data) {\n    // Get all tools including code interpreter\n    const allTools = await getAllTools();\n    \n    // Create the agent prompt\n    const prompt = await pull(\"hwchase17/openai-functions-agent\");\n    \n    // Create the agent for visualization\n    const agent = await createOpenAIFunctionsAgent({ \n        llm, \n        tools: allTools, \n        prompt \n    });\n\n    // Create the agent executor\n    const agentExecutor = new AgentExecutor({\n        agent,\n        tools: allTools,\n        verbose: true,\n    });\n\n    // Execute the visualization task\n    const result = await agentExecutor.invoke({\n        input: `Using the following data: ${data}\n                Create a bar chart showing first_name on the x-axis and salary on the y-axis.\n                Save the visualization as 'salary_chart.png'.`\n    });\n\n    console.log(\"Visualization Result:\", result.output);\n    return result.output;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing AI Agent for News Retrieval and Summarization\nDESCRIPTION: Demonstrates how to use the agent to find the latest AI news and summarize it, showing two separate invocations for retrieval and summarization.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/news_summary_agent.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nagent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True, handle_parsing_errors=True)\nagent_executor.return_intermediate_steps = True\nres = agent_executor.invoke(\n    {\n        \"input\": \"Use SERP to find the one latest AI news, take only description of article.\"\n    }\n)\n\nres2 = agent_executor.invoke({\n    \"input\": res['output']+' Summarize this'\n})\n```\n\n----------------------------------------\n\nTITLE: Gmail Response Postprocessing Example in Python\nDESCRIPTION: Shows implementation of postprocessing to filter Gmail fetch results, reducing response payload to only essential fields before returning to the LLM.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/processing-tools.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\ndef filter_email_results(result: dict) -> dict:\n    \"\"\"Filters email list to only include sender and subject.\"\"\"\n    if not result.get(\"successful\") or \"data\" not in result:\n        return result\n\n    original_messages = result[\"data\"].get(\"messages\", [])\n    if not isinstance(original_messages, list):\n        return result\n\n    filtered_messages = []\n    for email in original_messages:\n        filtered_messages.append({\n            \"sender\": email.get(\"sender\"),\n            \"subject\": email.get(\"subject\"),\n        })\n\n    processed_result = {\n        \"successful\": True,\n        \"data\": {\"summary\": filtered_messages},\n        \"error\": None\n    }\n    return processed_result\n\nprocessed_tools = toolset.get_tools(\n    actions=[Action.GMAIL_FETCH_EMAILS],\n    processors={\n        \"post\": {Action.GMAIL_FETCH_EMAILS: filter_email_results}\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Tools via Composio for LlamaIndex\nDESCRIPTION: Code to access GitHub tools provided by Composio specifically for LlamaIndex integration, focusing on repository starring functionality.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/llamaindex/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_llamaindex import App, Action, ComposioToolSet\n\n# Get All the tools\ncomposio_toolset = ComposioToolSet()\ntools = composio_toolset.get_actions(\n    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]\n)\nprint(tools)\n```\n\n----------------------------------------\n\nTITLE: Importing Base Packages and Initializing LangChain Agent\nDESCRIPTION: This code snippet demonstrates how to import necessary packages from LangChain, initialize the OpenAI Chat, and pull the agent prompt configuration.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langchain/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain.agents import create_openai_functions_agent, AgentExecutor\nfrom langchain import hub\nfrom langchain_openai import ChatOpenAI\n\n# Initialize LangChain OpenAI Chat\nllm = ChatOpenAI()\n\n# Pull the agent prompt configuration\nprompt = hub.pull(\"hwchase17/openai-functions-agent\")\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Issue with Custom Bearer Token in Python\nDESCRIPTION: This Python code demonstrates how to use the 'execute_action' method with a custom Bearer token to create a GitHub issue. It shows the structure of the 'auth' parameter and how to provide authentication details at runtime.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/injecting-credentials.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Python example providing a custom Bearer token\nfrom composio import ComposioToolSet, Action\n\ntoolset = ComposioToolSet()\nbearer_token = \"ghp_YourPersonalAccessToken...\" # Replace with your actual token\n\nprint(\"Creating issue using custom auth...\")\ntry:\n    result = toolset.execute_action(\n        action=Action.GITHUB_CREATE_ISSUE,\n        params={\n            \"owner\": \"your-username\",\n            \"repo\": \"test-repo\",\n            \"title\": \"Issue Created with Custom Token\",\n            \"body\": \"This issue uses an externally provided auth token.\"\n        },\n        # Provide authentication details via the 'auth' parameter\n        auth={\n            \"parameters\": [\n                {\n                    \"name\": \"Authorization\", # Header name\n                    \"value\": f\"Bearer {bearer_token}\", # Header value\n                    \"in_\": \"header\" # Placement (header, query, path, etc.)\n                }\n            ]\n            # 'base_url' could be added here for GitHub Enterprise\n            # 'body' could be added for complex auth flows if needed\n        }\n        # entity_id is typically not needed when providing full custom auth\n    )\n    print(result)\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Connecting GitHub account to Composio\nDESCRIPTION: Methods to connect a GitHub account to Composio. This can be done through CLI commands or programmatically in Python or JavaScript. An active GitHub integration is required to use GitHub tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposio login\ncomposio add github\n```\n\nLANGUAGE: python\nCODE:\n```\nrequest = composio_toolset.initiate_connection(app=App.GITHUB)\nprint(f\"Open this URL to authenticate: {request.redirectUrl}\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst connection = await toolset.connectedAccounts.initiate({appName: \"github\"})\nconsole.log(`Open this URL to authenticate: ${connection.redirectUrl}`);\n```\n\n----------------------------------------\n\nTITLE: Initiating OAuth Connection in Python and TypeScript\nDESCRIPTION: Demonstrates how to initiate an OAuth connection for a user entity using both Python and TypeScript SDKs. Handles the initial connection request and retrieves the redirect URL for user authorization.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/oauth.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_openai import ComposioToolSet, App\n\n# Assumes toolset is initialized\ntoolset = ComposioToolSet()\nuser_id = \"your_user_unique_id\"\n# Get this from your Composio Integration setup\ngoogle_integration_id = \"int_google_xxxxxxxx...\"\n\nentity = toolset.get_entity(id=user_id)\n\ntry:\n    print(f\"Initiating OAuth connection for entity {entity.id}...\")\n    connection_request = toolset.initiate_connection(\n        integration_id=google_integration_id,\n        entity_id=user_id,\n        # Optionally add: redirect_url=\"https://yourapp.com/final-destination\"\n        # if you want user sent somewhere specific *after* Composio finishes.\n        # Optional add: app=App.APP_NAME\n    )\n\n    # Check if a redirect URL was provided (expected for OAuth)\n    if connection_request.redirectUrl:\n        print(f\"Received redirect URL: {connection_request.redirectUrl}\")\n    else:\n        print(\"Error: Expected a redirectUrl for OAuth flow but didn't receive one.\")\n        # Handle error: Maybe the integration is misconfigured?\n\n    # Store connection_request.connectedAccountId if needed for Step 3 polling\n    # connection_id_in_progress = connection_request.connectedAccountId\n\nexcept Exception as e:\n    print(f\"Error initiating connection: {e}\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAIToolSet } from \"composio-core\";\n\n// Assumes toolset is initialized\nconst toolset = new OpenAIToolSet();\nconst userId = \"your_user_unique_id\";\n// Get this from your Composio Integration setup\nconst googleIntegrationId = \"int_google_xxxxxxxx...\";\n\nconsole.log(`Initiating OAuth connection for entity ${userId}...`);\nconst connectionRequest = await toolset.connectedAccounts.initiate({\n    integrationId: googleIntegrationId,\n    entityId: userId,\n    // Optionally add: redirectUri: \"https://yourapp.com/final-destination\"\n    // if you want user sent somewhere specific *after* Composio finishes.\n});\n\n// Check if a redirect URL was provided (expected for OAuth)\nif (connectionRequest?.redirectUrl) {\n    console.log(`Received redirect URL: ${connectionRequest.redirectUrl}`);\n    // Proceed to Step 2: Redirect the user\n    // Return or pass connectionRequest to the next stage\n} else {\n    console.error(\"Error: Expected a redirectUrl for OAuth flow but didn't receive one.\");\n    // Handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Executing CrewAI Agent for GitHub Actions\nDESCRIPTION: Python code to configure a CrewAI agent for GitHub actions, define a task to star a specific repository, and execute the task. This demonstrates how to use the agent to perform a GitHub action using natural language commands.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/crew_ai/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncrewai_agent = Agent(\n    role='Github Agent',\n    goal=\"You take action on Github using Github APIs\",\n    backstory=\"You are an AI agent responsible for taking actions on Github on users' behalf using Github APIs\",\n    verbose=True,\n    tools=tools,\n    llm=llm\n)\n\n# Define the task\ntask = Task(\n    description=\"Star a repo composiohq/composio on GitHub\",\n    agent=crewai_agent,\n    expected_output=\"if the star happened\"\n)\n\n# Execute the task\ntask.execute()\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Tools from Composio\nDESCRIPTION: Initialize the Composio toolset and retrieve specific GitHub tools, focusing on the repository starring functionality.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/ibm.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncomposio_toolset = ComposioToolSet()\ntools = composio_toolset.get_tools(\n    actions=[Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER]\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Configuring Letta Client\nDESCRIPTION: This snippet demonstrates how to import the necessary libraries and configure the Letta client for both Python and JavaScript. It sets up the base URL for the Letta client and initializes the Composio toolset.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/letta.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\nfrom composio_langchain import Action, ComposioToolSet, App\n\nclient = Letta(base_url=\"http://localhost:8283\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LettaClient } from '@letta-ai/letta-client'\nimport { ComposioToolSet } from \"composio-core\"\n\nconst client = new LettaClient({\n    baseUrl: \"http://localhost:8283\",\n});\n\nconst toolset = new ComposioToolSet()\n```\n\n----------------------------------------\n\nTITLE: Defining the Model Call Node for LangGraph\nDESCRIPTION: Creation of a function that defines how the LLM model is called within the LangGraph workflow, handling messages and returning responses.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langgraph/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef call_model(state: MessagesState):\n    messages = state[\"messages\"]\n    response = model_with_tools.invoke(messages)\n    return {\"messages\": [response]}\n```\n\n----------------------------------------\n\nTITLE: Executing GitHub API Call with Composio in TypeScript\nDESCRIPTION: TypeScript code that uses Composio to fetch the authenticated user's GitHub information. It sets up tools, creates an LLM prompt, and handles the tool call execution.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/quickstart.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst tools = await toolset.getTools({ actions: [\"GITHUB_GET_THE_AUTHENTICATED_USER\"]})\nconst task = \"Get my GitHub username.\"\nconst messages = [\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant that can use tools.\"},\n    {\"role\": \"user\", \"content\": task},\n]\n\nconst response = await client.chat.completions.create({\n    model: \"gpt-4o-mini\", // Or another capable model\n    messages: messages,\n    tools: tools,   // The tools we prepared earlier\n    tool_choice: \"auto\", // Let the LLM decide whether to use a tool\n});\n\n\nconst result = await toolset.handleToolCall(response);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Creating AI Agent for Code Generation and Execution\nDESCRIPTION: Defines the AI agent that will generate and execute code. The Python version uses CrewAI's Agent class with a detailed role definition, while JavaScript uses LangChain's function agent architecture.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/code-execution-agent.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Define the Python executor agent\npython_executor_agent = Agent(\n    role=\"Python Executor\",\n    goal=\"Execute Python code to solve problems\",\n    backstory=\"\"\"You are an expert Python developer specializing in executing code to solve various problems.\n    Your job is to analyze problems, write efficient Python code to solve them, and execute the code to ensure it works correctly.\"\"\",\n    verbose=True,\n    allow_delegation=False,\n    tools=tools,\n    llm=llm\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the agent\nconst prompt = await pull(\"hwchase17/openai-functions-agent\");\nconst agent = await createOpenAIFunctionsAgent({\n    llm,\n    tools,\n    prompt\n});\n\n// Set up the agent executor\nconst agentExecutor = new AgentExecutor({\n    agent,\n    tools,\n    verbose: true\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Composio GitHub Action by Entity ID in Python\nDESCRIPTION: This Python snippet demonstrates using the `toolset.execute_action` method to fetch the authenticated GitHub user's information via Composio. It specifies the action (`Action.GITHUB_GET_THE_AUTHENTICATED_USER`) and uses the `entity_id` parameter to let Composio determine the correct connection for the specified user. The result's success status is checked, and either the username or an error message is printed.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Execute using the user's entity_id (Composio finds the right connection)\nprint(f\"\\nFetching GitHub username for entity: {user_id_in_my_app}\")\nuser_info = toolset.execute_action(\n    action=Action.GITHUB_GET_THE_AUTHENTICATED_USER,\n    params={},\n    entity_id=user_id_in_my_app # Specify the user context\n)\n\nif user_info.get(\"successful\"):\n    print(\"GitHub username:\", user_info.get(\"data\", {}).get(\"login\"))\nelse:\n    print(\"Failed to fetch user:\", user_info.get(\"error\"))\n```\n\n----------------------------------------\n\nTITLE: Gmail Input Preprocessing Example in Python\nDESCRIPTION: Demonstrates preprocessing implementation to inject required email recipient values and default subjects before tool execution.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/processing-tools.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef inject_gmail_recipient(inputs: dict) -> dict:\n    \"\"\"Injects a fixed recipient email into the inputs.\"\"\"\n    inputs[\"recipient_email\"] = \"fixed.recipient@example.com\"\n    inputs[\"subject\"] = inputs.get(\"subject\", \"No Subject Provided\")\n    return inputs\n\nprocessed_tools = toolset.get_tools(\n    actions=[Action.GMAIL_SEND_EMAIL],\n    processors={\n        \"schema\": {Action.GMAIL_SEND_EMAIL: simplify_gmail_send_schema},\n        \"pre\": {Action.GMAIL_SEND_EMAIL: inject_gmail_recipient}\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Validating Tool Execution Response\nDESCRIPTION: Code for handling and validating the tool calls made during agent execution to ensure the GitHub repository starring task was completed successfully.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/julep/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nexecution_output = toolset.handle_tool_calls(response)\nprint(execution_output)\n```\n\n----------------------------------------\n\nTITLE: Initiating Connection with User Credentials in TypeScript\nDESCRIPTION: This TypeScript code shows how to initiate a connection using user-provided credentials. It uses the connectedAccounts.initiate method to establish a secure connection between the user and the external application, passing the API key and necessary configuration parameters.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/non-oauth.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst userId = \"user_shopify_456\";\n// Assume user provided this value securely via your UI\nconst userProvidedShopifyKey = \"sk_live_xxxxxxxxxxxxxxx\";\n\ntry {\n    console.log(`Initiating Shopify connection for entity ${userId}...`);\n    const connectionRequest = await toolset.connectedAccounts.initiate({\n        integrationId: \"int_shopify_yyyyyyyy...\",\n        authMode: \"API_KEY\", // Must match the integration's config\n        // Pass the user-provided key(s) here\n        connectionParams: {\n            api_key: userProvidedShopifyKey\n            // Add other fields if the app requires more\n        }\n    });\n    console.log(\"Connection initiation response:\", connectionRequest);\n    // Status should be ACTIVE almost immediately\n    // const connectionId = connectionRequest.connectedAccountId;\n} catch (error) {\n    console.error(\"Error initiating connection:\", error);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Hono and Importing Libraries\nDESCRIPTION: Import and initialize the Hono framework and Composio CloudflareToolSet for the worker.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/cloudflare.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Hono } from 'hono';\nimport { CloudflareToolSet } from \"composio-core\"\n\nconst app = new Hono();\n```\n\n----------------------------------------\n\nTITLE: Example Agent Commands for GitHub Interaction\nDESCRIPTION: Sample commands to demonstrate GitHub interactions through the agent, including starring a repository and getting commit information.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/griptape.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nStar composiohq/composio repository\n```\n\nLANGUAGE: bash\nCODE:\n```\nGet last commit on composiohq/composio repository\n```\n\n----------------------------------------\n\nTITLE: Configuring Julep Agent with Composio Tools\nDESCRIPTION: Creates and configures a Julep agent with Composio toolset and GitHub integration\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/julep.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Initialise the Composio Tool Set\ncomposio_toolset = ComposioToolSet()\n\n# Register the GitHub app with the right settings\n\ntools = composio_toolset.get_tools(apps=[App.GITHUB])\n\n# Create and configure the Julep agent\n\nagent = julep_client.agents.create(\nname=\"Jessica\",\nabout=\"Tech entrepreneur with a focus on sustainability and AI.\",\ndefault_settings={\n\"temperature\": 0.7,\n\"top_p\": 1,\n\"min_p\": 0.01,\n\"presence_penalty\": 0,\n\"frequency_penalty\": 0,\n\"length_penalty\": 1.0,\n\"max_tokens\": 150\n},\nmodel=\"gpt-4-turbo\",\ntools=tools,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Lyzr Agent to Star a GitHub Repository\nDESCRIPTION: A complete Python implementation that creates a Lyzr agent capable of starring a GitHub repository through natural language commands. It uses the Composio toolset to connect with GitHub's API and perform the star action.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/lyzr/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom  lyzr_automata  import  Task, Agent\nfrom lyzr_automata.ai_models.openai import OpenAIModel\nfrom lyzr_automata.tasks.task_literals import InputType, OutputType\nfrom lyzr_automata.pipelines.linear_sync_pipeline import LinearSyncPipeline\n\nimport os\nimport dotenv\ndotenv.load_dotenv()\nfrom composio_lyzr import ComposioToolSet, App, Action\n\nopen_ai_text_completion_model = OpenAIModel(\n    api_key=os.environ[\"OPENAI_API_KEY\"],\n    parameters={\n        \"model\": \"gpt-4-turbo-preview\",\n        \"temperature\": 0.2,\n        \"max_tokens\": 1500,\n    },\n)\n\n\nlyzr_agent = Agent(\n        role=\"Github Agent\",\n        prompt_persona=\"You are AI agent that is responsible for taking actions on Github on users behalf. You need to take action on Github using Github APIs\"\n    )\n\ncomposio_toolset = ComposioToolSet()\ncomposio_tool = composio_toolset.get_lyzr_tool(Action.GITHUB_STAR_REPO)\n\ntask = Task(\n        name=\"Github Starring\",\n        agent=lyzr_agent,\n        tool=composio_tool,\n        output_type=OutputType.TEXT,\n        input_type=InputType.TEXT,\n        model=open_ai_text_completion_model,\n        instructions=\"Star a repo composiohq/composio on GitHub\",\n        log_output=True,\n        enhance_prompt=False,\n)\n\nlyzr_output = LinearSyncPipeline(\n    name=\"Composio Lyzr\",\n\t\t# completion message after pipeline completes\n    completion_message=\"Task completed\",\n    tasks=[\n\t\t\t\t# tasks are instance of Task class\n        task,\n    ],\n).run()\n\nprint(lyzr_output)\n```\n\n----------------------------------------\n\nTITLE: Setting up GitHub Tools Integration\nDESCRIPTION: Code for integrating GitHub tools with Composio, setting up the toolset and actions for GitHub operations.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/togetherai/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_togetherai import Action, ComposioToolSet, App\n\n\ntoolset = ComposioToolSet()\nactions = toolset.get_tools(apps=[App.GITHUB])\n```\n\n----------------------------------------\n\nTITLE: Setting Up E2B Sandbox Workspace\nDESCRIPTION: Configuration for running the agent in an E2B sandbox environment.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/swe/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom composio import ComposioToolSet, WorkspaceType\n\ntoolset = ComposioToolSet(\n    workspace_config=WorkspaceType.E2B(),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Authentication to Toolset in Python\nDESCRIPTION: This Python code snippet shows how to add custom authentication information for a specific app (GitHub in this case) at the toolset level. It demonstrates setting up the authentication parameters that will be used for subsequent action executions.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/injecting-credentials.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntoolset.add_auth(\n    app=App.GITHUB,\n    parameters=[\n        dict(\n            name=\"Authorization\",\n            in_=\"header\",\n            value=bearer_token,\n        )\n    ],\n)\n\ntoolset.execute_action(\n    action=Action.GITHUB_CREATE_ISSUE,\n    params={\n        ...,\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Composio Tools for PraisonAI\nDESCRIPTION: Script to fetch and configure GitHub tools from Composio in PraisonAI compatible format\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/praisonai/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_praisonai import Action, ComposioToolSet\n\ncomposio_toolset = ComposioToolSet()\ntools = composio_toolset.get_actions(\n    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]\n)\n\ntool_section_str = composio_toolset.get_tools_section(tools)\nprint(tool_section_str)\n```\n\n----------------------------------------\n\nTITLE: Creating the LangGraph Workflow with Nodes and Edges\nDESCRIPTION: Defining the complete LangGraph workflow including conditional logic to determine whether to execute tools or end the workflow, then compiling the workflow into an executable application.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langgraph/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef should_continue(state: MessagesState) -> Literal[\"tools\", \"__end__\"]:\n    messages = state[\"messages\"]\n    last_message = messages[-1]\n    if last_message.tool_calls:\n        return \"tools\"\n    return \"__end__\"\n\n\nworkflow = StateGraph(MessagesState)\n\n# Define the two nodes we will cycle between\nworkflow.add_node(\"agent\", call_model)\nworkflow.add_node(\"tools\", tool_node)\n\nworkflow.add_edge(\"__start__\", \"agent\")\nworkflow.add_conditional_edges(\n    \"agent\",\n    should_continue,\n)\nworkflow.add_edge(\"tools\", \"agent\")\n\napp = workflow.compile()\n```\n\n----------------------------------------\n\nTITLE: Creating the Agent with Tools for Research\nDESCRIPTION: Set up the agent with all the necessary tools and capabilities. Python creates an OpenAIAgent with GitHub and ArXiv tools, configuring parameters like function calls and verbosity. JavaScript initializes an OpenAI client and creates a function to set up an OpenAI Assistant with the appropriate tools and instructions.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Create the agent with tools\nagent = OpenAIAgent.from_tools(\n    tools=github_tools + arxiv_tool.to_tool_list(),\n    llm=llm,\n    prefix_messages=prefix_messages,\n    max_function_calls=10,\n    allow_parallel_tool_calls=False,\n    verbose=True,\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize OpenAI client\nconst client = new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY\n});\n\n// Create an OpenAI Assistant with the tools\nconst createAssistant = async (tools) => {\n    return await client.beta.assistants.create({\n        model: \"gpt-4-turbo\",\n        description: \"Research Agent that interacts with GitHub\",\n        instructions: \"You are a helpful assistant that researches topics and creates GitHub issues\",\n        tools: tools,\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Ensuring Output Strings via JSON Serialization (Python)\nDESCRIPTION: Adapts result outputs so that frameworks expecting strings instead of dicts receive a JSON-serialized string. Used as a return transform in integration logic. Dependencies: standard Python json package. Inputs: result (often a dict or arbitrary value). Outputs: JSON string of result, always. Limitation: does not pretty-print or handle complex objects automatically.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\n# When returning tool results\nif isinstance(result, dict):\n    return json.dumps(result)  # For frameworks that expect strings\nelse:\n    return json.dumps({\"result\": result})\n```\n\n----------------------------------------\n\nTITLE: Identifying User and Target App in Composio Auth\nDESCRIPTION: Demonstrates how to specify a unique entity ID for a user and define the target application for connection. The entity ID serves as the user's identifier in your application.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# User identifier from your application\nuser_id_in_my_app = \"user-alice-456\"    # Can be UUID from DB\napp_to_connect = \"github\" # The app key\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// User identifier from your application\nconst userIdInMyApp = \"user-alice-456\"; // Can be UUID from DB\nconst appToConnect = \"github\"; // The app key\n```\n\n----------------------------------------\n\nTITLE: Initializing Environment and Client for Griptape-Composio Integration\nDESCRIPTION: Python code for setting up the development environment by importing necessary libraries from Griptape and Composio, and loading environment variables for configuration.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/griptape/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom griptape.structures import Agent\nfrom griptape.utils import Chat\n\nfrom composio_griptape import App, Action, Tag, ComposioToolSet\nimport dotenv\n\n\ndotenv.load_dotenv(\"/Users/sawradip/Desktop/practice_code/practice_composio/composio_sdk/examples/.env\")\n```\n\n----------------------------------------\n\nTITLE: Defining Research Agent for Research Assistant in Python\nDESCRIPTION: This snippet creates a Researcher agent with a specific role, goal, and backstory. It sets up the agent with the initialized tools and language model.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/research_assistant.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresearcher = Agent(\n     role='Researcher',\n     goal='Search the internet for the information requested',\n     backstory=\"\"\"\n     You are a researcher. Using the information in the task, you find out some of the most popular facts about the topic along with some of the trending aspects.\n     You provide a lot of information thereby allowing a choice in the content selected for the final blog.\n     \"\"\",\n     verbose=True,\n     allow_delegation=False,\n     tools=tools,\n     llm=llm\n )\n```\n\n----------------------------------------\n\nTITLE: Exposing a Newsletter Summarization API with Composio and Hono - JavaScript\nDESCRIPTION: This JavaScript snippet creates an API endpoint using Hono and Composio Core to automate newsletter summarization and emailing within a Cloudflare Pages or local environment. It configures the language model (OpenAI GPT-4o), sets up the toolset with a supplied API key, and defines a POST endpoint that expects a connection ID in headers. The endpoint retrieves Gmail tools, orchestrates fetching, summarization, and email-sending instructions for the LLM, and returns the result to the API caller. Dependencies: 'hono', 'composio-core', '@langchain/openai', 'dotenv', and Bun (for local testing). Inputs include date range and connection info via headers; output is a JSON status indicating the operation result or error.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Hono } from \\\"hono\\\";\\nimport { handle } from \\\"hono/cloudflare-pages\\\";\\nimport { CloudflareToolSet } from \\\"composio-core\\\";\\nimport { ChatOpenAI } from \\\"@langchain/openai\\\";\\nimport dotenv from 'dotenv';\\n\\ndotenv.config();\\n\\n// Initialize the language model\\nconst llm = new ChatOpenAI({ model: \\\"gpt-4o\\\" });\\n\\n// Create Hono app\\nconst app = new Hono();\\n\\n// Configure Composio\\nconst composioToolset = new CloudflareToolSet({\\n    apiKey: process.env.COMPOSIO_API_KEY\\n});\\n  \\n// Function to set up connected account\\nconst setupConnection = async (c) => {\\n    const connectionId = c.req.headers.get(\\\"x-connection-id\\\");\\n      \\n    if (!connectionId) {\\n        return { \\n            ok: false, \\n            error: \\\"No connection ID provided in headers\\\" \\n        };\\n    }\\n      \\n    return { ok: true, connectionId };\\n};\\n\\napp.post(\\\"/summarize-newsletters\\\", async (c) => {\\n    // Set up connection\\n    const { ok, connectionId, error } = await setupConnection(c);\\n    if (!ok) return c.json({ error }, 400);\\n      \\n    // Get Gmail tools\\n    const tools = await composioToolset.getTools({\\n        actions: [\\\"gmail_list_messages\\\", \\\"gmail_get_message\\\", \\\"gmail_send_email\\\"],\\n        connectionId\\n    });\\n      \\n    // Get today's date and the date from 7 days ago\\n    const today = new Date().toLocaleDateString(\\\"en-US\\\", {\\n        year: \\\"numeric\\\",\\n        month: \\\"2-digit\\\",\\n        day: \\\"2-digit\\\"\\n    }).replace(/\\//g, \\\"/\\\");\\n      \\n    const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toLocaleDateString(\\\"en-US\\\", {\\n        year: \\\"numeric\\\",\\n        month: \\\"2-digit\\\",\\n        day: \\\"2-digit\\\"\\n    }).replace(/\\//g, \\\"/\\\");\\n      \\n    try {\\n        // Process instructions for the AI\\n        const instructions = `\\n            1. Search for newsletter emails in the inbox from ${weekAgo} to ${today}\\n            2. For each newsletter found:\\n               - Read the content\\n               - Create a concise summary highlighting key points\\n            3. Compose a single email with all summaries organized clearly\\n            4. Send the summary email to the specified recipient with the subject 'Weekly Newsletter Digest'\\n        `;\\n          \\n        // Message to process with tool calling\\n        const message = {\\n            role: \\\"user\\\",\\n            content: instructions\\n        };\\n          \\n        // Process the message with tool calling\\n        const result = await composioToolset.process({\\n            messages: [message],\\n            tools,\\n            llm,\\n            recipient: \\\"youremail@example.com\\\"  // Replace with actual recipient\\n        });\\n          \\n        return c.json({ status: \\\"success\\\", result });\\n    } catch (error) {\\n        console.error(\\\"Error:\\\", error);\\n        return c.json({ status: \\\"error\\\", message: error.message }, 500);\\n    }\\n});\\n\\n// Set up Cloudflare Pages handler\\nexport default {\\n    fetch: handle(app)\\n};\\n\\n// For local testing\\nif (import.meta.main) {\\n    console.log(\\\"Starting server on http://localhost:8787\\\");\\n    Bun.serve({\\n        fetch: app.fetch,\\n        port: 8787\\n    });\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Executing the Agent\nDESCRIPTION: Code for creating a user, setting up a situation prompt, creating a session, and executing the agent to perform a GitHub repository starring task.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/julep/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nabout = \"\"\"\nSawradip, a software developer, is passionate about impactful tech. \nAt the tech fair, he seeks investors and collaborators for his project.\n\"\"\"\nuser = client.users.create(\n    name=\"Sawradip\",\n    about=about,\n)\n\nsituation_prompt = \"\"\"You are Jessica, a key figure in the tech community, always searching for groundbreaking technologies. At a tech fair filled with innovative projects, your goal is to find and support the next big thing.\n\nYour journey through the fair is highlighted by encounters with various projects, from groundbreaking to niche. You believe in the power of unexpected innovation.\n\nRecent Tweets\n1. 'Amazed by the tech fair's creativity. The future is bright. #TechInnovation'\n2. 'Met a developer with a transformative tool for NGOs. This is the\n\"\"\"\n\nsession = client.sessions.create(\n    user_id=user.id, agent_id=agent.id, situation=situation_prompt\n)\n\nuser_msg = \"Hi, I am presenting my project, hosted at github repository composiohq/composio. If you like it, adding a star would be helpful \"\n\n# user_msg = \"What do you like about tech?\"\n\nresponse = client.sessions.chat(\n    session_id=session.id,\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": user_msg,\n            \"name\": \"Sawradip\",\n        }\n    ],\n    recall=True,\n    remember=True,\n)\n\npprint(response)\n```\n\n----------------------------------------\n\nTITLE: Executing Assistant for GitHub Repository Starring\nDESCRIPTION: Implementation of the assistant configuration and execution for starring a GitHub repository using conversational commands\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/phidata/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmy_task = \"Star a repo composiohq/composio on GitHub\"\n\n# Create a chat completion request to decide on the action\nassistant = Assistant(tools=composio_tools, show_tool_calls=True)\n\nassistant.print_response(\"Can you star ComposioHQ/composio repo?\")\n```\n\n----------------------------------------\n\nTITLE: Registering GitHub Tools with Composio\nDESCRIPTION: Initializes the Composio ToolSet and registers GitHub tools, linking them with the appropriate executor and caller agents for executing GitHub operations.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/autogen/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_autogen import ComposioToolSet, App, Action\n\n# Initialize Composio Toolset\ncomposio_tools = ComposioToolSet()\n\n# Register tools with appropriate executors\ncomposio_tools.register_tools(tools=[App.GITHUB], caller=chatbot, executor=user_proxy)\n```\n\n----------------------------------------\n\nTITLE: Discovering Required Fields for API Key Authentication in TypeScript\nDESCRIPTION: This TypeScript code shows how to query the required credential fields for an external app connection using the getRequiredParamsForAuthScheme method. It retrieves field names and descriptions to present to users in order to collect necessary authentication information.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/non-oauth.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAIToolSet } from \"composio-core\";\n\nconst toolset = new OpenAIToolSet();\n// Example: Find required fields for Stripe (which uses API Key)\nconst appKey = \"SHOPIFY\";\nconst authSchemeForShopify = \"API_KEY\"; // Check Integration config or Tool Directory\n\ntry {\n  const requiredInfo = await toolset.client.apps.getRequiredParamsForAuthScheme(\n    {\n      appId: appKey,\n      authScheme: authSchemeForShopify,\n    }\n  );\n  const fieldNames = requiredInfo.required_fields;\n  console.log(\n    `Required fields for ${appKey} (${authSchemeForShopify}): ${fieldNames}`\n  );\n  // Example Output for Stripe: ['api_key']\n  // Use requiredInfo.fields for descriptions to show the user\n} catch (error) {\n  console.error(\"Error fetching required params:\", error);\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting GitHub Account via Python\nDESCRIPTION: Python code to initiate GitHub connection and get authentication URL\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/autogen.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrequest = toolset.initiate_connection(app=App.GITHUB)\nprint(f\"Open this URL to authenticate: {request.redirectUrl}\")\n```\n\n----------------------------------------\n\nTITLE: Creating an OpenAI Assistant with Composio tools\nDESCRIPTION: Code to define an OpenAI Assistant that can use Composio tools. The assistant is configured with a name, instructions, model, and the GitHub tools retrieved earlier.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nassistant_instruction = \"You are a super intelligent personal assistant\"\n\nassistant = openai_client.beta.assistants.create(\n  name=\"Personal Assistant\",\n  instructions=assistant_instruction,\n  model=\"gpt-4-turbo-preview\",\n  tools=tools,\n)\n\nthread = openai_client.beta.threads.create()\nmy_task = \"Star a repo composiohq/composio on GitHub\"\nmessage = openai_client.beta.threads.messages.create(thread_id=thread.id,role=\"user\",content=my_task)\n\nrun = openai_client.beta.threads.runs.create(thread_id=thread.id,assistant_id=assistant.id)\n\nresponse_after_tool_calls = composio_toolset.wait_and_handle_assistant_tool_calls(\n    client=openai_client,\n    run=run,\n    thread=thread,\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function createGithubAssistant(openai, tools) {\n    return await openai.beta.assistants.create({\n        name: \"Github Assistant\",\n        instructions: \"You're a GitHub Assistant, you can do operations on GitHub\",\n        tools: tools,\n        model: \"gpt-4o-mini\"\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tools with TypeScript and Zod Schema\nDESCRIPTION: Shows how to create custom tools in TypeScript using createAction method with Zod schema validation for input parameters and async callback functions.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/custom-tools.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAIToolSet } from \"composio-core\"; // Or your specific framework ToolSet\nimport { z } from \"zod\";\n\nconst toolset = new OpenAIToolSet(); // Initialize ToolSet\n\n// Define the input schema using Zod\nconst addSchema = z.object({\n    a: z.number().describe(\"The first number to add\"),\n    b: z.number().describe(\"The second number to add\"),\n});\n\n// Register the custom action\nawait toolset.createAction({\n    actionName: \"add_numbers\", // Unique name for this tool\n    description: \"Adds two numbers and returns the sum.\",\n    inputParams: addSchema, // Provide the Zod schema\n    // The callback function containing your logic\n    callback: async (input) => {\n        // Safely access validated input (casting based on schema)\n        const params = input as z.infer<typeof addSchema>;\n        console.log(`Executing add_numbers: Adding ${params.a} and ${params.b}`);\n        const sum = params.a + params.b;\n        // Return a JSON-serializable result\n        return { result: sum };\n    },\n});\n\nconsole.log(\"Custom action 'add_numbers' registered.\");\n```\n\n----------------------------------------\n\nTITLE: Importing Google AI Python Packages and Initializing Client\nDESCRIPTION: Sets up the environment by importing necessary packages from Google AI Python and creating a client instance for API interactions.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/gemini/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom google import genai\n\n# Create google client\nclient = genai.Client()\n```\n\n----------------------------------------\n\nTITLE: Initializing Composio GitHub Tools\nDESCRIPTION: Configuration and initialization of GitHub tools provided by Composio.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/smolagent/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Initialize toolset\ncomposio_toolset = ComposioToolSet()\n\n# Get GitHub tools with retry configuration\ntools = composio_toolset.get_tools(\n    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER],\n)\n```\n\n----------------------------------------\n\nTITLE: Executing GitHub Repository Star Action\nDESCRIPTION: Implementation of the chat completion request to execute GitHub repository starring through conversational AI.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/togetherai/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmy_task = \"Star a repo composiohq/composio on GitHub\"\n\n# Create a chat completion request to decide on the action\nresponse = client.chat.completions.create(model=\"gpt-4o\",\n    tools=actions, # Passing actions we fetched earlier.\n    messages=[\n            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n            {\"role\": \"user\", \"content\": my_task}\n        ]\n    )\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Creating Host Workspace Configuration\nDESCRIPTION: Configuration for running the agent on the host machine using ComposioToolSet.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/swe/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom composio import ComposioToolSet, WorkspaceType\n\ntoolset = ComposioToolSet(\n    workspace_config=WorkspaceType.Host()\n)\n```\n\n----------------------------------------\n\nTITLE: Running SWEBench-Agent-v2 Benchmark\nDESCRIPTION: Python command to run the benchmark with a specific test instance ID. The example uses 'django__django-14434' as the test instance.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/swe/agent/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython benchmark.py --test-instance-ids \"django__django-14434\"\n```\n\n----------------------------------------\n\nTITLE: Executing GitHub Star Operation\nDESCRIPTION: Initiating the chat with Autogen agent to star a GitHub repository\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/autogen.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntask = \"Star a repo composiohq/composio on GitHub\"\nresponse = user_proxy.initiate_chat(chatbot, message=task)\nprint(response.chat_history)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Integration Usage with Framework Agent (Python)\nDESCRIPTION: This script (framework_demo.py) shows how to use the integration in practice. It loads environment variables, initializes the custom ComposioToolSet, selects tools, and demonstrates running an action using a framework-specific agent and runner. Dependencies: composio integration, target framework library, dotenv for environment loading. Main parameters: agent name, list of tools, agent input prompt. Outputs: prints the result of running the integrated agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nExample demonstrating how to use the [Your Framework] integration with Composio.\n\"\"\"\n\nimport os\nimport dotenv\n\n# Import from your target framework\nfrom targetframework import Agent, Runner\n\n# Import from your integration\nfrom composio_yourframework import App, Action, ComposioToolSet\n\n# Set up environment\ndotenv.load_dotenv()\n\ndef main():\n    # Initialize your toolset\n    toolset = ComposioToolSet()\n    \n    # Get specific tools\n    tools = toolset.get_tools(actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER])\n    \n    # Create a framework agent with the tools\n    agent = Agent(\n        name=\"Demo Agent\",\n        tools=tools,\n        # Other framework-specific parameters\n    )\n    \n    # Run the agent\n    result = Runner.run(\n        agent, \n        \"Perform an action using the integrated tools\"\n    )\n    \n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Running the Main Python Agent Script using Shell\nDESCRIPTION: This command executes the main Python script (`main.py`) for the Indie Hacker Agent using the Python interpreter. This script contains the core logic for the agent, utilizing Composio, Langgraph, and OpenAI for content writing and posting.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/indie_hacker_agent/langgraph/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/advanced_agents/indie_hacker_agent/letta/main.py\n```\n\n----------------------------------------\n\nTITLE: Integrating GitHub Tools with Composio\nDESCRIPTION: Setting up the Composio toolset and fetching specific GitHub actions to enable the agent to interact with GitHub repositories. This snippet specifically configures the ability to star repositories.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/agno/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_agno import ComposioToolSet, Action\n\ntoolset = ComposioToolSet()\ncomposio_tools = toolset.get_actions(actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER])\n```\n\n----------------------------------------\n\nTITLE: Installing Composio-Julep and Setting Up GitHub Connection\nDESCRIPTION: Commands for installing the composio-julep package and connecting GitHub integration\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/julep.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-julep\n\n# Connect your GitHub so agents can interact with it\n\ncomposio add github\n\n# Check all supported apps\n\ncomposio apps\n```\n\n----------------------------------------\n\nTITLE: Initiating Connections for User Authorization in Composio\nDESCRIPTION: Demonstrates how to initiate a connection for a user by providing either an integration_id or app_name, and how to execute actions using the established connection. The actual flow depends on whether the app uses OAuth or requires user-provided tokens.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/connection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Conceptual initiation - details depend on auth type\nconnection_request = toolset.initiate_connection(\n    integration_id=YOUR_INTEGRATION_ID, entity_id=user_identifier_from_my_app\n)\n# or\nconnection_request = toolset.initiate_connection(\n    app_name=App.GITHUB, entity_id=user_identifier_from_my_app\n)\n\ntoolset.execute_action(\n    action=Action.GITHUB_CREATE_AN_ISSUE, params={...}, entity_id=user_identifier_from_my_app\n)\n\ntoolset.execute_action(\n    action=Action.GITHUB_CREATE_AN_ISSUE,\n    params={...},\n    entity_id=user_identifier_from_my_app\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Conceptual initiation - details depend on auth type\nconst connectionRequest = await toolset.connectedAccounts.initiate({\n  integrationId: YOUR_INTEGRATION_ID,\n});\n// or\n// const connectionRequest = await entity.initiateConnection({ appName: \"github\" });\n\ntoolset.executeAction({\n  action: \"GITHUB_CREATE_AN_ISSUE\",\n  params: {},\n  entityId: userIdentifierFromMyApp\n});\n```\n\n----------------------------------------\n\nTITLE: Using DescopeAuth for Descope Integration in Python\nDESCRIPTION: This Python code demonstrates how to use the DescopeAuth utility for simpler Descope integration. It shows initializing DescopeAuth with project credentials and adding authentication to the toolset using DescopeAuth for a specific app (GitHub in this example).\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/injecting-credentials.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom composio.utils.descope import DescopeAuth\n\n# Initialize DescopeAuth with your credentials\ndescope = DescopeAuth(\n    project_id=\"your_project_id\",    # Or uses DESCOPE_PROJECT_ID env var\n    management_key=\"your_management_key\"  # Or uses DESCOPE_MANAGEMENT_KEY env var\n)\n\ntoolset = ComposioToolSet()\n\n# Add authentication using DescopeAuth\ntoolset.add_auth(\n    app=App.GITHUB,\n    parameters=descope.get_auth(\n        app=App.GITHUB,\n        user_id=\"your_user_id\",\n        scopes=[\"user\", \"public_repo\"]  # Permissions for the token\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Task via Julep Agent\nDESCRIPTION: Creates a user session and executes a GitHub repository starring task through the Julep agent\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/julep.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nabout = \"\"\"\nSam, a software developer, is passionate about impactful tech.\nAt the tech fair, he seeks investors and collaborators for his project.\n\"\"\"\nuser = julep_client.users.create(\n    name=\"Sam\",\n    about=about,\n)\n\nsituation_prompt = \"You are at a tech fair seeking innovative projects.\"\nsession = julep_client.sessions.create(user_id=user.id, agent_id=agent.id, situation=situation_prompt)\n\nuser_msg = \"Could you star the GitHub repository composiohq/composio?\"\n\nresponse = julep_client.sessions.chat(\n    session_id=session.id,\n    messages=[\n        {\"role\": \"user\", \"content\": user_msg, \"name\": \"Sam\"}\n    ],\n    recall=True,\n    remember=True\n)\n```\n\n----------------------------------------\n\nTITLE: Executing PraisonAI Agent\nDESCRIPTION: Final implementation to initialize and run the PraisonAI agent with the configured settings\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/praisonai/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Create a PraisonAI instance with the agent_yaml content\npraison_ai = PraisonAI(agent_yaml=agent_yaml)\n\n# Run PraisonAI\nresult = praison_ai.main()\n\n# Print the result\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Initializing Composio ToolSet in Python\nDESCRIPTION: Code to initialize Composio ToolSet and OpenAI client in Python. The ToolSet automatically uses the COMPOSIO_API_KEY from environment variables.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/quickstart.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_openai import ComposioToolSet, Action\nfrom openai import OpenAI\n\n# Initialize Composio ToolSet\n# It automatically picks up COMPOSIO_API_KEY from env vars\n# Uses the 'default' entity_id if not specified\ntoolset = ComposioToolSet()\nclient = OpenAI()\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Issue with Custom Bearer Token in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to use the 'executeAction' method with a custom Bearer token to create a GitHub issue. It shows the structure of the 'auth' parameter and how to provide authentication details at runtime.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/injecting-credentials.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// TypeScript example providing a custom Bearer token\nimport { ComposioToolSet, Action, ParamPlacement } from \"composio-core\";\n\nconst toolset = new ComposioToolSet();\nconst bearerToken = \"ghp_YourPersonalAccessToken...\"; // Replace with your actual token\n\nasync function createWithCustomAuth() {\n    console.log(\"Creating issue using custom auth...\");\n    try {\n        const result = await toolset.executeAction({\n            action: Action.GITHUB_CREATE_ISSUE,\n            params: {\n                owner: \"your-username\",\n                repo\": \"test-repo\",\n                title: \"Issue Created with Custom Token\",\n                body: \"This issue uses an externally provided auth token.\"\n            },\n            // Provide authentication details via the 'auth' parameter\n            auth: {\n                parameters: [\n                    {\n                        name: \"Authorization\", // Parameter name\n                        value: `Bearer ${bearerToken}`, // Parameter value\n                        in: ParamPlacement.Header // Where to place it (Header, Query, Path etc.)\n                    }\n                ]\n                // 'baseUrl' could be added here for GitHub Enterprise\n                // 'body' could be added for complex auth flows if needed\n            }\n            // entityId is typically not needed when providing full custom auth\n        });\n        console.log(result);\n    } catch (error) {\n        console.error(\"An error occurred:\", error);\n    }\n}\n\ncreateWithCustomAuth();\n```\n\n----------------------------------------\n\nTITLE: Creating Smol Code Agent Instance\nDESCRIPTION: Initializes a CodeAgent instance with the retrieved GitHub tools and HfApiModel.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/smolagents.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nagent = CodeAgent(tools=tools, model=HfApiModel())\n```\n\n----------------------------------------\n\nTITLE: Importing Required Packages for Lyzr and Composio Integration\nDESCRIPTION: Python imports for Lyzr agent creation and Composio integration, including setting up the OpenAI model that will power the agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/lyzr.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom lyzr_automata import Task, Agent\nfrom lyzr_automata.ai_models.openai import OpenAIModel\nfrom composio_lyzr import ComposioToolSet, App, Action\nfrom lyzr_automata.pipelines.linear_sync_pipeline import LinearSyncPipeline\n\n\nopen_ai_text_completion_model = OpenAIModel( api_key=\"sk-...\", parameters={\"model\": \"gpt-4-turbo\"})\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Tools\nDESCRIPTION: Retrieve available GitHub tools from the Composio toolset.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/agno.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntools = toolset.get_tools(apps=[App.GITHUB])\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for LlamaIndex with Groq\nDESCRIPTION: A requirements-style list of Python packages needed for a project using LlamaIndex with Groq LLM integration. It includes the core LlamaIndex package, the specific Groq LLM integration for LlamaIndex, and python-dotenv for environment variable management.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/perplexity_for_hackernews/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncomposio-llamaindex\nllama-index-llms-groq\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Integrating GitHub Tools with Composio\nDESCRIPTION: This snippet shows how to fetch and integrate GitHub tools provided by Composio, enabling enhanced functionality for Google AI Python operations.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/google/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_google import App, ComposioToolset\n\ntoolset = ComposioToolset()\nactions = toolset.get_tools(apps=[App.GITHUB])\n```\n\n----------------------------------------\n\nTITLE: Running the SQL Agent Python Script in Shell\nDESCRIPTION: Command to execute the main Python script that runs the SQL agent, which will perform database operations as specified in the script.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/sql_agent_plotter_langchain/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/sql_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Initializing Composio ToolSet\nDESCRIPTION: Imports the required libraries and initializes the VercelAIToolSet from composio-core. This setup prepares the environment for using Composio tools with the Vercel AI SDK.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/vercel.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { openai } from \"@ai-sdk/openai\";\nimport { VercelAIToolSet } from \"composio-core\";\nimport { generateText } from \"ai\";\n\nconst toolset = new VercelAIToolSet();\n```\n\n----------------------------------------\n\nTITLE: Retrieving GitHub tools from Composio\nDESCRIPTION: Code to fetch all available GitHub tools from Composio. The tools can be retrieved for specific apps and can be filtered by usecase and tags.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntools = composio_toolset.get_tools(apps=[App.GITHUB])\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst tools = await toolset.getTools({ apps: [\"github\"] });\n```\n\n----------------------------------------\n\nTITLE: Filtering Specific Actions\nDESCRIPTION: Shows how to restrict the AI model to specific actions using action filters\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/google.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# To restrict models from executing any actions, filter specific actions \nactions = composio_toolset.get_tool(actions=[Action.GITHUB_CREATE_ISSUE])\n```\n\n----------------------------------------\n\nTITLE: Running the Python Scheduler Agent (Shell)\nDESCRIPTION: Executes the main Python script for the Scheduler Agent using the Python interpreter. This command starts the agent application, which requires the environment to be previously set up by 'setup.sh' and the '.env' file to be correctly configured. Requires Python 3.8 or higher.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_llamaindex/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/advanced_agents/scheduler_agent/scheduler_agent_llamaindex/main.py\n```\n\n----------------------------------------\n\nTITLE: Setting up E2B Workspace\nDESCRIPTION: Configures an E2B workspace with API key, template ID, and environment variables for serverless execution of tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/workspaces/workspaces.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_openai import ComposioToolSet, App, Action, WorkspaceType\nfrom openai import OpenAI\n\nclient = OpenAI()\n\ntoolset = ComposioToolSet(workspace_config=WorkspaceType.E2B(\n    api_key=\"your_e2b_api_key\",  # Required: E2B API Key\n    template=\"2h9ws7lsk32jyow50lqz\",  # Optional: Template ID for creating the sandbox\n    port=8000,  # Optional: Port for launching the toolserver (default: 8000)\n    environment={\"KEY\": \"VALUE\"}  # Optional: Environment variables\n))\ntools = toolset.get_tools([\"FILETOOL_LIST_FILES\"])\n\nresponse = client.chat.completions.create(\n    model=\"gpt-4o-mini\",\n    max_tokens=1024,\n    tools=tools,\n    messages=[{\"role\": \"user\", \"content\": \"List files in E2B sandbox\"}],\n)\nresult = toolset.handle_tool_calls(response)\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Installing Composio and CrewAI Packages - Python\nDESCRIPTION: This snippet installs all required Python packages, including composio_crewai for Composio integration, crewai for agent orchestration, and langchain_openai for OpenAI-based language models. It should be run in a command shell before any code execution. Ensure Python and pip are available on your system before running these commands. The dependencies provide the foundational tools for agent and workflow automation.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/crewai.mdx#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install composio_crewai crewai langchain_openai\n```\n\n----------------------------------------\n\nTITLE: Initializing FastAPI Server and Composio Tools in Python\nDESCRIPTION: Initializes a FastAPI application, loads environment variables using `dotenv`, creates an OpenAI client instance, and sets up the ComposioToolSet. It also retrieves the default Composio entity. This snippet establishes the foundational components for the webhook server.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Request\nfrom openai import OpenAI\nfrom composio_openai import ComposioToolSet, App, Action\nfrom dotenv import load_dotenv\nimport uvicorn\n\nload_dotenv()\napp = FastAPI()\nclient = OpenAI()\ntoolset = ComposioToolSet()\nentity = toolset.get_entity(id=\"default\")\n```\n\n----------------------------------------\n\nTITLE: Discovering Required Fields for API Key Authentication in Python\nDESCRIPTION: This code demonstrates how to query Composio to determine which credential fields are required for connecting to an external app using API Key authentication. It uses the get_expected_params_for_user method to retrieve field names and descriptions that should be requested from the user.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/non-oauth.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_openai import ComposioToolSet, App\n\ntoolset = ComposioToolSet()\n\n# Replace with your actual integration ID\nYOUR_INTEGRATION_ID = \"int_shopify_xxxxxxxx...\"\n\nauth_scheme_for_shopify = \"API_KEY\"  # Check Integration config or Tool Directory\ntry:\n    required_info = toolset.get_expected_params_for_user(\n        app=App.SHOPIFY, auth_scheme=auth_scheme_for_shopify, integration_id=YOUR_INTEGRATION_ID\n    )\n    field_names = [field[\"name\"] for field in required_info[\"expectedInputFields\"]]\n    print(f\"Required fields for {App.SHOPIFY.value} ({auth_scheme_for_shopify}): {field_names}\")\n    # Use required_info[\"expectedInputFields\"] for descriptions to show the user\nexcept Exception as e:\n    print(f\"Error fetching required params: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Importing Base Packages for CAMEL and Composio\nDESCRIPTION: Essential imports required for setting up CAMEL agents and Composio integration, including messaging, configurations, and model factory components.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/camelai.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom colorama import Fore\nfrom camel.agents import ChatAgent\nfrom camel.configs import ChatGPTConfig\nfrom camel.messages import BaseMessage\nfrom camel.models import ModelFactory\nfrom camel.types import ModelPlatformType, ModelType\nfrom camel.utils import print_text_animated\nfrom composio_camel import ComposioToolSet, Action\n```\n\n----------------------------------------\n\nTITLE: Basic Composio LiveKit Integration\nDESCRIPTION: Demonstrates how to initialize the Composio toolset and integrate it with a LiveKit Agent. Shows tool initialization and basic agent setup with specific actions.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/livekit/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_livekit import ComposioToolSet, Action\nfrom livekit.agents.voice import Agent\n\n# Initialize the toolset\ncomposio_toolset = ComposioToolSet()\n\n# Get specific tools\ntools = composio_toolset.get_tools(\n    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]\n)\n\n# Use with LiveKit Agent\nclass Assistant(Agent):\n    def __init__(self):\n        super().__init__(\n            instructions=\"You are a helpful voice AI assistant.\",\n            tools=tools\n        )\n```\n\n----------------------------------------\n\nTITLE: Gmail Schema Processing Example in Python\nDESCRIPTION: Shows how to implement schema processing to simplify the Gmail send email tool by removing specific parameters from the schema before it's presented to the LLM.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/processing-tools.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_openai import ComposioToolSet, Action\n\ntoolset = ComposioToolSet()\n\ndef simplify_gmail_send_schema(schema: dict) -> dict:\n    \"\"\"Removes recipient_email and attachment params from the schema.\"\"\"\n    params = schema.get(\"parameters\", {}).get(\"properties\", {})\n    params.pop(\"recipient_email\", None)\n    params.pop(\"attachment\", None)\n    return schema\n\nprocessed_tools = toolset.get_tools(\n    actions=[Action.GMAIL_SEND_EMAIL],\n    processors={\n        \"schema\": {Action.GMAIL_SEND_EMAIL: simplify_gmail_send_schema}\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Invoking the LangGraph Agent with a Task\nDESCRIPTION: Code to execute the compiled workflow with a specific task, streaming the responses as they are generated by the agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langgraph/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfor chunk in app.stream(\n    {\n        \"messages\": [\n            (\n                \"human\",\n                # \"Star the Github Repository composiohq/composio\",\n                \"Get my information.\",\n            )\n        ]\n    },\n    stream_mode=\"values\",\n):\n    chunk[\"messages\"][-1].pretty_print()\n```\n\n----------------------------------------\n\nTITLE: Installing Composio LangChain and Connecting GitHub Account\nDESCRIPTION: This snippet shows how to install the Composio LangChain package, connect a GitHub account, and view available applications for connection.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langchain/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composio LangChain package\npip install composio-langchain\n\n# Connect your GitHub account\ncomposio-cli add github\n\n# View available applications you can connect with\ncomposio-cli show-apps\n```\n\n----------------------------------------\n\nTITLE: Initializing Julep Client with Basic Configuration\nDESCRIPTION: Sets up the basic imports and initializes the Julep client with API key\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/julep.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom julep import Client\nfrom composio_julep import ComposioToolSet, App\nimport os\n\njulep_api_key = \"{julep_api_key}\" # Replace it\njulep_client = Client(api_key=julep_api_key)\n```\n\n----------------------------------------\n\nTITLE: Defining and Executing Research Task in Python\nDESCRIPTION: This code defines a research task about open source vs closed source LLMs and executes it using the previously defined researcher agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/research_assistant.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntask1 = Task( description=\"\"\"Research about open source LLMs vs\n    closed source LLMs. Your final answer MUST be a full analysis report\"\"\", #You can add your own topic to research about change the topic, edit the text after 'Research about' in the description parameter of task1 \n    expected_output='When the research report is ready',\n    agent=researcher\n)\ntask1.execute()\n```\n\n----------------------------------------\n\nTITLE: Executing GitHub API Call with Composio in Python\nDESCRIPTION: Python code that uses Composio to fetch the authenticated user's GitHub information. It sets up tools, creates an LLM prompt, and handles the tool call execution.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/quickstart.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Directly execute the action to get the authenticated user's info\n# Composio uses the connection linked via 'composio add github'\ntools = toolset.get_tools(actions=[Action.GITHUB_GET_THE_AUTHENTICATED_USER])\n\ntask = \"Get my GitHub username.\"\nmessages = [\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant that can use tools.\"},\n    {\"role\": \"user\", \"content\": task},\n]\n\nresponse = client.chat.completions.create(\n    model=\"gpt-4o-mini\", # Or another capable model\n    messages=messages,\n    tools=tools,    # The tools we prepared earlier\n    tool_choice=\"auto\", # Let the LLM decide whether to use a tool\n)\n\nresult = toolset.handle_tool_calls(response)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Running the SQL Agent Python Script\nDESCRIPTION: Command to execute the main Python script that runs the SQL agent to perform database operations, execute queries, and generate logs.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/sql_agent_plotter_llama_index/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/sql_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Research Assistant in Python\nDESCRIPTION: This code imports the required libraries including os, dotenv, and components from crewai, composio_langchain, and langchain_openai.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/research_assistant.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport dotenv\nfrom crewai import Agent, Task, Crew, Process\nfrom composio_langchain import ComposioToolSet, Action, App\nfrom langchain_openai import ChatOpenAI\n```\n\n----------------------------------------\n\nTITLE: Retrieving All GitHub Tools from ComposioToolSet - Python\nDESCRIPTION: This code obtains the full list of available GitHub tools for later use with CrewAI by calling get_tools on the ComposioToolSet. Requires a properly initialized toolset and App.GITHUB. The returned object is a list of tools usable by the agent, with optional filtering supported but not shown in this example.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/crewai.mdx#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ntools = toolset.get_tools(apps=[App.GITHUB])\n```\n\n----------------------------------------\n\nTITLE: Filtering Specific Apps\nDESCRIPTION: Demonstrates how to limit the AI model to specific applications\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/google.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# To restrict models from using all tools, filter specific tools \nactions = composio_toolset.get_tool(apps=[App.ASANA, App.GITHUB])\n```\n\n----------------------------------------\n\nTITLE: Running the PR Agent Main Script with Python\nDESCRIPTION: Executes the main Python script for the PR agent using the provided path, initiating the agent workflow as described in this guide. Requires Python 3.8+ and prior environment setup. This command starts the PR processing, expects correct .env configuration, and may interact with other services as specified in the project.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_crewai/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/pr_agent_crewai/main.py\n```\n\n----------------------------------------\n\nTITLE: Initializing Claude Client\nDESCRIPTION: Imports the Anthropic package and initializes a Claude client for API interaction.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/claude/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport anthropic\n\n# Initialize Claude client\nclient = anthropic.Anthropic()\n```\n\n----------------------------------------\n\nTITLE: Executing the Newsletter Summarization Workflow\nDESCRIPTION: This snippet demonstrates how to create and run the crew for newsletter summarization in Python, and how to set up the Cloudflare Pages handler and local testing server in JavaScript.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Create and run the crew\ncrew = Crew(\n    agents=[email_fetcher, summarizer, email_sender],\n    tasks=[fetch_task, summarize_task, send_task],\n    verbose=2,\n    process=Process.sequential\n)\n\n# Execute the workflow\nresult = crew.kickoff()\nprint(f\"Result: {result}\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Set up Cloudflare Pages handler\nexport default {\n    fetch: handle(app)\n};\n\n// For local testing\nif (import.meta.main) {\n    console.log(\"Starting server on http://localhost:8787\");\n    Bun.serve({\n        fetch: app.fetch,\n        port: 8787\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Setting Up MCPConfiguration - JavaScript\nDESCRIPTION: Sets up the MCPConfiguration object with a GitHub server integration endpoint, readying the project for agent tool configuration. It imports essential modules from @mastra/mcp, @mastra/core/agent, and @ai-sdk/openai, preparing the context for further agent operations. Dependencies include @mastra/mcp, @mastra/core, and @ai-sdk/openai. Inputs: None directly, but assumes credentials and endpoints are correctly replaced. Outputs: An instantiated MCPConfiguration ready for use. Limitations: The [private-url-path] placeholder must be replaced with actual values.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/mastra.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MCPConfiguration } from \"@mastra/mcp\";\nimport { Agent } from \"@mastra/core/agent\";\nimport { openai } from \"@ai-sdk/openai\";\n\nconst mcp = new MCPConfiguration({\n  servers: {\n      github: {\n        url: new URL(\"https://mcp.composio.dev/github/[private-url-path]\"),\n      },\n  },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Running Trend Finder Main Script in Python\nDESCRIPTION: Command to execute the main Python script for the Trend Finder agent after setting up the environment and configuring the .env file with required secrets.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/solana-agent/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/quickstarters/trend_finder/main.py\n```\n\n----------------------------------------\n\nTITLE: Advanced Tool Configuration\nDESCRIPTION: Advanced examples of tool configuration including multiple tools, tag filtering, and app-specific setups.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/pydanticai/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Using multiple tools\ntools = composio_toolset.get_tools(\n    actions=[\n        Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER,\n        Action.GITHUB_CREATE_REPOSITORY\n    ],\n    max_retries={\n        Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER: 5,\n        Action.GITHUB_CREATE_REPOSITORY: 2\n    }\n)\n\n# Filtering tools by tags\ntools = composio_toolset.get_tools(\n    tags=[\"github\", \"repository\"],\n    default_max_retries=3\n)\n\n# Using app-specific tools\ntools = composio_toolset.get_tools(\n    apps=[App.GITHUB],\n    max_retries={\n        Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER: 5\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Waiting for OAuth Connection Activation\nDESCRIPTION: Shows how to implement a polling mechanism to wait for OAuth connection activation after user authorization, with timeout handling and status checking.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/oauth.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Waiting for user authorization and connection activation...\")\ntry:\n    # Poll Composio until the status is ACTIVE\n    active_connection = connection_request.wait_until_active(\n        client=toolset.client, # Pass the Composio client instance\n        timeout=180 # Wait up to 3 minutes (adjust as needed)\n    )\n    print(f\"Success! Connection is ACTIVE. ID: {active_connection.id}\")\n    # Store active_connection.id associated with your user (entity_id)\n    # Now ready for Step 4.\nexcept Exception as e: # Catches TimeoutError, etc.\n    print(f\"Connection did not become active within timeout or failed: {e}\")\n    # Implement retry logic or inform the user\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(\"Waiting for user authorization and connection activation...\");\ntry {\n    // Poll Composio until the status is ACTIVE\n    const activeConnection = await connectionRequest.waitUntilActive(180); // Wait up to 3 minutes\n\n    console.log(`Success! Connection is ACTIVE. ID: ${activeConnection.id}`);\n    // Store activeConnection.id associated with your user (entityId)\n    // Now ready for Step 4.\n} catch (error) {\n    console.error(\"Connection did not become active within timeout or failed:\", error);\n    // Implement retry logic or inform the user\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environments and Parameters for Research Agent\nDESCRIPTION: Set up the necessary configurations for the Research Agent. In Python, this involves loading environment variables, initializing the language model, and setting research parameters. In JavaScript, this includes creating an Express app, setting up port configuration, research parameters, and configuring Express middleware.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Load environment variables\ndotenv.load_dotenv()\n\n# Initialize the language model\nllm = OpenAI(model=\"gpt-4o\")\n\n# Set research parameters\nresearch_topic = \"LLM agents function calling\"\ntarget_repo = \"composiohq/composio\"\nn_issues = 3\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Create Express app\nconst app = express();\nconst PORT = process.env.PORT || 2001;\n\n// Set research parameters\nconst researchTopic = \"LLM agents function calling\";\nconst targetRepo = \"composiohq/composio\";\nconst nIssues = 3;\n\n// Configure Express\napp.use(express.json());\n```\n\n----------------------------------------\n\nTITLE: Initiating GitHub Authentication Flow Programmatically - Python\nDESCRIPTION: This snippet programmatically initiates the OAuth flow for the GitHub app using the ComposioToolSet. It creates a request object and prints a browser URL for completing authentication. Requires a valid toolset instance and App.GITHUB specifier. Output is a URL string which the user needs to visit. Make sure API keys and environment variables are set for success.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/crewai.mdx#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nrequest = toolset.initiate_connection(app=App.GITHUB)\nprint(f\"Open this URL to authenticate: {request.redirectUrl}\")\n```\n\n----------------------------------------\n\nTITLE: Executing Tasks with Smol Agent\nDESCRIPTION: Running specific tasks using the configured Smol agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/smolagent/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Define task\nagent.run(\"Star the composiohq/composio repo\")\n```\n\n----------------------------------------\n\nTITLE: Importing Base Packages for LangGraph Agent\nDESCRIPTION: Required imports from LangChain and LangGraph libraries to set up the agent environment, including the ChatOpenAI model and StateGraph components.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langgraph/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Literal\n\nfrom langchain_openai import ChatOpenAI\nfrom langgraph.graph import MessagesState, StateGraph\nfrom langgraph.prebuilt import ToolNode\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Integration in Python\nDESCRIPTION: Python implementation for creating a custom OAuth integration with Google Calendar, specifying client credentials and redirect URI.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/white-labelling.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_openai import App, ComposioToolSet\n\ntoolset = ComposioToolSet()\nintegration = toolset.create_integration(\n    app=App.GOOGLECALENDAR,\n    auth_mode=\"OAUTH2\",\n    use_composio_oauth_app=False,\n    auth_config={\n      \"client_id\": \"12345678\",\n      \"client_secret\": \"12345678\",\n      \"redirect_uri\": \"https://yourapp.com/redirect\"\n    }\n)\n\nentity = toolset.get_entity(\"default\")\n\nconnection_request = entity.initiate_connection(\n    app_name=App.GOOGLECALENDAR, integration=integration\n)\nprint(connection_request)\n```\n\n----------------------------------------\n\nTITLE: Automating SQL Queries and Visualizations with Composio, LangChain, and OpenAI in JavaScript\nDESCRIPTION: This JavaScript/Node.js snippet demonstrates using dotenv for environment management, initializing the Composio toolset (requiring a COMPOSIO_API_KEY), and employing LangChain's OpenAI agent and agent executor to perform SQL operations and generate visualizations. It provides asynchronous functions to execute a top-salaries SQL query, save results to a text file, and create a salary bar chart from results. The workflow is orchestrated by the runSQLAgent function which chains SQL query execution and subsequent visualization, logging results to the console. Prerequisites are the necessary npm packages and environment setup; the main function returns the outputs as an object.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/sql-agent.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport dotenv from 'dotenv';\\nimport { ChatOpenAI } from \\\"@langchain/openai\\\";\\nimport { AgentExecutor, createOpenAIFunctionsAgent } from \\\"langchain/agents\\\";\\nimport { ComposioToolSet } from \\\"composio-core\\\";\\nimport { pull } from \\\"langchain/hub\\\";\\n\\ndotenv.config();\\n\\n// Initialize the Composio ToolSet\\nconst composioToolset = new ComposioToolSet({\\n    apiKey: process.env.COMPOSIO_API_KEY\\n});\\n\\n// Initialize the language model\\nconst llm = new ChatOpenAI({ model: \\\"gpt-4-turbo\\\" });\\n\\n// Function to execute SQL queries\\nasync function executeSQLQuery(query) {\\n    // Get SQL and File tools\\n    const sqlTools = await composioToolset.getTools({ \\n        apps: [\\\"sqltool\\\", \\\"filetool\\\"] \\n    });\\n    \\n    // Create the agent prompt\\n    const prompt = await pull(\\\"hwchase17/openai-functions-agent\\\");\\n    \\n    // Create the agent for SQL operations\\n    const agent = await createOpenAIFunctionsAgent({ \\n        llm, \\n        tools: sqlTools, \\n        prompt \\n    });\\n\\n    // Create the agent executor\\n    const agentExecutor = new AgentExecutor({\\n        agent,\\n        tools: sqlTools,\\n        verbose: true,\\n    });\\n\\n    // Execute the SQL query\\n    const result = await agentExecutor.invoke({\\n        input: `Connect to the SQLite database 'companydb' and execute the following query: ${query}. \\n                Save the results to a file named 'query_results.txt' and return the content.`\\n    });\\n\\n    console.log(\\\"SQL Query Result:\\\", result.output);\\n    return result.output;\\n}\\n\\n// Function to create data visualizations\\nasync function createVisualization(data) {\\n    // Get all tools including code interpreter\\n    const allTools = await composioToolset.getTools({ \\n        apps: [\\\"sqltool\\\", \\\"filetool\\\", \\\"codeinterpreter\\\"] \\n    });\\n    \\n    // Create the agent prompt\\n    const prompt = await pull(\\\"hwchase17/openai-functions-agent\\\");\\n    \\n    // Create the agent for visualization\\n    const agent = await createOpenAIFunctionsAgent({ \\n        llm, \\n        tools: allTools, \\n        prompt \\n    });\\n\\n    // Create the agent executor\\n    const agentExecutor = new AgentExecutor({\\n        agent,\\n        tools: allTools,\\n        verbose: true,\\n    });\\n\\n    // Execute the visualization task\\n    const result = await agentExecutor.invoke({\\n        input: `Using the following data: ${data}\\n                Create a bar chart showing first_name on the x-axis and salary on the y-axis.\\n                Save the visualization as 'salary_chart.png'.`\\n    });\\n\\n    console.log(\\\"Visualization Result:\\\", result.output);\\n    return result.output;\\n}\\n\\n// Main function to run the SQL Agent workflow\\nasync function runSQLAgent() {\\n    try {\\n        // Define the SQL query\\n        const query = \\\"SELECT * FROM MOCK_DATA ORDER BY salary DESC LIMIT 10\\\";\\n        \\n        // Execute the SQL query\\n        const queryResult = await executeSQLQuery(query);\\n        \\n        // Create visualization based on query results\\n        const visualizationResult = await createVisualization(queryResult);\\n        \\n        console.log(\\\"SQL Agent workflow completed successfully!\\\");\\n        return {\\n            queryResult,\\n            visualizationResult\\n        };\\n    } catch (error) {\\n        console.error(\\\"An error occurred:\\\", error);\\n        throw error;\\n    }\\n}\\n\\n// Execute the workflow\\nrunSQLAgent().catch(error => console.error(\\\"SQL Agent failed:\\\", error));\n```\n\n----------------------------------------\n\nTITLE: Creating Integration Programmatically with TypeScript\nDESCRIPTION: TypeScript code example showing how to create a Composio integration using the TypeScript SDK. Includes error handling and basic integration setup with default OAuth settings.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/integration.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ComposioToolSet, App } from \"composio-core\";\n\n// Assumes toolset is initialized\nconst toolset = new ComposioToolSet();\nconst appKey = App.SLACK; // The app identifier\n\nasync function createIntegrationProgrammatically() {\n    try {\n        // Creates a basic integration, using Composio's OAuth app if Slack uses OAuth\n        const integration = await toolset.client.integrations.create({\n            appUniqueKey: appKey,\n            name: `My Code-Based ${appKey} Integration`,\n            // For OAuth, defaults to useComposioAuth: true\n            // Add 'authConfig' here for custom credentials - see SDK Ref & specific guides\n        });\n        const integrationId = integration.id;\n        console.log(`Integration created/found with ID: ${integrationId}`);\n    } catch (error) {\n        console.error(\"Error creating integration:\", error);\n    }\n}\n\ncreateIntegrationProgrammatically();\n```\n\n----------------------------------------\n\nTITLE: Importing Base Packages for SQL Agent\nDESCRIPTION: Essential library imports for the SQL Agent project. The Python version imports libraries for environment variables, Composio tools, and LangChain components. The JavaScript version imports similar libraries with appropriate syntax for the Node.js environment.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/sql-agent.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport dotenv\n\nfrom composio_langchain import App, ComposioToolSet\nfrom langchain import hub\nfrom langchain.agents import AgentExecutor, create_openai_functions_agent\nfrom langchain_openai import ChatOpenAI\n\n# Load environment variables\ndotenv.load_dotenv()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport dotenv from 'dotenv';\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { AgentExecutor, createOpenAIFunctionsAgent } from \"langchain/agents\";\nimport { ComposioToolSet } from \"composio-core\";\nimport { pull } from \"langchain/hub\";\n\ndotenv.config();\n```\n\n----------------------------------------\n\nTITLE: Configuring Fly.io Workspace\nDESCRIPTION: Sets up a Fly.io workspace with API token, custom image, port configurations, and environment variables for distributed tool execution.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/workspaces/workspaces.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_openai import ComposioToolSet, App, Action, WorkspaceType\nfrom openai import OpenAI\n\nclient = OpenAI()\n\ntoolset = ComposioToolSet(workspace_config=WorkspaceType.Flyio(\n    token=\"your_flyio_token\",  # Required: Fly.io API token\n    image=\"your-custom-image:tag\",  # Optional: Docker image to use\n    ports=[{  # Optional: Additional ports to expose\n        \"ports\": [\n            {\n                \"port\": 3000,\n                \"handlers\": [\"http\"]  # Available handlers: http, tls\n            }\n        ]\n    }],\n    environment={\"KEY\": \"VALUE\"}  # Optional: Environment variables\n))\ntools = toolset.get_tools([\"FILETOOL_LIST_FILES\"])\n\nresponse = client.chat.completions.create(\n    model=\"gpt-4o-mini\",\n    max_tokens=1024,\n    tools=tools,\n    messages=[{\"role\": \"user\", \"content\": \"List files in Fly.io instance\"}],\n)\nresult = toolset.handle_tool_calls(response)\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Websocket Listeners\nDESCRIPTION: Shows how to create and configure websocket listeners for trigger events in both Python and TypeScript. Includes setting up callback functions for handling incoming events.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlistener = toolset.create_trigger_listener()\n\n@listener.callback(\n    filters={\n        \"trigger_name\": \"SLACK_RECEIVE_MESSAGE\",\n    }\n)\ndef handle_slack_message(event):\n    print(event)\n\nlistener.wait_forever()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst listener = toolset.triggers.subscribe(\n    (data) => {\n        console.log(data);\n    },\n    {\n        triggerName: \"SLACK_RECEIVE_MESSAGE\"\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for LlamaIndex and Groq Project\nDESCRIPTION: A list of required Python packages including LlamaIndex core, Composio LlamaIndex integration, LlamaIndex Groq LLM adapter, and the python-dotenv library for environment variable management.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/langgraph/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nllama-index\ncomposio-llamaindex\nllama-index-llms-groq\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Running the Main Python Script in Shell\nDESCRIPTION: This command executes the main Python script located in the cookbook/examples/news_summary directory. It runs the news summary agent to populate the Notion page with data.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/news_summary/main.py\n```\n\n----------------------------------------\n\nTITLE: Starting the Cloudflare Worker\nDESCRIPTION: Command to start the Cloudflare Worker in development mode using wrangler.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/cloudflare.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwrangler dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Composio Toolset Integration Template (Python)\nDESCRIPTION: This code provides a template for the core integration logic (toolset.py) when adapting Composio tools for a third-party framework. It demonstrates subclassing from BaseComposioToolSet, translating Composio tool schemas to the target framework's tool format, parameter handling, and dynamic function wrapping. Dependencies: composio, your framework's Python SDK, Python 3.9+. Key components: constructor for runtime details, _wrap_tool for schema translation, get_tools method for filtering and collecting adapted tools. Inputs include tool/action/app/tag filters, entity ids, and processors. Outputs: a list of framework-compatible tool objects.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typing as t\nfrom typing import List, cast\n\n# Import from your target framework\nfrom targetframework import FrameworkTool, SomeFrameworkClass\n\n# Import from Composio\nfrom composio import ActionType, AppType, TagType\nfrom composio.tools import ComposioToolSet as BaseComposioToolSet\nfrom composio.tools.toolset import ProcessorsType\nfrom composio.utils.pydantic import parse_pydantic_error\nfrom composio.utils.shared import get_signature_format_from_schema_params\n\nclass ComposioToolSet(BaseComposioToolSet):\n    \"\"\"\n    Composio toolset for [Your Framework] integration.\n    \n    Add usage examples here to help users understand how to use your integration.\n    \"\"\"\n    \n    def __init__(self, *args, **kwargs):\n        # Initialize with your framework-specific settings\n        super().__init__(*args, **kwargs, \n                         runtime=\"your_framework_name\",\n                         description_char_limit=1024,\n                         action_name_char_limit=64)\n    \n    def _wrap_tool(\n        self,\n        schema: t.Dict[str, t.Any],\n        entity_id: t.Optional[str] = None,\n    ) -> FrameworkTool:\n        \"\"\"Convert a Composio tool schema into a framework-specific tool.\"\"\"\n        action = schema[\"name\"]\n        description = schema[\"description\"]\n        schema_params = schema[\"parameters\"]\n        \n        # Implementation specific to your framework\n        # This is where you adapt the Composio schema to your framework's format\n        \n        # Example implementation (modify for your framework):\n        tool = FrameworkTool(\n            name=action,\n            description=description,\n            # Transform schema_params to match your framework's format\n            parameters=self._adapt_parameters(schema_params),\n            # Create a wrapper function that calls Composio's execute_action\n            function=lambda **kwargs: self.execute_action(\n                action=action,\n                params=kwargs,\n                entity_id=entity_id or self.entity_id,\n            )\n        )\n        \n        return tool\n    \n    def get_tools(\n        self,\n        actions: t.Optional[t.Sequence[ActionType]] = None,\n        apps: t.Optional[t.Sequence[AppType]] = None,\n        tags: t.Optional[t.List[TagType]] = None,\n        entity_id: t.Optional[str] = None,\n        *,\n        processors: t.Optional[ProcessorsType] = None,\n        check_connected_accounts: bool = True,\n    ) -> List[FrameworkTool]:\n        \"\"\"\n        Get Composio tools as your framework's tool objects.\n        \n        Args:\n            actions: List of specific actions to get\n            apps: List of apps to get tools from\n            tags: Filter tools by tags\n            entity_id: Entity ID to use for tool execution\n            processors: Optional request/response processors\n            check_connected_accounts: Whether to check for connected accounts\n            \n        Returns:\n            A list of framework-compatible tools\n        \"\"\"\n        # Validate and prepare\n        self.validate_tools(apps=apps, actions=actions, tags=tags)\n        if processors is not None:\n            self._processor_helpers.merge_processors(processors)\n        \n        # Get action schemas from Composio\n        tools = [\n            self._wrap_tool(\n                schema=tool.model_dump(exclude_none=True),\n                entity_id=entity_id or self.entity_id,\n            )\n            for tool in self.get_action_schemas(\n                actions=actions,\n                apps=apps,\n                tags=tags,\n                check_connected_accounts=check_connected_accounts,\n                _populate_requested=True,\n            )\n        ]\n        \n        return tools\n```\n\n----------------------------------------\n\nTITLE: Configuring Camel agent with GitHub tools\nDESCRIPTION: Set up the language model and configure the Camel agent with the previously fetched GitHub tools. This includes configuring the GPT model, setting up system messages, and initializing the chat agent with appropriate tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/camel/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# set up LLM model\nassistant_model_config = ChatGPTConfig(\n    temperature=0.0,\n    tools=tools,\n)\n\nmodel = ModelFactory.create(\n    model_platform=ModelPlatformType.OPENAI,\n    model_type=ModelType.GPT_3_5_TURBO,\n    model_config_dict=assistant_model_config.__dict__,\n)\n\n\n# set up agent\nassistant_sys_msg = BaseMessage.make_assistant_message(\n    role_name=\"Developer\",\n    content=(\n        \"You are a programmer as well an experienced github user. \"\n        \"When asked given a instruction, \"\n        \"you try to use available tools, and execute it\"\n    ),\n)\n\nagent = ChatAgent(\n    assistant_sys_msg,\n    model,\n    tools=tools,\n)\nagent.reset()\n```\n\n----------------------------------------\n\nTITLE: Defining RAG Agent\nDESCRIPTION: Creating and configuring the agent responsible for managing the RAG system\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Define the RAG Agent\nrag_agent = Agent(\n    role=\"RAG Knowledge Base Manager\",\n    goal=\"Manage a knowledge base using RAG tools\",\n    backstory=\"\"\"You are an expert in managing knowledge bases and retrieving information.\n    Your job is to add content to the knowledge base and retrieve answers to user queries.\n    You use RAG (Retrieval-Augmented Generation) tools to efficiently store and retrieve information.\"\"\",\n    verbose=True,\n    allow_delegation=False,\n    tools=rag_tools,\n    llm=llm\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the agent\nconst createAgent = async (tools) => {\n    const prompt = await pull(\"hwchase17/openai-functions-agent\");\n    const agent = await createOpenAIFunctionsAgent({\n        llm,\n        tools,\n        prompt\n    });\n    \n    // Set up the agent executor\n    return new AgentExecutor({\n        agent,\n        tools,\n        verbose: true\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for LiveKit and Composio Integration\nDESCRIPTION: Defines the required environment variables for the application, including API keys for Deepgram, OpenAI, Cartesia, LiveKit, and Composio. These variables are essential for authentication and access to the respective services used by the LiveKit agent and Composio tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/livekit.mdx#2025-04-23_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nDEEPGRAM_API_KEY=\nOPENAI_API_KEY=\nCARTESIA_API_KEY=\nLIVEKIT_API_KEY=\nLIVEKIT_API_SECRET=\nLIVEKIT_URL=\nCOMPOSIO_API_KEY=\n```\n\n----------------------------------------\n\nTITLE: Agent Response Check\nDESCRIPTION: Example of the response format from the agent after starring a repository\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/julep.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n[{'content': 'I have starred the repository \"composio\" for you on GitHub under the account \"composiohq\".', 'role': 'agent'}]\n```\n\n----------------------------------------\n\nTITLE: Installing Composio and Connecting GitHub Account\nDESCRIPTION: Commands for installing the Composio LangChain package, connecting a GitHub account, and viewing available applications that can be integrated with Composio.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/griptape/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composio LangChain package\npip install composio-griptape\n\n# Connect your GitHub account\ncomposio-cli add github\n\n# View available applications you can connect with\ncomposio-cli show-apps\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAI Agent for GitHub Issues\nDESCRIPTION: Function to execute an OpenAI agent that creates GitHub issues. Configures OpenAI client, sets up tools, and handles the API response.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai-js.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function executeAgent(repo,entityName=\"default\") {\n        const entity = toolset.client.getEntity(entityName)\n        await setupUserConnectionIfNotExists(entity.id);\n\n        const tools = await toolset.getTools({ actions: [\"github_issues_create\"] }, entity.id);\n        const instruction = `Make an issue with sample title in the repo - ${repo}`\n\n        const client = new OpenAI({ apiKey: OPEN_AI_API_KEY })\n        const response = await client.chat.completions.create({\n            model: \"gpt-4-turbo\",\n            messages: [{\n                role: \"user\",\n                content: instruction,\n            }],\n            tools: tools,\n            tool_choice: \"auto\",\n        })\n\n        console.log(response.choices[0].message.tool_calls);\n        await toolset.handleToolCall(response, entity.id);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Composio Tool Set\nDESCRIPTION: Import required libraries and initialize the ComposioToolSet for use with Agno agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/agno.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom agno.agent.agent import Agent\nfrom composio_agno import Action, App, ComposioToolSet\n\ntoolset = ComposioToolSet()\n```\n\n----------------------------------------\n\nTITLE: Initializing Together AI Client\nDESCRIPTION: Setup code for initializing the Together AI client with API key configuration.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/togetherai/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom together import Together\n\n# Initialize OpenAI client\nclient = Together(api_key=\"<together-ai-api-key>\")\n```\n\n----------------------------------------\n\nTITLE: Importing Base Packages for IBM and Composio Integration\nDESCRIPTION: Set up the Python environment with necessary imports from Composio and IBM libraries, and configure the IBM API key.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/ibm.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_langchain import ComposioToolSet, Action\nfrom langchain_ibm import ChatWatsonx\nimport os\n\nos.environ['WATSONX_API_KEY'] = '<ibm_api_key>' #add your ibm api key here\nif not os.environ.get('WATSONX_API_KEY'):\n    raise ValueError(\"WATSONX_API_KEY environment variable is not set\")\n```\n\n----------------------------------------\n\nTITLE: Initiating GitHub Connection Programmatically in JavaScript\nDESCRIPTION: Uses the Composio SDK's `connectedAccounts.initiate` method in JavaScript (or TypeScript) to programmatically start the connection process for the 'github' app. It logs the authentication redirect URL to the console, which the user needs to open to authorize the connection. Requires the Composio JavaScript/TypeScript SDK and necessary API keys configured.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/llamaindex.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst connection = await toolset.connectedAccounts.initiate({appName: \"github\"})\nconsole.log(`Open this URL to authenticate: ${connection.redirectUrl}`);\n```\n\n----------------------------------------\n\nTITLE: Filtering Specific Apps for Agent Operations\nDESCRIPTION: Shows how to limit an agent's access to specific applications, allowing it to only use tools from selected services like Asana and GitHub for more streamlined and controlled operations.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/autogen/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncomposio_tools.register_tools([App.ASANA, App.GITHUB])\n```\n\n----------------------------------------\n\nTITLE: Creating Integration Programmatically with Python\nDESCRIPTION: Python code example demonstrating how to create a Composio integration programmatically using the Python SDK. Shows error handling and basic integration setup with default OAuth settings.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/integration.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_openai import ComposioToolSet, App\n\n# Assumes toolset is initialized\ntoolset = ComposioToolSet()\napp_key = App.SLACK # The app identifier\n\ntry:\n    # Creates a basic integration, using Composio's OAuth app if Slack uses OAuth\n    integration = toolset.client.integrations.create(\n        app_id=app_key.slug,\n        name=f\"My Code-Based {app_key.value} Integration\",\n        # For OAuth, defaults to use_composio_auth=True\n        # Add 'auth_config' here for custom credentials - see SDK Ref & specific guides\n    )\n    integration_id = integration.id\n    print(f\"Integration created/found with ID: {integration_id}\")\nexcept Exception as e:\n    print(f\"Error creating integration: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Letta Agent with GitHub Tool\nDESCRIPTION: This snippet demonstrates how to create a Letta agent with the GitHub star repository tool. It configures the agent with a persona, model, embedding, and the added tool.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/letta.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nagent = client.agents.create(\n    name=\"GitHub Agent\",\n    memory_blocks=[\n        {\"label\": \"persona\", \"value\": \"I am a helpful assistant\"}\n    ],\n    model=\"openai/gpt-4o\",\n    embedding=\"openai/text-embedding-ada-002\", \n    tool_ids=[tool.id]\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst agent = await client.agents.create({\n    name: \"GitHub Agent\",\n    memoryBlocks: [\n        {\n            value: \"I am a helpful assistant\",\n            label: \"persona\",\n        },\n    ],\n    model: \"openai/gpt-4o\",\n    embedding: \"openai/text-embedding-ada-002\",\n    toolIds: [tool.id],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AI Agent for News Retrieval and Summarization\nDESCRIPTION: Creates the AI agent by combining the chat model, prompt, and output parser for processing news retrieval and summarization tasks.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/news_summary_agent.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nchat_model_with_stop = chat_model.bind(stop=[\"\\nInvalidStop\"])\nagent = (\n{\n\"input\": lambda x: x[\"input\"],\n\"agent_scratchpad\": lambda x: format_log_to_str(x[\"intermediate_steps\"]),\n}\n| prompt\n| chat_model_with_stop\n| ReActJsonSingleInputOutputParser()\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Griptape Agent with Composio Tools\nDESCRIPTION: Setup code for creating a Griptape agent with Composio GitHub integration tools. Initializes the toolset and configures the agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/griptape.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncomposio_toolset = ComposioToolSet()\ntools = composio_toolset.get_tools(apps = [App.GITHUB])\n\nagent = Agent(\ntools=tools\n)\n```\n\n----------------------------------------\n\nTITLE: Making the setup.sh Script Executable on Unix (Shell)\nDESCRIPTION: This code snippet uses the chmod utility to set the executable permission on the setup.sh script file for Linux or macOS environments. This is required once before the script can be executed if its permissions are not already set. It assumes the setup.sh file is present in the current working directory. Output is no message unless a permission or file error occurs.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/domain_deep_research/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Workspace\nDESCRIPTION: Configuration for running the agent in a Docker container with custom port mapping.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/swe/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom composio import ComposioToolSet, WorkspaceType\n\ntoolset = ComposioToolSet(\n    workspace_config=WorkspaceType.Docker(\n        ports={\n            8001: 8001,\n        }\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Composio and Connecting GitHub Tool\nDESCRIPTION: Commands for installing the Composio Google package and connecting GitHub as a tool for AI interaction\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/google.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-google\n\n# Connect your GitHub so models can interact with it\n\ncomposio add github\n\n# Check all supported apps\n\ncomposio apps\n```\n\n----------------------------------------\n\nTITLE: Initiating GitHub Connection with Composio\nDESCRIPTION: This snippet demonstrates how to initiate a connection to GitHub using Composio in both Python and JavaScript. It generates a URL for authentication.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/letta.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntoolset = ComposioToolSet()\nrequest = toolset.initiate_connection(app=App.GITHUB)\nprint(f\"Open this URL to authenticate: {request.redirectUrl}\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst connection = await toolset.connectedAccounts.initiate({appName: \"github\"})\nconsole.log(`Open this URL to authenticate: ${connection.redirectUrl}`);\n```\n\n----------------------------------------\n\nTITLE: Cloning the Solana Crypto Kit Repository (Shell)\nDESCRIPTION: Clones the project repository using the `git clone` command and then changes the current directory to the newly cloned project folder. This is the first step in the installation process.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/solana/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone <repository-url>\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Adding Github Integration using Composio CLI - Bash\nDESCRIPTION: Uses the Composio CLI to connect your GitHub account for agentic access and integration. This command initializes authentication for GitHub via Composio and should be run in the terminal before using GitHub actions with Composio. No parameters are required, but it interacts with the user for OAuth or API credential input.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposio add github # Connect your Github - Run this in terminal\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Workspace\nDESCRIPTION: Initializes a Docker workspace with a specified Python image and volume mounts. Provides isolated environment for running tools within containers.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/workspaces/workspaces.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_openai import ComposioToolSet, App, Action, WorkspaceType\nfrom openai import OpenAI\n\nclient = OpenAI()\n\ntoolset = ComposioToolSet(workspace_config=WorkspaceType.Docker(\n    image=\"python:3.9\",  # Base image to use\n    volumes={\"/host/path\": \"/container/path\"}  # Optional volume mounts\n))\ntools = toolset.get_tools([\"FILETOOL_LIST_FILES\"])\n\nresponse = client.chat.completions.create(\n    model=\"gpt-4o-mini\",\n    max_tokens=1024,\n    tools=tools,\n    messages=[{\"role\": \"user\", \"content\": \"List files in container\"}],\n)\nresult = toolset.handle_tool_calls(response)\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Lead Generator Agent\nDESCRIPTION: Commands to install required npm packages including OpenAI SDK, AI utilities, Zod, and Composio core dependencies using pnpm package manager.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/lead_generator_agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @ai-sdk/openai ai zod composio-core\n```\n\n----------------------------------------\n\nTITLE: Initializing ComposioToolSet and LiteLLM Router\nDESCRIPTION: Sets up the Composio tool set and configures the LiteLLM router with Anthropic's Claude model. Requires an Anthropic API key.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/litellm.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_openai import ComposioToolSet, App\nfrom litellm.router import Router\n\ntoolset = ComposioToolSet()\n\nrouter = Router(\n    model_list=[\n        {\n            \"model_name\": \"anthropic/claude-3-5\",\n            \"litellm_params\": {\n                \"model\": \"claude-3-opus-20240229\",\n                \"api_key\": \"<your-anthropic-api-key>\",\n            },\n        }\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining LiveKit Voice Agent with Composio Tools in Python\nDESCRIPTION: Defines a LiveKit `Assistant` agent class, initializing it with instructions and the previously retrieved Composio `tools`. It also sets up the main `entrypoint` function which connects to the LiveKit room, configures the `AgentSession` with STT, LLM, TTS, VAD, and turn detection plugins, starts the session, and runs the agent using the LiveKit CLI runner.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/livekit.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Assistant(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"You are a helpful voice AI assistant.\", tools=tools\n        )\n\nasync def entrypoint(ctx: agents.JobContext):\n    await ctx.connect()\n\n    session = AgentSession(\n        stt=deepgram.STT(),\n        llm=openai.LLM(model=\"gpt-4o\"),\n        tts=cartesia.TTS(),\n        vad=silero.VAD.load(),\n        turn_detection=turn_detector.EOUModel(),\n    )\n\n    await session.start(\n        room=ctx.room,\n        agent=Assistant(),\n        room_input_options=room_io.RoomInputOptions(\n            noise_cancellation=noise_cancellation.BVC(),\n        ),\n    )\n\n    await session.generate_reply()\n\nif __name__ == \"__main__\":\n    agents.cli.run_app(agents.WorkerOptions(entrypoint_fnc=entrypoint))\n```\n\n----------------------------------------\n\nTITLE: Defining Autogen Agents and Registering Tools\nDESCRIPTION: Setting up the assistant and user proxy agents with tool registration for GitHub operations\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/autogen.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nchatbot = AssistantAgent(\n    \"chatbot\",\n    system_message=\"Reply TERMINATE when the task is done or when user's content is empty\",\n    llm_config=llm_config,\n)\n\nuser_proxy = UserProxyAgent(\n    name=\"User\",\n    is_termination_msg=lambda x: x.get(\"content\", \"\")\n    and \"TERMINATE\" in x.get(\"content\", \"\"),\n    human_input_mode=\"NEVER\",\n    code_execution_config={\"use_docker\": False},\n)\n\ntoolset.register_tools(apps=[App.GITHUB], caller=chatbot, executor=user_proxy)\n```\n\n----------------------------------------\n\nTITLE: Executing GitHub Actions via OpenAI Function Calls\nDESCRIPTION: Configures and sends a request to OpenAI's chat completions API with GitHub tools. This allows the AI to interpret the user's task (starring a repository) and determine which GitHub actions to take.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/openai/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmy_task = \"Star a repo composiohq/composio on GitHub\"\n\n# Create a chat completion request to decide on the action\nresponse = openai_client.chat.completions.create(model=\"gpt-4-turbo-preview\",\n    tools=actions, # Passing actions we fetched earlier.\n    messages=[\n            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n            {\"role\": \"user\", \"content\": my_task}\n        ]\n    )\n\npprint(response)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Smol Agent with Composio Tools\nDESCRIPTION: Creating and configuring a Smol agent instance with the initialized Composio tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/smolagent/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Create an agent with the tools\nagent = CodeAgent(\n    tools=tools,\n    model=HfApiModel()\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up GitHub User Connection\nDESCRIPTION: Method to establish and verify GitHub connection for a user entity. Handles both new connections and existing ones with a timeout of 60 seconds for connection activation.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain-js.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst toolset = new LangchainToolSet({ apiKey: process.env.COMPOSIO_API_KEY, });\n\nasync function setupUserConnectionIfNotExists(entityId) {\n        const entity = toolset.client.getEntity(entityId);\n        const connection = await entity.getConnection({ appName: \"GITHUB\" });\n\n        if (!connection) {\n            // If this entity/user hasn't already connected the account\n            const connection = await entity.initiateConnection({appName: appName});\n            console.log(\"Log in via: \", connection.redirectUrl);\n           return connection.waitUntilActive(60);\n        }\n\n       return connection;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub Star Action to Letta Client\nDESCRIPTION: This snippet shows how to add the GitHub star repository action as a tool to the Letta client in both Python and JavaScript.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/letta.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntool = client.tools.add_composio_tool(composio_action_name=Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER.name)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst tool = await client.tools.addComposioTool(\n    \"GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER\",\n)\n```\n\n----------------------------------------\n\nTITLE: Executing CAMEL Agent Tasks\nDESCRIPTION: Implementation of agent execution logic with user prompt handling and response processing for GitHub repository starring.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/camelai.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprompt = (\n    \"I have created a new GitHub Repo,\"\n    \"Please star my github repository: camel-ai/camel\"\n)\nuser_msg = BaseMessage.make_user_message(role_name=\"User\", content=prompt)\nprint(Fore.YELLOW + f\"User prompt:\\n{prompt}\\n\")\n\nresponse = agent.step(user_msg)\nfor msg in response.msgs:\n    print_text_animated(Fore.GREEN + f\"Agent response:\\n{msg.content}\\n\")\n```\n\n----------------------------------------\n\nTITLE: Connecting to GitHub Account\nDESCRIPTION: Initialize connection with GitHub using Composio authentication flow\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langgraph.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposio login\ncomposio add github\n```\n\nLANGUAGE: python\nCODE:\n```\nrequest = composio_toolset.initiate_connection(app=App.GITHUB)\nprint(f\"Open this URL to authenticate: {request.redirectUrl}\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst connection = await composioToolset.connectedAccounts.initiate({appName: \"github\"})\nconsole.log(`Open this URL to authenticate: ${connection.redirectUrl}`);\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Research Agent\nDESCRIPTION: Commands to install the necessary packages for building a Research Agent using Composio. Python requires composio-llamaindex and llama-index-readers-arxiv, while JavaScript uses express, openai, composio-core, and dotenv.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/research-agent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install composio-llamaindex llama-index-readers-arxiv\n```\n\nLANGUAGE: javascript\nCODE:\n```\npnpm add express openai composio-core dotenv\n```\n\n----------------------------------------\n\nTITLE: Fetching Composio Tools by App in TypeScript\nDESCRIPTION: Uses an existing `OpenAIToolSet` instance (`toolset`) and the asynchronous `getTools` method, specifying the application using the string \"github\" in the `apps` array. This retrieves the default set of tools (tagged as 'important') for the connected GitHub app. Logs the number of tools fetched and their schemas.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function fetchAppTools() {\n  // Fetch default tools for the connected GitHub app\n  const githubTools = await toolset.getTools({ apps: [\"github\"] });\n\n  console.log(`Fetched ${githubTools.length} tools for GitHub.`);\n  // Output contains schemas for 'important' GitHub tools.\n}\n\nfetchAppTools();\n```\n\n----------------------------------------\n\nTITLE: Exporting a Composio Local Tool Class in Python\nDESCRIPTION: Shows how to export the custom tool class from the tool's main `__init__.py` file (`composio/tools/local/<tool_name>/__init__.py`). This makes the tool class importable from the package level.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/adding-local-tool.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom .tool import <ToolName>\n```\n\n----------------------------------------\n\nTITLE: Configuring LlamaIndex for Groq LLM Integration\nDESCRIPTION: Specifies the configuration for integrating LlamaIndex with Groq's language model. This likely includes API endpoints, model specifications, or other necessary parameters for using Groq's LLM with LlamaIndex.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/content_hook_generator_agent/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nllama-index-llms-groq\n```\n\n----------------------------------------\n\nTITLE: Running Setup Script in Shell\nDESCRIPTION: Command to execute the setup.sh script which sets up the environment, installs dependencies, logs into Composio, and adds necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/rag_agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring CAMEL Agent with GitHub Tools\nDESCRIPTION: Setup and configuration of CAMEL agent with OpenAI GPT model and GitHub tools integration, including system message definition.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/camelai.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nassistant_model_config = ChatGPTConfig(\n    temperature=0.0,\n    tools=tools,\n)\n\nmodel = ModelFactory.create(\n    model_platform=ModelPlatformType.OPENAI,\n    model_type=ModelType.GPT_3_5_TURBO,\n    model_config_dict=assistant_model_config.__dict__,\n)\n\n\n# set up agent\nassistant_sys_msg = BaseMessage.make_assistant_message(\n    role_name=\"Developer\",\n    content=(\n        \"You are a programmer as well an experienced github user. \"\n        \"When asked given a instruction, \"\n        \"you try to use available tools, and execute it\"\n    ),\n)\n\nagent = ChatAgent(\n    assistant_sys_msg,\n    model,\n    tools=tools,\n)\nagent.reset()\n```\n\n----------------------------------------\n\nTITLE: Tracking Responded Slack Threads in Python\nDESCRIPTION: Defines a Python set named `responded_threads`. This set is used to store the timestamp (`thread_ts`) of Slack message threads that the bot has already processed and responded to, preventing duplicate responses in the same thread.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Set to keep track of threads we've already responded to\nresponded_threads = set()\n```\n\n----------------------------------------\n\nTITLE: Executing the Setup Script (Shell)\nDESCRIPTION: This shell command executes the `setup.sh` script located in the current directory. The script typically handles environment setup, dependency installation (e.g., from `requirements.txt`), and other preparatory tasks for the project.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_crewai/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Adapting Parameters for Framework Compatibility (Python)\nDESCRIPTION: Demonstrates implementation of a helper method for converting Composio parameter schemas to those expected by the target framework. Intended to be included in the integration's toolset. Inputs: schema_params dictionary. Output: converted_schema (framework-specific parameter format). Constraints: must handle all required type and structure changes.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef _adapt_parameters(self, schema_params):\n    \"\"\"Convert Composio parameter schema to framework-specific format\"\"\"\n    # Implement type conversions here\n    return converted_schema\n```\n\n----------------------------------------\n\nTITLE: Initiating Connection with User Credentials in Python\nDESCRIPTION: This Python code demonstrates how to initiate a connection with user-provided credentials. It uses the initiate_connection method to establish a connection between the user and external app, passing the collected API key and other required parameters securely.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/non-oauth.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nuser_id = \"user_shopify_456\"\n\n# Assume user provided this value securely via your UI\nuser_provided_shopify_key = \"sk_live_xxxxxxxxxxxxxxx\"\n\n# Assume entity and integration ID are known\n# entity = toolset.get_entity(id=\"user_stripe_456\")\nSHOPIFY_INTEGRATION_ID = \"int_shopify_yyyyyyyy...\"\n\ntry:\n    print(f\"Initiating Shopify connection for entity {user_id}...\")\n    connection_request = toolset.initiate_connection(\n        integration_id=SHOPIFY_INTEGRATION_ID, # Or app_name=App.SHOPIFY\n        entity_id=user_id,\n        auth_scheme=\"API_KEY\", # Must match the integration's config\n        # Pass the user-provided key(s) here\n        connected_account_params={\n            \"api_key\": user_provided_shopify_key\n            # Add other fields if the app requires more (e.g., account_id)\n        },\n    )\n    print(\"Connection initiation response:\", connection_request)\n    # Status should be ACTIVE almost immediately\n    # connection_id = connection_request.connectedAccountId\n\nexcept Exception as e:\n    print(f\"Error initiating connection: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Getting Entity Object for User Identification in Composio\nDESCRIPTION: Shows how to create an Entity object that represents your end-user in Composio by providing a unique identifier from your application. This Entity object is used to initiate connections and execute actions on behalf of specific users.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/connection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_openai import ComposioToolSet, Action, App\n\ntoolset = ComposioToolSet()\nuser_identifier_from_my_app = \"user_7a9f3b_db_id\" # Example\n\n# Get the Composio Entity object for your user\nentity = toolset.get_entity(id=user_identifier_from_my_app)\n# Use this 'entity' object to initiate connections\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAIToolSet } from \"composio-core\";\n\nconst toolset = new OpenAIToolSet();\nconst userIdentifierFromMyApp = \"user_7a9f3b_db_id\"; // Example\n\n// Get the Composio Entity object for your user\nconst entity = await toolset.getEntity(userIdentifierFromMyApp);\n// Use this 'entity' object to initiate connections\n\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Repository Star Endpoint\nDESCRIPTION: Create a POST endpoint that uses Cloudflare AI to process the request and star a GitHub repository using Composio tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/cloudflare.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napp.post('/', async (c) => {\n    const toolset = new CloudflareToolSet();\n\n    try {\n        const tools = await toolset.getTools({ apps: ['github'] });\n        const instruction = 'Star the repository \"composiohq/composio\"';    \n\n        let messages = [\n            { role: 'system', content: '' },\n            { role: 'user', content: instruction },\n        ];\n\n        const config = {\n            model: '@hf/nousresearch/hermes-2-pro-mistral-7b',\n        };\n\n        const toolCallResp = await c.env.AI.run(config.model, {\n            messages,\n            tools,\n        });\n\n        await toolset.handleToolCall(toolCallResp, entity.id);\n        return c.json({ messages: \"Your issue has been created\" });\n    } catch (err) {\n        console.log(err);\n        return c.text('Something went wrong', 500);\n    }\n\n    export default app;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for API Keys\nDESCRIPTION: This snippet shows the structure and content required for the `.env` file. This file stores sensitive API keys (`OPENAI_API_KEY` and `COMPOSIO_API_KEY`) as environment variables, which the application reads for authenticating with OpenAI and Composio services.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/assignment-agent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=your_openai_key\nCOMPOSIO_API_KEY=your_composio_key\n```\n\n----------------------------------------\n\nTITLE: Initializing Autogen Agents with Configuration\nDESCRIPTION: Sets up the Autogen environment by importing necessary packages and configuring the AssistantAgent and UserProxyAgent. This establishes the foundation for an AI agent that can execute tasks.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/autogen/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom autogen import AssistantAgent, UserProxyAgent\nfrom composio_autogen import ComposioToolSet, App, Action\nimport os\n\n# Configuration for the language model\nllm_config = {\"config_list\": [{\"model\": \"gpt-4-turbo\", \"api_key\": os.environ[\"OPENAI_API_KEY\"]}]}\n\n# Initialize the AssistantAgent\nchatbot = AssistantAgent(\n    \"chatbot\",\n    system_message=\"Reply TERMINATE when the task is done or when user's content is empty\",\n    llm_config=llm_config,\n)\n\n# Initialize the UserProxyAgent\nuser_proxy = UserProxyAgent(\n    \"user_proxy\",\n    is_termination_msg=lambda x: x.get(\"content\", \"\") and \"TERMINATE\" in x.get(\"content\", \"\"),\n    human_input_mode=\"NEVER\",  # Don't take input from User\n    code_execution_config={\"use_docker\": False}\n)\n```\n\n----------------------------------------\n\nTITLE: Querying RAG System\nDESCRIPTION: Implementing functionality to query and retrieve information from the knowledge base\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Define task for querying\nquery_task = Task(\n    description=\"\"\"Query the knowledge base to answer the following question:\n    \"What is the capital of France?\"\n    \n    Return the answer with any supporting information from the knowledge base.\"\"\",\n    expected_output=\"The answer to the question based on the knowledge base\",\n    agent=rag_agent,\n    context=[add_content_task]  # This task depends on content being added first\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to query the knowledge base\nconst queryKnowledgeBase = async (agentExecutor) => {\n    const query = \"What is the capital of France?\";\n    \n    const result = await agentExecutor.invoke({\n        input: `Query the knowledge base to answer the following question: \"${query}\"`\n    });\n    \n    console.log(\"Query Result:\", result.output);\n    return result;\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating GitHub Tools with Composio for Google AI Python\nDESCRIPTION: Fetches and integrates GitHub tools from Composio to enable functionality for Google AI Python operations. Configures specific GitHub actions like starring repositories that the AI can perform.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/gemini/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom google.genai import types\n\nfrom composio_gemini import Action, ComposioToolSet\n\n# Create composio client\ntoolset = ComposioToolSet()\n\n# Create tools\ntools = toolset.get_tools(\n    actions=[\n        Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER,\n    ]\n)\n\n# Create genai client config\nconfig = types.GenerateContentConfig(\n    tools=tools,  # type: ignore    \n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing Calendar Agent\nDESCRIPTION: This code defines and executes the agent responsible for creating Google Calendar events from the todo list. The Python version uses CrewAI's Agent and Task classes, while the JavaScript version uses LangChain's AgentExecutor and OpenAIFunctionsAgent.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/calendar-agent.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Create and Execute Agent.\ndef run_crew():\n  calendar_agent = Agent(\n      role=\"Google Calendar Agent\",\n      goal=\"\"\"You take action on Google Calendar using Google Calendar APIs\"\"\",\n      backstory=\"\"\"You are an AI agent responsible for taking actions on Google Calendar on users' behalf. \n      You need to take action on Calendar using Google Calendar APIs. Use correct tools to run APIs from the given tool-set.\"\"\",\n      verbose=True,\n      tools=tools,\n      llm=llm,\n  )\n  task = Task(\n      description=f\"Book slots according to {todo}. Label them with the work provided to be done in that time period. Schedule it for today. Today's date is {date} (it's in YYYY-MM-DD format) and make the timezone be {timezone}.\",\n      agent=calendar_agent,\n      expected_output=\"if free slot is found\",\n  )\n  crew = Crew(agents=[calendar_agent], tasks=[task])\n  result = crew.kickoff()\n  print(result)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Create and Execute Agent.\nasync function runAgent() {\n    const prompt = await pull(\"hwchase17/openai-functions-agent\");\n    const agent = await createOpenAIFunctionsAgent({\n        llm,\n        tools,\n        prompt\n    });\n\n    const agentExecutor = new AgentExecutor({\n        agent,\n        tools,\n        verbose: true,\n    });\n\n    const result = await agentExecutor.invoke({\n        input: `Book slots according to this todo list: ${todo}. \n                Label them with the work provided to be done in that time period. \n                Schedule it for today. Today's date is ${date} (it's in YYYY-MM-DD format) \n                and make the timezone be ${timezone}.`\n    });\n\n    console.log(result.output);\n    return \"Agent execution completed\";\n}\n\nrunAgent().then(console.log).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Connecting GitHub Account using Composio CLI\nDESCRIPTION: Uses the Composio CLI commands `composio login` and `composio add github` to authenticate the user and add a GitHub integration to their Composio account. This step is necessary to allow Composio tools to interact with the user's GitHub account. Requires Composio CLI to be installed and configured, and the `COMPOSIO_API_KEY` environment variable set.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/llamaindex.mdx#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncomposio login\ncomposio add github\n```\n\n----------------------------------------\n\nTITLE: Executing the Agno Agent with GitHub Star Functionality\nDESCRIPTION: Creating and executing an agent with the configured Composio GitHub tools to respond to a conversational request for starring a GitHub repository.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/agno/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Create a chat completion request to decide on the action\nagent = Agent(tools=composio_tools, show_tool_calls=True)\n\nagent.print_response(\"Can you star ComposioHQ/composio repo?\")\n```\n\n----------------------------------------\n\nTITLE: Testing Composio to Framework Schema Transformation in Python\nDESCRIPTION: This test function validates that the transformation from a Composio schema to a framework-compatible tool maintains naming and description integrity. It instantiates a ComposioToolSet, applies the '_wrap_tool' transformation on a sample schema, and asserts correctness of key properties. Dependencies include a working ComposioToolSet class and an appropriate schema dictionary; outputs are assertion errors if mismatches occur.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef test_schema_transformation():\\n    \\\"\\\"\\\"Test that Composio schemas are correctly transformed to framework schemas\\\"\\\"\\\"\\n    toolset = ComposioToolSet()\\n    composio_schema = {...}  # Sample Composio schema\\n    framework_tool = toolset._wrap_tool(composio_schema)\\n    \\n    # Assert framework tool has expected properties\\n    assert framework_tool.name == composio_schema[\\\"name\\\"]\\n    assert framework_tool.description == composio_schema[\\\"description\\\"]\\n    # ... more assertions\n```\n\n----------------------------------------\n\nTITLE: Importing Base Packages\nDESCRIPTION: Importing essential libraries and modules required for the RAG system implementation\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport textwrap\n\nfrom composio_crewai import Action, App, ComposioToolSet\nfrom crewai import Agent, Crew, Process, Task\nfrom dotenv import load_dotenv\nfrom langchain_openai import ChatOpenAI\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport dotenv from 'dotenv';\nimport { LangchainToolSet } from \"composio-core\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { AgentExecutor, createOpenAIFunctionsAgent } from \"langchain/agents\";\nimport { pull } from \"langchain/hub\";\n\ndotenv.config();\n```\n\n----------------------------------------\n\nTITLE: Verifying Agent's Action and Response\nDESCRIPTION: Example output showing the agent's response after executing the task to star a GitHub repository. This helps in checking if the action was completed successfully.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/crew_ai/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> Entering new CrewAgentExecutor chain...\n> I need to star the repository \"composiohq/composio\" on GitHub.\n> {'execution_details': {'executed': True}, 'response_data': ''}\n> Finished chain.\n```\n\n----------------------------------------\n\nTITLE: Installing Composio CrewAI and Connecting GitHub Account\nDESCRIPTION: Commands to install Composio CrewAI package and connect the user's GitHub account for agent functionalities. It also includes a command to check available applications.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/crew_ai/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio_crewai\ncomposio-cli add github  # Connect your GitHub account\ncomposio-cli show-apps   # Check available applications\n```\n\n----------------------------------------\n\nTITLE: Connecting GitHub Account via CLI\nDESCRIPTION: Commands to log into Composio and add GitHub integration through the command line interface\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/autogen.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposio login \ncomposio add github\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script for Environment Configuration\nDESCRIPTION: Command to run the setup.sh script which configures the environment, installs dependencies, logs into Composio, and adds necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/code_execution_agent/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Composio and Letta Packages\nDESCRIPTION: This snippet shows how to install the required packages for using Composio with Letta in both Python and JavaScript environments.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/letta.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install letta-client composio_langchain\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i composio-core @letta-ai/letta-client\n```\n\n----------------------------------------\n\nTITLE: Integrating GitHub Tools with Composio for LangChain\nDESCRIPTION: Code for integrating GitHub tools into LangChain projects using Composio's services and creating an agent with these tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/julep/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_julep import App, ComposioToolSet\n    \ntoolset = ComposioToolSet()\ncomposio_tools = toolset.get_tools(tools=App.GITHUB)\n\n\nagent = client.agents.create(\n    name=name,\n    about=about,\n    default_settings=default_settings,\n    model=\"gpt-4-turbo\",\n    tools=composio_tools,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Project Dependencies\nDESCRIPTION: Commands for installing project dependencies and starting the development server\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/cloudflare-openai/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs dependencies.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/sql_agent_plotter_crewai/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing GitHub Repository Starring Command via LlamaIndex Agent\nDESCRIPTION: Code to send a natural language request to the agent for starring a GitHub repository and displaying the response from the execution.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/llamaindex/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nresponse = agent.chat(\"Hello! I would like to star a repo composiohq/composio on GitHub\")\nprint(\"Response:\", response)\n```\n\n----------------------------------------\n\nTITLE: Preparing the LLM Model with Tools\nDESCRIPTION: Initialization of the ChatOpenAI model and binding the GitHub tools to it, allowing the model to use these tools during conversations.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langgraph/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmodel = ChatOpenAI(temperature=0, streaming=True)\nmodel_with_tools = model.bind_tools(functions)\n```\n\n----------------------------------------\n\nTITLE: Setting up GitHub Account Connection\nDESCRIPTION: Function to establish and verify GitHub account connection using Composio toolset. Handles both new connection creation and existing connection verification.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai-js.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAI } from \"openai\";\nimport { OpenAIToolSet } from \"composio-core\";\n\nconst COMPOSIO_API_KEY = \"<your-composio-api-key>\"\nconst OPEN_AI_API_KEY = \"<your-openai-api-key>\"\nconst toolset = new OpenAIToolSet({apiKey: COMPOSIO_API_KEY,});\n\nconst appName = 'github';\n\nasync function setupUserConnectionIfNotExists(entityId) {\n        const entity = toolset.client.getEntity(entityId);\n        const connection = await entity.getConnection({ appName: appName });\n\n        if (!connection) {\n            const connection = await entity.initiateConnection({appName: appName});\n            console.log(\"Log in via: \", connection.redirectUrl);\n            return connection.waitUntilActive(60);\n        }\n\n        return connection;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Completion with GitHub Tools\nDESCRIPTION: Example of creating a chat completion request to star a GitHub repository using Together AI and Composio tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/together.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.chat.completions.create(\n    tools=tools,\n    model=\"mistralai/Mixtral-8x7B-Instruct-v0.1\",\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"Star the repo 'composiohq/composio'\",\n        }\n    ],\n)\n\nres = toolset.handle_tool_calls(response)\nprint(res)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages and Connecting GitHub\nDESCRIPTION: Commands to install the necessary packages (lyzr-automata and composio_lyzr) and connect GitHub as an external tool that agents can interact with.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/lyzr.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install lyzr-automata -q\npip install composio_lyzr\n#Connect your Github so agents can use it. \ncomposio add github\n#Check all different apps which you can connect with\ncomposio apps\n```\n\n----------------------------------------\n\nTITLE: Integrating GitHub Tools with Composio\nDESCRIPTION: Fetches and integrates GitHub tools from Composio, providing the necessary functionality for GitHub operations through LangChain.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/claude/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_claude import App, ComposioToolSet\n\ntoolset = ComposioToolSet()\nactions = toolset.get_tools(tools=App.GITHUB)\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Adding GitHub Integration via Composio CLI\nDESCRIPTION: Uses the Composio CLI to authenticate the user and add the GitHub integration. The `composio login` command initiates the login process, and `composio add github` connects the user's GitHub account to their Composio profile, enabling the use of GitHub tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/livekit.mdx#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncomposio login\ncomposio add github\n```\n\n----------------------------------------\n\nTITLE: Configuring LiteLLM Router for Tool Calling\nDESCRIPTION: Sets up the LiteLLM router to use Claude 3.5 for processing a user request to star a GitHub repository. The router is configured with tools and automatic tool selection.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/litellm.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse = router.completion(\n    model=\"anthropic/claude-3-5\",\n    messages=[\n        {\"role\": \"user\", \"content\": \"Star the repository composiohq/composio on github\"},\n    ],\n    tools=tools,\n    tool_choice=\"auto\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Connection in TypeScript\nDESCRIPTION: TypeScript implementation for initiating an OAuth connection with custom redirect URL and authentication settings.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/white-labelling.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst user_id = \"00000000-0000-0000-0000-000000000000\";\nconst entity = await composioToolset.getEntity(user_id);\n\nconst thread_id = \"12345678\"; \nconst redirect_url = `https://yourapp.com/thread/${thread_id}`; // Example redirect URL\n\nconst connectionRequest = await entity.initiateConnection({\n  integrationId: integration.id,\n  useComposioAuth: false,\n  redirectUri: redirect_url,\n});\n\nconsole.log(connectionRequest.redirectUrl);\n```\n\n----------------------------------------\n\nTITLE: Running the Reddit Research Agent Demo - Bash\nDESCRIPTION: This command executes the entry point for the Reddit research agent using Node.js with ECMAScript module support. It requires that all dependencies are installed and environment variables configured. Outputs are shown in the terminal, and the demo connects to Reddit and OpenAI services as specified.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/reddit-research/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode demo.mjs\n```\n\n----------------------------------------\n\nTITLE: Running the Python Presentation Agent\nDESCRIPTION: Command to execute the main Python script that starts the presentation agent after environment setup and configuration.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/presentation_agent/langgraph/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Filtering Specific Actions in Composio LangChain Tools\nDESCRIPTION: This code snippet demonstrates how to limit the actions an agent can execute, specifically allowing only the creation of issues on GitHub.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langchain/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Filter to only allow creating issues on GitHub\ntoolsGithubCreateIssue = ComposioToolSet(actions=[Action.GITHUB_CREATE_ISSUE])\n```\n\n----------------------------------------\n\nTITLE: Filtering Specific Apps\nDESCRIPTION: Example of restricting agent to specific applications like Asana and GitHub\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/julep.mdx#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# To restrict agents from using all tools, filter specific tools \nactions = composio_toolset.get_tools(apps=[App.ASANA, App.GITHUB])\n```\n\n----------------------------------------\n\nTITLE: Running the Second Brain Agent Python Script (Shell)\nDESCRIPTION: This command starts the Second Brain Agent using Python by executing the main entry script located at 'cookbook/examples/advanced_agents/Second_brain_Agent/llamaindex/main.py'. It expects all dependencies to be installed and any necessary environment variables to be configured via a '.env' file populated in advance. The output and operation depend on proper configuration and installed dependencies.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Second_brain_Agent/llamaindex/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/advanced_agents/Second_brain_Agent/llamaindex/main.py\n```\n\n----------------------------------------\n\nTITLE: Running Environment Setup Script - Shell\nDESCRIPTION: This snippet executes the `setup.sh` script using the `./setup.sh` command. It is intended to automate environment configuration and dependency installation required by the project. Ensure that the script is executable before running. Inputs are any commands in the script; expected output is a fully prepared environment for running the main Python agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/AI_PM_agent/llamaindex/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running Main Game Builder Script with Python via Bash\nDESCRIPTION: This snippet runs the 'main.py' script using Python version 3.10. It starts the interactive AI game builder agent, prompting the user to describe the desired game. Ensure all previous environment and dependency setup steps have been completed, and that .env variables are populated.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/agents-sdk/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython3.10 main.py\n```\n\n----------------------------------------\n\nTITLE: Running Advanced Agent Scripts with Python - Python\nDESCRIPTION: This snippet demonstrates how to execute various advanced agent Python scripts provided in example directories. Each command runs a different agent: Slack Bot Agent, Image Search Agent, Human-in-the-Loop Scheduler, and AI Project Management Agent. Python 3.8 or higher must be installed, and dependencies should be set up as described in the prerequisites. Proper environment variables should be configured before execution. The scripts expect original project structure and required configuration files.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npython examples/advanced_agents/slack_bot_agent/main.py\npython examples/advanced_agents/image_search/main.py\npython examples/advanced_agents/human_in_the_loop_scheduler/main.py\npython examples/advanced_agents/AI_PM_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script (Shell)\nDESCRIPTION: Command to run the `setup.sh` script. This script is responsible for setting up the necessary environment and installing project dependencies listed in `requirements.txt`. After execution, the `.env` file needs manual configuration.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/sales_kit/CRM_agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Starting a Chat Session with Griptape Agent\nDESCRIPTION: Python code that initiates an interactive chat session with the configured Griptape agent, allowing users to issue conversational commands for GitHub operations.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/griptape/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nChat(agent).start()\n```\n\n----------------------------------------\n\nTITLE: Setting Up LangGraph Tools and Model\nDESCRIPTION: Configure LangGraph tools and bind them with the OpenAI chat model\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langgraph.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntools = composio_toolset.get_tools(\n    apps=[App.GITHUB]\n)\ntool_node = ToolNode(tools)\nmodel = ChatOpenAI(temperature=0, streaming=True)\nmodel_with_tools = model.bind_tools(tools)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst tools = await composioToolset.getTools({\n    apps: [\"github\"],\n});\n\nconst toolNode = new ToolNode(tools);\n\nconst model = new ChatOpenAI({ temperature: 0, apiKey:\"\"}).bindTools(tools);\n```\n\n----------------------------------------\n\nTITLE: Importing required packages for Composio and Camel integration\nDESCRIPTION: Import the necessary packages from Composio and Camel libraries to prepare the environment for agent creation and tool integration. These imports enable basic agent functionality and Composio tool access.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/camel/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom colorama import Fore\n\nfrom camel.agents import ChatAgent\nfrom camel.configs import ChatGPTConfig\nfrom camel.messages import BaseMessage\nfrom camel.models import ModelFactory\nfrom camel.types import ModelPlatformType, ModelType\nfrom camel.utils import print_text_animated\nfrom composio_camel import ComposioToolSet, Action\n```\n\n----------------------------------------\n\nTITLE: Executing Tasks with Google AI\nDESCRIPTION: Demonstrates how to send a task to the AI model and get its response\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/google.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Define task\ntask = \"Star a repo composiohq/composio on GitHub\"\n\n# Send a message to the model\nresponse = chat.send_message(task)\n\nprint(\"Model response:\")\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Importing Base Packages and Setting Up Environment for LlamaIndex\nDESCRIPTION: Code to import necessary packages from LlamaIndex, set up environment variables, and initialize the OpenAI language model for the agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/llamaindex/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_index.llms.openai import OpenAI\nfrom llama_index.core.llms import ChatMessage\nfrom llama_index.core.agent import FunctionCallingAgentWorker\n\nimport dotenv\nfrom llama_index.core.tools import FunctionTool\n\n# Load environment variables from .env\ndotenv.load_dotenv()\n\nllm = OpenAI(model=\"gpt-4-turbo\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving GitHub Tools from Composio\nDESCRIPTION: Gets all available GitHub tools from the Composio toolset. Tools can be filtered by usecase and tags.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/litellm.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntools = toolset.get_tools(apps=[App.GITHUB])\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for SQL Agent\nDESCRIPTION: Installation commands for the required packages to set up the SQL Agent in both Python and JavaScript environments. Python uses pip for installing composio-langchain and langchain-openai, while JavaScript uses pnpm to install @langchain/openai, composio-core, langchain, and dotenv.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/sql-agent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install composio-langchain langchain-openai\n```\n\nLANGUAGE: javascript\nCODE:\n```\npnpm add @langchain/openai composio-core langchain dotenv\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Integration in TypeScript\nDESCRIPTION: TypeScript implementation for creating a custom OAuth integration with Google Calendar, specifying client credentials and redirect URI.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/white-labelling.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAIToolSet } from \"composio-core\";\nconst composioToolset = new OpenAIToolSet();\n\nconst integration = await composioToolset.integrations.create({\n  appUniqueKey: \"googlecalendar\",\n  name: \"Google Calendar\",\n  authScheme: \"OAUTH2\",\n  useComposioAuth: false,\n  authConfig: {\n    client_id: \"12345678\",\n    client_secret: \"12345678\",\n    redirect_uri: \"https://yourapp.com/redirect\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running the PR Agent main.py Script - Python via Shell\nDESCRIPTION: This shell command runs the `main.py` Python script for the PR agent using the system's Python interpreter. The script is expected to perform the main PR review automation using Composio-integrated frameworks. Prerequisites include successful environment setup, Python 3.8+ installation, and configuration of required secrets in a `.env` file. The user should ensure the working directory matches the provided path and all dependencies are installed.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_openai/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/pr_agent_openai/main.py\n```\n\n----------------------------------------\n\nTITLE: Installing Composio SDK for Python with OpenAI Support\nDESCRIPTION: Command to install the Composio core SDK and OpenAI framework helper for Python applications. This is the first step to integrate Composio's tool capabilities into Python-based AI agents.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/welcome.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio_core composio_openai # Example for OpenAI\n```\n\n----------------------------------------\n\nTITLE: GitHub Repository Topics Tool Implementation in TypeScript\nDESCRIPTION: Implementation of a custom tool to fetch GitHub repository topics using Composio's managed authentication system in TypeScript with error handling.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/custom-tools.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAIToolSet, App, RawExecuteRequestParam, ActionExecutionResDto, ParamPlacement } from \"composio-core\";\nimport { z } from \"zod\";\n\nconst toolset = new OpenAIToolSet();\n\nawait toolset.createAction({\n    actionName: \"get_github_repo_topics\",\n    toolName: \"github\", // Associate with GitHub app for managed auth\n    description: \"Gets the topics associated with a specific GitHub repository.\",\n    inputParams: z.object({\n        owner: z.string().describe(\"Repository owner username\"),\n        repo: z.string().describe(\"Repository name\"),\n    }),\n    // Callback receives input, credentials (usually undefined here), and executeRequest\n    callback: async (inputParams, _authCredentials, executeRequest): Promise<ActionExecutionResDto> => {\n         // Type assertion for validated input\n         const { owner, repo } = inputParams as { owner: string, repo: string };\n         console.log(`Getting topics for ${owner}/${repo} using Composio-managed GitHub auth...`);\n         try {\n             // Call executeRequest - Composio injects auth for 'github'\n             const response = await executeRequest({\n                 endpoint: `/repos/${owner}/${repo}/topics`, // API path\n                 method: \"GET\",\n                 // No body/parameters needed for standard managed auth GET request\n             });\n\n             // Process response and return in Composio's expected format\n             // Assuming response directly contains the API data structure\n             const topics = (response as any)?.names ?? []; // Safely extract topics\n             return { successful: true, data: { topics: topics } };\n\n         } catch (e) {\n             console.error(\"Error calling executeRequest for topics:\", e);\n             // Return error in Composio's expected format\n             return { successful: false, error: String(e) };\n         }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Code Execution Agent\nDESCRIPTION: Installation commands for the required packages to set up the Code Execution Agent in both Python and JavaScript environments.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/code-execution-agent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install composio-crewai langchain-openai\n```\n\nLANGUAGE: javascript\nCODE:\n```\npnpm add composio-core dotenv @langchain/openai langchain\n```\n\n----------------------------------------\n\nTITLE: Adding Content to RAG System\nDESCRIPTION: Implementing functionality to add sample content to the knowledge base\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Define task for adding content\nadd_content_task = Task(\n    description=\"\"\"Add the following information to the knowledge base:\n    \n    1. Paris is the capital city of France.\n    2. London is the capital city of the United Kingdom.\n    3. Washington D.C. is the capital city of the United States.\n    4. Tokyo is the capital city of Japan.\n    5. Berlin is the capital city of Germany.\n    \n    Make sure to confirm that each piece of information is successfully added.\"\"\",\n    expected_output=\"Confirmation that all information was added to the knowledge base\",\n    agent=rag_agent\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to add content to the knowledge base\nconst addContent = async (agentExecutor) => {\n    const content = `\n        1. Paris is the capital city of France.\n        2. London is the capital city of the United Kingdom.\n        3. Washington D.C. is the capital city of the United States.\n        4. Tokyo is the capital city of Japan.\n        5. Berlin is the capital city of Germany.\n    `;\n    \n    const result = await agentExecutor.invoke({\n        input: `Add the following information to the knowledge base: ${content}`\n    });\n    \n    console.log(\"Content Added:\", result.output);\n    return result;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Composio Gemini Package (Bash)\nDESCRIPTION: Installs the necessary Python package `composio-gemini` using pip. This package provides the bridge required to integrate Composio tools with Google Gemini models.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/gemini.mdx#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npip install composio-gemini\n```\n\n----------------------------------------\n\nTITLE: Executing the setup.sh Script to Initialize Environment (Shell)\nDESCRIPTION: This shell snippet runs the setup.sh script to initialize or configure the research agent's local environment and to install necessary dependencies. All dependencies declared within setup.sh will be processed. This step requires prior permission setup and expects setup.sh to be located in the current directory. Expected output is the setup process status and any installation logs.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/domain_deep_research/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Call Function\nDESCRIPTION: Define function to process messages through the LLM and handle responses\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langgraph.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef call_model(state: MessagesState):\n    \"\"\"\n    Process messages through the LLM and return the response\n    \"\"\"\n    messages = state[\"messages\"]\n    response = model_with_tools.invoke(messages)\n    return {\"messages\": [response]}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nasync function callModal(state) {\n    const { messages } = state;\n    const response = await model.invoke(messages);\n    return { messages: [response] };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm for Composio Project - Bash\nDESCRIPTION: This snippet demonstrates the installation of required npm packages for the Lead Outreach Agent using pnpm. Dependencies include langchain, langchain/openai, composio-core, and express, which are necessary for the application's AI processing and server functionality. It should be run from the project root directory, and pnpm must be installed beforehand. There are no required inputs, and the command outputs installed packages in node_modules.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/lead_outreach_agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @langchain @langchain/openai composio-core express\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies\nDESCRIPTION: This snippet lists Python package dependencies required for the project. It includes libraries for Composio integration with LangChain, LangChain core, LangChain OpenAI integration, environment variable management (python-dotenv), and potentially agent monitoring (agentops). These packages indicate the project involves building or utilizing AI agents with language models.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_langchain/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomposio-langchain\nlangchain\nlangchain-openai\npython-dotenv\nagentops\n```\n\n----------------------------------------\n\nTITLE: Filtering Actions by Tags\nDESCRIPTION: Shows how to filter actions based on specific tags for more granular control\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/google.mdx#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nactions = composio_toolset.get_tool(apps=[App.ASANA], tags=[Tag.ASANA_TASKS])\n```\n\n----------------------------------------\n\nTITLE: Executing Composio GitHub Action by Connection ID in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to execute a Composio action (`GITHUB_GET_THE_AUTHENTICATED_USER`) by specifying the `connectedAccountId`. Similar to the Python counterpart, this method directly targets a specific connection, which is useful when the connection ID is available and precise execution is needed.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst user_info_direct = await toolset.executeAction({\n    action: Action.GITHUB_GET_THE_AUTHENTICATED_USER,\n    params: {},\n    connectedAccountId: activeConnection.id\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Tools Integration\nDESCRIPTION: Setup code for integrating GitHub tools with Composio, specifically for repository starring functionality\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/phidata/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_phidata import ComposioToolSet, Action\n\ntoolset = ComposioToolSet()\ncomposio_tools = toolset.get_actions(actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER])\n```\n\n----------------------------------------\n\nTITLE: Sending LLM Request with Tool Definitions\nDESCRIPTION: Implementation of sending a request to OpenAI with Composio tool definitions, allowing the LLM to choose and use tools as needed.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/introduction.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntask = \"What is my GitHub username?\"\nmessages = [{\"role\": \"user\", \"content\": task}]\n\nprint(f\"Sending task to LLM: '{task}'\")\nresponse = client.chat.completions.create(\n    model=\"gpt-4o-mini\",\n    messages=messages,\n    tools=tools,\n    tool_choice=\"auto\" # Instruct LLM to choose if a tool is needed\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst task = \"What is my GitHub username?\";\nconst messages = [{ role: \"user\" as const, content: task }];\n\nconsole.log(`Sending task to LLM: '${task}'`);\nconst response = await client.chat.completions.create({\n    model: \"gpt-4o-mini\",\n    messages: messages,\n    tools: tools,\n    tool_choice: \"auto\" // Instruct LLM to choose if a tool is needed\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for API Keys (.env)\nDESCRIPTION: This snippet provides the necessary environment variable declarations for API authentication. Replace 'your_openai_api_key' and 'your_composio_api_key' with your actual credentials. The COMPOSIO_API_KEY is optional, depending on which tools are used during game creation. These variables must be set in a .env file so the Python code can access them at runtime.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/agents-sdk/README.md#2025-04-23_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\nOPENAI_API_KEY=your_openai_api_key\nCOMPOSIO_API_KEY=your_composio_api_key # Optional, depending on tools used\n```\n\n----------------------------------------\n\nTITLE: Initializing Composio Tools\nDESCRIPTION: Configuration and initialization of GitHub tools with custom retry settings for different actions.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/pydanticai/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Initialize toolset\ncomposio_toolset = ComposioToolSet()\n\n# Configure max retries for specific tools\nmax_retries = {\n    Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER: 5,    # More retries for starring\n    Action.GITHUB_CREATE_REPOSITORY: 2   # Fewer retries for creation\n}\n\n# Get GitHub tools with retry configuration\ntools = composio_toolset.get_tools(\n    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER],\n    max_retries=max_retries,\n    default_max_retries=3  # Default retries for tools not specified in max_retries\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to GitHub via CLI Commands\nDESCRIPTION: CLI commands to authenticate with Composio and add GitHub integration.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/litellm.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposio login \ncomposio add github\n```\n\n----------------------------------------\n\nTITLE: Connecting and Authenticating GitHub App via Composio CLI - Shell\nDESCRIPTION: This short snippet demonstrates logging into Composio and registering the GitHub application using the command-line interface. It requires composio CLI to be installed and accessible in your shell environment. The commands prompt browser-based authentication and setup, a prerequisite for API-based operations involving GitHub.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/crewai.mdx#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposio login \ncomposio add github\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Tools via Composio\nDESCRIPTION: Retrieving GitHub-specific tools using ComposioToolSet for both Python and JavaScript implementations.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/groq.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Import from composio_langchain\nfrom composio_langchain import ComposioToolSet, Action, App\n\n# Get All the tools\n\ncomposio_toolset = ComposioToolSet()\ntools = composio_toolset.get_tools(apps=[App.GITHUB])\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize the LangchainToolSet with the API key from environment variables\nconst toolset = new LangchainToolSet({ apiKey: process.env.COMPOSIO_API_KEY});\n\n// Fetch tools configured for GitHub applications\nconst tools = await toolset.getTools({ apps: [\"github\"] });\n```\n\n----------------------------------------\n\nTITLE: Running the Image Search Agent Main Script with Python via Shell\nDESCRIPTION: Runs the main.py Python script that launches the Image Search Agent, using the specified file path within the project directory. Requires all dependencies from requirements.txt to be already installed (possibly via setup.sh) and Python 3.8+. Accepts CLI arguments if specified in main.py. Outputs results or logs to the terminal.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_langgraph/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/image_search/main.py\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory - Shell\nDESCRIPTION: This shell command changes the current terminal working directory to the location where the project's primary files, including setup scripts and Python modules, reside. Users must substitute the placeholder path with their actual project location to ensure subsequent commands are executed in the correct context. This is a basic prerequisite step, and no external dependencies are required apart from shell access.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_langchain/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n\n```\n\n----------------------------------------\n\nTITLE: Importing Base Packages for Newsletter Summarizer\nDESCRIPTION: This code imports the essential libraries needed for the Newsletter Summarizer project. It includes imports for date handling, Composio tools, CrewAI components, and OpenAI integration.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom datetime import datetime, timedelta\n\nfrom composio_crewai import App, ComposioToolSet\nfrom crewai import Agent, Crew, Process, Task\nfrom dotenv import load_dotenv\nfrom langchain_openai import ChatOpenAI\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { handle } from \"hono/cloudflare-pages\";\nimport { CloudflareToolSet } from \"composio-core\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport dotenv from 'dotenv';\n\ndotenv.config();\n```\n\n----------------------------------------\n\nTITLE: Installing Composio and connecting GitHub\nDESCRIPTION: Install the Composio LangChain package and connect your GitHub account to enable agent interactions with GitHub functionalities. This setup is required before using Composio tools with Camel agents.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/camel/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composio LangChain package\npip install composio-camel\n\n# Connect your GitHub account\ncomposio-cli add github\n\n# View available applications you can connect with\ncomposio-cli show-apps\n```\n\n----------------------------------------\n\nTITLE: Subdomain Custom Field Definition in YAML\nDESCRIPTION: Configuration for a subdomain custom field with default value, commonly used for SaaS platforms\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/add-your-app.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n  - name: subdomain\n    display_name: Sub Domain\n    description: \"Your PostHog subdomain (e.g., 'app' for app.posthog.com).\"\n    type: string\n    required: true\n    default: \"app\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for Composio Project\nDESCRIPTION: This requirements file lists all Python libraries needed for the 'composio' project, specifying exact versions (e.g., aiohttp==3.11.9, fastapi==0.115.6, openai==1.56.1) to ensure reproducibility and prevent version conflicts. It includes dependencies for asynchronous operations, web frameworks, data handling, AI/ML integration, security, and various utilities. This file is intended to be used with package managers like pip (`pip install -r <filename>`) to install all listed dependencies.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/assignment-agent/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\naiohappyeyeballs==2.4.4\naiohttp==3.11.9\naiosignal==1.3.1\nannotated-types==0.7.0\nanyio==4.6.2.post1\nasync-timeout==5.0.1\nattrs==24.2.0\nbcrypt==4.2.1\ncertifi==2024.8.30\ncffi==1.17.1\ncharset-normalizer==3.4.0\nclick==8.1.7\ncomposio_autogen==0.5.50\ncomposio_core==0.5.50\ncryptography==44.0.0\ndiskcache==5.6.3\ndistro==1.9.0\ndocker==7.1.0\nexceptiongroup==1.2.2\nfastapi==0.115.6\nFLAML==2.2.0\nfrozenlist==1.5.0\nh11==0.14.0\nhttpcore==1.0.7\nhttpx==0.28.0\nidna==3.10\nimportlib_metadata==8.5.0\ninflection==0.5.1\njiter==0.8.0\njsonref==1.1.0\njsonschema==4.23.0\njsonschema-specifications==2024.10.1\nmarkdown-it-py==3.0.0\nmdurl==0.1.2\nmultidict==6.1.0\nnumpy==1.26.4\nopenai==1.56.1\npackaging==24.2\nparamiko==3.5.0\npropcache==0.2.1\npyautogen==0.4.1\npycparser==2.22\npydantic==2.9.2\npydantic_core==2.23.4\nPygments==2.18.0\nPyNaCl==1.5.0\npyperclip==1.9.0\nPysher==1.0.8\npython-dotenv==1.0.1\nreferencing==0.35.1\nregex==2024.11.6\nrequests==2.32.3\nrich==13.9.4\nrpds-py==0.22.1\nsemver==3.0.2\nsentry-sdk==2.19.0\nsniffio==1.3.1\nstarlette==0.41.3\ntermcolor==2.5.0\ntiktoken==0.8.0\ntqdm==4.67.1\ntyping_extensions==4.12.2\nurllib3==2.2.3\nuvicorn==0.32.1\nwebsocket-client==1.8.0\nyarl==1.18.3\nzipp==3.21.0\n```\n\n----------------------------------------\n\nTITLE: Starting the Slack Bot Agent with Langchain - Python\nDESCRIPTION: This command executes the Python script responsible for launching the Slack Bot Agent, leveraging Langchain for advanced agentic interactions. All dependencies must be installed and environment variables/secrets configured in the .env file, as specified by prior steps. The script is expected to initiate the bot, connect it to Slack via Composio, and enable it to monitor PRs and messages according to enabled triggers. The primary input is the Slack activity and PR events; the output is automated actionable agent responses.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_langchain/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/advanced_agents/slack_bot_agent/slack_agent_langchain/slack_agent_langchain.py\n\n```\n\n----------------------------------------\n\nTITLE: Executing the Camel agent with a GitHub starring task\nDESCRIPTION: Execute the configured Camel agent with a specific prompt to star a GitHub repository. This code creates a user message with instructions to star a repository, sends it to the agent, and displays the agent's response.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/camel/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprompt = (\n    \"I have created a new Github Repo,\"\n    \"Please star my github repository: camel-ai/camel\"\n)\nuser_msg = BaseMessage.make_user_message(role_name=\"User\", content=prompt)\nprint(Fore.YELLOW + f\"user prompt:\\n{prompt}\\n\")\n\nresponse = agent.step(user_msg)\nfor msg in response.msgs:\n    print_text_animated(Fore.GREEN + f\"Agent response:\\n{msg.content}\\n\")\n```\n\n----------------------------------------\n\nTITLE: Listing Python Project Dependencies\nDESCRIPTION: This snippet lists Python package dependencies required for the Composio project. It includes libraries for vector databases (chromadb), sentence embeddings (sentence-transformers), multimodal embeddings (open-clip-torch), Composio's CrewAI integration (composio-crewai), OpenAI integration via LangChain (langchain-openai), and the CrewAI framework itself (crewai). This format is commonly used in `requirements.txt` files.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_crewai/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nchromadb\nsentence-transformers\nopen-clip-torch\ncomposio-crewai\nlangchain-openai\ncrewai\n```\n\n----------------------------------------\n\nTITLE: Declaring Python Package Dependencies\nDESCRIPTION: This snippet lists Python packages required for the project, typically found in a requirements file (e.g., requirements.txt). It includes `composio-crewai` and `crewai` likely for agentic workflows, and `python-dotenv` for handling environment variables from a `.env` file. These dependencies are usually installed using a package manager like pip.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_crewai/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomposio-crewai\ncrewai\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Listing User Connections in Composio\nDESCRIPTION: Retrieves and displays all active connections associated with a specific user entity_id. This code shows how to get connection information including app name, connection ID, and status for each connection belonging to a user.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/connection.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nuser_identifier_from_my_app = \"user_7a9f3b_db_id\"  # Example\nentity = toolset.get_entity(id=user_identifier_from_my_app)\ntry:\n    connections = toolset.get_connected_accounts(entity_id=user_identifier_from_my_app) # Returns list of active connections\n    print(f\"Found {len(connections)} active connections for {entity.id}:\")\n    for conn in connections:\n        print(f\"- App: {conn.appName}, ID: {conn.id}, Status: {conn.status}\")\n    # You can also filter directly via the client:\n    # connections = toolset.client.connected_accounts.get(entity_ids=[entity.id], active=True)\nexcept Exception as e:\n    print(f\"Error fetching connections: {e}\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst entity = await toolset.getEntity(userIdentifierFromMyApp);\nconst connections = await toolset.connectedAccounts.list({\n    entityId: entity.id,\n}); // Returns list of active connections\nconsole.log(\n    `Found ${connections.items.length} active connections for ${entity.id}:`\n);\nconnections.items.forEach((conn) => {\n    console.log(`- App: ${conn.appName}, ID: ${conn.id}, Status: ${conn.status}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Specific Actions for Enhanced Security\nDESCRIPTION: Python code demonstrating how to limit the actions an agent can perform for enhanced security and operational focus. This example shows how to restrict the agent to only creating GitHub issues.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/crew_ai/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntoolsGithubCreateIssue = ComposioToolSet(actions=[Action.GITHUB_CREATE_ISSUE])\n```\n\n----------------------------------------\n\nTITLE: Retrieving GitHub Tools from Composio\nDESCRIPTION: Get all available tools for GitHub from Composio. This provides the LangChain agent with the capabilities to interact with GitHub. Specific actions can be filtered using usecase and tags.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntools = composio_toolset.get_tools(apps=[App.GITHUB])\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst tools = await toolset.getTools({ apps: [\"github\"] });\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pydantic-AI Agent\nDESCRIPTION: Creation and configuration of a Pydantic-AI agent with GitHub tools and system prompt.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/pydanticai/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Create an agent with the tools\nagent = Agent(\n    model=\"openai:gpt-4-turbo\",  # Using a known model name\n    tools=tools,\n    system_prompt=\"\"\"You are an AI agent that helps users interact with GitHub.\n    You can perform various GitHub operations using the available tools.\n    When given a task, analyze it and use the appropriate tool to complete it.\"\"\",\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for AI News Agent\nDESCRIPTION: Installs necessary Python packages for the AI news retrieval and summarization agent, including Composio, Langchain, and related dependencies.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/news_summary_agent.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install composio-langchain\n%pip install composio-core\n%pip install langchain-community\n%pip install huggingface_hub\n%pip install google-search-results\n%pip install python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Initiating OAuth Connection with Composio Auth\nDESCRIPTION: Shows how to initiate a connection between a user and an external application using Composio's ToolSet. The code handles creating an entity object and generating the OAuth redirect URL.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_openai import ComposioToolSet, Action # Or framework-specific ToolSet\n\ntoolset = ComposioToolSet()\nentity = toolset.get_entity(id=user_id_in_my_app) # Get Entity object\n\nprint(f\"Initiating GitHub connection for entity: {entity.id}\")\n# Initiate connection using the app's Integration and the user's Entity ID\nconnection_request = entity.initiate_connection(app_name=app_to_connect)\n\n# Composio returns a redirect URL for OAuth flows\nif connection_request.redirectUrl:\n    print(f\"Please direct the user to visit: {connection_request.redirectUrl}\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAIToolSet } from \"composio-core\"; // Or framework-specific ToolSet\n\n// Assume GITHUB_INTEGRATION_ID is fetched from config/env\nconst GITHUB_INTEGRATION_ID = \"int_xxxxxxxx...\";\nconst toolset = new OpenAIToolSet(); // Or other ToolSet\n\nasync function initiate() {\n    const entity = await toolset.getEntity(userIdInMyApp); // Get Entity object\n\n    console.log(`Initiating GitHub connection for entity: ${entity.id}`);\n    // Initiate connection using the app's Integration and the user's Entity ID\n    const connectionRequest = await entity.initiateConnection({\n        appName: appToConnect\n    });\n\n    // Composio returns a redirect URL for OAuth flows\n    if (connectionRequest.redirectUrl) {\n        console.log(`Please direct the user to visit: ${connectionRequest.redirectUrl}`);\n    }\n}\n\ninitiate();\n```\n\n----------------------------------------\n\nTITLE: GitHub Authentication Commands\nDESCRIPTION: CLI commands for logging into Composio and adding GitHub integration.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/together.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposio login\ncomposio add github\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Research Assistant in Python\nDESCRIPTION: This snippet shows the pip commands to install the necessary packages: composio_crewai, crewai, and langchain-openai. It also includes instructions for connecting a SerpAPI account using the Composio CLI.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/research_assistant.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install composio_crewai\n%pip install crewai\n%pip install langchain-openai\n```\n\nLANGUAGE: python\nCODE:\n```\n%composio login\n%composio add serpapi\n```\n\n----------------------------------------\n\nTITLE: Initializing Composio and Together AI Clients\nDESCRIPTION: Setup code for initializing the ComposioToolSet and Together AI client instances.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/together.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_togetherai import ComposioToolSet, App\nfrom together import Together\n\nclient = Together()\ntoolset = ComposioToolSet()\n```\n\n----------------------------------------\n\nTITLE: Running the Lead Outreach Agent Script - Shell\nDESCRIPTION: Launches the main agent logic using Python, executing the agent implementation for lead outreach with Composio and LlamaIndex. Required dependencies must be installed prior to this step, and the '.env' file should be configured with secrets. Outputs will depend on the logic in main.py, which typically include writing and sending personalized emails to leads.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/lead_outreach_agent/llamaindex/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/advanced_agents/lead_outreach_agent/llamaindex/main.py\n```\n\n----------------------------------------\n\nTITLE: Connecting the GitHub App to Composio\nDESCRIPTION: Command to add GitHub integration to your Composio setup. This enables your AI agents to interact with GitHub repositories, issues, and other GitHub features.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/welcome.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposio add github\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Crypto Kit Agent - ENV\nDESCRIPTION: This .env configuration sets API keys and credentials required for the Crypto Kit Agent to access Composio, OpenAI, and CDP services. Key names and values should be replaced by user-specific credentials or secrets. Without proper configuration, the agent will not be able to authenticate or operate correctly.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/trading_agent/README.md#2025-04-23_snippet_2\n\nLANGUAGE: env\nCODE:\n```\n COMPOSIO_API_KEY=COMPOSIO_API_KEY\n OPENAI_API_KEY=OPENAI_API_KEY\n CDP_API_KEY_NAME=API_KEY_NAME\n CDP_API_KEY_PRIVATE_KEY=API_KEY_PRIVATE_KEY\n```\n\n----------------------------------------\n\nTITLE: Navigate to Project Directory (Shell)\nDESCRIPTION: Changes the current working directory in the shell to the specific path where the project files for the Slack Bot Agent reside. This is a necessary step before executing subsequent setup or run commands.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_openai/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Importing Agno Agent\nDESCRIPTION: Importing the necessary Agent class from the Agno package to prepare the environment for LLM operations.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/agno/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom agno.agent import Agent\n```\n\n----------------------------------------\n\nTITLE: Verifying Task Completion Response\nDESCRIPTION: Shows the expected output format when checking the chat history after the agent successfully stars a GitHub repository. The response includes confirmation of the completed action.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/autogen/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n[{'content': 'I have starred the repository \"composio\" for you on GitHub under the account \"composiohq\".', 'role': 'user'}, \n{'content': '', 'role': 'assistant'}, {'content': 'TERMINATE', 'role': 'user'}]\n```\n\n----------------------------------------\n\nTITLE: Making setup.sh Executable - shell\nDESCRIPTION: This shell code snippet provides the command to modify file system permissions, making the 'setup.sh' script executable on Linux or macOS. This is sometimes necessary before running the setup script for the first time. It requires a Unix-like environment with appropriate user permissions. The command does not produce standard output but is a prerequisite for later script execution.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/human_in_the_loop_scheduler/crewai/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Specifying `openai` Python Dependency\nDESCRIPTION: Declares the official `openai` Python package as a dependency. This package provides the necessary client library to interact with the OpenAI API, essential for the '/composiohq/composio' project's integration. It must be installed via pip for API communication.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_openai/requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nopenai\n```\n\n----------------------------------------\n\nTITLE: Configuring Composio Tools for PraisonAI\nDESCRIPTION: Setup code for fetching and configuring GitHub tools provided by Composio in PraisonAI compatible format.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/praisonai.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncomposio_toolset = ComposioToolSet()\ntools = composio_toolset.get_tools(\n    actions=[Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER]\n)\ntool_section_str = composio_toolset.get_tools_section(tools)\nprint(tool_section_str)\n```\n\n----------------------------------------\n\nTITLE: Specifying Langchain Core Dependency (Python)\nDESCRIPTION: Specifies the core 'langchain' Python package as a project dependency. This library provides the fundamental components, abstractions, and chains for building applications powered by large language models.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_langchain/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlangchain\n```\n\n----------------------------------------\n\nTITLE: Running mypy Type Checker with Tox (Bash)\nDESCRIPTION: Executes the 'mypy' static type checker using the 'tox' automation tool and the configuration defined in 'tox.ini'. This helps catch type errors in the Python codebase before committing or creating a PR, ensuring type safety. It is mentioned both as part of the writing code process and as an individual command.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/development.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntox -e mypy\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages and Tool Setup\nDESCRIPTION: Commands for installing PraisonAI and Composio packages, logging into Composio, and connecting GitHub integration.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/praisonai.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install PraisonAI -q\npip install composio-praisonai\n# login to composio\ncomposio login\n# Connect your GitHub using command below, so agents can use it. \ncomposio add github\n# Check all different apps which you can connect with\ncomposio apps\n```\n\n----------------------------------------\n\nTITLE: Importing Required Packages for Composio and Smol Agents\nDESCRIPTION: Initial setup for importing necessary components from Composio and Smol Agents libraries.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/smolagent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dotenv import load_dotenv\nimport os\n\nfrom composio import Action\nfrom composio_smol import ComposioToolSet\nfrom smolagents import HfApiModel, CodeAgent\n```\n\n----------------------------------------\n\nTITLE: Initializing Composio ToolSet in TypeScript\nDESCRIPTION: Code to initialize Composio ToolSet and OpenAI client in TypeScript. The ToolSet automatically uses the COMPOSIO_API_KEY from environment variables.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/quickstart.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAIToolSet } from \"composio-core\";\nimport { OpenAI } from \"openai\";\n\n// Initialize Composio ToolSet\n// It automatically picks up COMPOSIO_API_KEY from env vars\n// Uses the 'default' entity_id if not specified\nconst toolset = new OpenAIToolSet();\nconst client = new OpenAI();\n```\n\n----------------------------------------\n\nTITLE: Initiating GitHub Connection Programmatically using Python\nDESCRIPTION: Programmatically initiates the connection process for the GitHub app using the `ComposioToolSet` instance. It retrieves a redirect URL which the user must visit to authenticate and authorize the connection. Requires `App` enum from `composio.client.enums`.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/livekit.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Assuming App needs to be imported, e.g.:\n# from composio.client.enums import App \n\nrequest = toolset.initiate_connection(app=App.GITHUB)\nprint(f\"Open this URL to authenticate: {request.redirectUrl}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Newsletter Summarizer\nDESCRIPTION: This snippet shows how to install the necessary packages for the Newsletter Summarizer project using pip for Python and pnpm for JavaScript. It also mentions creating a .env file for API keys.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/newsletter-summarizer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install composio-crewai langchain-openai\n```\n\nLANGUAGE: javascript\nCODE:\n```\npnpm add hono composio-core dotenv @langchain/openai\n```\n\n----------------------------------------\n\nTITLE: Refreshing OAuth Connections\nDESCRIPTION: Demonstrates how to refresh or reinitiate OAuth connections when they become invalid or expire, including error handling and re-authentication flows.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/oauth.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Create the connection using the same parameters.\nuser_id = \"alice\" \nentity = toolset.get_entity(user_id)\nconnection_req = entity.initiate_connection(\n    app_name=App.GMAIL,\n    entity_id=user_id,\n    # You can use integration_id as well\n    # integration_id=GMAIL_INTEGRATION_ID,\n    # Add redirect_url if needed for your app flow\n    # redirect_url=\"https://yourapp.com/post-auth\" \n)\n\nprint(f\"Please re-authenticate your Gmail account: {connection_req.redirectUrl}\")\nprint(f\"Initial status: {connection_req.connectionStatus}\") # Will likely be INITIATED\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst userId = \"alice\";\nconst entity = await toolset.getEntity(userId);\n\nconst connectionReq = await toolset.connectedAccounts.reinitiateConnection({\n  connectedAccountId: \"00000000-0000-0000-0000-000000000000\",\n  data: {},\n  redirectUri: \"https://example.com/callback\",\n});\n\n// Alternatively you can create a new connection altogether\n\nconst integrationId = GMAIL_INTEGRATION_ID; \nconst connectionReq = await entity.initiateConnection({\n    integrationId: integrationId,\n    // appName: \"gmail\"\n});\n\nconsole.log(`Please re-authenticate your Gmail account: ${connectionReq.redirectUrl}`);\nconsole.log(`Initial status: ${connectionReq.connectionStatus}`); // Will likely be INITIATED\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://backend.composio.dev/api/v1/connectedAccounts/<connectedAccountId>/reinitiate' \\\n--header 'x-api-key: <api_key>' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"data\": {}  # Data stays empty\n}'\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for Composio Gemini Project\nDESCRIPTION: This snippet lists two Python packages required for the Composio Gemini project: 'composio-gemini' which is likely the main package, and 'python-dotenv' which is commonly used to load environment variables from .env files.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/agentic_rag/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomposio-gemini\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Initializing Environment and Julep Client\nDESCRIPTION: Setup code for the development environment, including importing libraries, loading environment variables, and configuring the Julep client with necessary parameters.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/julep/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport textwrap\nfrom julep import Client\nfrom dotenv import load_dotenv\n\n\nload_dotenv()\n\napi_key = os.environ[\"JULEP_API_KEY\"]\nbase_url = os.environ[\"JULEP_API_URL\"]\n# openai_api_key = os.environ[\"OPENAI_API_KEY\"]\n\nclient = Client(api_key=api_key, base_url=base_url)\n\n\n\nname = \"Jessica\"\nabout = \"Jessica is a forward-thinking tech entrepreneur with a sharp eye for disruptive technologies. She excels in identifying and nurturing innovative tech startups, with a particular interest in sustainability and AI.\"\ndefault_settings = {\n    \"temperature\": 0.7,\n    \"top_p\": 1,\n    \"min_p\": 0.01,\n    \"presence_penalty\": 0,\n    \"frequency_penalty\": 0,\n    \"length_penalty\": 1.0,\n    \"max_tokens\": 150,\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating GitHub Connection Programmatically with Composio (Python)\nDESCRIPTION: Provides a programmatic alternative to the CLI method for connecting GitHub. It uses the `toolset.initiate_connection` method from the `composio-gemini` library to start the OAuth flow for the GitHub app. The function returns an object containing a `redirectUrl` which the user must visit in their browser to authorize the connection.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/gemini.mdx#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nrequest = toolset.initiate_connection(app=App.GITHUB)\nprint(f\"Open this URL to authenticate: {request.redirectUrl}\")\n```\n\n----------------------------------------\n\nTITLE: Running the Main Python Script for the Market Research Agent (Shell)\nDESCRIPTION: This shell command runs the main.py script, launching the Market Research agent using Python. The script is assumed to exist at the specified relative path, and requires any dependencies specified in requirements.txt to be installed. The command expects Python to be available and may require prior configuration of environment variables (such as those in the .env file). The output and operation are defined by main.py's internal logic.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/sales_kit/market_research_agent/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/advanced_agents/sales_kit/market_research_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Changing Project Directory - Shell\nDESCRIPTION: This snippet demonstrates how to navigate to the project directory containing necessary setup scripts and resources for the Slack Bot agent. It requires users to replace 'path/to/project/directory' with the actual path relative to their environment. No external dependencies are needed beyond a Unix-like shell environment. The input is the destination directory, and the output is a changed working directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Defining a Composio Local Action Class in Python\nDESCRIPTION: Provides a template for defining an action within a custom local tool (`actions/<action_name>.py`). It involves creating Pydantic `BaseModel` classes for request and response schemas, inheriting the main action class from `composio.tools.local.base.Action`, setting metadata like `display_name`, `_tags`, and `_tool_name`, and implementing the core logic in the `execute` method.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/adding-local-tool.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel, Field\nfrom composio.tools.local.base import Action\n\nclass <RequestSchema>(BaseModel):\n    # Define input schema for your action\n    # Example:\n    # text: str = Field(..., description=\"Input text for the action\")\n\nclass <ResponseSchema>(BaseModel):\n    # Define output schema for your action\n    # Example:\n    # result: str = Field(..., description=\"Result of the action\")\n\nclass <ActionName>(Action[<RequestSchema>, <ResponseSchema>]):\n    \"\"\"\n    Description of your action.\n    \"\"\"\n\n    display_name = \"Friendly name of your action\"\n    _request_schema = <RequestSchema>\n    _response_schema = <ResponseSchema>\n    _tags = [\"tag1\", \"tag2\"]  # Optional tags to categorize your action\n    _tool_name = \"<tool_name>\"  # Tool name, same as directory name\n\n    def execute(\n        self, request_data: <RequestSchema>, authorisation_data: dict = {}\n    ) -> <ResponseSchema>:\n        # Implement logic to process input and return output\n        # Example:\n        # response_data = {\"result\": \"Processed text: \" + request_data.text}\n        return {\"execution_details\": {\"executed\": True}, \"response_data\": response_data}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Environment Variables\nDESCRIPTION: Example of adding custom environment variables to the workspace configuration.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/swe/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncomposio_toolset = ComposioToolSet(\n    workspace_config=WorkspaceType.Docker(\n        environment={\n            \"SOME_API_TOKEN\": \"<SOME_API_TOKEN>\",\n        }\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Install the necessary packages including composio-core and wrangler using npm.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/cloudflare.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install composio-core -g wrangler fs\n```\n\n----------------------------------------\n\nTITLE: Setting File Permissions for Setup Script in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems before running it.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/presentation_agent/langgraph/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running the Agentic RAG Python Script\nDESCRIPTION: Command to execute the main Python script that implements the website-to-prompt RAG functionality.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/agentic_rag/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/quickstarters/website_to_prompt/main.py\n```\n\n----------------------------------------\n\nTITLE: Initializing Composio ToolSet for GitHub Interactions\nDESCRIPTION: Python code to initialize the Composio toolset for interacting with GitHub. This sets up the necessary tools for the CrewAI agent to perform GitHub actions.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/crew_ai/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_crewai import ComposioToolSet, Action, App\n\n# Initialize the toolset with GitHub application\ntools = ComposioToolSet(apps=[App.GITHUB])\n```\n\n----------------------------------------\n\nTITLE: Specifying Langchain OpenAI Dependency (Python)\nDESCRIPTION: Specifies the 'langchain-openai' Python package as a project dependency. This package provides specific integrations for using OpenAI's models (like GPT-3.5, GPT-4) and services within the Langchain framework.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_langchain/requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlangchain-openai\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems. This is required before running the setup script.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/rag_agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Composio Claude Package\nDESCRIPTION: Installation command for the composio_claude package which enables integration between Composio and Anthropic's Claude models.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/anthropic.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install composio_claude\n```\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Handling Tool Execution with Composio\nDESCRIPTION: Code for handling tool execution responses through Composio, including error handling and result processing.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/introduction.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nexecution_result = None\nresponse_message = response.choices[0].message\n\nif response_message.tool_calls:\n    print(\"LLM requested tool use. Executing via Composio...\")\n    # Composio handles auth, API call execution, and returns the result\n    execution_result = toolset.handle_tool_calls(response)\n    print(\"Execution Result from Composio:\", execution_result)\nelse:\n    print(\"LLM responded directly (no tool used):\", response_message.content)\n\n# Now 'execution_result' holds the data returned by the GitHub API call\n# You could parse it or feed it back to the LLM for a final summary.\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlet executionResult: any = null;\nconst responseMessage = response.choices[0].message;\n\nif (responseMessage.tool_calls) {\n    console.log(\"LLM requested tool use. Executing via Composio...\");\n    // Composio handles auth, API call execution, and returns the result\n    executionResult = await toolset.handleToolCall(response);\n    console.log(\"Execution Result from Composio:\", executionResult);\n} else {\n    console.log(\"LLM responded directly (no tool used):\", responseMessage.content);\n}\n\n// Now 'executionResult' holds the data returned by the GitHub API call\n// You could parse it or feed it back to the LLM for a final summary.\n```\n\n----------------------------------------\n\nTITLE: Initiating GitHub Connection in Python\nDESCRIPTION: Python code to initiate GitHub connection and get authentication URL.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/together.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrequest = toolset.initiate_connection(app=App.GITHUB)\nprint(f\"Open this URL to authenticate: {request.redirectUrl}\")\n```\n\n----------------------------------------\n\nTITLE: Executing PraisonAI Agent Tasks\nDESCRIPTION: Final implementation code for initializing and running the PraisonAI agent to execute the configured tasks.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/praisonai.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Create a PraisonAI instance with the agent_yaml content\npraison_ai = PraisonAI(agent_yaml=agent_yaml)\n\n# Run PraisonAI\nresult = praison_ai.main()\n\n# Print the result\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Installing Composio LangChain and GitHub Setup\nDESCRIPTION: Commands for installing the Composio PhiData package and setting up GitHub account connectivity for agent operations\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/phidata/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composio LangChain package\npip install composio-phidata\n\n# Connect your GitHub account\ncomposio-cli add github\n\n# View available applications you can connect with\ncomposio-cli show-apps\n```\n\n----------------------------------------\n\nTITLE: Installing Composio and GitHub Setup\nDESCRIPTION: Commands for installing the Composio LangChain package and connecting GitHub account for agent functionality\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/praisonai/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composio LangChain package\npip install composio-praisonai\n\n# Connect your GitHub account\ncomposio-cli add github\n\n# View available applications you can connect with\ncomposio-cli show-apps\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for SWEBench-Agent-v2\nDESCRIPTION: Command to install the necessary Python packages including swekit and composio-core using pip.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/swe/agent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U swekit composio-core\n```\n\n----------------------------------------\n\nTITLE: Installing Composio and Connecting GitHub Account via Command Line\nDESCRIPTION: Command line instructions for installing the Composio LangChain package, connecting a GitHub account, and viewing available application integrations. These steps establish the necessary environment for enabling AI agents to interact with GitHub.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/openai/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composio LangChain package\npip install composio-openai\n\n# Connect your GitHub account\ncomposio-cli add github\n\n# View available applications you can connect with\ncomposio-cli show-apps\n```\n\n----------------------------------------\n\nTITLE: Connecting to GitHub Account through Composio\nDESCRIPTION: Authenticate and connect to your GitHub account using Composio. This can be done through the CLI with composio login and composio add github commands, or programmatically using the Composio API in Python or JavaScript.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposio login\ncomposio add github\n```\n\nLANGUAGE: python\nCODE:\n```\nrequest = composio_toolset.initiate_connection(app=App.GITHUB)\nprint(f\"Open this URL to authenticate: {request.redirectUrl}\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst connection = await toolset.connectedAccounts.initiate({appName: \"github\"})\nconsole.log(`Open this URL to authenticate: ${connection.redirectUrl}`);\n```\n\n----------------------------------------\n\nTITLE: Running Human-in-the-Loop Scheduler Agent Main Script - python\nDESCRIPTION: This shell command runs the core Python application responsible for executing the human-in-the-loop scheduler agent workflow. It assumes all dependencies have been installed and environment variables are configured in a '.env' file. The Python script coordinates agentic interactions and performs review tasks upon receiving new pull requests. Correct pathing and configuration are essential for successful execution. Output is application-dependent and often involves logging or agent communication.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/human_in_the_loop_scheduler/crewai/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npython cookbook/examples/advanced_agents/human_in_the_loop_scheduler/crewai/main.py\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Composio CLI\nDESCRIPTION: Command to log in to Composio, which opens a browser window for authentication and generates an API key.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposio login\n```\n\n----------------------------------------\n\nTITLE: Exporting Components from Integration Module (Python)\nDESCRIPTION: The __init__.py snippet configures the integration package's public API by importing and exposing essential types from Composio and the new toolset class. Dependencies: composio core SDK and the new toolset implementation. This makes Action, App, Tag, Trigger, WorkspaceType, action, and ComposioToolSet importable at the package level. Input: none when executed. Output: defines the __all__ tuple, ensuring correct symbols are exported.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom composio import Action, App, Tag, Trigger, WorkspaceType, action\n\nfrom composio_yourframework.toolset import ComposioToolSet\n\n__all__ = (\n    \"Action\",\n    \"App\",\n    \"Tag\",\n    \"Trigger\",\n    \"WorkspaceType\",\n    \"action\",\n    \"ComposioToolSet\",\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Environment Setup Script - Shell\nDESCRIPTION: Runs the setup.sh file to install dependencies and configure the runtime environment for the DeepSeek research agent. This script should handle all necessary installations and preparatory steps, but requires any secrets to be later supplied in the .env file as outlined in the guide. Users must ensure the script is both present and executable in the current working directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/deepseek_research/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running the Application using Node.js (Bash)\nDESCRIPTION: This Bash command executes the main application script `demo.mjs` using the Node.js runtime. This initiates the Meeting Brief Agent, which relies on the previously set environment variables and installed dependencies to function correctly. Requires Node.js to be installed.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/meeting_brief_agent/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode demo.mjs\n```\n\n----------------------------------------\n\nTITLE: Installing Composio and GitHub Setup\nDESCRIPTION: Commands for installing the Composio LangChain package and connecting GitHub account for automation capabilities.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/togetherai/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composio LangChain package\npip install composio-togetherai\n\n# Connect your GitHub account\ncomposio add github\n\n# View available applications you can connect with\ncomposio apps\n```\n\n----------------------------------------\n\nTITLE: Making the Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable in Linux or macOS environments. This is needed before running the script.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/transcript_insight_generator/langgraph/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Initializing ComposioToolSet and Importing Libraries in Python\nDESCRIPTION: Imports necessary classes from `composio_livekit`, `livekit`, and various LiveKit plugins (Deepgram, OpenAI, Cartesia, etc.). It then initializes an instance of `ComposioToolSet`, which serves as the entry point for accessing Composio tools within the application.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/livekit.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_livekit import Action, ComposioToolSet\nfrom livekit import agents\nfrom livekit.agents.voice import Agent, AgentSession, room_io\nfrom livekit.plugins import (\n    cartesia,\n    deepgram,\n    noise_cancellation,\n    openai,\n    silero,\n    turn_detector,\n)\n\ntoolset = ComposioToolSet()\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory - Shell\nDESCRIPTION: Changes the current working directory to the top-level project folder, where all setup and execution scripts are stored. No dependencies required beyond standard shell; users must specify their own project path. The 'cd' command expects an existing directory path as input and sets that as the shell's working directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_llama_index/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Importing PhiData Assistant Base Package\nDESCRIPTION: Basic import statement for the PhiData Assistant class required for agent operations\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/phidata/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom phi.assistant import Assistant\n```\n\n----------------------------------------\n\nTITLE: Validating Tool Execution Response\nDESCRIPTION: Code to validate the response from the tool execution and display results.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/togetherai/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresult = toolset.handle_tool_calls(response)\npprint(result)\n```\n\n----------------------------------------\n\nTITLE: Initiating GitHub Connection in Python\nDESCRIPTION: Python code to establish a connection with GitHub through Composio. Generates a redirect URL for user authentication.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/litellm.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrequest = toolset.initiate_connection(app=App.GITHUB)\nprint(f\"Open this URL to authenticate: {request.redirectUrl}\")\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Tools\nDESCRIPTION: Code to retrieve all available GitHub tools from Composio toolset.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/together.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntools = toolset.get_tools(apps=[App.GITHUB])\n```\n\n----------------------------------------\n\nTITLE: Connecting GitHub Account using Composio CLI\nDESCRIPTION: This snippet shows how to connect a GitHub account using the Composio CLI. It requires an active GitHub Integration.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/letta.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposio login \ncomposio add github\n```\n\n----------------------------------------\n\nTITLE: Implementing Decision Function\nDESCRIPTION: Define routing logic for the workflow based on tool calls\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langgraph.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef should_continue(state: MessagesState) -> Literal[\"tools\", \"__end__\"]:\n    \"\"\"\n    Determine if the conversation should continue to tools or end\n    Returns:\n        - \"tools\" if the last message contains tool calls\n        - \"__end__\" otherwise\n    \"\"\"\n    messages = state[\"messages\"]\n    last_message = messages[-1]\n    if last_message.tool_calls:\n        return \"tools\"\n    return \"__end__\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nasync function shouldContinue(state) {\n    const { messages } = state;\n    const lastMessage = messages[messages.length - 1];\n\n    if (lastMessage.additional_kwargs.tool_calls) {\n        return \"tools\";\n    } else {\n        return END;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Composio Langchain Dependency (Python)\nDESCRIPTION: Specifies the 'composio-langchain' Python package as a project dependency. This package likely contains custom tools, agents, or integrations developed by Composio to facilitate interaction between the Composio platform and the Langchain framework.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_langchain/requirements.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncomposio-langchain\n```\n\n----------------------------------------\n\nTITLE: Installing Composio Autogen Package\nDESCRIPTION: Command to install the required Composio-Autogen integration package using pip\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/autogen.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-autogen\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific GitHub Action Tool using ComposioToolSet in Python\nDESCRIPTION: Retrieves the specific Composio tool corresponding to the 'Star a Repository for the Authenticated User' action on GitHub. The `get_tools` method filters available tools based on the provided action enum (`Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER`), making it available for the LiveKit agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/livekit.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntools = toolset.get_tools(\n    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]\n)\n```\n\n----------------------------------------\n\nTITLE: Instance URL Custom Field Definition in YAML\nDESCRIPTION: Configuration for an instance URL custom field, typically used for platform-specific instances like Salesforce\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/add-your-app.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n  - name: instanceUrl\n    display_name: Instance URL\n    description: \"The base URL for your instance, used for API requests.\"\n    type: string\n    required: true\n    expected_from_customer: true\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in .env File (bash)\nDESCRIPTION: This snippet illustrates the required format and content for a `.env` file within the project directory. It defines the `COMPOSIO_API_KEY` and `OPENAI_API_KEY` environment variables. Users must replace the placeholder values (`YOUR_COMPOSIO_API_KEY`, `YOUR_OPENAI_API_KEY`) with their actual API keys for the application to authenticate with Composio and OpenAI services.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/scheduling-agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCOMPOSIO_API_KEY=YOUR_COMPOSIO_API_KEY\nOPENAI_API_KEY=YOUR_OPENAI_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Required Wrangler Configuration\nDESCRIPTION: Essential configuration settings needed in wrangler.toml file including node compatibility and API keys\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/cloudflare-openai/README.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nnode_compat = true\ncompatibility_date = \"2024-07-01\"\n```\n\n----------------------------------------\n\nTITLE: Modifying JSON Schema for Additional Properties Key (Python)\nDESCRIPTION: Example solution for adapting schema formats. This snippet copies a parameters schema and adds 'additionalProperties': False to comply with OpenAI-compatible requirements. Dependencies: standard Python dict API. Inputs: schema_params dictionary. Outputs: modified_schema dict with extra key. Limit: assumes input schema allows dict copy and direct assignment.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Adding additionalProperties: false for OpenAI-compatible frameworks\nmodified_schema = schema_params.copy()\nmodified_schema[\"additionalProperties\"] = False\n```\n\n----------------------------------------\n\nTITLE: Running setup.sh to Install Dependencies - Shell\nDESCRIPTION: Executes the 'setup.sh' script to set up the environment and install all necessary dependencies for the Newsletter Summarizer project. Assumes the script is present in the working directory and possibly references other files like requirements.txt. Limited to POSIX environments; files referenced in the script must be present.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_autogen/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory using Shell\nDESCRIPTION: This command changes the current working directory to the specific path where the Indie Hacker Agent project files (`setup.sh`, `main.py`, `requirements.txt`, `README.md`) are located. Replace `path/to/project/directory` with the actual path.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/indie_hacker_agent/langgraph/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Running Twitter Posting Agent Script in Shell\nDESCRIPTION: This command executes the main Python script for the Twitter Posting Agent, which automates content posting on Twitter using Composio and ChatGPT.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/twitter_posting_agent/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/advanced_agents/twitter_posting_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Initializing Composio ToolSet and Importing Dependencies\nDESCRIPTION: Sets up the basic environment by importing required libraries and initializing the ComposioToolSet. Includes environment variable loading for configuration.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/smolagents.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom composio_smol import ComposioToolSet, Action, App\nfrom smolagents import CodeAgent, HfApiModel\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\ncomposio_toolset = ComposioToolSet()\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Changes the current working directory to the specified project path using the 'cd' command in a shell environment. This is a prerequisite step before running setup or execution scripts.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Server and Ngrok for Local Testing in Bash\nDESCRIPTION: Provides shell commands for local development. The first command (`python webhook.py`) executes the Python script containing the FastAPI application, starting the web server. The second command (`ngrok http 8000`) uses the ngrok tool to create a secure public URL that tunnels traffic to the local server running on port 8000, necessary for receiving webhooks from external services like Slack during development.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/triggers/triggers.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Start your FastAPI server\npython webhook.py\n\n# In another terminal, start ngrok\nngrok http 8000\n```\n\n----------------------------------------\n\nTITLE: Initializing Composio Toolset for Code Interpreter\nDESCRIPTION: Sets up the Composio toolset to access code interpreter functionality. In Python, it retrieves tools from the Code Interpreter app, while in JavaScript it specifies the code execution action.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/code-execution-agent.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\n\n# Set up Composio tools\ncomposio_toolset = ComposioToolSet()\n\n# Get tools from the Code Interpreter app\ntools = composio_toolset.get_tools(apps=[App.CODEINTERPRETER])\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Set up Composio tools\nconst composioToolset = new LangchainToolSet({\n    apiKey: process.env.COMPOSIO_API_KEY\n});\n\n// Get specific tools for code execution\nconst tools = await composioToolset.getTools({\n    actions: [\"codeinterpreter_execute_code\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Executing the AI Agent and Logging Results\nDESCRIPTION: Executes the previously defined AI agent and logs the result text to the console. This final step completes the process of starring a GitHub repository using Composio with Vercel AI SDK.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/vercel.mdx#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(output.text);\n```\n\n----------------------------------------\n\nTITLE: Handling Tool Response\nDESCRIPTION: Processes the response from the AI model using Composio toolset\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/google.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresult = composio_toolset.handle_response(response)\nprint(\"Function call result:\")\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Installing Composio LiveKit Package\nDESCRIPTION: Command to install the composio_livekit package using pip package manager.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/livekit/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio_livekit\n```\n\n----------------------------------------\n\nTITLE: Creating Slack Integration via CLI\nDESCRIPTION: Command line example for adding a Slack integration using Composio CLI with default settings.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/integration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Add a Slack integration using defaults\ncomposio add slack\n```\n\nLANGUAGE: bash\nCODE:\n```\n# ... authentication steps ...\n# ✔ slack added successfully with ID: int_abc123def456...\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages\nDESCRIPTION: Installation commands for required packages in both Python and TypeScript environments\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langgraph.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-langgraph\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @langchain/langgraph\nnpm i composio-core \nnpm i @langchain/openai\nnpm i @langchain/core\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages and Connecting GitHub\nDESCRIPTION: Instructions for installing necessary packages (camel-ai and composio-camel) and connecting GitHub account for agent functionality.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/camelai.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install camel-ai\npip install composio-camel -U\n#  Connect your GitHub so agents can use it. \ncomposio add github\n#  Check all different apps which you can connect with\ncomposio apps\n```\n\n----------------------------------------\n\nTITLE: Connecting to GitHub Account\nDESCRIPTION: Two methods for connecting to GitHub: CLI commands and Python code to initiate connection and get authentication URL.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/agno.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposio login \ncomposio add github\n```\n\nLANGUAGE: python\nCODE:\n```\nrequest = toolset.initiate_connection(app=App.GITHUB)\nprint(f\"Open this URL to authenticate: {request.redirectUrl}\")\n```\n\n----------------------------------------\n\nTITLE: Running the Main PR Agent Python Script via Shell\nDESCRIPTION: Executes the main Python script 'main.py' for the PR agent, specifically the Langchain example, using the Python interpreter. This command starts the agent application after successful setup and configuration (filling the '.env' file).\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_langchain/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/pr_agent_langchain/main.py\n```\n\n----------------------------------------\n\nTITLE: Handling Claude's Tool Call Response\nDESCRIPTION: Processes the response from Claude's tool calls and validates the successful execution of the GitHub repository starring action.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/claude/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresult = toolset.handle_tool_calls(response)\npprint(result)\n```\n\n----------------------------------------\n\nTITLE: Initializing Language Model and Tools\nDESCRIPTION: Setting up the OpenAI language model and configuring Composio tools for RAG operations\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\n\n# Initialize the language model\nllm = ChatOpenAI(model=\"gpt-4o\")\n\n# Set up Composio tools\ncomposio_toolset = ComposioToolSet()\n\n# Get tools for RAG operations\nrag_tools = composio_toolset.get_tools(apps=[App.RAG])\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize the language model\nconst llm = new ChatOpenAI({ model: \"gpt-4-turbo\" });\n\n// Setup Composio tools with workspace environment\nconst composioToolset = new LangchainToolSet({\n    apiKey: process.env.COMPOSIO_API_KEY,\n    workspace: {\n        type: \"docker\"\n    }\n});\n\n// Get tools for RAG operations\nconst getTools = async () => {\n    return await composioToolset.getTools({\n        actions: [\"rag_add_content\", \"rag_get_content\", \"rag_query\"]\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory - Shell\nDESCRIPTION: This snippet demonstrates how to change the working directory to the project directory containing setup and application files using the `cd` shell command. Its purpose is to ensure all subsequent file operations and script executions are performed in the designated location. The user must replace `path/to/project/directory` with their actual project path; the output is the migration of the current shell context to the new directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/AI_PM_agent/llamaindex/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Deep Researcher Agent\nDESCRIPTION: Command to install required npm packages including AI SDK, Composio core, and other utility packages using pnpm package manager.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/deep_researcher/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @ai-sdk/openai ai zod composio-core chalk dotenv figlet gradient-string ora\n```\n\n----------------------------------------\n\nTITLE: Running Main Python Application (Shell)\nDESCRIPTION: Executes the `main.py` script using the Python interpreter. This command starts the Game Builder Agent application after the environment has been successfully set up by the `setup.sh` script.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/openai/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages\nDESCRIPTION: Installation commands for required packages including composio-crewai, langchain-openai for Python and composio-core, dotenv for JavaScript\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/rag-agent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install composio-crewai langchain-openai\n```\n\nLANGUAGE: javascript\nCODE:\n```\npnpm add composio-core dotenv @langchain/openai langchain\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory (Shell)\nDESCRIPTION: Changes the current working directory to the specified project directory. This directory should contain the required files like `setup.sh`, `main.py`, `requirements.txt`, and `README.md`. Replace `path/to/project/directory` with the actual path.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/lead_generator_agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Importing Base Packages and Initializing Language Model\nDESCRIPTION: Python code to import necessary packages for CrewAI and set up the language model using OpenAI's ChatOpenAI. Requires an OpenAI API key.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/crew_ai/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom crewai import Agent, Task\nfrom langchain_openai import ChatOpenAI\n\n# Initialize the language model with your OpenAI API key\nllm = ChatOpenAI(openai_api_key=\"sk-<OPENAI KEY>\")\n```\n\n----------------------------------------\n\nTITLE: Running flake8 Linter with Tox (Bash)\nDESCRIPTION: Runs the 'flake8' linter using the 'tox' automation tool via the 'flake8' environment defined in 'tox.ini'. This checks for Python style guide enforcement (PEP 8), programming errors, and code complexity.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/development.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntox -e flake8\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Connection in Python\nDESCRIPTION: Python implementation for initiating an OAuth connection with custom redirect URL and authentication settings.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/white-labelling.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nuser_id = \"00000000-0000-0000-0000-000000000000\"\nentity = toolset.get_entity(user_id)\n\nthread_id = \"12345678\"\nredirect_url = \"https://yourapp.com/thread/{thread_id}\" # Example redirect URL\n\nconn_req = entity.initiate_connection(\n    app_name=App.GOOGLECALENDAR,\n    auth_mode=\"OAUTH2\",\n    use_composio_auth=False,\n    redirect_url=redirect_url\n)\n\nprint(conn_req.redirect_url)\n```\n\n----------------------------------------\n\nTITLE: Validating Execution Response\nDESCRIPTION: This snippet demonstrates how to validate the response from the model execution, ensuring that the intended task has been successfully completed.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/google/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresult = composio_toolset.handle_response(response)\nprint(\"Function call result:\", result)\n```\n\n----------------------------------------\n\nTITLE: Installing Experimental V3 Python SDK via pip\nDESCRIPTION: Command to install the experimental V3 Python SDK for Composio using pip package manager. This SDK provides foundational access to the V3 API endpoints.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/changelogs/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-client\n```\n\n----------------------------------------\n\nTITLE: Importing Required Packages for AI News Agent\nDESCRIPTION: Imports necessary Python modules and classes from Langchain, Hugging Face, and Composio for building the AI news agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/news_summary_agent.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_community.document_loaders import WebBaseLoader\n#To use Open Source LLMs from huggingface\nfrom langchain_community.llms import HuggingFaceEndpoint\nfrom langchain.chat_models import ChatHuggingFace\n#Langchain Utilities for Agents\nfrom langchain.agents import AgentExecutor, load_tools\nfrom langchain.agents.format_scratchpad import format_log_to_str\nfrom langchain.agents.output_parsers import (\n    ReActJsonSingleInputOutputParser,\n)\nfrom langchain import hub\nfrom langchain.tools.render import render_text_description\n#Importing Composio\nfrom composio_langchain import ComposioToolSet, Action, App\nimport os\nimport dotenv\n```\n\n----------------------------------------\n\nTITLE: Installing Composio and LiteLLM Packages with pip\nDESCRIPTION: Installs the required Python packages for integrating Composio with LiteLLM.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/litellm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio_openai litellm\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Composio with Vercel AI SDK\nDESCRIPTION: Installs the necessary npm packages to use Composio with Vercel AI SDK including @ai-sdk/openai for OpenAI integration, composio-core for Composio functionality, and ai for text generation capabilities.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/vercel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ai-sdk/openai composio-core ai\n```\n\n----------------------------------------\n\nTITLE: Configuring the IBM Agent with WatsonX\nDESCRIPTION: Set up the IBM agent with specific decoding parameters, connect to IBM Cloud, and bind the Composio tools to the agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/ibm.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nparameters = {\n\"decoding_method\": \"sample\",\n\"max_new_tokens\": 100,\n\"min_new_tokens\": 1,\n\"temperature\": 0.5,\n\"top_k\": 50,\n\"top_p\": 1,\n}\nurl = input('Add your IBM Cloud URL here: ')\nproject_id = input('Add your IBM Project ID here: ')\nwatsonx_llm = ChatWatsonx(\nmodel_id = 'ibm/granite-3-8b-instruct',\nurl = url, \nproject_id = project_id,\n)   \n\nif not url or not project_id:\n    raise ValueError(\"IBM Cloud URL and Project ID must be provided\")\n\nllm_with_tools = watsonx_llm.bind_tools(tools)\n\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Python Package Dependencies for Composio\nDESCRIPTION: This lists the required Python packages for the Composio project. It includes libraries for vector databases (`chromadb`), sentence embeddings (`sentence-transformers`), multimodal embeddings (`open-clip-torch`), and language agent frameworks (`composio-langgraph`, `langgraph`, `langchain-openai`). These dependencies need to be installed (e.g., using `pip install -r requirements.txt` if this were in a file) for the project to function correctly.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_langgraph/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nchromadb\nsentence-transformers\nopen-clip-torch\ncomposio-langgraph\nlanggraph\nlangchain-openai\n```\n\n----------------------------------------\n\nTITLE: Installing Composio and IBM Packages and Connecting GitHub\nDESCRIPTION: Install the necessary packages for Composio and IBM integration, and connect GitHub to enable agents to use GitHub functionalities.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/ibm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-langchain\npip install langchain-ibm\n\n#  Connect your GitHub so agents can use it. \ncomposio add github\n#  Check all different apps which you can connect with\ncomposio apps\n```\n\n----------------------------------------\n\nTITLE: Running the Main Application with Streamlit - Bash\nDESCRIPTION: This snippet shows the command to launch the main Podcast Summarizer application using Streamlit. Upon execution, it starts the web-based UI that allows users to input YouTube URLs and Slack channels for summarization. Streamlit must be installed, and the user should be in the project directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Podcast_summarizer_Agents/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run main.py\n```\n\n----------------------------------------\n\nTITLE: Running Main Python Agent Script (Shell)\nDESCRIPTION: Executes the main Python script (`main.py`) for the Lead Outreach Agent using the `python` interpreter. This command starts the agent process, which leverages Composio, CrewAI, and ChatGPT to perform lead outreach tasks. The `.env` file should be configured with secrets before running this.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/lead_outreach_agent/crewai/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/advanced_agents/lead_outreach_agent/crewai/main.py\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Workspace Extension\nDESCRIPTION: Command to install the Docker workspace extension for Composio\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/workspaces/workspaces.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-core[docker]\n```\n\n----------------------------------------\n\nTITLE: Setting Up ReAct Style Prompt Template\nDESCRIPTION: Configures the prompt template for the AI agent using Langchain Hub, specifying tools and tool names.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/news_summary_agent.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#We use Langchain Hub for the Prompt Template\nprompt = hub.pull(\"hwchase17/react-json\")\n#prompt.partial assigns values to some parameters defined within the prompt template\nprompt = prompt.partial(\ntools=render_text_description(tools),\ntool_names=\", \".join([t.name for t in tools]),\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Packages\nDESCRIPTION: Initial setup for importing necessary components from Composio and Pydantic-AI libraries.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/pydanticai/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dotenv import load_dotenv\nimport os\n\nfrom composio import Action\nfrom composio_pydanticai import ComposioToolSet\nfrom pydantic_ai import Agent\n```\n\n----------------------------------------\n\nTITLE: Running black Formatter with Tox (Bash)\nDESCRIPTION: Runs the 'black' code formatter using the 'tox' automation tool and the configuration defined in 'tox.ini'. This command enforces a consistent Python code style across the project. It is mentioned both as part of the writing code process and as an individual command.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/development.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntox -e black\n```\n\n----------------------------------------\n\nTITLE: Running the Main AI Agent Python Script (Shell)\nDESCRIPTION: Executes the main Python application (`main.py`) using the Python 3.10 interpreter (as specified in prerequisites). This script initializes connections to MCP servers (like Slack), manages workflow tracing, checks connections, interacts with the user for task input, and orchestrates task execution via different AI agents (Search, Personal, Slack). Requires prior environment setup and API key configuration in `.env`.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/agents-mcp/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Filtering Specific GitHub Actions\nDESCRIPTION: Example of how to restrict an agent to only specific actions for enhanced security and focused operations. This snippet demonstrates limiting the agent to only creating GitHub issues.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/autogen/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncomposio_tools.register_tools(actions=[Action.GITHUB_CREATE_ISSUE])\n```\n\n----------------------------------------\n\nTITLE: Declaring composio-llamaindex Dependency (Plain Text)\nDESCRIPTION: This line specifies 'composio-llamaindex' as a required Python package dependency. It is typically found in dependency management files like 'requirements.txt' to ensure the package is installed for the project.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/coinbase/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomposio-llamaindex\n```\n\n----------------------------------------\n\nTITLE: Manually Updating Composio App and Action Enums in Python\nDESCRIPTION: Shows how to manually add entries for a new tool and its actions to the `App` and `Action` enums in `composio/client/enums.py`. This is a fallback method if the `composio apps update` command fails. Ensure `_tool_name` is lowercase and Enum names are uppercase with underscores.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/adding-local-tool.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\n\nclass App(str, Enum):\n    \"\"\"Composio App.\"\"\"\n\n    ABLY = \"ably\"\n    ACCELO = \"accelo\"\n    <TOOL_ENUM_NAME> = <_tool_name_>\n\n\n\nclass Action(tuple, Enum):\n    \"\"\"App action.\"\"\"\n\n    MATHEMATICAL_CALCULATOR = (\"mathematical\", \"mathematical_calculator\", True, True)\n    LOCALWORKSPACE_WORKSPACESTATUSACTION = (\"localworkspace\", \"localworkspace_workspacestatusaction\", True, True)\n    LOCALWORKSPACE_CREATEWORKSPACEACTION = (\"localworkspace\", \"localworkspace_createworkspaceaction\", True, True)\n    <ACTION_ENUM_NAME> = ( <_tool_name>, <_action_name>, True, True)\n```\n\n----------------------------------------\n\nTITLE: Installing Development Environment with uv for Composio\nDESCRIPTION: Commands for setting up a development environment for Composio using uv. This includes creating a virtual environment, activating it, and installing the core framework along with various plugins.\nSOURCE: https://github.com/composiohq/composio/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install uv\npip install uv\n\n# Create and activate virtual environment\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\nuv pip install -e .\nuv pip install -e python/swe\n\n# Install plugins as needed\nuv pip install -e python/plugins/autogen\nuv pip install -e python/plugins/claude\nuv pip install -e python/plugins/crew_ai\nuv pip install -e python/plugins/griptape\nuv pip install -e python/plugins/julep\nuv pip install -e python/plugins/langchain\nuv pip install -e python/plugins/llamaindex\nuv pip install -e python/plugins/lyzr\nuv pip install -e python/plugins/openai\n```\n\n----------------------------------------\n\nTITLE: Installing Composio Together AI Package\nDESCRIPTION: Installation command for the Composio Together AI integration package using pip.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/together.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-togetherai\n```\n\n----------------------------------------\n\nTITLE: Installing Composio TypeScript Core Library\nDESCRIPTION: Commands to install the Composio core library for TypeScript using npm, pnpm, or bun package managers. Requires NodeJS 16+.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: npm\nCODE:\n```\nnpm install composio-core\n```\n\nLANGUAGE: pnpm\nCODE:\n```\npnpm add composio-core\n```\n\nLANGUAGE: bun\nCODE:\n```\nbun add composio-core\n```\n\n----------------------------------------\n\nTITLE: Running the setup.sh Script to Set Up Environment (Shell)\nDESCRIPTION: This shell command executes the setup.sh script to install or configure required dependencies for the Market Research agent project. It depends on the script being located in the current directory and having executable permissions. The script itself is expected to handle environment setup, package installation, and possibly environment variable configuration.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/sales_kit/market_research_agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Filtering Specific Apps for Streamlined Operations\nDESCRIPTION: Python code showing how to restrict an agent's access to certain applications for streamlined operations. This example limits the agent to only Asana and GitHub applications.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/crew_ai/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntoolsAsanaGithub = ComposioToolSet(apps=[App.ASANA, App.GITHUB])\n```\n\n----------------------------------------\n\nTITLE: Common uv Package Management Commands (Bash)\nDESCRIPTION: Demonstrates essential 'uv' commands for Python package and environment management. Includes installing packages by name, installing the current project in editable mode (`-e .`), installing dependencies from a requirements file (`-r requirements.txt`), creating a virtual environment (`uv venv`), and activating it on Linux/macOS and Windows systems.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/development.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Install a package\nuv pip install package_name\n\n# Install a package in development/editable mode\nuv pip install -e .\n\n# Install requirements from a file\nuv pip install -r requirements.txt\n\n# Create a virtual environment\nuv venv\n\n# Activate the virtual environment\n# On Linux/macOS:\nsource .venv/bin/activate\n# On Windows:\n.venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Command to run the setup.sh script which sets up the environment and installs required dependencies.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running the Scheduler Agent Python Script (Shell)\nDESCRIPTION: This shell command uses the Python interpreter to execute the main script (`main.py`) for the scheduler agent, located within a specific path (`python/examples/advanced_agents/scheduler_agent/scheduler_agent_autogen/`) in the project structure. This command starts the agent application. Requires Python 3.8 or higher and successful completion of the setup steps.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_autogen/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/advanced_agents/scheduler_agent/scheduler_agent_autogen/main.py\n```\n\n----------------------------------------\n\nTITLE: Running the Python Slack Agent Script using Shell\nDESCRIPTION: This command executes the main Python script `slack_to_computer.py` using the Python interpreter. This starts the Slack computer control agent, which will then connect to Slack and begin listening for commands to automate computer tasks.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_computer_use/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython slack_to_computer.py\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory for Composio Slack Bot Setup - Shell\nDESCRIPTION: This snippet demonstrates how to change the working directory in a terminal to the project's root folder, which should contain essential files like setup.sh, slack_agent_llamaindex.py, and requirements.txt. No external dependencies are required, but the provided path must be correct and the user must have permissions on the directory. The primary input is the file path, and this action is a prerequisite for subsequent setup and execution steps.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_llamaindex/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Adding SERP API Tool with Composio\nDESCRIPTION: Uses Composio to log in and add the SERP API tool for web search functionality in the AI agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/news_summary_agent.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n%composio login\n%composio add serpapi\n```\n\n----------------------------------------\n\nTITLE: Running the Setup Script (Shell)\nDESCRIPTION: This snippet executes the setup script 'setup.sh', which is responsible for setting up the environment and installing necessary dependencies for the Second Brain Agent. Successful execution may require filling in a '.env' file containing secret keys or configuration variables as indicated in the preceding instructions. The command assumes setup.sh is already executable and present.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Second_brain_Agent/llamaindex/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Building and Tagging Development Docker Image\nDESCRIPTION: This bash command builds a development Docker image, tags it as 'dev', and then retags it as 'latest' for the composio project. It's used to test changes made in the 'composio/' directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/swe/dockerfiles/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake dev && docker tag composio/composio:dev composio/composio:latest\n```\n\n----------------------------------------\n\nTITLE: Running the Domain Deep Research Agent Main Python Script\nDESCRIPTION: This snippet runs the main Python script for the Domain Deep Research Agent, orchestrating domain research via Composio and integrated agent frameworks. It assumes that Python 3.8 or higher is installed and that dependencies are properly set up. The file 'main.py' resides in the 'cookbook/python-examples/advanced_agents/domain_deep_research/' directory. Execution starts the research agent, taking parameters and secrets as specified in the .env file, and outputs research results or logs to console.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/domain_deep_research/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/advanced_agents/domain_deep_research/main.py\n```\n\n----------------------------------------\n\nTITLE: Running the Community Reward Agent (Shell)\nDESCRIPTION: Executes the Python script for the Community Reward Agent using the `python` interpreter. This agent automates the process of distributing SOL tokens to community members based on their contributions. Requires Python environment and configured `.env` file.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/solana/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npython cookbook/python-examples/advanced_agents/cryptokit/solana/community_reward_agent.py\n```\n\n----------------------------------------\n\nTITLE: Declaring python-dotenv Dependency (Plain Text)\nDESCRIPTION: This line declares 'python-dotenv' as a required Python package dependency. This library is commonly used to load environment variables from a '.env' file into the application's environment, often used for managing configuration settings like API keys.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/coinbase/requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Installing composio-core JavaScript Package via npm\nDESCRIPTION: Installs the core Composio JavaScript package using the npm package manager. This is the prerequisite for using Composio within a Node.js or JavaScript project.\nSOURCE: https://github.com/composiohq/composio/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install composio-core\n```\n\n----------------------------------------\n\nTITLE: Installing Composio Core and Plugins with uv (Bash)\nDESCRIPTION: Installs the main Composio project ('`.`'), the 'swe' dependency, and various optional plugins (Autogen, Claude, Crew AI, etc.) in editable mode (`-e`) using the 'uv' package manager. This step is part of the initial project setup after activating the virtual environment.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/development.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv pip install -e .\nuv pip install -e ../swe\n# Install plugins as needed\nuv pip install -e ../plugins/autogen\nuv pip install -e ../plugins/claude\nuv pip install -e ../plugins/crew_ai\nuv pip install -e ../plugins/griptape\nuv pip install -e ../plugins/julep\nuv pip install -e ../plugins/langchain\nuv pip install -e ../plugins/llamaindex\nuv pip install -e ../plugins/lyzr\nuv pip install -e ../plugins/openai\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Project Dependencies\nDESCRIPTION: This snippet lists required Python packages: `composio-crewai`, `langchain-openai`, `python-dotenv`, and `agentops`. These dependencies are necessary for a project likely utilizing AI agent frameworks (CrewAI, Langchain), OpenAI models, environment variable management (`python-dotenv`), and potentially AgentOps for observability or monitoring. They would typically be found in a requirements file (e.g., requirements.txt) and installed using pip.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/AI_PM_agent/crewai/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomposio-crewai\nlangchain-openai\npython-dotenv\nagentops\n```\n\n----------------------------------------\n\nTITLE: Installing Composio SDK for TypeScript Applications\nDESCRIPTION: Command to install the Composio core SDK for TypeScript/JavaScript applications. This allows integration of Composio's tool capabilities into TypeScript-based AI agents.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/welcome.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install composio-core\n```\n\n----------------------------------------\n\nTITLE: Executing the Setup Script (Shell)\nDESCRIPTION: This command runs the `setup.sh` script located in the current directory (`./`). The script is expected to perform setup tasks like creating virtual environments, installing required packages (likely from `requirements.txt`), and potentially other environment configurations. Ensure the script has execute permissions first.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/sales_kit/meeting_agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running Setup Script in Shell\nDESCRIPTION: Command to execute the setup.sh script which sets up the environment, installs dependencies, logs into composio and adds necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/llamaindex/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running the Scheduler Agent Python Script (Shell)\nDESCRIPTION: This command executes the main Python script (`main.py`) for the scheduler agent using the Python interpreter. The script is located within the project structure (`python/examples/advanced_agents/scheduler_agent/scheduler_agent_langgraph/`). This starts the Scheduler Agent application.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_langgraph/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/advanced_agents/scheduler_agent/scheduler_agent_langgraph/main.py\n```\n\n----------------------------------------\n\nTITLE: Running Main Python Script in Shell\nDESCRIPTION: This command executes the main Python script for the To Do List Agent project.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/Notion_todo_list_agent/crewai/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/quickstarters/Notion_todo_list_agent/crewai/main.py\n```\n\n----------------------------------------\n\nTITLE: Generating Composio SDK Types\nDESCRIPTION: Command to generate the SDK types after installation, which is necessary for new installations or when encountering missing metadata errors.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposio apps generate-types\n```\n\n----------------------------------------\n\nTITLE: Running the Youtube Summary Agent in Shell\nDESCRIPTION: Command to execute the Python script that runs the Youtube summary agent. This starts the agent that generates video summaries and sends them to Slack.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/transcript_insight_generator/langgraph/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/quickstarters/transcript_insight_generator/langgraph/main.py\n```\n\n----------------------------------------\n\nTITLE: Installing Composio and OpenAI packages\nDESCRIPTION: Commands to install the required libraries for using Composio with OpenAI. Python requires composio-openai and openai packages, while JavaScript needs composio-core and openai packages.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-openai openai\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i composio-core openai\n```\n\n----------------------------------------\n\nTITLE: Running Main Python Script for Newsletter Summarizer - Shell\nDESCRIPTION: Invokes the main.py script for the advanced Newsletter Summarizer agent using Python. The script is expected to reside at 'cookbook/python-examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_autogen/main.py' relative to the project root. Requires all environment variables and dependencies to be set prior to execution; outputs a summarized newsletter. Python 3.8+ must be installed and accessible as 'python'.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_autogen/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_autogen/main.py\n```\n\n----------------------------------------\n\nTITLE: Installing Fly.io Workspace Extension\nDESCRIPTION: Command to install the Fly.io workspace extension for Composio\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/workspaces/workspaces.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-core[flyio]\n```\n\n----------------------------------------\n\nTITLE: Creating .env File with API Keys - Bash\nDESCRIPTION: This snippet shows the format for setting up required environment variables via a .env file for the demo to access Composio and OpenAI APIs. It demonstrates setting the COMPOSIO_API_KEY and OPENAI_API_KEY environment variables. Required dependencies include access to valid API keys. The .env file should be placed in the root of the portfolio-generator directory, and the keys replaced with actual values before running the demo. If the file is not properly set, the demo may fail to authenticate.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/portfolio-generator/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCOMPOSIO_API_KEY=YOUR_COMPOSIO_API_KEY\nOPENAI_API_KEY=YOUR_OPENAI_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Cloning SWEBench-Agent-v2 Repository\nDESCRIPTION: Git commands to clone the Composio repository and navigate to the agent directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/swe/agent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ComposioHQ/composio.git\ncd composio/python/swe/agent\n```\n\n----------------------------------------\n\nTITLE: Running the Coder Reward Agent (Shell)\nDESCRIPTION: Executes the Python script for the Coder Reward Agent. This agent manages automated SOL payments to developers, triggered by code contributions or milestones. Requires Python environment and configured `.env` file.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/solana/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npython cookbook/python-examples/advanced_agents/cryptokit/solana/coder_reward_agent.py\n```\n\n----------------------------------------\n\nTITLE: Declaring Python Dependencies (requirements.txt format)\nDESCRIPTION: This snippet lists Python package dependencies required for a project. `composio-llamaindex` suggests integration between Composio and LlamaIndex, `llama-index` is the core LlamaIndex library, and `python-dotenv` is used for loading environment variables from a `.env` file. These lines are typically placed in a `requirements.txt` file and installed using `pip install -r requirements.txt`.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/content_writing_agent/llamaindex/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomposio-llamaindex\nllama-index\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Running Slack Agent Script - Python\nDESCRIPTION: This shell command executes the main Python script for the Slack Bot Agent, located at 'python/examples/advanced_agents/slack_bot_agent/slack_agent_crewai/slack_agent_crewai.py'. Prerequisites include a configured environment ('.env' file filled, dependencies installed). Inputs: Environment variables, possibly .env secrets; Outputs: The running Slack Bot Agent, which connects to Composio and handles Slack events. The script must be run after all environment setup has been completed.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_crewai/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/advanced_agents/slack_bot_agent/slack_agent_crewai/slack_agent_crewai.py\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Shell Tool Classes in Python\nDESCRIPTION: List of classes to implement when creating a new shell tool for the SWE agent. These classes are essential for executing commands within the shell environment.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/swe/DEVELOPMENT.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nShellRequest\nShellExecResponse\nBaseExecCommand\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Project Dependencies with requirements.txt - Plain Text\nDESCRIPTION: This snippet enumerates Python package dependencies (with precise version pins) in requirements.txt format for the Composio project. There are no executable code lines, just a sequential list of required libraries and their versions. This format allows for easy, repeatable installation via \"pip install -r requirements.txt\"; lines must only contain valid package specifications.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slackbot_code_expert/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naioboto3==13.2.0\\naiobotocore==2.15.2\\naiofiles==24.1.0\\naiohappyeyeballs==2.4.3\\naiohttp==3.10.10\\naioitertools==0.12.0\\naiosignal==1.3.1\\nalembic==1.14.0\\nannotated-types==0.7.0\\nanyio==4.6.2.post1\\nappdirs==1.4.4\\nasgiref==3.8.1\\nasttokens==2.4.1\\nasync-timeout==4.0.3\\nattrs==24.2.0\\nauth0-python==4.7.2\\nbackoff==2.2.1\\nbcrypt==4.2.0\\nbeautifulsoup4==4.12.3\\nbidict==0.23.1\\nboto3==1.35.36\\nbotocore==1.35.36\\nbuild==1.2.2.post1\\nCacheControl==0.14.1\\ncachetools==5.5.0\\ncertifi==2024.8.30\\ncffi==1.17.1\\ncharset-normalizer==3.4.0\\nchroma-hnswlib==0.7.3\\nchromadb==0.4.24\\nclick==8.1.7\\ncohere==5.11.3\\ncoloredlogs==15.0.1\\ncomposio_core==0.5.38\\ncomposio_crewai==0.5.38\\ncomposio_langchain==0.5.38\\ncrewai==0.76.9\\ncrewai-tools==0.13.4\\ncryptography==43.0.3\\ndataclasses-json==0.6.7\\ndecorator==5.1.1\\ndeeplake==3.9.27\\nDeprecated==1.2.14\\ndeprecation==2.1.0\\ndill==0.3.9\\ndistro==1.9.0\\ndocker==7.1.0\\ndocstring_parser==0.16\\ndocx2txt==0.8\\ndurationpy==0.9\\nembedchain==0.1.124\\nexceptiongroup==1.2.2\\nexecuting==2.1.0\\nfastapi==0.115.4\\nfastavro==1.9.7\\nfilelock==3.16.1\\nfirebase-admin==6.5.0\\nflatbuffers==24.3.25\\nfrozenlist==1.5.0\\nfsspec==2024.10.0\\ngoogle-ai-generativelanguage==0.6.10\\ngoogle-api-core==2.22.0\\ngoogle-api-python-client==2.151.0\\ngoogle-auth==2.35.0\\ngoogle-auth-httplib2==0.2.0\\ngoogle-cloud-aiplatform==1.71.1\\ngoogle-cloud-bigquery==3.26.0\\ngoogle-cloud-core==2.4.1\\ngoogle-cloud-firestore==2.19.0\\ngoogle-cloud-resource-manager==1.13.0\\ngoogle-cloud-storage==2.18.2\\ngoogle-crc32c==1.6.0\\ngoogle-generativeai==0.8.3\\ngoogle-resumable-media==2.7.2\\ngoogleapis-common-protos==1.65.0\\ngptcache==0.1.44\\ngrpc-google-iam-v1==0.13.1\\ngrpcio==1.67.1\\ngrpcio-status==1.62.3\\ngrpcio-tools==1.62.3\\nh11==0.14.0\\nh2==4.1.0\\nhpack==4.0.0\\nhttpcore==1.0.6\\nhttplib2==0.22.0\\nhttptools==0.6.4\\nhttpx==0.27.2\\nhttpx-sse==0.4.0\\nhuggingface-hub==0.26.2\\nhumanfriendly==10.0\\nhumbug==0.3.2\\nhyperframe==6.0.1\\nidna==3.10\\nimportlib_metadata==8.4.0\\nimportlib_resources==6.4.5\\ninflection==0.5.1\\niniconfig==2.0.0\\ninstructor==1.6.3\\nipython==8.29.0\\njedi==0.19.1\\nJinja2==3.1.4\\njiter==0.5.0\\njmespath==1.0.1\\njoblib==1.4.2\\njson_repair==0.30.0\\njsonpatch==1.33\\njsonpickle==3.3.0\\njsonpointer==3.0.0\\njsonref==1.1.0\\njsonschema==4.23.0\\njsonschema-specifications==2024.10.1\\nkubernetes==31.0.0\\nlancedb==0.15.0\\nlangchain==0.3.7\\nlangchain-cohere==0.3.1\\nlangchain-community==0.3.5\\nlangchain-core==0.3.15\\nlangchain-experimental==0.3.3\\nlangchain-google-genai==2.0.4\\nlangchain-openai==0.2.5\\nlangchain-text-splitters==0.3.2\\nlangchainhub==0.1.21\\nlangsmith==0.1.139\\nlibdeeplake==0.0.147\\nlitellm==1.51.3\\nlz4==4.3.3\\nMako==1.3.6\\nmarkdown-it-py==3.0.0\\nMarkupSafe==3.0.2\\nmarshmallow==3.23.1\\nmatplotlib-inline==0.1.7\\nmdurl==0.1.2\\nmem0ai==0.1.27\\nmmh3==5.0.1\\nmonotonic==1.6\\nmpmath==1.3.0\\nmsgpack==1.1.0\\nmultidict==6.1.0\\nmultiprocess==0.70.17\\nmypy-extensions==1.0.0\\nnest-asyncio==1.6.0\\nnetworkx==3.4.2\\nnodeenv==1.9.1\\nnumpy==1.26.4\\noauthlib==3.2.2\\nonnxruntime==1.20.0\\nopenai==1.54.0\\nopentelemetry-api==1.27.0\\nopentelemetry-exporter-otlp-proto-common==1.27.0\\nopentelemetry-exporter-otlp-proto-grpc==1.27.0\\nopentelemetry-exporter-otlp-proto-http==1.27.0\\nopentelemetry-instrumentation==0.48b0\\nopentelemetry-instrumentation-asgi==0.48b0\\nopentelemetry-instrumentation-fastapi==0.48b0\\nopentelemetry-proto==1.27.0\\nopentelemetry-sdk==1.27.0\\nopentelemetry-semantic-conventions==0.48b0\\nopentelemetry-util-http==0.48b0\\norjson==3.10.11\\noutcome==1.3.0.post0\\noverrides==7.7.0\\npackaging==24.1\\npandas==2.2.3\\nparameterized==0.9.0\\nparamiko==3.5.0\\nparso==0.8.4\\npathos==0.3.3\\npexpect==4.9.0\\npillow==10.4.0\\npluggy==1.5.0\\nportalocker==2.10.1\\nposthog==3.7.0\\npox==0.3.5\\nppft==1.7.6.9\\nprompt_toolkit==3.0.48\\npropcache==0.2.0\\nproto-plus==1.25.0\\nprotobuf==4.25.5\\nptyprocess==0.7.0\\npulsar-client==3.5.0\\npure_eval==0.2.3\\npyarrow==18.0.0\\npyasn1==0.6.1\\npyasn1_modules==0.4.1\\npycparser==2.22\\npydantic==2.9.2\\npydantic-settings==2.6.1\\npydantic_core==2.23.4\\nPygments==2.18.0\\nPyJWT==2.9.0\\npylance==0.19.1\\nPyNaCl==1.5.0\\npyparsing==3.2.0\\npypdf==5.1.0\\npyperclip==1.9.0\\nPyPika==0.48.9\\npyproject_hooks==1.2.0\\npyright==1.1.387\\npysbd==0.3.4\\nPysher==1.0.8\\nPySocks==1.7.1\\npytest==8.3.3\\npython-dateutil==2.9.0.post0\\npython-dotenv==1.0.1\\npython-engineio==4.10.1\\npython-socketio==5.11.4\\npytube==15.0.0\\npytz==2024.2\\npyvis==0.3.2\\nPyYAML==6.0.2\\nqdrant-client==1.12.1\\nreferencing==0.35.1\\nregex==2024.9.11\\nrequests==2.32.3\\nrequests-oauthlib==2.0.0\\nrequests-toolbelt==1.0.0\\nrich==13.9.4\\nrpds-py==0.20.1\\nrsa==4.9\\ns3transfer==0.10.3\\nsafetensors==0.4.5\\nschema==0.7.7\\nscikit-learn==1.5.2\\nscipy==1.14.1\\nselenium==4.26.1\\nsemver==3.0.2\\nsentence-transformers==3.2.1\\nsentry-sdk==2.18.0\\nshapely==2.0.6\\nshellingham==1.5.4\\nsimple-websocket==1.1.0\\nsix==1.16.0\\nsniffio==1.3.1\\nsortedcontainers==2.4.0\\nsoupsieve==2.6\\nSQLAlchemy==2.0.35\\nstack-data==0.6.3\\nstarlette==0.41.2\\nsympy==1.13.1\\ntabulate==0.9.0\\ntenacity==9.0.0\\nthreadpoolctl==3.5.0\\ntiktoken==0.7.0\\ntinydb==4.8.2\\ntokenizer==3.4.5\\ntokenizers==0.20.2\\ntomli==2.0.2\\ntomli_w==1.1.0\\ntorch==2.5.1\\ntqdm==4.66.6\\ntraitlets==5.14.3\\ntransformers==4.46.1\\ntree-sitter==0.21.3\\ntree-sitter-languages==1.10.2\\ntrio==0.27.0\\ntrio-websocket==0.11.1\\ntyper==0.12.5\\ntypes-requests==2.32.0.20241016\\ntyping-inspect==0.9.0\\ntyping_extensions==4.12.2\\ntzdata==2024.2\\nuritemplate==4.1.1\\nurllib3==2.2.3\\nuv==0.4.30\\nuvicorn==0.32.0\\nuvloop==0.21.0\\nwatchfiles==0.24.0\\nwcwidth==0.2.13\\nwebsocket-client==1.8.0\\nwebsockets==13.1\\nwrapt==1.16.0\\nwsproto==1.2.0\\nyarl==1.17.1\\nzipp==3.20.2\\n\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Composio Local Tool in Python\nDESCRIPTION: Demonstrates how to register the newly created custom local tool by adding its class to the `TOOLS` list in the main `composio/tools/local/__init__.py` file. This makes the tool discoverable by the Composio framework.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/adding-local-tool.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom composio.tools.local.filetool import FileTool\nfrom composio.tools.local.greptile import Greptile\nfrom composio.tools.local.<tool_name> import <ToolName> # Import your tool class\n\nTOOLS_PATH = Path(__file__).parent\nTOOLS = [\n    FileTool,\n    Greptile,\n    <ToolName>, # Add your tool here\n]\n```\n\n----------------------------------------\n\nTITLE: Running setup.sh to Install Dependencies - shell\nDESCRIPTION: This shell snippet executes the 'setup.sh' script, which is responsible for preparing the environment and installing project dependencies. This step typically installs required Python packages and sets up project files. It requires that 'setup.sh' is in the current directory and is executable. Outputs will depend on the script's contents and may include installation logs or prompts for user input.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/human_in_the_loop_scheduler/crewai/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Configuration YAML\nDESCRIPTION: YAML configuration for defining the agent's role, goal, and tasks for GitHub repository management\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/praisonai/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Github Management\"\n\nroles:\n  developer:\n    role: \"Developer\"\n    goal: \"An expert programmer\"\n    backstory: \"A developer exploring new codebases and have certain tools available to execute different tasks.\"\n    tasks:\n      star_github:\n        description: \"Star a repo composiohq/composio on GitHub\"\n        expected_output: \"Response whether the task was executed.\"\n\"\"\" + tool_section_str\n\nprint(agent_yaml)\n```\n\n----------------------------------------\n\nTITLE: Running the PR Agent Python Script - Shell\nDESCRIPTION: This snippet shows how to launch the Python-based PR Agent using the `python` command, targeting the specific script path (`cookbook/examples/pr_agent_openai/main.py`). It assumes all dependencies have been installed and the environment has been configured as per previous instructions. The script runs the core logic to review pull requests via Composio integration.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/pr_agent_openai/main.py\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Shell command to run the setup.sh script which sets up the environment, installs dependencies, logs into Composio, and adds necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/crewai/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Slackbot Setup Script in Bash\nDESCRIPTION: This command executes the `setup.sh` shell script located in the current directory (`slackbot_code_expert`). The script automates configuration tasks like Composio login, adding the Slackbot tool, creating a `.env` file from a template, and prompting for the codebase directory. Execute permissions might be needed (`chmod +x setup.sh`).\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slackbot_code_expert/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing the Main Python Script for the Data Analyst Agent\nDESCRIPTION: Runs the main Python application script (`main.py`) located within the `cookbook/examples/data_analyst_agent/` directory using the Python interpreter. This script initiates the data analyst agent, which performs SQL query execution and logging based on its configuration and the provided database (`company.db`).\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Sheets_to_SQL_Agent/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/data_analyst_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using PNPM\nDESCRIPTION: This sequence of commands first changes the current directory to the newly cloned `swe-js` directory and then uses `pnpm i` (short for `pnpm install`) to install all the necessary project dependencies defined in the package manifest.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/swe/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd swe-js && pnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Composio and OpenAI\nDESCRIPTION: Commands to install required npm packages including composio-core and openai using different package managers.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/openai-js.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install composio-core openai \nyarn add composio-core openai \npnpm add composio-core openai\n```\n\n----------------------------------------\n\nTITLE: Executing Newsletter Summarizer Main Python Script (shell)\nDESCRIPTION: Runs the main Python agent script located in the project subdirectory. This script launches the newsletter summarization workflow after environment setup. Requires Python 3.8+ to be installed and dependencies resolved via setup.sh. Expects configuration (secrets) in .env file; outputs summarization results or errors in terminal.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_llamaindex/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_crewai/main.py\n```\n\n----------------------------------------\n\nTITLE: Running the YouTube Summary Agent Script\nDESCRIPTION: Command to execute the main Python script that runs the YouTube summary agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/transcript_insight_generator/llama_index/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/quickstarters/transcript_insight_generator/llama_index/main.py\n```\n\n----------------------------------------\n\nTITLE: Running the Main Python Scheduler Agent Script with Shell\nDESCRIPTION: Runs the main Python script to start the Scheduler Agent implementation that uses LangChain, CrewAI, and ChatGPT for event scheduling based on emails. The command assumes all dependencies are installed and the environment is configured via previous steps. It takes no command-line parameters, and the script executes located at python/examples/advanced_agents/scheduler_agent/scheduler_agent_langchain/main.py.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_langchain/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/advanced_agents/scheduler_agent/scheduler_agent_langchain/main.py\n```\n\n----------------------------------------\n\nTITLE: Installing Composio Gemini Package and GitHub Connection\nDESCRIPTION: Instructions for installing the Composio Gemini package and connecting your GitHub account to allow AI agents to use GitHub functionalities. Also shows how to view available applications that can be connected.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/gemini/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composio Gemini package\npip install composio-gemini\n\n# Connect your GitHub account\ncomposio add github\n\n# View available applications you can connect with\ncomposio apps\n```\n\n----------------------------------------\n\nTITLE: Running the Slack Bot Python Script - Shell\nDESCRIPTION: Executes the main Python script that launches the Slack Bot agent leveraging Composio, OpenAI, and agentic frameworks for PR review automation. Python 3.8 or higher is required, and all dependencies should first be installed via the 'setup.sh' process. The input to the script is any environment configuration present in the .env file, and the output is the active Slack Bot process.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/slack_agent_openai/slack_agent_openai.py\n```\n\n----------------------------------------\n\nTITLE: Installing Experimental V3 Node.js SDK via npm\nDESCRIPTION: Command to install the experimental V3 Node.js SDK for Composio using npm package manager. This SDK provides foundational access to the V3 API endpoints.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/changelogs/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @composio/client\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Tool Names for Framework Compliance in Python\nDESCRIPTION: This function ensures that tool names conform to the target framework requirements by sanitizing the input name. It should be adapted to replace or remove invalid characters, handle length restrictions, and ensure uniqueness if needed. Requires implementing the details of character replacement and naming constraints as defined by the framework; takes a 'name' string and returns a sanitized string; no external dependencies are specified, and the function is intended for internal use.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef _sanitize_tool_name(self, name):\\n    \\\"\\\"\\\"Ensure tool name meets framework requirements\\\"\\\"\\\"\\n    # Replace invalid characters, truncate if needed, etc.\\n    return sanitized_name\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram: Tool Calling Flow with Composio\nDESCRIPTION: Detailed sequence diagram showing the interaction flow between an AI agent, Composio, Language Model, and external APIs for tool calling implementation.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/introduction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Agent as Your AI Agent/App\n    participant Composio\n    participant LLM as Language Model\n    participant ExtAPI as External API (e.g., GitHub)\n\n    Agent->>LLM: 1. User Request + Available Tools (via Composio)\n    Note right of Agent: \"Get my GitHub username.\" + [Tool: GITHUB_GET_...]\n\n    LLM->>Agent: 2. LLM decides to use a tool\n    Note left of LLM: Chooses GITHUB_GET... tool\n\n    Agent->>Composio: 3. Request Tool Execution\n    Note right of Agent: Pass LLM's tool call request (`handle_tool_calls`)\n\n    Composio->>Composio: 4. Retrieve Credentials\n    Note over Composio: Finds correct auth for user & GitHub\n\n    Composio->>ExtAPI: 5. Execute API Call\n    Note over Composio, ExtAPI: Makes authenticated call to api.github.com/user\n\n    ExtAPI->>Composio: 6. API Response\n    Note over Composio, ExtAPI: Returns user data\n\n    Composio->>Agent: 7. Return Execution Result\n    Note right of Agent: {\"data\": {\"login\": \"user\", ...}, \"successful\": true}\n\n    Agent->>LLM: 8. Provide Result to LLM (Optional)\n    Note left of LLM: \"Tool Result: User login is 'user'\"\n\n    LLM->>Agent: 9. Final Response\n    Note right of Agent: \"Your GitHub username is user.\"\n```\n\n----------------------------------------\n\nTITLE: Running Code Formatting with Make (Bash)\nDESCRIPTION: Executes the 'format-code' target defined in the project's Makefile. This command typically runs code formatters like isort and black to ensure the codebase adheres to project formatting standards.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/development.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake format-code\n```\n\n----------------------------------------\n\nTITLE: Running the Project Setup Script - Shell\nDESCRIPTION: Executes the 'setup.sh' Bash script to configure the environment and install dependencies required for the Lead Outreach Agent. Assumes all necessary permissions are in place and the script exists in the current directory. Inputs and outputs depend on the script's content, which typically involves installation of environment variables and Python dependencies. Errors may arise if dependencies are missing or permissions are insufficient.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/lead_outreach_agent/llamaindex/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Command to run the setup.sh script which sets up the environment, installs dependencies, logs into Composio and adds necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/perplexity_for_hackernews/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running the Content Hook Generator Agent in Python\nDESCRIPTION: Command to execute the main Python script that runs the content hook generator agent after setup is complete.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/content_hook_generator_agent/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/quickstarters/content_hook_generator_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Executing the Setup Script using Shell\nDESCRIPTION: This command executes the `setup.sh` script located in the current directory. The script is expected to set up the necessary environment and install project dependencies, likely listed in `requirements.txt`. It also prompts the user to fill in the `.env` file with secrets.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/indie_hacker_agent/langgraph/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running the Demo Script with Node.js - Bash\nDESCRIPTION: This snippet runs the portfolio generator agent demo using Node.js to execute the demo.mjs script. It requires that all dependencies are installed and the .env file is present with valid API keys. No arguments are required. On execution, it initializes the agent and guides the user to generate a portfolio website. This command should be run from the example directory, and assumes Node.js is installed and the demo.mjs file exists.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/portfolio-generator/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode demo.mjs\n```\n\n----------------------------------------\n\nTITLE: Executing Letta Agent to Star GitHub Repository\nDESCRIPTION: This snippet shows how to execute the Letta agent to star a GitHub repository. It sends a user message to the agent and prints the response messages.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/letta.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.agents.messages.create(\n    agent_id=agent.id,\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"Star the github repo composioHQ/composio/\"\n        }\n    ]\n)\nfor message in response.messages:\n    print(message)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await client.agents.messages.create(agent.id, {\n    messages: [\n        {\n            role: \"user\",\n            content: \"Star the github repo composiohq/composio\",\n        },\n    ],\n});\n\nfor (const message of response.messages) {\n    console.log(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Composio LangGraph Package and GitHub Connection\nDESCRIPTION: Commands to install the Composio LangGraph package, connect your GitHub account, and view available applications that can be integrated with Composio.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/langgraph/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composio LangGraph package\npip install composio-langgraph\n\n# Connect your GitHub account\ncomposio-cli add github\n\n# View available applications you can connect with\ncomposio-cli show-apps\n```\n\n----------------------------------------\n\nTITLE: Running the Coinbase Trading Agent Script - Shell\nDESCRIPTION: Invokes the Python script responsible for executing the crypto trading agent logic using advanced agents from the specified project path. Relies on all previous setup steps, as well as configured environment variables and installed dependencies. Expects Python version 3.8 or higher to be available.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/trading_agent/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npython cookbook/python-examples/advanced_agents/cryptokit/trading_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Executing the Setup Script to Prepare Environment (Shell)\nDESCRIPTION: This code snippet runs the `setup.sh` script using a shell command, launching project setup and dependency installation. It relies on `setup.sh` being present and executable in the current directory. Successful execution prepares the environment; errors indicate missing scripts or unsatisfied prerequisites.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/sales_assistant_agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running the Code Execution Agent Python Script\nDESCRIPTION: Command to execute the main Python script that runs the Code Execution Agent after setup and environment configuration.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/code_execution_agent/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/quickstarters/code_execution_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Installing Composio and Setting Up GitHub Integration\nDESCRIPTION: Commands for installing the Composio Claude package, connecting your GitHub account, and viewing available application integrations.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/claude/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composio LangChain package\npip install composio-claude\n\n# Connect your GitHub account\ncomposio-cli add github\n\n# View available applications you can connect with\ncomposio-cli show-apps\n```\n\n----------------------------------------\n\nTITLE: Running the Main DeepSeek Research Agent Script - Shell\nDESCRIPTION: Executes the primary Python script responsible for launching the DeepSeek research agent, utilizing the configured environment and dependencies. The command should be run from within the project directory after setup and environment configuration are complete. Python 3.8 or later must be installed, and the script location/path must be accurate.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/deepseek_research/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/advanced_agents/deepseek_research/main.py\n```\n\n----------------------------------------\n\nTITLE: Running the Trend Finder Python Script\nDESCRIPTION: Command to execute the main Python script that runs the Startup Trend Finder agent after environment setup is complete.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/startup_trend_generator/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/quickstarters/trend_finder/main.py\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Project Folder (Shell)\nDESCRIPTION: This shell command navigates the user's terminal session to the specified project directory. This is a prerequisite step before running setup or execution commands. Replace `path/to/project/directory` with the actual path to the project.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_crewai/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Making the Setup Script Executable - Shell\nDESCRIPTION: Updates file permissions of 'setup.sh' to ensure it can be executed as a program. Requires bash or compatible shell on Linux or macOS. The key parameter is the script filename; successful execution results in the script being executable by the user. Input should be the correct file path, and this command will not work if the file doesn't exist or the user lacks permission.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_llama_index/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Installing composio-openai Python Plugin via pip\nDESCRIPTION: Installs the Composio Python package along with its specific OpenAI plugin using pip. This is an alternative installation method if direct OpenAI integration is required.\nSOURCE: https://github.com/composiohq/composio/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-openai\n```\n\n----------------------------------------\n\nTITLE: Executing the Setup Script (Shell)\nDESCRIPTION: Runs the `setup.sh` script located in the current directory. This script is responsible for setting up the necessary environment and installing dependencies for the Lead Generator Agent. It's expected that the `.env` file will be filled with secrets after this step.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/lead_generator_agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Initializing Gemini/Composio Clients (Python)\nDESCRIPTION: Imports required classes from `google.genai` and `composio_gemini`. It then initializes the Gemini client (`genai.Client`) with a Gemini API key and the Composio toolset (`ComposioToolSet`) with a Composio API key. These clients are necessary for interacting with the respective services.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/gemini.mdx#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom google.genai import types\nfrom google import genai\nfrom composio_gemini import Action, ComposioToolSet, App\n\nclient = genai.Client(api_key=\"<gemini-api-key>\")\ntoolset = ComposioToolSet(api_key=\"<composio-api-key>\")\n```\n\n----------------------------------------\n\nTITLE: Running Resume Matching Agent Python Script using Shell\nDESCRIPTION: Executes the main Python script responsible for launching the Resume Matching Agent. This command assumes all dependencies are pre-installed and the environment is configured, including the .env file holding secret keys. The script analyzes resumes and matches them with job listings using Composio and ChatGPT. Output depends on script implementation; errors may occur if required configurations are missing.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/resume_matching/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/advanced_agents/resume_matching/main.py\n```\n\n----------------------------------------\n\nTITLE: Granting Execute Permissions to Setup Script (Shell)\nDESCRIPTION: This command modifies the file permissions of `setup.sh`, adding execute permission (`+x`) for the owner. This step is necessary on Linux or macOS systems to allow the script to be run directly.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_autogen/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies using Pip (Bash)\nDESCRIPTION: This command uses pip, the Python package installer, to install all the libraries specified in the `requirements.txt` file. This is a standard step for setting up Python projects and ensures all necessary dependencies for the AI agent are available.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/assignment-agent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Executing setup.sh to Install Dependencies - Shell\nDESCRIPTION: This snippet runs the `setup.sh` shell script, which typically installs required packages and prepares the project environment as specified. It assumes the script is present and already marked as executable. The user must ensure environment variables and secrets are set up as described elsewhere in the documentation.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running the Image Search Python Script - Shell\nDESCRIPTION: This shell snippet runs the main Python script for the image search application using the project-specific path. Python 3.8 or higher must be installed, along with all dependencies provided by the setup.sh script. The command assumes that the current working directory contains the 'cookbook/examples/image_search/main.py' script or that the relative path is correct. The script is expected to launch the image search agent as described in the guide.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_llamaindex/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/image_search/main.py\n```\n\n----------------------------------------\n\nTITLE: Installing Composio LangChain Package and Connecting GitHub Account\nDESCRIPTION: Commands for installing the Composio OpenAI package, connecting a GitHub account, and viewing available applications for integration.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/julep/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composio LangChain package\npip install composio-openai\n\n# Connect your GitHub account\ncomposio-cli add github\n\n# View available applications you can connect with\ncomposio-cli show-apps\n```\n\n----------------------------------------\n\nTITLE: Running the Main Meeting Agent Python Script (Shell)\nDESCRIPTION: This command executes the Python script `main.py` located within the project structure using the Python interpreter. It requires Python to be installed, all project dependencies to be available (usually installed via `setup.sh`), and the `.env` file to be configured with necessary secrets. This script serves as the entry point for the Meeting Agent application.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/sales_kit/meeting_agent/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/advanced_agents/sales_kit/meeting_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Executing Environment Setup Script - Shell\nDESCRIPTION: This shell command runs the setup.sh script, which is typically used to configure the environment and install all necessary dependencies listed within the script. The script should handle environment initialization, dependency installation (e.g., via pip or apt), and possibly environment variable creation. This assumes that the script has already been made executable and that the user's shell supports the sh/shebang execution.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_langchain/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n\n```\n\n----------------------------------------\n\nTITLE: Running the PR Agent Python Script using Shell\nDESCRIPTION: This shell command executes the main Python application script (`main.py`) for the PR agent using the `python` interpreter. It assumes Python 3.8+ is installed, dependencies are met via `setup.sh`, and the required secrets are configured in the `.env` file.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_autogen/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/pr_agent_autogen/main.py\n```\n\n----------------------------------------\n\nTITLE: Installing Composio and GitHub Setup\nDESCRIPTION: Commands for installing the Composio Pydantic-AI package and connecting a GitHub account for agent interactions.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/pydanticai/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composio Pydantic-AI package\npip install composio-pydanticai\n\n# Connect your GitHub account\ncomposio add github\n\n# View available applications you can connect with\ncomposio apps\n```\n\n----------------------------------------\n\nTITLE: Running Security Analysis Script in Shell\nDESCRIPTION: This command executes the main Python script to start the security analysis process.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/vibe_security_agent/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Installing E2B Workspace Extension\nDESCRIPTION: Command to install the E2B workspace extension for Composio\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/workspaces/workspaces.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-core[e2b]\n```\n\n----------------------------------------\n\nTITLE: MCP Tools Installation Command\nDESCRIPTION: Placeholder for the installation command that should be generated from mcp.composio.dev website.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/mcp/claude.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nYour generated code\n```\n\n----------------------------------------\n\nTITLE: Execute Setup Script (Shell)\nDESCRIPTION: Runs the 'setup.sh' script located in the current directory. This script is intended to set up the necessary environment, install dependencies (likely from 'requirements.txt'), and prepare for running the Python agent. It expects a '.env' file to be filled with secrets after execution.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_openai/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Importing Base Packages for Code Execution Agent\nDESCRIPTION: Imports the essential libraries needed for the Code Execution Agent project. Both implementations include environment handling and AI model integration.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/code-execution-agent.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom composio_crewai import Action, App, ComposioToolSet\nfrom crewai import Agent, Crew, Process, Task\nfrom dotenv import load_dotenv\nfrom langchain_openai import ChatOpenAI\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport dotenv from 'dotenv';\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { AgentExecutor, createOpenAIFunctionsAgent } from \"langchain/agents\";\nimport { pull } from \"langchain/hub\";\nimport { LangchainToolSet } from \"composio-core\";\n\ndotenv.config();\n```\n\n----------------------------------------\n\nTITLE: Running Setup Script in Shell\nDESCRIPTION: Command to execute the setup.sh script which configures the environment, installs dependencies, logs into Composio, and adds required tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/code-analysis/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing the Setup Script (Shell)\nDESCRIPTION: This command runs the `setup.sh` script located in the current directory. The script is expected to set up the necessary environment and install dependencies for the Scheduler Agent project. Requires the script to have execute permissions.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_langgraph/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for AI Project\nDESCRIPTION: A requirements file listing the necessary Python packages for an AI project. It includes CrewAI for agent orchestration, LangChain with OpenAI integration for language model interactions, and python-dotenv for loading environment variables from a .env file.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/rag_agent/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomposio-crewai\ncrewai\nlangchain-openai\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Visualizing OAuth Flow with Mermaid Diagram\nDESCRIPTION: Sequence diagram showing the complete OAuth flow from user initiation to success confirmation, including redirects through custom domain and Composio backend.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/white-labelling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant User\n    participant App as Your App\n    participant OAuth as OAuth Service\n    participant YourDomain as yourapp.com/redirect\n    participant Composio as backend.composio.dev\n    \n    User->>App: 1. Initiates connection\n    App->>OAuth: 2. Redirects to consent screen\n    User->>OAuth: 3. Grants permission\n    OAuth->>YourDomain: 4. Redirects with auth code\n    YourDomain->>Composio: 5. Forwards to Composio backend\n    Composio->>OAuth: 6. Exchanges code for tokens\n    Composio->>Composio: 7. Creates Connection\n    Composio->>App: 8. Returns to your app\n    App->>User: 9. Shows success\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server via Package Managers (Bash)\nDESCRIPTION: These commands initiate the Next.js development server. Use the command corresponding to the package manager configured for your project (npm, yarn, pnpm, or bun). Once executed, the application typically becomes accessible at http://localhost:3000.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/vercel/nextjs-vercel-demo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\n# or\nyarn dev\n```\n\nLANGUAGE: bash\nCODE:\n```\n# or\npnpm dev\n```\n\nLANGUAGE: bash\nCODE:\n```\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub tools from Composio\nDESCRIPTION: Retrieve specific GitHub actions from Composio's toolset, specifically the ability to star a repository. This code initializes the ComposioToolSet and fetches the GitHub repository starring action.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/camel/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncomposio_toolset = ComposioToolSet()\ntools = composio_toolset.get_actions(\n    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Star Repository Tool\nDESCRIPTION: Retrieves the specific GitHub tool for starring repositories using the ComposioToolSet.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/smolagents.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntools = composio_toolset.get_tools(actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER])\n```\n\n----------------------------------------\n\nTITLE: Running Python CRM Agent with Streamlit (Shell)\nDESCRIPTION: Command to execute the main Python application script (`main.py`) using the Streamlit framework. This launches the web-based chat interface for interacting with the CRM agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/sales_kit/CRM_agent/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nstreamlit run cookbook/python-examples/advanced_agents/sales_kit/CRM_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Running the PR Agent Python Script - Shell\nDESCRIPTION: Invokes the main Python script responsible for executing the PR agent workflow, using the standard Python interpreter. Dependency: Python (version 3.8+). Key parameter is the path to 'main.py', which must be provided relative to the current directory. This command runs the PR agent, which interacts with GitHub and Slack given properly configured environment variables.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_llama_index/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/pr_agent_llama_index/main.py\n```\n\n----------------------------------------\n\nTITLE: Running the Main Python Script (Shell)\nDESCRIPTION: This shell command executes the main Python script (`main.py`) for the Image Search Agent using the Python interpreter. It assumes Python 3.8+, necessary dependencies installed via `setup.sh`, and configured secrets in the `.env` file.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_crewai/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/image_search/main.py\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub Integration to Composio\nDESCRIPTION: Command to link your GitHub account to your default Composio Entity through OAuth flow.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/quickstart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposio add github\n```\n\n----------------------------------------\n\nTITLE: Running Calendar Agent Python Script\nDESCRIPTION: Command to execute the main Python script that implements the Calendar Agent functionality to convert to-do lists into Google Calendar events.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/llamaindex/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/quickstarters/calendar_agent/llamaindex/main.py\n```\n\n----------------------------------------\n\nTITLE: Running the Content Writing Agent Python Script using Shell\nDESCRIPTION: This command executes the main Python script (`main.py`) located within the specified directory structure. This starts the Content Writing Agent process, utilizing Composio, LlamaIndex, and Groq as configured.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/content_writing_agent/llamaindex/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/advanced_agents/content_writing_agent/llamaindex/main.py\n```\n\n----------------------------------------\n\nTITLE: Running Python Script with Poetry in Shell\nDESCRIPTION: Command to execute the main.py script using Poetry, which sets up a webhook listening to the Slack workspace.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/slack_calendar_agent/Readme.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npoetry run python main.py\n```\n\n----------------------------------------\n\nTITLE: Running the Main Python Agent Script (Shell)\nDESCRIPTION: Executes the main Python script (`main.py`) for the Lead Generator Agent using the Python interpreter. This command starts the agent, which is located in the specified path within the cookbook examples.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/lead_generator_agent/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/advanced_agents/lead_generator_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Application with Uvicorn (Shell/Python)\nDESCRIPTION: Starts the FastAPI-based backend using the Uvicorn ASGI server, enabling auto-reload for code changes and specifying port 8000 for incoming requests. Requires Python, FastAPI, and Uvicorn to be installed, and the virtual environment activated. Command-line flags control automatic reloads and network port. Input is command-line parameters, output is a running server accessible at http://localhost:8000.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/tweet-simulator/llama-4/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn backend_main:app --reload --port 8000\n```\n\n----------------------------------------\n\nTITLE: Setting Up Todo List for Calendar Agent\nDESCRIPTION: This code defines the todo list that will be converted into calendar events. The todo list includes time slots and associated activities, which the agent will parse and schedule in Google Calendar.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/calendar-agent.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Setup Todo\ntodo = \"\"\"\n    1PM - 3PM -> Code,\n    5PM - 7PM -> Meeting,\n    9AM - 12AM -> Learn something,\n    8PM - 10PM -> Game\n\"\"\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Setup Todo\nconst todo = `\n    1PM - 3PM -> Code solo\n    5PM - 7PM -> Meeting,\n    9AM - 12AM -> Learn something,\n    8PM - 10PM -> Game\n`;\n```\n\n----------------------------------------\n\nTITLE: Running the Setup Script to Configure the Environment – Shell\nDESCRIPTION: This snippet runs the setup.sh shell script, which is expected to provision the project environment and install dependencies. The snippet assumes setup.sh is present and executable in the current working directory. Inputs or configuration, like secret keys, should be supplied afterwards as indicated by related instructions.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/gemini/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n\n```\n\n----------------------------------------\n\nTITLE: Executing Repository Star Operation\nDESCRIPTION: Runs the agent with a specific task to star a GitHub repository.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/smolagents.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntask = \"Star a repo composiohq/composio on GitHub\"\nagent.run(task)\n```\n\n----------------------------------------\n\nTITLE: Run Slack Bot Agent Python Script (Shell)\nDESCRIPTION: Executes the main Python script 'slack_agent_openai.py' using the Python interpreter. This command starts the Slack Bot Agent application after the environment has been prepared by the 'setup.sh' script.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_openai/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/advanced_agents/slack_bot_agent/slack_agent_openai/slack_agent_openai.py\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable using Shell\nDESCRIPTION: This command grants execute permissions to the `setup.sh` script. This step is often necessary on Linux or macOS systems to allow the script to be run directly.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/content_writing_agent/llamaindex/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for LlamaIndex with Groq\nDESCRIPTION: This snippet lists the required Python packages for a project that uses LlamaIndex with Groq integration. It includes the core composio-llamaindex package, python-dotenv for environment variable management, and llama-index-llms-groq for Groq LLM integration with LlamaIndex.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sheet_analyst/llamaindex/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomposio-llamaindex\npython-dotenv\nllama-index-llms-groq\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Command to run the setup.sh script, which sets up the environment, installs dependencies, logs into Composio, and adds necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/trend_finder/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable - Shell\nDESCRIPTION: Uses the 'chmod' command to make 'setup.sh' executable on Unix-based systems. This step is required before the script can be run directly, particularly on Linux or macOS environments. No input parameters are needed besides the relative or absolute path to 'setup.sh'. Successful execution modifies filesystem permissions to allow running the script.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/lead_outreach_agent/llamaindex/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Initiating GitHub Connection Programmatically\nDESCRIPTION: Python code to programmatically initiate the GitHub connection and generate an authentication URL.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/smolagents.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrequest = composio_toolset.initiate_connection(app=App.GITHUB)\nprint(f\"Open this URL to authenticate: {request.redirectUrl}\")\n```\n\n----------------------------------------\n\nTITLE: Running Main Python Script using Shell\nDESCRIPTION: Shell command to execute the main Python script (`main.py`) using the Python interpreter. This script, located within the `cookbook/examples/image_search/` subdirectory, starts the Image Search Agent application after the environment has been set up.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_autogen/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/image_search/main.py\n```\n\n----------------------------------------\n\nTITLE: Executing the setup.sh Script - Shell\nDESCRIPTION: This snippet executes the `setup.sh` shell script for project setup. Running this script typically installs dependencies and initializes environment settings required by the PR agent. The operation assumes that the script is already executable and located in the current working directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_openai/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running Grok-3 Mini Python Script for Game Generation\nDESCRIPTION: This snippet runs the core Python script (`grok-3-mini.py`) that prompts the Grok-3 Mini model to develop a Flappy Bird Pygame application, saves the resulting code to flappy_bird.py, and attempts to execute it via ShellTool. Dependencies include activated virtual environment, all Python modules from requirements.txt, configured .env variables, a valid XAI API key, and Composio authentication. Input and output are handled within the script; any additional prompts or errors will appear in the terminal.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/grok/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython grok-3-mini.py\n```\n\n----------------------------------------\n\nTITLE: Running Code Analysis Script in Python\nDESCRIPTION: Command to execute the main Python script that performs the code analysis with Composio.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/code-analysis/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/quickstarters/code-analysis/main.py\n```\n\n----------------------------------------\n\nTITLE: Running Main Python Script in Shell\nDESCRIPTION: Command to execute the main Python script for the Trend Finder agent, located in the specified path within the project directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/trend_finder/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/quickstarters/trend_finder/main.py\n```\n\n----------------------------------------\n\nTITLE: Running the Python Calendar Agent Script\nDESCRIPTION: Shell command to execute the main Python script that creates a calendar agent to convert to-do lists into Google Calendar events.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/crewai/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/quickstarters/calendar_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script using Shell\nDESCRIPTION: This shell command executes the `setup.sh` script located in the current directory. This script is responsible for setting up the necessary environment, installing dependencies listed in `requirements.txt`, and potentially configuring other prerequisites for the Second Brain Agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Second_brain_Agent/crewai/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pnpm - Bash\nDESCRIPTION: This command installs all Node.js dependencies for the current project using the pnpm package manager. It is necessary to ensure all required modules for the Reddit research agent demo are present before running the demo. Running this assumes pnpm is already installed in the user's environment.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/reddit-research/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable on UNIX via Shell\nDESCRIPTION: This snippet shows how to grant execute permissions to 'setup.sh' using the chmod command on Linux or macOS. This is a prerequisite before running the script. No dependencies beyond basic UNIX utilities are required. The key parameter is the script filename, and the operation only modifies permissions, producing no output on success.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/recruiter_agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: API Key Custom Field Definition in YAML\nDESCRIPTION: Configuration for an API key custom field, including display name, description, and validation requirements\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/add-your-app.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n  - name: api_key\n    display_name: API Key\n    description: \"Your API key for authentication.\"\n    type: string\n    required: true\n    expected_from_customer: true\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script (Shell)\nDESCRIPTION: Runs the `setup.sh` script located in the current directory. This script typically handles environment setup tasks, such as creating a virtual environment, installing Python dependencies from `requirements.txt`, and potentially configuring environment variables.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/lead_outreach_agent/crewai/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making setup.sh Executable with Shell\nDESCRIPTION: Grants executable permissions to the setup.sh script on Unix-like systems using the chmod command. This step is often required before a shell script can be executed. The only input required is the script filename; no output is produced other than changing file metadata. The command must be run from the directory containing setup.sh.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_langchain/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies\nDESCRIPTION: List of required Python packages for the Composio project. Contains references to composio_llamaindex for LLM integration and python-dotenv for environment variable management.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/trend_finder/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomposio_llamaindex\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies from requirements.txt - Bash\nDESCRIPTION: This snippet demonstrates how to use pip to install all Python dependencies listed in the requirements.txt file. This step is essential to ensure that the environment has all required packages before running the application. Python and pip must be available in the system.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Podcast_summarizer_Agents/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running the Node.js Demo Script in Bash\nDESCRIPTION: Executes the main demo script `demo.mjs` using the Node.js runtime. This command starts the report template generator agent application. Prerequisites include having Node.js installed, completing the previous setup steps (cloning, dependency installation, and environment variable configuration).\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/report-template-generator-agent/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode demo.mjs\n```\n\n----------------------------------------\n\nTITLE: Running Calendar Agent Python Script\nDESCRIPTION: Command to execute the main Python script for the Calendar Agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/langgraph/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/quickstarters/calendar_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Authenticating GitHub Integration via CLI\nDESCRIPTION: Commands for logging into Composio and adding GitHub integration through the command line interface.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/smolagents.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposio login\ncomposio add github\n```\n\n----------------------------------------\n\nTITLE: Executing Recruiter Agent Python Script via Shell\nDESCRIPTION: This command runs the main Python script for the Recruiter Agent, which utilizes agentic frameworks like LlamaIndex and ChatGPT (as previously described in context). It requires Python installed, correct environment configuration, and all dependencies handled by 'setup.sh'. The input is a relative path to the script, and output depends on the script's runtime behavior.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/recruiter_agent/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/advanced_agents/recruiter_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Running the Slack Bot Python Agent Script - Shell\nDESCRIPTION: This snippet runs the main Python script responsible for launching the Slack Bot Agent, powered by LlamaIndex and possibly other frameworks. It expects all environment variables and prerequisites to be fulfilled (such as a completed .env file and installed Python dependencies). The primary input is the path to the Python script; successful execution starts the bot which interacts with Slack as per configuration.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_llamaindex/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/advanced_agents/slack_bot_agent/slack_agent_llamaindex/slack_agent_llamaindex.py\n```\n\n----------------------------------------\n\nTITLE: Running the Coinbase Crypto Kit Agent - Python Command (Shell)\nDESCRIPTION: This snippet demonstrates how to execute the main Python entry point for the Coinbase Crypto Kit Agent using the python executable from the shell. It assumes that all dependencies are installed, environment variables are configured, and the shell is in the correct directory. The script referenced must exist and is the main interface to the agent's functionality.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/coinbase/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npython cookbook/python-examples/advanced_agents/cryptokit/coinbase/main.py\n```\n\n----------------------------------------\n\nTITLE: Running RAG Agent Python Script in Shell\nDESCRIPTION: Command to execute the main Python script that runs the RAG agent. This should be done after setting up the environment and configuring the .env file with required secrets.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/rag_agent/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/rag_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Providing Input Variables for Podcast Summarization - Bash\nDESCRIPTION: This code snippet illustrates how to specify the YouTube URL and Slack channel as input variables required for the podcast summarization workflow. These variables are referenced by the application to identify which podcast to summarize and the Slack channel destination. Input values should be updated as needed for different runs.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Podcast_summarizer_Agents/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyoutube_url = https://www.youtube.com/watch?v=7T4-aEuGajI\\nslack_channel = \\\"a-sumary-channel\\\" (noticed a Typo).\n```\n\n----------------------------------------\n\nTITLE: Building Docker Images with Python Script\nDESCRIPTION: This command runs a Python script to build Docker images using the previously generated Dockerfiles.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/swe/dockerfiles/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython build.py\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs dependencies.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/youtube_slack_summary_agent/langgraph/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Cloning Project Repository with Shell Commands - Shell\nDESCRIPTION: These shell commands allow the user to clone the project's Git repository and change the current directory to the downloaded folder. Requires Git to be installed on the system. The user replaces <repository-url> with the actual URL of the project's repository. No output is produced if successful, but the project files become available locally. This prepares the user for subsequent setup steps.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/trading_agent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone <repository-url>\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Command to run the setup.sh script, which sets up the environment, installs dependencies, logs into Composio, and adds necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/presentation_agent/llama_index/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running the Scheduling Agent Demo Script (bash)\nDESCRIPTION: This command executes the main demo application script `demo.mjs` using the Node.js runtime. This starts the scheduling agent, which will then listen for incoming emails, process scheduling requests using AI, interact with Google Calendar, and send confirmations via Gmail as described in the setup guide. Requires Node.js to be installed and project dependencies to be previously installed via `pnpm install`.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/scheduling-agent/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode demo.mjs\n```\n\n----------------------------------------\n\nTITLE: Integrating GitHub Tools with Composio\nDESCRIPTION: Configuration for fetching GitHub-specific tools from Composio to enable repository starring functionality.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/camelai.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncomposio_toolset = ComposioToolSet()\ntools = composio_toolset.get_tools(\n    actions=[Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER]\n)\n```\n\n----------------------------------------\n\nTITLE: Starting Griptape Agent Chat Session\nDESCRIPTION: Code to initiate an interactive chat session with the configured Griptape agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/griptape.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nChat(agent).start()\n```\n\n----------------------------------------\n\nTITLE: Running the Slack Bot Agent Python Script (Shell)\nDESCRIPTION: This command executes the main Python script (`slack_agent_autogen.py`) using the Python interpreter. This script starts the Slack Bot Agent, which utilizes Composio and Autogen. Ensure the setup script has been run successfully and the `.env` file is populated before executing this command.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_autogen/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/advanced_agents/slack_bot_agent/slack_agent_autogen/slack_agent_autogen.py\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs dependencies.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/slack_calendar_agent/Readme.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Runs the 'setup.sh' script located in the current directory. This script is intended to set up the environment, install dependencies (likely from 'requirements.txt'), and potentially prepare configuration files like '.env'.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_langchain/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making the Setup Script Executable - Shell\nDESCRIPTION: These snippets illustrate how to modify permissions on the setup.sh script to make it executable on Unix-like operating systems, followed by executing the script to install necessary project dependencies and configure the environment. 'chmod +x' ensures the script has execute permissions, and './setup.sh' runs it. Dependencies for this action include a UNIX-like shell environment (Linux or macOS). The commands require that setup.sh is in the current directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_llamaindex/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Connecting GitHub Account using Composio CLI\nDESCRIPTION: Connects a user's GitHub account to Composio using the Composio command-line interface. This step is required before using GitHub tools within an agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposio add github # Run this in terminal\n```\n\n----------------------------------------\n\nTITLE: Running the Main Image Search Python Script - Shell\nDESCRIPTION: This shell command launches the primary Python script that executes the image search process using Composio and agentic frameworks. It assumes all dependencies are installed and environment variables set, typically requiring the user to have run the setup script beforehand. The key input is the Python script path. The command outputs logs or results related to the local image search operation. Python 3.8 or higher is required.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_langchain/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/image_search/main.py\n```\n\n----------------------------------------\n\nTITLE: Executing the Setup Script (Shell)\nDESCRIPTION: This shell command executes the `setup.sh` script located in the current directory. The script is responsible for setting up the project environment, installing dependencies listed in `requirements.txt`, and potentially performing other initialization tasks. It assumes the script has execute permissions and the `.env` file has been populated with necessary secrets.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_autogen/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Demo Script\nDESCRIPTION: Command to run the demo script for the Lead Generator Agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/lead_generator_agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode demo.mjs\n```\n\n----------------------------------------\n\nTITLE: Running the Youtube Summary Agent in Python\nDESCRIPTION: Command to execute the main Python script that runs the Youtube summary agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/youtube_slack_summary_agent/llama_index/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/quickstarters/transcript_insight_generator/llama_index/main.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables (.env)\nDESCRIPTION: Specifies the required environment variables to be placed in a `.env` file. These variables include API keys for OpenAI and Composio, and Solana wallet credentials (private key and address), which are necessary for the agents to authenticate and interact with services and the blockchain.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/solana/README.md#2025-04-23_snippet_2\n\nLANGUAGE: env\nCODE:\n```\n OPENAI_API_KEY=\n COMPOSIO_API_KEY=\n SOLANA_PRIVATE_KEY=\n SOLANA_WALLET_ADDRESS=\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Command to run the setup.sh script, which sets up the environment, installs dependencies, logs into Composio, and adds necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/customer_support/swarm/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script using Shell\nDESCRIPTION: This shell command executes the `setup.sh` script located in the current directory. This script is responsible for setting up the necessary environment and installing project dependencies listed in files like `requirements.txt`.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_autogen/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/langgraph/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pnpm (bash)\nDESCRIPTION: This command utilizes the pnpm package manager to install all the necessary Node.js dependencies specified in the project's `package.json` file (located in the current directory). This step must be performed after cloning the repository and navigating into the project folder.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/scheduling-agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Permissions for setup.sh Script with Shell\nDESCRIPTION: This shell command changes file permissions to make the setup.sh script executable on Linux or macOS. It is required only if the script lacks execute permissions. The command takes the filename as input and does not generate output on success, though errors occur if the file does not exist or the user lacks privileges.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/sales_kit/market_research_agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making the Setup Script Executable with Shell\nDESCRIPTION: Shows how to grant executable permissions to the setup.sh script on Unix-based systems using chmod. This step ensures the subsequent setup can be run as a shell script. Requires user to have appropriate file system permissions. Takes a file path as input and changes its permissions; no output if successful.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_crewai/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making the Setup Script Executable (Shell)\nDESCRIPTION: This command updates file permissions to make 'setup.sh' executable on Unix-like systems (Linux, macOS). It is required before the setup script can be run directly. This snippet requires the user to have proper permissions to change file modes in the target directory. The ./setup.sh file must exist in the current directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Second_brain_Agent/llamaindex/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Project Dependencies with pnpm - Bash\nDESCRIPTION: This snippet installs the project dependencies using pnpm, a JavaScript package manager, for the portfolio generator example. It assumes that pnpm is already installed globally, and that the current working directory contains a package.json file. No parameters are required. The output is a node_modules directory populated with required packages. Users must have internet access and sufficient permissions to install dependencies.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/portfolio-generator/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Main Python Script (Shell)\nDESCRIPTION: Executes the main Python application script 'main.py', located within the specified project subdirectory, using the Python interpreter. This command starts the Newsletter Summarizer agent after the environment has been set up and secrets configured.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_crewai/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_crewai/main.py\n```\n\n----------------------------------------\n\nTITLE: Invoking the Agent\nDESCRIPTION: Simple example showing how to invoke the agent with a user entity name.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langchain-js.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexecuteAgent(\"himanshu\")\n```\n\n----------------------------------------\n\nTITLE: Running the setup.sh Script (shell)\nDESCRIPTION: This snippet executes the setup.sh script, which is responsible for configuring the environment and installing dependencies. Assumes that setup.sh has executable permissions. Outputs installation and setup logs to the terminal; errors if dependencies are missing or environment is not configured.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_llamaindex/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing the Setup Script using Shell\nDESCRIPTION: This command runs the `setup.sh` script located in the current directory. This script is expected to perform initial configuration tasks for the Slack agent, such as potentially creating or prompting for environment variable settings.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_computer_use/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running Data Analyst Agent Script in Python\nDESCRIPTION: Command to execute the main Python script for the Data Analyst agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sheet_analyst/llamaindex/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/data_analyst_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Executing Scheduler Agent Python Script via Shell\nDESCRIPTION: Launches the main Python script for the advanced Scheduler Agent example located at python/examples/advanced_agents/scheduler_agent/scheduler_agent_crewai/main.py. Requires Python 3.8 or above, with dependencies installed via setup.sh. Inputs and outputs are managed within the Python script; no shell-level arguments specified. Possible limitation: Path must be correct relative to working directory; dependencies are configured via setup and .env file.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_crewai/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/advanced_agents/scheduler_agent/scheduler_agent_crewai/main.py\n```\n\n----------------------------------------\n\nTITLE: Installing Composio Dependencies\nDESCRIPTION: Basic installation commands for the core Composio framework and its crew.ai plugin.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/swe/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install swekit composio-core\npip install crewai composio-crewai\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Command to run the setup.sh script, which sets up the environment, installs dependencies, logs into Composio, and adds necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/Readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Changing to Project Directory with Shell\nDESCRIPTION: Demonstrates how to navigate to the project directory containing the setup and main scripts. No dependencies are required, but the directory must exist with the given files. The command uses a relative or absolute path and does not produce output if successful; errors result if the path does not exist.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_crewai/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems before running it.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sheet_analyst/crewai/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers. Supports npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/chat-with-sheets/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Making the Setup Script Executable (Shell)\nDESCRIPTION: The snippet adds executable permissions to the `setup.sh` script using `chmod +x`. This command is typically required on Unix-based systems to enable execution of the setup file, a dependency for initializing the project environment. No outputs are directly produced; errors occur if the script is missing or permissions are denied.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/sales_assistant_agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Composio and Connecting GitHub Account\nDESCRIPTION: This snippet shows how to install the Composio LangChain package, connect a GitHub account, and view available applications for connection.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/google/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composio LangChain package\npip install composio-google\n\n# Connect your GitHub account\ncomposio-cli add github\n\n# View available applications you can connect with\ncomposio-cli show-apps\n```\n\n----------------------------------------\n\nTITLE: Running the SWE Agent via PNPM\nDESCRIPTION: This command executes the `start` script defined in the project's `package.json` file using `pnpm`. This typically starts the Software Engineering agent, which will then prompt the user for repository and issue details.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/swe/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/sql_agent_plotter_crewai/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Grants execute permission to the `setup.sh` script. This command is typically required on Linux or macOS systems before the script can be run directly.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/content_writing_agent/phidata/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems before running it.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/llamaindex/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing the Main Python Script – Shell\nDESCRIPTION: This command runs the project's main Python file (main.py) using the system's default Python interpreter. It assumes that the environment has been previously set up and any required configurations or environment variables are already in place. The snippet expects Python 3.8 or higher to be installed and available.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/gemini/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython main.py\n\n```\n\n----------------------------------------\n\nTITLE: Executing Environment Setup with Shell Script\nDESCRIPTION: Executes the setup.sh shell script, which is responsible for preparing the environment and installing all necessary dependencies for the Image Search Agent. Assumes that setup.sh has execute permissions, and all dependencies/prerequisites are correctly listed in the script. Outputs installation logs and errors to stdout/stderr.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_langgraph/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Runs the `setup.sh` script located in the current directory. This script is expected to set up the necessary environment, potentially installing dependencies from `requirements.txt` and configuring secrets via a `.env` file.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/content_writing_agent/phidata/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script for Environment Configuration\nDESCRIPTION: Command to run the setup script that configures the environment and installs dependencies.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/transcript_insight_generator/llama_index/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running Research Assistant Script in Python\nDESCRIPTION: Command to execute the main Python script for the research assistant project, which will populate the Notion page with data.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/Readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/research_assistant/main.py\n```\n\n----------------------------------------\n\nTITLE: Installing Composio Griptape Integration\nDESCRIPTION: Commands for installing the Composio Griptape package and connecting GitHub integration. Shows how to view available apps for connection.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/griptape.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio_griptape\n# Connect your GitHub so agents can use it. \ncomposio add github\n# Check all different apps which you can connect with\ncomposio show-apps\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies using pip and Shell\nDESCRIPTION: This command uses `pip`, the Python package installer, to install all the libraries and dependencies listed in the `requirements.txt` file. This step ensures that the Python environment has all the necessary packages for the Slack agent script to run correctly.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_computer_use/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Executing the Project Setup Script (Shell)\nDESCRIPTION: Makes the `setup.sh` script executable using `chmod +x` and then runs the script. This script likely handles dependency installation and environment setup required for the agents.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/solana/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x setup.sh\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running the Main Python Sales Assistant Agent Script (Shell)\nDESCRIPTION: This snippet launches the main Sales Assistant Agent application using Python. The script path `cookbook/python-examples/advanced_agents/sales_assistant_agent/main.py` is relative to the current directory. Python 3.8+ must be installed, and required dependencies should have been set up previously. Standard input/output streams provide runtime communication or errors.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/sales_assistant_agent/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/advanced_agents/sales_assistant_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Environment Variables - Environment File\nDESCRIPTION: This snippet provides the format of the .env file required by the agent. It defines the environment variables OPENAI_API_KEY and COMPOSIO_API_KEY, which are essential for the agent's operation. The user must supply valid API keys for these variables. The .env file must be created in the project directory before running the agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/coinbase/README.md#2025-04-23_snippet_2\n\nLANGUAGE: env\nCODE:\n```\n OPENAI_API_KEY=\\n COMPOSIO_API_KEY=\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable (Shell)\nDESCRIPTION: This shell command uses `chmod +x` to grant execute permissions to the `setup.sh` file. This step is necessary on Linux and macOS systems before running the setup script.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_crewai/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/slack_calendar_agent/Readme.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable (Shell)\nDESCRIPTION: Uses the `chmod` command to add execute permissions (`+x`) to the `setup.sh` script. This step is necessary on Unix-like operating systems (Linux, macOS) to allow the script to be run directly from the command line.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_phidata/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Grants execute permissions to the 'setup.sh' script using the chmod command. This step is often necessary on Linux or macOS systems to allow the script to be run directly from the command line.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_langchain/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository and Navigating Directory in Bash\nDESCRIPTION: Clones the `composio-js` repository from GitHub using Git and then changes the current working directory to the specific `report-template-generator-agent` example folder within the cloned repository. This is the initial step required to obtain the project files for the demo.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/report-template-generator-agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/composioHQ/composio-js.git\ncd composio/js/examples/report-template-generator-agent\n```\n\n----------------------------------------\n\nTITLE: Filtering Actions by Tags\nDESCRIPTION: Example of filtering actions based on specific tags like Asana tasks\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/julep.mdx#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nactions = toolset.get_tools(apps=[App.ASANA], tags=[Tag.ASANA_TASKS])\n```\n\n----------------------------------------\n\nTITLE: Running Human in the Loop Python Agent - Shell\nDESCRIPTION: This snippet launches the agent application by running the specified Python file with the `python` command. It assumes that all dependencies are installed and any secret configuration (e.g., in `.env`) is complete. The input is the path to the main Python script for the agent; the output is the running agent, which performs human-in-the-loop automated PR review via Slack.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/AI_PM_agent/llamaindex/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/human_in_the_loop/main.py\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script using Shell\nDESCRIPTION: Shell command to run the `setup.sh` script located in the current directory. This script is responsible for setting up the necessary environment and installing dependencies required by the Image Search Agent project.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_autogen/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Runs the 'setup.sh' script using './setup.sh' in a shell environment. This script typically handles environment setup and dependency installation for the project, followed by configuring the '.env' file.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Command to run the setup.sh script for environment setup, dependency installation, and tool configuration.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/langgraph/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running Main Python Script for Customer Support Agent\nDESCRIPTION: Command to execute the main Python script for the Customer Support Agent project.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/customer_support/swarm/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/quickstarters/customer_support/swarm/main.py\n```\n\n----------------------------------------\n\nTITLE: Configuring FlyIO Workspace\nDESCRIPTION: Configuration for deploying the agent on FlyIO with custom network ports and handlers.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/swe/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom composio import ComposioToolSet, WorkspaceType\n\ncomposio_toolset = ComposioToolSet(\n    workspace_config=WorkspaceType.FlyIO(\n        image=\"composio/composio\",\n        ports=[\n            {\n                \"ports\": [\n                    {\"port\": 443, \"handlers\": [\"tls\", \"http\"]},\n                ],\n                \"internal_port\": 80,\n                \"protocol\": \"tcp\",\n            }\n        ],\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Making the setup.sh Script Executable – Shell\nDESCRIPTION: This snippet uses chmod with the +x flag to make the setup.sh shell script executable. It is intended for use on Linux or macOS systems, ensuring setup.sh has execution permissions. Input is the script filename, and on successful execution, setup.sh can be run directly as a program. No dependencies are required beyond typical POSIX-compliant systems.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/gemini/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n\n```\n\n----------------------------------------\n\nTITLE: Running the Content Writing Agent Python Script\nDESCRIPTION: Executes the main Python application script (`main.py`) for the content writing agent using the specified path. This command assumes Python 3.8+ is installed and all dependencies from `setup.sh` are met. It starts the agent process, likely utilizing Phidata.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/content_writing_agent/phidata/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/advanced_agents/content_writing_agent/phidata/main.py\n```\n\n----------------------------------------\n\nTITLE: Running Main Python Script using Shell\nDESCRIPTION: This shell command executes the main Python application script (`main.py`) located within the specified project subdirectory. This launches the Second Brain Agent after the environment has been set up.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Second_brain_Agent/crewai/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/advanced_agents/Second_brain_Agent/llamaindex/main.py\n```\n\n----------------------------------------\n\nTITLE: Configuring XAI API Key in .env File using Dotenv\nDESCRIPTION: This snippet places the XAI API key configuration line into the .env file, allowing the Python script and dependent tools to authenticate with the XAI API as required by the Grok-3 Mini model. There are no dependencies except for the presence of the .env file, and the key must be replaced by the user. The script reads this value to access the API.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/grok/README.md#2025-04-23_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nXAI_API_KEY=your_xai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Permissions on setup.sh (shell)\nDESCRIPTION: This command modifies the permissions of the setup.sh script to make it executable. Required on Unix-like systems (Linux or macOS) before running the setup file. The file must exist in the current directory. No output if successful; errors if permission is denied or file not found.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_llamaindex/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Composio and Setting Up GitHub Connection\nDESCRIPTION: Commands for installing the Composio Smol Agents package and connecting a GitHub account.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/smolagent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composio Smol Agents package\npip install composio-smol\n\n# Connect your GitHub account\ncomposio add github\n\n# View available applications you can connect with\ncomposio apps\n```\n\n----------------------------------------\n\nTITLE: Running SQL Agent Python Script\nDESCRIPTION: Command to execute the main Python script that runs the SQL agent for database operations and query execution.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/sql_agent_plotter_crewai/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/sql_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory using Shell\nDESCRIPTION: This command changes the current working directory in the shell to the specified project directory (`path/to/project/directory`). This is a necessary step to ensure subsequent setup commands are executed within the context of the project files.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_computer_use/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: This command makes the setup.sh script executable on Linux or macOS systems, which is necessary before running the script.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/twitter_posting_agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version with Terminal Command\nDESCRIPTION: Command to verify Node.js installation by checking the installed version. Node.js 10 or higher is required for MCP tools compatibility.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/mcp/cursor.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Installing Composio SDK via NPM\nDESCRIPTION: Command to install the Composio SDK core package using npm package manager.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install composio-core\n```\n\n----------------------------------------\n\nTITLE: Running the Main Python Agent Script (Shell)\nDESCRIPTION: This command executes the main Python script (`main.py`) for the Human in the Loop agent, located within the `cookbook/examples/human_in_the_loop/` path relative to the project's root. Ensure Python 3.8+ is installed and all dependencies from `setup.sh` are installed and the `.env` file is configured.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/AI_PM_agent/crewai/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/human_in_the_loop/main.py\n```\n\n----------------------------------------\n\nTITLE: Executing the Setup Script (Shell)\nDESCRIPTION: Runs the `setup.sh` script located in the current directory. This script is expected to set up the necessary environment, install dependencies (likely from `requirements.txt`), and potentially configure other prerequisites for the project.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/loan_underwriter_agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Granting Execute Permissions to Setup Script (Shell)\nDESCRIPTION: This command uses `chmod +x` to add execute permissions to the `setup.sh` file. This step is often necessary on Unix-like systems (Linux, macOS) before executing a shell script directly.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/sales_kit/meeting_agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Viewing Lyzr Agent Execution Output\nDESCRIPTION: Terminal output showing the successful execution of the Lyzr agent's task to star a GitHub repository, including execution time and confirmation details.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/lyzr.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSTART PIPELINE Composio Lyzr :: start time : 1713439069.754745\nSTART TASK Github Starring :: start time : 1713439069.7548192\noutput : {'execution_details': {'executed': True}, 'response_data': ''}\nEND TASK Github Starring :: end time :  1713439073.961327 :: execution time : 4.206507921218872\nEND PIPELINE Composio Lyzr :: end time :  1713439073.961421 :: execution time : 4.206676006317139\nTask completed\n[{'task_id': UUID('d0280a9d-89ef-4f8b-8145-58588aebcb6c'), 'task_output': {'execution_details': {'executed': True}, 'response_data': ''}}]\n```\n\n----------------------------------------\n\nTITLE: Exporting a Composio Local Action Class in Python\nDESCRIPTION: Shows how to export the custom action class from the `actions/__init__.py` file within the tool's directory (`composio/tools/local/<tool_name>/actions/__init__.py`). This makes the action class importable when defining the tool.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/adding-local-tool.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom .<action_name> import <ActionName>\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables (.env)\nDESCRIPTION: This snippet illustrates the required format for the `.env` file. It specifies the environment variables `COMPOSIO_API_KEY` and `OPENAI_API_KEY` that must be defined with their corresponding API keys to allow the application to authenticate with Composio and OpenAI services.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/meeting_brief_agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nCOMPOSIO_API_KEY=<your-composio-api-key>\nOPENAI_API_KEY=<your-openai-api-key>\n```\n\n----------------------------------------\n\nTITLE: Running Setup Script using Bash\nDESCRIPTION: This snippet runs the setup script (setup.sh) to create and activate a Python virtual environment (~/.venvs/grok_game_builder), install dependencies from requirements.txt, log into Composio, and generate a .env file if absent. Requires bash, access to the repository, and the presence of the setup.sh file. No parameters are required, and it only needs to be run once during initial project setup.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/grok/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change directory to the project location where the necessary files are stored.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/perplexity_for_hackernews/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Starting and Testing Documentation Server for Composio\nDESCRIPTION: Commands for starting the documentation development server and checking for broken links before submitting a PR.\nSOURCE: https://github.com/composiohq/composio/blob/master/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake docs-dev\n# or \n# fern docs dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nfern docs broken-links\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory with Bash\nDESCRIPTION: This snippet uses the 'cd' command in a shell environment to enter the specific agents-sdk directory, which contains the AI Game Builder agent's code. Ensure the directory path is correct relative to where you cloned the repository. This command is foundational for all subsequent setup and execution steps.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/agents-sdk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd python/examples/advanced_agents/game_builder/agents-sdk\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable using Shell\nDESCRIPTION: Shell command to grant execute permissions to the `setup.sh` script. This is often required on Unix-like systems (Linux/macOS) before running a shell script to ensure the system allows its execution.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_autogen/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for OpenAI and Google Cloud Integration\nDESCRIPTION: This text lists Python package dependencies, likely for installation via pip (e.g., in a requirements.txt file). It includes 'composio-openai' for Composio's OpenAI integration, 'google-cloud' for Google Cloud Platform services, 'google-auth' for general Google authentication, and 'google-auth-ouathlib' specifically for OAuth 2.0 support with Google services. These packages must be installed in the Python environment for the project to utilize the corresponding APIs.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Sheets_to_SQL_Agent/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomposio-openai\ngoogle-cloud\ngoogle-auth\ngoogle-auth-ouathlib\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems before running it.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/code-analysis/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Checking Out Release Branch - Shell\nDESCRIPTION: This command illustrates switching to a release-specific branch in git, following the naming convention 'release/v{version}' (e.g., 'release/v0.2.23'). It requires Git to be installed and the local repository to be up to date. The branch must match the version being released as determined previously, serving as an isolated environment for final release preparations.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/release.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrelease/v{version} (eg. release/v0.2.23)\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies for Composio\nDESCRIPTION: Commands for setting up the documentation development environment, including installing uv, Bun, TypeDoc, and generating SDK and tool documentation.\nSOURCE: https://github.com/composiohq/composio/blob/master/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://bun.sh/install | bash\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun install typedoc typedoc-plugin-markdown\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd fern/ && make sdk-generate\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake tools-generate\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g fern-api\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable - Shell\nDESCRIPTION: Modifies the file permissions of 'setup.sh' to allow execution on Linux or macOS systems. The command is necessary if execution permissions have not already been granted, a common constraint on Unix-like operating systems. No parameters are required besides the correct path to the script and sufficient system privileges.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/deepseek_research/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Starting Slackbot Agent with Python in Bash\nDESCRIPTION: This command runs the main application script `main.py` using the Python interpreter. This initiates the Slackbot agent, enabling it to connect to Slack and start answering questions based on the configured codebase and Composio integration. Requires Python installation.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slackbot_code_expert/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Navigating Directories and Executing Setup Scripts with Shell\nDESCRIPTION: This set of shell commands demonstrates how to navigate to the project's root directory and prepare the environment by adjusting permissions, running a setup script, and subsequently launching the Python scheduler agent. These steps require a relevant shell environment (Linux or macOS) and Python 3.8+, as well as existing setup files (`setup.sh`, `.env`) and main Python script. Input parameters include file paths; outputs include an installed environment and launched scheduler. Limitations include OS dependency and correct file presence.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/human_in_the_loop_scheduler/llamaindex/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n\n```\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n\n```\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n\n```\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/advanced_agents/human_in_the_loop_scheduler/llamaindex/main.py\n\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Uses the 'chmod +x' command in a shell environment (like Linux or macOS) to grant execute permissions to the 'setup.sh' script. This step is necessary if the script is not already executable.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running the AI Assignment Agent Script (Bash)\nDESCRIPTION: This command executes the main Python script `assignment_agent.py` using the Python interpreter. Running this script starts the AI agent application, which will then interactively prompt the user to select an operation (create or review assignments) and provide necessary details.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/assignment-agent/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython assignment_agent.py\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for composio_llamaindex Application\nDESCRIPTION: A requirements.txt file that specifies the necessary Python packages for the application. It includes composio_llamaindex for LlamaIndex integration and python-dotenv for loading environment variables from .env files.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/startup_trend_generator/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomposio_llamaindex\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Running Setup Script with Bash\nDESCRIPTION: This snippet invokes the 'setup.sh' bash script to automate creation of a virtual Python environment, installation of dependencies, and the generation of a .env file. Make sure the script has executable permissions (use 'chmod +x setup.sh' if needed). All dependencies must be correctly listed within the script for the environment to be properly set up.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/agents-sdk/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Ensures the setup.sh script has executable file permissions before execution on Unix-based systems. No input arguments required; affects only the setup.sh file in the current or specified directory. Outputs no text but allows subsequent execution of setup.sh. Requires the user or process to have sufficient privileges to modify file permissions. Limitations: Only relevant on Linux/macOS; Windows uses different execution policies.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_crewai/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running the Slack Bot Agent Main Python Script | Python\nDESCRIPTION: This Python command runs the main entry point for the Slack Bot Agent: 'python/examples/advanced_agents/slack_bot_agent/slack_agent_ollama/main.py'. Precondition: virtual environment should be set up, dependencies installed, and the .env file configured. This script is expected to launch the bot using all previously completed setup steps. Outputs are determined by the bot's internal logging and interactions.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_ollama/readme.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npython python/examples/advanced_agents/slack_bot_agent/slack_agent_ollama/main.py\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Access Token Environment Variable\nDESCRIPTION: This shell command exports the `GITHUB_ACCESS_TOKEN` environment variable, setting it to the user's personal GitHub access token. This is required for the agent to interact with GitHub issues.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/swe/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport GITHUB_ACCESS_TOKEN=<github_access_token>\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems before running it.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/content_hook_generator_agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies\nDESCRIPTION: This snippet lists the required Python packages for the project. It includes LangChain-related packages, OpenAI and Groq integrations, and a package for managing environment variables.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/youtube_slack_summary_agent/langgraph/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomposio-langgraph\nlangchain-openai\nlangchain-groq\nlangchain-community\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Executing the Presentation Agent Python Script\nDESCRIPTION: Command to run the main Python script that initializes the presentation agent to process Google Sheets data and generate presentations.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/presentation_agent/crewai/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/quickstarters/presentation_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Dependencies List for Composio Project\nDESCRIPTION: List of required Python packages including core Composio modules, language model integrations, and supporting libraries. Includes dependencies for LangChain, LlamaIndex, OpenAI, and Crew AI integrations.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/sql_agent_plotter_llama_index/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomposio-core\ncomposio-langchain\ncomposio-llamaindex\npython-dotenv\nlangchain-openai\ncrew-ai\n```\n\n----------------------------------------\n\nTITLE: Setting Execute Permissions for Setup Script in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/customer_support/swarm/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change the current directory to the project location where essential files are stored.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sheet_analyst/llamaindex/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable (Shell)\nDESCRIPTION: Grants execute permissions to the `setup.sh` script using the `chmod` command. This step is necessary on Linux or macOS systems to allow the script to be run directly.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/lead_generator_agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pip in Shell\nDESCRIPTION: This command installs the required Python packages listed in the requirements.txt file.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/vibe_security_agent/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Navigating, Preparing, and Executing Setup Script - Shell\nDESCRIPTION: These shell commands enable users to navigate to the project directory, ensure the setup script has executable permissions, and run the setup process which installs dependencies for the Image Search agent. Dependencies are typically specified in requirements files and environment configuration must be set after execution. Parameters include the directory path and script filenames as needed. These commands should be run in a Unix shell (Linux/macOS) and require Python 3.8+, with proper permissions on the target folder.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_langchain/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Linux/macOS\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems before running it.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/code_execution_agent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script (Shell)\nDESCRIPTION: This command runs the `setup.sh` script located in the current directory. The script is expected to set up the necessary environment and install project dependencies, likely listed in a `requirements.txt` file. After execution, the `.env` file needs to be populated with secrets.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/AI_PM_agent/crewai/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running setup.sh Script - Shell\nDESCRIPTION: This shell snippet runs the 'setup.sh' script from the current directory to initialize the environment and install all dependencies required for the Slack Bot Agent. Dependencies and installation steps are likely defined within 'setup.sh'. Input: Executable 'setup.sh'; Output: Sets up virtual environments, installs dependencies, and configures project settings as needed. Any failures or missing dependencies will result in error messages during execution.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_crewai/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies\nDESCRIPTION: This snippet enumerates the required Python packages for the project. It includes AI-related libraries like crewai and langchain_openai, utility packages like python-dotenv, and custom modules like composio_core and composio-crewai.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/code-analysis/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncrewai\ncrewai[tools]\npython-dotenv\ncomposio_core\ncomposio-crewai\nlangchain_openai\n```\n\n----------------------------------------\n\nTITLE: Running the LiveKit Agent in Console Mode using Bash\nDESCRIPTION: Executes the Python script (`main.py`) containing the LiveKit agent definition using the `console` argument. This starts the agent in a terminal-based interactive mode where the user can speak to the agent and receive responses.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/livekit.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython main.py console\n```\n\n----------------------------------------\n\nTITLE: Serving Ollama and Pulling Mistral Model | Shell\nDESCRIPTION: This command sequence starts the Ollama background server and pulls the 'mistral' LLM model for use. Dependencies: Ollama must be installed and accessible in PATH. The 'serve' command launches the server, '&' backgrounds it, while 'pull mistral' downloads the specified model. Designed for bash/Unix shells.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_ollama/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nollama serve & ollama pull mistral\n```\n\n----------------------------------------\n\nTITLE: Executing the Composio Lead Outreach Agent Demo Script - Bash\nDESCRIPTION: This snippet runs the demo application of the Lead Outreach Agent using Node.js with an ECMAScript module file. It requires that dependencies have been installed and that all relevant environment variables (such as COMPOSIO_API_KEY) are defined in a .env file in the project directory. The expected output is the operational startup of the application, typically logging to the console. Ensure Node.js is installed and the demo.mjs script is present.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/lead_outreach_agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode demo.mjs\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable using Shell\nDESCRIPTION: This shell command grants execute permissions to the `setup.sh` script. This is often required on Linux or macOS systems before the script can be run directly.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Second_brain_Agent/crewai/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change directory to the project location before running the agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/deep_researcher/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd path/to/your/project\n```\n\n----------------------------------------\n\nTITLE: Installing Composio OpenAI Agents Package via pip\nDESCRIPTION: Command to install the composio_openai_agents package using pip package manager.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/openai_agents/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio_openai_agents\n```\n\n----------------------------------------\n\nTITLE: Setting Up Execution Permission and Installing Dependencies - Shell\nDESCRIPTION: This snippet sets executable permissions on the 'setup.sh' script and runs it to install required dependencies. The script should be located in the current directory. The 'chmod +x' command makes the script executable, and './setup.sh' starts the installation. Requires Unix-like shell access and assumes 'setup.sh' manages all necessary installations.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x setup.sh\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change to the directory containing the project files including setup.sh, main.py, requirements.txt, and README.md.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/code_execution_agent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Running the Python Streamlit Application (Shell)\nDESCRIPTION: Launches the main Python application using the Streamlit framework. It executes the `main.py` script located within the specified path, starting the Loan Underwriter Agent interface. Requires Streamlit and other project dependencies to be installed (handled by `setup.sh`).\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/loan_underwriter_agent/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nstreamlit run cookbook/python-examples/advanced_agents/loan_underwriter_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Listing Development Tool Dependencies for Python\nDESCRIPTION: This snippet lists Python packages required for various development tools, including build tools, linters, and virtual environment management.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/swe/tests/test_docker/requirements.txt#2025-04-23_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nbuild==0.10.0\ncachetools==5.3.0\ncfgv==3.3.1\nchardet==5.1.0\nclick==8.1.3\ncolorama==0.4.6\ndistlib==0.3.6\nfilelock==3.11.0\nidentify==2.5.22\nnodeenv==1.7.0\npip-compile-multi==2.6.2\npip-tools==6.13.0\nplatformdirs==3.2.0\npre-commit==3.2.2\npyproject-api==1.5.1\npyproject-hooks==1.0.0\npyyaml==6.0\ntoposort==1.10\ntox==4.4.11\nvirtualenv==20.21.0\nwheel==0.40.0\n```\n\n----------------------------------------\n\nTITLE: Running Project Setup Script with Shell\nDESCRIPTION: Executes the setup.sh shell script in the current directory to perform environment setup and dependency installation for the Scheduling Agent. There are no direct inputs or parameters; the outcome depends on the internal logic of setup.sh. Prerequisites include valid file permissions and presence of setup.sh in the working directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_langchain/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory using Shell - Shell\nDESCRIPTION: This snippet provides the shell command to change the current working directory to the specified project folder where essential files like setup.sh, main.py, requirements.txt, and README.md are located. The user must replace 'path/to/project/directory' with the actual path to their project. No dependencies are required aside from a POSIX-compliant shell. This command is a prerequisite for running any subsequent setup or execution scripts in the correct directory context.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_llamaindex/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems before running it.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/perplexity_for_hackernews/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running Setup Script for Environment Preparation in Shell\nDESCRIPTION: This shell command executes the 'setup.sh' script, initiating the environment configuration and dependency installation needed for the Recruiter Agent. It assumes the script is present and executable in the current directory. The command produces console output as the script runs; errors or completion messages depend on the script's internals.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/recruiter_agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Make Setup Script Executable (Shell)\nDESCRIPTION: Grants execute permission to the 'setup.sh' script. This command is often required on Linux or macOS systems to allow the shell script to be run directly.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_openai/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Updating Composio App Enums via Command Line in Bash\nDESCRIPTION: Provides the command `composio apps update` used to automatically update the `App` and `Action` enums in `composio/client/enums.py` after adding a new local tool or action. This ensures the new components are recognized by the Composio client.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/adding-local-tool.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncomposio apps update\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory in Shell\nDESCRIPTION: Command to change to the project directory where required files are located.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh file executable on Linux or macOS systems before running it.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Starting a Chat Session\nDESCRIPTION: Initializes a chat session with the Google AI model\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/google.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Start a chat session\nchat = model.start_chat()\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Installation of necessary Python packages composio-agno and openai using pip package manager.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/agno.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-agno openai\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages and Connecting Tools\nDESCRIPTION: Commands for installing necessary packages and connecting GitHub tools for Composio integration.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/groq.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install composio-langchain\npip install langchain-groq\n\n#Connect your GitHub so agents can use it\ncomposio add github\n\n#Check all different apps which you can connect with\ncomposio apps\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install composio-core\nnpm install langchain\n\n// Connect your GitHub so agents can use it\ncomposio add github\n\n// Check all different apps which you can connect with\ncomposio apps\n```\n\n----------------------------------------\n\nTITLE: Filtering Specific Actions\nDESCRIPTION: Example of restricting agent to specific actions like creating GitHub issues\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/julep.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# To restrict agents from executing any actions, filter specific actions \nactions = composio_toolset.get_tools(actions=[Action.GITHUB_CREATE_ISSUE])\n```\n\n----------------------------------------\n\nTITLE: Setting Development Mode for SWE Agent in Shell\nDESCRIPTION: Command to run the SWE agent in development mode, ensuring new tool changes are reflected in the Docker container.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/swe/DEVELOPMENT.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nCOMPOSIO_DEV_MODE=1\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems. This is required before running the script.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/startup_trend_generator/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory using Shell\nDESCRIPTION: This command changes the current working directory to the specified project directory containing the necessary files (`setup.sh`, `main.py`, etc.). This is a prerequisite step before running setup or execution scripts.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/content_writing_agent/llamaindex/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Running Setup Script in Shell\nDESCRIPTION: Command to execute the setup.sh script which sets up the environment, installs dependencies, logs into composio and adds necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sheet_analyst/crewai/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Command to run the setup.sh script which sets up the environment, installs dependencies, logs into composio and adds necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/Notion_todo_list_agent/llamaindex/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating Project Directory with Shell Commands (shell)\nDESCRIPTION: This snippet guides users to change the current working directory to the project root, where main files such as setup.sh, main.py, and requirements.txt are located. Ensures that subsequent commands for setup and execution are run in the correct context. Expects the path to be replaced with the actual project directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_llamaindex/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems before running it.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/sql_agent_plotter_langchain/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script (Shell)\nDESCRIPTION: Runs the 'setup.sh' script located in the current directory. This script is responsible for setting up the project environment, which typically includes installing required dependencies listed in `requirements.txt` and potentially other setup tasks. Requires `.env` file to be populated with secrets afterward.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_crewai/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running the setup.sh Script - Shell\nDESCRIPTION: This snippet executes the 'setup.sh' script, which typically installs dependencies and prepares the runtime environment for the Slack Bot example. Requires the script to be located in the current working directory and may need to be made executable beforehand (see previous snippet). The output will vary by the script's internal logic.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Changing Project Directory - Shell\nDESCRIPTION: This shell snippet navigates to the directory containing the project files, such as setup.sh and slack_agent_crewai.py. The user must replace 'path/to/project/directory' with the actual relative or absolute path to the project. No dependencies are required for this basic directory change; the command should be run before executing setup or Python scripts. Expected input: the correct path to the project directory; no output is produced unless the path is invalid.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_crewai/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable (Shell)\nDESCRIPTION: Command to grant execute permissions to the `setup.sh` script. This step is often necessary on Linux or macOS systems to allow the script to be run directly from the command line.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/sales_kit/CRM_agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Pre-PR Code Quality Checks for Composio\nDESCRIPTION: Commands to run before pushing code in a pull request to ensure code quality. These checks include cleaning the build, formatting code, and running various linters.\nSOURCE: https://github.com/composiohq/composio/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake clean\nmake format-code\nmake check-code\n```\n\n----------------------------------------\n\nTITLE: Installing Composio Core Package via PNPM\nDESCRIPTION: This command installs the `composio-core` package globally using the `pnpm` package manager. This is the first step in setting up the SWE Development Kit environment.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/swe/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -g composio-core\n```\n\n----------------------------------------\n\nTITLE: Installing Composio LiveKit Package using Bash\nDESCRIPTION: Installs the necessary `composio-livekit` Python package using pip. This package provides the integration tools required to use Composio within a LiveKit agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/livekit.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-livekit\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js Installation Command\nDESCRIPTION: Command to check the installed version of Node.js on the system to ensure compatibility with MCP tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/mcp/claude.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory using Shell\nDESCRIPTION: Demonstrates changing the current working directory to the project's root location where all required initialization scripts and resources are present. This is a prerequisite for subsequent shell commands to ensure correct file context. Input is a path to the directory, no additional dependencies are needed. No output is produced but subsequent commands are executed in the intended workspace.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/resume_matching/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems. This step may be necessary before running the setup script.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/Readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running pylint Linter with Tox (Bash)\nDESCRIPTION: Runs the 'pylint' linter using the 'tox' automation tool via the 'pylint' environment defined in 'tox.ini'. Pylint performs static code analysis, checking for programming errors, enforcing coding standards, and looking for code smells.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/development.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntox -e pylint\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Command to run the setup.sh script that configures the environment and installs dependencies.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/youtube_slack_summary_agent/llama_index/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable (Shell)\nDESCRIPTION: This shell command uses `chmod +x` to grant execute permissions to the `setup.sh` script. This step is necessary on Linux and macOS systems to allow the script to be run directly from the command line.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_autogen/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making setup.sh Executable - Shell\nDESCRIPTION: Modifies file permissions to make 'setup.sh' executable on Linux or macOS systems. This is required before running the setup file, ensuring the shell can execute it directly. No input parameters other than the filepath; produces no output unless errors (e.g., missing file or permission denied).\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_autogen/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script (Shell)\nDESCRIPTION: Runs the `setup.sh` script located in the current directory. This script is expected to set up the project environment, install required dependencies (likely from `requirements.txt`), and potentially prompt the user to configure secrets in a `.env` file.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/openai/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing the Setup Script (Shell)\nDESCRIPTION: This command runs the `setup.sh` script located in the current directory. The script is responsible for setting up the necessary environment and installing project dependencies listed in `requirements.txt`. It likely prepares the `.env` file for secrets.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_autogen/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Environment Setup Script (Shell)\nDESCRIPTION: Runs the 'setup.sh' script. This script is responsible for setting up the necessary environment and installing project dependencies listed in 'requirements.txt'. After execution, the '.env' file needs to be manually populated with secrets.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_llamaindex/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running Main Python Script in Shell\nDESCRIPTION: Executes the main Python application script 'main.py' for the image search example using the 'python' interpreter in a shell environment. This command starts the Image Search Agent after the environment setup is complete and the '.env' file is configured.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/image_search/main.py\n```\n\n----------------------------------------\n\nTITLE: Running the Market Research Agent Node.js Application in Bash\nDESCRIPTION: This Bash command executes the demo.mjs file using Node.js. It requires that all dependencies are installed and environment variables, such as COMPOSIO_API_KEY and OPENAI_API_KEY, are set in a .env file within the project directory. Input: None directly; expects setup from prior steps. Output: Launches the Market Research Agent application via Node.js.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/market_research_agent/readme..md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode demo.mjs\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Contributors Link using HTML\nDESCRIPTION: This HTML snippet creates a clickable link targeting the GitHub contributors graph for the 'composiohq/composio' repository. It embeds an image sourced from 'contributors-img.web.app' which dynamically generates an image listing the project contributors.\nSOURCE: https://github.com/composiohq/composio/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://github.com/composiohq/composio/graphs/contributors\">\n  <img src=\"https://contributors-img.web.app/image?repo=composiodev/composio\" alt=\"List of Contributors\" />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for Composio Project\nDESCRIPTION: This snippet lists the required Python packages for the Composio project. It includes 'composio-llamaindex' for LlamaIndex integration, 'llama-index-readers-youtube-transcript' for processing YouTube transcripts, and 'python-dotenv' for managing environment variables.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/transcript_insight_generator/llama_index/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\ncomposio-llamaindex\nllama-index-readers-youtube-transcript\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Composio and Smol Integration\nDESCRIPTION: Installs the necessary Python packages composio-smol and smolagents using pip.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/smolagents.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-smol smolagents\n```\n\n----------------------------------------\n\nTITLE: Creating Mastra Project with JavaScript Tooling - Bash\nDESCRIPTION: Initializes a new Mastra project using the create-mastra command-line tool via npx. This prepares the environment for building and deploying Mastra agents and requires Node.js and npx to be installed. Input: Command in terminal. Output: A scaffolded Mastra project directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/mastra.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-mastra@latest\n\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Tox (Bash)\nDESCRIPTION: Executes the project's unit tests using the 'tox' automation tool via the 'test' environment defined in 'tox.ini'. This command is used to verify that code changes work as expected and often includes checking test coverage.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/development.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntox -e test\n```\n\n----------------------------------------\n\nTITLE: Markdown Card Group Structure for Tool Documentation\nDESCRIPTION: A markdown structure using CardGroup and Card components to display various tool integrations with their respective icons and documentation links.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tools/introduction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<CardGroup>\n<Card title=\"Twitter Tool\" href=\"/tools/twitter\" icon=\"fa-brands fa-x-twitter\">\nView the authentication and actions for the Twitter tool.\n</Card>\n\n<Card title=\"Gmail Tool\" href=\"/tools/gmail\" icon=\"fa-solid fa-envelope\">\nView the authentication and actions for the Gmail tool.\n</Card>\n\n<Card title=\"Github Tool\" href=\"/tools/github\" icon=\"fa-brands fa-github\">\nView the authentication and actions for the Github tool.\n</Card>\n\n<Card title=\"Notion Tool\" href=\"/tools/notion\" icon=\"fa-solid fa-book\">\nView the authentication and actions for the Notion tool.\n</Card>\n\n<Card title=\"Google Sheets Tool\" href=\"/tools/google-sheets\" icon=\"fa-solid fa-file-spreadsheet\">\nView the authentication and actions for the Google Sheets tool.\n</Card>\n\n<Card title=\"Shopify Tool\" href=\"/tools/shopify\" icon=\"fa-brands fa-shopify\">\nView the authentication and actions for the Shopify tool.\n</Card>\n\n<Card title=\"Stripe Tool\" href=\"/tools/stripe\" icon=\"fa-brands fa-stripe\">\nView the authentication and actions for the Stripe tool.\n</Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory with Shell\nDESCRIPTION: Changes the current working directory to the root of the project, ensuring that subsequent commands execute in the correct location. This step is necessary for accessing the included setup and main script files. No arguments are required; replace 'path/to/project/directory' with the actual project path. The command does not produce output or have dependencies beyond the standard shell.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_langchain/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Command to run the setup.sh script which sets up the environment and installs all necessary dependencies for the SQL agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/sql_agent_plotter_langchain/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing setup.sh Script in Shell\nDESCRIPTION: This command runs the setup.sh script, which sets up the environment, installs dependencies, logs in to Composio, and adds necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making the setup.sh Script Executable - Shell\nDESCRIPTION: This shell command uses `chmod` to grant executable permissions to the `setup.sh` script on Linux or macOS systems. Permission adjustment is necessary before running the script to ensure it can be executed. The command requires that the user is already in the project directory where `setup.sh` is located.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_openai/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Changing Project Directory | Shell\nDESCRIPTION: This snippet navigates to the specified project directory using the 'cd' command. Replace 'path/to/project/directory' with your actual path. It is typically used to position the shell in the correct context before executing project-specific commands.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_ollama/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory - Shell\nDESCRIPTION: This snippet shows how to navigate to the directory containing key project files (`setup.sh`, `main.py`, etc.) using the `cd` command. It ensures that all subsequent operations are performed within the correct folder. The user needs to substitute `path/to/project/directory` with the actual path to their project. No prerequisites beyond standard Unix shell environments.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Making The Setup Script Executable and Running Setup - Shell\nDESCRIPTION: These snippets ensure that the setup.sh script has executable permissions and then execute it to prepare the environment, installing required dependencies and setting up configurations for the Slack Bot Agent. The first command uses chmod to make the script executable, and the second runs the script. No parameters are directly taken by the script in this example, but environmental preparation (e.g., Python version and a completed .env file) is implied. The output is a ready-to-run workspace with all dependencies installed.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_llamaindex/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Project Setup Script using Shell\nDESCRIPTION: Invokes the setup.sh script to automate environment preparation, dependency installation, Composio authentication, and tool addition. This script may prompt for credentials and configure environment variables as necessary for the Resume Matching Agent. Dependencies and tools required by the Python components should be installed through this setup. The script's behavior depends on its internal commands.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/resume_matching/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Up Permissions and Running Shell Setup Script - Shell\nDESCRIPTION: These shell commands grant executable permission to the setup script and execute it in the current directory. Assumes a 'setup.sh' file exists. This step installs required dependencies or performs project-specific setup tasks. The script may prompt the user for input or credentials during execution.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/trading_agent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x setup.sh\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script for Environment Preparation in Shell\nDESCRIPTION: Runs the setup.sh script in the current directory, which typically installs required dependencies and prepares the environment for the Scheduler Agent project. Assumes setup.sh is present and executable. Outputs setup logs or errors to the console. Limitations: Will fail if the script contains errors or dependencies are missing. No additional parameters are required.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_crewai/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running the Main Python Script (Shell)\nDESCRIPTION: Executes the primary Python application script (`main.py`) for the Scheduler Agent using the Python interpreter. This command launches the agent, which presumably interacts with Composio, PhiData, and ChatGPT to process emails and schedule events. Assumes Python 3.8+ and successful completion of the setup script.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_phidata/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython python/examples/advanced_agents/scheduler_agent/scheduler_agent_phidata/main.py\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Overview\nDESCRIPTION: Complete directory tree showing the organization of documentation files including API specs, assets, frameworks, generators and content files\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/CLAUDE.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├── Makefile\n├── api   # The API specs and their overrides are saved here.\n│   ├── openapi-overrides.yml\n│   ├── openapi-v3-overrides.yml\n│   ├── openapi-v3.json\n│   └── openapi.json\n├── assets\n│   ├── images\n│   └── videos\n├── authentication\n│   ├── connection.mdx\n│   ├── injecting-credentials.mdx\n│   ├── integration.mdx\n│   ├── introduction.mdx\n│   ├── non-oauth.mdx\n│   ├── oauth.mdx\n│   └── white-labelling.mdx\n├── changelogs\n│   └── overview.mdx\n├── custom.js\n├── docs.yml  # Specifies the configuration, structure, slugs, tabs and more for the documentation. The main config file.\n├── favicon.png\n├── fern.config.json\n├── fonts\n│   ├── Inter Bold.woff2\n│   └── Inter Regular.woff2\n├── frameworks  # This directory contains the individual documentation for each of the frameworks that Composio supports.\n├── generators\n│   ├── api_doc_generator   # Contains code for auto-generating the SDK documentation for Python and TypeScript.\n│   └── tool_doc_generator  # Contains code for auto-generating the documentation for all the Composio tools.\n├── generators.yml  # Specifies the OpenAPI spec as well as overrides that we can specify for it.\n├── getting-started\n│   ├── installation.mdx\n│   ├── quickstart.mdx\n│   └── welcome.mdx\n├── guides\n├── logo\n│   ├── dark.svg\n│   ├── light.svg\n│   └── logo.svg\n├── mcp\n│   ├── claude.mdx\n│   ├── cursor.mdx\n│   ├── introduction.mdx\n│   └── windsurf.mdx\n├── pyproject.toml\n├── scripts\n│   └── pull-openapi-spec.sh\n├── sdk   # Contains the documentation for Python and TypeScript SDKs individually. These documentations are auto-generated from reading the SDK.\n│   └── composio\n├── styles.css\n├── tool-calling\n│   ├── add-your-app.mdx\n│   ├── custom-tools.mdx\n│   ├── executing-tools.mdx\n│   ├── fetching-tools.mdx\n│   ├── introduction.mdx\n│   └── processing-tools.mdx\n├── tools   # Contains all the autogenerated .mdx files for each tool.\n├── triggers\n│   └── triggers.mdx\n├── tutorials\n│   └── getting-started\n├── typedoc.json\n├── uv.lock\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies\nDESCRIPTION: Core package dependencies required for the Composio project. Includes CrewAI for agent workflows, python-dotenv for environment management, composio-crewai integration, and langchain_openai for LLM interactions.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/code_execution_agent/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncrewai\npython-dotenv\ncomposio-crewai\nlangchain_openai\n```\n\n----------------------------------------\n\nTITLE: Installing composio-core Python Package via pip\nDESCRIPTION: Installs the core Composio Python package using the pip package manager. This is the first step for getting started with Composio in a Python environment.\nSOURCE: https://github.com/composiohq/composio/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-core\n```\n\n----------------------------------------\n\nTITLE: Composio JS SDK Todo List\nDESCRIPTION: Markdown checklist tracking development tasks for the Composio JavaScript SDK, including completed and pending items.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/TO_DOs.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] Decrease bundle size more to less than 500 kb.[DONE]\n- [ ] Add support via browserify[DONE]\n- [ ] Add test for connected account execution\n- [ ] Add example test for cloudflare, vercel, server components. Check release with different run time\n- [ ] Move away from axios\n- [ ] Optimise code from openapi spec\n- [ ] Move away from class based to functional based code\n- [ ] Add react code library\n- [ ] Add more edge cases\n- [ ] Sign JS SDK CLIs\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory Using Shell\nDESCRIPTION: This shell snippet demonstrates how to change the current working directory to where the project files such as setup.sh, main.py, requirements.txt, and README.md are located. The command requires the user to substitute 'path/to/project/directory' with the actual directory path. This is a prerequisite step before executing setup or agent scripts. Input is the target directory path; output is the shell's current directory updated accordingly.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/domain_deep_research/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/youtube_slack_summary_agent/llama_index/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler Settings\nDESCRIPTION: Configure the Wrangler settings in toml file including worker name, main file, compatibility settings, and AI binding.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/cloudflare.mdx#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nname = \"github-agent\"\nmain = \"worker.js\"\ncompatibility_date = \"2024-09-23\"\ncompatibility_flags = [\"nodejs_compat\"]\n\n[vars]\nCOMPOSIO_API_KEY = \"<your-composio-api-key>\"\n\n[ai]\nbinding = \"AI\"\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Directory for Integration (Bash)\nDESCRIPTION: These shell commands create and enter a new directory for your custom Composio integration. Preconditions: you should be inside the Composio plugins directory. This sets up your workspace to implement a new framework adapter. Inputs: directory name. Outputs: a new integration directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir composio_yourframework\ncd composio_yourframework\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable using Shell\nDESCRIPTION: Shows how to update permissions of the setup.sh script to make it executable on Linux or macOS systems. This step ensures the script can be directly run from the terminal, which is typically necessary prior to invoking setup scripts. The main parameter is the setup script's filename. No output unless there are permission issues; this step requires shell access.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/resume_matching/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Project Root (Bash)\nDESCRIPTION: This command changes the current working directory to the specified project path (`path/to/project/directory`). It's a prerequisite step before running setup or execution scripts located within that directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_langgraph/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory (Shell)\nDESCRIPTION: Changes the current working directory in the terminal to the specific path where the Lead Outreach Agent project files (`setup.sh`, `main.py`, etc.) are located. Users need to replace `path/to/project/directory` with the actual path on their system.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/lead_outreach_agent/crewai/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project Environment with chmod and Shell - Shell Script\nDESCRIPTION: This snippet enables execution permission for the setup.sh script and then runs it to set up the project environment. It requires that the user has a Unix-like environment with chmod and shell access. The setup.sh script must exist in the directory. No input parameters are required beyond file presence; the outputs are environment setup as determined by the setup.sh script.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/coinbase/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x setup.sh\\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: This command runs the setup.sh script, which sets up the environment, installs dependencies, logs in to Composio, and adds necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/twitter_posting_agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment with Shell Script (Shell)\nDESCRIPTION: Runs the setup.sh shell script to install dependencies, prepare the environment, and activate the virtual environment located at ~/.venvs/tweet_simulator. This step is required before running the main application and after ensuring the script is executable. The setup.sh script should be present and contain proper setup and environment activation logic.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/tweet-simulator/llama-4/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running the Setup Script - Shell\nDESCRIPTION: Executes the 'setup.sh' file in the current directory to install necessary dependencies and perform environment setup for the project. Dependency: An existing executable shell script named 'setup.sh'. It should be run after permissions have been set with chmod. The expected output is a fully configured environment for subsequent Python execution.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_llama_index/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Displaying CSV Data Sample with Personal Information\nDESCRIPTION: This CSV data sample contains 10 rows of personal information including ID, first name, last name, email address, and a numeric value. Each row represents a single person's record.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/sql_agent_plotter_langchain/log.txt#2025-04-23_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\n1, Ainslee, Hanner, ahanner0@edublogs.org, 96306\n2, Christabel, Maleham, cmaleham1@china.com.cn, 68295\n3, Maurizia, O'Donnell, modonnell2@blogs.com, 76965\n4, Boycie, Fleisch, bfleisch3@bigcartel.com, 49013\n5, Sullivan, Jacques, sjacques4@comcast.net, 10828\n6, Alley, Thieme, athieme5@marriott.com, 48305\n7, Lannie, St Angel, lstangel6@godaddy.com, 34307\n8, Margot, O'Neal, moneal7@cpanel.net, 68410\n9, Bernardo, Bletsoe, bbletsoe8@mit.edu, 32329\n10, Dorris, Watling, dwatling9@furl.net, 44987\n```\n\n----------------------------------------\n\nTITLE: GitHub PR Creation Command\nDESCRIPTION: Bash command template for creating a pull request using GitHub CLI with a structured format including summary and test plan sections\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/CLAUDE.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngh pr create --title \"[type]: [title]\" --body \"$(cat <<'EOF'\n## Summary\n[Brief description of changes]\n\n## Test plan\n[How to verify changes]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory (Shell)\nDESCRIPTION: Command to change the current working directory to the specific path where the CRM agent project files (`setup.sh`, `main.py`, etc.) are located. This is the initial step before running setup or execution commands.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/sales_kit/CRM_agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Installing Composio and LlamaIndex Libraries using pip\nDESCRIPTION: Installs the necessary Python packages (`composio-llamaindex` and `llama-index`) using the pip package manager. These packages are required to integrate Composio tools with LlamaIndex agents in a Python environment.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/llamaindex.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-llamaindex llama-index\n```\n\n----------------------------------------\n\nTITLE: Executing Natural Language Tasks with the IBM Agent\nDESCRIPTION: Invoke the configured agent with a natural language command to perform the GitHub repository starring action.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/ibm.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse = llm_with_tools.invoke(\"Star the composiohq/composio repository\")\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama on Linux via Curl | Shell\nDESCRIPTION: This snippet performs a one-line installation of Ollama on a Linux system by fetching and executing the official install script with curl. It requires network access and curl pre-installed. Expected input is the command line; output is the executed installation steps for Ollama. Do not use on untrusted environments.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_ollama/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL https://ollama.com/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory (Shell)\nDESCRIPTION: This command changes the current working directory to the specified project directory containing the necessary files (`setup.sh`, `main.py`, `requirements.txt`, `README.md`). Replace `path/to/project/directory` with the actual path on your system.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/AI_PM_agent/crewai/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory (Shell)\nDESCRIPTION: Changes the current working directory to the specific path where the Newsletter Summarizer project files (`setup.sh`, `main.py`, `requirements.txt`, `README.md`) are located. This is a prerequisite step before running setup or execution scripts.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_crewai/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Setting Execute Permissions for Setup Script\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems before running it.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/presentation_agent/crewai/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable on Linux/macOS with Shell\nDESCRIPTION: Shows how to modify permissions on the setup.sh shell script so it can be executed directly in Unix-based environments. Requires shell access and existing setup.sh file. Expects the script to be present in the current directory and outputs nothing unless there is a permission issue.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_langgraph/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory (Shell)\nDESCRIPTION: Changes the current working directory to the specific path where the project files (`setup.sh`, `main.py`, `requirements.txt`, `README.md`) are located. This is a preliminary step required before executing subsequent setup or run commands.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_phidata/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Changing Directory for Project Setup - Shell\nDESCRIPTION: Navigates to the project directory containing necessary files (setup script, main Python script, requirements, and README) using the 'cd' command. Prerequisites include knowing the correct filesystem path and command-line access. This operation prepares the terminal session for further setup and script execution.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/lead_outreach_agent/llamaindex/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script (Shell)\nDESCRIPTION: Runs the `setup.sh` script located in the current directory. This script is expected to perform environment setup tasks, such as creating virtual environments, installing dependencies from `requirements.txt`, and potentially preparing configuration files like `.env`.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_phidata/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing setup.sh for Environment Setup | Shell\nDESCRIPTION: This one-line shell command runs the 'setup.sh' script presumed to install dependencies and initialize the environment for the Slack Bot Agent. Assumes 'setup.sh' is present and executable. Output will vary based on script contents.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_ollama/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Dockerfiles with Python Script\nDESCRIPTION: This command runs a Python script to generate Dockerfiles in the 'generated/' directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/swe/dockerfiles/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython generate.py\n```\n\n----------------------------------------\n\nTITLE: Checking black Formatting with Tox (Bash)\nDESCRIPTION: Checks Python code style using 'black' via the 'tox' automation tool without applying changes. This command uses the 'black-check' environment defined in 'tox.ini' and is useful for CI pipelines or pre-commit hooks to verify code style consistency.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/development.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntox -e black-check\n```\n\n----------------------------------------\n\nTITLE: HTML Image Links with Dark/Light Mode Support\nDESCRIPTION: HTML markup for displaying the Composio logo with dark and light mode variants using conditional rendering based on GitHub's theme settings.\nSOURCE: https://github.com/composiohq/composio/blob/master/HACKTOBER_FEST_2024.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n  <a href=\"https://composio.dev/#gh-dark-mode-only\">\n    <img src=\"./python/docs/imgs/composio_white_font.svg\" width=\"318px\" alt=\"Composio logo\" />\n  </a>\n  <a href=\"https://composio.dev/#gh-light-mode-only\">\n    <img src=\"./python/docs/imgs/composio_black_font.svg\" width=\"318px\" alt=\"Composio Logo\" />\n  </a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Defining PraisonAI Agent Configuration\nDESCRIPTION: YAML configuration for defining agent roles, goals, and tasks for GitHub repository interaction.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/praisonai.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Github Management\"\n\nroles:\n  developer:\n    role: \"Developer\"\n    goal: \"An expert programmer\"\n    backstory: \"A developer exploring new codebases and having certain tools available to execute different tasks.\"\n    tasks:\n      star_github:\n        description: \"Star a repo composiohq/composio on GitHub\"\n        expected_output: \"Response whether the task was executed.\"\n\"\"\" + tool_section_str\n\nprint(agent_yaml)\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell Script\nDESCRIPTION: This shell snippet demonstrates how to change (cd) to the project's root directory, ensuring the user is within the correct path to access setup and main files. It requires the user to replace 'path/to/project/directory' with the actual path to the repository. No additional dependencies are needed. Expected input is a valid filesystem path; output is a changed working directory context.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/recruiter_agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Installing Composio and LlamaIndex Libraries (TypeScript Placeholder)\nDESCRIPTION: Placeholder indicating future availability of instructions for installing relevant TypeScript packages for Composio and LlamaIndex integration.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/llamaindex.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncoming soon\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to navigate to the project directory where the setup.sh, main.py, requirements.txt, and README.md files are located.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/llamaindex/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: This command makes the setup.sh script executable on Linux or macOS systems.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/Notion_todo_list_agent/crewai/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems before running it.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/Notion_todo_list_agent/llamaindex/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable (Shell)\nDESCRIPTION: Grants execute permissions to the `setup.sh` script. This command is typically required on Linux or macOS systems to allow the script to be run.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/loan_underwriter_agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory in Shell\nDESCRIPTION: Command to change into the project directory where the setup.sh, main.py, requirements.txt, and README.md files are located.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/transcript_insight_generator/langgraph/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable (Shell)\nDESCRIPTION: Uses the `chmod` command to add execute permissions (`+x`) to the `setup.sh` script. This step is often necessary on Linux and macOS systems to allow the script to be run directly.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/lead_outreach_agent/crewai/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running Setup Script for Presentation Agent\nDESCRIPTION: Command to execute the setup script that configures the environment, installs dependencies, logs into Composio, and adds necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/presentation_agent/crewai/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change the current directory to the project folder containing necessary files.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/youtube_slack_summary_agent/langgraph/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Executing the Setup Script (Shell)\nDESCRIPTION: Runs the `setup.sh` script located in the current directory. This script automates the environment setup, including creating a Python virtual environment, installing required dependencies (likely from `requirements.txt`), creating a template `.env` file for API keys, and making the `main.py` script executable.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/agents-mcp/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating Project Directory with Shell\nDESCRIPTION: Demonstrates how to change the terminal's working directory to the project root, which is required before executing other setup or run commands. Assumes prerequisite knowledge of terminal basics and the target directory structure. Takes the project directory path as input and prepares the context for subsequent commands.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_langgraph/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: HTML Navigation Links\nDESCRIPTION: Centered paragraph containing navigation links to key Composio resources including Quick Start guide, Dashboard, and Community Discord.\nSOURCE: https://github.com/composiohq/composio/blob/master/HACKTOBER_FEST_2024.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n  <a href=\"https://docs.composio.dev/introduction/intro/quickstart\">Quick Start</a> •\n  <a href=\"https://app.composio.dev/\">Dashboard</a> •\n  <a href=\"https://dub.composio.dev/discord\">Join Community</a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory using Shell\nDESCRIPTION: This shell command changes the current working directory to the specified project directory. This step is necessary to ensure subsequent commands are executed in the correct context where the project files reside.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_autogen/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: API Key Authentication Proxy Configuration in YAML\nDESCRIPTION: Example configuration for API key based authentication proxy settings, showing how to set up base URL and authorization headers\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/add-your-app.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproxy:\n  base_url: \"{{base_url}}\"\n  headers:\n    Authorization: \"{{api_key}}\"\n```\n\n----------------------------------------\n\nTITLE: Executing Agno Agent\nDESCRIPTION: Execute the agent with a specific task to star a GitHub repository.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/agno.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nagent.print_response(\"Can you star ComposioHQ/composio repo?\")\n```\n\n----------------------------------------\n\nTITLE: Listing Type Checking Dependencies for Python\nDESCRIPTION: This snippet lists Python packages required for type checking and related functionalities, including mypy and type stubs.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/swe/tests/test_docker/requirements.txt#2025-04-23_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\ncffi==1.15.1\ncryptography==40.0.1\nmypy==1.2.0\nmypy-extensions==1.0.0\npycparser==2.21\ntypes-contextvars==2.4.7.2\ntypes-dataclasses==0.6.6\ntypes-setuptools==67.6.0.7\ntyping-extensions==4.5.0\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory (Shell)\nDESCRIPTION: This command changes the current working directory to the specific path where the Slack Bot Agent project files (`setup.sh`, `slack_agent_autogen.py`, `requirements.txt`, `README.md`) are located. Replace `path/to/project/directory` with the actual path on your system.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_autogen/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Linux/macOS\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems using chmod.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/transcript_insight_generator/llama_index/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory - Shell\nDESCRIPTION: This snippet provides the shell command to change the active directory to the project location containing setup and configuration files (`setup.sh`, `main.py`, `requirements.txt`, and `README.md`). Users must replace the placeholder path with their actual project directory. This operation is a prerequisite for all subsequent setup and runtime commands.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_openai/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change the current directory to the project folder containing setup files and scripts.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/research_assistant/research_assistant_crewai/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Setting Execute Permissions for Setup Script using Shell\nDESCRIPTION: This command grants execute permissions to the `setup.sh` script. This step is often necessary on Linux or macOS systems before the script can be run directly.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/indie_hacker_agent/langgraph/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Command to run the setup.sh script which configures the environment, installs dependencies, logs into Composio, and adds required tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/presentation_agent/langgraph/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running the To Do List Agent in Shell\nDESCRIPTION: Command to execute the Python script that runs the To Do List Agent after environment setup and configuration.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/Notion_todo_list_agent/llamaindex/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/quickstarters/Notion_todo_list_agent/llamaindex/main.py\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable (Shell)\nDESCRIPTION: This command grants execute permissions to the `setup.sh` script on Linux or macOS systems. This step is necessary before running the script if it doesn't already have execute permissions.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/AI_PM_agent/crewai/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Cloning and Navigating Composio Repository (Bash)\nDESCRIPTION: This snippet demonstrates initial environment setup by cloning the Composio GitHub repository and navigating to the plugins directory. Requires Git CLI installed. This step ensures local access to Composio's integration points for Python SDK development. Expected input: none (run in terminal). Output: prepared local plugin directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/guides/python-sdk.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ComposioHQ/composio.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd composio/python/plugins\n```\n\n----------------------------------------\n\nTITLE: Displaying Centered Social Media Links using HTML\nDESCRIPTION: This HTML snippet uses a 'div' element with 'align=\"center\"' to center a paragraph ('p') containing multiple social media links. Each link consists of an anchor tag ('a') pointing to a specific platform (Discord, YouTube, Twitter/X, LinkedIn) and an image tag ('img') displaying the platform's icon. Links are configured to open in a new browser tab ('target=\"_blank\"') for better user experience and security ('rel=\"noopener noreferrer\"'). Non-breaking spaces ('&nbsp;') provide spacing between the icons.\nSOURCE: https://github.com/composiohq/composio/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div align=\"center\">\n  <p>\n    <a href=\"https://dub.composio.dev/JoinHQ\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <img src=\"https://github.com/user-attachments/assets/c499721b-d3c2-4bfc-891f-4d74b587911f\" alt=\"discord\" />\n    </a>&nbsp;&nbsp;&nbsp;\n    <a href=\"https://www.youtube.com/@Composio\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <img src=\"https://github.com/user-attachments/assets/57072338-3e7a-42a5-bd2b-c58b143ffa29\" alt=\"youtube\" />\n    </a>&nbsp;&nbsp;&nbsp;\n    <a href=\"https://twitter.com/composiohq\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <img src=\"https://github.com/user-attachments/assets/14b87a1d-8ac7-48b4-ae7c-3a36aacc260b\" alt=\"x\" />\n    </a>&nbsp;&nbsp;&nbsp;\n    <a href=\"https://www.linkedin.com/company/composio-dev\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <img src=\"https://github.com/user-attachments/assets/cb6cc650-672e-41f6-8abf-dfc97fddfcbc\" alt=\"linkedin\" />\n    </a>\n  </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change to the project directory where setup files and scripts are located.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/presentation_agent/crewai/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Cloning Project Repository and Navigating to Example Directory - Bash\nDESCRIPTION: This snippet demonstrates how to clone the Composio project repository from GitHub using git and then navigate to the specific example directory for the portfolio generator with the cd command. It requires git to be installed and network access to GitHub. The commands accept no parameters and output the downloaded files and change the current working directory for subsequent setup steps. Limitations include that this must be run in a terminal and assumes the user has permissions to create directories/files.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/portfolio-generator/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/composioHQ/composio.git\ncd composio/js/examples/portfolio-generator\n```\n\n----------------------------------------\n\nTITLE: Accessing Application via Localhost URL\nDESCRIPTION: Opens the Tweet Simulator's web interface by navigating to the specified local URL after the backend server is running. Requires that the FastAPI server is active and listening on port 8000. This step involves no dependencies other than a modern web browser and a running backend server.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/tweet-simulator/llama-4/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nhttp://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js Installation\nDESCRIPTION: Command to check if Node.js is installed on the system and display its version, which is a prerequisite for installing Composio MCP tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/mcp/windsurf.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory using Shell\nDESCRIPTION: Shell command to change the current working directory to the specific path where the Image Search Agent project files (`setup.sh`, `main.py`, etc.) are located. This is a prerequisite step before running setup or execution scripts.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/image_search/image_search_autogen/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment using Bash\nDESCRIPTION: This code snippet shows how to activate the Python virtual environment previously set up for the project, ensuring that all later Python executions use the correct dependencies and interpreter. It requires that the virtual environment exists at the specified location. Use this command in every new shell session before running project Python code.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/grok/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsource ~/.venvs/grok_game_builder/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Command to run the setup.sh script which sets up the environment, installs dependencies, logs into composio and adds necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/startup_trend_generator/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems. This step may be necessary before running the setup script.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/solana-agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running Setup Script in Shell\nDESCRIPTION: This command executes the setup script to configure the environment.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/vibe_security_agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory - Shell\nDESCRIPTION: Changes the current directory to the project root where all setup and source files are located. This step is required to ensure that subsequent setup and execution commands run within the correct context. The user needs to replace 'path/to/project/directory' with the actual path to their local project. No inputs or outputs are handled; this is a navigation command.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_autogen/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Basic Auth Proxy Configuration in YAML\nDESCRIPTION: Example configuration for Basic Authentication proxy settings, demonstrating username and password header setup\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/add-your-app.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nproxy:\n  headers:\n    username: \"{{username}}\"\n    password: \"{{password}}\"\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Command to run the setup.sh script, which sets up the environment, installs dependencies, logs into Composio, and adds necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/solana-agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable (Shell)\nDESCRIPTION: This command grants execute permissions (`+x`) to the `setup.sh` script using `chmod`. This is often required on Linux or macOS systems before the script can be run directly from the command line.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_langgraph/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory using Shell\nDESCRIPTION: This shell command changes the current working directory to the specified project directory path. This step is essential to ensure subsequent commands are executed in the correct context where project files like `setup.sh` and `main.py` reside.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Second_brain_Agent/crewai/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Bumping Version with Python Script - Python\nDESCRIPTION: This command snippets demonstrates how to perform a version bump using the Python script 'bump.py', specifying the desired type of change (major, minor, patch, pre, post). Assumes Python is installed and the script is present in the 'scripts' directory. The key parameter determines the segment of the version number to increment, and the updated version will be reflected in the package metadata. No output is shown, but changes will update relevant version files.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/release.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython scripts/bump.py --major/--minor/--patch/--pre/--post\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/youtube_slack_summary_agent/langgraph/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/presentation_agent/llama_index/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Command to run the setup script which configures the environment, installs dependencies, logs into Composio, and adds necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/agentic_rag/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring LlamaIndex for OpenAI LLM Integration\nDESCRIPTION: Defines the configuration for integrating LlamaIndex with OpenAI's language models. This configuration likely includes API keys, model identifiers, or other parameters required to use OpenAI's LLMs within the LlamaIndex framework.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/content_hook_generator_agent/requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nllama-index-llms-openai\n```\n\n----------------------------------------\n\nTITLE: Listing Documentation Dependencies for Python\nDESCRIPTION: This snippet lists Python packages required for documentation generation, including Sphinx and related extensions.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/swe/tests/test_docker/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nalabaster==0.7.13\nbabel==2.12.1\ncertifi==2022.12.7\ncharset-normalizer==3.1.0\ndocutils==0.17.1\nidna==3.4\nimagesize==1.4.1\njinja2==3.1.2\nmarkupsafe==2.1.2\npackaging==23.0\npallets-sphinx-themes==2.0.3\npygments==2.15.0\nrequests==2.28.2\nsnowballstemmer==2.2.0\nsphinx==4.5.0\nsphinx-issues==3.0.1\nsphinx-tabs==3.3.1\nsphinxcontrib-applehelp==1.0.4\nsphinxcontrib-devhelp==1.0.2\nsphinxcontrib-htmlhelp==2.0.1\nsphinxcontrib-jsmath==1.0.1\nsphinxcontrib-log-cabinet==1.0.1\nsphinxcontrib-qthelp==1.0.3\nsphinxcontrib-serializinghtml==1.1.5\nurllib3==1.26.15\n```\n\n----------------------------------------\n\nTITLE: Importing PraisonAI and Composio Dependencies\nDESCRIPTION: Basic imports required for PraisonAI and Composio integration setup.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/praisonai.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport yaml\nfrom praisonai import PraisonAI\n\nfrom composio_praisonai import Action, ComposioToolSet\n```\n\n----------------------------------------\n\nTITLE: Navigating Project Directory in Shell Script\nDESCRIPTION: Changes the current working directory to the root of the project where required files like setup.sh, main.py, requirements.txt, and README.md are located. No external dependencies are needed. Expects the user to provide the correct path to the target project directory; outputs current working directory context for subsequent shell commands.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_crewai/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Cloning and Navigating to Project Directory - Bash\nDESCRIPTION: This command sequence clones the Composio repository from GitHub and navigates into the specified project subdirectory. It is essential as the first step of initialization, fetching all the necessary project files for the Reddit research agent demo. The repository path and target directory are explicitly provided so the user lands in the example folder for further setup.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/reddit-research/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/composioHQ/composio.git\ncd composio/js/examples/reddit-research\n```\n\n----------------------------------------\n\nTITLE: Installing Composio MCP Tools via NPX\nDESCRIPTION: Command to install Composio MCP tools for Windsurf IDE using NPX. This command connects to the MCP server with a specific endpoint and specifies Windsurf as the client.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/mcp/windsurf.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx composio-core@rc mcp \"https://mcp.composio.dev/notion/RANDOM_SUFFIX\" --client windsurf\n```\n\n----------------------------------------\n\nTITLE: Making setup.sh Script Executable | Shell\nDESCRIPTION: This shell command changes permissions of 'setup.sh', making it executable using chmod +x. It is a preparatory step for running shell scripts. It should be run in the shell where 'setup.sh' is located. No output if successful.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_ollama/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: This command runs the setup.sh script to set up the environment, install dependencies, login to Composio, and add necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/Notion_todo_list_agent/crewai/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Cloning the SWE JavaScript Template Repository\nDESCRIPTION: This command uses Git to clone the Software Engineering Agent JavaScript template repository from ComposioHQ on GitHub into a local directory named `swe-js`. It requires Docker to be running if using Docker as the workspace environment.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/swe/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ComposioHQ/swe-js-template.git swe-js\n```\n\n----------------------------------------\n\nTITLE: Executing the Setup Script to Install Dependencies with Shell\nDESCRIPTION: Runs setup.sh shell script to prepare the development environment, typically by installing packages and dependencies listed within. Assumes setup.sh is present and executable in the current directory. Output and side effects depend on the script contents; prepares the project for further steps.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_crewai/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies for Composio/CrewAI Integration (plaintext)\nDESCRIPTION: This snippet lists the Python package dependencies required for a project utilizing Composio, CrewAI, Langchain, and OpenAI. These packages would typically be installed using a package manager like pip, often from a file named `requirements.txt`. It includes libraries for AI agent orchestration (`crewai`), Langchain OpenAI integration (`langchain-openai`), Composio tools (`composio-crewai`), and environment variable handling (`python-dotenv`).\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_crewai/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomposio-crewai\ncrewai\nlangchain-openai\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Changing Working Directory with Shell\nDESCRIPTION: Changes the current working directory to the location of the Tweet Simulator project using a shell command. This is a prerequisite for running subsequent setup and launch commands. No dependencies are required for this basic shell operation. The directory should exist and contain the referenced files for correct operation.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/tweet-simulator/llama-4/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Make sure you are in the root of the composio repository first\\ncd python/examples/advanced_agents/tweet-simulator/llama-4\n```\n\n----------------------------------------\n\nTITLE: Installing Mastra MCP SDK - Bash\nDESCRIPTION: Installs the @mastra/mcp package using npm to enable MCP-related functionality within a Mastra project. Prerequisite: An initialized Node.js project. Input: npm install command. Output: MCP dependencies available in node_modules.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/mastra.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mastra/mcp@latest\n\n```\n\n----------------------------------------\n\nTITLE: Making setup.sh Executable - Shell\nDESCRIPTION: This snippet demonstrates how to modify permissions of the `setup.sh` shell script to make it executable using `chmod +x`. This is required on Unix-like systems prior to executing the script directly. The operation requires appropriate permissions on the file system and assumes the presence of the `setup.sh` file in the working directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making a Setup Script Executable using Shell\nDESCRIPTION: Grants execute permission to the `setup.sh` script on Linux or macOS systems using the `chmod` command. This step might be necessary before executing the script if it doesn't already have execute permissions.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Sheets_to_SQL_Agent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Complete SQL Agent Workflow\nDESCRIPTION: Final implementation that combines SQL query execution and data visualization into a complete workflow. It first executes the SQL query to retrieve salary data, then passes the results to the visualization agent to create a graphical representation. The Python version uses a main function while JavaScript implements an async function with error handling.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/examples/sql-agent.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Execute the workflow\ndef main():\n    # First, execute SQL query\n    sql_result = sql_executor.invoke({\"input\": query_task})\n    print(f\"SQL Query Result: {sql_result['output']}\")\n    \n    # Then, create visualization\n    visualization_task = (\n        f\"Using the following data from the top 10 highest salaries: {sql_result['output']}\\n\"\n        \"Create a bar chart showing first_name on the x-axis and salary on the y-axis. \"\n        \"Save the visualization as 'salary_chart.png'.\"\n    )\n    visualization_result = visualization_executor.invoke({\"input\": visualization_task})\n    print(f\"Visualization Result: {visualization_result['output']}\")\n    \n    return \"Workflow completed successfully!\"\n\nif __name__ == \"__main__\":\n    main()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Main function to run the SQL Agent workflow\nasync function runSQLAgent() {\n    try {\n        // Define the SQL query\n        const query = \"SELECT * FROM MOCK_DATA ORDER BY salary DESC LIMIT 10\";\n        \n        // Execute the SQL query\n        const queryResult = await executeSQLQuery(query);\n        \n        // Create visualization based on query results\n        const visualizationResult = await createVisualization(queryResult);\n        \n        console.log(\"SQL Agent workflow completed successfully!\");\n        return {\n            queryResult,\n            visualizationResult\n        };\n    } catch (error) {\n        console.error(\"An error occurred:\", error);\n        throw error;\n    }\n}\n\n// Execute the workflow\nrunSQLAgent().catch(error => console.error(\"SQL Agent failed:\", error));\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change directory to the project location where the necessary files are stored.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/transcript_insight_generator/llama_index/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Defining Third-Party Python Dependencies using requirements.txt - Plaintext\nDESCRIPTION: This snippet lists all Python packages and their required versions for the Composio project. The file is meant for use with pip or similar tools to automate the installation of dependencies. Each line specifies a package, with version constraints where applicable, and is critical for reproducible environments; no actual code logic is present, but the correct management of these dependencies is foundational for project stability.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_computer_use/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nannotated-types==0.7.0\\nanyio==4.8.0\\nbrowserbase==1.2.0\\ncertifi==2025.1.31\\ncharset-normalizer==3.4.1\\ndistro==1.9.0\\ngreenlet==3.1.1\\nh11==0.14.0\\nhttpcore==1.0.7\\nhttpx==0.28.1\\nidna==3.10\\njiter==0.8.2\\npillow==11.1.0\\nplaywright==1.50.0\\npydantic==2.10.6\\npydantic_core==2.27.2\\npyee==12.1.1\\npython-dotenv==1.0.1\\nrequests==2.32.3\\nscrapybara>=2.3.6\\nsniffio==1.3.1\\ntyping_extensions==4.12.2\\nurllib3==2.3.0\\ncomposio-openai-agents==0.7.10\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Tools with NPX Command\nDESCRIPTION: Example installation command placeholder for MCP tools. Users should replace this with their generated code from mcp.composio.dev to install and configure MCP tools for Cursor.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/mcp/cursor.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Example:\nYour generated code\n```\n\n----------------------------------------\n\nTITLE: Full Proxy Configuration Example in YAML\nDESCRIPTION: Complete example of proxy configuration including base URL, headers, and query parameters with template variables\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/add-your-app.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nproxy:\n  base_url: \"https://api.example.com/v1\"\n  headers:\n    Authorization: \"Bearer {{access_token}}\"\n    Content-Type: \"application/json\"\n  query_params:\n    api_key: \"{{api_key}}\"\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable using Shell\nDESCRIPTION: This command uses `chmod +x` to grant execute permissions to the `setup.sh` script. Making the script executable is required before it can be run directly from the command line in the next step.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_computer_use/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Linux/macOS\nDESCRIPTION: Command to make the setup.sh script executable in Linux or macOS environments before running it.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/sql_agent_plotter_llama_index/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using pnpm in Bash\nDESCRIPTION: Executes the `pnpm install` command within the project directory to download and install all the necessary Node.js package dependencies listed in the project's `package.json` file. This command requires `pnpm` to be installed on the system.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/report-template-generator-agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pnpm in Bash\nDESCRIPTION: This Bash command installs the required Node.js dependencies for the Market Research Agent using pnpm. Dependencies include @langchain, @langchain/openai, composio-core, and express. It is necessary to run this command inside the project directory and requires pnpm to be installed ahead of time. Inputs: None directly. Outputs: node_modules/ directory with all specified packages installed.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/market_research_agent/readme..md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @langchain @langchain/openai composio-core express\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: This command changes the current working directory to the location of the project files.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/vibe_security_agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory (Shell)\nDESCRIPTION: Changes the current working directory to the specific path where the project files (setup.sh, main.py, etc.) are located. This is a prerequisite for running subsequent setup and execution commands.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_llamaindex/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change directory to the project location.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/lead_generator_agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd path/to/your/project\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable (Shell)\nDESCRIPTION: Grants execute permissions to the `setup.sh` script using the `chmod` command. This step is necessary to allow the user to run the script directly from the command line in the subsequent step.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/agents-mcp/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change directory to the location of project files including setup.sh, main.py, requirements.txt, and README.md.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/startup_trend_generator/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change to the directory where the project files are located, including setup.sh, main.py, requirements.txt, and README.md.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/sql_agent_plotter_langchain/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Cloning and Navigating to the Composio Market Research Agent Repository in Bash\nDESCRIPTION: This Bash snippet demonstrates how to clone the full Composio repository from GitHub and navigate into the Market Research Agent example directory. It assumes Git is installed on the user's system. The first command clones the repository, while the second changes the working directory for further operations. Input: None. Output: Repository files available locally and terminal in the correct directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/market_research_agent/readme..md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/composioHQ/composio.git\ncd composio/js/examples/market_research_agent\n```\n\n----------------------------------------\n\nTITLE: Navigating to Slackbot Directory using cd in Bash\nDESCRIPTION: This command changes the current working directory in the terminal to the `slackbot_code_expert` sub-directory, located within the Python examples of the cloned Composio repository. This navigation is necessary to access the specific files for the Slackbot.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slackbot_code_expert/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd composio/python/examples/advanced_agents/slackbot_code_expert\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change to the directory containing the project files including setup.sh, main.py, requirements.txt, and README.md.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/content_hook_generator_agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Shell command to make the setup.sh script executable on Linux or macOS systems before running it.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/crewai/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running Python Script for Youtube Summary Agent\nDESCRIPTION: Command to execute the main Python script that runs the Youtube Summary Agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/youtube_slack_summary_agent/langgraph/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/python-examples/quickstarters/transcript_insight_generator/langgraph/main.py\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using pnpm (Bash)\nDESCRIPTION: This Bash command utilizes the `pnpm` package manager to install all necessary Node.js dependencies for the Meeting Brief Agent project. It reads the project's package configuration files to determine which packages to download and install. Requires `pnpm` to be installed.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/meeting_brief_agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory using Shell\nDESCRIPTION: Changes the current working directory to the specified project path. This directory should contain essential files like `setup.sh`, `main.py`, `requirements.txt`, and `README.md`. This command is a prerequisite for running subsequent setup and execution commands.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Sheets_to_SQL_Agent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Accessing Composio Slack Integration Documentation - Bash\nDESCRIPTION: This snippet provides a URL to the official Composio documentation for connecting the application to Slack. Users should follow this documentation to properly configure their integration, which is required for posting summaries to Slack channels. No code execution is needed; this step involves visiting the URL and following setup instructions.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Podcast_summarizer_Agents/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhttps://docs.composio.dev/apps/slack\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change to the project directory where the necessary files like setup.sh, main.py, requirements.txt, and README.md are located.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/presentation_agent/langgraph/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Setting Execute Permissions for setup.sh in Shell\nDESCRIPTION: This command makes the setup.sh script executable on Linux or macOS systems. It's a necessary step before running the script.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Running isort Formatter with Tox (Bash)\nDESCRIPTION: Runs the 'isort' code formatter using the 'tox' automation tool and the configuration defined in 'tox.ini'. This command sorts Python imports according to the project's guidelines. It is mentioned both as part of the writing code process and as an individual command.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/development.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntox -e isort\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change to the directory containing the project files, including setup.sh, main.py, requirements.txt, and README.md.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/code-analysis/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change the current directory to the project folder containing setup.sh, main.py, and README.md files.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/slack_calendar_agent/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys in .env File - Env\nDESCRIPTION: This snippet demonstrates the structure and required fields for the .env environment configuration file. Both COMPOSIO_API_KEY and OPENAI_API_KEY must be provided with valid credentials for the demo to access Composio and OpenAI services. These environment variables are read at runtime by the application to authenticate external API requests.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/reddit-research/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nCOMPOSIO_API_KEY=YOUR_COMPOSIO_API_KEY\nOPENAI_API_KEY=YOUR_OPENAI_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change the current directory to the project folder containing essential files like setup.sh, main.py, requirements.txt, and README.md.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/solana-agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change the current directory to the project folder containing essential files like setup.sh, main.py, requirements.txt, and README.md.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/trend_finder/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository using Git (Bash)\nDESCRIPTION: This Bash command sequence clones the specified Git repository containing the Meeting Brief Agent source code to the local machine and then changes the current working directory to the newly created project directory. Requires the `git` command-line tool to be installed.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/meeting_brief_agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone <repository-url>\ncd <repository-directory>\n```\n\n----------------------------------------\n\nTITLE: Running the SQL Agent Python Script\nDESCRIPTION: Command to execute the main Python script that runs the SQL agent functionality.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/sql_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for API Keys in Shell/.env\nDESCRIPTION: Provides the format for creating a `.env` file to store sensitive API keys. The `COMPOSIO_API_KEY` and `OPENAI_API_KEY` variables must be set with their respective values for the application to authenticate with Composio and OpenAI services. These variables are typically loaded into the application environment at runtime.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/report-template-generator-agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nCOMPOSIO_API_KEY=YOUR_COMPOSIO_API_KEY\nOPENAI_API_KEY=YOUR_OPENAI_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Initializing Composio/LLM (TypeScript Placeholder)\nDESCRIPTION: Placeholder indicating future availability of code for importing necessary libraries and initializing Composio and LLM instances in a TypeScript environment.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/llamaindex.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncoming soon\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change directory to the project location containing setup.sh, main.py, requirements.txt, and README.md files.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/youtube_slack_summary_agent/llama_index/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Changes the current working directory to the specified project directory containing the necessary files (setup.sh, main.py, etc.) before running setup and execution commands. Replace 'path/to/project/directory' with the actual path to the project.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_langchain/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change to the directory containing the project files including setup.sh, main.py, requirements.txt, and README.md.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/Notion_todo_list_agent/llamaindex/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Complete Composio GitHub Integration in TypeScript\nDESCRIPTION: Full TypeScript implementation that combines initialization and execution to fetch GitHub username using Composio. This complete script handles the entire workflow from tools setup to result display.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/getting-started/quickstart.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAIToolSet } from \"composio-core\";\nimport { OpenAI } from \"openai\";\n\n// Initialize Composio ToolSet\n// It automatically picks up COMPOSIO_API_KEY from env vars\n// Uses the 'default' entity_id if not specified\nconst toolset = new OpenAIToolSet();\nconst client = new OpenAI();\n\nconst tools = await toolset.getTools({ actions: [\"GITHUB_GET_THE_AUTHENTICATED_USER\"]})\nconst task = \"Get my GitHub username.\"\nconst messages = [\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant that can use tools.\"},\n    {\"role\": \"user\", \"content\": task},\n]\nconst response = await client.chat.completions.create({\n    model: \"gpt-4o-mini\",\n    messages: messages,\n    tools: tools,\n    tool_choice: \"auto\",\n});\nconst result = await toolset.handleToolCall(response);\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies\nDESCRIPTION: A list of Python packages required for a project that uses CrewAI, LangChain's OpenAI integration, and environment variable management. These packages need to be installed via pip or another Python package manager.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/presentation_agent/crewai/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncomposio-crewai\nlangchain-openai\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Changing Directory for Project Initialization - Shell\nDESCRIPTION: Changes the current working directory to the project's root, where the setup script, main Python script, and configuration files are located. This is a foundational step for executing subsequent setup and launch commands, as all scripts and files referenced next are relative to this location. No external dependencies beyond a shell compatible environment are required.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/deepseek_research/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change to the directory containing the project files including setup.sh, main.py, requirements.txt, and README.md.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sheet_analyst/crewai/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Running Presentation Agent Python Script\nDESCRIPTION: Command to execute the main Python script for the presentation agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/presentation_agent/llama_index/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/quickstarters/presentation_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Initializing Base Package Imports\nDESCRIPTION: Basic imports required for PraisonAI integration setup\nSOURCE: https://github.com/composiohq/composio/blob/master/python/plugins/praisonai/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport yaml\nfrom praisonai import PraisonAI\n```\n\n----------------------------------------\n\nTITLE: Cloning Composio Advanced Agents Repository - Shell\nDESCRIPTION: This snippet demonstrates how to clone the Composio advanced agents repository and navigate to its directory using shell commands. The user runs 'git clone' to copy the repository and then changes the directory with 'cd'. Git must be installed on the user's system, and the provided URL should point to the correct repository. The commands expect a Unix-like shell environment.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/your-repo/advanced_agents.git\ncd advanced_agents\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Composio\nDESCRIPTION: This snippet lists the required Python packages for the Composio project. It includes integrations for language models (LangGraph, Gemini, LangChain with OpenAI) and environment variable management with python-dotenv.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/twitter_posting_agent/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomposio-langgraph\ncomposio-gemini\nlangchain-openai\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: This command changes the current directory to the project folder containing the necessary files for the Twitter Posting Agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/twitter_posting_agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory in Bash\nDESCRIPTION: This code snippet shows how to change the terminal's current working directory to the location of the user's project. It is a required step before running or configuring the Market Research Agent application. The actual path (\"path/to/your/project\") should be replaced with the target directory. Input: User-defined path. Output: Directory context switched in terminal.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/market_research_agent/readme..md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd path/to/your/project\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: This command changes the current directory to the project folder containing the necessary files.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/Notion_todo_list_agent/crewai/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Running Data Analyst Agent Python Script\nDESCRIPTION: Command to execute the main Python script for the data analyst agent after setup is complete.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sheet_analyst/crewai/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/data_analyst_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Connecting GitHub Account for JavaScript Usage via CLI\nDESCRIPTION: Connects a user's GitHub account to Composio using the Composio CLI, specifically mentioned as a prerequisite for the JavaScript example. This allows the JavaScript SDK to utilize GitHub tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposio add github # Run this in terminal\n```\n\n----------------------------------------\n\nTITLE: Cloning the Podcast Summarizer Repository - Bash\nDESCRIPTION: This snippet provides the git command required to clone the Podcast Summarizer Agents repository from GitHub. Users must run this command in their terminal to fetch the source code before proceeding with setup or running the application. Git must be installed for the operation to succeed.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Podcast_summarizer_Agents/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n git clone https://github.com/siddartha-10/Podcast_summarizer_Agents.git\n```\n\n----------------------------------------\n\nTITLE: Filtering Composio App Tools by Tags in TypeScript\nDESCRIPTION: Demonstrates fetching tools for a specific application (`App.JIRA`) and refining the results by providing an array of tags (e.g., [\"Issues\"]) to the `tags` parameter of `toolset.getTools`. Note that tag names are case-sensitive. Logs the count of fetched tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/tool-calling/fetching-tools.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nasync function fetchTaggedTools() {\n  // Fetch only Jira tools related to 'Issues'\n  const jiraIssueTools = await toolset.getTools({\n      apps: [App.JIRA],\n      tags: [\"Issues\"] // Tag names are case-sensitive\n  });\n\n  console.log(`Fetched ${jiraIssueTools.length} Jira tools tagged with 'Issues'.`);\n}\n\nfetchTaggedTools();\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Command to run the setup.sh script, which sets up the environment, installs dependencies, logs into Composio, and adds necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sheet_analyst/llamaindex/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change the current directory to the project location where essential files are stored.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/customer_support/swarm/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Executing the Setup Script using Shell\nDESCRIPTION: Runs the `setup.sh` script located in the current directory. This script is responsible for setting up the project environment, which typically includes installing dependencies listed in `requirements.txt`. After execution, the user is expected to populate the `.env` file with necessary secrets.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Sheets_to_SQL_Agent/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script in Shell\nDESCRIPTION: Command to run the setup script which sets up the environment, installs dependencies, logs into composio and adds necessary tools.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/content_hook_generator_agent/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change to the directory containing the project files.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/langgraph/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Checking isort Formatting with Tox (Bash)\nDESCRIPTION: Checks Python import sorting using 'isort' via the 'tox' automation tool without applying changes. This command uses the 'isort-check' environment defined in 'tox.ini' and is useful for CI pipelines or pre-commit hooks to verify formatting.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/docs/development.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntox -e isort-check\n```\n\n----------------------------------------\n\nTITLE: Making Shell Script Executable with chmod (Shell)\nDESCRIPTION: Updates file permissions to allow execution of the setup.sh script in Unix-like systems using the chmod command. This is required on Linux or macOS to ensure the environment setup script can be run. The script must exist in the current directory, and this command should be followed by executing the script.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/tweet-simulator/llama-4/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script for Environment Configuration\nDESCRIPTION: Command to run the setup script which sets up the environment and installs necessary dependencies for the SQL agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/sql_agent_plotter_llama_index/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository and Navigating Directory (bash)\nDESCRIPTION: This command clones the Composio project repository from GitHub using Git and then changes the current directory to the `scheduling-agent` example folder within the JavaScript examples (`js/examples/scheduling-agent`). This is the initial step required to obtain the project code locally.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/scheduling-agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/composioHQ/composio.git\ncd composio/js/examples/scheduling-agent\n```\n\n----------------------------------------\n\nTITLE: Specifying `python-dotenv` Python Dependency\nDESCRIPTION: Declares `python-dotenv` as a required Python package for the '/composiohq/composio' project. This utility is used to load environment variables from a `.env` file into the application's environment, often used for managing sensitive data like API keys. Installation via pip is required.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_openai/requirements.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment with Bash\nDESCRIPTION: This snippet sources the environment activation script for a Python virtual environment located at .venv/bin/activate. It ensures Python commands and libraries used in subsequent operations are isolated from the system environment. This step must be run in every new terminal session where you want to execute the AI game builder agent code.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/agents-sdk/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Listing Testing Dependencies for Python\nDESCRIPTION: This snippet lists Python packages required for testing, including pytest and related libraries.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/swe/tests/test_docker/requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nasgiref==3.6.0\niniconfig==2.0.0\npackaging==23.0\npluggy==1.0.0\npytest==7.3.0\npython-dotenv==1.0.0 ; python_version >= \"3.8\"\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth Connection Activation in Composio\nDESCRIPTION: Demonstrates how to wait for and handle the OAuth connection activation process. The code includes timeout handling and connection status monitoring.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/authentication/introduction.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Wait for the user to complete the OAuth flow in their browser\nprint(\"Waiting for connection to become active...\")\ntry:\n    # This polls until the connection status is ACTIVE or timeout occurs\n    active_connection = connection_request.wait_until_active(\n        client=toolset.client, # Pass the underlying client\n        timeout=120 # Wait for up to 2 minutes\n    )\n    print(f\"Connection successful! ID: {active_connection.id}\")\n    # Store active_connection.id associated with user_id_in_my_app\nexcept Exception as e:\n    print(f\"Connection timed out or failed: {e}\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nasync function waitForActive(connectionRequest: ConnectionRequest) { // Assuming connectionRequest from step 2\n    console.log(\"Waiting for connection to become active...\");\n    try {\n        // This polls until the connection status is ACTIVE or timeout occurs\n        const activeConnection = await connectionRequest.waitUntilActive(120); // Wait up to 2 minutes\n        console.log(`Connection successful! ID: ${activeConnection.id}`);\n        // Store activeConnection.id associated with userIdInMyApp\n    } catch (e) {\n        console.error(\"Connection timed out or failed:\", e);\n    }\n}\n\n// You would call waitForActive after the user interaction is expected\n// Example call (needs connectionRequest object from previous step):\nwaitForActive(connectionRequest);\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory (Shell)\nDESCRIPTION: This command changes the current working directory to the specified project path (`path/to/project/directory`). This is a prerequisite step before running setup or application scripts within that directory. Replace `path/to/project/directory` with the actual path to the project.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/sales_kit/meeting_agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Making setup.sh Executable - Shell\nDESCRIPTION: This snippet makes the 'setup.sh' shell script executable using the 'chmod +x' command. It's essential on Linux or macOS systems before running the setup to avoid permission errors. The input is the path to the 'setup.sh' file, and after execution, the file will have its executable bit set.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment (Shell)\nDESCRIPTION: Activates the Python virtual environment specific to the Tweet Simulator project using the source command. This is required to ensure that subsequent Python commands utilize the correct set of installed packages. The virtual environment must exist at the specified path, which is created by the setup.sh script.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/tweet-simulator/llama-4/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsource ~/.venvs/tweet_simulator/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Specifying `composio-openai` Python Dependency\nDESCRIPTION: Declares `composio-openai` as a required Python package. This package likely provides tools or integrations specific to using Composio with OpenAI functionalities within the '/composiohq/composio' project. It needs to be installed using a package manager like pip.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_openai/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomposio-openai\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory (Shell)\nDESCRIPTION: Changes the current working directory to the specified project directory where the necessary files (`setup.sh`, `main.py`, `requirements.txt`, `README.md`) are located. Replace 'path/to/project/directory' with the actual path.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/loan_underwriter_agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable (Shell)\nDESCRIPTION: Grants execute permissions to the 'setup.sh' script using the `chmod` command. This step is necessary on Linux or macOS systems to allow the shell script to be run directly from the command line.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_crewai/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable (Shell)\nDESCRIPTION: Grants execute permissions to the `setup.sh` script using the `chmod` command. This step is necessary on Linux or macOS systems to allow the script to be run directly from the command line.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/openai/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating Project Directory with Shell Commands - shell\nDESCRIPTION: This shell command snippet demonstrates how to change the current working directory to the main project folder, ensuring access to essential files such as setup scripts and configuration files. This step is a common prerequisite for further project initialization. No dependencies are required other than having shell access and the relevant directory structure. The path argument should be replaced with the user's specific project location. The command produces no output unless the path is incorrect.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/human_in_the_loop_scheduler/crewai/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory (Shell)\nDESCRIPTION: Changes the current working directory in the shell to the specific path where the project files (`setup.sh`, `main.py`, `requirements.txt`, `README.md`) are located. Users need to replace `path/to/project/directory` with the actual path to their project.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/openai/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Changing Directory Using Shell Commands – Shell\nDESCRIPTION: This snippet uses the shell's cd command to move into the specified project directory. The path must be replaced with the actual project location where required files are present, such as setup scripts and source files. No inputs beyond the directory path are needed, and the expected effect is a change of the current working directory within the terminal session.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/game_builder/gemini/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n\n```\n\n----------------------------------------\n\nTITLE: Making setup.sh Script Executable - Shell\nDESCRIPTION: This shell command modifies the permissions of 'setup.sh', making it executable on Linux or macOS systems. The 'chmod +x' command is a prerequisite step to ensure the script can be run directly. Input: 'setup.sh' present in the current directory; Output: 'setup.sh' becomes executable. The user must have appropriate file system permissions.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_crewai/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory (Shell)\nDESCRIPTION: This shell command changes the current working directory to the specified project directory containing necessary files like `setup.sh`, `main.py`, `requirements.txt`, and `README.md`. Users must replace `path/to/project/directory` with the actual path on their system.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_autogen/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change to the project directory where the setup and execution files are located.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/agentic_rag/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change to the directory where project files are located. This is the first step before setting up and running the RAG agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/rag_agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: This command changes the current directory to the project folder containing necessary files like setup.sh, main.py, requirements.txt, and README.md.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/miscellaneous/news_summary/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable - Shell\nDESCRIPTION: This command uses chmod to grant execute permissions on the setup.sh file, allowing it to be run as a program. This step is necessary on Unix-like systems if the file is not already executable. It requires proper file permissions and shell access but no additional dependencies.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slack_bot_agent/slack_agent_langchain/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory for Composio Agent Setup - Bash\nDESCRIPTION: This code snippet provides the command to change the current working directory to the location of the Lead Outreach Agent project. It is essential to execute subsequent setup and runtime commands from the project's root directory. Replace 'path/to/your/project' with the actual path to your project folder. The command does not produce user-facing output except for changing the shell prompt location.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/lead_outreach_agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd path/to/your/project\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Changes the current working directory to the specified project path. This is necessary to access the project files like `setup.sh`, `main.py`, and `requirements.txt`.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/content_writing_agent/phidata/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change to the directory containing the project files.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/presentation_agent/llama_index/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable (Shell)\nDESCRIPTION: Grants execute permission to the 'setup.sh' script. This step is necessary on Linux or macOS systems to allow the script to be run directly using './setup.sh'.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/scheduler_agent/scheduler_agent_llamaindex/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory with Shell Commands (Shell)\nDESCRIPTION: This snippet demonstrates how to change the current working directory to the location containing the project files using the `cd` command. The user must substitute `path/to/project/directory` with the actual project path. This step is a prerequisite for executing setup scripts and Python code located in that directory.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/sales_assistant_agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to change the current directory to the project folder containing setup files and scripts.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/sql_agent_plotter_crewai/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow Graph\nDESCRIPTION: Set up the workflow graph structure with nodes and edges\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/langgraph.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nworkflow = StateGraph(MessagesState)\n\nworkflow.add_node(\"agent\", call_model)\nworkflow.add_node(\"tools\", tool_node)\nworkflow.add_edge(\"__start__\", \"agent\")\nworkflow.add_conditional_edges(\n    \"agent\",\n    should_continue,\n)\nworkflow.add_edge(\"tools\", \"agent\")\n\napp = workflow.compile()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst workflow = new StateGraph(MessagesAnnotation)\n    .addNode(\"agent\", callModal)\n    .addEdge(START, \"agent\")\n    .addNode(\"tools\", toolNode)\n    .addConditionalEdges(\"agent\", shouldContinue)\n    .addEdge(\"tools\", \"agent\");\n\nconst app = workflow.compile();\n```\n\n----------------------------------------\n\nTITLE: Executing the Setup Script in Shell\nDESCRIPTION: Command to run the setup.sh script which sets up the environment and installs dependencies for the Youtube summary agent.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/transcript_insight_generator/langgraph/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: This command changes the permissions of the setup script to make it executable.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/vibe_security_agent/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory with Shell\nDESCRIPTION: This shell command is used to change the current working directory to where the Composio project files reside (including setup.sh, main.py, and requirements.txt). It assumes prerequisite knowledge of the terminal and expects the user to modify 'path/to/project/directory' according to their local path. It does not produce any output but is required as the first step in the setup process.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/sales_kit/market_research_agent/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Handling Tool Calls\nDESCRIPTION: Processes the tool calls from the Julep agent response\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/julep.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse = composio_toolset.handle_tool_calls(response)\n\nprint(response.messages)\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems. This step may be necessary before running the setup script.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/trend_finder/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Shell Script Executable - Shell\nDESCRIPTION: This snippet uses the `chmod +x` command to make the `setup.sh` script executable on Unix-based systems. It is a preparatory step that ensures the shell script can be run directly as a program. Input is the script file (`setup.sh`) present in the current directory; output is modified file permissions allowing execution. No additional dependencies are required beyond a typical Unix shell environment.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/AI_PM_agent/llamaindex/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/agentic_rag/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable in Shell\nDESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sheet_analyst/llamaindex/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory (Shell)\nDESCRIPTION: Changes the current working directory to the specified project directory containing the necessary files (`main.py`, `requirements.txt`, `README.md`). This is a prerequisite step before running setup or execution scripts.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/agents-mcp/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Cloning and Entering Project Directory with Git and Shell - Shell Script\nDESCRIPTION: This snippet shows the steps needed to clone the project repository and move into the resulting project directory. It uses git to clone a remote repository, then changes the current working directory to the project's location. No dependencies are required beyond git and a Unix-like shell. The repository URL must be replaced with the actual one, and the path should be updated to match the user's local directory structure.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/cryptokit/coinbase/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone <repository-url>\\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Shell command to change to the directory containing the project files including setup.sh, main.py, requirements.txt, and README.md.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/calendar_agent/crewai/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Making Setup Script Executable using Shell\nDESCRIPTION: This shell command grants execute permissions to the `setup.sh` script using `chmod +x`. This is often required on Linux or macOS systems before the script can be run directly from the command line.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/pr_agent/pr_agent_autogen/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x setup.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory (Shell)\nDESCRIPTION: This snippet instructs how to navigate to the project directory containing all essential files (setup.sh, main.py, requirements.txt, README.md). It prepares the working directory for further setup or execution steps. The main parameter is the absolute or relative path to your project directory. This step is prerequisite to any further commands that operate on the project files.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/Second_brain_Agent/llamaindex/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Running the Demo Script\nDESCRIPTION: Command to execute the demonstration script for the Deep Researcher Agent after setting up environment variables.\nSOURCE: https://github.com/composiohq/composio/blob/master/js/examples/deep_researcher/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode demo.mjs\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to navigate to the directory containing the project files such as setup.sh, main.py, requirements.txt, and README.md.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sql_agent/sql_agent_plotter_llama_index/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/project/directory\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script using Shell\nDESCRIPTION: This command executes the `setup.sh` script. The script is expected to set up the required environment and install project dependencies listed in `requirements.txt`. After execution, the user needs to populate the `.env` file with necessary secrets.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/content_writing_agent/llamaindex/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Tools (TypeScript Placeholder)\nDESCRIPTION: Placeholder indicating future availability of code for fetching Composio tools associated with a connected GitHub account in a TypeScript environment.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/llamaindex.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ncoming soon\n```\n\n----------------------------------------\n\nTITLE: Running the Python Script in Shell\nDESCRIPTION: Command to execute the main Python script that runs the Hackernews agent after environment setup is complete.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/perplexity_for_hackernews/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/quickstarters/perplexity_for_hackernews/main.py\n```\n\n----------------------------------------\n\nTITLE: Defining a LlamaIndex Agent (TypeScript Placeholder)\nDESCRIPTION: Placeholder indicating future availability of code for defining and configuring a LlamaIndex agent with Composio tools in a TypeScript environment.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/llamaindex.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ncoming soon\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies\nDESCRIPTION: This snippet lists the required Python packages for the project. It includes composio-crewai for AI-related functionalities, langchain-openai for language processing tasks, and python-dotenv for managing environment variables.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/quickstarters/sheet_analyst/crewai/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomposio-crewai\nlangchain-openai\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Executing the LlamaIndex Agent Chat (TypeScript Placeholder)\nDESCRIPTION: Placeholder indicating future availability of code for executing a chat interaction with the configured LlamaIndex agent in a TypeScript environment.\nSOURCE: https://github.com/composiohq/composio/blob/master/fern/frameworks/llamaindex.mdx#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ncoming soon\n```\n\n----------------------------------------\n\nTITLE: Cloning Composio Repository using Git in Bash\nDESCRIPTION: This command uses the Git version control system to download (clone) the entire Composio project repository from its official GitHub URL into a new directory named 'composio' in the current location. This is the initial step to get the source code.\nSOURCE: https://github.com/composiohq/composio/blob/master/python/examples/advanced_agents/slackbot_code_expert/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ComposioHQ/composio.git\n```"
  }
]