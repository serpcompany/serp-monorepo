[
  {
    "owner": "damianricobelli",
    "repo": "stepperize",
    "content": "TITLE: Initializing useStepper Hook with stepperize - TypeScript\nDESCRIPTION: This snippet demonstrates the initialization and basic use of the useStepper hook from @stepperize/react within a React TypeScript component. It shows how to define stepper steps using defineStepper, access the hook, and prepare for stepper-based navigation or rendering. Dependencies: @stepperize/react, React. Inputs are none by default, but a configuration object can accept initialStep and initialMetadata. Output is access to stepper methods for navigation and rendering logic.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/hook.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \\\"react\\\";\nimport { defineStepper } from \\\"@stepperize/react\\\";\n\nconst { useStepper } = defineStepper(\n  { id: \\\"first\\\", title: \\\"First step\\\" },\n  { id: \\\"second\\\", title: \\\"Second step\\\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n  // Use stepper methods here\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with when Method in useStepper - TypeScript\nDESCRIPTION: This snippet shows how to conditionally render React elements based on the current step using the when method from the useStepper hook. It provides step-specific rendering logic and enables expressive UI patterns for stepper flows. Dependencies: @stepperize/react, React. Expects the stepper to be initialized with step definitions. Inputs are current step ID and step data; outputs are the rendered React elements tied to the matched step.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/hook.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \\\"react\\\";\nimport { defineStepper } from \\\"@stepperize/react\\\";\n\nconst { useStepper } = defineStepper(\n  { id: \\\"first\\\", title: \\\"First step\\\" },\n  { id: \\\"second\\\", title: \\\"Second step\\\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  return (\n    <React.Fragment>\n      {methods.when(\\\"first\\\", (step) => (\n        <p>First step: {step.title}</p>\n      ))}\n      {methods.when(\\\"second\\\", (step) => (\n        <p>Second step: {step.title}</p>\n      ))}\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a Stepper with defineStepper and useStepper in SolidJS\nDESCRIPTION: Demonstrates how to define a stepper with multiple steps and access its methods. The defineStepper function creates a stepper with defined steps, and the useStepper hook provides access to stepper control methods.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/api-references/hook.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@stepperize/solid\";\n\nconst { useStepper } = defineStepper(\n  { id: \"first\", title: \"First step\" },\n  { id: \"second\", title: \"Second step\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n  // Use stepper methods here\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering UI Based on External State with match Method in useStepper - TypeScript\nDESCRIPTION: This snippet shows how to use the match method to render content based on an external state value that matches a step's ID, enabling external state-driven step selection and UI updates. Dependencies: @stepperize/react, React. Inputs include a state variable (matching a step's ID) and a mapping of IDs to render functions; output is the React element for the matched state. Useful for integrating with server/client state, especially in SSR frameworks.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/hook.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \\\"react\\\";\nimport { defineStepper } from \\\"@stepperize/react\\\";\n\nconst { useStepper } = defineStepper(\n  { id: \\\"first\\\", title: \\\"First step\\\" },\n  { id: \\\"second\\\", title: \\\"Second step\\\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n  const state = \\\"first\\\"; // \"Value from server or client state that matches the id of the step\";\n\n  return (\n    <React.Fragment>\n      {methods.match(state, {\n        first: (step) => <p>First: {step.title}</p>,\n        second: (step) => <p>Second: {step.title}</p>,\n      })}\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Steps with defineStepper in React\nDESCRIPTION: This example demonstrates how to call the defineStepper function with step configurations. Each step requires a unique id and can have custom properties like title and description that can be used in the UI.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/define.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { Scoped, useStepper, steps } = defineStepper(\n  { id: \"step-1\", title: \"Step 1\", description: \"First step\" },\n  { id: \"step-2\", title: \"Step 2\", description: \"Second step\" },\n  { id: \"step-3\", title: \"Step 3\", description: \"Third step\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Logic Before Moving to Next Step with beforeNext in useStepper - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the beforeNext method to execute logic or validation before advancing to the next step. It accepts a function returning a boolean or Promise<boolean>; if the result is true, the stepper proceeds. Dependencies: @stepperize/react, React. Inputs include a callback handling validation; output is conditional navigation. Suitable for form validation scenarios.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/hook.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \\\"react\\\";\nimport { defineStepper } from \\\"@stepperize/react\\\";\n\nconst { useStepper } = defineStepper(\n  { id: \\\"first\\\", title: \\\"First step\\\" },\n  { id: \\\"second\\\", title: \\\"Second step\\\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  return (\n    <button\n      onClick={() => {\n        methods.beforeNext(() => {\n          // Your logic here\n          return true; // or false\n        });\n      }}\n    >\n      Next\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Stepper Steps\nDESCRIPTION: Example of defining multiple steps using the defineStepper constructor, including step IDs, titles, and descriptions.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/packages/vue/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst { Scoped, useStepper, steps } = defineStepper(\n  { id: \"step-1\", title: \"Step 1\", description: \"Description for step 1\" },\n  { id: \"step-2\", title: \"Step 2\", description: \"Description for step 2\" },\n  { id: \"step-3\", title: \"Step 3\", description: \"Description for step 3\" },\n  { id: \"step-4\", title: \"Step 4\", description: \"Description for step 4\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Logic After Moving to Next Step with afterNext in useStepper - TypeScript\nDESCRIPTION: This snippet shows the use of the afterNext method to perform side effects after the stepper has advanced to the next step. The provided function can return void or a Promise<void>. Dependencies: @stepperize/react, React. Input is a side-effect callback; output is navigation followed by execution of the callback.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/hook.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \\\"react\\\";\nimport { defineStepper } from \\\"@stepperize/react\\\";\n\nconst { useStepper } = defineStepper(\n  { id: \\\"first\\\", title: \\\"First step\\\" },\n  { id: \\\"second\\\", title: \\\"Second step\\\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  return (\n    <button\n      onClick={() =>\n        methods.afterNext(() => {\n          // Your logic here\n        })\n      }\n    >\n      Next\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Stepper Implementation with Navigation\nDESCRIPTION: Shows a complete implementation of a stepper component with navigation, panel rendering, and controls\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/api.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst { Stepper } = defineStepper(\n  { id: \"step-1\", title: \"Step 1\" },\n  { id: \"step-2\", title: \"Step 2\" },\n  { id: \"step-3\", title: \"Step 3\" }\n);\nexport function MyFirstStepper() {\n  return (\n    <Stepper.Provider className=\"space-y-4\">\n      {({ methods }) => (\n        <>\n          <Stepper.Navigation>\n            {methods.all.map((step) => (\n              <Stepper.Step of={step} onClick={() => methods.goTo(step.id)}>\n                <Stepper.Title>{step.title}</Stepper.Title>\n              </Stepper.Step>\n            ))}\n          </Stepper.Navigation>\n          {methods.switch({\n            \"step-1\": (step) => <Content id={step.id} />,\n            \"step-2\": (step) => <Content id={step.id} />,\n            \"step-3\": (step) => <Content id={step.id} />,\n          })}\n          <Stepper.Controls>\n            {!methods.isLast && (\n              <Button\n                variant=\"secondary\"\n                onClick={methods.prev}\n                disabled={methods.isFirst}\n              >\n                Previous\n              </Button>\n            )}\n            <Button onClick={methods.isLast ? methods.reset : methods.next}>\n              {methods.isLast ? \"Reset\" : \"Next\"}\n            </Button>\n          </Stepper.Controls>\n        </>\n      )}\n    </Stepper.Provider>\n  );\n}\n\nconst Content = ({ id }: { id: string }) => {\n  return (\n    <Stepper.Panel className=\"h-[200px] content-center rounded border bg-slate-50 p-8\">\n      <p className=\"text-xl font-normal\">Content for {id}</p>\n    </Stepper.Panel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Stepper and Using Stepper.Provider in TSX\nDESCRIPTION: Defines a stepper instance using `defineStepper` and demonstrates how the `Stepper.Provider` component makes the `useStepper` hook available to child components. Using `useStepper` outside the provider context will not work, while using it within a component rendered inside the provider is successful.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/api.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nconst { Stepper, useStepper } = defineStepper(\n  { id: \"step-1\", title: \"Step 1\" },\n  { id: \"step-2\", title: \"Step 2\" },\n  { id: \"step-3\", title: \"Step 3\" }\n);\n\nexport function MyStepper() {\n  const methods = useStepper(); // ❌ This won't work if the component is not within the provider\n  return (\n    <Stepper.Provider>\n      <MyCustomComponent />\n    </Stepper.Provider>\n  );\n}\n\nfunction MyCustomComponent() {\n  const methods = useStepper(); // ✅ This will work\n  return <div>{methods.currentStep.title}</div>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Stepper with Stepperize in TypeScript\nDESCRIPTION: This snippet defines a stepper instance using Stepperize's defineStepper function, specifying the sequence of steps with ids and titles. It is intended for use across multiple components, enabling shared navigation logic. The Stepper instance object provides methods for scope management and state access, with dependencies on @stepperize/vue.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/scoped.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineStepper } from \"@stepperize/vue\";\n\nexport const Stepper = defineStepper(\n  { id: \"first\", title: \"First\" },\n  { id: \"second\", title: \"Second\" },\n  { id: \"last\", title: \"Last\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stepper Component with React\nDESCRIPTION: A React component that uses the useStepper hook to display the current step and navigate between steps with Previous and Next buttons.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction StepperComponent() {\n  const { currentStep, nextStep, prevStep } = useStepper();\n\n  return (\n    <div>\n      <h2>{currentStep.title}</h2>\n      <p>{currentStep.description}</p>\n      <button onClick={prevStep}>Previous</button>\n      <button onClick={nextStep}>Next</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the shadcn-stepper Component in TypeScript/React\nDESCRIPTION: This TypeScript/React code defines a customizable Stepper component for manual installation. It utilizes `@stepperize/react` for state management and step logic, `@radix-ui/react-slot` for flexible rendering, `class-variance-authority` for managing style variants (horizontal, vertical, circle), and includes context (`StepperContext`), hooks (`useStepperProvider`, `useStepper`), and various sub-components (`StepperContainer`, `Navigation`, `Step`, `Title`, `Description`, `Panel`, `Controls`) for structure and functionality. Dependencies include React, `@radix-ui/react-slot`, `@stepperize/react`, `class-variance-authority`, a `cn` utility function (likely from `clsx` + `tailwind-merge`), and a `Button` component (e.g., from `shadcn/ui`).\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot } from \"@radix-ui/react-slot\";\nimport * as Stepperize from \"@stepperize/react\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/registry/new-york/ui/button\";\n\nconst StepperContext = React.createContext<Stepper.ConfigProps | null>(null);\n\nconst useStepperProvider = (): Stepper.ConfigProps => {\n  const context = React.useContext(StepperContext);\n  if (!context) {\n    throw new Error(\"useStepper must be used within a StepperProvider.\");\n  }\n  return context;\n};\n\nconst defineStepper = <const Steps extends Stepperize.Step[]>(\n  ...steps: Steps\n): Stepper.DefineProps<Steps> => {\n  const { Scoped, useStepper, ...rest } = Stepperize.defineStepper(...steps);\n\n  const StepperContainer = ({\n    children,\n    className,\n    ...props\n  }: Omit<React.ComponentProps<\"div\">, \"children\"> & {\n    children:\n      | React.ReactNode\n      | ((props: { methods: Stepperize.Stepper<Steps> }) => React.ReactNode);\n  }) => {\n    const methods = useStepper();\n\n    return (\n      <div\n        date-component=\"stepper\"\n        className={cn(\"w-full\", className)}\n        {...props}\n      >\n        {typeof children === \"function\" ? children({ methods }) : children}\n      </div>\n    );\n  };\n\n  return {\n    ...rest,\n    useStepper,\n    Stepper: {\n      Provider: ({\n        variant = \"horizontal\",\n        labelOrientation = \"horizontal\",\n        tracking = false,\n        children,\n        className,\n        ...props\n      }) => {\n        return (\n          <StepperContext.Provider\n            value={{ variant, labelOrientation, tracking }}\n          >\n            <Scoped\n              initialStep={props.initialStep}\n              initialMetadata={props.initialMetadata}\n            >\n              <StepperContainer className={className} {...props}>\n                {children}\n              </StepperContainer>\n            </Scoped>\n          </StepperContext.Provider>\n        );\n      },\n      Navigation: ({\n        children,\n        \"aria-label\": ariaLabel = \"Stepper Navigation\",\n        ...props\n      }) => {\n        const { variant } = useStepperProvider();\n        return (\n          <nav\n            date-component=\"stepper-navigation\"\n            aria-label={ariaLabel}\n            role=\"tablist\"\n            {...props}\n          >\n            <ol\n              date-component=\"stepper-navigation-list\"\n              className={classForNavigationList({ variant: variant })}\n            >\n              {children}\n            </ol>\n          </nav>\n        );\n      },\n      Step: ({ children, className, icon, ...props }) => {\n        const { variant, labelOrientation } = useStepperProvider();\n        const { current } = useStepper();\n\n        const utils = rest.utils;\n        const steps = rest.steps;\n\n        const stepIndex = utils.getIndex(props.of);\n        const step = steps[stepIndex];\n        const currentIndex = utils.getIndex(current.id);\n\n        const isLast = utils.getLast().id === props.of;\n        const isActive = current.id === props.of;\n\n        const dataState = getStepState(currentIndex, stepIndex);\n        const childMap = useStepChildren(children);\n\n        const title = childMap.get(\"title\");\n        const description = childMap.get(\"description\");\n        const panel = childMap.get(\"panel\");\n\n        if (variant === \"circle\") {\n          return (\n            <li\n              date-component=\"stepper-step\"\n              className={cn(\n                \"flex shrink-0 items-center gap-4 rounded-md transition-colors\",\n                className\n              )}\n            >\n              <CircleStepIndicator\n                currentStep={stepIndex + 1}\n                totalSteps={steps.length}\n              />\n              <div\n                date-component=\"stepper-step-content\"\n                className=\"flex flex-col items-start gap-1\"\n              >\n                {title}\n                {description}\n              </div>\n            </li>\n          );\n        }\n\n        return (\n          <>\n            <li\n              date-component=\"stepper-step\"\n              className={cn([\n                \"group peer relative flex items-center gap-2\",\n                \"data-[variant=vertical]:flex-row\",\n                \"data-[label-orientation=vertical]:w-full\",\n                \"data-[label-orientation=vertical]:flex-col\",\n                \"data-[label-orientation=vertical]:justify-center\",\n              ])}\n              data-variant={variant}\n              data-label-orientation={labelOrientation}\n              data-state={dataState}\n              data-disabled={props.disabled}\n            >\n              <Button\n                id={`step-${step.id}`}\n                date-component=\"stepper-step-indicator\"\n                type=\"button\"\n                role=\"tab\"\n                tabIndex={dataState !== \"inactive\" ? 0 : -1}\n                className=\"rounded-full\"\n                variant={dataState !== \"inactive\" ? \"default\" : \"secondary\"}\n                size=\"icon\"\n                aria-controls={`step-panel-${props.of}`}\n                aria-current={isActive ? \"step\" : undefined}\n                aria-posinset={stepIndex + 1}\n                aria-setsize={steps.length}\n                aria-selected={isActive}\n                onKeyDown={(e) =>\n                  onStepKeyDown(\n                    e,\n                    utils.getNext(props.of),\n                    utils.getPrev(props.of)\n                  )\n                }\n                {...props}\n              >\n                {icon ?? stepIndex + 1}\n              </Button>\n              {variant === \"horizontal\" && labelOrientation === \"vertical\" && (\n                <StepperSeparator\n                  orientation=\"horizontal\"\n                  labelOrientation={labelOrientation}\n                  isLast={isLast}\n                  state={dataState}\n                  disabled={props.disabled}\n                />\n              )}\n              <div\n                date-component=\"stepper-step-content\"\n                className=\"flex flex-col items-start\"\n              >\n                {title}\n                {description}\n              </div>\n            </li>\n\n            {variant === \"horizontal\" && labelOrientation === \"horizontal\" && (\n              <StepperSeparator\n                orientation=\"horizontal\"\n                isLast={isLast}\n                state={dataState}\n                disabled={props.disabled}\n              />\n            )}\n\n            {variant === \"vertical\" && (\n              <div className=\"flex gap-4\">\n                {!isLast && (\n                  <div className=\"flex justify-center ps-[calc(var(--spacing)_*_4.5_-_1px)]\">\n                    <StepperSeparator\n                      orientation=\"vertical\"\n                      isLast={isLast}\n                      state={dataState}\n                      disabled={props.disabled}\n                    />\n                  </div>\n                )}\n                <div className=\"my-3 flex-1 ps-4\">{panel}</div>\n              </div>\n            )}\n          </>\n        );\n      },\n      Title,\n      Description,\n      Panel: ({ children, asChild, ...props }) => {\n        const Comp = asChild ? Slot : \"div\";\n        const { tracking } = useStepperProvider();\n\n        return (\n          <Comp\n            date-component=\"stepper-step-panel\"\n            ref={(node) => scrollIntoStepperPanel(node, tracking)}\n            {...props}\n          >\n            {children}\n          </Comp>\n        );\n      },\n      Controls: ({ children, className, asChild, ...props }) => {\n        const Comp = asChild ? Slot : \"div\";\n        return (\n          <Comp\n            date-component=\"stepper-controls\"\n            className={cn(\"flex justify-end gap-4\", className)}\n            {...props}\n          >\n            {children}\n          </Comp>\n        );\n      },\n    },\n  };\n};\n\nconst Title = ({\n  children,\n  className,\n  asChild,\n  ...props\n}: React.ComponentProps<\"h4\"> & { asChild?: boolean }) => {\n  const Comp = asChild ? Slot : \"h4\";\n\n  return (\n    <Comp\n      date-component=\"stepper-step-title\"\n      className={cn(\"text-base font-medium\", className)}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n};\n\nconst Description = ({\n  children,\n  className,\n  asChild,\n  ...props\n}: React.ComponentProps<\"p\"> & { asChild?: boolean }) => {\n```\n\n----------------------------------------\n\nTITLE: Defining Stepper Steps in React\nDESCRIPTION: Example of defining a stepper with four steps using the defineStepper constructor. Each step has an id, title, and description.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/packages/react/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst { Scoped, useStepper, steps } = defineStepper(\n  { id: \"step-1\", title: \"Step 1\", description: \"Description for step 1\" },\n  { id: \"step-2\", title: \"Step 2\", description: \"Description for step 2\" },\n  { id: \"step-3\", title: \"Step 3\", description: \"Description for step 3\" },\n  { id: \"step-4\", title: \"Step 4\", description: \"Description for step 4\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Step-based UI with switch Method in useStepper - TypeScript\nDESCRIPTION: This snippet illustrates using the switch method from the useStepper hook to render different UI elements depending on the current step, similar to a switch-case mechanism. It is useful for scalable step-specific rendering. Dependencies: @stepperize/react, React. The input is an object mapping step IDs to rendering functions; output is the render result of the matched step's function.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/hook.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \\\"react\\\";\nimport { defineStepper } from \\\"@stepperize/react\\\";\n\nconst { useStepper } = defineStepper(\n  { id: \\\"first\\\", title: \\\"First step\\\" },\n  { id: \\\"second\\\", title: \\\"Second step\\\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  return (\n    <React.Fragment>\n      {methods.switch({\n        first: (step) => <p>First: {step.title}</p>,\n        second: (step) => <p>Second: {step.title}</p>,\n      })}\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Stepper Navigation in React Component\nDESCRIPTION: Example React component that uses the useStepper hook to display the current step and provide navigation controls for moving between steps.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/packages/react/README.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction StepperComponent() {\n  const { currentStep, nextStep, prevStep } = useStepper();\n\n  return (\n    <div>\n      <h2>{currentStep.title}</h2>\n      <p>{currentStep.description}</p>\n      <button onClick={prevStep}>Previous</button>\n      <button onClick={nextStep}>Next</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Stepper Steps in React\nDESCRIPTION: Creates a stepper with four steps, each having an id, title, and description. The function returns components and utilities for managing the stepper state.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst { Scoped, useStepper, steps, utils } = defineStepper(\n  { id: \"step-1\", title: \"Step 1\", description: \"Description for step 1\" },\n  { id: \"step-2\", title: \"Step 2\", description: \"Description for step 2\" },\n  { id: \"step-3\", title: \"Step 3\", description: \"Description for step 3\" },\n  { id: \"step-4\", title: \"Step 4\", description: \"Description for step 4\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Scoped Stepper State with Stepperize in React (TSX)\nDESCRIPTION: This snippet demonstrates how to define a stepper using the defineStepper utility from @stepperize/react and use its Scoped provider to share and synchronize step state among child components. Key child components access stepper state with useStepper to conditionally render UI based on the current step and handle navigation. Dependencies include React and @stepperize/react. Inputs include step definitions and expected outputs are rendered step UI and appropriate navigation behavior.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/scoped.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport { defineStepper } from \"@stepperize/react\";\n\nconst Stepper = defineStepper(\n  { id: \"first\", title: \"First\" },\n  { id: \"second\", title: \"Second\" },\n  { id: \"last\", title: \"Last\" }\n);\n\nexport const MyScopedStepper = () => (\n  <Stepper.Scoped>\n    <StepContent />\n    <StepNavigation />\n  </Stepper.Scoped>\n);\n\nconst StepContent = () => {\n  const { when } = Stepper.useStepper();\n  return (\n    <React.Fragment>\n      {when(\"first\", (step) => (\n        <p>Starting with {step.title}</p>\n      ))}\n      {when(\"second\", (step) => (\n        <p>In the middle: {step.title}</p>\n      ))}\n    </React.Fragment>\n  );\n};\n\nconst StepNavigation = () => {\n  const { isLast, reset, next, when } = Stepper.useStepper();\n  return (\n    <button onClick={isLast ? reset : next}>\n      {when(\n        \"last\",\n        () => \"Reset\",\n        () => \"Next\"\n      )}\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using the switch Method for Step-based Content Rendering in SolidJS Stepper\nDESCRIPTION: Shows how to use the switch method to render different content based on the current step ID, similar to a switch-case structure. This provides a cleaner approach for step-specific UI rendering.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/api-references/hook.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@stepperize/solid\";\n\nconst { useStepper } = defineStepper(\n  { id: \"first\", title: \"First step\" },\n  { id: \"second\", title: \"Second step\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  return (\n    <>\n      {methods.switch({\n        first: (step) => <p>First: {step.title}</p>,\n        second: (step) => <p>Second: {step.title}</p>,\n      })}\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Nesting Scoped Stepper Contexts for Hierarchical Step Flows in React (TSX)\nDESCRIPTION: This example shows how to create multiple stepper contexts using Scoped components for more advanced, nested workflows. It defines separate steppers for global and local flows using defineStepper, and provides independent stepper controls and content. This enables modular multi-level stepper logic, suited for complex interfaces. Dependencies are React and @stepperize/react. Inputs are global and local step definitions and the output is a nested UI with independent stepper states.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/scoped.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport { defineStepper } from \"@stepperize/react\";\n// ---cut-before---\nconst GlobalStepper = defineStepper(\n  { id: \"start\", title: \"Start\" },\n  { id: \"middle\", title: \"Middle\" },\n  { id: \"end\", title: \"End\" }\n);\n\nconst LocalStepper = defineStepper(\n  { id: \"sub1\", title: \"Sub-step 1\" },\n  { id: \"sub2\", title: \"Sub-step 2\" }\n);\n\nexport const NestedSteppers = () => (\n  <GlobalStepper.Scoped>\n    <GlobalStepContent />\n    <GlobalNavigation />\n    <LocalStepper.Scoped>\n      <LocalStepContent />\n      <LocalNavigation />\n    </LocalStepper.Scoped>\n  </GlobalStepper.Scoped>\n);\n\n// Use GlobalStepper.useStepper() for global scope\n// Use LocalStepper.useStepper() for local scope\n```\n\n----------------------------------------\n\nTITLE: Initializing Stepperize Metadata in React - TypeScript\nDESCRIPTION: Demonstrates how to initialize step metadata using the useStepper hook from @stepperize/react within a React component. Requires the @stepperize/react library and a TypeScript React setup. The initialMetadata parameter allows assigning default values to specific steps (by step ID), and these values can be accessed via methods.metadata in the rendered component. Inputs: stepper configuration and initialMetadata. Outputs: rendered step data. Limitations: Metadata must be keyed by valid step IDs.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/hook.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \\\"react\\\";\nimport { defineStepper } from \\\"@stepperize/react\\\";\n\nconst { useStepper } = defineStepper(\n  { id: \\\"first\\\", title: \\\"First step\\\" },\n  { id: \\\"second\\\", title: \\\"Second step\\\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper({\n    initialMetadata: {\n      first: {\n        value: \\\"1\\\",\n      },\n    },\n  });\n\n  return (\n    <React.Fragment>\n      <p>First step: {methods.metadata.first?.value}</p>\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing useStepper Hook from defineStepper in Stepperize v2\nDESCRIPTION: This snippet illustrates how to access the useStepper hook from the defineStepper function in Stepperize v2. It replaces the standalone useStepper hook from v1.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/migration/migrating-to-v2.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst { useStepper } = defineStepper(\n  { id: \"step-1\", title: \"Label 1\", description: \"Description 1\" },\n  { id: \"step-2\", title: \"Label 2\", description: \"Description 2\" },\n  { id: \"step-3\", title: \"Label 3\", description: \"Description 3\" },\n  { id: \"step-4\", title: \"Label 4\", description: \"Description 4\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Stepper Component Implementation in TSX\nDESCRIPTION: Shows the basic structure and implementation of a Stepper component using defineStepper function and its subcomponents\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/api.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@/components/ui/stepper\";\n\nconst { Stepper } = defineStepper(\n  { id: \"step-1\", title: \"Step 1\" },\n  { id: \"step-2\", title: \"Step 2\" },\n  { id: \"step-3\", title: \"Step 3\" }\n);\n\nexport function Component() {\n  return (\n    <Stepper.Provider>\n      <Stepper.Navigation>\n        <Stepper.Step>\n          <Stepper.Title />\n          <Stepper.Description />\n        </Stepper.Step>\n        ...\n      </Stepper.Navigation>\n      <Stepper.Panel />\n      <Stepper.Controls>...</Stepper.Controls>\n    </Stepper.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Stepper Instance Creation\nDESCRIPTION: Demonstrates how to create a stepper instance using the defineStepper function with step definitions\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/api.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { Stepper, ... } = defineStepper(\n  { id: \"step-1\", title: \"Step 1\" },\n  { id: \"step-2\", title: \"Step 2\" },\n  { id: \"step-3\", title: \"Step 3\" }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Scoped Stepper Hierarchy in Vue SFC\nDESCRIPTION: The root SFC component creates a scope using Stepper.Scope and injects child content and navigation components, ensuring all children share the same stepper state. It expects the imported Stepper instance, which must be defined externally, and demonstrates how to structure a Stepper-aware application using SFC syntax. Dependencies include the main Stepper instance and any child stepper-aware components.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/scoped.mdx#2025-04-23_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Stepper } from './state.ts'\nimport StepContent from './StepContent.vue'\nimport StepNavigation from './StepNavigation.vue'\n\n</script>\n\n<template>\n  <Stepper.Scope>\n    <StepContent />\n    <StepNavigation />\n  </Stepper.Scope>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Logic Before Moving to Specific Step with beforeGoTo in useStepper - TypeScript\nDESCRIPTION: This snippet demonstrates conditionally allowing navigation to a specific step using beforeGoTo. The callback receives logic returning a boolean/Promise<boolean> and can block or allow stepper navigation as needed. Dependencies: @stepperize/react, React. Inputs are the step ID and callback; output is conditional navigation.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/hook.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \\\"react\\\";\nimport { defineStepper } from \\\"@stepperize/react\\\";\n\nconst { useStepper } = defineStepper(\n  { id: \\\"first\\\", title: \\\"First step\\\" },\n  { id: \\\"second\\\", title: \\\"Second step\\\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  return (\n    <button\n      onClick={() =>\n        methods.beforeGoTo(\\\"first\\\", () => {\n          // Your logic here\n          return true; // or false\n        })\n      }\n    >\n      Go to first step\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Steps with the switch Method in Stepperize (React/TSX)\nDESCRIPTION: This snippet demonstrates how to use the new switch method from the useStepper hook, allowing for simplified, declarative rendering of different components or elements based on the current step. It requires the useStepper hook from Stepperize v3 or later as a dependency. The function stepper.switch accepts an object mapping step keys to render functions, each receiving the current step as a parameter and returning JSX elements, enabling clear, maintainable control flow for multi-step processes in React components.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/migration/migrating-to-v3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nconst MySteps = () => {\n  const stepper = useStepper();\n\n  return (\n    <>\n      {stepper.switch({\n        first: (step) => <p>This is the {step.title} step.</p>,\n        second: (step) => <p>This is the {step.title} step.</p>,\n        last: (step) => <p>You have reached the {step.title} step.</p>,\n      })}\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Step-Aware Content Rendering with StepperWhen in Vue SFC\nDESCRIPTION: This child component utilizes the StepperWhen utility to display content conditionally based on the current step within the shared stepper scope. It retrieves the stepper instance via Stepper.useStepper and renders a different message for each step. It must be nested inside a Stepper.Scope provider and depends on the @stepperize/vue library.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/scoped.mdx#2025-04-23_snippet_2\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Stepper } from './state.ts'\nimport { StepperWhen } from '@stepperize/vue'\n\nconst stepper = Stepper.useStepper()\n</script>\n\n<template>\n  <StepperWhen :stepper when=\"first\">\n    <template #default=\"step\">\n      <p>Starting with: {{ step.title }}</p>\n    </template>\n  </StepperWhen>\n  <StepperWhen :stepper when=\"second\">\n    <template #default=\"step\">\n      <p>In the middle: {{ step.title }}</p>\n    </template>\n  </StepperWhen>\n  <StepperWhen :stepper when=\"last\">\n    <template #default=\"step\">\n      <p>Ending with: {{ step.title }}</p>\n    </template>\n  </StepperWhen>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Stepper Metadata Dynamically in React - TypeScript\nDESCRIPTION: Shows how to programmatically set metadata for a step using the setMetadata method from the useStepper API in a React functional component. Requires initialization of a stepper via defineStepper and the @stepperize/react dependency. setMetadata accepts a step ID and a values object, allowing for updates to step-associated values after the stepper is mounted. Inputs: step ID and metadata object. Outputs: updated metadata accessible via the methods object. No debouncing or validation is provided by default.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/hook.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \\\"react\\\";\nimport { defineStepper } from \\\"@stepperize/react\\\";\n\nconst { useStepper } = defineStepper(\n  { id: \\\"first\\\", title: \\\"First step\\\" },\n  { id: \\\"second\\\", title: \\\"Second step\\\" },\n  { id: \\\"last\\\", title: \\\"Last step\\\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  methods.setMetadata(\\\"first\\\", {\n    value: \\\"1\\\",\n  });\n\n  return (\n    <React.Fragment>\n      <p>First step: {methods.metadata.first?.value}</p>\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Next Action Callback in TSX\nDESCRIPTION: Demonstrates using the `beforeNext` method to execute a callback before navigating to the next step. This example shows an asynchronous validation check using `form.trigger()`; the navigation proceeds only if the callback returns `true`.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/api.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nmethods.beforeNext(async () => {\n  const valid = await form.trigger();\n  if (!valid) return false;\n  return true;\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Independent Stepper Instances in TSX\nDESCRIPTION: Demonstrates how to define and use multiple, independent stepper instances within the same application. Each instance created with `defineStepper` has its own `Stepper.Provider`, ensuring they operate without interfering with each other.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/api.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nconst stepperInstance1 = defineStepper(\n  { id: \"step-1\", title: \"Step 1\" },\n  { id: \"step-2\", title: \"Step 2\" },\n  { id: \"step-3\", title: \"Step 3\" }\n)\n\nconst stepperInstance2 = defineStepper(\n  { id: \"step-1\", title: \"Step 1\" },\n  { id: \"step-2\", title: \"Step 2\" },\n  { id: \"step-3\", title: \"Step 3\" }\n)\n\n<stepperInstance1.Stepper.Provider>\n  <stepperInstance2.Stepper.Provider>\n    ...\n  </stepperInstance2.Stepper.Provider>\n</stepperInstance1.Stepper.Provider>\n```\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with when for Complex Conditions in useStepper - TypeScript\nDESCRIPTION: This snippet demonstrates advanced conditional rendering with the when method, where the condition is based on both current step's ID and additional boolean values. This enables multi-condition checks for controlling stepper UI visibility or behaviors. Dependencies: @stepperize/react, React. Requires the condition booleans to be computed prior to rendering. Inputs are an array containing the step ID and boolean values; output depends on the truthiness of all boolean conditions.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/hook.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \\\"react\\\";\nimport { defineStepper } from \\\"@stepperize/react\\\";\n\nconst { useStepper } = defineStepper(\n  { id: \\\"first\\\", title: \\\"First step\\\" },\n  { id: \\\"second\\\", title: \\\"Second step\\\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  const condition1 = true; // or false\n  const condition2 = true; // or false\n\n  return (\n    <React.Fragment>\n      {methods.when([\\\"first\\\", condition1, condition2], (step) => (\n        <p>First step: {step.title}</p>\n      ))}\n      {methods.when(\\\"second\\\", (step) => (\n        <p>Second step: {step.title}</p>\n      ))}\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Resetting Stepper Metadata with resetMetadata in React - TypeScript\nDESCRIPTION: Demonstrates the use of the resetMetadata method provided by useStepper to reset or optionally preserve initial step metadata. The code binds a button click to resetMetadata(true), restoring the initial metadata defined at stepper creation. Dependencies include @stepperize/react, and the component must be used within a valid React application. Inputs: optional boolean flag. Outputs: resets the metadata for all steps. This does not affect other stepper state or navigation.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/hook.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \\\"react\\\";\nimport { defineStepper } from \\\"@stepperize/react\\\";\n\nconst { useStepper } = defineStepper(\n  { id: \\\"first\\\", title: \\\"First step\\\" },\n  { id: \\\"second\\\", title: \\\"Second step\\\" },\n  { id: \\\"last\\\", title: \\\"Last step\\\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  return (\n    <React.Fragment>\n      <button onClick={() => methods.resetMetadata(true)}>\n        Reset metadata\n      </button>\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Utils Functions in a React Component\nDESCRIPTION: This code snippet demonstrates how to use various Utils functions within a React component. It shows how to define a stepper, fetch all steps, get first and last steps, retrieve steps by ID and index, and navigate between steps.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/utils.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport { defineStepper } from \"@stepperize/react\";\n\n// Define the stepper with the steps\nconst { utils } = defineStepper(\n  { id: \"step1\", name: \"Step 1\" },\n  { id: \"step2\", name: \"Step 2\" },\n  { id: \"step3\", name: \"Step 3\" },\n  { id: \"step4\", name: \"Step 4\" }\n);\n\nexport function StepNavigator() {\n  // Fetch all steps\n  const allSteps = utils.getAll(); // Result: Array of all steps\n\n  // Fetch the first and last steps\n  const firstStep = utils.getFirst(); // Result: { id: 'step1', name: 'Step 1' }\n  const lastStep = utils.getLast(); // Result: { id: 'step4', name: 'Step 4' }\n\n  // Get a step by ID\n  const stepById = utils.get(\"step3\"); // Result: { id: 'step3', name: 'Step 3' }\n\n  // Get the index of a step by ID\n  const indexOfStep2 = utils.getIndex(\"step2\"); // Result: 1\n\n  // Get a step by its index\n  const stepAtIndex2 = utils.getByIndex(2); // Result: { id: 'step3', name: 'Step 3' }\n\n  // Get the next and previous steps\n  const nextStepAfter1 = utils.getNext(\"step1\"); // Result: { id: 'step2', name: 'Step 2' }\n  const prevStepBefore3 = utils.getPrev(\"step3\"); // Result: { id: 'step2', name: 'Step 2' }\n\n  // Get neighbors of a step\n  const neighborsOfStep2 = utils.getNeighbors(\"step2\");\n  // Result: { prev: { id: 'step1', name: 'Step 1' }, next: { id: 'step3', name: 'Step 3' } }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Complex Conditional Rendering with Multiple Conditions in SolidJS Stepper\nDESCRIPTION: Demonstrates how to use the when method with an array parameter for complex conditional rendering based on both step ID and additional boolean conditions. This allows for multi-condition logic where all conditions must be true.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/api-references/hook.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@stepperize/solid\";\n\nconst { useStepper } = defineStepper(\n  { id: \"first\", title: \"First step\" },\n  { id: \"second\", title: \"Second step\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  const condition1 = true; // or false\n  const condition2 = true; // or false\n\n  return (\n    <>\n      {methods.when([\"first\", condition1, condition2], (step) => (\n        <p>First step: {step.title}</p>\n      ))}\n      {methods.when(\"second\", (step) => (\n        <p>Second step: {step.title}</p>\n      ))}\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Stepper Metadata Methods in TSX\nDESCRIPTION: Illustrates how to access metadata and related functions (`getMetadata`, `setMetadata`, `resetMetadata`) using the `useStepper` hook. This allows storing and retrieving custom information associated with steps.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/api.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nconst { metadata, getMetadata, setMetadata, resetMetadata } = useStepper();\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Steps with defineStepper in Stepperize v2\nDESCRIPTION: This snippet demonstrates how to use the new defineStepper function to create a Stepper object. It replaces the old defineSteps helper and simplifies the step definition process.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/migration/migrating-to-v2.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst Stepper = defineStepper(\n  { id: \"step-1\", title: \"Label 1\", description: \"Description 1\" },\n  { id: \"step-2\", title: \"Label 2\", description: \"Description 2\" },\n  { id: \"step-3\", title: \"Label 3\", description: \"Description 3\" },\n  { id: \"step-4\", title: \"Label 4\", description: \"Description 4\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Using switch Method for Step-based Content Rendering in Vue JSX\nDESCRIPTION: Demonstrates how to use the switch method of the stepper to render different content based on the current step in a Vue JSX component.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/composable.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineComponent } from 'vue'\n\nconst MyStepperComponent = defineComponent(() => {\n  const stepper = useStepper()\n\n  return () => (\n    <>\n      { stepper.value.switch({\n        first: step => <p>First: {step.title}</p>,\n        second: step => <p>Second: {step.title}</p>,\n        last: () => <p>Finished!</p>,\n      }) }\n    </>\n  )\n\n})\n```\n\n----------------------------------------\n\nTITLE: Importing useStepper from @stepperize/vue\nDESCRIPTION: Example showing the @stepperize/vue package import. In v2, the useStepper composable takes an object with initialStep and initialMetadata properties rather than a simple string parameter.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/migration/migrating-to-v2.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@stepperize/vue\n```\n\n----------------------------------------\n\nTITLE: Initializing useStepper Composable in Vue\nDESCRIPTION: Demonstrates how to import and use the defineStepper function to create a useStepper composable with defined steps.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/composable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { defineStepper } from \"@stepperize/vue\";\n\nconst { useStepper } = defineStepper(\n  { id: \"first\" },\n  { id: \"second\" },\n  { id: \"last\" }\n);\n\nconst stepper = useStepper();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Stepper Instance Definition with Extended Properties\nDESCRIPTION: Example of defining a stepper instance with additional properties like descriptions for each step\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/api.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst stepperInstance = defineStepper(\n  { id: \"step-1\", title: \"Step 1\", description: \"Step 1 description\" },\n  { id: \"step-2\", title: \"Step 2\", description: \"Step 2 description\" },\n  { id: \"step-3\", title: \"Step 3\", description: \"Step 3 description\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Stepper Methods via Children Prop in TSX\nDESCRIPTION: Illustrates accessing the stepper methods directly through a function passed as children to the `Stepper.Provider` component. This pattern allows direct access to methods within the provider's immediate scope.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/api.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nexport function MyStepper() {\n  return (\n    <Stepper.Provider>\n      {({ methods }) => (\n        ...\n      )}\n    </Stepper.Provider>\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using the match Method for External State-based Rendering in SolidJS Stepper\nDESCRIPTION: Demonstrates the match method for rendering content based on an external state value that corresponds to step IDs. This is useful for integrating server-side or client-side state with step rendering.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/api-references/hook.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@stepperize/solid\";\n\nconst { useStepper } = defineStepper(\n  { id: \"first\", title: \"First step\" },\n  { id: \"second\", title: \"Second step\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n  const state = \"first\"; // \"Value from server or client state that matches the id of the step\";\n\n  return (\n    <>\n      {methods.match(state, {\n        first: (step) => <p>First: {step.title}</p>,\n        second: (step) => <p>Second: {step.title}</p>,\n      })}\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Conditional Content with StepperWhen in Vue SFC\nDESCRIPTION: Shows how to use the StepperWhen component to conditionally render content based on the current step in a Vue Single File Component.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/composable.mdx#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n  import { defineStepper, StepperWhen } from '@stepperize/vue'\n  const stepper = useStepper()\n</script>\n\n<template>\n\n  <StepperWhen :stepper when=\"first\">\n    <template #default=\"step\">\n      <p>First step: {{ step.title }}</p>\n    </template>\n  </StepperWhen>\n\n  <StepperWhen :stepper when=\"second\">\n    <template #default=\"step\">\n      <p>Second step: {{ step.title }}</p>\n    </template>\n  </StepperWhen>\n\n  <StepperWhen :stepper when=\"last\">\n    <template #default>\n      Finished!\n    </template>\n    <template #else>\n      Not finished yet\n    </template>\n  </StepperWhen>\n\n</template>\n```\n\n----------------------------------------\n\nTITLE: Skipping to a Specific Step using goTo in TSX\nDESCRIPTION: Shows how to programmatically navigate to a specific step using the `goTo` method available from the stepper methods. This example demonstrates skipping directly from step 1 to step 3.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/api.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n// From step 1 to step 3\nmethods.goTo(\"step-3\");\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Stepper with Initial Metadata in TSX\nDESCRIPTION: Demonstrates how to initialize the stepper using the `useStepper` composable and provide initial metadata for specific steps. The `initialMetadata` option accepts an object where keys are step IDs and values are the corresponding metadata objects.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/composable.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nconst stepper = useStepper({\n  initialMetadata: {\n    first: {\n      value: \"1\",\n    },\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Importing defineStepper from @stepperize/solid\nDESCRIPTION: This snippet shows how to import the defineStepper function from the @stepperize/solid package. This is the first step in creating a customizable stepper.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/api-references/define.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@stepperize/solid\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Conditional Content with when Method in Vue JSX\nDESCRIPTION: Demonstrates how to use the when method of the stepper to conditionally render content based on the current step in a Vue JSX component.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/composable.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineComponent } from 'vue'\n\nconst MyStepperComponent = defineComponent(() => {\nconst stepper = useStepper()\n\n    return () => (\n      <>\n        { stepper.value.when(\"first\", step => <p>First step: {step.title}</p>) }\n        { stepper.value.when(\"second\", step => <p>Second step: {step.title}</p>) }\n        { stepper.value.when(\"last\", \"Finished!\", \"Not finished yet\") }\n      </>\n    )\n\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Keyboard Navigation for Steps in React/TypeScript\nDESCRIPTION: This function, `onStepKeyDown`, is intended as a keyboard event handler for step elements (likely buttons). It listens for Arrow keys (Right, Down, Left, Up) to trigger navigation. Based on the key pressed, it identifies the target step (next or previous) using provided `nextStep` and `prevStep` data. It then attempts to find the corresponding step element in the DOM and focuses it, respecting step state (e.g., not focusing inactive next steps).\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/installation.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst onStepKeyDown = (\n  e: React.KeyboardEvent<HTMLButtonElement>,\n  nextStep: Stepperize.Step,\n  prevStep: Stepperize.Step\n) => {\n  const { key } = e;\n  const directions = {\n    next: [\"ArrowRight\", \"ArrowDown\"],\n    prev: [\"ArrowLeft\", \"ArrowUp\"],\n  };\n\n  if (directions.next.includes(key) || directions.prev.includes(key)) {\n    const direction = directions.next.includes(key) ? \"next\" : \"prev\";\n    const step = direction === \"next\" ? nextStep : prevStep;\n\n    if (!step) {\n      return;\n    }\n\n    const stepElement = document.getElementById(`step-${step.id}`);\n    if (!stepElement) {\n      return;\n    }\n\n    const isActive =\n      stepElement.parentElement?.getAttribute(\"data-state\") !== \"inactive\";\n    if (isActive || direction === \"prev\") {\n      stepElement.focus();\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Step Metadata in Stepperize – TypeScript/TSX\nDESCRIPTION: This snippet shows how to initialize step metadata when creating a stepper using the useStepper hook from @stepperize/solid. It imports defineStepper, defines step configurations, and initializes metadata via the initialMetadata option for the 'first' step. The metadata can then be accessed in your component via methods.metadata. Requires @stepperize/solid and a React/Solid-compatible setup. Outputs the value of the metadata for the current step.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/api-references/hook.mdx#2025-04-23_snippet_11\n\nLANGUAGE: TSX\nCODE:\n```\nimport { defineStepper } from \"@stepperize/solid\";\n\nconst { useStepper } = defineStepper(\n  { id: \"first\", title: \"First step\" },\n  { id: \"second\", title: \"Second step\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper({\n    initialMetadata: {\n      first: {\n        value: \"1\",\n      },\n    },\n  });\n\n  return (\n    <>\n      <p>First step: {methods.metadata.first?.value}</p>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using match Method for State-based Content Rendering in Vue JSX\nDESCRIPTION: Shows how to use the match method of the stepper to render content based on external state in a Vue JSX component.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/composable.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineComponent } from 'vue'\n\nconst MyStepperComponent = defineComponent(() => {\n  const stepper = useStepper()\n  const state = \"Value from server or client state\"\n\n  return () => (\n    <>\n      { stepper.value.match(state, {\n        first: step => <p>First: {step.title}</p>,\n        second: step => <p>Second: {step.title}</p>,\n        last: () => <p>Finished!</p>,\n      }) }\n    </>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Complex Conditional Rendering with StepperWhen in Vue SFC\nDESCRIPTION: Illustrates how to use StepperWhen with multiple conditions for more complex conditional rendering in a Vue Single File Component.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/composable.mdx#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { defineStepper, StepperWhen } from '@stepperize/vue'\n\nconst stepper = useStepper()\n\nconst condition1 = true; // or false\nconst condition2 = true; // or false\n\n</script>\n\n<template>\n\n  <StepperWhen :stepper :when=\"['first', condition1, condition2]\">\n    <template #default=\"step\">\n      <p>First step: {{ step.title }}</p>\n    </template>\n  </StepperWhen>\n\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using beforeGoTo and afterGoTo Methods in Vue\nDESCRIPTION: Demonstrates how to use the beforeGoTo and afterGoTo methods to execute functions before and after moving to a specific step in Vue.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/composable.mdx#2025-04-23_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst stepper = useStepper();\n</script>\n<template>\n  <button\n    @click=\"\n      () =>\n        stepper.beforeGoTo('first', () => {\n          // Your logic here\n          return true; // or false\n        })\n    \"\n  >\n    Go to first step\n  </button>\n</template>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst stepper = useStepper();\n</script>\n<template>\n  <button\n    @click=\"\n      () =>\n        stepper.afterGoTo('first', () => {\n          // Your logic here\n        })\n    \"\n  >\n    Go to first step\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Resetting Step Metadata with resetMetadata in Stepperize – TypeScript/TSX\nDESCRIPTION: This snippet shows how to reset or clear the metadata for steps in a stepper using the resetMetadata method. Invoking resetMetadata(true) will reset metadata and optionally preserve the initial metadata defined during initialization. This is typically called in an event handler, such as a button's onClick, and is dependent on @stepperize/solid. Useful for restoring the stepper to its initial metadata state.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/api-references/hook.mdx#2025-04-23_snippet_14\n\nLANGUAGE: TSX\nCODE:\n```\nimport { defineStepper } from \"@stepperize/solid\";\n\nconst { useStepper } = defineStepper(\n  { id: \"first\", title: \"First step\" },\n  { id: \"second\", title: \"Second step\" },\n  { id: \"last\", title: \"Last step\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  return (\n    <>\n      <button onClick={() => methods.resetMetadata(true)}>\n        Reset metadata\n      </button>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Step Metadata with getMetadata in Stepperize – TypeScript/TSX\nDESCRIPTION: This snippet demonstrates the use of the getMetadata method to retrieve metadata for a step by its ID after stepper initialization. getMetadata returns the metadata object for the specified step, here used to access and render the 'value' property for step 'first'. Requires @stepperize/solid and a setup compatible with functional components. The metadata is accessed on each render.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/api-references/hook.mdx#2025-04-23_snippet_13\n\nLANGUAGE: TSX\nCODE:\n```\nimport { defineStepper } from \"@stepperize/solid\";\n\nconst { useStepper } = defineStepper(\n  { id: \"first\", title: \"First step\" },\n  { id: \"second\", title: \"Second step\" },\n  { id: \"last\", title: \"Last step\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n  const metadata = methods.getMetadata(\"first\");\n\n  return (\n    <>\n      <p>First step: {metadata?.value}</p>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using StepperSwitch for Step-based Content Rendering in Vue SFC\nDESCRIPTION: Shows how to use the StepperSwitch component to render different content based on the current step in a Vue Single File Component.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/composable.mdx#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { defineStepper, StepperSwitch } from '@stepperize/vue'\n\nconst stepper = useStepper()\n\n</script>\n\n<template>\n\n  <StepperSwitch :stepper>\n    <template #first=\"step\">\n      <p>First: {{ step.title }}</p>\n    </template>\n    <template #second=\"step\">\n      <p>Second: {{ step.title }}</p>\n    </template>\n    <template #last>\n      Finished!\n    </template>\n  </StepperSwitch>\n\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing defineStepper from @stepperize/vue (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the defineStepper function from the @stepperize/vue library. Importing this function is necessary before configuring step definitions for your stepper UI. No special configuration is required; ensure the @stepperize/vue package is installed in your project.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/define.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineStepper } from \"@stepperize/vue\";\n```\n\n----------------------------------------\n\nTITLE: Importing defineStepper from @stepperize/react\nDESCRIPTION: This snippet shows how to import the defineStepper function from the @stepperize/react library, which is the first step in creating a custom stepper.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/define.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@stepperize/react\";\n```\n\n----------------------------------------\n\nTITLE: Logic Before Moving to Previous Step with beforePrev in useStepper - TypeScript\nDESCRIPTION: This snippet demonstrates handling logic before navigating to the previous step using beforePrev. The callback can return a boolean or Promise<boolean> to allow/prevent navigation. Dependencies: @stepperize/react, React. Input is a callback (e.g., validation logic); output determines whether stepper moves to previous step.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/hook.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \\\"react\\\";\nimport { defineStepper } from \\\"@stepperize/react\\\";\n\nconst { useStepper } = defineStepper(\n  { id: \\\"first\\\", title: \\\"First step\\\" },\n  { id: \\\"second\\\", title: \\\"Second step\\\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  return (\n    <button\n      onClick={() =>\n        methods.beforePrev(() => {\n          // Your logic here\n          return true; // or false\n        })\n      }\n    >\n      Previous\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using StepperMatch for State-based Content Rendering in Vue SFC\nDESCRIPTION: Illustrates how to use the StepperMatch component to render content based on external state in a Vue Single File Component.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/composable.mdx#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { defineStepper, StepperMatch } from '@stepperize/vue'\n\nconst stepper = useStepper()\n\nconst state = \"Value from server or client state\"\n\n</script>\n\n<template>\n\n  <StepperMatch :stepper :state>\n    <template #first=\"step\">\n      <p>First: {{ step.title }}</p>\n    </template>\n    <template #second=\"step\">\n      <p>Second: {{ step.title }}</p>\n    </template>\n    <template #last>\n      Finished!\n    </template>\n  </StepperMatch>\n\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using beforePrev for Validating Previous Step Navigation in SolidJS Stepper\nDESCRIPTION: Shows how to use the beforePrev method to execute conditional logic before moving to the previous step. The function returns a boolean that determines if the step transition should proceed.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/api-references/hook.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@stepperize/solid\";\n\nconst { useStepper } = defineStepper(\n  { id: \"first\", title: \"First step\" },\n  { id: \"second\", title: \"Second step\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  return (\n    <button\n      onClick={() =>\n        methods.beforePrev(() => {\n          // Your logic here\n          return true; // or false\n        })\n      }\n    >\n      Previous\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Function to Extract Specific Child Components in React/TypeScript\nDESCRIPTION: This function, `extractChildren`, iterates through an array of React children. It identifies specific child component types (`Title`, `Description`, and others assumed to be the main 'panel' content) and organizes them into a Map, keyed by 'title', 'description', or 'panel'. This allows structured access to different parts of a step's content.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/installation.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst extractChildren = (children: React.ReactNode) => {\n  const childrenArray = React.Children.toArray(children);\n  const map = new Map<string, React.ReactNode>();\n\n  for (const child of childrenArray) {\n    if (React.isValidElement(child)) {\n      if (child.type === Title) {\n        map.set(\"title\", child);\n      } else if (child.type === Description) {\n        map.set(\"description\", child);\n      } else {\n        map.set(\"panel\", child);\n      }\n    }\n  }\n\n  return map;\n};\n```\n\n----------------------------------------\n\nTITLE: Using afterPrev for Post-transition Actions in SolidJS Stepper\nDESCRIPTION: Demonstrates the afterPrev method which executes logic after moving to the previous step. This can be used for cleanup, state updates, or other post-transition actions.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/api-references/hook.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@stepperize/solid\";\n\nconst { useStepper } = defineStepper(\n  { id: \"first\", title: \"First step\" },\n  { id: \"second\", title: \"Second step\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  return (\n    <button\n      onClick={() =>\n        methods.afterPrev(() => {\n          // Your logic here\n        })\n      }\n    >\n      Previous\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for a Stepper Step in TSX\nDESCRIPTION: Illustrates how to dynamically set or update the metadata for a specific step using the `setMetadata` method on the stepper instance. It requires the step ID (e.g., \"first\") and the metadata object to be set as arguments.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/composable.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nstepper.value.setMetadata(\"first\", {\n  value: \"1\",\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stepper Metadata Using getMetadata in React - TypeScript\nDESCRIPTION: Illustrates retrieval of metadata for a specific step using the getMetadata method from useStepper in @stepperize/react. The method takes a step ID and returns the associated metadata object, which can be conditionally rendered in the UI. Prerequisites are identical to other examples: @stepperize/react and a TypeScript React setup. Inputs: step ID. Outputs: metadata object (possibly undefined). No caching or fallback is applied.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/hook.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \\\"react\\\";\nimport { defineStepper } from \\\"@stepperize/react\\\";\n\nconst { useStepper } = defineStepper(\n  { id: \\\"first\\\", title: \\\"First step\\\" },\n  { id: \\\"second\\\", title: \\\"Second step\\\" },\n  { id: \\\"last\\\", title: \\\"Last step\\\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n  const metadata = methods.getMetadata(\\\"first\\\");\n\n  return (\n    <React.Fragment>\n      <p>First step: {metadata?.value}</p>\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Logic After Moving to Previous Step with afterPrev in useStepper - TypeScript\nDESCRIPTION: This snippet shows using afterPrev to perform actions after navigating to the previous step. The callback function may return void or a Promise<void>. Dependencies: @stepperize/react, React. Input is a side-effect callback; output is execution of the callback after navigation.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/hook.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \\\"react\\\";\nimport { defineStepper } from \\\"@stepperize/react\\\";\n\nconst { useStepper } = defineStepper(\n  { id: \\\"first\\\", title: \\\"First step\\\" },\n  { id: \\\"second\\\", title: \\\"Second step\\\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  return (\n    <button\n      onClick={() =>\n        methods.afterPrev(() => {\n          // Your logic here\n        })\n      }\n    >\n      Previous\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Metadata for a Stepper Step in TSX\nDESCRIPTION: Shows how to retrieve the metadata associated with a specific step using the `getMetadata` method. It takes the step ID (e.g., \"first\") as an argument and returns the corresponding metadata object.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/composable.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nconst metadata = stepper.value.getMetadata(\"first\");\n```\n```\n\n----------------------------------------\n\nTITLE: Step Navigation Handling using Stepper State in Vue SFC\nDESCRIPTION: Implements a navigation component that uses StepperWhen, showing either a 'Reset' or 'Next' button label based on whether the current step is the last. The button calls either reset or next on the stepper, as appropriate. This component depends on a Stepper.Scope provider and @stepperize/vue.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/scoped.mdx#2025-04-23_snippet_3\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Stepper } from './state.ts'\nimport { StepperWhen } from '@stepperize/vue'\n\nconst stepper = Stepper.useStepper()\n</script>\n\n<template>\n  <button @click=\"stepper.isLast ? stepper.reset() : stepper.next()\">\n    <StepperWhen :stepper when=\"last\">\n      <template #default>Reset</template>\n      <template #else>Next</template>\n    </StepperWhen>\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using beforeGoTo for Validating Direct Step Navigation in SolidJS Stepper\nDESCRIPTION: Shows how to use the beforeGoTo method to execute conditional logic before navigating to a specific step. Takes a step ID and a function that returns a boolean to determine if the transition should occur.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/api-references/hook.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@stepperize/solid\";\n\nconst { useStepper } = defineStepper(\n  { id: \"first\", title: \"First step\" },\n  { id: \"second\", title: \"Second step\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  return (\n    <button\n      onClick={() =>\n        methods.beforeGoTo(\"first\", () => {\n          // Your logic here\n          return true; // or false\n        })\n      }\n    >\n      Go to first step\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using the when Method for Conditional Rendering in SolidJS Stepper\nDESCRIPTION: Shows how to conditionally render content based on the current step using the when method. The when method takes a step ID and a function to execute when the current step matches the given ID.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/api-references/hook.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@stepperize/solid\";\n\nconst { useStepper } = defineStepper(\n  { id: \"first\", title: \"First step\" },\n  { id: \"second\", title: \"Second step\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  return (\n    <>\n      {methods.when(\"first\", (step) => (\n        <p>First step: {step.title}</p>\n      ))}\n      {methods.when(\"second\", (step) => (\n        <p>Second step: {step.title}</p>\n      ))}\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Resetting Stepper Metadata in TSX\nDESCRIPTION: Explains how to use the `resetMetadata` method to clear the metadata for all steps. An optional boolean argument can be passed: if `true`, the metadata resets to the `initialMetadata` defined during `useStepper` initialization; if `false` or omitted, all metadata is cleared.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/composable.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nstepper.value.resetMetadata(true | false);\n```\n```\n\n----------------------------------------\n\nTITLE: Logic After Moving to Specific Step with afterGoTo in useStepper - TypeScript\nDESCRIPTION: This snippet shows how to use afterGoTo to trigger side effects after stepping to a specific step. The callback executes after navigation. Dependencies: @stepperize/react, React. Inputs are the target step ID and a side-effect callback. Output is callback execution after navigation.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/api-references/hook.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \\\"react\\\";\nimport { defineStepper } from \\\"@stepperize/react\\\";\n\nconst { useStepper } = defineStepper(\n  { id: \\\"first\\\", title: \\\"First step\\\" },\n  { id: \\\"second\\\", title: \\\"Second step\\\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  return (\n    <button\n      onClick={() =>\n        methods.afterGoTo(\\\"first\\\", () => {\n          // Your logic here\n        })\n      }\n    >\n      Go to first step\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using beforeNext for Pre-transition Validation in SolidJS Stepper\nDESCRIPTION: Shows how to use the beforeNext method to execute conditional logic before transitioning to the next step. This can be used for form validation or other checks that determine if the step transition should proceed.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/api-references/hook.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@stepperize/solid\";\n\nconst { useStepper } = defineStepper(\n  { id: \"first\", title: \"First step\" },\n  { id: \"second\", title: \"Second step\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  return (\n    <button\n      onClick={() => {\n        methods.beforeNext(() => {\n          // Your logic here\n          return true; // or false\n        });\n      }}\n    >\n      Next\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Hook for Memoizing Extracted Children in React/TypeScript\nDESCRIPTION: This custom React hook, `useStepChildren`, takes React node children as input. It uses `React.useMemo` to memoize the result of calling the `extractChildren` function, ensuring that the children extraction logic only runs when the children prop actually changes.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/installation.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst useStepChildren = (children: React.ReactNode) => {\n  return React.useMemo(() => extractChildren(children), [children]);\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Stepper Separator Component in React/TSX\nDESCRIPTION: This React functional component renders a visual separator between steps in a stepper. It returns null if `isLast` is true, effectively hiding the separator after the final step. The component uses `data-*` attributes for state and orientation, and applies conditional styling based on orientation, label orientation, state, and disabled status using the `classForSeparator` cva configuration.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst StepperSeparator = ({\n  orientation,\n  isLast,\n  labelOrientation,\n  state,\n  disabled,\n}: {\n  isLast: boolean;\n  state: string;\n  disabled?: boolean;\n} & VariantProps<typeof classForSeparator>) => {\n  if (isLast) {\n    return null;\n  }\n  return (\n    <div\n      date-component=\"stepper-separator\"\n      data-orientation={orientation}\n      data-state={state}\n      data-disabled={disabled}\n      role=\"separator\"\n      tabIndex={-1}\n      className={classForSeparator({ orientation, labelOrientation })}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using afterNext for Post-transition Actions in SolidJS Stepper\nDESCRIPTION: Demonstrates the afterNext method which executes logic after moving to the next step. This can be used for analytics tracking, state updates, or any action needed after a step transition occurs.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/api-references/hook.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@stepperize/solid\";\n\nconst { useStepper } = defineStepper(\n  { id: \"first\", title: \"First step\" },\n  { id: \"second\", title: \"Second step\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  return (\n    <button\n      onClick={() =>\n        methods.afterNext(() => {\n          // Your logic here\n        })\n      }\n    >\n      Next\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Determining Step State based on Index in TypeScript\nDESCRIPTION: This utility function, `getStepState`, calculates the state of a specific step within a stepper sequence. It compares the `currentIndex` (the currently active step) with the `stepIndex` (the index of the step being evaluated) and returns 'active' if they match, 'completed' if the step index is less than the current index, and 'inactive' otherwise.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/installation.mdx#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst getStepState = (currentIndex: number, stepIndex: number) => {\n  if (currentIndex === stepIndex) {\n    return \"active\";\n  }\n  if (currentIndex > stepIndex) {\n    return \"completed\";\n  }\n  return \"inactive\";\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Circular Step Indicator Component in React/TSX\nDESCRIPTION: This React functional component displays a circular progress indicator, commonly used in step-by-step wizards or onboarding flows. It renders an SVG with two circles: one background circle and one foreground circle whose `strokeDashoffset` is dynamically calculated based on the `currentStep` and `totalSteps` props to visually represent progress. It also displays the step count text (e.g., '2 of 5') in the center.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst CircleStepIndicator = ({\n  currentStep,\n  totalSteps,\n  size = 80,\n  strokeWidth = 6,\n}: Stepper.CircleStepIndicatorProps) => {\n  const radius = (size - strokeWidth) / 2;\n  const circumference = radius * 2 * Math.PI;\n  const fillPercentage = (currentStep / totalSteps) * 100;\n  const dashOffset = circumference - (circumference * fillPercentage) / 100;\n  return (\n    <div\n      date-component=\"stepper-step-indicator\"\n      role=\"progressbar\"\n      aria-valuenow={currentStep}\n      aria-valuemin={1}\n      aria-valuemax={totalSteps}\n      tabIndex={-1}\n      className=\"relative inline-flex items-center justify-center\"\n    >\n      <svg width={size} height={size}>\n        <title>Step Indicator</title>\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          className=\"text-muted-foreground\"\n        />\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          strokeDasharray={circumference}\n          strokeDashoffset={dashOffset}\n          className=\"text-primary transition-all duration-300 ease-in-out\"\n          transform={`rotate(-90 ${size / 2} ${size / 2})`}\n        />\n      </svg>\n      <div className=\"absolute inset-0 flex items-center justify-center\">\n        <span className=\"text-sm font-medium\" aria-live=\"polite\">\n          {currentStep} of {totalSteps}\n        </span>\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using afterGoTo for Post-transition Actions with Direct Navigation in SolidJS Stepper\nDESCRIPTION: Demonstrates the afterGoTo method which executes logic after navigating to a specific step. Takes a step ID and a function to execute after the transition occurs.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/api-references/hook.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@stepperize/solid\";\n\nconst { useStepper } = defineStepper(\n  { id: \"first\", title: \"First step\" },\n  { id: \"second\", title: \"Second step\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  return (\n    <button\n      onClick={() =>\n        methods.afterGoTo(\"first\", () => {\n          // Your logic here\n        })\n      }\n    >\n      Go to first step\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Step Description Component in React/TSX\nDESCRIPTION: This React functional component renders the description part of a stepper step. It dynamically chooses between rendering a Radix UI `Slot` component (if `asChild` prop is true) or a standard paragraph (`<p>`) tag. It applies base styling and merges any additional class names provided via the `className` prop.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst Comp = asChild ? Slot : \"p\";\n\nreturn (\n  <Comp\n    date-component=\"stepper-step-description\"\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  >\n    {children}\n  </Comp>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Step Metadata with setMetadata in Stepperize – TypeScript/TSX\nDESCRIPTION: This snippet illustrates how to set or update metadata for a specific step using the setMetadata method on the useStepper hook. The stepper is initialized using defineStepper, and setMetadata is called for the 'first' step to assign a value. This updates the metadata dynamically at runtime. Requires @stepperize/solid and must be used in a functional component context. Outputs the updated metadata value for the step.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/api-references/hook.mdx#2025-04-23_snippet_12\n\nLANGUAGE: TSX\nCODE:\n```\nimport { defineStepper } from \"@stepperize/solid\";\n\nconst { useStepper } = defineStepper(\n  { id: \"first\", title: \"First step\" },\n  { id: \"second\", title: \"Second step\" },\n  { id: \"last\", title: \"Last step\" }\n);\n\nconst MyStepperComponent = () => {\n  const methods = useStepper();\n\n  methods.setMetadata(\"first\", {\n    value: \"1\",\n  });\n\n  return (\n    <>\n      <p>First step: {methods.metadata.first?.value}</p>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting defineStepper Function in TypeScript\nDESCRIPTION: This code uses a standard ES module export statement to make the `defineStepper` function (presumably defined elsewhere in the file or imported) available for use in other modules.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/installation.mdx#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport { defineStepper };\n```\n\n----------------------------------------\n\nTITLE: Composing Scoped Stepper Views with JSX/TSX in Vue\nDESCRIPTION: Demonstrates implementing scoped steppers and child components entirely in TSX, including definitions for stepper steps, the main provider component, and step-aware content and navigation with inline conditional rendering. All components leverage Vue's defineComponent and Stepperize hooks for cohesive state management, requiring both Vue and Stepperize libraries. Inputs are provided as hardcoded stepper definitions, and the pattern showcases a functionally composed approach.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/scoped.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nimport { defineComponent } from 'vue'\n\nconst Stepper = defineStepper(\n  { id: \"first\", title: \"First\" },\n  { id: \"second\", title: \"Second\" },\n  { id: \"last\", title: \"Last\" }\n);\n\nexport const MyScopedStepper = defineComponent(() => () => (\n  <Stepper.Scoped>\n    <StepContent />\n    <StepNavigation />\n  </Stepper.Scoped>\n));\n\nconst StepContent = defineComponent(() => {\n  const stepper = useStepper();\n  return () => (\n    <>\n      { stepper.value.when(\"first\", step => <p>Starting with {step.title}</p>) }\n      { stepper.value.when(\"second\", step => <p>In the middle: {step.title}</p>) }\n      { stepper.value.when(\"last\", step => <p>Ending with {step.title}</p>) }\n    </>\n  );\n});\n\nconst StepNavigation = defineComponent(() => {\n  const stepper = useStepper();\n  return () => (\n    <button onClick={stepper.value.isLast ? stepper.value.reset : stepper.value.next}>\n      { stepper.value.when(\"last\", () => \"Reset\", () => \"Next\") }\n    </button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing defineStepper Component Definition in TSX\nDESCRIPTION: This code snippet demonstrates how to import the `defineStepper` function from a specific path within the project (`@/components/ui/stepper`). This function is likely used to initialize or configure the stepper component for use.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/installation.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@/components/ui/stepper\";\n```\n\n----------------------------------------\n\nTITLE: Nesting Global and Local Scoped Steppers in Vue SFC\nDESCRIPTION: This SFC example sets up two independent stepper instances (GlobalStepper and LocalStepper) and demonstrates nesting their corresponding Scope providers in the template. Each scope controls its respective content and navigation, supporting both global and local progression logic. Comments clarify correct usage of each stepper in context, and dependencies include Stepperize and Vue SFC.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/scoped.mdx#2025-04-23_snippet_5\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup lang=\"ts\">\n  const GlobalStepper = defineStepper(\n    { id: \"start\", title: \"Start\" },\n    { id: \"middle\", title: \"Middle\" },\n    { id: \"end\", title: \"End\" }\n  );\n\n  const LocalStepper = defineStepper(\n  { id: \"sub1\", title: \"Sub-step 1\" },\n  { id: \"sub2\", title: \"Sub-step 2\" }\n\n  );\n\n  // Use GlobalStepper.useStepper() for global scope\n  // Use LocalStepper.useStepper() for local scope\n</script>\n\n<template>\n\n  <GlobalStepper.Scoped>\n    <GlobalStepContent />\n    <GlobalNavigation />\n    <LocalStepper.Scoped>\n      <LocalStepContent />\n      <LocalNavigation />\n    </LocalStepper.Scoped>\n  </GlobalStepper.Scoped>\n\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Scroll into View Utility Function in TypeScript\nDESCRIPTION: This utility function, `scrollIntoStepperPanel`, takes an HTMLDivElement node and an optional boolean `tracking` flag. If `tracking` is true, it scrolls the provided DOM node into the viewport smoothly and centers it vertically using the `scrollIntoView` method.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction scrollIntoStepperPanel(\n  node: HTMLDivElement | null,\n  tracking?: boolean\n) {\n  if (tracking) {\n    node?.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Global and Local Scoped Steppers in TSX\nDESCRIPTION: Implements nested stepper providers in TSX using Vue's defineComponent. GlobalStepper and LocalStepper are both created with their own steps, and the component tree nests the local stepper's scope inside the global one. The pattern enables independent management of multiple stepper state contexts in a hierarchical layout, with comments indicating correct usage. Dependencies include Vue and Stepperize.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/scoped.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\nimport { defineComponent } from 'vue'\n\nconst GlobalStepper = defineStepper(\n{ id: \"start\", title: \"Start\" },\n{ id: \"middle\", title: \"Middle\" },\n{ id: \"end\", title: \"End\" }\n);\n\nconst LocalStepper = defineStepper(\n{ id: \"sub1\", title: \"Sub-step 1\" },\n{ id: \"sub2\", title: \"Sub-step 2\" }\n);\n\nexport const NestedSteppers = defineComponent(() => () => (\n  <GlobalStepper.Scoped>\n    <GlobalStepContent />\n    <GlobalNavigation />\n    <LocalStepper.Scoped>\n      <LocalStepContent />\n      <LocalNavigation />\n    </LocalStepper.Scoped>\n  </GlobalStepper.Scoped>\n));\n\n// Use GlobalStepper.useStepper() for global scope\n// Use LocalStepper.useStepper() for local scope\n```\n\n----------------------------------------\n\nTITLE: Installing @stepperize/react Dependency Manually\nDESCRIPTION: This command installs the core `@stepperize/react` library using npm. This package provides the underlying logic and hooks required for the stepper component when performing a manual installation. Requires Node.js and npm.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @stepperize/react\n```\n\n----------------------------------------\n\nTITLE: Defining Step Configurations with defineStepper (TypeScript)\nDESCRIPTION: This snippet shows how to call defineStepper with step configurations to initialize a scoped stepper. Each step is defined with a unique 'id', and can include custom fields such as 'title' and 'description' for use in your UI. The returned object includes a Scoped provider component, a useStepper composable for state management, and the array of steps. Requires that @stepperize/vue is installed and imported.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/define.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineStepper } from \"@stepperize/vue\";\n\nconst { Scoped, useStepper, steps } = defineStepper(\n  { id: \"step-1\", title: \"Step 1\", description: \"First step\" },\n  { id: \"step-2\", title: \"Step 2\", description: \"Second step\" },\n  { id: \"step-3\", title: \"Step 3\", description: \"Third step\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing @stepperize/react with bun\nDESCRIPTION: This command adds the @stepperize/react package to your project using the Bun JavaScript runtime and package manager.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add @stepperize/react\n```\n\n----------------------------------------\n\nTITLE: Defining Steps with defineStepper in Solid.js\nDESCRIPTION: This snippet demonstrates how to use the defineStepper function to define a set of steps for a stepper. Each step is an object with required 'id' and optional custom properties like 'title' and 'description'.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/api-references/define.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { useStepper, steps } = defineStepper(\n  { id: \"step-1\", title: \"Step 1\", description: \"First step\" },\n  { id: \"step-2\", title: \"Step 2\", description: \"Second step\" },\n  { id: \"step-3\", title: \"Step 3\", description: \"Third step\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing @stepperize/vue with yarn - Bash\nDESCRIPTION: This snippet shows how to add the @stepperize/vue package to a project using the yarn package manager. Yarn must be pre-installed and initialized within the project. Running the command will fetch @stepperize/vue from the registry and register it under the dependencies. After installation, the package can be imported directly into your Vue.js source code. Use within a project directory where Yarn has been initialized.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @stepperize/vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Navigation with Utils Object in Vue\nDESCRIPTION: This example demonstrates how to use the Utils object from Stepperize in a Vue component. It shows how to define steps, initialize the stepper, and use various utility functions to access and navigate between steps.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/api-references/utils.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@stepperize/vue\";\n\n// Step definitions\nconst steps = [\n  { id: \"step1\", name: \"Step 1\" },\n  { id: \"step2\", name: \"Step 2\" },\n  { id: \"step3\", name: \"Step 3\" },\n  { id: \"step4\", name: \"Step 4\" },\n];\n\n// Define the stepper with the steps\nconst { utils } = defineStepper(...steps);\n\nexport function StepNavigator() {\n  // Fetch all steps\n  const allSteps = utils.getAll(); // Result: Array of all steps\n\n  // Fetch the first and last steps\n  const firstStep = utils.getFirst(); // Result: { id: 'step1', name: 'Step 1' }\n  const lastStep = utils.getLast(); // Result: { id: 'step4', name: 'Step 4' }\n\n  // Get a step by ID\n  const stepById = utils.get(\"step3\"); // Result: { id: 'step3', name: 'Step 3' }\n\n  // Get the index of a step by ID\n  const indexOfStep2 = utils.getIndex(\"step2\"); // Result: 1\n\n  // Get a step by its index\n  const stepAtIndex2 = utils.getByIndex(2); // Result: { id: 'step3', name: 'Step 3' }\n\n  // Get the next and previous steps\n  const nextStepAfter1 = utils.getNext(\"step1\"); // Result: { id: 'step2', name: 'Step 2' }\n  const prevStepBefore3 = utils.getPrev(\"step3\"); // Result: { id: 'step2', name: 'Step 2' }\n\n  // Get neighbors of a step\n  const neighborsOfStep2 = utils.getNeighbors(\"step2\");\n  // Result: { prev: { id: 'step1', name: 'Step 1' }, next: { id: 'step3', name: 'Step 3' } }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @stepperize/vue with bun - Bash\nDESCRIPTION: This snippet covers how to install @stepperize/vue using the bun package manager. Bun must be installed on the system; executing the given command adds @stepperize/vue as a dependency in your Bun-based application. This enables immediate use of the package within your project's codebase, following Bun's speedy workflow. The command is designed for a project root where bun has been initialized.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add @stepperize/vue\n```\n\n----------------------------------------\n\nTITLE: Using Stepperize Utils in a Solid Component\nDESCRIPTION: This example demonstrates how to use the Utils object from the Stepperize library in a Solid component. It shows how to define a stepper with multiple steps and then use various utility functions to retrieve steps, get step indices, and navigate between steps.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/api-references/utils.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@stepperize/solid\";\n\n// Define the stepper with the steps\nconst { utils } = defineStepper(\n  { id: \"step1\", name: \"Step 1\" },\n  { id: \"step2\", name: \"Step 2\" },\n  { id: \"step3\", name: \"Step 3\" },\n  { id: \"step4\", name: \"Step 4\" }\n);\n\nexport function StepNavigator() {\n  // Fetch all steps\n  const allSteps = utils.getAll(); // Result: Array of all steps\n\n  // Fetch the first and last steps\n  const firstStep = utils.getFirst(); // Result: { id: 'step1', name: 'Step 1' }\n  const lastStep = utils.getLast(); // Result: { id: 'step4', name: 'Step 4' }\n\n  // Get a step by ID\n  const stepById = utils.get(\"step3\"); // Result: { id: 'step3', name: 'Step 3' }\n\n  // Get the index of a step by ID\n  const indexOfStep2 = utils.getIndex(\"step2\"); // Result: 1\n\n  // Get a step by its index\n  const stepAtIndex2 = utils.getByIndex(2); // Result: { id: 'step3', name: 'Step 3' }\n\n  // Get the next and previous steps\n  const nextStepAfter1 = utils.getNext(\"step1\"); // Result: { id: 'step2', name: 'Step 2' }\n  const prevStepBefore3 = utils.getPrev(\"step3\"); // Result: { id: 'step2', name: 'Step 2' }\n\n  // Get neighbors of a step\n  const neighborsOfStep2 = utils.getNeighbors(\"step2\");\n  // Result: { prev: { id: 'step1', name: 'Step 1' }, next: { id: 'step3', name: 'Step 3' } }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @stepperize/solid with npm\nDESCRIPTION: Command to install the @stepperize/solid package using npm package manager.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @stepperize/solid\n```\n\n----------------------------------------\n\nTITLE: Using the useStepper Hook in a SolidJS Component (TSX)\nDESCRIPTION: This example shows a SolidJS functional component (`StepperComponent`) that utilizes the `useStepper` hook obtained from `defineStepper`. The hook provides access to the `currentStep` object (containing its defined properties like `title` and `description`) and functions like `nextStep` and `prevStep` to navigate between the defined steps. These are typically connected to UI elements like buttons.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/packages/solid/README.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction StepperComponent() {\n  const { currentStep, nextStep, prevStep } = useStepper();\n\n  return (\n    <div>\n      <h2>{currentStep.title}</h2>\n      <p>{currentStep.description}</p>\n      <button onClick={prevStep}>Previous</button>\n      <button onClick={nextStep}>Next</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @stepperize/solid with bun\nDESCRIPTION: Command to install the @stepperize/solid package using bun package manager.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add @stepperize/solid\n```\n\n----------------------------------------\n\nTITLE: Implementing Stepper Component\nDESCRIPTION: Example component implementation showing how to use the useStepper hook to access and control step navigation.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/packages/vue/README.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction StepperComponent() {\n  const { currentStep, nextStep, prevStep } = useStepper();\n\n  return (\n    <div>\n      <h2>{currentStep.title}</h2>\n      <p>{currentStep.description}</p>\n      <button onClick={prevStep}>Previous</button>\n      <button onClick={nextStep}>Next</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @stepperize/solid with pnpm\nDESCRIPTION: Command to install the @stepperize/solid package using pnpm package manager.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @stepperize/solid\n```\n\n----------------------------------------\n\nTITLE: Using Scoped Component from defineStepper in Stepperize v2\nDESCRIPTION: This example shows how to use the new Scoped component obtained from the defineStepper function. It replaces the old Stepper component and is used for managing one or more scopes of steps.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/migration/migrating-to-v2.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { Scoped } = defineStepper(\n  { id: \"step-1\", title: \"Label 1\", description: \"Description 1\" },\n  { id: \"step-2\", title: \"Label 2\", description: \"Description 2\" },\n  { id: \"step-3\", title: \"Label 3\", description: \"Description 3\" },\n  { id: \"step-4\", title: \"Label 4\", description: \"Description 4\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Stepper with Responsive Variant using shadcn CLI\nDESCRIPTION: Command to install the stepper with responsive variant using the shadcn add command with a JSON configuration file.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/examples.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn add https://stepperize.vercel.app/r/stepper-with-responsive-variant.json\n```\n\n----------------------------------------\n\nTITLE: Defining Stepper Component Types and Props in TypeScript\nDESCRIPTION: This TypeScript namespace `Stepper` defines various types related to the stepper component implementation. It includes types for stepper variants (`StepperVariant`), label orientation (`StepperLabelOrientation`), configuration props (`ConfigProps`), the main component definition structure (`DefineProps` which integrates with `Stepperize` types), and props for the circular step indicator (`CircleStepIndicatorProps`).\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/installation.mdx#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nnamespace Stepper {\n  export type StepperVariant = \"horizontal\" | \"vertical\" | \"circle\";\n  export type StepperLabelOrientation = \"horizontal\" | \"vertical\";\n\n  export type ConfigProps = {\n    variant?: StepperVariant;\n    labelOrientation?: StepperLabelOrientation;\n    tracking?: boolean;\n  };\n\n  export type DefineProps<Steps extends Stepperize.Step[]> = Omit<\n    Stepperize.StepperReturn<Steps>,\n    \"Scoped\"\n  > & {\n    Stepper: {\n      Provider: (\n        props: Omit<Stepperize.ScopedProps<Steps>, \"children\"> &\n          Omit<React.ComponentProps<\"div\">, \"children\"> &\n          Stepper.ConfigProps & {\n            children:\n              | React.ReactNode\n              | ((props: {\n                  methods: Stepperize.Stepper<Steps>;\n                }) => React.ReactNode);\n          }\n      ) => React.ReactElement;\n      Navigation: (props: React.ComponentProps<\"nav\">) => React.ReactElement;\n      Step: (\n        props: React.ComponentProps<\"button\"> & {\n          of: Stepperize.Get.Id<Steps>;\n          icon?: React.ReactNode;\n        }\n      ) => React.ReactElement;\n      Title: (props: AsChildProps<\"h4\">) => React.ReactElement;\n      Description: (props: AsChildProps<\"p\">) => React.ReactElement;\n      Panel: (props: AsChildProps<\"div\">) => React.ReactElement;\n      Controls: (props: AsChildProps<\"div\">) => React.ReactElement;\n    };\n  };\n\n  export type CircleStepIndicatorProps = {\n    currentStep: number;\n    totalSteps: number;\n    size?: number;\n    strokeWidth?: number;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CVA Styles for Stepper Navigation List in TypeScript\nDESCRIPTION: This code defines a Class Variance Authority (cva) configuration named `classForNavigationList`. It sets base flexbox styles (`flex gap-2`) and defines variants for different stepper layouts (`horizontal`, `vertical`, `circle`) to control the flex direction and item alignment of the navigation container.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst classForNavigationList = cva(\"flex gap-2\", {\n  variants: {\n    variant: {\n      horizontal: \"flex-row items-center justify-between\",\n      vertical: \"flex-col\",\n      circle: \"flex-row items-center justify-between\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AsChild Prop Type Utility in TypeScript\nDESCRIPTION: This generic TypeScript type `AsChildProps` enhances existing React component props (`React.ComponentProps<T>`) by adding an optional boolean prop `asChild`. This pattern is commonly used with libraries like Radix UI to allow a component to delegate its rendering to its child component.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/installation.mdx#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype AsChildProps<T extends React.ElementType> = React.ComponentProps<T> & {\n  asChild?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CVA Styles for Stepper Separator in TypeScript\nDESCRIPTION: This code defines a Class Variance Authority (cva) configuration named `classForSeparator` for styling the separator element between steps. It includes base styles, state-based styles (completed, disabled), transition effects, and variants based on `orientation` (horizontal/vertical) and `labelOrientation` (specifically for vertical layouts with labels).\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst classForSeparator = cva(\n  [\n    \"bg-muted\",\n    \"data-[state=completed]:bg-primary data-[disabled]:opacity-50\",\n    \"transition-all duration-300 ease-in-out\",\n  ],\n  {\n    variants: {\n      orientation: {\n        horizontal: \"h-0.5 flex-1\",\n        vertical: \"h-full w-0.5\",\n      },\n      labelOrientation: {\n        vertical:\n          \"absolute left-[calc(50%+30px)] right-[calc(-50%+20px)] top-5 block shrink-0\",\n      },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Stepperize Constructor\nDESCRIPTION: Imports the defineStepper function, which is the main constructor for creating stepper workflows.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@stepperize/react\";\n```\n\n----------------------------------------\n\nTITLE: Embedding Live Demo of Multi-scoped Stepper in React\nDESCRIPTION: This code snippet demonstrates how to embed a live demo of the Multi-scoped Stepper component using the DemoViewer component. It links to a StackBlitz project that showcases the stepper's functionality.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/examples/multi-scoped.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DemoViewer\n  src=\"https://stackblitz.com/edit/vitejs-vite-exzrwe?embed=1&file=src%2FApp.tsx&hideNavigation=1&view=preview\"\n  title=\"Multi-scoped Stepper Demo\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers (npm, pnpm, or yarn). After running the server, the application can be accessed at http://localhost:3000.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\npnpm dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Importing Stepperize Constructor in React\nDESCRIPTION: How to import the defineStepper constructor from the Stepperize React library.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/packages/react/README.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@stepperize/react\";\n```\n\n----------------------------------------\n\nTITLE: Cloning the Stepperize Repository in Bash\nDESCRIPTION: Command to clone the Stepperize repository to your local machine after forking it on GitHub.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/damianricobelli/stepperize.git\n```\n\n----------------------------------------\n\nTITLE: Importing Stepperize Constructor\nDESCRIPTION: Import statement to bring in the defineStepper constructor from the Stepperize Vue package.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/packages/vue/README.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@stepperize/vue\";\n```\n\n----------------------------------------\n\nTITLE: Running Development Documentation Server\nDESCRIPTION: Command to start the development server for the documentation site of the Stepperize project using PNPM workspaces.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev --filter docs\n```\n\n----------------------------------------\n\nTITLE: Importing defineStepper from @stepperize/solid (TSX)\nDESCRIPTION: This TypeScript/TSX code imports the core `defineStepper` function from the installed `@stepperize/solid` library. This function is the primary entry point for creating and configuring a stepper workflow.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/packages/solid/README.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineStepper } from \"@stepperize/solid\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Bash\nDESCRIPTION: Command to create a new branch for your feature development in the Stepperize project.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Steps with defineStepper (TSX)\nDESCRIPTION: This snippet demonstrates how to define the individual steps of a workflow using the imported `defineStepper` function. Each argument passed to the function is an object representing a step, requiring at least a unique `id`. Additional properties like `title` and `description` can be included. The function returns an object containing `Scoped` (for potential scoped usage, though not shown here), the `useStepper` hook, and the `steps` array.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/packages/solid/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst { Scoped, useStepper, steps } = defineStepper(\n  { id: \"step-1\", title: \"Step 1\", description: \"Description for step 1\" },\n  { id: \"step-2\", title: \"Step 2\", description: \"Description for step 2\" },\n  { id: \"step-3\", title: \"Step 3\", description: \"Description for step 3\" },\n  { id: \"step-4\", title: \"Step 4\", description: \"Description for step 4\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Committing Changes in Bash\nDESCRIPTION: Command to commit your changes to the Stepperize project with a descriptive message.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Add some feature\"\n```\n\n----------------------------------------\n\nTITLE: Installing @stepperize/react with npm\nDESCRIPTION: This command installs the @stepperize/react package using npm (Node Package Manager).\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @stepperize/react\n```\n\n----------------------------------------\n\nTITLE: Installing @stepperize/react with yarn\nDESCRIPTION: This command adds the @stepperize/react package to your project using Yarn package manager.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @stepperize/react\n```\n\n----------------------------------------\n\nTITLE: Installing @stepperize/solid via npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the `@stepperize/solid` library. Executing this command in a terminal within a project directory downloads the package and adds it to the project's dependencies, making its functionalities available for import.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/packages/solid/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @stepperize/solid\n```\n\n----------------------------------------\n\nTITLE: Installing @stepperize/solid with yarn\nDESCRIPTION: Command to install the @stepperize/solid package using yarn package manager.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/solid/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @stepperize/solid\n```\n\n----------------------------------------\n\nTITLE: Installing shadcn-stepper via CLI\nDESCRIPTION: This command uses `npx` to execute the `shadcn add` command, fetching the stepper component configuration from the specified URL and integrating it into the user's project. This method simplifies installation by automatically handling component setup. Requires Node.js, npm, and the `shadcn` CLI to be installed.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn add https://stepperize.vercel.app/r/stepper.json\n```\n\n----------------------------------------\n\nTITLE: Installing Stepperize React Library\nDESCRIPTION: Command to install the Stepperize React library using npm package manager.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/packages/react/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @stepperize/react\n```\n\n----------------------------------------\n\nTITLE: Installing Stepperize React Library\nDESCRIPTION: Command for installing the Stepperize React library via npm package manager.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @stepperize/react\n```\n\n----------------------------------------\n\nTITLE: Installing Stepperize Vue Package\nDESCRIPTION: Command to install the Stepperize Vue package using npm package manager.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/packages/vue/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @stepperize/vue\n```\n\n----------------------------------------\n\nTITLE: Installing @stepperize/react with pnpm\nDESCRIPTION: This command installs the @stepperize/react package using pnpm (Performant NPM) package manager.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @stepperize/react\n```\n\n----------------------------------------\n\nTITLE: Installing @stepperize/vue with npm - Bash\nDESCRIPTION: This snippet demonstrates how to install the @stepperize/vue package in a Vue.js project using the npm package manager. It requires Node.js and npm to be available in the developer's environment. The command downloads and adds @stepperize/vue as a dependency to your project. No arguments other than the package name are required; after execution, @stepperize/vue can be imported in your code. The snippet is meant to be run in a terminal at the root of the project directory.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @stepperize/vue\n```\n\n----------------------------------------\n\nTITLE: Installing @stepperize/vue with pnpm - Bash\nDESCRIPTION: This example details how to install the @stepperize/vue package using the pnpm package manager. pnpm must be set up in the current workspace. By executing the command, developers will add @stepperize/vue as a dependency, making it usable throughout the application. This approach ensures efficient node_modules management with pnpm constraints, and should be run at the root level of your project.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/vue/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @stepperize/vue\n```\n\n----------------------------------------\n\nTITLE: Installing Stepper with react-hook-form Integration using shadcn CLI\nDESCRIPTION: Command to install the stepper with react-hook-form integration using the shadcn add command with a JSON configuration file.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/examples.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn add https://stepperize.vercel.app/r/stepper-with-form.json\n```\n\n----------------------------------------\n\nTITLE: Installing Stepper with Description Component using shadcn CLI\nDESCRIPTION: Command to install the stepper with description variant using the shadcn add command with a JSON configuration file.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/examples.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn add https://stepperize.vercel.app/r/stepper-with-description.json\n```\n\n----------------------------------------\n\nTITLE: Installing Stepper with Icons Component using shadcn CLI\nDESCRIPTION: Command to install the stepper with icons variant using the shadcn add command with a JSON configuration file.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/examples.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn add https://stepperize.vercel.app/r/stepper-with-icon.json\n```\n\n----------------------------------------\n\nTITLE: Installing Stepper with Label Orientation Component using shadcn CLI\nDESCRIPTION: Command to install the stepper with label orientation variant using the shadcn add command with a JSON configuration file.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/examples.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn add https://stepperize.vercel.app/r/stepper-with-label-orientation.json\n```\n\n----------------------------------------\n\nTITLE: Installing Stepper with Tracking Component using shadcn CLI\nDESCRIPTION: Command to install the stepper with tracking functionality using the shadcn add command with a JSON configuration file.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/examples.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn add https://stepperize.vercel.app/r/stepper-with-tracking.json\n```\n\n----------------------------------------\n\nTITLE: Installing Stepper with Multiple Variants using shadcn CLI\nDESCRIPTION: Command to install the stepper with multiple variants using the shadcn add command with a JSON configuration file.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/examples.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn add https://stepperize.vercel.app/r/stepper-with-variants.json\n```\n\n----------------------------------------\n\nTITLE: Installing Basic Stepper Demo Component with shadcn CLI\nDESCRIPTION: Command to install the basic stepper demo component using the shadcn add command with a JSON configuration file.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/content/docs/react/shadcn/examples.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn add https://stepperize.vercel.app/r/stepper-demo.json\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies using the PNPM package manager.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub in Bash\nDESCRIPTION: Command to push your committed changes to your forked repository on GitHub.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access and Sitemap for Stepperize\nDESCRIPTION: This configuration allows all web crawlers to access the entire site, specifies the host URL, and provides the location of the sitemap for better indexing.\nSOURCE: https://github.com/damianricobelli/stepperize/blob/main/apps/docs/app/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nAllow: /\n\nHost: https://stepperize.vercel.app\n\nSitemap: https://stepperize.vercel.app/sitemap.xml\n```"
  }
]