[
  {
    "owner": "dbos-inc",
    "repo": "dbos-transact-py",
    "content": "TITLE: Complete DBOS FastAPI Integration Example\nDESCRIPTION: Full example demonstrating DBOS integration with FastAPI, including a workflow with multiple steps, sleep functionality, and HTTP endpoint definition. Shows practical usage of DBOS decorators and workflow recovery.\nSOURCE: https://github.com/dbos-inc/dbos-transact-py/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom dbos import DBOS\n\napp = FastAPI()\nDBOS(fastapi=app)\n\n@DBOS.step()\ndef step_one():\n    print(\"Step one completed!\")\n\n@DBOS.step()\ndef step_two():\n    print(\"Step two completed!\")\n\n@DBOS.workflow()\ndef dbos_workflow():\n    step_one()\n    for _ in range(5):\n        print(\"Press Control + C twice to stop the app...\")\n        DBOS.sleep(1)\n    step_two()\n\n@app.get(\"/\")\ndef fastapi_endpoint():\n    dbos_workflow()\n```\n\n----------------------------------------\n\nTITLE: Defining DBOS Workflow Structure\nDESCRIPTION: Example showing how to define a basic DBOS workflow with decorated steps. Demonstrates the core pattern of combining individual steps into a complete workflow using Python decorators.\nSOURCE: https://github.com/dbos-inc/dbos-transact-py/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@DBOS.step()\ndef step_one():\n    ...\n\n@DBOS.step()\ndef step_two():\n    ...\n\n@DBOS.workflow()\ndef workflow()\n    step_one()\n    step_two()\n```\n\n----------------------------------------\n\nTITLE: Running DBOS Application Locally\nDESCRIPTION: Commands to initialize the database schema and start the DBOS application locally. The 'migrate' command sets up the database tables, and 'start' launches the application server.\nSOURCE: https://github.com/dbos-inc/dbos-transact-py/blob/main/dbos/_templates/dbos-db-starter/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndbos migrate\ndbos start\n```\n\n----------------------------------------\n\nTITLE: Installing DBOS Environment Setup\nDESCRIPTION: Shell commands for setting up a Python virtual environment and installing DBOS along with its initial configuration.\nSOURCE: https://github.com/dbos-inc/dbos-transact-py/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv dbos-example/.venv\ncd dbos-example\nsource .venv/bin/activate\npip install dbos\ndbos init --config\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL Docker Container for DBOS App\nDESCRIPTION: Commands to start a PostgreSQL database using Docker for local development of a DBOS application. It sets a password environment variable and runs a Python script to initialize the container.\nSOURCE: https://github.com/dbos-inc/dbos-transact-py/blob/main/dbos/_templates/dbos-db-starter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport PGPASSWORD=dbos\npython3 start_postgres_docker.py\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Pytest\nDESCRIPTION: Command to run unit tests for the project using pytest through pdm.\nSOURCE: https://github.com/dbos-inc/dbos-transact-py/blob/main/DEVELOPING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npdm run pytest\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with PDM\nDESCRIPTION: Commands to install project dependencies using pdm and set up pre-commit hooks for the project.\nSOURCE: https://github.com/dbos-inc/dbos-transact-py/blob/main/DEVELOPING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npdm install\npdm run pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Deploying Application to DBOS Cloud\nDESCRIPTION: Command to deploy the application to DBOS Cloud. After execution, it outputs a URL that can be used to access the deployed application.\nSOURCE: https://github.com/dbos-inc/dbos-transact-py/blob/main/dbos/_templates/dbos-db-starter/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndbos-cloud app deploy\n```\n\n----------------------------------------\n\nTITLE: Generating Database Schema Migration with Alembic\nDESCRIPTION: Command to generate a new database migration file for system tables using Alembic through pdm.\nSOURCE: https://github.com/dbos-inc/dbos-transact-py/blob/main/DEVELOPING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npdm run alembic revision -m \"<new migration name>\"\n```\n\n----------------------------------------\n\nTITLE: Running Type Checking with MyPy\nDESCRIPTION: Command to perform static type checking on the project code using mypy through pdm.\nSOURCE: https://github.com/dbos-inc/dbos-transact-py/blob/main/DEVELOPING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npdm run mypy .\n```\n\n----------------------------------------\n\nTITLE: Starting Postgres Docker Container for Tests\nDESCRIPTION: Bash script to set database password and start a Postgres Docker container for running tests.\nSOURCE: https://github.com/dbos-inc/dbos-transact-py/blob/main/DEVELOPING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport PGPASSWORD=dbos\npython3 dbos/_templates/dbos-db-starter/start_postgres_docker.py\n```\n\n----------------------------------------\n\nTITLE: Creating a New Release\nDESCRIPTION: Shell command to create a new release version, optionally specifying a version number following semver conventions.\nSOURCE: https://github.com/dbos-inc/dbos-transact-py/blob/main/DEVELOPING.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npython3 make_release.py [--version_number <version>]\n```\n\n----------------------------------------\n\nTITLE: Tagging a Release Patch\nDESCRIPTION: Git commands to tag a commit with a version number for a release patch and push the tag to the remote repository.\nSOURCE: https://github.com/dbos-inc/dbos-transact-py/blob/main/DEVELOPING.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngit tag <version-number>\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Installing DBOS Cloud CLI\nDESCRIPTION: Command to install the DBOS Cloud command-line interface globally using npm. This requires Node.js to be installed on the system.\nSOURCE: https://github.com/dbos-inc/dbos-transact-py/blob/main/dbos/_templates/dbos-db-starter/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -g @dbos-inc/dbos-cloud\n```\n\n----------------------------------------\n\nTITLE: Installing PDM Package Manager\nDESCRIPTION: Command to install pdm, a Python package and virtual environment management tool, using a curl-based installation script.\nSOURCE: https://github.com/dbos-inc/dbos-transact-py/blob/main/DEVELOPING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://pdm-project.org/install-pdm.py | python3 -\n```\n\n----------------------------------------\n\nTITLE: Installing Python 3.12 Virtual Environment Package on Ubuntu\nDESCRIPTION: Command to install the Python 3.12 virtual environment package on Ubuntu, which is a prerequisite for using pdm.\nSOURCE: https://github.com/dbos-inc/dbos-transact-py/blob/main/DEVELOPING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\napt install python3.12-venv\n```\n\n----------------------------------------\n\nTITLE: Installing Python 3.10 Virtual Environment Package on Ubuntu\nDESCRIPTION: Command to install the Python 3.10 virtual environment package on Ubuntu, which is a prerequisite for using pdm.\nSOURCE: https://github.com/dbos-inc/dbos-transact-py/blob/main/DEVELOPING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\napt install python3.10-venv\n```"
  }
]