[
  {
    "owner": "tadata-org",
    "repo": "fastapi_mcp",
    "content": "TITLE: Basic FastAPI-MCP Setup\nDESCRIPTION: Minimal code example demonstrating how to integrate the MCP server with a FastAPI application. This code imports the necessary components, initializes a FastAPI app, creates an MCP server instance, and mounts it to the FastAPI app at the '/mcp' endpoint.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi_mcp import FastApiMCP\n\napp = FastAPI()\n\nmcp = FastApiMCP(app)\n\n# Mount the MCP server directly to your FastAPI app\nmcp.mount()\n```\n\n----------------------------------------\n\nTITLE: Basic usage of FastAPI-MCP\nDESCRIPTION: Demonstrates the simplest way to add an MCP server to a FastAPI application using FastAPI-MCP. It creates a FastAPI app, initializes FastApiMCP with the app, and mounts the MCP server.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/README_zh-CN.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi_mcp import FastApiMCP\n\napp = FastAPI()\n\nmcp = FastApiMCP(app)\n\n# Directly mount the MCP server to your FastAPI app\nmcp.mount()\n```\n\n----------------------------------------\n\nTITLE: Filtering Endpoints in FastAPI-MCP\nDESCRIPTION: Shows various ways to control which FastAPI endpoints are exposed as MCP tools using operation IDs and tags. Includes examples of inclusion and exclusion filters, and combining multiple filtering criteria.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/docs/04_advanced_usage.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi_mcp import FastApiMCP\n\napp = FastAPI()\n\n# Only include specific operations\nmcp = FastApiMCP(\n    app,\n    include_operations=[\"get_user\", \"create_user\"]\n)\n\n# Exclude specific operations\nmcp = FastApiMCP(\n    app,\n    exclude_operations=[\"delete_user\"]\n)\n\n# Only include operations with specific tags\nmcp = FastApiMCP(\n    app,\n    include_tags=[\"users\", \"public\"]\n)\n\n# Exclude operations with specific tags\nmcp = FastApiMCP(\n    app,\n    exclude_tags=[\"admin\", \"internal\"]\n)\n\n# Combine operation IDs and tags (include mode)\nmcp = FastApiMCP(\n    app,\n    include_operations=[\"user_login\"],\n    include_tags=[\"public\"]\n)\n\nmcp.mount()\n```\n\n----------------------------------------\n\nTITLE: Customizing Schema Description in FastAPI-MCP\nDESCRIPTION: Demonstrates how to configure schema description options when initializing FastAPI-MCP. Controls the detail level of tool descriptions and response schemas.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/docs/04_advanced_usage.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi_mcp import FastApiMCP\n\napp = FastAPI()\n\nmcp = FastApiMCP(\n    app,\n    name=\"My API MCP\",\n    describe_all_responses=True,     # Include all possible response schemas in tool descriptions\n    describe_full_response_schema=True  # Include full JSON schema in tool descriptions\n)\n\nmcp.mount()\n```\n\n----------------------------------------\n\nTITLE: Advanced usage of FastAPI-MCP with custom schema description\nDESCRIPTION: Shows how to customize the MCP server creation with options for including all possible response schemas and full JSON schemas in tool descriptions.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/README_zh-CN.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi_mcp import FastApiMCP\n\napp = FastAPI()\n\nmcp = FastApiMCP(\n    app,\n    name=\"My API MCP\",\n    describe_all_responses=True,     # Include all possible response schemas in tool description\n    describe_full_response_schema=True  # Include full JSON schema in tool description\n)\n\nmcp.mount()\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Flow in FastAPI-MCP with Python\nDESCRIPTION: This snippet shows how to implement the full OAuth 2 flow in FastAPI-MCP, compliant with MCP Spec 2025-03-26.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/docs/03_authentication_and_authorization.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Depends\nfrom fastapi_mcp import FastApiMCP, AuthConfig\n\nmcp = FastApiMCP(\n    app,\n    name=\"MCP With OAuth\",\n    auth_config=AuthConfig(\n        issuer=f\"https://auth.example.com/\",\n        authorize_url=f\"https://auth.example.com/authorize\",\n        oauth_metadata_url=f\"https://auth.example.com/.well-known/oauth-authorization-server\",\n        audience=\"my-audience\",\n        client_id=\"my-client-id\",\n        client_secret=\"my-client-secret\",\n        dependencies=[Depends(verify_auth)],\n        setup_proxies=True,\n    ),\n)\n\nmcp.mount()\n```\n\n----------------------------------------\n\nTITLE: Separate Deployment Configuration in FastAPI-MCP\nDESCRIPTION: Demonstrates how to create an MCP server from one FastAPI app and mount it to a different app for separate deployment. Useful for isolating MCP functionality from the main API.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/docs/04_advanced_usage.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi_mcp import FastApiMCP\n\n# Your API app\napi_app = FastAPI()\n# ... define your API endpoints on api_app ...\n\n# A separate app for the MCP server\nmcp_app = FastAPI()\n\n# Create MCP server from the API app\nmcp = FastApiMCP(api_app)\n\n# Mount the MCP server to the separate app\nmcp.mount(mcp_app)\n\n# Now you can run both apps separately:\n# uvicorn main:api_app --host api-host --port 8001\n# uvicorn main:mcp_app --host mcp-host --port 8000\n```\n\n----------------------------------------\n\nTITLE: Customizing exposed endpoints in FastAPI-MCP\nDESCRIPTION: Demonstrates various ways to control which FastAPI endpoints are exposed as MCP tools, using operation IDs and tags for inclusion or exclusion.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/README_zh-CN.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi_mcp import FastApiMCP\n\napp = FastAPI()\n\n# Include only specific operations\nmcp = FastApiMCP(\n    app,\n    include_operations=[\"get_user\", \"create_user\"]\n)\n\n# Exclude specific operations\nmcp = FastApiMCP(\n    app,\n    exclude_operations=[\"delete_user\"]\n)\n\n# Include only operations with specific tags\nmcp = FastApiMCP(\n    app,\n    include_tags=[\"users\", \"public\"]\n)\n\n# Exclude operations with specific tags\nmcp = FastApiMCP(\n    app,\n    exclude_tags=[\"admin\", \"internal\"]\n)\n\n# Combine operation IDs and tags (inclusive mode)\nmcp = FastApiMCP(\n    app,\n    include_operations=[\"user_login\"],\n    include_tags=[\"public\"]\n)\n\nmcp.mount()\n```\n\n----------------------------------------\n\nTITLE: Dynamic Endpoint Addition in FastAPI-MCP\nDESCRIPTION: Shows how to handle adding new endpoints after MCP server creation by refreshing the server configuration. Includes example of adding a new endpoint and updating the MCP server.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/docs/04_advanced_usage.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi_mcp import FastApiMCP\n\napp = FastAPI()\n# ... define initial endpoints ...\n\n# Create MCP server\nmcp = FastApiMCP(app)\nmcp.mount()\n\n# Add new endpoints after MCP server creation\n@app.get(\"/new/endpoint/\", operation_id=\"new_endpoint\")\nasync def new_endpoint():\n    return {\"message\": \"Hello, world!\"}\n\n# Refresh the MCP server to include the new endpoint\nmcp.setup_server()\n```\n\n----------------------------------------\n\nTITLE: Custom HTTP Client Configuration in FastAPI-MCP\nDESCRIPTION: Demonstrates how to configure custom HTTP client settings for FastAPI-MCP communication. Shows setup of custom base URL and timeout settings using httpx.AsyncClient.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/docs/04_advanced_usage.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nfrom fastapi import FastAPI\nfrom fastapi_mcp import FastApiMCP\n\napp = FastAPI()\n\n# Use a custom HTTP client with a specific base URL\ncustom_client = httpx.AsyncClient(\n    base_url=\"https://api.example.com\",\n    timeout=30.0\n)\n\nmcp = FastApiMCP(\n    app,\n    http_client=custom_client\n)\n\nmcp.mount()\n```\n\n----------------------------------------\n\nTITLE: Customizing communication with FastAPI application\nDESCRIPTION: Demonstrates how to use a custom httpx.AsyncClient for communication between the MCP server and the FastAPI application, allowing for custom base URLs or different transport methods.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/README_zh-CN.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nfrom fastapi import FastAPI\nfrom fastapi_mcp import FastApiMCP\n\napp = FastAPI()\n\n# Use a custom HTTP client with a specific base URL\ncustom_client = httpx.AsyncClient(\n    base_url=\"https://api.example.com\",\n    timeout=30.0\n)\n\nmcp = FastApiMCP(\n    app,\n    http_client=custom_client\n)\n\nmcp.mount()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom OAuth Metadata in FastAPI-MCP with Python\nDESCRIPTION: This code demonstrates how to provide custom OAuth metadata for full control over the OAuth configuration in FastAPI-MCP.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/docs/03_authentication_and_authorization.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Depends\nfrom fastapi_mcp import FastApiMCP, AuthConfig\n\nmcp = FastApiMCP(\n    app,\n    name=\"MCP With Custom OAuth\",\n    auth_config=AuthConfig(\n        # Provide your own complete OAuth metadata\n        custom_oauth_metadata={\n            \"issuer\": \"https://auth.example.com\",\n            \"authorization_endpoint\": \"https://auth.example.com/authorize\",\n            \"token_endpoint\": \"https://auth.example.com/token\",\n            \"registration_endpoint\": \"https://auth.example.com/register\",\n            \"scopes_supported\": [\"openid\", \"profile\", \"email\"],\n            \"response_types_supported\": [\"code\"],\n            \"grant_types_supported\": [\"authorization_code\"],\n            \"token_endpoint_auth_methods_supported\": [\"none\"],\n            \"code_challenge_methods_supported\": [\"S256\"]\n        },\n\n        # Your auth checking dependency\n        dependencies=[Depends(verify_auth)],\n    ),\n)\n\nmcp.mount()\n```\n\n----------------------------------------\n\nTITLE: Configuring FastAPI-MCP with AuthConfig in Python\nDESCRIPTION: This code demonstrates how to set up FastAPI-MCP with AuthConfig to reject requests without an authorization header.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/docs/03_authentication_and_authorization.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Depends\nfrom fastapi_mcp import FastApiMCP, AuthConfig\n\nmcp = FastApiMCP(\n    app,\n    name=\"Protected MCP\",\n    auth_config=AuthConfig(\n        dependencies=[Depends(verify_auth)],\n    ),\n)\nmcp.mount()\n```\n\n----------------------------------------\n\nTITLE: Deploying MCP server separately from FastAPI application\nDESCRIPTION: Illustrates how to create an MCP server from one FastAPI application and mount it on a separate application, allowing for independent deployment of the API and MCP server.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/README_zh-CN.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi_mcp import FastApiMCP\n\n# Your API app\napi_app = FastAPI()\n# ... define your API endpoints on api_app ...\n\n# A separate MCP server app\nmcp_app = FastAPI()\n\n# Create MCP server from the API app\nmcp = FastApiMCP(api_app)\n\n# Mount the MCP server to the separate app\nmcp.mount(mcp_app)\n\n# Now you can run the two apps separately:\n# uvicorn main:api_app --host api-host --port 8001\n# uvicorn main:mcp_app --host mcp-host --port 8000\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthConfig with Proxies in FastAPI-MCP using Python\nDESCRIPTION: This code demonstrates how to set up AuthConfig with proxies for OAuth provider compatibility in FastAPI-MCP.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/docs/03_authentication_and_authorization.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmcp = FastApiMCP(\n    app,\n    auth_config=AuthConfig(\n        # Your OAuth provider information\n        issuer=\"https://auth.example.com\",\n        authorize_url=\"https://auth.example.com/authorize\",\n        oauth_metadata_url=\"https://auth.example.com/.well-known/oauth-authorization-server\",\n\n        # Credentials registered with your OAuth provider\n        client_id=\"your-client-id\",\n        client_secret=\"your-client-secret\",\n\n        # Recommended, since some clients don't specify them\n        audience=\"your-api-audience\",\n        default_scope=\"openid profile email\",\n\n        # Your auth checking dependency\n        dependencies=[Depends(verify_auth)],\n\n        # Create compatibility proxies - usually needed!\n        setup_proxies=True,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding endpoints after MCP server creation\nDESCRIPTION: Shows how to refresh the MCP server to include new endpoints added to the FastAPI application after the initial MCP server creation.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/README_zh-CN.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi_mcp import FastApiMCP\n\napp = FastAPI()\n# ... define initial endpoints ...\n\n# Create MCP server\nmcp = FastApiMCP(app)\nmcp.mount()\n\n# Add new endpoint after MCP server creation\n@app.get(\"/new/endpoint/\", operation_id=\"new_endpoint\")\nasync def new_endpoint():\n    return {\"message\": \"Hello, world!\"}\n\n# Refresh MCP server to include new endpoint\nmcp.setup_server()\n```\n\n----------------------------------------\n\nTITLE: Comparing Auto-Generated vs Explicit operation_id in FastAPI Routes\nDESCRIPTION: This example demonstrates two approaches to defining FastAPI endpoints: one with an auto-generated operation_id (which results in a cryptic tool name) and another with an explicit operation_id that produces a clearer tool name (\"get_user_info\"). The explicit approach is recommended for better clarity when working with FastAPI-MCP.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/docs/01_tool_naming.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Auto-generated operation_id (something like \"read_user_users__user_id__get\")\n@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: int):\n    return {\"user_id\": user_id}\n\n# Explicit operation_id (tool will be named \"get_user_info\")\n@app.get(\"/users/{user_id}\", operation_id=\"get_user_info\")\nasync def read_user(user_id: int):\n    return {\"user_id\": user_id}\n```\n\n----------------------------------------\n\nTITLE: Defining FastAPI endpoints with and without explicit operation_id\nDESCRIPTION: Compares two FastAPI endpoint definitions, one using an automatically generated operation_id and another with an explicitly defined operation_id. This affects how the MCP tools are named.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/README_zh-CN.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Automatically generated operation_id (something like \"read_user_users__user_id__get\")\n@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: int):\n    return {\"user_id\": user_id}\n\n# Explicit operation_id (tool will be named \"get_user_info\")\n@app.get(\"/users/{user_id}\", operation_id=\"get_user_info\")\nasync def read_user(user_id: int):\n    return {\"user_id\": user_id}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Client for OAuth Flow in JSON\nDESCRIPTION: This JSON configuration shows how to set up an MCP client to use OAuth flow with FastAPI-MCP.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/docs/03_authentication_and_authorization.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"fastapi-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"http://localhost:8000/mcp\",\n        \"8080\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSE Connection for MCP Clients\nDESCRIPTION: Basic configuration for connecting popular MCP clients like Claude Desktop, Cursor & Windsurf to a FastAPI MCP server using Server-Sent Events (SSE).\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/docs/02_connecting_to_the_mcp_server.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"fastapi-mcp\": {\n      \"url\": \"http://localhost:8000/mcp\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP-Remote Bridge Connection\nDESCRIPTION: Configuration for connecting to MCP server using mcp-remote as a bridge, supporting authentication and providing compatibility for clients that don't support SSE directly. Includes optional port configuration for OAuth support.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/docs/02_connecting_to_the_mcp_server.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"fastapi-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"http://localhost:8000/mcp\",\n        \"8080\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Client with Fixed Port for OAuth in JSON\nDESCRIPTION: This JSON configuration shows how to set up an MCP client with a fixed port for proper OAuth callback URL configuration.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/docs/03_authentication_and_authorization.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"example\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"http://localhost:8000/mcp\",\n        \"8080\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Client for Token Passthrough in JSON\nDESCRIPTION: This snippet shows how to configure an MCP client to send an authorization header for basic token passthrough.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/docs/03_authentication_and_authorization.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"remote-example\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"http://localhost:8000/mcp\",\n        \"--header\",\n        \"Authorization:${AUTH_HEADER}\"\n      ]\n    },\n    \"env\": {\n      \"AUTH_HEADER\": \"Bearer <your-token>\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running MCP Inspector CLI Command\nDESCRIPTION: Command to launch the MCP Inspector tool for testing and verifying FastAPI MCP server functionality. The inspector allows connecting to the MCP server and testing available endpoints.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/docs/00_FAQ.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @modelcontextprotocol/inspector node build/index.js\n```\n\n----------------------------------------\n\nTITLE: FastAPI-MCP Example Structure\nDESCRIPTION: List of example files demonstrating different aspects of FastAPI-MCP implementation, including basic integration, schema customization, endpoint management, and configuration options.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# FastAPI-MCP Examples\n\nThe following examples demonstrate various features and usage patterns of FastAPI-MCP:\n\n1. [Basic Usage Example](01_basic_usage_example.py) - Basic FastAPI-MCP integration\n2. [Full Schema Description](02_full_schema_description_example.py) - Customizing schema descriptions\n3. [Custom Exposed Endpoints](03_custom_exposed_endpoints_example.py) - Controlling which endpoints are exposed\n4. [Separate Server](04_separate_server_example.py) - Deploying MCP server separately\n5. [Reregister Tools](05_reregister_tools_example.py) - Adding endpoints after MCP server creation\n6. [Custom MCP Router](06_custom_mcp_router_example.py) - Advanced routing configuration\n7. [Configure HTTP Timeout](07_configure_http_timeout_example.py) - Customizing timeout settings\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI-MCP Using UV\nDESCRIPTION: Commands for installing the FastAPI-MCP package using uv, a fast Python package installer. UV is the recommended installation method.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv add fastapi-mcp\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI-MCP using uv package manager\nDESCRIPTION: Demonstrates how to install FastAPI-MCP using the recommended uv package manager. uv is described as a fast Python package installer.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/README_zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv add fastapi-mcp\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI-MCP Using Pip\nDESCRIPTION: Alternative command for installing the FastAPI-MCP package using pip, the standard Python package installer.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install fastapi-mcp\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI-MCP using pip\nDESCRIPTION: Shows an alternative method to install FastAPI-MCP using pip, the standard Python package installer.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/README_zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install fastapi-mcp\n```\n\n----------------------------------------\n\nTITLE: Setting up FastAPI-MCP Repository\nDESCRIPTION: Commands for cloning the repository and setting up the upstream remote for contribution.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR-USERNAME/fastapi_mcp.git\ncd fastapi-mcp\n\n# Add the upstream remote\ngit remote add upstream https://github.com/tadata-org/fastapi_mcp.git\n```\n\n----------------------------------------\n\nTITLE: Installing Development Environment\nDESCRIPTION: Commands for syncing dependencies and installing pre-commit hooks using uv package manager.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv sync\n```\n\n----------------------------------------\n\nTITLE: Setting up Pre-commit Hooks\nDESCRIPTION: Commands for installing and running pre-commit hooks to ensure code quality.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run pre-commit install\nuv run pre-commit run\n```\n\n----------------------------------------\n\nTITLE: Running Commands with Virtual Environment\nDESCRIPTION: Commands for running development tools with activated virtual environment.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Then run commands directly\npytest\nmypy .\nruff check .\n```\n\n----------------------------------------\n\nTITLE: Running Commands without Virtual Environment\nDESCRIPTION: Commands for running development tools using uv run prefix without activating virtual environment.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Use uv run prefix for all commands\nuv run pytest\nuv run mypy .\nuv run ruff check .\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies\nDESCRIPTION: Commands for adding runtime and development dependencies using uv package manager.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuv add new-package\nuv add --group dev new-package\n\ngit add pyproject.toml uv.lock\ngit commit -m \"Add new-package dependency\"\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown\nDESCRIPTION: Structured changelog entries documenting version history from 0.1.0 to 0.3.2, including breaking changes, fixes, features and improvements to the FastAPI MCP project.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [0.3.2]\n\n### Fixed\n- 🐛 Fix a bug preventing simple setup of [basic token passthrough](docs/03_authentication_and_authorization.md#basic-token-passthrough)\n\n## [0.3.1]\n\n🚀 FastApiMCP now supports MCP Authorization!\n\nYou can now add MCP-compliant OAuth configuration in a FastAPI-native way, using your existing FastAPI `Depends()` that we all know and love.\n\n### Added\n- 🎉 Support for Authentication / Authorization compliant to [MCP 2025-03-26 Specification](https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization), using OAuth 2.1. (#10)\n- 🎉 Support passing http headers to tool calls (#82)\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Auth0 Example\nDESCRIPTION: This snippet shows the required environment variables for the Auth0 integration example in FastAPI-MCP.\nSOURCE: https://github.com/tadata-org/fastapi_mcp/blob/main/docs/03_authentication_and_authorization.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH0_DOMAIN=your-tenant.auth0.com\nAUTH0_AUDIENCE=https://your-tenant.auth0.com/api/v2/\nAUTH0_CLIENT_ID=your-client-id\nAUTH0_CLIENT_SECRET=your-client-secret\n```"
  }
]