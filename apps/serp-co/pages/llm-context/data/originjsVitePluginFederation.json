[
  {
    "owner": "originjs",
    "repo": "vite-plugin-federation",
    "content": "TITLE: Dynamic Remote Loading with Federation API (TypeScript)\nDESCRIPTION: This snippet demonstrates dynamically loading remote modules using the `virtual:__federation__` module. It fetches plugin configurations, sets up remote modules with `setRemote`, retrieves modules with `getRemote`, unwraps them with `unwrapModule`, and renders the components. The code handles potential errors during the process.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  __federation_method_getRemote as getRemote,\n  __federation_method_setRemote as setRemote,\n  __federation_method_unwrapDefault as unwrapModule,\n  type IRemoteConfig,\n} from \"virtual:__federation__\";\n\nconst renderComponent = () => {\n  throw Error(\"Not implemented\");\n}\n\nconst loadCrmPlugins = async () => {\n  try {\n    const pluginsResponse = await fetch(\"some-backed.com/plugins\");\n    const pluginsJson = await pluginsResponse.json();\n    \n    const unresolvedPlugins = pluginsJson.map(async (plugin) => {\n      setRemote(plugin.name, {\n        ...commonRemoteConfig,\n        url: plugin.entry,\n      });\n\n      const remoteModule = await getRemote(plugin.name, plugin.component);\n      const remoteComponent = await unwrapModule(remoteModule);\n      renderComponent(plugin.name, remoteComponent);\n    });\n\n    await Promise.all(unresolvedPlugins);\n  } catch (e) {\n    console.error(e);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Remotes Configuration (Complex)\nDESCRIPTION: Demonstrates a more complex configuration for the `remotes` option, including the `external` and `format` properties.  `external` specifies the remote module's entry point, and `format` specifies the module format (esm, systemjs, var).\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nremotes: {\n    remote-simple: {\n        external: 'http://localhost:5011/remoteEntry.js',\n        format: 'var',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Side with Vite\nDESCRIPTION: This JavaScript code configures a remote application using vite-plugin-federation within a Vite project. It defines the module's name, filename for the remote entry point, exposed modules, and shared dependencies. This configuration is crucial for enabling Module Federation in Vite.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// vite.config.js\nimport federation from \"@originjs/vite-plugin-federation\";\nexport default {\n    plugins: [\n        federation({\n            name: 'remote-app',\n            filename: 'remoteEntry.js',\n            // Modules to expose\n            exposes: {\n                './Button': './src/Button.vue',\n            },\n            shared: ['vue']\n        })\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Host App in Vite\nDESCRIPTION: Configure a Vite project as a host app, consuming remote modules using the vite-plugin-federation. Defines the host app name, remotes (location of remoteEntry.js), and shared dependencies.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\nimport federation from \"@originjs/vite-plugin-federation\";\nexport default {\n    plugins: [\n        federation({\n            name: 'host-app',\n            remotes: {\n                remote_app: \"http://localhost:5001/assets/remoteEntry.js\",\n            },\n            shared: ['vue']\n        })\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Remote Components in Vue Templates\nDESCRIPTION: This Vue template code shows how to use a remotely imported component (`RemoteButton`) within a Vue component's template. This allows for the dynamic loading and rendering of components from remote modules.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_7\n\nLANGUAGE: Vue\nCODE:\n```\n<template>\n    <div>\n        <RemoteButton />\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Side with Rollup\nDESCRIPTION: This JavaScript code configures a host application using vite-plugin-federation within a Rollup project. It defines the module's name, specifies the remote application URL, and defines shared dependencies. This is essential for consuming remote modules in a Rollup project.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// rollup.config.js\nimport federation from '@originjs/vite-plugin-federation'\nexport default {\n    input: 'src/index.js',\n    plugins: [\n        federation({\n            name: 'host-app',\n            remotes: {\n                remote_app: \"http://localhost:5001/remoteEntry.js\",\n            },\n            shared: ['vue']\n        })\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Exposes Configuration\nDESCRIPTION: Shows example configurations for the `exposes` option in `vite-plugin-federation`, which defines the components exposed by a remote module.  Includes both simple and complex configurations, with custom chunk names and style handling.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexposes: {\n// 'externally exposed component name': 'externally exposed component address'\n    './remote-simple-button': './src/components/Button.vue', \n    './remote-simple-section': './src/components/Section.vue'\n},\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexposes: {\n    './remote-simple-button': {\n        import: './src/components/Button.vue',\n        name: 'customChunkName',\n        dontAppendStylesToHead: true\n    },\n},\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst styleContainer = document.createElement(\"div\");\nconst hrefs = window[\"css__App__./remote-simple-button\"];\n\nhrefs.forEach((href: string) => {\n    const link = document.createElement('link')\n    link.href = href\n    link.rel = 'stylesheet'\n    styleContainer.appendChild(link);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Host App with Vite using federation\nDESCRIPTION: This snippet shows how to configure a host application using Vite and the `@originjs/vite-plugin-federation` plugin. It defines the module federation configuration, including the application's name, remote applications, and shared dependencies. The configuration is added to the `vite.config.js` file.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/packages/lib/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// vite.config.js\nimport federation from \"@originjs/vite-plugin-federation\";\nexport default {\n    plugins: [\n        federation({\n            name: 'host-app',\n            remotes: {\n                remote_app: \"http://localhost:5001/assets/remoteEntry.js\",\n            },\n            shared: ['vue']\n        })\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Side with Rollup\nDESCRIPTION: This JavaScript code configures a remote application using vite-plugin-federation within a Rollup project. It defines the module's name, filename for the remote entry point, exposed modules, and shared dependencies.  This configuration is crucial for enabling Module Federation in Rollup.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// rollup.config.js\nimport federation from '@originjs/vite-plugin-federation'\nexport default {\n    input: 'src/index.js',\n    plugins: [\n        federation({\n            name: 'remote-app',\n            filename: 'remoteEntry.js',\n            // Modules to expose\n            exposes: {\n                './Button': './src/button'.\n            },\n            shared: ['vue']\n        })\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Side with Vite\nDESCRIPTION: This JavaScript code configures a host application using vite-plugin-federation within a Vite project. It defines the module's name, specifies the remote application URL, and defines shared dependencies. This is essential for consuming remote modules in a Vite project.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// vite.config.js\nimport federation from \"@originjs/vite-plugin-federation\";\nexport default {\n    plugins: [\n        federation({\n            name: 'host-app',\n            remotes: {\n                remote_app: \"http://localhost:5001/assets/remoteEntry.js\",\n            },\n            shared: ['vue']\n        })\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote App in Rollup\nDESCRIPTION: Configure a Rollup project as a remote module, exposing components using the vite-plugin-federation. Defines the remote app name, filename, exposed modules, and shared dependencies.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nimport federation from '@originjs/vite-plugin-federation'\nexport default {\n    input: 'src/index.js',\n    plugins: [\n        federation({\n            name: 'remote-app',\n            filename: 'remoteEntry.js',\n            // 需要暴露的模块\n            exposes: {\n                './Button': './src/button'\n            },\n            shared: ['vue']\n        })\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Host App with Rollup using federation\nDESCRIPTION: This snippet illustrates configuring a host application using Rollup and the `@originjs/vite-plugin-federation` plugin.  It defines the module federation configuration, including the application's name, remote applications, and shared dependencies. The configuration is added to the `rollup.config.js` file.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/packages/lib/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// rollup.config.js\nimport federation from '@originjs/vite-plugin-federation'\nexport default {\n    input: 'src/index.js',\n    plugins: [\n        federation({\n            name: 'host-app',\n            remotes: {\n                remote_app: \"http://localhost:5001/remoteEntry.js\",\n            },\n            shared: ['vue']\n        })\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Remote Modules in Vue\nDESCRIPTION: This JavaScript code demonstrates how to use a remote module (specifically a button component) in a Vue application using defineAsyncComponent. It dynamically imports the remote component and registers it for use in the application.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createApp, defineAsyncComponent } from \"vue\";\nconst app = createApp(Layout);\n...\nconst RemoteButton = defineAsyncComponent(() => import(\"remote_app/Button\"));\napp.component(\"RemoteButton\", RemoteButton);\napp.mount(\"#root\");\n```\n\n----------------------------------------\n\nTITLE: Using remote modules in a Vue component\nDESCRIPTION: This code demonstrates how to use remote modules in a Vue project using `defineAsyncComponent`. It imports the necessary Vue functions and defines an asynchronous component that imports the remote `Button` component from the `remote_app` module. The remote component is then registered as a global component and mounted to the DOM.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/packages/lib/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { createApp, defineAsyncComponent } from \"vue\";\nconst app = createApp(Layout);\n...\nconst RemoteButton = defineAsyncComponent(() => import(\"remote_app/Button\"));\napp.component(\"RemoteButton\", RemoteButton);\napp.mount(\"#root\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Host App in Rollup\nDESCRIPTION: Configure a Rollup project as a host app, consuming remote modules using the vite-plugin-federation. Defines the host app name, remotes (location of remoteEntry.js), and shared dependencies.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nimport federation from '@originjs/vite-plugin-federation'\nexport default {\n    input: 'src/index.js',\n    plugins: [\n        federation({\n            name: 'host-app',\n            remotes: {\n                remote_app: \"http://localhost:5001/remoteEntry.js\",\n            },\n            shared: ['vue']\n        })\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Shared Module Preload Example\nDESCRIPTION: Provides an example of configuring the `modulePreload` option, demonstrating how to preload shared dependencies in the HTML head during production.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nshared: {\n    packageName: {\n        modulePreload: true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote App with Vite using federation\nDESCRIPTION: This snippet demonstrates how to configure a remote application using Vite and the `@originjs/vite-plugin-federation` plugin. It defines the module federation configuration, including the application's name, filename for the remote entry, exposed modules, and shared dependencies. This configuration is added to the `vite.config.js` file.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/packages/lib/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// vite.config.js\nimport federation from \"@originjs/vite-plugin-federation\";\nexport default {\n    plugins: [\n        federation({\n            name: 'remote-app',\n            filename: 'remoteEntry.js',\n            // Modules to expose\n            exposes: {\n                './Button': './src/Button.vue',\n            },\n            shared: ['vue']\n        })\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote App in Vite\nDESCRIPTION: Configure a Vite project as a remote module, exposing components using the vite-plugin-federation. Defines the remote app name, filename, exposed modules, and shared dependencies.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\nimport federation from \"@originjs/vite-plugin-federation\";\nexport default {\n    plugins: [\n        federation({\n            name: 'remote-app',\n            filename: 'remoteEntry.js',\n            // 需要暴露的模块\n            exposes: {\n                './Button': './src/Button.vue',\n            },\n            shared: ['vue']\n        })\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Shared Configuration Example\nDESCRIPTION: Provides an example of configuring the `shared` option, showing how to specify that a dependency (packageName) should not generate a separate shared chunk file.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nshared: {\n    packageName: {\n        generate: false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring build target to esnext (TypeScript)\nDESCRIPTION: This snippet shows how to configure the build target to `esnext` to solve the error `Top-level await is not available in the configured target environment`. Alternatively, you can specify target browsers by setting build.target to an array.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nbuild: {\n    target: \"esnext\"\n  }\n```\n\nLANGUAGE: typescript\nCODE:\n```\nbuild: {\n    target: [\"chrome89\", \"edge89\", \"firefox89\", \"safari15\"]\n }\n```\n\n----------------------------------------\n\nTITLE: Remotes Configuration with Promise\nDESCRIPTION: Illustrates the use of `Promise` in the `external` property of the `remotes` configuration, which enables dynamic URL resolution for remote modules. This requires setting `externalType` to `promise`.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nremotes: {\n      home: {\n          external: `Promise.resolve('your url')`,\n          externalType: 'promise'\n      },\n},\n```\n\nLANGUAGE: javascript\nCODE:\n```\nremotes: {\n    remote-simple: {\n        external: `fetch('your url').then(response=>response.json()).then(data=>data.url)`,\n        externalType: 'promise'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Target for Top-Level Await\nDESCRIPTION: Demonstrates how to configure the `build.target` option in `vite.config.ts` to support top-level await. This resolves the \"Top-level await is not available\" error when the target browser environment does not support it.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n build: {\n    target: [\"chrome89\", \"edge89\", \"firefox89\", \"safari15\"]\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote with Promise External - JavaScript\nDESCRIPTION: Demonstrates how to configure a remote module with a promise-based external URL in the vite-plugin-federation plugin. This allows for dynamic URL resolution.  The `externalType` must be set to 'promise'.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nremotes: {\n      home: {\n          external: `Promise.resolve('your url')`,\n          externalType: 'promise'\n      },\n},\n\n// or from networke\nremotes: {\n    remote-simple: {\n        external: `fetch('your url').then(response=>response.json()).then(data=>data.url)`,\n        externalType: 'promise'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for Missing Modules\nDESCRIPTION: This snippet provides a TypeScript declaration for modules that might be missing. By adding declarations like `declare module \"router-remote/*\"{}`, you can resolve 'Cannot find module' errors during compilation.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module \"router-remote/*\"{}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Declaration for Federation API\nDESCRIPTION: This code snippet shows how to declare the `virtual:__federation__` module in TypeScript to provide type safety when using the Federation API.  It defines the `IRemoteConfig` interface and declares the types for functions like `__federation_method_setRemote`, `__federation_method_getRemote`, `__federation_method_unwrapDefault`, `__federation_method_ensure`, and `__federation_method_wrapDefault`.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module \"virtual:__federation__\" {\n  interface IRemoteConfig {\n    url: (() => Promise<string>) | string;\n    format: \"esm\" | \"systemjs\" | \"var\";\n    from: \"vite\" | \"webpack\";\n  }\n\n  export function __federation_method_setRemote(\n    name: string,\n    config: IRemoteConfig,\n  ): void;\n\n  export function __federation_method_getRemote(\n    name: string,\n    exposedPath: string,\n  ): Promise<unknown>;\n\n  export function __federation_method_unwrapDefault(\n    unwrappedModule: unknown,\n  ): Promise<unknown>;\n  \n  export function __federation_method_ensure(\n    remoteName: string,\n  ): Promise<unknown>;\n  \n  export function __federation_method_wrapDefault(\n    module: unknown,\n    need: boolean,\n  ): Promise<unknown>;\n}\n```\n\n----------------------------------------\n\nTITLE: Shared Package Configuration - JavaScript\nDESCRIPTION: Illustrates how to configure shared dependencies with packagePath. This is used to share custom packages that are not located under `node_modules`. The `packagePath` property specifies the path to the package.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nshared: {\n    packageName: {\n        packagePath:'./src/a/index.js'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring remotes with external object\nDESCRIPTION: Advanced configuration for remotes object.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nremotes: {\n    remote-simple: {\n        external: 'http://localhost:5011/remoteEntry.js',\n        format: 'var',\n        from: 'webpack'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Scripts for Dev Mode Testing\nDESCRIPTION: This snippet shows the scripts needed in `package.json` to run tests in `dev` mode. These scripts are used by the testing framework to start the host and remote applications and then stop them after the tests have run. It uses `pnpm` and `kill-port` to manage the processes.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"build:remotes\": \"pnpm --filter \\\".\\\\/remote\\\"  build\",\n    \"serve:remotes\": \"pnpm --filter \\\".\\\\/remote\\\"  serve\",\n    \"dev:hosts\": \"pnpm --filter \\\".\\\\/host\\\" dev\",\n    \"stop\": \"kill-port --port 5000,5001\"\n  },\n  \"workspaces\": [\n    \"host\",\n    \"remote\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Restart Host and Remote Services\nDESCRIPTION: Restarts the host and remote services for the Vue3 advanced module federation demo.  This command assumes pnpm is used as the package manager. The command will attempt to stop any processes using ports 5001-5003, and then compile and start the host and remote services.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/packages/examples/vue3-advanced-demo/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm restart\n```\n\n----------------------------------------\n\nTITLE: Package.json Scripts for Build&Serve Mode Testing\nDESCRIPTION: This snippet shows the scripts needed in `package.json` to run tests in `build&serve` mode.  These scripts build and serve the host and remote applications before running tests, and then stop the processes afterwards.  It uses `pnpm` and `kill-port` to manage the build and serve processes.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"build\": \"pnpm --parallel --filter \\\".\\\\/**\\\" build\",\n    \"serve\": \"pnpm --parallel --filter \\\".\\\\/**\\\" serve \",\n    \"stop\": \"kill-port --port 5000,5001\"\n  },\n  \"workspaces\": [\n    \"host\",\n    \"remote\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import in Vue\nDESCRIPTION: Demonstrates how to dynamically import a component in Vue using `defineAsyncComponent` or within the `components` option of a Vue component. This allows for lazy loading of remote components.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// dynamic import\nconst myButton = defineAsyncComponent(() => import('remote/myButton'));\napp.component('my-button' , myButton);\n// or\nexport default {\n  name: 'App',\n  components: {\n    myButton: () => import('remote/myButton'),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Remote Module in Vue\nDESCRIPTION: Importing and registering a remote component in a Vue application using defineAsyncComponent. Demonstrates how to use a remotely exposed component within a Vue application.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp, defineAsyncComponent } from \"vue\";\nconst app = createApp(Layout);\n...\nconst RemoteButton = defineAsyncComponent(() => import(\"remote_app/Button\"));\napp.component(\"RemoteButton\", RemoteButton);\napp.mount(\"#root\");\n```\n\n----------------------------------------\n\nTITLE: Static Import in Vue\nDESCRIPTION: Shows how to statically import a component in Vue. Requires the browser `Top-level await` feature or the `vite-plugin-top-level-await` plugin if the build target is not `next`.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// static import\nimport myButton from 'remote/myButton';\napp.component('my-button' , myButton);\n// or\nexport default {\n  name: 'App',\n  components: {\n    myButton: myButton\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Dynamic Import Example\nDESCRIPTION: Example of dynamically importing a remote component in a Vue application using `defineAsyncComponent` or within the `components` option.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// dynamic import\nconst myButton = defineAsyncComponent(() => import('remote/myButton'));\napp.component('my-button' , myButton);\n// or\nexport default {\n  name: 'App',\n  components: {\n    myButton: () => import('remote/myButton'),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Scripts for Development Testing\nDESCRIPTION: Defines the `scripts` section in `package.json` for setting up development mode testing using `vite-plugin-federation`. This includes commands for building and serving remotes, running the host in dev mode, and stopping the services.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"build:remotes\": \"pnpm --filter \\\"./remote\\\"  build\",\n    \"serve:remotes\": \"pnpm --filter \\\"./remote\\\"  serve\",\n    \"dev:hosts\": \"pnpm --filter \\\"./host\\\" dev\",\n    \"stop\": \"kill-port --port 5000,5001\"\n  },\n  \"workspaces\": [\n    \"host\",\n    \"remote\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: React Dynamic Import Example\nDESCRIPTION: Example of dynamically importing a remote component in a React application using React.lazy.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// dynamic import\nconst myButton = React.lazy(() => import('remote/myButton'))\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import in React\nDESCRIPTION: Illustrates the use of `React.lazy` for dynamically importing a component in React, enabling code splitting and lazy loading.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// dynamic import\nconst myButton = React.lazy(() => import('remote/myButton'))\n```\n\n----------------------------------------\n\nTITLE: Using Remote Component in Vue Template\nDESCRIPTION: Using the remotely imported component inside Vue template.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <div>\n        <RemoteButton />\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote App with Rollup using federation\nDESCRIPTION: This snippet demonstrates configuring a remote application using Rollup and the `@originjs/vite-plugin-federation` plugin.  It defines the module federation configuration, including the application's name, filename for the remote entry, exposed modules, and shared dependencies. This configuration is added to the `rollup.config.js` file.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/packages/lib/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// rollup.config.js\nimport federation from '@originjs/vite-plugin-federation'\nexport default {\n    input: 'src/index.js',\n    plugins: [\n        federation({\n            name: 'remote-app',\n            filename: 'remoteEntry.js',\n            // Modules to expose\n            exposes: {\n                './Button': './src/button'.\n            },\n            shared: ['vue']\n        })\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using remote component in Vue template\nDESCRIPTION: This is a simple Vue template that uses the `RemoteButton` component. It demonstrates how to include a remotely federated component within a Vue template.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/packages/lib/README.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <div>\n        <RemoteButton />\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Static Import Example\nDESCRIPTION: Example of statically importing a remote component in a Vue application.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// static import\nimport myButton from 'remote/myButton';\napp.component('my-button' , myButton);\n// or\nexport default {\n  name: 'App',\n  components: {\n    myButton: myButton\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigate to Host Directory\nDESCRIPTION: Navigates to the host (team-red) directory within the vue3-advanced-demo folder.  This is necessary to execute commands specific to the host application.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/packages/examples/vue3-advanced-demo/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/examples/vue3-advanced-demo/team-red\n```\n\n----------------------------------------\n\nTITLE: Static Import in React\nDESCRIPTION: Demonstrates static import of component in React. Static imports rely on Top-level await, which needs specific configuration.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// static import\nimport myButton from 'remote/myButton'\n```\n\n----------------------------------------\n\nTITLE: React Static Import Example\nDESCRIPTION: Example of statically importing a remote component in a React application.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// static import\nimport myButton from 'remote/myButton'\n```\n\n----------------------------------------\n\nTITLE: Conditional Shared Module Generation - JavaScript\nDESCRIPTION: Shows how to conditionally disable the generation of a shared chunk file on the remote side using the `generate` option.  This can reduce the size of remote chunks when a host provides the shared module, reducing remote bundle size. This is only applicable to remote.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nshared: {\n  packageName: {\n    generate: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Remotes Configuration (Simple)\nDESCRIPTION: Illustrates a basic configuration for the `remotes` option in `vite-plugin-federation`, specifying remote module entry file addresses.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nremotes: {\n    // 'remote module name': 'remote module entry file address'\n    'remote-simple': 'http://localhost:5011/remoteEntry.js',\n}\n```\n\n----------------------------------------\n\nTITLE: Start Host in Development Mode\nDESCRIPTION: Starts the host application in development mode using pnpm. This command executes the 'dev' script defined in the host application's package.json file, typically utilizing Vite's development server.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/packages/examples/vue3-advanced-demo/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Vite Config for Explicit IP and Port Declaration (TypeScript)\nDESCRIPTION: This snippet shows how to explicitly declare the IP address, port, and `cacheDir` in the local module's `vite.config.ts` file to ensure that the plugin can correctly fetch dependent addresses. This is a solution for issues where the remote module fails to load shared local modules due to fetch failures.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  server:{\n    https: \"http\",\n    host: \"192.168.56.1\",\n    port: 5100,\n  },\n  cacheDir: \"node_modules/.cacheDir\",\n}\n```\n\n----------------------------------------\n\nTITLE: Build and Serve Module Federation Application\nDESCRIPTION: These shell commands are used to build and serve the module federation application. `pnpm run build` compiles the application code, while `pnpm run serve` starts a local development server to host the application. These commands are essential for testing and deploying the module federation setup.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/packages/examples/vue3-demo-esm-expose-store/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npnpm run build\npnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Build and Serve Commands\nDESCRIPTION: These commands are used to build the project and serve it locally. `pnpm run build` compiles the project for production. `pnpm run serve` starts a local server to host the built application, allowing testing and demonstration.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/packages/examples/vue3-demo-esm-shared-store/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npnpm run build\npnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Stop all Services\nDESCRIPTION: Stops all services related to the Vue3 advanced module federation demo. It's used to ensure that all processes related to the demo are terminated.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/packages/examples/vue3-advanced-demo/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm stop\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration for Remote Dependency Resolution\nDESCRIPTION: Shows how to configure the `server` and `cacheDir` options in the `vite.config.ts` file for local modules. This ensures that the vite-plugin-federation plugin can correctly fetch and pass dependency addresses, resolving issues related to remote module loading.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  server:{\n    https: \"http\",\n    host: \"192.168.56.1\",\n    port: 5100,\n  },\n  cacheDir: \"node_modules/.cacheDir\",\n}\n```\n\n----------------------------------------\n\nTITLE: Navigate to demo directory\nDESCRIPTION: Changes the current directory to the vue3-advanced-demo directory. This is a prerequisite for running the subsequent commands.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/packages/examples/vue3-advanced-demo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/examples/vue3-advanced-demo\n```\n\n----------------------------------------\n\nTITLE: Define Pinia Store with Null Value (Remote)\nDESCRIPTION: This JavaScript snippet defines a Pinia store named 'counterState' and initializes it to null. This simulates a scenario where the actual store logic is handled on the host application in a module federation setup. The null value indicates that the remote module does not contain the store's implementation, relying on the host for its functionality.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/packages/examples/vue3-demo-esm-expose-store/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const counterState = null;\n```\n\n----------------------------------------\n\nTITLE: Pinia Store Definition (Remote)\nDESCRIPTION: Defines a Pinia store with a 'null' value. This indicates that the store's actual implementation is located elsewhere, typically in the host application within a Module Federation setup. This approach enables data sharing without duplicating the store logic in the remote module.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/packages/examples/vue3-demo-esm-shared-store/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const counterState = null;\n```\n\n----------------------------------------\n\nTITLE: Package.json Scripts for Build & Serve Testing\nDESCRIPTION: Defines the `scripts` section in `package.json` for setting up build and serve mode testing with `vite-plugin-federation`. It includes commands for building all projects, serving them, and stopping the services.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"build\": \"pnpm --parallel --filter \\\"./**\\\" build\",\n    \"serve\": \"pnpm --parallel --filter \\\"./**\\\" serve \",\n    \"stop\": \"kill-port --port 5000,5001\"\n  },\n  \"workspaces\": [\n    \"host\",\n    \"remote\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Installing vite-plugin-federation with npm\nDESCRIPTION: This command installs the vite-plugin-federation package as a development dependency using npm. This is the first step in setting up Module Federation for your Vite or Rollup project.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @originjs/vite-plugin-federation --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing vite-plugin-federation\nDESCRIPTION: Install the vite-plugin-federation package as a dev dependency using npm.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @originjs/vite-plugin-federation --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing vite-plugin-federation with Yarn\nDESCRIPTION: This command installs the vite-plugin-federation package as a development dependency using Yarn. This is the first step in setting up Module Federation for your Vite or Rollup project.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add @originjs/vite-plugin-federation --dev\n```\n\n----------------------------------------\n\nTITLE: Installing vite-plugin-federation\nDESCRIPTION: Install the vite-plugin-federation package as a dev dependency using yarn.\nSOURCE: https://github.com/originjs/vite-plugin-federation/blob/main/README-zh.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @originjs/vite-plugin-federation --dev\n```"
  }
]