[
  {
    "owner": "lsposed",
    "repo": "lsplant",
    "content": "TITLE: Adding LSPlant to Gradle Project\nDESCRIPTION: This snippet shows how to add LSPlant as a dependency to an Android project using Gradle. It includes enabling the prefab build feature and adding the implementation dependency.\nSOURCE: https://github.com/lsposed/lsplant/blob/master/README.md#_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nrepositories {\n    mavenCentral()\n}\n\nandroid {\n    buildFeatures {\n        prefab true\n    }\n}\n\ndependencies {\n    implementation \"org.lsposed.lsplant:lsplant:+\"\n}\n```\n\n----------------------------------------\n\nTITLE: Hooking a Java Method with LSPlant\nDESCRIPTION: Function to hook a Java method by providing the target method, hooker object for context, and a callback method. Returns a backup method that can be used to call the original implementation.\nSOURCE: https://github.com/lsposed/lsplant/blob/master/README.md#_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\njobject Hook(JNIEnv *env,\n             jobject target_method,\n             jobject hooker_object,\n             jobject callback_method);\n```\n\n----------------------------------------\n\nTITLE: Configuring Project and Compiler with CMake in CMake\nDESCRIPTION: Defines cmake_minimum_required and project configuration, enforces C++23 standard, and optionally enables ccache for faster builds. Accepts a variable LSPLANT_STANDALONE to conditionally find and link an external cxx package as a dependency. This section lays out build environment parameters necessary for compiling the lsplant C++ project and supports modular development with cxx modules.\nSOURCE: https://github.com/lsposed/lsplant/blob/master/lsplant/src/main/jni/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.28)\nproject(lsplant)\n\nfind_program(CCACHE ccache)\n\nset(CMAKE_CXX_STANDARD 23)\n\nif (CCACHE)\n    set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE})\n    set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE})\nendif ()\n\nif (LSPLANT_STANDALONE)\n    find_package(cxx REQUIRED CONFIG)\n    link_libraries(cxx::cxx)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Shared Library Target and Post-Build Actions with CMake in CMake\nDESCRIPTION: Conditionally builds a shared library when LSPLANT_BUILD_SHARED is ON, setting properties for C++ modules and includes. Configures private and public dependencies, enables link time optimization, and attaches custom post-build commands to extract debug symbols and strip binaries using OBJCOPY and STRIP tools. This target links to required libraries and handles platform-specific binary processing for release and debug builds.\nSOURCE: https://github.com/lsposed/lsplant/blob/master/lsplant/src/main/jni/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (LSPLANT_BUILD_SHARED)\n    message(STATUS \"Building lsplant as a shared library\")\n    add_library(${PROJECT_NAME} SHARED ${SOURCES})\n    set_target_properties(${PROJECT_NAME} PROPERTIES CXX_SCAN_FOR_MODULES ON)\n    target_sources(${PROJECT_NAME} PRIVATE FILE_SET ms TYPE CXX_MODULES FILES ${MODULE_SOURCES})\n    target_sources(${PROJECT_NAME} PUBLIC FILE_SET CXX_MODULES FILES ${MODULE_INTERFACES})\n    target_include_directories(${PROJECT_NAME} PUBLIC include)\n    target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})\n    target_compile_options(${PROJECT_NAME} PRIVATE -flto)\n    target_link_options(${PROJECT_NAME} PRIVATE -flto)\n    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E make_directory ${DEBUG_SYMBOLS_PATH}/${ANDROID_ABI}\n            COMMAND ${CMAKE_OBJCOPY} --only-keep-debug $<TARGET_FILE:${PROJECT_NAME}>\n            ${DEBUG_SYMBOLS_PATH}/${ANDROID_ABI}/${PROJECT_NAME}\n            COMMAND ${CMAKE_STRIP} --strip-all $<TARGET_FILE:${PROJECT_NAME}>)\n\n    target_link_libraries(${PROJECT_NAME} PRIVATE dex_builder_static)\n    target_link_libraries(${PROJECT_NAME} PUBLIC log)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Managing Sources and Filtering External Modules with CMake in CMake\nDESCRIPTION: Uses file and list commands to collect all C++ implementation (*.cxx) and interface (*.ixx) sources recursively, excluding those in external directories. Sets up main source lists for subsequent library targets. This section ensures only project-specific sources are compiled and modules from external dependencies are excluded from targets.\nSOURCE: https://github.com/lsposed/lsplant/blob/master/lsplant/src/main/jni/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES lsplant.cc)\nfile(GLOB_RECURSE MODULE_SOURCES CONFIGURE_DEPENDS \"*.cxx\")\nfile(GLOB_RECURSE MODULE_INTERFACES CONFIGURE_DEPENDS \"*.ixx\")\nlist(FILTER MODULE_SOURCES EXCLUDE REGEX \"${PROJECT_SOURCE_DIR}.external.+\")\nlist(FILTER MODULE_INTERFACES EXCLUDE REGEX \"${PROJECT_SOURCE_DIR}.external.+\")\n```\n\n----------------------------------------\n\nTITLE: Adding External Dependencies and Build Options with CMake in CMake\nDESCRIPTION: Adds the dex_builder project as a subdirectory and configures a build option (LSPLANT_BUILD_SHARED) to control whether to build the shared library. Also sets the DEX_BUILDER_BUILD_SHARED cache variable to OFF for static linkage. These commands enable integration with external static libraries and conditional compilation based on user configuration.\nSOURCE: https://github.com/lsposed/lsplant/blob/master/lsplant/src/main/jni/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(DEX_BUILDER_BUILD_SHARED OFF CACHE INTERNAL \"\" FORCE)\nadd_subdirectory(external/dex_builder)\n\noption(LSPLANT_BUILD_SHARED \"If ON, lsplant will also build shared library\" ON)\n```\n\n----------------------------------------\n\nTITLE: Initializing LSPlant in JNI_OnLoad\nDESCRIPTION: This function initializes LSPlant by prefetching needed symbols and hooking required functions. It requires a JNI environment and initialization information that provides the inline hooker and symbol resolver.\nSOURCE: https://github.com/lsposed/lsplant/blob/master/README.md#_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nbool Init(JNIEnv *env,\n          const InitInfo &info);\n```\n\n----------------------------------------\n\nTITLE: Building Static Library Target with CMake in CMake\nDESCRIPTION: Always builds a static library target with module sources and interfaces, exposing public and private includes and linking with required libraries (dex_builder_static and log). Also sets module scanning and prepares include/module directories for consumers. This section ensures the static library build path is always present, supporting modular builds and static linking.\nSOURCE: https://github.com/lsposed/lsplant/blob/master/lsplant/src/main/jni/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(${PROJECT_NAME}_static STATIC ${SOURCES})\nset_target_properties(${PROJECT_NAME}_static PROPERTIES CXX_SCAN_FOR_MODULES ON)\ntarget_sources(${PROJECT_NAME}_static PRIVATE FILE_SET ms TYPE CXX_MODULES FILES ${MODULE_SOURCES})\ntarget_sources(${PROJECT_NAME}_static PUBLIC FILE_SET CXX_MODULES FILES ${MODULE_INTERFACES})\ntarget_include_directories(${PROJECT_NAME}_static PUBLIC include)\ntarget_include_directories(${PROJECT_NAME}_static PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Project Name\nDESCRIPTION: Specifies the minimum required version of CMake (3.18.1) and defines the project name as 'lsplant_test'. This establishes the build system parameters and the project identity.\nSOURCE: https://github.com/lsposed/lsplant/blob/master/test/src/main/jni/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.18.1)\nproject(\"lsplant_test\")\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Standard and Adding External Subdirectory\nDESCRIPTION: Sets the C++ standard to C++23 for the build and includes an external subdirectory 'external/lsparself', which likely contains additional source code or modules necessary for the project.\nSOURCE: https://github.com/lsposed/lsplant/blob/master/test/src/main/jni/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 23)\n\nadd_subdirectory(external/lsparself)\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Symbols Path and Linking Libraries for Static Target with CMake in CMake\nDESCRIPTION: Ensures DEBUG_SYMBOLS_PATH is set (defaults to build/symbols directory if undefined) and links the static target with both private (dex_builder_static) and public (log) libraries. This step finalizes build environment variables and ensures necessary external/static dependencies are included for final linkage.\nSOURCE: https://github.com/lsposed/lsplant/blob/master/lsplant/src/main/jni/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT DEFINED DEBUG_SYMBOLS_PATH)\n    set(DEBUG_SYMBOLS_PATH ${CMAKE_BINARY_DIR}/symbols)\nendif()\n\ntarget_link_libraries(${PROJECT_NAME}_static PRIVATE dex_builder_static)\ntarget_link_libraries(${PROJECT_NAME}_static PUBLIC log)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for 'lsplant::lsplant'\nDESCRIPTION: Configures properties such as standard conformance and include directories for the 'lsplant::lsplant' imported target, specifying support for C++23 modules and their respective include paths.\nSOURCE: https://github.com/lsposed/lsplant/blob/master/test/src/main/jni/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(lsplant::lsplant PROPERTIES IMPORTED_CXX_MODULES_COMPILE_FEATURES \"cxx_std_23\")\nset_target_properties(lsplant::lsplant PROPERTIES IMPORTED_CXX_MODULES_INCLUDE_DIRECTORIES \"${lsplant_INCLUDE}\")\n```\n\n----------------------------------------\n\nTITLE: Finding and Configuring Dependencies d OBY and lsplant\nDESCRIPTION: Locates required packages 'dobby' and 'lsplant' with their configurations. Retrieves the interface include directories for 'lsplant' and gathers Recursive module source files with '.ixx' extension to be included in the build process.\nSOURCE: https://github.com/lsposed/lsplant/blob/master/test/src/main/jni/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(dobby REQUIRED CONFIG)\nfind_package(lsplant REQUIRED CONFIG)\n\nget_property(lsplant_INCLUDE TARGET lsplant::lsplant PROPERTY INTERFACE_INCLUDE_DIRECTORIES)\nfile(GLOB_RECURSE lsplant_MODULES \"${lsplant_INCLUDE}/*.ixx\")\ntarget_sources(lsplant::lsplant INTERFACE FILE_SET CXX_MODULES BASE_DIRS ${lsplant_INCLUDE} FILES ${lsplant_MODULES})\n```\n\n----------------------------------------\n\nTITLE: Using LSPlant Standalone Version in Gradle\nDESCRIPTION: This snippet shows how to use the standalone version of LSPlant that doesn't include libc++_shared.so in the APK.\nSOURCE: https://github.com/lsposed/lsplant/blob/master/README.md#_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n    implementation \"org.lsposed.lsplant:lsplant-standalone:+\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deoptimizing a Method to Avoid Inlining\nDESCRIPTION: Function to deoptimize a method to ensure hooked callees are not bypassed due to inlining. This forces the method to call all callees without inlining them.\nSOURCE: https://github.com/lsposed/lsplant/blob/master/README.md#_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\nbool Deoptimize(JNIEnv *env,\n                jobject method);\n```\n\n----------------------------------------\n\nTITLE: Unhooking a Previously Hooked Method\nDESCRIPTION: Function to unhook a Java method that was previously hooked by LSPlant. Takes a JNI environment and the target method object to unhook.\nSOURCE: https://github.com/lsposed/lsplant/blob/master/README.md#_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nbool UnHook(JNIEnv *env,\n            jobject target_method);\n```\n\n----------------------------------------\n\nTITLE: Checking if a Method is Hooked\nDESCRIPTION: Function to check if a Java method is currently hooked by LSPlant. Takes a JNI environment and the method object to check.\nSOURCE: https://github.com/lsposed/lsplant/blob/master/README.md#_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nbool IsHooked(JNIEnv *env,\n              jobject method);\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Library Target 'test'\nDESCRIPTION: Defines a shared library target named 'test' from 'test.cpp'. Sets properties to enable C++ module scanning and prepares the target for linking with other dependencies. This target likely serves as an executable or component for the project.\nSOURCE: https://github.com/lsposed/lsplant/blob/master/test/src/main/jni/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(test SHARED test.cpp)\nset_target_properties(test PROPERTIES CXX_SCAN_FOR_MODULES ON)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to 'test' Target\nDESCRIPTION: Links the 'test' shared library target with dependencies: 'log', 'dobby::dobby', 'lsplant::lsplant', and 'lsparself'. This setup ensures that all required external libraries are connected for correct linkage and functionality.\nSOURCE: https://github.com/lsposed/lsplant/blob/master/test/src/main/jni/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(test log dobby::dobby lsplant::lsplant lsparself)\n```"
  }
]