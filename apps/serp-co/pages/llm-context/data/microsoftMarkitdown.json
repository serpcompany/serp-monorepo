[
  {
    "owner": "microsoft",
    "repo": "markitdown",
    "content": "TITLE: Implementing RTF Document Converter in Python\nDESCRIPTION: Example implementation of a custom DocumentConverter class for handling RTF files. Shows the basic structure and required methods that need to be implemented including accepts() for file validation and convert() for document transformation.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown-sample-plugin/README.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import BinaryIO, Any\nfrom markitdown import MarkItDown, DocumentConverter, DocumentConverterResult, StreamInfo\n\nclass RtfConverter(DocumentConverter):\n\n    def __init__(\n        self, priority: float = DocumentConverter.PRIORITY_SPECIFIC_FILE_FORMAT\n    ):\n        super().__init__(priority=priority)\n\n    def accepts(\n        self,\n        file_stream: BinaryIO,\n        stream_info: StreamInfo,\n        **kwargs: Any,\n    ) -> bool:\n\t\n\t# Implement logic to check if the file stream is an RTF file\n\t# ...\n\traise NotImplementedError()\n\n\n    def convert(\n        self,\n        file_stream: BinaryIO,\n        stream_info: StreamInfo,\n        **kwargs: Any,\n    ) -> DocumentConverterResult:\n\n\t# Implement logic to convert the file stream to Markdown\n\t# ...\n\traise NotImplementedError()\n```\n\n----------------------------------------\n\nTITLE: Using MarkItDown's Python API to convert an Excel file to Markdown\nDESCRIPTION: This Python code snippet shows how to use MarkItDown's API to convert an Excel file to Markdown. It imports the MarkItDown class, creates an instance, converts a file, and prints the resulting text content.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown/README.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom markitdown import MarkItDown\n\nmd = MarkItDown()\nresult = md.convert(\"test.xlsx\")\nprint(result.text_content)\n```\n\n----------------------------------------\n\nTITLE: Using MarkItDown with LLM for image descriptions\nDESCRIPTION: Python code snippet demonstrating how to use MarkItDown with a Large Language Model for generating image descriptions.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/README.md#2025-04-07_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom markitdown import MarkItDown\nfrom openai import OpenAI\n\nclient = OpenAI()\nmd = MarkItDown(llm_client=client, llm_model=\"gpt-4o\")\nresult = md.convert(\"example.jpg\")\nprint(result.text_content)\n```\n\n----------------------------------------\n\nTITLE: Using MarkItDown with Azure Document Intelligence in Python\nDESCRIPTION: Python code snippet showing how to use MarkItDown with Azure Document Intelligence for PDF conversion.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/README.md#2025-04-07_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom markitdown import MarkItDown\n\nmd = MarkItDown(docintel_endpoint=\"<document_intelligence_endpoint>\")\nresult = md.convert(\"test.pdf\")\nprint(result.text_content)\n```\n\n----------------------------------------\n\nTITLE: Using Plugin in Python Code\nDESCRIPTION: Example of how to enable and use plugins programmatically in Python code when working with MarkItDown.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown-sample-plugin/README.md#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom markitdown import MarkItDown\n\nmd = MarkItDown(enable_plugins=True) \nresult = md.convert(\"path-to-file.rtf\")\nprint(result.text_content)\n```\n\n----------------------------------------\n\nTITLE: Basic Python usage of MarkItDown\nDESCRIPTION: Python code snippet demonstrating basic usage of MarkItDown to convert an Excel file to Markdown.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/README.md#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom markitdown import MarkItDown\n\nmd = MarkItDown(enable_plugins=False) # Set to True to enable plugins\nresult = md.convert(\"test.xlsx\")\nprint(result.text_content)\n```\n\n----------------------------------------\n\nTITLE: Registering MarkItDown Plugin Converters\nDESCRIPTION: Plugin registration implementation showing how to define the plugin interface version and register custom converters with MarkItDown instances.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown-sample-plugin/README.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n__plugin_interface_version__ = 1 \n\ndef register_converters(markitdown: MarkItDown, **kwargs):\n    \"\"\"\n    Called during construction of MarkItDown instances to register converters provided by plugins.\n    \"\"\"\n\n    # Simply create and attach an RtfConverter instance\n    markitdown.register_converter(RtfConverter())\n```\n\n----------------------------------------\n\nTITLE: Using MarkItDown via command-line to convert a PDF to Markdown\nDESCRIPTION: This command demonstrates how to use MarkItDown from the command-line to convert a PDF file to Markdown and output the result to a file named document.md.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown/README.md#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmarkitdown path-to-file.pdf > document.md\n```\n\n----------------------------------------\n\nTITLE: Using MarkItDown CLI to convert a file\nDESCRIPTION: Command-line usage of MarkItDown to convert a PDF file to Markdown and output to console.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/README.md#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmarkitdown path-to-file.pdf > document.md\n```\n\n----------------------------------------\n\nTITLE: Using MarkItDown CLI with output file\nDESCRIPTION: Command-line usage of MarkItDown to convert a PDF file to Markdown and specify an output file.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/README.md#2025-04-07_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmarkitdown path-to-file.pdf -o document.md\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Entry Points in TOML\nDESCRIPTION: Package configuration in pyproject.toml to define the plugin entry point for MarkItDown.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown-sample-plugin/README.md#2025-04-07_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[project.entry-points.\"markitdown.plugin\"]\nsample_plugin = \"markitdown_sample_plugin\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop for MarkItDown-MCP\nDESCRIPTION: JSON configuration to add to Claude Desktop's config file to enable the markitdown-mcp server. This configuration runs the server in a Docker container.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown-mcp/README.md#2025-04-07_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"markitdown\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"markitdown-mcp:latest\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop with volume mount\nDESCRIPTION: JSON configuration for Claude Desktop that includes a volume mount to access local files in the Docker container.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown-mcp/README.md#2025-04-07_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"markitdown\": {\n      \"command\": \"docker\",\n      \"args\": [\n\t\"run\",\n\t\"--rm\",\n\t\"-i\",\n\t\"-v\",\n\t\"/home/user/data:/workdir\",\n\t\"markitdown-mcp:latest\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and running MarkItDown Docker container\nDESCRIPTION: Commands to build a Docker image for MarkItDown and run it to convert a PDF file to Markdown.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/README.md#2025-04-07_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t markitdown:latest .\ndocker run --rm -i markitdown:latest < ~/your-file.pdf > output.md\n```\n\n----------------------------------------\n\nTITLE: Using MarkItDown with Azure Document Intelligence\nDESCRIPTION: Command to use MarkItDown with Azure Document Intelligence for file conversion, specifying the endpoint.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/README.md#2025-04-07_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmarkitdown path-to-file.pdf -o document.md -d -e \"<document_intelligence_endpoint>\"\n```\n\n----------------------------------------\n\nTITLE: Using MarkItDown with plugins enabled\nDESCRIPTION: Command to use MarkItDown with plugins enabled for file conversion.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/README.md#2025-04-07_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmarkitdown --use-plugins path-to-file.pdf\n```\n\n----------------------------------------\n\nTITLE: Running MarkItDown-MCP in Docker with volume mount\nDESCRIPTION: Command to run markitdown-mcp in Docker with a volume mount to access local files. This example mounts /home/user/data to /workdir in the container.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown-mcp/README.md#2025-04-07_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -v /home/user/data:/workdir markitdown-mcp:latest\n```\n\n----------------------------------------\n\nTITLE: Running MarkItDown-MCP in Docker\nDESCRIPTION: Command to run markitdown-mcp in a Docker container. This is sufficient for remote URIs but doesn't allow access to local files.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown-mcp/README.md#2025-04-07_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm markitdown-mcp:latest\n```\n\n----------------------------------------\n\nTITLE: Running MarkItDown-MCP server with SSE\nDESCRIPTION: Command to run the markitdown-mcp server using Server-Sent Events (SSE) interface with custom host and port settings.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown-mcp/README.md#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmarkitdown-mcp --sse --host 127.0.0.1 --port 3001\n```\n\n----------------------------------------\n\nTITLE: Running MarkItDown-MCP server with STDIO\nDESCRIPTION: Command to run the markitdown-mcp server using STDIO (default) interface.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown-mcp/README.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmarkitdown-mcp\n```\n\n----------------------------------------\n\nTITLE: Piping content to MarkItDown CLI\nDESCRIPTION: Example of piping content to MarkItDown for conversion using the command line.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/README.md#2025-04-07_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncat path-to-file.pdf | markitdown\n```\n\n----------------------------------------\n\nTITLE: Converting Files Using Plugin\nDESCRIPTION: Command line example showing how to use the plugin for file conversion.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown-sample-plugin/README.md#2025-04-07_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmarkitdown --use-plugins path-to-file.rtf\n```\n\n----------------------------------------\n\nTITLE: Installing MarkItDown from source\nDESCRIPTION: These commands clone the MarkItDown repository from GitHub, navigate to the project directory, and install the package in editable mode with all optional dependencies.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown/README.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:microsoft/markitdown.git\ncd markitdown\npip install -e packages/markitdown[all]\n```\n\n----------------------------------------\n\nTITLE: Installing MarkItDown from source\nDESCRIPTION: Commands to clone the MarkItDown repository and install it from source with all optional dependencies.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/README.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:microsoft/markitdown.git\ncd markitdown\npip install -e packages/markitdown[all]\n```\n\n----------------------------------------\n\nTITLE: Installing MarkItDown from PyPI using pip\nDESCRIPTION: This command installs MarkItDown with all optional dependencies from the Python Package Index (PyPI) using pip.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install markitdown[all]\n```\n\n----------------------------------------\n\nTITLE: Installing MarkItDown using pip\nDESCRIPTION: Command to install MarkItDown with all optional dependencies using pip.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install 'markitdown[all]'\n```\n\n----------------------------------------\n\nTITLE: Installing MarkItDown-MCP using pip\nDESCRIPTION: Command to install the markitdown-mcp package using pip package manager.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown-mcp/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install markitdown-mcp\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin for Development\nDESCRIPTION: Command to install the plugin package in development mode using pip.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown-sample-plugin/README.md#2025-04-07_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Listing installed MarkItDown plugins\nDESCRIPTION: Command to list installed MarkItDown plugins using the CLI.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/README.md#2025-04-07_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmarkitdown --list-plugins\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Plugins\nDESCRIPTION: Command to verify plugin installation by listing all available MarkItDown plugins.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown-sample-plugin/README.md#2025-04-07_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmarkitdown --list-plugins\n```\n\n----------------------------------------\n\nTITLE: Building Docker image for MarkItDown-MCP\nDESCRIPTION: Command to build a Docker image for markitdown-mcp using the provided Dockerfile.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown-mcp/README.md#2025-04-07_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t markitdown-mcp:latest .\n```\n\n----------------------------------------\n\nTITLE: Running MCPInspector for debugging\nDESCRIPTION: Command to run the mcpinspector tool for debugging the MarkItDown-MCP server connections and operations.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown-mcp/README.md#2025-04-07_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx @modelcontextprotocol/inspector\n```\n\n----------------------------------------\n\nTITLE: Installing MarkItDown with specific optional dependencies\nDESCRIPTION: Command to install MarkItDown with specific optional dependencies for PDF, DOCX, and PPTX file support.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/README.md#2025-04-07_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install markitdown[pdf, docx, pptx]\n```\n\n----------------------------------------\n\nTITLE: Printing Numeric Value with Comment in Python\nDESCRIPTION: A Python code snippet that prints the number 42. Includes a comment line above the print statement to demonstrate comment syntax in the code cell.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown/tests/test_files/test_notebook.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# comment in code\nprint(42)\n```\n\n----------------------------------------\n\nTITLE: Printing MarkItDown String in Python\nDESCRIPTION: A simple Python snippet that prints the string 'markitdown'. This appears to be a basic test or demonstration of Python code execution.\nSOURCE: https://github.com/microsoft/markitdown/blob/main/packages/markitdown/tests/test_files/test_notebook.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint(\"markitdown\")\n```"
  }
]