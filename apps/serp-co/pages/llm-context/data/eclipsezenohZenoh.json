[
  {
    "owner": "eclipse-zenoh",
    "repo": "zenoh",
    "content": "TITLE: Running Zenoh Rust Example with TCP\nDESCRIPTION: This snippet shows how to run Zenoh Rust examples against a Zenoh router running in a Docker container. It includes the `-e tcp/localhost:7447` option to specify the TCP transport, as Docker doesn't support UDP multicast.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./target/release/example/<example_name> -e tcp/localhost:7447\n```\n\n----------------------------------------\n\nTITLE: Running z_queryable Example\nDESCRIPTION: This snippet shows the typical usage for running the `z_queryable` example, which declares a queryable function with a path.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nz_queryable\n```\n\nLANGUAGE: bash\nCODE:\n```\nz_queryable -k demo/example/queryable -v 'This is the result'\n```\n\n----------------------------------------\n\nTITLE: Checking Storage Creation via REST API using curl\nDESCRIPTION: This command checks if a storage has been successfully created in the Zenoh router via the REST API using `curl`. It sends a GET request to `http://localhost:8000/@/local/router/**/storages/*` and pipes the output to `jq` for pretty JSON formatting. Requires the Zenoh router to be running with the admin space and REST API enabled.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenohd/README.md#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncurl -s 'http://localhost:8000/@/local/router/**/storages/*' | jq\n```\n\n----------------------------------------\n\nTITLE: Running z_ping Example\nDESCRIPTION: This snippet shows the typical usage for running the `z_ping` example for Pub/Sub roundtrip time testing.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nz_ping 1024\n```\n\n----------------------------------------\n\nTITLE: Running Zenoh Router with Admin Space and REST API\nDESCRIPTION: This command starts the Zenoh router (`zenohd`) with the REST API enabled, admin space permissions set to read-write (`rw`), and a memory storage plugin. The REST API listens on port 8000.  The admin space allows for runtime configuration changes via the REST API.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenohd/README.md#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n./target/release/zenohd --rest-http-port=8000 --adminspace-permissions=rw --cfg='plugins/storage_manager/storages/demo:{key_expr:\"demo/example/**\",volume:\"memory\"}'\n```\n\n----------------------------------------\n\nTITLE: Getting Router Volumes via REST API using curl\nDESCRIPTION: This command retrieves the volumes configured in the Zenoh router via the REST API using `curl`.  It sends a GET request to `http://localhost:8000/@/local/router/**/volumes/*` and pipes the output to `jq` for pretty JSON formatting. Requires the Zenoh router to be running with the admin space and REST API enabled.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenohd/README.md#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncurl -s 'http://localhost:8000/@/local/router/**/volumes/*' | jq\n```\n\n----------------------------------------\n\nTITLE: Getting Router Storages via REST API using curl\nDESCRIPTION: This command retrieves the storages configured in the Zenoh router via the REST API using `curl`. It sends a GET request to `http://localhost:8000/@/local/router/**/storages/*` and pipes the output to `jq` for pretty JSON formatting. Requires the Zenoh router to be running with the admin space and REST API enabled.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenohd/README.md#_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncurl -s 'http://localhost:8000/@/local/router/**/storages/*' | jq\n```\n\n----------------------------------------\n\nTITLE: Getting Router Info via REST API using curl\nDESCRIPTION: This command retrieves information about the Zenoh router via the REST API using `curl`. It sends a GET request to `http://localhost:8000/@/local/router` and pipes the output to `jq` for pretty JSON formatting. Requires the Zenoh router to be running with the admin space and REST API enabled.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenohd/README.md#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncurl -s http://localhost:8000/@/local/router | jq\n```\n\n----------------------------------------\n\nTITLE: Adding Storage via REST API using curl\nDESCRIPTION: This command adds a new memory storage to the Zenoh router via the REST API using `curl`. It sends a PUT request with the storage configuration to `http://localhost:8000/@/local/router/config/plugins/storage_manager/storages/mystore`. Requires the Zenoh router to be running with the admin space and REST API enabled.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenohd/README.md#_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X PUT -H 'content-type:application/json' -d '{\"key_expr\":\"demo/mystore/**\",\"volume\":\"memory\"}' http://localhost:8000/@/local/router/config/plugins/storage_manager/storages/mystore\n```\n\n----------------------------------------\n\nTITLE: Running Zenoh Router with Memory Storage\nDESCRIPTION: This command starts the Zenoh router (`zenohd`) with a memory storage plugin configured.  The `cfg` option specifies the storage manager plugin with a storage named 'demo' that stores data under the key expression 'demo/example/**' in memory. This configuration is given through the command line.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenohd/README.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n./target/release/zenohd --cfg='plugins/storage_manager/storages/demo:{key_expr:\"demo/example/**\",volume:\"memory\"}'\n```\n\n----------------------------------------\n\nTITLE: Publishing Data via REST API using curl\nDESCRIPTION: Publishes a string \"Hello World!\" to the `demo/example/test` key expression via the Zenoh REST API. This snippet uses `curl` with the PUT method and `-d` flag to send the data.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X PUT -d '\"Hello World!\"' http://localhost:8000/demo/example/test\n```\n\n----------------------------------------\n\nTITLE: Adding Zenoh Debian Repository\nDESCRIPTION: Adds the Eclipse Zenoh private repository to the system's sources list and installs the `zenoh` package using `apt`. This snippet ensures the repository is trusted and updates the package list before installing Zenoh.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"deb [trusted=yes] https://download.eclipse.org/zenoh/debian-repo/ /\" | sudo tee -a /etc/apt/sources.list.d/zenoh.list > /dev/null\nsudo apt update\nsudo apt install zenoh\n```\n\n----------------------------------------\n\nTITLE: Running Zenoh Router with Memory Storage\nDESCRIPTION: Starts the Zenoh router with a memory storage plugin configured for the `demo/example/**` key expression. This allows for quick testing of Zenoh's store/query functionality. The configuration is passed via the `--cfg` argument.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./target/release/zenohd --cfg='plugins/storage_manager/storages/demo:{key_expr:\"demo/example/**\",volume:\"memory\"}'\n```\n\n----------------------------------------\n\nTITLE: Adding Storage via REST API\nDESCRIPTION: Adds a new memory storage to the Zenoh router configuration via the REST API, using a PUT request to the `/local/router/config/plugins/storage_manager/storages/mystore` endpoint.  The `key_expr` is set to `/demo/mystore/**`.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/README.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X PUT -H 'content-type:application/json' -d '{\"key_expr\":\"demo/mystore/**\",\"volume\":\"memory\"}' http://localhost:8000/@/local/router/config/plugins/storage_manager/storages/mystore\n```\n\n----------------------------------------\n\nTITLE: Getting Router Volumes via REST API\nDESCRIPTION: Retrieves information about the volumes configured in the Zenoh router using the REST API, querying the `/local/router/**/volumes/*` endpoint in the admin space. `jq` is used for formatting the JSON output.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/README.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl -s 'http://localhost:8000/@/local/router/**/volumes/*' | jq\n```\n\n----------------------------------------\n\nTITLE: Adding Zenoh Debian repository\nDESCRIPTION: This snippet adds the Eclipse Zenoh private repository to the sources list for Debian-based systems and installs the `zenoh` package. It uses `apt` to update the package list and install the zenoh package.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenohd/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"deb [trusted=yes] https://download.eclipse.org/zenoh/debian-repo/ /\" | sudo tee -a /etc/apt/sources.list.d/zenoh.list > /dev/null\nsudo apt update\nsudo apt install zenoh\n```\n\n----------------------------------------\n\nTITLE: Getting Router Information via REST API\nDESCRIPTION: Retrieves information about the Zenoh router using the REST API. It accesses the `/local/router` endpoint within the Zenoh admin space. `jq` is used to format the JSON output for readability.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/README.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl -s http://localhost:8000/@/local/router | jq\n```\n\n----------------------------------------\n\nTITLE: Publishing Data via REST API using curl\nDESCRIPTION: This command publishes data to the Zenoh router via the REST API using `curl`. It sends a PUT request to `http://localhost:8000/demo/example/test` with the data \"Hello World!\".  Requires Zenoh router with REST API plugin and storage enabled.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenohd/README.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X PUT -d '\"Hello World!\"' http://localhost:8000/demo/example/test\n```\n\n----------------------------------------\n\nTITLE: Getting Data via REST API using curl\nDESCRIPTION: This command retrieves data from the Zenoh router via the REST API using `curl`. It sends a GET request to `http://localhost:8000/demo/example/test`. Requires Zenoh router with REST API plugin and storage enabled and previously published data.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenohd/README.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:8000/demo/example/test\n```\n\n----------------------------------------\n\nTITLE: Updating Rust Toolchain\nDESCRIPTION: Updates the Rust toolchain to the latest version. This command ensures that the user has the most recent version of Rust and Cargo installed, which is recommended before building Zenoh from source.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrustup update\n```\n\n----------------------------------------\n\nTITLE: Running Peer-to-Peer Pub/Sub Test\nDESCRIPTION: These commands run a peer-to-peer pub/sub test using the compiled Zenoh examples.  One shell runs the subscriber (`z_sub`), and another runs the publisher (`z_put`).  The subscriber should receive messages from the publisher.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenohd/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./target/release/examples/z_sub\n```\n\nLANGUAGE: bash\nCODE:\n```\n./target/release/examples/z_put\n```\n\n----------------------------------------\n\nTITLE: Getting Router Storages via REST API\nDESCRIPTION: Retrieves information about the storages configured in the Zenoh router via the REST API, accessing the `/local/router/**/storages/*` endpoint in the admin space. `jq` is used to format the output.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/README.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncurl -s 'http://localhost:8000/@/local/router/**/storages/*' | jq\n```\n\n----------------------------------------\n\nTITLE: Verifying Storage Creation via REST API\nDESCRIPTION: Verifies the creation of a new storage in the Zenoh router by retrieving the storage configuration via the REST API, using the `/local/router/**/storages/*` endpoint. `jq` is used to pretty-print the output.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/README.md#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncurl -s 'http://localhost:8000/@/local/router/**/storages/*' | jq\n```\n\n----------------------------------------\n\nTITLE: Running Zenoh Rust Example\nDESCRIPTION: This snippet demonstrates how to run a Zenoh Rust example after building in release mode.  It shows the execution path and also mentions the -h or --help option for getting argument details.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./target/release/example/<example_name>\n```\n\n----------------------------------------\n\nTITLE: Running Routed Get Example\nDESCRIPTION: This command runs the `z_get` example. It retrieves data from the Zenoh router's storage. This is part of the routed tests and requires the Zenoh router to be running with a storage plugin and data to be previously put.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenohd/README.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n./target/release/examples/z_get\n```\n\n----------------------------------------\n\nTITLE: Installing Zenoh on MacOS with Brew\nDESCRIPTION: This snippet adds the Eclipse Zenoh Homebrew tap and installs the `zenoh` formula on MacOS. It uses `brew tap` to add the repository and `brew install` to install the zenoh package.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenohd/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap eclipse-zenoh/homebrew-zenoh\nbrew install zenoh\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data via REST API using curl\nDESCRIPTION: Retrieves data from the `demo/example/test` key expression via the Zenoh REST API using `curl`.  Assumes that the Zenoh router is running and the data has been previously published.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/README.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:8000/demo/example/test\n```\n\n----------------------------------------\n\nTITLE: Running Peer-to-Peer Get/Queryable Test\nDESCRIPTION: These commands run a peer-to-peer get/queryable test using the compiled Zenoh examples.  One shell runs the queryable (`z_queryable`), and another runs the getter (`z_get`). The queryable responds to the getter's request.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenohd/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./target/release/examples/z_queryable\n```\n\nLANGUAGE: bash\nCODE:\n```\n./target/release/examples/z_get\n```\n\n----------------------------------------\n\nTITLE: Installing Zenoh on MacOS using Homebrew\nDESCRIPTION: Taps the `eclipse-zenoh/homebrew-zenoh` brew package repository and installs the `zenoh` formula. This allows users to easily install Zenoh on MacOS using the Homebrew package manager.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap eclipse-zenoh/homebrew-zenoh\nbrew install zenoh\n```\n\n----------------------------------------\n\nTITLE: Running Zenoh examples with Docker (TCP)\nDESCRIPTION: Demonstrates how to run Zenoh examples when the zenoh router is running in a Docker container.  This is necessary when Docker is used, as it doesn't support UDP multicast for scouting and discovery.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenoh-ext/examples/examples/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nz_advanced_pub -e tcp/localhost:7447\n```\n\nLANGUAGE: Bash\nCODE:\n```\nz_advanced_sub -e tcp/localhost:7447\n```\n\nLANGUAGE: Bash\nCODE:\n```\nz_member -e tcp/localhost:7447\n```\n\nLANGUAGE: Bash\nCODE:\n```\nz_view_size -e tcp/localhost:7447\n```\n\n----------------------------------------\n\nTITLE: Running Routed Put Example\nDESCRIPTION: This command runs the `z_put` example.  It publishes data that will be stored by the Zenoh router. This is part of the routed tests and requires the Zenoh router to be running with a storage plugin.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenohd/README.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n./target/release/examples/z_put\n```\n\n----------------------------------------\n\nTITLE: Running z_pong Example\nDESCRIPTION: This snippet shows the typical usage for running the `z_pong` example for Pub/Sub roundtrip time testing.  z_pong needs to start first to avoid missing the kickoff from z_ping.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nz_pong\n```\n\n----------------------------------------\n\nTITLE: Running z_view_size example\nDESCRIPTION: Shows how to run the z_view_size example.  This example demonstrates group management by joining a group and waiting for the group view to reach a configurable size (default is 3 members).\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenoh-ext/examples/examples/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nz_view_size\n```\n\n----------------------------------------\n\nTITLE: Running z_sub Example\nDESCRIPTION: This snippet shows the typical usage for running the `z_sub` example, which subscribes to a key expression and prints notifications of `put` or `delete` operations.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nz_sub\n```\n\nLANGUAGE: bash\nCODE:\n```\nz_sub -k 'demo/**'\n```\n\n----------------------------------------\n\nTITLE: Running z_advanced_pub example\nDESCRIPTION: Shows how to run the z_advanced_pub example.  This example demonstrates the usage of an AdvancedPublisher with a configurable history size for locally cached publications. The default history size is 1.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenoh-ext/examples/examples/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nz_advanced_pub\n```\n\nLANGUAGE: Bash\nCODE:\n```\nz_advanced_pub --history 10\n```\n\n----------------------------------------\n\nTITLE: Updating Rust toolchain\nDESCRIPTION: This command updates the Rust toolchain to the latest version using `rustup`.  This ensures that you have the most up-to-date tools required for building Zenoh.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenohd/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrustup update\n```\n\n----------------------------------------\n\nTITLE: Building Zenoh with Cargo\nDESCRIPTION: This command builds Zenoh using Cargo, the Rust package manager. It builds all targets in release mode, placing the output binaries in the `target/release/` directory.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenohd/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release --all-targets\n```\n\n----------------------------------------\n\nTITLE: Running z_advanced_sub example\nDESCRIPTION: Shows how to run the z_advanced_sub example.  This example demonstrates the usage of an AdvancedSubscriber that can query for history and request retransmission.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenoh-ext/examples/examples/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nz_advanced_sub\n```\n\n----------------------------------------\n\nTITLE: Building Zenoh with Cargo\nDESCRIPTION: Builds the Zenoh project using Cargo in release mode with all target architectures. This command compiles the Zenoh router and examples.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release --all-targets\n```\n\n----------------------------------------\n\nTITLE: Running z_scout Example\nDESCRIPTION: This snippet shows the typical usage for running the `z_scout` example, which scouts for Zenoh peers and routers available on the network.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nz_scout\n```\n\n----------------------------------------\n\nTITLE: Running z_get_liveliness Example\nDESCRIPTION: This snippet shows the typical usage for running the `z_get_liveliness` example, which queries all the currently alive liveliness tokens.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nz_get_liveliness\n```\n\nLANGUAGE: bash\nCODE:\n```\nz_get_liveliness -k 'group1/**'\n```\n\n----------------------------------------\n\nTITLE: Running z_pull Example\nDESCRIPTION: This snippet shows the typical usage for running the `z_pull` example, which declares a key expression and a pull subscriber.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nz_pull\n```\n\nLANGUAGE: bash\nCODE:\n```\nz_pull -k demo/** --size 3\n```\n\n----------------------------------------\n\nTITLE: Running z_pub Example\nDESCRIPTION: This snippet shows the typical usage for running the `z_pub` example, which publishes values periodically on a declared key expression.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nz_pub\n```\n\nLANGUAGE: bash\nCODE:\n```\nz_pub -k demo/example/test -v 'Hello World'\n```\n\n----------------------------------------\n\nTITLE: Running z_querier Example\nDESCRIPTION: This snippet shows the typical usage for running the `z_querier` example, which continuously sends query messages for a selector.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nz_querier\n```\n\nLANGUAGE: bash\nCODE:\n```\nz_querier -s 'demo/**'\n```\n\n----------------------------------------\n\nTITLE: Running z_member example\nDESCRIPTION: Shows how to run the z_member example.  This example demonstrates group management by joining a group and displaying received group events.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenoh-ext/examples/examples/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nz_member\n```\n\n----------------------------------------\n\nTITLE: Running z_info Example\nDESCRIPTION: This snippet shows the typical usage for running the `z_info` example, which gets information about the Zenoh session.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nz_info\n```\n\n----------------------------------------\n\nTITLE: Running z_get Example\nDESCRIPTION: This snippet shows the typical usage for running the `z_get` example, which sends a query message for a selector.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nz_get\n```\n\nLANGUAGE: bash\nCODE:\n```\nz_get -s 'demo/**'\n```\n\n----------------------------------------\n\nTITLE: Running z_storage Example\nDESCRIPTION: This snippet shows the typical usage for running the `z_storage` example, which implements a trivial in-memory storage.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nz_storage\n```\n\nLANGUAGE: bash\nCODE:\n```\nz_storage -k 'demo/**'\n```\n\n----------------------------------------\n\nTITLE: Running z_put Example\nDESCRIPTION: This snippet shows the typical usage for running the `z_put` example, which puts a path/value into Zenoh.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nz_put\n```\n\nLANGUAGE: bash\nCODE:\n```\nz_put -k demo/example/test -v 'Hello World'\n```\n\n----------------------------------------\n\nTITLE: Running z_pub_shm_thr Example\nDESCRIPTION: This snippet shows the typical usage for running the `z_pub_shm_thr` example as a publisher for shared memory throughput tests.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nz_pub_shm_thr\n```\n\n----------------------------------------\n\nTITLE: Running z_liveliness Example\nDESCRIPTION: This snippet shows the typical usage for running the `z_liveliness` example, which declares a liveliness token.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nz_liveliness\n```\n\nLANGUAGE: bash\nCODE:\n```\nz_liveliness -k 'group1/member1'\n```\n\n----------------------------------------\n\nTITLE: Running z_sub_thr Example for Shared Memory\nDESCRIPTION: This snippet shows the typical usage for running the `z_sub_thr` example as a subscriber for shared memory throughput tests.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nz_sub_thr\n```\n\n----------------------------------------\n\nTITLE: Running z_pub_thr Example\nDESCRIPTION: This snippet shows the typical usage for running the `z_pub_thr` example for Pub/Sub throughput testing as a publisher.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nz_pub_thr 1024\n```\n\n----------------------------------------\n\nTITLE: Running z_sub_thr Example\nDESCRIPTION: This snippet shows the typical usage for running the `z_sub_thr` example for Pub/Sub throughput testing as a subscriber.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nz_sub_thr\n```\n\n----------------------------------------\n\nTITLE: Running Zenoh examples in release mode\nDESCRIPTION: Shows how to execute a compiled Zenoh Rust example in release mode.  It assumes that zenoh has been built in release mode.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/zenoh-ext/examples/examples/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n./target/release/example/<example_name>\n```\n\n----------------------------------------\n\nTITLE: Running z_sub Example for Shared Memory\nDESCRIPTION: This snippet shows the typical usage for running the `z_sub` example as the subscriber for the shared memory example.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nz_sub\n```\n\n----------------------------------------\n\nTITLE: Running z_pub_shm Example\nDESCRIPTION: This snippet shows the typical usage for running the `z_pub_shm` example for shared memory.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nz_pub_shm\n```\n\n----------------------------------------\n\nTITLE: Running z_sub_liveliness Example\nDESCRIPTION: This snippet shows the typical usage for running the `z_sub_liveliness` example, which subscribes to all liveliness changes.\nSOURCE: https://github.com/eclipse-zenoh/zenoh/blob/main/examples/README.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nz_sub_liveliness\n```\n\nLANGUAGE: bash\nCODE:\n```\nz_sub_liveliness -k 'group1/**'\n```"
  }
]