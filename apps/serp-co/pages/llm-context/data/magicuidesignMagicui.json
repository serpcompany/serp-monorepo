[
  {
    "owner": "magicuidesign",
    "repo": "magicui",
    "content": "TITLE: Creating a Button Component in React with TypeScript\nDESCRIPTION: This code defines a simple Button component using React and TypeScript. It includes an interface for the component's props (ButtonProps), which specifies the types for children (ReactNode) and onClick (a function).  The component renders a button element that triggers the onClick function when clicked.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/create-react-component-library.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nexport interface ButtonProps {\nchildren: React.ReactNode;\nonClick: () => void;\n}\nexport const Button = ({ children, onClick }: ButtonProps) => {\nreturn <button onClick={onClick}>{children}</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Terminal Usage Example - TSX\nDESCRIPTION: This example demonstrates the basic usage of the `Terminal`, `TypingAnimation`, and `AnimatedSpan` components to simulate a terminal with typing animations. It showcases how to nest these components to achieve the desired animation effect. The `Terminal` component acts as the container, `TypingAnimation` controls the typing effect, and `AnimatedSpan` provides additional animation capabilities.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/terminal.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Terminal>\n  <TypingAnimation>\n    <AnimatedSpan>Hello, world!</AnimatedSpan>\n    <TypingAnimation>MagicUI is awesome!</TypingAnimation>\n  </TypingAnimation>\n</Terminal>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Content Paths\nDESCRIPTION: This configuration specifies the files that Tailwind CSS should scan for utility classes to include in the final CSS output.  It tells Tailwind to look for classes in all JavaScript, JSX, TypeScript, and TSX files within the `src` directory.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/install-tailwind-react.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Using the Dock component\nDESCRIPTION: This example shows how to use the `Dock` and `DockIcon` components to create a dock with icons. The icons are wrapped inside the `DockIcon` component and then placed inside the `Dock` component. The icons used here are from the `lucide-react` library.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/dock.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Dock>\n  <DockIcon>\n    <Home />\n    <Settings />\n    <Search />\n  </DockIcon>\n</Dock>\n```\n\n----------------------------------------\n\nTITLE: Configuring tailwind.config.js\nDESCRIPTION: This JavaScript snippet configures Tailwind CSS. It defines content sources, theme extensions (colors, borderRadius, fontFamily, keyframes, animation), and plugins (tailwindcss-animate). This configuration sets up the basic styling for MagicUI components.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/manual.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { fontFamily } = require(\"tailwindcss/defaultTheme\");\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\"app/**/*.{ts,tsx}\", \"components/**/*.{ts,tsx}\"],\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: `var(--radius)`,\n        md: `calc(var(--radius) - 2px)`,\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", ...fontFamily.sans],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n};\n```\n\n----------------------------------------\n\nTITLE: Import and Render MagicUI Components in React\nDESCRIPTION: This code snippet demonstrates how to import `FadeIn` and `Typewriter` components from the `magicui` library and render them within a React component.  The `FadeIn` component displays \"Welcome to my website!\" with a fade-in effect, while the `Typewriter` component animates the text \"This is a typing effect.\" with a typing effect. Requires React and the `magicui` library.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/text-animation-css.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { FadeIn, Typewriter } from \"magicui\";\n\nfunction MyComponent() {\n  return (\n    <div>\n      <FadeIn>Welcome to my website!</FadeIn>\n      <Typewriter text=\"This is a typing effect.\" />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tailwind Configuration Files\nDESCRIPTION: This command initializes the Tailwind CSS configuration files (`tailwind.config.js` and `postcss.config.js`) in the project root. These files allow you to customize Tailwind CSS to suit your project's specific needs, such as defining custom colors, fonts, and breakpoints.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/install-tailwind-react.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpx tailwindcss init -p\n```\n\n----------------------------------------\n\nTITLE: Using Bento Grid Component (TSX)\nDESCRIPTION: This example shows the basic usage of the `BentoGrid` component, which wraps `BentoCard` components.  It provides a simple layout structure for displaying content in a bento-box style.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/bento-grid.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<BentoGrid>\n  <BentoCard />\n</BentoGrid>\n```\n\n----------------------------------------\n\nTITLE: Implementing High Order Component (HOC) in React\nDESCRIPTION: This code snippet defines a Higher-Order Component (HOC) in React. It takes a DecoratedComponent as input and returns a new component (HOC) that renders the DecoratedComponent. This pattern is used to add additional functionality to existing components without modifying their original code. The decorated component is rendered as is.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-design-patterns.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { Component } from \"react\";\nconst HigherOrderComponent = (DecoratedComponent) => {\n  class HOC extends Component {\n    render() {\n      return <DecoratedComponent />;\n    }\n  }\n  return HOC;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic MUI Card Component\nDESCRIPTION: This code snippet demonstrates the creation of a basic Material UI card component using React and Material UI. It imports necessary components from '@mui/material' and defines a functional component 'BasicCard' that renders a Card with a CardContent and CardActions.  The CardContent includes Typography components for displaying the title and content of the card.  The CardActions contains a Button for user interaction.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-card.mdx#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nimport {\n  Card,\n  CardActions,\n  CardContent,\n  Button,\n  Typography,\n} from \"@mui/material\";\nimport \"./styles.css\";\n\nconst BasicCard = () => {\n  return (\n    <Card sx={{ maxWidth: 400 }}>\n      <CardContent>\n        <Typography\n          sx={{ fontSize: 24, mb: 2, textAlign: \"center\" }}\n          variant=\"h2\"\n          color=\"text.secondary\"\n          gutterBottom\n        >\n          Insightful Design Tip\n        </Typography>\n        <Typography\n          sx={{ fontSize: 18, mb: 1.5 }}\n          variant=\"h5\"\n          color=\"text.secondary\"\n        >\n          \"MagicUI is a free and open-source UI library that we designed\n          specifically for design engineers.\"\n        </Typography>\n        <Typography sx={{ mb: 1 }} variant=\"body2\">\n          \"Best UI Library\" by MagicUI.\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\">Read More</Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Basic card</h1>\n      <BasicCard />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: React Hooks Component Structure\nDESCRIPTION: This code shows a basic structure for a React component utilizing hooks. It imports React and a custom hook component, `MyHooksComponent`, and renders them within a `div`. This demonstrates how to incorporate custom hooks into a React application.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-design-patterns.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport MyHooksComponent from \"./MyHooksComponent\";\nconst App = () => {\n  return (\n    <div>\n      <h1>React Hooks Example</h1>\n      <MyHooksComponent />\n    </div>\n  );\n};\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Extending Tailwind CSS Font Sizes Configuration\nDESCRIPTION: This JavaScript code snippet demonstrates how to extend the default Tailwind CSS configuration to add custom font sizes. It modifies the `tailwind.config.js` file, adding `xxs` and `xxl` font sizes using the `extend.fontSize` property. This allows developers to use these custom sizes in their components.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-font-size.mdx#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  theme: {\n    extend: {\n      fontSize: {\n        xxs: \"0.625rem\",\n        xxl: \"1.75rem\",\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Column-Based Grid Component with Gap in React/Tailwind\nDESCRIPTION: This TypeScript snippet creates a column-based grid with gaps between the card elements using Tailwind CSS in a React component. It utilizes the `grid`, `grid-col-3`, and `gap-4` classes to create a grid layout with three columns and spacing of 4 units between the card items.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-css-grid.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { FC } from \"react\";\nimport Card from \"./Card\";\nconst CardGallery: FC<any> = () => {\n  return (\n    <div className=\"grid grid-col-3 gap-4\">\n      <Card />\n      <Card />\n      <Card />\n      <Card />\n    </div>\n  );\n};\nexport default CardGallery;\n```\n\n----------------------------------------\n\nTITLE: Column-Based Grid Component in React with Tailwind CSS\nDESCRIPTION: This TypeScript snippet demonstrates how to create a column-based grid layout in React using Tailwind CSS. It imports the Card component and renders it multiple times within a parent div. The parent div is styled with the `grid` and `grid-col-3` classes to create a three-column grid. The `gap-4` class adds spacing between the grid items.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-css-grid.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { FC } from \"react\";\nimport Card from \"./Card\";\nconst CardGallery: FC<any> = () => {\n  return (\n    <div className=\"grid grid-col-3\">\n      <Card />\n      <Card />\n      <Card />\n      <Card />\n    </div>\n  );\n};\nexport default CardGallery;\n```\n\n----------------------------------------\n\nTITLE: Styling with Tailwind Utility Classes\nDESCRIPTION: Demonstrates the use of Tailwind CSS utility classes within HTML elements to style a header section.  It showcases classes for background color, text color, padding, container, flex layout, font weight, and hover effects.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-landing-page.mdx#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<header class=\"bg-gray-800 text-white py-4\">\n  <nav class=\"container mx-auto flex justify-between items-center\">\n    <a href=\"#\" class=\"text-xl font-bold\">Your Logo</a>\n    <ul class=\"flex space-x-4\">\n      <li><a href=\"#\" class=\"hover:text-gray-400\">Home</a></li>\n      <li><a href=\"#\" class=\"hover:text-gray-400\">Features</a></li>\n      <li><a href=\"#\" class=\"hover:text-gray-400\">Pricing</a></li>\n      <li><a href=\"#\" class=\"hover:text-gray-400\">Contact</a></li>\n    </ul>\n  </nav>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Provider Pattern Implementation with React Redux\nDESCRIPTION: This snippet demonstrates the implementation of the Provider pattern using React Redux.  It imports necessary modules from React, ReactDOM, and react-redux. The Provider component wraps the App component and makes the Redux store available to all connected components within the application. The root element is selected and the App is rendered within the Provider.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-design-patterns.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport App from \"./App\";\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement,\n);\n\n```\n\n----------------------------------------\n\nTITLE: Adding Ripple Animation CSS\nDESCRIPTION: This CSS code defines the `rippling` animation and the `--animate-rippling` custom property used to create the ripple effect. The animation scales and fades the ripple, controlled by the `--duration` variable.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/ripple-button.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@theme inline {\n  --animate-rippling: rippling var(--duration) ease-out;\n\n  @keyframes rippling {\n    0% {\n      opacity: 1;\n    }\n    100% {\n      transform: scale(2);\n      opacity: 0;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Example in React\nDESCRIPTION: This code snippet demonstrates conditional rendering in React. It fetches a list of products and displays either the products or a 'No products' message based on the length of the list. The component uses the `useState` and `useEffect` hooks for managing state and side effects.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-design-patterns.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function App() {\n  let [products, setProducts] = useState([]);\n  useEffect(() => {\n    // fetch a list of products from the server\n  }, []);\n  return (\n    <div className=\"App\">\n      <h1>Products</h1>\n      {products.length > 0 ? doSomething() : <p>No products</p>}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with Combined Tailwind Text Styles\nDESCRIPTION: This React component showcases a layout with a heading, description, and button, all styled using Tailwind CSS. It utilizes font sizes, font weight, text alignment, and spacing utilities to create a visually appealing design. The button also includes hover effects.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-font-size.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./App.css\";\nimport \"./index.css\";\nfunction App() {\n  return (\n    <div className=\"w-full flex flex-col items-center justify-center h-screen bg-gray-100 gap-4\">\n      <div className=\"max-w-xl text-center\">\n        <h1 className=\"text-5xl font-bold underline text-center mb-4\">\n          Welcome to Tailwind CSS\n        </h1>\n        <p className=\"text-xl text-gray-600\">\n          This is a sample text layout using Tailwind CSS, an utility-first CSS\n          framework for rapidly building custom designs.\n        </p>\n        <div className=\"mt-2\">\n          <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n            Get Started\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using React Fragments in Functional Component\nDESCRIPTION: This snippet demonstrates how to use React Fragments to group children without adding extra nodes to the DOM, improving DOM structure and readability. It uses a functional React component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-tips.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst MyComponent = () => { return ( <React.Fragment> <h1>My React Component</h1> <p>This is an example of using React Fragment in a functional component.</p> </React.Fragment> ); };\n```\n\n----------------------------------------\n\nTITLE: Row-Based Grid Component in React with Tailwind CSS\nDESCRIPTION: This TypeScript snippet creates a row-based grid layout in React using Tailwind CSS. The code renders the Card component multiple times within a parent div. The parent div's styles include the `grid`, `grid-rows-3`, `grid-flow-col`, and `gap-4` classes to configure a three-row grid with the items flowing into columns and a gap of 4 units between items.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-css-grid.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { FC } from \"react\";\nimport Card from \"./Card\";\nconst CardGallery: FC<any> = () => {\n  return (\n    <div className=\"grid grid-rows-3 grid-flow-col gap-4\">\n      <Card />\n      <Card />\n      <Card />\n      <Card />\n    </div>\n  );\n};\nexport default CardGallery;\n```\n\n----------------------------------------\n\nTITLE: Using Animated List component\nDESCRIPTION: Demonstrates a basic usage of the `AnimatedList` component with three paragraph elements as children.  Each child element within the `AnimatedList` will be animated in sequence with a delay (default 1000ms). The component handles the animation logic internally.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/animated-list.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<AnimatedList>\n  <p>Item 1</p>\n  <p>Item 2</p>\n  <p>Item 3</p>\n</AnimatedList>\n```\n\n----------------------------------------\n\nTITLE: Adding Content to MUI Card (CardContent)\nDESCRIPTION: This code demonstrates how to add the core content to a Material UI Card using the CardContent component. It imports CardContent and Card from @mui/material. The content to be displayed inside the card is placed within the CardContent tags.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-card.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport { CardContent } from \"@mui/material\";\nimport Card from \"@mui/material/Card\";\n<Card>\n  <CardContent>{/* Card Contents */}</CardContent>\n</Card>;\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript in Functional React Component\nDESCRIPTION: This snippet illustrates the use of TypeScript in a functional React component. It defines an interface for the component's props and uses it to type-check the component, enhancing code maintainability and reducing runtime errors. Requires TypeScript and React dependencies.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-tips.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react'; interface Props { text: string; } const MyComponent: React.FC<Props> = ({ text }) => { return ( <div> {text} </div> ); };\n```\n\n----------------------------------------\n\nTITLE: Using the BlurFade Component\nDESCRIPTION: This example demonstrates how to wrap content with the `BlurFade` component.  In this case, it's wrapping three image elements, causing them to animate in and out with a blur effect. The `BlurFade` component manages the animation logic.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/blur-fade.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<BlurFade>\n  <img src=\"https://picsum.photos/300/200?random=1\" alt=\"Sample 1\" />\n  <img src=\"https://picsum.photos/300/200?random=2\" alt=\"Sample 2\" />\n  <img src=\"https://picsum.photos/300/200?random=3\" alt=\"Sample 3\" />\n</BlurFade>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic MUI Transition - Fade\nDESCRIPTION: This snippet demonstrates a simple implementation of an MUI transition using the `Transition` component from `@mui/material`. It uses a fade transition to animate the appearance and disappearance of text when a button is clicked. The `in` prop controls visibility, and `timeout` defines the transition duration.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Transition } from \"@mui/material\";\nimport { useState } from \"react\";\n\nfunction MyComponent() {\n  const [show, setShow] = useState(false);\n\n  return (\n    <div>\n      <button onClick={() => setShow(!show)}>Toggle</button>\n      <Transition in={show} timeout={500}>\n        <div>This component will fade in and out.</div>\n      </Transition>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Use Meteors Component in JSX\nDESCRIPTION: This JSX snippet demonstrates how to use the `Meteors` component within a `div` element. The `div` has classes for relative positioning, overflow hidden, height, width and max-width, styling to create the necessary container for the meteors effect. The `Meteors` component is rendered within this container.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/meteors.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"relative overflow-hidden h-[500px] w-full max-w-[350px]\">\n  <Meteors />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a React Component with Tailwind CSS\nDESCRIPTION: This code defines a React component called `Card` that uses Tailwind CSS utility classes to style its elements. It demonstrates how to create a reusable UI component with a modern design using Tailwind CSS.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/install-tailwind-react.mdx#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { FC } from \"react\";\nconst Card: FC<any> = () => {\n  return (\n    <div className=\"max-w-sm rounded overflow-hidden shadow-md bg-white\">\n      <div className=\"px-6 py-4\">\n        <div className=\"font-bold text-xl mb-2\">Mountain Sunset</div>\n        <p className=\"text-gray-700 text-base\">\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus\n          quia, nulla! Maiores et perferendis eaque, exercitationem praesentium\n          nihil.\n        </p>\n      </div>\n      <div className=\"px-6 pt-4 pb-2\">\n        <span className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2\">\n          #photography\n        </span>\n        <span className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2\">\n          #travel\n        </span>\n        <span className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mb-2\">\n          #winter\n        </span>\n      </div>\n    </div>\n  );\n};\nexport default Card;\n```\n\n----------------------------------------\n\nTITLE: Install HeroVideoDialog via CLI\nDESCRIPTION: This command uses `shadcn` to add the `hero-video-dialog` component from a remote URL. It simplifies the installation process by automatically fetching and installing the component and its dependencies.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/hero-video-dialog.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/hero-video-dialog\"\n```\n\n----------------------------------------\n\nTITLE: Adding Neon Gradient Card CSS Animations\nDESCRIPTION: This CSS code defines the animation for the neon gradient card, creating a spinning background effect. It's crucial for the card's visual appearance. The animation is set to run indefinitely, alternating direction.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/neon-gradient-card.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@theme inline {\n  --animate-background-position-spin: background-position-spin 3000ms infinite\n    alternate;\n\n  @keyframes background-position-spin {\n    0% {\n      background-position: top center;\n    }\n    100% {\n      background-position: bottom center;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compound Component Pattern in React\nDESCRIPTION: This code snippet demonstrates the compound component pattern in React. It imports a parent component (`CompoundComponentParent`) and two child components (`CompoundComponentA`, `CompoundComponentB`). The child components are rendered within the parent, allowing for shared state and logic.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-design-patterns.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport CompoundComponentParent from \"./CompoundComponentParent\";\nimport { CompoundComponentA, CompoundComponentB } from \"./CompoundComponents\";\nconst App = () => {\n  return (\n    <CompoundComponentParent>\n      <CompoundComponentA propA=\"Value for A\" />\n      <CompoundComponentB propB=\"Value for B\" />\n    </CompoundComponentParent>\n  );\n};\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using the Shiny Button Component\nDESCRIPTION: This example demonstrates how to render the ShinyButton component with default styling and the text 'Shiny Button'.  The component can be customized using the `className` prop and children.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/shiny-button.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ShinyButton>Shiny Button</ShinyButton>\n```\n\n----------------------------------------\n\nTITLE: Using CodeComparison Component\nDESCRIPTION: This example demonstrates how to use the CodeComparison component with two code snippets, beforeCode and afterCode. The component will display these snippets side-by-side, allowing users to easily compare them.  Pass the code snippets as props to the component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/code-comparison.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<CodeComparison beforeCode={beforeCode} afterCode={afterCode} />\n```\n\n----------------------------------------\n\nTITLE: React Component with Hoverable Border Radius\nDESCRIPTION: This React component demonstrates how to modify the border radius on hover using Tailwind CSS. The 'hover:rounded-none' class removes the rounded border when the user hovers over the card.  It imports CSS files for styling. It defines a functional component `App` that returns JSX representing a card element with rounded corners which become sharp on hover within a div element.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-border-radius.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./App.css\";\nimport \"./index.css\";\nfunction App() {\n  return (\n    <div className=\"w-full flex flex-rows items-center justify-center h-screen bg-gray-100 gap-4\">\n      <div className=\"bg-white p-6 rounded-lg shadow-md hover:rounded-none\">\n        <h2 className=\"text-xl font-bold\">Card Title</h2>\n        <p className=\"text-gray-700\">This is a card with a border radius.</p>\n      </div>\n    </div>\n  );\n}\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using IconCloud Component\nDESCRIPTION: This snippet demonstrates how to use the `IconCloud` component within a React component's JSX. It renders the component within a `div` with `overflow-hidden` style applied. The `images` prop is expected to be an array of image URLs.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/icon-cloud.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"relative overflow-hidden\">\n  <IconCloud images={images} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: CSS Transition Component (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to use the Transition component from react-transition-group to apply CSS classes for enter and exit transitions.  It uses the 'classes' prop to map CSS classes to the different transition states.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Transition\n  in={show}\n  timeout={500}\n  component=\"div\"\n  classes={{\n    entering: \"fade-in\",\n    exiting: \"fade-out\",\n  }}\n>\n  {/* Your content */}\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: MagicUI Button Component\nDESCRIPTION: This JavaScript snippet utilizes the MagicUI library to render a primary button component. It demonstrates how to import and use pre-built animated components from a UI library to quickly add interactive elements to a React application.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/ui-animation.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from \"magicui\";\nconst MyComponent = () => {\n  return <Button variant=\"primary\">Click me</Button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Ripple Button Component\nDESCRIPTION: This code snippet demonstrates how to use the `RippleButton` component in a React application. The content 'Ripple Button' will be displayed within the button.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/ripple-button.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<RippleButton>Ripple Button</RippleButton>\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in tsconfig.json\nDESCRIPTION: This code snippet configures path aliases in the `tsconfig.json` file. It defines a base URL and a path alias `@/*` that maps to the `src` directory. This allows for shorter and more readable import statements throughout the project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/astro.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\n        \"./src/*\"\n      ]\n    }\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS Styles\nDESCRIPTION: This CSS code imports Tailwind CSS's base styles, components, and utility classes into the `src/index.css` file. This ensures that Tailwind's styles are applied to the entire project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/install-tailwind-react.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n@tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: This command starts the development server for the React project, which automatically reloads the application in the browser whenever code changes are detected. It provides a live-reloading environment for developing and testing React components.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/install-tailwind-react.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Use Flickering Grid component\nDESCRIPTION: This code snippet demonstrates how to render the `FlickeringGrid` component. No props are passed, so it will render with the default settings. To customize the look, you need to use the available props.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/flickering-grid.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<FlickeringGrid />\n```\n\n----------------------------------------\n\nTITLE: Using Interactive Hover Button Component\nDESCRIPTION: This snippet demonstrates how to use the InteractiveHoverButton component in your JSX code. You can customize the button's appearance and behavior using props, such as `text` and `className`.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/interactive-hover-button.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<InteractiveHoverButton>Interactive Hover Button</InteractiveHoverButton>\n```\n\n----------------------------------------\n\nTITLE: Customizing MUI Transition with Props\nDESCRIPTION: This code snippet demonstrates how to customize the MUI `Transition` component using various props. It shows how to control the transition's duration with the `timeout` prop, specify the animation's easing function with the `easing` prop, and manage the component's mounting and unmounting behavior with `mountOnEnter` and `unmountOnExit`.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Transition\n  in={show}\n  timeout={1000}\n  easing=\"easeInOutCubic\"\n  mountOnEnter\n  unmountOnExit\n  appear\n>\n   {/* Your component */}\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Using the AuroraText Component\nDESCRIPTION: This example shows how to use the AuroraText component in a React application. The text \"Aurora Text\" will be rendered with the animated aurora effect.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/aurora-text.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<AuroraText>Aurora Text</AuroraText>\n```\n\n----------------------------------------\n\nTITLE: Creating a React App with create-next-app\nDESCRIPTION: This command uses the create-next-app tool to quickly scaffold a new React application named 'mui-table'.  It simplifies the setup process by providing a basic project structure and configuration, allowing developers to start building their application immediately. This command is executed in the terminal.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-table.mdx#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpx create-next-app@latest mui-table\n```\n\n----------------------------------------\n\nTITLE: Implementing Animations Using CSS\nDESCRIPTION: CSS animations are a powerful way to add movement and visual interest to landing pages without relying on JavaScript. Keyframes are defined to specify the animation sequence, and these animations are then applied to HTML elements. This allows for creating effects like fades, slides, and bounces in response to user interactions.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/animated-landing-page.mdx#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Using HyperText component in JSX\nDESCRIPTION: This JSX snippet demonstrates how to use the HyperText component. The text 'Hover me' will be animated when the component is rendered and hovered over (by default).  You can customize the animation and text by adjusting the props.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/hyper-text.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<HyperText>Hover me</HyperText>\n```\n\n----------------------------------------\n\nTITLE: Defining Peer Dependencies in package.json\nDESCRIPTION: This snippet shows how to define peer dependencies in the package.json file.  Peer dependencies indicate that the host project must have these dependencies pre-installed for the library to function correctly. The example specifies react and react-dom as peer dependencies with a minimum version of 16.0.0.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/create-react-component-library.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\npeerDependencies: {\n  \"react\": \">=16.0.0\",\n  \"react-dom\": \">=16.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the LineShadowText Component\nDESCRIPTION: This snippet demonstrates how to use the `LineShadowText` component. It renders the text \"Magic UI\" with the line shadow effect.  You can customize the appearance of the text using the component's props, such as `shadowColor`.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/line-shadow-text.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<LineShadowText>Magic UI</LineShadowText>\n```\n\n----------------------------------------\n\nTITLE: Initializing Tailwind Configuration Files\nDESCRIPTION: Generates the `tailwind.config.js` and `postcss.config.js` files in the project directory. These files are essential for configuring Tailwind CSS and PostCSS.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-landing-page.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx tailwindcss init -p\n```\n\n----------------------------------------\n\nTITLE: Sass Variable Example\nDESCRIPTION: This Sass example demonstrates the use of variables for maintaining consistent styling across a project. The `$primary-color` variable is defined to store a specific color value, which can then be reused throughout the style sheet.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-hero-component.mdx#_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$primary-color: #3498db;\n```\n\n----------------------------------------\n\nTITLE: React App with Predefined Tailwind Font Sizes\nDESCRIPTION: This React component demonstrates the use of predefined Tailwind CSS font size classes. It renders a series of paragraphs, each with a different font size, ranging from `text-xs` to `text-9xl`. The component is styled with a flexbox layout to center the content.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-font-size.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./App.css\";\nimport \"./index.css\";\nfunction App() {\n  return (\n    <div className=\"w-full flex flex-col items-center justify-center h-screen bg-gray-100 gap-4\">\n      <p className=\"text-xs\">Text size xs</p>\n      <p className=\"text-sm\">Text size sm</p>\n      <p className=\"text-base\">Text size base</p>\n      <p className=\"text-lg\">Text size lg</p>\n      <p className=\"text-xl\">Text size xl</p>\n      <p className=\"text-2xl\">Text size 2xl</p>\n      <p className=\"text-3xl\">Text size 3xl</p>\n      <p className=\"text-4xl\">Text size 4xl</p>\n      <p className=\"text-5xl\">Text size 5xl</p>\n      <p className=\"text-6xl\">Text size 6xl</p>\n      <p className=\"text-7xl\">Text size 7xl</p>\n      <p className=\"text-8xl\">Text size 8xl</p>\n      <p className=\"text-9xl\">Text size 9xl</p>\n    </div>\n  );\n}\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using AnimatedBeam component\nDESCRIPTION: This code snippet demonstrates how to use the AnimatedBeam component in your JSX code. It requires `containerRef`, `fromRef`, and `toRef` as props, which should be React refs pointing to the container and the start and end elements of the beam.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/animated-beam.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<AnimatedBeam containerRef={containerRef} fromRef={fromRef} toRef={toRef} />\n```\n\n----------------------------------------\n\nTITLE: Styling React Hero Component with CSS\nDESCRIPTION: This CSS code provides basic styling for a Hero component, including setting a background image, centering text, and defining styles for the title, subtitle, and call-to-action (CTA) button.  It targets specific classes defined in the React component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-hero-component.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n.hero {\n  background: url(\"hero-bg.jpg\") no-repeat center center;\n  background-size: cover;\n  text-align: center;\n  padding: 50px 20px;\n}\n\n.hero-title {\n  font-size: 3rem;\n  color: #fff;\n}\n\n.hero-subtitle {\n  font-size: 1.5rem;\n  color: #ddd;\n}\n\n.hero-cta {\n  background-color: #3498db;\n  color: #fff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Hero Component\nDESCRIPTION: This code defines a functional React component called `Hero` that renders a simple Hero section with a title, subtitle, and a call-to-action button. It imports React and a CSS file for styling and exports the component for use in other parts of the application.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-hero-component.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport \"./Hero.css\";\n\nconst Hero = () => (\n  <div className=\"hero\">\n        <h1 className=\"hero-title\">Welcome to Our Website</h1>    {\" \"}\n    <p className=\"hero-subtitle\">Discover amazing content</p>    {\" \"}\n    <button className=\"hero-cta\">Get Started</button> {\" \"}\n  </div>\n);\n\nexport default Hero;\n```\n\n----------------------------------------\n\nTITLE: Using the Shine Border Component\nDESCRIPTION: This code snippet demonstrates how to incorporate the `ShineBorder` component within a React component.  It wraps the `ShineBorder` component inside a `div` with specified height, width and overflow properties.  This ensures the ShineBorder works correctly within the specified dimensions.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/shine-border.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"relative h-[500px] w-full overflow-hidden\">\n  <ShineBorder />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Project with shadcn/ui\nDESCRIPTION: This command initializes a new Next.js project or sets up an existing one using shadcn/ui. It leverages the `init` command provided by the shadcn CLI to handle project setup and configuration.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init\n```\n\n----------------------------------------\n\nTITLE: Creating a Storybook Story for the Button Component\nDESCRIPTION: This snippet demonstrates how to create a simple Storybook story for the Button component.  It imports the Button component and defines a default export with metadata like the title and component. The Default export renders the Button component with the \"Click me!\" text as children.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/create-react-component-library.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/components/Button/button.stories.tsx\nimport { Button } from \"./button\";\nexport default {\ntitle: \"Button\",\ncomponent: Button,\n};\nexport const Default = () => <Button>Click me!</Button>;\n```\n\n----------------------------------------\n\nTITLE: Use AnimatedGradientText Component\nDESCRIPTION: This code snippet demonstrates how to use the AnimatedGradientText component in a React application.  The component renders text with an animated gradient background.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/animated-gradient-text.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<AnimatedGradientText>Animated Gradient Text</AnimatedGradientText>\n```\n\n----------------------------------------\n\nTITLE: Using GridPattern Component\nDESCRIPTION: This code snippet demonstrates how to use the `GridPattern` component within a `div` element. The `div` sets the dimensions and overflow behavior for the grid.  The `GridPattern` component then renders the grid within this container.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/grid-pattern.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"relative h-[500px] w-full overflow-hidden\">\n  <GridPattern />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Grid HTML Structure with Tailwind CSS\nDESCRIPTION: This HTML snippet demonstrates the basic structure for creating a grid layout using Tailwind CSS.  It includes two divs utilizing the grid and gap utility classes. The first div configures a column layout, while the second configures a row layout.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-css-grid.mdx#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <div className=\"grid grid-cols-3 gap-2\"></div>\n  <div className=\"grid grid-rows-3 gap-2\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Styled-Components\nDESCRIPTION: This command installs the styled-components library, which allows you to write CSS directly within your JavaScript files. This promotes component-level styling and better CSS management.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-header.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install styled-components\n```\n\n----------------------------------------\n\nTITLE: Framer Motion Button Animation\nDESCRIPTION: This JavaScript snippet uses the Framer Motion library to create a button with hover and tap animations. The `whileHover` prop scales the button up slightly on hover, and the `whileTap` prop scales it down slightly when tapped.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/ui-animation.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { motion } from \"framer-motion\";\nconst Button = () => {\n  return (\n    <motion.button whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.9 }}>\n      Click me\n    </motion.button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Use Pulsating Button Component\nDESCRIPTION: This is a basic example of how to use the `PulsatingButton` component in a React/JSX context.  The text 'Pulsating Button' will be displayed as the button's content. The animation should be applied via CSS, as configured in the global CSS file.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/pulsating-button.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<PulsatingButton>Pulsating Button</PulsatingButton>\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS and Dependencies\nDESCRIPTION: This command installs Tailwind CSS, PostCSS, and Autoprefixer as dependencies for the project. Tailwind CSS is a utility-first CSS framework, PostCSS is a tool for transforming CSS with JavaScript, and Autoprefixer automatically adds vendor prefixes to CSS rules for cross-browser compatibility.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/install-tailwind-react.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm install tailwindcss postcss autoprefixer\n```\n\n----------------------------------------\n\nTITLE: Slide Transition Example (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the Slide transition component from Material-UI (MUI). It wraps content within a Transition and Slide component to create a sliding effect from the right based on the 'show' prop. The 'direction' prop specifies the direction of the slide. The 'timeout' prop specifies the duration of the transition in milliseconds.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Transition in={show} timeout={500}>\n  <Slide direction=\"right\" in={show}>\n    {/* Your content */}\n  </Slide>\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Initializing React Project with Typescript\nDESCRIPTION: This command initializes a new React project using Create React App with the TypeScript template. It sets up a project directory with TypeScript pre-configured, providing a starting point for building React applications with type safety.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/install-tailwind-react.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpx create-react-app my-tailwind-app --template typescript\n```\n\n----------------------------------------\n\nTITLE: Changing Colors with Tailwind CSS\nDESCRIPTION: This snippet describes using Tailwind CSS, within the Magic UI framework, for customizing the color scheme of a React landing page to align with specific brand guidelines. It emphasizes the importance of brand consistency in visual design.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-landing-page.mdx#_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\nCustomize the color scheme to align with your brand using Tailwind CSS in Magic UI.\n```\n\n----------------------------------------\n\nTITLE: Adding Clickable Area to MUI Card (CardActionArea)\nDESCRIPTION: This code snippet demonstrates how to make a Card component clickable using the CardActionArea component from Material UI. It imports both Card and CardActionArea and wraps the card's contents with CardActionArea, ensuring the entire area within the card is interactive.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-card.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { CardActionArea } from \"@mui/material\";\nimport Card from \"@mui/material/Card\";\n<Card>\n  <CardActionArea>{/* Card Contents */}</CardActionArea>\n</Card>;\n```\n\n----------------------------------------\n\nTITLE: Use Animated Subscribe Button Component\nDESCRIPTION: Demonstrates the basic usage of the `AnimatedSubscribeButton` component with two children elements representing the 'Follow' and 'Subscribed' states. The first child element will be rendered for unsubscribed state and the second for subscribed state.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/animated-subscribe-button.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<AnimatedSubscribeButton>\n  <span>Follow</span>\n  <span>Subscribed</span>\n</AnimatedSubscribeButton>\n```\n\n----------------------------------------\n\nTITLE: Installing React and Typescript Dependencies\nDESCRIPTION: This command installs React, React-DOM, TypeScript, and their respective type definitions as dependencies for the project. It ensures that the necessary packages are available for building React components with TypeScript support.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/install-tailwind-react.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm install react react-dom typescript @types/react @types/react-dom\n```\n\n----------------------------------------\n\nTITLE: Use RainbowButton component in React\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `RainbowButton` component in a React application. The content inside the `<RainbowButton>` tags will be displayed on the button.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/rainbow-button.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<RainbowButton>Rainbow Button</RainbowButton>\n```\n\n----------------------------------------\n\nTITLE: Embedding a Video Component in Next.js\nDESCRIPTION: This snippet demonstrates embedding a video component within a Next.js application. It utilizes the HTML5 video tag, configured for autoplay, looping, and muting. The video source is specified through the `src` attribute, pointing to an MP4 file located in the public directory. Tailwind CSS classes are used to style the video, providing rounded corners and a border.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/templates/agent.mdx#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"flex max-w-[800px] flex-col gap-4\">\n  <video\n    autoPlay\n    loop\n    muted\n    src=\"/agent-demo.mp4\"\n    className=\"w-full rounded-xl border\"\n  />\n  <div className=\"flex w-full flex-col gap-2 sm:flex-row\">\n    <RepoDownload repo={\"agent-template\"} owner={\"magicuidesign\"} />\n    <TemplatePreview href=\"https://agent-magicui.vercel.app/\">\n      Live Preview\n    </TemplatePreview>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Shimmer Animations to CSS\nDESCRIPTION: These CSS animations define the shimmer effect used by the Shimmer Button component.  `shimmer-slide` creates a sliding shimmer effect, while `spin-around` adds a rotating animation.  These are added to the global CSS file for use in the component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/shimmer-button.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@theme inline {\n  --animate-shimmer-slide: shimmer-slide var(--speed) ease-in-out infinite\n    alternate;\n  --animate-spin-around: spin-around calc(var(--speed) * 2) infinite linear;\n\n  @keyframes shimmer-slide {\n    to {\n      transform: translate(calc(100cqw - 100%), 0);\n    }\n  }\n  @keyframes spin-around {\n    0% {\n      transform: translateZ(0) rotate(0);\n    }\n    15%,\n    35% {\n      transform: translateZ(0) rotate(90deg);\n    }\n    65%,\n    85% {\n      transform: translateZ(0) rotate(270deg);\n    }\n    100% {\n      transform: translateZ(0) rotate(360deg);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Android Component using CLI (Bash)\nDESCRIPTION: This command installs the Android component from the MagicUI design system using the shadcn CLI. It fetches the component code directly from the specified URL, making it readily available for use in your project. This is the recommended installation method.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/android.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/android\"\n```\n\n----------------------------------------\n\nTITLE: React Component with Responsive Tailwind Font Sizes\nDESCRIPTION: This React component demonstrates how to implement responsive font sizes in Tailwind CSS using breakpoint prefixes. It adjusts the font size of the heading and description based on the screen size, using `md:` to apply larger font sizes on medium-sized screens and above. This ensures readability across different devices.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-font-size.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./App.css\";\nimport \"./index.css\";\nfunction App() {\n  return (\n    <div className=\"w-full flex flex-col items-center justify-center h-screen bg-gray-100 gap-4\">\n      <div className=\"max-w-xl text-center\">\n        <h1 className=\"text-3xl font-bold underline text-center mb-4 md:text-5xl\">\n          Welcome to Tailwind CSS\n        </h1>\n        <p className=\"text-lg text-gray-600 md:text-2xl\">\n          This is a sample text layout using Tailwind CSS, an utility-first CSS\n          framework for rapidly building custom designs.\n        </p>\n        <div className=\"mt-2\">\n          <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n            Get Started\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Define CSS Animations for Meteors\nDESCRIPTION: These CSS rules define the `meteor` animation and associated variables. The animation moves the meteor element across the screen while fading out. The `transform` property uses `rotate` and `translateX` to create the desired trajectory.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/meteors.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@theme inline {\n  --animate-meteor: meteor 5s linear infinite;\n\n  @keyframes meteor {\n    0% {\n      transform: rotate(var(--angle)) translateX(0);\n      opacity: 1;\n    }\n    70% {\n      opacity: 1;\n    }\n    100% {\n      transform: rotate(var(--angle)) translateX(-500px);\n      opacity: 0;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Zoom Transition Example (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the Zoom transition component from Material-UI (MUI). It wraps content within a Transition and Zoom component to create a zooming effect based on the 'show' prop. The 'timeout' prop specifies the duration of the transition in milliseconds.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Transition in={show} timeout={500}>\n  <Zoom in={show}>{/* Your content */}</Zoom>\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Importing Material UI Button Component\nDESCRIPTION: This code snippet demonstrates how to import the Button component from the Material UI library into a React component.  This allows you to use the Material UI button in your React application. It requires that Material UI has already been installed.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/material-ui-react.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from '@mui/material/Button';\n```\n\n----------------------------------------\n\nTITLE: Add CSS Animations for Pulsating Effect\nDESCRIPTION: This CSS code defines the pulse animation and its associated keyframes. It uses the `--animate-pulse` variable to apply the animation to the button and the `--pulse-color` variable to control the color of the pulse effect. Place within a `@theme inline` block for proper theming.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/pulsating-button.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@theme inline {\n  --animate-pulse: pulse var(--duration) ease-out infinite;\n\n  @keyframes pulse {\n    0%,\n    100% {\n      box-shadow: 0 0 0 0 var(--pulse-color);\n    }\n    50% {\n      box-shadow: 0 0 0 8px var(--pulse-color);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Typing Animation with CLI\nDESCRIPTION: This command uses `shadcn-ui` CLI to add the Typing Animation component from the specified URL. It simplifies the process of installing the component and its dependencies.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/typing-animation.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/typing-animation\"\n```\n\n----------------------------------------\n\nTITLE: Import ScrollProgress component\nDESCRIPTION: This import statement allows you to use the ScrollProgress component in your React application. It assumes that the component is located in the `@/components/magicui/scroll-progress` path.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/scroll-progress.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ScrollProgress } from \"@/components/magicui/scroll-progress\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Styles in globals.css\nDESCRIPTION: This CSS snippet configures global styles, including CSS variables for theming. It sets up different color schemes for light and dark modes, defining variables for background, foreground, muted, popover, border, input, card, primary, secondary, destructive, ring, and radius.  It uses Tailwind directives to apply base styles, components, and utilities.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/manual.mdx#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 47.4% 11.2%;\n\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 47.4% 11.2%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 47.4% 11.2%;\n\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 100% 50%;\n    --destructive-foreground: 210 40% 98%;\n\n    --ring: 215 20.2% 65.1%;\n\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 224 71% 4%;\n    --foreground: 213 31% 91%;\n\n    --muted: 223 47% 11%;\n    --muted-foreground: 215.4 16.3% 56.9%;\n\n    --accent: 216 34% 17%;\n    --accent-foreground: 210 40% 98%;\n\n    --popover: 224 71% 4%;\n    --popover-foreground: 215 20.2% 65.1%;\n\n    --border: 216 34% 17%;\n    --input: 216 34% 17%;\n\n    --card: 224 71% 4%;\n    --card-foreground: 213 31% 91%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 1.2%;\n\n    --secondary: 222.2 47.4% 11.2%;\n    --secondary-foreground: 210 40% 98%;\n\n    --destructive: 0 63% 31%;\n    --destructive-foreground: 210 40% 98%;\n\n    --ring: 216 34% 17%;\n\n    --radius: 0.5rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n    font-feature-settings:\n      \"rlig\" 1,\n      \"calt\" 1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using VelocityScroll Component\nDESCRIPTION: This snippet shows how to use the `VelocityScroll` component in your JSX code. It wraps the text \"Scroll Based Velocity\" which will be displayed with the scroll-based velocity effect.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/scroll-based-velocity.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<VelocityScroll>Scroll Based Velocity</VelocityScroll>\n```\n\n----------------------------------------\n\nTITLE: Using Interactive Grid Pattern Component in JSX\nDESCRIPTION: This code snippet demonstrates how to use the `InteractiveGridPattern` component within a JSX structure. It is wrapped in a `div` with relative positioning, a specified height, and overflow set to hidden.  The `InteractiveGridPattern` component renders the interactive grid within this container.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/interactive-grid-pattern.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"relative h-[500px] w-full overflow-hidden\">\n  <InteractiveGridPattern />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing and using Button component\nDESCRIPTION: Demonstrates how to import and use the 'Button' component in a React component within a Laravel project. It showcases how to integrate the button into the UI.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/laravel.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@/Components/ui/button\";\n\nexport default function Home() {\n  return (\n    <div>\n      <Button>Click me</Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Button Component using Shadcn UI\nDESCRIPTION: This command adds the `Button` component from Shadcn UI to the project. The component is then available for use in the application.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/vite.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add button\n```\n\n----------------------------------------\n\nTITLE: Adding Header to MUI Card (CardHeader)\nDESCRIPTION: This code shows how to add a header to a Material UI Card using the CardHeader component. It includes an avatar, title, subheader, and an action (IconButton) within the header.  It requires importing CardHeader, Avatar, and IconButton from @mui/material, as well as the base Card component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-card.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { CardHeader, Avatar, IconButton } from \"@mui/material\";\nimport Card from \"@mui/material/Card\";\n<Card>\n  <CardHeader\n    avatar={<Avatar aria-label=\"card-name\">C</Avatar>}\n    title=\"Card Title\"\n    subheader=\"Subheader\"\n    action={<IconButton aria-label=\"settings\"></IconButton>}\n  />\n</Card>;\n```\n\n----------------------------------------\n\nTITLE: Adding Smooth Cursor via CLI\nDESCRIPTION: This command uses the shadcn-ui CLI to add the Smooth Cursor component from a remote URL. This is the quickest way to install the component and its dependencies.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/smooth-cursor.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/smooth-cursor\"\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animated Text\nDESCRIPTION: This HTML snippet defines the basic structure for applying CSS animations to a heading element. It creates an `h1` element with the ID `animated-text`, which will be targeted by the CSS code to apply the desired animation effects. This element will display the text \"Animated Text\" and serve as the container for the animation.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/text-animation-css.mdx#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<h1 id=\"animated-text\">Animated Text</h1>\n```\n\n----------------------------------------\n\nTITLE: Installing Magic Card via CLI\nDESCRIPTION: This command installs the MagicCard component using the shadcn CLI. It fetches the component code directly from the specified URL.  Ensure that shadcn/ui is properly configured in your project before running this command.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/magic-card.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/magic-card\"\n```\n\n----------------------------------------\n\nTITLE: Style MUI Box with sx Prop\nDESCRIPTION: Demonstrates styling the MUI Box component using the `sx` prop for inline styling. Sets the `backgroundColor` to the primary theme color and applies a margin of 1, showcasing theme integration.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-box.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Box component=\"span\" sx={{ backgroundColor: \"primary.main\", margin: 1 }}>\n  This is a box with a primary color background and a small margin\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Adding Aurora CSS Animations\nDESCRIPTION: These CSS keyframes define the aurora animation, which cycles through different background positions and transformations to create a shimmering effect. This CSS must be added to the global CSS file for the animation to work correctly.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/aurora-text.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@theme inline {\n  --animate-aurora: aurora 8s ease-in-out infinite alternate;\n\n  @keyframes aurora {\n    0% {\n      background-position: 0% 50%;\n      transform: rotate(-5deg) scale(0.9);\n    }\n    25% {\n      background-position: 50% 100%;\n      transform: rotate(5deg) scale(1.1);\n    }\n    50% {\n      background-position: 100% 50%;\n      transform: rotate(-3deg) scale(0.95);\n    }\n    75% {\n      background-position: 50% 0%;\n      transform: rotate(3deg) scale(1.05);\n    }\n    100% {\n      background-position: 0% 50%;\n      transform: rotate(-5deg) scale(0.9);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cool Mode via CLI (shadcn)\nDESCRIPTION: This command installs the Cool Mode component from a remote URL using the shadcn CLI. It's a quick way to add the component to your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/cool-mode.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/cool-mode\"\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies using CLI\nDESCRIPTION: This command uses the `shadcn` CLI to add the `scroll-based-velocity` component from the specified URL. It simplifies the installation process by automatically fetching and configuring the component within your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/scroll-based-velocity.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/scroll-based-velocity\"\n```\n\n----------------------------------------\n\nTITLE: Defining cn Helper in lib/utils.ts\nDESCRIPTION: This TypeScript snippet defines a `cn` helper function using `clsx` and `tailwind-merge`. This function simplifies the process of conditionally adding Tailwind CSS classes and resolving conflicts between them. It merges multiple class values into a single string.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/manual.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n```\n\n----------------------------------------\n\nTITLE: Using the MagicCard Component\nDESCRIPTION: This example demonstrates a basic usage of the MagicCard component. It wraps a div containing a paragraph and a span. The `className` prop is used to add padding to the inner content. The MagicCard component applies a spotlight and border highlighting effect on hover.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/magic-card.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<MagicCard>\n  <div className=\"p-4\">\n    <p>Hello World</p>\n    <span>Hover me</span>\n  </div>\n</MagicCard>\n```\n\n----------------------------------------\n\nTITLE: Install Shine Border Component with CLI\nDESCRIPTION: This command installs the Shine Border component using the `shadcn-ui` CLI. It fetches the component code directly from the specified URL and adds it to your project. This requires `shadcn-ui` to be set up in your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/shine-border.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/shine-border\"\n```\n\n----------------------------------------\n\nTITLE: Define Ripple CSS Animation\nDESCRIPTION: This CSS defines the `ripple` animation used by the Ripple component. It includes keyframes for scaling the ripple effect, along with a variable for setting the duration. This CSS should be added to your global CSS file.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/ripple.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@theme inline {\n  --animate-ripple: ripple var(--duration, 2s) ease calc(var(--i, 0) * 0.2s)\n    infinite;\n\n  @keyframes ripple {\n    0%,\n    100% {\n      transform: translate(-50%, -50%) scale(1);\n    }\n    50% {\n      transform: translate(-50%, -50%) scale(0.9);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Shadcn UI\nDESCRIPTION: Initializes Shadcn UI in the project. This command sets up the necessary configuration files and dependencies for using Shadcn components.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/laravel.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite to Resolve Path Aliases\nDESCRIPTION: This TypeScript snippet demonstrates how to configure Vite to resolve path aliases using the `resolve.alias` option in `vite.config.ts`. It imports the `path` module, the `react` plugin, and the `defineConfig` function from Vite.  The alias `@` is set to resolve to the `./src` directory, enabling shorter and more readable import statements.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/vite.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from \"path\";\nimport react from \"@vitejs/plugin-react\";\nimport { defineConfig } from \"vite\";\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Import Dot Pattern component in TSX\nDESCRIPTION: This line imports the `DotPattern` component from a specified path within the project. It enables the component to be used in the current file.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/dot-pattern.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DotPattern } from \"@/components/magicui/dot-pattern\";\n```\n\n----------------------------------------\n\nTITLE: Use Safari Component\nDESCRIPTION: This code snippet demonstrates how to use the Safari component. It sets the `url` prop to display the specified website within the Safari window. Requires the Safari component to be imported.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/safari.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Safari url=\"https://magicui.design\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Shiny Button using CLI\nDESCRIPTION: This command installs the Shiny Button component using the shadcn CLI. It fetches the component directly from the specified URL.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/shiny-button.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/shiny-button\"\n```\n\n----------------------------------------\n\nTITLE: Strategy Design Pattern in React\nDESCRIPTION: This code snippet illustrates the strategy design pattern in React. The `Strategy` component renders its `children`. A `ChildComp` component is defined and passed as a child to `Strategy`. This allows for dynamic behavior by changing the child component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-design-patterns.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst Strategy = ({ children }) => {\n  return <div>{children}</div>;\n};\nconst ChildComp = () => {\n  return <div>ChildComp</div>;\n};\n<Strategy children={<ChildComp />} />;\n```\n\n----------------------------------------\n\nTITLE: Carousel Customization CSS\nDESCRIPTION: This snippet suggests using CSS to customize carousel sliders. The example links to a resource for creating pure CSS carousels.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-landing-page.mdx#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\nMagic UI’s animated components, such as [Shimmer Buttons and Carousels,](https://www.codewithfaraz.com/content/13/create-pure-css-carousel-sliders-using-html-and-css) to create dynamic and interactive elements that grab attention and entice exploration.\n```\n\n----------------------------------------\n\nTITLE: Adding a Shadcn-UI component\nDESCRIPTION: This command adds a specific Shadcn-UI component to your project, leveraging the MagicUI CLI. Replace `button` with the name of the desired component. This will install the Shadcn UI button component using magicui.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/packages/cli/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx magicui-cli add --shadcn button\n```\n\n----------------------------------------\n\nTITLE: Import MorphingText Component\nDESCRIPTION: This imports the MorphingText component from the magicui components library, so it can be used within your application.  It is a necessary step to utilizing the component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/morphing-text.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MorphingText } from \"@/components/magicui/morphing-text\";\n```\n\n----------------------------------------\n\nTITLE: CSS Keyframes for Animation\nDESCRIPTION: This CSS snippet defines a keyframe animation named `example` and a CSS variable `--animate-example` that applies the animation to an element. The animation translates the element horizontally to create a looping effect.  The animation properties are defined within the `@keyframes` block, and the variable is defined with the animate property.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n--animate-example: example var(--duration) infinite linear;\n\n@keyframes example {\n  from {\n    transform: translateX(0);\n  }\n  to {\n    transform: translateX(calc(-100% - var(--gap)));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ScratchToReveal Component with Custom Props\nDESCRIPTION: This code snippet demonstrates how to use the ScratchToReveal component with custom width, height, and minScratchPercentage props.  The `ScratchToReveal` component renders content that is initially hidden and revealed when scratched. It requires width and height properties.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/scratch-to-reveal.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ScratchToReveal width={300} height={300} minScratchPercentage={50}>\n  Scratch To Reveal\n</ScratchToReveal>\n```\n\n----------------------------------------\n\nTITLE: Adding Neon Gradient Card Component via CLI\nDESCRIPTION: This command adds the Neon Gradient Card component to your project using the `shadcn-ui` CLI. It fetches the component from a remote URL and installs it.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/neon-gradient-card.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/neon-gradient-card\"\n```\n\n----------------------------------------\n\nTITLE: Adding a MagicUI component: Example\nDESCRIPTION: This command adds the `bento-grid` MagicUI component to your project, automatically installing any necessary dependencies. Executed in the terminal.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/packages/cli/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx magicui-cli add bento-grid\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js Application\nDESCRIPTION: This code snippet shows the commands to create a new Next.js application and start the development server. The application is created using `create-next-app`, and the server is started with `npm run dev`. This allows you to quickly set up and run a Next.js project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/what-is-nextjs.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using MorphingText Component\nDESCRIPTION: This shows how to use the MorphingText component within a React component.  The `texts` prop is passed an array of strings, which the component will transition between.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/morphing-text.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<MorphingText texts={[\"Hello\", \"World\"]} />\n```\n\n----------------------------------------\n\nTITLE: Install Border Beam component using CLI\nDESCRIPTION: This command installs the Border Beam component using the shadcn CLI.  It fetches the component directly from the specified URL. Ensure you have shadcn installed and configured in your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/border-beam.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/border-beam\"\n```\n\n----------------------------------------\n\nTITLE: Import VelocityScroll Component\nDESCRIPTION: This line imports the `VelocityScroll` component from the specified path within your project.  The path `@/components/magicui/scroll-based-velocity` may need to be adjusted based on your project structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/scroll-based-velocity.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VelocityScroll } from \"@/components/magicui/scroll-based-velocity\";\n```\n\n----------------------------------------\n\nTITLE: Installing Particles via CLI\nDESCRIPTION: This command uses the shadcn CLI to add the Particles component from the specified URL. It automates the installation process, including dependency management and file placement. Requires shadcn CLI to be installed.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/particles.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/particles\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Card Component\nDESCRIPTION: This code imports the `Card` component and renders it within the `App` component. It demonstrates how to integrate a custom React component into the main application structure and display it on the screen.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/install-tailwind-react.mdx#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"./App.css\";\nimport Card from \"./components/Card\";\nimport \"./index.css\";\nfunction App() {\n  return (\n    <div className=\"w-full flex flex-col items-center justify-center h-screen bg-gray-100\">\n      <Card />\n    </div>\n  );\n}\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript baseUrl and paths in tsconfig.json\nDESCRIPTION: This TypeScript configuration snippet demonstrates how to set up `baseUrl` and `paths` in the `tsconfig.json` file.  The `baseUrl` property specifies the base directory for resolving non-relative module names. The `paths` property defines path aliases, allowing for shorter and more readable import statements, such as `@/*` to resolve to the `./src/*` directory. This configuration is essential for resolving module paths correctly throughout the project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/vite.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"files\": [],\n  \"references\": [\n    {\n      \"path\": \"./tsconfig.app.json\"\n    },\n    {\n      \"path\": \"./tsconfig.node.json\"\n    }\n  ],\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Material-UI dependencies using yarn\nDESCRIPTION: This command installs the required Material-UI dependencies using yarn. The dependencies include @mui/material, @emotion/react and @emotion/styled. These packages provide the essential components for using Material-UI within a React application.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-table.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/material @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Install Flip Text Component using CLI\nDESCRIPTION: This command installs the FlipText component from magicui.design using the shadcn CLI.  It requires the shadcn CLI to be installed and configured in the project.  The component is added to the project's component directory.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/flip-text.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/flip-text\"\n```\n\n----------------------------------------\n\nTITLE: Import Ripple Component\nDESCRIPTION: This import statement allows you to use the Ripple component in your React application.  It assumes that the component is located in the `@/components/magicui/ripple` path. You need to ensure this path matches your project setup.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/ripple.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ripple } from \"@/components/magicui/ripple\";\n```\n\n----------------------------------------\n\nTITLE: Render Prop Pattern in React\nDESCRIPTION: This example illustrates the render prop pattern in React. The `Input` component accepts `renderKelvin` and `renderFahrenheit` props, which are functions that render a temperature value. The `App` component uses these render props to display temperature conversions in Kelvin and Fahrenheit.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-design-patterns.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from \"react\";\n\nfunction Input(props) {\n  const [value, setValue] = useState(\"\");\n  return (\n    <>\n      <input value={value} onChange={(e) => setValue(e.target.value)} />\n      {props.renderKelvin({ value: value + 273.15 })}\n      {props.renderFahrenheit({ value: (value * 9) / 5 + 32 })}\n    </>\n  );\n}\n\nexport default function App() {\n  return (\n    <Input\n      renderKelvin={({ value }) => <div className=\"temp\">{value}K</div>}\n      renderFahrenheit={({ value }) => <div className=\"temp\">{value}°F</div>}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TextReveal component using CLI\nDESCRIPTION: This command uses the `shadcn` CLI to add the TextReveal component from the specified MagicUI Design URL.  It automates the process of downloading and integrating the component into your project. Ensure `shadcn` is installed and configured in your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/text-reveal.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/text-reveal\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: This command installs required dependencies for MagicUI, including tailwindcss-animate, class-variance-authority, clsx, and tailwind-merge. These libraries provide animations, class variance management, conditional class application and tailwind class conflict resolution.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/manual.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tailwindcss-animate class-variance-authority clsx tailwind-merge\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in tsconfig.json\nDESCRIPTION: This JSON snippet configures the `@` path alias in `tsconfig.json`. It allows importing modules using the `@` prefix, simplifying import statements. This example sets the base URL to the project root and maps `@/*` to `./*`.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/manual.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Build Script in package.json\nDESCRIPTION: This snippet shows how to add a build script to the package.json file to bundle the library using tsup.  The script uses tsup to bundle the src/index.ts file and generate declaration files (.dts) for TypeScript support.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/create-react-component-library.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nscripts: {\n\"build\": \"tsup src/index.ts --dts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Add Grid Pattern Component using CLI\nDESCRIPTION: This command uses the `shadcn` CLI to add the Grid Pattern component to your project. It fetches the component directly from the specified URL. Requires `shadcn` to be installed and configured in the project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/grid-pattern.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/grid-pattern\"\n```\n\n----------------------------------------\n\nTITLE: Import WordRotate Component\nDESCRIPTION: This import statement is needed to use the WordRotate component in your React application.  It assumes the component is located in the '@/components/magicui/word-rotate' directory.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/word-rotate.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WordRotate } from \"@/components/magicui/word-rotate\";\n```\n\n----------------------------------------\n\nTITLE: Installing Ripple Button using CLI\nDESCRIPTION: This command installs the Ripple Button component from the MagicUI design system using the `shadcn` CLI tool. It fetches the component directly from the specified URL.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/ripple-button.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/ripple-button\"\n```\n\n----------------------------------------\n\nTITLE: Sass Mixin Example\nDESCRIPTION: This Sass example showcases the use of mixins to create reusable blocks of CSS properties. The `button-style` mixin defines a set of styles for buttons, which can be included in any selector to apply those styles, reducing code duplication.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-hero-component.mdx#_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@mixin button-style($color) { background-color: $color; border: none; padding: 10px; }\n```\n\n----------------------------------------\n\nTITLE: Using Particles Component in JSX\nDESCRIPTION: This example demonstrates how to integrate the `Particles` component within a React component. It sets up a container with relative positioning and overflow hidden to contain the particles.  The container has a fixed height and takes up the full width. The actual component being used is called `Particle`, not `Particles` as imported. It also appears to be missing a closing tag.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/particles.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"relative overflow-hidden h-[500px] w-full\">\n  <Particle />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using MagicUI Button with MUI Button in React\nDESCRIPTION: This code snippet demonstrates how to import and use both MUI's Button and MagicUI's MagicUIButton components within a React component.  It showcases the basic usage of these components for creating UI elements that adapt to different screen sizes.  It requires the installation of `@mui/material` and `@magicui/react` packages as dependencies.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Button } from \"@mui/material\";\nimport { MagicUIButton } from \"@magicui/react\";\n\nfunction MyComponent() {\n  return (\n    <div>\n      <Button variant=\"contained\">MUI Button</Button>\n      <MagicUIButton variant=\"primary\">MagicUI Button</MagicUIButton>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Install TextAnimate Component via CLI\nDESCRIPTION: Installs the TextAnimate component from the MagicUI design library using the shadcn CLI. This command adds the component and its dependencies to your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/text-animate.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/text-animate\"\n```\n\n----------------------------------------\n\nTITLE: Import Terminal Components - TSX\nDESCRIPTION: This snippet imports the `AnimatedSpan`, `Terminal`, and `TypingAnimation` components from the specified MagicUI path. These components are essential for creating the terminal interface with typing animations. Make sure the MagicUI library is installed in your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/terminal.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  AnimatedSpan,\n  Terminal,\n  TypingAnimation,\n} from \"@/components/magicui/terminal\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Material-UI Table in React\nDESCRIPTION: This code snippet demonstrates how to create a simple table using Material-UI components. It imports necessary components like Table, TableBody, TableCell, TableContainer, TableHead, TableRow, and Paper. It then defines a data structure and renders a table with header and body rows.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-table.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\n\nfunction createData(\n  name: string,\n  calories: number,\n  fat: number,\n  carbs: number,\n  protein: number\n) {\n  return { name, calories, fat, carbs, protein };\n}\n\nconst rows = [\n  createData(\"Frozen yoghurt\", 159, 6.0, 24, 4.0),\n  createData(\"Ice cream sandwich\", 237, 9.0, 37, 4.3),\n  createData(\"Eclair\", 262, 16.0, 24, 6.0),\n  createData(\"Cupcake\", 305, 3.7, 67, 4.3),\n  createData(\"Gingerbread\", 356, 16.0, 49, 3.9),\n];\n\nexport default function BasicTable() {\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Dessert (100g serving)</TableCell>\n            <TableCell align=\"right\">Calories</TableCell>\n            <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow\n              key={row.name}\n              sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n            >\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell align=\"right\">{row.calories}</TableCell>\n              <TableCell align=\"right\">{row.fat}</TableCell>\n              <TableCell align=\"right\">{row.carbs}</TableCell>\n              <TableCell align=\"right\">{row.protein}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Shimmer Button via CLI\nDESCRIPTION: This command installs the Shimmer Button component using the `shadcn` CLI. It fetches the component directly from the specified URL, simplifying the installation process.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/shimmer-button.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/shimmer-button\"\n```\n\n----------------------------------------\n\nTITLE: Installing Cobe Dependency\nDESCRIPTION: This command installs the `cobe` library, which is a dependency for the Globe component. Cobe provides the core WebGL functionality for rendering the globe.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/globe.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cobe\n```\n\n----------------------------------------\n\nTITLE: React Card Component with Tailwind CSS\nDESCRIPTION: This TypeScript snippet creates a simple Card component in React, styled with Tailwind CSS.  The card includes a title, description, and some tags. It's designed to be used as an item within a grid layout. The component uses functional component syntax with type definition `FC<any>`.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-css-grid.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { FC } from \"react\";\nconst Card: FC<any> = () => {\n  return (\n    <div className=\"max-w-sm rounded overflow-hidden shadow-md bg-white\">\n      <div className=\"px-6 py-4\">\n        <div className=\"font-bold text-xl mb-2\">Mountain Sunset</div>\n        <p className=\"text-gray-700 text-base\">\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus\n          quia, nulla! Maiores et perferendis eaque, exercitationem praesentium\n          nihil.\n        </p>\n      </div>\n      <div className=\"px-6 pt-4 pb-2\">\n        <span className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2\">\n          #photography\n        </span>\n        <span className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2\">\n          #travel\n        </span>\n        <span className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mb-2\">\n          #winter\n        </span>\n      </div>\n    </div>\n  );\n};\nexport default Card;\n```\n\n----------------------------------------\n\nTITLE: Using a Shadcn Component in Astro\nDESCRIPTION: This Astro component demonstrates how to import and use the Shadcn `Button` component. It imports the component from the `@/components/ui/button` path and renders it within the Astro component's template.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/astro.mdx#_snippet_10\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport { Button } from \"@/components/ui/button\"\n---\n\n<html lang=\"en\">\n\t<head>\n\t\t<title>Astro</title>\n\t</head>\n\t<body>\n\t\t<Button>Hello World</Button>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Install Animated Subscribe Button via CLI\nDESCRIPTION: Installs the animated subscribe button component using the `shadcn` CLI. This command automatically adds the component to your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/animated-subscribe-button.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/animated-subscribe-button\"\n```\n\n----------------------------------------\n\nTITLE: Using Sparkles Text Component\nDESCRIPTION: This code snippet demonstrates how to render the SparklesText component with the text \"Sparkles Text\".  The component applies animated sparkles to the provided text, creating a visually appealing effect. You can customize the sparkles effect using the available props.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/sparkles-text.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<SparklesText>Sparkles Text</SparklesText>\n```\n\n----------------------------------------\n\nTITLE: Install Marquee component using CLI\nDESCRIPTION: This command installs the Marquee component using the shadcn CLI tool.  It directly adds the component from the specified magicui.design URL.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/marquee.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/marquee\"\n```\n\n----------------------------------------\n\nTITLE: Create HTML page with Tailwind CSS\nDESCRIPTION: This HTML snippet creates a basic webpage structure and uses Tailwind CSS utility classes to style the content.  It includes a container with padding, a heading with font size, weight, and color styles, a styled paragraph, and a styled button. This shows how to apply Tailwind CSS directly to HTML elements by specifying the appropriate CSS classes.  The CDN link must be included for this to work.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-cdn-html.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Tailwind CDN Example</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n  </head>\n  <body>\n    <div class=\"container mx-auto p-4\">\n      <h1 class=\"text-4xl font-bold text-center text-gray-800\">\n        Hello, Tailwind!\n      </h1>\n      <p class=\"mt-4 text-lg text-gray-600\">\n        This is a paragraph styled with Tailwind CSS.\n      </p>\n      <button class=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded\">\n        Click Me\n      </button>\n    </div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Install Motion Dependency using npm\nDESCRIPTION: This command installs the `motion` library, which is a required dependency for the `VelocityScroll` component.  The library is installed using npm.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/scroll-based-velocity.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install motion\n```\n\n----------------------------------------\n\nTITLE: Installing Magic UI MCP Server with CLI\nDESCRIPTION: This command uses the Magic UI CLI to install the MCP server for a specific IDE. The `npx` command executes the CLI installer with the specified IDE as a parameter.  Replace `cursor`, `windsurf`, `claude`, `cline`, or `roo-cline` with the target IDE. This installs the necessary configurations for the IDE to use the Magic UI MCP server.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/mcp.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @magicuidesign/cli@latest install cline\n```\n\n----------------------------------------\n\nTITLE: Importing Particles Component\nDESCRIPTION: This import statement allows you to use the `Particles` component in your React code. It assumes that the component is located in the `@/components/magicui/particles` directory. Update the path if necessary based on your project structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/particles.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Particles } from \"@/components/magicui/particles\";\n```\n\n----------------------------------------\n\nTITLE: Import HeroVideoDialog Component\nDESCRIPTION: This import statement allows you to use the `HeroVideoDialog` component within your TypeScript/JSX files.  It assumes the component is located within the `@/components/magicui` directory.  You must update the import path to match your project structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/hero-video-dialog.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HeroVideoDialog } from \"@/components/magicui/hero-video-dialog\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Using React Bootstrap Components\nDESCRIPTION: This code snippet demonstrates how to import and use React Bootstrap components like Container, Row, and Col within a React application. It creates a basic layout structure with columns inside a row, contained within a container. This example requires the react-bootstrap package to be installed.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-bootstrap.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Container, Row, Col } from \"react-bootstrap\";\nfunction App() {\n  return (\n    <Container>\n      <Row>\n        <Col>Column 1</Col>\n        <Col>Column 2</Col>\n      </Row>\n    </Container>\n  );\n}\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Adding Scroll Progress Component via CLI (shadcn)\nDESCRIPTION: This command utilizes the `shadcn` CLI to add the ScrollProgress component from the specified URL to your project. It simplifies the installation process by automating the component integration.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/scroll-progress.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/scroll-progress\"\n```\n\n----------------------------------------\n\nTITLE: Initialize Next.js project with shadcn-ui with defaults (Bash)\nDESCRIPTION: This command initializes a new or existing Next.js project using the shadcn-ui CLI with default settings. It will use 'new-york' style, 'zinc' color, and 'yes' for CSS variables.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/next.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init -d\n```\n\n----------------------------------------\n\nTITLE: Building Android App Binary\nDESCRIPTION: This snippet shows how to rebuild the Android app binary after installing a library with native dependencies. The `npm run android` command initiates the build process for the Android application, ensuring the new library is included.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-native-libraries.mdx#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run android\n```\n\n----------------------------------------\n\nTITLE: Using ScrollProgress component\nDESCRIPTION: This code snippet demonstrates how to render the ScrollProgress component in your React application.  No props are passed in this basic usage example.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/scroll-progress.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ScrollProgress />\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind CSS to Astro Project\nDESCRIPTION: This command uses the Astro CLI to add Tailwind CSS integration to the current project. It installs Tailwind CSS and its dependencies, and configures the Astro project to use Tailwind for styling.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/astro.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx astro add tailwind\n```\n\n----------------------------------------\n\nTITLE: Adding MagicUI Component with shadcn/ui CLI\nDESCRIPTION: This command adds a specific MagicUI component to the project using the shadcn/ui CLI.  It fetches the component definition from a remote JSON file specified by the URL and integrates it into the project's component structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/globe.json\"\n```\n\n----------------------------------------\n\nTITLE: Installing a React Native library using npm\nDESCRIPTION: This snippet demonstrates how to install a React Native library using npm. It uses the `npm install` command followed by the name of the library, in this case, `react-native-webview`. This command adds the library to the project's dependencies.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-native-libraries.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install react-native-webview\n```\n\n----------------------------------------\n\nTITLE: Importing IconCloud Component\nDESCRIPTION: Imports the `IconCloud` component from the specified path in the project. This import statement is necessary to use the `IconCloud` component in a React component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/icon-cloud.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { IconCloud } from \"@/components/magicui/icon-cloud\";\n```\n\n----------------------------------------\n\nTITLE: Installing Iphone15Pro component via CLI\nDESCRIPTION: This command installs the Iphone15Pro component using the shadcn CLI. It adds the component from the specified URL to the project.  Requires shadcn CLI to be installed.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/iphone-15-pro.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/iphone-15-pro\"\n```\n\n----------------------------------------\n\nTITLE: Importing Smooth Cursor Component\nDESCRIPTION: This snippet shows how to import the SmoothCursor component in a React application. This import statement makes the SmoothCursor component available for use in the current file.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/smooth-cursor.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SmoothCursor } from \"@/components/ui/smooth-cursor\";\n```\n\n----------------------------------------\n\nTITLE: Installing Blur Fade Component via CLI\nDESCRIPTION: This command utilizes the `shadcn` CLI to install the BlurFade component directly from the specified URL. It automates the process of adding the component to your project and configuring the necessary dependencies.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/blur-fade.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/blur-fade\"\n```\n\n----------------------------------------\n\nTITLE: Using Android Component (TSX)\nDESCRIPTION: This code snippet demonstrates the basic usage of the `Android` component. It renders the component with default properties. You can customize the appearance and behavior by passing different props to the component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/android.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Android />\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI Packages with npm\nDESCRIPTION: This command installs the core Material UI library along with the necessary Emotion libraries for styling.  It is a prerequisite for using Material UI components in a React project. It uses npm as the package manager.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/material-ui-react.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/material @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Adding Globe Component via CLI\nDESCRIPTION: This command uses the `shadcn` CLI to add the Globe component to your project. It fetches the component code from the specified URL on magicui.design.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/globe.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/globe\"\n```\n\n----------------------------------------\n\nTITLE: Install Motion Dependency\nDESCRIPTION: This command installs the `motion` library, which is a dependency for the Word Rotate component.  It is required for the animation effects.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/word-rotate.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install motion\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Animations for Line Shadow\nDESCRIPTION: This CSS snippet defines the `line-shadow` animation used by the Line Shadow Text component. It creates a moving background effect that simulates a shadow. The animation is configured to run linearly and infinitely.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/line-shadow-text.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@theme inline {\n  --animate-line-shadow: line-shadow 15s linear infinite;\n\n  @keyframes line-shadow {\n    0% {\n      background-position: 0 0;\n    }\n    100% {\n      background-position: 100% -100%;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AnimatedBeam component\nDESCRIPTION: This line imports the AnimatedBeam component from its location within your project.  Ensure the import path matches the actual file structure in your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/animated-beam.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AnimatedBeam } from \"@/components/magicui/animated-beam.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js App with CLI\nDESCRIPTION: This code snippet demonstrates how to create a new Next.js application using the `create-next-app` command via the command line. It includes the command to generate the project, instructions to navigate to the project directory, and the command to start the development server. Requires NPX, npm, or yarn.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/next-js-app.mdx#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n  npx create-next-app\n  // Follow the instructions to create your first Next.js project.\n  cd <project-name>\n  npm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating a new Laravel project\nDESCRIPTION: Creates a new Laravel project named 'my-app' with TypeScript, Breeze, React stack, and Git integration. The '--no-interaction' flag prevents interactive prompts during project creation.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/laravel.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlaravel new my-app --typescript --breeze --stack=react --git --no-interaction\n```\n\n----------------------------------------\n\nTITLE: Installing ScratchToReveal component with CLI\nDESCRIPTION: This command installs the ScratchToReveal component using the `shadcn-ui` CLI. It adds the component from the specified URL to the project. Ensure `shadcn-ui` is properly configured in your project before running this command.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/scratch-to-reveal.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/scratch-to-reveal\"\n```\n\n----------------------------------------\n\nTITLE: Initializing shadcn-ui\nDESCRIPTION: This command initializes the `shadcn-ui` library in the project. It prompts the user to configure various settings, such as the style, color, and import aliases, to integrate `shadcn-ui` seamlessly into the existing project structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/gatsby.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind CDN Link to HTML\nDESCRIPTION: This code snippet demonstrates how to include the Tailwind CSS CDN link within the `<head>` section of an HTML file. The script tag fetches the latest version of Tailwind CSS from the CDN, allowing you to use Tailwind utility classes in your HTML elements. Place this before any other `<link>` or `<style>` tags to ensure proper styling. Always check the official Tailwind CSS documentation for the most up-to-date CDN link.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-cdn-html.mdx#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Tailwind CDN Example</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n  </head>\n  <body>\n    <!-- Your content goes here -->\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Importing Sparkles Text Component\nDESCRIPTION: This import statement allows you to use the SparklesText component in your React application. It assumes the component is located in the '@/components/magicui/sparkles-text' path. Adjust the path to match your project's file structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/sparkles-text.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SparklesText } from \"@/components/magicui/sparkles-text\";\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Library using npm\nDESCRIPTION: This code snippet shows how to install a React Native library using npm.  It specifically shows the command to install `react-native-webview`.  After installing a library with native dependencies, you must rebuild the app binary for the changes to take effect.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/best-react-native-ui-library.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```npm install react-native-webview```\n```\n\n----------------------------------------\n\nTITLE: Import Shine Border Component\nDESCRIPTION: This import statement is required to use the `ShineBorder` component in your React application. Ensure that the path `@/registry/magicui/shine-border` correctly reflects the location of the component file within your project structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/shine-border.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ShineBorder } from \"@/registry/magicui/shine-border\";\n```\n\n----------------------------------------\n\nTITLE: Listing available MagicUI components\nDESCRIPTION: Running the `add` command without arguments displays a list of available MagicUI components that can be installed. Executed in the command line.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/packages/cli/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx magicui-cli add\n```\n\n----------------------------------------\n\nTITLE: Initializing Shadcn-UI project\nDESCRIPTION: This command initializes a project with Shadcn-UI. It's used if you are starting a project directly with Shadcn-UI and intend to incorporate MagicUI components later. Executed in the command line.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/packages/cli/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui init\n```\n\n----------------------------------------\n\nTITLE: Importing and Using MagicUI Globe Component in TSX\nDESCRIPTION: This code snippet demonstrates how to import and use the `Globe` component in a Next.js application. It imports the component from the specified path and renders it within a functional component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/index.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Globe } from \"@/components/ui/globe\";\n\nexport default function Home() {\n  return (\n    <div>\n      <Globe />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Install Ripple Component via CLI\nDESCRIPTION: This command installs the Ripple component from the magicui.design library using the shadcn CLI. This is the recommended approach for quickly adding the component to your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/ripple.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/ripple\"\n```\n\n----------------------------------------\n\nTITLE: Importing Spinning Text Component\nDESCRIPTION: This line imports the SpinningText component from its location within your project's component directory. Ensure the path matches your project structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/spinning-text.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SpinningText } from \"@/components/magicui/spinning-text\";\n```\n\n----------------------------------------\n\nTITLE: Adding a MagicUI example component\nDESCRIPTION: This command is intended to install example components or demos from the website, showcasing MagicUI features and usage. Invoked via the command line.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/packages/cli/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx magicui-cli add --example\n```\n\n----------------------------------------\n\nTITLE: Using Custom Font Sizes in a React Component\nDESCRIPTION: This React component shows how to utilize custom font sizes defined in the Tailwind CSS configuration. It renders two paragraphs, one using the `text-xxs` class and the other using the `text-xxl` class, demonstrating the application of the newly defined font sizes.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-font-size.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction CustomFontSizeComponent() {\n  return (\n    <div className=\"text-center\">\n      <p className=\"text-xxs\">This is extra extra small text.</p>\n      <p className=\"text-xxl\">This is extra extra large text.</p>\n    </div>\n  );\n}\nexport default CustomFontSizeComponent;\n```\n\n----------------------------------------\n\nTITLE: Importing BoxReveal Component in TSX\nDESCRIPTION: This import statement allows the usage of the `BoxReveal` component within a TypeScript React file. The component is assumed to be located in the `@/components/magicui/box-reveal` directory.  Make sure the import path matches your project structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/box-reveal.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BoxReveal } from \"@/components/magicui/box-reveal\";\n```\n\n----------------------------------------\n\nTITLE: Adding Warp Background via CLI\nDESCRIPTION: This command uses the `shadcn` CLI to add the `warp-background` component from the specified URL to your project. It simplifies the installation process by automatically fetching and integrating the component's code.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/warp-background.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/warp-background\"\n```\n\n----------------------------------------\n\nTITLE: Sass Nesting Example\nDESCRIPTION: This Sass example illustrates the nesting feature, which allows developers to write CSS selectors in a hierarchical manner, improving code readability and organization. The `.title` selector is nested within the `.hero` selector, visually representing the relationship between the elements.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-hero-component.mdx#_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n.hero { .title { font-size: 2rem; } }\n```\n\n----------------------------------------\n\nTITLE: Using Retro Grid Component in JSX\nDESCRIPTION: This JSX code snippet demonstrates how to use the `RetroGrid` component within a React application. It's placed inside a `div` with specific styling to control its size and overflow.  The `overflow-hidden` class ensures the grid doesn't overflow its container.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/retro-grid.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"relative h-[500px] w-full overflow-hidden\">\n  <RetroGrid />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Install Word Rotate Component using CLI\nDESCRIPTION: This command installs the Word Rotate component from magicui.design using the shadcn/ui CLI. It adds the component and its dependencies to your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/word-rotate.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/word-rotate\"\n```\n\n----------------------------------------\n\nTITLE: Import AvatarCircles Component in TypeScript\nDESCRIPTION: Imports the `AvatarCircles` component from the specified path. This allows you to use the component in your TypeScript/JSX code.  The path `@/components/magicui/avatar-circles` should be adjusted to match your project's file structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/avatar-circles.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AvatarCircles } from \"@/components/magicui/avatar-circles\";\n```\n\n----------------------------------------\n\nTITLE: Import Number Ticker Component\nDESCRIPTION: This import statement is necessary to use the NumberTicker component in your React/Typescript code. It imports the component from the specified path within your project's component directory. Ensure the path matches your project structure where the `NumberTicker` component is located.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/number-ticker.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NumberTicker } from \"@/components/magicui/number-ticker\";\n```\n\n----------------------------------------\n\nTITLE: Installing lucide-react Icon Library with npm\nDESCRIPTION: This command installs `lucide-react`, an icon library, if you're using the 'default' style in MagicUI. This library provides a set of icons to be used within components.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/manual.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install lucide-react\n```\n\n----------------------------------------\n\nTITLE: Importing ScratchToReveal Component in React\nDESCRIPTION: This import statement allows you to use the ScratchToReveal component in your React application. The component is located in the specified path within your project's components directory. Make sure the file structure matches the import path.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/scratch-to-reveal.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ScratchToReveal } from \"@/components/magicui/scratch-to-reveal\";\n```\n\n----------------------------------------\n\nTITLE: Installing Component with CLI\nDESCRIPTION: This command uses the `shadcn` CLI to add the Animated Circular Progress Bar component to your project.  It fetches the component from the specified URL.  Requires `shadcn` CLI to be installed.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/animated-circular-progress-bar.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/animated-circular-progress-bar\"\n```\n\n----------------------------------------\n\nTITLE: Using TextReveal component in React\nDESCRIPTION: This demonstrates how to use the TextReveal component in your React code.  It wraps the text \"Magic UI will change the way you design.\" within the `<TextReveal>` component, triggering the fade-in effect on scroll. The component takes the text to be revealed as its child.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/text-reveal.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<TextReveal>Magic UI will change the way you design.</TextReveal>\n```\n\n----------------------------------------\n\nTITLE: Installing Retro Grid Component with CLI\nDESCRIPTION: This command adds the Retro Grid component to your project using the `shadcn-ui` CLI. It fetches the component directly from the specified URL.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/retro-grid.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/retro-grid\"\n```\n\n----------------------------------------\n\nTITLE: Import AnimatedGradientText Component\nDESCRIPTION: This import statement allows you to use the AnimatedGradientText component in your React application. The component is located within the `magicui` directory under the `components` directory.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/animated-gradient-text.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AnimatedGradientText } from \"@/components/magicui/animated-gradient-text\";\n```\n\n----------------------------------------\n\nTITLE: Import AnimatedGridPattern Component\nDESCRIPTION: This import statement brings the `AnimatedGridPattern` component into the current file. This allows you to use the component in your React code. The component is assumed to reside under `@/components/magicui/animated-grid-pattern`.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/animated-grid-pattern.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AnimatedGridPattern } from \"@/components/magicui/animated-grid-pattern\";\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS and PostCSS\nDESCRIPTION: This command installs Tailwind CSS, PostCSS, and Autoprefixer as development dependencies. It also generates the `tailwind.config.js` and `postcss.config.js` files, which are necessary for configuring Tailwind CSS in the project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/vite.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss postcss autoprefixer\n\nnpx tailwindcss init -p\n```\n\n----------------------------------------\n\nTITLE: Using the Iphone15Pro Component\nDESCRIPTION: This snippet demonstrates how to use the imported Iphone15Pro component within a React component. The component can be rendered directly within the JSX. It uses default props if none are provided.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/iphone-15-pro.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Iphone15Pro />\n```\n\n----------------------------------------\n\nTITLE: Use WordRotate Component\nDESCRIPTION: This code snippet demonstrates how to use the WordRotate component. The `words` prop takes an array of strings, which will be rotated vertically.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/word-rotate.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<WordRotate words={[\"Word\", \"Rotate\"]} />\n```\n\n----------------------------------------\n\nTITLE: Adding Morphing Text component using CLI\nDESCRIPTION: This command uses the shadcn CLI to add the Morphing Text component to your project.  It fetches the component directly from the specified URL on the Magic UI design system.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/morphing-text.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/morphing-text\"\n```\n\n----------------------------------------\n\nTITLE: Importing AnimatedCircularProgressBar\nDESCRIPTION: This import statement imports the `AnimatedCircularProgressBar` component from your project's component library.  Update the path if necessary to match your project structure. It assumes the component is located in the `@/components/magicui` directory.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/animated-circular-progress-bar.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AnimatedCircularProgressBar } from \"@/components/magicui/animated-circular-progress-bar\";\n```\n\n----------------------------------------\n\nTITLE: Importing Lens Component\nDESCRIPTION: This imports the Lens component from the `@/components/magicui/lens` path. This import statement is necessary to use the Lens component within your React/Typescript code.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/lens.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Lens } from \"@/components/magicui/lens\";\n```\n\n----------------------------------------\n\nTITLE: Installing Magic UI MCP Server with CLI\nDESCRIPTION: This command uses the Magic UI CLI to install the MCP server for a specific IDE. The `npx` command executes the CLI installer with the specified IDE as a parameter.  Replace `cursor`, `windsurf`, `claude`, `cline`, or `roo-cline` with the target IDE. This installs the necessary configurations for the IDE to use the Magic UI MCP server.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/mcp.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @magicuidesign/cli@latest install roo-cline\n```\n\n----------------------------------------\n\nTITLE: Importing ScriptCopyBtn Component\nDESCRIPTION: Imports the ScriptCopyBtn component into a TypeScript React file. This import statement allows you to use the ScriptCopyBtn component in your JSX code. Requires the component to be installed in your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/script-copy-btn.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ScriptCopyBtn } from \"@/components/magicui/script-copy-btn\";\n```\n\n----------------------------------------\n\nTITLE: Installing with shadcn CLI\nDESCRIPTION: This command uses the shadcn CLI to add the Animated Beam component to your project. It fetches the component code from the specified URL and installs it.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/animated-beam.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/animated-beam\"\n```\n\n----------------------------------------\n\nTITLE: Using AnimatedCircularProgressBar\nDESCRIPTION: This code snippet demonstrates how to render the `AnimatedCircularProgressBar` component. It uses the default props.  Customize the component by passing different prop values.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/animated-circular-progress-bar.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<AnimatedCircularProgressBar />\n```\n\n----------------------------------------\n\nTITLE: Install Orbiting Circles component using CLI\nDESCRIPTION: This command installs the Orbiting Circles component from the magicui.design repository using the shadcn CLI. This is the recommended approach for installing the component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/orbiting-circles.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/orbiting-circles\"\n```\n\n----------------------------------------\n\nTITLE: Import MagicUI Pointer Component\nDESCRIPTION: Imports the `Pointer` component from the specified path within the project. The path `@/components/magicui/pointer` is a placeholder and should be adjusted to match the actual location of the component in the project's file structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/pointer.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pointer } from \"@/components/magicui/pointer\";\n```\n\n----------------------------------------\n\nTITLE: Installing Bento Grid via CLI (Bash)\nDESCRIPTION: This command installs the Bento Grid component using the `shadcn` CLI. It fetches the component directly from the specified URL.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/bento-grid.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/bento-grid\"\n```\n\n----------------------------------------\n\nTITLE: Installing Animated List component using CLI\nDESCRIPTION: This command installs the Animated List component from MagicUI using the `shadcn` CLI tool. It fetches the component directly from the specified URL. Requires `shadcn` to be installed and configured in the project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/animated-list.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/animated-list\"\n```\n\n----------------------------------------\n\nTITLE: Using the TextAnimate Component\nDESCRIPTION: Demonstrates the basic usage of the TextAnimate component with the `blurInUp` animation and splits the text by word. The animation will apply to the \"Blur in by word\" text.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/text-animate.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<TextAnimate animation=\"blurInUp\" by=\"word\">\n  Blur in by word\n</TextAnimate>\n```\n\n----------------------------------------\n\nTITLE: Using the Lens Component\nDESCRIPTION: This code snippet demonstrates the basic usage of the Lens component. It wraps an `img` tag within the `<Lens>` component, enabling zoom functionality when interacting with the image. The `src` attribute specifies the image source, and the `alt` attribute provides alternative text for accessibility.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/lens.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Lens>\n  <img src=\"/images/lens-demo.jpg\" alt=\"Lens Demo\" />\n</Lens>\n```\n\n----------------------------------------\n\nTITLE: Install MagicUI Video Text Component using CLI\nDESCRIPTION: This command installs the MagicUI Video Text component using the `shadcn` CLI. It adds the component directly from the specified URL.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/video-text.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/video-text\"\n```\n\n----------------------------------------\n\nTITLE: Importing Animated List component\nDESCRIPTION: Imports the `AnimatedList` component from a local file path within the project.  The path `@/components/magicui/animated-list` should reflect the actual file location in the project directory.  This is necessary for using the component in other parts of the application.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/animated-list.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AnimatedList } from \"@/components/magicui/animated-list\";\n```\n\n----------------------------------------\n\nTITLE: Import VideoText component\nDESCRIPTION: This line imports the `VideoText` component from the MagicUI registry. This import is necessary to use the component in your React application.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/video-text.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VideoText } from \"@/registry/magicui/video-text\";\n```\n\n----------------------------------------\n\nTITLE: Using ScriptCopyBtn Component\nDESCRIPTION: Renders the ScriptCopyBtn component in a TypeScript React file. This usage example demonstrates how to include the component in your JSX code. The component provides a button to copy code to the clipboard. Requires the component to be installed and imported.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/script-copy-btn.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ScriptCopyBtn />\n```\n\n----------------------------------------\n\nTITLE: Using Spinning Text Component\nDESCRIPTION: This snippet demonstrates the basic usage of the SpinningText component. The text between the opening and closing tags will be animated in a circular motion.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/spinning-text.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<SpinningText>learn more • earn more • grow more •</SpinningText>\n```\n\n----------------------------------------\n\nTITLE: Installing Lens via CLI\nDESCRIPTION: This command uses the `shadcn` CLI to add the Lens component to your project from the MagicUI design system. It automates the process of downloading and configuring the component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/lens.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/lens\"\n```\n\n----------------------------------------\n\nTITLE: Using Orbiting Circles Component\nDESCRIPTION: This example demonstrates how to use the OrbitingCircles component with different configurations.  It showcases the use of icons as children, setting the radius, and reversing the animation.  It relies on the OrbitingCircles component and lucide-react icons.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/orbiting-circles.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"relative overflow-hidden h-[500px] w-full\">\n  <OrbitingCircles>\n    <File />\n    <Settings />\n    <File />\n  </OrbitingCircles>\n  <OrbitingCircles radius={100} reverse>\n    <File />\n    <Settings />\n    <File />\n    <Search />\n  </OrbitingCircles>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Spinning Text Component via CLI\nDESCRIPTION: This command uses the shadcn CLI to add the Spinning Text component to your project. It automatically fetches and installs the necessary files from the specified URL.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/spinning-text.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/spinning-text\"\n```\n\n----------------------------------------\n\nTITLE: Rendering TweetCard on Server Side (Next.js 13+)\nDESCRIPTION: This code snippet demonstrates how to render the `TweetCard` component on the server side in a Next.js 13+ application using React Server Components. It imports the `TweetCard` component and passes the tweet ID as a prop.  This requires the component to be located at `@/components/magicui/tweet-card.tsx`.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/tweet-card.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TweetCard } from \"@/components/magicui/tweet-card.tsx\";\n\nexport default async function App() {\n  return <TweetCard id=\"1441032681968212480\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Install AnimatedGradientText via CLI\nDESCRIPTION: This command uses the shadcn-ui CLI to install the Animated Gradient Text component from the MagicUI design system. It automates the process of downloading and integrating the component into your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/animated-gradient-text.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/animated-gradient-text\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Shadcn UI component (Button)\nDESCRIPTION: Adds the 'Button' component to the project using Shadcn UI.  This command downloads and configures the necessary files for the button component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/laravel.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add button\n```\n\n----------------------------------------\n\nTITLE: Render Confetti Component in TypeScript\nDESCRIPTION: This is a basic usage example of the Confetti component within a React/TypeScript context.  It renders the Confetti component with default props.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/confetti.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Confetti />\n```\n\n----------------------------------------\n\nTITLE: Adding Media to MUI Card (CardMedia)\nDESCRIPTION: This snippet illustrates how to include media, such as images, within a Material UI Card using the CardMedia component. It sets the image source, and title, and styles the padding.  It requires importing CardMedia from @mui/material, as well as the base Card component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-card.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Card>\n  <CardMedia\n    style={{ paddingTop: \"24px\" }}\n    image=\"./background.png\"\n    title=\"Background image\"\n  />\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Installing Terminal Component with CLI - Bash\nDESCRIPTION: This command uses the `shadcn` CLI to add the Terminal component from the specified MagicUI URL.  It simplifies the installation process by automatically fetching and integrating the necessary files into your project.  Ensure `shadcn` is installed and configured in your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/terminal.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/terminal\"\n```\n\n----------------------------------------\n\nTITLE: Using the BorderBeam component in JSX\nDESCRIPTION: This JSX snippet demonstrates how to integrate the BorderBeam component within a div. The div has relative positioning, a fixed height and width, and overflow hidden. The BorderBeam component is then rendered within this container.  This example showcases the basic usage of the BorderBeam component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/border-beam.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"relative h-[500px] w-full overflow-hidden\">\n  <BorderBeam />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Integration in Astro\nDESCRIPTION: This code snippet configures the Tailwind CSS integration in the Astro configuration file (`astro.config.mjs`). It sets `applyBaseStyles` to `false` to prevent Astro from applying base styles, as they are already included in the global CSS file. This prevents duplicate styling.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/astro.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  integrations: [\n    tailwind({\n      applyBaseStyles: false,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: React Component with Responsive Border Radius\nDESCRIPTION: This React component implements responsive border radii using Tailwind CSS screen size modifiers. The card will have different roundedness values depending on the screen size ('rounded-md' by default, 'rounded-lg' at medium screens, and 'rounded-xl' for larger screens). The component imports CSS files for styling.  It defines a functional component `App` that returns JSX representing a card element with responsive border radii within a div element.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-border-radius.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./App.css\";\nimport \"./index.css\";\nfunction App() {\n  return (\n    <div className=\"w-full flex flex-rows items-center justify-center h-screen bg-gray-100 gap-4\">\n      <div className=\"bg-white p-6 rounded-md md:rounded-lg lg:rounded-xl shadow-md\">\n        <h2 className=\"text-xl font-bold\">Responsive Card Title</h2>\n        <p className=\"text-gray-700\">\n          This card adjusts its border radius based on the screen size.\n        </p>\n      </div>\n    </div>\n  );\n}\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Grow Transition Example (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the Grow transition component from Material-UI (MUI). It wraps content within a Transition and Grow component to create a growing/shrinking effect based on the 'show' prop. The 'timeout' prop specifies the duration of the transition in milliseconds.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Transition in={show} timeout={500}>\n  <Grow in={show}>{/* Your content */}</Grow>\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Importing Android Component (TSX)\nDESCRIPTION: This import statement imports the `Android` component from the specified path within your project's components directory. This allows you to use the component in your React/Typescript code. It assumes the component is located at `@/components/magicui/android`.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/android.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Android } from \"@/components/magicui/android\";\n```\n\n----------------------------------------\n\nTITLE: Adding Sparkles Text component via CLI\nDESCRIPTION: This command utilizes the shadcn CLI to add the SparklesText component to your project. It downloads and installs the component from the specified URL, automating the setup process. Ensure shadcn is installed and configured in your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/sparkles-text.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/sparkles-text\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Animations with MagicUI (React, TypeScript, Tailwind CSS, Motion)\nDESCRIPTION: MagicUI is a UI library designed to simplify the integration of animations into landing pages. It offers over 20 pre-built animated components built with React, TypeScript, Tailwind CSS, and Motion. These customizable components allow seamless adaptation to branding and design needs, bridging the gap between design and development.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/animated-landing-page.mdx#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Installing Script Copy Button component via CLI\nDESCRIPTION: Installs the script-copy-btn component using the shadcn CLI. This command fetches the component from the specified URL and adds it to your project. Requires shadcn CLI to be installed.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/script-copy-btn.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/script-copy-btn\"\n```\n\n----------------------------------------\n\nTITLE: Fade Enter Active CSS Class\nDESCRIPTION: This CSS defines the 'enter-active' state, animating the opacity from 0 to 1 over 500ms. This creates a fade-in effect as the element enters the view.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_17\n\nLANGUAGE: CSS\nCODE:\n```\n.fade-enter-active {\n  \t  opacity: 1;\n\n  transition: opacity 500ms;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Box Reveal component using CLI\nDESCRIPTION: This command uses the `shadcn-ui` CLI to add the `box-reveal` component from the specified remote URL to the project. It simplifies the installation process by automatically fetching and integrating the component into the existing codebase.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/box-reveal.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/box-reveal\"\n```\n\n----------------------------------------\n\nTITLE: React Component with Multiple Rounded Buttons\nDESCRIPTION: This React component demonstrates various Tailwind CSS rounded utility classes applied to different buttons.  It showcases the visual differences between 'rounded', 'rounded-md', and 'rounded-full'.  The component imports CSS files for styling. It defines a functional component `App` that returns JSX representing the different rounded buttons within a div element.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-border-radius.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./App.css\";\nimport \"./index.css\";\nfunction App() {\n  return (\n    <div className=\"w-full flex flex-rows items-center justify-center h-screen bg-gray-100 gap-4\">\n      <button className=\"bg-blue-500 text-white px-4 py-2\">\n        No Round Corners\n      </button>\n      <button className=\"bg-blue-500 text-white px-4 py-2 rounded\">\n        'rounded' Corners\n      </button>\n      <button className=\"bg-blue-500 text-white px-4 py-2 rounded-md\">\n        'rounded-md' Corners\n      </button>\n      <button className=\"bg-blue-500 text-white px-4 py-2 rounded-full\">\n        'rounded-full' Corners\n      </button>\n    </div>\n  );\n}\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Importing Iphone15Pro Component\nDESCRIPTION: This import statement imports the Iphone15Pro component from the specified path.  The path should be updated according to the project structure.  This enables the use of the component in the project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/iphone-15-pro.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Iphone15Pro } from \"@/components/magicui/iphone-15-pro\";\n```\n\n----------------------------------------\n\nTITLE: Building the Registry\nDESCRIPTION: This command builds the MagicUI registry using `pnpm`. This step compiles all the component metadata and configuration files into a format that can be used by the MagicUI system.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm build:registry\n```\n\n----------------------------------------\n\nTITLE: Using a shadcn-ui component in a React component\nDESCRIPTION: This code demonstrates how to import and use a `shadcn-ui` component (Button) within a React component. The component is imported using the configured alias, and then rendered inside the React component's JSX.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/gatsby.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Home() {\n  return (\n    <div>\n      <Button>Click me</Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Install Safari Component via CLI (shadcn)\nDESCRIPTION: This command installs the Safari component using the shadcn CLI. It fetches the component directly from the specified URL. Requires shadcn CLI to be installed.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/safari.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/safari\"\n```\n\n----------------------------------------\n\nTITLE: Using Shimmer Button Component\nDESCRIPTION: This demonstrates a basic usage of the ShimmerButton component. The text \"Shimmer Button\" is rendered inside the button, becoming the button's label. It relies on the component being imported.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/shimmer-button.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ShimmerButton>Shimmer Button</ShimmerButton>\n```\n\n----------------------------------------\n\nTITLE: Import Orbiting Circles and Icons\nDESCRIPTION: This code imports the OrbitingCircles component and icons (File, Settings, Search) from their respective libraries. The icons are used as children of the OrbitingCircles component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/orbiting-circles.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OrbitingCircles } from \"@/components/magicui/orbiting-circles\";\nimport { File, Settings, Search } from \"lucide-react\";\n```\n\n----------------------------------------\n\nTITLE: Linking Native Code on iOS using CocoaPods\nDESCRIPTION: This snippet shows how to link native code on iOS using CocoaPods. It involves running `npx pod-install` in the project's root directory. This command links the native iOS project with the installed library, ensuring proper integration.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-native-libraries.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Install Rainbow Button component using CLI\nDESCRIPTION: This command installs the Rainbow Button component using the `shadcn-ui` CLI. It adds the component from a remote URL.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/rainbow-button.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/rainbow-button\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Shadcn Component\nDESCRIPTION: This command adds a specific Shadcn component (in this case, the `button` component) to the project. It downloads and installs the component files, making it available for use in the project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/astro.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add button\n```\n\n----------------------------------------\n\nTITLE: Importing the MUI Transition Component\nDESCRIPTION: This code snippet shows how to import the `Transition` component from the `@mui/material/transitions` package. This import statement is the first step in using MUI Transitions in a React component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Transition } from \"@mui/material/transitions\";\n```\n\n----------------------------------------\n\nTITLE: Import Dock and DockIcon components\nDESCRIPTION: These import statements are necessary to use the `Dock` and `DockIcon` components within a React application.  It also imports icons from the `lucide-react` library. Make sure `@/components/magicui/dock` path is correctly configured in your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/dock.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dock, DockIcon } from \"@/components/magicui/dock\";\nimport { Home, Settings, Search } from \"lucide-react\";\n```\n\n----------------------------------------\n\nTITLE: Including Tailwind CSS CDN Link\nDESCRIPTION: Includes the Tailwind CSS CDN link in the `<head>` section of the `index.html` file.  This allows the project to use Tailwind CSS styles directly from the CDN without needing local installation, but it is generally recommended to install Tailwind CSS locally for production.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-landing-page.mdx#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link\n  href=\"https://cdn.jsdelivr.net/npm/tailwindcss/dist/tailwind.min.css\"\n  rel=\"stylesheet\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using CoolMode component with a button\nDESCRIPTION: Wraps a button element with the CoolMode component to enable the particle effect on click.  This is a basic example showcasing the component's usage.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/cool-mode.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<CoolMode>\n  <button>Click me</button>\n</CoolMode>\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS Dependencies\nDESCRIPTION: Installs Tailwind CSS, PostCSS, and Autoprefixer as development dependencies using npm. This command is essential for setting up Tailwind CSS in a project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-landing-page.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss postcss autoprefixer\n```\n\n----------------------------------------\n\nTITLE: Importing CSS into App.tsx\nDESCRIPTION: This line imports the `index.css` file into the `App.tsx` file, making the Tailwind CSS styles available to the entire application.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/install-tailwind-react.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"./index.css\";\n```\n\n----------------------------------------\n\nTITLE: Import Marquee component in TSX\nDESCRIPTION: This import statement allows you to use the Marquee component in your TypeScript React code.  The path `@/components/magicui/marquee.tsx` should be adjusted to match the actual location of the component file in your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/marquee.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Marquee } from \"@/components/magicui/marquee.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Starting React App with npm\nDESCRIPTION: This command is used to start the React application after Tailwind CSS has been configured. It typically runs a development server and opens the application in a web browser.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-font-size.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing File Tree with CLI\nDESCRIPTION: This command installs the File Tree component from MagicUI using the `shadcn` CLI tool. It simplifies the integration process by automatically adding the necessary files to your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/file-tree.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/file-tree\"\n```\n\n----------------------------------------\n\nTITLE: Adding Conditional Rendering to MUI Transition\nDESCRIPTION: This snippet shows how to use conditional rendering to trigger a transition based on a specific condition. It demonstrates how to wrap a component with a `Transition` and conditionally render its content based on the `show` state. This allows for animating the appearance and disappearance of the component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Transition in={show} timeout={500}>\n    \n  {show && (\n    <div>This component will appear or disappear based on the show state.</div>\n  )}\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Installing Material-UI dependencies using npm\nDESCRIPTION: This command installs the necessary Material-UI dependencies including @mui/material, @emotion/react, and @emotion/styled using npm. These packages are required to utilize Material-UI components in a React project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-table.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/material @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Updating UI Registry\nDESCRIPTION: This code snippet updates the UI registry (`registry/registry-ui.ts`) to include metadata about the new `example-component`.  It specifies the component's name, type, title, description, dependencies (motion), file paths, CSS variables (theme), and CSS keyframes. This information is used by the MagicUI system to manage and render the component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport const ui: Registry = [\n  // ... existing components ...\n  {\n    name: \"example-component\",\n    type: \"registry:ui\",\n    title: \"Example Component\",\n    description:\n      \"A versatile component that can be used to display various types of content such as text, images, or videos.\",\n    dependencies: [\"motion\"],\n    files: [\n      {\n        path: \"registry/magicui/example-component.tsx\",\n        type: \"registry:ui\",\n        target: \"components/magicui/example-component.tsx\",\n      },\n    ],\n    // Add CSS variables for the component\n    cssVars: {\n      theme: {\n        \"animate-example\": \"example var(--duration) infinite linear\",\n      },\n    },\n    // Add CSS keyframes for the component\n    css: {\n      \"@keyframes example\": {\n        from: {\n          transform: \"translateX(0)\",\n        },\n        to: {\n          transform: \"translateX(calc(-100% - var(--gap)))\",\n        },\n      },\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Use Dot Pattern component in TSX\nDESCRIPTION: This code snippet demonstrates how to use the `DotPattern` component within a `div` element. The `div` has a relative position, a fixed height of 500px, a full width, and overflow hidden. This creates a container for the dot pattern.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/dot-pattern.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"relative h-[500px] w-full overflow-hidden\">\n  <DotPattern />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch\nDESCRIPTION: This command creates a new branch named `my-new-branch` and switches to it. This allows you to isolate your changes from the main branch during development.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-new-branch\n```\n\n----------------------------------------\n\nTITLE: Add CSS animations for Marquee\nDESCRIPTION: These CSS animations define the scrolling behavior for the Marquee component, both horizontally and vertically. They should be added within the `@theme inline` block in the global CSS file. The `--duration` and `--gap` variables control the animation speed and spacing.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/marquee.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--animate-marquee: marquee var(--duration) infinite linear;\n--animate-marquee-vertical: marquee-vertical var(--duration) linear infinite;\n\n@keyframes marquee {\n  from {\n    transform: translateX(0);\n  }\n  to {\n    transform: translateX(calc(-100% - var(--gap)));\n  }\n}\n@keyframes marquee-vertical {\n  from {\n    transform: translateY(0);\n  }\n  to {\n    transform: translateY(calc(-100% - var(--gap)));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Application\nDESCRIPTION: This command creates a new React application using Create React App, initializing a basic project structure with necessary dependencies and configurations for development.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-hero-component.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app my-app\n```\n\n----------------------------------------\n\nTITLE: Importing Sass in React\nDESCRIPTION: This line imports a Sass file (.scss) into a React component, enabling the component to utilize styles defined within the Sass file.  The Sass file will be compiled into CSS during the build process.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-hero-component.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./App.scss\";\n```\n\n----------------------------------------\n\nTITLE: Updating Examples Registry\nDESCRIPTION: This code snippet updates the examples registry (`registry/registry-examples.ts`) to include metadata about the `example-component-demo`.  It specifies the demo's name, description, type, dependencies (example-component), and file path. This information is used to manage and showcase the component demo within the MagicUI system.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport const examples: Registry = [\n  // ... existing examples ...\n  {\n    name: \"example-component-demo\",\n    description: \"An example of the example-component\",\n    type: \"registry:example\",\n    registryDependencies: [\"example-component\"],\n    files: [\n      {\n        path: \"registry/example/example-component-demo.tsx\",\n        type: \"registry:example\",\n      },\n    ],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Presentational and Container Components Structure in React\nDESCRIPTION: This code demonstrates the structure of Presentational and Container Components in React. The ContainerComponent manages the state and logic. It fetches data, handles events, and passes data down as props to the PresentationalComponent. The PresentationalComponent receives data and callbacks through props and focuses on rendering the UI. This separation improves code organization and maintainability.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-design-patterns.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { Component } from \"react\";\nimport PresentationalComponent from \"./PresentationalComponent\";\nclass ContainerComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Initialize state\n    };\n  }\n  componentDidMount() {\n    // Fetch data or perform initialization logic\n  }\n  handleEvent = () => {\n    // Handle events and update state if needed\n  };\n  render() {\n    return (\n      <div>\n        <PresentationalComponent\n          prop1={this.state.data}\n          prop2=\"Some value\"\n          onClick={this.handleEvent}\n        />\n      </div>\n    );\n  }\n}\nexport default ContainerComponent;\n\n```\n\n----------------------------------------\n\nTITLE: Fixing Linting Issues with ESLint\nDESCRIPTION: This command automatically fixes linting issues using ESLint via `pnpm`. This helps maintain code quality and consistency.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npnpm lint:fix\n```\n\n----------------------------------------\n\nTITLE: Adding Avatar Circles Component via CLI\nDESCRIPTION: This command uses the `shadcn` CLI to add the Avatar Circles component to your project.  It fetches the component from the specified URL. Requires `shadcn` to be installed globally or locally.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/avatar-circles.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/avatar-circles\"\n```\n\n----------------------------------------\n\nTITLE: Sass Function Example\nDESCRIPTION: This Sass example demonstrates the use of functions to perform calculations and manipulate values dynamically within styles. The `calculate-spacing` function calculates a spacing value based on a base and a multiplier, allowing for flexible and responsive design.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-hero-component.mdx#_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@function calculate-spacing($base, $multiplier) { @return $base * $multiplier; }\n```\n\n----------------------------------------\n\nTITLE: Initializing Shadcn UI\nDESCRIPTION: This command initializes Shadcn UI in the project.  It installs the necessary dependencies and configures the project to use Shadcn UI components.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/vite.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init\n```\n\n----------------------------------------\n\nTITLE: Import GridPattern Component\nDESCRIPTION: This import statement allows you to use the `GridPattern` component in your React/Typescript code.  It assumes the component is located in the `@/components/magicui` directory. You'll need to adjust the path based on your project structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/grid-pattern.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GridPattern } from \"@/components/magicui/grid-pattern\";\n```\n\n----------------------------------------\n\nTITLE: Installing Line Shadow Text Component with CLI\nDESCRIPTION: This command uses the `shadcn` CLI to add the Line Shadow Text component directly from the Magic UI repository.  It simplifies the installation process by automating the download and setup of the component in your project. Make sure you have shadcn installed and configured.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/line-shadow-text.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/line-shadow-text\"\n```\n\n----------------------------------------\n\nTITLE: Astro Project Configuration Prompts\nDESCRIPTION: These prompts appear during Astro project creation via the CLI. They allow the user to specify the project directory, select a starter template, enable TypeScript, configure TypeScript strictness, install dependencies, and initialize a Git repository.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/astro.mdx#_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n- Where should we create your new project? ./your-app-name\n- How would you like to start your new project? Choose a template\n- Do you plan to write TypeScript? Yes\n- How strict should TypeScript be? Strict\n- Install dependencies? Yes\n- Initialize a new git repository? (optional) Yes/No\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-node.ts for path resolution\nDESCRIPTION: This code snippet configures the `gatsby-node.ts` file to define webpack aliases. These aliases help Gatsby resolve paths correctly, especially for components and utility functions, making imports more concise and readable. It uses the `path` module to resolve absolute paths.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/gatsby.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as path from \"path\";\n\nexport const onCreateWebpackConfig = ({ actions }) => {\n  actions.setWebpackConfig({\n    resolve: {\n      alias: {\n        \"@/components\": path.resolve(__dirname, \"src/components\"),\n        \"@/lib/utils\": path.resolve(__dirname, \"src/lib/utils\"),\n      },\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Installing react-virtualized using npm\nDESCRIPTION: This command installs the react-virtualized library, which is used for efficiently rendering large lists in React applications. It is a dependency for implementing list visualization or windowing techniques to improve performance.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-component-best-practices.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-virtualized --save\n```\n\n----------------------------------------\n\nTITLE: Installing React Router\nDESCRIPTION: This command installs the react-router-dom package, which is used for implementing routing in a React application. Routing allows navigation between different pages or views within the application without full page reloads.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-header.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-router-dom\n```\n\n----------------------------------------\n\nTITLE: Creating a new Gatsby project\nDESCRIPTION: This command initializes a new Gatsby project using the `create-gatsby` CLI tool. It sets up the basic project structure and configuration based on user prompts.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/gatsby.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init gatsby\n```\n\n----------------------------------------\n\nTITLE: Installing Interactive Grid Pattern using CLI\nDESCRIPTION: This command installs the interactive grid pattern component using the `shadcn-ui` CLI. It fetches the component directly from the specified URL on `magicui.design`.  Requires `shadcn-ui` CLI to be installed.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/interactive-grid-pattern.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/interactive-grid-pattern\"\n```\n\n----------------------------------------\n\nTITLE: Use MagicUI Pointer Component\nDESCRIPTION: A simple example demonstrating the usage of the `Pointer` component. This snippet shows how to render the component within a JSX context.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/pointer.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Pointer />\n```\n\n----------------------------------------\n\nTITLE: Configuring components.json with Shadcn UI\nDESCRIPTION: These lines show the prompts and questions that are displayed when running the Shadcn UI init command. These questions help to configure the project to use a specific style and color scheme.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/vite.mdx#_snippet_7\n\nLANGUAGE: txt\nCODE:\n```\nWhich style would you like to use? › New York\nWhich color would you like to use as base color? › Zinc\nDo you want to use CSS variables for colors? › no / yes\n```\n\n----------------------------------------\n\nTITLE: Import RainbowButton component in React\nDESCRIPTION: This TypeScript snippet shows how to import the `RainbowButton` component into a React application. It assumes the component is located in the specified path within your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/rainbow-button.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowButton } from \"@/components/magicui/rainbow-button\";\n```\n\n----------------------------------------\n\nTITLE: Installing HyperText component via CLI\nDESCRIPTION: This command installs the HyperText component from the magicui.design registry using the shadcn CLI. It automates the process of adding the component and its dependencies to your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/hyper-text.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/hyper-text\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory\nDESCRIPTION: This command navigates the terminal to the newly created React project directory. It's a standard command line operation to move into the project's root folder after initializing it.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-header.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-app\n```\n\n----------------------------------------\n\nTITLE: Install canvas-confetti Dependency\nDESCRIPTION: This command installs the canvas-confetti library, which is a dependency for the Confetti component. This is necessary for manual installation of the Confetti component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/confetti.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install canvas-confetti\n```\n\n----------------------------------------\n\nTITLE: Creating Animations Using Webflow Interactions\nDESCRIPTION: Webflow's built-in interactions and animations feature provides a visual interface to design animations without writing code. Animations can be triggered by user actions such as scrolling or clicking, and applied to various elements on the landing page. This facilitates the creation of interactive and engaging experiences.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/animated-landing-page.mdx#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Importing Interactive Grid Pattern Component\nDESCRIPTION: This import statement allows you to use the `InteractiveGridPattern` component within your React/Typescript project. The path `@/components/magicui/interactive-grid-pattern` should be adjusted based on your project's file structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/interactive-grid-pattern.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InteractiveGridPattern } from \"@/components/magicui/interactive-grid-pattern\";\n```\n\n----------------------------------------\n\nTITLE: Importing the Globe Component\nDESCRIPTION: This import statement allows you to use the `Globe` component in your React code.  The path `\"@/components/magicui/globe\"` might need to be adjusted based on your project structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/globe.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Globe } from \"@/components/magicui/globe\";\n```\n\n----------------------------------------\n\nTITLE: Start React App\nDESCRIPTION: Commands to start the React application using either `yarn start` or `npm start`.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-box.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Import BorderBeam component in TypeScript\nDESCRIPTION: This import statement allows you to use the BorderBeam component in your TypeScript/JSX code.  It assumes the component is located in the '@/components/magicui/border-beam.tsx' file.  Make sure the file path is correct for your project structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/border-beam.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BorderBeam } from \"@/components/magicui/border-beam.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Globals File\nDESCRIPTION: This CSS file defines the base styles, components, and utilities for Tailwind CSS. It imports Tailwind's preflight styles, component definitions, and utility classes, providing a foundation for styling the Astro project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/astro.mdx#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory\nDESCRIPTION: This command changes the current directory to the `magicui` project directory, allowing you to execute commands within the project's context.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd magicui\n```\n\n----------------------------------------\n\nTITLE: Setting up the 'in' Prop for MUI Transition\nDESCRIPTION: This snippet shows how to set up the `in` prop for an MUI `Transition` component. The `in` prop controls the visibility of the component, triggering the animation when its value changes. The `timeout` prop sets the duration of the transition in milliseconds.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Transition in={show} timeout={500}>\n    {/* Your component */}\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Importing LineShadowText Component\nDESCRIPTION: This line imports the `LineShadowText` component from the `@/components/magicui/line-shadow-text` path.  You need to adjust the import path according to your project's file structure. This import makes the component available for use in your React code.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/line-shadow-text.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LineShadowText } from \"@/components/magicui/line-shadow-text\";\n```\n\n----------------------------------------\n\nTITLE: Fade-in CSS Class\nDESCRIPTION: This CSS class sets the initial opacity of an element to 0, making it invisible. This is often used as the starting point for a fade-in animation.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_12\n\nLANGUAGE: CSS\nCODE:\n```\n.fade-in {\n  opacity: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript types for Node.js\nDESCRIPTION: This command installs the TypeScript type definitions for Node.js. This allows you to import and use Node.js modules in your TypeScript code without encountering type errors.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/vite.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# (so you can import \"path\" without error)\nnpm i -D @types/node\n```\n\n----------------------------------------\n\nTITLE: Creating React App with TypeScript\nDESCRIPTION: These commands demonstrate how to create a new React application using Create React App with TypeScript. This allows for type safety, improved code readability, and scalability. It uses either npm or yarn.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-tips.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpx create-react-app my-app --template typescript\n```\n\nLANGUAGE: Shell\nCODE:\n```\nyarn create react-app my-app --template typescript\n```\n\n----------------------------------------\n\nTITLE: Importing Shiny Button Component\nDESCRIPTION: This import statement is necessary to utilize the ShinyButton component within a React/Typescript application.  It assumes the component is located in the specified directory structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/shiny-button.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ShinyButton } from \"@/components/magicui/shiny-button\";\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Demo with HTML\nDESCRIPTION: This snippet embeds a video demo of the mobile app within the landing page using HTML's `<video>` tag. The video is set to autoplay, loop, and be muted. It's styled with TailwindCSS classes for width, rounded corners, and a border.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/templates/mobile.mdx#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"flex max-w-[800px] flex-col gap-4\">\n  <video\n    autoPlay\n    loop\n    muted\n    src=\"/mobile-demo.mp4\"\n    className=\"w-full rounded-xl border\"\n  />\n  <div className=\"flex w-full flex-col gap-2 sm:flex-row\">\n    <RepoDownload repo={\"mobile-template\"} owner={\"magicuidesign\"} />\n    <TemplatePreview href=\"https://mobile-magicui.vercel.app/\">\n      Live Preview\n    </TemplatePreview>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Smooth Cursor in React\nDESCRIPTION: This snippet demonstrates how to import the SmoothCursor component into a React page and render it. The component is added to the page, and the SmoothCursor functionality will then be active.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/smooth-cursor.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SmoothCursor } from \"@/components/ui/smooth-cursor\";\n\nexport default function Page() {\n  return (\n    <>\n      <SmoothCursor />\n      {/* Your page content */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing File Tree Components\nDESCRIPTION: This import statement retrieves the `File`, `Folder`, and `Tree` components from the `@/components/magicui/file-tree` module.  These components are essential for constructing the file tree structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/file-tree.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { File, Folder, Tree } from \"@/components/magicui/file-tree\";\n```\n\n----------------------------------------\n\nTITLE: Importing the BlurFade Component\nDESCRIPTION: This import statement allows you to use the `BlurFade` component in your React application.  It assumes the component is located in the `@/components/magicui/blur-fade` directory.  Update the path to match your project structure if needed.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/blur-fade.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BlurFade } from \"@/components/magicui/blur-fade\";\n```\n\n----------------------------------------\n\nTITLE: Releasing CLI\nDESCRIPTION: This command releases the CLI using `pnpm`. This publishes the CLI tool for users to install and use.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npnpm run release:cli\n```\n\n----------------------------------------\n\nTITLE: Add rainbow animations to globals.css\nDESCRIPTION: This CSS snippet defines the `rainbow` animation, creating a smooth transition of background positions. It also defines a custom property `--animate-rainbow` which is a combined animation property using `rainbow` animation.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/rainbow-button.mdx#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@theme inline {\n  --animate-rainbow: rainbow var(--speed, 2s) infinite linear;\n\n  @keyframes rainbow {\n    0% {\n      background-position: 0%;\n    }\n    100% {\n      background-position: 200%;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add CSS Animations for Shine Effect\nDESCRIPTION: This CSS code defines the `@keyframes` animation for the shine effect. The `--animate-shine` variable is then defined using the `shine` animation which is set to loop indefinitely. The `background-position` is animated from 0% to 100% and back to 0% to create the shining effect.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/shine-border.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@theme inline {\n  --animate-shine: shine var(--duration) infinite linear;\n\n  @keyframes shine {\n    0% {\n      background-position: 0% 0%;\n    }\n    50% {\n      background-position: 100% 100%;\n    }\n    to {\n      background-position: 0% 0%;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import TextAnimate Component\nDESCRIPTION: Imports the TextAnimate component from the specified path within your project.  Adjust the import path to match your project's directory structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/text-animate.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextAnimate } from \"@/components/magicui/text-animate\";\n```\n\n----------------------------------------\n\nTITLE: Adding a MagicUI component\nDESCRIPTION: The `add` command adds a specific MagicUI component to your project and installs required dependencies.  Replace `[component]` with the name of the component you want to add. This command is run in the terminal.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/packages/cli/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx magicui-cli add [component]\n```\n\n----------------------------------------\n\nTITLE: Default Next.js Folder Structure\nDESCRIPTION: This snippet represents the default folder structure for a new Next.js project, showcasing the core directories: `app`, `public`, and `styles`.  These folders are fundamental to Next.js applications and should be renamed only with careful consideration and adjustments to configurations.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/next-js-app.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n# other files and folders, .gitignore, package.json...\n/app\n├── api\n│   └── hello.js\n├── page.js\n/public\n├── favicon.ico\n├── vercel.svg\n/styles\n├── globals.css\n└── Home.module.css\n```\n\n----------------------------------------\n\nTITLE: Using the Globe Component\nDESCRIPTION: This JSX code snippet demonstrates how to render the `Globe` component in your React application.  It assumes that the component has been imported correctly.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/globe.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Globe />\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server Manually\nDESCRIPTION: This JSON snippet configures the Model Context Protocol (MCP) server for Magic UI.  It adds a new entry to the `mcpServers` configuration, specifying the command to execute (`npx`) and the arguments needed to start the Magic UI MCP server. This configuration needs to be added to your IDE's MCP configuration file.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/mcp.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"@magicuidesign/mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@magicuidesign/mcp@latest\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Orbit Animation CSS\nDESCRIPTION: These CSS keyframes define the orbit animation used by the Orbiting Circles component.  The animation rotates and translates the circles to create the orbiting effect. It is important to define the animation within the `@theme inline` block for proper theming.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/orbiting-circles.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@theme inline {\n  --animate-orbit: orbit calc(var(--duration) * 1s) linear infinite;\n\n  @keyframes orbit {\n    0% {\n      transform: rotate(calc(var(--angle) * 1deg))\n        translateY(calc(var(--radius) * 1px)) rotate(calc(var(--angle) * -1deg));\n    }\n    100% {\n      transform: rotate(calc(var(--angle) * 1deg + 360deg))\n        translateY(calc(var(--radius) * 1px))\n        rotate(calc((var(--angle) * -1deg) - 360deg));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running CLI in Development\nDESCRIPTION: This command starts the CLI in development mode using `pnpm`. This allows developers to test and develop the CLI tool locally.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev:cli\n```\n\n----------------------------------------\n\nTITLE: Importing CSS in React\nDESCRIPTION: This line imports a CSS file into a React component, allowing the styles defined in the CSS file to be applied to the component's elements. The import statement specifies the relative path to the CSS file.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-hero-component.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./App.css\";\n```\n\n----------------------------------------\n\nTITLE: Configure components.json (Text)\nDESCRIPTION: These are the questions asked during the configuration of the components.json file using the shadcn-ui CLI. The user is prompted to select a style, base color, and whether to use CSS variables for colors. The input will determine the theme and customization options for the project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/next.mdx#_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nWhich style would you like to use? › New York\nWhich color would you like to use as base color? › Zinc\nDo you want to use CSS variables for colors? › no / yes\n```\n\n----------------------------------------\n\nTITLE: Import Animated Subscribe Button Component\nDESCRIPTION: Imports the `AnimatedSubscribeButton` component from the `@/components/magicui/animated-subscribe-button` path.  This is necessary to use the component in your application.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/animated-subscribe-button.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AnimatedSubscribeButton } from \"@/components/magicui/animated-subscribe-button\";\n```\n\n----------------------------------------\n\nTITLE: Rendering ClientTweetCard on Client Side\nDESCRIPTION: This code snippet shows how to render the `ClientTweetCard` component on the client side. It imports the component and passes the tweet ID as a prop. The `'use client'` directive is required to mark the component as a client-side component in Next.js. This requires the component to be located at `@/components/magicui/client-tweet-card.tsx`.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/tweet-card.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { ClientTweetCard } from \"@/components/magicui/client-tweet-card.tsx\";\n\nexport default function App() {\n  return <ClientTweetCard id=\"1441032681968212480\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Transition (JavaScript)\nDESCRIPTION: This snippet demonstrates how to implement a custom transition in React, using a div with a CSS class. This allows for the implementation of more specific transition effects.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Transition in={show} timeout={500}>\n  <div className=\"animated-element\">{/* Your content */}</div>\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Render MUI Box with Styling\nDESCRIPTION: A React component (`App`) that renders a Material UI Box component with custom styling applied using the `sx` prop. Includes padding and a dashed border style, demonstrating how to style the Box directly.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-box.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Box } from \"@material-ui/core\";\nimport \"./styles.css\";\n\nfunction App() {\n  return (\n    <Box component=\"section\" sx={{ p: 20, border: \"1px dashed grey\" }}>\n      This is an MUI Box\n    </Box>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n```\n\n----------------------------------------\n\nTITLE: Import Flickering Grid component\nDESCRIPTION: This import statement allows you to use the `FlickeringGrid` component in your TypeScript/JSX code. It assumes the component is located in the `@/components/magicui/flickering-grid` directory.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/flickering-grid.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FlickeringGrid } from \"@/components/magicui/flickering-grid\";\n```\n\n----------------------------------------\n\nTITLE: Importing Interactive Hover Button Component\nDESCRIPTION: This import statement allows you to use the InteractiveHoverButton component in your React application.  The component is assumed to be located in the `@/components/magicui/interactive-hover-button` path. Update the path according to your project's directory structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/interactive-hover-button.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InteractiveHoverButton } from \"@/components/magicui/interactive-hover-button\";\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for path resolution\nDESCRIPTION: This code snippet demonstrates how to modify the `tsconfig.json` file to define path aliases. This allows for cleaner and more maintainable imports within the TypeScript project, particularly for accessing files within the `src` directory.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/gatsby.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\n        \"./src/*\"\n      ]\n    }\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Magic UI MCP Server with CLI\nDESCRIPTION: This command uses the Magic UI CLI to install the MCP server for a specific IDE. The `npx` command executes the CLI installer with the specified IDE as a parameter.  Replace `cursor`, `windsurf`, `claude`, `cline`, or `roo-cline` with the target IDE. This installs the necessary configurations for the IDE to use the Magic UI MCP server.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/mcp.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @magicuidesign/cli@latest install cursor\n```\n\n----------------------------------------\n\nTITLE: Importing TextReveal component in React\nDESCRIPTION: This import statement allows you to use the TextReveal component within your React application.  The path `@/components/magicui/text-reveal` should be adjusted to match the actual location of the component file in your project. This assumes you have installed the component either manually or using the CLI.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/text-reveal.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextReveal } from \"@/components/magicui/text-reveal\";\n```\n\n----------------------------------------\n\nTITLE: Fade Transition Example (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the Fade transition component from Material-UI (MUI). It wraps content within a Transition and Fade component to create a fade-in/fade-out effect based on the 'show' prop. The 'timeout' prop specifies the duration of the transition in milliseconds.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Transition in={show} timeout={500}>\n  <Fade in={show}>{/* Your content */}</Fade>\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: CSS Keyframes Definition for Fade and Rotate\nDESCRIPTION: This CSS code defines the keyframes for the 'fadeInRotate' animation. It controls the opacity and rotation of the element at different stages of the animation (0%, 50%, and 100%). The text fades in and rotates from 0 to 360 degrees, creating a continuous animation loop. It is crucial to have defined the element that will receive this animation.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/text-animation-css.mdx#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n@keyframes fadeInRotate {\n  0% {\n    opacity: 0;\n    transform: rotate(0deg);\n  }\n  50% {\n    opacity: 1;\n    transform: rotate(180deg);\n  }\n  100% {\n    opacity: 1\t\n    transform: rotate(360deg);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Animation Declaration\nDESCRIPTION: This CSS snippet applies the 'fadeInRotate' animation to the element with the ID 'animated-text'. It sets the animation duration to 2 seconds, uses the 'ease-in-out' timing function for a smooth transition, and makes the animation loop infinitely. This declaration is the first step in creating the animated text effect.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/text-animation-css.mdx#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n#animated-text {\n  animation: fadeInRotate 2s ease-in-out infinite;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding animated grid pattern via CLI\nDESCRIPTION: This command uses the `shadcn` CLI tool to add the animated grid pattern component to your project.  It fetches the component from a remote URL hosted on magicui.design. This assumes that shadcn is correctly installed and configured in the target project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/animated-grid-pattern.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/animated-grid-pattern\"\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Animations for Retro Grid\nDESCRIPTION: These CSS rules define the animation keyframes and apply them to the grid. The `@theme inline` directive suggests integration within a theme system. The keyframes create a scrolling effect by translating the grid vertically.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/retro-grid.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@theme inline {\n  --animate-grid: grid 15s linear infinite;\n\n  @keyframes grid {\n    0% {\n      transform: translateY(-50%);\n    }\n    100% {\n      transform: translateY(0);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TransitionGroup Example (JavaScript)\nDESCRIPTION: This code demonstrates using TransitionGroup and CSSTransition for animating a list of items. Each item is wrapped in a CSSTransition component, which applies CSS classes based on the transition state.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n<TransitionGroup>\n  {items.map((item) => (\n    <CSSTransition key={item.id} timeout={500} classNames=\"fade\">\n      {/* Your component */}\n    </CSSTransition>\n  ))}\n</TransitionGroup>\n```\n\n----------------------------------------\n\nTITLE: Using WarpBackground Component\nDESCRIPTION: This example demonstrates how to use the `WarpBackground` component to wrap content. The content within the `<WarpBackground>` tags will have the warp background effect applied.  The `className` prop is used to style the inner div.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/warp-background.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<WarpBackground>\n  <div className=\"w-80\">\n    <p>Warp Background</p>\n    <p>This is a component that creates a warp background effect.</p>\n  </div>\n</WarpBackground>\n```\n\n----------------------------------------\n\nTITLE: Importing AuroraText Component\nDESCRIPTION: This import statement allows you to use the AuroraText component in your TypeScript/JSX code. Ensure the path matches your project's file structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/aurora-text.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuroraText } from \"@/components/magicui/aurora-text\";\n```\n\n----------------------------------------\n\nTITLE: Basic Marquee usage in TSX\nDESCRIPTION: This example demonstrates how to use the Marquee component with a list of text spans as children. The content within the Marquee will scroll infinitely.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/marquee.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Marquee>\n  <span>Next.js</span>\n  <span>React</span>\n  <span>TypeScript</span>\n  <span>Tailwind CSS</span>\n</Marquee>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Shadcn UI Button Component\nDESCRIPTION: This TypeScript JSX snippet demonstrates how to import and use the `Button` component from Shadcn UI in a React component. The `Button` component is imported from the `@/components/ui/button` path (using the configured path alias).\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/vite.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Home() {\n  return (\n    <div>\n      <Button>Click me</Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Bento Grid Components (TSX)\nDESCRIPTION: This code snippet demonstrates how to import the `BentoCard` and `BentoGrid` components from the `@/components/magicui/bento-grid` module in a TypeScript React project. This import statement makes the components available for use in your JSX code.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/bento-grid.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BentoCard, BentoGrid } from \"@/components/magicui/bento-grid\";\n```\n\n----------------------------------------\n\nTITLE: Update globals.css with rainbow color variables\nDESCRIPTION: This CSS snippet defines color variables for the rainbow effect. These variables are used to control the color gradients in the button's animation. This is needed for the rainbow effect to render properly.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/rainbow-button.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --color-1: 0 100% 63%;\n  --color-2: 270 100% 63%;\n  --color-3: 210 100% 63%;\n  --color-4: 195 100% 63%;\n  --color-5: 90 100% 63%;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Astro Project\nDESCRIPTION: This command uses npm to create a new Astro project. It initiates the Astro CLI, prompting the user with a series of configuration questions, such as project name, template selection, TypeScript usage, and dependency installation.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/astro.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest\n```\n\n----------------------------------------\n\nTITLE: handleEnter function (JavaScript)\nDESCRIPTION: This JavaScript function is used as the onEnter handler. It scales down an element initially and then scales it back up to its original size after a short delay, creating a scaling animation effect.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction handleEnter(node) {\n  node.style.transform = \"scale(0.8)\";\n  setTimeout(() => {\n    node.style.transform = \"scale(1)\";\n  }, 100);\n}\n```\n\n----------------------------------------\n\nTITLE: Add Animated Gradient CSS Animations\nDESCRIPTION: These CSS rules define the gradient animation used by the Animated Gradient Text component. The `@theme inline` directive is presumably used within a theming system. The `gradient` keyframes define an infinite animation that changes the background position.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/animated-gradient-text.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@theme inline {\n  --animate-gradient: gradient 8s linear infinite;\n\n  @keyframes gradient {\n    to {\n      background-position: var(--bg-size, 300%) 0;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use Ripple Component\nDESCRIPTION: This code snippet demonstrates how to use the Ripple component within a React component. It wraps the Ripple component in a `div` with specific styling for positioning and overflow. The `h-[500px]` and `w-full` styles set the height and width of the container.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/ripple.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"relative h-[500px] w-full overflow-hidden\">\n  <Ripple />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Transition with onEnter and onExit (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to create custom transitions using the onEnter and onExit event handlers of the Transition component. These handlers allow you to modify the element's style before and after the transition.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Transition in={show} timeout={1000} onEnter={handleEnter} onExit={handleExit}>\n  {/* Your content */}\n</Transition>\n```\n\n----------------------------------------\n\nTITLE: Using the HeroVideoDialog Component\nDESCRIPTION: This snippet demonstrates how to use the `HeroVideoDialog` component in a React application.  It sets the `animationStyle` to `from-center`, specifies the `videoSrc` and `thumbnailSrc`, and provides `thumbnailAlt` text.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/hero-video-dialog.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<HeroVideoDialog\n  className=\"block dark:hidden\"\n  animationStyle=\"from-center\"\n  videoSrc=\"https://www.example.com/dummy-video\"\n  thumbnailSrc=\"https://www.example.com/dummy-thumbnail.png\"\n  thumbnailAlt=\"Dummy Video Thumbnail\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Destructuring Props in React\nDESCRIPTION: This code snippet demonstrates how to use object destructuring to access props within a React component. Destructuring enhances code readability and reduces verbosity. It improves the clarity of component interfaces and simplifies identifying used props.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-component-best-practices.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {name, age} = props\n```\n\n----------------------------------------\n\nTITLE: Exporting Component from index.ts\nDESCRIPTION: This snippet demonstrates how to export the Button component and its associated ButtonProps interface from an index.ts file. This allows other modules to import and use the component and its props easily. It promotes modularity and reusability.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/create-react-component-library.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport { Button, ButtonProps } from \"./components/Button\"\n```\n\n----------------------------------------\n\nTITLE: Importing WarpBackground Component\nDESCRIPTION: This import statement allows you to use the `WarpBackground` component in your React application.  It assumes the component is located in the `@/components/magicui` directory. Ensure the path matches your project structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/warp-background.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WarpBackground } from \"@/components/magicui/warp-background\";\n```\n\n----------------------------------------\n\nTITLE: Import Flip Text Component\nDESCRIPTION: This import statement allows the FlipText component to be used in a TypeScript React component.  It assumes the component is located in the '@/components/magicui/flip-text' path.  Update the import path to match your project setup.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/flip-text.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FlipText } from \"@/components/magicui/flip-text\";\n```\n\n----------------------------------------\n\nTITLE: Importing MagicCard Component\nDESCRIPTION: This import statement allows you to use the MagicCard component in your React application.  The path `@/registry/magicui/magic-card` should match the actual location of the MagicCard component file in your project. Adjust accordingly if the directory structure is different.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/magic-card.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MagicCard } from \"@/registry/magicui/magic-card\";\n```\n\n----------------------------------------\n\nTITLE: Defining Default Spring Configuration\nDESCRIPTION: This TypeScript code defines the default values for the SpringConfig interface, used to control the physics-based animation of the SmoothCursor component. These values can be customized to adjust the feel of the cursor movement.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/smooth-cursor.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultSpringConfig = {\n  damping: 45,\n  stiffness: 400,\n  mass: 1,\n  restDelta: 0.001,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing MagicUI project\nDESCRIPTION: The `init` command sets up a new project with MagicUI dependencies. It installs `framer-motion`, adds the `cn` utility function, configures `tailwind.config.js`, and sets up CSS variables for the project.  This command is executed via the command line.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/packages/cli/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx magicui-cli init\n```\n\n----------------------------------------\n\nTITLE: Defining SpringConfig Interface\nDESCRIPTION: This TypeScript interface defines the structure for configuring the spring animation behavior of the SmoothCursor component. It includes properties for damping, stiffness, mass, and restDelta.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/smooth-cursor.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SpringConfig {\n  damping: number; // Controls how quickly the animation settles\n  stiffness: number; // Controls the spring stiffness\n  mass: number; // Controls the virtual mass of the animated object\n  restDelta: number; // Controls the threshold at which animation is considered complete\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MUI React Package\nDESCRIPTION: This command installs the MUI React package along with its required dependencies (@emotion/react and @emotion/styled) using NPM. This allows developers to access and utilize MUI components in their React projects.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-react.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @mui/material @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Import and Use MUI Box\nDESCRIPTION: Imports the Box component from `@mui/system` and demonstrates its basic usage within a React function component.  The example sets the `component` prop to `section` and applies a margin.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-box.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Box } from \"@mui/system\";\n\nexport default function BoxExample() {\n  return (\n    <Box component=\"section\" m={1}>\n      This is a box\n    </Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: handleExit function (JavaScript)\nDESCRIPTION: This JavaScript function is used as the onExit handler. It scales an element down after a short delay, creating a scaling animation effect before it exits the view.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction handleExit(node) {\n  node.style.transform = \"scale(1)\";\n\n  setTimeout(() => {\n    node.style.transform = \"scale(0.8)\";\n  }, 100);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Number Ticker Usage\nDESCRIPTION: This code snippet demonstrates a basic implementation of the NumberTicker component. It sets the `value` prop to 100, which is the target number that the ticker will count to. The component handles the animation and display of the number.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/number-ticker.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberTicker value={100} />\n```\n\n----------------------------------------\n\nTITLE: Using AnimatedGridPattern Component\nDESCRIPTION: This code snippet demonstrates how to use the `AnimatedGridPattern` component in a React application. It renders the component, which will display the animated grid pattern. It assumes the component has been correctly imported.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/animated-grid-pattern.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<AnimatedGridPattern />\n```\n\n----------------------------------------\n\nTITLE: Importing HyperText component in React\nDESCRIPTION: This import statement allows you to use the HyperText component in your React application.  It assumes the component is located in the `@/components/magicui/hyper-text` path.  Adjust the path as necessary to match your project structure.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/hyper-text.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HyperText } from \"@/components/magicui/hyper-text\";\n```\n\n----------------------------------------\n\nTITLE: Basic File Tree Example\nDESCRIPTION: This code demonstrates a simple file tree structure using the `Tree`, `Folder`, and `File` components.  It creates a nested folder structure with files inside.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/file-tree.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Tree>\n  <Folder>\n    <Folder>\n      <File>layout.tsx</File>\n      <File>page.tsx</File>\n    </Folder>\n  </Folder>\n</Tree>\n```\n\n----------------------------------------\n\nTITLE: Importing Shimmer Button Component\nDESCRIPTION: This import statement allows you to use the ShimmerButton component in your React TypeScript files. It assumes the component is located under the `@/components/magicui/shimmer-button` path.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/shimmer-button.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ShimmerButton } from \"@/components/magicui/shimmer-button\";\n```\n\n----------------------------------------\n\nTITLE: Installing Framer Motion dependency\nDESCRIPTION: This command installs the Framer Motion library, a required dependency for the HyperText component when installing manually.  Framer Motion is used for the animation logic of the component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/hyper-text.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install motion\n```\n\n----------------------------------------\n\nTITLE: Importing CodeComparison Component\nDESCRIPTION: This import statement allows you to use the CodeComparison component in your TypeScript/JSX files. Ensure that the component is located in the specified path within your project. It imports the CodeComparison component from the magicui component library.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/code-comparison.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CodeComparison } from \"@/components/magicui/code-comparison\";\n```\n\n----------------------------------------\n\nTITLE: CSS Transition Example\nDESCRIPTION: This CSS snippet demonstrates a simple transition effect for a button's background color on hover. It uses the `transition` property to smoothly change the background color over a specified duration.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/ui-animation.mdx#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.button {\n    transition: background-color 0.3s ease-in-out;\n}\n.button:hover {\n    background-color: #007bff;\n}\n```\n\n----------------------------------------\n\nTITLE: Use VideoText Component\nDESCRIPTION: This example demonstrates how to use the `VideoText` component to display text with a video background. The `src` prop specifies the video URL, and the children prop provides the text to be displayed.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/video-text.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"relative h-[500px] w-full overflow-hidden\">\n  <VideoText src=\"https://cdn.magicui.design/ocean-small.webm\">OCEAN</VideoText>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Retro Grid Component in React\nDESCRIPTION: This import statement makes the `RetroGrid` component available for use in a React component. It assumes the component is located in the `@/components/magicui/retro-grid` path, which is likely an alias configured in the project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/retro-grid.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RetroGrid } from \"@/components/magicui/retro-grid\";\n```\n\n----------------------------------------\n\nTITLE: Add a component with shadcn-ui (Bash)\nDESCRIPTION: This command adds a specified component (e.g., button) to the Next.js project using the shadcn-ui CLI. This command will install the button component and its dependencies, and configure necessary files.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/next.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add button\n```\n\n----------------------------------------\n\nTITLE: Installing Sass in React\nDESCRIPTION: This command installs the 'sass' package as a dependency in a React project, enabling the use of Sass stylesheets (.scss or .sass files) which are then compiled into CSS during the build process.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-hero-component.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sass\n```\n\n----------------------------------------\n\nTITLE: Importing MagicUI components into React\nDESCRIPTION: This code snippet shows how to import specific components (Button, Card, Modal) from the MagicUI library into a React component for use in the user interface.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/animation-libraries.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button, Card, Modal } from \"magicui\";\n```\n\n----------------------------------------\n\nTITLE: Starting a React Application\nDESCRIPTION: This command starts a React application using npm. The 'dev' script in package.json is executed, typically starting a development server for local testing and previewing the application.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-table.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing @radix-ui/react-icons Icon Library with npm\nDESCRIPTION: This command installs `@radix-ui/react-icons`, an icon library, if you're using the 'new-york' style in MagicUI. This library offers an alternative icon set for components.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/manual.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-icons\n```\n\n----------------------------------------\n\nTITLE: Adding all Shadcn-UI components\nDESCRIPTION: This command adds all available Shadcn-UI components to your project using MagicUI's CLI, potentially conflicting if you already have some installed. Executed in the command line.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/packages/cli/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx magicui-cli add --shadcn --all\n```\n\n----------------------------------------\n\nTITLE: Adding React to Astro Project\nDESCRIPTION: This command uses the Astro CLI to add React integration to the current project. It installs the necessary React dependencies and configures the Astro project to support React components.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/astro.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx astro add react\n```\n\n----------------------------------------\n\nTITLE: Import and Use Button Component (TSX)\nDESCRIPTION: This code snippet demonstrates how to import and use the Button component from shadcn-ui in a Next.js component. It imports the Button component from '@/components/ui/button' and renders it within a functional component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/next.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Home() {\n  return (\n    <div>\n      <Button>Click me</Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding all MagicUI components\nDESCRIPTION: This command installs all available MagicUI components in your project. It also installs all dependencies required for these components. Executed in the command line.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/packages/cli/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx magicui-cli add --all\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS in Astro Component\nDESCRIPTION: This code imports the global CSS file (`globals.css`) into the `index.astro` file.  This makes Tailwind CSS styles available to the component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/astro.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@/styles/globals.css'\n```\n\n----------------------------------------\n\nTITLE: Installing Code Comparison via CLI\nDESCRIPTION: This command installs the Code Comparison component using the shadcn CLI. It fetches the component directly from the specified URL. This is the quickest way to add the component to your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/code-comparison.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/code-comparison\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Smooth Cursor Component\nDESCRIPTION: This snippet demonstrates the minimal code needed to render the SmoothCursor component within a React application. Simply including `<SmoothCursor />` in your JSX will activate the smooth cursor effect.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/smooth-cursor.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<SmoothCursor />\n```\n\n----------------------------------------\n\nTITLE: Adding Actions to MUI Card (CardActions)\nDESCRIPTION: This snippet shows how to add actions, such as buttons, to a Material UI Card using the CardActions component. It imports CardActions and Button from @mui/material and places a Button component within the CardActions to enable user interaction.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-card.mdx#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport { CardActions, Button } from \"@mui/material\";\nimport Card from \"@mui/material/Card\";\n<Card>\n  <CardActions>\n    <Button>Click here</Button>\n  </CardActions>\n</Card>;\n```\n\n----------------------------------------\n\nTITLE: Import Safari Component\nDESCRIPTION: This code snippet shows how to import the Safari component into a TypeScript React file. It assumes the component is located in the `@/components/magicui/safari` directory. This is a prerequisite for using the Safari component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/safari.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Safari } from \"@/components/magicui/safari\";\n```\n\n----------------------------------------\n\nTITLE: Install Pulsating Button via CLI\nDESCRIPTION: This command installs the Pulsating Button component using the `shadcn-ui` CLI. It fetches the component directly from the specified URL. Requires `shadcn-ui` to be installed.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/pulsating-button.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/pulsating-button\"\n```\n\n----------------------------------------\n\nTITLE: Importing Ripple Button Component\nDESCRIPTION: This import statement allows you to use the `RippleButton` component within your React/Typescript code.  It assumes the component is located in the '@/components/magicui/ripple-button' path.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/ripple-button.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RippleButton } from \"@/components/magicui/ripple-button\";\n```\n\n----------------------------------------\n\nTITLE: FadeIn and FadeOut Keyframes\nDESCRIPTION: These CSS keyframes define the fadeIn and fadeOut animations. fadeIn transitions the opacity from 0 to 1, while fadeOut transitions it from 1 to 0.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_14\n\nLANGUAGE: CSS\nCODE:\n```\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CoolMode component\nDESCRIPTION: Imports the CoolMode component from the specified path. This assumes the component is located within the '@/components/magicui' directory. Update the path if your project structure differs.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/cool-mode.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CoolMode } from \"@/components/magicui/cool-mode\";\n```\n\n----------------------------------------\n\nTITLE: Fade Enter CSS Class\nDESCRIPTION: This CSS sets the initial opacity of an element during the 'enter' phase of a transition to 0, making it invisible at the start.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_16\n\nLANGUAGE: CSS\nCODE:\n```\n.fade-enter {\n  opacity: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Import Pulsating Button Component\nDESCRIPTION: This line imports the `PulsatingButton` component from the specified path.  The path should be adjusted to match your project's file structure and component location.  This assumes the component is within `@/components/magicui/`\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/pulsating-button.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PulsatingButton } from \"@/components/magicui/pulsating-button\";\n```\n\n----------------------------------------\n\nTITLE: Install Confetti Component via CLI\nDESCRIPTION: This command installs the Confetti component using the shadcn-ui CLI. It fetches the component directly from the specified URL on magicui.design.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/confetti.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/confetti\"\n```\n\n----------------------------------------\n\nTITLE: Using Typing Animation Component\nDESCRIPTION: This code snippet demonstrates how to use the `TypingAnimation` component in a React application.  The text \"Typing Animation\" will be animated.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/typing-animation.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<TypingAnimation>Typing Animation</TypingAnimation>\n```\n\n----------------------------------------\n\nTITLE: Importing Typing Animation Component\nDESCRIPTION: This line imports the `TypingAnimation` component from the specified path within the project. It allows the component to be used within a React component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/typing-animation.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TypingAnimation } from \"@/components/magicui/typing-animation\";\n```\n\n----------------------------------------\n\nTITLE: Fade-out CSS Class\nDESCRIPTION: This CSS class defines the fade-out animation. The element starts with opacity 1 and animates to opacity 0 over 0.5 seconds using an ease-in-out timing function.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_13\n\nLANGUAGE: CSS\nCODE:\n```\n.fade-out {\n  opacity: 1;\n  animation: fadeOut 0.5s ease-in-out;\n}\n```\n\n----------------------------------------\n\nTITLE: Install MagicUI Dock via CLI\nDESCRIPTION: This command installs the MagicUI Dock component using the `shadcn` CLI. It fetches the component directly from the MagicUI design system. Ensure `shadcn` is properly configured in your project before running this command.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/dock.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/dock\"\n```\n\n----------------------------------------\n\nTITLE: Install MagicUI Pointer via CLI\nDESCRIPTION: Installs the MagicUI Pointer component using the `shadcn` CLI.  This command adds the component from the specified URL.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/pointer.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/pointer\"\n```\n\n----------------------------------------\n\nTITLE: Installing Aurora Text with CLI\nDESCRIPTION: This command uses the `shadcn` CLI to add the Aurora Text component from the specified URL. This is the quickest way to install the component and its dependencies.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/aurora-text.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/aurora-text\"\n```\n\n----------------------------------------\n\nTITLE: React Component with Basic Rounded Button\nDESCRIPTION: This React component renders a button with a basic rounded border using the 'rounded' class from Tailwind CSS.  It's a simple example of applying a border radius to a button element. The component imports CSS files for styling. It defines a functional component `App` that returns JSX representing the button within a div with Tailwind CSS classes for layout and appearance.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/tailwind-border-radius.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./App.css\";\nimport \"./index.css\";\nfunction App() {\n  return (\n    <div className=\"w-full flex flex-rows items-center justify-center h-screen bg-gray-100 gap-4\">\n      <button className=\"bg-blue-500 text-white px-4 py-2 rounded\">\n        'rounded'\n      </button>\n    </div>\n  );\n}\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Building iOS App Binary\nDESCRIPTION: This snippet shows how to rebuild the iOS app binary after linking native code. The `npm run ios` command triggers the build process for the iOS application, incorporating the newly linked library.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-native-libraries.mdx#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run ios\n```\n\n----------------------------------------\n\nTITLE: Building CLI\nDESCRIPTION: This command builds the CLI using `pnpm`. This prepares the CLI tool for distribution.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build:cli\n```\n\n----------------------------------------\n\nTITLE: Import Meteors Component\nDESCRIPTION: This line imports the `Meteors` component from the specified path within the project. This assumes the component is located in the `components/magicui` directory.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/meteors.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Meteors } from \"@/components/magicui/meteors\";\n```\n\n----------------------------------------\n\nTITLE: Installing react-tweet dependency\nDESCRIPTION: This command installs the `react-tweet` package, which is a dependency for the Tweet Card component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/tweet-card.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-tweet\n```\n\n----------------------------------------\n\nTITLE: Overriding MUI Box Component Element with JSX\nDESCRIPTION: This code snippet demonstrates how to override the default <div> element of the Material UI Box component with a <span> element using the `component` prop. The Box component wraps a Button component and applies styling using the `sx` prop. It requires importing React, Box, and Button from `@mui/material`.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-box.mdx#_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\n\nexport default function BoxComponent() {\n  return (\n    <Box component=\"span\" sx={{ p: 2, border: \"1px dashed grey\" }}>\n      <Button>Save</Button>\n    </Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using AvatarCircles Component in TypeScript\nDESCRIPTION: Demonstrates how to use the `AvatarCircles` component with specific props.  `numPeople` sets the number displayed in the last circle, and `avatarUrls` is expected to be an array of URLs to avatar images.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/avatar-circles.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<AvatarCircles numPeople={99} avatarUrls={avatars} />\n```\n\n----------------------------------------\n\nTITLE: Import Confetti Component in TypeScript\nDESCRIPTION: This line imports the Confetti component from the specified path within the project. Ensure the path matches your project's directory structure where the Confetti component is located.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/confetti.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Confetti } from \"@/components/magicui/confetti\";\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript baseUrl and paths in tsconfig.app.json\nDESCRIPTION: This TypeScript configuration snippet demonstrates how to set up `baseUrl` and `paths` in the `tsconfig.app.json` file. The `baseUrl` property specifies the base directory for resolving non-relative module names. The `paths` property defines path aliases, allowing for shorter and more readable import statements, such as `@/*` to resolve to the `./src/*` directory. This configuration is essential for resolving module paths correctly in the application.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/vite.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\n        \"./src/*\"\n      ]\n    }\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Icon Cloud Component via CLI\nDESCRIPTION: This command adds the Icon Cloud component to your project using the `shadcn` CLI.  It fetches the component from a remote URL. Make sure you have `shadcn` installed.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/icon-cloud.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/icon-cloud\"\n```\n\n----------------------------------------\n\nTITLE: Installing MagicUI using npm\nDESCRIPTION: This code snippet demonstrates how to install the MagicUI library using npm, a package manager for JavaScript.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/animation-libraries.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install magicui\n```\n\n----------------------------------------\n\nTITLE: Install Material UI (npm)\nDESCRIPTION: Command to install Material UI using npm.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-box.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @material-ui/core\n```\n\n----------------------------------------\n\nTITLE: Initializing Shadcn UI\nDESCRIPTION: This command initializes Shadcn UI in the project. It sets up the necessary files and configurations for using Shadcn components.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/astro.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init\n```\n\n----------------------------------------\n\nTITLE: Install Number Ticker via CLI\nDESCRIPTION: This command uses `shadcn-ui` CLI to install the Number Ticker component from the MagicUI design system. It fetches the component and its dependencies directly into your project. Requires `shadcn-ui` to be installed and configured in your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/number-ticker.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/number-ticker\"\n```\n\n----------------------------------------\n\nTITLE: Adding Interactive Hover Button with CLI\nDESCRIPTION: This command uses the `shadcn-ui` CLI to add the Interactive Hover Button component from the specified URL. It fetches the component and adds it to your project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/interactive-hover-button.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/interactive-hover-button\"\n```\n\n----------------------------------------\n\nTITLE: Creating a new Vite project\nDESCRIPTION: This command initializes a new React project using Vite. It sets up the basic project structure and configuration files needed for a React application.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/vite.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring components.json (Example)\nDESCRIPTION: This is an example of the questions asked when configuring the `components.json` file for Shadcn UI.  It illustrates the options for style, base color, and CSS variables.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/laravel.mdx#_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nWhich style would you like to use?\nWhich color would you like to use as base color?\nDo you want to use CSS variables for colors? › yes\n```\n\n----------------------------------------\n\nTITLE: Install Meteors Component via CLI\nDESCRIPTION: This command installs the Meteors component using the shadcn CLI. It retrieves the component from the specified MagicUI design URL.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/meteors.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/meteors\"\n```\n\n----------------------------------------\n\nTITLE: Adding MagicUI aliases to components.json\nDESCRIPTION: This code shows the necessary addition to the `components.json` file to allow importing MagicUI components. It defines aliases for `ui` and `magicui` within the project's component structure. It is assumed you have already initialized shadcn-ui.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/packages/cli/README.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"slate\",\n    \"cssVariables\": true\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n+   \"ui\": \"@/components/ui\",\n+   \"magicui\": \"@/components/magicui\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use Flip Text Component\nDESCRIPTION: This snippet demonstrates how to use the FlipText component in a React component.  The component renders the text 'Flip Text' with a flipping animation. The animation is configured with default values unless overridden by props.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/flip-text.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<FlipText>Flip Text</FlipText>\n```\n\n----------------------------------------\n\nTITLE: Install Flickering Grid via CLI\nDESCRIPTION: This command adds the Flickering Grid component to your project using the `shadcn` CLI tool. It fetches the component directly from the specified URL, simplifying the installation process.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/flickering-grid.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/flickering-grid\"\n```\n\n----------------------------------------\n\nTITLE: Installing Magic UI MCP Server with CLI\nDESCRIPTION: This command uses the Magic UI CLI to install the MCP server for a specific IDE. The `npx` command executes the CLI installer with the specified IDE as a parameter.  Replace `cursor`, `windsurf`, `claude`, `cline`, or `roo-cline` with the target IDE. This installs the necessary configurations for the IDE to use the Magic UI MCP server.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/mcp.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @magicuidesign/cli@latest install windsurf\n```\n\n----------------------------------------\n\nTITLE: Using Neon Gradient Card Component in TSX\nDESCRIPTION: This code snippet demonstrates how to use the `NeonGradientCard` component in your TSX code. It renders a card with \"Hello\" text and a \"Hover me\" span inside. The className prop can be used to customize the card's appearance.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/neon-gradient-card.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<NeonGradientCard>\n  <div className=\"p-4\">\n    <p>Hello</p>\n    <span>Hover me</span>\n  </div>\n</NeonGradientCard>\n```\n\n----------------------------------------\n\nTITLE: Install Dot Pattern component with CLI\nDESCRIPTION: This command utilizes the `shadcn@latest` CLI to add the Dot Pattern component from the specified URL. It automates the installation process by fetching and integrating the component into the project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/dot-pattern.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/dot-pattern\"\n```\n\n----------------------------------------\n\nTITLE: Installing Magic UI MCP Server with CLI\nDESCRIPTION: This command uses the Magic UI CLI to install the MCP server for a specific IDE. The `npx` command executes the CLI installer with the specified IDE as a parameter.  Replace `cursor`, `windsurf`, `claude`, `cline`, or `roo-cline` with the target IDE. This installs the necessary configurations for the IDE to use the Magic UI MCP server.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/mcp.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @magicuidesign/cli@latest install claude\n```\n\n----------------------------------------\n\nTITLE: Importing Neon Gradient Card Component in TSX\nDESCRIPTION: This import statement allows you to use the NeonGradientCard component in your TSX code. It assumes the component is located in the `@/components/magicui` directory.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/neon-gradient-card.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NeonGradientCard } from \"@/components/magicui/neon-gradient-card\";\n```\n\n----------------------------------------\n\nTITLE: Adding CLI Installation Command\nDESCRIPTION: This code shows how to add a CLI command to install a component. The command `npx shadcn@latest add \"https://magicui.design/r/example-component\"` will fetch and install the `example-component` from the specified URL using the `shadcn` CLI.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://magicui.design/r/example-component\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a React Project\nDESCRIPTION: This command initializes a new React project using create-react-app.  It sets up the basic project structure and dependencies needed for React development.  The project is named \"my-app\" and placed in a directory with the same name.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/react-header.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app my-app\n```\n\n----------------------------------------\n\nTITLE: Using BoxReveal Component in TSX\nDESCRIPTION: This code snippet demonstrates the basic usage of the `BoxReveal` component. The text \"Box Reveal\" will be displayed, with the sliding box animation applied to reveal the text. It showcases the default styling and behavior of the component.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/components/box-reveal.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<BoxReveal>Box Reveal</BoxReveal>\n```\n\n----------------------------------------\n\nTITLE: Adding a shadcn-ui component\nDESCRIPTION: This command adds a specific component (e.g., Button) from the `shadcn-ui` library to the project. After running this command, the component's code is added to the project, allowing it to be imported and used.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/gatsby.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add button\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: This command uses `pnpm` to install all the necessary dependencies for the MagicUI project. This ensures that the project has all the required libraries and tools to run properly.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Creating a Component Demo\nDESCRIPTION: This code snippet creates a demo component `ExampleComponentDemo` that renders the `ExampleComponent` within a `div` with the class name `relative justify-center`. This allows developers to showcase and test the component in a real-world scenario.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport ExampleComponent from '@/registry/magicui/example-component'\n\nexport default function ExampleComponentDemo() {\n  return (\n    <div className=\"relative justify-center\">\n      <ExampleComponent />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Next.js project with shadcn-ui (Bash)\nDESCRIPTION: This command initializes a new or existing Next.js project using the shadcn-ui CLI. It sets up the necessary files and configurations for using shadcn-ui components. Using the -d flag applies default settings.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/docs/installation/next.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init\n```\n\n----------------------------------------\n\nTITLE: Creating a React Component\nDESCRIPTION: This code snippet defines a basic React component named `ExampleComponent`. It exports a functional component that renders a simple `div` containing the text \"This is your component.\". This serves as a template for creating new UI components within the MagicUI project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react'\n\nexport default function ExampleComponent() {\n  return (\n    <div>\n      This is your component.\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Sidebar Configuration\nDESCRIPTION: This code snippet demonstrates how to update the sidebar configuration in `config/docs.ts` to include a new component named \"Example Component\".  It adds an entry with a title, a link (`href`), an empty `items` array, and a \"New\" label.  This ensures that the new component appears in the MagicUI documentation sidebar.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    title: \"Example Component\",\n    href: `/docs/components/example-component`,\n    items: [],\n    label: \"New\",\n}\n```\n\n----------------------------------------\n\nTITLE: Start React App (npm)\nDESCRIPTION: Alternative command to start the React application using npm.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-box.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory\nDESCRIPTION: This command changes the current directory in the terminal to the newly created React project directory, allowing you to execute further commands within the project's context.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/install-tailwind-react.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncd my-tailwind-app\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Production\nDESCRIPTION: This configuration modifies the `postcss.config.js` file to include `cssnano` plugin when the `NODE_ENV` environment variable is set to `production`.  `cssnano` minifies the CSS code by removing whitespace and other unnecessary characters, resulting in smaller file sizes and improved performance for production deployments. The autoprefixer and tailwind plugins are always included.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/install-tailwind-react.mdx#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n    ...(process.env.NODE_ENV === \"production\"\n      ? {\n          cssnano: {},\n        }\n      : {}),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Install Material UI (Yarn)\nDESCRIPTION: Command to install Material UI using Yarn.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-box.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @material-ui/core\n```\n\n----------------------------------------\n\nTITLE: Installing CLI\nDESCRIPTION: This command installs the CLI script using `pnpm`. This command setup cli for using MagicUI components.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npnpm run install:cli\n```\n\n----------------------------------------\n\nTITLE: Bounce Animation (CSS)\nDESCRIPTION: This CSS defines a keyframe animation called 'bounce' that scales an element up and down. The '.animated-element' class applies this animation to an element, creating a bouncing effect.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_10\n\nLANGUAGE: CSS\nCODE:\n```\n@keyframes bounce {\n  0% {\n    transform: scale(1);\n  }\n  \t  50% {\n    transform: scale(1.2);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n}\n\n.animated-element {\n  \t  animation: bounce 1s ease-in-out;\n}\n```\n\n----------------------------------------\n\nTITLE: Fade Exit Active CSS Class\nDESCRIPTION: This CSS defines the 'exit-active' state, animating the opacity from 1 to 0 over 500ms. This creates a fade-out effect as the element leaves the view.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_19\n\nLANGUAGE: CSS\nCODE:\n```\n.fade-exit-active {\n  opacity: 0;\n  transition: opacity 500ms;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with Prettier\nDESCRIPTION: This command formats the code using Prettier via `pnpm`. This ensures consistent code style across the project.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npnpm format:write\n```\n\n----------------------------------------\n\nTITLE: Fade Exit CSS Class\nDESCRIPTION: This CSS sets the initial opacity of an element during the 'exit' phase to 1, making it fully visible before the exit animation.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-transitions.mdx#_snippet_18\n\nLANGUAGE: CSS\nCODE:\n```\n.fade-exit {\n  opacity: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Showcase MDX File Creation\nDESCRIPTION: This code snippet shows an example of a showcase MDX file (`content/showcase/website-name.mdx`).  It includes frontmatter with metadata like `title`, `description`, `image`, `href`, `featured`, and `affiliation`. This metadata is used to display and organize websites in the MagicUI showcase.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_16\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: website-name.com\ndescription: Website description\nimage: /showcase/website-name.png\nhref: https://website-name.com\nfeatured: true\naffiliation: YC S25, raised $10M\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a `.env.local` file\nDESCRIPTION: This command creates a `.env.local` file and adds the `NEXT_PUBLIC_APP_URL` environment variable with a default value of `http://localhost:3000`. This is often used for configuring environment-specific settings during development.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntouch .env.local && echo \"NEXT_PUBLIC_APP_URL=http://localhost:3000\" > .env.local\n```\n\n----------------------------------------\n\nTITLE: Running the project\nDESCRIPTION: This command starts the development server using `pnpm`.  This allows you to view and test the MagicUI project in your local environment.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Cloning the MagicUI Repository\nDESCRIPTION: This command clones the forked MagicUI repository to your local machine, allowing you to make changes and contribute back to the project.  Replace `<YOUR_USERNAME>` with your GitHub username.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<YOUR_USERNAME>/magicui.git\n```\n\n----------------------------------------\n\nTITLE: Create React App\nDESCRIPTION: Commands to create a new React application and navigate to the app directory using `create-react-app`.\nSOURCE: https://github.com/magicuidesign/magicui/blob/main/content/blog/mui-box.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app my-app && cd my-app\n```"
  }
]