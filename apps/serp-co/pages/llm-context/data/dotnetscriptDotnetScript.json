[
  {
    "owner": "dotnet-script",
    "repo": "dotnet-script",
    "content": "TITLE: Installing DotNet Script Global Tool\nDESCRIPTION: Commands to install dotnet-script as a global tool using .NET CLI, list installed tools, and uninstall the tool\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g dotnet-script\n\ndotnet tool list -g\n\ndotnet tool uninstall dotnet-script -g\n```\n\n----------------------------------------\n\nTITLE: Debugging a C# Script with Breakpoint\nDESCRIPTION: Demonstrates how to set up a C# script for debugging by waiting for debugger attachment and setting a breakpoint.\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nWaitForDebugger();\nusing (var streamReader = new StreamReader(Console.OpenStandardInput()))\n{\n    Write(streamReader.ReadToEnd().ToUpper()); // <- SET BREAKPOINT HERE\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code for .NET Core Debugging\nDESCRIPTION: JSON configuration for enabling .NET Core debugging in Visual Studio Code.\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \".NET Core Attach\",\n    \"type\": \"coreclr\",\n    \"request\": \"attach\",\n    \"processId\": \"${command:pickProcess}\"\n}\n```\n\n----------------------------------------\n\nTITLE: NuGet Package Reference Example\nDESCRIPTION: Example showing how to reference a NuGet package directly within a C# script\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n#r \"nuget: AutoMapper, 6.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Using Inline NuGet Packages in REPL\nDESCRIPTION: Shows how to install and use NuGet packages directly within the dotnet-script REPL using #r and #load directives.\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n~$ dotnet script\n> #r \"nuget: Automapper, 6.1.1\"\n> using AutoMapper;\n> typeof(MapperConfiguration)\n[AutoMapper.MapperConfiguration]\n> #load \"nuget: simple-targets-csx, 6.0.0\";\n> using static SimpleTargets;\n> typeof(TargetDictionary)\n[Submission#0+SimpleTargets+TargetDictionary]\n```\n\n----------------------------------------\n\nTITLE: Creating a Web Server in C# Script\nDESCRIPTION: Shows how to create a simple web server using Microsoft.NET.Sdk.Web in a C# script.\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n#r \"sdk:Microsoft.NET.Sdk.Web\"\n\nusing Microsoft.AspNetCore.Builder;\n\nvar a = WebApplication.Create();\na.MapGet(\"/\", () => \"Hello world\");\na.Run();\n```\n\n----------------------------------------\n\nTITLE: Hello World C# Script\nDESCRIPTION: Basic C# script example showing console output in a .csx file\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nConsole.WriteLine(\"Hello world!\");\n```\n\n----------------------------------------\n\nTITLE: Basic REPL Usage Examples\nDESCRIPTION: Examples demonstrating the basic usage of the dotnet-script REPL for interactive C# code execution.\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n~$ dotnet script\n> var x = 1;\n> x+x\n2\n```\n\nLANGUAGE: shell\nCODE:\n```\n~$ dotnet script\n> var x = new List<string>();\n> x.Add(\"foo\");\n> x\nList<string>(1) { \"foo\" }\n> x.Add(\"bar\");\n> x\nList<string>(2) { \"foo\", \"bar\" }\n>\n```\n\n----------------------------------------\n\nTITLE: Using Nullable Reference Types in C#\nDESCRIPTION: Demonstrates how to enable and use nullable reference types in a C# script, which is a feature of C# 8.\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n#!/usr/bin/env dotnet-script\n\n#nullable enable\n\nstring name = null;\n```\n\n----------------------------------------\n\nTITLE: Implementing Debugger Attachment in C#\nDESCRIPTION: A C# method that waits for a debugger to attach, useful for debugging scripts from the command line.\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void WaitForDebugger()\n{\n    Console.WriteLine(\"Attach Debugger (VS Code)\");\n    while(!Debugger.IsAttached)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Script Path and Folder in C#\nDESCRIPTION: Utility methods to get the current script path and folder using CallerFilePath attribute, useful for referencing files relative to the script location.\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic static string GetScriptPath([CallerFilePath] string path = null) => path;\npublic static string GetScriptFolder([CallerFilePath] string path = null) => Path.GetDirectoryName(path);\n```\n\n----------------------------------------\n\nTITLE: Loading and Executing a C# Script in REPL\nDESCRIPTION: Demonstrates how to load and execute a C# script file in the REPL using the #load directive.\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nvar msg = \"Hello World\";\nConsole.WriteLine(msg);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Multiline REPL Mode in C#\nDESCRIPTION: Shows how to use multiline mode in the dotnet-script REPL to define a class and create an instance.\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nclass Foo {\npublic string Bar {get; set;}\n}\nvar foo = new Foo();\n```\n\n----------------------------------------\n\nTITLE: Script Arguments Access Example\nDESCRIPTION: C# script demonstrating how to access command line arguments passed to the script\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nforeach (var arg in Args)\n{\n    Console.WriteLine(arg);\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming a Script Package with #load directive\nDESCRIPTION: Example of using the #load directive to include a NuGet package containing script files in a C# script.\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n#load \"nuget:simple-targets-csx, 6.0.0\"\n\nusing static SimpleTargets;\nvar targets = new TargetDictionary();\n\ntargets.Add(\"default\", () => Console.WriteLine(\"Hello, world!\"));\n\nRun(Args, targets);\n```\n\n----------------------------------------\n\nTITLE: Structure of Script Package in NuGet\nDESCRIPTION: Shows the standard folder structure for organizing script files inside a NuGet package using the contentFiles convention.\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n└── contentFiles\n    └── csx\n        └── netstandard2.0\n            └── main.csx\n```\n\n----------------------------------------\n\nTITLE: Windows PowerShell Installation\nDESCRIPTION: PowerShell command to download and execute the installation script for dotnet-script on Windows\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n(new-object Net.WebClient).DownloadString(\"https://raw.githubusercontent.com/dotnet-script/dotnet-script/master/install/install.ps1\") | iex\n```\n\n----------------------------------------\n\nTITLE: Linux/Mac Installation Commands\nDESCRIPTION: Shell commands to install dotnet-script on Linux or Mac systems using curl, with optional sudo privileges\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -s https://raw.githubusercontent.com/dotnet-script/dotnet-script/master/install/install.sh | bash\n\ncurl -s https://raw.githubusercontent.com/dotnet-script/dotnet-script/master/install/install.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Executing Remote Scripts from URL\nDESCRIPTION: Command examples for executing C# scripts directly from a URL, including a GitHub Gist and a shortened TinyURL.\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndotnet script https://gist.githubusercontent.com/seesharper/5d6859509ea8364a1fdf66bbf5b7923d/raw/0a32bac2c3ea807f9379a38e251d93e39c8131cb/HelloWorld.csx\n```\n\nLANGUAGE: shell\nCODE:\n```\ndotnet script https://tinyurl.com/y8cda9zt\n```\n\n----------------------------------------\n\nTITLE: Executing a DLL with dotnet script\nDESCRIPTION: Command to execute a compiled dotnet-script DLL using the dotnet CLI with arguments.\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet script exec {path_to_dll} -- arg1 arg2\n```\n\n----------------------------------------\n\nTITLE: Converting Input to Uppercase in C#\nDESCRIPTION: A C# script that reads from standard input, converts the text to uppercase, and writes it to standard output.\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var streamReader = new StreamReader(Console.OpenStandardInput()))\n{\n    Write(streamReader.ReadToEnd().ToUpper());\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Build and Run Commands\nDESCRIPTION: Commands to build and run dotnet-script in a Docker container\nSOURCE: https://github.com/dotnet-script/dotnet-script/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd build\ndocker build -t dotnet-script -f Dockerfile ..\n\ndocker run -it dotnet-script --version\n```"
  }
]