[
  {
    "owner": "cobayasampler",
    "repo": "cobaya",
    "content": "TITLE: Defining Theory Class with Parameters in Python for Cobaya\nDESCRIPTION: This code snippet demonstrates how to define a theory class with input and derived parameters in Cobaya. It shows two examples: one with basic parameter definition and another with detailed sampling settings for the input parameter.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/theories_and_dependencies.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cobaya.theory import Theory\n\nclass X(Theory):\n    params = {'Xin': None, 'Xderived': {'derived': True}}\n```\n\nLANGUAGE: python\nCODE:\n```\nclass X(Theory):\n    params = {'Xin': {'prior': {'min': 0, 'max': 1}, 'propose': 0.01, 'ref': 0.9},\n          'Xderived': {'derived': True}}\n```\n\n----------------------------------------\n\nTITLE: Implementing BCalculator Theory Class in Python for Cobaya\nDESCRIPTION: This code snippet defines a BCalculator theory class that calculates B and provides the b_derived parameter. It shows how to handle requirements, perform calculations based on input parameters, and manage derived parameters in Cobaya.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/theories_and_dependencies.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cobaya.theory import Theory\n\nclass BCalculator(Theory):\n\n    def initialize(self):\n        self.kmax = 0\n\n    def get_can_provide_params(self):\n        return ['b_derived']\n\n    def get_can_provide(self):\n        return ['B']\n\n    def must_provide(self, **requirements):\n        if 'B' in requirements:\n            self.kmax = max(self.kmax, requirements['B'].get('kmax',10))\n\n    def calculate(self, state, want_derived=True, **params_values_dict):\n        if self.kmax:\n            state['B'] = ... # do calculation using self.kmax\n\n        if want_derived:\n            state['derived'] = {'b_derived': ...xxx...}\n```\n\n----------------------------------------\n\nTITLE: Reparameterizing to Sample in Polar Coordinates\nDESCRIPTION: Advanced reparameterization that changes the sampling parameters from Cartesian (x,y) to polar (r,theta) while preserving the same likelihood function.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example_advanced.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom copy import deepcopy\ninfo_rtheta = deepcopy(info)\ninfo_rtheta[\"params\"] = {\n    \"r\": {\"prior\": {\"min\": 0, \"max\": 2}, \"ref\": 1,\n          \"proposal\": 0.01, \"drop\": True},\n    \"theta\": {\"prior\": {\"min\": 0, \"max\": np.pi/2}, \"ref\": 0,\n               \"proposal\": 0.5, \"latex\": r\"\\theta\", \"drop\": True},\n    \"x\": {\"value\" : lambda r,theta: r*np.cos(theta), \"min\": 0, \"max\": 2},\n    \"y\": {\"value\" : lambda r,theta: r*np.sin(theta), \"min\": 0, \"max\": 2}}\n\n# The priors above are just linear with specific ranges. There is also a Jacobian\n# from the change of variables, which we can include as an additional prior.\n# Here the Jacobian is just proportional to r (log-prior is proportional to log(r))\ninfo_rtheta[\"prior\"] = {\"Jacobian\" : lambda r: np.log(r)}\n```\n\n----------------------------------------\n\nTITLE: Python Code for Running Cobaya MCMC\nDESCRIPTION: Code snippet demonstrating how to execute the MCMC sampling using Cobaya's Python interface\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom cobaya.run import run\nupdated_info, sampler = run(info)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Cosmological Likelihood in Python\nDESCRIPTION: Example of a minimal likelihood class implementation with initialize, get_requirements and logp methods. Shows core structure for calculating likelihoods from theory parameters.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_external_likelihood_class.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cobaya.likelihood import Likelihood\nimport numpy as np\nimport os\n\nclass MyLikelihood(Likelihood):\n\n    def initialize(self):\n        \"\"\"\n         Prepare any computation, importing any necessary code, files, etc.\n\n         e.g. here we load some data file, with default cl_file set in .yaml below,\n         or overridden when running Cobaya.\n        \"\"\"\n\n        self.data = np.loadtxt(self.cl_file)\n\n    def get_requirements(self):\n        \"\"\"\n         return dictionary specifying quantities calculated by a theory code are needed\n\n         e.g. here we need C_L^{tt} to lmax=2500 and the H0 value\n        \"\"\"\n        return {'Cl': {'tt': 2500}, 'H0': None}\n\n    def logp(self, **params_values):\n        \"\"\"\n        Taking a dictionary of (sampled) nuisance parameter values params_values\n        and return a log-likelihood.\n\n        e.g. here we calculate chi^2  using cls['tt'], H0_theory, my_foreground_amp\n        \"\"\"\n        H0_theory = self.provider.get_param(\"H0\")\n        cls = self.provider.get_Cl(ell_factor=True)\n        my_foreground_amp = params_values['my_foreground_amp']\n\n        chi2 = ...\n        return -chi2 / 2\n```\n\n----------------------------------------\n\nTITLE: Custom Likelihood Implementation in Python\nDESCRIPTION: Custom likelihood class definition that converts polar to cartesian coordinates and evaluates a likelihood function.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/models.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n./src_examples/advanced_and_models/my_likelihood.py\n```\n\n----------------------------------------\n\nTITLE: Post-processing Cosmological Samples in Cobaya\nDESCRIPTION: YAML configuration for post-processing cosmological samples in Cobaya, including adding new likelihoods and derived parameters.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_basic_runs.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Path the original sample\noutput: chains/planck\n\n# Post-processing information\npost:\n  suffix: BAO  # the new sample will be called \"chains\\planck_post_des*\"\n  # If we want to skip the first third of the chain as burn in\n  skip: 0.3\n  # Now let's add the DES likelihood,\n  # increase the precision (remember to repeat the extra_args)\n  # and add the new derived parameter\n  add:\n    likelihood:\n      sixdf_2011_bao:\n      sdss_dr7_mgs:\n      sdss_dr12_consensus_bao:\n    theory:\n      # Use *only* the theory corresponding to the original sample\n      classy:\n        extra_args:\n          # New precision parameter\n          # [option]: [value]\n      camb:\n        extra_args:\n          # New precision parameter\n          # [option]: [value]\n    params:\n      # h = H0/100. (nothing to add: CLASS/CAMB knows it)\n      h:\n      # A dynamic derived parameter (change omegam to Omega_m for classy)\n      # note that sigma8 itself is not recomputed unless we add+remove it\n      S8:\n        derived: 'lambda sigma8, omegam: sigma8*(omegam/0.3)**0.5'\n        latex: \\sigma_8 (\\Omega_\\mathrm{m}/0.3)^{0.5}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom CMB Likelihood Function in Cobaya\nDESCRIPTION: This code defines a custom likelihood function for a CMB experiment. It takes beam and noise parameters, loads fiducial data, computes the theoretical power spectrum, and returns the log-likelihood value along with derived parameters.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_external_likelihood.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Let us define a function that takes the parameters of interest,\n# requests the required cosmological products,\n# and returns a log-likelihood and some derived parameters\ndef my_like(noise_std=10, beam_FWHM=0.25, _self=None):\n    \"\"\"My CMB likelihood.\"\"\"\n    # Beam and noise specs\n    # 1 uK^2-like noise, and 15 arcmin beam\n    noise_var = noise_std**2\n    beamArcmin = beam_FWHM\n    # Load the fiducial spectrum\n    try:\n        fiducial_Cl = np.loadtxt(\"fiducial_tt.dat\")\n    except IOError:\n        raise IOError(\"You need to run the fiducial model first!\")\n    # Get theory Cl's for the current parameters\n    # NB: we requested the Cl's with ell_factor, so we get D_l = l(l+1)/(2pi) C_l\n    Cl = _self.provider.get_Cl(ell_factor=True)\n    # Make sure it's a numpy array (it could be a pandas wrapper of it)\n    Cl_tt = np.array(Cl.get(\"tt\"))\n    # We need to compute a chi squared\n    Delta_l = Cl_tt - fiducial_Cl\n    # Noise and beam model, assuming full-sky experiment\n    ls = np.arange(len(fiducial_Cl))\n    # Noise sigma, converted from uK-arcmin to dimensionless C_l:\n    # units of D_l are muK^2\n    beam_sigma_rad = beamArcmin / 60 * np.pi/180\n    # C_l = 2pi/(l(l+1)) D_l\n    # N_l = (noise_sigma)^2 * Omega_pix\n    # = (noise_sigma)^2 * 4pi/N_pix\n    # = (noise_sigma)^2 * 4pi/(4pi/Omega_pix)\n    # When transformed to D_l (l(l+1)/(2pi) C_l), noise D_l becomes white noise:\n    # D_l^noise = (noise_sigma)^2 l(l+1)/(2pi) Omega_pix = (noise_sigma)^2\n    # In real world, we would compute the real noise power spectrum simulating the\n    # scanning strategy.\n    # Applying a Gaussian beam window function, with approximate formula\n    W_l = np.exp(-ls*(ls+1)*beam_sigma_rad**2)\n    var_l = 2./((2*ls+1)) * (Cl_tt*W_l + noise_var)**2\n    # Some experiment-specific cuts\n    chi2 = np.sum(Delta_l[2:1001]**2 / var_l[2:1001])\n    derived = {\"Map_Cl_at_500\": Cl_tt[500]}\n    return -0.5 * chi2, derived\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Gaussian MCMC Sampling\nDESCRIPTION: YAML configuration file defining a Gaussian likelihood with parameters, prior and sampling settings for Cobaya MCMC sampler\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlikelihood:\n  gaussian:\n    mean: [0, 0]\n    cov: [[1, 0.3], [0.3, 2]]\nparams:\n  a:\n    prior:\n      min: -2\n      max: 2\n    ref: 0\n    proposal: 0.5\n    latex: \"\\\\alpha\"\n  b:\n    prior:\n      min: -2\n      max: 2\n    ref: 0\n    proposal: 0.5\n    latex: \"\\\\beta\"\nsampler:\n  mcmc:\n    max_samples: 1000\n    learn_proposal: True\noutput: chains/gaussian\n```\n\n----------------------------------------\n\nTITLE: Defining Model Parameters in YAML\nDESCRIPTION: YAML configuration showing model parameters, prior settings, and likelihood definition for a polar coordinates example.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/models.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n./src_examples/advanced_and_models/sample_r_theta.yaml\n```\n\n----------------------------------------\n\nTITLE: Python Code for Analyzing Results with GetDist\nDESCRIPTION: Code demonstrating how to analyze MCMC results and create plots using GetDist's Python interface\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport getdist.plots as gdplt\n\nmcsamples = sampler.products()[\"sample\"]\ngdsamples = mcsamples.to_getdist_mcsamples()\ngdsamples.paramNames.latex[\"b\"] = \"\\\\beta\"\ngdsamples.paramNames.latex[\"a\"] = \"\\\\alpha\"\n\nprint(gdsamples.getMargeStats())\n\nprint(\"Mean and stddev of parameters:\")\nprint(gdsamples.mean(\"a\"), gdsamples.std(\"a\"))\nprint(gdsamples.mean(\"b\"), gdsamples.std(\"b\"))\n\ng = gdplt.getSubplotPlotter()\ng.triangle_plot(gdsamples, filled=True)\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Gaussian Ring Likelihood Function in Python\nDESCRIPTION: A Python function that implements a log-probability for a Gaussian quarter ring centered at the origin with radius 1. It uses scipy.stats to compute a normal distribution around a radius of 1 with small scale.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example_advanced.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef gauss_ring_logp(x, y):\n    r = np.sqrt(x**2+y**2)\n    return stats.norm.logpdf(r, loc=1, scale=0.02)\n```\n\n----------------------------------------\n\nTITLE: Handling MCMC with MPI in Python Scripts\nDESCRIPTION: Example of properly integrating Cobaya's MCMC sampler in a Python script with MPI, including error handling and communication between processes. This pattern ensures all processes learn about failures.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/sampler_mcmc.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom mpi4py import MPI\n\ncomm = MPI.COMM_WORLD\nrank = comm.Get_rank()\n\nfrom cobaya import run\nfrom cobaya.log import LoggedError\n\nsuccess = False\ntry:\n    upd_info, mcmc = run(info)\n    success = True\nexcept LoggedError as err:\n    pass\n\n# Did it work? (e.g. did not get stuck)\nsuccess = all(comm.allgather(success))\n\nif not success and rank == 0:\n    print(\"Sampling failed!\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Cosmological Model Info in Python\nDESCRIPTION: Creates info dictionary for a cosmological model using Planck 2018 data with CLASS as theory code. Defines parameters, prior ranges, and likelihoods.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_model.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ninfo = {\"likelihood\": {\"planck_2018_lowl.TT\": None,\n                 \"planck_2018_lowl.EE\": None,\n                 \"planck_2018_highl_plik.TTTEEE\": None,\n                 \"planck_2018_lensing.clik\": None},\n      \"params\": cosmo_params,\n      \"theory\": {\"classy\": None}}\n```\n\n----------------------------------------\n\nTITLE: Generating Fiducial CMB Power Spectrum Data for a Custom Likelihood\nDESCRIPTION: This code creates a fiducial CMB power spectrum by defining a cosmological model with specific parameters, computing the corresponding power spectrum, and saving it for use in a custom likelihood.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_external_likelihood.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# First, let's create a model to compute a fiducial power spectrum, given a choice\n# of parameters, and save it for later use.\nfrom cobaya.model import get_model\n\n# \"True\" spectrum parameters\nfiducial_params = {\n    \"omegab_h2\": 0.0224,\n    \"omegac_h2\": 0.120,\n    \"theta_s_1e2\": 1.0411,\n    \"tau\": 0.0925,\n    \"logA\": 3.098,\n    \"ns\": 0.9645,\n}\n\n# Create a model to compute the spectrum: a theory code is needed, and so is\n# a \"fake\" likelihood demanding the computation of the Cl's from the theory.\nfiducial_model = get_model({\n    \"theory\": {\"camb\": {\"extra_args\": {\"lens_potential_accuracy\": 0}}},\n    \"likelihood\": {\"_fake\": {\n        \"external\": \"lambda _self=None: 0\",\n        \"requires\": {\"Cl\": {\"tt\": 1000}}}}})\n\n# Get the fiducial spectrum\nfiducial_Cl = fiducial_model.provider.get_Cl(ell_factor=True).get(\"tt\")\nimport numpy as np\nnp.savetxt(\"fiducial_tt.dat\", fiducial_Cl)\n```\n\n----------------------------------------\n\nTITLE: Defining a Callback Function for Cobaya MCMC\nDESCRIPTION: This Python code snippet shows how to define a callback function for use with Cobaya's MCMC sampler. The function prints the points added to the chain since the last callback, demonstrating how to access sampler attributes.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/sampler_mcmc.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef my_callback(sampler):\n    print(sampler.collection[sampler.last_point_callback:])\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Likelihood to Cobaya Info Dictionary\nDESCRIPTION: Adds the Gaussian ring log-probability function to the Cobaya information dictionary under the 'likelihood' key. Cobaya will automatically recognize the input parameters.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example_advanced.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ninfo = {\"likelihood\": {\"ring\": gauss_ring_logp}}\n```\n\n----------------------------------------\n\nTITLE: Implementing a CMBlikes Likelihood in Python\nDESCRIPTION: Example of creating a self-describing CMB likelihood using the CMBlikes base class. This implementation is minimal as CMBlikes already handles Gaussian and Hammimeche-Lewis likelihood calculations from binned C_ℓ data.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_external_likelihood_class.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom cobaya.likelihoods.base_classes import CMBlikes\n\nclass MyLikelihood(CMBlikes):\n    install_options = {\"github_repository\": \"CobayaSampler/planck_supp_data_and_covmats\"}\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Likelihoods in YAML Configuration\nDESCRIPTION: Basic structure for specifying likelihoods in Cobaya's YAML input file. Each likelihood is defined under the 'likelihood' block with its options.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihoods.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlikelihood:\n  [likelihood 1]:\n     [option 1]: [value 1]\n     [...]\n  [likelihood 2]:\n     [option 1]: [value 1]\n     [...]\n```\n\n----------------------------------------\n\nTITLE: Defining Cobaya Configuration in YAML for Cartesian Coordinates\nDESCRIPTION: A YAML configuration for Cobaya that defines an MCMC sampling of a ring-shaped likelihood in Cartesian coordinates (x,y). It includes prior definitions, derived parameters for polar coordinates, and sampler settings.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example_advanced.rst#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nlikelihood:\n  ring: import_module('my_likelihood').gauss_ring_logp\n\nparams:\n  x:\n    prior: {min: 0, max: 2}\n    ref: 0.5\n    proposal: 0.01\n  y:\n    prior: {min: 0, max: 2}\n    ref: 0.5\n    proposal: 0.01\n  r:\n    derived: 'lambda x,y: np.sqrt(x**2+y**2)'\n  theta:\n    derived: 'lambda x,y: np.arctan(y/x)'\n    latex: \\theta\n    min: 0\n    max: 1.571  # =~ pi/2\n\nprior:\n  x_eq_y_band: 'lambda x,y: stats.norm.logpdf(\n                   x - y, loc=0, scale=0.3)'\n\nsampler:\n  mcmc:\n    Rminus1_stop: 0.001\n\noutput: chains/ring\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters with Prior, Reference, and Proposal in YAML\nDESCRIPTION: Example of a parameters block configuration for MCMC sampling with prior ranges, reference distributions, and proposal widths.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/sampler_mcmc.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nparams:\n  a:\n   prior:\n     min: -2\n     max:  2\n   ref:\n     min: -1\n     max:  1\n   proposal: 0.5\n   latex: \\alpha\n\n  b:\n   prior:\n     min: -1\n     max:  4\n   ref: 2\n   proposal: 0.25\n   latex: \\beta\n  c:\n   prior:\n     min: -1\n     max:  1\n   ref:\n     dist: norm\n     loc: 0\n     scale: 0.2\n   latex: \\gamma\n```\n\n----------------------------------------\n\nTITLE: Adding a Constraint as an External Prior\nDESCRIPTION: Adds a Gaussian constraint along the line x=y, implemented as an external prior function that penalizes points far from this line.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example_advanced.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ninfo[\"prior\"] = {\"x_eq_y_band\":\n                 lambda x, y: stats.norm.logpdf(x - y, loc=0, scale=0.3)}\n```\n\n----------------------------------------\n\nTITLE: Running Cobaya Sampler Interactively in Python\nDESCRIPTION: Shows how to execute a Cobaya sampling run programmatically and retrieve both the updated configuration information and sampler instance. This pattern allows accessing sampling results directly in memory.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/output.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cobaya import run\nupdated_info, sampler = run(your_input)\n```\n\n----------------------------------------\n\nTITLE: Loading MCMC Samples in Cobaya\nDESCRIPTION: Shows two ways to load MCMC samples from chain files: as a Cobaya SampleCollection or as GetDist MCSamples. The 'skip' parameter allows discarding a portion of the initial samples for burn-in.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/sampler_mcmc.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# As Cobaya SampleCollection\nfull_chain = load_samples(\"chains/test\", skip=0.33, combined=True)\n\n# As GetDist MCSamples\nfull_chain = load_samples(\"chains/test\", skip=0.33, to_getdist=True)\n```\n\n----------------------------------------\n\nTITLE: Python Code for Running Minimization\nDESCRIPTION: Code showing how to perform posterior maximization after MCMC sampling\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nupdated_info_min, sampler_min = run(info, minimize=True)\n```\n\n----------------------------------------\n\nTITLE: Gathering MCMC Samples from Multiple MPI Processes\nDESCRIPTION: Shows how to gather and combine MCMC samples from multiple MPI processes. This example demonstrates two methods to obtain the combined chain: as a Cobaya SampleCollection or as GetDist MCSamples.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/sampler_mcmc.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Run from all MPI processes at once.\n# Returns the combined chain for all of them.\n\n# As cobaya.collections.SampleCollection\nfull_chain = mcmc.samples(combined=True, skip_samples=0.33)\n\n# As GetDist MCSamples\nfull_chain = mcmc.samples(combined=True, skip_samples=0.33, to_getdist=True)\n```\n\n----------------------------------------\n\nTITLE: Running Cobaya from Shell Command Line\nDESCRIPTION: Demonstrates how to run Cobaya using the cobaya-run command with a YAML input file from the command line.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/input.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cobaya-run your_input.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Initial Cobaya Sampling\nDESCRIPTION: This Python code snippet runs the initial Cobaya sampling using the defined Gaussian likelihood and parameters.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/post.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cobaya import run\nupdinfo, sampler = run(gaussian_info)\n```\n\n----------------------------------------\n\nTITLE: Running Cobaya with Input File\nDESCRIPTION: Command to run Cobaya using a specified input file.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_basic_runs.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncobaya-run [your_input_file_name.yaml]\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Plotting CMB Power Spectrum\nDESCRIPTION: Shows how to request and plot CMB power spectrum data from the cosmological model.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_model.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nells, cls = model.theory[\"classy\"].get_Cl(ell_factor=True)\nplt.figure()\nplt.plot(ells.T, cls[\"tt\"].T)\nplt.xlabel(r\"$\\ell$\")\nplt.ylabel(r\"$\\ell(\\ell+1)C_\\ell^{TT}/(2\\pi)$\");\n```\n\n----------------------------------------\n\nTITLE: Verifying Cobaya Installation\nDESCRIPTION: Simple Python command to verify that Cobaya is installed correctly by attempting to import it. This confirms the package is in the Python path.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/installation.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython -c \"import cobaya\"\n```\n\n----------------------------------------\n\nTITLE: Computing Cosmological Observables for Parameter Range\nDESCRIPTION: Demonstrates computing and plotting H(z) and power spectrum for different CDM density values.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_model.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\n# Request H(z)\nmodel.theory[\"classy\"].must_provide({\"H\": {\"z\": [0, 1, 2]}})\n\n# Prepare the plot\nfig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(12, 4))\n# Loop over омега_cdm values\nfor omega_cdm in np.linspace(0.08, 0.16, 5):\n    prior_sample[\"omega_cdm\"] = omega_cdm\n    model.logposterior(prior_sample)\n    # Get observables\n    Hz = model.theory[\"classy\"].get_H([0, 1, 2])\n    ells, cls = model.theory[\"classy\"].get_Cl(ell_factor=True)\n    # Plot\n    ax1.plot([0, 1, 2], Hz, label=r\"$\\omega_\\mathrm{cdm}=%.3g$\" % omega_cdm)\n    ax2.plot(ells.T, cls[\"tt\"].T, label=r\"$\\omega_\\mathrm{cdm}=%.3g$\" % omega_cdm)\n\nax1.set_xlabel(\"$z$\")\nax1.set_ylabel(\"$H(z)$\")\nax2.set_xlabel(r\"$\\ell$\")\nax2.set_ylabel(r\"$\\ell(\\ell+1)C_\\ell^{TT}/(2\\pi)$\")\nfor ax in (ax1, ax2):\n    ax.legend();\n```\n\n----------------------------------------\n\nTITLE: Running Cobaya Minimizer for MAP\nDESCRIPTION: Command to run Cobaya's minimizer to find the maximum-a-posteriori point without modifying the input file.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_basic_runs.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncobaya-run [your_input_file_name.yaml] --minimize\n```\n\n----------------------------------------\n\nTITLE: Model Creation and Evaluation\nDESCRIPTION: Example showing how to create a Cobaya model and evaluate log probabilities at different points.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/models.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cobaya.yaml import yaml_load_file\nfrom cobaya.model import get_model\n\ninfo = yaml_load_file('sample_r_theta.yaml')\nmodel = get_model(info)\n\npoint = {'r': 0.5, 'theta': 1}\nprint('Log-posterior at %r:' % point)\nprint(model.logposterior(point))\n\npoint_outside = {'r': -1, 'theta': 1}\nprint('\\nLog-posterior at %r:' % point_outside)\nprint(model.logposterior(point_outside))\n```\n\n----------------------------------------\n\nTITLE: Evaluating Model Posterior with Random Parameters\nDESCRIPTION: Demonstrates sampling from prior and computing log posterior probability for cosmological parameters.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_model.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprior_sample = dict(zip(model.parameterization.sampled_params(),\n                    model.prior.sample(ignore_external=True)[0]))\n# Some particular values (comment out if you want to use random ones)\nprior_sample.update({\n    \"logA\": 3.05,\n    \"ns\": 0.96,\n    \"H0\": 68,\n    \"omega_b\": 0.0224,\n    \"omega_cdm\": 0.12})\nlogpost, logpriors, loglikes, derived = model.logposterior(prior_sample)\n```\n\n----------------------------------------\n\nTITLE: Parameter Setup for Likelihood-Defined Derived Parameters\nDESCRIPTION: Updates the parameter configuration to use the derived parameters that are computed directly in the likelihood function.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example_advanced.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ninfo_alt[\"params\"] = {\n    \"x\": {\"prior\": {\"min\": 0, \"max\": 2}, \"ref\": 0.5, \"proposal\": 0.01},\n    \"y\": {\"prior\": {\"min\": 0, \"max\": 2}, \"ref\": 0.5, \"proposal\": 0.01},\n    \"r\": None,\n    \"theta\": {\"latex\": r\"\\theta\", \"min\": 0, \"max\": np.pi/2}}\n\ninfo_alt[\"prior\"] = {\"x_eq_y_band\":\n                  lambda x, y: stats.norm.logpdf(x - y, loc=0, scale=0.3)}\n```\n\n----------------------------------------\n\nTITLE: Executing Cobaya from Python\nDESCRIPTION: Shows how to import and run Cobaya from a Python script, returning updated information and sampler objects.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/input.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cobaya import run\nupdated_info, sampler = run(your_input)\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Priors for Gaussian Ring\nDESCRIPTION: Sets up parameter definitions with uniform priors for x and y coordinates, including reference points and proposal scales for MCMC sampling.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example_advanced.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ninfo[\"params\"] = {\n    \"x\": {\"prior\": {\"min\": 0, \"max\": 2}, \"ref\": 0.5, \"proposal\": 0.01},\n    \"y\": {\"prior\": {\"min\": 0, \"max\": 2}, \"ref\": 0.5, \"proposal\": 0.01}}\n```\n\n----------------------------------------\n\nTITLE: Python Script for Creating Cobaya Configuration\nDESCRIPTION: Python code demonstrating how to programmatically create Cobaya input configuration as a dictionary\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ninfo = {\n    \"likelihood\": {\"gaussian\": {\"mean\": [0, 0],\n                           \"cov\": [[1, 0.3], [0.3, 2]]}},\n    \"params\": {\n        \"a\": {\n            \"prior\": {\"min\": -2, \"max\": 2},\n            \"ref\": 0,\n            \"proposal\": 0.5,\n            \"latex\": \"\\\\alpha\"},\n        \"b\": {\n            \"prior\": {\"min\": -2, \"max\": 2},\n            \"ref\": 0,\n            \"proposal\": 0.5,\n            \"latex\": \"\\\\beta\"}},\n    \"sampler\": {\"mcmc\": {\"max_samples\": 1000, \"learn_proposal\": True}}}\n```\n\n----------------------------------------\n\nTITLE: Implementing External Likelihood Function with Derived Parameters\nDESCRIPTION: Example of defining an external likelihood function in Python that returns derived parameters. The function returns a tuple containing the log-likelihood and a dictionary of derived parameter values.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihoods.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Default: guessed from function signature\n\ndef my_like(a0, a1):\n    logp =  # some function of `(a0, a1)`\n    devived = {\"sum_a\": a0 + a1}\n    return logp, derived\n\ninfo_like = {\"my_likelihood\": {\n    \"external\": my_like, \"output_params\": [\"sum_a\"]}}\n```\n\n----------------------------------------\n\nTITLE: Plotting MCMC Progress in Python with Cobaya\nDESCRIPTION: This Python code snippet demonstrates how to use Cobaya's built-in function to plot the progress of an MCMC run. It loads the progress data from a file and creates a visualization of the convergence metrics.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/sampler_mcmc.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cobaya.samplers.mcmc import plot_progress\n# Assuming chain saved at `chains/gaussian`\nplot_progress(\"chains/gaussian\", fig_args={\"figsize\": (6,4)})\nimport matplotlib.pyplot as plt\nplt.tight_layout()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing a PolyChord Callback Function in Python\nDESCRIPTION: Python callback function that can be used with PolyChord to monitor sampling progress. This function reports the number of points processed, current evidence estimate, and the maximum likelihood point found during sampling.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/sampler_polychord.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef callback(sampler):\n    print(\"There are %d dead points. The last %d were added since the last callback.\"%(  \n        len(sampler.dead), len(sampler.dead) - sampler.last_point_callback))\n    print(\"Current logZ = %g +/- %g\"%(sampler.logZ, sampler.logZstd))\n    # Maximum likelihood: since we sample over the posterior, it may be \"dead\"!\n    min_chi2_dead = sampler.dead[sampler.dead[\"chi2\"].values.argmin()]\n    # At the end of the run, the list of live points is empty\n    try:\n        min_chi2_live = sampler.live[sampler.live[\"chi2\"].values.argmin()]\n        min_chi2_point = (min_chi2_live if min_chi2_live[\"chi2\"] < min_chi2_dead[\"chi2\"]\n                          else min_chi2_dead)\n    except:\n        min_chi2_point = min_chi2_dead\n    print(\"The maximum likelihood (min chi^2) point reached is\\n%r\"%min_chi2_point)\n```\n\n----------------------------------------\n\nTITLE: Defining Derived Parameters for Radius and Angle\nDESCRIPTION: Creates derived parameters r and theta as functions of the input parameters x and y. These parameters are calculated but not sampled directly.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example_advanced.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_r(x, y):\n    return np.sqrt(x ** 2 + y ** 2)\n\n\ndef get_theta(x, y):\n    return np.arctan(y / x)\n\ninfo[\"params\"][\"r\"] = {\"derived\": get_r}\ninfo[\"params\"][\"theta\"] = {\"derived\": get_theta,\n                           \"latex\": r\"\\theta\", \"min\": 0, \"max\": np.pi/2}\n```\n\n----------------------------------------\n\nTITLE: Implementing ACalculator Theory Class in Python for Cobaya\nDESCRIPTION: This code snippet defines an ACalculator theory class that calculates A = B * b_derived using inputs from other theory components. It demonstrates how to specify requirements, provide calculations, and handle derived parameters in Cobaya.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/theories_and_dependencies.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cobaya.theory import Theory\n\nclass ACalculator(Theory):\n\n    def initialize(self):\n        \"\"\"called from __init__ to initialize\"\"\"\n\n    def initialize_with_provider(self, provider):\n        \"\"\"\n        Initialization after other components initialized, using Provider class\n        instance which is used to return any dependencies (see calculate below).\n        \"\"\"\n        self.provider = provider\n\n    def get_requirements(self):\n        \"\"\"\n        Return dictionary of derived parameters or other quantities that are needed\n        by this component and should be calculated by another theory class.\n        \"\"\"\n        return {'b_derived': None}\n\n    def must_provide(self, **requirements):\n        if 'A' in requirements:\n            # e.g. calculating A requires B computed using same kmax (default 10)\n            return {'B': {'kmax': requirements['A'].get('kmax', 10)}}\n\n    def get_can_provide_params(self):\n        return ['Aderived']\n\n    def calculate(self, state, want_derived=True, **params_values_dict):\n        state['A'] = self.provider.get_result('B') * self.provider.get_param('b_derived')\n        state['derived'] = {'Aderived': 10}\n\n    def get_A(self, normalization=1):\n        return self.current_state['A'] * normalization\n```\n\n----------------------------------------\n\nTITLE: Running and Plotting with Additional Constraint\nDESCRIPTION: Runs the sampler with the new constraint prior and visualizes the results which should show samples concentrated along the x=y line.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example_advanced.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nupdated_info_x_eq_y, sampler_x_eq_y = run(info)\n\ngdsamples_x_eq_y = MCSamplesFromCobaya(\n    updated_info_x_eq_y, sampler_x_eq_y.products()[\"sample\"])\ngdplot = gdplt.get_subplot_plotter(width_inch=5)\ngdplot.triangle_plot(gdsamples_x_eq_y, [\"x\", \"y\"], filled=True)\n```\n\n----------------------------------------\n\nTITLE: Installable Likelihood Base Class\nDESCRIPTION: Example showing how to create an installable likelihood class that supports automatic data installation.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_external_likelihood_class.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom cobaya.likelihoods.base_classes import InstallableLikelihood\n\nclass MyLikelihood(InstallableLikelihood):\n```\n\n----------------------------------------\n\nTITLE: Model Instantiation Example\nDESCRIPTION: Shows how to instantiate and use a likelihood model with specific parameters in Python code.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_external_likelihood_class.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npackages_path = '/path/to/your/packages'\n\ninfo = {\n    'params': fiducial_params,\n    'likelihood': {'my_likelihood': MyLikelihood},\n    'theory': {'camb': None},\n    'packages': packages_path}\n\nfrom cobaya.model import get_model\nmodel = get_model(info)\nmodel.logposterior({'H0':71.1, 'my_param': 1.40, ...})\n```\n\n----------------------------------------\n\nTITLE: Plotting MCMC Results with GetDist\nDESCRIPTION: Uses GetDist to visualize the sampling results, creating triangle plots for the input parameters and 1D plots for the derived parameters.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example_advanced.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nimport getdist.plots as gdplt\n\ngdsamples = sampler.products(to_getdist=True)[\"sample\"]\ngdplot = gdplt.get_subplot_plotter(width_inch=5)\ngdplot.triangle_plot(gdsamples, [\"x\", \"y\"], filled=True)\ngdplot = gdplt.get_subplot_plotter(width_inch=5)\ngdplot.plots_1d(gdsamples, [\"r\", \"theta\"], nx=2)\n```\n\n----------------------------------------\n\nTITLE: Manual Speed Blocking Configuration for Cobaya MCMC\nDESCRIPTION: This YAML snippet shows how to manually specify speed blocking for MCMC sampling in Cobaya. It defines two blocks of parameters with different oversampling factors, allowing for fine-grained control over sampling efficiency.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/sampler_mcmc.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmcmc:\n  blocking:\n    - [1, [a]]\n    - [2, [b,c]]\n  # drag: True  # if desired; 2 different oversampling factors only!\n```\n\n----------------------------------------\n\nTITLE: Plotting Likelihood Values\nDESCRIPTION: Code to create a plot of likelihood values along the radial direction at fixed theta.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/models.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.linspace(-1, 1, 100)\ntheta = np.pi/4 * np.ones_like(r)\npoints = [{'r': ri, 'theta': thetai} for ri, thetai in zip(r, theta)]\nlikes = np.array([model.logposterior(point)[1][0] for point in points])\n\nplt.figure()\nplt.plot(r, likes)\nplt.xlabel('r')\nplt.ylabel('log-likelihood')\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Standalone Likelihood Implementation\nDESCRIPTION: Example showing how to structure a likelihood class that can be used both within Cobaya and standalone with pre-computed theory inputs.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_external_likelihood_class.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyLikelihood(Likelihood):\n\n    ...\n\n    def logp(self, **params_values):\n        H0_theory = self.provider.get_param(\"H0\")\n        cls = self.provider.get_Cl(ell_factor=True)\n        return self.log_likelihood(cls, H0, **params_values)\n\n    def log_likelihood(self, cls, H0, **data_params):\n        my_foreground_amp = data_params['my_foreground_amp']\n        chi2 = ...\n        return -chi2 / 2\n```\n\n----------------------------------------\n\nTITLE: Defining Gaussian Likelihood and Parameters in YAML\nDESCRIPTION: This YAML snippet defines a multivariate Gaussian likelihood and parameters for a Cobaya sampling run. It includes priors for x and y parameters and MCMC sampler settings.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/post.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlikelihood:\n  gaussian: \"lambda x, y: stats.multivariate_normal.logpdf(\n               [x, y], mean=[0, 0], cov=%s)\"\n\nparams:\n  x:\n    prior:\n      min: -3\n      max:  3\n  y:\n    prior:\n      min: -3\n      max:  3\n\nsampler:\n  mcmc:\n    covmat_params: [x, y]\n    covmat: %s\n    # Let's impose a strong convergence criterion,\n    # to have a fine original sample\n    Rminus1_stop: 0.001\n```\n\n----------------------------------------\n\nTITLE: Plotting Results with GetDist\nDESCRIPTION: This Python code snippet uses GetDist to plot the results of both the initial sampling and the post-processed sample for comparison.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/post.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport getdist.plots as gdplt\n# %matplotlib inline  # if on a jupyter notebook\n\ngdsamples_gaussian = sampler.samples(to_getdist=True)\ngdsamples_post = results_post.samples(to_getdist=True)\n\np = gdplt.get_single_plotter(width_inch=6)\np.plot_2d([gdsamples_gaussian, gdsamples_post], [\"x\", \"y\"], filled=True)\np.add_x_bands(x_band_mean, x_band_std)\np.add_legend([\"Gaussian\", \"Post $y>0$ and $x$-band\"], colored_text=True);\n```\n\n----------------------------------------\n\nTITLE: Class-based Parameter Definition\nDESCRIPTION: Example showing how to define likelihood parameters as class attributes instead of in YAML.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_external_likelihood_class.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyLikelihood(Likelihood):\n    cl_file = \"/path/do/data_file\"\n    # Aliases for automatic covariance matrix\n    aliases = [\"myOld\"]\n    # Speed in evaluations/second (after theory inputs calculated).\n    speed = 500\n    params = {\"my_foreground_amp\":\n                  {\"prior\": {\"dist\": \"uniform\", \"min\": 0, \"max\": 0},\n                   \"ref\" {\"dist\": \"norm\", \"loc\": 153, \"scale\": 27},\n                   \"proposal\": 27,\n                   \"latex\": r\"A^{f}_{\nm{mine}\"}}\n```\n\n----------------------------------------\n\nTITLE: Python Code for Loading YAML Configuration\nDESCRIPTION: Code snippet showing how to load Cobaya configuration from a YAML file in Python\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport yaml\nwith open(\"gaussian.yaml\") as f:\n    info_from_yaml = yaml.safe_load(f)\n```\n\n----------------------------------------\n\nTITLE: Building Cobaya Model Instance\nDESCRIPTION: Creates a model instance from the info dictionary and optional packages path for evaluating cosmological models.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_model.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cobaya.model import Model\nmodel = Model(info, packages_path=packages_path)\n```\n\n----------------------------------------\n\nTITLE: Default Likelihood Options in YAML\nDESCRIPTION: Structure of a likelihood class YAML file containing default options and experimental model parameters. This defines recognized options and default parameter priors for a likelihood.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihoods.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Default options\n[option 1]: [value 1]\n[...]\n\n# Experimental model parameters\nparams:\n  [param 1]:\n    prior:\n      [prior info]\n    [label, ref, etc.]\nprior:\n  [prior 1]: [definition]\n```\n\n----------------------------------------\n\nTITLE: Derived Parameters Implementation\nDESCRIPTION: Example showing how to implement derived parameters in a likelihood class.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_external_likelihood_class.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass MyLikelihood(Likelihood):\n    params = {'D': None, 'Dx10': {'derived': True}}\n\n    def logp(self, _derived=None, **params_values):\n        if _derived is not None:\n            _derived[\"Dx10\"] = params_values['D'] * 10\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a DataSetLikelihood Subclass in Python\nDESCRIPTION: Example of implementing a custom likelihood by inheriting from DataSetLikelihood. This class can load settings from an INI-format dataset file, which is specified in the Cobaya input YAML.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_external_likelihood_class.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom cobaya.likelihoods.base_classes import DataSetLikelihood\n\nclass MyLikelihood(DataSetLikelihood):\n\n    def init_params(self, ini):\n        \"\"\"\n        Load any settings from the .dataset file (ini).\n\n        e.g. here load from \"cl_file=...\" specified in the dataset file\n        \"\"\"\n\n        self.cl_data = np.load_txt(ini.string('cl_file'))\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Custom Likelihood in Cobaya YAML\nDESCRIPTION: Example showing how to reference and configure a custom likelihood in a Cobaya input YAML file.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_external_likelihood_class.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlikelihood:\n  mylikes.MyLikelihood:\n    # .. any parameters you want to override\n```\n\n----------------------------------------\n\nTITLE: Configuring External Likelihood in Cobaya YAML\nDESCRIPTION: Example configuration for using an external likelihood class in Cobaya. Shows how to specify the module path and class name in the YAML configuration.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihood_external.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlikelihood:\n  newlike.ExternalLike:\n     python_path: /path/to/newlike\n     # .. any parameters you want to override\n```\n\n----------------------------------------\n\nTITLE: Configuring PolyChord Sampler in YAML\nDESCRIPTION: Basic YAML configuration block for using the PolyChord sampler within Cobaya. This defines the sampler section that should be included in the Cobaya input file.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/sampler_polychord.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsampler:\n  polychord:\n    # polychord options ...\n```\n\n----------------------------------------\n\nTITLE: Configuring MCMC Sampler Settings\nDESCRIPTION: Defines MCMC sampler settings for convergence criteria and maximum attempts, then runs the sampler using the defined configuration.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example_advanced.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ninfo[\"sampler\"] = {\"mcmc\": {\"Rminus1_stop\": 0.001, \"max_tries\": 1000}}\n\nfrom cobaya import run\nupdated_info, sampler = run(info)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Planck Lensing Likelihood in YAML\nDESCRIPTION: Example YAML configuration for the Planck 2018 lensing likelihood, showing dataset file specification, parameter overrides, and shared parameter configurations with other Planck likelihoods.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_external_likelihood_class.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# Path to the data: where the planck_supp_data_and_covmats has been cloned\npath: null\ndataset_file: lensing/2018/smicadx12_Dec5_ftl_mv2_ndclpp_p_teb_consext8.dataset\n# Overriding of .dataset parameters\ndataset_params:\n\n# Overriding of the maximum ell computed\nl_max:\n# Aliases for automatic covariance matrix\naliases: [lensing]\n# Speed in evaluations/second\nspeed: 50\n\nparams: !defaults [../planck_2018_highl_plik/params_calib]\n```\n\n----------------------------------------\n\nTITLE: Running Cobaya Post-Processing\nDESCRIPTION: This Python code snippet runs the Cobaya post-processing on the initial sample using the defined post-processing parameters.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/post.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom copy import deepcopy\ninfo_post = deepcopy(updinfo)\ninfo_post.update(post_info)\n\nfrom cobaya.post import post\nupdinfo_post, results_post = post(info_post, sampler.samples())\n```\n\n----------------------------------------\n\nTITLE: Configuring the Evaluate Sampler in YAML\nDESCRIPTION: Basic configuration for the evaluate sampler, which allows optional overriding of parameter values when evaluating the likelihood at a reference point.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/sampler_evaluate.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsampler:\n  evaluate:\n    # Optional: override parameter values\n    override:\n      # param: value\n```\n\n----------------------------------------\n\nTITLE: Sampler Integration\nDESCRIPTION: Example of creating and configuring a sampler to work with an existing model instance.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/models.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom cobaya.sampler import get_sampler\nfrom cobaya.output import get_output\n\nsampler_info = {\"mcmc\": {\"burn_in\": 0, \"max_samples\": 100}}\nsampler = get_sampler(sampler_info, model)\n\noutput_info = {\"output\": \"chains_example\"}\noutput = get_output(output_info, resume=False, packages={})\n\nsampler.set_output(output)\n\nsampler.run()\noutput.finalize()\nsampler.finalize()\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Speeds in YAML for Cobaya MCMC\nDESCRIPTION: This YAML snippet demonstrates how to specify speeds for theory and likelihood components in Cobaya. It shows that the theory code is assigned a speed of 2 evaluations per second, while one likelihood is given a speed of 4 and another is left unspecified.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/sampler_mcmc.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntheory:\n  theory_code:\n    speed: 2\n\nlikelihood:\n  like_a:\n  like_b:\n    speed: 4\n```\n\n----------------------------------------\n\nTITLE: Loading MCMC Chains in Python with Cobaya\nDESCRIPTION: This Python code snippet demonstrates how to load MCMC chains saved by Cobaya. It uses the load_samples function to retrieve the chain data, allowing for further analysis or processing of the MCMC results.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/sampler_mcmc.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom cobaya import load_samples\n```\n\n----------------------------------------\n\nTITLE: MCMC Sampler Configuration Options\nDESCRIPTION: YAML configuration for Cobaya's MCMC sampler with default settings. Users can copy this block into their input YAML file and modify the options as needed.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/sampler_mcmc.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n.. literalinclude:: ../cobaya/samplers/mcmc/mcmc.yaml\n   :language: yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Cobaya using pip\nDESCRIPTION: Command to install Cobaya using pip, which is the recommended method for most users. This installs the latest stable release from PyPI.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/tests/cosmo_timing.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install cobaya\n```\n\n----------------------------------------\n\nTITLE: Creating Customized Parameter Tables\nDESCRIPTION: Example of creating parameter tables with various customization options including convergence filtering, data requirements, and content exclusions.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/grids.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncobaya-grid-tables grid_folder tables/baseline_params_table_95pc --limit 2 --converge 0.1 --musthave_data NPIPE lowl lowE --header_tex tableHeader.tex --skip_group nonbbn --skip_data JLA reion BK18\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Cosmological Likelihood with Cobaya\nDESCRIPTION: This code demonstrates how to configure and use a custom cosmological likelihood in Cobaya. It creates a model, performs plots of the fiducial data and likelihood, and prepares for MCMC sampling.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_external_likelihood.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Let's create an input dictionary with our custom likelihood\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Testing best-fit value?\nbestfit = {\"logA\": 3.098, \"ns\": 0.9645, \"noise_std\": 10}\n\nmy_info = {\n    \"likelihood\": {\n        \"my_like\": {\n            # The path of this file, and the name of our likelihood function:\n            \"external\": my_like,\n            # Let's declare all the quantities that\n            # our likelihood needs from the Theory code:\n            \"requires\": {\"Cl\": {\"tt\": 1000}},\n            # Declare the derived parameters that this likelihood defines\n            \"output_params\": [\"Map_Cl_at_500\"]\n        }\n    },\n    \"params\": {\n        # Let's say WMAP-like constraints, taking H_0 out of the picture\n        # by sampling over the acoustic angular size\n        \"logA\": {\"prior\": {\"min\": 2.6, \"max\": 4.2}, \"ref\": {\"dist\": \"norm\", \"loc\": 3.05, \"scale\": 0.2}, \"proposal\": 0.05, \"latex\": \"\\log(10^{10} A_\\mathrm{s})\"},\n        \"ns\": {\"prior\": {\"min\": 0.8, \"max\": 1.2}, \"ref\": {\"dist\": \"norm\", \"loc\": 0.96, \"scale\": 0.05}, \"proposal\": 0.01, \"latex\": \"n_\\mathrm{s}\"},\n        \"noise_std\": {\"prior\": {\"min\": 5, \"max\": 15}, \"ref\": {\"dist\": \"norm\", \"loc\": 10, \"scale\": 1}, \"proposal\": 0.5, \"latex\": \"\\sigma_\\mathrm{noise}\"},\n        # Fix the rest of the parameters from the fiducial model, so that we don't search in a very high-dim space\n        \"omegab_h2\": fiducial_params[\"omegab_h2\"],\n        \"omegac_h2\": fiducial_params[\"omegac_h2\"],\n        \"theta_s_1e2\": fiducial_params[\"theta_s_1e2\"],\n        \"tau\": fiducial_params[\"tau\"],\n        \"Map_Cl_at_500\": None,\n    },\n    \"theory\": {\n        \"camb\": {\n            \"extra_args\": {\"lens_potential_accuracy\": 0},\n            # Tell the theory code not to silence errors\n            \"stop_at_error\": True}},\n    \"debug\": False,\n    \"modules\": \"code\"}\n\n# Let's use our custom likelihood's plotter! Nice eh?\nfrom cobaya.model import get_model\nmodel = get_model(my_info)\n# We need to compute a fiducial Cl: we don't need to create a new model\n# (in general, do, since there could be different requirements)\nmodel.provider.set_current_input_params(bestfit)\nCl_theo = model.provider.get_Cl(ell_factor=True)\nls = np.arange(len(Cl_theo.get(\"tt\")))\n# Let us plot the fiducial model\nfiducial_Cl = np.loadtxt(\"fiducial_tt.dat\")\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 9), sharex=True)\nax1.plot(ls, ls*(ls+1)/(2*np.pi) * fiducial_Cl, \"r-\", lw=3, zorder=0)\nax1.set_ylabel(\"$D_\\ell$ [$\\mu K^2$]\")\nax1.set_title(\"Our data\")\nax2.plot(ls[2:], fiducial_Cl[2:] - Cl_theo.get(\"tt\")[2:], \"k.\", ms=1)\nax2.set_ylabel(\"$\\Delta D_\\ell$ [$\\mu K^2$]\")\nax2.set_xlabel(\"$\\ell$\")\nax2.set_xscale(\"log\")\nfig.tight_layout()\nplt.savefig(\"fiducial.png\", bbox_to_inches=\"tight\")\nplt.close(\"all\")\n# Let's also create a plot with the likelihood vs the primordial power spectrum\n# amplitude\nlogA_array = np.linspace(3.0, 3.2, 100)\nloglike_array = np.zeros_like(logA_array)\nfor i, logA in enumerate(logA_array):\n    model.provider.set_current_input_params(dict(list(bestfit.items())+[(\"logA\", logA)]))\n    loglike_array[i] = model.loglikes({\"my_like\": None})[0]\nfig, ax = plt.subplots(nrows=1, ncols=1, figsize=(6, 4))\nax.plot(logA_array, loglike_array, \"k-\", ms=3)\nax.axvline(fiducial_params[\"logA\"], ls=\"--\", color=\"black\")\nax.set_xlabel(\"$\\log(10^{10} A_\\mathrm{s})$\")\nax.set_ylabel(\"$\\log\\mathcal{L}$\")\nfig.tight_layout()\nplt.savefig(\"log_like.png\", bbox_to_inches=\"tight\")\nplt.close(\"all\")\n\n# Add your favourite sampler here, e.g.\n# my_info[\"sampler\"] = {\"mcmc\": None}\n```\n\n----------------------------------------\n\nTITLE: Defining Derived Parameters Inside Likelihood Function\nDESCRIPTION: Alternative implementation where derived parameters r and theta are calculated inside the likelihood function rather than as separate parameter definitions.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example_advanced.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# List available derived parameters in the 'output_params' option of the likelihood.\n# To make room for that, you need assign the function to the option 'external'.\n# Return both the log-likelihood and a dictionary of derived parameters.\ndef gauss_ring_logp_with_derived(x, y):\n    r = np.sqrt(x**2+y**2)\n    derived = {\"r\": r, \"theta\": np.arctan(y/x)}\n    return stats.norm.logpdf(r, loc=1, scale=0.02), derived\n\ninfo_alt = {\"likelihood\": {\"ring\":\n    {\"external\": gauss_ring_logp_with_derived, \"output_params\": [\"r\", \"theta\"]}}}\n```\n\n----------------------------------------\n\nTITLE: Alternative Parameter Definition in YAML for Cobaya\nDESCRIPTION: This snippet shows an alternative way to define parameters in Cobaya, where the prior is defined on a likelihood parameter 'u', and 'v' is derived from it. This approach can provide clearer input structure.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/DEVEL.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nparams:\n  u:\n    prior: ...  # on u, *transformed* from prior of y\n  v: lambda u: 3/2*u\n```\n\n----------------------------------------\n\nTITLE: Getting Bibliography Info in Python\nDESCRIPTION: Python code to interactively get bibliography information for Cobaya components.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_basic_runs.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom cobaya.bib import get_bib_info\nget_bib_info(info)\n```\n\n----------------------------------------\n\nTITLE: Adding Cobaya Scripts to PATH\nDESCRIPTION: Example command to add the Cobaya scripts directory to the PATH environment variable. This allows executing Cobaya commands directly from the shell.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/installation.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=\"/home/you/.local/bin\":$PATH\n```\n\n----------------------------------------\n\nTITLE: Defining Derived Parameters with Functions in YAML for Cobaya\nDESCRIPTION: This example demonstrates how to define a derived parameter 'x2' as a function of a sampled parameter 'x' in Cobaya. It uses the 'derived' key to specify the calculation function and includes an optional range constraint.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/DEVEL.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nparams:\n  x:\n    prior: ...  # whatever prior for x\n  x2:\n    derived: lambda x: x**2\n    min: ...  # optional\n```\n\n----------------------------------------\n\nTITLE: Running Cobaya with MPI on EC2 Cloud\nDESCRIPTION: This command demonstrates how to run Cobaya with MPI parallelization, specifying the number of processes and threads per process, along with the input configuration file and output directory.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cluster_amazon.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mpirun -n X --map-by socket:PE=Y  cobaya-run planck.yaml -p cobaya_packages -o chains/planck\n```\n\n----------------------------------------\n\nTITLE: Configuring One Likelihood in YAML\nDESCRIPTION: A YAML configuration block for the 'one' likelihood in Cobaya. This configuration can be copied to an input YAML file and modified as needed.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihood_one.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# ../cobaya/likelihoods/one/one.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Derived Parameters in YAML for Cobaya\nDESCRIPTION: This example shows how to define multiple parameters in Cobaya where one sampled parameter 'y' is used to derive two likelihood parameters 'u' and 'v'. It demonstrates the use of lambda functions for parameter transformations.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/DEVEL.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nparams:\n  y:\n    prior: ...  # whatever prior, over y\n    subs:\n      u: lambda y: 2*y\n  v: lambda y: 3*y\n```\n\n----------------------------------------\n\nTITLE: Installing Cobaya and Cosmology Packages on EC2\nDESCRIPTION: This snippet installs Cobaya using pip and downloads additional cosmology packages using the cobaya-install utility, storing them in a specific directory.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cluster_amazon.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install cobaya\n\n$ cobaya-install cosmo --packages-path cobaya_packages\n```\n\n----------------------------------------\n\nTITLE: Defining Post-Processing Parameters in YAML\nDESCRIPTION: This YAML snippet defines the post-processing parameters for Cobaya, including a new prior for y and an additional likelihood for x.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/post.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npost:\n  suffix: band\n  add:\n    params:\n      y:\n        prior:\n          min: 0\n          max: 3\n    likelihood:\n      x_band: \"lambda x: stats.norm.logpdf(x, loc=%g, scale=%g)\"\n```\n\n----------------------------------------\n\nTITLE: Running Cobaya with MPI using Full Path\nDESCRIPTION: Demonstrates how to run Cobaya with MPI when specifying the full path to the cobaya-run script.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/input.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mpirun -n [#processes] $HOME/.local/bin/cobaya-run your_input.yaml\n```\n\n----------------------------------------\n\nTITLE: Redefining the Constraint Prior in Polar Coordinates\nDESCRIPTION: Transforms the x=y band constraint to use polar coordinates (r,theta) instead of Cartesian coordinates (x,y).\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example_advanced.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ninfo_rtheta[\"prior\"][\"x_eq_y_band\"] = lambda r, theta: stats.norm.logpdf(\n    r * (np.cos(theta) - np.sin(theta)), loc=0, scale=0.3)\n```\n\n----------------------------------------\n\nTITLE: Installing MPI4PY Python Package for MPI Parallelization\nDESCRIPTION: Command to install the mpi4py Python package (version 3.0.0 or higher) using pip with the --no-binary flag to compile from source. This enables MPI parallelization for improved sampling performance.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/installation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install \"mpi4py>=3\" --upgrade --no-binary :all:\n```\n\n----------------------------------------\n\nTITLE: Implementing External Likelihood Function with Manual Parameter Specification\nDESCRIPTION: Alternative approach for implementing an external likelihood function where input parameters are manually specified rather than inferred from the function signature. Useful when parameters may vary.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihoods.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Manual: no explicit function signature required\n\n# Define the lists of input params\nmy_input_params = [\"a0\", \"a1\"]\n\ndef my_like(**kwargs):\n    current_input_values = [kwargs[p] for p in my_input_params]\n    logp =  # some function of the input params\n    derived = {\"sum_a\": sum(current_input_values)}\n    return logp, derived\n\ninfo_like = {\"my_likelihood\": {\n    \"external\": my_like,\n    \"input_params\": my_input_params, \"output_params\": [\"sum_a\"]}}\n```\n\n----------------------------------------\n\nTITLE: Using External Likelihood Classes in YAML\nDESCRIPTION: How to use an external likelihood class from a Python package in a Cobaya input file. The full import path to the class is specified.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihoods.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nlikelihood:\n  mycodes.mylikes.MyLike:\n    [option 1]: [value 1]\n    [...]\n```\n\n----------------------------------------\n\nTITLE: Cloning Cobaya from Personal GitHub Fork for Development\nDESCRIPTION: Git commands to clone your personal fork of the Cobaya repository and install it in development mode. This setup allows you to make code changes that take effect immediately without reinstallation.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/installation.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://YOUR_USERNAME@github.com/YOUR_USERNAME/cobaya.git\npython -m pip install --editable cobaya[test] --upgrade\n```\n\n----------------------------------------\n\nTITLE: Configuring Gaussian Mixture Likelihood in YAML\nDESCRIPTION: Example configuration for a 3-mode Gaussian mixture likelihood in 2 dimensions. Defines means, covariance matrices, and parameter prefix settings.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihood_gaussian_mixture.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlikelihood:\n  gaussian_mixture:\n    input_params_prefix: test_\n    means: [ [0.1,0.1],\n             [0.3,0.3],\n             [0.4,0.5] ]\n    covs:  [ [[0.01, 0],\n              [0,    0.05]],\n             [[0.02,  0.003],\n              [0.003, 0.01]],\n             [[0.01, 0],\n              [0,    0.01]] ]\n```\n\n----------------------------------------\n\nTITLE: Installing External Package via Cobaya YAML\nDESCRIPTION: Configuration example showing how to automatically install an external package using cobaya-install. Demonstrates package installation from GitHub with version specification.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihood_external.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlikelihood:\n  planckpr4lensing:\n     package_install:\n         github_repository: carronj/planck_PR4_lensing\n         min_version: 1.0.2\n```\n\n----------------------------------------\n\nTITLE: Using External Likelihood Classes with Custom Python Path\nDESCRIPTION: How to use an external likelihood class with an explicit Python path. This allows using classes from packages that are not installed in the standard Python path.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihoods.rst#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nlikelihood:\n  mycodes.mylikes.MyLike:\n    python_path: /path/to/mycodes_dir\n    [option 1]: [value 1]\n    [...]\n```\n\n----------------------------------------\n\nTITLE: Cloning Cobaya from Official Repository\nDESCRIPTION: Git command to clone the official Cobaya repository from GitHub. This method is useful for examining the code but doesn't allow pushing changes back to the repository.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/installation.rst#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/CobayaSampler/cobaya.git\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Options for GitHub-Based Likelihood in Python\nDESCRIPTION: Demonstrates how to specify installation options for a Cobaya likelihood that should be downloaded from a GitHub repository. These options tell Cobaya where to find the necessary code or data dependencies.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_external_likelihood_class.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ninstall_options = {\"github_repository\": \"MyGithub/my_repository\",\n                   \"github_release\": \"master\"}\n```\n\n----------------------------------------\n\nTITLE: Importing a Custom Likelihood Module for Shell Usage\nDESCRIPTION: Shows how to import an external likelihood function module when running Cobaya from the command line, using the import_module mechanism.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example_advanced.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Notice the use of single vs double quotes\ninfo = {\"likelihood\": {\"ring\": \"import_module('my_likelihood').gauss_ring_logp\"}}\n```\n\n----------------------------------------\n\nTITLE: Installing Cobaya from a local directory using pip\nDESCRIPTION: This bash command sequence navigates to the Cobaya directory and installs it as an editable package using pip. It's used when installing Cobaya from a downloaded release rather than from Git.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/installation.rst#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /path/to/cobaya/\n$ python -m pip install --editable cobaya\n```\n\n----------------------------------------\n\nTITLE: Defining External Likelihood Functions in YAML\nDESCRIPTION: Two ways to define external likelihood functions in a YAML configuration file. The first is a simplified format, while the second allows for additional options like speed settings.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihoods.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlikelihood:\n  # Simple way (does not admit additional options)\n  my_lik_1: [definition]\n  # Alternative way (can also take speeds, etc)\n  my_lik_1:\n    external: [definition]\n    speed: [...]\n    [more options]\n```\n\n----------------------------------------\n\nTITLE: Installing MPI4PY via Conda for Anaconda Users\nDESCRIPTION: Alternative installation command for Anaconda users to install mpi4py through the conda package manager, using either conda-forge (for GNU compilers) or intel repository.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/installation.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c [repo] mpi4py\n```\n\n----------------------------------------\n\nTITLE: External Package Installation Configuration\nDESCRIPTION: YAML configuration example for installing external likelihood packages in Cobaya.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_external_likelihood_class.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nlikelihood:\n  planck_2018_lowl.TT_native: null\n  planck_2018_lowl.EE_native: null\n  planck_NPIPE_highl_CamSpec.TTTEEE: null\n  planckpr4lensing:\n    package_install:\n      github_repository: carronj/planck_PR4_lensing\n      min_version: 1.0.2\n```\n\n----------------------------------------\n\nTITLE: Installing Cobaya in Editable Mode with pip\nDESCRIPTION: Command to install Cobaya in editable mode for development purposes. This allows changes to the source code to be immediately reflected without reinstallation.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/DEVEL.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Running Cobaya Cosmology Input Generator\nDESCRIPTION: Command to run Cobaya's automatic cosmology input generator from the shell.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_basic_runs.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cobaya-cosmo-generator\n```\n\n----------------------------------------\n\nTITLE: Defining inheritance diagram for Cobaya core classes in reStructuredText\nDESCRIPTION: A reStructuredText directive that generates an inheritance diagram showing the relationships between key classes in the Cobaya project's architecture. The diagram includes input, component, likelihood, theory, sampler, prior, output, model, collection, and log samplers components.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/inheritance.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. inheritance-diagram:: input component likelihood theory sampler prior output model.Model collection log samplers\n   :parts: 1\n```\n\n----------------------------------------\n\nTITLE: Testing MPI Installation with Python\nDESCRIPTION: Command to verify that MPI is working correctly by launching two MPI processes that import mpi4py and print its version from only one of the processes.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/installation.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmpirun -n 2 python -c \"from mpi4py import MPI, __version__; print(__version__ if MPI.COMM_WORLD.Get_rank() else '')\"\n```\n\n----------------------------------------\n\nTITLE: Configuring the Minimize Sampler in YAML\nDESCRIPTION: YAML configuration block for the minimize sampler showing available options and their default values. This can be copied into a Cobaya input file and modified as needed.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/sampler_minimize.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n.. literalinclude:: ../cobaya/samplers/minimize/minimize.yaml\n   :language: yaml\n```\n\n----------------------------------------\n\nTITLE: Basic Cobaya Job Submission Command\nDESCRIPTION: Command to submit a Cobaya job to a queue with specified walltime and queue name\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/run_job.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncobaya-run-job --queue regular --walltime 12:00:00 [yaml_file].yaml\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Module Documentation\nDESCRIPTION: Sphinx documentation structure for Cobaya's base components and main classes using ReStructuredText format. Defines the documentation hierarchy and class reference sections.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/component.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nBase components\n===============\n\n.. automodule:: component\n   :noindex:\n\nCobayaComponent class\n----------------------\n\n.. autoclass:: component.CobayaComponent\n   :show-inheritance:\n   :members:\n\nComponentCollection class\n-------------------------\n\n.. autoclass:: component.ComponentCollection\n   :members:\n\nProvider class\n---------------\n\n.. autoclass:: theory.Provider\n   :members:\n\n\nHasDefaults class\n------------------\n\n.. autoclass:: component.HasDefaults\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Checking for OpenBLAS or MKL in NumPy Installation\nDESCRIPTION: Python command to check if NumPy is using optimized linear algebra libraries (OpenBLAS or MKL), which is important for performance in numerical computations.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/installation.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython -c \"from numpy import show_config; show_config()\" | grep 'mkl\\|openblas_info' -A 1\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Parameter Configuration with Evaluate Sampler\nDESCRIPTION: Example showing how to define multiple parameters with different prior and reference specifications, then using the evaluate sampler with an override value for one parameter. Demonstrates the hierarchy of parameter value selection.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/sampler_evaluate.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nparams:\n  a:\n    prior:\n      min: -1\n      max:  1\n    ref: 0.5\n  b:\n    prior:\n      min: -1\n      max:  1\n    ref:\n      dist: norm\n      loc: 0\n      scale: 0.1\n  c:\n    prior:\n      min: -1\n      max:  1\n  d:\n    prior:\n      min: -1\n      max:  1\n    ref: 0.4\n\nsampler:\n  evaluate:\n    override:\n      d: 0.2\n```\n\n----------------------------------------\n\nTITLE: Setting custom installation path for external modules\nDESCRIPTION: Python code to configure Cobaya to use a custom installation path for external modules, which is useful for shared installations or clusters.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/tests/cosmo_timing.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport cobaya\nos.environ[\"COBAYA_MODULES\"] = \"/path/to/modules\"\n```\n\n----------------------------------------\n\nTITLE: Checking if OpenBLAS is Installed on Debian Systems\nDESCRIPTION: Command to verify if the OpenBLAS library is installed on Debian-based systems using the dpkg package manager.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/installation.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndpkg -s libopenblas-base | grep Status\n```\n\n----------------------------------------\n\nTITLE: Specifying Download URL Installation Option in Python\nDESCRIPTION: Shows an alternative way to specify installation options using a direct download URL instead of a GitHub repository reference.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_external_likelihood_class.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ninstall_options = {\"download_url\":\"..url..\"}\n```\n\n----------------------------------------\n\nTITLE: Running Minimization on Grid Items\nDESCRIPTION: Command to run minimization rather than sampling for finding best-fit parameters in a grid. Uses the minimize_defaults dictionary from the input grid settings.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/grids.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncobaya-grid-run grid_folder --minimize\n```\n\n----------------------------------------\n\nTITLE: Running Cobaya with MPI\nDESCRIPTION: Command to run Cobaya with MPI for parallel processing, specifying the number of processes to be used.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/tests/cosmo_timing.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmpirun -n [#processes] cobaya-run example.yaml -f\n```\n\n----------------------------------------\n\nTITLE: Testing NumPy Performance with Matrix Operations\nDESCRIPTION: Python one-liner to test if NumPy is properly utilizing multiple CPU cores by performing a large matrix multiplication. This can verify that optimized BLAS libraries are working correctly.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/installation.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np ; (lambda x: x.dot(x))((lambda n: np.reshape(np.random.random(n**2), (n,n)))(10000))\n```\n\n----------------------------------------\n\nTITLE: Shell Commands for Running Cobaya\nDESCRIPTION: Command line instructions to run Cobaya with and without MPI parallelization\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/example.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cobaya-run gaussian.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ mpirun -n [n_processes] cobaya-run gaussian.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cobaya-run gaussian.yaml --minimize\n```\n\n----------------------------------------\n\nTITLE: Installing Cobaya with optional external codes\nDESCRIPTION: Command to install Cobaya with specific optional external cosmological codes like CAMB and CLASS for extended functionality.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/tests/cosmo_timing.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install \"cobaya[cosmo]\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid Structure in Cobaya\nDESCRIPTION: Command to create a new grid structure in a specified directory using either a Python setting file or YAML grid description. This generates the necessary YAML files for each run in the grid.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/grids.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncobaya-grid-create grid_folder [my_file]\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Instances of the Same Internal Likelihood Class\nDESCRIPTION: How to use multiple instances of the same internal likelihood class with different names and options. The 'class' keyword specifies the original likelihood name.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihoods.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nlikelihood:\n  my_like_1:\n    class: directory_name.ClassName\n    [option 1]: [value 1]\n    [...]\n  my_like_2:\n    class: directory_name.ClassName\n    [option 1]: [value 1]\n    [...]\n```\n\n----------------------------------------\n\nTITLE: Running Importance Sampling Minimization\nDESCRIPTION: Command to find best-fit parameters for importance sampled grid combinations. This combines importance sampling with minimization.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/grids.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncobaya-grid-run grid_folder --importance_minimize\n```\n\n----------------------------------------\n\nTITLE: Finding Cobaya Scripts in Path\nDESCRIPTION: Command to locate the installed Cobaya scripts directory when scripts are not found in the PATH. This helps users add the correct directory to their PATH environment variable.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/installation.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfind `pwd` -iname cobaya-run -printf %h\\n\n```\n\n----------------------------------------\n\nTITLE: Generating Citations for Cobaya Run\nDESCRIPTION: Command to generate BibTeX citations for components used in a Cobaya run.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_basic_runs.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cobaya-bib [your_input_file_name.yaml] > output_file.tex\n```\n\n----------------------------------------\n\nTITLE: Installing or Updating Cobaya via Pip\nDESCRIPTION: Command to install or update Cobaya to the latest release using pip. This is the recommended installation method for most users.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/installation.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install cobaya --upgrade\n```\n\n----------------------------------------\n\nTITLE: Disabling File Locking in Cobaya\nDESCRIPTION: Environment variable setting to disable Cobaya's file locking feature, which can be useful when encountering file system permission issues or on certain cluster environments.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/installation.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport COBAYA_USE_FILE_LOCKING=false\n```\n\n----------------------------------------\n\nTITLE: Upgrading Cobaya using pip\nDESCRIPTION: Command to upgrade an existing Cobaya installation to the latest version using pip.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/tests/cosmo_timing.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade cobaya\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies and Conda for Cobaya on Ubuntu\nDESCRIPTION: This snippet installs the required system packages (compilers, MPI, and numerical libraries) and sets up Miniconda for Python environment management on an Ubuntu EC2 instance.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cluster_amazon.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt update && sudo apt install gcc gfortran g++ openmpi-bin openmpi-common libopenmpi-dev libopenblas-base liblapack3 liblapack-dev make\n$ wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh\n$ bash miniconda.sh -b -p $HOME/miniconda\n$ export PATH=\"$HOME/miniconda/bin:$PATH\"\n$ conda config --set always_yes yes --set changeps1 no\n$ conda create -q -n cobaya-env python=3.9 scipy matplotlib cython PyYAML pytest pytest-xdist flaky\n$ source activate cobaya-env\n$ pip install mpi4py\n```\n\n----------------------------------------\n\nTITLE: Listing Grid Runs in Cobaya\nDESCRIPTION: Command to display all runs included in a grid structure. This is useful for reviewing what jobs will be executed before submitting them.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/grids.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncobaya-grid-list grid_folder\n```\n\n----------------------------------------\n\nTITLE: Checking out a specific Cobaya version using Git\nDESCRIPTION: This Git command checks out a specific version (v1.0) of Cobaya. It's useful for developers who want to work with or test a particular release version.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/installation.rst#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout v1.0\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Cobaya\nDESCRIPTION: Command to completely remove the Cobaya package from your Python installation using pip.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/installation.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip uninstall cobaya\n```\n\n----------------------------------------\n\nTITLE: Running Cobaya with MPI\nDESCRIPTION: Shows how to execute Cobaya in parallel using MPI with the appropriate run script.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/input.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mpirun -n [#processes] cobaya-run your_input.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing PySide for Cobaya Input Generator\nDESCRIPTION: Command to install PySide6 via pip if the input generator fails due to missing dependency.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_basic_runs.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install PySide6\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of PolyChord for Cobaya\nDESCRIPTION: Instructions for manually installing PolyChord from its GitHub repository. This process involves cloning the repository, compiling with MPI support, and building the Python package.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/sampler_polychord.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /path/to/polychord\n$ git clone https://github.com/PolyChord/PolyChordLite.git\n$ cd PolyChordLite\n$ make pypolychord MPI=1\n$ python setup.py build\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Planck 2018 Likelihoods\nDESCRIPTION: Step-by-step bash commands for manually installing the Planck 2018 likelihoods. This includes downloading the required files, configuring and building the clik code with optional dependencies.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihood_planck.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /path/to/likelihoods\n$ mkdir planck_2018\n$ cd planck_2018\n$ wget \"https://pla.esac.esa.int/pla-sl/data-action?COSMOLOGY.COSMOLOGY_OID=151912\"\n$ tar xvjf \"data-action?COSMOLOGY.COSMOLOGY_OID=151912\"\n$ rm \"data-action?COSMOLOGY.COSMOLOGY_OID=151912\"\n$ cd code/plc_3.0/plc-3.01\n$ python waf configure  # [options]\n```\n\n----------------------------------------\n\nTITLE: Creating Conda Environment for Cobaya\nDESCRIPTION: Command to create a conda environment with necessary dependencies for Cobaya.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_basic_runs.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ conda create -n py39forge -c conda-forge python=3.9 scipy pandas matplotlib PyYAML PySide2\n```\n\n----------------------------------------\n\nTITLE: Resuming an Existing Cobaya Run\nDESCRIPTION: Demonstrates how to continue a previous Cobaya analysis by specifying its output directory on the command line.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/input.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cobaya-run input.yaml    # writes into 'output: chains/gauss'\n$ cobaya-run chains/gauss  # continues the previous one; no need for -r!!!\n```\n\n----------------------------------------\n\nTITLE: Cloning Cobaya from GitHub for development\nDESCRIPTION: Commands to clone the Cobaya repository from GitHub and install it in development mode, allowing users to modify the code and contribute to the project.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/tests/cosmo_timing.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/CobayaSampler/cobaya.git\ncd cobaya\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Getting Component Documentation in Cobaya\nDESCRIPTION: Command to get available options and default values for a Cobaya component.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_basic_runs.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ cobaya-doc [component_name]\n```\n\n----------------------------------------\n\nTITLE: Explicit Parameter Configuration for Gaussian Mixture\nDESCRIPTION: Example showing how to explicitly specify input parameter names for a Gaussian mixture likelihood with specific means and covariance values.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihood_gaussian_mixture.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlikelihood:\n  gaussian_mixture:\n    means: [[1.04103e-2, 0.02223, 0.1192]]\n    covs: [[6.8552146e-16, 1.4486860e-12, -1.4105674e-11],\n           [1.4486860e-12, 2.1344167e-08, -1.1534501e-07],\n           [-1.4105674e-11, -1.1534501e-07, 1.6977630e-06]]\n    input_params: ['thetastar', 'ombh2', 'omch2']\n    output_params: []\n```\n\n----------------------------------------\n\nTITLE: Bibliography Integration Example\nDESCRIPTION: Shows how to implement automatic bibliography generation for a likelihood class.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_external_likelihood_class.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef get_bibtex(cls):\n    from inspect import cleandoc  # to remove indentation\n    return cleandoc(r\"\"\"\n        # Your bibtex code here! e.g.:\n        @article{Torrado:2020dgo,\n            author = \"Torrado, Jesus and Lewis, Antony\",\n             title = \"{Cobaya: Code for Bayesian Analysis of hierarchical physical models}\",\n             eprint = \"2005.05290\",\n             archivePrefix = \"arXiv\",\n             primaryClass = \"astro-ph.IM\",\n             reportNumber = \"TTK-20-15\",\n             doi = \"10.1088/1475-7516/2021/05/057\",\n             journal = \"JCAP\",\n             volume = \"05\",\n             pages = \"057\",\n             year = \"2021\"\n        }\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Creating Parameter Tables from Grid Results\nDESCRIPTION: Command to generate tables of results with 95% confidence limits. Creates a PDF document containing tables of all the results from grid runs.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/grids.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncobaya-grid-tables grid_folder output_file --limit 2\n```\n\n----------------------------------------\n\nTITLE: Dry-Running Grid Jobs in Cobaya\nDESCRIPTION: Command to perform a dry run of the grid, showing which jobs would be submitted without actually executing them. This helps verify job configurations before actual submission.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/grids.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncobaya-grid-run grid_folder --dryrun\n```\n\n----------------------------------------\n\nTITLE: Likelihood Configuration in YAML\nDESCRIPTION: YAML configuration example for a cosmological likelihood, including file paths, aliases, speed settings and parameter definitions.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/cosmo_external_likelihood_class.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncl_file: /path/do/data_file\n# Aliases for automatic covariance matrix\naliases: [myOld]\n# Speed in evaluations/second (after theory inputs calculated).\nspeed: 500\nparams:\n  my_foreground_amp:\n    prior:\n      dist: uniform\n      min: 0\n      max: 100\n    ref:\n      dist: norm\n      loc: 153\n      scale: 27\n    proposal: 27\n    latex: A^{f}_{\nm{mine}}\n```\n\n----------------------------------------\n\nTITLE: Configuring PolyChord Path in Cobaya YAML Configuration\nDESCRIPTION: Example YAML configuration showing how to specify the PolyChord installation path in a Cobaya input file. This allows Cobaya to locate and use the installed PolyChord sampler.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/sampler_polychord.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsampler:\n  polychord:\n    path: /path/to/polychord/PolyChordLite\n```\n\n----------------------------------------\n\nTITLE: Viewing GetDist Convergence Results\nDESCRIPTION: Command to display convergence statistics generated by GetDist for all chains in a grid.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/grids.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncobaya-grid-converge grid_folder\n```\n\n----------------------------------------\n\nTITLE: Using Internal Module-Based Likelihood Classes in YAML\nDESCRIPTION: Syntax for using an internal likelihood class defined in a module file within a likelihood directory. The module name is included in the path.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihoods.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlikelihood:\n  directory_name.module_name.ClassName:\n    [option 1]: [value 1]\n    [...]\n```\n\n----------------------------------------\n\nTITLE: Checking Cobaya installation\nDESCRIPTION: Command to run basic tests that verify if Cobaya has been installed correctly on the system.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/tests/cosmo_timing.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncobaya-test\n```\n\n----------------------------------------\n\nTITLE: Exporting a Grid to ZIP Archive\nDESCRIPTION: Command to copy a grid for distribution, creating a ZIP archive without unwanted files. Useful for sharing grid results with others.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/grids.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncobaya-grid-copy grid_folder grid_folder_export.zip\n```\n\n----------------------------------------\n\nTITLE: Checking Grid Chain Convergence from Checkpoints\nDESCRIPTION: Command to show the convergence status of chains from checkpoint files. Useful for monitoring progress while jobs are still running.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/grids.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncobaya-grid-converge grid_folder --checkpoint\n```\n\n----------------------------------------\n\nTITLE: Using Internal Likelihood Classes in YAML\nDESCRIPTION: Syntax for using an internal likelihood class in a Cobaya input file. The path to the class is specified, along with any options needed for configuration.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihoods.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlikelihood:\n  directory_name.ClassName:\n    [option 1]: [value 1]\n    [...]\n```\n\n----------------------------------------\n\nTITLE: Legacy Method for Gathering MCMC Samples\nDESCRIPTION: An alternative approach for gathering and processing MCMC samples from multiple MPI processes, applicable for Cobaya v3.2.2 and older. This method shows manual chain gathering and concatenation.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/sampler_mcmc.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nall_chains = comm.gather(mcmc.products()[\"sample\"], root=0)\n\n# Pass all of them to GetDist in rank = 0\n\nif rank == 0:\n    from getdist.mcsamples import MCSamplesFromCobaya\n    gd_sample = MCSamplesFromCobaya(upd_info, all_chains)\n\n# Manually concatenate them in rank = 0 for some custom manipulation,\n# skipping 1st 3rd of each chain\n\ncopy_and_skip_1st_3rd = lambda chain: chain[int(len(chain) / 3):]\nif rank == 0:\n    full_chain = copy_and_skip_1st_3rd(all_chains[0])\n    for chain in all_chains[1:]:\n        full_chain.append(copy_and_skip_1st_3rd(chain))\n    # The combined chain is now `full_chain`\n```\n\n----------------------------------------\n\nTITLE: Running Importance Sampling on Grid Results\nDESCRIPTION: Command to perform importance sampling on previously generated chains in a grid. This is used after the main samples are generated if importance_runs are configured.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/grids.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncobaya-grid-run grid_folder --importance\n```\n\n----------------------------------------\n\nTITLE: Configuring Planck Likelihoods in Cobaya YAML\nDESCRIPTION: Example of how to specify Planck likelihoods with custom paths in a Cobaya configuration file. This demonstrates how to point to specific clik files using absolute paths when not using the automatic installation.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihood_planck.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlikelihood:\n  planck_2018_lowl.TT_clik:\n    clik_file: /your/path/to/plc_3.0/low_l/commander/commander_dx12_v3_2_29.clik\n  planck_2018_highl_plik.TTTEEE:\n    clik_file: /your/path/to/plc_3.0/hi_l/plik/plik_rd12_HM_v22b_TTTEEE.clik\n```\n\n----------------------------------------\n\nTITLE: Analyzing Parameter Constraints with GetDist\nDESCRIPTION: Command to run GetDist on all chains in a grid, removing a specified burn-in portion. This generates parameter constraints and convergence statistics.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/grids.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncobaya-grid-getdist grid_folder --burn_remove 0.3\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific File Types from Grid Results\nDESCRIPTION: Command to extract specific file types from a grid, such as GetDist marginal statistics tables and covariance matrices.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/grids.rst#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncobaya-grid-extract grid_folder output_dir .margestats .covmat\n```\n\n----------------------------------------\n\nTITLE: Installing pytest and Related Packages\nDESCRIPTION: Command to install pytest and additional packages required for running Cobaya's test suite. These include pytest-xdist for parallel testing, pytest-cov for coverage reports, flaky for retrying flaky tests, and dill for object serialization.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/DEVEL.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install pytest pytest-xdist pytest-cov flaky dill\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Usage in YAML Configuration\nDESCRIPTION: Example from v3.2.2 showing how environment variables can be used in YAML config files\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npath: ${SOME_ENV_VAR}/data\nroot: {YAML_ROOT}/relative/path\n```\n\n----------------------------------------\n\nTITLE: Restarting Unconverged Grid Chains\nDESCRIPTION: Command to restart finished runs that haven't reached convergence. Useful when runs stop prematurely due to wall time limits.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/grids.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncobaya-grid-run grid_folder --checkpoint_run\n```\n\n----------------------------------------\n\nTITLE: Setting Cobaya Job Template Environment Variable\nDESCRIPTION: Command to set the default job template path in the shell environment\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/run_job.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport COBAYA_job_template=/path/to/my_cluster_job_script_template\n```\n\n----------------------------------------\n\nTITLE: Documenting CAMB Wrapper Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the CAMB wrapper class in the Cobaya sampler project. The :members: option includes documentation for all class members.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/theory_camb.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: theories.camb.CAMB\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting CLASS Wrapper Class in reStructuredText\nDESCRIPTION: This snippet uses reStructuredText directives to generate documentation for the CLASS wrapper class in Cobaya. It specifies the class path and includes all class members in the documentation.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/theory_class.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: theories.classy.classy\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Generating Supernovae Likelihood Documentation in Python\nDESCRIPTION: This snippet demonstrates how to use the cobaya-doc command to generate documentation for supernovae likelihoods in Cobaya. It lists available internal likelihoods for supernovae.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihood_sn.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ncobaya-doc sn\n```\n\n----------------------------------------\n\nTITLE: Documenting CAMB Module in Python\nDESCRIPTION: This snippet uses Sphinx's automodule directive to generate documentation for the CAMB module in the Cobaya sampler project. The :noindex: option is used to prevent duplicate entries in the index.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/theory_camb.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: theories.camb.camb\n   :noindex:\n```\n\n----------------------------------------\n\nTITLE: Cobaya Job Template Selection Command\nDESCRIPTION: Command showing how to specify a custom job template for submission\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/run_job.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncobaya-run-job --walltime 12:00:00 --job-template job_script_NERSC [yaml_file].yaml\n```\n\n----------------------------------------\n\nTITLE: Reading Large-Scale Structure Data Example\nDESCRIPTION: Code example mentioned in v3.3 update for loading BAO data and LSS likelihood handling.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlikelihoods:\n  lss_likelihood:\n    data_type: bao\n    data_1d: True\n    include_elg: True\n    include_qso: True\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for DES Y1 Likelihood Module in Cobaya\nDESCRIPTION: This restructuredtext directive automatically generates documentation for the DES Y1 clustering and weak lensing likelihood module in Cobaya. It includes all docstrings and other documentation from the specified module.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihood_des.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: cobaya.likelihoods.base_classes.des\n   :noindex:\n```\n\n----------------------------------------\n\nTITLE: YAML Infinity Specification\nDESCRIPTION: Shows the correct syntax for specifying infinite values in YAML, along with common mistakes.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/input.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\na: .inf  # this produces the *number* Infinity\nb: +.inf  # this produces the *number* Infinity\nc: -.inf  # this produces the *number* -Infinity\nd: inf  # this produces the *string* 'inf' (won't fail immediately)\n```\n\n----------------------------------------\n\nTITLE: Cobaya BAO Documentation Command\nDESCRIPTION: ReStructuredText directive to display output of the cobaya-doc command showing available BAO likelihoods.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihood_bao.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. program-output:: cobaya-doc bao\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule Documentation for BICEP/Keck Likelihood\nDESCRIPTION: Sphinx documentation directive to automatically generate documentation for the BICEP/Keck 2018 likelihood module in Cobaya. Uses the noindex option to prevent duplicate indexing.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihood_bk.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: cobaya.likelihoods.bicep_keck_2018\n   :noindex:\n```\n\n----------------------------------------\n\nTITLE: Installing Cobaya with test dependencies using pip\nDESCRIPTION: This command installs Cobaya in editable mode with test dependencies using pip. It's used for development purposes, allowing changes to the source code to be immediately reflected.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/installation.rst#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install --editable cobaya[test] --upgrade\n```\n\n----------------------------------------\n\nTITLE: Including Development Guide in reStructuredText\nDESCRIPTION: This snippet uses the reStructuredText include directive to embed the contents of the DEVEL.rst file from the parent directory into the current document.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/devel.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../DEVEL.rst\n```\n\n----------------------------------------\n\nTITLE: Configuring Pip Index and Installing Local Package in Editable Mode\nDESCRIPTION: This snippet specifies the PyPI index URL for pip to use when installing packages, and installs the current directory as an editable package, allowing for changes to the source code to be immediately reflected without reinstallation.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n--index-url https://pypi.python.org/simple/\n\n-e .\n```\n\n----------------------------------------\n\nTITLE: Documenting CLASS Wrapper Module in reStructuredText\nDESCRIPTION: This snippet uses reStructuredText directives to generate documentation for the CLASS wrapper module in Cobaya. It specifies the module path and disables index generation.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/theory_class.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: theories.classy.classy\n   :noindex:\n```\n\n----------------------------------------\n\nTITLE: Applying GPL License Notice Template for Source Files\nDESCRIPTION: Standard GPL license notice template to be included at the beginning of each source file, containing placeholder fields for program name, copyright year, and author information.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/LICENCE.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Example of YAML Indentation Errors\nDESCRIPTION: Demonstrates incorrect indentation in YAML that would cause parsing errors in Cobaya input files.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/input.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsampler:\n  mcmc:\n    burn_in: 10\n     max_samples: 100  # ERROR: should be aligned with 'burn_in'\n\nparams:\n  a:\n    prior:\n      min: 0\n      max: 1\n     latex: \\alpha  # ERROR:  should be aligned with 'prior'\n```\n\n----------------------------------------\n\nTITLE: Cobaya BAO Module Import\nDESCRIPTION: ReStructuredText directive to automatically generate documentation for the BAO base classes module in Cobaya.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/likelihood_bao.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: cobaya.likelihoods.base_classes.bao\n   :noindex:\n```\n\n----------------------------------------\n\nTITLE: Defining Log-Transformed Parameter in YAML for Cobaya\nDESCRIPTION: This snippet demonstrates how to define a parameter 'logx' in Cobaya's input YAML, which is sampled in log space but used as 'x' in the likelihood. It uses the 'subs' key to specify the transformation function.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/DEVEL.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nparams:\n  logx:\n    prior: ...  # whatever prior, over logx, not x!\n    ref: ...    # whatever reference pdf, over logx, not x!\n    subs:\n      x: lambda logx: numpy.exp(logx)\n```\n\n----------------------------------------\n\nTITLE: Defining Derived Parameters for Fixed Function-based Parameters in Cobaya YAML\nDESCRIPTION: This YAML snippet demonstrates how to store a fixed parameter (v) that is specified through a function as a derived parameter (V) in Cobaya. It shows the definition of a sampled parameter (u), a fixed parameter (v) defined as a function of u, and a derived parameter (V) that copies the value of v.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/DEVEL.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nparams:\n  u:\n    prior: ...  # *transformed* from prior of y\n  v: lambda u: 3/2*u\n  V:\n    derived: lambda v: v\n```\n\n----------------------------------------\n\nTITLE: Running Flake8 for Code Style Checking\nDESCRIPTION: Command to run flake8 for checking code style and formatting in the Cobaya source code. It specifies various error codes to check for, including indentation, whitespace, imports, and syntax errors.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/DEVEL.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflake8 cobaya --select=E713,E704,E703,E714,E741,E10,E11,E20,E22,E23,E25,E27,E301,E302,E304,E9,F405,F406,F5,F6,F7,F8,W1,W2,W3,W6 --show-source\n```\n\n----------------------------------------\n\nTITLE: Terminal Interaction License Notice Template\nDESCRIPTION: Short GPL license notice template for programs with terminal interaction, to be displayed when the program starts in interactive mode, with placeholders for program name, year, and author.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/LICENCE.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrect YAML Syntax\nDESCRIPTION: Demonstrates common YAML errors including using equals signs instead of colons, missing colons, and incorrect indentation.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/input.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsampler:\n  mcmc:\n    burn_in = 10   # ERROR: should be 'burn_in: 10'\n    max_tries:100  # ERROR: should have a space: 'max_tries: 100'\n```\n\n----------------------------------------\n\nTITLE: Example of Missing Colons in YAML\nDESCRIPTION: Shows an error case where a component definition is missing the required colon at the end.\nSOURCE: https://github.com/cobayasampler/cobaya/blob/master/docs/input.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsampler:\n  mcmc  # ERROR: no colon!\n```"
  }
]