[
  {
    "owner": "inngest",
    "repo": "agent-kit",
    "content": "TITLE: Providing a Default State for the Network\nDESCRIPTION: This code demonstrates how to provide a default state for the network using the `defaultState` option. It creates a new `State` instance with a predefined key-value pair (`foo: 'bar'`) and passes it to the `defaultState` option during network creation. This allows you to initialize the network with external data or persist state between runs.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/networks.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNetwork } from '@inngest/agent-kit';\n\n// searchAgent and summaryAgent definitions...\n\nconst network = createNetwork({\n  agents: [searchAgent, summaryAgent],\n  defaultState: new State({\n    foo: 'bar',\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Router Agent with createRoutingAgent\nDESCRIPTION: This snippet demonstrates how to create a Router Agent using the `createRoutingAgent` helper function from the `@inngest/agent-kit` library. The Router Agent orchestrates other agents within a network, deciding which agent to use based on the current context and goal. It leverages a dynamic system prompt, tools, and lifecycle callbacks to achieve autonomous orchestration.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-agents.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoutingAgent } from \"@inngest/agent-kit\";\n\nconst router = createRoutingAgent({\n  name: \"Code Assistant routing agent\",\n  system: async ({ network }): Promise<string> => {\n    if (!network) {\n      throw new Error(\n        \"The routing agent can only be used within a network of agents\"\n      );\n    }\n    const agents = await network?.availableAgents();\n    return `You are the orchestrator between a group of agents. Each agent is suited for a set of specific tasks, and has a name, instructions, and a set of tools.\n      \n      The following agents are available:\n      <agents>\n      ${agents\n        .map((a) => {\n          return `\n        <agent>\n          <name>${a.name}</name>\n          <description>${a.description}</description>\n          <tools>${JSON.stringify(Array.from(a.tools.values()))}</tools>\n        </agent>`;\n        })\n        .join(\"\\n\")}\n      </agents>\n      \n      Follow the set of instructions:\n      \n      <instructions>\n      Think about the current history and status.\n      If the user issue has been fixed, call select_agent with \"finished\"\n      Otherwise, determine which agent to use to handle the user's request, based off of the current agents and their tools.\n      \n      Your aim is to thoroughly complete the request, thinking step by step, choosing the right agent based off of the context.\n      </instructions>`;\n  },\n  tools: [\n    createTool({\n      name: \"select_agent\",\n      description:\n        \"select an agent to handle the input, based off of the current conversation\",\n      parameters: z\n        .object({\n          name: z\n            .string()\n            .describe(\"The name of the agent that should handle the request\"),\n        })\n        .strict(),\n      handler: ({ name }, { network }) => {\n        if (!network) {\n          throw new Error(\n            \"The routing agent can only be used within a network of agents\"\n          );\n        }\n        if (name === \"finished\") {\n          return undefined;\n        }\n        const agent = network.agents.get(name);\n        if (agent === undefined) {\n          throw new Error(\n            `The routing agent requested an agent that doesn't exist: ${name}`\n          );\n        }\n        return agent.name;\n      },\n    }),\n  ],\n  tool_choice: \"select_agent\",\n  lifecycle: {\n    onRoute: ({ result }) => {\n      const tool = result.toolCalls[0];\n      if (!tool) {\n        return;\n      }\n      const agentName = (tool.content as any).data || (tool.content as string);\n      if (agentName === \"finished\") {\n        return;\n      } else {\n        return [agentName];\n      }\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Transform AgentKit Network to Inngest Function Typescript\nDESCRIPTION: This snippet transforms an AgentKit network into an Inngest function.  It defines an agent, creates a network with a default model and agents, and then creates an Inngest function that triggers the AgentKit network's `run` method when invoked by an event. It requires `@inngest/agent-kit` and `./inngest/client` as dependencies.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/snippets/transform-network-into-inngest-function.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, createNetwork, openai } from \"@inngest/agent-kit\";\nimport { createServer } from \"@inngest/agent-kit/server\";\n\nimport { inngest } from \"./inngest/client\";\n\nconst deepResearchAgent = createAgent({\n  name: \"Deep Research Agent\",\n  tools: [\n    /* ... */\n  ],\n});\n\nconst network = createNetwork({\n  name: \"My Network\",\n  defaultModel: openai({ model: \"gpt-4o\" }),\n  agents: [deepResearchAgent],\n});\n\nconst deepResearchNetworkFunction = inngest.createFunction(\n  {\n    id: \"deep-research-network\",\n  },\n  {\n    event: \"deep-research-network/run\",\n  },\n  async ({ event, step }) => {\n    const { input } = event.data;\n    return network.run(input);\n  }\n);\n\nconst server = createServer({\n  functions: [deepResearchNetworkFunction],\n});\n\nserver.listen(3010, () => console.log(\"Agent kit running!\"));\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Agent with createAgent in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a basic agent using the `createAgent` function from the `@inngest/agent-kit` library. It defines an agent named 'Code writer' with a specific system prompt and uses the OpenAI `gpt-4o-mini` model. This agent is designed for writing TypeScript code based on given instructions.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/agents.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, openai } from '@inngest/agent-kit';\n\nconst codeWriterAgent = createAgent({\n  name: 'Code writer',\n  system:\n    'You are an expert TypeScript programmer.  Given a set of asks, you think step-by-step to plan clean, ' +\n    'idiomatic TypeScript code, with comments and tests as necessary.' +\n    'Do not respond with anything else other than the following XML tags:' +\n    '- If you would like to write code, add all code within the following tags (replace $filename and $contents appropriately):' +\n    \"  <file name='$filename.ts'>$contents</file>\",\n  model: openai('gpt-4o-mini'),\n});\n```\n\n----------------------------------------\n\nTITLE: Create a Database Administrator Agent (TypeScript)\nDESCRIPTION: Creates an agent for PostgreSQL database administration using AgentKit. The agent is configured with a name, description, system prompt, and Anthropic's Claude 3.5 Haiku model.  Requires `@inngest/agent-kit` as a dependency.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/quick-start.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, anthropic } from '@inngest/agent-kit';\n\n    const dbaAgent = createAgent({\n      name: 'Database administrator',\n      description: 'Provides expert support for managing PostgreSQL databases',\n      system:\n        'You are a PostgreSQL expert database administrator. ' +\n        'You only provide answers to questions linked to Postgres database schema, indexes, extensions.',\n      model: anthropic({\n        model: 'claude-3-5-haiku-latest',\n        defaultParameters: {\n          max_tokens: 1000,\n        },\n      }),\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing AgentKit Router\nDESCRIPTION: This snippet demonstrates how to implement a Router function for an AgentKit Network.  The router dynamically selects the next agent to execute based on the current state of the network, making decisions based on the presence of 'code', 'plan', and 'summary' in the network's key-value store.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst network = createNetwork({\n  name: \"code-assistant-v2\",\n  agents: [\n    codeAssistantAgent,\n    documentationAgent,\n    analysisAgent,\n    summarizationAgent,\n  ],\n  router: ({ network }) => {\n    if (!network?.state.kv.has(\"code\") || !network?.state.kv.has(\"plan\")) {\n      return codeAssistantAgent;\n    } else {\n      const plan = (network?.state.kv.get(\"plan\") || []) as string[];\n      const nextAgent = plan.pop();\n      if (nextAgent) {\n        network?.state.kv.set(\"plan\", plan);\n        return network?.agents.get(nextAgent);\n      } else if (!network?.state.kv.has(\"summary\")) {\n        return summarizationAgent;\n      } else {\n        return undefined;\n      }\n    }\n  },\n  defaultModel: anthropic({\n    model: \"claude-3-5-sonnet-latest\",\n    max_tokens: 4096,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Network with Two Agents\nDESCRIPTION: This code snippet demonstrates how to create a network with two agents using the `createNetwork` function from the `@inngest/agent-kit` package.  It imports necessary modules, defines agent instances (`searchAgent` and `summaryAgent` are assumed to be defined elsewhere), and then creates the network by passing an array of agents to the `agents` option. Finally it demonstrates running the network with a user prompt.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/networks.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNetwork, openai } from '@inngest/agent-kit';\n\n// searchAgent and summaryAgent definitions...\n\n// Create a network with two agents.\nconst network = createNetwork({\n  agents: [searchAgent, summaryAgent],\n});\n\n// Run the network with a user prompt\nawait network.run('What happened in the 2024 Super Bowl?');\n```\n\n----------------------------------------\n\nTITLE: Creating a custom Router with Code\nDESCRIPTION: This snippet demonstrates how to define a custom router function for an Inngest Agent Network. It uses the `createNetwork` function from `@inngest/agent-kit` and defines a router that selects between two agents (`classifier` and `writer`) based on the `callCount` and the content of the last agent's output. The router returns an `Agent` instance to call the next agent or `undefined` to stop the network's execution.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/routers.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createNetwork } from \"@inngest/agent-kit\";\n\n// classifier and writer Agents definition...\n\nconst network = createNetwork({\n  agents: [classifier, writer],\n  router: ({ lastResult, callCount }) => {\n    // retrieve the last message from the output\n    const lastMessage = lastResult?.output[lastResult?.output.length - 1];\n    const content =\n      lastMessage?.type === \"text\" ? (lastMessage?.content as string) : \"\";\n    // First call: use the classifier\n    if (callCount === 0) {\n      return classifier;\n    }\n    // Second call: if it's a question, use the writer\n    if (callCount === 1 && content.includes(\"question\")) {\n      return writer;\n    }\n    // Otherwise, we're done!\n    return undefined;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Analyzing file with network and retrieving summary in TypeScript\nDESCRIPTION: This snippet uses the AgentKit `network` to run an analysis on a specified file. It then retrieves a summary of the analysis from the shared `kv` state and prints it to the console.  This demonstrates how to trigger an agentic workflow and access its results.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  state: { kv },\n} = await network.run(\n  `Analyze the files/example.ts file by suggesting improvements and documentation.`\n);\nconsole.log(\"Analysis:\", kv.get(\"summary\"));\n```\n\n----------------------------------------\n\nTITLE: Routing: Using a Custom Router Function\nDESCRIPTION: This code demonstrates how to use a custom router function to determine the next agent to run in the network. The `router` function receives the `lastResult` and `callCount` as arguments and returns an agent instance or `undefined` to stop the network. This example shows conditional routing based on the content of the last message and the number of calls.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/networks.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { createNetwork } from '@inngest/agent-kit';\n\n// classifier and writer Agents definition...\n\nconst network = createNetwork({\n  agents: [classifier, writer],\n  router: ({ lastResult, callCount }) => {\n    // retrieve the last message from the output\n    const lastMessage = lastResult?.output[lastResult?.output.length - 1];\n    const content = lastMessage?.type === 'text' ? lastMessage?.content as string : '';\n    // First call: use the classifier\n    if (callCount === 0) {\n      return classifier;\n    }\n    // Second call: if it's a question, use the writer\n    if (callCount === 1 && content.includes('question')) {\n      return writer;\n    }\n    // Otherwise, we're done!\n    return undefined;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Router Function in TypeScript\nDESCRIPTION: This TypeScript code shows the implementation of a router function that determines which agent should run next based on the network's state. It inspects the `done` flag and the existence of a `plan` to decide between the `planningAgent` and the `editingAgent`. It demonstrates how to control the execution flow within the agent network.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/advanced-patterns/routing.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const codeWritingNetwork = createNetwork<AgentState>({\n  name: \"Code writing network\",\n  agents: [], // We'll add these soon.\n  router: ({ network }): Agent | undefined => {\n    // The router inspects network state to figure out which agent to call next.\n\n    if (network.state.data.done) {\n        // We're done editing.  This is set when the editing agent finishes\n        // implementing the plan.\n        //\n        // At this point, we could hand off to another agent that tests, critiques,\n        // and validates the edits.  For now, return undefined to signal that\n        // the network has finished.\n        return;\n    }\n  \n    // By default, there is no plan and we should use the planning agent to read and\n    // understand files.  The planning agent's `create_plan` tool modifies state once\n    // it's gathered enough context, which will then cause the router loop to pass\n    // to the editing agent below.\n    if (network.state.data.plan === undefined) {\n        return planningAgent;\n    }\n  \n    // There is a plan, so switch to the editing agent to begin implementing.\n    //\n    // This lets us separate the concerns of planning vs editing, including using differing\n    // prompts and tools at various stages of the editing process.\n    return editingAgent;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grok Model with Options\nDESCRIPTION: This code snippet illustrates how to configure Grok with advanced options such as API key, base URL, and default parameters. It showcases the usage of the `grok` function with a configuration object.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/model-grok.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst agent = createAgent({\n  model: grok({\n    model: \"grok-3-latest\",\n    apiKey: process.env.XAI_API_KEY,\n    baseUrl: \"https://api.x.ai/v1\",\n    defaultParameters: { temperature: 0.5 },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating File System Tools (Typescript)\nDESCRIPTION: This snippet defines three tools: writeFile, readFile, and searchCode. writeFile writes a file to the filesystem, readFile reads a file from the filesystem, and searchCode searches for a given pattern in the project files. These tools provide the Agents with capabilities to interact with the file system and search through code.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-agents.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTool } from \"@inngest/agent-kit\";\n\nconst writeFile = createTool({\n  name: \"writeFile\",\n  description: \"Write a file to the filesystem\",\n  parameters: z.object({\n    path: z.string().describe(\"The path to the file to write\"),\n    content: z.string().describe(\"The content to write to the file\"),\n  }),\n  handler: async ({ path, content }) => {\n    try {\n      let relativePath = path.startsWith(\"/\") ? path.slice(1) : path;\n      writeFileSync(relativePath, content);\n      return \"File written\";\n    } catch (err) {\n      console.error(`Error writing file ${path}:`, err);\n      throw new Error(`Failed to write file ${path}`);\n    }\n  },\n});\n\nconst readFile = createTool({\n  name: \"readFile\",\n  description: \"Read a file from the filesystem\",\n  parameters: z.object({\n    path: z.string().describe(\"The path to the file to read\"),\n  }),\n  handler: async ({ path }) => {\n    try {\n      let relativePath = path.startsWith(\"/\") ? path.slice(1) : path;\n      const content = readFileSync(relativePath, \"utf-8\");\n      return content;\n    } catch (err) {\n      console.error(`Error reading file ${path}:`, err);\n      throw new Error(`Failed to read file ${path}`);\n    }\n  },\n});\n\nconst searchCode = createTool({\n  name: \"searchCode\",\n  description: \"Search for a given pattern in a project files\",\n  parameters: z.object({\n    query: z.string().describe(\"The query to search for\"),\n  }),\n  handler: async ({ query }) => {\n    const searchFiles = (dir: string, searchQuery: string): string[] => {\n      const results: string[] = [];\n      const walk = (currentPath: string) => {\n        const files = readdirSync(currentPath);\n        for (const file of files) {\n          const filePath = join(currentPath, file);\n          const stat = statSync(filePath);\n          if (stat.isDirectory()) {\n            walk(filePath);\n          } else {\n            try {\n              const content = readFileSync(filePath, \"utf-8\");\n              if (content.includes(searchQuery)) {\n                results.push(filePath);\n              }\n            } catch (err) {\n              console.error(`Error reading file ${filePath}:`, err);\n            }\n          }\n        }\n      };\n      walk(dir);\n      return results;\n    };\n    const matches = searchFiles(process.cwd(), query);\n    return matches.length === 0\n      ? \"No matches found\"\n      : `Found matches in following files:\\n${matches.join(\"\\n\")}`;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Tool with createTool in Typescript\nDESCRIPTION: This snippet demonstrates the basic structure of a tool defined using the `createTool` function from the `@inngest/agent-kit` package. It showcases the tool's name, description, parameters (defined using a JSON schema), and the handler function that executes the tool's logic. The handler writes a file to disk using `fs.writeFile` and returns a success status.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/create-tool.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTool } from '@inngest/agent-kit';\n\nconst tool = createTool({\n  name: 'write-file',\n  description: 'Write a file to disk with the given contents',\n  parameters: {\n    type: 'object',\n    properties: {\n      path: {\n        type: 'string',\n        description: 'The path to write the file to',\n      },\n      contents: {\n        type: 'string',\n        description: 'The contents to write to the file',\n      },\n    },\n    required: ['path', 'contents'],\n  },\n  handler: async ({ path, contents }, { agent, network }) => {\n    await fs.writeFile(path, contents);\n    return { success: true };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using State in a Tool's Handler (TypeScript)\nDESCRIPTION: This code demonstrates how to use the network state within a tool's handler to store and retrieve data. Specifically, it shows how to write files and their contents to the state, acting as a temporary store managed by the Agent.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/state.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst writeFiles = createTool({\n  name: \"write_files\",\n  description: \"Write code with the given filenames\",\n  parameters: z.object({\n    files: z.array(\n      z.object({\n        filename: z.string(),\n        content: z.string(),\n      })\n    ),\n  }),\n  handler: (output, { network }) => {\n    // files is the output from the model's response in the format above.\n    // Here, we store OpenAI's generated files in the response.\n    const files = network.state.data.files || {};\n    for (const file of output.files) {\n      files[file.filename] = file.content;\n    }\n    network.state.data.files = files;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Create a Network with Agents (TypeScript)\nDESCRIPTION: Creates a network of agents using AgentKit.  The network is configured with a name, a list of agents, and a default model. It then updates the server configuration to include the network along with the agents. Requires `@inngest/agent-kit` and pre-existing `dbaAgent` and `securityAgent`.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/quick-start.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { /*...*/ createNetwork } from \"@inngest/agent-kit\";\n// ...\nconst devOpsNetwork = createNetwork({\n  name: \"DevOps team\",\n  agents: [dbaAgent, securityAgent],\n  defaultModel: anthropic({\n    model: \"claude-3-5-haiku-latest\",\n    defaultParameters: {\n      max_tokens: 1000,\n    },\n  }),\n});\nconst server = createServer({\n  agents: [dbaAgent, securityAgent],\n  networks: [devOpsNetwork],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating the Summarization Agent in TypeScript\nDESCRIPTION: This code defines the `summarizationAgent` using `createAgent`.  The `system` property dynamically generates a prompt based on the suggestions stored in the network's state. It uses the `save_summary` tool to save a summary of the suggestions into the shared state. The agent demonstrates how to use the shared state to pass information between agents.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst summarizationAgent = createAgent({\n  name: \"summarization_agent\",\n  system: ({ network }) => {\n    const suggestions = network?.state.kv.get(\"suggestions\") || [];\n    return `Save a summary of the following suggestions:\\n    ${suggestions.join(\"\\n\")}`;\n  },\n  tools: [\n    createTool({\n      name: \"save_summary\",\n      description:\n        \"Save a summary of the suggestions made by other agents into the state\",\n      parameters: z.object({\n        summary: z.string(),\n      }),\n      handler: async (input, { network }) => {\n        network?.state.kv.set(\"summary\", input.summary);\n        return \"Saved!\";\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: createRoutingAgent Example (Typescript)\nDESCRIPTION: Shows how to create a routing agent using `createRoutingAgent` and integrate it into a network using `createNetwork`. The `onRoute` lifecycle method is used to determine the next agent to call based on the previous agent's result. The example filters and validates agent names before returning them.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/network-router.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoutingAgent, createNetwork } from \"@inngest/agent-kit\";\n\nconst routingAgent = createRoutingAgent({\n  name: \"Custom routing agent\",\n  description: \"Selects agents based on the current state and request\",\n  lifecycle: {\n    onRoute: ({ result, network }) => {\n      // Get the agent names from the result\n      const agentNames = result.output\n        .filter((m) => m.type === \"text\")\n        .map((m) => m.content as string);\n\n      // Validate that the agents exist\n      return agentNames.filter((name) => network.agents.has(name));\n    },\n  },\n});\n\n// classifier and writer Agents definition...\n\nconst network = createNetwork({\n  agents: [classifier, writer],\n  router: routingAgent,\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic System Prompts in TypeScript\nDESCRIPTION: This snippet demonstrates how to use a dynamic system prompt for an agent. The system prompt is defined as an async callback that takes the network state as an argument. This allows the system prompt to be dynamically created based on the current network state.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/agents.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst agent = createAgent({\n  name: 'Code writer',\n  description:\n    'An expert TypeScript programmer which can write and debug code.',\n\n  // The system prompt can be dynamically created at runtime using Network state:\n  system: async ({ network }) => {\n    // A default base prompt to build from:\n    const basePrompt =\n      'You are an expert TypeScript programmer. ' +\n      'Given a set of asks, think step-by-step to plan clean, ' +\n      'idiomatic TypeScript code, with comments and tests as necessary.';\n\n    // Inspect the Network state, checking for existing code saved as files:\n    const files: Record<string, string> | undefined = network.state.data.files;\n    if (!files) {\n      return basePrompt;\n    }\n\n    // Add the files from Network state as additional context automatically\n    let additionalContext = 'The following code already exists:';\n    for (const [name, content] of Object.entries(files)) {\n      additionalContext += `<file name='${name}'>${content}</file>`;\n    }\n    return `${basePrompt} ${additionalContext}`;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Routing Agent\nDESCRIPTION: This snippet demonstrates how to create a Routing Agent using the `createRoutingAgent` function from `@inngest/agent-kit`. It defines a routing agent with a name, description, and an `onRoute` lifecycle method. The `onRoute` method contains custom logic for determining which agent to call next.  The snippet then integrates the `routingAgent` into the `createNetwork` configuration as the router.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/routers.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoutingAgent } from \"@inngest/agent-kit\";\n\nconst routingAgent = createRoutingAgent({\n  name: \"Custom routing agent\",\n  description: \"Selects agents based on the current state and request\",\n  lifecycle: {\n    onRoute: ({ result, network }) => {\n      // custom logic...\n    },\n  },\n});\n\n// classifier and writer Agents definition...\n\nconst network = createNetwork({\n  agents: [classifier, writer],\n  router: routingAgent,\n});\n```\n\n----------------------------------------\n\nTITLE: Hybrid Router Example\nDESCRIPTION: This snippet demonstrates how to create a hybrid router that combines code-based routing with a default routing agent. It uses code to select the `classifier` agent for the first call (when `callCount` is 0) and then delegates the routing to the `getDefaultRoutingAgent` for subsequent calls. This allows for predictable initial steps followed by flexible agent-based routing.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/routers.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createNetwork, getDefaultRoutingAgent } from \"@inngest/agent-kit\";\n\n// classifier and writer Agents definition...\n\nconst network = createNetwork({\n  agents: [classifier, writer],\n  router: ({ callCount }) => {\n    // Always start with the classifier\n    if (callCount === 0) {\n      return classifier;\n    }\n    // Then let the routing agent take over\n    return getDefaultRoutingAgent();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an Agent with Tools in TypeScript\nDESCRIPTION: This TypeScript code defines an agent named `planningAgent` with a specific goal, description, and a set of tools. The agent uses tools like `listFilesTool` and `create_plan` to interact with the system and modify the network's state. The `create_plan` tool showcases how an agent can create a plan and update the `plan` property within the agent state.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/advanced-patterns/routing.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// This agent accepts the network state's type, so that tools are properly typed and can\n// modify state correctly.\nexport const planningAgent = createAgent<AgentState>({\n  name: \"Planner\",\n  description: \"Plans the code to write and which files should be edited\",\n  tools: [\n    listFilesTool,\n\n    createTool({\n      name: \"create_plan\",\n      description:\n        \"Describe a formal plan for how to fix the issue, including which files to edit and reasoning.\",\n      parameters: z.object({\n        thoughts: z.string(),\n        plan_details: z.string(),\n        edits: z.array(\n          z.object({\n            filename: z.string(),\n            idea: z.string(),\n            reasoning: z.string(),\n          })\n        ),\n      }),\n\n      handler: async (plan, opts:  Tool.Options<AgentState>) => {\n        // Store this in the function state for introspection in tracing.\n        await opts.step?.run(\"plan created\", () => plan);\n        if (opts.network) {\n          opts.network.state.data.plan = plan;\n        }\n      },\n    }),\n  ],\n\n  // Agent prompts can also inspect network state and conversation history.\n  system: ({ network }) => `\n    You are an expert Python programmer working on a specific project: ${network?.state.data.repo}.\n\n    You are given an issue reported within the project.  You are planning how to fix the issue by investigating the report,\n    the current code, then devising a \"plan\" - a spec - to modify code to fix the issue.\n\n    Your plan will be worked on and implemented after you create it.   You MUST create a plan to\n    fix the issue.  Be thorough. Think step-by-step using available tools.\n\n    Techniques you may use to create a plan:\n    - Read entire files\n    - Find specific classes and functions within a file\n  `,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Tool with Required Parameters in Typescript\nDESCRIPTION: This code snippet demonstrates how to create a tool using the `createTool` function from `@inngest/agent-kit`. The tool, named `list_charges`, is designed to retrieve a user's charges within a specified date range. It defines required parameters such as `userId` and a nested `created` object with `gte` and `lte` date strings, all validated using Zod. The handler function processes these parameters to fetch and return the charges.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/tools.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTool } from '@inngest/agent-kit';\n\nconst listChargesTool = createTool({\n  name: 'list_charges',\n  description:\n    \"Returns all of a user's charges. Call this whenever you need to find one or more charges between a date range.\",\n  parameters: z.object({\n    userId: z.string(),\n    created: z.object({\n      gte: z.string().date(),\n      lte: z.string().date(),\n    }),\n  }),\n  handler: async ({ userId, created }, { network, agent, step }) => {\n    // output is strongly typed to match the parameter type.\n    return [{...}]\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating the Code Assistant Agent in TypeScript\nDESCRIPTION: This snippet defines the `codeAssistantAgent` using the `createAgent` function.  The `system` property is dynamically generated based on the available agents in the network, allowing the LLM to plan the workflow. The agent uses two tools: `read_file` to read code files and `generate_plan` to create a plan of agents to run, both of which save data to the shared state.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst codeAssistantAgent = createAgent({\n  name: \"code_assistant_agent\",\n  system: ({ network }) => {\n    const agents = Array.from(network?.agents.values() || [])\n      .filter(\n        (agent) =>\n          ![\"code_assistant_agent\", \"summarization_agent\"].includes(agent.name)\n      )\n      .map((agent) => `${agent.name} (${agent.system})`);\n    return `From a given user request, ONLY perform the following tool calls:\\n- read the file content\\n- generate a plan of agents to run from the following list: ${agents.join(\", \")}\\n\\nAnswer with \"done\" when you are finished.`;\n  },\n  tools: [\n    createTool({\n      name: \"read_file\",\n      description: \"Read a file from the current directory\",\n      parameters: z.object({\n        filename: z.string(),\n      }),\n      handler: async (input, { network }) => {\n        const filePath = join(process.cwd(), `files/${input.filename}`);\n        const code = readFileSync(filePath, \"utf-8\");\n        network?.state.kv.set(\"code\", code);\n        return \"File read!\";\n      },\n    }),\n    createTool({\n      name: \"generate_plan\",\n      description: \"Generate a plan of agents to run\",\n      parameters: z.object({\n        plan: z.array(z.string()),\n      }),\n      handler: async (input, { network }) => {\n        network?.state.kv.set(\"plan\", input.plan);\n        return \"Plan generated!\";\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Network State in TypeScript\nDESCRIPTION: This code defines the structure of the network state using a TypeScript interface. It shows how to create a typed state object with optional default values and demonstrates how to access and modify the state data.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/state.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NetworkState {\n  // username is undefined until extracted and set by a tool\n  username?: string;\n}\n\n// You can construct typed state with optional defaults, eg. from memory.\nconst state = createState<NetworkState>({\n  username: \"default-username\",\n});\n\nconsole.log(state.data.username); // 'default-username'\nstate.data.username = \"Alice\";\nconsole.log(state.data.username); // 'Alice'\n```\n\n----------------------------------------\n\nTITLE: Defining Code-Based Router in AgentKit (TSX)\nDESCRIPTION: This code demonstrates a code-based router in AgentKit. It defines agents for documentation, analysis, and summarization, orchestrated by a `codeAssistantAgent`. The routing logic relies on a shared state managed using key-value storage (`network?.state.kv`). The router determines which agent to call based on the state of the `code`, `plan`, and `summary` keys. Imports from `@inngest/agent-kit`, `zod`, `fs`, and `path` are required.  The code leverages the Anthropic Claude model.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/README.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from \"zod\";\nimport {\\n  anthropic,\\n  createAgent,\\n  createNetwork,\\n  createTool,\\n} from \"@inngest/agent-kit\";\n\nimport { readFileSync } from \"fs\";\nimport { join } from \"path\";\n\n// create a shared tool\nconst saveSuggestions = createTool({\n  name: \"save_suggestions\",\n  description: \"Save the suggestions made by other agents into the state\",\n  parameters: z.object({\n    suggestions: z.array(z.string()),\n  }),\n  handler: async (input, { network }) => {\n    const suggestions = network?.state.kv.get(\"suggestions\") || [];\n    network?.state.kv.set(\"suggestions\", [\n      ...suggestions,\n      ...input.suggestions,\n    ]);\n    return \"Suggestions saved!\";\n  },\n});\n\n// create agents with access to the state via the `saveSuggestions` tool\nconst documentationAgent = createAgent({\n  name: \"documentation_agent\",\n  system: \"You are an expert at generating documentation for code\",\n  tools: [saveSuggestions],\n});\n\nconst analysisAgent = createAgent({\n  name: \"analysis_agent\",\n  system: \"You are an expert at analyzing code and suggesting improvements\",\n  tools: [saveSuggestions],\n});\n\nconst summarizationAgent = createAgent({\n  name: \"summarization_agent\",\n  system: ({ network }) => {\n    const suggestions = network?.state.kv.get(\"suggestions\") || [];\n    return `Save a summary of the following suggestions:\\n    ${suggestions.join(\"\\n\")}`;\n  },\n  tools: [\n    createTool({\n      name: \"save_summary\",\n      description:\n        \"Save a summary of the suggestions made by other agents into the state\",\n      parameters: z.object({\n        summary: z.string(),\n      }),\n      handler: async (input, { network }) => {\n        network?.state.kv.set(\"summary\", input.summary);\n        return \"Saved!\";\n      },\n    }),\n  ],\n});\n\n// Create the code assistant agent which generates a plan\nconst codeAssistantAgent = createAgent({\n  name: \"code_assistant_agent\",\n  system: ({ network }) => {\n    const agents = Array.from(network?.agents.values() || [])\n      .filter(\n        (agent) =>\n          ![\"code_assistant_agent\", \"summarization_agent\"].includes(agent.name)\n      )\n      .map((agent) => `${agent.name} (${agent.system})`);\n    return `From a given user request, ONLY perform the following tool calls:\\n- read the file content\n- generate a plan of agents to run from the following list: ${agents.join(\", \")}\\n\nAnswer with \"done\" when you are finished.`;\n  },\n  tools: [\n    createTool({\n      name: \"read_file\",\n      description: \"Read a file from the current directory\",\n      parameters: z.object({\n        filename: z.string(),\n      }),\n      handler: async (input, { network }) => {\n        const filePath = join(process.cwd(), `files/${input.filename}`);\n        const code = readFileSync(filePath, \"utf-8\");\n        network?.state.kv.set(\"code\", code);\n        return \"File read!\";\n      },\n    }),\n    createTool({\n      name: \"generate_plan\",\n      description: \"Generate a plan of agents to run\",\n      parameters: z.object({\n        plan: z.array(z.string()),\n      }),\n      handler: async (input, { network }) => {\n        network?.state.kv.set(\"plan\", input.plan);\n        return \"Plan generated!\";\n      },\n    }),\n  ],\n});\n\nconst network = createNetwork({\n  name: \"code-assistant-v2\",\n  agents: [\n    codeAssistantAgent,\n    documentationAgent,\n    analysisAgent,\n    summarizationAgent,\n  ],\n  // our routing function relies on the shared state to orchestrate agents\n  //   first, the codeAssistantAgent is called and then, its plan gets\n  //   executed step by step until a summary gets written in the state.\n  router: ({ network }) => {\n    if (!network?.state.kv.has(\"code\") || !network?.state.kv.has(\"plan\")) {\n      return codeAssistantAgent;\n    } else {\n      const plan = (network?.state.kv.get(\"plan\") || []) as string[];\n      const nextAgent = plan.pop();\n      if (nextAgent) {\n        network?.state.kv.set(\"plan\", plan);\n        return network?.agents.get(nextAgent);\n      } else if (!network?.state.kv.has(\"summary\")) {\n        return summarizationAgent;\n      } else {\n        return undefined;\n      }\n    }\n  },\n  defaultModel: anthropic({\n    model: \"claude-3-5-sonnet-latest\",\n    defaultParameters: {\n      max_tokens: 4096,\n    },\n  }),\n});\n\n```\n\n----------------------------------------\n\nTITLE: Creating Task-Specific Agents (Typescript)\nDESCRIPTION: This snippet defines two agents: plannerAgent and editorAgent. The plannerAgent uses the searchCode tool to analyze code and plan fixes. The editorAgent uses the writeFile and readFile tools to implement fixes. Separating the Agents into two distinct roles will enable the AI Agent to better \"divide and conquer\" the problem to solve.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-agents.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent } from \"@inngest/agent-kit\";\n\nconst plannerAgent = createAgent({\n  name: \"planner\",\n  system: \"You are an expert in debugging TypeScript projects.\",\n  tools: [searchCode],\n});\n\nconst editorAgent = createAgent({\n  name: \"editor\",\n  system: \"You are an expert in fixing bugs in TypeScript projects.\",\n  tools: [writeFile, readFile],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Tool to Save Suggestions in TypeScript\nDESCRIPTION: This snippet creates a tool named `saveSuggestions` using the `createTool` function from `@inngest/agent-kit`. This tool is designed to save suggestions made by other agents into the shared state. It utilizes `z.object` from the `zod` library to define the expected input parameters, which include an array of strings representing the suggestions. The `handler` function retrieves existing suggestions from the network's key-value store, appends new suggestions, and saves the updated list back into the store.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst saveSuggestions = createTool({\n  name: \"save_suggestions\",\n  description: \"Save the suggestions made by other agents into the state\",\n  parameters: z.object({\n    suggestions: z.array(z.string()),\n  }),\n  handler: async (input, { network }) => {\n    const suggestions = network?.state.kv.get(\"suggestions\") || [];\n    network?.state.kv.set(\"suggestions\", [\n      ...suggestions,\n      ...input.suggestions,\n    ]);\n    return \"Suggestions saved!\";\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Assembling the Network of Agents\nDESCRIPTION: This snippet demonstrates how to assemble a network of agents, including the Router Agent, using the `createNetwork` function. The network defines the agents that will be used, a default language model, and the router that orchestrates the agents.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-agents.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst network = createNetwork({\n  name: \"code-assistant-v3\",\n  agents: [plannerAgent, editorAgent],\n  defaultModel: anthropic({\n    model: \"claude-3-5-sonnet-latest\",\n    max_tokens: 4096,\n  }),\n  router: router,\n});\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: This code snippet shows the expected content of the `.env` file. It defines the API keys required to access the Anthropic and Neon services. Replace `your_anthropic_api_key` and `your_neon_api_key` with your actual API keys. This provides the Agent with the credentials required to access external services.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/mcp-neon-agent/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nANTHROPIC_API_KEY=your_anthropic_api_key\nNEON_API_KEY=your_neon_api_key\n```\n\n----------------------------------------\n\nTITLE: Creating E2B Tools (terminal and createOrUpdateFiles)\nDESCRIPTION: This TypeScript code snippet shows how to create E2B tools for the coding agent using `@inngest/agent-kit`. It defines two tools: `terminal` (to run commands) and `createOrUpdateFiles` (to create or update files in the sandbox). Dependencies include `@inngest/agent-kit`, `anthropic` from `@inngest/agent-kit`, and `z` (presumably from a validation library like Zod).\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/e2b.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createAgent,\n  createNetwork,\n  anthropic,\n  createTool\n} from \"@inngest/agent-kit\";\n\nconst agent = createAgent({\n  name: \"Coding Agent\",\n  description: \"An expert coding agent\",\n  system: `You are a coding agent help the user to achieve the described task.\n\n      Once the task completed, you should return the following information:\n      <task_summary>\n      </task_summary>\n\n      Think step-by-step before you start the task.\n      `,\n  model: anthropic({\n    model: \"claude-3-5-sonnet-latest\",\n    max_tokens: 4096,\n  }),\n  tools: [\n    // terminal use\n    createTool({\n      name: \"terminal\",\n      description: \"Use the terminal to run commands\",\n      parameters: z.object({\n        command: z.string(),\n      }),\n      handler: async ({ command }, { network }) => {\n        const buffers = { stdout: \"\", stderr: \"\" };\n\n        try {\n          const sandbox = await getSandbox(network);\n          const result = await sandbox.commands.run(command, {\n            onStdout: (data: string) => {\n              buffers.stdout += data;\n            },\n            onStderr: (data: string) => {\n              buffers.stderr += data;\n            },\n          });\n          return result.stdout;\n        } catch (e) {\n          console.error(\n            `Command failed: ${e} \\nstdout: ${buffers.stdout}\\nstderr: ${buffers.stderr}`\n          );\n          return `Command failed: ${e} \\nstdout: ${buffers.stdout}\\nstderr: ${buffers.stderr}`;\n        }\n      },\n    }),\n    // create or update file\n    createTool({\n      name: \"createOrUpdateFiles\",\n      description: \"Create or update files in the sandbox\",\n      parameters: z.object({\n        files: z.array(\n          z.object({\n            path: z.string(),\n            content: z.string(),\n          })\n        ),\n      }),\n      handler: async ({ files }, { network }) => {\n        try {\n          const sandbox = await getSandbox(network);\n          for (const file of files) {\n            await sandbox.files.write(file.path, file.content);\n          }\n          return `Files created or updated: ${files\n            .map((f) => f.path)\n            .join(\", \")}`;\n        } catch (e) {\n          return \"Error: \" + e;\n        }\n      },\n    }),\n  ]\n});\n\nconst network = createNetwork({\n  name: \"Coding Network\",\n  agents: [agent],\n  defaultModel: anthropic({\n    model: \"claude-3-5-sonnet-20240620\",\n    maxTokens: 1000,\n  })\n});\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Support Agent Network with Routing in TypeScript\nDESCRIPTION: This TypeScript code defines a support agent network using the Inngest Agent Kit. It creates a customer support agent, a technical support agent, and a supervisor routing agent that orchestrates the network. The routing agent uses the `onRoute` lifecycle callback to determine which agent should handle the request, or if the ticket is solved.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/packages/agent-kit/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmodel: anthropic({\n    model: \"claude-3-5-haiku-latest\",\n    defaultParameters: {\n      max_tokens: 1000,\n    },\n  }),\n  tools: [\n    createTool({\n      name: \"done\",\n      description: \"Call this when the ticket is solved or escalated\",\n      handler: async () => {},\n    }),\n    createTool({\n      name: \"route_to_agent\",\n      description: \"Route the ticket to the appropriate agent\",\n      parameters: z.object({\n        agent: z.string().describe(\"The agent to route the ticket to\"),\n      }),\n      handler: async ({ agent }) => {\n        return agent;\n      },\n    }),\n  ],\n  lifecycle: {\n    onRoute: ({ result, network }) => {\n      const lastMessage = lastResult(network?.state.results);\n\n      // ensure to loop back to the last executing agent if a tool has been called\n      if (lastMessage && isLastMessageOfType(lastMessage, \"tool_call\")) {\n        return [lastMessage?.agent.name];\n      }\n\n      const tool = result.toolCalls[0];\n      if (!tool) {\n        return;\n      }\n      const toolName = tool.tool.name;\n      if (toolName === \"done\") {\n        return;\n      } else if (toolName === \"route_to_agent\") {\n        if (\n          typeof tool.content === \"object\" &&\n          tool.content !== null &&\n          \"data\" in tool.content &&\n          typeof tool.content.data === \"string\"\n        ) {\n          return [tool.content.data];\n        }\n      }\n      return;\n    },\n  },\n});\n\n// Create a network with the agents with the routing agent\nconst supportNetwork = createNetwork({\n  name: \"Support Network\",\n  agents: [customerSupportAgent, technicalSupportAgent],\n  defaultModel: anthropic({\n    model: \"claude-3-5-haiku-latest\",\n    defaultParameters: {\n      max_tokens: 1000,\n    },\n  }),\n  router: supervisorRoutingAgent,\n});\n```\n\n----------------------------------------\n\nTITLE: Agent Lifecycle Hooks in TypeScript\nDESCRIPTION: This snippet demonstrates how to define and use lifecycle hooks within an agent. The `onStart` hook is used to dynamically alter prompts using Network state and history. The `prompt` and `history` are returned.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/agents.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, openai } from '@inngest/agent-kit';\n\nconst agent = createAgent({\n  name: 'Code writer',\n  description: 'An expert TypeScript programmer which can write and debug code.',\n  system: '...',\n  model: openai('gpt-3.5-turbo'),\n  lifecycle: {\n    onStart: async ({ prompt,  network: { state }, history }) => {\n      // Dynamically alter prompts using Network state and history.\n\n      return { prompt, history }\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Support Agent Network Definition in TSX\nDESCRIPTION: This code snippet defines a support agent network using `createAgent` and `createNetwork` from `@inngest/agent-kit`.  It creates two agents, `customerSupportAgent` and `technicalSupportAgent`, along with a `supervisorRoutingAgent`.  The network is configured with agents, a default model using Anthropic's Claude, and a router. It requires the `@inngest/agent-kit` dependency.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/advanced-patterns/human-in-the-loop.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst customerSupportAgent = createAgent({\n  name: \"Customer Support\",\n  description:\n    \"I am a customer support agent that helps customers with their inquiries.\",\n  system: `You are a helpful customer support agent.\nYour goal is to assist customers with their questions and concerns.\nBe professional, courteous, and thorough in your responses.`,\n  model: anthropic({\n    model: \"claude-3-5-haiku-latest\",\n    max_tokens: 1000,\n  }),\n  tools: [\n    searchKnowledgeBase,\n    // ...\n  ],\n});\n\nconst technicalSupportAgent = createAgent({\n  name: \"Technical Support\",\n  description: \"I am a technical support agent that helps critical tickets.\",\n  system: `You are a technical support specialist.\nYour goal is to help resolve critical tickets.\nUse your expertise to diagnose problems and suggest solutions.\nIf you need developer input, use the ask_developer tool.`,\n  model: anthropic({\n    model: \"claude-3-5-haiku-latest\",\n    max_tokens: 1000,\n  }),\n  tools: [\n    searchLatestReleaseNotes,\n    // ...\n  ],\n});\n\nconst supervisorRoutingAgent = createRoutingAgent({\n  // ...\n});\n\n// Create a network with the agents and default router\nconst supportNetwork = createNetwork({\n  name: \"Support Network\",\n  agents: [customerSupportAgent, technicalSupportAgent],\n  defaultModel: anthropic({\n    model: \"claude-3-5-haiku-latest\",\n    max_tokens: 1000,\n  }),\n  router: supervisorRoutingAgent,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up an AgentKit Network with an Agent\nDESCRIPTION: This TypeScript code sets up an AgentKit network with a Neon Assistant Agent.  It defines the agent, its system prompt, tools, and a network with a router that directs requests to the agent until a final answer is given.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/smithery.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\nimport {\n  anthropic,\n  createAgent,\n  createNetwork,\n  createTool,\n} from \"@inngest/agent-kit\";\n\nconst neonAgent = createAgent({\n  name: \"neon-agent\",\n  system: `You are a helpful assistant that help manage a Neon account.\n  IMPORTANT: Call the 'done' tool when the question is answered.\n  `,\n  tools: [\n    createTool({\n      name: \"done\",\n      description: \"Call this tool when you are finished with the task.\",\n      parameters: z.object({\n        answer: z.string().describe(\"Answer to the user's question.\"),\n      }),\n      handler: async ({ answer }, { network }) => {\n        network?.state.kv.set(\"answer\", answer);\n      },\n    }),\n  ],\n});\n\nconst neonAgentNetwork = createNetwork({\n  name: \"neon-agent\",\n  agents: [neonAgent],\n  defaultModel: anthropic({\n    model: \"claude-3-5-sonnet-20240620\",\n    defaultParameters: {\n      max_tokens: 1000,\n    },\n  }),\n  router: ({ network }) => {\n    if (!network?.state.kv.get(\"answer\")) {\n      return neonAgent;\n    }\n    return;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Tools to an Agent in TypeScript\nDESCRIPTION: This snippet demonstrates how to add tools to an agent using the `createTool` function. It defines a tool called `list_charges` that returns a user's charges within a date range. The tool is then passed to the `createAgent` function to create an agent with the specified tool.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/agents.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, createTool, openai } from '@inngest/agent-kit';\n\nconst listChargesTool = createTool({\n  name: 'list_charges',\n  description:\n    \"Returns all of a user's charges. Call this whenever you need to find one or more charges between a date range.\",\n  parameters: z.array(\n    z.object({\n      userId: z.string(),\n    }),\n  ),\n  handler: async (output, { network, agent, step }) => {\n    // output is strongly typed to match the parameter type.\n  },\n});\n\nconst supportAgent = createAgent({\n  name: 'Customer support specialist',\n  system: 'You are an customer support specialist...',\n  model: openai('gpt-3.5-turbo'),\n  tools: [listChargesTool],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Agent with createAgent in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an agent using the `createAgent` function from the `@inngest/agent-kit` library. It imports the necessary modules and defines an agent named 'Code writer' with a specific system prompt and model. The agent is configured to generate TypeScript code with comments and tests.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/create-agent.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, agenticOpenai as openai } from '@inngest/agent-kit';\n\nconst agent = createAgent({\n  name: 'Code writer',\n  system:\n    'You are an expert TypeScript programmer.  Given a set of asks, you think step-by-step to plan clean, ' +\n    'idiomatic TypeScript code, with comments and tests as necessary.' +\n    'Do not respond with anything else other than the following XML tags:' +\n    \"- If you would like to write code, add all code within the following tags (replace $filename and $contents appropriately):\" +\n    \"  <file name='$filename.ts'>$contents</file>\",\n  model: openai('gpt-4o-mini'),\n});\n```\n\n----------------------------------------\n\nTITLE: Limiting Maximum Iterations in a Network\nDESCRIPTION: This code snippet shows how to limit the maximum number of iterations in a network using the `maxIter` option. This is useful to prevent infinite loops, especially when using Default Routing Agents or Hybrid Routers. The network will stop after the specified number of iterations, regardless of the router's decision.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/networks.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNetwork } from '@inngest/agent-kit';\n\n// searchAgent and summaryAgent definitions...\n\nconst network = createNetwork({\n  agents: [searchAgent, summaryAgent],\n  defaultModel: openai({ model: 'gpt-4o' }),\n  maxIter: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Documentation and Analysis Agents in TypeScript\nDESCRIPTION: This code snippet initializes two agents, `documentationAgent` and `analysisAgent`, using `createAgent` from `@inngest/agent-kit`. The `documentationAgent` is designed to generate documentation for code, while the `analysisAgent` focuses on analyzing code and suggesting improvements. Both agents are configured with a name and a system message defining their roles.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent } from \"@inngest/agent-kit\";\n\nconst documentationAgent = createAgent({\n  name: \"documentation_agent\",\n  system: \"You are an expert at generating documentation for code\",\n});\n\nconst analysisAgent = createAgent({\n  name: \"analysis_agent\",\n  system: \"You are an expert at analyzing code and suggesting improvements\",\n});\n```\n\n----------------------------------------\n\nTITLE: Install TypeScript Dependencies with NPM\nDESCRIPTION: This bash command installs `tsx` and `@types/node` as development dependencies using npm.  `tsx` allows running TypeScript files directly, and `@types/node` provides TypeScript type definitions for Node.js APIs.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-workflows.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tsx @types/node\n```\n\n----------------------------------------\n\nTITLE: Using onStart Lifecycle Hook in TypeScript\nDESCRIPTION: This example illustrates the usage of the `onStart` lifecycle hook within the `createAgent` function. The `onStart` hook allows modification of the input prompt for the agent before the inference call. It receives parameters such as agent, network, input, system prompt, and history, enabling customization based on the agent's state and context.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/create-agent.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst agent = createAgent({\n  name: 'Code writer',\n  lifecycles: {\n    onStart: ({ agent,\n      network,\n      input,\n      system, // The system prompt for the agent\n      history, // An array of messages\n    }) => {\n      // Return the system prompt (the first message), and any history added to the\n      // model's conversation.\n      return { system, history };\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI with Advanced Options in TypeScript\nDESCRIPTION: This snippet shows how to configure OpenAI with advanced options such as API key, base URL, and default parameters like temperature.  It uses `process.env.OPENAI_API_KEY` to retrieve the API key from environment variables. All parameters are passed within the `openai` function.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/model-openai.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst agent = createAgent({\n  model: openai({\n    model: \"gpt-4\",\n    apiKey: process.env.OPENAI_API_KEY,\n    baseUrl: \"https://api.openai.com/v1/\",\n    defaultParameters: { temperature: 0.5 },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Anthropic Model with Advanced Options\nDESCRIPTION: This code snippet shows how to configure an Anthropic model with advanced options such as API key, base URL, beta headers, and default parameters. It retrieves the API key from the environment variables and sets the temperature and max_tokens for the model.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/model-anthropic.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst agent = createAgent({\n  model: anthropic({\n    model: \"claude-3-opus\",\n    apiKey: process.env.ANTHROPIC_API_KEY,\n    baseUrl: \"https://api.anthropic.com/v1/\",\n    betaHeaders: [\"computer-vision\"],\n    defaultParameters: { temperature: 0.5, max_tokens: 4096 },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Concurrency per User in Inngest (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure concurrency limits for an Inngest function based on the user ID from the event data. It sets a limit of 10 concurrent requests per user.  The code snippet relies on the Inngest SDK and assumes an existing AgentKit network.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/advanced-patterns/multitenancy.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, createNetwork, openai } from '@inngest/agent-kit';\nimport { createServer } from '@inngest/agent-kit/server';\n\nimport { inngest } from './inngest/client';\n\n// network and agent definitions..\n\nconst deepResearchNetworkFunction = inngest.createFunction({\n  id: 'deep-research-network',\n  concurrency: [\n      {\n        key: \"event.data.user_id\",\n        limit: 10,\n      },\n    ],\n}, {\n  event: \"deep-research-network/run\"\n}, async ({ event, step }) => {\n    const { input } = event.data;\n\n    return network.run(input);\n})\n\nconst server = createServer({\n  functions: [deepResearchNetworkFunction],\n});\n\nserver.listen(3010, () => console.log(\"Agent kit running!\"));\n```\n\n----------------------------------------\n\nTITLE: Adding a Smithery MCP Server to your Agent\nDESCRIPTION: This TypeScript code modifies the previous example to include a Smithery MCP server. It uses `createSmitheryUrl` to generate the server URL and adds it to the `mcpServers` array in the agent configuration, enabling the agent to interact with the Smithery server.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/smithery.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  anthropic,\n  createAgent,\n  createNetwork,\n  createTool,\n} from \"@inngest/agent-kit\";\nimport { createSmitheryUrl } from \"@smithery/sdk/config.js\";\nimport { z } from \"zod\";\n\nconst smitheryUrl = createSmitheryUrl(\"https://server.smithery.ai/neon/ws\", {\n  neonApiKey: process.env.NEON_API_KEY,\n});\n\nconst neonAgent = createAgent({\n  name: \"neon-agent\",\n  system: `You are a helpful assistant that help manage a Neon account.\n  IMPORTANT: Call the 'done' tool when the question is answered.\n  `,\n  tools: [\n    createTool({\n      name: \"done\",\n      description: \"Call this tool when you are finished with the task.\",\n      parameters: z.object({\n        answer: z.string().describe(\"Answer to the user's question.\"),\n      }),\n      handler: async ({ answer }, { network }) => {\n        network?.state.kv.set(\"answer\", answer);\n      },\n    }),\n  ],\n  mcpServers: [\n    {\n      name: \"neon\",\n      transport: {\n        type: \"ws\",\n        url: smitheryUrl.toString(),\n      },\n    },\n  ],\n});\n\nconst neonAgentNetwork = createNetwork({\n  name: \"neon-agent\",\n  agents: [neonAgent],\n  defaultModel: anthropic({\n    model: \"claude-3-5-sonnet-20240620\",\n    defaultParameters: {\n      max_tokens: 1000,\n    },\n  }),\n  router: ({ network }) => {\n    if (!network?.state.kv.get(\"answer\")) {\n      return neonAgent;\n    }\n    return;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing State in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a `State` object with an initial value for a property and access it. It also shows how to pass the state to the `createNetwork` and use it in `network.run` function.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/state.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createState } from '@inngest/agent-kit';\n\nexport interface NetworkState {\n  // username is undefined until extracted and set by a tool\n  username?: string;\n}\n\nconst state = createState<NetworkState>({\n  username: 'bar',\n});\n\nconsole.log(state.data.username); // 'bar'\n\n\nconst network = createNetwork({\n  // ...\n});\n\n// Pass in state to each run\nnetwork.run(\"<query>\", { state })\n```\n\n----------------------------------------\n\nTITLE: Initializing Agent with OpenAI Model in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize an agent using the `createAgent` function from `@inngest/agent-kit` with OpenAI as the model provider. It imports the necessary modules and configures the agent with a name, system message, and an OpenAI model (gpt-4).\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/model-openai.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, openai } from \"@inngest/agent-kit\";\n\nconst agent = createAgent({\n  name: \"Code writer\",\n  system: \"You are an expert TypeScript programmer.\",\n  model: openai({ model: \"gpt-4\" }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Environment Variables in .env file\nDESCRIPTION: This snippet shows the environment variables that need to be configured in the `.env` file. It requires providing API keys for both E2B and Anthropic. These keys are essential for the agent to access the necessary services and resources.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/e2b-coding-agent/README.md#_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nE2B_API_KEY=your_e2b_api_key\nANTHROPIC_API_KEY=your_anthropic_api_key\n```\n\n----------------------------------------\n\nTITLE: Create HTTP server to run the agent (TypeScript)\nDESCRIPTION: Creates an HTTP server using AgentKit to run the agent. Imports `createServer` from `@inngest/agent-kit/server`, defines agents to expose via the server, and starts the server on port 3000. Requires `@inngest/agent-kit`.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/quick-start.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, anthropic } from '@inngest/agent-kit';\n    import { createServer } from '@inngest/agent-kit/server';\n    // ...\n    const server = createServer({\n      agents: [dbaAgent],\n    });\n    server.listen(3000, () => console.log('Agent kit running!'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries for Inngest Function in Typescript\nDESCRIPTION: This code snippet demonstrates how to configure a retry policy for an Inngest function that wraps an AgentKit network. It sets the `retries` option within the `inngest.createFunction` configuration to specify the number of retries upon failure. The snippet also includes the necessary imports and function definition.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/advanced-patterns/retries.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, createNetwork, openai } from '@inngest/agent-kit';\nimport { createServer } from '@inngest/agent-kit/server';\n\nimport { inngest } from './inngest/client';\n\n// network and agent definitions..\n\nconst deepResearchNetworkFunction = inngest.createFunction({\n  id: 'deep-research-network',\n  retries: 1\n}, {\n  event: \"deep-research-network/run\"\n}, async ({ event, step }) => {\n    const { input } = event.data;\n\n    return network.run(input);\n})\n\nconst server = createServer({\n  functions: [deepResearchNetworkFunction],\n});\n\nserver.listen(3010, () => console.log(\"Agent kit running!\"));\n```\n\n----------------------------------------\n\nTITLE: Web Search Agent with Stagehand Tools in AgentKit (TypeScript)\nDESCRIPTION: This code defines a web search agent using AgentKit and Stagehand. It creates four tools: `navigate`, `extract`, `act`, and `observe`, which leverage Stagehand's APIs to interact with web pages. The agent is configured with a name, description, and system prompt, and uses these tools to perform web searches autonomously.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/browserbase.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, createTool } from \"@inngest/agent-kit\";\nimport { z } from \"zod\";\nimport { getStagehand, stringToZodSchema } from \"./utils.js\";\n\nconst webSearchAgent = createAgent({\n  name: \"web_search_agent\",\n  description: \"I am a web search agent.\",\n  system: `You are a web search agent.\n  `,\n  tools: [\n    createTool({\n      name: \"navigate\",\n      description: \"Navigate to a given URL\",\n      parameters: z.object({\n        url: z.string().describe(\"the URL to navigate to\"),\n      }),\n      handler: async ({ url }, { step, network }) => {\n        return await step?.run(\"navigate\", async () => {\n          const stagehand = await getStagehand(\n            network?.state.kv.get(\"browserbaseSessionID\")!\n          );\n          await stagehand.page.goto(url);\n          return `Navigated to ${url}.`;\n        });\n      },\n    }),\n    createTool({\n      name: \"extract\",\n      description: \"Extract data from the page\",\n      parameters: z.object({\n        instruction: z\n          .string()\n          .describe(\"Instructions for what data to extract from the page\"),\n        schema: z\n          .string()\n          .describe(\n            \"A string representing the properties and types of data to extract, for example: '{ name: string, age: number }'\"\n          ),\n      }),\n      handler: async ({ instruction, schema }, { step, network }) => {\n        return await step?.run(\"extract\", async () => {\n          const stagehand = await getStagehand(\n            network?.state.kv.get(\"browserbaseSessionID\")!\n          );\n          const zodSchema = stringToZodSchema(schema);\n          return await stagehand.page.extract({\n            instruction,\n            schema: zodSchema,\n          });\n        });\n      },\n    }),\n    createTool({\n      name: \"act\",\n      description: \"Perform an action on the page\",\n      parameters: z.object({\n        action: z\n          .string()\n          .describe(\"The action to perform (e.g. 'click the login button')\"),\n      }),\n      handler: async ({ action }, { step, network }) => {\n        return await step?.run(\"act\", async () => {\n          const stagehand = await getStagehand(\n            network?.state.kv.get(\"browserbaseSessionID\")!\n          );\n          return await stagehand.page.act({ action });\n        });\n      },\n    }),\n    createTool({\n      name: \"observe\",\n      description: \"Observe the page\",\n      parameters: z.object({\n        instruction: z\n          .string()\n          .describe(\"Specific instruction for what to observe on the page\"),\n      }),\n      handler: async ({ instruction }, { step, network }) => {\n        return await step?.run(\"observe\", async () => {\n          const stagehand = await getStagehand(\n            network?.state.kv.get(\"browserbaseSessionID\")!\n          );\n          return await stagehand.page.observe({ instruction });\n        });\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Default Model for the Network\nDESCRIPTION: This code snippet shows how to configure a default model for the network using the `defaultModel` option.  If agents do not have an explicit model configured, the network's default model will be used.  It uses the `openai` function from `@inngest/agent-kit` to specify the `gpt-4o` model.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/networks.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNetwork, openai } from '@inngest/agent-kit';\n\n// searchAgent and summaryAgent definitions...\n\nconst network = createNetwork({\n  agents: [searchAgent, summaryAgent],\n  defaultModel: openai({ model: 'gpt-4o' }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Agent and Network\nDESCRIPTION: This TypeScript code snippet demonstrates how to create an agent and its associated network using `@inngest/agent-kit`. It sets up the agent's name, description, system instructions, and model, as well as the network with the agent and a default model.  Dependencies include `@inngest/agent-kit` and `anthropic` from `@inngest/agent-kit`.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/e2b.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createAgent,\n  createNetwork,\n  anthropic\n} from \"@inngest/agent-kit\";\n\nconst agent = createAgent({\n  name: \"Coding Agent\",\n  description: \"An expert coding agent\",\n  system: `You are a coding agent help the user to achieve the described task.\n\n      Once the task completed, you should return the following information:\n      <task_summary>\n      </task_summary>\n\n      Think step-by-step before you start the task.\n      `,\n  model: anthropic({\n    model: \"claude-3-5-sonnet-latest\",\n    max_tokens: 4096,\n  }),\n});\n\nconst network = createNetwork({\n  name: \"Coding Network\",\n  agents: [agent],\n  defaultModel: anthropic({\n    model: \"claude-3-5-sonnet-20240620\",\n    maxTokens: 1000,\n  })\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Gemini Model with Advanced Options (TypeScript)\nDESCRIPTION: This snippet showcases advanced configuration options for the `gemini` model within the Inngest agent. It demonstrates how to set the `apiKey`, `baseUrl`, and `defaultParameters`, including `generationConfig` with a specified temperature.  It assumes the `GOOGLE_API_KEY` environment variable is set.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/model-gemini.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst agent = createAgent({\n  model: gemini({\n    model: \"gemini-pro\",\n    apiKey: process.env.GOOGLE_API_KEY,\n    baseUrl: \"https://generativelanguage.googleapis.com/v1/\",\n    defaultParameters: {\n      generationConfig: {\n        temperature: 1.5,\n      },\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Environment Variables in .env.local\nDESCRIPTION: This snippet shows the required environment variables for the project. These variables include API keys for AgentKit, OpenAI, and E2B.  The file should be created in the root directory of the Next.js project.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/e2b-csv-contacts-importer/README.md#_snippet_1\n\nLANGUAGE: env\nCODE:\n```\n# Required for AgentKit\nINNGEST_API_KEY=your_inngest_event_key\nINNGEST_SIGNING_KEY=your_inngest_signing_key\n\n# Required for OpenAI (used by the contacts mapper agent)\nOPENAI_API_KEY=your_openai_api_key\n\n# Required for E2B sandbox\nE2B_API_KEY=your_e2b_api_key\n```\n\n----------------------------------------\n\nTITLE: Creating a Browserbase Tool for Reddit Search (TypeScript)\nDESCRIPTION: Defines a Browserbase tool named `searchReddit` for searching Reddit. It utilizes the Browserbase SDK and Playwright to interact with a headless browser. The tool takes a search query as input, navigates to a Reddit search URL, extracts results, and returns the top 5 results.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/browserbase.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\\n  anthropic,\\n  createAgent,\\n  createNetwork,\\n  createTool,\\n} from \"@inngest/agent-kit\";\\nimport { z } from \"zod\";\\nimport { chromium } from \"playwright-core\";\\nimport Browserbase from \"@browserbasehq/sdk\";\\n\\nconst bb = new Browserbase({\\n  apiKey: process.env.BROWSERBASE_API_KEY as string,\\n});\\n\\n// Create a tool to search Reddit using Browserbase\\nconst searchReddit = createTool({\\n  name: \"search_reddit\",\\n  description: \"Search Reddit posts and comments\",\\n  parameters: z.object({\\n    query: z.string().describe(\"The search query for Reddit\"),\\n  }),\\n  handler: async ({ query }, { step }) => {\\n    return await step?.run(\"search-on-reddit\", async () => {\\n      // Create a new session\\n      const session = await bb.sessions.create({\\n        projectId: process.env.BROWSERBASE_PROJECT_ID as string,\\n      });\\n\\n      // Connect to the session\\n      const browser = await chromium.connectOverCDP(session.connectUrl);\\n      try {\\n        const page = await browser.newPage();\\n\\n        // Construct the search URL\\n        const searchUrl = `https://search-new.pullpush.io/?type=submission&q=${query}`;\\n\\n        console.log(searchUrl);\\n\\n        await page.goto(searchUrl);\\n\\n        // Wait for results to load\\n        await page.waitForSelector(\"div.results\", { timeout: 10000 });\\n\\n        // Extract search results\\n        const results = await page.evaluate(() => {\\n          const posts = document.querySelectorAll(\"div.results div:has(h1)\");\\n          return Array.from(posts).map((post) => ({\\n            title: post.querySelector(\"h1\")?.textContent?.trim(),\\n            content: post.querySelector(\"div\")?.textContent?.trim(),\\n          }));\\n        });\\n\\n        console.log(\"results\", JSON.stringify(results, null, 2));\\n\\n        return results.slice(0, 5); // Return top 5 results\\n      } finally {\\n        await browser.close();\\n      }\\n    });\\n  },\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit via Yarn\nDESCRIPTION: This command installs the AgentKit npm package using the Yarn package manager. AgentKit is a dependency for building intelligent agents. It requires yarn to be installed.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/installation.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @inngest/agent-kit\n```\n\n----------------------------------------\n\nTITLE: Creating a Network of Agents in AgentKit (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a network of agents using AgentKit. It imports necessary functions from the `@inngest/agent-kit` library and defines three agents: `navigator`, `classifier`, and `summarizer`. Each agent is configured with a name, system prompt, and optionally a model and tools. The agents are then combined into a network, and a default model is specified. Finally, the `network.run` function is used to execute the network with a given input.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/overview.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createNetwork,\n  createAgent,\n  openai,\n  anthropic,\n} from \"@inngest/agent-kit\";\nimport { searchWebTool } from \"./tools\";\n\nconst navigator = createAgent({\n  name: \"Navigator\",\n  system: \"You are a navigator...\",\n  tools: [searchWebTool],\n});\n\nconst classifier = createAgent({\n  name: \"Classifier\",\n  system: \"You are a classifier...\",\n  model: openai(\"gpt-3.5-turbo\"),\n});\n\nconst summarizer = createAgent({\n  model: anthropic(\"claude-3-5-haiku-latest\"),\n  name: \"Summarizer\",\n  system: \"You are a summarizer...\",\n});\n\nconst network = createNetwork({\n  agents: [navigator, classifier, summarizer],\n  defaultModel: openai({ model: \"gpt-4o\" }),\n});\n\nconst input = `Classify then summarize the latest 10 blog posts\n  on https://www.deeplearning.ai/blog/`;\n\nconst result = await network.run(input, ({ network }) => {\n  return defaultRoutingAgent;\n});\n```\n\n----------------------------------------\n\nTITLE: Agent with Description for Networks in TypeScript\nDESCRIPTION: This snippet shows an example of an agent configuration that includes a description. When Agents are part of networks, providing a description is required.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/agents.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst codeWriterAgent = createAgent({\n  name: 'Code writer',\n  description:\n    'An expert TypeScript programmer which can write and debug code. Call this when custom code is required to complete a task.',\n  system: `...`,\n  model: openai('gpt-3.5-turbo'),\n});\n```\n\n----------------------------------------\n\nTITLE: Tool Handler Example with Type Annotations in Typescript\nDESCRIPTION: This code snippet presents a more detailed example of a tool handler function, including type annotations for improved clarity and maintainability.  It also demonstrates accessing the `network.state` within the handler.  Like the first snippet, it utilizes the `createTool` function to define a tool for writing files, but includes `network.state.fileWritten = true;`.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/create-tool.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTool } from '@inngest/agent-kit';\n\nconst tool = createTool({\n  name: 'write-file',\n  description: 'Write a file to disk with the given contents',\n  parameters: {\n    type: 'object',\n    properties: {\n      path: { type: 'string' },\n      contents: { type: 'string' },\n    },\n  },\n  handler: async ({ path, contents }, { agent, network }) => {\n    await fs.writeFile(path, contents);\n    network.state.fileWritten = true;\n    return { success: true };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies with npm\nDESCRIPTION: This command installs the `@inngest/agent-kit` and `zod` packages using npm. `@inngest/agent-kit` provides the tools and framework for building agents, while `zod` is a schema declaration and validation library. These are essential for creating and managing agents.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @inngest/agent-kit zod\n```\n\n----------------------------------------\n\nTITLE: Initializing Gemini Model in Agent Kit (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to initialize a Google Gemini model as the provider for an Inngest agent. It imports the necessary modules from `@inngest/agent-kit` and uses the `gemini` function to specify the `gemini-pro` model. This configuration is then used to create an agent named 'Code writer'.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/model-gemini.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, gemini } from \"@inngest/agent-kit\";\n\nconst agent = createAgent({\n  name: \"Code writer\",\n  system: \"You are an expert TypeScript programmer.\",\n  model: gemini({ model: \"gemini-pro\" }),\n});\n```\n\n----------------------------------------\n\nTITLE: Agent-Based Routing Example in TSX\nDESCRIPTION: This code snippet demonstrates how to create a network of agents with a routing agent for a support system using the Inngest Agent Kit. It includes the creation of a customer support agent, a technical support agent, and a supervisor routing agent. The routing agent uses an `onRoute` lifecycle callback to determine which agent should handle a request based on its nature and the current state of the network.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/README.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  anthropic,\n  createAgent,\n  createNetwork,\n  createRoutingAgent,\n  createTool,\n} from \"@inngest/agent-kit\";\nimport { z } from \"zod\";\n\nimport { isLastMessageOfType, lastResult } from \"./utils.js\";\n\nimport { knowledgeBaseDB, releaseNotesDB, ticketsDB } from \"./databases.js\";\n\n// Create shared tools\nconst searchKnowledgeBase = createTool({\n  name: \"search_knowledge_base\",\n  description: \"Search the knowledge base for relevant articles\",\n  parameters: z.object({\n    query: z.string().describe(\"The search query\"),\n  }),\n  handler: async ({ query }, { step }) => {\n    return await step?.run(\"search_knowledge_base\", async () => {\n      // Simulate knowledge base search\n      const results = knowledgeBaseDB.filter(\n        (article) =>\n          article.title.toLowerCase().includes(query.toLowerCase()) ||\n          article.content.toLowerCase().includes(query.toLowerCase())\n      );\n      return results;\n    });\n  },\n});\n\nconst searchLatestReleaseNotes = createTool({\n  name: \"search_latest_release_notes\",\n  description: \"Search the latest release notes for relevant articles\",\n  parameters: z.object({\n    query: z.string().describe(\"The search query\"),\n  }),\n  handler: async ({ query }, { step }) => {\n    return await step?.run(\"search_latest_release_notes\", async () => {\n      // Simulate knowledge base search\n      const results = releaseNotesDB.filter(\n        (releaseNote) =>\n          releaseNote.title.toLowerCase().includes(query.toLowerCase()) ||\n          releaseNote.content.toLowerCase().includes(query.toLowerCase())\n      );\n      return results;\n    });\n  },\n});\n\nconst getTicketDetails = async (ticketId: string) => {\n  const ticket = ticketsDB.find((t) => t.id === ticketId);\n  return ticket || { error: \"Ticket not found\" };\n};\n\n// Create our agents\nconst customerSupportAgent = createAgent({\n  name: \"Customer Support\",\n  description:\n    \"I am a customer support agent that helps customers with their inquiries.\",\n  system: `You are a helpful customer support agent.\\nYour goal is to assist customers with their questions and concerns.\\nBe professional, courteous, and thorough in your responses.`,\n  model: anthropic({\n    model: \"claude-3-5-haiku-latest\",\n    defaultParameters: {\n      max_tokens: 1000,\n    },\n  }),\n  tools: [\n    searchKnowledgeBase,\n    createTool({\n      name: \"update_ticket\",\n      description: \"Update a ticket with a note\",\n      parameters: z.object({\n        ticketId: z.string().describe(\"The ID of the ticket to update\"),\n        priority: z.string().describe(\"The priority of the ticket\"),\n        status: z.string().describe(\"The status of the ticket\"),\n        note: z.string().describe(\"A note to update the ticket with\"),\n      }),\n      handler: async ({ ticketId, priority, status, note }, { step }) => {\n        return await step?.run(\"update_ticket\", async () => {\n          // TODO: Update the ticket in the database\n          return { message: \"Ticket updated successfully\" };\n        });\n      },\n    }),\n  ],\n});\n\nconst technicalSupportAgent = createAgent({\n  name: \"Technical Support\",\n  description: \"I am a technical support agent that helps critical tickets.\",\n  system: `You are a technical support specialist.\\nYour goal is to help resolve critical tickets.\\nUse your expertise to diagnose problems and suggest solutions.`,\n  model: anthropic({\n    model: \"claude-3-5-haiku-latest\",\n    defaultParameters: {\n      max_tokens: 1000,\n    },\n  }),\n  tools: [searchLatestReleaseNotes],\n});\n\n// Create our Routing Agent that will orchestrate the network of agents\n//  and evaluate if the support request is answered.\nconst supervisorRoutingAgent = createRoutingAgent({\n  name: \"Supervisor\",\n  description: \"I am a Support supervisor.\",\n  system: `You are a supervisor.\\nYour goal is to answer customer initial request or escalate the ticket if no answer can be provided.\\nChoose to route tickets to the appropriate agent using the following instructions:\\n- Critical tickets should be routed to the \\\"Technical Support\\\" agent.\\n- Actions such as updating the ticket or handling non-critical tickets should be routed to the \\\"Customer Support\\\" agent.\\n\\nThink step by step and reason through your decision.\\nWhen an agent as answered the ticket initial request or updated the ticket, call the \\\"done\\\" tool.`,\n  model: anthropic({\n    model: \"claude-3-5-haiku-latest\",\n    defaultParameters: {\n      max_tokens: 1000,\n    },\n  }),\n  tools: [\n    createTool({\n      name: \"done\",\n      description: \"Call this when the ticket is solved or escalated\",\n      handler: async () => {},\n    }),\n    createTool({\n      name: \"route_to_agent\",\n      description: \"Route the ticket to the appropriate agent\",\n      parameters: z.object({\n        agent: z.string().describe(\"The agent to route the ticket to\"),\n      }),\n      handler: async ({ agent }) => {\n        return agent;\n      },\n    }),\n  ],\n  lifecycle: {\n    onRoute: ({ result, network }) => {\n      const lastMessage = lastResult(network?.state.results);\n\n      // ensure to loop back to the last executing agent if a tool has been called\n      if (lastMessage && isLastMessageOfType(lastMessage, \"tool_call\")) {\n        return [lastMessage?.agent.name];\n      }\n\n      const tool = result.toolCalls[0];\n      if (!tool) {\n        return;\n      }\n      const toolName = tool.tool.name;\n      if (toolName === \"done\") {\n        return;\n      } else if (toolName === \"route_to_agent\") {\n        if (\n          typeof tool.content === \"object\" &&\n          tool.content !== null &&\n          \"data\" in tool.content &&\n          typeof tool.content.data === \"string\"\n        ) {\n          return [tool.content.data];\n        }\n      }\n      return;\n    },\n  },\n});\n\n// Create a network with the agents with the routing agent\nconst supportNetwork = createNetwork({\n  name: \"Support Network\",\n  agents: [customerSupportAgent, technicalSupportAgent],\n  defaultModel: anthropic({\n    model: \"claude-3-5-haiku-latest\",\n    defaultParameters: {\n      max_tokens: 1000,\n    },\n  }),\n  router: supervisorRoutingAgent,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Code-Based Router with AgentKit\nDESCRIPTION: This example shows how to create a network of agents orchestrated by a code-based router. The router utilizes a shared state (key-value store) to manage the execution flow of agents, including reading a file, generating a plan, and summarizing suggestions.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/packages/agent-kit/README.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from \"zod\";\nimport {\n  anthropic,\n  createAgent,\n  createNetwork,\n  createTool,\n} from \"@inngest/agent-kit\";\n\nimport { readFileSync } from \"fs\";\nimport { join } from \"path\";\n\n// create a shared tool\nconst saveSuggestions = createTool({\n  name: \"save_suggestions\",\n  description: \"Save the suggestions made by other agents into the state\",\n  parameters: z.object({\n    suggestions: z.array(z.string()),\n  }),\n  handler: async (input, { network }) => {\n    const suggestions = network?.state.kv.get(\"suggestions\") || [];\n    network?.state.kv.set(\"suggestions\", [\n      ...suggestions,\n      ...input.suggestions,\n    ]);\n    return \"Suggestions saved!\";\n  },\n});\n\n// create agents with access to the state via the `saveSuggestions` tool\nconst documentationAgent = createAgent({\n  name: \"documentation_agent\",\n  system: \"You are an expert at generating documentation for code\",\n  tools: [saveSuggestions],\n});\n\nconst analysisAgent = createAgent({\n  name: \"analysis_agent\",\n  system: \"You are an expert at analyzing code and suggesting improvements\",\n  tools: [saveSuggestions],\n});\n\nconst summarizationAgent = createAgent({\n  name: \"summarization_agent\",\n  system: ({ network }) => {\n    const suggestions = network?.state.kv.get(\"suggestions\") || [];\n    return `Save a summary of the following suggestions:\\n    ${suggestions.join(\"\\n\")}`;\n  },\n  tools: [\n    createTool({\n      name: \"save_summary\",\n      description:\n        \"Save a summary of the suggestions made by other agents into the state\",\n      parameters: z.object({\n        summary: z.string(),\n      }),\n      handler: async (input, { network }) => {\n        network?.state.kv.set(\"summary\", input.summary);\n        return \"Saved!\";\n      },\n    }),\n  ],\n});\n\n// Create the code assistant agent which generates a plan\nconst codeAssistantAgent = createAgent({\n  name: \"code_assistant_agent\",\n  system: ({ network }) => {\n    const agents = Array.from(network?.agents.values() || [])\n      .filter(\n        (agent) =>\n          ![\"code_assistant_agent\", \"summarization_agent\"].includes(agent.name)\n      )\n      .map((agent) => `${agent.name} (${agent.system})`);\n    return `From a given user request, ONLY perform the following tool calls:\\n- read the file content\n- generate a plan of agents to run from the following list: ${agents.join(\", \")}\n\nAnswer with \"done\" when you are finished.`;\n  },\n  tools: [\n    createTool({\n      name: \"read_file\",\n      description: \"Read a file from the current directory\",\n      parameters: z.object({\n        filename: z.string(),\n      }),\n      handler: async (input, { network }) => {\n        const filePath = join(process.cwd(), `files/${input.filename}`);\n        const code = readFileSync(filePath, \"utf-8\");\n        network?.state.kv.set(\"code\", code);\n        return \"File read!\";\n      },\n    }),\n    createTool({\n      name: \"generate_plan\",\n      description: \"Generate a plan of agents to run\",\n      parameters: z.object({\n        plan: z.array(z.string()),\n      }),\n      handler: async (input, { network }) => {\n        network?.state.kv.set(\"plan\", input.plan);\n        return \"Plan generated!\";\n      },\n    }),\n  ],\n});\n\nconst network = createNetwork({\n  name: \"code-assistant-v2\",\n  agents: [\n    codeAssistantAgent,\n    documentationAgent,\n    analysisAgent,\n    summarizationAgent,\n  ],\n  // our routing function relies on the shared state to orchestrate agents\n  //   first, the codeAssistantAgent is called and then, its plan gets\n  //   executed step by step until a summary gets written in the state.\n  router: ({ network }) => {\n    if (!network?.state.kv.has(\"code\") || !network?.state.kv.has(\"plan\")) {\n      return codeAssistantAgent;\n    } else {\n      const plan = (network?.state.kv.get(\"plan\") || []) as string[];\n      const nextAgent = plan.pop();\n      if (nextAgent) {\n        network?.state.kv.set(\"plan\", plan);\n        return network?.agents.get(nextAgent);\n      } else if (!network?.state.kv.has(\"summary\")) {\n        return summarizationAgent;\n      } else {\n        return undefined;\n      }\n    }\n  },\n  defaultModel: anthropic({\n    model: \"claude-3-5-sonnet-latest\",\n    defaultParameters: {\n      max_tokens: 4096,\n    },\n  }),\n});\n\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest Tool into AgentKit in TypeScript\nDESCRIPTION: This code integrates the `researchWebTool` Inngest function into an AgentKit network. It imports the necessary functions from `@inngest/agent-kit`, creates an agent with the tool, and then creates a network that includes the agent.  The tool and network are then connected to a server.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/advanced-patterns/multi-steps-tools.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, createNetwork, openai } from '@inngest/agent-kit';\nimport { createServer } from '@inngest/agent-kit/server';\n\nimport { researchWebTool } from './inngest/tools/research-web';\n\n\nconst deepResearchAgent = createAgent({\n  name: 'Deep Research Agent',\n  tools: [researchWebTool],\n});\n\nconst network = createNetwork({\n  name: 'My Network',\n  defaultModel: openai({ model: \"gpt-4o\" }),\n  agents: [deepResearchAgent],\n});\n\nconst server = createServer({\n  networks: [network],\n  functions: [researchWebTool],\n});\n\nserver.listen(3010, () => console.log(\"Agent kit running!\"));\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies (yarn)\nDESCRIPTION: This snippet demonstrates installing @inngest/agent-kit and zod dependencies using yarn.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-agents.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @inngest/agent-kit zod\n```\n\n----------------------------------------\n\nTITLE: Start Inngest Dev Server\nDESCRIPTION: Starts the Inngest Dev Server using the `inngest-cli` package. This command allows developers to trigger and inspect AgentKit networks.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/local-development.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx inngest-cli@latest dev\n```\n\n----------------------------------------\n\nTITLE: Read File Content with TypeScript\nDESCRIPTION: This code snippet demonstrates reading the content of a TypeScript file from the local filesystem. It uses the `fs` and `path` modules to construct the file path and read the file content into a string.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-workflows.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst filePath = join(process.cwd(), `files/example.ts`);\nconst code = readFileSync(filePath, \"utf-8\");\n```\n\n----------------------------------------\n\nTITLE: Create .env file\nDESCRIPTION: This snippet shows the format for the .env file, which is used to store sensitive information like API keys. Replace 'your_api_key_here' with your actual Anthropic API key.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/support-agent-human-in-the-loop/README.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nANTHROPIC_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Creating Agent and Network (TypeScript)\nDESCRIPTION: Creates an AgentKit agent and network for searching Reddit using Browserbase. The `searchAgent` is configured with a name, description, and system prompt. The `redditSearchNetwork` links the agent and defines settings like max iterations and the default language model.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/browserbase.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\\n  anthropic,\\n  createAgent,\\n  createNetwork,\\n} from \"@inngest/agent-kit\";\\n\\nconst searchAgent = createAgent({\\n  name: \"reddit_searcher\",\\n  description: \"An agent that searches Reddit for relevant information\",\\n  system:\\n  \"You are a helpful assistant that searches Reddit for relevant information.\",\\n});\\n\\n// Create the network\\nconst redditSearchNetwork = createNetwork({\\n  name: \"reddit_search_network\",\\n  description: \"A network that searches Reddit using Browserbase\",\\n  agents: [searchAgent],\\n  maxIter: 2,\\n  defaultModel: anthropic({\\n  model: \"claude-3-5-sonnet-latest\",\\n  max_tokens: 4096,\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a new project with pnpm\nDESCRIPTION: This command creates a new directory and initializes a new pnpm project within it. This is useful for setting up a new AgentKit project from scratch.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/e2b.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmkdir my-agent-kit-project && pnpm init\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit and E2B with pnpm\nDESCRIPTION: This command installs the `@inngest/agent-kit` and `@e2b/code-interpreter` packages using pnpm. These packages are required to use AgentKit with E2B.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/e2b.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install @inngest/agent-kit @e2b/code-interpreter\n```\n\n----------------------------------------\n\nTITLE: Creating a new project with npm\nDESCRIPTION: This command creates a new directory and initializes a new npm project within it. This is useful for setting up a new AgentKit project from scratch.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/e2b.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmkdir my-agent-kit-project && npm init\n```\n\n----------------------------------------\n\nTITLE: Initializing Inngest Client in TypeScript\nDESCRIPTION: This code snippet initializes the Inngest client. It imports the `Inngest` class and creates a new instance with a unique ID for the AgentKit network. This client is used to define Inngest functions, which serve as the building blocks for multi-step tools.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/advanced-patterns/multi-steps-tools.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from 'inngest';\n\nconst inngest = new Inngest({\n  id: 'my-agentkit-network',\n});\n```\n\n----------------------------------------\n\nTITLE: Tool Lifecycle onFinish Hook in Typescript\nDESCRIPTION: This code snippet demonstrates the `onFinish` lifecycle hook within a tool's definition. The `onFinish` hook allows for modifying or enhancing the result returned by the handler before it's passed back to the agent. The example shows an empty function body for the `onFinish` hook which returns the result.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/create-tool.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst tool = createTool({\n  name: 'write-file',\n  lifecycle: {\n    onFinish: ({ result }) => {\n      // Modify or enhance the result\n      return result;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Function Router Example in createNetwork (Typescript)\nDESCRIPTION: Demonstrates how to define a function router within the `createNetwork` configuration.  This function dynamically selects the next agent to execute based on the `callCount`, `lastResult`, and other parameters.  It returns an agent or undefined to stop the network execution.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/network-router.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst network = createNetwork({\n  agents: [classifier, writer],\n  router: ({ lastResult, callCount, network, stack, input }) => {\n    // First call: use the classifier\n    if (callCount === 0) {\n      return classifier;\n    }\n\n    // Get the last message from the output\n    const lastMessage = lastResult?.output[lastResult?.output.length - 1];\n    const content = lastMessage?.type === \"text\" ? (lastMessage?.content as string) : \"\";\n\n    // Second call: if it's a question, use the writer\n    if (callCount === 1 && content.includes(\"question\")) {\n      return writer;\n    }\n\n    // Otherwise, we're done!\n    return undefined;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Agent with Smithery MCP Server (TS)\nDESCRIPTION: This snippet demonstrates how to configure an AgentKit agent to use a Smithery MCP server.  It uses the `createSmitheryUrl` function to generate the WebSocket URL, passing the base URL and API key. Requires the `@inngest/agent-kit` and `@smithery/sdk/config.js` packages.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/advanced-patterns/mcp.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent } from \"@inngest/agent-kit\";\nimport { createSmitheryUrl } from \"@smithery/sdk/config.js\";\n\nconst smitheryUrl = createSmitheryUrl(\"https://server.smithery.ai/neon/ws\", {\n  neonApiKey: process.env.NEON_API_KEY,\n});\n\nconst neonAgent = createAgent({\n  name: \"neon-agent\",\n  system: `You are a helpful assistant that help manage a Neon account.\n  `,\n  mcpServers: [\n    {\n      name: \"neon\",\n      transport: {\n        type: \"ws\",\n        url: smitheryUrl.toString(),\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a new project directory with yarn\nDESCRIPTION: These commands create a new directory and initializes it using yarn. This is a prerequisite for starting a new AgentKit project.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/smithery.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmkdir my-agent-kit-project && yarn init\n```\n\n----------------------------------------\n\nTITLE: Adding Start Script (package.json)\nDESCRIPTION: This snippet adds a start script to package.json to run the index.ts file using tsx.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-agents.mdx#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"start\": \"tsx ./index.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit, Browserbase, and Playwright (yarn)\nDESCRIPTION: Installs the required yarn packages: @inngest/agent-kit, @browserbasehq/sdk, and playwright-core. These packages are essential for creating AI agents with web browsing capabilities using Browserbase.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/browserbase.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @inngest/agent-kit @browserbasehq/sdk playwright-core\n```\n\n----------------------------------------\n\nTITLE: Todo Placeholder\nDESCRIPTION: This snippet represents a placeholder in the code, marked with a TODO comment. It indicates that this section of the code requires further attention or implementation.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guides/selectively-enabling-agents.mdx#_snippet_0\n\nLANGUAGE: NA\nCODE:\n```\n{/* TODO */}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Step Tool with Inngest in TypeScript\nDESCRIPTION: This code defines a multi-step tool for web research using Inngest. It uses `step.ai.infer` to generate search queries and summarize results using an LLM. `step.run` is used to run the `crawl-web` step in parallel. Inngest automatically handles retries for each step.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/advanced-patterns/multi-steps-tools.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from '../client';\n\nexport const researchWebTool = inngest.createFunction({\n  id: 'research-web-tool',\n}, {\n  event: \"research-web-tool/run\"\n}, async ({ event, step }) => {\n    const { input } = event.data;\n\n    const searchQueries = await step.ai.infer('generate-search-queries', {\n      model: step.ai.models.openai({ model: \"gpt-4o\" }),\n      // body is the model request, which is strongly typed depending on the model\n      body: {\n        messages: [{\n          role: \"user\",\n          content: `From the given input, generate a list of search queries to perform. \\n ${input}`,\n        }],\n      },\n    });\n\n    const searchResults = await Promise.all(\n        searchQueries.map(query => step.run('crawl-web', async (query) => {\n        // perform crawling...\n        }))\n    );\n\n    const summary = await step.ai.infer('summarize-search-results', {\n      model: step.ai.models.openai({ model: \"gpt-4o\" }),\n      body: {\n        messages: [{\n          role: \"user\",\n          content: `Summarize the following search results: \\n ${searchResults.join('\\n')}`,\n        }],\n      },\n    });\n\n    return summary.choices[0].message.content;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Tool with Optional Parameters in Typescript\nDESCRIPTION: This code snippet illustrates how to define optional parameters within a tool using `.nullable()` in the Zod schema. Specifically, the `created` object, which contains the `gte` and `lte` date ranges, is made optional.  The `handler` function expects the `created` parameter to potentially be null. This allows the tool to be called without providing a specific date range.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/tools.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst listChargesTool = createTool({\n  name: 'list_charges',\n  description:\n    \"Returns all of a user's charges. Call this whenever you need to find one or more charges between a date range.\",\n  parameters: z.object({\n    userId: z.string(),\n    created: z.object({\n      gte: z.string().date(),\n      lte: z.string().date(),\n    }).nullable(),\n  }),\n  handler: async ({ userId, created }, { network, agent, step }) => {\n    // output is strongly typed to match the parameter type.\n    return [{...}]\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Set Anthropic API Key\nDESCRIPTION: This command sets the Anthropic API key as an environment variable. This key is required to access the Claude 3.5 Haiku model. Replace `sk-ant-api03-XXXXXX....` with your actual API key.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/quick-start/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport ANTHROPIC_API_KEY=sk-ant-api03-XXXXXX....\n```\n\n----------------------------------------\n\nTITLE: Creating a new project directory with pnpm\nDESCRIPTION: These commands create a new directory and initializes it using pnpm. This is a prerequisite for starting a new AgentKit project.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/smithery.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmkdir my-agent-kit-project && pnpm init\n```\n\n----------------------------------------\n\nTITLE: Transforming AgentKit Network into Inngest Function (TypeScript)\nDESCRIPTION: This code transforms an existing AgentKit network into an Inngest function. It defines a function `supportAgentWorkflow` that is triggered by the `app/support.ticket.created` event. The function retrieves ticket details, runs the support network, and returns the response and ticket information. This enables the AgentKit network to be executed as part of an Inngest workflow. Requires `@inngest/agent-kit` and `inngest` dependencies. The server is started and listens on port 3010.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/advanced-patterns/human-in-the-loop.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, createNetwork, openai } from \"@inngest/agent-kit\";\nimport { createServer } from \"@inngest/agent-kit/server\";\n\nconst customerSupportAgent = createAgent({\n  name: \"Customer Support\",\n  // ..\n});\n\nconst technicalSupportAgent = createAgent({\n  name: \"Technical Support\",\n  // ..\n});\n\n// Create a network with the agents and default router\nconst supportNetwork = createNetwork({\n  name: \"Support Network\",\n  agents: [customerSupportAgent, technicalSupportAgent],\n  // ..\n});\n\nconst supportAgentWorkflow = inngest.createFunction(\n  {\n    id: \"support-agent-workflow\",\n  },\n  {\n    event: \"app/support.ticket.created\",\n  },\n  async ({ step, event }) => {\n    const ticket = await step.run(\"get_ticket_details\", async () => {\n      const ticket = await getTicketDetails(event.data.ticketId);\n      return ticket;\n    });\n\n    if (!ticket || \"error\" in ticket) {\n      throw new NonRetriableError(`Ticket not found: ${ticket.error}`);\n    }\n\n    const response = await supportNetwork.run(ticket.title);\n\n    return {\n      response,\n      ticket,\n    };\n  }\n);\n\n// Create and start the server\nconst server = createServer({\n  functions: [supportAgentWorkflow as any],\n});\n\nserver.listen(3010, () =>\n  console.log(\"Support Agent demo server is running on port 3010\")\n);\n```\n\n----------------------------------------\n\nTITLE: Static System Prompts in TypeScript\nDESCRIPTION: This snippet demonstrates how to use a static system prompt for an agent. The system prompt is defined as a simple string. This is useful for simpler use cases where the system prompt does not need to be dynamically created.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/agents.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst codeWriterAgent = createAgent({\n  name: 'Copy editor',\n  system:\n    `You are an expert copy editor. Given a draft article, you provide ` +\n    `actionable improvements for spelling, grammar, punctuation, and formatting.`,    model: openai('gpt-3.5-turbo'),\n});\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with pnpm\nDESCRIPTION: Installs all necessary dependencies for the AgentKit SWE-bench project using the pnpm package manager. This is a prerequisite for running the project.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/swebench/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Standalone AgentKit Router Example\nDESCRIPTION: This snippet presents the Router implementation on its own. It receives the network object as argument, accesses and updates the network state, and returns the next agent to be executed, based on the existence of values in the key-value store.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst router = ({ network }) => {\n  // the first iteration of the network will have an empty state\n  //  also, the first run of `code_assistant_agent` will store the `code`,\n  //  requiring a second run to generate the plan\n  if (!network?.state.kv.has(\"code\") || !network?.state.kv.has(\"plan\")) {\n    return codeAssistantAgent;\n  } else {\n    // once the `plan` available in the state, we iterate over the agents to execute\n    const plan = (network?.state.kv.get(\"plan\") || []) as string[];\n    const nextAgent = plan.pop();\n    if (nextAgent) {\n      network?.state.kv.set(\"plan\", plan);\n      return network?.agents.get(nextAgent);\n      // we no agents are left to run, we generate a summary\n    } else if (!network?.state.kv.has(\"summary\")) {\n      return summarizationAgent;\n      // if no agent are left to run and a summary is available, we are done\n    } else {\n      return undefined;\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an MCP Agent with AgentKit\nDESCRIPTION: This example demonstrates how to create an AgentKit Agent using MCP (via Smithery) for database management (Neon). It defines an agent with a 'done' tool and an MCP server configuration, demonstrating the integration of external tools and services within an agent network.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/packages/agent-kit/README.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  anthropic,\n  createAgent,\n  createNetwork,\n  createTool,\n} from \"@inngest/agent-kit\";\nimport { createServer } from \"@inngest/agent-kit/server\";\nimport { createSmitheryUrl } from \"@smithery/sdk/config.js\";\nimport { z } from \"zod\";\n\nconst smitheryUrl = createSmitheryUrl(\"https://server.smithery.ai/neon/ws\", {\n  neonApiKey: process.env.NEON_API_KEY,\n});\n\nconst neonAgent = createAgent({\n  name: \"neon-agent\",\n  system: `You are a helpful assistant that help manage a Neon account.\n  IMPORTANT: Call the 'done' tool when the question is answered.\n  `,\n  tools: [\n    createTool({\n      name: \"done\",\n      description: \"Call this tool when you are finished with the task.\",\n      parameters: z.object({\n        answer: z.string().describe(\"Answer to the user's question.\"),\n      }),\n      handler: async ({ answer }, { network }) => {\n        network?.state.kv.set(\"answer\", answer);\n      },\n    }),\n  ],\n  mcpServers: [\n    {\n      name: \"neon\",\n      transport: {\n        type: \"ws\",\n        url: smitheryUrl.toString(),\n      },\n    },\n  ],\n});\n\nconst neonAgentNetwork = createNetwork({\n  name: \"neon-agent\",\n  agents: [neonAgent],\n  defaultModel: anthropic({\n    model: \"claude-3-5-sonnet-20240620\",\n    defaultParameters: {\n      max_tokens: 1000,\n    },\n  }),\n  router: ({ network }) => {\n    if (!network?.state.kv.get(\"answer\")) {\n      return neonAgent;\n    }\n    return;\n  },\n});\n\n// Create and start the server\nconst server = createServer({\n  networks: [neonAgentNetwork],\n});\n\nserver.listen(3010, () =>\n  console.log(\"Support Agent demo server is running on port 3010\")\n);\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Network in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a network of agents using the `createNetwork` function from the `@inngest/agent-kit` library. It imports necessary functions and defines a network with two agents (`searchAgent` and `summaryAgent`), a default OpenAI model (gpt-4o), and a maximum iteration count of 10.  The `step` variable is assumed to be defined elsewhere in the context.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/create-network.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createNetwork, openai } from '@inngest/agent-kit';\n\n// Create a network with two agents\nconst network = createNetwork({\n  agents: [searchAgent, summaryAgent],\n  defaultModel: openai({ model: 'gpt-4o', step }),\n  maxIter: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Inngest Client Initialization in TypeScript\nDESCRIPTION: This snippet initializes an Inngest client with a specified ID. This client is used to define Inngest functions that can interact with AgentKit networks. Requires the `inngest` package.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/advanced-patterns/human-in-the-loop.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nconst inngest = new Inngest({\n  id: \"my-agentkit-network\",\n});\n```\n\n----------------------------------------\n\nTITLE: Router Arguments Interface\nDESCRIPTION: This snippet defines the `RouterArgs` interface, which specifies the arguments passed to the custom router function. It includes properties like `network` (the entire network object), `stack` (future agents to be called), `callCount` (number of agent calls), and `lastResult` (the previous agent's result). This interface provides type safety and allows the router function to access all necessary information for making routing decisions.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/routers.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RouterArgs {\n  network: Network; // The entire network, including the state and history\n  stack: Agent[]; // Future agents to be called\n  callCount: number; // Number of times the Network has called agents\n  lastResult?: InferenceResult; // The the previously called Agent's result\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Inngest via NPM\nDESCRIPTION: This command installs the Inngest npm package using the npm package manager. Inngest is recommended for better local development and production deployment experience with AgentKit. It requires npm to be installed.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/installation.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install inngest\n```\n\n----------------------------------------\n\nTITLE: Add Start Script to package.json (JSON)\nDESCRIPTION: This JSON snippet shows how to add a `start` script to the `package.json` file.  The script uses `tsx` to execute the `index.ts` file.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-workflows.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"start\": \"tsx ./index.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Models in a Network\nDESCRIPTION: This example demonstrates how to use different models for different agents in a network. The `defaultModel` is set to `gpt-4o`, while the `summaryAgent` is explicitly configured to use `claude-3-5-sonnet` via the `anthropic` model. This shows how individual agent configurations can override the network's default model.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/networks.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNetwork, openai, anthropic } from '@inngest/agent-kit';\n\nconst searchAgent = createAgent({\n  name: 'Search',\n  description: 'Search the web for information',\n});\n\nconst summaryAgent = createAgent({\n  name: 'Summary',\n  description: 'Summarize the information',\n  model: anthropic({ model: 'claude-3-5-sonnet' }),\n});\n\n// The searchAgent will use gpt-4o, while the summaryAgent will use claude-3-5-sonnet.\nconst network = createNetwork({\n  agents: [searchAgent, summaryAgent],\n  defaultModel: openai({ model: 'gpt-4o' }),\n});\n```\n\n----------------------------------------\n\nTITLE: RAG Workflow with AgentKit (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates the RAG (Retrieval-Augmented Generation) workflow. It reads a file, passes its content to the `codeAssistant` Agent for analysis, and logs the Agent's response to the console.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-workflows.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint-disable */\nimport { readFileSync } from \"fs\";\nimport { join } from \"path\";\nimport { anthropic, createAgent } from \"@inngest/agent-kit\";\n\n// Create the code assistant agent\nconst codeAssistant = createAgent({\n  name: \"code_assistant\",\n  system:\n    \"An AI assistant that helps answer questions about code by reading and analyzing files\",\n  model: anthropic({\n    model: \"claude-3-5-sonnet-latest\",\n    max_tokens: 4096,\n  }),\n});\n\nasync function main() {\n  // First step: Retrieval\n  const filePath = join(process.cwd(), `files/example.ts`);\n  const code = readFileSync(filePath, \"utf-8\");\n  // Second step: Generation\n  const { output } = await codeAssistant.run(`What the following code does?\\n\\n  ${code}\\n  `);\n  const lastMessage = output[output.length - 1];\n  const content =\n    lastMessage?.type === \"text\" ? (lastMessage?.content as string) : \"\";\n  console.log(content);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Installing Inngest via PNPM\nDESCRIPTION: This command installs the Inngest npm package using the pnpm package manager. Inngest is recommended for better local development and production deployment experience with AgentKit. It requires pnpm to be installed.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/installation.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm install inngest\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with pnpm\nDESCRIPTION: This code snippet shows how to install the dependencies of the agent-kit project using the pnpm package manager.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/packages/agent-kit/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Inngest via Yarn\nDESCRIPTION: This command installs the Inngest npm package using the Yarn package manager. Inngest is recommended for better local development and production deployment experience with AgentKit. It requires yarn to be installed.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/installation.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn add inngest\n```\n\n----------------------------------------\n\nTITLE: Trigger Reddit Search Function\nDESCRIPTION: This JSON payload is used to trigger the `reddit-search-network` function within the Inngest Dev Server. The `input` field within the `data` object contains the natural language query to be used for the Reddit search.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/reddit-search-browserbase-tools/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"input\": \"What are people saying about Rust vs Go?\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create a Database Security Agent (TypeScript)\nDESCRIPTION: Creates an agent for PostgreSQL database security using AgentKit. The agent is configured with a name, description, system prompt, and Anthropic's Claude 3.5 Haiku model. Requires `@inngest/agent-kit` as a dependency.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/quick-start.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, anthropic } from '@inngest/agent-kit';\n  \n  // ...\n \n  const securityAgent = createAgent({\n    name: 'Database Security Expert',\n    description: 'Provides expert guidance on PostgreSQL security, access control, audit logging, and compliance best practices',\n    system: 'You are a PostgreSQL security expert. ' +\n      'You only provide answers to questions linked to PostgreSQL security topics such as encryption, access control, audit logging, and compliance best practices.',\n    model: anthropic({\n      model: 'claude-3-5-haiku-latest',\n      defaultParameters: {\n        max_tokens: 1000,\n      },\n    }),\n  });\n```\n\n----------------------------------------\n\nTITLE: Running an Agent with a User Prompt in TypeScript\nDESCRIPTION: This snippet demonstrates how to run an agent using the `run()` method with a user prompt. The agent will perform an inference call using the system prompt and the user's input. The output from the agent's execution is then logged to the console.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/agents.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { output } = codeWriterAgent.run(\n  'Write a typescript function that removes unnecessary whitespace',\n);\nconsole.log(output);\n// [{ role: 'assistant', content: 'function removeUnecessaryWhitespace(...' }]\n```\n\n----------------------------------------\n\nTITLE: Expose AgentKit Network over HTTP (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to expose an AgentKit network over HTTP using the `@inngest/agent-kit` and `@inngest/agent-kit/server` packages. It creates a network and a server, then starts the server on port 3010.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/local-development.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createNetwork } from '@inngest/agent-kit';\nimport { createServer } from '@inngest/agent-kit/server';\n\nconst network = createNetwork({\n  name: 'My Network',\n  agents: [/* ... */],\n});\n\nconst server = createServer({\n  networks: [network],\n});\n\nserver.listen(3010, () => console.log(\"Agent kit running!\"));\n```\n\n----------------------------------------\n\nTITLE: Install Inngest SDK with npm\nDESCRIPTION: This command installs the Inngest SDK using npm, which is a prerequisite for integrating AgentKit networks with Inngest. The Inngest SDK provides functionalities like automatic retries, LLM request offloading, and live observability.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/deployment.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install inngest\n```\n\n----------------------------------------\n\nTITLE: Start the Server (npm)\nDESCRIPTION: This command starts the server that runs the web search agent.  It assumes that the dependencies have been installed and the environment variables are correctly configured.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/simple-search-stagehand/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Install Inngest SDK with pnpm\nDESCRIPTION: This command installs the Inngest SDK using pnpm, which is a prerequisite for integrating AgentKit networks with Inngest. The Inngest SDK provides functionalities like automatic retries, LLM request offloading, and live observability.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/deployment.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install inngest\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Input\nDESCRIPTION: This JSON payload provides a sample input for invoking a function within the AgentKit environment. The `input` field contains a prompt for data aggregation. This example demonstrates how to pass data to the invoked function.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/quick-start/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"input\": \"How do I aggregate an integer column across a date column by week?\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serve AgentKit Network over HTTP with Typescript\nDESCRIPTION: This snippet demonstrates how to serve an AgentKit network over HTTP using the `@inngest/agent-kit` and `@inngest/agent-kit/server` packages. It creates a network with specified agents and then uses `createServer` to expose the network over HTTP, listening on port 3010. This is necessary for Inngest to interact with the AgentKit network.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/deployment.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createNetwork } from '@inngest/agent-kit';\nimport { createServer } from '@inngest/agent-kit/server';\n\nconst network = createNetwork({\n  name: 'My Network',\n  agents: [/* ... */],\n});\n\nconst server = createServer({\n  networks: [network],\n});\n\nserver.listen(3010, () => console.log(\"Agent kit running!\"));\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit package\nDESCRIPTION: This command installs the `@inngest/agent-kit` package using npm. This package provides the necessary modules and functions for building multi-agent networks.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/README.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nnpm i @inngest/agent-kit\n```\n\n----------------------------------------\n\nTITLE: Initializing project with pnpm\nDESCRIPTION: This command initializes a new pnpm project.  It generates a `package.json` to handle project dependencies and scripts, serving as the foundation for installing necessary packages.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm init\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit with yarn\nDESCRIPTION: This command installs the `@inngest/agent-kit` and `@smithery/sdk` packages using yarn. These packages are required to use AgentKit with Smithery MCP servers.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/smithery.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @inngest/agent-kit @smithery/sdk\n```\n\n----------------------------------------\n\nTITLE: Create a Human in the Loop Tool in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a tool named 'ask_developer' that waits for human input using Inngest's `waitForEvent` function. It defines the tool's parameters (question and context) and specifies the event to wait for (`developer.response`), along with a timeout and matching criteria based on `data.ticketId`. The tool requires the `@inngest/agent-kit` and `zod` dependencies.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/advanced-patterns/human-in-the-loop.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTool } from \"@inngest/agent-kit\";\n\ncreateTool({\n  name: \"ask_developer\",\n  description: \"Ask a developer for input on a technical issue\",\n  parameters: z.object({\n    question: z.string().describe(\"The technical question for the developer\"),\n    context: z.string().describe(\"Additional context about the issue\"),\n  }),\n  handler: async ({ question, context }, { step }) => {\n    if (!step) {\n      return { error: \"This tool requires step context\" };\n    }\n\n    // Example: Send a Slack message to the developer\n\n    // Wait for developer response event\n    const developerResponse = await step.waitForEvent(\"developer.response\", {\n      event: \"app/support.ticket.developer-response\",\n      timeout: \"4h\",\n      match: \"data.ticketId\",\n    });\n\n    if (!developerResponse) {\n      return { error: \"No developer response provided\" };\n    }\n\n    return {\n      developerResponse: developerResponse.data.answer,\n      responseTime: developerResponse.data.timestamp,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initialize a new npm project\nDESCRIPTION: Creates a new directory and initializes a new npm project within it.  The `npm init` command generates a `package.json` file, prompting for project details.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/quick-start.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmkdir my-agent-kit-project && npm init\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit, Browserbase, and Playwright (pnpm)\nDESCRIPTION: Installs the required pnpm packages: @inngest/agent-kit, @browserbasehq/sdk, and playwright-core. These packages are essential for creating AI agents with web browsing capabilities using Browserbase.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/browserbase.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install @inngest/agent-kit @browserbasehq/sdk playwright-core\n```\n\n----------------------------------------\n\nTITLE: Example Agent Input Payload\nDESCRIPTION: This JSON payload provides an example of the input required to run the `neon-network` function within the Inngest Dev Server. The input consists of a `data` object containing an `input` field with a query for summarizing Neon projects.  The agent is expected to process this input and generate a summary.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/mcp-neon-agent/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"input\": \"Can you give me a summary of all of my Neon projects and what data is in each one?\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Anthropic Model with Basic Configuration\nDESCRIPTION: This code snippet demonstrates how to initialize an Anthropic model with a basic configuration, including the model name and the required `max_tokens` parameter. It imports the necessary modules from `@inngest/agent-kit` and creates an agent with the specified model settings.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/model-anthropic.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, anthropic } from \"@inngest/agent-kit\";\n\nconst agent = createAgent({\n  name: \"Code writer\",\n  system: \"You are an expert TypeScript programmer.\",\n  model: anthropic({\n    model: \"claude-3-opus\",\n    // Note: max_tokens is required for Anthropic models\n    defaultParameters: { max_tokens: 4096 },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies using npm\nDESCRIPTION: This command installs the necessary dependencies for the project using the npm package manager. It reads the `package.json` file and downloads the required packages into the `node_modules` directory.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/e2b-coding-agent/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Download Example Code File using wget\nDESCRIPTION: This bash command downloads the `example.ts` file from a remote GitHub URL using `wget` and saves it to the current directory.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-workflows.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/inngest/agent-kit/main/examples/code-assistant-rag/files/example.ts\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: This command uses npm (Node Package Manager) to install all the necessary dependencies listed in the `package.json` file within the current directory. These dependencies are required for the Neon Database Agent to function correctly.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/mcp-neon-agent/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Available Grok Models\nDESCRIPTION: This snippet lists the available Grok model identifiers. It shows the string literals for different versions of the Grok model, such as grok-2 and grok-3.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/model-grok.mdx#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\"grok-2-1212\"\n\"grok-2\"\n\"grok-2-latest\"\n\"grok-3\"\n\"grok-3-latest\";\n```\n\n----------------------------------------\n\nTITLE: Message Types Definition in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript types and interfaces for different types of messages used within the state system, including `TextMessage`, `ToolCallMessage`, and `ToolResultMessage`. These message types are used to represent different kinds of interactions within the agent network.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/state.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Message = TextMessage | ToolCallMessage | ToolResultMessage;\n\ninterface TextMessage {\n  type: \"text\";\n  role: \"system\" | \"user\" | \"assistant\";\n  content: string | Array<TextContent>;\n  stop_reason?: \"tool\" | \"stop\";\n}\n\ninterface ToolCallMessage {\n  type: \"tool_call\";\n  role: \"user\" | \"assistant\";\n  tools: ToolMessage[];\n  stop_reason: \"tool\";\n}\n\ninterface ToolResultMessage {\n  type: \"tool_result\";\n  role: \"tool_result\";\n  tool: ToolMessage;\n  content: unknown;\n  stop_reason: \"tool\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Agent with Anthropic (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates creating an Agent using AgentKit, configuring it with Anthropic's Claude 3.5 Sonnet model for code analysis. The agent is named 'code_assistant' and provided with a system message that describes its purpose.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-workflows.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readFileSync } from \"fs\";\nimport { join } from \"path\";\nimport { anthropic, createAgent } from \"@inngest/agent-kit\";\n\nconst codeAssistant = createAgent({\n  name: \"code_assistant\",\n  system:\n    \"An AI assistant that helps answer questions about code by reading and analyzing files\",\n  model: anthropic({\n    model: \"claude-3-5-sonnet-latest\",\n    max_tokens: 4096,\n  }),\n});\n\n\nasync function main() {\n  // First step: Retrieval\n  const filePath = join(process.cwd(), `files/example.ts`);\n  const code = readFileSync(filePath, \"utf-8\");\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Install Inngest SDK with yarn\nDESCRIPTION: This command installs the Inngest SDK using yarn, which is a prerequisite for integrating AgentKit networks with Inngest. The Inngest SDK provides functionalities like automatic retries, LLM request offloading, and live observability.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/deployment.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add inngest\n```\n\n----------------------------------------\n\nTITLE: Installing dev dependencies with pnpm\nDESCRIPTION: This command installs `tsx` and `@types/node` as dev dependencies using pnpm. `tsx` enables direct execution of TypeScript files, while `@types/node` provides type definitions for Node.js. These are necessary for TypeScript development and execution.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -D tsx @types/node\n```\n\n----------------------------------------\n\nTITLE: Creating an MCP Agent with Neon DB in AgentKit (TSX)\nDESCRIPTION: This code creates an agent that interacts with a Neon database MCP server using AgentKit. It defines an agent named `neonAgent` with a `done` tool to answer user questions. It uses `createAgent`, `createNetwork`, and `createTool` from `@inngest/agent-kit`, and `createSmitheryUrl` from `@smithery/sdk/config.js`. The agent leverages a state to store and retrieve answers.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/README.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\\n  anthropic,\\n  createAgent,\\n  createNetwork,\\n  createTool,\\n} from \"@inngest/agent-kit\";\nimport { createServer } from \"@inngest/agent-kit/server\";\nimport { createSmitheryUrl } from \"@smithery/sdk/config.js\";\nimport { z } from \"zod\";\n\nconst smitheryUrl = createSmitheryUrl(\"https://server.smithery.ai/neon/ws\", {\n  neonApiKey: process.env.NEON_API_KEY,\n});\n\nconst neonAgent = createAgent({\n  name: \"neon-agent\",\n  system: `You are a helpful assistant that help manage a Neon account.\\n  IMPORTANT: Call the 'done' tool when the question is answered.\\n  `,\n  tools: [\n    createTool({\n      name: \"done\",\n      description: \"Call this tool when you are finished with the task.\",\n      parameters: z.object({\n        answer: z.string().describe(\"Answer to the user's question.\"),\n      }),\n      handler: async ({ answer }, { network }) => {\n        network?.state.kv.set(\"answer\", answer);\n      },\n    }),\n  ],\n  mcpServers: [\n    {\n      name: \"neon\",\n      transport: {\n        type: \"ws\",\n        url: smitheryUrl.toString(),\n      },\n    },\n  ],\n});\n\nconst neonAgentNetwork = createNetwork({\n  name: \"neon-agent\",\n  agents: [neonAgent],\n  defaultModel: anthropic({\n    model: \"claude-3-5-sonnet-20240620\",\n    defaultParameters: {\n      max_tokens: 1000,\n    },\n  }),\n  router: ({ network }) => {\n    if (!network?.state.kv.get(\"answer\")) {\n      return neonAgent;\n    }\n    return;\n  },\n});\n\n// Create and start the server\nconst server = createServer({\n  networks: [neonAgentNetwork],\n});\n\nserver.listen(3010, () =>\n  console.log(\"Support Agent demo server is running on port 3010\")\n);\n\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty onResponse Lifecycle Hook in TypeScript\nDESCRIPTION: This code defines an empty `onResponse` function, which is meant to be used as a lifecycle hook within the `createAgent` function. The `onResponse` hook is called after the inference call request is completed but before tool calling, allowing inspection and modification of the model's response prior to any tool calls.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/create-agent.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onResponse() {}\n```\n\n----------------------------------------\n\nTITLE: Run the Coding Agent with npm\nDESCRIPTION: This command starts the coding agent in development mode, enabling hot reloading for faster iteration. It also passes a task to the agent, which in this case is to create a Next.js TodoList demo with unit tests and coverage.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/e2b-coding-agent/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start \"Create a Next.js TodoList demo and its associated unit tests. Finally run the tests with coverage\"\n```\n\n----------------------------------------\n\nTITLE: Tool Lifecycle onStart Hook in Typescript\nDESCRIPTION: This snippet showcases the `onStart` lifecycle hook within a tool definition. The `onStart` hook allows for modifying input parameters before they are passed to the handler, or preventing the tool from being called altogether.  The example shows an empty function body for the `onStart` hook which returns the parameters.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/create-tool.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tool = createTool({\n  name: 'write-file',\n  lifecycle: {\n    onStart: ({ parameters }) => {\n      // Validate or modify parameters before execution\n      return parameters;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing dev dependencies with yarn\nDESCRIPTION: This command installs `tsx` and `@types/node` as development dependencies using yarn. `tsx` allows for direct execution of TypeScript files, and `@types/node` adds TypeScript support for Node.js APIs. They're necessary for TypeScript development.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D tsx @types/node\n```\n\n----------------------------------------\n\nTITLE: Creating a new project directory and initializing with pnpm\nDESCRIPTION: Creates a new directory named 'my-agent-kit-project' and initializes it using pnpm.  This sets up the basic project structure for developing an AgentKit application.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/browserbase.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmkdir my-agent-kit-project && pnpm init\n```\n\n----------------------------------------\n\nTITLE: Install TypeScript Dependencies with Yarn\nDESCRIPTION: This bash command installs `tsx` and `@types/node` as development dependencies using Yarn.  `tsx` allows running TypeScript files directly, and `@types/node` provides TypeScript type definitions for Node.js APIs.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-workflows.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D tsx @types/node\n```\n\n----------------------------------------\n\nTITLE: Creating a new project directory and initializing with npm\nDESCRIPTION: Creates a new directory named 'my-agent-kit-project' and initializes it using npm.  This sets up the basic project structure for developing an AgentKit application.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/browserbase.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmkdir my-agent-kit-project && npm init\n```\n\n----------------------------------------\n\nTITLE: Run AgentKit Server\nDESCRIPTION: This command starts the AgentKit server.  This server provides the core functionality for running agents and networks.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/quick-start/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining the Router Function Type in TypeScript\nDESCRIPTION: This TypeScript code defines the type signature for the router function used in the agent network. It specifies the input parameters available to the router, including the original input, network state, agent stack, call count, and last inference result. Understanding this type definition is critical for implementing custom routing logic.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/advanced-patterns/routing.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// T represents the network state's type.\ntype RouterFunction<T> = (args: {\n  input: string;\n  network: NetworkRun<T>;\n  stack: Agent<T>[];\n  callCount: number;\n  lastResult?: InferenceResult;\n}) => Promise<Agent<T> | undefined>;\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Support\nDESCRIPTION: This snippet shows how to install tsx and @types/node as development dependencies using npm.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-agents.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tsx @types/node\n```\n\n----------------------------------------\n\nTITLE: Routing with State\nDESCRIPTION: This snippet demonstrates how to use the network's state to make routing decisions. The router checks for a `solution` in the network's state and stops the network if found. Otherwise, it examines the last agent's output and routes to either `contextAgent` or `mathAgent` based on whether the output indicates a need for more context.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/concepts/routers.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createNetwork } from '@inngest/agent-kit';\n\n// mathAgent and contextAgent Agents definition...\n\nconst network = createNetwork({\n  agents: [mathAgent, contextAgent],\n  router: ({ network, lastResult }): Agent | undefined => {\n    // Check if we've solved the problem\n    const solution = network.state.data.solution;\n    if (solution) {\n      // We're done - return undefined to stop the network\n      return undefined;\n    }\n\n    // retrieve the last message from the output\n    const lastMessage = lastResult?.output[lastResult?.output.length - 1];\n    const content = lastMessage?.type === 'text' ? lastMessage?.content as string : '';\n\n    // Check the last result to decide what to do next\n    if (content.includes('need more context')) {\n      return contextAgent;\n    }\n\n    return mathAgent;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing dev dependencies with npm\nDESCRIPTION: This command installs `tsx` and `@types/node` as development dependencies using npm. `tsx` is a TypeScript execution tool, and `@types/node` provides TypeScript definitions for Node.js APIs. These are required for running TypeScript code.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tsx @types/node\n```\n\n----------------------------------------\n\nTITLE: Run Inngest Dev Server\nDESCRIPTION: This command starts the Inngest development server, which is used for testing and debugging agents and networks. It connects to the AgentKit server at `http://localhost:3000/api/inngest`.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/quick-start/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run inngest-dev\n# or run it directly\nnpx inngest-cli@latest dev -u http://localhost:3000/api/inngest\n```\n\n----------------------------------------\n\nTITLE: Run AgentKit server using npx and tsx\nDESCRIPTION: Runs the AgentKit server using `npx` and `tsx` for TypeScript execution.  Assumes that the `index.ts` file contains the server definition.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/quick-start.mdx#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpx tsx ./index.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing Grok Model\nDESCRIPTION: This code snippet demonstrates how to initialize an agent with Grok as the model provider, specifying the model name. It imports `createAgent` and `grok` from `@inngest/agent-kit` and sets up a basic agent configuration.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/model-grok.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, grok } from \"@inngest/agent-kit\";\n\nconst agent = createAgent({\n  name: \"Code writer\",\n  system: \"You are an expert TypeScript programmer.\",\n  model: grok({ model: \"grok-3-latest\" }),\n});\n```\n\n----------------------------------------\n\nTITLE: Start Inngest Dev Server (npx)\nDESCRIPTION: This command starts the Inngest Dev Server, which is used to test and debug the Inngest functions. It uses npx to run the latest version of the inngest-cli package.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/simple-search-stagehand/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx inngest-cli@latest dev\n```\n\n----------------------------------------\n\nTITLE: Environment Variables (.env)\nDESCRIPTION: This snippet shows the required environment variables for the web search agent. You need to replace the placeholders with your actual API keys and project ID from Browserbase and OpenAI.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/simple-search-stagehand/README.md#_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nBROWSERBASE_API_KEY=your_browserbase_api_key\nBROWSERBASE_PROJECT_ID=your_browserbase_project_id\nOPENAI_API_KEY=your_openai_api_key\n```\n\n----------------------------------------\n\nTITLE: Start the Server with pnpm\nDESCRIPTION: Starts the AgentKit server using pnpm. This command initiates the application and makes it accessible for running SWE-bench examples.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/swebench/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Complex Network Invoke Payload (JSON)\nDESCRIPTION: Example JSON payload for invoking a network of agents. The `data.input` contains multiple questions designed for different agents within the network.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/quick-start.mdx#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"data\": {\n        \"input\": \"I am building a Finance application. Help me answer the following 2 questions: \\n - How can I scale my application to millions of request per second? \\n - How should I design my schema to ensure the safety of each organization's data?\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Trigger Function Example (JSON)\nDESCRIPTION: This JSON payload is used to trigger the `simple-search-agent-workflow` function in the Inngest Dev Server.  The \"input\" field in the \"data\" object contains the search query.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/simple-search-stagehand/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"input\": \"When Inngest was founded?\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Available Anthropic Models\nDESCRIPTION: This plaintext snippet lists the available Anthropic models that can be used with the `anthropic` function. These model names should be used to configure the `model` option when initializing the Anthropic agent.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/model-anthropic.mdx#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\"claude-3-5-haiku-latest\"\n\"claude-3-5-haiku-20241022\"\n\"claude-3-5-sonnet-latest\"\n\"claude-3-5-sonnet-20241022\"\n\"claude-3-5-sonnet-20240620\"\n\"claude-3-opus-latest\"\n\"claude-3-opus-20240229\"\n\"claude-3-sonnet-20240229\"\n\"claude-3-haiku-20240307\"\n\"claude-2.1\"\n\"claude-2.0\"\n\"claude-instant-1.2\"\n```\n\n----------------------------------------\n\nTITLE: Start Inngest Dev Server\nDESCRIPTION: Starts the Inngest Dev Server, which is essential for local development and testing. It connects to the application via the specified URL and enables interaction with the Inngest platform.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/swebench/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx inngest-cli@latest dev -u http://localhost:3001/api/inngest\n```\n\n----------------------------------------\n\nTITLE: Install npm Dependencies\nDESCRIPTION: This command installs all npm dependencies required for the AgentKit project. It ensures that all necessary packages are available for the application to run correctly.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/quick-start/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Available Gemini Models (Plaintext)\nDESCRIPTION: This snippet lists available Gemini models. These model names can be used as the `model` parameter when configuring the Gemini integration in Inngest Agent Kit.  It provides a quick reference to the different models available for use with the Google Gemini API.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/reference/model-gemini.mdx#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\"gemini-1.5-flash\"\n\"gemini-1.5-flash-8b\"\n\"gemini-1.5-pro\"\n\"gemini-1.0-pro\"\n\"text-embedding-004\"\n\"aqa\"\n```\n\n----------------------------------------\n\nTITLE: Install Inngest Package (yarn)\nDESCRIPTION: Installs the `inngest` package using yarn.  This is a prerequisite for using AgentKit with the Inngest Dev Server.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/local-development.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add inngest\n```\n\n----------------------------------------\n\nTITLE: Navigate to Example Directory\nDESCRIPTION: This command changes the current directory to the 'examples/mcp-neon-agent' directory after cloning the repository. This is a necessary step to execute the subsequent commands in the correct context.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/mcp-neon-agent/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/mcp-neon-agent\n```\n\n----------------------------------------\n\nTITLE: Start Inngest Dev Server\nDESCRIPTION: This command starts the Inngest Dev Server using the Inngest CLI. This server provides a local environment for developing and testing Inngest functions. Requires the inngest-cli to be installed globally or locally.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/mcp-neon-agent/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx inngest-cli@latest dev\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit with npm\nDESCRIPTION: This command installs the AgentKit package using npm.  It's the first step towards integrating AgentKit into a TypeScript project.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/packages/agent-kit/README.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nnpm i @inngest/agent-kit\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit and E2B with npm\nDESCRIPTION: This command installs the `@inngest/agent-kit` and `@e2b/code-interpreter` packages using npm. These packages are required to use AgentKit with E2B.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/e2b.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @inngest/agent-kit @e2b/code-interpreter\n```\n\n----------------------------------------\n\nTITLE: Run Code Assistant with NPM and API Key (Bash)\nDESCRIPTION: This bash command runs the Code Assistant application using npm, setting the `ANTHROPIC_API_KEY` environment variable to the user's Anthropic API key.  This API key is required to authenticate with the Anthropic LLM.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-workflows.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nANTHROPIC_API_KEY=<your-api-key> npm run start\n```\n\n----------------------------------------\n\nTITLE: Configure Agent with Self-Hosted MCP Server (TS)\nDESCRIPTION: This snippet demonstrates how to configure an AgentKit agent to use a self-hosted MCP server.  It defines the agent's name, system prompt, and configures the `mcpServers` property with connection details, including the transport type (ws) and URL. Requires the `@inngest/agent-kit` package.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/advanced-patterns/mcp.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent } from \"@inngest/agent-kit\";\n\nconst neonAgent = createAgent({\n  name: \"neon-agent\",\n  system: `You are a helpful assistant that help manage a Neon account.\n  `,\n  mcpServers: [\n    {\n      name: \"neon\",\n      transport: {\n        type: \"ws\",\n        url: \"ws://localhost:8080\",\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State with TypeScript\nDESCRIPTION: This TypeScript interface defines the structure of the agent's state within the network. It includes properties for files, the plan created by the planning agent, and a flag to indicate when the workflow is complete. The interface helps in managing and tracking the progress of the agent network.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/advanced-patterns/routing.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AgentState {\n  // files stores all files that currently exist in the repo.\n  files?: string[];\n\n  // plan is the plan created by the planning agent.  It is optional\n  // as, to begin with, there is no plan.  This is set by the planning\n  // agent's tool.\n  plan?: {\n    thoughts: string;\n    plan_details: string;\n    edits: Array<{\n      filename: string;\n      idea: string;\n      reasoning: string;\n    }>;\n  },\n\n  // done indicates whether we're done editing files, and terminates the\n  // network when true.\n  done: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Code Assistant v2 with NPM\nDESCRIPTION: This snippet demonstrates how to run the Code Assistant v2 example using NPM. It sets the ANTHROPIC_API_KEY environment variable and then executes the `npm run start` command.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nANTHROPIC_API_KEY=<your-api-key> npm run start\n```\n\n----------------------------------------\n\nTITLE: Start Inngest dev server\nDESCRIPTION: Starts the Inngest development server and connects it to the AgentKit server. The `-u` flag specifies the URL of the AgentKit server's Inngest API endpoint.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/quick-start.mdx#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpx inngest-cli@latest dev -u http://localhost:3000/api/inngest\n```\n\n----------------------------------------\n\nTITLE: Start the Agent\nDESCRIPTION: This command starts the Neon Database Agent using npm. It likely executes a script defined in the `package.json` file, which in turn runs the main agent application.  It expects the environment variables defined in the `.env` file to be present.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/mcp-neon-agent/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit and E2B with yarn\nDESCRIPTION: This command installs the `@inngest/agent-kit` and `@e2b/code-interpreter` packages using yarn. These packages are required to use AgentKit with E2B.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/e2b.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @inngest/agent-kit @e2b/code-interpreter\n```\n\n----------------------------------------\n\nTITLE: Start the server\nDESCRIPTION: This command starts the application server using npm.  It assumes that the package.json file contains a start script.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/support-agent-human-in-the-loop/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Run Code Assistant with PNPM and API Key (Bash)\nDESCRIPTION: This bash command runs the Code Assistant application using pnpm, setting the `ANTHROPIC_API_KEY` environment variable to the user's Anthropic API key.  This API key is required to authenticate with the Anthropic LLM.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-workflows.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nANTHROPIC_API_KEY=<your-api-key> pnpm run start\n```\n\n----------------------------------------\n\nTITLE: Start the server\nDESCRIPTION: This command starts the Reddit Search Agent server, which will be listening on port 3010.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/reddit-search-browserbase-tools/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Set Anthropic API Key\nDESCRIPTION: Sets the Anthropic API key as an environment variable. This key is required to authenticate with the Anthropic API. Replace `sk-ant-api03-JOs892nf...` with your actual API key.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/swebench/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport ANTHROPIC_API_KEY=\"sk-ant-api03-JOs892nf...\"\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit with pnpm\nDESCRIPTION: This command installs the `@inngest/agent-kit` and `@smithery/sdk` packages using pnpm. These packages are required to use AgentKit with Smithery MCP servers.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/smithery.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install @inngest/agent-kit @smithery/sdk\n```\n\n----------------------------------------\n\nTITLE: Downloading example code file using wget\nDESCRIPTION: This sequence of commands downloads an example TypeScript file (`example.ts`) from a GitHub repository into a `files` directory.  It first creates the `files` directory, navigates into it, downloads the file using `wget`, and then navigates back to the original directory. This provides a sample file for the code analysis.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmkdir files\ncd files\nwget https://raw.githubusercontent.com/inngest/agent-kit/main/examples/code-assistant-agentic/files/example.ts\ncd -\n```\n\n----------------------------------------\n\nTITLE: Initialize PNPM Project with Bash\nDESCRIPTION: This bash command initializes a new pnpm project in the current directory, creating a `package.json` file with default settings.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-workflows.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm init\n```\n\n----------------------------------------\n\nTITLE: Install Inngest Package (npm)\nDESCRIPTION: Installs the `inngest` package using npm.  This is a prerequisite for using AgentKit with the Inngest Dev Server.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/local-development.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install inngest\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit, Browserbase, and Playwright (npm)\nDESCRIPTION: Installs the required npm packages: @inngest/agent-kit, @browserbasehq/sdk, and playwright-core. These packages are essential for creating AI agents with web browsing capabilities using Browserbase.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/browserbase.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @inngest/agent-kit @browserbasehq/sdk playwright-core\n```\n\n----------------------------------------\n\nTITLE: Initializing the Project\nDESCRIPTION: This snippet shows how to initialize a new npm project using the npm init command.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-agents.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Trigger app/support.ticket.developer-response event\nDESCRIPTION: This JSON payload represents the data sent with the `app/support.ticket.developer-response` event. It contains the 'ticketId' to identify the ticket, and the 'response' from the developer.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/support-agent-human-in-the-loop/README.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"ticketId\": \"T125\",\n    \"response\": \"The issue was caused by a bug in the API. I have fixed it in the latest release. The API is now working again.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic File Reading Structure (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates a basic file reading structure, importing modules from 'fs' and 'path', defining an async main function to read the 'example.ts' file.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-workflows.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readFileSync } from \"fs\";\nimport { join } from \"path\";\n\nasync function main() {\n  // First step: Retrieval\n  const filePath = join(process.cwd(), `files/example.ts`);\n  const code = readFileSync(filePath, \"utf-8\");\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Install dependencies\nDESCRIPTION: This command installs the necessary dependencies for the Reddit Search Agent project using npm.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/reddit-search-browserbase-tools/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Attaching Tool to Agents in TypeScript\nDESCRIPTION: This code snippet demonstrates how to attach the `saveSuggestions` tool to both the `documentationAgent` and `analysisAgent`.  By including `saveSuggestions` in the `tools` array of each agent's configuration, the agents gain the ability to use this tool to save their suggestions into the shared state. This allows the agents to persist their outputs and share them with other agents in the network.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent } from \"@inngest/agent-kit\";\n\n// `save_suggestions` definition...\n\nconst documentationAgent = createAgent({\n  name: \"documentation_agent\",\n  system: \"You are an expert at generating documentation for code\",\n  tools: [saveSuggestions],\n});\n\nconst analysisAgent = createAgent({\n  name: \"analysis_agent\",\n  system: \"You are an expert at analyzing code and suggesting improvements\",\n  tools: [saveSuggestions],\n});\n```\n\n----------------------------------------\n\nTITLE: Code Analysis Suggestion Output\nDESCRIPTION: This snippet shows the expected output of the Code Assistant v2 when it performs code analysis. It outlines areas for improvement such as type safety, structure, performance optimization, and documentation.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_23\n\nLANGUAGE: txt\nCODE:\n```\nAnalysis: The code analysis suggests several key areas for improvement:\n\n1. Type Safety and Structure:\n- Implement strict TypeScript configurations\n- Add explicit return types and interfaces\n- Break down complex functions\n- Follow Single Responsibility Principle\n- Implement proper error handling\n\n2. Performance Optimization:\n- Review and optimize critical operations\n- Consider caching mechanisms\n- Improve data processing efficiency\n\n3. Documentation:\n- Add comprehensive JSDoc comments\n- Document complex logic and assumptions\n- Create detailed README\n- Include setup and usage instructions\n- Add code examples\n```\n\n----------------------------------------\n\nTITLE: Defining pytest test paths\nDESCRIPTION: Defines a list of pytest test paths related to the `pvlib.pvsystem` module. This list is likely used for CI/CD to determine which tests to run or to skip when a test run is expected to fail. The tests cover various functionalities of the pvsystem module, including IAM calculations, spectral loss models, cell temperature models, and parameter calculations.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/swebench/README.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"PASS_TO_PASS\": \"[\\\"pvlib/tests/test_pvsystem.py::test_PVSystem_get_iam[ashrae-model_params0]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_get_iam[physical-model_params1]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_get_iam[martin_ruiz-model_params2]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_get_iam\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_get_iam_sapm\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_get_iam_interp\\\", \\\"pvlib/tests/test_pvsystem.py::test__normalize_sam_product_names\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_get_iam_invalid\\\", \\\"pvlib/tests/test_pvsystem.py::test_retrieve_sam_raise_no_parameters\\\", \\\"pvlib/tests/test_pvsystem.py::test_retrieve_sam_cecmod\\\", \\\"pvlib/tests/test_pvsystem.py::test_retrieve_sam_cecinverter\\\", \\\"pvlib/tests/test_pvsystem.py::test_sapm\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_sapm\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_sapm\\\", \\\"pvlib/tests/test_pvsystem.py::test_sapm_spectral_loss_deprecated\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_sapm_spectral_loss\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_sapm_spectral_loss\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_first_solar_spectral_loss[module_parameters0-multisi-None]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_first_solar_spectral_loss[module_parameters1-multisi-None]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_first_solar_spectral_loss[module_parameters2-None-coefficients2]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_first_solar_spectral_loss\\\", \\\"pvlib/tests/test_pvsystem.py::test_sapm_effective_irradiance[test_input0-1140.0510967821876]\\\", \\\"pvlib/tests/test_pvsystem.py::test_sapm_effective_irradiance[test_input1-expected1]\\\", \\\"pvlib/tests/test_pvsystem.py::test_sapm_effective_irradiance[test_input2-expected2]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_sapm_effective_irradiance\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_sapm_effective_irradiance\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_sapm_effective_irradiance_value_error[20-poa_diffuse0-aoi0]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_sapm_effective_irradiance_value_error[poa_direct1-poa_diffuse1-aoi1]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_sapm_effective_irradiance_value_error[poa_direct2-poa_diffuse2-20]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_sapm_celltemp\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_sapm_celltemp_kwargs\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_sapm_celltemp_different_arrays\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_pvsyst_celltemp\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_faiman_celltemp\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_noct_celltemp\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_noct_celltemp_error\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_functions[faiman]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_functions[pvsyst]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_functions[sapm]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_functions[fuentes]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_functions[noct_sam]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_multi_temp[faiman]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_multi_temp[pvsyst]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_multi_temp[sapm]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_multi_temp[fuentes]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_multi_temp[noct_sam]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_multi_wind[faiman]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_multi_wind[pvsyst]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_multi_wind[sapm]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_multi_wind[fuentes]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_multi_wind[noct_sam]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_get_cell_temperature_invalid\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_temp_too_short[faiman]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_temp_too_short[pvsyst]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_temp_too_short[sapm]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_temp_too_short[fuentes]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_temp_too_short[noct_sam]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_temp_too_long[faiman]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_temp_too_long[pvsyst]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_temp_too_long[sapm]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_temp_too_long[fuentes]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_temp_too_long[noct_sam]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_wind_too_short[faiman]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_wind_too_short[pvsyst]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_wind_too_short[sapm]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_wind_too_short[fuentes]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_wind_too_short[noct_sam]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_wind_too_long[faiman]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_wind_too_long[pvsyst]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_wind_too_long[sapm]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_wind_too_long[fuentes]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_wind_too_long[noct_sam]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_poa_length_mismatch[faiman]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_poa_length_mismatch[pvsyst]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_poa_length_mismatch[sapm]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_poa_length_mismatch[fuentes]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_multi_array_celltemp_poa_length_mismatch[noct_sam]\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_fuentes_celltemp\\\", \\\"pvlib/tests/test_pvsystem.py::test_PVSystem_fuentes_module_height\\\", \\\"pvlib/tests/test_pvsystem.py::test_Array__infer_temperature_model_params\\\", \\\"pvlib/tests/test_pvsystem.py::test_Array__infer_cell_type\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_desoto_returns_correct_Python_type[numeric_type_funcs0]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_desoto_returns_correct_Python_type[numeric_type_funcs1]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_desoto_returns_correct_Python_type[numeric_type_funcs2]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_desoto_returns_correct_Python_type[numeric_type_funcs3]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_desoto_returns_correct_Python_type[numeric_type_funcs4]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_desoto_returns_correct_Python_type[numeric_type_funcs5]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_desoto_returns_correct_Python_type[numeric_type_funcs6]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_desoto_returns_correct_Python_type[numeric_type_funcs7]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_desoto_returns_correct_Python_type[numeric_type_funcs8]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_desoto_returns_correct_Python_type[numeric_type_funcs9]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_desoto_returns_correct_Python_type[numeric_type_funcs10]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_desoto_returns_correct_Python_type[numeric_type_funcs11]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_desoto_returns_correct_Python_type[numeric_type_funcs12]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_desoto_returns_correct_Python_type[numeric_type_funcs13]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_desoto_returns_correct_Python_type[numeric_type_funcs14]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_desoto_returns_correct_Python_type[numeric_type_funcs15]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_cec_returns_correct_Python_type[numeric_type_funcs0]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_cec_returns_correct_Python_type[numeric_type_funcs1]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_cec_returns_correct_Python_type[numeric_type_funcs2]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_cec_returns_correct_Python_type[numeric_type_funcs3]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_cec_returns_correct_Python_type[numeric_type_funcs4]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_cec_returns_correct_Python_type[numeric_type_funcs5]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_cec_returns_correct_Python_type[numeric_type_funcs6]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_cec_returns_correct_Python_type[numeric_type_funcs7]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_cec_returns_correct_Python_type[numeric_type_funcs8]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_cec_returns_correct_Python_type[numeric_type_funcs9]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_cec_returns_correct_Python_type[numeric_type_funcs10]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_cec_returns_correct_Python_type[numeric_type_funcs11]\\\", \\\"pvlib/tests/test_pvsystem.py::test_calcparams_cec_returns_correct_Python_type[numeric_type_funcs12]\\\", \\\"pvlib/tests/test_pvsystem.py::\"\n```\n\n----------------------------------------\n\nTITLE: Install Inngest Package (pnpm)\nDESCRIPTION: Installs the `inngest` package using pnpm.  This is a prerequisite for using AgentKit with the Inngest Dev Server.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/local-development.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install inngest\n```\n\n----------------------------------------\n\nTITLE: Start the Inngest Dev Server\nDESCRIPTION: This command starts the Inngest Dev Server, which allows you to test and debug Inngest functions locally. It uses the `npx` command to execute the `inngest-cli` package, ensuring you're using the latest version.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/support-agent-human-in-the-loop/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx inngest-cli@latest dev\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies with pnpm\nDESCRIPTION: This command installs the `@inngest/agent-kit` and `zod` packages using pnpm.  `@inngest/agent-kit` provides the agent framework and `zod` is used for schema validation. These libraries are critical for agent development.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @inngest/agent-kit zod\n```\n\n----------------------------------------\n\nTITLE: Example Invoke payload (JSON)\nDESCRIPTION: Example JSON payload for invoking the agent within the Inngest dev server. The `data.input` field contains the prompt for the agent.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/quick-start.mdx#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"data\": {\n        \"input\": \"How do I aggregate an integer column across a date column by week?\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Install AgentKit via npm\nDESCRIPTION: Installs the AgentKit package using npm. This command adds the @inngest/agent-kit package to the project's dependencies.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/quick-start.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @inngest/agent-kit\n```\n\n----------------------------------------\n\nTITLE: Trigger support-agent-workflow function\nDESCRIPTION: This JSON payload is used to trigger the 'support-agent-workflow' function within the Inngest Dev Server. It includes a 'ticketId' in the 'data' field, which is used to identify the specific ticket being processed.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/support-agent-human-in-the-loop/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"ticketId\": \"T125\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install dependencies\nDESCRIPTION: This command uses npm (Node Package Manager) to install all the necessary dependencies listed in the package.json file of the current project.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/support-agent-human-in-the-loop/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Run Code Assistant with Yarn and API Key (Bash)\nDESCRIPTION: This bash command runs the Code Assistant application using Yarn, setting the `ANTHROPIC_API_KEY` environment variable to the user's Anthropic API key.  This API key is required to authenticate with the Anthropic LLM.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-workflows.mdx#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nANTHROPIC_API_KEY=<your-api-key> yarn run start\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit with npm\nDESCRIPTION: This command installs the `@inngest/agent-kit` and `@smithery/sdk` packages using npm. These packages are required to use AgentKit with Smithery MCP servers.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/smithery.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @inngest/agent-kit @smithery/sdk\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentKit Network\nDESCRIPTION: This snippet initializes an AgentKit Network with a set of agents and a default model. It demonstrates how to use the `createNetwork` function, and how to specify agents and a default Anthropic model.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createNetwork, anthropic } from \"@inngest/agent-kit\";\n\n// Agent and Tools definitions...\n\nconst network = createNetwork({\n  name: \"code-assistant-v2\",\n  agents: [\n    codeAssistantAgent,\n    documentationAgent,\n    analysisAgent,\n    summarizationAgent,\n  ],\n  defaultModel: anthropic({\n    model: \"claude-3-5-sonnet-latest\",\n    max_tokens: 4096,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Install TypeScript Dependencies with PNPM\nDESCRIPTION: This bash command installs `tsx` and `@types/node` as development dependencies using pnpm.  `tsx` allows running TypeScript files directly, and `@types/node` provides TypeScript type definitions for Node.js APIs.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-workflows.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -D tsx @types/node\n```\n\n----------------------------------------\n\nTITLE: Starting the Server with API Key\nDESCRIPTION: These snippets show how to start the server using npm, pnpm, or yarn, requiring an Anthropic API key. The API key is passed as an environment variable when running the start command.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-agents.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nANTHROPIC_API_KEY=<your-api-key> npm run start\n```\n\nLANGUAGE: bash\nCODE:\n```\nANTHROPIC_API_KEY=<your-api-key> pnpm run start\n```\n\nLANGUAGE: bash\nCODE:\n```\nANTHROPIC_API_KEY=<your-api-key> yarn run start\n```\n\n----------------------------------------\n\nTITLE: Install Node and PNPM (TSX)\nDESCRIPTION: This code snippet shows how to verify that Node.js and PNPM are installed and have the correct version. The commands `node -v` and `pnpm -v` are executed from the terminal.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/README.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nnode -v # should be > 20.x\n\npnpm -v # should be > 9.x\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with npm\nDESCRIPTION: This command installs the necessary dependencies for the Next.js project using npm. It should be executed in the root directory of the project.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/e2b-csv-contacts-importer/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating a new project with yarn\nDESCRIPTION: This command creates a new directory and initializes a new yarn project within it. This is useful for setting up a new AgentKit project from scratch.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/e2b.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmkdir my-agent-kit-project && yarn init\n```\n\n----------------------------------------\n\nTITLE: Start Next.js Development Server\nDESCRIPTION: This command starts the Next.js development server. It allows you to view the application in a web browser at http://localhost:3000.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/e2b-csv-contacts-importer/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Install AgentKit via yarn\nDESCRIPTION: Installs the AgentKit package using yarn. This command adds the @inngest/agent-kit package to the project's dependencies using the Yarn package manager.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/quick-start.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @inngest/agent-kit\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Setup\nDESCRIPTION: This section outlines the environment variables required for configuring the Browserbase and Anthropic API keys. These variables are stored in a `.env` file and accessed by the application.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/reddit-search-browserbase-tools/README.md#_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nBROWSERBASE_API_KEY=your_browserbase_api_key\nBROWSERBASE_PROJECT_ID=your_browserbase_project_id\nANTHROPIC_API_KEY=your_anthropic_api_key\n```\n\n----------------------------------------\n\nTITLE: Initialize NPM Project with Bash\nDESCRIPTION: This bash command initializes a new npm project in the current directory, creating a `package.json` file with default settings.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-workflows.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Install AgentKit with Yarn\nDESCRIPTION: This bash command installs the `@inngest/agent-kit` package as a project dependency using Yarn.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-workflows.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @inngest/agent-kit\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Support (pnpm)\nDESCRIPTION: This snippet shows how to install tsx and @types/node as development dependencies using pnpm.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-agents.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -D tsx @types/node\n```\n\n----------------------------------------\n\nTITLE: Initializing Inngest Client Typescript\nDESCRIPTION: This snippet initializes an Inngest client using the Inngest SDK. The client is configured with a unique ID for the application.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/snippets/transform-network-into-inngest-function.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nconst inngest = new Inngest({\n  id: \"my-agentkit-network\",\n});\n```\n\n----------------------------------------\n\nTITLE: Install AgentKit with NPM\nDESCRIPTION: This bash command installs the `@inngest/agent-kit` package as a project dependency using npm.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-workflows.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @inngest/agent-kit\n```\n\n----------------------------------------\n\nTITLE: Install AgentKit via pnpm\nDESCRIPTION: Installs the AgentKit package using pnpm.  This command adds the @inngest/agent-kit package to the project's dependencies using the pnpm package manager.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/quick-start.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install @inngest/agent-kit\n```\n\n----------------------------------------\n\nTITLE: Start Inngest Development Server\nDESCRIPTION: This command starts the Inngest development server, which is required for AgentKit functionality.  It needs to be run in a separate terminal. The Inngest Dev Server UI is accessible at http://localhost:8288.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/e2b-csv-contacts-importer/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx inngest-cli@latest dev\n```\n\n----------------------------------------\n\nTITLE: Install AgentKit with PNPM\nDESCRIPTION: This bash command installs the `@inngest/agent-kit` package as a project dependency using pnpm.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-workflows.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @inngest/agent-kit\n```\n\n----------------------------------------\n\nTITLE: Initializing the Project (yarn)\nDESCRIPTION: This snippet shows how to initialize a new yarn project using the yarn init command.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-agents.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn init\n```\n\n----------------------------------------\n\nTITLE: Creating a new project directory and initializing with yarn\nDESCRIPTION: Creates a new directory named 'my-agent-kit-project' and initializes it using yarn.  This sets up the basic project structure for developing an AgentKit application.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/browserbase.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmkdir my-agent-kit-project && yarn init\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit via PNPM\nDESCRIPTION: This command installs the AgentKit npm package using the pnpm package manager. AgentKit is a dependency for building intelligent agents. It requires pnpm to be installed.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/installation.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install @inngest/agent-kit\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies (npm)\nDESCRIPTION: This command installs the necessary dependencies for the web search agent project.  It is a prerequisite before running the agent.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/simple-search-stagehand/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Support (yarn)\nDESCRIPTION: This snippet shows how to install tsx and @types/node as development dependencies using yarn.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-agents.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D tsx @types/node\n```\n\n----------------------------------------\n\nTITLE: Initializing project with yarn\nDESCRIPTION: This command initializes a new Yarn project. It creates a `package.json` file used for managing dependencies and scripts. This is essential before adding project dependencies.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn init\n```\n\n----------------------------------------\n\nTITLE: Adding start script to package.json\nDESCRIPTION: This snippet adds a `start` script to the `package.json` file. This script uses `tsx` to execute the `index.ts` file.  This allows the application to be started with the command `npm start` or `yarn start`.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"start\": \"tsx ./index.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new project directory with npm\nDESCRIPTION: These commands create a new directory and initializes it using npm.  This is a prerequisite for starting a new AgentKit project.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/integrations/smithery.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmkdir my-agent-kit-project && npm init\n```\n\n----------------------------------------\n\nTITLE: Set Anthropic API key environment variable\nDESCRIPTION: Sets the Anthropic API key as an environment variable. This is required to authenticate with the Anthropic API and use the Claude model.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/quick-start.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nexport ANTHROPIC_API_KEY=sk-ant-api03-XXXXXX....\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies (pnpm)\nDESCRIPTION: This snippet demonstrates installing @inngest/agent-kit and zod dependencies using pnpm.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-agents.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @inngest/agent-kit zod\n```\n\n----------------------------------------\n\nTITLE: Initialize a new pnpm project\nDESCRIPTION: Creates a new directory and initializes a new pnpm project within it.  The `pnpm init` command generates a `package.json` file, prompting for project details, specifically optimized for pnpm's package management approach.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/quick-start.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmkdir my-agent-kit-project && pnpm init\n```\n\n----------------------------------------\n\nTITLE: Start Inngest Dev Server\nDESCRIPTION: This command starts the Inngest development server, used for local testing and development of Inngest functions. The server will start at http://127.0.0.1:8288/.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/reddit-search-browserbase-tools/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx inngest-cli@latest dev\n```\n\n----------------------------------------\n\nTITLE: Running Code Assistant v2 with Yarn\nDESCRIPTION: This snippet demonstrates how to run the Code Assistant v2 example using Yarn. It sets the ANTHROPIC_API_KEY environment variable and then executes the `yarn run start` command.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nANTHROPIC_API_KEY=<your-api-key> yarn run start\n```\n\n----------------------------------------\n\nTITLE: Installing AgentKit via NPM\nDESCRIPTION: This command installs the AgentKit npm package using the npm package manager. AgentKit is a dependency for building intelligent agents. It requires npm to be installed.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/installation.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @inngest/agent-kit\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies with yarn\nDESCRIPTION: This command installs the `@inngest/agent-kit` and `zod` packages using Yarn. `@inngest/agent-kit` facilitates building agents, and `zod` is a schema validation library, both fundamental for creating the code assistant.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @inngest/agent-kit zod\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Mintlify\nDESCRIPTION: These commands install Mintlify globally and then start the local development server. This allows for previewing the documentation site during development. It requires npm to be installed.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: This snippet demonstrates installing @inngest/agent-kit and zod dependencies using npm.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-agents.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @inngest/agent-kit zod\n```\n\n----------------------------------------\n\nTITLE: Initializing the Project (pnpm)\nDESCRIPTION: This snippet shows how to initialize a new pnpm project using the pnpm init command.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-agents.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm init\n```\n\n----------------------------------------\n\nTITLE: Check Node and pnpm versions\nDESCRIPTION: This code snippet shows how to check the node and pnpm versions installed in the system.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/packages/agent-kit/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnode -v # should be > 20.x\n```\n\nLANGUAGE: typescript\nCODE:\n```\npnpm -v # should be > 9.x\n```\n\n----------------------------------------\n\nTITLE: Running Code Assistant v2 with PNPM\nDESCRIPTION: This snippet demonstrates how to run the Code Assistant v2 example using PNPM. It sets the ANTHROPIC_API_KEY environment variable and then executes the `pnpm run start` command.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nANTHROPIC_API_KEY=<your-api-key> pnpm run start\n```\n\n----------------------------------------\n\nTITLE: Initializing project with npm\nDESCRIPTION: This command initializes a new npm project. It creates a `package.json` file that will be used to manage dependencies and scripts for the project. This is a prerequisite for installing the required dependencies.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/agentic-workflows.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Initialize Yarn Project with Bash\nDESCRIPTION: This bash command initializes a new Yarn project in the current directory, creating a `package.json` file with default settings.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/guided-tour/ai-workflows.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn init\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies using PNPM (TSX)\nDESCRIPTION: This command shows how to install the project's dependencies using the PNPM package manager.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/README.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Initialize a new yarn project\nDESCRIPTION: Creates a new directory and initializes a new yarn project within it.  The `yarn init` command generates a `package.json` file, prompting for project details, specifically optimized for Yarn's package management approach.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/docs/getting-started/quick-start.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmkdir my-agent-kit-project && yarn init\n```\n\n----------------------------------------\n\nTITLE: Navigate to the example directory\nDESCRIPTION: This command changes the current directory to the support-agent-human-in-the-loop example directory within the repository.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/examples/support-agent-human-in-the-loop/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/support-agent-human-in-the-loop\n```\n\n----------------------------------------\n\nTITLE: Build Package and Run Tests with pnpm\nDESCRIPTION: These commands use pnpm to build the Inngest agent-kit package and run its tests, ensuring the code is properly compiled and functional.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/packages/agent-kit/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\npnpm build\n```\n\nLANGUAGE: typescript\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Build and Test using PNPM (TSX)\nDESCRIPTION: These commands show how to build the package and run the tests using the PNPM package manager. `pnpm build` compiles the project, and `pnpm test` executes the test suite.\nSOURCE: https://github.com/inngest/agent-kit/blob/main/README.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\npnpm build\n\npnpm test\n```"
  }
]