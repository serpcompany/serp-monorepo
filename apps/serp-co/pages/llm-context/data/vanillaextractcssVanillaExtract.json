[
  {
    "owner": "vanilla-extract-css",
    "repo": "vanilla-extract",
    "content": "TITLE: Composing Base Styles with Style Variations in vanilla-extract\nDESCRIPTION: Demonstrates creating a base style and composing it with additional properties to create primary and secondary style variants. This pattern enables code reuse while maintaining unique styling.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/style-composition.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\n\nimport { style } from '@vanilla-extract/css';\n\nconst base = style({ padding: 12 });\n\nconst primary = style([base, { background: 'blue' }]);\n\nconst secondary = style([base, { background: 'aqua' }]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sprinkles with defineProperties and createSprinkles\nDESCRIPTION: Example configuration of a sprinkles.css.ts file that defines responsive properties, color properties, and creates a sprinkles function. This setup includes space scales, responsive breakpoints, and color palettes with light/dark mode support.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// sprinkles.css.ts\nimport {\n  defineProperties,\n  createSprinkles\n} from '@vanilla-extract/sprinkles';\n\nconst space = {\n  none: 0,\n  small: '4px',\n  medium: '8px',\n  large: '16px'\n  // etc.\n};\n\nconst responsiveProperties = defineProperties({\n  conditions: {\n    mobile: {},\n    tablet: { '@media': 'screen and (min-width: 768px)' },\n    desktop: { '@media': 'screen and (min-width: 1024px)' }\n  },\n  defaultCondition: 'mobile',\n  properties: {\n    display: ['none', 'flex', 'block', 'inline'],\n    flexDirection: ['row', 'column'],\n    justifyContent: [\n      'stretch',\n      'flex-start',\n      'center',\n      'flex-end',\n      'space-around',\n      'space-between'\n    ],\n    alignItems: [\n      'stretch',\n      'flex-start',\n      'center',\n      'flex-end'\n    ],\n    paddingTop: space,\n    paddingBottom: space,\n    paddingLeft: space,\n    paddingRight: space\n    // etc.\n  },\n  shorthands: {\n    padding: [\n      'paddingTop',\n      'paddingBottom',\n      'paddingLeft',\n      'paddingRight'\n    ],\n    paddingX: ['paddingLeft', 'paddingRight'],\n    paddingY: ['paddingTop', 'paddingBottom'],\n    placeItems: ['justifyContent', 'alignItems']\n  }\n});\n\nconst colors = {\n  'blue-50': '#eff6ff',\n  'blue-100': '#dbeafe',\n  'blue-200': '#bfdbfe',\n  'gray-700': '#374151',\n  'gray-800': '#1f2937',\n  'gray-900': '#111827'\n  // etc.\n};\n\nconst colorProperties = defineProperties({\n  conditions: {\n    lightMode: {},\n    darkMode: { '@media': '(prefers-color-scheme: dark)' }\n  },\n  defaultCondition: 'lightMode',\n  properties: {\n    color: colors,\n    background: colors\n    // etc.\n  }\n});\n\nexport const sprinkles = createSprinkles(\n  responsiveProperties,\n  colorProperties\n);\n\n// It's a good idea to export the Sprinkles type too\nexport type Sprinkles = Parameters<typeof sprinkles>[0];\n```\n\n----------------------------------------\n\nTITLE: Basic Style Usage in Vanilla Extract CSS\nDESCRIPTION: Demonstrates basic usage of the style function to create a flex container class and its consumption in application code.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/style.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\n\nimport { style } from '@vanilla-extract/css';\n\nexport const flexContainer = style({\n  display: 'flex'\n});\n\n// app.ts\nimport { flexContainer } from './styles.css.ts';\n\ndocument.write(`\n  <main class=\"${flexContainer}\">\n    ...\n  </main>\n`);\n```\n\n----------------------------------------\n\nTITLE: Applying Vanilla Extract CSS Styles to HTML Elements\nDESCRIPTION: Example showing how to import and apply Vanilla Extract CSS styles to HTML elements. This demonstrates the complete workflow from defining styles to using them in a component.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/getting-started.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// app.ts\nimport { container } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${container}\">\n    ...\n  </section>\n`);\n\n// styles.css.ts\nimport { style } from '@vanilla-extract/css';\n\nexport const container = style({\n  padding: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Theme and Styles with vanilla-extract in TypeScript\nDESCRIPTION: Demonstrates creating a theme with custom color and font variables, and defining a styled component using those theme variables. The code showcases the createTheme and style functions from vanilla-extract.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\n\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const exampleStyle = style({\n  backgroundColor: vars.color.brand,\n  fontFamily: vars.font.body,\n  color: 'white',\n  padding: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Sprinkles Configuration in TypeScript\nDESCRIPTION: Complete setup example showing how to configure responsive properties, colors, and create a sprinkles function.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// sprinkles.css.ts\nimport { defineProperties, createSprinkles } from '@vanilla-extract/sprinkles';\n\nconst space = {\n  'none': 0,\n  'small': '4px',\n  'medium': '8px',\n  'large': '16px',\n  // etc.\n};\n\nconst responsiveProperties = defineProperties({\n  conditions: {\n    mobile: {},\n    tablet: { '@media': 'screen and (min-width: 768px)' },\n    desktop: { '@media': 'screen and (min-width: 1024px)' }\n  },\n  defaultCondition: 'mobile',\n  properties: {\n    display: ['none', 'flex', 'block', 'inline'],\n    flexDirection: ['row', 'column'],\n    justifyContent: ['stretch', 'flex-start', 'center', 'flex-end', 'space-around', 'space-between'],\n    alignItems: ['stretch', 'flex-start', 'center', 'flex-end'],\n    paddingTop: space,\n    paddingBottom: space,\n    paddingLeft: space,\n    paddingRight: space,\n    // etc.\n  },\n  shorthands: {\n    padding: ['paddingTop', 'paddingBottom', 'paddingLeft', 'paddingRight'],\n    paddingX: ['paddingLeft', 'paddingRight'],\n    paddingY: ['paddingTop', 'paddingBottom'],\n    placeItems: ['justifyContent', 'alignItems'],\n  }\n});\n\nconst colors = {\n  'blue-50': '#eff6ff',\n  'blue-100': '#dbeafe',\n  'blue-200': '#bfdbfe',\n  'gray-700': '#374151',\n  'gray-800': '#1f2937',\n  'gray-900': '#111827',\n  // etc.\n};\n\nconst colorProperties = defineProperties({\n  conditions: {\n    lightMode: {},\n    darkMode: { '@media': '(prefers-color-scheme: dark)' }\n  },\n  defaultCondition: 'lightMode',\n  properties: {\n    color: colors,\n    background: colors,\n    // etc.\n  }\n});\n\nexport const sprinkles = createSprinkles(responsiveProperties, colorProperties);\n\n// It's a good idea to export the Sprinkles type too\nexport type Sprinkles = Parameters<typeof sprinkles>[0];\n```\n\n----------------------------------------\n\nTITLE: Creating and Implementing a Theme Contract in Vanilla Extract CSS\nDESCRIPTION: This example demonstrates how to create a theme contract with createThemeContract, implement multiple themes with createTheme, and use the theme variables in styles. It shows how to define a contract with color and font variables, create two themes (themeA and themeB) implementing those variables, and use them in a style definition.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/create-theme-contract.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// themes.css.ts\nimport {\n  createThemeContract,\n  createTheme,\n  style\n} from '@vanilla-extract/css';\n\nexport const vars = createThemeContract({\n  color: {\n    brand: null\n  },\n  font: {\n    body: null\n  }\n});\n\nexport const themeA = createTheme(vars, {\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const themeB = createTheme(vars, {\n  color: {\n    brand: 'pink'\n  },\n  font: {\n    body: 'comic sans ms'\n  }\n});\n\nexport const brandText = style({\n  color: vars.color.brand,\n  fontFamily: vars.font.body\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Type-Safe Sprinkles Function in TypeScript\nDESCRIPTION: Uses createSprinkles to generate a type-safe function that combines multiple property definitions, enabling access to all defined properties.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  defineProperties,\n  createSprinkles\n} from '@vanilla-extract/sprinkles';\n\nconst responsiveProperties = defineProperties({\n  /* ... */\n});\nconst unconditionalProperties = defineProperties({\n  /* ... */\n});\nconst colorProperties = defineProperties({\n  /* ... */\n});\n\nexport const sprinkles = createSprinkles(\n  responsiveProperties,\n  unconditionalProperties,\n  colorProperties\n);\n```\n\n----------------------------------------\n\nTITLE: Advanced Style Properties in Vanilla Extract CSS\nDESCRIPTION: Shows advanced usage of the style function including CSS variables, pseudo-selectors, media queries, and feature queries.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/style.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\n\nimport { style, createVar } from '@vanilla-extract/css';\n\nconst scopedVar = createVar();\n\nexport const className = style({\n  display: 'flex',\n  vars: {\n    [scopedVar]: 'green',\n    '--global-variable': 'purple'\n  },\n  ':hover': {\n    color: 'red'\n  },\n  selectors: {\n    '&:nth-child(2n)': {\n      background: '#fafafa'\n    }\n  },\n  '@media': {\n    'screen and (min-width: 768px)': {\n      padding: 10\n    }\n  },\n  '@supports': {\n    '(display: grid)': {\n      display: 'grid'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme Contract for Code Splitting\nDESCRIPTION: This example demonstrates how to create a standalone theme contract using createThemeContract without generating any CSS. This enables better code splitting of themes.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/theming.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// contract.css.ts\nimport { createThemeContract } from '@vanilla-extract/css';\n\nexport const vars = createThemeContract({\n  color: {\n    brand: ''\n  },\n  font: {\n    body: ''\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Theme with createTheme in TypeScript\nDESCRIPTION: Demonstrates how to create a basic theme using createTheme. It defines color and font variables, and shows how to use them in a style.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/create-theme.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const brandText = style({\n  color: vars.color.brand,\n  fontFamily: vars.font.body\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Stylesheet with Vanilla Extract CSS\nDESCRIPTION: Example of creating a stylesheet using Vanilla Extract CSS. This demonstrates how to define a style with the style function and export the generated class name for use in components.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/getting-started.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\nimport { style } from '@vanilla-extract/css';\n\nexport const container = style({\n  padding: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Theme Variants with createTheme in TypeScript\nDESCRIPTION: Shows how to create theme variants by passing a theme contract as the first argument to createTheme. It creates two themes (themeA and themeB) with different values for the same variables.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/create-theme.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTheme, style } from '@vanilla-extract/css';\n\nexport const [themeA, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const themeB = createTheme(vars, {\n  color: {\n    brand: 'pink'\n  },\n  font: {\n    body: 'comic sans ms'\n  }\n});\n\nexport const brandText = style({\n  color: vars.color.brand,\n  fontFamily: vars.font.body\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Theme in Vanilla Extract CSS\nDESCRIPTION: This example demonstrates how to create a basic theme using createTheme, which generates both a theme class and a variables contract. The theme defines color and font properties.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/theming.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// theme.css.ts\n\nimport { createTheme } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Responsive Conditions with Media Queries in TypeScript\nDESCRIPTION: Creates responsive conditions for different device sizes using media queries in the sprinkles API, with a default condition for mobile.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineProperties } from '@vanilla-extract/sprinkles';\n\nconst responsiveProperties = defineProperties({\n  conditions: {\n    mobile: {},\n    tablet: { '@media': 'screen and (min-width: 768px)' },\n    desktop: { '@media': 'screen and (min-width: 1024px)' }\n  },\n  defaultCondition: 'mobile'\n  // etc.\n});\n```\n\n----------------------------------------\n\nTITLE: Using Sprinkles in CSS Modules at Build Time\nDESCRIPTION: Example of zero-runtime usage of sprinkles in a .css.ts file, demonstrating how to create conditional responsive styles and theme-based color variations.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\nimport { sprinkles } from './sprinkles.css.ts';\n\nexport const container = sprinkles({\n  display: 'flex',\n  paddingX: 'small',\n\n  // Conditional sprinkles:\n  flexDirection: {\n    mobile: 'column',\n    desktop: 'row'\n  },\n  background: {\n    lightMode: 'blue-50',\n    darkMode: 'gray-700'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Combined Sprinkles Function\nDESCRIPTION: Shows how to combine multiple property definitions into a single sprinkles function using createSprinkles.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  defineProperties,\n  createSprinkles\n} from '@vanilla-extract/sprinkles';\n\nconst responsiveProperties = defineProperties({\n  /* ... */\n});\nconst unconditionalProperties = defineProperties({\n  /* ... */\n});\nconst colorProperties = defineProperties({\n  /* ... */\n});\n\nexport const sprinkles = createSprinkles(\n  responsiveProperties,\n  unconditionalProperties,\n  colorProperties\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Theme with assignVars in TypeScript\nDESCRIPTION: Demonstrates how to create a responsive theme using assignVars within media queries. Creates a theme contract with space variables and applies different values based on screen width.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/assign-vars.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createThemeContract,\n  style,\n  assignVars\n} from '@vanilla-extract/css';\n\nexport const vars = createThemeContract({\n  space: {\n    small: null,\n    large: null\n  }\n});\n\nexport const responsiveTheme = style({\n  vars: assignVars(vars, {\n    space: {\n      small: '4px',\n      large: '16px'\n    }\n  }),\n  '@media': {\n    'screen and (min-width: 1024px)': {\n      vars: assignVars(vars, {\n        space: {\n          small: '8px',\n          large: '32px'\n        }\n      })\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Composing Styles in Variants with Vanilla Extract CSS\nDESCRIPTION: Demonstrates how to compose styles by providing arrays of styles to styleVariants. This pattern allows for defining a base style that is shared across variants while adding variant-specific styles.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/style-variants.md#2025-04-20_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// styles.css.ts\nimport { style, styleVariants } from '@vanilla-extract/css';\n\nconst base = style({ padding: 12 });\n\nexport const variant = styleVariants({\n  primary: [base, { background: 'blue' }],\n  secondary: [base, { background: 'aqua' }]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Global Theme Contract in TypeScript\nDESCRIPTION: Creates a global theme contract with color and font variables, applies them using createGlobalTheme, and uses them in a style. This demonstrates the basic workflow of defining, implementing, and consuming theme variables.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/create-global-theme-contract.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// themes.css.ts\nimport {\n  createGlobalThemeContract,\n  createGlobalTheme,\n  style\n} from '@vanilla-extract/css';\n\nexport const vars = createGlobalThemeContract({\n  color: {\n    brand: 'color-brand'\n  },\n  font: {\n    body: 'font-body'\n  }\n});\n\ncreateGlobalTheme(':root', vars, {\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const brandText = style({\n  color: vars.color.brand,\n  fontFamily: vars.font.body\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Themes with the Same Contract\nDESCRIPTION: This example shows how to create an alternative theme based on an existing theme contract. The second theme uses the same variable structure but assigns different values to the CSS variables.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/theming.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// theme.css.ts\n\nimport { createTheme } from '@vanilla-extract/css';\n\nexport const [themeClass, vars] = createTheme({\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\nexport const otherThemeClass = createTheme(vars, {\n  color: {\n    brand: 'red'\n  },\n  font: {\n    body: 'helvetica'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple Independent Styles with Global Selectors\nDESCRIPTION: Shows how multiple independent styles can be composed together and used with global selectors. When multiple existing classes are composed, vanilla-extract creates a new identifier to ensure they can be treated as a single class.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/style-composition.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\n\nimport { style, globalStyle } from '@vanilla-extract/css';\n\nconst background = style({ background: 'mintcream' });\nconst padding = style({ padding: 12 });\n\n// container = 'styles_container__8uideo2'\nexport const container = style([background, padding]);\n\nglobalStyle(`${container} *`, {\n  boxSizing: 'border-box'\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Selectors Usage\nDESCRIPTION: Shows implementation of complex CSS selectors using the selectors key and & reference.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/styling.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { style } from '@vanilla-extract/css';\n\nconst link = style({\n  selectors: {\n    '&:hover:not(:active)': {\n      border: '2px solid aquamarine'\n    },\n    'nav li > &': {\n      textDecoration: 'underline'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic CSS Layers with Vanilla Extract\nDESCRIPTION: Creates scoped CSS layers with unique names to avoid naming collisions. This example defines three distinct layers - reset, framework, and app - which can be used to control the cascade order of styles.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/layer.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// layers.css.ts\nimport { layer } from '@vanilla-extract/css';\n\nexport const reset = layer('reset');\nexport const framework = layer('framework');\nexport const app = layer('app');\n```\n\n----------------------------------------\n\nTITLE: Creating a Recipe with Sprinkles Integration\nDESCRIPTION: Example showing how to create a recipe that uses existing variables, classes, and sprinkles for consistent styling across a design system.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/recipes.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// button.css.ts\nimport { recipe } from '@vanilla-extract/recipes';\nimport { reset } from './reset.css.ts';\nimport { sprinkles } from './sprinkles.css.ts';\n\nexport const button = recipe({\n  base: [reset, sprinkles({ borderRadius: 'round' })],\n\n  variants: {\n    color: {\n      neutral: sprinkles({ background: 'neutral' }),\n      brand: sprinkles({ background: 'brand' }),\n      accent: sprinkles({ background: 'accent' })\n    },\n    size: {\n      small: sprinkles({ padding: 'small' }),\n      medium: sprinkles({ padding: 'medium' }),\n      large: sprinkles({ padding: 'large' })\n    }\n  },\n\n  defaultVariants: {\n    color: 'accent',\n    size: 'medium'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Property Sets with Different Conditions\nDESCRIPTION: Example of configuring different sets of properties with different conditions. This demonstrates how to scope different responsive behaviors and theme conditions to specific property groups.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// sprinkles.css.ts\nimport {\n  defineProperties,\n  createSprinkles\n} from '@vanilla-extract/sprinkles';\n\nconst space = {\n  none: 0,\n  small: '4px',\n  medium: '8px',\n  large: '16px'\n};\n\nconst colors = {\n  blue50: '#eff6ff',\n  blue100: '#dbeafe',\n  blue200: '#bfdbfe'\n  // etc.\n};\n\nconst responsiveProperties = defineProperties({\n  conditions: {\n    mobile: {},\n    tablet: { '@media': 'screen and (min-width: 768px)' },\n    desktop: { '@media': 'screen and (min-width: 1024px)' }\n  },\n  defaultCondition: 'mobile',\n  properties: {\n    display: ['none', 'block', 'flex'],\n    flexDirection: ['row', 'column'],\n    padding: space\n    // etc.\n  }\n});\n\nconst colorProperties = defineProperties({\n  conditions: {\n    lightMode: {\n      '@media': '(prefers-color-scheme: light)'\n    },\n    darkMode: { '@media': '(prefers-color-scheme: dark)' }\n  },\n  defaultCondition: false,\n  properties: {\n    color: colors,\n    background: colors\n  }\n  // etc.\n});\n\nexport const sprinkles = createSprinkles(\n  responsiveProperties,\n  colorProperties\n);\n```\n\n----------------------------------------\n\nTITLE: Animating CSS Variables with Keyframes in Vanilla Extract\nDESCRIPTION: Shows how to animate CSS custom properties (variables) using keyframes. Includes creation of CSS variables with syntax definition, fallback values, and animation application through keyframes.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/keyframes.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createVar,\n  fallbackVar,\n  keyframes,\n  style\n} from '@vanilla-extract/css';\n\nconst angle = createVar({\n  syntax: '<angle>',\n  inherits: false,\n  initialValue: '0deg'\n});\n\nconst angleKeyframes = keyframes({\n  '0%': {\n    vars: {\n      [angle]: '0deg'\n    }\n  },\n  '100%': {\n    vars: {\n      [angle]: '360deg'\n    }\n  }\n});\n\nexport const root = style({\n  backgroundImage: `linear-gradient(${angle}, rgba(153, 70, 198, 0.35) 0%, rgba(28, 56, 240, 0.46) 100%)`,\n  animation: `${angleKeyframes} 7s infinite ease-in-out both`,\n\n  vars: {\n    // This will fallback to 180deg if @property is not supported by the browser\n    [angle]: fallbackVar(angle, '180deg')\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Variant Style Recipe in TypeScript\nDESCRIPTION: Example of creating a button recipe with base styles, variants for color, size, and roundedness, compound variants for specific combinations, and default variants.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/recipes.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// button.css.ts\nimport { recipe } from '@vanilla-extract/recipes';\n\nexport const button = recipe({\n  base: {\n    borderRadius: 6\n  },\n\n  variants: {\n    color: {\n      neutral: { background: 'whitesmoke' },\n      brand: { background: 'blueviolet' },\n      accent: { background: 'slateblue' }\n    },\n    size: {\n      small: { padding: 12 },\n      medium: { padding: 16 },\n      large: { padding: 24 }\n    },\n    rounded: {\n      true: { borderRadius: 999 }\n    }\n  },\n\n  // Applied when multiple variants are set at once\n  compoundVariants: [\n    {\n      variants: {\n        color: 'neutral',\n        size: 'large'\n      },\n      style: {\n        background: 'ghostwhite'\n      }\n    }\n  ],\n\n  defaultVariants: {\n    color: 'accent',\n    size: 'medium'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Sprinkles at Runtime in DOM Components\nDESCRIPTION: Example of using sprinkles at runtime to dynamically generate class names based on JavaScript logic. While all styles are still generated at build time, the function maps dynamic values to pre-existing classes.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// app.ts\nimport { sprinkles } from './sprinkles.css.ts';\n\nconst flexDirection =\n  Math.random() > 0.5 ? 'column' : 'row';\n\ndocument.write(`\n  <section class=\"${sprinkles({\n    display: 'flex',\n    flexDirection\n  })}\">\n    ...\n  </section>\n`);\n```\n\n----------------------------------------\n\nTITLE: Using fallbackVar with Multiple Fallback Values in vanilla-extract\nDESCRIPTION: Example demonstrating how to provide multiple fallback values with fallbackVar. It shows a cascading fallback pattern where the style will try to use primaryVar, then secondaryVar, and finally fall back to a static color value if neither variable is defined.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/fallback-var.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// style.css.ts\n\nimport {\n  createVar,\n  fallbackVar,\n  style\n} from '@vanilla-extract/css';\n\nexport const primaryVar = createVar();\nexport const secondaryVar = createVar();\n\nexport const color = style({\n  color: fallbackVar(primaryVar, secondaryVar, 'blue')\n});\n```\n\n----------------------------------------\n\nTITLE: Using Vanilla-Extract Themes with Sprinkles\nDESCRIPTION: Example of using vanilla-extract themes with sprinkles to configure themed values. This demonstrates how design tokens from a theme can be used to define property values.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// sprinkles.css.ts\nimport { defineProperties } from '@vanilla-extract/sprinkles';\nimport { vars } from './vars.css.ts';\n\nconst responsiveProperties = defineProperties({\n  properties: {\n    gap: vars.space\n    // etc.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables as Property Values in Vanilla Extract CSS\nDESCRIPTION: Demonstrates importing and using CSS variables as property values in style definitions. This example applies the accent variable to the text color property.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/create-var.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// style.css.ts\n\nimport { createVar, style } from '@vanilla-extract/css';\nimport { accentVar } from './accent.css.ts';\n\nexport const accentText = style({\n  color: accentVar\n});\n\n// accent.css.ts\nimport { createVar, style } from '@vanilla-extract/css';\n\nexport const accentVar = createVar();\n\nexport const blue = style({\n  vars: {\n    [accentVar]: 'blue'\n  }\n});\n\nexport const pink = style({\n  vars: {\n    [accentVar]: 'pink'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Runtime Theming with React\nDESCRIPTION: This example shows how to implement dynamic runtime theming using assignInlineVars from @vanilla-extract/dynamic. It allows setting theme values at runtime through inline styles while maintaining type safety.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/theming.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// app.tsx\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport { container, themeVars } from './theme.css.ts';\n\ninterface ContainerProps {\n  brandColor: string;\n  fontFamily: string;\n}\nconst Container = ({\n  brandColor,\n  fontFamily\n}: ContainerProps) => (\n  <section\n    className={container}\n    style={assignInlineVars(themeVars, {\n      color: { brand: brandColor },\n      font: { body: fontFamily }\n    })}\n  >\n    ...\n  </section>\n);\n\nconst App = () => (\n  <Container brandColor=\"pink\" fontFamily=\"Arial\">\n    ...\n  </Container>\n);\n\n// theme.css.ts\nimport {\n  createThemeContract,\n  style\n} from '@vanilla-extract/css';\n\nexport const themeVars = createThemeContract({\n  color: {\n    brand: null\n  },\n  font: {\n    body: null\n  }\n});\n\nexport const container = style({\n  background: themeVars.color.brand,\n  fontFamily: themeVars.font.body\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Vanilla Extract Dynamic Package\nDESCRIPTION: Command to install the @vanilla-extract/dynamic package via npm\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/dynamic.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @vanilla-extract/dynamic\n```\n\n----------------------------------------\n\nTITLE: Consuming vanilla-extract Styles in TypeScript\nDESCRIPTION: Shows how to use the generated theme and style classes in a TypeScript application by importing them from the styles file and applying them to HTML elements.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// app.ts\n\nimport { themeClass, exampleStyle } from './styles.css.ts';\n\ndocument.write(`\n  <section class=\"${themeClass}\">\n    <h1 class=\"${exampleStyle}\">Hello world!</h1>\n  </section>\n`);\n```\n\n----------------------------------------\n\nTITLE: Using fallbackVar for Single Fallback Value in vanilla-extract\nDESCRIPTION: Example showing how to create a CSS variable and provide a fallback value using the fallbackVar function. This ensures that if the CSS variable is not defined, the style will fall back to the specified color value.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/fallback-var.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// style.css.ts\n\nimport {\n  createVar,\n  fallbackVar,\n  style\n} from '@vanilla-extract/css';\n\nexport const colorVar = createVar();\n\nexport const color = style({\n  color: fallbackVar(colorVar, 'blue')\n});\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables with Complex Style Objects in Sprinkles\nDESCRIPTION: Advanced example showing how to use CSS Variables with sprinkles for dynamic styling. This approach allows for complex style objects and interaction between multiple property values.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// sprinkles.css.ts\nimport { createVar } from '@vanilla-extract/css';\nimport { defineProperties } from '@vanilla-extract/sprinkles';\n\nconst alpha = createVar();\n\nconst responsiveProperties = defineProperties({\n  properties: {\n    background: {\n      red: {\n        vars: { [alpha]: '1' },\n        background: `rgba(255, 0, 0, ${alpha})`\n      }\n    },\n    backgroundOpacity: {\n      1: { vars: { [alpha]: '1' } },\n      0.1: { vars: { [alpha]: '0.1' } }\n    }\n    // etc.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Style Variants in Vanilla Extract CSS\nDESCRIPTION: Creates a collection of named style rules for background colors and demonstrates how to use them with React components. This example shows how to type props based on the variant names.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/style-variants.md#2025-04-20_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n// styles.css.ts\nimport { styleVariants } from '@vanilla-extract/css';\n\nexport const background = styleVariants({\n  primary: { background: 'blue' },\n  secondary: { background: 'aqua' }\n});\n\n// app.tsx\nimport { background } from './styles.css.ts';\n\ninterface SectionProps {\n  variant: keyof typeof background;\n}\n\nconst Section = ({ variant }: SectionProps) => (\n  <section className={background[variant]}>...</section>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Global Font Face with vanilla-extract\nDESCRIPTION: Demonstrates how to create a globally scoped custom font using the globalFontFace function. The example imports the necessary functions, defines a font family name, creates a global font face referencing a local font, and exports a style that uses this font.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/global-font-face.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// text.css.ts\n\nimport {\n  globalFontFace,\n  style\n} from '@vanilla-extract/css';\n\nconst comicSans = 'GlobalComicSans';\n\nglobalFontFace(comicSans, {\n  src: 'local(\"Comic Sans MS\")'\n});\n\nexport const font = style({\n  fontFamily: comicSans\n});\n```\n\n----------------------------------------\n\nTITLE: Creating styles with Vanilla Extract in Astro\nDESCRIPTION: Example of a .css.ts file that defines a button style using Vanilla Extract's style function. This demonstrates the type-safe CSS-in-TS approach.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/astro.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// button.css.ts\n\nimport { style } from '@vanilla-extract/css';\n\nexport const button = style({\n  padding: '0.5rem 1rem',\n  border: 'none',\n  borderRadius: '0.25rem',\n  color: 'white',\n  background: '#333'\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Styles to CSS Layers in Vanilla Extract\nDESCRIPTION: Shows how to assign styles to predefined layers using the `@layer` key in the style object. First imports layer definitions, then creates a style inside the 'reset' layer to control specificity and precedence.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/layer.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// reset.css.ts\nimport { style } from '@vanilla-extract/css';\nimport { reset } from './layers.css.ts';\n\nexport const noMargin = style({\n  '@layer': {\n    [reset]: {\n      margin: 0\n    }\n  }\n});\n\n// layers.css.ts\nimport { layer } from '@vanilla-extract/css';\n\nexport const reset = layer('reset');\nexport const framework = layer('framework');\nexport const typography = layer(\n  { parent: framework },\n  'typography'\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Keyframe Animation in Vanilla Extract\nDESCRIPTION: Demonstrates how to create a basic rotation animation using keyframes and apply it using style objects. Shows both explicit animation property setting and shorthand interpolation.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/keyframes.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { keyframes, style } from '@vanilla-extract/css';\n\nconst rotate = keyframes({\n  '0%': { transform: 'rotate(0deg)' },\n  '100%': { transform: 'rotate(360deg)' }\n});\n\nexport const spin = style({\n  animationName: rotate,\n  animationDuration: '3s'\n});\n\n// or interpolate as a shorthand:\nexport const spinAgain = style({\n  animation: `${rotate} 3s`\n});\n```\n\n----------------------------------------\n\nTITLE: Using ResponsiveValue Type in Application Code\nDESCRIPTION: This example shows how to use the custom ResponsiveValue type in application code. It demonstrates various ways to define responsive values, including single values, object notation, and array notation.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ResponsiveValue } from './sprinkles.css.ts';\n\ntype ResponsiveAlign = ResponsiveValue<\n  'left' | 'center' | 'right'\n>;\n\nconst a: ResponsiveAlign = 'left';\nconst b: ResponsiveAlign = {\n  mobile: 'center',\n  desktop: 'left'\n};\nconst c: ResponsiveAlign = ['center', null, 'left'];\n```\n\n----------------------------------------\n\nTITLE: Using Vanilla Extract Themes with Sprinkles in TypeScript\nDESCRIPTION: Demonstrates how to use vanilla-extract themes in combination with sprinkles to configure themed values for properties.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineProperties } from '@vanilla-extract/sprinkles';\nimport { vars } from './vars.css.ts';\n\nconst responsiveProperties = defineProperties({\n  properties: {\n    gap: vars.space\n    // etc.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Layer Merging for Optimized CSS Output in Vanilla Extract CSS\nDESCRIPTION: Demonstrates how Vanilla Extract merges styles assigned to the same layer within a file to generate the smallest possible CSS output. The order of styles in the output is determined by the layer declaration order, not the style creation order.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/global-layer.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// typography.css.ts\nimport { style, globalLayer } from '@vanilla-extract/css';\n\nconst base = globalLayer('base');\nconst theme = globalLayer('theme');\n\nconst text = style({\n  '@layer': {\n    [base]: {\n      fontSize: '1rem'\n    }\n  }\n});\nconst themedHeading = style({\n  '@layer': {\n    [theme]: {\n      color: 'rebeccapurple'\n    }\n  }\n});\nconst heading = style({\n  '@layer': {\n    [base]: {\n      fontSize: '2.4rem'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Global Keyframes Animation in vanilla-extract\nDESCRIPTION: Demonstrates how to create a globally scoped set of keyframes using the globalKeyframes function and apply them to a style using the style function. The example creates a rotation animation and applies it to a CSS class with a 3 second infinite animation.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/global-keyframes.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// animation.css.ts\n\nimport {\n  globalKeyframes,\n  style\n} from '@vanilla-extract/css';\n\nconst rotate = 'globalRotate';\n\nglobalKeyframes(rotate, {\n  '0%': { transform: 'rotate(0deg)' },\n  '100%': { transform: 'rotate(360deg)' }\n});\n\nexport const spin = style({\n  animation: `3s infinite ${rotate}`\n});\n```\n\n----------------------------------------\n\nTITLE: Using RecipeVariants Type Utility in TypeScript\nDESCRIPTION: Example demonstrating how to use the RecipeVariants utility to extract TypeScript types from a recipe for use in component props or function parameters.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/recipes.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// button.css.ts\nimport {\n  recipe,\n  RecipeVariants\n} from '@vanilla-extract/recipes';\n\nexport const button = recipe({\n  variants: {\n    color: {\n      neutral: { background: 'whitesmoke' },\n      brand: { background: 'blueviolet' },\n      accent: { background: 'slateblue' }\n    },\n    size: {\n      small: { padding: 12 },\n      medium: { padding: 16 },\n      large: { padding: 24 }\n    }\n  }\n});\n\n// Get the type\nexport type ButtonVariants = RecipeVariants<typeof button>;\n\n// the above will result in a type equivalent to:\nexport type ButtonVariants = {\n  color?: 'neutral' | 'brand' | 'accent';\n  size?: 'small' | 'medium' | 'large';\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Semantic Value Mappings with Sprinkles in TypeScript\nDESCRIPTION: Creates a sprinkles definition with semantic value mappings like spacing scales. This approach uses an object to map semantic names to CSS values.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineProperties } from '@vanilla-extract/sprinkles';\n\nconst responsiveProperties = defineProperties({\n  properties: {\n    gap: {\n      none: 0,\n      small: 4,\n      medium: 8,\n      large: 16\n    }\n    // etc.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Style Objects with CSS Variables in TypeScript\nDESCRIPTION: Uses sprinkles to define more complex style objects with CSS variables. This example creates styles for background color with variable opacity.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createVar } from '@vanilla-extract/css';\nimport { defineProperties } from '@vanilla-extract/sprinkles';\n\nconst alpha = createVar();\n\nconst responsiveProperties = defineProperties({\n  properties: {\n    background: {\n      red: {\n        vars: { [alpha]: '1' },\n        background: `rgba(255, 0, 0, ${alpha})`\n      }\n    },\n    backgroundOpacity: {\n      1: { vars: { [alpha]: '1' } },\n      0.1: { vars: { [alpha]: '0.1' } }\n    }\n    // etc.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using setElementVars with Theme Contracts\nDESCRIPTION: Example demonstrating how to use setElementVars with theme contracts for dynamic theming on DOM elements\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/dynamic.md#2025-04-20_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// app.ts\n\nimport { setElementVars } from '@vanilla-extract/dynamic';\nimport { themeVars } from './theme.css.ts';\n\nconst el = document.getElementById('myElement');\n\nsetElementVars(el, themeVars, {\n  color: { brand: 'pink' },\n  font: { body: 'Arial' }\n});\n\n// theme.css.ts\nimport { createThemeContract } from '@vanilla-extract/css';\n\nexport const themeVars = createThemeContract({\n  color: {\n    brand: null\n  },\n  font: {\n    body: null\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Style Merging with Responsive Utilities in Vanilla Extract CSS\nDESCRIPTION: Shows how to merge multiple style objects with responsive utilities and handle style precedence.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/style.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\nimport { style } from '@vanilla-extract/css';\n\nconst responsiveStyle = ({ tablet, desktop }) => ({\n  '@media': {\n    'screen and (min-width: 768px)': tablet,\n    'screen and (min-width: 1024px)': desktop\n  }\n});\n\nconst container = style([\n  {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  responsiveStyle({\n    tablet: { flex: 1, content: 'I will be overridden' },\n    desktop: { flexDirection: 'row' }\n  }),\n  {\n    '@media': {\n      'screen and (min-width: 768px)': {\n        content: 'I win!'\n      }\n    }\n  }\n]);\n```\n\n----------------------------------------\n\nTITLE: Assigning CSS Variables as Inline Styles in React Components\nDESCRIPTION: Example of using assignInlineVars to apply CSS variables as inline styles on a React component. This allows dynamic styling at runtime by setting variable values directly on elements.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/dynamic/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport { container, brandColor, textColor } from './styles.css.ts';\n\n// If `tone` is `undefined`, the following inline style becomes:\n// { '--brandColor__8uideo0': 'pink' }\n\nconst MyComponent = ({ tone }: { tone?: critical }) => (\n  <section\n    className={container}\n    style={assignInlineVars({\n      [brandColor]: 'pink',\n      [textColor]: tone === 'critical' ? 'red' : null,\n    })}\n  >\n    ...\n  </section>\n);\n```\n\n----------------------------------------\n\nTITLE: Using CSS Layers with Global Themes in Vanilla Extract CSS\nDESCRIPTION: Demonstrates how to assign a global theme to a CSS layer using the @layer key in the theme definition. This feature requires browser support for CSS cascade layers.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/create-global-theme.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// theme.css.ts\nimport {\n  createGlobalTheme,\n  layer\n} from '@vanilla-extract/css';\n\nexport const themeLayer = layer();\n\nexport const vars = createGlobalTheme(':root', {\n  '@layer': themeLayer,\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Partial Theme Contract with assignVars in TypeScript\nDESCRIPTION: Shows how to implement a theme contract with multiple properties (color and space) while applying responsive styles to only the space properties. Demonstrates the flexibility of assignVars with partial theme contracts.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/assign-vars.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createThemeContract,\n  style,\n  assignVars\n} from '@vanilla-extract/css';\n\nexport const vars = createThemeContract({\n  color: {\n    brand: null,\n    accent: null\n  },\n  space: {\n    small: null,\n    large: null\n  }\n});\n\nexport const responsiveTheme = style({\n  vars: assignVars(vars, {\n    color: {\n      brand: 'pink',\n      accent: 'aquamarine'\n    },\n    space: {\n      small: '4px',\n      large: '16px'\n    }\n  }),\n  '@media': {\n    'screen and (min-width: 1024px)': {\n      vars: assignVars(vars.space, {\n        small: '8px',\n        large: '32px'\n      })\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using assignInlineVars with React Component\nDESCRIPTION: Example showing how to dynamically assign CSS variables in a React component using assignInlineVars. Demonstrates handling of conditional values and null states.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/dynamic.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// app.tsx\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport {\n  container,\n  brandColor,\n  textColor\n} from './styles.css.ts';\n\n// If `tone` is `undefined`, the following inline style becomes:\n// { '--brandColor__8uideo0': 'pink' }\n\nconst MyComponent = ({ tone }: { tone?: critical }) => (\n  <section\n    className={container}\n    style={assignInlineVars({\n      [brandColor]: 'pink',\n      [textColor]: tone === 'critical' ? 'red' : null\n    })}\n  >\n    ...\n  </section>\n);\n\n// styles.css.ts\nimport { createVar, style } from '@vanilla-extract/css';\n\nexport const brandColor = createVar();\nexport const textColor = createVar();\n\nexport const container = style({\n  background: brandColor,\n  color: textColor\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Global CSS Variable Creation with vanilla-extract\nDESCRIPTION: Creates a global CSS variable for opacity and applies it to a style. Shows basic usage of createGlobalVar function.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/create-global-var.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createGlobalVar,\n  style\n} from '@vanilla-extract/css';\n\nconst opacityVar = createGlobalVar('opacity');\n\nexport const content = style({\n  opacity: opacityVar\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Sprinkles Composition in TypeScript\nDESCRIPTION: Demonstrates runtime composition of sprinkles classes based on dynamic conditions.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// app.ts\n\nimport { sprinkles } from './sprinkles.css.ts';\n\nconst flexDirection = Math.random() > 0.5 ? 'column' : 'row';\n\ndocument.write(`\n  <section class=\"${sprinkles({ display: 'flex', flexDirection })}\">\n    ...\n  </section>\n`);\n```\n\n----------------------------------------\n\nTITLE: Static Sprinkles Composition in TypeScript\nDESCRIPTION: Example of composing sprinkles statically at build time with responsive and theme-based styles.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\n\nexport const className = sprinkles({\n  display: 'flex',\n  paddingX: 'small',\n  flexDirection: {\n    mobile: 'column',\n    desktop: 'row'\n  },\n  background: {\n    lightMode: 'blue-50',\n    darkMode: 'gray-700'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Theme Variables in Vanilla Extract with Calculated Values\nDESCRIPTION: Shows how to define theme variables in Vanilla Extract with calculated values. This example demonstrates creating a global theme with a base brand color and a pre-calculated lighter variant using the Polished library.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/docs/treat-migration-guide.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// vars.css.ts\n\nimport { createGlobalTheme } from '@vanilla-extract/css';\nimport { lighten } from 'polished';\n\nconst brandColor = 'blue';\n\nexport const vars = createGlobalTheme(':root', {\n  color: {\n    brand: brandColor,\n    brandLight: lighten(0.2, brandColor)\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Global Theme in Vanilla Extract CSS\nDESCRIPTION: Demonstrates how to create a global theme using createGlobalTheme function. The theme is attached to the :root selector and defines color and font variables.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/create-global-theme.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// theme.css.ts\nimport { createGlobalTheme } from '@vanilla-extract/css';\n\nexport const vars = createGlobalTheme(':root', {\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using View Transitions in Vanilla Extract CSS\nDESCRIPTION: This example demonstrates how to create a scoped view transition name with createViewTransition() and apply it to styles across multiple files. The created transition name helps connect UI elements that should be animated together during page transitions.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/create-view-transition.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// itemPage.css.ts\nimport {\n  style,\n  createViewTransition\n} from '@vanilla-extract/css';\n\nexport const titleViewTransition = createViewTransition();\n\nexport const pageTitle = style({\n  viewTransitionName: titleViewTransition\n});\n\n// navigation.css.ts\nimport { style } from '@vanilla-extract/css';\nimport { titleViewTransition } from './itemPage.css.ts';\n\nexport const navigationLinkTitle = style({\n  viewTransitionName: titleViewTransition\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Font Face with Vanilla Extract CSS\nDESCRIPTION: This snippet demonstrates how to create a locally scoped font-family using the fontFace function from Vanilla Extract CSS. It defines a single font face for 'Comic Sans MS' and applies it to a style.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/font-face.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fontFace, style } from '@vanilla-extract/css';\n\nconst comicSans = fontFace({\n  src: 'local(\"Comic Sans MS\")'\n});\n\nexport const font = style({\n  fontFamily: comicSans\n});\n```\n\n----------------------------------------\n\nTITLE: Using setElementVars for Imperative Updates\nDESCRIPTION: Example showing how to use setElementVars for imperative updates to CSS variables on DOM elements\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/dynamic.md#2025-04-20_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// app.ts\n\nimport { setElementVars } from '@vanilla-extract/dynamic';\nimport { brandColor, textColor } from './styles.css.ts';\n\nconst el = document.getElementById('myElement');\n\nsetElementVars(el, {\n  [brandColor]: 'pink',\n  [textColor]: null\n});\n\n// styles.css.ts\nimport { createVar, style } from '@vanilla-extract/css';\n\nexport const brandColor = createVar();\nexport const textColor = createVar();\n```\n\n----------------------------------------\n\nTITLE: Creating Code-Splittable Themes with a Theme Contract\nDESCRIPTION: This example demonstrates implementing multiple themes using a shared theme contract. Each theme file only includes its own CSS, allowing for proper code splitting of theme styles.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/theming.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// blueTheme.css.ts\nimport { createTheme } from '@vanilla-extract/css';\nimport { vars } from './contract.css.ts';\n\nexport const blueThemeClass = createTheme(vars, {\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n\n// redTheme.css.ts\nimport { createTheme } from '@vanilla-extract/css';\nimport { vars } from './contract.css.ts';\n\nexport const redThemeClass = createTheme(vars, {\n  color: {\n    brand: 'red'\n  },\n  font: {\n    body: 'helvetica'\n  }\n});\n\n// contract.css.ts\nimport { createThemeContract } from '@vanilla-extract/css';\n\nexport const vars = createThemeContract({\n  color: {\n    brand: ''\n  },\n  font: {\n    body: ''\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Nesting CSS Layers for Organization in Vanilla Extract\nDESCRIPTION: Demonstrates how to create nested layers by providing a parent layer reference in the options object. This generates the CSS shorthand syntax `parent.child` while making the relationship between layers explicit in code.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/layer.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// layers.css.ts\n\nimport { layer } from '@vanilla-extract/css';\n\nexport const reset = layer('reset');\nexport const framework = layer('framework');\nexport const typography = layer(\n  { parent: framework },\n  'typography'\n);\n```\n\n----------------------------------------\n\nTITLE: Style Composition in Vanilla Extract CSS\nDESCRIPTION: Demonstrates style composition by combining multiple styles into a single class name.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/style.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\nimport { style } from '@vanilla-extract/css';\n\nconst base = style({ padding: 12 });\n\nconst primary = style([base, { background: 'blue' }]);\n```\n\n----------------------------------------\n\nTITLE: Defining Shorthand Properties for Property Groups\nDESCRIPTION: Example of mapping custom shorthand properties to multiple underlying CSS properties. This demonstrates how to create convenience shorthands like padding/paddingX/paddingY that map to their longhand values.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// sprinkles.css.ts\nimport { defineProperties } from '@vanilla-extract/sprinkles';\nimport { vars } from './vars.css.ts';\n\nconst responsiveProperties = defineProperties({\n  properties: {\n    paddingTop: vars.space,\n    paddingBottom: vars.space,\n    paddingLeft: vars.space,\n    paddingRight: vars.space\n  },\n  shorthands: {\n    padding: [\n      'paddingTop',\n      'paddingBottom',\n      'paddingLeft',\n      'paddingRight'\n    ],\n    paddingX: ['paddingLeft', 'paddingRight'],\n    paddingY: ['paddingTop', 'paddingBottom']\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting CSS Variables in Style Objects with Vanilla Extract CSS\nDESCRIPTION: Demonstrates setting CSS variable values using the \"vars\" key in style objects. Creates two different styles that set the same variable to different values.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/create-var.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// accent.css.ts\n\nimport { createVar, style } from '@vanilla-extract/css';\n\nexport const accentVar = createVar();\n\nexport const blue = style({\n  vars: {\n    [accentVar]: 'blue'\n  }\n});\n\nexport const pink = style({\n  vars: {\n    [accentVar]: 'pink'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Selector-based Conditions in Sprinkles\nDESCRIPTION: Shows how to create conditions based on CSS selectors for handling states like hover and focus.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineProperties } from '@vanilla-extract/sprinkles';\n\nconst properties = defineProperties({\n  conditions: {\n    default: {},\n    hover: { selector: '&:hover' },\n    focus: { selector: '&:focus' }\n  },\n  defaultCondition: 'default'\n  // etc.\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Shorthand Properties with Sprinkles in TypeScript\nDESCRIPTION: Defines shorthand properties that map to multiple underlying CSS properties, such as padding shortcuts for various directions.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineProperties } from '@vanilla-extract/sprinkles';\nimport { vars } from './vars.css.ts';\n\nconst responsiveProperties = defineProperties({\n  properties: {\n    paddingTop: vars.space,\n    paddingBottom: vars.space,\n    paddingLeft: vars.space,\n    paddingRight: vars.space\n  },\n  shorthands: {\n    padding: [\n      'paddingTop',\n      'paddingBottom',\n      'paddingLeft',\n      'paddingRight'\n    ],\n    paddingX: ['paddingLeft', 'paddingRight'],\n    paddingY: ['paddingTop', 'paddingBottom']\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Styles to Named Layers in Vanilla Extract CSS\nDESCRIPTION: Shows how to assign styles to a specific layer using the '@layer' key in the style object. This example first imports a layer configuration file, then creates a style within the 'reset' layer.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/global-layer.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// reset.css.ts\n\nimport { style } from '@vanilla-extract/css';\nimport './layers.css.ts';\n\nexport const noMargin = style({\n  '@layer': {\n    reset: {\n      margin: 0\n    }\n  }\n});\n\n// layers.css.ts\n\nimport { globalLayer } from '@vanilla-extract/css';\n\nglobalLayer('reset');\nglobalLayer('framework');\nglobalLayer({ parent: 'framework' }, 'typography');\n```\n\n----------------------------------------\n\nTITLE: Setting CSS Variables with Media Queries in Vanilla Extract CSS\nDESCRIPTION: Shows how to conditionally change CSS variable values using media queries. This example changes accent colors based on the user's preferred color scheme.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/create-var.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// accent.css.ts\n\nimport { createVar, style } from '@vanilla-extract/css';\n\nexport const accentVar = createVar();\n\nexport const blue = style({\n  vars: {\n    [accentVar]: 'blue'\n  },\n  '@media': {\n    '(prefers-color-scheme: dark)': {\n      vars: {\n        [accentVar]: 'lightblue'\n      }\n    }\n  }\n});\n\nexport const pink = style({\n  vars: {\n    [accentVar]: 'pink'\n  },\n  '@media': {\n    '(prefers-color-scheme: dark)': {\n      vars: {\n        [accentVar]: 'lightpink'\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping Function with styleVariants in Vanilla Extract CSS\nDESCRIPTION: Uses a mapping function with styleVariants to generate styles from a palette object. This approach reduces repetition by applying a transformation function to each palette value.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/style-variants.md#2025-04-20_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// styles.css.ts\n\nimport { style, styleVariants } from '@vanilla-extract/css';\n\nconst base = style({ padding: 12 });\n\nconst palette = {\n  primary: 'blue',\n  secondary: 'aqua'\n};\n\nexport const variant = styleVariants(\n  palette,\n  (paletteColor) => [base, { background: paletteColor }]\n);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Container Queries with createContainer in vanilla-extract\nDESCRIPTION: This example demonstrates how to create a scoped container name with createContainer and use it across multiple CSS modules. The sidebar.css.ts file creates a container, while navigation.css.ts imports and references that container in a container query.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/create-container.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// sidebar.css.ts\nimport {\n  style,\n  createContainer\n} from '@vanilla-extract/css';\n\nexport const sidebarContainer = createContainer();\n\nexport const sidebar = style({\n  containerName: sidebarContainer,\n  containerType: 'inline-size'\n});\n\n// navigation.css.ts\nimport {\n  style,\n  createContainer\n} from '@vanilla-extract/css';\nimport { sidebarContainer } from './sidebar.css.ts';\n\nexport const navigation = style({\n  '@container': {\n    [`${sidebarContainer} (min-width: 400px)`]: {\n      display: 'flex'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: CSS Variables Definition\nDESCRIPTION: Shows how to define CSS custom properties using the vars key.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/styling.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { style } from '@vanilla-extract/css';\n\nconst myStyle = style({\n  vars: {\n    '--my-global-variable': 'purple'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Nesting Layers with Parent-Child Relationships in Vanilla Extract CSS\nDESCRIPTION: Demonstrates how to create nested layers by specifying a parent layer. This generates the CSS shorthand syntax (parent.child) while making the relationship between layers explicit in code.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/global-layer.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// layers.css.ts\n\nimport { globalLayer } from '@vanilla-extract/css';\n\nglobalLayer('reset');\nglobalLayer('framework');\nglobalLayer({ parent: 'framework' }, 'typography');\n```\n\n----------------------------------------\n\nTITLE: Defining Simple CSS Properties with Sprinkles in TypeScript\nDESCRIPTION: Creates a sprinkles definition with simple CSS properties like display, flexDirection, alignItems, and justifyContent. This approach defines valid CSS values as an array of strings.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineProperties } from '@vanilla-extract/sprinkles';\n\nconst responsiveProperties = defineProperties({\n  properties: {\n    display: ['none', 'block', 'flex'],\n    flexDirection: ['row', 'column'],\n    alignItems: [\n      'stretch',\n      'flex-start',\n      'center',\n      'flex-end'\n    ],\n    justifyContent: [\n      'stretch',\n      'flex-start',\n      'center',\n      'flex-end'\n    ]\n    // etc.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Sprinkles with Custom Styles using style Function\nDESCRIPTION: Example of combining sprinkles with custom styles by providing an array to the vanilla-extract style function. This allows for extending atomic utility classes with additional CSS rules.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\nimport { style } from '@vanilla-extract/css';\nimport { sprinkles } from './sprinkles.css.ts';\n\nexport const container = style([\n  sprinkles({\n    display: 'flex',\n    padding: 'small'\n  }),\n  {\n    ':hover': {\n      outline: '2px solid currentColor'\n    }\n  }\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Global Font Variants with Single Family\nDESCRIPTION: Shows how to define multiple font-face rules for a single font family using the globalFontFace function. The example creates two font variants (normal and bold) for a single font family and exports a style that references this font family.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/global-font-face.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// text.css.ts\n\nimport {\n  globalFontFace,\n  style\n} from '@vanilla-extract/css';\n\nconst gentium = 'GlobalGentium';\n\nglobalFontFace(gentium, [\n  {\n    src: 'local(\"Gentium\")',\n    fontWeight: 'normal'\n  },\n  {\n    src: 'local(\"Gentium Bold\")',\n    fontWeight: 'bold'\n  }\n]);\n\nexport const font = style({\n  fontFamily: gentium\n});\n```\n\n----------------------------------------\n\nTITLE: Using Simple CSS Calc Expressions with vanilla-extract\nDESCRIPTION: Demonstrates how to use the calc utility for simple CSS calculations with functions like multiply. Functions available include add, subtract, multiply, divide, and negate.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/css-utils.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { calc } from '@vanilla-extract/css-utils';\n\nconst styles = {\n  height: calc.multiply('var(--grid-unit)', 2)\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing CSS Fallback Values with Vanilla Extract\nDESCRIPTION: Example showing how to define fallback CSS property values using an array syntax in vanilla-extract. The code demonstrates setting multiple overflow values where older browsers will use 'auto' if they don't support 'overlay'.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/styling.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\n\nimport { style } from '@vanilla-extract/css';\n\nexport const myStyle = style({\n  // In Firefox and IE the \"overflow: overlay\" will be\n  // ignored and the \"overflow: auto\" will be applied\n  overflow: ['auto', 'overlay']\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Theme Variable Names from Object Path\nDESCRIPTION: Shows how to generate CSS variable names automatically from the object path structure using the mapping function in createGlobalThemeContract. This example converts paths to title case format for the variable names.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/create-global-theme-contract.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// themes.css.ts\nimport {\n  createGlobalThemeContract,\n  createGlobalTheme\n} from '@vanilla-extract/css';\n\nconst toTitleCase = (s) =>\n  `${s.charAt(0).toUpperCase()}${s.slice(1)}`;\n\nexport const vars = createGlobalThemeContract(\n  {\n    color: {\n      brand: null\n    },\n    font: {\n      body: null\n    }\n  },\n  (_value, path) => `${path.map(toTitleCase).join('')}`\n);\n\ncreateGlobalTheme(':root', vars, {\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Semantic Value Mappings with Objects\nDESCRIPTION: Example of defining semantic property mappings using objects with named keys. This approach is used for creating design tokens like space scales, color palettes, etc.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// sprinkles.css.ts\nimport { defineProperties } from '@vanilla-extract/sprinkles';\n\nconst responsiveProperties = defineProperties({\n  properties: {\n    gap: {\n      none: 0,\n      small: 4,\n      medium: 8,\n      large: 16\n    }\n    // etc.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Global Styles with Sprinkles in TypeScript\nDESCRIPTION: Demonstrates using sprinkles with global styles in vanilla-extract.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\nimport { globalStyle } from '@vanilla-extract/css';\nimport { sprinkles } from './sprinkles.css.ts';\n\nexport const container = sprinkles({\n  padding: 'small'\n});\n\nglobalStyle(`${container} *`, {\n  boxSizing: 'border-box'\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Chainable CSS Calc Expressions\nDESCRIPTION: Shows how to create complex, chainable calc expressions using the calc function. When using chains, toString() must be called to return the final constructed expression.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/css-utils.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { calc } from '@vanilla-extract/css-utils';\n\nconst styles = {\n  marginTop: calc('var(--space-large)')\n    .divide(2)\n    .negate()\n    .toString()\n};\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Variables with @property Rules in Vanilla Extract CSS\nDESCRIPTION: Shows how to create CSS variables with @property rules for type safety. This example defines a color variable with syntax constraints, inheritance settings, and an initial value.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/create-var.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// accent.css.ts\nimport { createVar, style } from '@vanilla-extract/css';\n\nexport const accentVar = createVar({\n  syntax: '<color>',\n  inherits: false,\n  initialValue: 'blue'\n});\n\nexport const pink = style({\n  vars: {\n    [accentVar]: 'pink'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Layers with createTheme in TypeScript\nDESCRIPTION: Demonstrates how to assign a theme to a layer using the @layer key in the theme definition. It uses the layer function to create a named layer for the theme.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/create-theme.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTheme, layer } from '@vanilla-extract/css';\n\nexport const themeLayer = layer();\n\nexport const [themeA, vars] = createTheme({\n  '@layer': themeLayer,\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Simple CSS Property Mappings with Arrays\nDESCRIPTION: Example of defining simple CSS property mappings using arrays of valid CSS values. This approach is used for properties with standard CSS values like display, flexDirection, etc.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// sprinkles.css.ts\nimport { defineProperties } from '@vanilla-extract/sprinkles';\n\nconst responsiveProperties = defineProperties({\n  properties: {\n    display: ['none', 'block', 'flex'],\n    flexDirection: ['row', 'column'],\n    alignItems: [\n      'stretch',\n      'flex-start',\n      'center',\n      'flex-end'\n    ],\n    justifyContent: [\n      'stretch',\n      'flex-start',\n      'center',\n      'flex-end'\n    ]\n    // etc.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Global Theme Variables\nDESCRIPTION: Example of creating global theme variables using createGlobalTheme for single theme setups.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/docs/treat-migration-guide.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// vars.css.ts\n\nimport { createGlobalTheme } from '@vanilla-extract/css';\n\nexport const vars = createGlobalTheme(':root', {\n  ...tokens\n});\n```\n\n----------------------------------------\n\nTITLE: Using assignInlineVars with String Templates\nDESCRIPTION: Example showing how to use assignInlineVars with string templates for dynamic variable assignment in vanilla HTML\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/dynamic.md#2025-04-20_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// app.ts\n\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport { container, brandColor } from './styles.css.ts';\n\n// The following inline style becomes:\n// \"--brandColor__8uideo0: pink;\"\n\ndocument.write(`\n  <section\n    class=\"${container}\"\n    style=\"${assignInlineVars({ [brandColor]: 'pink' })}\"\n  >\n    ...\n  </section>\n`);\n```\n\n----------------------------------------\n\nTITLE: Creating Global CSS Variable with @property Rules\nDESCRIPTION: Demonstrates creating a global CSS variable with @property configuration including syntax, inheritance, and initial value settings.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/create-global-var.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createGlobalVar,\n  style\n} from '@vanilla-extract/css';\n\nconst opacityVar = createGlobalVar('opacity', {\n  syntax: '<number>',\n  inherits: false,\n  initialValue: '0.5'\n});\n\nexport const content = style({\n  opacity: opacityVar\n});\n```\n\n----------------------------------------\n\nTITLE: Orchestrating Multiple Global Layers in Vanilla Extract CSS\nDESCRIPTION: Shows how to create multiple global layers in a specific order to control style precedence. Layers declared later have higher precedence when there are conflicting styles.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/global-layer.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// layers.css.ts\n\nimport { globalLayer } from '@vanilla-extract/css';\n\nglobalLayer('reset');\nglobalLayer('framework');\nglobalLayer('app');\n```\n\n----------------------------------------\n\nTITLE: Migrating Keyframes from Treat to Vanilla Extract\nDESCRIPTION: Demonstrates how to migrate keyframe animations from Treat to Vanilla Extract. The example shows how to replace inline keyframes defined in style objects with separately created keyframes using the keyframes function.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/docs/treat-migration-guide.md#2025-04-20_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-import { style } from 'treat';\n-\n-const className = style({\n-  '@keyframes': { ... },\n-  animationName: '@keyframes'\n-});\n\n+import { keyframes, style } from '@vanilla-extract/css';\n+const myAnimationName = keyframes({ ... });\n+\n+const className = style({\n+  animationName: myAnimationName\n+});\n```\n\n----------------------------------------\n\nTITLE: Referencing Scoped Classes in Global Selectors\nDESCRIPTION: Shows how to reference scoped class names within global selectors. This example creates a style for anchor elements that are direct children of an element with the parentClass.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/global-style.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// app.css.ts\n\nimport { style, globalStyle } from '@vanilla-extract/css';\n\nexport const parentClass = style({});\n\nglobalStyle(`${parentClass} > a`, {\n  color: 'pink'\n});\n```\n\n----------------------------------------\n\nTITLE: Cascade Layers Implementation in TypeScript\nDESCRIPTION: Shows how to create and use CSS cascade layers (@layer) to control style specificity with the layer API\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/css/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// layers.css.ts\nimport { layer } from '@vanilla-extract/css';\n\nexport const reset = layer('reset');\nexport const framework = layer('framework');\nexport const typography = layer('typography');\n\n// typography.css.ts\nimport { style } from '@vanilla-extract/css';\nimport { typography } from './layers.css';\n\nexport const standard = style({\n  '@layer': {\n    [typography]: {\n      fontSize: '1rem'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Font Faces with Single Family in Vanilla Extract CSS\nDESCRIPTION: This example shows how to use the fontFace function to create multiple font face rules treated as a single font family. It defines two variations of the 'Gentium' font with different weights and applies them to a style.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/font-face.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fontFace, style } from '@vanilla-extract/css';\n\nconst gentium = fontFace([\n  {\n    src: 'local(\"Gentium\")',\n    fontWeight: 'normal'\n  },\n  {\n    src: 'local(\"Gentium Bold\")',\n    fontWeight: 'bold'\n  }\n]);\n\nexport const font = style({\n  fontFamily: gentium\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Media Query Conditions in Sprinkles\nDESCRIPTION: Demonstrates how to define responsive breakpoint conditions using media queries. Sets up mobile, tablet and desktop breakpoints with corresponding min-width values.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineProperties } from '@vanilla-extract/sprinkles';\n\nconst responsiveProperties = defineProperties({\n  conditions: {\n    mobile: {},\n    tablet: { '@media': 'screen and (min-width: 768px)' },\n    desktop: { '@media': 'screen and (min-width: 1024px)' }\n  },\n  defaultCondition: 'mobile'\n  // etc.\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a CSS Variable Reference in Vanilla Extract CSS\nDESCRIPTION: Creates a scoped CSS variable reference using createVar(). This example demonstrates creating a variable without generating any CSS output, which can be set and used later.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/create-var.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// accent.css.ts\n\nimport { createVar, style } from '@vanilla-extract/css';\n\nexport const accentVar = createVar();\n```\n\n----------------------------------------\n\nTITLE: Examining Generated Classlists in vanilla-extract Composition\nDESCRIPTION: Illustrates how style composition generates a classlist string containing multiple class names. When styles are composed, vanilla-extract combines the original class with newly generated classes.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/style-composition.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\n\nimport { style } from '@vanilla-extract/css';\n\n// base = 'styles_base__8uideo0'\nconst base = style({ padding: 12 });\n\n// primary = 'styles_base__8uideo0 styles_primary__8uideo1'\nconst primary = style([base, { background: 'blue' }]);\n```\n\n----------------------------------------\n\nTITLE: Best Practice for Layer References in Vanilla Extract CSS\nDESCRIPTION: Demonstrates the recommended approach of exporting layer references from a dedicated layer configuration file. This allows for using these references when creating styles, making the code more maintainable.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/global-layer.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// reset.css.ts\n\nimport { style } from '@vanilla-extract/css';\nimport { reset } from './layers.css.ts';\n\nexport const noMargin = style({\n  '@layer': {\n    [reset]: {\n      margin: 0\n    }\n  }\n});\n\n// layers.css.ts\n\nimport { globalLayer } from '@vanilla-extract/css';\n\nexport const reset = globalLayer('reset');\nexport const framework = globalLayer('framework');\nexport const typography = globalLayer(\n  { parent: framework },\n  'typography'\n);\n```\n\n----------------------------------------\n\nTITLE: Container Queries Implementation\nDESCRIPTION: Shows how to use container queries and create scoped containers.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/styling.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { style, createContainer } from '@vanilla-extract/css';\n\nconst sidebar = createContainer();\n\nconst myStyle = style({\n  containerName: sidebar,\n  '@container': {\n    [`${sidebar} (min-width: 768px)`]: {\n      padding: 10\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Style Objects as Property Values with Sprinkles in TypeScript\nDESCRIPTION: Demonstrates how to pass entire style objects as property values in @vanilla-extract/sprinkles, utilizing CSS variables to manage opacity values with atomic styles.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createVar } from '@vanilla-extract/css';\nimport { createAtomicStyles } from '@vanilla-extract/sprinkles';\n\nconst alpha = createVar();\n\nconst responsiveStyles = createAtomicStyles({\n  properties: {\n    background: {\n      red: {\n        vars: { [alpha]: '1' },\n        background: `rgba(255, 0, 0, ${alpha})`,\n      },\n    },\n    backgroundOpacity: {\n      1: { vars: { [alpha]: '1' } },\n      0.1: { vars: { [alpha]: '0.1' } },\n    },\n    // etc.\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Scoped CSS Variables\nDESCRIPTION: Demonstrates usage of scoped CSS variables using createVar API.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/styling.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { style, createVar } from '@vanilla-extract/css';\n\nconst myVar = createVar();\n\nconst myStyle = style({\n  vars: {\n    [myVar]: 'purple'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Responsive Array Support in Sprinkles with TypeScript\nDESCRIPTION: Enables responsive array notation by defining the order of conditions, allowing for shorthand responsive styles using arrays.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineProperties } from '@vanilla-extract/sprinkles';\n\nconst responsiveProperties = defineProperties({\n  conditions: {\n    mobile: {},\n    tablet: { '@media': 'screen and (min-width: 768px)' },\n    desktop: { '@media': 'screen and (min-width: 1024px)' }\n  },\n  defaultCondition: 'mobile',\n  responsiveArray: ['mobile', 'tablet', 'desktop']\n  // etc.\n});\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Properties in Vanilla Extract\nDESCRIPTION: Demonstrates basic CSS property usage with camelCase syntax and global styles.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/styling.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { style, globalStyle } from '@vanilla-extract/css';\n\nexport const myStyle = style({\n  display: 'flex',\n  paddingTop: '3px'\n});\n\nglobalStyle('body', {\n  margin: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Global Layers in Vanilla Extract CSS\nDESCRIPTION: Demonstrates how to create a simple global layer named 'reset' using the globalLayer function from Vanilla Extract CSS. This establishes a named layer that can be used to organize and prioritize styles.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/global-layer.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// layers.css.ts\n\nimport { globalLayer } from '@vanilla-extract/css';\n\nglobalLayer('reset');\n```\n\n----------------------------------------\n\nTITLE: Setting Collections of CSS Variables with setElementVars\nDESCRIPTION: Example showing how to use setElementVars with a theme contract to set collections of variables on a DOM element. Type checking ensures all required variables are provided.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/dynamic/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setElementVars } from '@vanilla-extract/dynamic';\nimport { vars } from './styles.css.ts';\n\nconst el = document.getElementById('myElement');\n\nsetElementVars(el, vars.colors, {\n  brand: 'pink',\n  accent: 'green',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Mode Conditions\nDESCRIPTION: Shows how to set up mutually exclusive conditions for light and dark mode with multiple default conditions.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineProperties } from '@vanilla-extract/sprinkles';\n\nconst responsiveProperties = defineProperties({\n  conditions: {\n    lightMode: {\n      '@media': '(prefers-color-scheme: light)'\n    },\n    darkMode: { '@media': '(prefers-color-scheme: dark)' }\n  },\n  defaultCondition: ['lightMode', 'darkMode']\n  // etc.\n});\n```\n\n----------------------------------------\n\nTITLE: Media Queries Implementation\nDESCRIPTION: Shows how to embed media queries within style definitions for responsive design.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/styling.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { style } from '@vanilla-extract/css';\n\nconst myStyle = style({\n  '@media': {\n    'screen and (min-width: 768px)': {\n      padding: 10\n    },\n    '(prefers-reduced-motion)': {\n      transitionProperty: 'color'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Selector-based Conditions with Sprinkles in TypeScript\nDESCRIPTION: Defines conditions based on CSS selectors like hover and focus states, with a default condition for the base state.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineProperties } from '@vanilla-extract/sprinkles';\n\nconst properties = defineProperties({\n  conditions: {\n    default: {},\n    hover: { selector: '&:hover' },\n    focus: { selector: '&:focus' }\n  },\n  defaultCondition: 'default'\n  // etc.\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Next.js Configuration with vanilla-extract\nDESCRIPTION: Setting up the vanilla-extract plugin in a Next.js configuration file. This code imports the plugin, creates a plugin instance, and applies it to the Next.js configuration.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/next.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst {\n  createVanillaExtractPlugin\n} = require('@vanilla-extract/next-plugin');\nconst withVanillaExtract = createVanillaExtractPlugin();\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {};\n\nmodule.exports = withVanillaExtract(nextConfig);\n```\n\n----------------------------------------\n\nTITLE: Assigning CSS Variables with a Theme Contract\nDESCRIPTION: Example showing how to use assignInlineVars with a theme contract to assign collections of variables. The type system ensures all variables in the contract are assigned.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/dynamic/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport { vars } from './vars.css.ts';\n\nconst MyComponent = () => (\n  <section\n    style={assignInlineVars(vars.colors, {\n      brand: 'pink',\n      accent: 'green',\n    })}\n  >\n    ...\n  </section>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Context in React\nDESCRIPTION: Creating a React context provider for managing theme classes across components and portals.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/docs/treat-migration-guide.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// VanillaThemeContext.tsx\n\nimport { createContext, useContext } from 'react';\n\nconst VanillaThemeContext = createContext<string | null>(\n  null\n);\n\nexport const VanillaThemeProvider =\n  VanillaThemeContext.Provider;\n\nexport const useVanillaTheme = () => {\n  const themeClass = useContext(VanillaThemeContext);\n\n  if (themeClass === null) {\n    throw new Error('Must be inside VanillaThemeProvider');\n  }\n\n  return themeClass;\n};\n```\n\n----------------------------------------\n\nTITLE: CSS Layers Implementation\nDESCRIPTION: Demonstrates how to use CSS layers for managing cascade layers.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/styling.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { style, layer } from '@vanilla-extract/css';\n\nconst typography = layer();\n\nconst text = style({\n  '@layer': {\n    [typography]: {\n      fontSize: '1rem'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Atoms in Selectors with Vanilla Extract CSS\nDESCRIPTION: Shows how to use Sprinkles atom classes in vanilla-extract selectors, leveraging the composeStyles function to treat atomic styles as a single class in selectors.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\nimport { globalStyle } from '@vanilla-extract/css';\nimport { atoms } from './sprinkles.css.ts';\n\nexport const container = atoms({\n  padding: 'small',\n});\n\nglobalStyle(`${container} *`, {\n  boxSizing: 'border-box',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Value Mapping Function for Sprinkles in TypeScript\nDESCRIPTION: Uses createMapValueFn to generate a utility for mapping over conditional values, useful for converting high-level prop values to sprinkles values.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  defineProperties,\n  createSprinkles,\n  createMapValueFn\n} from '@vanilla-extract/sprinkles';\n\nconst responsiveProperties = defineProperties({\n  /* ... */\n});\n\nexport const sprinkles = createSprinkles(\n  responsiveProperties\n);\nexport const mapResponsiveValue = createMapValueFn(\n  responsiveProperties\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Themes\nDESCRIPTION: Example of creating multiple themes using createTheme function for more complex theme setups.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/docs/treat-migration-guide.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// vars.css.ts\n\nimport { createTheme } from '@vanilla-extract/css';\n\nexport const [themeA, vars] = createTheme({\n  ...tokens\n});\n\nexport const themeB = createTheme(vars, {\n  ...tokens\n});\n```\n\n----------------------------------------\n\nTITLE: Using Composed Styles in Selectors with vanilla-extract\nDESCRIPTION: Demonstrates how composed styles can be used in selectors as if they were a single class. The composition is processed internally to ensure proper selector targeting.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/style-composition.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\n\nimport { style } from '@vanilla-extract/css';\n\nconst base = style({ padding: 12 });\n\nconst primary = style([base, { background: 'blue' }]);\n\nconst text = style({\n  selectors: {\n    [`${primary} &`]: {\n      color: 'white'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Global Theme Stylesheet in Vanilla Extract CSS\nDESCRIPTION: Shows how to import the global theme stylesheet as a side effect to include the styles in the CSS bundle.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/create-global-theme.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// app.ts\nimport './theme.css.ts';\n```\n\n----------------------------------------\n\nTITLE: Configuring Vanilla Extract plugin in Astro\nDESCRIPTION: Astro configuration file example showing how to integrate the Vanilla Extract Vite plugin. This setup enables the processing of .css.ts files in an Astro project.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/astro.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'astro/config';\nimport { vanillaExtractPlugin } from '@vanilla-extract/vite-plugin';\n\n// https://astro.build/config\nexport default defineConfig({\n  vite: {\n    plugins: [vanillaExtractPlugin()]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Value Normalizing Function for Sprinkles in TypeScript\nDESCRIPTION: Uses createNormalizeValueFn to generate a utility that converts different responsive value formats (primitive, array, object) into a consistent object structure.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  defineProperties,\n  createSprinkles,\n  createNormalizeValueFn\n} from '@vanilla-extract/sprinkles';\n\nconst responsiveProperties = defineProperties({\n  /* ... */\n});\n\nexport const sprinkles = createSprinkles(\n  responsiveProperties\n);\nexport const normalizeResponsiveValue =\n  createNormalizeValueFn(responsiveProperties);\n```\n\n----------------------------------------\n\nTITLE: Using Value Mapping Function for Sprinkles in TypeScript\nDESCRIPTION: Demonstrates how to use the mapResponsiveValue function to transform alignment values into flex alignment values with different responsive patterns.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { mapResponsiveValue } from './sprinkles.css.ts';\n\nconst alignToFlexAlign = {\n  left: 'flex-start',\n  center: 'center',\n  right: 'flex-end',\n  stretch: 'stretch'\n} as const;\n\nmapResponsiveValue(\n  'left',\n  (value) => alignToFlexAlign[value]\n);\n// -> 'flex-start'\n\nmapResponsiveValue(\n  {\n    mobile: 'center',\n    desktop: 'left'\n  } as const,\n  (value) => alignToFlexAlign[value]\n);\n// -> { mobile: 'center', desktop: 'flex-start' }\n\nmapResponsiveValue(\n  ['center', null, 'left'] as const,\n  (value) => alignToFlexAlign[value]\n);\n// -> { mobile: 'center', desktop: 'flex-start' }\n```\n\n----------------------------------------\n\nTITLE: Implementing Container Query Conditions\nDESCRIPTION: Demonstrates setup of container query conditions using createContainer and style functions. Defines small, medium, and large container breakpoints.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createContainer,\n  style\n} from '@vanilla-extract/css';\nimport { defineProperties } from '@vanilla-extract/sprinkles';\n\nconst containerName = createContainer();\n\nexport const container = style({\n  containerName,\n  containerType: 'size'\n});\n\nconst containerProperties = defineProperties({\n  conditions: {\n    small: {},\n    medium: {\n      '@container': `${containerName} (min-width: 768px)`\n    },\n    large: {\n      '@container': `${containerName} (min-width: 1024px)`\n    }\n  },\n  defaultCondition: 'small'\n  // etc.\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Recipe Class Names for Internal Use\nDESCRIPTION: Example showing how to access the internal class names generated by a recipe function through the classNames property.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/recipes.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// app.css.ts\nconsole.log(button.classNames.base);\n// -> app_button__129pj250\nconsole.log(button.classNames.variants.color.neutral);\n// -> app_button_color_neutral__129pj251\nconsole.log(button.classNames.variants.size.small);\n// -> app_button_size_small__129pj254\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Layer-aware Sprinkles\nDESCRIPTION: Demonstrates how to assign styles to specific CSS layers using the @layer feature.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineProperties } from '@vanilla-extract/sprinkles';\nimport { layer } from '@vanilla-extract/css';\n\nexport const sprinklesLayer = layer();\n\nconst properties = defineProperties({\n  '@layer': sprinklesLayer\n  // etc.\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Theme Contract in Vanilla Extract CSS\nDESCRIPTION: Illustrates how to implement an existing theme contract using createThemeContract and createGlobalTheme functions. This approach allows for type-safe theme definitions.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/create-global-theme.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// theme.css.ts\nimport {\n  createThemeContract,\n  createGlobalTheme\n} from '@vanilla-extract/css';\n\nexport const vars = createThemeContract({\n  color: {\n    brand: null\n  },\n  font: {\n    body: null\n  }\n});\n\ncreateGlobalTheme(':root', vars, {\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Sprinkles with Global CSS Selectors\nDESCRIPTION: Example showing how sprinkles can be used within vanilla-extract selectors. A class list returned by the sprinkles function can be treated as a single class name in globalStyle.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\nimport { globalStyle } from '@vanilla-extract/css';\nimport { sprinkles } from './sprinkles.css.ts';\n\nexport const container = sprinkles({\n  padding: 'small'\n});\n\nglobalStyle(`${container} *`, {\n  boxSizing: 'border-box'\n});\n```\n\n----------------------------------------\n\nTITLE: Circular Selectors Implementation\nDESCRIPTION: Demonstrates how to handle circular dependencies in selectors using getters.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/styling.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { style } from '@vanilla-extract/css';\n\nexport const child = style({\n  background: 'blue',\n  get selectors() {\n    return {\n      [`${parent} &`]: {\n        color: 'red'\n      }\n    };\n  }\n});\n\nexport const parent = style({\n  background: 'yellow',\n  selectors: {\n    [`&:has(${child})`]: {\n      padding: 10\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vanilla Extract Vite Plugin\nDESCRIPTION: Example showing how to add configuration options to the vanilla-extract Vite plugin. This template demonstrates where custom options should be placed in the configuration object.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/vite.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n\nimport { vanillaExtractPlugin } from '@vanilla-extract/vite-plugin';\n\nexport default {\n  plugins: [\n    vanillaExtractPlugin({\n      // configuration\n    })\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Composing vanilla-extract with other Next.js Plugins\nDESCRIPTION: Example of composing the vanilla-extract plugin with another Next.js plugin (MDX in this case). Shows how to chain multiple plugins together in a Next.js configuration.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/next.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst {\n  createVanillaExtractPlugin\n} = require('@vanilla-extract/next-plugin');\nconst withVanillaExtract = createVanillaExtractPlugin();\n\nconst withMDX = require('@next/mdx')({\n  extension: /\\.mdx$/\n});\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {};\n\nmodule.exports = withVanillaExtract(withMDX(nextConfig));\n```\n\n----------------------------------------\n\nTITLE: Prefixing Variable Names in Global Theme Contract\nDESCRIPTION: Demonstrates how to use the mapping function parameter of createGlobalThemeContract to automatically prefix all CSS variable names. This allows for more consistent naming patterns across your theme variables.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/create-global-theme-contract.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// themes.css.ts\nimport {\n  createGlobalThemeContract,\n  createGlobalTheme\n} from '@vanilla-extract/css';\n\nexport const vars = createGlobalThemeContract(\n  {\n    color: {\n      brand: 'color-brand'\n    },\n    font: {\n      body: 'font-body'\n    }\n  },\n  (value) => `prefix-${value}`\n);\n\ncreateGlobalTheme(':root', vars, {\n  color: {\n    brand: 'blue'\n  },\n  font: {\n    body: 'arial'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Global Styles in Vanilla Extract CSS\nDESCRIPTION: Demonstrates using globalStyle to apply margin styles to html and body elements. Takes a selector string as the first parameter, followed by a style object.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/global-style.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// app.css.ts\n\nimport { globalStyle } from '@vanilla-extract/css';\n\nglobalStyle('html, body', {\n  margin: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Unitless Properties Handling\nDESCRIPTION: Shows how numeric values are handled for CSS properties, with automatic pixel unit addition for non-unitless properties.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/styling.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { style } from '@vanilla-extract/css';\n\nexport const myStyle = style({\n  // cast to pixels\n  padding: 10,\n  marginTop: 25,\n\n  // unitless properties\n  flexGrow: 1,\n  opacity: 0.5\n});\n```\n\n----------------------------------------\n\nTITLE: Optimizing CSS with Automatic Layer Merging in Vanilla Extract\nDESCRIPTION: Demonstrates how Vanilla Extract automatically merges styles assigned to the same layer within a file to generate minimal CSS output while preserving the correct cascade order. The order of styles in the output is determined by layer declaration order, not style creation order.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/layer.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// typography.css.ts\nimport { style, layer } from '@vanilla-extract/css';\n\nconst base = layer();\nconst theme = layer();\n\nconst text = style({\n  '@layer': {\n    [base]: {\n      fontSize: '1rem'\n    }\n  }\n});\nconst themedHeading = style({\n  '@layer': {\n    [theme]: {\n      color: 'rebeccapurple'\n    }\n  }\n});\nconst heading = style({\n  '@layer': {\n    [base]: {\n      fontSize: '2.4rem'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Simple Pseudo Selectors\nDESCRIPTION: Demonstrates usage of simple pseudo selectors without parameters.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/styling.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { style } from '@vanilla-extract/css';\n\nconst myStyle = style({\n  ':hover': {\n    color: 'pink'\n  },\n  ':first-of-type': {\n    color: 'blue'\n  },\n  '::before': {\n    content: ''\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using assignInlineVars with Theme Contracts\nDESCRIPTION: Example demonstrating how to use assignInlineVars with theme contracts for dynamic theming in React components\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/dynamic.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// app.tsx\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport { container, themeVars } from './theme.css.ts';\n\ninterface ContainerProps {\n  brandColor: string;\n  fontFamily: string;\n}\nconst Container = ({\n  brandColor,\n  fontFamily\n}: ContainerProps) => (\n  <section\n    className={container}\n    style={assignInlineVars(themeVars, {\n      color: { brand: brandColor },\n      font: { body: fontFamily }\n    })}\n  >\n    ...\n  </section>\n);\n\nconst App = () => (\n  <Container brandColor=\"pink\" fontFamily=\"Arial\">\n    ...\n  </Container>\n);\n\n// theme.css.ts\nimport {\n  createThemeContract,\n  style\n} from '@vanilla-extract/css';\n\nexport const themeVars = createThemeContract({\n  color: {\n    brand: null\n  },\n  font: {\n    body: null\n  }\n});\n\nexport const container = style({\n  background: themeVars.color.brand,\n  fontFamily: themeVars.font.body\n});\n```\n\n----------------------------------------\n\nTITLE: Defining RequiredConditionalValue in Sprinkles Configuration (TypeScript)\nDESCRIPTION: This snippet shows how to import and use RequiredConditionalValue in a sprinkles.css.ts file. It defines responsive properties and creates a type for required responsive values.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// sprinkles.css.ts\nimport {\n  defineProperties,\n  RequiredConditionalValue\n} from '@vanilla-extract/sprinkles';\n\nconst responsiveProperties = defineProperties({\n  defaultCondition: 'mobile'\n  // etc.\n});\n\nexport type RequiredResponsiveValue<\n  Value extends string | number\n> = RequiredConditionalValue<\n  typeof responsiveProperties,\n  Value\n>;\n```\n\n----------------------------------------\n\nTITLE: Custom Identifier Function Configuration\nDESCRIPTION: Example of configuring custom identifier function for class names and CSS variables using TypeScript syntax.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/webpack.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew VanillaExtractPlugin({\n  identifiers: ({ hash }) => `prefix_${hash}`\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Default Conditions with Sprinkles in TypeScript\nDESCRIPTION: Configures multiple default conditions (light mode and dark mode) that will be applied automatically when a non-conditional value is used.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineProperties } from '@vanilla-extract/sprinkles';\n\nconst responsiveProperties = defineProperties({\n  conditions: {\n    lightMode: { '@media': '(prefers-color-scheme: light)' },\n    darkMode: { '@media': '(prefers-color-scheme: dark)' }\n  },\n  defaultCondition: ['lightMode', 'darkMode']\n  // etc.\n});\n```\n\n----------------------------------------\n\nTITLE: Transpiling External Vanilla Extract Libraries in Next.js\nDESCRIPTION: Configuration for transpiling external libraries that use vanilla-extract. This example shows how to set up Next.js to properly compile vanilla-extract styles from dependencies.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/next.md#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// next.config.js\nconst {\n  createVanillaExtractPlugin\n} = require('@vanilla-extract/next-plugin');\nconst withVanillaExtract = createVanillaExtractPlugin();\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  transpilePackages: ['@company/design-system']\n};\n\n// Next.js Vanilla Extract integration will now compile @company/design-system styles\nmodule.exports = withVanillaExtract(nextConfig);\n```\n\n----------------------------------------\n\nTITLE: Using Nested Layer References in Vanilla Extract CSS\nDESCRIPTION: Shows how to use exported nested layer references from a configuration file. In this example, the typography layer is actually 'framework.typography' but the computed name is handled automatically.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/global-api/global-layer.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// text.css.ts\n\nimport { style } from '@vanilla-extract/css';\nimport { typography } from './layers.css.ts';\n\nexport const standard = style({\n  '@layer': {\n    [typography]: {\n      fontSize: '1rem'\n    }\n  }\n});\n\n// layers.css.ts\n\nimport { globalLayer } from '@vanilla-extract/css';\n\nexport const reset = globalLayer('reset');\nexport const framework = globalLayer('framework');\nexport const typography = globalLayer(\n  { parent: framework },\n  'typography'\n);\n```\n\n----------------------------------------\n\nTITLE: Using addFunctionSerializer to Enable Function Exports\nDESCRIPTION: Complete implementation of styledDiv that uses addFunctionSerializer to annotate the function with serialization instructions. It specifies the import path, function name, and arguments needed to reconstruct the function at runtime.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/add-function-serializer.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\n\nimport { addFunctionSerializer } from '@vanilla-extract/css/functionSerializer';\nimport { style } from '@vanilla-extract/css';\nimport { runtimeStyledDiv } from './runtime';\n\nexport function styledDiv(styles) {\n  const className = style(styles);\n  const args = [className];\n\n  // First we call our runtime function at build time\n  const Component = runtimeStyledDiv(...args);\n\n  // Then we tell vanilla-extract how to serialize the previous\n  // function call by annotating its return value\n  addFunctionSerializer(Component, {\n    importPath: 'my-awesome-styled-div/runtime',\n    importName: 'runtimeStyledDiv',\n    args\n  });\n\n  // Return the result of calling the runtime function\n  return Component;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Conditions in Sprinkles with TypeScript\nDESCRIPTION: Sets defaultCondition to false to require explicit condition targeting in the sprinkles API, useful for mutually exclusive conditions like color schemes.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineProperties } from '@vanilla-extract/sprinkles';\n\nconst responsiveProperties = defineProperties({\n  conditions: {\n    lightMode: {\n      '@media': '(prefers-color-scheme: light)'\n    },\n    darkMode: { '@media': '(prefers-color-scheme: dark)' }\n  },\n  defaultCondition: false\n  // etc.\n});\n```\n\n----------------------------------------\n\nTITLE: Compiled JS Output for a Basic Theme\nDESCRIPTION: This shows the compiled JavaScript output that would be generated from the basic theme example. It includes the CSS variables and class name exported from the theme.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/theming.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// theme.js\n// Example result of the compiled JS\nimport './theme.css';\n\nexport const vars = {\n  color: {\n    brand: 'var(--color-brand__l520oi1)'\n  },\n  font: {\n    body: 'var(--font-body__l520oi2)'\n  }\n};\n\nexport const themeClass = 'theme_themeClass__l520oi0';\n```\n\n----------------------------------------\n\nTITLE: Using a Recipe in Runtime TypeScript Code\nDESCRIPTION: Example of using a recipe function in a template to apply variant-based styles to a button element.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/recipes.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// app.ts\nimport { button } from './button.css.ts';\n\ndocument.write(`\n  <button class=\"${button({\n    color: 'accent',\n    size: 'large',\n    rounded: true\n  })}\">\n    Hello world\n  </button>\n`);\n```\n\n----------------------------------------\n\nTITLE: Basic Style Creation in vanilla-extract\nDESCRIPTION: Shows the basic usage of the style function that returns a generated class name. This is the foundation for style composition in vanilla-extract.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/style-composition.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\n\nimport { style } from '@vanilla-extract/css';\n\n// base = 'styles_base__8uideo0'\nconst base = style({ padding: 12 });\n```\n\n----------------------------------------\n\nTITLE: Configuring Vanilla Extract Rollup Plugin\nDESCRIPTION: Example of configuring the vanilla-extract Rollup plugin with custom options. The configuration placeholder indicates where plugin-specific options would be added.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/rollup.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nimport { vanillaExtractPlugin } from '@vanilla-extract/rollup-plugin';\n\nexport default {\n  plugins: [\n    vanillaExtractPlugin({\n      // configuration\n    })\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RequiredResponsiveValue Type with RequiredConditionalValue in TypeScript\nDESCRIPTION: This snippet shows how to create a RequiredResponsiveValue type using RequiredConditionalValue from @vanilla-extract/sprinkles. This type ensures that the default condition is always specified in responsive values.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  defineProperties,\n  RequiredConditionalValue\n} from '@vanilla-extract/sprinkles';\n\nconst responsiveProperties = defineProperties({\n  defaultCondition: 'mobile'\n  // etc.\n});\n\nexport type RequiredResponsiveValue<\n  Value extends string | number\n> = RequiredConditionalValue<\n  typeof responsiveProperties,\n  Value\n>;\n```\n\n----------------------------------------\n\nTITLE: Using Components with Vanilla Extract Styles in Next.js\nDESCRIPTION: Example of importing and using a component from a design system library that uses vanilla-extract for styling. Shows typical component usage pattern in a Next.js application.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/next.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// App.tsx\nimport { Button } from '@company/design-system';\n\nexport default function App() {\n  // This is unstyled and/or throws errors about Vanilla Extract being used in runtime\n  return <Button>Hello, World!</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Compiled JS Output for Multiple Themes\nDESCRIPTION: This shows the compiled JavaScript output after creating multiple themes with the same contract. It demonstrates how the additional theme class is added while reusing the same CSS variables.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/theming.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// theme.js\n// Example result of the compiled JS\nimport './theme.css';\n\nexport const vars = {\n  color: {\n    brand: 'var(--color-brand__l520oi1)'\n  },\n  font: {\n    body: 'var(--font-body__l520oi2)'\n  }\n};\n\nexport const themeClass = 'theme_themeClass__l520oi0';\n\nexport const otherThemeClass =\n  'theme_otherThemeClass__l520oi3';\n```\n\n----------------------------------------\n\nTITLE: Using Value Normalizing Function for Sprinkles in TypeScript\nDESCRIPTION: Shows how to use the normalizeResponsiveValue function to convert different responsive value formats into a standardized object representation.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { normalizeResponsiveValue } from './sprinkles.css.ts';\n\nnormalizeResponsiveValue('block');\n// -> { mobile: 'block' }\n\nnormalizeResponsiveValue(['none', null, 'block']);\n// -> { mobile: 'block', desktop: 'block' }\n\nnormalizeResponsiveValue({\n  mobile: 'none',\n  desktop: 'block'\n});\n// -> { mobile: 'block', desktop: 'block' }\n```\n\n----------------------------------------\n\nTITLE: Using RequiredResponsiveValue Type in Application Code\nDESCRIPTION: This example demonstrates the usage of the RequiredResponsiveValue type in application code. It shows valid and invalid ways to define responsive values, highlighting the requirement for the default condition to be specified.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RequiredResponsiveValue } from './sprinkles.css.ts';\n\ntype ResponsiveAlign = RequiredResponsiveValue<\n  'left' | 'center' | 'right'\n>;\n\nconst a: ResponsiveAlign = 'left';\nconst b: ResponsiveAlign = {\n  mobile: 'center',\n  desktop: 'left'\n};\nconst c: ResponsiveAlign = ['center', null, 'left'];\n\n// Type errors:\nconst d: ResponsiveAlign = [null, 'center'];\nconst e: ResponsiveAlign = { desktop: 'center' };\n```\n\n----------------------------------------\n\nTITLE: Configuring Identifier Formatting in Vanilla Extract Vite Plugin\nDESCRIPTION: Example of configuring the 'identifiers' option in the Vanilla Extract Vite plugin to format CSS class names, keyframes, and CSS variables. The option accepts either 'short' or 'debug' values to control identifier appearance.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/vite-plugin/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { vanillaExtractPlugin } from '@vanilla-extract/vite-plugin';\n\nvanillaExtractPlugin({ identifiers: 'short' });\n```\n\n----------------------------------------\n\nTITLE: Setting CSS Variables on DOM Elements\nDESCRIPTION: Example of using setElementVars to directly set CSS variables on DOM elements. This allows dynamically updating the styling of existing elements by modifying their CSS variables.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/dynamic/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setElementVars } from '@vanilla-extract/dynamic';\nimport { brandColor, textColor } from './styles.css.ts';\n\nconst el = document.getElementById('myElement');\n\nsetElementVars(el, {\n  [brandColor]: 'pink',\n  [textColor]: null,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Theme Provider in React App\nDESCRIPTION: Example of implementing the theme provider at the root level of a React application.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/docs/treat-migration-guide.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// App.tsx\n\nimport { createContext, useContext } from 'react';\nimport { themeClass } from './vars.css';\nimport { VanillaThemeProvider } from './VanillaThemeContext';\n\nexport const App = () => (\n  <VanillaThemeProvider value={themeClass}>\n    <div className={themeClass}>...</div>\n  </VanillaThemeProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing vanilla-extract Next.js Plugin\nDESCRIPTION: Command to install the vanilla-extract Next.js plugin package as a development dependency.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/next.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @vanilla-extract/next-plugin\n```\n\n----------------------------------------\n\nTITLE: Using RequiredConditionalValue in Application Code (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the RequiredResponsiveValue type in application code. It shows valid and invalid usage examples, including type errors for incomplete or incorrect values.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// app.ts\nimport { RequiredResponsiveValue } from './sprinkles.css.ts';\n\ntype ResponsiveAlign = RequiredResponsiveValue<\n  'left' | 'center' | 'right'\n>;\n\nconst a: ResponsiveAlign = 'left';\nconst b: ResponsiveAlign = {\n  mobile: 'center',\n  desktop: 'left'\n};\nconst c: ResponsiveAlign = ['center', null, 'left'];\n\n// Type errors:\nconst d: ResponsiveAlign = [null, 'center'];\nconst e: ResponsiveAlign = { desktop: 'center' };\n```\n\n----------------------------------------\n\nTITLE: Custom Identifier Function for Vanilla Extract Vite Plugin\nDESCRIPTION: Example of using a custom identifier function to format CSS identifiers. This function receives an object with hash, filePath, debugId, and packageName properties and returns a customized identifier string.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/vite.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvanillaExtractPlugin({\n  identifiers: ({ hash }) => `prefix_${hash}`\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Basic Theme Calculations with CSS calc Function\nDESCRIPTION: Shows how to replace Treat's JavaScript-based theme calculations with Vanilla Extract's calc utility. This example demonstrates converting a negative margin calculation from Treat's JavaScript approach to Vanilla Extract's CSS-based approach using the calc.negate function.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/docs/treat-migration-guide.md#2025-04-20_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n-import { style } from 'treat';\n-\n-const className = style(theme => ({\n-  marginTop: theme.space.small * -1\n-}))\n\n+import { style } from '@vanilla-extract/css';\n+import { calc } from '@vanilla-extract/css-utils';\n+import { vars } from '../vars.css';\n+\n+const className = style({\n+  marginTop: calc.negate(vars.space.small)\n+});\n```\n\n----------------------------------------\n\nTITLE: Custom Identifier Configuration for vanilla-extract\nDESCRIPTION: Configuring the vanilla-extract plugin with a custom identifier function. This example shows how to create custom class name formats based on hash values.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/next.md#2025-04-20_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst withVanillaExtract = createVanillaExtractPlugin({\n  identifiers: ({ hash }) => `prefix_${hash}`\n});\n```\n\n----------------------------------------\n\nTITLE: Using composeStyles with Selectors in Vanilla Extract\nDESCRIPTION: Example showing how to use composeStyles to combine multiple styles and then use the composition in a selector. This demonstrates the enhanced capability to treat compositions as a single class in vanilla-extract selectors.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/vite-plugin/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  style,\n  globalStyle,\n  composeStyles\n} from '@vanilla-extract/css';\n\nconst background = style({ background: 'mintcream' });\nconst padding = style({ padding: 12 });\n\nexport const container = composeStyles(\n  background,\n  padding\n);\n\nglobalStyle(`${container} *`, {\n  boxSizing: 'border-box'\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Portal Component with Theme\nDESCRIPTION: Example of using theme context in a React portal component to maintain consistent theming.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/docs/treat-migration-guide.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// MyPortalComponent.tsx\n\nimport { createPortal } from 'react-dom';\nimport { useVanillaTheme } from './VanillaThemeContext';\n\nexport const MyPortalComponent = () => {\n  const themeClass = useVanillaTheme();\n\n  return createPortal(\n    <div className={themeClass}>...</div>,\n    document.body\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Vanilla Extract Vite Plugin\nDESCRIPTION: Command to install the Vite plugin for vanilla-extract as a development dependency using npm.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/vite.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @vanilla-extract/vite-plugin\n```\n\n----------------------------------------\n\nTITLE: Complete Webpack Configuration with CSS Loading\nDESCRIPTION: Full webpack configuration including CSS handling with mini-css-extract-plugin and css-loader setup for vanilla-extract files.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/webpack.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  VanillaExtractPlugin\n} = require('@vanilla-extract/webpack-plugin');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  plugins: [\n    new VanillaExtractPlugin(),\n    new MiniCssExtractPlugin()\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.vanilla\\.css$/i, // Targets only CSS files generated by vanilla-extract\n        use: [\n          MiniCssExtractPlugin.loader,\n          {\n            loader: require.resolve('css-loader'),\n            options: {\n              url: false // Required as image imports should be handled via JS/TS import statements\n            }\n          }\n        ]\n      }\n    ]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing styledDiv in Consumer Component\nDESCRIPTION: Example showing how a consumer would use a hypothetical styledDiv utility in their CSS module file to create a React component with static styles.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/add-function-serializer.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// MyComponent.css.ts\n\nimport { styledDiv } from 'my-awesome-styled-div';\n\nexport const MyComponent = styledDiv({\n  background: 'blue',\n  padding: 12\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring emitCssInSsr Option in Vite Config\nDESCRIPTION: Example configuration for enabling CSS emission during SSR with the Vanilla Extract Vite plugin. This allows CSS to be generated during server-side rendering processes.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/vite-plugin/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n\nimport { vanillaExtractPlugin } from '@vanilla-extract/vite-plugin';\n\nexport default {\n  plugins: [\n    vanillaExtractPlugin({\n      emitCssInSsr: true\n    })\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Identifier Configuration\nDESCRIPTION: Example of configuring custom identifiers using a custom function with the identifiers option.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/esbuild.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvanillaExtractPlugin({\n  identifiers: ({ hash }) => `prefix_${hash}`\n});\n```\n\n----------------------------------------\n\nTITLE: Vanilla Extract Plugin Configuration with Custom Identifiers\nDESCRIPTION: Example showing how to configure the vanilla-extract webpack plugin with custom identifier options and formatting.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/webpack.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  VanillaExtractPlugin\n} = require('@vanilla-extract/webpack-plugin');\n\nmodule.exports = {\n  plugins: [\n    new VanillaExtractPlugin({\n      // configuration\n    })\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Vanilla Extract esbuild Plugin\nDESCRIPTION: Command to install the vanilla-extract esbuild plugin as a development dependency.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/esbuild.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @vanilla-extract/esbuild-plugin\n```\n\n----------------------------------------\n\nTITLE: Advanced Rollup Configuration with Vanilla Extract Plugin\nDESCRIPTION: Rollup configuration with vanilla-extract plugin using preserveModules and custom asset file names. This setup preserves the module structure and places CSS assets next to their corresponding JS files.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/rollup.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nimport { vanillaExtractPlugin } from '@vanilla-extract/rollup-plugin';\n\nexport default {\n  plugins: [vanillaExtractPlugin()],\n  output: {\n    preserveModules: true,\n    assetFileNames({ name }) {\n      return name?.replace(/^src\\//, '') ?? '';\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Basic esbuild Plugin Setup\nDESCRIPTION: Basic setup example showing how to integrate the vanilla-extract plugin with esbuild in a build script.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/esbuild.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  vanillaExtractPlugin\n} = require('@vanilla-extract/esbuild-plugin');\n\nrequire('esbuild')\n  .build({\n    entryPoints: ['app.ts'],\n    bundle: true,\n    plugins: [vanillaExtractPlugin()],\n    outfile: 'out.js'\n  })\n  .catch(() => process.exit(1));\n```\n\n----------------------------------------\n\nTITLE: Basic Webpack Plugin Setup\nDESCRIPTION: Minimal webpack configuration showing how to add the vanilla-extract plugin.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/webpack.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  VanillaExtractPlugin\n} = require('@vanilla-extract/webpack-plugin');\n\nmodule.exports = {\n  plugins: [new VanillaExtractPlugin()]\n};\n```\n\n----------------------------------------\n\nTITLE: Vendor Prefix Implementation\nDESCRIPTION: Demonstrates how to use vendor-specific properties using PascalCase naming convention.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/styling.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { style } from '@vanilla-extract/css';\n\nexport const myStyle = style({\n  WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)'\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Vite Configuration with Vanilla Extract Plugin\nDESCRIPTION: Minimal configuration example showing how to add the vanilla-extract plugin to a Vite project. This basic setup enables vanilla-extract CSS processing with default options.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/vite.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n\nimport { vanillaExtractPlugin } from '@vanilla-extract/vite-plugin';\n\nexport default {\n  plugins: [vanillaExtractPlugin()]\n};\n```\n\n----------------------------------------\n\nTITLE: Runtime Implementation for styledDiv\nDESCRIPTION: A separate runtime module that accepts pre-generated class names rather than style objects. This is necessary because the runtime code will execute in the browser where static CSS generation is not possible.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/add-function-serializer.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// runtime.tsx\n\nimport React from 'react';\n\nexport function runtimeStyledDiv(className) {\n  return function Component(\n    props: React.ComponentProps<'div'>\n  ) {\n    return (\n      <div\n        {...props}\n        className={[props.className, className]\n          .filter(Boolean)\n          .join(' ')}\n      />\n    );\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Parcel Transformer for vanilla-extract\nDESCRIPTION: Command to install the Parcel transformer package as a development dependency. This package enables Parcel to process vanilla-extract CSS files.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/parcel.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @vanilla-extract/parcel-transformer\n```\n\n----------------------------------------\n\nTITLE: Using composeStyles with selectors in Vanilla Extract CSS\nDESCRIPTION: Demonstrates how to use the composeStyles function to combine multiple styles and then use the composed style in a selector. The composed classes are assigned a unique identifier class for internal processing.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/integration/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  style,\n  globalStyle,\n  composeStyles\n} from '@vanilla-extract/css';\n\nconst background = style({ background: 'mintcream' });\nconst padding = style({ padding: 12 });\n\nexport const container = composeStyles(\n  background,\n  padding\n);\n\nglobalStyle(`${container} *`, {\n  boxSizing: 'border-box'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Remix with Vanilla Extract Plugin\nDESCRIPTION: This code snippet demonstrates how to set up a Vite configuration for Remix that includes the Vanilla Extract plugin. It imports necessary modules, defines the configuration using defineConfig, and adds both the Remix and Vanilla Extract plugins to the plugins array.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/remix.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { unstable_vitePlugin as remix } from '@remix-run/dev';\nimport { vanillaExtractPlugin } from '@vanilla-extract/vite-plugin';\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n  plugins: [remix(), vanillaExtractPlugin()]\n});\n```\n\n----------------------------------------\n\nTITLE: Using assignInlineVars with String Templates\nDESCRIPTION: Example showing how assignInlineVars can be used in string templates. The function's toString method returns a valid style attribute value for use in template strings.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/dynamic/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport { vars } from './vars.css.ts';\n\ndocument.write(`\n  <section style=\"${assignInlineVars({\n    [vars.colors.brand]: 'pink',\n    [vars.colors.accent]: 'green',\n  })}\">\n    ...\n  </section>\n`);\n```\n\n----------------------------------------\n\nTITLE: Fixed CSS Mocking Configuration in Jest\nDESCRIPTION: Improved Jest configuration that selectively mocks CSS files based on folder location or custom extensions, avoiding conflicts with vanilla-extract .css.ts files.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/test-environments.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"jest\": {\n    \"moduleNameMapper\": {\n      \"my-css-folder/.*\\\\.css$\": \"<rootDir>/styleMock.js\",\n      \"\\\\.legacy\\\\.css$\": \"<rootDir>/styleMock.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Rollup Configuration with Vanilla Extract Plugin\nDESCRIPTION: Minimal Rollup configuration to integrate the vanilla-extract plugin. This setup enables processing of vanilla-extract CSS-in-TS files.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/rollup.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\nimport { vanillaExtractPlugin } from '@vanilla-extract/rollup-plugin';\n\nexport default {\n  plugins: [vanillaExtractPlugin()]\n};\n```\n\n----------------------------------------\n\nTITLE: Inline Theme Color Calculation with Polished in Treat\nDESCRIPTION: Example showing how inline color calculations were handled in Treat using the Polished library. This pattern needs to be modified for Vanilla Extract as theme variables are now CSS Variables that can't be manipulated directly with JavaScript functions.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/docs/treat-migration-guide.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { style } from 'treat';\nimport { lighten } from 'polished';\n\nexport const className = style((theme) => ({\n  background: lighten(0.2, theme.color.brand)\n}));\n```\n\n----------------------------------------\n\nTITLE: Version Number and Changes\nDESCRIPTION: Markdown formatted changelog entries tracking version updates and changes to the integration package\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/integration/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @vanilla-extract/integration\n\n## 8.0.1\n\n### Patch Changes\n\n- [#1545](https://github.com/vanilla-extract-css/vanilla-extract/pull/1545) [`965fd03`](https://github.com/vanilla-extract-css/vanilla-extract/commit/965fd03ff26dd324ec24734aa7700f1fe89bd483) Thanks [@askoufis](https://github.com/askoufis)! - Extend `esbuild` dependency range to include `0.25.x`\n\n## 8.0.0\n\n### Major Changes\n\n- [#1536](https://github.com/vanilla-extract-css/vanilla-extract/pull/1536) [`a8248be`](https://github.com/vanilla-extract-css/vanilla-extract/commit/a8248befac51aa51d771b9b22a46209b1fd1e3b3) Thanks [@askoufis](https://github.com/askoufis)! - Remove `createCompiler` function and `Compiler` and `CreateCompilerOptions` types\n\n  BREAKING CHANGE: These APIs have been moved to the new `@vanilla-extract/compiler` package\n```\n\n----------------------------------------\n\nTITLE: Disabling Runtime Styles in Tests\nDESCRIPTION: Code snippet showing how to disable runtime style generation in test environments to improve performance when styles aren't needed for testing.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/test-environments.md#2025-04-20_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// setupTests.ts\nimport '@vanilla-extract/css/disableRuntimeStyles';\n```\n\n----------------------------------------\n\nTITLE: Configuring Parcel for vanilla-extract CSS Files\nDESCRIPTION: Parcel configuration that sets up the transformer for .css.ts files. This configuration tells Parcel to use the vanilla-extract transformer when processing files with the .css.ts extension.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/parcel.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// .parcelrc\n{\n  \"transformers\": {\n    \"*.css.ts\": [\"@vanilla-extract/parcel-transformer\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Identifier Function for Vanilla Extract Rollup Plugin\nDESCRIPTION: Example of using a custom identifier function with the vanilla-extract Rollup plugin. This allows for creating custom naming patterns for generated CSS class names, keyframes, CSS variables, etc.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/rollup.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvanillaExtractPlugin({\n  identifiers: ({ hash }) => `prefix_${hash}`\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Vanilla Extract CSS Files\nDESCRIPTION: Webpack configuration example showing how to handle vanilla.css files with url handling disabled and proper loader setup.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/docs/treat-migration-guide.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        oneOf: [\n          {\n            test: /\\.vanilla\\.css$/i,\n            use: [\n              MiniCssExtractPlugin.loader,\n              {\n                loader: 'css-loader',\n                options: { url: false }\n              }\n            ]\n          },\n          {\n            use: [MiniCssExtractPlugin.loader, 'css-loader']\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new VanillaExtractPlugin(),\n    new MiniCssExtractPlugin()\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Sprinkles Installation Command\nDESCRIPTION: NPM installation command for adding Sprinkles to a project.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @vanilla-extract/sprinkles\n```\n\n----------------------------------------\n\nTITLE: Multiple Font Face Rules Example in TypeScript\nDESCRIPTION: Demonstrates using the fontFace API to declare multiple font face rules with different weights for the Gentium font family\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/css/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fontFace, style } from '@vanilla-extract/css';\n\nconst gentium = fontFace([\n  {\n    src: 'local(\"Gentium\")',\n    fontWeight: 'normal'\n  },\n  {\n    src: 'local(\"Gentium Bold\")', \n    fontWeight: 'bold'\n  }\n]);\n\nexport const font = style({\n  fontFamily: gentium\n});\n```\n\n----------------------------------------\n\nTITLE: Documenting Internal Package Name in Markdown\nDESCRIPTION: This snippet identifies the name of an internal package used in the Vanilla Extract project. It emphasizes that the package is not intended for public use.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/integration/README.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @vanilla-extract/integration\n```\n\n----------------------------------------\n\nTITLE: Using normalizePath Function in TypeScript\nDESCRIPTION: Example showing how to use the normalizePath function that converts path separators to forward slashes, exported from @vanilla-extract/integration.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/integration/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { normalizePath } from '@vanilla-extract/integration';\n\nnormalizePath('foo\\\\bar'); // 'foo/bar'\nnormalizePath('foo/bar'); // 'foo/bar'\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby for vanilla-extract\nDESCRIPTION: Basic configuration to add the vanilla-extract plugin to your Gatsby project's configuration file, enabling the CSS processing capabilities.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/gatsby.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// gatsby-config.js\n\nmodule.exports = {\n  plugins: [`gatsby-plugin-vanilla-extract`]\n};\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration Template\nDESCRIPTION: Template showing where to add configuration options for the vanilla-extract esbuild plugin.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/esbuild.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  vanillaExtractPlugin\n} = require('@vanilla-extract/esbuild-plugin');\n\nrequire('esbuild').build({\n  plugins: [\n    vanillaExtractPlugin({\n      // configuration\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Initial styledDiv Implementation with Serialization Issues\nDESCRIPTION: A naive implementation of the styledDiv utility that would fail during build because the returned function cannot be serialized. It directly uses vanilla-extract/css which can't generate CSS files at runtime.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/api/add-function-serializer.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// index.tsx\n\nimport React from 'react';\nimport { style } from '@vanilla-extract/css';\n\nexport function styledDiv(styles) {\n  const className = style(styles);\n\n  return function Component(\n    props: React.ComponentProps<'div'>\n  ) {\n    return (\n      <div\n        {...props}\n        className={[props.className, className]\n          .filter(Boolean)\n          .join(' ')}\n      />\n    );\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Jest Transformer for Vanilla Extract\nDESCRIPTION: Installation command for the Jest transformer package that enables vanilla-extract styles to work in Jest environments.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/test-environments.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @vanilla-extract/jest-transform\n```\n\n----------------------------------------\n\nTITLE: CSS Processing Configuration\nDESCRIPTION: Example showing how to configure CSS processing with autoprefixer using the processCss option.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/esbuild.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  vanillaExtractPlugin\n} = require('@vanilla-extract/esbuild-plugin');\nconst postcss = require('postcss');\nconst autoprefixer = require('autoprefixer');\n\nasync function processCss(css) {\n  const result = await postcss([autoprefixer]).process(\n    css,\n    {\n      from: undefined /* suppress source map warning */\n    }\n  );\n\n  return result.css;\n}\n\nrequire('esbuild')\n  .build({\n    entryPoints: ['app.ts'],\n    bundle: true,\n    plugins: [\n      vanillaExtractPlugin({\n        processCss\n      })\n    ],\n    outfile: 'out.js'\n  })\n  .catch(() => process.exit(1));\n```\n\n----------------------------------------\n\nTITLE: Installing Vanilla Extract Recipes Package\nDESCRIPTION: Command to install the @vanilla-extract/recipes package via npm, which is required to use the recipes functionality.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/recipes.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @vanilla-extract/recipes\n```\n\n----------------------------------------\n\nTITLE: Bundling TypeScript declaration files\nDESCRIPTION: Version 0.1.3 introduced bundling of TypeScript declaration files (.d.ts) during package builds to improve type information distribution.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/utils/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nBundle TypeScript declaration files (`.d.ts`) when building packages\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest for Vanilla Extract\nDESCRIPTION: Vitest configuration that adds the vanilla-extract Vite plugin, enabling proper processing of .css.ts files during tests.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/test-environments.md#2025-04-20_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// vitest.config.ts\nimport { defineConfig } from 'vitest/config';\nimport { vanillaExtractPlugin } from '@vanilla-extract/vite-plugin';\n\nexport default defineConfig({\n  plugins: [vanillaExtractPlugin()]\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Vanilla Extract Rollup Plugin\nDESCRIPTION: Command to install the vanilla-extract Rollup plugin as a development dependency using npm.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/rollup.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @vanilla-extract/rollup-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing Vanilla Extract Webpack Plugin\nDESCRIPTION: Command to install the vanilla-extract webpack plugin as a development dependency.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/webpack.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @vanilla-extract/webpack-plugin\n```\n\n----------------------------------------\n\nTITLE: Package Version Updates in Markdown\nDESCRIPTION: Changelog entries documenting version updates and dependency changes across Vanilla Extract CSS packages\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/tests/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`176c026`](https://github.com/vanilla-extract-css/vanilla-extract/commit/176c026fd72bda3fc969ba0d91494540f88488cb), [`98f8b03`](https://github.com/vanilla-extract-css/vanilla-extract/commit/98f8b0387d661b77705d2cd83ab3095434e1223e), [`98f8b03`](https://github.com/vanilla-extract-css/vanilla-extract/commit/98f8b0387d661b77705d2cd83ab3095434e1223e), [`8ed77c2`](https://github.com/vanilla-extract-css/vanilla-extract/commit/8ed77c23ac004cd6e66b27f36100d5d5d014bc39), [`0906063`](https://github.com/vanilla-extract-css/vanilla-extract/commit/09060639099ec580ac90cac48c3b79f0177ecfcd)]]:\n  - @vanilla-extract/css@1.9.2\n  - @vanilla-extract/sprinkles@1.5.1\n  - @vanilla-extract/dynamic@2.0.3\n  - @vanilla-extract/recipes@0.3.0\n  - @vanilla-extract-private/test-helpers@0.0.31\n```\n\n----------------------------------------\n\nTITLE: Using Vanilla Extract styles in Astro components\nDESCRIPTION: An Astro component example showing how to import and apply styles created with Vanilla Extract. This demonstrates the integration between the styling system and Astro templates.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/astro.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n//  Button.astro\n\n---\nimport { button } from './button.css'\n---\n\n<button class={button}>Click Me!</button>\n```\n\n----------------------------------------\n\nTITLE: Advanced Sprinkles Usage with Custom Styles\nDESCRIPTION: Shows how to combine sprinkles with custom styles using vanilla-extract's style function.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\nimport { style } from '@vanilla-extract/css';\nimport { sprinkles } from './sprinkles.css.ts';\n\nexport const container = style([\n  sprinkles({\n    display: 'flex',\n    padding: 'small'\n  }),\n  {\n    ':hover': {\n      outline: '2px solid currentColor'\n    }\n  }\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing vanilla-extract with Gatsby\nDESCRIPTION: Commands for installing the necessary packages to integrate vanilla-extract CSS with Gatsby, including the core CSS package, webpack plugin, and Gatsby plugin.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/gatsby.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @vanilla-extract/css @vanilla-extract/webpack-plugin gatsby-plugin-vanilla-extract\n```\n\n----------------------------------------\n\nTITLE: Defining ResponsiveValue Type with ConditionalValue in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom ResponsiveValue type using ConditionalValue from @vanilla-extract/sprinkles. It's typically defined in a sprinkles.css.ts file and exported for use in other parts of the application.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/sprinkles/README.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  defineProperties,\n  ConditionalValue\n} from '@vanilla-extract/sprinkles';\n\nconst responsiveProperties = defineProperties({\n  /* ... */\n});\n\nexport type ResponsiveValue<Value extends string | number> =\n  ConditionalValue<typeof responsiveProperties, Value>;\n```\n\n----------------------------------------\n\nTITLE: Installing Vanilla Extract CSS with npm\nDESCRIPTION: Command to install the @vanilla-extract/css package using npm. This is the core package needed to start using Vanilla Extract CSS in your project.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/getting-started.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @vanilla-extract/css\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Automatic Debug IDs in CSS Style Files\nDESCRIPTION: This code example demonstrates how automatic debug IDs provide more meaningful names for CSS identifiers during development. The IDs are derived from the source code, making debugging easier.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/vite-plugin/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// styles.css.ts\n\n// redBox ~= 'styles_redBox_asdfgj'\nconst redBox = style({\n  background: 'red'\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from Inline Color Calculations to Pre-defined Theme Variables\nDESCRIPTION: Shows how to migrate from Treat's inline color calculations to using pre-defined CSS Variables in Vanilla Extract. This example replaces a Polished lighten calculation with a reference to a pre-calculated theme variable.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/docs/treat-migration-guide.md#2025-04-20_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n-import { style } from 'treat';\n-import { lighten } from 'polished';\n+import { style } from '@vanilla-extract/css';\n+import { vars } from '../vars.css';\n\n-export const className = style(theme => ({\n-  background: lighten(0.2, theme.color.brand)\n-}));\n+export const className = style({\n+  background: vars.color.brandLight\n+});\n```\n\n----------------------------------------\n\nTITLE: Installing Sprinkles Package with NPM\nDESCRIPTION: Command to install the Sprinkles package, which is an optional add-on for vanilla-extract CSS that provides zero-runtime atomic CSS functionality.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/sprinkles.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @vanilla-extract/sprinkles\n```\n\n----------------------------------------\n\nTITLE: Running a Vanilla Extract Benchmark with tsx\nDESCRIPTION: Command to execute a benchmark script using tsx. This command specifically runs the css-var-string-literal.ts benchmark file that tests performance of Vanilla Extract's CSS variable APIs.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/benchmarks/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm tsx ./src/css-var-string-literal.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Vanilla Extract dependencies for Astro\nDESCRIPTION: Commands to install the core Vanilla Extract CSS package and the Vite plugin required for Astro integration.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/integrations/astro.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @vanilla-extract/css\nnpm install @vanilla-extract/vite-plugin --save-dev\n```\n\n----------------------------------------\n\nTITLE: Transpiling code for esmodules target\nDESCRIPTION: In version 0.1.2, code transpilation was updated to meet the esmodules target, improving browser compatibility while noting potential issues for older browsers like IE 11.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/utils/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nTranspile code to meet [esmodules target](https://babeljs.io/docs/en/babel-preset-env#targetsesmodules)\n```\n\n----------------------------------------\n\nTITLE: Adding types field to package.json\nDESCRIPTION: In version 0.1.4, a 'types' field was added to the package.json file to improve TypeScript integration.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/utils/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAdd `types` field to `package.json`\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry in Markdown\nDESCRIPTION: A structured changelog documenting version updates from 0.0.1 to 0.0.6, tracking patch changes and dependency updates to @vanilla-extract/css package.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/examples/remix/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# vanilla-extract-example-remix\n\n## 0.0.6\n\n### Patch Changes\n\n- Updated dependencies [[`6432199fa0717f424fb3f45fbe36410b03b01c1c`]]:\n  - @vanilla-extract/css@1.15.5\n\n## 0.0.5\n\n### Patch Changes\n\n- Updated dependencies [[`61878f5fb21a33190ef242551c639e216ba4748a`]]:\n  - @vanilla-extract/css@1.15.4\n\n## 0.0.4\n\n### Patch Changes\n\n- Updated dependencies [[`b86f3f59c86420e12593996a14f8cdb5db2f7c25`]]:\n  - @vanilla-extract/css@1.15.3\n\n## 0.0.3\n\n### Patch Changes\n\n- Updated dependencies [[`b8a99e4980710a34692034d5da43e584edbc3d17`]]:\n  - @vanilla-extract/css@1.15.2\n\n## 0.0.2\n\n### Patch Changes\n\n- Updated dependencies [[`e58cf9013c6f6cdfacb2a7936b3354e71138e9fb`]]:\n  - @vanilla-extract/css@1.15.1\n\n## 0.0.1\n\n### Patch Changes\n\n- Updated dependencies [[`df9fe3ee3fc0057bc14a2333a405f8229f80c214`]]:\n  - @vanilla-extract/css@1.15.0\n```\n\n----------------------------------------\n\nTITLE: Adding support for calc nesting in JavaScript\nDESCRIPTION: Version 0.1.1 introduced support for nested calc operations without requiring manual stringification, as shown in the diff example.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/utils/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n-  calc('10px').add(calc('20px').subtract('4px').toString())\n+  calc('10px').add(calc('20px').subtract('4px'))\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Import Example\nDESCRIPTION: Example showing how to import and use walkObject function from @vanilla-extract/private with module namespace objects, which previously caused runtime errors in vite-node.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/private/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walkObject } from '@vanilla-extract/private';\nimport * as ns from './foo';\n\n// Runtime error in `vite-node`\nwalkObject(ns, myMappingFunction);\n```\n\n----------------------------------------\n\nTITLE: Major Version 6.0.0 Changes\nDESCRIPTION: Major changes including plugin rename and compile parameter updates. Introduces new transform functions.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/integration/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 6.0.0\n\n### Major Changes\n\n- [#827](https://github.com/vanilla-extract-css/vanilla-extract/pull/827) [`9cfb9a1`](https://github.com/vanilla-extract-css/vanilla-extract/commit/9cfb9a196fb84bd9d7984c1370488fd68e7ea1d0) Thanks [@mattcompiles](https://github.com/mattcompiles)! - `vanillaExtractFilescopePlugin` has been renamed to `vanillaExtractTransformPlugin`\n\n* [#827](https://github.com/vanilla-extract-css/vanilla-extract/pull/827) [`9cfb9a1`](https://github.com/vanilla-extract-css/vanilla-extract/commit/9cfb9a196fb84bd9d7984c1370488fd68e7ea1d0) Thanks [@mattcompiles](https://github.com/mattcompiles)! - `compile` now expects a valid `identOption` parameter\n\n### Minor Changes\n\n- [#827](https://github.com/vanilla-extract-css/vanilla-extract/pull/827) [`9cfb9a1`](https://github.com/vanilla-extract-css/vanilla-extract/commit/9cfb9a196fb84bd9d7984c1370488fd68e7ea1d0) Thanks [@mattcompiles](https://github.com/mattcompiles)! - Add `transform` and `transformSync` functions\n\n  The transform APIs can be used to append filescopes and automatic debug IDs to `.css.ts` files.\n```\n\n----------------------------------------\n\nTITLE: Versioning and Dependency Updates\nDESCRIPTION: Latest patch changes including updates to async Babel transform method and dependency version updates.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/packages/integration/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#869](https://github.com/vanilla-extract-css/vanilla-extract/pull/869) [`2d08761`](https://github.com/vanilla-extract-css/vanilla-extract/commit/2d08761598668c0e7066837ccb0be7b4d5637701) Thanks [@mrm007](https://github.com/mrm007)! - Use correct async Babel transform method in integration transform\n\n- Updated dependencies [[`176c026`](https://github.com/vanilla-extract-css/vanilla-extract/commit/176c026fd72bda3fc969ba0d91494540f88488cb), [`98f8b03`](https://github.com/vanilla-extract-css/vanilla-extract/commit/98f8b0387d661b77705d2cd83ab3095434e1223e), [`8ed77c2`](https://github.com/vanilla-extract-css/vanilla-extract/commit/8ed77c23ac004cd6e66b27f36100d5d5d014bc39)]:\n  - @vanilla-extract/css@1.9.2\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Content\nDESCRIPTION: A markdown file tracking version history and dependency updates for a vanilla-extract webpack React example project. Documents multiple patch version updates and their associated dependency changes.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/examples/webpack-react/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# vanilla-extract-example-webpack-react\n\n## 0.0.34\n\n### Patch Changes\n\n- Updated dependencies [[`6432199fa0717f424fb3f45fbe36410b03b01c1c`]]:\n  - @vanilla-extract/css@1.15.5\n  - @vanilla-extract/webpack-plugin@2.3.13\n  - @vanilla-extract/sprinkles@1.6.3\n```\n\n----------------------------------------\n\nTITLE: Problematic CSS Mocking Configuration in Jest\nDESCRIPTION: Example of a Jest configuration that causes issues with vanilla-extract by mocking all CSS files, including .css.ts files that should be processed by the transformer.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/test-environments.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"jest\": {\n    \"moduleNameMapper\": {\n      // ❌ Breaks .css.ts imports\n      \"\\\\.css$\": \"<rootDir>/styleMock.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Vanilla Extract CSS Files\nDESCRIPTION: Jest configuration that sets up the transformer for .css.ts files, allowing vanilla-extract styles to be processed correctly during tests.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/test-environments.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// jest.config.js\n{\n  \"transform\": {\n    \"\\\\.css\\\\.ts$\": \"@vanilla-extract/jest-transform\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vite Plugin for Vanilla Extract\nDESCRIPTION: Installation command for the Vite plugin that enables vanilla-extract in Vitest environments not already using Vite.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/overview/test-environments.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @vanilla-extract/vite-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing CSS Utils Package with npm\nDESCRIPTION: Command to install the @vanilla-extract/css-utils package using npm.\nSOURCE: https://github.com/vanilla-extract-css/vanilla-extract/blob/master/site/docs/packages/css-utils.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @vanilla-extract/css-utils\n```"
  }
]