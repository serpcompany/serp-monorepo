[
  {
    "owner": "fastify",
    "repo": "fastify-rate-limit",
    "content": "TITLE: Configuring Route-Specific Rate Limiting in Fastify\nDESCRIPTION: This snippet demonstrates how to configure rate limiting at the route level in Fastify. It shows global plugin registration with custom options and various route configurations, including different rate limits, allowlists, and callbacks.\nSOURCE: https://github.com/fastify/fastify-rate-limit/blob/main/README.md#2025-04-19_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport Fastify from 'fastify'\n\nconst fastify = Fastify()\nawait fastify.register(import('@fastify/rate-limit'),\n  {\n    global : false, // don't apply these settings to all the routes of the context\n    max: 3000, // default global max rate limit\n    allowList: ['192.168.0.10'], // global allowlist access.\n    redis: redis, // custom connection to redis\n  })\n\n// add a limited route with this configuration plus the global one\nfastify.get('/', {\n  config: {\n    rateLimit: {\n      max: 3,\n      timeWindow: '1 minute'\n    }\n  }\n}, (request, reply) => {\n  reply.send({ hello: 'from ... root' })\n})\n\n// add a limited route with this configuration plus the global one\nfastify.get('/private', {\n  config: {\n    rateLimit: {\n      max: 3,\n      timeWindow: '1 minute'\n    }\n  }\n}, (request, reply) => {\n  reply.send({ hello: 'from ... private' })\n})\n\n// this route doesn't have any rate limit\nfastify.get('/public', (request, reply) => {\n  reply.send({ hello: 'from ... public' })\n})\n\n// add a limited route with this configuration plus the global one\nfastify.get('/public/sub-rated-1', {\n  config: {\n    rateLimit: {\n      timeWindow: '1 minute',\n      allowList: ['127.0.0.1'],\n      onExceeding: function (request, key) {\n        console.log('callback on exceeding ... executed before response to client')\n      },\n      onExceeded: function (request, key) {\n        console.log('callback on exceeded ... to black ip in security group for example, request is give as argument')\n      }\n    }\n  }\n}, (request, reply) => {\n  reply.send({ hello: 'from sub-rated-1 ... using default max value ... ' })\n})\n\n// group routes and add a rate limit\nfastify.get('/otp/send', {\n  config: {\n    rateLimit: {\n      max: 3,\n      timeWindow: '1 minute',\n      groupId:\"OTP\"\n    }\n  }\n}, (request, reply) => {\n  reply.send({ hello: 'from ... grouped rate limit' })\n})\n\nfastify.get('/otp/resend', {\n  config: {\n    rateLimit: {\n      max: 3,\n      timeWindow: '1 minute',\n      groupId:\"OTP\"\n    }\n  }\n}, (request, reply) => {\n  reply.send({ hello: 'from ... grouped rate limit' })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Rate Limiting with Route Overrides in Fastify\nDESCRIPTION: This snippet shows how to set up a global rate limiter in Fastify and then override or disable it on specific routes. It demonstrates global configuration and route-specific customizations.\nSOURCE: https://github.com/fastify/fastify-rate-limit/blob/main/README.md#2025-04-19_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport Fastify from 'fastify'\n\nconst fastify = Fastify()\nawait fastify.register(import('@fastify/rate-limit'), {\n  max: 100,\n  timeWindow: '1 minute'\n})\n\n// add a limited route with global config\nfastify.get('/', (request, reply) => {\n  reply.send({ hello: 'from ... rate limited root' })\n})\n\n// this route doesn't have any rate limit\nfastify.get('/public', {\n  config: {\n    rateLimit: false\n  }\n}, (request, reply) => {\n  reply.send({ hello: 'from ... public' })\n})\n\n// add a limited route with global config and different max\nfastify.get('/private', {\n  config: {\n    rateLimit: {\n      max: 9\n    }\n  }\n}, (request, reply) => {\n  reply.send({ hello: 'from ... private and more limited' })\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Fastify Rate Limit Plugin with Configuration Options\nDESCRIPTION: Example showing how to register the @fastify/rate-limit plugin with various configuration options including rate limits, time windows, caching, and custom headers.\nSOURCE: https://github.com/fastify/fastify-rate-limit/blob/main/README.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait fastify.register(import('@fastify/rate-limit'), {\n  global : false, // default true\n  max: 3, // default 1000\n  ban: 2, // default -1\n  timeWindow: 5000, // default 1000 * 60\n  hook: 'preHandler', // default 'onRequest'\n  cache: 10000, // default 5000\n  allowList: ['127.0.0.1'], // default []\n  redis: new Redis({ host: '127.0.0.1' }), // default null\n  nameSpace: 'teste-ratelimit-', // default is 'fastify-rate-limit-'\n  continueExceeding: true, // default false\n  skipOnError: true, // default false\n  keyGenerator: function (request) { /* ... */ }, // default (request) => request.ip\n  errorResponseBuilder: function (request, context) { /* ... */},\n  enableDraftSpec: true, // default false. Uses IEFT draft header standard\n  addHeadersOnExceeding: { // default show all the response headers when rate limit is not reached\n    'x-ratelimit-limit': true,\n    'x-ratelimit-remaining': true,\n    'x-ratelimit-reset': true\n  },\n  addHeaders: { // default show all the response headers when rate limit is reached\n    'x-ratelimit-limit': true,\n    'x-ratelimit-remaining': true,\n    'x-ratelimit-reset': true,\n    'retry-after': true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Fastify Rate Limit Implementation\nDESCRIPTION: Example showing how to register and configure the rate limit plugin with basic options. Sets max requests to 100 within a 1-minute window.\nSOURCE: https://github.com/fastify/fastify-rate-limit/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Fastify from 'fastify'\n\nconst fastify = Fastify()\nawait fastify.register(import('@fastify/rate-limit'), {\n  max: 100,\n  timeWindow: '1 minute'\n})\n\nfastify.get('/', (request, reply) => {\n  reply.send({ hello: 'world' })\n})\n\nfastify.listen({ port: 3000 }, err => {\n  if (err) throw err\n  console.log('Server listening at http://localhost:3000')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Store for Rate Limiting\nDESCRIPTION: Example of implementing a custom store for rate limiting that allows using custom storage mechanisms beyond the default in-memory store, with support for child stores for route-specific limits.\nSOURCE: https://github.com/fastify/fastify-rate-limit/blob/main/README.md#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomStore (options) {\n  this.options = options\n  this.current = 0\n}\n\nCustomStore.prototype.incr = function (key, cb) {\n  const timeWindow = this.options.timeWindow\n  this.current++\n  cb(null, { current: this.current, ttl: timeWindow - (this.current * 1000) })\n}\n\nCustomStore.prototype.child = function (routeOptions) {\n  // We create a merged copy of the current parent parameters with the specific\n  // route parameters and pass them into the child store.\n  const childParams = Object.assign(this.options, routeOptions)\n  const store = new CustomStore(childParams)\n  // Here is where you may want to do some custom calls on the store with the information\n  // in routeOptions first...\n  // store.setSubKey(routeOptions.method + routeOptions.url)\n  return store\n}\n\nawait fastify.register(import('@fastify/rate-limit'), {\n  /* ... */\n  store: CustomStore\n})\n```\n\n----------------------------------------\n\nTITLE: Custom keyGenerator Implementation for Rate Limit\nDESCRIPTION: Example of implementing a custom keyGenerator function to determine the client identifier for rate limiting based on various HTTP headers or session values.\nSOURCE: https://github.com/fastify/fastify-rate-limit/blob/main/README.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait fastify.register(import('@fastify/rate-limit'), {\n  /* ... */\n  keyGenerator: function (request) {\n    return request.headers['x-real-ip'] // nginx\n    || request.headers['x-client-ip'] // apache\n    || request.headers['x-forwarded-for'] // use this only if you trust the header\n    || request.session.username // you can limit based on any session value\n    || request.ip // fallback to default\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Hook for Rate Limiting After Authentication\nDESCRIPTION: Example showing how to use a custom hook for rate limiting after authentication has been performed, allowing rate limits to be applied based on authenticated user IDs.\nSOURCE: https://github.com/fastify/fastify-rate-limit/blob/main/README.md#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait fastify.register(import('@fastify/rate-limit'), {\n  hook: 'preHandler',\n  keyGenerator: function (request) {\n    return request.userId || request.ip\n  }\n})\n\nfastify.decorateRequest('userId', '')\nfastify.addHook('preHandler', async function (request) {\n  const { userId } = request.query\n  if (userId) {\n    request.userId = userId\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Error Response Builder for Rate Limit Exceeded\nDESCRIPTION: Example of implementing a custom error response builder function that generates a tailored response when a client exceeds their rate limit, including customized message and expiration details.\nSOURCE: https://github.com/fastify/fastify-rate-limit/blob/main/README.md#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait fastify.register(import('@fastify/rate-limit'), {\n  /* ... */\n  errorResponseBuilder: function (request, context) {\n    return {\n      statusCode: 429,\n      error: 'Too Many Requests',\n      message: `I only allow ${context.max} requests per ${context.after} to this Website. Try again soon.`,\n      date: Date.now(),\n      expiresIn: context.ttl // milliseconds\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Max Request Limit Based on Client Key\nDESCRIPTION: Example showing how to implement a variable maximum request limit that changes based on the request and/or client key within the same time window.\nSOURCE: https://github.com/fastify/fastify-rate-limit/blob/main/README.md#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// In the same timeWindow, the max value can change based on request and/or key like this\nfastify.register(rateLimit, {\n  /* ... */\n  keyGenerator (request) { return request.headers['service-key'] },\n  max: async (request, key) => { return key === 'pro' ? 3 : 2 },\n  timeWindow: 1000\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Allowlist Function for Rate Limit Bypass\nDESCRIPTION: Example showing how to implement a dynamic allowlist function that determines whether a request should bypass rate limiting based on header values.\nSOURCE: https://github.com/fastify/fastify-rate-limit/blob/main/README.md#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait fastify.register(import('@fastify/rate-limit'), {\n  /* ... */\n  allowList: function (request, key) {\n    return request.headers['x-app-client-id'] === 'internal-usage'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting Not Found Handler\nDESCRIPTION: Example of implementing rate limiting for 404 responses to prevent URL guessing attacks\nSOURCE: https://github.com/fastify/fastify-rate-limit/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = Fastify()\nawait fastify.register(rateLimit, { global: true, max: 2, timeWindow: 1000 })\nfastify.setNotFoundHandler({\n  preHandler: fastify.rateLimit()\n}, function (request, reply) {\n  reply.code(404).send({ hello: 'world' })\n})\n```\n\n----------------------------------------\n\nTITLE: Customized Not Found Rate Limiting\nDESCRIPTION: Example showing how to customize rate limiting parameters specifically for 404 handlers\nSOURCE: https://github.com/fastify/fastify-rate-limit/blob/main/README.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = Fastify()\nawait fastify.register(rateLimit, { global: true, max: 2, timeWindow: 1000 })\nfastify.setNotFoundHandler({\n  preHandler: fastify.rateLimit({\n    max: 4,\n    timeWindow: 500\n  })\n}, function (request, reply) {\n  reply.code(404).send({ hello: 'world' })\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handler for Rate Limiting\nDESCRIPTION: Example showing how to customize the rate limit error response using a custom error handler\nSOURCE: https://github.com/fastify/fastify-rate-limit/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.setErrorHandler(function (error, request, reply) {\n  if (error.statusCode === 429) {\n    reply.code(429)\n    error.message = 'You hit the rate limit! Slow down please!'\n  }\n  reply.send(error)\n})\n```\n\n----------------------------------------\n\nTITLE: Using onExceeded Callback for Rate Limit Breach Handling\nDESCRIPTION: Example showing how to use the onExceeded callback which is executed before responding to the client when they have exceeded their request limit.\nSOURCE: https://github.com/fastify/fastify-rate-limit/blob/main/README.md#2025-04-19_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nawait fastify.register(import('@fastify/rate-limit'), {\n  /* */\n  onExceeded: function (req, key) {\n    console.log('callback on exceeded ... executed before response to client')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using onBanReach Callback for Ban Limit Notifications\nDESCRIPTION: Example showing how to use the onBanReach callback which is executed when a client reaches the ban limit by repeatedly exceeding their rate limit.\nSOURCE: https://github.com/fastify/fastify-rate-limit/blob/main/README.md#2025-04-19_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nawait fastify.register(import('@fastify/rate-limit'), {\n  /* */\n  ban: 10,\n  onBanReach: function (req, key) {\n    console.log('callback on exceeded ban limit')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using onExceeding Callback for Rate Limit Notifications\nDESCRIPTION: Example showing how to use the onExceeding callback which is executed before responding to the client when their request count is approaching the limit.\nSOURCE: https://github.com/fastify/fastify-rate-limit/blob/main/README.md#2025-04-19_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait fastify.register(import('@fastify/rate-limit'), {\n  /* */\n  onExceeding: function (req, key) {\n    console.log('callback on exceeding ... executed before response to client')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Error Response Format\nDESCRIPTION: Example of the default error response when rate limit is exceeded\nSOURCE: https://github.com/fastify/fastify-rate-limit/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  statusCode: 429,\n  error: 'Too Many Requests',\n  message: 'Rate limit exceeded, retry in 1 minute'\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fastify Rate Limit Plugin\nDESCRIPTION: Command to install the @fastify/rate-limit plugin via npm\nSOURCE: https://github.com/fastify/fastify-rate-limit/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @fastify/rate-limit\n```"
  }
]