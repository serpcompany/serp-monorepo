[
  {
    "owner": "blockfrost",
    "repo": "blockfrost-js",
    "content": "TITLE: Using Cardano SDK - example\nDESCRIPTION: This example demonstrates the usage of the Cardano API, fetching the latest block, network information, the latest epoch, health status, address details, and pool data. It showcases how to use the methods of the `BlockFrostAPI` object and handles potential errors. It leverages `async/await` for asynchronous operations.\nSOURCE: https://github.com/blockfrost/blockfrost-js/blob/master/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst Blockfrost = require('@blockfrost/blockfrost-js');\n// import { BlockFrostAPI } from '@blockfrost/blockfrost-js'; // using import syntax\n\nconst API = new Blockfrost.BlockFrostAPI({\n  projectId: 'YOUR API KEY HERE', // see: https://blockfrost.io\n});\n\nasync function runExample() {\n  try {\n    const latestBlock = await API.blocksLatest();\n    const networkInfo = await API.network();\n    const latestEpoch = await API.epochsLatest();\n    const health = await API.health();\n    const address = await API.addresses(\n      'addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz',\n    );\n    const pools = await API.pools({ page: 1, count: 10, order: 'asc' });\n\n    console.log('pools', pools);\n    console.log('address', address);\n    console.log('networkInfo', networkInfo);\n    console.log('latestEpoch', latestEpoch);\n    console.log('latestBlock', latestBlock);\n    console.log('health', health);\n  } catch (err) {\n    console.log('error', err);\n  }\n}\n\nrunExample();\n```\n\n----------------------------------------\n\nTITLE: Initializing Blockfrost API (Cardano)\nDESCRIPTION: This code initializes the Blockfrost API for Cardano interactions using the `BlockFrostAPI` class.  It requires a project ID, which should be obtained from blockfrost.io. It also explains various options such as `network`, `rateLimiter`, `requestTimeout`, `retrySettings`, `debug`, `customBackend`, `version` and `gotOptions`. The `projectId` is the only mandatory configuration.\nSOURCE: https://github.com/blockfrost/blockfrost-js/blob/master/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst Blockfrost = require('@blockfrost/blockfrost-js');\n// import { BlockFrostAPI } from '@blockfrost/blockfrost-js'; // using import syntax\n\nconst API = new Blockfrost.BlockFrostAPI({\n  projectId: 'YOUR API KEY HERE', // see: https://blockfrost.io\n  // For a list of all options see section below\n});\n```\n\n----------------------------------------\n\nTITLE: Using IPFS SDK - example\nDESCRIPTION: This example demonstrates how to use the IPFS API by adding and pinning a file (img.svg in this case). It showcases the basic operations:  `add` to upload the file to IPFS, and `pin` to pin the uploaded file. It also includes error handling with a `try...catch` block.\nSOURCE: https://github.com/blockfrost/blockfrost-js/blob/master/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst Blockfrost = require('@blockfrost/blockfrost-js');\n// import { BlockFrostIPFS } from '@blockfrost/blockfrost-js'; // using import syntax\n\nconst IPFS = new Blockfrost.BlockFrostIPFS({\n  projectId: 'YOUR IPFS KEY HERE', // see: https://blockfrost.io\n});\n\nasync function runExample() {\n  try {\n    const added = await IPFS.add(`${__dirname}/img.svg`);\n    console.log('added', added);\n\n    const pinned = await IPFS.pin(added.ipfs_hash);\n    console.log('pinned', pinned);\n  } catch (err) {\n    console.log('error', err);\n  }\n}\n\nrunExample();\n```\n\n----------------------------------------\n\nTITLE: Initializing Blockfrost API (IPFS)\nDESCRIPTION: This code initializes the Blockfrost IPFS API using the `BlockFrostIPFS` class.  It also requires a project ID, obtainable from blockfrost.io. This is separate from the Cardano API and provides access to IPFS functionalities. The `projectId` is required.\nSOURCE: https://github.com/blockfrost/blockfrost-js/blob/master/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst Blockfrost = require('@blockfrost/blockfrost-js');\n// import { BlockFrostIPFS } from '@blockfrost/blockfrost-js'; // using import syntax\n\nconst IPFS = new Blockfrost.BlockFrostIPFS({\n  projectId: 'YOUR IPFS KEY HERE', // see: https://blockfrost.io\n});\n```\n\n----------------------------------------\n\nTITLE: Handling BlockfrostServerError\nDESCRIPTION: This code snippet illustrates error handling for `BlockfrostServerError`. It checks if the error is an instance of `BlockfrostServerError` and specifically looks for a 404 status code, which commonly occurs when querying non-existent resources. Other errors are re-thrown.\nSOURCE: https://github.com/blockfrost/blockfrost-js/blob/master/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Example demonstrating catching BlockfrostServerError\ntry {\n  const address = await API.addresses('totallyValidAddress');\n} catch (error) {\n  if (\n    error instanceof Blockfrost.BlockfrostServerError &&\n    error.status_code === 404\n  ) {\n    // address was not used before, but most likely we don't want to throw an error\n    console.log(\"Address is totally empty! But that's ok!\");\n  } else {\n    // rethrow other errors\n    throw error;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling BlockfrostClientError\nDESCRIPTION: This snippet demonstrates how to catch `BlockfrostClientError`, typically indicating network-related problems.  It checks if the error is an instance of `BlockfrostClientError` and logs an appropriate message. The code then optionally re-throws the error based on the application's requirements.\nSOURCE: https://github.com/blockfrost/blockfrost-js/blob/master/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Example demonstrating catching a network-related client error\ntry {\n  const address = await API.addresses('totallyValidAddress');\n} catch (error) {\n  if (error instanceof Blockfrost.BlockfrostClientError) {\n    console.log('Oops, error during sending the request');\n  }\n  // Depending on your use case you may want to rethrow the error\n  throw error;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Blockfrost SDK via npm\nDESCRIPTION: This snippet demonstrates the installation of the Blockfrost.io JavaScript SDK using npm.  It specifies the package name and command to add the library to your project's dependencies. This is a prerequisite to using the SDK in your JavaScript or TypeScript code.\nSOURCE: https://github.com/blockfrost/blockfrost-js/blob/master/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm i @blockfrost/blockfrost-js\n```\n\n----------------------------------------\n\nTITLE: Installing Blockfrost SDK via Yarn\nDESCRIPTION: This snippet shows the installation of the Blockfrost.io JavaScript SDK using Yarn. It indicates the package name and the appropriate Yarn command. This is an alternative to npm and allows you to import the Blockfrost SDK into your project.\nSOURCE: https://github.com/blockfrost/blockfrost-js/blob/master/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nyarn add @blockfrost/blockfrost-js\n```"
  }
]