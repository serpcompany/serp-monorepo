[
  {
    "owner": "hashicorp",
    "repo": "nomad",
    "content": "TITLE: Complete Nomad Job Specification Example in HCL\nDESCRIPTION: A comprehensive example of a Nomad job specification in HCL format. This example demonstrates a service job named \"docs\" that runs web frontend containers, including configuration for rolling updates, networking, service discovery with Consul, health checks, Docker driver configuration, environment variables, and resource allocations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# This declares a job named \"docs\". There can be exactly one\n# job declaration per job file.\njob \"docs\" {\n  # Specify this job should run in the region named \"us\". Regions\n  # are defined by the Nomad servers' configuration.\n  region = \"us\"\n\n  # Spread the tasks in this job between us-west-1 and us-east-1.\n  datacenters = [\"us-west-1\", \"us-east-1\"]\n\n  # Run this job as a \"service\" type. Each job type has different\n  # properties. See the documentation below for more examples.\n  type = \"service\"\n\n  # Specify this job to have rolling updates, two-at-a-time, with\n  # 30 second intervals.\n  update {\n    stagger      = \"30s\"\n    max_parallel = 2\n  }\n\n\n  # A group defines a series of tasks that should be co-located\n  # on the same client (host). All tasks within a group will be\n  # placed on the same host.\n  group \"webs\" {\n    # Specify the number of these tasks we want.\n    count = 5\n\n    network {\n      # This requests a dynamic port named \"http\". This will\n      # be something like \"46283\", but we refer to it via the\n      # label \"http\".\n      port \"http\" {}\n\n      # This requests a static port on 443 on the host. This\n      # will restrict this task to running once per host, since\n      # there is only one port 443 on each host.\n      port \"https\" {\n        static = 443\n      }\n    }\n\n    # The service block tells Nomad how to register this service\n    # with Consul for service discovery and monitoring.\n    service {\n      # This tells Consul to monitor the service on the port\n      # labelled \"http\". Since Nomad allocates high dynamic port\n      # numbers, we use labels to refer to them.\n      port = \"http\"\n\n      check {\n        type     = \"http\"\n        path     = \"/health\"\n        interval = \"10s\"\n        timeout  = \"2s\"\n      }\n    }\n\n    # Create an individual task (unit of work). This particular\n    # task utilizes a Docker container to front a web application.\n    task \"frontend\" {\n      # Specify the driver to be \"docker\". Nomad supports\n      # multiple drivers.\n      driver = \"docker\"\n\n      # Configuration is specific to each driver.\n      config {\n        image = \"hashicorp/web-frontend\"\n        ports = [\"http\", \"https\"]\n      }\n\n      # It is possible to set environment variables which will be\n      # available to the task when it runs.\n      env {\n        DB_HOST = \"db01.example.com\"\n        DB_USER = \"web\"\n        DB_PASS = \"loremipsum\"\n      }\n\n      # Specify the maximum resources required to run the task,\n      # include CPU and memory.\n      resources {\n        cpu    = 500 # MHz\n        memory = 128 # MB\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Nomad Job Structure in HCL\nDESCRIPTION: The basic structure of a Nomad job definition with common parameters including constraints, datacenters, node pool, task groups, metadata, and various job configuration blocks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/job.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  constraint {\n    # ...\n  }\n\n  datacenters = [\"us-east-1\"]\n\n  node_pool = \"prod\"\n\n  group \"example\" {\n    # ...\n    \n    task \"docs\" {\n      # ...\n    }\n  }\n\n  meta {\n    my-key = \"my-value\"\n  }\n\n  parameterized {\n    # ...\n  }\n\n  periodic {\n    # ...\n  }\n\n  priority = 100\n\n  region = \"north-america\"\n\n  update {\n    # ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Resource Configuration in Nomad Job\nDESCRIPTION: Example showing basic resource configuration with CPU, memory and device requirements in a Nomad job specification.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/resources.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    task \"server\" {\n      resources {\n        cpu    = 100\n        memory = 256\n\n        device \"nvidia/gpu\" {\n          count = 2\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running nomad job run command\nDESCRIPTION: Basic usage of the 'nomad job run' command to submit a job file to Nomad for scheduling.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/run.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad job run [options] <job file>\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Block in Nomad Job Specification\nDESCRIPTION: Example configuration showing how to define a service block within a Nomad job specification. The example demonstrates service registration with Consul, including tags, port configuration, health checks, weights, metadata, and service identity configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/service.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    task \"server\" {\n      service {\n        tags = [\"leader\", \"mysql\"]\n\n        port = \"db\"\n\n        provider = \"consul\"\n\n        weights {\n          passing = 5\n          warning = 1\n        }\n\n        meta {\n          meta = \"for your service\"\n        }\n\n        check {\n          type     = \"tcp\"\n          port     = \"db\"\n          interval = \"10s\"\n          timeout  = \"2s\"\n        }\n\n        check {\n          type     = \"http\"\n          name     = \"app_health\"\n          path     = \"/health\"\n          interval = \"20s\"\n          timeout  = \"5s\"\n\n          check_restart {\n            limit = 3\n            grace = \"90s\"\n            ignore_warnings = false\n          }\n        }\n\n        identity {\n          aud = [\"consul.io\"]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up gRPC Health Checks in Nomad\nDESCRIPTION: Configuration for gRPC health checks specifying service, TLS usage, and verification options. The check will verify the 'example.Service' on the 'rpc' port with TLS enabled but certificate verification skipped.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/check.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nservice {\n  check {\n    type            = \"grpc\"\n    port            = \"rpc\"\n    interval        = \"5s\"\n    timeout         = \"2s\"\n    grpc_service    = \"example.Service\"\n    grpc_use_tls    = true\n    tls_skip_verify = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Service Mesh with Connect in Nomad\nDESCRIPTION: An example of a service block specified at the group level that includes a connect block for Consul Service Mesh integration. This configuration creates and registers a service named \"count-api\" with Consul Service Mesh, enabling service mesh features like sidecar proxies.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/index.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nservice {\n       name = \"count-api\"\n       port = \"9001\"\n\n       connect {\n         sidecar_service {}\n       }\n     }\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Blocks in Nomad HCL Configuration\nDESCRIPTION: Comprehensive example of using dynamic blocks to generate repeatable nested blocks based on local variables. This demonstrates iterating over a collection to create multiple port configurations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/expressions.mdx#2025-04-19_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  ports = [\n    {\n      port_label = \"api\"\n      port       = 80\n    },\n    {\n      port_label = \"ui\"\n      port       = 8080\n    }\n  ]\n}\n\njob \"example\" {\n  datacenters = [\"dc1\"]\n\n  group \"cache\" {\n    network {\n\n      mode = \"host\"\n\n      dynamic \"port\" {\n        for_each = local.ports\n        labels   = [port.value.port_label]\n\n        content {\n          to = port.value.port\n        }\n      }\n    }\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiregion Deployment in Nomad Job Specification\nDESCRIPTION: This snippet demonstrates how to set up a multiregion deployment in a Nomad job specification. It includes strategy configuration and region-specific settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/multiregion.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  multiregion {\n\n    strategy {\n      max_parallel = 1\n      on_failure   = \"fail_all\"\n    }\n\n    region \"west\" {\n      count = 2\n      datacenters = [\"west-1\"]\n      meta {\n        my-key = \"my-value-west\"\n      }\n    }\n\n    region \"east\" {\n      count = 5\n      datacenters = [\"east-1\", \"east-2\"]\n      meta {\n        my-key = \"my-value-east\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Comprehensive TLS Settings in Nomad\nDESCRIPTION: This example shows a more comprehensive TLS configuration for a Nomad agent. It enables TLS for HTTP and RPC, specifies paths for CA certificate, agent certificate, and private key files. This setup enables mutual TLS (mTLS) communication between all servers and clients.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/tls.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntls {\n  http = true\n  rpc  = true\n\n  ca_file   = \"/etc/certs/ca.crt\"\n  cert_file = \"/etc/certs/nomad.crt\"\n  key_file  = \"/etc/certs/nomad.key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Nomad Job Specification for Service Mesh-Enabled Microservices\nDESCRIPTION: Complete Nomad job specification that defines two service mesh-enabled task groups: an API service and a web dashboard. Both use transparent proxy mode for secure service-to-service communication.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/service-mesh.mdx#2025-04-19_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\njob \"countdash\" {\n  datacenters = [\"dc1\"]\n\n  group \"api\" {\n    network {\n      mode = \"bridge\"\n    }\n\n    service {\n      name = \"count-api\"\n      port = \"9001\"\n\n      connect {\n        sidecar_service {\n          proxy {\n            transparent_proxy {}\n          }\n        }\n      }\n    }\n\n    task \"web\" {\n      driver = \"docker\"\n\n      config {\n        image = \"hashicorpdev/counter-api:v3\"\n      }\n    }\n  }\n\n  group \"dashboard\" {\n    network {\n      mode = \"bridge\"\n\n      port \"http\" {\n        static = 9002\n        to     = 9002\n      }\n    }\n\n    service {\n      name = \"count-dashboard\"\n      port = \"http\"\n\n      connect {\n        sidecar_service {\n          proxy {\n            transparent_proxy {}\n          }\n        }\n      }\n    }\n\n    task \"dashboard\" {\n      driver = \"docker\"\n\n      env {\n        COUNTING_SERVICE_URL = \"http://count-api.virtual.consul\"\n      }\n\n      config {\n        image = \"hashicorpdev/counter-dashboard:v3\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Input Variables with Type Constraints in Nomad HCL\nDESCRIPTION: Example showing how to declare input variables with various type constraints including string, list of strings, and a complex object type for Docker ports configuration. Each variable can have type definitions and default values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/variables.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"image_id\" {\n  type = string\n}\n\nvariable \"availability_zone_names\" {\n  type    = list(string)\n  default = [\"us-west-1a\"]\n}\n\nvariable \"docker_ports\" {\n  type = list(object({\n    internal = number\n    external = number\n    protocol = string\n  }))\n  default = [\n    {\n      internal = 8300\n      external = 8300\n      protocol = \"tcp\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata and Environment Variables for a Task in HCL\nDESCRIPTION: This example demonstrates how to use custom metadata and environment variables to pass information to a task. It uses the 'exec' driver to run a command.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/task.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"server\" {\n  driver = \"exec\"\n  config {\n    command = \"/bin/env\"\n  }\n\n  meta {\n    my-key = \"my-value\"\n  }\n\n  env {\n    MY_KEY = \"${meta.my-key}\"\n  }\n\n  resources {\n    cpu = 20\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminating Gateway in Nomad with Consul Connect\nDESCRIPTION: Demonstrates a complete Nomad job specification that sets up a terminating gateway pattern. The configuration includes an external API service running outside the service mesh, a terminating gateway to facilitate communication, and a dashboard service running inside the mesh. The setup enables secure communication between mesh and non-mesh services.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/gateway.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\njob \"countdash-terminating\" {\n\n  datacenters = [\"dc1\"]\n\n  # This group provides the service that exists outside of the Consul Connect\n  # service mesh. It is using host networking and listening to a statically\n  # allocated port.\n  group \"api\" {\n    network {\n      mode = \"host\"\n      port \"port\" {\n        static = \"9001\"\n      }\n    }\n\n    # This example will enable services in the service mesh to make requests\n    # to this service which is not in the service mesh by making requests\n    # through the terminating gateway.\n    service {\n      name = \"count-api\"\n      port = \"port\"\n    }\n\n    task \"api\" {\n      driver = \"docker\"\n\n      config {\n        image        = \"hashicorpdev/counter-api:v3\"\n        network_mode = \"host\"\n      }\n    }\n  }\n\n  group \"gateway\" {\n    network {\n      mode = \"bridge\"\n    }\n\n    service {\n      name = \"api-gateway\"\n\n      connect {\n        gateway {\n          # Consul gateway [envoy] proxy options.\n          proxy {\n            # The following options are automatically set by Nomad if not explicitly\n            # configured with using bridge networking.\n            #\n            # envoy_gateway_no_default_bind = true\n            # envoy_gateway_bind_addresses \"default\" {\n            #   address = \"0.0.0.0\"\n            #   port    = <generated listener port>\n            # }\n            # Additional options are documented at\n            # https://developer.hashicorp.com/nomad/docs/job-specification/gateway#proxy-parameters\n          }\n\n          # Consul Terminating Gateway Configuration Entry.\n          terminating {\n            # Nomad will automatically manage the Configuration Entry in Consul\n            # given the parameters in the terminating block.\n            #\n            # Additional options are documented at\n            # https://developer.hashicorp.com/nomad/docs/job-specification/gateway#terminating-parameters\n            service {\n              name = \"count-api\"\n            }\n          }\n        }\n      }\n    }\n  }\n\n  # The dashboard service is in the service mesh, making use of bridge network\n  # mode and connect.sidecar_service. When running, the dashboard should be\n  # available from a web browser at localhost:9002.\n  group \"dashboard\" {\n    network {\n      mode = \"bridge\"\n\n      port \"http\" {\n        static = 9002\n        to     = 9002\n      }\n    }\n\n    service {\n      name = \"count-dashboard\"\n      port = \"9002\"\n\n      connect {\n        sidecar_service {\n          proxy {\n            upstreams {\n              # By configuring an upstream destination to the linked service of\n              # the terminating gateway, the dashboard is able to make requests\n              # through the gateway to the count-api service.\n              destination_name = \"count-api\"\n              local_bind_port  = 8080\n            }\n          }\n        }\n      }\n    }\n\n    task \"dashboard\" {\n      driver = \"docker\"\n\n      env {\n        COUNTING_SERVICE_URL = \"http://${NOMAD_UPSTREAM_ADDR_count_api}\"\n      }\n\n      config {\n        image = \"hashicorpdev/counter-dashboard:v3\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Environment Variable Configuration in Nomad\nDESCRIPTION: Demonstrates basic setup of environment variables within a Nomad job specification using the env block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/env.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    task \"server\" {\n      env {\n        my_key = \"my-value\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic HCL Syntax for Nomad Job Specification\nDESCRIPTION: This snippet illustrates the basic syntax elements of HCL used in Nomad job specifications. It shows the structure of blocks, arguments, and expressions, which are the fundamental components of HCL configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"example\" {\n  driver = \"docker\"\n}\n\n<BLOCK TYPE> \"<BLOCK LABEL>\" {\n  # Block body\n  <IDENTIFIER> = <EXPRESSION> # Argument\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Docker Container Task in HCL\nDESCRIPTION: This example defines a task that starts a Docker container as a service. It specifies the Docker driver, image, and arguments, as well as resource requirements.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/task.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"server\" {\n  driver = \"docker\"\n  config {\n    image = \"hashicorp/http-echo\"\n    args  = [\"-text\", \"hello world\"]\n  }\n\n  resources {\n    cpu = 20\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Consul Service Workload Identity Claims in JSON\nDESCRIPTION: Example of the claims included in a Nomad workload identity JWT for Consul services. The claims include the service name instead of the task name.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/workload-identity.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nomad_namespace\": \"default\",\n  \"nomad_job_id\": \"example\",\n  \"nomad_allocation_id\": \"8623ac7a-28ba-20c3-24a6-e615a39bbbf3\",\n  \"nomad_service\": \"example-cache-redis\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Namespace for Nomad Tasks with HCL (Enterprise)\nDESCRIPTION: Example showing how to configure a Vault block to use a specific Vault namespace (engineering/frontend) for retrieving tokens. This is an Enterprise-only feature that allows for multi-tenant Vault usage within Nomad.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/vault.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nvault {\n  role      = \"prod\"\n  namespace = \"engineering/frontend\"\n\n  change_mode   = \"signal\"\n  change_signal = \"SIGINT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Environment Variables with Nomad Templates (HCL)\nDESCRIPTION: This snippet shows how to use Nomad templates to render environment variables for a task, including handling of special characters and secrets.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate {\n  data = <<EOH\n# Empty lines are also ignored\nLOG_LEVEL=\"{{key \"service/geo-api/log-verbosity\"}}\"\nAPI_KEY=\"{{with secret \"secret/geo-api-key\"}}{{.Data.value}}{{end}}\"\nEOH\n\n  destination = \"secrets/file.env\"\n  env         = true\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Consul KV and Service Data in Nomad Templates (HCL)\nDESCRIPTION: Demonstrates how to retrieve single key values and lists of keys from Consul's KV store, and how to query the Consul service catalog for service information within Nomad template blocks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\n  template {\n    data = <<EOF\n# Read single key from Consul KV.\nAPP_NAME = \"{{key \"app/name\"}}\"\n\n# Read all keys in the path `app/environment` from Consul KV.\n{{range ls \"app/environment\"}}\n{{.Key}}={{.Value}}\n{{end}}\n    EOF\n\n    destination = \"local/env\"\n    env         = true\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring change_script in Nomad Job Specification (HCL)\nDESCRIPTION: This snippet demonstrates how to configure a change_script block within a Nomad job specification. It shows the structure and parameters for executing a script when a template changes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/change_script.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    task \"server\" {\n      template {\n        source      = \"local/redis.conf.tpl\"\n        destination = \"local/redis.conf\"\n        change_mode = \"script\"\n        change_script {\n          command       = \"/bin/foo\"\n          args          = [\"-verbose\", \"-debug\"]\n          timeout       = \"5s\"\n          fail_on_error = false\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstreams in a Consul Connect Sidecar Proxy\nDESCRIPTION: An example of configuring upstreams in a sidecar service proxy block. This configuration specifies that the proxy should connect to the 'count-api' service and make it available locally on port 8080.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/proxy.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nsidecar_service {\n  proxy {\n    upstreams {\n      destination_name = \"count-api\"\n      local_bind_port  = 8080\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading a File Artifact in Nomad\nDESCRIPTION: A simple example showing how to download a file from a URL into the task's local directory. The 'local/' path is relative to the task's working directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/artifact.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nartifact {\n  source = \"https://example.com/file.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Vault KV API v1 Secrets in Nomad Templates (HCL)\nDESCRIPTION: Demonstrates how to retrieve secrets from Vault's KV API v1 store, including handling secrets with hyphenated names that require index-based access.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_20\n\nLANGUAGE: hcl\nCODE:\n```\n  template {\n    data = <<EOF\n      AWS_ACCESS_KEY_ID = \"{{with secret \"secret/aws/s3\"}}{{.Data.aws_access_key_id}}{{end}}\"\n    EOF\n  }\n```\n\n----------------------------------------\n\nTITLE: Starting Nomad Development Agent\nDESCRIPTION: Command to start the Nomad agent in development mode after binary installation. This mode is suitable for testing and development purposes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/quickstart.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo nomad agent -dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Workload Identity in Nomad Community Edition Job\nDESCRIPTION: This HCL snippet demonstrates how to set up a Nomad job with Vault integration and workload identity for the Community Edition. It includes a MongoDB task with Vault authentication and template for secret injection.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/identity.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\njob \"mongo\" {\n  namespace = \"default\"\n\n  group \"db\" {\n    network {\n      port \"db\" {\n        to = 27017\n      }\n    }\n\n    task \"mongo\" {\n      driver = \"docker\"\n\n      config {\n        image = \"mongo:7\"\n        ports = [\"db\"]\n      }\n\n      vault {}\n\n      identity {\n        name = \"vault_default\"\n        aud  = [\"vault.io\"]\n        ttl  = \"1h\"\n      }\n\n      template {\n        data        = <<EOF\n{{with secret \"kv/data/default/mongo/config\"}}\nMONGO_INITDB_ROOT_USERNAME=root\nMONGO_INITDB_ROOT_PASSWORD={{.Data.data.root_password}}\n{{end}}\nEOF\n        destination = \"secrets/env\"\n        env         = true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: High Availability Keyring Configuration in HCL\nDESCRIPTION: Enterprise configuration example showing high availability setup using multiple AWS KMS providers in different regions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/keyring/index.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nkeyring \"awskms\" {\n  active     = true\n  name       = \"kms-us-east-1\"\n  region     = \"us-east-1\"\n  kms_key_id = \"arn:aws:kms:us-east-1:000000000000:key/7d23633a-4464-11ef-a273-abd12example\"\n}\n\nkeyring \"awskms\" {\n  active     = true\n  name       = \"kms-us-east-2\"\n  region     = \"us-east-2\"\n  kms_key_id = \"alias/nomad-keyring-us-east-2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Route53 Hosted Zone in Terraform\nDESCRIPTION: Creates a Route53 hosted zone for the Nomad cluster domain using Terraform. Requires specification of the domain name as a variable.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/aws-oidc-provider.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"domain_name\" {\n    type = string\n    default = \"<DOMAIN_NAME>\"\n}\n\nresource \"aws_route53_zone\" \"example\" {\n    name = var.domain_name\n}\n```\n\n----------------------------------------\n\nTITLE: Custom SSL Configuration for Consul in Nomad (HCL)\nDESCRIPTION: Example of configuring custom SSL certificates for communication between Nomad and Consul. This includes settings for enabling SSL and specifying certificate files.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/consul.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nconsul {\n  ssl       = true\n  ca_file   = \"/var/ssl/bundle/ca.bundle\"\n  cert_file = \"/etc/ssl/consul.crt\"\n  key_file  = \"/etc/ssl/consul.key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reschedule Block in Nomad Job Specification\nDESCRIPTION: Example of configuring a reschedule block within a Nomad job specification. This defines how Nomad should handle allocation failures by specifying parameters like the number of attempts, delay between attempts, and delay function.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/reschedule.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    reschedule {\n      attempts       = 15\n      interval       = \"1h\"\n      delay          = \"30s\"\n      delay_function = \"exponential\"\n      max_delay      = \"120s\"\n      unlimited      = false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Service with Docker Driver and Weave Network\nDESCRIPTION: This example demonstrates a complete job configuration for a Redis service using the Docker driver with Weave network. It includes network, task, and service configurations with health checks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/service.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n  datacenters = [\"dc1\"]\n\n  group \"cache\" {\n    network {\n      port \"db\" {\n        to = 6379\n      }\n    }\n\n    task \"redis\" {\n      driver = \"docker\"\n\n      config {\n        image = \"redis:7\"\n        network_mode = \"weave\"\n        ports = [\"db\"]\n      }\n\n      resources {\n        cpu    = 500 # 500 MHz\n        memory = 256 # 256MB\n      }\n\n      service {\n        name = \"weave-redis\"\n        port = \"db\"\n        check {\n          name     = \"host-redis-check\"\n          type     = \"tcp\"\n          interval = \"10s\"\n          timeout  = \"2s\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nomad Server Vault Configuration Example\nDESCRIPTION: Example configuration for a Nomad server with Vault integration. This shows how to enable a server and configure Vault with default workload identity settings, including audience, environment variables, file output, and TTL settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/vault.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nserver {\n  enabled = true\n  # ...\n}\n\nvault {\n  enabled = true\n\n  # Provide a default workload identity configuration so jobs don't need to\n  # specify one.\n  default_identity {\n    aud  = [\"vault.io\"]\n    env  = false\n    file = true\n    ttl  = \"1h\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Batch Job on Linux Machines in Nomad\nDESCRIPTION: A Nomad batch job example that runs the 'uptime' command on 10 Linux nodes. It includes a constraint to limit execution to Linux machines and specifies a count of 10 for parallel execution.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/job.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  type = \"batch\"\n\n  constraint {\n    attribute = \"${attr.kernel.name}\"\n    value     = \"linux\"\n  }\n\n  group \"example\" {\n    count = 10\n    task \"uptime\" {\n      driver = \"exec\"\n      config {\n        command = \"uptime\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic server_join Configuration in HCL\nDESCRIPTION: A basic server_join configuration block that specifies server addresses to join, maximum retry attempts, and retry interval. This allows Nomad agents to connect to specified servers with automatic retry logic.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/server_join.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nserver_join {\n  retry_join     = [ \"1.1.1.1\", \"2.2.2.2\" ]\n  retry_max      = 3\n  retry_interval = \"15s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Bridge Mode Network Configuration in Nomad (HCL)\nDESCRIPTION: Example of configuring bridge networking mode in Nomad with port mapping. Bridge mode allows tasks to share a networking stack and interfaces, with Nomad handling port mapping directly rather than relying on individual task drivers.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/network.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nnetwork {\n  mode = \"bridge\"\n  port \"http\" {\n    static = 9002\n    to     = 9002\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Registration in Nomad HCL\nDESCRIPTION: This snippet demonstrates the structure and available parameters for the 'service' block in a Nomad job specification. It includes options for specifying the service provider, name, port, tags, and various Consul-specific settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/service.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nservice {\n  provider = \"consul\"\n  name     = \"${JOB}-${TASKGROUP}-${TASK}\"\n  port     = \"http\"\n  tags     = [\"production\", \"v1\"]\n  check {\n    type     = \"http\"\n    path     = \"/health\"\n    interval = \"10s\"\n    timeout  = \"2s\"\n  }\n  address_mode = \"auto\"\n  meta {\n    version = \"1.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic TLS in Nomad Agent Configuration\nDESCRIPTION: This snippet demonstrates how to enable TLS for HTTP and RPC communication in a Nomad agent configuration. It sets the http and rpc parameters to true, enabling secure communication.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/tls.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntls {\n  http = true\n  rpc  = true\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Nodes with Nomad HTTP API\nDESCRIPTION: This snippet demonstrates how to list all nodes registered with Nomad using a GET request to the /v1/nodes endpoint. It includes examples of using optional query parameters like prefix and os.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/nodes.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://localhost:4646/v1/nodes\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://localhost:4646/v1/nodes?prefix=f7476465\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://localhost:4646/v1/nodes?os=true\n```\n\n----------------------------------------\n\nTITLE: Setting Up Service Discovery in a Nomad Group\nDESCRIPTION: Demonstrates how to configure service discovery for a group using Consul. This example creates a service named \"example\" on the \"api\" port with health checks configured for monitoring service health.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/group.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"example\" {\n  network {\n    port \"api\" {}\n  }\n\n  service {\n    name = \"example\"\n    port = \"api\"\n    tags = [\"default\"]\n\n    check {\n      type     = \"tcp\"\n      interval = \"10s\"\n      timeout  = \"2s\"\n    }\n  }\n\n  task \"api\" { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Job Hierarchy in Nomad\nDESCRIPTION: A text representation of the general hierarchical structure of a Nomad job, showing the relationship between jobs, groups, and tasks. Each job can contain multiple groups, and each group can contain multiple tasks that are co-located on the same Nomad client.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\njob\n  \\_ group\n  |     \\_ task\n  |     \\_ task\n  |\n  \\_ group\n        \\_ task\n        \\_ task\n```\n\n----------------------------------------\n\nTITLE: Creating a Companion Sidecar Task with Poststart Hook in Nomad\nDESCRIPTION: This example shows how to implement a fluentd sidecar task that runs alongside the main application. It uses a poststart hook with sidecar=true to ensure it continues running for the entire lifecycle of the main task.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/lifecycle.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n  task \"fluentd\" {\n    lifecycle {\n      hook = \"poststart\"\n      sidecar = true\n    }\n\n    driver = \"docker\"\n    config {\n      image = \"fluentd/fluentd\"\n    }\n\n    template {\n      destination = \"local/fluentd.conf\"\n      data = ...\n    }\n  }\n\n  task \"main-app\" {\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Job with Sidecar Service Configuration\nDESCRIPTION: Example of a complete Nomad job specification that includes a basic sidecar_service configuration for Consul Connect integration. Demonstrates setting up a bridge network and Docker container with a connected sidecar proxy.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/sidecar_service.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"countdash\" {\n  datacenters = [\"dc1\"]\n\n  group \"api\" {\n    network {\n      mode = \"bridge\"\n    }\n\n    service {\n      name = \"count-api\"\n      port = \"9001\"\n\n      connect {\n        sidecar_service {}\n      }\n    }\n\n    task \"web\" {\n      driver = \"docker\"\n\n      config {\n        image = \"hashicorpdev/counter-api:v3\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Remote Template with Artifact Block in Nomad HCL\nDESCRIPTION: Example showing how to download a template file using an artifact block before processing it with the template engine.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nartifact {\n  source      = \"https://example.com/file.yml.tpl\"\n  destination = \"local/file.yml.tpl\"\n}\n\ntemplate {\n  source      = \"local/file.yml.tpl\"\n  destination = \"local/file.yml\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Using Vault Secrets in a Nomad Job\nDESCRIPTION: A Nomad job example that demonstrates how to retrieve secrets from HashiCorp Vault and write them to a file for application use. Nomad handles Vault authentication and secret retrieval based on specified policies.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/job.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    task \"cat\" {\n      driver = \"exec\"\n\n      config {\n        command = \"cat\"\n        args    = [\"local/secrets.txt\"]\n      }\n\n      template {\n        data        = \"{{ secret \\\"secret/data\\\" }}\"\n        destination = \"local/secrets.txt\"\n      }\n\n      vault {\n        policies = [\"secret-readonly\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nomad Job Versions with Diffs JSON Response\nDESCRIPTION: This JSON response shows the structure of a Nomad job version request with diffs enabled. It includes the differences between job versions, such as added environment variables, along with the full job specification.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Diffs\": [\n    {\n      \"Fields\": null,\n      \"ID\": \"example\",\n      \"Objects\": null,\n      \"TaskGroups\": [\n        {\n          \"Fields\": null,\n          \"Name\": \"cache\",\n          \"Objects\": null,\n          \"Tasks\": [\n            {\n              \"Annotations\": null,\n              \"Fields\": [\n                {\n                  \"Annotations\": null,\n                  \"Name\": \"Env[foo]\",\n                  \"New\": \"bar\",\n                  \"Old\": \"\",\n                  \"Type\": \"Added\"\n                }\n              ],\n              \"Name\": \"redis\",\n              \"Objects\": null,\n              \"Type\": \"Edited\"\n            }\n          ],\n          \"Type\": \"Edited\",\n          \"Updates\": null\n        }\n      ],\n      \"Type\": \"Edited\"\n    }\n  ],\n  \"Index\": 26,\n  \"KnownLeader\": true,\n  \"LastContact\": 0,\n  \"Versions\": [\n    {\n      \"Affinities\": null,\n      \"AllAtOnce\": false,\n      \"Constraints\": null,\n      \"CreateIndex\": 10,\n      \"Datacenters\": [\n        \"dc1\"\n      ],\n      \"Dispatched\": false,\n      \"ID\": \"example\",\n      \"JobModifyIndex\": 16,\n      \"Meta\": null,\n      \"ModifyIndex\": 26,\n      \"Multiregion\": null,\n      \"Name\": \"example\",\n      \"Namespace\": \"default\",\n      \"NodePool\": \"prod\",\n      \"NomadTokenID\": \"\",\n      \"ParameterizedJob\": null,\n      \"ParentID\": \"\",\n      \"Payload\": null,\n      \"Periodic\": null,\n      \"Priority\": 50,\n      \"Region\": \"global\",\n      \"Spreads\": null,\n      \"Stable\": true,\n      \"Status\": \"running\",\n      \"StatusDescription\": \"\",\n      \"Stop\": false,\n      \"SubmitTime\": 1608316675000588800,\n      \"TaskGroups\": [\n        {\n          \"Affinities\": null,\n          \"Constraints\": null,\n          \"Count\": 1,\n          \"Disconnect\": null,\n          \"EphemeralDisk\": {\n            \"Migrate\": false,\n            \"SizeMB\": 300,\n            \"Sticky\": false\n          },\n          \"MaxClientDisconnect\": null,\n          \"Meta\": null,\n          \"Migrate\": {\n            \"HealthCheck\": \"checks\",\n            \"HealthyDeadline\": 300000000000,\n            \"MaxParallel\": 1,\n            \"MinHealthyTime\": 10000000000\n          },\n          \"Name\": \"cache\",\n          \"Networks\": [\n            {\n              \"CIDR\": \"\",\n              \"DNS\": null,\n              \"Device\": \"\",\n              \"DynamicPorts\": [\n                {\n                  \"HostNetwork\": \"default\",\n                  \"Label\": \"db\",\n                  \"To\": 6379,\n                  \"Value\": 0\n                }\n              ],\n              \"IP\": \"\",\n              \"MBits\": 0,\n              \"Mode\": \"\",\n              \"ReservedPorts\": null\n            }\n          ],\n          \"ReschedulePolicy\": {\n            \"Attempts\": 0,\n            \"Delay\": 30000000000,\n            \"DelayFunction\": \"exponential\",\n            \"Interval\": 0,\n            \"MaxDelay\": 3600000000000,\n            \"Unlimited\": true\n          },\n          \"RestartPolicy\": {\n            \"Attempts\": 2,\n            \"Delay\": 15000000000,\n            \"Interval\": 1800000000000,\n            \"Mode\": \"fail\"\n          },\n          \"Scaling\": null,\n          \"Services\": null,\n          \"ShutdownDelay\": null,\n          \"Spreads\": null,\n          \"StopAfterClientDisconnect\": null,\n          \"Tasks\": [\n            {\n              \"Affinities\": null,\n              \"Artifacts\": null,\n              \"CSIPluginConfig\": null,\n              \"Config\": {\n                \"image\": \"redis:7\",\n                \"ports\": [\n                  \"db\"\n                ]\n              },\n              \"Constraints\": null,\n              \"DispatchPayload\": null,\n              \"Driver\": \"docker\",\n              \"Env\": {\n                \"foo\": \"bar\"\n              },\n              \"KillSignal\": \"\",\n              \"KillTimeout\": 5000000000,\n              \"Kind\": \"\",\n              \"Leader\": false,\n              \"Lifecycle\": null,\n              \"LogConfig\": {\n                \"Disabled\": false,\n                \"MaxFileSizeMB\": 10,\n                \"MaxFiles\": 10\n              },\n              \"Meta\": null,\n              \"Name\": \"redis\",\n              \"Resources\": {\n                \"CPU\": 500,\n                \"Devices\": null,\n                \"DiskMB\": 0,\n                \"IOPS\": 0,\n                \"MemoryMB\": 256,\n                \"Networks\": null\n              },\n              \"RestartPolicy\": {\n                \"Attempts\": 2,\n                \"Delay\": 15000000000,\n                \"Interval\": 1800000000000,\n                \"Mode\": \"fail\"\n              },\n              \"ScalingPolicies\": null,\n              \"Services\": null,\n              \"ShutdownDelay\": 0,\n              \"Templates\": null,\n              \"User\": \"\",\n              \"Vault\": null,\n              \"VolumeMounts\": null\n            }\n          ],\n          \"Update\": {\n            \"AutoPromote\": false,\n            \"AutoRevert\": false,\n            \"Canary\": 0,\n            \"HealthCheck\": \"checks\",\n            \"HealthyDeadline\": 300000000000,\n            \"MaxParallel\": 1,\n            \"MinHealthyTime\": 10000000000,\n            \"ProgressDeadline\": 600000000000,\n            \"Stagger\": 30000000000\n          },\n          \"Volumes\": null\n        }\n      ],\n      \"Type\": \"service\",\n      \"Update\": {\n        \"AutoPromote\": false,\n        \"AutoRevert\": false,\n        \"Canary\": 0,\n        \"HealthCheck\": \"\"\n```\n\n----------------------------------------\n\nTITLE: Canary Deployment Configuration\nDESCRIPTION: Setup for canary deployments, creating a single canary allocation before performing rolling updates.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/update.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nupdate {\n  canary       = 1\n  max_parallel = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a downloaded binary with Raw Exec in Nomad HCL\nDESCRIPTION: Configuration example for downloading and executing a binary using Nomad's artifact functionality. The binary is downloaded from a source URL and then executed by the raw_exec driver.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/raw_exec.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"example\" {\n  driver = \"raw_exec\"\n\n  config {\n    command = \"name-of-my-binary\"\n  }\n\n  artifact {\n    source = \"https://internal.file.server/name-of-my-binary\"\n    options {\n      checksum = \"sha256:abd123445ds4555555555\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Vault KV API v2 Secrets in Nomad Templates (HCL)\nDESCRIPTION: Demonstrates how to retrieve secrets from Vault's KV API v2 store, which has a different path structure and response format compared to v1.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_22\n\nLANGUAGE: hcl\nCODE:\n```\n  template {\n    data = <<EOF\n      AWS_ACCESS_KEY_ID = \"{{with secret \"secret/data/aws/s3\"}}{{.Data.data.aws_access_key_id}}{{end}}\"\n    EOF\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Nomad Agent with Multiple Configuration Files\nDESCRIPTION: This shell command demonstrates how to start a Nomad agent with multiple configuration files. It specifies a single configuration file, a directory containing configuration files, and an additional JSON file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad agent -config=server.conf -config=/etc/nomad -config=extra.json\n```\n\n----------------------------------------\n\nTITLE: Setting CNI Network Mode in Nomad Job Specification\nDESCRIPTION: Example of configuring a Nomad job to use a CNI network named 'mynet'. This requires setting the network mode to 'cni/mynet' in the task group configuration. Nomad will schedule this job on nodes that have the 'mynet' CNI configuration available.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/networking/cni.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ncni/mynet\n```\n\n----------------------------------------\n\nTITLE: Dynamic Port Configuration in Nomad Network Block (HCL)\nDESCRIPTION: Two examples showing how to configure dynamic port allocation in Nomad. Dynamic ports are allocated in a range from 20000 to 32000 and are recommended for most services running in a cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/network.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"example\" {\n  network {\n    port \"http\" {}\n    port \"https\" {}\n  }\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nnetwork {\n  port \"http\" {}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Nomad Leader Status via HTTP API\nDESCRIPTION: HTTP GET request to retrieve the address of the current Nomad leader in the region. Returns the leader's address as a JSON string. This endpoint does not support blocking queries and requires no ACL permissions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/status.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/status/leader\n```\n\nLANGUAGE: json\nCODE:\n```\n\"127.0.0.1:4647\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Service Check in Nomad HCL\nDESCRIPTION: Example of configuring a TCP health check for a Redis service in Nomad. The configuration includes network port mapping, service definition with a TCP check running every 10 seconds, and Docker container setup.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/check.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n  datacenters = [\"dc1\"]\n\n  group \"cache\" {\n    network {\n      port \"db\" { to = 6379 }\n    }\n\n    service {\n      provider = \"nomad\"\n      name     = \"redis\"\n      port     = \"db\"\n      check {\n        name     = \"redis_probe\"\n        type     = \"tcp\"\n        interval = \"10s\"\n        timeout  = \"1s\"\n      }\n    }\n\n    task \"redis\" {\n      driver = \"docker\"\n      config {\n        image = \"redis:7\"\n        ports = [\"db\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-line Heredoc Template in Nomad HCL\nDESCRIPTION: Example of using heredoc syntax for multi-line templates that incorporate environment variables, node attributes, and Consul key-value data.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate {\n  data = <<EOH\n  ---\n    bind_port:   {{ env \"NOMAD_PORT_db\" }}\n    scratch_dir: {{ env \"NOMAD_TASK_DIR\" }}\n    node_id:     {{ env \"node.unique.id\" }}\n    service_key: {{ key \"service/my-key\" }}\n  EOH\n\n  destination = \"local/file.yml\"\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Sidecar Service Configuration with Upstreams\nDESCRIPTION: Example showing advanced sidecar_service configuration including upstream service connections and custom metadata. Demonstrates setting up service discovery and additional configuration parameters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/sidecar_service.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n   sidecar_service {\n     proxy {\n       upstreams {\n         destination_name = \"count-api\"\n         local_bind_port = 8080\n       }\n     }\n     meta {\n       test-key = \"test-value\"\n     }\n   }\n```\n\n----------------------------------------\n\nTITLE: Basic Template Block Configuration in Nomad HCL\nDESCRIPTION: A basic example of using the template block within a Nomad job specification to render a configuration file from a template and restart a service when the file changes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    task \"server\" {\n      template {\n        source        = \"local/redis.conf.tpl\"\n        destination   = \"local/redis.conf\"\n        change_mode   = \"signal\"\n        change_signal = \"SIGINT\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Workload Identity in Nomad Enterprise Job\nDESCRIPTION: This HCL snippet shows how to configure a Nomad job with Vault integration and workload identity for Nomad Enterprise. It includes a MongoDB task with Vault authentication, specific cluster configuration, and template for secret injection.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/identity.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\njob \"mongo\" {\n  namespace = \"default\"\n\n  group \"db\" {\n    network {\n      port \"db\" {\n        to = 27017\n      }\n    }\n\n    task \"mongo\" {\n      driver = \"docker\"\n\n      config {\n        image = \"mongo:7\"\n        ports = [\"db\"]\n      }\n\n      vault {\n        cluster = \"prod\"\n      }\n\n      identity {\n        name = \"vault_prod\"\n        aud  = [\"vault.io\"]\n        ttl  = \"1h\"\n      }\n\n      template {\n        data        = <<EOF\n{{with secret \"kv/data/default/mongo/config\"}}\nMONGO_INITDB_ROOT_USERNAME=root\nMONGO_INITDB_ROOT_PASSWORD={{.Data.data.root_password}}\n{{end}}\nEOF\n        destination = \"secrets/env\"\n        env         = true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vault Token Configuration for Nomad Tasks with HCL\nDESCRIPTION: Basic example showing how to configure a task to retrieve a Vault token with the 'prod' role. The token will be available via the VAULT_TOKEN environment variable and written to disk at secrets/vault_token.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/vault.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvault {\n  role = \"prod\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using X-Nomad-Token Authentication with curl\nDESCRIPTION: Example showing how to authenticate with Nomad's API using a token in the X-Nomad-Token header over HTTPS. This is one of the two supported authentication methods when ACLs are enabled.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Nomad-Token: aa534e09-6a07-0a45-2295-a7f77063d429\" \\\n    https://localhost:4646/v1/jobs\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Application Sizing for a Task in Nomad (HCL)\nDESCRIPTION: This snippet shows how to configure scaling policies at the task level in a Nomad job specification. It demonstrates setting up CPU and memory scaling for dynamic application sizing, controlling the 'resources' values of the task.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/scaling.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n  datacenters = [\"dc1\"]\n\n  group \"cache\" {\n    task \"redis\" {\n      driver = \"docker\"\n\n      config {\n        image = \"redis:7\"\n      }\n\n      resources {\n        cpu    = 100\n        memory = 256\n      }\n\n      scaling \"cpu\" {\n        enabled = true\n        min     = 100\n        max     = 500\n\n        policy {\n          # ...\n        }\n      }\n\n      scaling \"mem\" {\n        enabled = true\n        min     = 64\n        max     = 512\n\n        policy {\n          # ...\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public Keys in JWKS Format\nDESCRIPTION: This snippet demonstrates how to use the Nomad API to retrieve a list of active public keys used for signing workload identities. The response is in JWKS (JSON Web Key Set) format as defined in RFC7517.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/keyring.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api '/.well-known/jwks.json'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keys\": [\n    {\n      \"use\": \"sig\",\n      \"kty\": \"RSA\",\n      \"kid\": \"15a95f48-001a-8be5-5da9-d94901d022c9\",\n      \"alg\": \"RS256\",\n      \"n\": \"6sImUQR6A...FB7bKn02dKw\",\n      \"e\": \"AQAB\"\n    },\n    {\n      \"use\": \"sig\",\n      \"kty\": \"RSA\",\n      \"kid\": \"b7f6a3a7-14f9-4ac5-f713-32c9bce1fa93\",\n      \"alg\": \"RS256\",\n      \"n\": \"zEdiUB3DFuM...ii3kQvOf_eDApBDWJhfQw\",\n      \"e\": \"AQAB\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Docker Job with Custom Mounts and Templates in Nomad HCL\nDESCRIPTION: Demonstrates a more complex Nomad job specification for a Docker task. It includes custom mounts to bind a secrets directory and uses a template to generate a configuration file with a secret from Vault.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/filesystem.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n  datacenters = [\"dc1\"]\n\n  task \"task1\" {\n    driver = \"docker\"\n\n    config {\n      image = \"redis:6.0\"\n      mounts = [{\n        type     = \"bind\"\n        source   = \"secrets\"\n        target   = \"/etc/redis.d\"\n        readonly = true\n      }]\n\n      template {\n        destination = \"${NOMAD_SECRETS_DIR}/redis.conf\"\n        data        = <<EOT\n{{ with secret \"secrets/data/redispass\" }}\nrequirepass {{- .Data.data.passwd -}}{{end}}\nEOT\n\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Nomad Variables in Templates (HCL)\nDESCRIPTION: This snippet demonstrates how to list Nomad variables using the nomadVarList function in a template.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate {\n  data        = <<EOH\n{{ range nomadVarList }}\n  {{ . }}\n{{ end }}\nEOH\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate {\n  data        = <<EOH\n{{ range nomadVarList \"path/to/filter\" }}\n  {{ . }}\n{{ end }}\nEOH\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate {\n  data        = <<EOH\n{{ range nomadVarList \"path/to/filter@example_namespace\" }}\n  {{ . }}\n{{ end }}\nEOH\n}\n```\n\n----------------------------------------\n\nTITLE: Job Submission Response JSON in Nomad\nDESCRIPTION: Example response from the job submission API endpoint showing job source information including HCL configuration and variables.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Format\": \"hcl2\",\n  \"JobIndex\": 11,\n  \"JobID\": \"myjob\",\n  \"Namespace\": \"default\",\n  \"Source\": \"variable \\\"X\\\" {\\n  type = string\\n}\\n\\nvariable \\\"Y\\\" {\\n  type = number\\n}\\n\\nvariable \\\"Z\\\" {\\n  type = bool\\n}\\n  \\njob \\\"myjob\\\" {\\n  type = \\\"sysbatch\\\"\\n  \\n  meta {\\n    nomad_discard_job_source = false\\n  }\\n\\n  group \\\"group\\\" {\\n    task \\\"task\\\" {\\n      driver = \\\"raw_exec\\\"\\n\\n      config {\\n        command = \\\"echo\\\"\\n        args = [\\\"X ${var.X}, Y ${var.Y}, Z ${var.Z}\\\"]\\n      }\\n\\n      resources {\\n        cpu    = 10\\n        memory = 16\\n      }\\n    }\\n  }\\n}\\n\",\n  \"VariableFlags\": {\n    \"Z\": \"true\",\n    \"X\": \"x\",\n    \"Y\": \"2\"\n  },\n  \"Variables\": \"\",\n  \"Version\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Nomad Variable with Multiple Items\nDESCRIPTION: This example shows how to update an existing variable by first retrieving it with 'get', then piping the result to 'put' to add a new 'user' item while preserving existing items. The command uses JSON input format and table output format.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad var get secret/creds | nomad var put -in=json -out=table -v - user=dba\nReading whole JSON variable specification from stdin\nSuccessfully updated variable \"secret/creds\"!\n\nNamespace   = default\nPath        = secret/creds\nCreate Time = 2022-08-23T11:14:37-04:00\nCheck Index = 116\n\nItems\npasscode = my-long-passcode\nuser     = dba\n```\n\n----------------------------------------\n\nTITLE: Converting HCL to JSON for Nomad Job Submission\nDESCRIPTION: This snippet demonstrates how to convert an HCL-formatted Nomad job to JSON format and submit it using the Nomad CLI. It includes steps for generating an HCL job, converting it to JSON, and submitting it with the -json flag.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ # Generate an HCL formatted job\n$ nomad init\n\n$ # Convert HCL to API JSON format\n$ nomad job run -output example.nomad.hcl > example.json\n\n$ # Submit with the -json flag\n$ nomad job run -json example.json\n```\n\n----------------------------------------\n\nTITLE: Complete HTTP Server Example with Pledge Driver and Templates\nDESCRIPTION: Comprehensive Nomad job for running a Python HTTP server with the Pledge driver. Includes network configuration, syscall restrictions, filesystem unveiling, and a template for generating HTML content.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/pledge.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\njob \"http\" {\n  group \"group\" {\n    network {\n      mode = \"host\"\n      port \"http\" { static = 8181 }\n    }\n\n    task \"task\" {\n      driver = \"pledge\"\n      user   = \"nobody\"\n      config {\n        command    = \"python3\"\n        args       = [\"-m\", \"http.server\", \"${NOMAD_PORT_http}\", \"--directory\", \"${NOMAD_TASK_DIR}\"]\n        promises   = \"stdio rpath inet\"\n        unveil     = [\"r:/etc/mime.types\", \"r:${NOMAD_TASK_DIR}\"]\n      }\n\n      template {\n        destination = \"local/index.html\"\n        data        = <<EOH\n<!doctype html>\n<html>\n  <title>example</title>\n  <body><p>Hello, friend!</p></body>\n</html>\nEOH\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Group Scaling Policy in Nomad Job\nDESCRIPTION: Example of a scaling policy configuration within a Nomad job specification. Shows how to set up automatic scaling based on Prometheus metrics with target value strategy.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/policy.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n  group \"app\" {\n    scaling {\n      min     = 2\n      max     = 10\n      enabled = true\n\n      policy {\n        evaluation_interval = \"5s\"\n        cooldown            = \"1m\"\n\n        check \"active_connections\" {\n          source = \"prometheus\"\n          query  = \"scalar(open_connections_example_cache)\"\n\n          strategy \"target-value\" {\n            target = 10\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Group Block in Nomad Job Specification\nDESCRIPTION: Shows the basic structure of a group block within a Nomad job specification. The group block is used to define a series of tasks that should be co-located on the same Nomad client.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/group.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    # ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Update Block Configuration in Nomad Job\nDESCRIPTION: Example of a complete update block configuration showing all available parameters including max_parallel, health checks, deadlines, and canary settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/update.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  update {\n    max_parallel      = 3\n    health_check      = \"checks\"\n    min_healthy_time  = \"10s\"\n    healthy_deadline  = \"5m\"\n    progress_deadline = \"10m\"\n    auto_revert       = true\n    auto_promote      = true\n    canary            = 1\n    stagger           = \"30s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Constraint Block Example in Nomad HCL\nDESCRIPTION: Demonstrates constraint configuration at job, group and task levels to filter nodes based on kernel type, host distribution, and custom metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/constraint.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  # All tasks in this job must run on linux.\n  constraint {\n    attribute = \"${attr.kernel.name}\"\n    value     = \"linux\"\n  }\n\n  group \"example\" {\n    # All groups in this job should be scheduled on different hosts.\n    constraint {\n      operator  = \"distinct_hosts\"\n      value     = \"true\"\n    }\n\n    task \"server\" {\n      # All tasks must run where \"my_custom_value\" is greater than 3.\n      constraint {\n        attribute = \"${meta.my_custom_value}\"\n        operator  = \">\"\n        value     = \"3\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NUMA Affinity for CPU Cores in Nomad Job Specification\nDESCRIPTION: Example showing how to configure a Nomad job that requires all 8 CPU cores to be located on the same NUMA node. This configuration ensures the task is placed on a node with sufficient unused CPU cores in a compatible NUMA configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/numa.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n  group \"group\" {\n    task \"task\" {\n      resources {\n        cores = 8\n        numa {\n          affinity = \"require\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nomad Scheduler Configuration\nDESCRIPTION: Example JSON payload for updating the scheduler configuration on a Nomad server. Allows modifying which scheduler types are enabled and how many scheduler workers should be running.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enabled_schedulers\": [\n    \"service\",\n    \"batch\",\n    \"system\",\n    \"sysbatch\",\n    \"_core\"\n  ],\n  \"num_schedulers\": 12\n  \"server_id\": \"server1.global\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Management in Nomad Client (HCL)\nDESCRIPTION: This snippet shows how to configure the users block in a Nomad client configuration. It controls aspects of the client's use of operating system users, specifically setting the range for dynamic user allocation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/client.mdx#2025-04-19_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  users {\n    dynamic_user_min = 80000\n    dynamic_user_max = 89999\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Network Block in Nomad HCL\nDESCRIPTION: This snippet shows how to define a basic network block in a Nomad job specification to request a dynamic port.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/networking/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"...\" {\n  # ...\n  group \"...\" {\n    network {\n      port \"http\" {}\n    }\n    # ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Healthiness and Readiness Checks in Nomad\nDESCRIPTION: Example showing how to configure both healthiness and readiness checks for a service. The TCP connection check serves as a healthiness check, while the HTTP check for leader election is configured as a readiness check with failures ignored during deployments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/check.mdx#2025-04-19_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nservice {\n  # This is a healthiness check that will be used to verify the service\n  # is responsive to tcp connections and behaving as expected.\n  check {\n    name     = \"connection_tcp\"\n    type     = \"tcp\"\n    port     = 6379\n    interval = \"10s\"\n    timeout  = \"2s\"\n  }\n\n  # This is a readiness check that is used to verify that, for example, the\n  # application has elected a leader by making a request to its /leader endpoint.\n  # Failures of this check are ignored during deployments.\n  check {\n    name      = \"leader_elected\"\n    type      = \"http\"\n    path      = \"/leader\"\n    interval  = \"10s\"\n    timeout   = \"2s\"\n    on_update = \"ignore\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Output Format for Delete Operation in Nomad Host Volume Plugin\nDESCRIPTION: Specifies the expected JSON format for error output when the delete operation encounters an error. This format allows Nomad to return the error message to the user.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/plugins/storage/host-volumes.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"error\": \"error message\"}\n```\n\n----------------------------------------\n\nTITLE: Setting up Nomad Development Environment without Vagrant\nDESCRIPTION: Instructions for setting up a Nomad development environment directly on a local machine, including Go installation, repository cloning, and environment bootstrapping.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/README.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/hashicorp/nomad.git\n$ cd nomad\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ make bootstrap\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ [ \"$(ulimit -n)\" -lt 1024 ] && ulimit -n 1024\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ make test\n```\n\n----------------------------------------\n\nTITLE: Configuring Bridge Network Mode in Nomad HCL\nDESCRIPTION: This snippet illustrates how to configure bridge network mode in a Nomad job specification, mapping a host port to a specific port inside the allocation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/networking/index.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\njob \"...\" {\n  # ...\n  group \"...\" {\n    network {\n      mode = \"bridge\"\n\n      port \"http\" {\n        to = 3000\n      }\n    }\n    # ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nomad Agent with TLS Configuration in Shell\nDESCRIPTION: Commands to run Nomad agent with TLS enabled in different modes. Includes options for dev mode, server agent, and client agent configurations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/tls/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Run the dev agent with TLS enabled\nnomad agent -dev -config=tls-dev.hcl\n\n# Run a *server* agent with your configuration and TLS enabled\nnomad agent -config=path/to/custom.hcl -config=tls-server.hcl\n\n# Run a *client* agent with your configuration and TLS enabled\nnomad agent -config=path/to/custom.hcl -config=tls-client.hcl\n```\n\n----------------------------------------\n\nTITLE: Reserving Whole CPU Cores for a Task\nDESCRIPTION: HCL configuration for reserving specific CPU cores for a task on Linux systems, ensuring exclusive access to these cores.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/cpu.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\ntask {\n  resources {\n    cores = 4\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Consul Configuration Block in HCL\nDESCRIPTION: Basic configuration block showing how to configure Consul integration in a Nomad agent configuration file. Demonstrates setting the Consul address, authentication credentials, and access token.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/consul.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nconsul {\n  address = \"127.0.0.1:8500\"\n  auth    = \"admin:password\"\n  token   = \"abcd1234\"\n}\n```\n\n----------------------------------------\n\nTITLE: Nomad Variable Interpolation in Environment Configuration\nDESCRIPTION: Example of using Nomad interpolation syntax to dynamically set environment variables based on node properties.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/env.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nenv {\n  NODE_CLASS = \"${node.class}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ACL Policy Structure in Nomad using HCL\nDESCRIPTION: Example ACL policy structure demonstrating namespace rules with different permissions, including wildcard labels and various policy types for different Nomad components.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/acl-policy.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# this is a namespace rule for the \"foo\" namespace\nnamespace \"foo\" {\n  policy = \"write\"                # this is a policy field\n  capabilities = [\"alloc-exec\"]  # this is a capabilities list\n\n  # this block controls access to variables in this namespace\n  variables {\n    path \"project/*\" {\n      capabilities = [\"read\", \"write\"]\n    }\n  }\n}\n\n# this is a namespace rule, with a wildcard label\nnamespace \"*\" {\n  policy = \"read\"\n}\n\nnode {\n  policy = \"read\"\n}\n\nagent {\n  policy = \"read\"\n}\n\noperator {\n  policy = \"read\"\n}\n\nquota {\n  policy = \"read\"\n}\n\n# this is a host_volume rule, with a wildcard label\nhost_volume \"*\" {\n  policy = \"read\"\n}\n\nplugin {\n  policy = \"read\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Countdash Application with Connect Integration\nDESCRIPTION: Full example of a counter dashboard application using Consul Connect with both API and frontend services, including upstream service configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/connect.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\njob \"countdash\" {\n  datacenters = [\"dc1\"]\n\n  group \"api\" {\n    network {\n      mode = \"bridge\"\n    }\n\n    service {\n      name = \"count-api\"\n      port = \"9001\"\n\n      connect {\n        sidecar_service {}\n      }\n\n      check {\n        expose   = true\n        type     = \"http\"\n        name     = \"api-health\"\n        path     = \"/health\"\n        interval = \"10s\"\n        timeout  = \"3s\"\n      }\n    }\n\n    task \"web\" {\n      driver = \"docker\"\n\n      config {\n        image = \"hashicorpdev/counter-api:v3\"\n      }\n    }\n  }\n\n  group \"dashboard\" {\n    network {\n      mode = \"bridge\"\n\n      port \"http\" {\n        static = 9002\n        to     = 9002\n      }\n    }\n\n    service {\n      name = \"count-dashboard\"\n      port = \"9002\"\n\n      connect {\n        sidecar_service {\n          proxy {\n            upstreams {\n              destination_name = \"count-api\"\n              local_bind_port  = 8080\n            }\n          }\n        }\n      }\n    }\n\n    task \"dashboard\" {\n      driver = \"docker\"\n\n      env {\n        COUNTING_SERVICE_URL = \"http://${NOMAD_UPSTREAM_ADDR_count_api}\"\n      }\n\n      config {\n        image = \"hashicorpdev/counter-dashboard:v3\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Device Requirements Configuration in Nomad\nDESCRIPTION: Example demonstrating how to specify device requirements, specifically requesting NVIDIA GPUs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/resources.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresources {\n  device \"nvidia/gpu\" {\n    count = 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying CNI Args in Nomad Network Configuration\nDESCRIPTION: This HCL snippet shows how to specify CNI arguments in a Nomad network configuration. It uses the 'cni/mynet' mode, defines a port mapping, and includes a custom CNI argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/network.mdx#2025-04-19_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nnetwork {\n  mode = \"cni/mynet\"\n  port \"http\" {\n    to = 8080\n  }\n  cni {\n    args = {\n     \"nomad.region\" : \"${node.region}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Periodic and Parameterized Job Configurations\nDESCRIPTION: An example showing how to configure a job to be both periodic and parameterized, illustrating Nomad's internal hierarchy for handling such jobs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/parameterized.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n  periodic {\n    crons = [\n      \"*/40 * * * * * *\"\n    ]\n  }\n  parameterized {\n    payload       = \"required\"\n    meta_required = [\"dispatcher_email\"]\n    meta_optional = [\"pager_email\"]\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Service Mesh Exposure in Nomad\nDESCRIPTION: Example job configuration that exposes a service called 'api' to the Consul service mesh using bridge networking mode and sidecar service configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/networking/service-mesh.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"...\"  {\n  # ...\n  group \"...\" {\n    network {\n      mode = \"bridge\"\n\n      port \"http\" {}\n    }\n\n    service {\n      name = \"api\"\n      port = \"http\"\n\n      connect {\n        sidecar_service {}\n      }\n    }\n    # ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad UI with Content Security Policy, Consul/Vault Integration, and Custom Labels in HCL\nDESCRIPTION: This HCL code block demonstrates a complete UI configuration for a Nomad agent. It shows how to enable the UI, set Content Security Policy directives, configure integration with Consul and Vault UIs, and add a custom label with specific styling to the Nomad UI header.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/ui.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nui {\n  enabled =  true\n\n  content_security_policy {\n    connect_src     = [\"*\"]\n    default_src     = [\"'none'\"]\n    form_action     = [\"'none'\"]\n    frame_ancestors = [\"'none'\"]\n    img_src         = [\"'self'\",\"data:\"]\n    script_src      = [\"'self'\"]\n    style_src       = [\"'self'\",\"'unsafe-inline'\"]\n  }\n\n  consul {\n    ui_url = \"https://consul.example.com:8501/ui\"\n  }\n\n  vault {\n    ui_url = \"https://vault.example.com:8200/ui\"\n  }\n\n  label {\n    text             = \"Staging Cluster\"\n    background_color = \"yellow\"\n    text_color       = \"#000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Infrastructure Jobs with Specific Node Pools\nDESCRIPTION: Examples of infrastructure jobs targeting specific node pools, including ingress proxies and CSI controller plugins that need specialized node configurations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/node-pools.mdx#2025-04-19_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\njob \"ingress-proxy\" {\n  namespace = \"infra\"\n  node_pool = \"ingress\"\n  # ...\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\njob \"csi-controller\" {\n  namespace = \"infra\"\n  node_pool = \"csi-controllers\"\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Nomad Agent in Development Mode\nDESCRIPTION: This snippet demonstrates how to start a Nomad agent in development mode using the 'nomad agent' command. It shows the initial output, including configuration details and log messages.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/nomad-agent.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo nomad agent -dev\n==> Starting Nomad agent...\n==> Nomad agent configuration:\n\n                Client: true\n             Log Level: INFO\n                Region: global (DC: dc1)\n                Server: true\n\n==> Nomad agent started! Log data will stream in below:\n\n    [INFO] serf: EventMemberJoin: server-1.node.global 127.0.0.1\n    [INFO] nomad: starting 4 scheduling worker(s) for [service batch _core]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Scheduler with HCL in Nomad Server Configuration\nDESCRIPTION: Example of configuring a Nomad server with a custom scheduler configuration during bootstrap. This sets up spread scheduling and enables preemption for all job-type schedulers. This configuration is only applied during initial bootstrap.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/server.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nserver {\n  default_scheduler_config {\n    scheduler_algorithm             = \"spread\"\n    memory_oversubscription_enabled = true\n    reject_job_registration         = false\n    pause_eval_broker               = false\n\n    preemption_config {\n      batch_scheduler_enabled    = true\n      system_scheduler_enabled   = true\n      service_scheduler_enabled  = true\n      sysbatch_scheduler_enabled = true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NUMA Affinity for GPU and CPU Co-location in Nomad\nDESCRIPTION: Example demonstrating how to allocate a GPU device and ensure it resides on the same NUMA node as the 4 CPU cores reserved for the task. This configuration is useful for workloads that require low-latency access between processing units.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/numa.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresources {\n  cores  = 4\n  memory = 2048\n\n  device \"nvidia/gpu/1080ti\" {\n    count = 1\n  }\n\n  numa {\n    affinity = \"require\"\n    devices = [\n      \"nvidia/gpu/1080ti\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nomad CLI with Remote Cluster (Environment Variable)\nDESCRIPTION: This command demonstrates how to use the Nomad CLI to interact with a remote Nomad cluster by setting the NOMAD_ADDR environment variable. It allows you to query the status of the remote cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/index.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ NOMAD_ADDR=https://remote-address:4646 nomad status\n```\n\n----------------------------------------\n\nTITLE: Configuring Workload Identity for Consul in Nomad (HCL)\nDESCRIPTION: Example configuration for setting up service_identity and task_identity in Nomad's Consul integration. This setup is recommended for migrating existing jobs to use Workload Identity without modifying job specifications.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/consul.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconsul {\n  service_identity {\n    aud = [\"consul.io\"]\n    ttl = \"1h\"\n  }\n\n  task_identity {\n    aud = [\"consul.io\"]\n    ttl = \"1h\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CNI Network in JSON for Nomad\nDESCRIPTION: This snippet shows a JSON configuration for a CNI network named 'mynet' using the ptp plugin with IP masquerading and host-local IPAM. It also includes a portmap plugin for port mapping capabilities.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/network.mdx#2025-04-19_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cniVersion\": \"0.3.1\",\n  \"name\": \"mynet\",\n  \"plugins\": [\n    {\n      \"type\": \"ptp\",\n      \"ipMasq\": true,\n      \"ipam\": {\n        \"type\": \"host-local\",\n        \"subnet\": \"172.16.30.0/24\",\n        \"routes\": [\n          {\n            \"dst\": \"0.0.0.0/0\"\n          }\n        ]\n      }\n    },\n    {\n      \"type\": \"portmap\",\n      \"capabilities\": { \"portMappings\": true }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Strategy in Nomad Job HCL\nDESCRIPTION: Example of implementing a migrate block in a Nomad job specification to control allocation migration from draining nodes. The configuration sets migration parameters including parallel migrations, health check mechanism, and timing thresholds.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/migrate.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  migrate {\n    max_parallel     = 1\n    health_check     = \"checks\"\n    min_healthy_time = \"10s\"\n    healthy_deadline = \"5m\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Parameterized Job Configuration in HCL\nDESCRIPTION: A simple example of configuring a parameterized job in Nomad that requires a payload and certain metadata. This demonstrates the basic structure of the parameterized block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/parameterized.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  parameterized {\n    payload       = \"required\"\n    meta_required = [\"dispatcher_email\"]\n    meta_optional = [\"pager_email\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Meta Blocks in Nomad Job Specification\nDESCRIPTION: Example showing how to use the 'meta' block at job, group, and task levels in a Nomad job specification. Metadata is merged up the hierarchy, with job-level metadata applying to all groups and tasks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/meta.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  meta {\n    my-key = \"my-value\"\n  }\n\n  group \"example\" {\n    meta {\n      my-key = \"my-value\"\n    }\n\n    task \"server\" {\n      meta {\n        my-key = \"my-value\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ACL Policy for Variables in HCL\nDESCRIPTION: This HCL snippet defines an ACL policy for variables in the 'dev' namespace. It grants full access to variables under 'project/' paths and read-only access to 'system/' paths.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/variables.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nnamespace \"dev\" {\n  policy       = \"write\"\n  capabilities = [\"alloc-node-exec\"]\n\n  variables {\n\n    # full access to variables in all \"project\" paths\n    path \"project/*\" {\n      capabilities = [\"write\", \"read\", \"destroy\", \"list\"]\n    }\n\n    # read/list access within a \"system/\" path belonging to administrators\n    path \"system/*\" {\n      capabilities = [\"read\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mount for a Task in Nomad HCL Job Specification\nDESCRIPTION: This example demonstrates how to define a volume at the group level and mount it within a task. It shows a read-only host volume named 'certs' being mounted to '/etc/ssl/certs' with private propagation mode.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/volume_mount.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    volume \"certs\" {\n      type = \"host\"\n      read_only = true\n      source = \"ca-certificates\"\n    }\n\n    task \"example\" {\n      volume_mount {\n        volume      = \"certs\"\n        destination = \"/etc/ssl/certs\"\n        propagation_mode = \"private\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Nomad Cluster Configuration in Terraform\nDESCRIPTION: Example of customizing the Nomad cluster configuration by editing the terraform.tfvars file to specify region, instance type, and node counts for servers and clients.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/terraform/README.md#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nregion                           = \"us-east-1\"\ninstance_type                    = \"t2.medium\"\nserver_count                     = \"3\"\nclient_count_linux               = \"4\"\nclient_count_windows_2016        = \"1\"\n```\n\n----------------------------------------\n\nTITLE: Common Nomad Server Configuration in HCL\nDESCRIPTION: This example demonstrates a common Nomad agent server configuration block with bootstrap_expect and server_join settings. The retry_join IP addresses could also be DNS names pointing to other Nomad servers in the cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/server.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nserver {\n  enabled          = true\n  bootstrap_expect = 3\n\n  server_join {\n    retry_join     = [ \"1.1.1.1\", \"2.2.2.2\" ]\n    retry_max      = 3\n    retry_interval = \"15s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Nomad Agent with Connect Support\nDESCRIPTION: Command to start a Nomad development agent with Connect enabled, which is required for Consul service mesh integration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/service-mesh.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo nomad agent -dev-connect\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Discovery for a Task in HCL\nDESCRIPTION: This example creates a service in Consul for service discovery. It defines a Docker task with a health check and service tags.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/task.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"server\" {\n  driver = \"docker\"\n  config {\n    image = \"hashicorp/http-echo\"\n    args  = [\"-text\", \"hello world\"]\n  }\n\n  service {\n    tags = [\"default\"]\n\n    check {\n      type     = \"tcp\"\n      interval = \"10s\"\n      timeout  = \"2s\"\n    }\n  }\n\n  resources {\n    cpu = 20\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Device Block Configuration in Nomad\nDESCRIPTION: Example showing a Nomad job configuration requesting two NVIDIA GPUs with memory constraints and affinities.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/device.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    task \"server\" {\n      resources {\n        device \"nvidia/gpu\" {\n          count = 2\n\n          constraint {\n            attribute = \"${device.attr.memory}\"\n            operator  = \">=\"\n            value     = \"2 GiB\"\n          }\n\n          affinity {\n            attribute = \"${device.attr.memory}\"\n            operator  = \">=\"\n            value     = \"4 GiB\"\n            weight    = 75\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Nomad Allocation JSON Response\nDESCRIPTION: Comprehensive example of a Nomad allocation response object containing details about a Redis container deployment. Includes allocation metadata, job configuration, resource allocations, task states, and scheduling metrics.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/allocations.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ID\": \"a8198d79-cfdb-6593-a999-1e9adabcba2e\",\n  \"EvalID\": \"5456bd7a-9fc0-c0dd-6131-cbee77f57577\",\n  \"Name\": \"example.cache[0]\",\n  \"NodeID\": \"fb2170a8-257d-3c64-b14d-bc06cc94e34c\",\n  \"PreviousAllocation\": \"516d2753-0513-cfc7-57ac-2d6fac18b9dc\",\n  \"NextAllocation\": \"cd13d9b9-4f97-7184-c88b-7b451981616b\",\n  \"RescheduleTracker\": {\n    \"Events\": [\n      {\n        \"PrevAllocID\": \"516d2753-0513-cfc7-57ac-2d6fac18b9dc\",\n        \"PrevNodeID\": \"9230cd3b-3bda-9a3f-82f9-b2ea8dedb20e\",\n        \"RescheduleTime\": 1517434161192946200,\n        \"Delay\": \"5000000000\"\n      }\n    ]\n  },\n  \"JobID\": \"example\",\n  \"Job\": {\n    \"Region\": \"global\",\n    \"ID\": \"example\",\n    \"ParentID\": \"\",\n    \"Name\": \"example\",\n    \"Type\": \"service\",\n    \"Priority\": 50,\n    \"AllAtOnce\": false,\n    \"Datacenters\": [\"dc1\"],\n    \"Constraints\": null,\n    \"Affinities\": null,\n    \"TaskGroups\": [\n      {\n        \"Name\": \"cache\",\n        \"Count\": 1,\n        \"Constraints\": null,\n        \"Affinities\": null,\n        \"RestartPolicy\": {\n          \"Attempts\": 10,\n          \"Interval\": 300000000000,\n          \"Delay\": 25000000000,\n          \"Mode\": \"delay\"\n        },\n        \"Spreads\": null,\n        \"Tasks\": [\n          {\n            \"Name\": \"redis\",\n            \"Driver\": \"docker\",\n            \"User\": \"\",\n            \"Config\": {\n              \"port_map\": [\n                {\n                  \"db\": 6379\n                }\n              ],\n              \"image\": \"redis:7\"\n            },\n            \"Env\": null,\n            \"Services\": [\n              {\n                \"Name\": \"redis-cache\",\n                \"PortLabel\": \"db\",\n                \"Tags\": [\"global\", \"cache\"],\n                \"Checks\": [\n                  {\n                    \"Name\": \"alive\",\n                    \"Type\": \"tcp\",\n                    \"Command\": \"\",\n                    \"Args\": null,\n                    \"Path\": \"\",\n                    \"Protocol\": \"\",\n                    \"PortLabel\": \"\",\n                    \"Interval\": 10000000000,\n                    \"Timeout\": 2000000000,\n                    \"InitialStatus\": \"\"\n                  }\n                ]\n              }\n            ],\n            \"Vault\": null,\n            \"Templates\": null,\n            \"Constraints\": null,\n            \"Affinities\": null,\n            \"Resources\": {\n              \"CPU\": 500,\n              \"MemoryMB\": 10,\n              \"DiskMB\": 0,\n              \"Networks\": [\n                {\n                  \"Device\": \"\",\n                  \"CIDR\": \"\",\n                  \"IP\": \"\",\n                  \"MBits\": 10,\n                  \"ReservedPorts\": null,\n                  \"DynamicPorts\": [\n                    {\n                      \"Label\": \"db\",\n                      \"Value\": 0\n                    }\n                  ]\n                }\n              ]\n            },\n            \"Spreads\": null,\n            \"DispatchPayload\": null,\n            \"Meta\": null,\n            \"KillTimeout\": 5000000000,\n            \"LogConfig\": {\n              \"MaxFiles\": 10,\n              \"MaxFileSizeMB\": 10\n            },\n            \"Artifacts\": null,\n            \"Leader\": false\n          }\n        ],\n        \"EphemeralDisk\": {\n          \"Sticky\": false,\n          \"SizeMB\": 300,\n          \"Migrate\": false\n        },\n        \"Meta\": null\n      }\n    ],\n    \"Update\": {\n      \"Stagger\": 10000000000,\n      \"MaxParallel\": 0\n    },\n    \"Periodic\": null,\n    \"ParameterizedJob\": null,\n    \"Payload\": null,\n    \"Spreads\": null,\n    \"Meta\": null,\n    \"VaultToken\": \"\",\n    \"Status\": \"pending\",\n    \"StatusDescription\": \"\",\n    \"CreateIndex\": 52,\n    \"ModifyIndex\": 52,\n    \"JobModifyIndex\": 52\n  },\n  \"TaskGroup\": \"cache\",\n  \"Resources\": {\n    \"CPU\": 500,\n    \"MemoryMB\": 10,\n    \"DiskMB\": 300,\n    \"Networks\": [\n      {\n        \"Device\": \"lo0\",\n        \"CIDR\": \"\",\n        \"IP\": \"127.0.0.1\",\n        \"MBits\": 10,\n        \"ReservedPorts\": null,\n        \"DynamicPorts\": [\n          {\n            \"Label\": \"db\",\n            \"Value\": 23116\n          }\n        ]\n      }\n    ]\n  },\n  \"SharedResources\": {\n    \"CPU\": 0,\n    \"MemoryMB\": 0,\n    \"DiskMB\": 300,\n    \"Networks\": null\n  },\n  \"TaskResources\": {\n    \"redis\": {\n      \"CPU\": 500,\n      \"MemoryMB\": 10,\n      \"DiskMB\": 0,\n      \"Networks\": [\n        {\n          \"Device\": \"lo0\",\n          \"CIDR\": \"\",\n          \"IP\": \"127.0.0.1\",\n          \"MBits\": 10,\n          \"ReservedPorts\": null,\n          \"DynamicPorts\": [\n            {\n              \"Label\": \"db\",\n              \"Value\": 23116\n            }\n          ]\n        }\n      ]\n    }\n  },\n  \"Metrics\": {\n    \"NodesEvaluated\": 1,\n    \"NodesFiltered\": 0,\n    \"NodesAvailable\": {\n      \"dc1\": 1\n    },\n    \"NodesInPool\": 1,\n    \"ClassFiltered\": null,\n    \"ConstraintFiltered\": null,\n    \"NodesExhausted\": 0,\n    \"ClassExhausted\": null,\n    \"DimensionExhausted\": null,\n    \"Scores\": {\n      \"fb2170a8-257d-3c64-b14d-bc06cc94e34c.binpack\": 0.6205732522109244\n    },\n    \"AllocationTime\": 31729,\n    \"CoalescedFailures\": 0\n  },\n  \"DesiredStatus\": \"run\",\n  \"DesiredDescription\": \"\",\n  \"ClientStatus\": \"running\",\n  \"ClientDescription\": \"\",\n  \"TaskStates\": {\n    \"redis\": {\n      \"State\": \"running\",\n      \"Failed\": false,\n      \"FinishedAt\": \"0001-01-01T00:00:00Z\",\n      \"LastRestart\": \"0001-01-01T00:00:00Z\",\n      \"Restarts\": 0,\n      \"StartedAt\": \"2017-07-25T23:36:26.106431265Z\",\n      \"Events\": [\n        {\n          \"Type\": \"Received\",\n          \"Time\": 1495747371795703800,\n          \"FailsTask\": false,\n          \"RestartReason\": \"\",\n          \"SetupError\": \"\",\n          \"DriverError\": \"\",\n          \"ExitCode\": 0,\n          \"Signal\": 0,\n          \"Message\": \"\",\n          \"KillTimeout\": 0,\n          \"KillError\": \"\",\n          \"KillReason\": \"\",\n          \"StartDelay\": 0,\n          \"DownloadError\": \"\",\n          \"ValidationError\": \"\",\n          \"DiskLimit\": 0,\n          \"FailedSibling\": \"\",\n          \"VaultError\": \"\",\n          \"TaskSignalReason\": \"\",\n          \"TaskSignal\": \"\",\n          \"DriverMessage\": \"\"\n        },\n        {\n          \"Type\": \"Driver\",\n          \"Time\": 1495747371798867200,\n          \"FailsTask\": false,\n          \"RestartReason\": \"\",\n          \"SetupError\": \"\",\n          \"DriverError\": \"\",\n          \"ExitCode\": 0,\n          \"Signal\": 0,\n          \"Message\": \"\",\n          \"KillTimeout\": 0,\n          \"KillError\": \"\",\n          \"KillReason\": \"\",\n          \"StartDelay\": 0,\n          \"DownloadError\": \"\",\n          \"ValidationError\": \"\",\n          \"DiskLimit\": 0,\n          \"FailedSibling\": \"\",\n          \"VaultError\": \"\",\n          \"TaskSignalReason\": \"\",\n          \"TaskSignal\": \"\",\n          \"DriverMessage\": \"Downloading image redis:7\"\n        },\n        {\n          \"Type\": \"Started\",\n          \"Time\": 1495747379525667800,\n          \"FailsTask\": false,\n          \"RestartReason\": \"\",\n          \"SetupError\": \"\",\n          \"DriverError\": \"\",\n          \"ExitCode\": 0,\n          \"Signal\": 0,\n          \"Message\": \"\",\n          \"KillTimeout\": 0,\n          \"KillError\": \"\",\n          \"KillReason\": \"\",\n          \"StartDelay\": 0,\n          \"DownloadError\": \"\",\n          \"ValidationError\": \"\",\n          \"DiskLimit\": 0,\n          \"FailedSibling\": \"\",\n          \"VaultError\": \"\",\n          \"TaskSignalReason\": \"\",\n          \"TaskSignal\": \"\",\n          \"DriverMessage\": \"\"\n        }\n      ]\n    }\n  },\n  \"PreviousAllocation\": \"\",\n  \"CreateIndex\": 54,\n  \"ModifyIndex\": 57,\n  \"AllocModifyIndex\": 54,\n  \"CreateTime\": 1495747371794276400,\n  \"ModifyTime\": 1495747371794276400\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Nomad Jobs API\nDESCRIPTION: This snippet shows the JSON response structure returned by the Nomad Jobs API. It includes detailed information about jobs, their status, and associated metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/index.mdx#2025-04-19_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"CreateIndex\": 52,\n    \"Datacenters\": [\n      \"dc1\",\n      \"dc2\"\n    ],\n    \"ID\": \"countdash\",\n    \"JobModifyIndex\": 56,\n    \"JobSummary\": {\n      \"Children\": {\n        \"Dead\": 0,\n        \"Pending\": 0,\n        \"Running\": 0\n      },\n      \"CreateIndex\": 52,\n      \"JobID\": \"countdash\",\n      \"ModifyIndex\": 55,\n      \"Namespace\": \"default\",\n      \"Summary\": {\n        \"api\": {\n          \"Complete\": 0,\n          \"Failed\": 0,\n          \"Lost\": 0,\n          \"Queued\": 1,\n          \"Running\": 0,\n          \"Starting\": 0\n        },\n        \"dashboard\": {\n          \"Complete\": 0,\n          \"Failed\": 0,\n          \"Lost\": 0,\n          \"Queued\": 1,\n          \"Running\": 0,\n          \"Starting\": 0\n        }\n      }\n    },\n    \"ModifyIndex\": 56,\n    \"Multiregion\": null,\n    \"Name\": \"countdash\",\n    \"Namespace\": \"default\",\n    \"ParameterizedJob\": false,\n    \"ParentID\": \"\",\n    \"Periodic\": false,\n    \"Priority\": 50,\n    \"Status\": \"pending\",\n    \"StatusDescription\": \"\",\n    \"Stop\": false,\n    \"SubmitTime\": 1645230445788556000,\n    \"Type\": \"service\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Consul Connect Sidecar Proxy Configuration in Nomad Job Specification\nDESCRIPTION: An example Nomad job specification using a bridge network with a Consul Connect sidecar proxy for a 'count-api' service. This demonstrates the basic structure of configuring a sidecar service with an empty proxy block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/proxy.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"countdash\" {\n  datacenters = [\"dc1\"]\n\n  group \"api\" {\n    network {\n      mode = \"bridge\"\n    }\n\n    service {\n      name = \"count-api\"\n      port = \"9001\"\n\n      connect {\n        sidecar_service {\n          proxy {}\n        }\n      }\n    }\n\n    task \"web\" {\n      driver = \"docker\"\n\n      config {\n        image = \"hashicorpdev/counter-api:v3\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Volume Mounts in Nomad\nDESCRIPTION: Example showing how to configure volume mounts for Docker containers, including host path and container path mappings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  volumes = [\n    # Use absolute paths to mount arbitrary paths on the host\n    \"/path/on/host:/path/in/container\",\n\n    # Use relative paths to rebind paths already in the allocation dir\n    \"relative/to/task:/also/in/container\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ACL Block in Nomad Agent Configuration\nDESCRIPTION: A basic configuration example for the ACL block in a Nomad agent configuration file. This enables ACL enforcement and sets custom TTL values for tokens, policies, and roles.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/acl.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nacl {\n  enabled    = true\n  token_ttl  = \"30s\"\n  policy_ttl = \"60s\"\n  role_ttl   = \"60s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Agent in HCL\nDESCRIPTION: This HCL configuration file sets up a Nomad agent to run in both client and server mode. It specifies data directory, binding address, advertise addresses, server and client configurations, enables the raw_exec plugin, and sets up Consul integration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata_dir  = \"/var/lib/nomad\"\n\nbind_addr = \"0.0.0.0\" # the default\n\nadvertise {\n  # Defaults to the first private IP address.\n  http = \"1.2.3.4\"\n  rpc  = \"1.2.3.4\"\n  serf = \"1.2.3.4:5648\" # non-default ports may be specified\n}\n\nserver {\n  enabled          = true\n  bootstrap_expect = 3\n}\n\nclient {\n  enabled       = true\n}\n\nplugin \"raw_exec\" {\n  config {\n    enabled = true\n  }\n}\n\nconsul {\n  address = \"1.2.3.4:8500\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Affinities in Nomad Job Specification\nDESCRIPTION: This snippet demonstrates how to define affinities at job, group, and task levels in a Nomad job specification. It shows preferences for datacenter, rack, and custom metadata values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/affinity.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  # Prefer nodes in the us-west1 datacenter\n  affinity {\n    attribute = \"${node.datacenter}\"\n    value     = \"us-west1\"\n    weight    = 100\n  }\n\n  group \"example\" {\n    # Prefer the \"r1\" rack\n    affinity {\n      attribute  = \"${meta.rack}\"\n      value     = \"r1\"\n      weight    = 50\n    }\n\n    task \"server\" {\n      # Prefer nodes where \"my_custom_value\" is greater than 3\n      affinity {\n        attribute = \"${meta.my_custom_value}\"\n        operator  = \">\"\n        value     = \"3\"\n        weight    = 50\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Schedulers in Nomad Server Configuration\nDESCRIPTION: This example demonstrates how to restrict which schedulers are enabled in Nomad and how to set the maximum number of cores to utilize when participating in scheduling decisions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/server.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nserver {\n  enabled            = true\n  enabled_schedulers = [\"batch\", \"service\"]\n  num_schedulers     = 7\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Job Configuration JSON in Nomad\nDESCRIPTION: Example JSON configuration for a Nomad job with batch type, multiple tasks, and various configuration options including Docker containers, resources, and networking.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Region\": \"global\",\n  \"Namespace\": \"apps\",\n  \"ID\": \"example\",\n  \"ParentID\": \"\",\n  \"Name\": \"example\",\n  \"Type\": \"batch\",\n  \"Priority\": 50,\n  \"AllAtOnce\": false,\n  \"Datacenters\": [\"dc1\"],\n  \"NodePool\": \"prod\",\n  \"Constraints\": [\n    {\n      \"LTarget\": \"${attr.kernel.name}\",\n      \"RTarget\": \"linux\",\n      \"Operand\": \"=\"\n    }\n  ],\n  \"TaskGroups\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Block in Nomad Server\nDESCRIPTION: Example configuration block for setting up search parameters in Nomad server. Configures fuzzy search enablement, query limits, result limits, and minimum search term length. These settings control the behavior of the Nomad server search API.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/search.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nserver {\n  search {\n    fuzzy_enabled   = true\n    limit_query     = 200\n    limit_results   = 1000\n    min_term_length = 5\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Job with Connect Sidecar Service\nDESCRIPTION: Example of a basic Nomad job configuration with Consul Connect integration using a sidecar service for a counter API application.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/connect.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"countdash\" {\n  datacenters = [\"dc1\"]\n\n  group \"api\" {\n    network {\n      mode = \"bridge\"\n    }\n\n    service {\n      name = \"count-api\"\n      port = \"9001\"\n\n      connect {\n        sidecar_service {}\n      }\n    }\n\n    task \"web\" {\n      driver = \"docker\"\n\n      config {\n        image = \"hashicorpdev/counter-api:v3\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Task Block in HCL\nDESCRIPTION: This snippet shows the basic structure of a task block within a Nomad job specification. It demonstrates how to define a task named 'server' within a job group.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/task.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    task \"server\" {\n      # ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a PEM Certificate Bundle from Vault in Nomad (HCL)\nDESCRIPTION: Shows how to generate a PKI certificate from Vault in PEM format and combine the certificate, CA, and key into a single bundle file for application use.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_19\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate {\n  data = <<EOH\n{{ with pkiCert \"pki/issue/foo\" \"common_name=foo.service.consul\" \"ip_sans=127.0.0.1\" \"format=pem\" }}\n{{ .Cert }}\n{{ .CA }}\n{{ .Key }}{{ end }}\nEOH\n  destination   = \"${NOMAD_SECRETS_DIR}/bundle.pem\"\n  change_mode   = \"restart\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Filter Expression with curl\nDESCRIPTION: Example showing how to use the filter parameter with URL encoding to filter API results. This demonstrates the syntax for sending complex filter expressions via HTTP.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/index.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl --get https://localhost:4646/v1/<path> \\\n    --data-urlencode 'filter=<filter expression>'\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Health Checks for a Nomad Service\nDESCRIPTION: Configuration with multiple health checks for a service including HTTP, HTTPS, and script checks. All checks must pass for the service to be considered healthy.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/check.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nservice {\n  check {\n    name     = \"HTTP Check\"\n    type     = \"http\"\n    port     = \"lb\"\n    path     = \"/_healthz\"\n    interval = \"5s\"\n    timeout  = \"2s\"\n  }\n\n  check {\n    name     = \"HTTPS Check\"\n    type     = \"http\"\n    protocol = \"https\"\n    port     = \"lb\"\n    path     = \"/_healthz\"\n    interval = \"5s\"\n    timeout  = \"2s\"\n    method   = \"POST\"\n  }\n\n  check {\n    name      = \"Postgres Check\"\n    type      = \"script\"\n    command   = \"/usr/local/bin/pg-tools\"\n    args      = [\"verify\", \"database\", \"prod\", \"up\"]\n    interval  = \"5s\"\n    timeout   = \"2s\"\n    on_update = \"ignore_warnings\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Nomad Job with Upstream Service Connection for Consul Connect\nDESCRIPTION: Example Nomad job specification demonstrating how to configure a service to connect to an upstream service using Consul Connect sidecar. This shows defining upstream connections with various parameters including destination_name, local_bind_port, and mesh_gateway configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/upstreams.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"countdash\" {\n  datacenters = [\"dc1\"]\n\n  group \"dashboard\" {\n    network {\n      mode = \"bridge\"\n\n      port \"http\" {\n        static = 9002\n        to     = 9002\n      }\n    }\n\n    service {\n      name = \"count-dashboard\"\n      port = \"9002\"\n\n      connect {\n        sidecar_service {\n          proxy {\n            upstreams {\n              destination_name = \"count-api\"\n              local_bind_port  = 8080\n              datacenter = \"dc2\"\n              local_bind_address = \"127.0.0.1\"\n              mesh_gateway {\n                mode = \"local\"\n              }\n            }\n          }\n        }\n      }\n    }\n\n    task \"dashboard\" {\n      driver = \"docker\"\n\n      env {\n        COUNTING_SERVICE_URL = \"http://${NOMAD_UPSTREAM_ADDR_count_api}\"\n      }\n\n      config {\n        image = \"hashicorpdev/counter-dashboard:v3\"\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding HashiCorp GPG Key on Ubuntu/Debian\nDESCRIPTION: Downloads and adds the HashiCorp GPG key to the system's trusted keys for secure package verification.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ wget -O- https://apt.releases.hashicorp.com/gpg | \\\n  sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n```\n\n----------------------------------------\n\nTITLE: Verifying Consul and Nomad Status\nDESCRIPTION: Basic status commands to verify that Consul and Nomad are running properly in the provisioned cluster. These commands check cluster members and node status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ consul members\n$ nomad server members\n$ nomad node status\n```\n\n----------------------------------------\n\nTITLE: Specifying Docker Image URL in Nomad HCL\nDESCRIPTION: Demonstrates how to specify a Docker image URL in the task configuration, including the use of a custom registry.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  image = \"https://hub.docker.internal/redis:7\"\n}\n```\n\n----------------------------------------\n\nTITLE: Port Mapping with Docker in Nomad Network Configuration (HCL)\nDESCRIPTION: Example showing how to map a dynamic port to a fixed container port (8080) using Docker driver. This allows the application to listen on a fixed port inside the container while exposing it through a dynamic port on the host.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/network.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"app\" {\n  network {\n    port \"http\" {\n      to = 8080\n    }\n  }\n\n  task \"example\" {\n    driver = \"docker\"\n\n    config {\n      ports = [\"http\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Logging in Nomad HCL\nDESCRIPTION: Shows how to configure Docker logging options in the Nomad task configuration, using the fluentd logging driver as an example.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  logging {\n    type = \"fluentd\"\n    config {\n      fluentd-address = \"localhost:24224\"\n      tag = \"your_tag\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating PKI Certificates from Vault as Individual Files (HCL)\nDESCRIPTION: Demonstrates how to generate PKI/TLS certificates using Vault and split the certificate, CA, and private key into separate files for use in a Nomad job.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_18\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate {\n  data = <<EOH\n{{ with pkiCert \"pki/issue/foo\" \"common_name=foo.service.consul\" \"ip_sans=127.0.0.1\" }}\n{{- .Cert -}}\n{{ end }}\nEOH\n  destination   = \"${NOMAD_SECRETS_DIR}/certificate.crt\"\n  change_mode   = \"restart\"\n}\n\ntemplate {\n  data = <<EOH\n{{ with pkiCert \"pki/issue/foo\" \"common_name=foo.service.consul\" \"ip_sans=127.0.0.1\" }}\n{{- .CA -}}\n{{ end }}\nEOH\n  destination   = \"${NOMAD_SECRETS_DIR}/ca.crt\"\n  change_mode   = \"restart\"\n}\n\ntemplate {\n  data = <<EOH\n{{ with pkiCert \"pki/issue/foo\" \"common_name=foo.service.consul\" \"ip_sans=127.0.0.1\" }}\n{{- .Key -}}\n{{ end }}\nEOH\n  destination   = \"${NOMAD_SECRETS_DIR}/private_key.key\"\n  change_mode   = \"restart\"\n}\n```\n\n----------------------------------------\n\nTITLE: S3 Upload Job with OIDC Authentication in Nomad\nDESCRIPTION: This Nomad jobspec creates a batch job that uploads a file to S3 using AWS CLI in a Docker container. It uses Nomad's Workload Identity feature to authenticate with AWS via OIDC, specifying the identity and environment variables needed for the AWS SDK to authenticate.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/aws-oidc-provider.mdx#2025-04-19_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\njob \"s3\" {\n  type = \"batch\"\n  group \"bucket\" {\n    task \"copy\" {\n      driver = \"docker\"\n      config {\n        image = \"public.ecr.aws/aws-cli/aws-cli\"\n        command = \"s3\"\n        args = [\"cp\", \"/local/test.txt\", \"s3://<S3_BUCKET_NAME>/test-nomad.txt\"]\n      }\n\n      identity {\n        name = \"aws\"\n        aud = [\"aws\"]\n        file = true\n        ttl = \"1h\"\n\n        # AWS SDKs gracefully handle OIDC/WebIdentity reauthentication when the\n        # session or token expire, therefore a restart isn't needed\n        change_mode = \"noop\"\n      }\n\n      template {\n        destination = \"local/test.txt\"\n        change_mode = \"restart\"\n        data        = <<EOF\nJob:          {{ env \"NOMAD_JOB_NAME\" }}\nAlloc:        {{ env \"NOMAD_ALLOC_ID\" }}\nEOF\n      }\n\n      env {\n        AWS_ROLE_ARN = \"arn:aws:iam::<AWS_ACCOUNT_ID>:role/<IAM_ROLE_NAME>\"\n        # The format of the token file is nomad_$NAME_OF_IDENTITY.jwt\n        AWS_WEB_IDENTITY_TOKEN_FILE = \"${NOMAD_SECRETS_DIR}/nomad_aws.jwt\"\n      }\n\n      resources {\n        cpu    = 500\n        memory = 256\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Redis Job Using Podman Driver in Nomad\nDESCRIPTION: A basic Nomad job definition that deploys a Redis container using the Podman driver. The job configures a network port and specifies the Redis Docker image to use.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\njob \"redis\" {\n  group \"cache\" {\n    network {\n      port \"redis\" { to = 6379 }\n    }\n\n    task \"redis\" {\n      driver = \"podman\"\n      config {\n        image = \"docker.io/library/redis:7\"\n        ports = [\"redis\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Parallel Deployments in Multiregion Strategy\nDESCRIPTION: This example shows how to use the 'max_parallel' parameter in the multiregion strategy block to control the number of concurrent region deployments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/multiregion.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmultiregion {\n\n  strategy {\n    max_parallel = 2\n  }\n\n  region \"north\" {}\n  region \"south\" {}\n  region \"east\" {}\n  region \"west\" {}\n}\n```\n\n----------------------------------------\n\nTITLE: S3 Artifact Download with AWS Credentials in Nomad\nDESCRIPTION: Shows how to provide AWS credentials for downloading from a private S3 bucket. While IAM instance profiles are preferred, direct credential configuration is possible through options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/artifact.mdx#2025-04-19_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nartifact {\n  options {\n    aws_access_key_id     = \"<id>\"\n    aws_access_key_secret = \"<secret>\"\n    aws_access_token      = \"<token>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault Keyring in Nomad\nDESCRIPTION: This example demonstrates how to configure Azure Key Vault keyring through the Nomad configuration file by providing all the required values including tenant ID, client credentials, and key vault details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/keyring/azurekeyvault.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nkeyring \"azurekeyvault\" {\n  active = true\n  name   = \"example\"\n\n  # fields specific to azurekeyvault\n  tenant_id      = \"46646709-b63e-4747-be42-516edeaf1e14\"\n  client_id      = \"03dc33fc-16d9-4b77-8152-3ec568f8af6e\"\n  client_secret  = \"DUJDS3...\"\n  vault_name     = \"nomad\"\n  key_name       = \"nomad_key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Service Discovery in Nomad HCL Template\nDESCRIPTION: This snippet shows how to use a template block in a Nomad job specification to query the service discovery catalog. It uses the 'nomadService' function to retrieve connection information for a database service.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/networking/service-discovery.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\njob \"...\" {\n  # ...\n  group \"...\" {\n    task \"...\" {\n      template {\n        data = <<EOF\n{{ range nomadService \"database\" }}\nDB_CONNECTION=\"host={{ .Address }} port={{ .Port }} user=user password=password dbname=db_name\"\n{{ end }}\nEOF\n        destination = \"local/env.txt\"\n        env         = true\n      }\n    }\n    # ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vault Configuration Block in Nomad\nDESCRIPTION: A basic example of a vault configuration block in Nomad showing how to enable Vault integration and configure default workload identity settings. This includes setting audience values, TTL, and adding extra claims with interpolated values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/vault.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvault {\n  enabled = true\n\n  default_identity {\n    aud = [\"vault.io\"]\n    ttl = \"1h\"\n\n    extra_claims {\n      unique_id = \"${job.region}:${job.namespace}:${job.id}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Restart Policy in HCL\nDESCRIPTION: This snippet demonstrates how to configure a basic restart policy for a task group in a Nomad job specification. It sets the number of restart attempts and the delay between attempts.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/restart.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    restart {\n      attempts = 3\n      delay    = \"30s\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Docker Job in Nomad HCL\nDESCRIPTION: Provides a minimal Nomad job specification for running a Redis container using the Docker driver. This example is used to demonstrate filesystem isolation in Docker tasks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/filesystem.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n  datacenters = [\"dc1\"]\n\n  task \"task1\" {\n    driver = \"docker\"\n\n    config {\n      image = \"redis:6.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Configuration for AWS ASG Target in HCL\nDESCRIPTION: This HCL snippet shows how to configure a policy for the AWS ASG target plugin. It includes settings for ASG name, node class, drain deadline, and purge options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/target/aws-asg.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ncheck \"hashistack-allocated-cpu\" {\n  # ...\n  target \"aws-asg\" {\n    aws_asg_name        = \"hashistack-client-asg\"\n    node_class          = \"hashistack\"\n    node_drain_deadline = \"5m\"\n    node_purge          = \"true\"\n  }\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Job Deployments using curl in Nomad API\nDESCRIPTION: Sample request for retrieving a list of deployments for a specific job. Uses the GET method on the /v1/job/:job_id/deployments endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_17\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/job/my-job/deployments\n```\n\n----------------------------------------\n\nTITLE: Configuring CSI Volume in Nomad Job Specification\nDESCRIPTION: This snippet shows how to configure a CSI volume in a Nomad job specification. It includes settings for type, source, read-only flag, attachment mode, access mode, per-allocation flag, and mount options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/volume.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    volume \"data\" {\n      type            = \"csi\"\n      source          = \"csi-volume\"\n      read_only       = true\n      attachment_mode = \"file-system\"\n      access_mode     = \"single-node-writer\"\n      per_alloc       = true\n\n      mount_options {\n        fs_type     = \"ext4\"\n        mount_flags = [\"noatime\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nomad Port Mapping Configuration\nDESCRIPTION: Example of explicit port mapping configuration in Nomad job specification.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_22\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"example\" {\n  network {\n    port \"redis\" { to = 6379 }\n  }\n  task \"example\" {\n    driver = \"docker\"\n\n    config {\n      image = \"redis\"\n      ports = [\"redis\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnect Block with Stop After Configuration\nDESCRIPTION: Example demonstrating how 'stop_on_client_after' interacts with kill_timeout in tasks. The first group stops allocations after 90 seconds of disconnection, while the second group uses default behavior.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/disconnect.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"first\" {\n  disconnect {\n    stop_on_client_after = \"90s\"\n  }\n\n  task \"first-task\" {\n    kill_timeout = \"15s\"\n  }\n}\n\ngroup \"second\" {\n\n  task \"second-task\" {\n    kill_timeout = \"5s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus YAML for Nomad Metrics Collection\nDESCRIPTION: This YAML configuration sets up Prometheus to scrape metrics from Nomad servers and clients. It uses Consul for service discovery and defines specific job configurations for different Nomad components.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/integrations/prometheus/README.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval:     15s\n  evaluation_interval: 15s\n\nscrape_configs:\n  - job_name: 'nomad_server'\n\n    consul_sd_configs:\n    - server: 'localhost:8500'\n      services: ['nomad-server']\n\n    relabel_configs:\n    - source_labels: ['__meta_consul_tags']\n      regex: '(.*)'\n      target_label: '__address__'\n      replacement: '${1}:4646'\n\n    metrics_path: '/v1/metrics'\n    params:\n      format: ['prometheus']\n\n  - job_name: 'nomad_client'\n\n    consul_sd_configs:\n    - server: 'localhost:8500'\n      services: ['nomad-client']\n\n    relabel_configs:\n    - source_labels: ['__meta_consul_tags']\n      regex: '(.*)'\n      target_label: '__address__'\n      replacement: '${1}:4646'\n\n    metrics_path: '/v1/metrics'\n    params:\n      format: ['prometheus']\n```\n\n----------------------------------------\n\nTITLE: Basic Upstream Configuration Example in Nomad\nDESCRIPTION: A minimal upstream configuration example showing how to specify a destination service and local bind port. This is the simplest form of upstream definition for connecting to another service in the Consul service mesh.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/upstreams.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n    upstreams {\n      destination_name = \"count-api\"\n      local_bind_port = 8080\n    }\n```\n\n----------------------------------------\n\nTITLE: DNS Configuration in Nomad Network Block (HCL)\nDESCRIPTION: Example showing how to configure custom DNS resolvers for a Nomad allocation. This configuration sets Google's DNS resolvers (8.8.8.8 and 8.8.4.4) to be used by the allocation for name resolution.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/network.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nnetwork {\n  dns {\n    servers = [\"8.8.8.8\", \"8.8.4.4\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Directory Creation Plugin in Bash\nDESCRIPTION: A simple bash script that implements the host volume plugin specification to create directories on demand. This plugin creates a directory at the specified path and handles the fingerprint, create, and delete operations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/plugins/storage/host-volumes.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\n# set -u to error by name if an env var is not set\nset -eu\n\n# echo to stderr, because Nomad expects stdout to match the spec.\n# this (and stdout) show up in Nomad agent debug logs.\nstderr() {\n  1>&2 echo \"$@\"\n}\n\nget_path() {\n  # since delete runs `rm -rf` (frightening), check to make sure\n  # the path is something sensible.\n  if [ -z \"$DHV_VOLUMES_DIR\" ]; then\n    stderr \"DHV_VOLUMES_DIR must not be empty\"\n    exit 1\n  fi\n  if [ -z \"$DHV_VOLUME_ID\" ]; then\n    stderr \"DHV_VOLUME_ID must not be empty\"\n    exit 1\n  fi\n  # create and delete assign this echo output to a variable\n  echo \"$DHV_VOLUMES_DIR/$DHV_VOLUME_ID\"\n}\n\ncase \"$DHV_OPERATION\" in\n  \"fingerprint\")\n    echo '{\"version\": \"0.0.1\"}'\n    ;;\n  \"create\")\n    path=\"$(get_path)\"\n    stderr \"creating directory: $path\"\n    # `mkdir -p` may be run repeatedly with the same result;\n    # it is idempotent.\n    mkdir -p \"$path\"\n    # 0 bytes because plain directories are not any particular size.\n    printf '{\"path\": \"%s\", \"bytes\": 0}' \"$path\"\n    ;;\n  \"delete\")\n    path=\"$(get_path)\"\n    stderr \"deleting directory: $path\"\n    rm -rf \"$path\" # `rm -f` is also idempotent.\n    ;;\n  *)\n    echo \"unknown operation: '$DHV_OPERATION'\"\n    exit 1\n    ;;\nesac\n```\n\n----------------------------------------\n\nTITLE: Complete QEMU Job with Artifact Configuration in Nomad\nDESCRIPTION: A complete example showing how to configure a QEMU task with an artifact download. This is required as QEMU needs to download the VM image before execution.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/qemu.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"virtual\" {\n  driver = \"qemu\"\n\n  config {\n    image_path  = \"local/linux.img\"\n    accelerator = \"kvm\"\n    args        = [\"-nodefaults\", \"-nodefconfig\"]\n  }\n\n  # Specifying an artifact is required with the \"qemu\"\n  # driver. This is the # mechanism to ship the image to be run.\n  artifact {\n    source = \"https://internal.file.server/linux.img\"\n\n    options {\n      checksum = \"md5:123445555555555\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal Application Scaling for a Group in Nomad (HCL)\nDESCRIPTION: This snippet demonstrates how to set up a scaling policy at the group level in a Nomad job specification. It controls the 'count' value for the group, enabling horizontal application scaling.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/scaling.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n  datacenters = [\"dc1\"]\n\n  group \"cache\" {\n    count = 1\n\n    scaling {\n      enabled = true\n      min     = 0\n      max     = 10\n\n      policy {\n        # ...\n      }\n    }\n    # ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Git Repository as an Artifact in Nomad\nDESCRIPTION: Shows how to clone a Git repository as an artifact and place it in a specified destination. Uses the git:: prefix to explicitly specify the Git protocol.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/artifact.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nartifact {\n  source      = \"git::https://github.com/hashicorp/nomad-guides\"\n  destination = \"local/repo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CNI Bridge Mode Configuration in JSON\nDESCRIPTION: This JSON configuration sets up a bridge network for Nomad using CNI plugins. It includes configurations for loopback, bridge, firewall, and portmap plugins. The bridge is named 'nomad' and uses the 172.26.64.0/20 subnet.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/networking/cni.mdx#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cniVersion\": \"1.0.0\",\n  \"name\": \"nomad\",\n  \"plugins\": [\n    {\n      \"type\": \"loopback\"\n    },\n    {\n      \"type\": \"bridge\",\n      \"bridge\": \"nomad\",\n      \"ipMasq\": true,\n      \"isGateway\": true,\n      \"forceAddress\": true,\n      \"hairpinMode\": false,\n      \"ipam\": {\n        \"type\": \"host-local\",\n        \"ranges\": [\n          [\n            {\n              \"subnet\": \"172.26.64.0/20\"\n            }\n          ]\n        ],\n        \"routes\": [\n          { \"dst\": \"0.0.0.0/0\" }\n        ]\n      }\n    },\n    {\n      \"type\": \"firewall\",\n      \"backend\": \"iptables\",\n      \"iptablesAdminChainName\": \"NOMAD-ADMIN\"\n    },\n    {\n      \"type\": \"portmap\",\n      \"capabilities\": {\"portMappings\": true},\n      \"snat\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic Java Task in Nomad\nDESCRIPTION: This snippet shows the basic configuration for a Java task in Nomad, specifying the driver type, JAR path, and JVM options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/java.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"webservice\" {\n  driver = \"java\"\n\n  config {\n    jar_path    = \"local/example.jar\"\n    jvm_options = [\"-Xmx2048m\", \"-Xms256m\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Quota in Nomad Enterprise using HCL\nDESCRIPTION: Example specification for defining resource quotas in Nomad Enterprise. Shows how to set limits on CPU cores, memory, GPU devices, and storage resources for a specific region. Generated using 'nomad quota init' command.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/quota.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nname        = \"default-quota\"\ndescription = \"Limit the shared default namespace\"\n\n# Create a limit for the global region. Additional limits may\n# be specified in-order to limit other regions.\nlimit {\n  region = \"global\"\n  region_limit {\n    cores      = 0\n    cpu        = 2500\n    memory     = 1000\n    memory_max = 1000\n\n    device \"nvidia/gpu/1080ti\" {\n      count = 1\n    }\n\n    storage {\n      variables    = 1000 # in MB\n      host_volumes = \"1000 GiB\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Configuration in Nomad Resources\nDESCRIPTION: Example showing how to specify memory requirements in megabytes within the resources block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/resources.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresources {\n  memory = 2048\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Task Group Counts in Multiregion Deployment\nDESCRIPTION: This example shows how to use the 'count' field in the region block to override the default count of task groups in different regions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/multiregion.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nmultiregion {\n\n    region \"west\" {\n      count = 2\n    }\n\n    region \"east\" {\n      count = 5\n    }\n  }\n}\n\ngroup \"worker\" {\n  count = 0\n}\n\ngroup \"controller\" {\n  count = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Checking and Setting Linux Ephemeral Port Range\nDESCRIPTION: Shell commands to check the current ephemeral port range configuration and modify it to avoid overlap with Nomad's dynamic port range (20,000-32,000). The example shows changing the range from 32768-60999 to 49152-65535.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/production/requirements.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ cat /proc/sys/net/ipv4/ip_local_port_range\n32768   60999\n$ echo \"49152 65535\" > /proc/sys/net/ipv4/ip_local_port_range\n```\n\n----------------------------------------\n\nTITLE: Volume Interpolation in Nomad Job Specification\nDESCRIPTION: This snippet demonstrates volume interpolation in a Nomad job specification. It shows how to use multiple volumes with multiple allocations using the 'per_alloc' field and HCL2 variables interpolation to expose information to the task's environment.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/volume.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariables {\n  path = \"test\"\n}\n\njob \"example\" {\n  datacenters = [\"dc1\"]\n\n  group \"cache\" {\n\n    count = 2\n\n    volume \"cache-volume\" {\n      type            = \"csi\"\n      source          = \"test-volume\"\n      attachment_mode = \"file-system\"\n      access_mode     = \"single-node-writer\"\n      per_alloc       = true\n    }\n\n    network {\n      port \"db\" {\n        to = 6379\n      }\n    }\n\n    task \"redis\" {\n      driver = \"docker\"\n      config {\n        image = \"redis:7\"\n        ports = [\"db\"]\n      }\n      resources {\n        cpu    = 500\n        memory = 256\n      }\n\n      env {\n        # this will be available as the MOUNT_PATH environment\n        # variable in the task\n        MOUNT_PATH = \"${NOMAD_ALLOC_DIR}/${var.path}\"\n      }\n\n      volume_mount {\n        volume      = \"cache-volume\"\n        destination = \"${NOMAD_ALLOC_DIR}/${var.path}\"\n      }\n\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GPU Device ID Affinity Configuration\nDESCRIPTION: Configuration showing how to specify preferences for specific GPU devices using their UUIDs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/device.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ndevice \"nvidia/gpu\" {\n  affinity {\n    attribute = \"${device.ids}\"\n    operator  = \"set_contains\"\n    value     = \"9afa5da1-8f39-25a2-48dc-ba31fd7c0023,c248b547-fed7-4d67-ade5-73a27d280ac4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading from Public S3 Bucket in Nomad\nDESCRIPTION: Demonstrates downloading an artifact from a publicly-accessible Amazon S3 bucket using path-based notation. S3 URLs can be formatted in different ways depending on the region and bucket configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/artifact.mdx#2025-04-19_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nartifact {\n  source = \"s3://my-bucket-example.s3-us-west-2.amazonaws.com/my_app.tar.gz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Mesh Upstream Access in Nomad\nDESCRIPTION: Example job configuration that demonstrates how to access an upstream service through the service mesh using bridge networking and sidecar service with upstream configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/networking/service-mesh.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\njob \"...\" {\n  # ...\n  group \"...\" {\n    network {\n      mode = \"bridge\"\n      # ...\n    }\n\n    service {\n      # ...\n      connect {\n        sidecar_service {\n          proxy {\n            upstreams {\n              destination_name = \"api\"\n              local_bind_port  = 8080\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Init Task Pattern in Nomad with Prestart Hook\nDESCRIPTION: This snippet demonstrates how to create an init task that blocks the main task from starting until a database service is available. It uses a prestart hook with sidecar=false to ensure the initialization completes before the main application starts.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/lifecycle.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n  task \"wait-for-db\" {\n    lifecycle {\n      hook = \"prestart\"\n      sidecar = false\n    }\n\n    driver = \"exec\"\n    config {\n      command = \"sh\"\n      args = [\"-c\", \"while ! nc -z db.service.local.consul 8080; do sleep 1; done\"]\n    }\n  }\n\n  task \"main-app\" {\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Downloading and Auto-Unarchiving in Nomad\nDESCRIPTION: Example showing Nomad's automatic unarchiving of downloaded artifacts with recognized archive extensions like .tar.gz. Files are extracted to the specified location.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/artifact.mdx#2025-04-19_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nartifact {\n  source = \"https://example.com/file.tar.gz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Network in Nomad Client HCL\nDESCRIPTION: Registers an additional host network named 'public' with the node for use in port mapping. It specifies the CIDR block for address matching and reserves specific ports on all addresses associated with this network.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/client.mdx#2025-04-19_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  host_network \"public\" {\n    cidr           = \"203.0.113.0/24\"\n    reserved_ports = \"22,80\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Vault Configuration with Private Token and Template Integration in HCL\nDESCRIPTION: Complex example showing how to configure Vault without exposing the token to the task, while using template blocks to securely provide specific secrets to the task. Includes examples for generating new tokens and certificates.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/vault.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvault {\n  role         = \"prod\"\n  change_mode  = \"noop\"\n  env          = false\n  disable_file = true\n}\n\ntemplate {\n  data = <<-EOH\n{{with secret \"auth/token/create/nomad-job\" \"policies=examplepolicy\"}}{{.Auth.ClientToken}}{{ end }}\nEOH\n\n  destination = \"${NOMAD_SECRETS_DIR}/examplepolicy.token\"\n  change_mode = \"noop\"\n  perms       = \"600\"\n}\n\ntemplate {\n  data = <<-EOH\n{{ with secret \"pki_int/issue/nomad-task\"\n   \"common_name=example.service.consul\" \"ttl=72h\"\n   \"alt_names=localhost\" \"ip_sans=127.0.0.1\"}}\n{{ .Data.certificate }}\n{{ .Data.private_key }}\n{{ end }}\nEOH\n\n  destination = \"${NOMAD_SECRETS_DIR}/client.crt\"\n  change_mode = \"restart\"\n  perms       = \"600\"\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading from Public DigitalOcean Spaces in Nomad\nDESCRIPTION: Shows how to download artifacts from DigitalOcean Spaces, which is an S3-compatible object storage service. This example uses the direct URL format for public buckets.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/artifact.mdx#2025-04-19_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\nartifact {\n  source = \"https://my-bucket-example.sfo3.digitaloceanspaces.com/my_app.tar.gz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Basic Service with Nomad Provider\nDESCRIPTION: This snippet demonstrates how to register a basic service named 'load-balancer' using the Nomad provider. It specifies the service name, port, and provider.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/service.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nservice {\n  name     = \"load-balancer\"\n  port     = \"lb\"\n  provider = \"nomad\"\n}\n```\n\n----------------------------------------\n\nTITLE: Scaling Single Task Group Job\nDESCRIPTION: Example of scaling a job with a single task group to 8 instances, showing the evaluation process and allocation creation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/scale.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job scale job1 8\n==> Monitoring evaluation \"529cc88e\"\n    Evaluation triggered by job \"job1\"\n    Evaluation within deployment: \"28a3378f\"\n    Allocation \"2a4df8ca\" created: node \"2f0a2f93\", group \"group1\"\n    Allocation \"b7eefe49\" created: node \"2f0a2f93\", group \"group1\"\n    Allocation \"bd54a83d\" created: node \"2f0a2f93\", group \"group1\"\n    Allocation \"fadeaea8\" created: node \"2f0a2f93\", group \"group1\"\n    Allocation \"4bd1397b\" modified: node \"2f0a2f93\", group \"group1\"\n    Allocation \"93684511\" modified: node \"2f0a2f93\", group \"group1\"\n    Allocation \"b409f0a2\" modified: node \"2f0a2f93\", group \"group1\"\n    Allocation \"18f50054\" created: node \"2f0a2f93\", group \"group1\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"529cc88e\" finished with status \"complete\"\n```\n\n----------------------------------------\n\nTITLE: Nomad CLI Commands for Troubleshooting\nDESCRIPTION: Shell commands for debugging Envoy sidecar service issues and accessing logs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/service-mesh.mdx#2025-04-19_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nnomad alloc status -short b36a  # to get the connect-* task name\nnomad alloc logs -task connect-proxy-count-api -stderr b36a\nnomad alloc exec -task connect-proxy-count-api b36a cat secrets/.envoy_bootstrap.cmd\nnomad alloc exec -task connect-proxy-count-api b36a cat secrets/.envoy_bootstrap.env\nnomad alloc fs b36a alloc/logs/envoy_bootstrap.stderr.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Token Access in Nomad Job Specification with HCL\nDESCRIPTION: This example shows how to configure a Nomad job to request a Vault token for a task in the 'prod' role. It demonstrates how to set up change mode to respond with a signal when the token changes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/vault.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    task \"server\" {\n      vault {\n        cluster  = \"default\"\n        role     = \"prod\"\n\n        change_mode   = \"signal\"\n        change_signal = \"SIGUSR1\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using nomad status command\nDESCRIPTION: The basic usage of the nomad status command. It accepts a Nomad identifier or identifier prefix as its argument and displays the status of the corresponding resource.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/status.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad status [options] <identifier>\n```\n\n----------------------------------------\n\nTITLE: Creating CSI Volume with HCL Configuration in Nomad\nDESCRIPTION: This HCL configuration snippet demonstrates how to create a CSI volume using the `volume create` command in Nomad. It specifies various attributes including ID, namespace, name, type, plugin ID, snapshot ID, capacity, capabilities, mount options, topology requests, secrets, and parameters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nid           = \"ebs_prod_db1\"\nnamespace    = \"default\"\nname         = \"database\"\ntype         = \"csi\"\nplugin_id    = \"ebs-prod\"\nsnapshot_id  = \"snap-12345\" # or clone_id, see below\ncapacity_max = \"200G\"\ncapacity_min = \"100G\"\n\ncapability {\n  access_mode     = \"single-node-reader-only\"\n  attachment_mode = \"file-system\"\n}\n\ncapability {\n  access_mode     = \"single-node-writer\"\n  attachment_mode = \"file-system\"\n}\n\nmount_options {\n  fs_type     = \"ext4\"\n  mount_flags = [\"noatime\"]\n}\n\ntopology_request {\n  required {\n    topology { segments { \"rack\" = \"R2\" } }\n    topology { segments { \"rack\" = \"R1\", \"zone\" = \"us-east-1a\"} }\n  }\n  preferred {\n    topology { segments { \"rack\" = \"R1\", \"zone\" = \"us-east-1a\"} }\n  }\n}\n\nsecrets {\n  example_secret = \"xyzzy\"\n}\n\nparameters {\n  skuname = \"Premium_LRS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Allowlist in Nomad Client Options (HCL)\nDESCRIPTION: Configures a allowlist of drivers for the Nomad client. In this example, only the Docker and QEMU drivers are allowed to be used.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/client.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  options = {\n    \"driver.allowlist\" = \"docker,qemu\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Nomad Ingress Gateway with Bridge Networking\nDESCRIPTION: Complete example of a Nomad job that creates an ingress gateway with bridge networking, exposing a UUID API service through the gateway over HTTP on port 8080.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/gateway.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\njob \"ingress-demo\" {\n\n  datacenters = [\"dc1\"]\n\n  # This group will have a task providing the ingress gateway automatically\n  # created by Nomad. The ingress gateway is based on the Envoy proxy being\n  # managed by the docker driver.\n  group \"ingress-group\" {\n\n    network {\n      mode = \"bridge\"\n\n      # This example will enable plain HTTP traffic to access the uuid-api connect\n      # native example service on port 8080.\n      port \"inbound\" {\n        static = 8080\n        to     = 8080\n      }\n    }\n\n    service {\n      name = \"my-ingress-service\"\n      port = \"8080\"\n\n      connect {\n        gateway {\n\n          # Consul gateway [envoy] proxy options.\n          proxy {\n            # The following options are automatically set by Nomad if not\n            # explicitly configured when using bridge networking.\n            #\n            # envoy_gateway_no_default_bind = true\n            # envoy_gateway_bind_addresses \"uuid-api\" {\n            #   address = \"0.0.0.0\"\n            #   port    = <associated listener.port>\n            # }\n            #\n            # Additional options are documented at\n            # https://developer.hashicorp.com/nomad/docs/job-specification/gateway#proxy-parameters\n          }\n\n          # Consul Ingress Gateway Configuration Entry.\n          ingress {\n            # Nomad will automatically manage the Configuration Entry in Consul\n            # given the parameters in the ingress block.\n            #\n            # Additional options are documented at\n            # https://developer.hashicorp.com/nomad/docs/job-specification/gateway#ingress-parameters\n            listener {\n              port     = 8080\n              protocol = \"tcp\"\n              service {\n                name = \"uuid-api\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  # The UUID generator from the connect-native demo is used as an example service.\n  # The ingress gateway above makes access to the service possible over normal HTTP.\n  # For example,\n  #\n  # $ curl $(dig +short @127.0.0.1 -p 8600 uuid-api.ingress.dc1.consul. ANY):8080\n  group \"generator\" {\n    network {\n      mode = \"host\"\n      port \"api\" {}\n    }\n\n    service {\n      name = \"uuid-api\"\n      port = \"api\"\n\n      connect {\n        native = true\n      }\n    }\n\n    task \"generate\" {\n      driver = \"docker\"\n\n      config {\n        image        = \"hashicorpdev/uuid-api:v5\"\n        network_mode = \"host\"\n      }\n\n      env {\n        BIND = \"0.0.0.0\"\n        PORT = \"${NOMAD_PORT_api}\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Nomad Services in Templates (HCL)\nDESCRIPTION: This snippet demonstrates how to query Nomad services using the nomadService and nomadServices functions within a template.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate {\n  data = <<EOF\n# Configuration for a single NGINX upstream service.\nupstream my_app {\n  {{- range nomadService \"my-app\" }}\n  server {{ .Address }}:{{ .Port }};{{- end }}\n}\n\n# Configuration for all services registered in Nomad as an NGINX upstream\n# service.\n{{ range nomadServices }}\n# Configuration for service {{ .Name }}.\nupstream {{ .Name | toLower }} {\n  {{- range nomadService .Name }}\n  server {{ .Address}}:{{ .Port }};{{- end }}\n}\n{{ end -}}\nEOF\n\n  destination = \"local/nginx.conf\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring containerd Driver with Various Parameters\nDESCRIPTION: Example showing different configuration parameters supported by the containerd driver, including custom commands, arguments, and other container settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/containerd.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  image = \"docker.io/library/redis:alpine\"\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  command = \"some-command\"\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  args = [\n    \"arg1\",\n    \"arg2\",\n  ]\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  privileged = true\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  seccomp         = true\n  seccomp_profile = \"/opt/seccomp/seccomp.json\"\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\n  config {\n    sysctl = {\n      \"net.core.somaxconn\"  = \"16384\"\n      \"net.ipv4.ip_forward\" = \"1\"\n    }\n  }\n```\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  readonly_rootfs = true\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  host_network = true\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  cap_add = [\n    \"CAP_SYS_ADMIN\",\n    \"CAP_CHOWN\",\n    \"CAP_SYS_CHROOT\"\n  ]\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  cap_drop = [\n    \"CAP_SYS_ADMIN\",\n    \"CAP_CHOWN\",\n    \"CAP_SYS_CHROOT\"\n  ]\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  devices = [\n    \"/dev/loop0\",\n    \"/dev/loop1\"\n  ]\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  mounts = [\n    {\n      type = \"bind\"\n      target = \"/tmp/t1\"\n      source = \"/tmp/s1\"\n      options = [\"rbind\", \"ro\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Virt Job Specification Example in Nomad HCL\nDESCRIPTION: This comprehensive example demonstrates a complete Nomad job specification for a Virt task. It includes artifact downloading, network configuration, VM settings, and resource allocation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/virt/task-config.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\njob \"virt-example\" {\n\n  group \"virt-group\" {\n\n    network {\n      mode     = \"host\"\n      port \"ssh\" {\n        to = 22\n      }\n    }\n\n    task \"virt-task\" {\n\n      driver = \"nomad-driver-virt\"\n\n      artifact {\n        source      = \"http://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img\"\n        destination = \"local/focal-server-cloudimg-amd64.img\"\n        mode        = \"file\"\n      }\n\n      config {\n        image                           = \"local/focal-server-cloudimg-amd64.img\"\n        primary_disk_size               = 26000\n        #default_user_password          = \"CHANGE-ME\"\n        default_user_authorized_ssh_key = \"ssh-ed25519 AAAAC3NzaC1lZDI...\"\n\n        network_interface {\n          bridge {\n            name  = \"virbr0\"\n            ports = [\"ssh\"]\n          }\n        }\n      }\n\n      resources {\n        cores  = 2\n        memory = 4096\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault JWT Auth Method for Nomad\nDESCRIPTION: Configuration JSON for setting up a Vault JWT auth method that points to Nomad's JWKS URL. This allows Vault to validate workload identities issued by Nomad.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/vault/acl.mdx#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jwks_url\": \"https://nomad.example.com:4646/.well-known/jwks.json\",\n  \"jwt_supported_algs\": [\"RS256\", \"EdDSA\"],\n  \"default_role\": \"nomad-workloads\"\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Linux Capabilities Configuration in Nomad\nDESCRIPTION: Examples showing how to add and drop Linux capabilities for Docker containers.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  cap_add = [\"net_raw\", \"sys_time\"]\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  cap_drop = [\"mknod\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Configuration in Nomad with containerd Driver\nDESCRIPTION: Examples showing both static and dynamic port mapping for containers using the containerd driver with bridge networking mode.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/containerd.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nnetwork {\n  mode = \"bridge\"\n  port \"lb\" {\n    static = 8889\n    to     = 8889\n  }\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nnetwork {\n  mode = \"bridge\"\n  port \"http\" {\n    to = 8080\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Time-Based Task Execution in Nomad HCL\nDESCRIPTION: Example configuration showing how to set up a scheduled task in Nomad using the schedule block. The task is configured to run on weekdays between 9:30 AM and 4:00 PM in the America/New_York timezone.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/schedule.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"tbte\" {\n    task \"scheduled\" {\n      schedule {\n        cron {\n          start    = \"30 9 * * MON-FRI *\"\n          end      = \"0 16\"\n          timezone = \"America/New_York\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring License Reporting Block in Nomad HCL\nDESCRIPTION: Example configuration block showing how to enable automated license utilization reporting in a Nomad agent configuration. This setting is applicable only for Nomad Enterprise with server mode enabled.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/reporting.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nreporting {\n    license {\n      enabled = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Nomad Job Using Exec2 Driver\nDESCRIPTION: A simple Nomad job specification that uses the Exec2 driver to run a Python HTTP server with specific file access permissions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/exec2.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\njob \"http\" {\n  group \"web\" {\n    task \"python\" {\n      driver = \"exec2\"\n      config {\n        command = \"python3\"\n        args    = [\"-m\", \"http.server\", \"8080\", \"--directory\", \"${NOMAD_TASK_DIR}\"]\n        unveil  = [\"r:/etc/mime.types\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel Upgrades with Health Checks Configuration\nDESCRIPTION: Configuration for parallel upgrades with health check requirements, allowing 3 simultaneous updates with specific health timing constraints.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/update.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nupdate {\n  max_parallel     = 3\n  min_healthy_time = \"30s\"\n  healthy_deadline = \"2m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Block in Nomad Job Specification with HCL\nDESCRIPTION: Example of how to implement the 'ui' block within a Nomad job specification to add a markdown-enabled description and multiple links to the job page in the Nomad Web UI. This configuration enhances the job information displayed to users of the web interface.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/ui.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  ui {\n    description = \"A job that uses **Nomad Variables**\"\n    link {\n      label = \"Learn more about Nomad\"\n      url   = \"https://developer.hashicorp.com/nomad\"\n    }\n    link {\n      label = \"Nomad on GitHub\"\n      url   = \"https://github.com/hashicorp/nomad\"\n    }\n  }\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client to Join a Node Pool\nDESCRIPTION: Example showing how to configure a Nomad client to join a specific node pool by setting the node_pool attribute in the client configuration block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/node-pools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  # ...\n  node_pool = \"dev\"\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Metadata and Node Class in Nomad Client (HCL)\nDESCRIPTION: This example demonstrates how to customize metadata and node class in a Nomad client configuration. This information can be used by the scheduler for processing constraints and is fully user-configurable.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/client.mdx#2025-04-19_snippet_18\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  enabled       = true\n  node_class    = \"prod\"\n\n  meta {\n    owner           = \"ops\"\n    cached_binaries = \"redis,apache,nginx,jq,cypress,nodejs\"\n    rack            = \"rack-12-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Workload Identity in Nomad Community Edition\nDESCRIPTION: This example shows how to configure Nomad workload identities for Consul authentication in Nomad Community Edition. It demonstrates adding identity blocks to both a service and a task with the required audience and TTL settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/identity.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\njob \"httpd\" {\n  group \"httpd\" {\n    consul {}\n\n    network {\n      port \"http\" {}\n    }\n\n    service {\n      provider = \"consul\"\n      name     = \"httpd\"\n      port     = \"http\"\n\n      identity {\n        aud = [\"consul.io\"]\n        ttl = \"1h\"\n      }\n    }\n\n    task \"httpd\" {\n      driver = \"docker\"\n\n      config {\n        image   = \"busybox:1.36\"\n        command = \"httpd\"\n        args    = [\"-f\", \"-p\", \"${NOMAD_PORT_http}\"]\n        ports   = [\"http\"]\n      }\n\n      identity {\n        name = \"consul_default\"\n        aud  = [\"consul.io\"]\n        ttl  = \"1h\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Services in Docker Compose YAML Configuration\nDESCRIPTION: A Docker Compose configuration example showing how to define multiple services (web and db) with port mappings. This enables direct service name references like 'postgres://db:5432' from other containers through Docker's internal DNS service.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/networking/index.mdx#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.9\"\nservices:\n  web:\n    build: .\n    ports:\n      - \"8000:8000\"\n  db:\n    image: postgres\n    ports:\n      - \"8001:5432\"\n```\n\n----------------------------------------\n\nTITLE: Multi-region Job with Region-specific Node Pools\nDESCRIPTION: Example of a multi-region job that uses different node pools for each region, demonstrating how to override the top-level node pool setting for specific regions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/node-pools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\njob \"multiregion\" {\n  node_pool = \"dev\"\n\n  multiregion {\n    # This region will use the top-level \"dev\" node pool.\n    region \"north\" {}\n\n    # While the regions bellow will use their own specific node pool.\n    region \"east\" {\n      node_pool = \"dev-east\"\n    }\n\n    region \"west\" {\n      node_pool = \"dev-west\"\n    }\n  }\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Read Service Response Format\nDESCRIPTION: Example JSON response showing detailed information about service instances including allocation IDs, addresses, and metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/services.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Address\": \"127.0.0.1\",\n    \"AllocID\": \"177160af-26f6-619f-9c9f-5e46d1104395\",\n    \"CreateIndex\": 14,\n    \"Datacenter\": \"dc1\",\n    \"ID\": \"_nomad-task-177160af-26f6-619f-9c9f-5e46d1104395-redis-example-cache-redis-db\",\n    \"JobID\": \"example\",\n    \"ModifyIndex\": 24,\n    \"Namespace\": \"default\",\n    \"NodeID\": \"7406e90b-de16-d118-80fe-60d0f2730cb3\",\n    \"Port\": 29702,\n    \"ServiceName\": \"example-cache-redis\",\n    \"Tags\": [\n      \"db\",\n      \"cache\"\n    ]\n  },\n  {\n    \"Address\": \"127.0.0.1\",\n    \"AllocID\": \"ba731da0-6df9-9858-ef23-806e9758a899\",\n    \"CreateIndex\": 35,\n    \"Datacenter\": \"dc1\",\n    \"ID\": \"_nomad-task-ba731da0-6df9-9858-ef23-806e9758a899-redis-example-cache-redis-db\",\n    \"JobID\": \"example\",\n    \"ModifyIndex\": 35,\n    \"Namespace\": \"default\",\n    \"NodeID\": \"7406e90b-de16-d118-80fe-60d0f2730cb3\",\n    \"Port\": 27232,\n    \"ServiceName\": \"example-cache-redis\",\n    \"Tags\": [\n      \"db\",\n      \"cache\"\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Delayed Restart Policy in HCL\nDESCRIPTION: This restart policy configuration allows multiple restart attempts with delays, and then waits for a longer interval before trying again. It uses the \"delay\" mode to continue restart attempts indefinitely.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/restart.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nrestart {\n  attempts = 3\n  delay    = \"15s\"\n  interval = \"10m\"\n  mode     = \"delay\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dispatch Payload in Nomad Job\nDESCRIPTION: Example of a complete Nomad job specification that implements a dispatch_payload block to write payload data to a config.json file within a task's local directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/dispatch_payload.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    task \"server\" {\n      dispatch_payload {\n        file = \"config.json\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Attribute Spread in Nomad\nDESCRIPTION: This example shows how to configure multiple spread blocks targeting different attributes (datacenter and rack) with equal weighting to create a hierarchical distribution of allocations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/spread.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nspread {\n  attribute = \"${node.datacenter}\"\n  weight    = 50\n}\nspread {\n  attribute = \"${meta.rack}\"\n  weight    = 50\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Role and S3 Access Policy in Terraform\nDESCRIPTION: This Terraform snippet creates an IAM role that can be assumed via OIDC, defines a policy document granting full S3 access, creates a policy from that document, and attaches the policy to the role. This setup enables Nomad workloads to access S3 resources.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/aws-oidc-provider.mdx#2025-04-19_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# Create an IAM role with the assume role policy generated above\nresource \"aws_iam_role\" \"s3_all_access_role\" {\n  name               = \"s3_all_access_role\"\n  assume_role_policy = data.aws_iam_policy_document.assume_role.json\n\n  tags = {\n    tag-key = \"tag-value\"\n  }\n}\n\n# Inline policy that defines what the role can do (full S3 access)\ndata \"aws_iam_policy_document\" \"s3_access_policy\" {\n  statement {\n    effect = \"Allow\"\n\n    actions = [\n      \"s3:*\",\n      \"s3-object-lambda:*\"\n    ]\n\n    resources = [\"*\"] # You can scope this down to specific S3 buckets if necessary\n  }\n}\n\n# Create a policy resource from the inline policy document above\nresource \"aws_iam_policy\" \"policy\" {\n  name        = \"nomad-oidc-policy\"\n  description = \"A policy for federated Nomad OIDC\"\n  policy      = data.aws_iam_policy_document.s3_access_policy.json\n}\n\n# Attach the S3 access policy to the IAM role\nresource \"aws_iam_role_policy_attachment\" \"test-attach\" {\n  role       = aws_iam_role.s3_all_access_role.name\n  policy_arn = aws_iam_policy.policy.arn\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Task Access Policy for Variables in HCL\nDESCRIPTION: This HCL snippet shows the equivalent ACL policy automatically granted to tasks for accessing their own variables. It provides read and list access to specific paths based on job, task group, and task names.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/variables.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nnamespace \"$namespace\" {\n  variables {\n\n    path \"nomad/jobs\" {\n      capabilities = [\"read\", \"list\"]\n    }\n\n    path \"nomad/jobs/$job_id\" {\n      capabilities = [\"read\", \"list\"]\n    }\n\n    path \"nomad/jobs/$job_id/$task_group\" {\n      capabilities = [\"read\", \"list\"]\n    }\n\n    path \"nomad/jobs/$job_id/$task_group/$task_name\" {\n      capabilities = [\"read\", \"list\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Region and Datacenter in Nomad Agent\nDESCRIPTION: Configuration example showing how to set a custom region (europe) and datacenter (ams) for a Nomad agent.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/index.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nregion     = \"europe\"\ndatacenter = \"ams\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul for Transparent Proxy with DNS\nDESCRIPTION: HCL configuration for Consul that binds to a private IP in a specific subnet and configures recursive DNS resolvers. Required for transparent proxy with Consul DNS and virtual IPs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/service-mesh.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nbind_addr   = \"{{ GetPrivateInterfaces | include \\\"network\\\" \\\"10.37.105.0/20\\\" | limit 1 | attr \\\"address\\\" }}\"\n\nrecursors = [\"208.67.222.222\", \"208.67.220.220\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Fail-Mode Restart Policy in HCL\nDESCRIPTION: This restart policy allows a limited number of restart attempts within a specified interval. If the task continues to fail, it triggers the reschedule policy for the entire allocation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/restart.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nrestart {\n  attempts = 3\n  delay    = \"15s\"\n  interval = \"10m\"\n  mode     = \"fail\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connect Service for Web Frontend\nDESCRIPTION: Service configuration for the dashboard frontend with Connect integration and transparent proxy setup.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/service-mesh.mdx#2025-04-19_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nservice {\n  name = \"count-dashboard\"\n  port = \"http\"\n\n  connect {\n    sidecar_service {\n      proxy {\n        transparent_proxy {}\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Sticky Host Volume in Nomad Job Specification\nDESCRIPTION: This HCL snippet demonstrates how to configure a task group with a sticky host volume. Setting the volume's 'sticky' parameter to true ensures that allocations for this task group will always be placed on nodes that have the specific volume ID available.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/stateful-deployments.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"app\" {\n  group \"example\" {\n    # ...\n    volume \"example\" {\n      type      = \"host\"\n      source    = \"ca-certificates\"\n      read_only = true\n      sticky    = true\n    }\n    # ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Docker Container Service in Nomad\nDESCRIPTION: A Nomad job example that runs a Docker container as a service. It defines a single task group with a server task using the Docker driver to run the hashicorp/http-echo image.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/job.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    task \"server\" {\n      driver = \"docker\"\n      config {\n        image = \"hashicorp/http-echo\"\n        args  = [\"-text\", \"hello\"]\n      }\n\n      resources {\n        memory = 128\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bearer Token Authentication with curl\nDESCRIPTION: Example showing how to authenticate with Nomad's API using a Bearer token in the Authorization header. This follows RFC6750 standard for token authentication.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/index.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"Authorization: Bearer <token>\" \\\n    http://localhost:4646/v1/jobs\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Health Check in Nomad Service Block\nDESCRIPTION: Example of a service with an HTTP health check that queries the service at '/_healthz' every 5 seconds with a 2-second timeout and includes an Authorization header. Any non-2xx status code is considered a failure.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/check.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nservice {\n  check {\n    type     = \"http\"\n    port     = \"lb\"\n    path     = \"/_healthz\"\n    interval = \"5s\"\n    timeout  = \"2s\"\n    header {\n      Authorization = [\"Basic ZWxhc3RpYzpjaGFuZ2VtZQ==\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Network Block for Service Port\nDESCRIPTION: This snippet defines a network block that is required to accompany the service block. It creates a dynamic port labeled 'lb'.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/service.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nnetwork {\n  port \"lb\" {}\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Restart Policy Configuration\nDESCRIPTION: Full restart policy configuration showing attempts, interval, and mode settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/check_restart.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nrestart {\n  attempts = 3\n  # ...\n  interval = \"10m\"\n  mode     = \"fail\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Spread Patterns in Nomad Job Specifications\nDESCRIPTION: This example demonstrates how to use the spread block in a Nomad job specification to distribute allocations across datacenters and racks with percentage-based targeting.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/spread.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  # Spread allocations over all datacenter\n  spread {\n    attribute = \"${node.datacenter}\"\n  }\n\n  group \"example\" {\n    # Spread allocations over each rack based on desired percentage\n      spread {\n        attribute = \"${meta.rack}\"\n        target \"r1\" {\n          percent = 60\n        }\n        target \"r2\" {\n          percent = 40\n        }\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Consul Block Configuration in HCL\nDESCRIPTION: Demonstrates basic consul block configuration at the task level with cluster, namespace and partition settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/consul.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    task \"server\" {\n      consul {\n        cluster   = \"default\"\n        namespace = \"default\"\n        partition = \"default\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Image for Podman Container\nDESCRIPTION: Defines the image to be used for the container, supporting various transport protocols.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  image = \"docker://redis\"\n}\n```\n\n----------------------------------------\n\nTITLE: Artifact Download with Checksum Verification in Nomad\nDESCRIPTION: Example showing how to verify the integrity of a downloaded artifact using a checksum. Nomad will return an error if the checksum doesn't match the expected value.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/artifact.mdx#2025-04-19_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nartifact {\n  source = \"https://example.com/file.zip\"\n\n  options {\n    checksum = \"md5:df6a4178aec9fbdc1d6d7e3634d1bc33\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Autopilot Block in HCL\nDESCRIPTION: Example configuration block showing all available Autopilot settings including server cleanup, contact thresholds, log trailing limits, stabilization time, and enterprise features for redundancy zones and upgrades.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/autopilot.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nautopilot {\n    cleanup_dead_servers      = true\n    last_contact_threshold    = \"200ms\"\n    max_trailing_logs         = 250\n    server_stabilization_time = \"10s\"\n    enable_redundancy_zones   = false\n    disable_upgrade_migration = false\n    enable_custom_upgrades    = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Cron Schedules for Periodic Job in Nomad HCL\nDESCRIPTION: This example shows how to configure multiple cron schedules for a periodic job. It sets up the job to run every 5 minutes and every 7 minutes in the America/New_York time zone.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/periodic.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nperiodic {\n  crons = [\n    \"*/5 * * *\",\n    \"*/7 * * *\"\n  ]\n  time_zone = \"America/New_York\"\n}\n```\n\n----------------------------------------\n\nTITLE: Volume Registration Configuration in Nomad (HCL)\nDESCRIPTION: HCL configuration for registering an existing volume in Nomad. Defines volume properties including name, type, node ID, host path, and capabilities.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/host.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nname      = \"database\"\ntype      = \"host\"\nnode_id   = \"a7b4c0ca-cc78-11ef-8b5a-cb6ea67b844c\"\nhost_path = \"/var/srv/example\"\ncapacity  = \"80G\"\n\ncapability {\n  access_mode     = \"single-node-reader-only\"\n  attachment_mode = \"file-system\"\n}\n\ncapability {\n  access_mode     = \"single-node-writer\"\n  attachment_mode = \"file-system\"\n}\n\nparameters {\n  skuname = \"Premium_LRS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Task in Nomad\nDESCRIPTION: Example configuration for setting up a basic mock task in Nomad. Demonstrates core configuration options including run duration, exit code, and error message settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/mock-driver.md#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"mocktask\" {\n  driver = \"mock_driver\"\n\n  config {\n    run_for      = \"10s\"\n    exit_code    = 7\n    exit_err_msg = \"the application crashed\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete JSON Job Specification Example\nDESCRIPTION: A full example of a JSON job specification for a Redis service, including configurations for the job, task group, task, resources, networking, and service registration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/json-jobs.mdx#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Job\": {\n    \"Region\": null,\n    \"Namespace\": null,\n    \"ID\": \"example\",\n    \"Name\": \"example\",\n    \"Type\": \"service\",\n    \"Priority\": null,\n    \"AllAtOnce\": null,\n    \"Datacenters\": [\n      \"dc1\"\n    ],\n    \"NodePool\": \"prod\",\n    \"Constraints\": null,\n    \"Affinities\": null,\n    \"TaskGroups\": [\n      {\n        \"Name\": \"cache\",\n        \"Count\": 1,\n        \"Constraints\": null,\n        \"Disconnect\": null,\n        \"Affinities\": null,\n        \"Tasks\": [\n          {\n            \"Name\": \"redis\",\n            \"Driver\": \"docker\",\n            \"User\": \"\",\n            \"Lifecycle\": null,\n            \"Config\": {\n              \"auth_soft_fail\": true,\n              \"image\": \"redis:7\",\n              \"ports\": [\n                \"db\"\n              ]\n            },\n            \"Constraints\": null,\n            \"Affinities\": null,\n            \"Env\": null,\n            \"Services\": null,\n            \"Resources\": {\n              \"CPU\": 500,\n              \"Cores\": null,\n              \"MemoryMB\": 256,\n              \"MemoryMaxMB\": null,\n              \"DiskMB\": null,\n              \"Networks\": null,\n              \"Devices\": null,\n              \"IOPS\": null\n            },\n            \"RestartPolicy\": null,\n            \"Meta\": null,\n            \"KillTimeout\": null,\n            \"LogConfig\": null,\n            \"Artifacts\": null,\n            \"Vault\": null,\n            \"Templates\": null,\n            \"DispatchPayload\": null,\n            \"VolumeMounts\": null,\n            \"Leader\": false,\n            \"ShutdownDelay\": 0,\n            \"KillSignal\": \"\",\n            \"Kind\": \"\",\n            \"ScalingPolicies\": null,\n            \"Identity\": {\n              \"Env\": true,\n              \"File\": true\n            }\n          }\n        ],\n        \"Spreads\": null,\n        \"Volumes\": null,\n        \"RestartPolicy\": {\n          \"Interval\": 1800000000000,\n          \"Attempts\": 2,\n          \"Delay\": 15000000000,\n          \"Mode\": \"fail\"\n        },\n        \"ReschedulePolicy\": null,\n        \"EphemeralDisk\": {\n          \"Sticky\": null,\n          \"Migrate\": null,\n          \"SizeMB\": 300\n        },\n        \"Update\": null,\n        \"Migrate\": null,\n        \"Networks\": [\n          {\n            \"Mode\": \"\",\n            \"Device\": \"\",\n            \"CIDR\": \"\",\n            \"IP\": \"\",\n            \"DNS\": null,\n            \"ReservedPorts\": null,\n            \"DynamicPorts\": [\n              {\n                \"Label\": \"db\",\n                \"Value\": 0,\n                \"To\": 6379,\n                \"HostNetwork\": \"\"\n              }\n            ],\n            \"Hostname\": \"\",\n            \"MBits\": null\n          }\n        ],\n        \"Meta\": null,\n        \"Services\": [\n          {\n            \"Name\": \"redis-cache\",\n            \"Tags\": [\n              \"global\",\n              \"cache\"\n            ],\n            \"CanaryTags\": null,\n            \"EnableTagOverride\": false,\n            \"PortLabel\": \"db\",\n            \"AddressMode\": \"\",\n            \"Address\": \"\",\n            \"Checks\": null,\n            \"CheckRestart\": null,\n            \"Connect\": null,\n            \"Meta\": null,\n            \"CanaryMeta\": null,\n            \"TaggedAddresses\": null,\n            \"TaskName\": \"\",\n            \"OnUpdate\": \"\",\n            \"Provider\": \"nomad\"\n          }\n        ],\n        \"ShutdownDelay\": null,\n        \"StopAfterClientDisconnect\": null,\n        \"MaxClientDisconnect\": null,\n        \"Scaling\": null,\n        \"Consul\": null\n      }\n    ],\n    \"Update\": {\n      \"Stagger\": null,\n      \"MaxParallel\": 1,\n      \"HealthCheck\": null,\n      \"MinHealthyTime\": 10000000000,\n      \"HealthyDeadline\": 180000000000,\n      \"ProgressDeadline\": 600000000000,\n      \"Canary\": 0,\n      \"AutoRevert\": false,\n      \"AutoPromote\": null\n    },\n    \"Multiregion\": null,\n    \"Spreads\": null,\n    \"Periodic\": null,\n    \"ParameterizedJob\": null,\n    \"Reschedule\": null,\n    \"Migrate\": {\n      \"MaxParallel\": 1,\n      \"HealthCheck\": \"checks\",\n      \"MinHealthyTime\": 10000000000,\n      \"HealthyDeadline\": 300000000000\n    },\n    \"Meta\": null,\n    \"ConsulToken\": null,\n    \"VaultToken\": null,\n    \"Stop\": null,\n    \"ParentID\": null,\n    \"Dispatched\": false,\n    \"DispatchIdempotencyToken\": null,\n    \"Payload\": null,\n    \"ConsulNamespace\": null,\n    \"VaultNamespace\": null,\n    \"NomadTokenID\": null,\n    \"Status\": null,\n    \"StatusDescription\": null,\n    \"Stable\": null,\n    \"Version\": null,\n    \"SubmitTime\": null,\n    \"CreateIndex\": null,\n    \"ModifyIndex\": null,\n    \"JobModifyIndex\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Consul Address Configuration in Nomad (HCL)\nDESCRIPTION: This example shows how to configure Nomad to use a custom Consul address. It's important to point to a local Consul client rather than directly to a Consul server.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/consul.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nconsul {\n  address = \"10.0.2.4:8500\"\n}\n```\n\n----------------------------------------\n\nTITLE: Planning job update with verbose output\nDESCRIPTION: Example of planning an update to add a task to an existing job group using verbose mode for detailed output.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/plan.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job plan -verbose example.nomad.hcl\n+/- Job: \"example\"\n+/- Task Group: \"cache\" (3 create/destroy update)\n  + Task: \"my-website\" (forces create/destroy update)\n    + Driver:      \"docker\"\n    + KillTimeout: \"5000000000\"\n    + Config {\n      + image:            \"node:6.2\"\n      + port_map[0][web]: \"80\"\n    }\n    + Resources {\n      + CPU:      \"500\"\n      + DiskMB:   \"300\"\n      + MemoryMB: \"256\"\n      + Network {\n        + MBits: \"10\"\n        + Dynamic Port {\n          + Label: \"web\"\n        }\n      }\n    }\n    + LogConfig {\n      + MaxFileSizeMB: \"10\"\n      + MaxFiles:      \"10\"\n    }\n    + Service {\n      + Name:      \"website\"\n      + PortLabel: \"web\"\n      + Check {\n          Command:  \"\"\n        + Interval: \"10000000000\"\n        + Name:     \"alive\"\n          Path:     \"\"\n          Protocol: \"\"\n        + Timeout:  \"2000000000\"\n        + Type:     \"tcp\"\n      }\n    }\n    Task: \"redis\"\n\nScheduler dry-run:\n- All tasks successfully allocated.\n- Rolling update, next evaluation will be in 10s.\n\nJob Modify Index: 7\nTo submit the job with version verification run:\n\nnomad job run -check-index 7 example.nomad.hcl\n\nWhen running the job with the check-index flag, the job will only be run if the\njob modify index given matches the server-side version. If the index has\nchanged, another user has modified the job and the plan's results are\npotentially invalid.\n```\n\n----------------------------------------\n\nTITLE: Configuring Exec Task Driver in Nomad Job Specification\nDESCRIPTION: This snippet demonstrates how to configure the exec task driver in a Nomad job specification. It shows the basic structure for executing a command with arguments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/exec.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"webservice\" {\n  driver = \"exec\"\n\n  config {\n    command = \"my-binary\"\n    args    = [\"-flag\", \"1\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Unzipping an Archive in Nomad\nDESCRIPTION: Demonstrates how to download and automatically unzip an archive from a URL with checksum verification using Nomad's artifact functionality.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/json-jobs.mdx#2025-04-19_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Artifacts\": [\n    {\n      \"GetterSource\": \"https://example.com/my.zip\",\n      \"GetterOptions\": {\n        \"checksum\": \"md5:7f4b3e3b4dd5150d4e5aaaa5efada4c3\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Nomad in Development Mode\nDESCRIPTION: Commands for compiling a development binary of Nomad and running it in development mode, with optional Consul integration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/README.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ make dev\n# find the built binary at ./bin/nomad\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo bin/nomad agent -dev\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ consul agent -dev\n```\n\n----------------------------------------\n\nTITLE: Creating and Converting Example Job to JSON\nDESCRIPTION: Commands to create a sample job using nomad init and then convert it to JSON format using the -output flag.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/json-jobs.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad init\nExample job file written to example.nomad.hcl\n$ nomad job run -output example.nomad.hcl\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Requirements in a Nomad Group\nDESCRIPTION: Shows how to specify network requirements using the network block. This example uses bridge networking mode with dynamic port allocation for \"http\" and \"https\" ports, and a static port allocation for \"lb\".\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/group.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"example\" {\n  network {\n    mode = \"bridge\"\n    port \"http\" {}\n    port \"https\" {}\n    port \"lb\" {\n      static = \"8889\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6 Docker Container with Driver Address Mode\nDESCRIPTION: This example shows how to configure an IPv6 Docker container for Redis using driver address mode for both service and check blocks, with numeric port specifications.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/service.mdx#2025-04-19_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n  datacenters = [\"dc1\"]\n\n  group \"cache\" {\n\n    task \"redis\" {\n      driver = \"docker\"\n\n      config {\n        image = \"redis:7\"\n        advertise_ipv6_address = true\n        # No port map required.\n      }\n\n      resources {\n        cpu    = 500 # 500 MHz\n        memory = 256 # 256MB\n      }\n\n      service {\n        name = \"ipv6-redis\"\n        port = 6379\n        address_mode = \"driver\"\n        check {\n          name     = \"ipv6-redis-check\"\n          type     = \"tcp\"\n          interval = \"10s\"\n          timeout  = \"2s\"\n          port     = 6379\n          address_mode = \"driver\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating an ACL Policy with JSON Payload in Nomad\nDESCRIPTION: This JSON payload demonstrates the structure for creating or updating an ACL policy. It includes the policy name, description, rules in HCL or JSON format, and optional JobACL for associating the policy with specific jobs, groups, or tasks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/policies.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Name\": \"my-policy\",\n  \"Description\": \"This is a great policy\",\n  \"Rules\": \"\",\n  \"JobACL\": {\n    \"Namespace\": \"default\",\n    \"JobID\": \"example\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Resource Statistics Response JSON\nDESCRIPTION: Example response showing resource statistics including CPU, memory, disk and device stats for a Nomad allocation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AllocDirStats\": {\n    \"Available\": 142943150080,\n    \"Device\": \"\",\n    \"InodesUsedPercent\": 0.05312946180421879,\n    \"Mountpoint\": \"\",\n    \"Size\": 249783500800,\n    \"Used\": 106578206720,\n    \"UsedPercent\": 42.668233241448746\n  },\n  \"CPU\": [\n    {\n      \"CPU\": \"cpu0\",\n      \"Idle\": 80,\n      \"System\": 11,\n      \"Total\": 20,\n      \"User\": 9\n    },\n    {\n      \"CPU\": \"cpu1\",\n      \"Idle\": 99,\n      \"System\": 0,\n      \"Total\": 1,\n      \"User\": 1\n    },\n    {\n      \"CPU\": \"cpu2\",\n      \"Idle\": 89,\n      \"System\": 7.000000000000001,\n      \"Total\": 11,\n      \"User\": 4\n    },\n    {\n      \"CPU\": \"cpu3\",\n      \"Idle\": 100,\n      \"System\": 0,\n      \"Total\": 0,\n      \"User\": 0\n    },\n    {\n      \"CPU\": \"cpu4\",\n      \"Idle\": 92.92929292929293,\n      \"System\": 4.040404040404041,\n      \"Total\": 7.07070707070707,\n      \"User\": 3.0303030303030303\n    },\n    {\n      \"CPU\": \"cpu5\",\n      \"Idle\": 99,\n      \"System\": 1,\n      \"Total\": 1,\n      \"User\": 0\n    },\n    {\n      \"CPU\": \"cpu6\",\n      \"Idle\": 92.07920792079209,\n      \"System\": 4.9504950495049505,\n      \"Total\": 7.920792079207921,\n      \"User\": 2.9702970297029703\n    },\n    {\n      \"CPU\": \"cpu7\",\n      \"Idle\": 99,\n      \"System\": 0,\n      \"Total\": 1,\n      \"User\": 1\n    }\n  ],\n  \"CPUTicksConsumed\": 1126.8044804480448,\n  \"DeviceStats\": [\n    {\n      \"InstanceStats\": {\n        \"6a61929e-d572-092d-5921-156a913f8e56\": {\n          \"Stats\": {\n            \"Attributes\": {\n              \"Used Memory\": {\n                \"Desc\": \"Memory in use by the device\",\n                \"IntNumeratorVal\": 128,\n                \"Unit\": \"MiB\"\n              }\n            },\n            \"Nested\": {}\n          },\n          \"Summary\": {\n            \"Desc\": \"Memory in use by the device\",\n            \"IntNumeratorVal\": 128,\n            \"Unit\": \"MiB\"\n          },\n          \"Timestamp\": \"2020-12-18T17:15:08.949806Z\"\n        }\n      },\n      \"Name\": \"modelA\",\n      \"Type\": \"skeleton\",\n      \"Vendor\": \"hashicorp\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Examining Plan Rejection Log Messages in Nomad\nDESCRIPTION: Example log output showing a plan rejection message that occurs when the scheduling pipeline encounters an issue. This log indicates that a plan for a node was rejected due to a port collision.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/monitoring-nomad.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnomad: plan for node rejected: node_id=0fa84370-c713-b914-d329-f6485951cddc reason=\"reserved port collision\" eval_id=098a5\n```\n\n----------------------------------------\n\nTITLE: Specifying Task-Level Restart Policy in HCL\nDESCRIPTION: This snippet shows how to define a restart policy specifically for an individual task. When combined with a group-level policy, the task-level policy takes precedence for overlapping parameters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/restart.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nrestart {\n  attempts = 5\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Curl Example Job with Pledge Driver\nDESCRIPTION: A complete Nomad job specification for running curl with the Pledge driver. This example demonstrates how to properly restrict syscalls to only those needed for making HTTP requests.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/pledge.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\njob \"curl\" {\n  type = \"batch\"\n  group \"group\" {\n    task \"curl\" {\n      driver = \"pledge\"\n      user   = \"nobody\"\n      config {\n        command  = \"curl\"\n        args     = [\"example.com\"]\n        promises = \"stdio rpath inet dns sendfd\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Nomad Variable Existence in Templates (HCL)\nDESCRIPTION: This snippet demonstrates how to check for the existence of a Nomad variable using the nomadVarExists function in a template.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate {\n  data        = <<EOH\n{{ if nomadVarExists \"app/beta_active\" }}\n  # ...\n{{ else }}\n  # ...\n{{ end }}\nEOH\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks with Constraints in a Nomad Group\nDESCRIPTION: Shows how to add constraints to a group that restrict where tasks can be placed. This example restricts tasks to 64-bit (amd64) architecture systems.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/group.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"example\" {\n  constraint {\n    attribute = \"${attr.cpu.arch}\"\n    value     = \"amd64\"\n  }\n\n  task \"cache\" {\n    # ...\n  }\n\n  task \"server\" {\n    # ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Operating System Constraint Example\nDESCRIPTION: Shows how to restrict tasks to specific operating system versions using multiple constraints.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/constraint.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nconstraint {\n  attribute = \"${attr.os.name}\"\n  value     = \"ubuntu\"\n}\n\nconstraint {\n  attribute = \"${attr.os.version}\"\n  value     = \"14.04\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Healthchecks in Nomad HCL\nDESCRIPTION: Shows how to disable built-in Docker healthchecks in the Nomad task configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  healthchecks {\n    disable = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Node Variables and Attributes in Templates\nDESCRIPTION: Example demonstrating how to access node attributes and metadata within a template using the env function.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate {\n  data = <<EOH\n  ---\n    node_dc:    {{ env \"node.datacenter\" }}\n    node_cores: {{ env \"attr.cpu.numcores\" }}\n    meta_key:   {{ env \"meta.node_meta_key\" }}\n  EOH\n\n  destination = \"local/file.yml\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Allocation Statistics Response JSON\nDESCRIPTION: Example response showing detailed resource usage statistics for a specific allocation including CPU and memory metrics.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ResourceUsage\": {\n    \"CpuStats\": {\n      \"Measured\": [\"Throttled Periods\", \"Throttled Time\", \"Percent\"],\n      \"Percent\": 0.14159538847117795,\n      \"SystemMode\": 0,\n      \"ThrottledPeriods\": 0,\n      \"ThrottledTime\": 0,\n      \"TotalTicks\": 3.256693934837093,\n      \"UserMode\": 0\n    },\n    \"MemoryStats\": {\n      \"Cache\": 1744896,\n      \"KernelMaxUsage\": 0,\n      \"KernelUsage\": 0,\n      \"MaxUsage\": 4710400,\n      \"Measured\": [\"RSS\", \"Cache\", \"Swap\", \"Max Usage\"],\n      \"RSS\": 1486848,\n      \"Swap\": 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Following logs with tail and specified number of lines\nDESCRIPTION: Example of using 'nomad alloc logs' with -tail, -f, and -n options to display and follow the last 3 lines of logs from a Redis task.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/logs.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc logs -tail -f -n 3 eb17e557 redis\nfoobar\nbaz\nbam\n<blocking>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Application Sizing Policies\nDESCRIPTION: Example of Dynamic Application Sizing (DAS) policy configuration for CPU and memory resources using different sizing strategies.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/policy.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nscaling \"cpu\" {\n  policy {\n    check \"96pct\" {\n      strategy \"app-sizing-percentile\" {\n        percentile = \"96\"\n      }\n    }\n  }\n}\n\nscaling \"mem\" {\n  policy {\n    check \"max\" {\n      strategy \"app-sizing-max\" {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connect Native Service Configuration\nDESCRIPTION: Example of configuring a Consul Connect Native application service block that implements a task named generate.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/connect.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nservice {\n  name = \"uuid-api\"\n  port = \"${NOMAD_PORT_api}\"\n  task = \"generate\"\n\n  connect {\n    native = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Task Configuration in Nomad HCL\nDESCRIPTION: Defines a basic Docker task configuration for a webservice using the Redis image. It specifies the driver, image, and labels.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"webservice\" {\n  driver = \"docker\"\n\n  config {\n    image = \"redis:7\"\n    labels {\n      group = \"webservice-cache\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Load Balancing with Nomad Services (HCL)\nDESCRIPTION: This snippet shows how to implement simple load balancing using the nomadService function with rendezvous hashing in a template.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate {\n  data        = <<EOH\n# Configuration for 1 redis instances, as assigned via rendezvous hashing.\n{{$allocID := env \"NOMAD_ALLOC_ID\" -}}\n{{range nomadService 1 $allocID \"redis\"}}\n  server {{ .Address }}:{{ .Port }};\n{{- end}}\nEOH\n}\n```\n\n----------------------------------------\n\nTITLE: Default Consul Integration Configuration in Nomad (HCL)\nDESCRIPTION: This example demonstrates the default Consul integration configuration for Nomad. It includes settings for address, service names, and auto-join features for both server and client.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/consul.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nconsul {\n  address             = \"127.0.0.1:8500\"\n  server_service_name = \"nomad\"\n  client_service_name = \"nomad-client\"\n  auto_advertise      = true\n  server_auto_join    = true\n  client_auto_join    = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Client TLS Certificate - Nomad CLI\nDESCRIPTION: Example of creating a TLS certificate for Nomad clients using the tls cert create command. The command generates client certificates and keys using the CA files.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/tls/cert-create.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad tls cert create -client\n==> Using CA file nomad-agent-ca.pem and CA key nomad-agent-ca-key.pem\n==> Client Certificate saved to global-client-nomad.pem\n==> Client Certificate key saved to global-client-nomad-key.pem\n```\n\n----------------------------------------\n\nTITLE: Sample GPU Job Specification\nDESCRIPTION: Example Nomad job specification demonstrating how to request GPU resources and set GPU model affinity for a Docker container task.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/devices/nvidia.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\njob \"gpu-test\" {\n  datacenters = [\"dc1\"]\n  type = \"batch\"\n\n  group \"smi\" {\n    task \"smi\" {\n      driver = \"docker\"\n\n      config {\n        image = \"nvidia/cuda:11.0-base\"\n        command = \"nvidia-smi\"\n      }\n\n      resources {\n        device \"nvidia/gpu\" {\n          count = 1\n\n          # Add an affinity for a particular model\n          affinity {\n            attribute = \"${device.model}\"\n            value     = \"Tesla K80\"\n            weight    = 50\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Nomad Node Pool in HCL\nDESCRIPTION: This snippet demonstrates how to define a Nomad node pool using HCL. It includes optional metadata and scheduler configuration options, which are specific to Nomad Enterprise.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/node-pool.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nnode_pool \"example\" {\n\n  description = \"Example node pool\"\n\n  # meta is optional metadata on the node pool, defined as key-value pairs.\n  # The scheduler does not use node pool metadata as part of scheduling.\n  meta {\n    environment = \"prod\"\n    owner       = \"sre\"\n  }\n\n  # The scheduler configuration options specific to this node pool. This block\n  # supports a subset of the fields supported in the global scheduler\n  # configuration as described at:\n  # https://developer.hashicorp.com/nomad/docs/commands/operator/scheduler/set-config\n  #\n  # * scheduler_algorithm is the scheduling algorithm to use for the pool.\n  #   If not defined, the global cluster scheduling algorithm is used.\n  #\n  # Available only in Nomad Enterprise.\n\n  # scheduler_config {\n  #   scheduler_algorithm = \"spread\"\n  # }\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Resource Statistics for a Node in Nomad CLI\nDESCRIPTION: Shows comprehensive resource usage statistics for a specific node using the -stats flag, including CPU, memory, and disk details along with allocations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/status.mdx#2025-04-19_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node status -stats c754da1f\nID        = c754da1f\nName      = nomad-client01\nNode Pool = default\nClass     = <none>\nDC        = dc1\nDrain     = false\nStatus    = ready\nUptime    = 17h7m41s\n\nDrivers\nDriver    Detected  Healthy\ndocker    false     false\nexec      true      true\njava      true      true\nqemu      true      true\nraw_exec  true      true\nrkt       true      true\n\nNode Events\nTime                  Subsystem       Message\n2018-03-29T17:24:42Z  Driver: docker  Driver docker is not detected\n2018-03-29T17:23:42Z  Cluster         Node registered\n\nAllocated Resources\nCPU            Memory           Disk\n2500/2600 MHz  1.3 GiB/2.0 GiB  1.5 GiB/32 GiB\n\nAllocation Resource Utilization\nCPU            Memory\n2200/2600 MHz  1.7 GiB/2.0 GiB\n\nHost Resource Utilization\nCPU            Memory           Disk\n2430/3000 MHz  1.8 GiB/2.4 GiB  3.9 GiB/40 GiB\n\nCPU Stats\nCPU    = cpu0\nUser   = 96.94%\nSystem = 1.02%\nIdle   = 2.04%\n\nCPU    = cpu1\nUser   = 97.92%\nSystem = 2.08%\nIdle   = 0.00%\n\nMemory Stats\nTotal     = 2.4 GiB\nAvailable = 612 MiB\nUsed      = 1.8 GiB\nFree      = 312 MiB\n\nDisk Stats\nDevice         = /dev/mapper/ubuntu--14--vg-root\nMountPoint     = /\nSize           = 38 GiB\nUsed           = 3.9 GiB\nAvailable      = 32 GiB\nUsed Percent   = 10.31%\nInodes Percent = 3.85%\n\nDevice         = /dev/sda1\nMountPoint     = /boot\nSize           = 235 MiB\nUsed           = 45 MiB\nAvailable      = 178 MiB\nUsed Percent   = 19.17%\nInodes Percent = 0.48%\n\nAllocations\nID        Eval ID   Job ID   Task Group  Desired Status  Client Status\n0b8b9e37  8bf94335  example  cache       run             running\nb206088c  8bf94335  example  cache       run             running\nb82f58b6  8bf94335  example  cache       run             running\ned3665f5  8bf94335  example  cache       run             running\n24cfd201  8bf94335  example  cache       run             running\n```\n\n----------------------------------------\n\nTITLE: Implementing Script Checks with Shell Interpolation in Nomad\nDESCRIPTION: Example of a script check that uses a shell (/bin/bash) to evaluate and interpolate environment variables. The check tests for the presence of a file specified by the HEALTH_CHECK_FILE environment variable.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/check.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nservice {\n  check {\n    type    = \"script\"\n    command = \"/bin/bash\"\n    args    = [\"-c\", \"test -f ${HEALTH_CHECK_FILE}\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spread Algorithm for On-Premises Node Pool in Nomad\nDESCRIPTION: HCL configuration for an on-premises node pool using the spread scheduler algorithm to distribute workloads across available clients, ideal for pre-provisioned environments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/node-pools.mdx#2025-04-19_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\nnode_pool \"on-prem\" {\n  # ...\n  scheduler_config {\n    scheduler_algorithm = \"spread\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Mount Configuration in Nomad\nDESCRIPTION: Example showing various mount configurations including volume, bind, and tmpfs mounts.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  mount {\n    type = \"volume\"\n    target = \"/path/in/container\"\n    source = \"name-of-volume\"\n    readonly = false\n    volume_options {\n      no_copy = false\n      labels {\n        foo = \"bar\"\n      }\n      driver_config {\n        name = \"pxd\"\n        options {\n          foo = \"bar\"\n        }\n      }\n    }\n  }\n\n  mount {\n    type = \"bind\"\n    target = \"/path/in/container\"\n    source = \"/path/in/host\"\n    readonly = false\n    bind_options {\n      propagation = \"rshared\"\n    }\n  }\n\n  mount {\n    type = \"tmpfs\"\n    target = \"/path/in/container\"\n    readonly = false\n    tmpfs_options {\n      size = 100000 # size in bytes\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Nomad Client in HCL\nDESCRIPTION: A simple configuration example showing how to enable a Nomad client and specify the servers it should connect to. The 'enabled' parameter turns on client functionality, while the 'servers' array lists the addresses and ports of Nomad servers to join.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/client.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  enabled = true\n  servers = [\"1.2.3.4:4647\", \"5.6.7.8:4647\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Network Address Configuration\nDESCRIPTION: Configuration settings for network bind addresses and advertise addresses used by Nomad services including HTTP, RPC and Serf protocols.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/index.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\naddresses {\n  http = \"0.0.0.0\"\n  rpc = \"0.0.0.0\"\n  serf = \"0.0.0.0\"\n}\n\nadvertise {\n  http = \"external.address\"\n  rpc = \"internal.address\"\n  serf = \"internal.address\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Interpolation in Nomad Job Specification\nDESCRIPTION: This example shows how to use variable interpolation in various parts of a Nomad job specification, including driver config, constraints, templates, environment variables, and meta keys.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/runtime/interpolation.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"docs\" {\n  driver = \"docker\"\n\n  # Drivers support interpreting node attributes and runtime environment\n  # variables\n  config {\n    image = \"my-app\"\n\n    # Interpret runtime variables to inject the address to bind to and the\n    # location to write logs to.\n    args = [\n      \"--bind\", \"${NOMAD_ADDR_RPC}\",\n      \"--logs\", \"${NOMAD_ALLOC_DIR}/logs\",\n    ]\n\n    port_map {\n      RPC = 6379\n    }\n  }\n\n  # Constraints only support node attributes as runtime environment variables\n  # are only defined after the task is placed on a node.\n  constraint {\n    attribute = \"${attr.kernel.name}\"\n    value     = \"linux\"\n  }\n\n  template {\n    destination = \"template.txt\"\n    data = <<EOT\n{{- /*\n      Environment variables are available to templates via the env function,\n      rather than the ${...} syntax.\n*/ -}}\nRunning on {{env \"attr.unique.hostname\"}}.\nEOT\n  }\n\n  # Environment variables are interpreted and can contain both runtime and\n  # node attributes. These environment variables are passed into the task.\n  env {\n    DC      = \"Running on datacenter ${node.datacenter}\"\n    VERSION = \"Version ${NOMAD_META_VERSION}\"\n  }\n\n  # Meta keys are also interpretable.\n  meta {\n    VERSION = \"v0.3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Policy and Capabilities in Nomad Namespace Rules\nDESCRIPTION: Example showing how to combine the 'policy' field with specific capabilities to create custom permission sets for a namespace.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/acl-policy.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# Allow reading jobs and submitting jobs, without allowing access\n# to view log output or inspect the filesystem\nnamespace \"default\" {\n  policy       = \"read\"\n  capabilities = [\"submit-job\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSI Volume Topology in Nomad\nDESCRIPTION: This snippet demonstrates how to configure a CSI volume in Nomad with topology requirements. It specifies the volume's basic properties and defines required and preferred topologies using the 'topology_request' block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/topology_request.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nid           = \"ebs_prod_db1\"\nnamespace    = \"default\"\nname         = \"database\"\ntype         = \"csi\"\nplugin_id    = \"ebs-prod\"\ncapacity_max = \"200G\"\ncapacity_min = \"100G\"\n\ntopology_request {\n  required {\n    topology { segments { rack = \"R2\" } }\n    topology { segments { rack = \"R1\", zone = \"us-east-1a\"} }\n  }\n  preferred {\n    topology { segments { rack = \"R1\", zone = \"us-east-1a\"} }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: System Configuration for Bridge Network Support\nDESCRIPTION: Commands and sysctl configuration required to enable container traffic through the bridge network to be routed via iptables on Linux systems.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/containerd.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n $ curl -L -o cni-plugins.tgz \"https://github.com/containernetworking/plugins/releases/download/v1.0.0/cni-plugins-linux-$( [ $(uname -m) = aarch64 ] && echo arm64 || echo amd64)\"-v1.0.0.tgz\n $ sudo mkdir -p /opt/cni/bin\n $ sudo tar -C /opt/cni/bin -xzf cni-plugins.tgz\n```\n\nLANGUAGE: hcl\nCODE:\n```\n $ echo 1 > /proc/sys/net/bridge/bridge-nf-call-arptables\n $ echo 1 > /proc/sys/net/bridge/bridge-nf-call-ip6tables\n $ echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables\n```\n\nLANGUAGE: hcl\nCODE:\n```\n net.bridge.bridge-nf-call-arptables = 1\n net.bridge.bridge-nf-call-ip6tables = 1\n net.bridge.bridge-nf-call-iptables = 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Workload Identity Exposure in HCL\nDESCRIPTION: Example of how to expose workload identity to tasks in a Nomad job specification. This configuration makes the identity available as both an environment variable and a file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/workload-identity.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"example\" {\n\n  identity {\n    # Expose Workload Identity in NOMAD_TOKEN env var\n    env = true\n\n    # Expose Workload Identity in ${NOMAD_SECRETS_DIR}/nomad_token file\n    file = true\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Consul ACL Policy for Nomad Clients (HCL)\nDESCRIPTION: This Consul ACL policy represents the minimal permissions required for Nomad clients. It includes read and write permissions for agent, node, and service resources.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/consul.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nagent_prefix \"\" {\n  policy = \"read\"\n}\n\nnode_prefix \"\" {\n  policy = \"write\"\n}\n\nservice_prefix \"\" {\n  policy = \"write\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Nomad Variables through Environment Variables\nDESCRIPTION: Example showing how to set Nomad variables using environment variables prefixed with NOMAD_VAR_. This approach is useful for automation or running sequential commands with the same variables.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/variables.mdx#2025-04-19_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ export NOMAD_VAR_image_id=nginx:1.19\n$ nomad job run example.nomad.hcl\n```\n\n----------------------------------------\n\nTITLE: Enabling Soft Fail for Authentication in Podman Task\nDESCRIPTION: Allows Podman to ignore errors from the auth backend and fall back to a different authentication method if needed.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  auth_soft_fail = true\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Job Summary using curl in Nomad API\nDESCRIPTION: Sample request for retrieving summary information about a specific job. Uses the GET method on the /v1/job/:job_id/summary endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_21\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/job/my-job/summary\n```\n\n----------------------------------------\n\nTITLE: Building Nomad from Source\nDESCRIPTION: Compiles Nomad binary for the local build environment and places it in the ./bin/ directory relative to the git checkout.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_21\n\nLANGUAGE: shell-session\nCODE:\n```\n$ make dev\n```\n\n----------------------------------------\n\nTITLE: Using yamldecode with various YAML inputs in Nomad\nDESCRIPTION: Examples of the yamldecode function parsing different YAML structures into Nomad language values, including simple objects, booleans, anchors/references, and error cases for unsupported features like cyclic references and custom tags.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/encoding/yamldecode.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> yamldecode(\"{\\\"hello\\\": \\\"world\\\"}\")\n{\n  \"hello\" = \"world\"\n}\n\n> yamldecode(\"true\")\ntrue\n\n> yamldecode(\"{a: &foo [1, 2, 3], b: *foo}\")\n{\n  \"a\" = [\n    1,\n    2,\n    3,\n  ]\n  \"b\" = [\n    1,\n    2,\n    3,\n  ]\n}\n\n> yamldecode(\"{a: &foo [1, *foo, 3]}\")\n\nError: Error in function call\n\nCall to function \"yamldecode\" failed: cannot refer to anchor \"foo\" from inside\nits own definition.\n\n> yamldecode(\"{a: !not-supported foo}\")\n\nError: Error in function call\n\nCall to function \"yamldecode\" failed: unsupported tag \"!not-supported\".\n```\n\n----------------------------------------\n\nTITLE: Cloud and Binary Cache Constraint Examples\nDESCRIPTION: Demonstrates constraints for cloud instance types and cached binary requirements.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/constraint.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nconstraint {\n  attribute = \"${attr.platform.aws.instance-type}\"\n  value     = \"m4.xlarge\"\n}\n\nconstraint {\n  attribute    = \"${meta.cached_binaries}\"\n  set_contains = \"redis,cypress,nginx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Network Aliases in Nomad HCL\nDESCRIPTION: Demonstrates how to set network aliases for a Docker container in a user-defined network using the Nomad task configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  network_mode = \"user-network\"\n  network_aliases = [\n    \"${NOMAD_TASK_NAME}\",\n    \"${NOMAD_TASK_NAME}-${NOMAD_ALLOC_INDEX}\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ceph CSI Controller and Node Plugins in Nomad\nDESCRIPTION: Commands to deploy the Ceph RBD controller and node plugins in Nomad using job specification files. Shows the deployment process and verification of plugin status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/ceph-csi-plugin/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad job run -var-file=nomad.vars ./plugin-cephrbd-controller.nomad\n==> Monitoring evaluation \"c8e65575\"\n    Evaluation triggered by job \"plugin-cephrbd-controller\"\n==> Monitoring evaluation \"c8e65575\"\n    Evaluation within deployment: \"b15b6b2b\"\n    Allocation \"1955d2ab\" created: node \"8dda4d46\", group \"cephrbd\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"c8e65575\" finished with status \"complete\"\n\n$ nomad job run -var-file=nomad.vars ./plugin-cephrbd-node.nomad\n==> Monitoring evaluation \"5e92c5dc\"\n    Evaluation triggered by job \"plugin-cephrbd-node\"\n==> Monitoring evaluation \"5e92c5dc\"\n    Allocation \"5bb9e57a\" created: node \"8dda4d46\", group \"cephrbd\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"5e92c5dc\" finished with status \"complete\"\n\n$ nomad plugin status cephrbd\nID                   = cephrbd\nProvider             = rbd.csi.ceph.com\nVersion              = canary\nControllers Healthy  = 1\nControllers Expected = 1\nNodes Healthy        = 1\nNodes Expected       = 1\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created    Modified\n1955d2ab  8dda4d46  cephrbd     0        run      running  3m47s ago  3m37s ago\n5bb9e57a  8dda4d46  cephrbd     0        run      running  3m44s ago  3m43s ago\n```\n\n----------------------------------------\n\nTITLE: Using Input Variable Values in Job Configuration\nDESCRIPTION: Example showing how to reference variable values in a job configuration using the var prefix. Variables can be used within expressions to customize configuration without changing the job code.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/variables.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  image = var.task_image\n  label = var.task_labels\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic QEMU Task in Nomad\nDESCRIPTION: A basic configuration for running a virtual machine using the QEMU task driver in Nomad. This snippet shows how to specify the image path, accelerator type, and additional arguments to pass to QEMU.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/qemu.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"webservice\" {\n  driver = \"qemu\"\n\n  config {\n    image_path        = \"/path/to/my/linux.img\"\n    accelerator       = \"kvm\"\n    graceful_shutdown = true\n    args              = [\"-nodefaults\", \"-nodefconfig\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Group Metric Query in HCL\nDESCRIPTION: This snippet demonstrates how to configure a check in the policy to query Nomad for task group metrics. It uses the 'avg_cpu' query as an example.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/apm/nomad.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ncheck {\n  source = \"nomad-apm\"\n  query  = \"avg_cpu\"\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Namespace Specification in HCL\nDESCRIPTION: A sample HCL configuration for defining a Nomad namespace named 'prod-eng' with various configurations including quotas, metadata, capabilities constraints, and enterprise features like node pool, Vault, and Consul configurations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/namespace.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nname        = \"prod-eng\"\ndescription = \"Namespace for production workloads.\"\n\n# Quotas are a Nomad Enterprise feature.\nquota = \"eng\"\n\nmeta {\n  owner = \"eng\"\n}\n\ncapabilities {\n  enabled_task_drivers   = [\"java\", \"docker\"]\n  disabled_task_drivers  = [\"raw_exec\"]\n  enabled_network_modes  = [\"bridge\", \"cni/custom\"]\n  disabled_network_modes = [\"host\"]\n}\n\n# Node Pool configuration is a Nomad Enterprise feature.\nnode_pool_config {\n  default = \"prod\"\n  allowed = [\"all\", \"default\"]\n}\n\n# Vault configuration is a Nomad Enterprise feature.\nvault {\n  default = \"default\"\n  allowed = [\"default\", \"infra\"]\n}\n\n# Consul configuration is a Nomad Enterprise feature.\nconsul {\n  default = \"default\"\n  allowed = [\"all\", \"default\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying an ACL Policy to a Specific Task using CLI\nDESCRIPTION: Command to apply an ACL policy to a specific task within a job. This associates the policy with the workload identity of the Redis task in the cache group of the example job.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/workload-identity.mdx#2025-04-19_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\nnomad acl policy apply \\\n   -namespace default -job example -group cache -task redis \\\n   redis-policy ./policy.hcl\n```\n\n----------------------------------------\n\nTITLE: Using nomad job plan command\nDESCRIPTION: Basic usage of the 'nomad job plan' command, which requires a path to a job specification file or '-' for reading from STDIN.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/plan.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad job plan [options] <path>\n```\n\n----------------------------------------\n\nTITLE: Basic CSI Plugin Configuration in HCL\nDESCRIPTION: Demonstrates the basic configuration structure for a CSI plugin block including required and optional parameters like ID, type, mount directory, and health timeout settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/csi_plugin.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncsi_plugin {\n  id                     = \"csi-hostpath\"\n  type                   = \"monolith\"\n  mount_dir              = \"/csi\"\n  stage_publish_base_dir = \"/local/csi\"\n  health_timeout         = \"30s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Port in Nomad Task Configuration\nDESCRIPTION: This example demonstrates how to access a dynamically allocated port in a Nomad task configuration using environment variables and templates.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/networking/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\njob \"...\" {\n  # ...\n  group \"...\" {\n    network {\n      port \"http\" {}\n    }\n\n    task \"...\" {\n      # ...\n      config {\n        args = [\n          \"--port=${NOMAD_PORT_http}\",\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Ulimits in Nomad HCL\nDESCRIPTION: Shows how to set ulimit configurations for a Docker container in the Nomad task configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  ulimit {\n    nproc = \"4242\"\n    nofile = \"2048:4096\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Java JAR Task Configuration with Artifact\nDESCRIPTION: A complete example showing how to configure a Java task to run a JAR file, including JVM options and the required artifact download specification.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/java.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"web\" {\n  driver = \"java\"\n\n  config {\n    jar_path    = \"local/hello.jar\"\n    jvm_options = [\"-Xmx2048m\", \"-Xms256m\"]\n  }\n\n  # Specifying an artifact is required with the \"java\" driver. This is the\n  # mechanism to ship the Jar to be run.\n  artifact {\n    source = \"https://internal.file.server/hello.jar\"\n\n    options {\n      checksum = \"md5:123445555555555\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Update Strategy in Nomad Job Specification\nDESCRIPTION: This JSON snippet demonstrates how to configure the update strategy for a Nomad job or task group. It includes settings for parallel updates, health checks, deadlines, and canary deployments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/json-jobs.mdx#2025-04-19_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Update\": {\n    \"MaxParallel\": 3,\n    \"HealthCheck\": \"checks\",\n    \"MinHealthyTime\": 15000000000,\n    \"HealthyDeadline\": 180000000000,\n    \"AutoRevert\": false,\n    \"AutoPromote\": false,\n    \"Canary\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ACL Auth Method in Nomad Using JSON\nDESCRIPTION: Sample JSON payload for updating an existing OIDC ACL auth method. This example changes the TokenLocality to 'global' and sets Default to true while maintaining other configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/auth-methods.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Name\": \"example-acl-auth-method\",\n  \"Type\": \"OIDC\",\n  \"Tokenlocality\": \"global\",\n  \"TokenNameFormat\": \"${auth_method_type}-${value.user}\",\n  \"Maxtokenttl\": \"1h0m0s\",\n  \"Default\": true,\n  \"Config\": {\n    \"OIDCDiscoveryURL\": \"https://my-corp-app-name.auth0.com/\",\n    \"OIDCClientID\": \"V1RPi2MYptMV1RPi2MYptMV1RPi2MYpt\",\n    \"OIDCClientSecret\": \"example-client-secret\",\n    \"OIDCScopes\": [\n      \"groups\"\n    ],\n    \"BoundAudiences\": [\n      \"V1RPi2MYptMV1RPi2MYptMV1RPi2MYpt\"\n    ],\n    \"AllowedRedirectURIs\": [\n      \"http://localhost:4646/oidc/callback\"\n    ],\n    \"ClaimMappings\": {\n      \"http://example.com/first_name\": \"first_name\",\n      \"http://example.com/last_name\": \"last_name\"\n    },\n    \"ListClaimMappings\": {\n      \"http://nomad.com/groups\": \"groups\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Resuming a Nomad Deployment\nDESCRIPTION: Demonstrates a practical example of resuming a deployment using the nomad deployment resume command, showing the evaluation process and allocation creation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/deployment/resume.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad deployment resume c848972e\nDeployment \"c848972e-dcd3-7354-e0d2-39d86642cdb1\" resumed\n\n==> Monitoring evaluation \"5e266d42\"\n    Evaluation triggered by job \"example\"\n    Evaluation within deployment: \"c848972e\"\n    Allocation \"00208424\" created: node \"6240eed6\", group \"web\"\n    Allocation \"68c72edf\" created: node \"6240eed6\", group \"cache\"\n    Allocation \"00208424\" status changed: \"pending\" -> \"running\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"5e266d42\" finished with status \"complete\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Instance Count for a Nomad Group\nDESCRIPTION: Demonstrates how to specify that multiple instances of the tasks within a group should be running. The count parameter determines how many allocations of the group will be created.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/group.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"example\" {\n  count = 5\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning a Job to a Node Pool\nDESCRIPTION: Example showing how to specify a node pool for a job using the node_pool attribute. This ensures the job allocations are only placed on nodes in the specified pool.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/node-pools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\njob \"app-dev\" {\n  # ...\n  node_pool = \"dev\"\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fingerprint Function in Go for Nomad Device Plugin\nDESCRIPTION: The Fingerprint function is called when the plugin starts. It provides Nomad with a list of discovered devices and their attributes for scheduling. It should send an initial FingerprintResponse and then periodic updates until the context is canceled.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/plugins/devices.mdx#2025-04-19_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n\"Fingerprint(context.Context) (<-chan *FingerprintResponse, error)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Labels in Nomad HCL\nDESCRIPTION: Demonstrates how to set labels for a Docker container in the Nomad task configuration, including a more verbose syntax for complex keys.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  labels {\n    foo = \"bar\"\n    zip = \"zap\"\n  }\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  labels = [\n    {\n      \"com.datadoghq.ad.check_names\"  =  \"[\\\"openmetrics\\\"]\"\n      \"com.datadoghq.ad.init_configs\" = \"[{}]\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling drain mode while keeping node ineligible\nDESCRIPTION: This example shows how to disable drain mode while keeping the node ineligible for scheduling, useful for inspecting a node's state without Nomad starting or migrating allocations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/drain.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node drain -disable -keep-ineligible 4d2ba53b\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Drain on Shutdown in Nomad Client (HCL)\nDESCRIPTION: This snippet demonstrates how to configure the drain_on_shutdown block in a Nomad client configuration. It controls the behavior of the client when leave_on_interrupt or leave_on_terminate are set, allowing for graceful shutdown with customizable options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/client.mdx#2025-04-19_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  # Either leave_on_interrupt or leave_on_terminate must be set\n  # for this to take effect.\n  drain_on_shutdown {\n    deadline           = \"1h\"\n    force              = false\n    ignore_system_jobs = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Vault-Enabled Workload Identity Claims in JSON\nDESCRIPTION: Example of claims included in a Nomad workload identity JWT for tasks using Vault with a specified role. The claims include the basic workload information plus the Vault role.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/workload-identity.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nomad_namespace\": \"default\",\n  \"nomad_job_id\": \"example\",\n  \"nomad_allocation_id\": \"8623ac7a-28ba-20c3-24a6-e615a39bbbf3\",\n  \"nomad_service\": \"example-cache-redis\",\n  \"vault_role\": \"nomad-jwt-login\"\n}\n```\n\n----------------------------------------\n\nTITLE: Task State Based Parallel Upgrades\nDESCRIPTION: Update configuration focusing on task state health checks rather than service checks, with parallel execution settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/update.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nupdate {\n  max_parallel     = 3\n  min_healthy_time = \"30s\"\n  healthy_deadline = \"2m\"\n  health_check     = \"task_states\"\n}\n```\n\n----------------------------------------\n\nTITLE: Volume Creation Configuration in Nomad (HCL)\nDESCRIPTION: HCL configuration for creating a new volume in Nomad. Specifies volume name, type, plugin details, capacity limits and capabilities including access modes and attachment modes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/host.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nname            = \"database\"\ntype            = \"host\"\nplugin_id       = \"lvm-thin-provisioner\"\nnode_pool       = \"prod\"\n\ncapacity_min = \"80G\"\ncapacity_max = \"100G\"\n\ncapability {\n  access_mode     = \"single-node-reader-only\"\n  attachment_mode = \"file-system\"\n}\n\ncapability {\n  access_mode     = \"single-node-writer\"\n  attachment_mode = \"file-system\"\n}\n\nparameters {\n  skuname = \"Premium_LRS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic containerd Task Driver Job Specification in Nomad\nDESCRIPTION: A simple job specification example showing how to use the containerd driver to run a Redis container in Nomad. This demonstrates the minimal configuration required for using the containerd driver.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/containerd.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"redis\" {\n  datacenters = [\"dc1\"]\n\n  group \"redis-group\" {\n    task \"redis-task\" {\n      driver = \"containerd-driver\"\n\n      config {\n        image = \"docker.io/library/redis:alpine\"\n      }\n\n      resources {\n        cpu    = 500\n        memory = 256\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Planning a Job with POST Request in Shell\nDESCRIPTION: Makes a POST request to plan a job named 'my-job' using curl. The request payload is contained in a file named payload.json.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://localhost:4646/v1/job/my-job/plan\n```\n\n----------------------------------------\n\nTITLE: cidrsubnet Usage Examples\nDESCRIPTION: Shows practical examples of using cidrsubnet function with different IP ranges and subnet calculations for both IPv4 and IPv6 addresses.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/ipnet/cidrsubnet.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> cidrsubnet(\"172.16.0.0/12\", 4, 2)\n172.18.0.0/16\n> cidrsubnet(\"10.1.2.0/24\", 4, 15)\n10.1.2.240/28\n> cidrsubnet(\"fd00:fd12:3456:7890::/56\", 16, 162)\nfd00:fd12:3456:7800:a200::/72\n```\n\n----------------------------------------\n\nTITLE: Nomad State Store Architecture Flowchart\nDESCRIPTION: A comprehensive diagram showing the data flow in Nomad's architecture, including how API requests are processed, how reads and writes are handled differently, and the interaction between various components like Raft, BoltDB, and the in-memory state store.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/architecture-state-store.md#2025-04-19_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n\n    %% entities\n\n    ext((\"API\\nclient\"))\n    any(\"Any node\\n      (client or server)\")\n    follower(Follower)\n\n    rpcLeader(\"RPC handler (on leader)\")\n\n    writes(\"writes go thru raft\\n        raftApply(MessageType, entry) in nomad/rpc.go\\n        structs.MessageType in nomad/structs/structs.go\\n        go generate ./... for nomad/msgtypes.go\")\n    click writes href \"https://github.com/hashicorp/nomad/tree/main/nomad\" _blank\n\n    reads(\"reads go directly to state store\\n        Typical state_store.go funcs to implement:\\n\\n        state.GetMyThingByID\\n        state.GetMyThingByPrefix\\n        state.ListMyThing\\n        state.UpsertMyThing\\n        state.DeleteMyThing\")\n    click writes href \"https://github.com/hashicorp/nomad/tree/main/nomad/state\" _blank\n\n    raft(\"hashicorp/raft\")\n\n    bolt(\"boltdb\")\n\n    fsm(\"Application-specific\\n      Finite State Machine (FSM)\\n      (aka State Store)\")\n    click writes href \"https://github.com/hashicorp/nomad/tree/main/nomad/fsm.go\" _blank\n\n    memdb(\"hashicorp/go-memdb\")\n\n    %% style classes\n    classDef leader fill:#d5f6ea,stroke-width:4px,stroke:#1d9467\n    classDef other fill:#d5f6ea,stroke:#1d9467\n    class any,follower other;\n    class rpcLeader,raft,bolt,fsm,memdb leader;\n\n    %% flows\n\n    ext -- HTTP request --> any\n\n    any -- \"RPC request\\n      to connected server\\n      (follower or leader)\" --> follower\n\n    follower -- \"(1) srv.Forward (to leader)\" --> rpcLeader\n\n    raft -- \"(3) replicate to a\\n      quorum of followers\\n      wait on their fsm.Apply\" --> follower\n\n    rpcLeader --> reads\n    reads --> memdb\n\n    rpcLeader --> writes\n    writes -- \"(2)\" --> raft\n\n    raft -- \"(4) write log to disk\" --> bolt\n    raft -- \"(5) fsm.Apply\\n      nomad/fsm.go\" --> fsm\n\n    fsm -- \"(6) txn.Insert\" --> memdb\n\n    bolt <-- \"Snapshot Persist: nomad/fsm.go\\n    Snapshot Restore: nomad/fsm.go\" --> memdb\n\n\n    %% notes\n\n    note1(\"Typical structs to implement\\n        for RPC handlers:\\n\\n        structs.MyThing\\n          .Diff()\\n          .Copy()\\n          .Merge()\\n        structs.MyThingUpsertRequest\\n        structs.MyThingUpsertResponse\\n        structs.MyThingGetRequest\\n        structs.MyThingGetResponse\\n        structs.MyThingListRequest\\n        structs.MyThingListResponse\\n        structs.MyThingDeleteRequest\\n        structs.MyThingDeleteResponse\\n\\n        Don't forget to register your new RPC\\n        in nomad/server.go!\")\n\n    note1 -.- rpcLeader\n```\n\n----------------------------------------\n\nTITLE: Removing Raft Peer using curl\nDESCRIPTION: This curl command removes a server from the Raft configuration by sending a DELETE request with the server's address. It requires a management token for authorization.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/raft.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    --header \"X-Nomad-Token: ${NOMAD_TOKEN}\"\n    https://127.0.0.1:4646/v1/operator/raft/peer?address=1.2.3.4:4647\n```\n\n----------------------------------------\n\nTITLE: Envoy Gateway Bind Address Configuration in HCL\nDESCRIPTION: Demonstrates how to configure custom bind addresses for Envoy gateway listeners.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/gateway.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nenvoy_gateway_bind_addresses \"<service>\" {\n  address = \"0.0.0.0\"\n  port    = <port>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Volume Access Rules in Nomad\nDESCRIPTION: Example of setting different access policies for host volumes using wildcards and specific volume names.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/acl-policy.mdx#2025-04-19_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nhost_volume \"*\" {\n  policy = \"write\"\n}\n\nhost_volume \"prod-*\" {\n  policy = \"deny\"\n}\n\nhost_volume \"prod-ca-certificates\" {\n  policy = \"read\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Redis job with nomad job inspect\nDESCRIPTION: Demonstrates how to use the 'nomad job inspect' command to inspect a submitted Redis job. The output is a JSON representation of the job definition, including details such as job type, priority, constraints, task groups, and resources.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/inspect.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job inspect redis\n{\n    \"Job\": {\n        \"Region\": \"global\",\n        \"ID\": \"redis\n        \"Name\": \"redis\n        \"Type\": \"service\",\n        \"Priority\": 50,\n        \"AllAtOnce\": false,\n        \"Datacenters\": [\n            \"dc1\"\n        ],\n        \"Constraints\": [\n            {\n                \"LTarget\": \"${attr.kernel.name}\",\n                \"RTarget\": \"linux\",\n                \"Operand\": \"=\"\n            }\n        ],\n        \"TaskGroups\": [\n            {\n                \"Name\": \"cache\",\n                \"Count\": 1,\n                \"Constraints\": null,\n                \"Tasks\": [\n                    {\n                        \"Name\": \"redis\",\n                        \"Driver\": \"docker\",\n                        \"User\": \"\",\n                        \"Config\": {\n                            \"image\": \"redis:latest\",\n                            \"port_map\": [\n                                {\n                                    \"db\": 6379\n                                }\n                            ]\n                        },\n                        \"Constraints\": null,\n                        \"Env\": null,\n                        \"Services\": [\n                            {\n                                \"Id\": \"\",\n                                \"Name\": \"cache-redis\",\n                                \"Tags\": [\n                                    \"global\",\n                                    \"cache\"\n                                ],\n                                \"PortLabel\": \"db\",\n                                \"Checks\": [\n                                    {\n                                        \"Id\": \"\",\n                                        \"Name\": \"alive\",\n                                        \"Type\": \"tcp\",\n                                        \"Command\": \"\",\n                                        \"Args\": null,\n                                        \"Path\": \"\",\n                                        \"Protocol\": \"\",\n                                        \"Interval\": 10000000000,\n                                        \"Timeout\": 2000000000\n                                    }\n                                ]\n                            }\n                        ],\n                        \"Resources\": {\n                            \"CPU\": 500,\n                            \"MemoryMB\": 256,\n                            \"DiskMB\": 300,\n                            \"Networks\": [\n                                {\n                                    \"Public\": false,\n                                    \"CIDR\": \"\",\n                                    \"ReservedPorts\": null,\n                                    \"DynamicPorts\": [\n                                        {\n                                            \"Label\": \"db\",\n                                            \"Value\": 0\n                                        }\n                                    ],\n                                    \"IP\": \"\",\n                                    \"MBits\": 10\n                                }\n                            ]\n                        },\n                        \"Meta\": null,\n                        \"KillTimeout\": 5000000000,\n                        \"LogConfig\": {\n                            \"MaxFiles\": 10,\n                            \"MaxFileSizeMB\": 10\n                        },\n                        \"Artifacts\": null\n                    }\n                ],\n                \"RestartPolicy\": {\n                    \"Interval\": 300000000000,\n                    \"Attempts\": 10,\n                    \"Delay\": 25000000000,\n                    \"Mode\": \"delay\"\n                },\n                \"Meta\": null\n            }\n        ],\n        \"Update\": {\n            \"Stagger\": 10000000000,\n            \"MaxParallel\": 1\n        },\n        \"Periodic\": null,\n        \"Meta\": null,\n        \"Status\": \"running\",\n        \"StatusDescription\": \"\",\n        \"CreateIndex\": 5,\n        \"ModifyIndex\": 7\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic Pledge Task with Python HTTP Server in Nomad\nDESCRIPTION: Sample configuration for running a Python HTTP server using the Pledge driver. The configuration restricts syscalls to only stdio, rpath, and inet, while providing read-only access to mime.types and the task directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/pledge.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"http\" {\n  driver = \"pledge\"\n  config {\n    command    = \"python3\"\n    args       = [\"-m\", \"http.server\", \"${NOMAD_PORT_http}\", \"--directory\", \"${NOMAD_TASK_DIR}\"]\n    promises   = \"stdio rpath inet\"\n    unveil     = [\"r:/etc/mime.types\", \"r:${NOMAD_TASK_DIR}\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Block in Nomad Agent (HCL)\nDESCRIPTION: This snippet demonstrates how to configure the `rpc` block in a Nomad agent configuration file. It includes settings for accept backlog, keepalive interval, connection write timeout, max stream window size, and stream open/close timeouts.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/rpc.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nrpc {\n  accept_backlog           = 256\n  keep_alive_interval      = \"30s\"\n  connection_write_timeout = \"10s\"\n  max_stream_window_size   = 262144\n  stream_open_timeout      = \"75s\"\n  stream_close_timeout     = \"5m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Security Options in Nomad\nDESCRIPTION: Example showing how to configure security options for Docker containers using the security_opt parameter.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  security_opt = [\n    \"credentialspec=file://gmsaUser.json\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Host Info Response - JSON\nDESCRIPTION: JSON response containing detailed host environment data including OS, network, disk and environment variables.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AgentID\": \"4bb9aca7-d43b-43fc-d604-3a271ef0a6c0\",\n  \"HostData\": {\n    \"OS\": \"x86_64 ip-172-31-92-147 4.15.0-1007-aws Linux #7-Ubuntu SMP Tue Apr 24 10:56:17 UTC 2018\",\n    \"Network\": [\n      {\n        \"DialPacket\": \"\\\"udp4\\\" \\\"\\\"\",\n        \"DialStream\": \"\\\"tcp4\\\" \\\"\\\"\",\n        \"ListenPacket\": \"\\\"udp4\\\" \\\"\\\"\",\n        \"ListenStream\": \"\\\"tcp4\\\" \\\"\\\"\",\n        \"address\": \"127.0.0.1\",\n        \"binary\": \"01111111000000000000000000000001\",\n        \"broadcast\": \"127.255.255.255\",\n        \"first_usable\": \"127.0.0.1\",\n        \"hex\": \"7f000001\",\n        \"host\": \"127.0.0.1\",\n        \"last_usable\": \"127.255.255.254\",\n        \"mask_bits\": \"8\",\n        \"netmask\": \"255.0.0.0\",\n        \"network\": \"127.0.0.0\",\n        \"octets\": \"127 0 0 1\",\n        \"port\": \"0\",\n        \"size\": \"16777216\",\n        \"string\": \"127.0.0.1/8\",\n        \"type\": \"IPv4\",\n        \"uint32\": \"2130706433\"\n      }\n    ],\n    \"ResolvConf\": \"nameserver 172.17.0.1\\nnameserver 8.8.8.8\\n\",\n    \"Hosts\": \"127.0.0.1 localhost\\n\\n# The following lines are desirable for IPv6 capable hosts\\n::1 ip6-localhost ip6-loopback\\nfe00::0 ip6-localnet\\nff00::0 ip6-mcastprefix\\nff02::1 ip6-allnodes\\nff02::2 ip6-allrouters\\nff02::3 ip6-allhosts\\n127.0.0.1 ip-172-31-71-163\\n127.0.0.1 ip-172-31-92-147\\n\",\n    \"Environment\": {\n      \"INVOCATION_ID\": \"b106b6ac67764c9b9f85c5cc5c3357e5\",\n      \"JOURNAL_STREAM\": \"9:109527\",\n      \"LANG\": \"C.UTF-8\",\n      \"PATH\": \"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n    },\n    \"Disk\": {\n      \"/\": {\n        \"DiskMB\": 7876,\n        \"UsedMB\": 4287\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting an interactive debugging session\nDESCRIPTION: Example of starting an interactive debugging session in a particular allocation using /bin/bash.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/exec.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc exec eb17e557 /bin/bash\nroot@eb17e557:/data# # now run any debugging commands inside container\nroot@eb17e557:/data# # ps -ef\n```\n\n----------------------------------------\n\nTITLE: Create/Update Namespace Payload Example in JSON\nDESCRIPTION: Shows a sample JSON payload for creating or updating a namespace. Includes namespace name, description, metadata, quota, capabilities, and node pool configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/namespaces.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Name\": \"api-prod\",\n  \"Description\": \"Production API Servers\",\n  \"Meta\": {\n    \"contact\": \"platform-eng@example.com\"\n  },\n  \"Quota\": \"prod-quota\",\n  \"Capabilities\": {\n    \"DisabledTaskDrivers\": [\"raw_exec\"]\n  },\n  \"NodePoolConfiguration\": {\n    \"Default\": \"prod-pool\",\n    \"Allowed\": [\"default\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Files API Request\nDESCRIPTION: Example request to list files in an allocation directory using the Nomad operator API.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api \\\n    /v1/client/fs/ls/5fc98185-17ff-26bc-a802-0c74fa471c99\n```\n\n----------------------------------------\n\nTITLE: Implementing Reserve Function in Go for Nomad Device Plugin\nDESCRIPTION: The Reserve function accepts a list of device IDs and returns information for the client to make those devices available to a task. It specifies environment variables, host devices, and files to be mounted. Any required device preparation should also be performed here.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/plugins/devices.mdx#2025-04-19_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n\"Reserve(deviceIDs []string) (*ContainerReservation, error)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ephemeral Disk in Nomad Job Specification (HCL)\nDESCRIPTION: This snippet demonstrates how to configure the ephemeral_disk block within a Nomad job specification. It shows setting disk size, enabling migration, and making the disk sticky for a job group.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/ephemeral_disk.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    ephemeral_disk {\n      migrate = true\n      size    = 500\n      sticky  = true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Time Zone for Periodic Job in Nomad HCL\nDESCRIPTION: This snippet demonstrates how to set a specific time zone for a periodic job evaluation. It configures the job to run every 15 minutes in the America/New_York time zone.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/periodic.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nperiodic {\n  cron      = \"*/15 * * * * *\"\n  time_zone = \"America/New_York\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring check_restart with MySQL Service in Nomad\nDESCRIPTION: Example configuration showing how to set up check_restart monitoring for a MySQL service task. Includes restart policy, service checks, and check_restart parameters for handling unhealthy states.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/check_restart.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"mysql\" {\n  group \"mysqld\" {\n\n    restart {\n      attempts = 3\n      delay    = \"10s\"\n      interval = \"10m\"\n      mode     = \"fail\"\n    }\n\n    task \"server\" {\n      service {\n        tags = [\"leader\", \"mysql\"]\n\n        port = \"db\"\n\n        check {\n          type     = \"tcp\"\n          port     = \"db\"\n          interval = \"10s\"\n          timeout  = \"2s\"\n        }\n\n        check {\n          type     = \"script\"\n          name     = \"check_table\"\n          command  = \"/usr/local/bin/check_mysql_table_status\"\n          args     = [\"--verbose\"]\n          interval = \"60s\"\n          timeout  = \"5s\"\n\n          check_restart {\n            limit = 3\n            grace = \"90s\"\n            ignore_warnings = false\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Artifact Configuration in Nomad Job Specification\nDESCRIPTION: A basic example of configuring an artifact in a Nomad job specification. This snippet demonstrates how to download a tarball from a URL, place it in a specific destination, and verify its checksum.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/artifact.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    task \"server\" {\n      artifact {\n        source      = \"https://example.com/file.tar.gz\"\n        destination = \"local/some-directory\"\n        options {\n          checksum = \"md5:df6a4178aec9fbdc1d6d7e3634d1bc33\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting Environment Variables from Nomad Template (Text)\nDESCRIPTION: This snippet shows the resulting environment variables after the Nomad template is rendered.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nLOG_LEVEL=DEBUG\nAPI_KEY=12345678-1234-1234-1234-1234-123456789abc\n```\n\n----------------------------------------\n\nTITLE: Configuring a basic Raw Exec task in Nomad HCL\nDESCRIPTION: A basic configuration for the raw_exec driver that executes a command with arguments. The command is executed as the same user as the Nomad process with no isolation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/raw_exec.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"webservice\" {\n  driver = \"raw_exec\"\n\n  config {\n    command = \"my-binary\"\n    args    = [\"-flag\", \"1\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resources and Environment for Sidecar Task (HCL)\nDESCRIPTION: This example demonstrates how to configure resources, environment variables, and shutdown delay for a sidecar task in Nomad.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/sidecar_task.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n   sidecar_task {\n     resources {\n       cpu = 500\n       memory = 1024\n     }\n\n     env {\n       FOO = \"abc\"\n     }\n\n     shutdown_delay = \"5s\"\n   }\n```\n\n----------------------------------------\n\nTITLE: Response After Updating an ACL Binding Rule\nDESCRIPTION: JSON response returned after successfully updating a binding rule. Shows all rule details with the updated fields (description) and modified timestamps.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/binding-rules.mdx#2025-04-19_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AuthMethod\": \"auth0\",\n  \"BindName\": \"eng-ro\",\n  \"BindType\": \"role\",\n  \"CreateIndex\": 16,\n  \"CreateTime\": \"2022-12-16T10:29:07.248465Z\",\n  \"Description\": \"new description\",\n  \"ID\": \"5da76548-1a60-b8fb-f9be-c7736a5bca09\",\n  \"ModifyIndex\": 17,\n  \"ModifyTime\": \"2022-12-19T16:40:52.602004Z\",\n  \"Selector\":\"engineering in list.roles\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Logs API Request\nDESCRIPTION: Example request to stream logs from a specific allocation using the Nomad operator API.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api \\\n    /v1/client/fs/logs/5fc98185-17ff-26bc-a802-0c74fa471c99\n```\n\n----------------------------------------\n\nTITLE: Defining Group-Level Restart Policy in HCL\nDESCRIPTION: This example shows a more comprehensive restart policy at the group level. It includes interval, attempts, delay, mode, and render_templates parameters, which can be inherited by tasks in the group.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/restart.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nrestart {\n  interval         = \"30m\"\n  attempts         = 2\n  delay            = \"15s\"\n  mode             = \"fail\"\n  render_templates = true\n}\n```\n\n----------------------------------------\n\nTITLE: Restart Allocation Request - Shell\nDESCRIPTION: Sample request to restart a task in an allocation using cURL\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/allocations.mdx#2025-04-19_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -X POST -d '{\"TaskName\": \"redis\" }' \\\n    https://localhost:4646/v1/client/allocation/5456bd7a-9fc0-c0dd-6131-cbee77f57577/restart\n```\n\n----------------------------------------\n\nTITLE: Verbose Node Status Information in Nomad CLI\nDESCRIPTION: Provides the most comprehensive information about a node using the -verbose flag, including all node attributes, host volumes, CSI volumes, drivers, events, and detailed resource metrics.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/status.mdx#2025-04-19_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node status -verbose c754da1f\nID        = c754da1f-6337-b86d-47dc-2ef4c71aca14\nName      = nomad\nNode Pool = default\nClass     = <none>\nDC        = dc1\nDrain     = false\nStatus    = ready\nUptime    = 17h7m41s\n\nHost Volumes\nName  ReadOnly  Source\n\nCSI Volumes\nID        Name  Namespace  Plugin ID  Schedulable  Access Mode         Mount options\n402f2c83  vol   default    plug       true         single-node-writer  <none>\n\nDrivers\nDriver    Detected  Healthy  Message                        Time\ndocker    false     false    Driver docker is not detected  2018-03-29T17:24:42Z\nexec      true      true     <none>                         2018-03-29T17:23:42Z\njava      true      true     <none>                         2018-03-29T17:23:41Z\nqemu      true      true     <none>                         2018-03-29T17:23:41Z\nraw_exec  true      true     <none>                         2018-03-29T17:23:42Z\nrkt       true      true     <none>                         2018-03-29T17:23:42Z\n\nNode Events\nTime                  Subsystem       Message                        Details\n2018-03-29T17:24:42Z  Driver: docker  Driver docker is not detected  driver: docker,\n2018-03-29T17:23:42Z  Cluster         Node registered                <none>\n\nAllocated Resources\nCPU            Memory           Disk\n2500/2600 MHz  1.3 GiB/2.0 GiB  1.5 GiB/32 GiB\n\nAllocation Resource Utilization\nCPU            Memory\n2200/2600 MHz  1.7 GiB/2.0 GiB\n\nHost Resource Utilization\nCPU           Memory           Disk\n230/3000 MHz  121 MiB/2.4 GiB  6.5 GiB/40 GiB\n\nAllocations\nID                                    Eval ID                               Job ID   Task Group  Desired Status  Client Status\n3d743cff-8d57-18c3-2260-a41d3f6c5204  2fb686da-b2b0-f8c2-5d57-2be5600435bd  example  cache       run             complete\n\nAttributes\narch                      = amd64\ncpu.frequency             = 1300.000000\ncpu.modelname             = Intel(R) Core(TM) M-5Y71 CPU @ 1.20GHz\ncpu.numcores              = 2\ncpu.totalcompute          = 2600.000000\ndriver.docker             = 1\ndriver.docker.version     = 1.10.3\ndriver.exec               = 1\ndriver.java               = 1\ndriver.java.runtime       = OpenJDK Runtime Environment (IcedTea 2.6.4) (7u95-2.6.4-0ubuntu0.14.04.2)\ndriver.java.version       = 1.7.0_95\ndriver.java.vm            = OpenJDK 64-Bit Server VM (build 24.95-b01, mixed mode)\ndriver.qemu               = 1\ndriver.qemu.version       = 2.0.0\ndriver.raw_exec           = 1\ndriver.rkt                = 1\ndriver.rkt.appc.version   = 0.7.4\ndriver.rkt.version        = 1.2.0\nhostname                  = nomad\nkernel.name               = linux\nkernel.version            = 3.19.0-25-generic\nmemory.totalbytes         = 2094473216\nnomad.revision            = '270da7a60ccbf39eeeadc4064a59ca06bf9ac6fc+CHANGES'\nnomad.version             = 0.3.2dev\nos.name                   = ubuntu\nos.version                = 14.04\nunique.cgroup.mountpoint  = /sys/fs/cgroup\nunique.network.ip-address = 127.0.0.1\nunique.storage.bytesfree  = 36044333056\nunique.storage.bytestotal = 41092214784\nunique.storage.volume     = /dev/mapper/ubuntu--14--vg-root\n```\n\n----------------------------------------\n\nTITLE: Displaying full status of an allocation in Nomad\nDESCRIPTION: Shows how to use the 'nomad alloc status' command to display detailed status information about an allocation, including task events and resource usage.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/status.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc status 0af996ed\nID                   = 0af996ed\nEval ID              = be9bde98\nName                 = example.cache[0]\nNode ID              = 43c0b14e\nJob ID               = example\nJob Version          = 0\nClient Status        = running\nClient Description   = <none>\nDesired Status       = run\nDesired Description  = <none>\nCreated              = 5m ago\nModified             = 5m ago\nDeployment ID        = 0c83a3b1\nDeployment Health    = healthy\nReplacement Alloc ID = 0bc894ca\nReschedule Attempts  = 1/3\n\nTask \"redis\" is \"running\"\nTask Resources\nCPU        Memory           Disk     Addresses\n1/500 MHz  6.3 MiB/256 MiB  300 MiB  db: 127.0.0.1:27908\n\nCSI Volumes:\nID            Plugin  Provider  Schedulable  Mount options\nvol-4150af42  ebs0    aws.ebs   true         <none>\n\nTask Events:\nStarted At     = 07/25/17 16:12:48 UTC\nFinished At    = N/A\nTotal Restarts = 0\nLast Restart   = N/A\n\nRecent Events:\nTime                   Type        Description\n07/25/17 16:12:48 UTC  Started     Task started by client\n07/25/17 16:12:48 UTC  Task Setup  Building Task Directory\n07/25/17 16:12:48 UTC  Received    Task received by client\n\nTask \"web\" is \"running\"\nTask Resources\nCPU        Memory           Disk     Addresses\n1/500 MHz  6.3 MiB/256 MiB  300 MiB  db: 127.0.0.1:30572\n\nTask Events:\nStarted At     = 07/25/17 16:12:49 UTC\nFinished At    = N/A\nTotal Restarts = 0\nLast Restart   = N/A\n\nRecent Events:\n07/25/17 16:12:49 UTC  Started     Task started by client\n07/25/17 16:12:48 UTC  Task Setup  Building Task Directory\n07/25/17 16:12:48 UTC  Received    Task received by client\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Logs Configuration\nDESCRIPTION: Example showing basic log rotation configuration for a Nomad task with max_files set to 10, max_file_size set to 10MB, and logging enabled.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/logs.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    task \"server\" {\n      logs {\n        max_files     = 10\n        max_file_size = 10\n        disabled      = false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Authentication for Podman in Nomad (JSON)\nDESCRIPTION: Sets up authentication details for an external registry. This JSON file should be placed in a location accessible to Nomad, such as /etc/nomad.d/registry/auth.json.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auths\": {\n    \"yourregistry\": {\n      \"auth\": \"token\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Services with Consul Service Data in Nomad (HCL)\nDESCRIPTION: Shows how to query Consul's service catalog to generate configuration for upstream services, including creating an individual service config and configurations for all services in the catalog.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_17\n\nLANGUAGE: hcl\nCODE:\n```\n  template {\n    data = <<EOF\n# Configuration for a single upstream service.\nupstream my_app {\n  {{- range service \"my-app\" }}\n  server {{ .Address }}:{{ .Port }};{{- end }}\n}\n\n# Configuration for all services in the catalog.\n{{ range services }}\n# Configuration for service {{ .Name }}.\nupstream {{ .Name | toLower }} {\n  {{- range service .Name }}\n  server {{ .Address}}:{{ .Port }};{{- end }}\n}\n{{ end -}}\n    EOF\n\n    destination = \"local/nginx.conf\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul for Service Mesh in JSON Format\nDESCRIPTION: JSON configuration for enabling Consul service mesh on a non-dev Consul agent. This enables the required GRPC port and turns on the Connect feature.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/service-mesh.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // ...\n  \"ports\": {\n    \"grpc\": 8502\n  },\n  \"connect\": {\n     \"enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Template Rendering in Nomad HCL\nDESCRIPTION: Example of using an inline template to render a YAML file with data from Consul keys.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate {\n  data        = \"---\\nkey: {{ key \\\"service/my-key\\\" }}\"\n  destination = \"local/file.yml\"\n}\n```\n\n----------------------------------------\n\nTITLE: Default Envoy Configuration for Sidecar Task (HCL)\nDESCRIPTION: This snippet shows the default configuration for an Envoy sidecar task in Nomad. It includes settings for the task name, lifecycle, driver, config, logs, resources, and shutdown delay.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/sidecar_task.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nsidecar_task {\n  name = \"connect-proxy-<service>\"\n  #      \"connect-gateway-<service>\" when used as a gateway\n\n  lifecycle { # absent when used as a gateway\n    hook    = \"prestart\"\n    sidecar = true\n  }\n\n  driver = \"docker\"\n\n  config {\n    image = \"${meta.connect.sidecar_image}\"\n    #       \"${meta.connect.gateway_image}\" when used as a gateway\n\n    args = [\n      \"-c\",\n      \"${NOMAD_SECRETS_DIR}/envoy_bootstrap.json\",\n      \"-l\",\n      \"${meta.connect.log_level}\",\n      \"--concurrency\",\n      \"${meta.connect.proxy_concurrency}\",\n      \"--disable-hot-restart\"\n    ]\n  }\n\n  logs {\n    max_files     = 2\n    max_file_size = 2 # MB\n  }\n\n  resources {\n    cpu    = 250 # MHz\n    memory = 128 # MB\n  }\n\n  shutdown_delay = \"5s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Service with Driver Address Mode\nDESCRIPTION: This example shows a job configuration for a Redis service using the Docker driver with Weave network, demonstrating the use of driver address mode for both service and check blocks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/service.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n  datacenters = [\"dc1\"]\n  group \"cache\" {\n\n    task \"redis\" {\n      driver = \"docker\"\n\n      config {\n        image = \"redis:7\"\n        network_mode = \"weave\"\n        # No port map required.\n      }\n\n      resources {\n        cpu    = 500 # 500 MHz\n        memory = 256 # 256MB\n      }\n\n      service {\n        name = \"weave-redis\"\n        port = 6379\n        address_mode = \"driver\"\n        check {\n          name     = \"host-redis-check\"\n          type     = \"tcp\"\n          interval = \"10s\"\n          timeout  = \"2s\"\n          port     = 6379\n\n          address_mode = \"driver\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Single NVIDIA GPU Configuration\nDESCRIPTION: Simple configuration for requesting a single NVIDIA GPU.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/device.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndevice \"nvidia/gpu\" {}\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Policy for OIDC Federation\nDESCRIPTION: Defines an IAM role policy for OIDC federated users, allowing specific AWS service access. Requires AWS account ID and OIDC provider URL.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/aws-oidc-provider.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"oidc_provider\" {\n  description = \"The OIDC provider URL\"\n  type        = string\n  default     = \"<DOMAIN_NAME>\"\n}\n\nvariable \"aws_account_id\" {\n  description = \"AWS account ID\"\n  type        = string\n  default     = \"<AWS_ACCOUNT_ID>\"\n}\n\ndata \"aws_iam_policy_document\" \"assume_role\" {\n  statement {\n    effect = \"Allow\"\n\n    principals {\n      type        = \"Federated\"\n      identifiers = [\"arn:aws:iam::${var.aws_account_id}:oidc-provider/${var.oidc_provider}\"]\n    }\n\n    actions = [\"sts:AssumeRoleWithWebIdentity\"]\n\n    condition {\n      test     = \"StringEquals\"\n      variable = \"${var.oidc_provider}:aud\"\n      values   = [\"aws\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nomad on Amazon Linux\nDESCRIPTION: Installs the Nomad package from the HashiCorp repository using yum package manager on Amazon Linux.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo yum -y install nomad\n```\n\n----------------------------------------\n\nTITLE: Stopping a Single Job in Nomad\nDESCRIPTION: Shows an example of stopping a job with ID 'job1' using the 'nomad job stop' command and monitoring the evaluation process.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/stop.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job stop job1\n==> Monitoring evaluation \"43bfe672\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"43bfe672\" finished with status \"complete\"\n```\n\n----------------------------------------\n\nTITLE: Directory Tree and Fileset Examples\nDESCRIPTION: Shows multiple examples of using the fileset function with different patterns and paths to match files in a directory structure. Includes demonstrations of wildcard patterns, directory matching, and specific file matching.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/file/fileset.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> tree pkr-consul\npkr-consul\n├── build-linux.pkr.hcl\n└── linux\n    ├── files\n    │   ├── hello.txt\n    │   └── world.txt\n    └── scripts\n        ├── script-1-install.sh\n        └── script-2-setup.sh\n\n3 directories, 5 files\n\n> fileset(\".\", \"*\")\n[\n  \"build-linux.pkr.hcl\",\n]\n\n> echo 'fileset(\".\", \"linux/scripts/*\")'\n[\n  \"linux/scripts/script-1-install.sh\",\n  \"linux/scripts/script-2-setup.sh\",\n]\n\n> echo 'fileset(\"linux\", \"files/{hello,world}.txt\")'\n[\n  \"files/hello.txt\",\n  \"files/world.txt\",\n]\n\n> echo 'fileset(\"./linux/files\", \"*\")'\n[\n  \"hello.txt\",\n  \"world.txt\",\n]\n\n> echo 'fileset(\"./linux\", \"**\")'\n[\n  \"files/hello.txt\",\n  \"files/world.txt\",\n  \"scripts/script-1-install.sh\",\n  \"scripts/script-2-setup.sh\",\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Telemetry Configuration in HCL\nDESCRIPTION: A simple configuration example for enabling allocation and node metrics in the telemetry block of a Nomad agent configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/telemetry.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntelemetry {\n  publish_allocation_metrics = true\n  publish_node_metrics       = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Threshold Strategy Policy in HCL\nDESCRIPTION: Example policy configuration showing how to set up multiple threshold checks for memory usage scaling. Demonstrates both high and low memory usage scenarios with different bounds and scaling actions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/strategy/threshold.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\npolicy {\n  # ...\n  check \"high-memory-usage\" {\n    # ...\n    group = \"memory-usage\"\n\n    strategy \"threshold\" {\n      upper_bound = 100\n      lower_bound = 70\n      delta       = 1\n    }\n  }\n\n  check \"low-memory-usage\" {\n    # ...\n    group = \"memory-usage\"\n\n    strategy \"threshold\" {\n      upper_bound = 30\n      lower_bound = 0\n      delta       = -1\n    }\n  }\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Containerd Driver Plugin Options in Nomad\nDESCRIPTION: Plugin configuration block for the containerd driver specifying runtime settings, stats collection interval, and privilege controls. Uses the new plugin syntax and requires matching plugin directory configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/containerd.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"containerd-driver\" {\n  config {\n    enabled = true\n    containerd_runtime = \"io.containerd.runc.v2\"\n    stats_interval = \"5s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fuzzy Search Response Example - Jobs\nDESCRIPTION: Sample JSON response from a fuzzy search in jobs context showing matches across different job-related categories\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/search.mdx#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Index\": 90,\n  \"KnownLeader\": true,\n  \"LastContact\": 0,\n  \"Matches\": {\n    \"services\": [\n      {\n        \"ID\": \"python-logger\",\n        \"Scope\": [\n          \"default\",\n          \"example-python\",\n          \"my-spy-app\",\n          \"my-python-task\"\n        ]\n      },\n      {\n        \"ID\": \"super-spy-service\",\n        \"Scope\": [\n          \"default\",\n          \"example-python\",\n          \"my-spy-app\"\n        ]\n      }\n    ],\n    \"tasks\": [\n      {\n        \"ID\": \"my-python-task\",\n        \"Scope\": [\n          \"default\",\n          \"example-python\",\n          \"my-spy-app\"\n        ]\n      }\n    ],\n    \"images\": [\n      {\n        \"ID\": \"python:3\",\n        \"Scope\": [\n          \"default\",\n          \"example-python\",\n          \"my-spy-app\",\n          \"my-python-task\"\n        ]\n      }\n    ],\n    \"jobs\": [\n      {\n        \"ID\": \"example-python\",\n        \"Scope\": [\n          \"default\"\n        ]\n      }\n    ],\n    \"groups\": [\n      {\n        \"ID\": \"my-spy-app\",\n        \"Scope\": [\n          \"default\",\n          \"example-python\"\n        ]\n      }\n    ]\n  },\n  \"Truncations\": {\n    \"jobs\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Transparent Proxy Configuration in Nomad HCL\nDESCRIPTION: A minimal configuration example for enabling transparent proxy in a Nomad job specification. With transparent proxy enabled, you don't need to configure upstream blocks as the Envoy proxy determines its configuration from Consul service intentions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/transparent_proxy.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsidecar_service {\n  proxy {\n    transparent_proxy {\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Exec Job with Chroot Isolation in Nomad\nDESCRIPTION: A minimal Nomad job specification that demonstrates chroot isolation using the exec driver. This job runs a simple sleep command that allows inspection of the filesystem isolation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/filesystem.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n  datacenters = [\"dc1\"]\n\n  task \"task2\" {\n    driver = \"exec\"\n\n    config {\n      command = \"/bin/sh\"\n      args = [\"-c\", \"sleep 600\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Nomad Variables in Templates (HCL)\nDESCRIPTION: This snippet shows how to read Nomad variables using the nomadVar function in a template.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate {\n  data        = <<EOH\n{{ with nomadVar \"nomad/jobs/redis\" }}{{ .maxconns }}{{ end }}\nEOH\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate {\n  data        = <<EOH\n{{ with nomadVar \"nomad/jobs/redis\" }}\nPath:       {{ .Metadata.Path }}\nNamespace:  {{ .Metadata.Namespace }}\nCreateTime: {{ .Metadata.CreateTime }}\nModifyTime: {{ .Metadata.ModifyTime }}\n{{ end }}\nEOH\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate {\n  data        = <<EOH\n{{ with nomadVar \"nomad/jobs/redis@example_namespace\" }}{{ .maxconns }}{{ end }}\nEOH\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSI Plugin Block in Nomad\nDESCRIPTION: Example configuration for a CSI plugin task in Nomad, showing required fields including plugin ID, type, mount directory, and stage publish base directory. This configuration enables the plugin to manage storage volumes through the CSI interface.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/plugins/storage/csi.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncsi_plugin {\n  id                     = \"csi-hostpath\"\n  type                   = \"monolith\"\n  mount_dir              = \"/csi\"\n  stage_publish_base_dir = \"/local/csi\"\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping ACL System with POST Request\nDESCRIPTION: This snippet demonstrates how to bootstrap the ACL system with a POST request to get an initial management token. This endpoint can only be invoked once until a bootstrap reset is performed.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    https://localhost:4646/v1/acl/bootstrap\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Server Block in HCL\nDESCRIPTION: This snippet demonstrates how to configure the server block in a Nomad agent configuration. It enables server mode, sets the bootstrap expectation, and configures server join parameters including retry settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/server.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nserver {\n  enabled          = true\n  bootstrap_expect = 3\n  server_join {\n    retry_join     = [ \"1.1.1.1\", \"2.2.2.2\" ]\n    retry_max      = 3\n    retry_interval = \"15s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows IIS Task Driver in Nomad\nDESCRIPTION: A basic Nomad job configuration for the Windows IIS task driver, showing how to set the required path parameter and configure application pool identity with specific user credentials.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/iis.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"iis-test\" {\n  driver = \"win_iis\"\n\n  config {\n    path = \"C:\\\\inetpub\\\\wwwroot\"\n    apppool_identity {\n      identity=\"SpecificUser\"\n      username=\"vagrant\"\n      password=\"vagrant\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Login Command for OIDC Authentication in Nomad\nDESCRIPTION: Execute the nomad login command with the OIDC method and specify the callback address. This initiates the OIDC authentication flow and opens a browser for the user to complete the login process.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/acl/auth-methods/oidc.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad login -method=oidc -oidc-callback-addr=<host:port>\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication for Private Registry in Nomad Containerd\nDESCRIPTION: HCL configuration block for setting up authentication credentials to access private container registries. Can be used in both Driver Config and Task Config, with Task Config taking precedence.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/containerd.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nauth {\n  username = \"user\"\n  password = \"pass\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ACL Policy for High-Availability Lock Support\nDESCRIPTION: An HCL configuration that grants the Nomad Autoscaler write capabilities for Nomad variables used as locks in high-availability mode. This should match the configured lock_namespace and lock_path parameters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/agent.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nnamespace \"default\" {\n  variables {\n    path \"nomad-autoscaler/lock\" {\n      capabilities = [\"write\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Volume Claim Request\nDESCRIPTION: Shell command to delete a specific volume claim using its ID via the Nomad API.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_30\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    https://localhost:4646/v1/volume/claim/75c417b5-cf90-86e4-8ffc-d18f445e0721\n```\n\n----------------------------------------\n\nTITLE: Defining CSI Volume Configuration in HCL\nDESCRIPTION: This HCL snippet defines a CSI volume configuration with ID, name, type, plugin ID, and capacity specifications. It's used to create and later expand the volume.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/csi.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nid        = \"ebs_prod_db1\"\nname      = \"database\"\ntype      = \"csi\"\nplugin_id = \"ebs-prod\"\n\ncapacity_min = \"50gib\"\ncapacity_max = \"50gib\"\n\n# ... etc ...\n```\n\n----------------------------------------\n\nTITLE: Configuring sidecar_task in Nomad Job Specification (HCL)\nDESCRIPTION: This snippet demonstrates how to configure a sidecar_task within a Nomad job specification. It shows setting up a service with a sidecar and customizing its resources.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/sidecar_task.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"countdash\" {\n  datacenters = [\"dc1\"]\n\n  group \"api\" {\n    network {\n      mode = \"bridge\"\n    }\n\n    service {\n      name = \"count-api\"\n      port = \"9001\"\n\n      connect {\n        sidecar_service {}\n\n        sidecar_task {\n          resources {\n            cpu    = 500\n            memory = 1024\n          }\n        }\n      }\n    }\n\n    task \"web\" {\n      driver = \"docker\"\n\n      config {\n        image = \"hashicorpdev/counter-api:v3\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Node Pool with HCL Configuration\nDESCRIPTION: Example of a node pool specification file that creates a development node pool with metadata for environment and owner. This is applied using the 'nomad node pool apply' command.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/node-pools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# dev-pool.nomad.hcl\nnode_pool \"dev\" {\n  description = \"Nodes for the development environment.\"\n\n  meta {\n    environment = \"dev\"\n    owner       = \"sre\"\n  }\n}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node pool apply dev-pool.nomad.hcl\nSuccessfully applied node pool \"dev\"!\n```\n\n----------------------------------------\n\nTITLE: Configuring Periodic Job in Nomad HCL\nDESCRIPTION: This snippet demonstrates how to configure a periodic job in Nomad using the 'periodic' block. It sets up a job to run every 15 minutes and prevents overlapping executions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/periodic.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  periodic {\n    cron             = \"*/15 * * * * *\"\n    prohibit_overlap = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nomad Job Validation Response\nDESCRIPTION: Example JSON response from the validation endpoint showing validation errors, warnings, and driver configuration status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/validate.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DriverConfigValidated\": true,\n  \"ValidationErrors\": [\n    \"Task group cache validation failed: 1 error(s) occurred:\\n\\n* Task redis validation failed: 1 error(s) occurred:\\n\\n* 1 error(s) occurred:\\n\\n* minimum CPU value is 20; got 1\"\n  ],\n  \"Warnings\": \"1 warning(s):\\n\\n* Group \\\"cache\\\" has warnings: 1 error(s) occurred:\\n\\n* Update max parallel count is greater than task group count (13 > 1). A destructive change would result in the simultaneous replacement of all allocations.\",\n  \"Error\": \"1 error(s) occurred:\\n\\n* Task group cache validation failed: 1 error(s) occurred:\\n\\n* Task redis validation failed: 1 error(s) occurred:\\n\\n* 1 error(s) occurred:\\n\\n* minimum CPU value is 20; got 1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Policy Configuration for Azure VMSS Target in HCL\nDESCRIPTION: Configuration block for a policy that uses the azure-vmss target. It specifies the resource group, virtual machine scale set, and Nomad-specific parameters like node class and drain settings for autoscaling.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/target/azure-vmss.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ncheck \"clients-azure-vmss\" {\n  # ...\n  target \"azure-vmss\" {\n    resource_group      = \"prod\"\n    vm_scale_set        = \"hashistack-client-set\"\n    node_class          = \"hashistack\"\n    node_drain_deadline = \"5m\"\n    node_purge          = \"true\"\n  }\n  # ...\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Binpack Algorithm for Cloud Node Pool in Nomad\nDESCRIPTION: HCL configuration for a cloud node pool using the binpack scheduler algorithm to maximize resource usage and workload density, ideal for cloud environments with hourly billing.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/node-pools.mdx#2025-04-19_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nnode_pool \"cloud\" {\n  # ...\n  scheduler_config {\n    scheduler_algorithm = \"binpack\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Hosts in Podman Container\nDESCRIPTION: Configures additional host-to-IP mappings in the container's /etc/hosts file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  extra_hosts = [\"test4.localhost:127.0.0.2\", \"test6.localhost:[::1]\"]\n}\n```\n\n----------------------------------------\n\nTITLE: System Jobs Using the 'all' Node Pool\nDESCRIPTION: Examples of system and maintenance jobs that need to run on all nodes regardless of their node pool assignment, using the built-in 'all' node pool.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/node-pools.mdx#2025-04-19_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\njob \"csi-nodes\" {\n  namespace = \"infra\"\n  node_pool = \"all\"\n  # ...\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\njob \"maintenance\" {\n  type      = \"batch\"\n  namespace = \"infra\"\n  node_pool = \"all\"\n\n  periodic { /* ... */ }\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Create Dynamic Host Volume Response Example\nDESCRIPTION: JSON response showing the created dynamic host volume details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Volume\": {\n    \"Allocations\": [],\n    \"CapacityBytes\": 21474836480,\n    \"Constraints\": [\n      {\n        \"LTarget\": \"${attr.kernel.name}\",\n        \"RTarget\": \"linux\",\n        \"Operand\": \"=\"\n      }\n    ],\n    \"CreateIndex\": 11,\n    \"CreateTime\": 1736191993011594200,\n    \"ID\": \"c0f7ee7d-5cc6-92fd-f2b5-14b79f01979f\",\n    \"ModifyIndex\": 11,\n    \"ModifyTime\": 1736191993011594200,\n    \"Name\": \"example\",\n    \"Namespace\": \"default\",\n    \"NodeID\": \"45460554-cc67-11ef-84b7-33d383a55487\",\n    \"NodePool\": \"prod\",\n    \"Parameters\": {\n      \"foo\": \"bar\"\n    },\n    \"PluginID\": \"mkdir\",\n    \"RequestedCapabilities\": [\n      {\n        \"AccessMode\": \"single-node-writer\",\n        \"AttachmentMode\": \"file-system\"\n      },\n      {\n        \"AccessMode\": \"single-node-writer\",\n        \"AttachmentMode\": \"block-device\"\n      }\n    ],\n    \"RequestedCapacityMaxBytes\": 21474836480,\n    \"RequestedCapacityMinBytes\": 10737418240,\n    \"State\": \"pending\"\n  },\n  \"Warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Create Job Plan Payload\nDESCRIPTION: JSON payload for creating a job plan dry-run with diff and policy override options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Job\": {\n    // ...\n  },\n  \"Diff\": true,\n  \"PolicyOverride\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Task API Example Job in Nomad HCL\nDESCRIPTION: Example Nomad job specification that demonstrates using the Task API to set Dynamic Node Metadata. The job uses a Docker container with curl to make an API request through the Unix Domain Socket.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/task-api.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"taskapi-example\" {\n  type = \"batch\"\n\n  group \"taskapi-example\" {\n\n    task \"taskapi\" {\n      driver = \"docker\"\n\n      config {\n        image = \"curlimages/curl:7.87.0\"\n        args = [\n          \"--unix-socket\", \"${NOMAD_SECRETS_DIR}/api.sock\",\n          \"-H\", \"Authorization: Bearer ${NOMAD_TOKEN}\",\n          \"--data-binary\", \"{\\\"Meta\\\": {\\\"example\\\": \\\"Hello World!\\\"}}\",\n          \"--fail-with-body\",\n          \"--verbose\",\n          \"localhost/v1/client/metadata\",\n        ]\n      }\n\n      identity {\n        env = true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NUMA-Aware GPU Task in Nomad Enterprise\nDESCRIPTION: HCL configuration for a Nomad Enterprise task that allocates both CPU cores and a GPU device while ensuring they are on the same NUMA node for optimal performance.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/cpu.mdx#2025-04-19_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\ntask {\n  resources {\n    cores = 4\n    memory = 2048\n\n    device \"nvidia/gpu/1080ti\" {\n      count = 1\n    }\n\n    numa {\n      affinity = \"require\"\n      devices = [\n        \"nvidia/gpu/1080ti\"\n      ]\n\t  }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Even Spread Across Datacenters in Nomad\nDESCRIPTION: This snippet shows a spread block that evenly distributes allocations across the node's datacenter attribute with a weight of 100.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/spread.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nspread {\n  attribute = \"${node.datacenter}\"\n  weight    = 100\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatch Job Sample Payload\nDESCRIPTION: JSON payload for dispatching a new parameterized job instance with a base64 encoded payload and metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Payload\": \"A28C3==\",\n  \"Meta\": {\n    \"key\": \"Value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Redis Container in Nomad\nDESCRIPTION: Docker configuration for running a Redis container version 7 with a mapped port. This task configuration is part of a Nomad job specification that includes CPU and memory resource allocations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"image\": \"redis:7\",\n  \"ports\": [\n    \"db\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Client Assertion with Client Secret HMAC\nDESCRIPTION: JSON configuration for OIDC client assertion using the client secret as an HMAC key to sign the JWT. This method provides a slightly more secure alternative to sending the client secret directly, as the JWT is time-bound and signed.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/acl/auth-methods/oidc.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"OIDCDiscoveryURL\": \"https://your-oidc-provider.com/oidc-discovery-url\",\n  \"OIDCClientID\": \"your-client-id\",\n  \"OIDCClientSecret\": \"long-secret-id-has-to-be-at-least-32-bytes\",\n  \"OIDCClientAssertion\": {\n    \"KeySource\": \"client_secret\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Encoding Example in Nomad Shell\nDESCRIPTION: Demonstrates using the jsonencode function to convert a Nomad map to a JSON string. The example shows encoding a simple key-value pair object into its JSON representation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/encoding/jsonencode.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> jsonencode({\"hello\"=\"world\"})\n{\"hello\":\"world\"}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation with Plugin Architecture\nDESCRIPTION: Documentation markdown explaining Nomad's plugin system architecture, including component types and implementation details using go-plugin and gRPC services.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/plugins/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: docs\npage_title: Plugins\ndescription: Learn how Nomad's task and device driver plugins extend a workload's supported functions.\n---\n\n# Plugins\n\nThis page provides conceptual information on task and device driver plugins.\n\nNomad implements a plugin framework which lets you extend the\nfunctionality of some components within Nomad. The design of the plugin system\nis inspired by the lessons learned from plugin systems implemented in other\nHashiCorp products such as Terraform and Vault.\n\nThe following components are currently pluggable within Nomad:\n\n- [Task Drivers](/nomad/docs/concepts/plugins/task-drivers)\n- [Devices](/nomad/docs/concepts/plugins/devices)\n\n## Architecture\n\nThe Nomad plugin framework uses the [go-plugin][goplugin] project to expose\na language independent plugin interface. Plugins implement a set of gRPC\nservices and methods which Nomad manages by running the plugin and calling the\nimplemented RPCs. This means that plugins are free to be implemented in the\nauthor's language of choice.\n\nTo make plugin development easier, a set of go interfaces and structs exist for\neach plugin type that abstract away go-plugin and the gRPC interface. The\nguides in this documentation reference these abstractions for ease of use.\n\n[goplugin]: https://github.com/hashicorp/go-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Agent Retry Join\nDESCRIPTION: Example showing how to configure a Nomad agent to retry joining a cluster at a specific address. This option is only available for servers through command line flags.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/agent.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad agent -retry-join \"127.0.0.1:4648\"\n```\n\n----------------------------------------\n\nTITLE: Querying a Namespace in Nomad\nDESCRIPTION: Example showing how to query jobs within a specific namespace ('qa') by providing the namespace as a query parameter to the API request.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/index.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl 'localhost:4646/v1/jobs?namespace=qa'\n```\n\n----------------------------------------\n\nTITLE: Displaying short status of an allocation in Nomad\nDESCRIPTION: Demonstrates how to use the 'nomad alloc status' command with the --short option to display a concise status of an allocation, including basic information and task states.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/status.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc status --short 0af996ed\nID                  = 0af996ed\nEval ID             = be9bde98\nName                = example.cache[0]\nNode ID             = 43c0b14e\nJob ID              = example\nJob Version         = 0\nClient Status       = running\nClient Description  = <none>\nDesired Status      = run\nDesired Description = <none>\nCreated At          = 07/25/17 16:12:48 UTC\nDeployment ID       = 0c83a3b1\nDeployment Health   = healthy\n\nTasks\nName   State    Last Event  Time\nredis  running  Started     07/25/17 16:12:48 UTC\nweb    running  Started     07/25/17 16:12:49 UTC\n```\n\n----------------------------------------\n\nTITLE: Read Dynamic Host Volume Response Example\nDESCRIPTION: JSON response showing detailed information about a dynamic host volume.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Allocations\": [],\n  \"CapacityBytes\": 49283072,\n  \"CreateIndex\": 11,\n  \"CreateTime\": 1736191993011594200,\n  \"HostPath\": \"/run/nomad/dev/alloc_mounts/c0f7ee7d-5cc6-92fd-f2b5-14b79f01979f\",\n  \"ID\": \"c0f7ee7d-5cc6-92fd-f2b5-14b79f01979f\",\n  \"ModifyIndex\": 12,\n  \"ModifyTime\": 1736191993011594200,\n  \"Name\": \"external-plugin\",\n  \"Namespace\": \"default\",\n  \"NodeID\": \"670cb259-bc26-653b-e316-655af04ad260\",\n  \"NodePool\": \"default\",\n  \"Parameters\": {\n    \"hello\": \"world\"\n  },\n  \"PluginID\": \"example-plugin-mkfs\",\n  \"RequestedCapabilities\": [\n    {\n      \"AccessMode\": \"single-node-writer\",\n      \"AttachmentMode\": \"file-system\"\n    }\n  ],\n  \"RequestedCapacityMaxBytes\": 50000000,\n  \"RequestedCapacityMinBytes\": 50000000,\n  \"State\": \"ready\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Job Update in Nomad API\nDESCRIPTION: Sample response after updating a job, providing the evaluation ID, evaluation create index, and job modify index for tracking the update process.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EvalID\": \"d092fdc0-e1fd-2536-67d8-43af8ca798ac\",\n  \"EvalCreateIndex\": 35,\n  \"JobModifyIndex\": 34\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Meta Fields in Multiregion Deployment\nDESCRIPTION: This example demonstrates how meta fields are merged across job, group, and region levels in a multiregion deployment configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/multiregion.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nmultiregion {\n\n    region \"west\" {\n      meta {\n        first-key = \"regional-west\"\n        second-key = \"regional-west\"\n      }\n    }\n\n    region \"east\" {\n      meta {\n        second-key = \"regional-east\"\n      }\n    }\n  }\n}\n\nmeta {\n  first-key = \"job-level\"\n}\n\ngroup \"worker\" {\n  meta {\n    second-key = \"group-level\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VM OS Architecture and Machine Type in Nomad HCL\nDESCRIPTION: This snippet shows how to specify the VM architecture and machine type in a Nomad Virt task configuration. It's used when the VM architecture differs from the host.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/virt/task-config.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  os {\n    arch    = \"x86_64\"\n    machine = \"pc-i440fx-2.9\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Endpoint in Nomad Autoscaler\nDESCRIPTION: This example demonstrates how to configure the HTTP endpoint for a Nomad Autoscaler agent. It specifies a custom bind address and port where the HTTP server will listen for incoming connections.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/agent/http.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nhttp {\n  bind_address = \"10.0.0.10\"\n  bind_port    = 9999\n}\n```\n\n----------------------------------------\n\nTITLE: Allocating CPU Bandwidth for a Task\nDESCRIPTION: HCL configuration for specifying how much CPU bandwidth should be allocated for a task, measured in MHz and translated to cpushares on Linux.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/cpu.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ntask {\n  resources {\n    cpu = 2000 # mhz\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nomad ACL Token with TTL\nDESCRIPTION: Example showing how to create an ACL token with a time-to-live (TTL) expiration of 8 hours. Includes the complete command and its output showing token details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/token/create.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl token create -name=\"example-acl-token\" -policy=example-acl-policy -ttl=8h\nAccessor ID  = 1b60edc8-e4ed-08ef-208d-ecc18a90ccc3\nSecret ID    = e4c7c80e-870b-c6a6-43d2-dbfa90130c06\nName         = example-acl-token\nType         = client\nGlobal       = false\nCreate Time  = 2022-08-23 12:17:35.45067293 +0000 UTC\nExpiry Time  = 2022-08-23 20:17:35.45067293 +0000 UTC\nCreate Index = 142\nModify Index = 142\nPolicies     = [example-acl-policy]\n\nRoles\n<none>\n```\n\n----------------------------------------\n\nTITLE: Starting Nomad Agent with Vault Integration\nDESCRIPTION: Launches a Nomad agent in development mode with Vault integration enabled, using the previously generated token.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/dev/vault/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnomad agent -dev -vault-enabled -vault-address=http://127.0.0.1:8200 \\\n    -vault-create-from-role=nomad-cluster -vault-token=<token>\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Only Root Filesystem for Podman Container\nDESCRIPTION: When set to true, mounts the container's root filesystem as read-only for enhanced security.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_26\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  readonly_rootfs = true\n}\n```\n\n----------------------------------------\n\nTITLE: Specific NVIDIA GPU Model Configuration\nDESCRIPTION: Two equivalent configurations for requesting a specific NVIDIA GPU model (1080ti).\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/device.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndevice \"nvidia/gpu/1080ti\" {}\n```\n\nLANGUAGE: hcl\nCODE:\n```\ndevice \"gpu\" {\n  count = 1\n\n  constraint {\n    attribute = \"${device.vendor}\"\n    value     = \"nvidia\"\n  }\n\n  constraint {\n    attribute = \"${device.model}\"\n    value     = \"1080ti\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Nomad Server Status with agent-info Command\nDESCRIPTION: This shell command outputs detailed information about a Nomad server, including its bootstrap status, region awareness, leadership status, and Raft consensus details like applied indexes and peer count. Used during upgrades to verify cluster health.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/upgrade/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nubuntu@nomad-server-10-1-1-4:~$ nomad agent-info\nnomad\n  bootstrap = false\n  known_regions = 1\n  leader = false\n  server = true\nraft\n  applied_index = 53460\n  commit_index = 53460\n  fsm_pending = 0\n  last_contact = 54.512216ms\n  last_log_index = 53460\n  last_log_term = 1\n  last_snapshot_index = 49511\n  last_snapshot_term = 1\n  num_peers = 2\n...\n```\n\n----------------------------------------\n\nTITLE: Using dirname Function with a Filesystem Path in Nomad\nDESCRIPTION: This example demonstrates how the dirname function extracts the directory portion of a path by removing the last segment. When given 'foo/bar/baz.txt', it returns 'foo/bar'.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/file/dirname.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> dirname(\"foo/bar/baz.txt\")\nfoo/bar\n```\n\n----------------------------------------\n\nTITLE: Defining a Production Node Pool in HCL\nDESCRIPTION: An example HCL configuration for creating a production node pool with metadata and scheduler configuration (Enterprise feature).\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/apply.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# prod_pool.nomad.hcl\nnode_pool \"prod\" {\n  description = \"Node pool for production workloads.\"\n\n  meta {\n    env = \"prod\"\n  }\n\n  # Available only in Nomad Enterprise.\n  scheduler_config {\n    scheduler_algorithm = \"spread\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Dynamic Host Volume with the mkdir Plugin in HCL\nDESCRIPTION: Example configuration for creating a dynamic host volume using Nomad's built-in mkdir plugin. This defines a host volume named 'cool-host-vol' with custom permissions (mode 0755) and ownership (UID/GID 1000).\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/host.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntype      = \"host\"\nname      = \"cool-host-vol\"\nplugin_id = \"mkdir\"\nparameters = {\n  mode = \"0755\"\n  uid  = 1000\n  gid  = 1000\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Client in HCL\nDESCRIPTION: This snippet demonstrates the basic configuration of the Nomad client using the 'nomad' block in HCL format. It specifies the address of the Nomad server and the region to connect to.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/agent/nomad.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nnomad {\n  address = \"http://my-nomad.systems:4646\"\n  region  = \"esp-vlc-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring Raft Leadership using Nomad CLI\nDESCRIPTION: This command uses the Nomad CLI to transfer leadership from the current leader to another server in the Raft configuration. It requires the target server's address and works only with Raft protocol v3 or greater.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/raft.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator api -X PUT \\\n    \"/v1/operator/raft/transfer-leadership?address=1.2.3.4:4647\"\n```\n\n----------------------------------------\n\nTITLE: Manual Expose Path Configuration in Nomad\nDESCRIPTION: Example of manually configuring expose paths in the proxy block, showing how to expose a health endpoint with custom port configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/expose.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\njob \"expose-example\" {\n  datacenters = [\"dc1\"]\n\n  group \"api\" {\n    network {\n      mode = \"bridge\"\n\n      port \"api_expose_healthcheck\" {\n        to = -1\n      }\n    }\n\n    service {\n      name = \"count-api\"\n      port = \"9001\"\n\n      connect {\n        sidecar_service {\n          proxy {\n            expose {\n              path {\n                path            = \"/health\"\n                protocol        = \"http\"\n                local_path_port = 9001\n                listener_port   = \"api_expose_healthcheck\"\n              }\n            }\n          }\n        }\n      }\n\n      check {\n        name     = \"api-health\"\n        type     = \"http\"\n        path     = \"/health\"\n        port     = \"api_expose_healthcheck\"\n        interval = \"10s\"\n        timeout  = \"3s\"\n      }\n    }\n\n    task \"web\" {\n      driver = \"docker\"\n\n      config {\n        image = \"hashicorpdev/counter-api:v3\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Templated Vault ACL Policy for Nomad Jobs\nDESCRIPTION: HCL configuration for a Vault ACL policy that uses templating to dynamically grant permissions based on Nomad job namespace and job ID claims. This allows for fine-grained access control to secrets by job.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/vault/acl.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\npath \"secret/data/{{identity.entity.aliases.auth_jwt_d34481ad.metadata.nomad_namespace}}/{{identity.entity.aliases.auth_jwt_d34481ad.metadata.nomad_job_id}}/*\" {\n  capabilities = [\"read\"]\n}\n\npath \"secret/data/{{identity.entity.aliases.auth_jwt_d34481ad.metadata.nomad_namespace}}/{{identity.entity.aliases.auth_jwt_d34481ad.metadata.nomad_job_id}}\" {\n  capabilities = [\"read\"]\n}\n\npath \"secret/metadata/{{identity.entity.aliases.auth_jwt_d34481ad.metadata.nomad_namespace}}/*\" {\n  capabilities = [\"list\"]\n}\n\npath \"secret/metadata/*\" {\n  capabilities = [\"list\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Interface for Virt Task in Nomad HCL\nDESCRIPTION: This snippet demonstrates how to configure a network interface for a Virt task in Nomad. It shows attaching the VM to a bridge network and exposing ports.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/virt/task-config.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  network_interface {\n    bridge {\n      name  = \"virbr0\"\n      ports = [\"ssh\", \"http\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ACL Policy for Nomad Autoscaler\nDESCRIPTION: An HCL configuration that creates an ACL policy with the 'scale' disposition, providing sufficient permissions for the Nomad Autoscaler to fetch scaling policies and scale jobs in the default namespace.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/agent.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nnamespace \"default\" {\n  policy = \"scale\"\n}\n```\n\n----------------------------------------\n\nTITLE: Audit Filter Configuration in HCL\nDESCRIPTION: Configuration examples for filtering audit events based on endpoints, stages, and operations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/audit.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\naudit {\n  enabled = true\n\n  filter \"default\" {\n    type       = \"HTTPEvent\"\n    endpoints  = [\"/v1/metrics\"]\n    stages     = [\"*\"]\n    operations = [\"*\"]\n  }\n\n  filter \"globbed example\" {\n    type       = \"HTTPEvent\"\n    endpoints  = [\"/v1/evaluation/*/allocations\"]\n    stages     = [\"*\"]\n    operations = [\"*\"]\n  }\n\n  filter \"OperationReceived GETs\" {\n    type       = \"HTTPEvent\"\n    endpoints  = [\"*\"]\n    stages     = [\"OperationReceived\"]\n    operations = [\"GET\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Linux Capabilities for Exec Task Driver\nDESCRIPTION: This example shows how to add and drop Linux capabilities for a task using the exec driver. It demonstrates adding specific capabilities and dropping all others.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/exec.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  cap_add = [\"net_raw\", \"sys_time\"]\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  cap_drop = [\"all\"]\n  cap_add  = [\"chown\", \"sys_chroot\", \"mknod\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying deployment status with nomad status\nDESCRIPTION: This example shows how to use the nomad status command to view the status of a specific deployment. It includes deployment ID, job details, status, and task group deployment information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/status.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad status f5506391\nID          = f5506391\nJob ID      = example\nJob Version = 0\nStatus      = successful\nDescription = Deployment completed successfully\n\nDeployed\nTask Group  Desired  Placed  Healthy  Unhealthy\ncache       1        1       1        0\n```\n\n----------------------------------------\n\nTITLE: Configuring Transparent Proxy Mode in Consul Connect\nDESCRIPTION: An example demonstrating how to enable transparent proxy mode in a Consul Connect sidecar. With transparent proxy enabled, upstreams are automatically configured based on Consul service intentions, and iptables rules are set up to route allocation traffic through the proxy.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/proxy.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nsidecar_service {\n  proxy {\n    transparent_proxy {\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Nomad E2E Test in Go\nDESCRIPTION: This snippet demonstrates how to create a basic e2e test for Nomad using the v3 testing framework. It establishes a cluster with a leader and a Linux client, then submits a sleep job and waits for deployment.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/v3/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc TestExample(t *testing.T) {\n    cluster3.Establish(t,\n        cluster3.Leader(),\n        cluster3.LinuxClients(1),\n    )\n\n    t.Run(\"testSleep\", testSleep)\n}\n\nfunc testSleep(t *testing.T) {\n    cleanup := jobs3.Submit(t, \"./input/sleep.hcl\")\n    t.Cleanup(cleanup)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollback Regions in Multiregion Deployment\nDESCRIPTION: This example demonstrates the default behavior of 'on_failure' in a multiregion deployment, showing how regions are marked as failed and potentially rolled back based on the update block configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/multiregion.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmultiregion {\n\n  strategy {\n    on_failure = \"\"\n    max_parallel = 1\n  }\n\n  region \"north\" {}\n  region \"south\" {}\n  region \"east\" {}\n  region \"west\" {}\n}\n\nupdate {\n  auto_revert = true\n}\n```\n\n----------------------------------------\n\nTITLE: Complete CSI Plugin Job Specification Example\nDESCRIPTION: Shows a complete Nomad job specification for deploying an AWS EFS CSI plugin as a system job, including constraints, Docker configuration, and plugin settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/csi_plugin.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\njob \"plugin-efs\" {\n  datacenters = [\"dc1\"]\n\n  # you can run node plugins as service jobs as well, but running\n  # as a system job ensures all nodes in the DC have a copy.\n  type = \"system\"\n\n  # only one plugin of a given type and ID should be deployed on\n  # any given client node\n  constraint {\n    operator = \"distinct_hosts\"\n    value = true\n  }\n\n  group \"nodes\" {\n    task \"plugin\" {\n      driver = \"docker\"\n\n      config {\n        image = \"amazon/aws-efs-csi-driver:v.1.3.2\"\n\n        args = [\n          \"--endpoint=unix://csi/csi.sock\",\n          \"--logtostderr\",\n          \"--v=5\",\n        ]\n\n        # all CSI node plugins will need to run as privileged tasks\n        # so they can mount volumes to the host. controller plugins\n        # do not need to be privileged.\n        privileged = true\n      }\n\n      csi_plugin {\n        id             = \"aws-efs0\"\n        type           = \"node\"\n        mount_dir      = \"/csi\"  # this path /csi matches the --endpoint\n                            # argument for the container\n        health_timeout = \"30s\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing jobs across all namespaces in a node pool\nDESCRIPTION: This example shows how to list jobs from all namespaces within the 'prod' node pool. It includes the namespace in the output along with other job details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/jobs.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node pool jobs -namespace '*' prod\nID       Namespace  Type     Priority  Status          Submit Date\njob1     default    service  80        running         07/25/17 15:47:11 UTC\njob2     default    batch    40        complete        07/24/17 19:22:11 UTC\njob3     system     service  50        dead (stopped)  07/22/17 16:34:48 UTC\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Options for a Nomad Job\nDESCRIPTION: Example of configuring UI options for a Nomad job. This snippet demonstrates how to add a description and links to the job's page in the Nomad Web UI.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/json-jobs.mdx#2025-04-19_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"Ui\": {\n  \"Description\": \"A job that uses **Nomad Variables** to modify its output\",\n  \"Links\": [\n    {\n      \"Label\": \"Learn more about Nomad Variables\",\n      \"Url\": \"https://developer.hashicorp.com/nomad/docs/concepts/variables\"\n    },\n    {\n      \"Label\": \"See this job on Github\",\n      \"Url\": \"https://github.com/hashicorp/nomad/blob/main/ui/app/utils/default_jobs/variables.js\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExecTask Function for Nomad Driver in Go\nDESCRIPTION: The ExecTask function is used by the Nomad client to execute commands inside the task execution context. It takes a taskID, cmd slice, and timeout duration as parameters, returning an ExecTaskResult pointer and an error. This function is optional and can be skipped by embedding drivers.DriverExecTaskNotSupported.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/plugins/task-drivers.mdx#2025-04-19_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nExecTask(taskID string, cmd []string, timeout time.Duration) (*ExecTaskResult, error)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Plugin Block in Nomad Agent Configuration (HCL)\nDESCRIPTION: Example of a plugin configuration block that specifies command-line arguments and configuration parameters for a plugin named 'example-plugin'. The block demonstrates how to pass flags to the plugin executable and provide structured configuration data.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/plugin.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"example-plugin\" {\n    args = [\"-my-flag\"]\n    config {\n       foo = \"bar\"\n       bam {\n         baz = 1\n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: External DNS Configuration with Transparent Proxy in Nomad HCL\nDESCRIPTION: Configuration example for transparent proxy with external DNS. This disables the default DNS redirection to Consul and excludes specific outbound ports and CIDR ranges from the proxy. In this setup, a template block would be needed to query Consul for service addresses.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/transparent_proxy.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nsidecar_service {\n  proxy {\n    transparent_proxy {\n      excluded_outbound_ports = [53]\n      excluded_outbound_cidrs = [\"208.67.222.222/32\", \"208.67.220.220/32\"]\n      no_dns                  = true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reserved Resources in Nomad Client (HCL)\nDESCRIPTION: This snippet shows how to configure reserved resources in a Nomad client. It allows allocating only a portion of the client's resources to jobs by reserving specific amounts of CPU, memory, disk, and ports.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/client.mdx#2025-04-19_snippet_17\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  enabled = true\n\n  reserved {\n    cpu            = 500\n    memory         = 512\n    disk           = 1024\n    reserved_ports = \"22,80,8500-8600\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables with Dots in Nomad Job Specification\nDESCRIPTION: Demonstrates how to properly set and reference environment variables that contain dots in their names within a Nomad job specification. Shows both valid and invalid variable name handling using HCL2 map assignment syntax and the env function for interpolation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/runtime/interpolation.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\njob \"sample\" {\n  datacenters = [\"dc1\"]\n  group \"g1\" {\n    task \"redis\" {\n\n      # Note: to set an environment variable with an invalid name, you must\n      # use the HCL2 map assignment syntax for `env`. Otherwise, the job spec\n      # parser will throw an `Argument or block definition required` error\n      env = {\n        \"invalid...name\" = \"value1\"\n        \"valid.name\"     = \"value2\"\n      }\n\n      driver = \"docker\"\n      config {\n        image  = \"redis:7\"\n        labels {\n          label1 = \"${env[\\\"invalid...name\\\"]}\"\n          label2 = \"${valid.name}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling a job with monitoring\nDESCRIPTION: Example of scheduling a job contained in 'example.nomad.hcl' file, monitoring placement and deployment.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/run.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job run example.nomad.hcl\n==> 2021-06-09T15:22:58-07:00: Monitoring evaluation \"52dee78a\"\n    2021-06-09T15:22:58-07:00: Evaluation triggered by job \"example\"\n    2021-06-09T15:22:58-07:00: Allocation \"5e0b39f0\" created: node \"3e84d3d2\", group \"group1\"\n==> 2021-06-09T15:22:59-07:00: Monitoring evaluation \"52dee78a\"\n    2021-06-09T15:22:59-07:00: Evaluation within deployment: \"62eb607c\"\n    2021-06-09T15:22:59-07:00: Allocation \"5e0b39f0\" status changed: \"pending\" -> \"running\"\n    2021-06-09T15:22:59-07:00: Evaluation status changed: \"pending\" -> \"complete\"\n==> 2021-06-09T15:22:59-07:00: Evaluation \"52dee78a\" finished with status \"complete\"\n==> 2021-06-09T15:22:59-07:00: Monitoring deployment \"62eb607c\"\n  ⠦ Deployment \"62eb607c\" in progress...\n\n    2021-06-09T15:22:59-07:00\n    ID          = 62eb607c\n    Job ID      = example\n    Job Version = 0\n    Status      = running\n    Description = Deployment is running\n\n    Deployed\n    Task Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline\n    cache       2        2       1        0          2021-06-09T15:32:58-07:00\n    web         1        1       1        0          2021-06-09T15:32:58-07:00\n```\n\n----------------------------------------\n\nTITLE: Using Variable Definition Files\nDESCRIPTION: Example showing how to use a variable definitions file with the -var-file option. This approach allows setting multiple variables in a single file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/variables.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad job run -var-file=\"testing.vars\" example.nomad.hcl\n```\n\n----------------------------------------\n\nTITLE: Configuring Daily Periodic Job in Nomad HCL\nDESCRIPTION: This example shows how to configure a periodic job to run daily using the '@daily' cron expression.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/periodic.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nperiodic {\n  cron = \"@daily\"\n}\n```\n\n----------------------------------------\n\nTITLE: Connect Sidecar with Upstream Services\nDESCRIPTION: Configuration example showing how to specify upstream services in a Connect sidecar configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/connect.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n  connect {\n     sidecar_service {\n       proxy {\n         upstreams {\n           destination_name = \"count-api\"\n           local_bind_port = 8080\n         }\n       }\n     }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Authentication with Namespaces in Nomad Job Specification\nDESCRIPTION: This job specification demonstrates how to use Vault Namespaces with Nomad workload identities. The job authenticates to Vault in the 'engineering' namespace using the 'nomad-workloads' role, and then retrieves a secret value using the template block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/vault/acl.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\njob \"vault\" {\n\n  group \"demo\" {\n    task \"task\" {\n      vault {\n        namespace = \"engineering\"\n        role      = \"nomad-workloads\"\n      }\n\n      driver = \"raw_exec\"\n      config {\n        command = \"/usr/bin/cat\"\n        args    = [\"secrets/config.txt\"]\n      }\n\n      template {\n        data        = <<EOF\n{{ with secret \"secret/foo\" }}\nSOME_VAL={{.Data.bar}}\n{{ end }}\nEOF\n        destination = \"secrets/config.txt\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Consul ACL Policy for Cross-Datacenter Service Mesh\nDESCRIPTION: HCL configuration for a Consul ACL policy that permits reading service and node metadata. Required for cross-Consul datacenter requests of Connect services registered by Nomad.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/service-mesh.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nservice_prefix \"\" { policy = \"read\" }\nnode_prefix    \"\" { policy = \"read\" }\n```\n\n----------------------------------------\n\nTITLE: Accessing Hyphenated Secret Names from Vault KV API v1 (HCL)\nDESCRIPTION: Shows how to access Vault secrets with hyphenated names from KV API v1 using index notation rather than dot notation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_21\n\nLANGUAGE: hcl\nCODE:\n```\n  template {\n    data = <<EOF\n      DB_PASSWORD = \"{{with secret \"secret/app\"}}{{index .Data \"db-password\"}}{{end}}\"\n    EOF\n  }\n```\n\n----------------------------------------\n\nTITLE: Autopilot Configuration Update Payload\nDESCRIPTION: The JSON payload for updating Autopilot configuration via PUT request. It includes all configurable parameters such as cleanup settings, thresholds, and enterprise features.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/autopilot.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CleanupDeadServers\": true,\n  \"LastContactThreshold\": \"200ms\",\n  \"MaxTrailingLogs\": 250,\n  \"ServerStabilizationTime\": \"10s\",\n  \"EnableRedundancyZones\": false,\n  \"DisableUpgradeMigration\": false,\n  \"EnableCustomUpgrades\": false,\n  \"CreateIndex\": 4,\n  \"ModifyIndex\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Quota Specifications Response\nDESCRIPTION: JSON response structure for quota specifications listing endpoint showing quota limits and configuration\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/quotas.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"CreateIndex\": 11,\n    \"Description\": \"Limit the shared default namespace\",\n    \"Hash\": \"uTIBStF55xKqUMGdI23rdP+W+hsvZ2WEfRWU11j7CzQ=\",\n    \"Limits\": [\n      {\n        \"Hash\": \"fTSnZHxUyDQcRT2Q7L3Hlu3vWpwSt0LWu7JVd3neK9k=\",\n        \"Region\": \"global\",\n        \"RegionLimit\": {\n          \"CPU\": 2500,\n          \"Cores\": 0,\n          \"Devices\": [\n            {\n              \"Affinities\": null,\n              \"Constraints\": null,\n              \"Count\": 1,\n              \"Name\": \"nvidia/gpu/Tesla M60\"\n            }\n          ],\n          \"DiskMB\": 0,\n          \"IOPS\": 0,\n          \"MemoryMB\": 2000,\n          \"MemoryMaxMB\": 2000,\n          \"NUMA\": null,\n          \"Networks\": [\n            {\n              \"CIDR\": \"\",\n              \"Device\": \"\",\n              \"DynamicPorts\": null,\n              \"IP\": \"\",\n              \"MBits\": 50,\n              \"Mode\": \"\",\n              \"ReservedPorts\": null\n            }\n          ],\n          \"SecretsMB\": 0\n        },\n        \"VariablesLimit\": 1000\n      }\n    ],\n    \"ModifyIndex\": 11,\n    \"Name\": \"default-quota\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Chroot Environment in Nomad Client (HCL)\nDESCRIPTION: Specifies a chroot environment configuration for the Nomad client, defining source and destination paths for essential system files and directories. This example sets up a minimal environment capable of running the 'ls' utility.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/client.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  chroot_env {\n    \"/bin/ls\"           = \"/bin/ls\"\n    \"/etc/ld.so.cache\"  = \"/etc/ld.so.cache\"\n    \"/etc/ld.so.conf\"   = \"/etc/ld.so.conf\"\n    \"/etc/ld.so.conf.d\" = \"/etc/ld.so.conf.d\"\n    \"/etc/passwd\"       = \"/etc/passwd\"\n    \"/lib\"              = \"/lib\"\n    \"/lib64\"            = \"/lib64\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Block in Nomad Autoscaler\nDESCRIPTION: Example configuration for a target block that sets up a scaling target plugin. It demonstrates setting the driver, arguments, and plugin-specific configuration options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/agent/target.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"example-target-plugin\" {\n  driver = \"example-target-plugin\"\n  args   = [\"-my-flag\"]\n\n  config = {\n    region = \"esp-vlc-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Consul Admin Partition Configuration\nDESCRIPTION: Shows how to configure Consul admin partitions for tasks within a group using group-level configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/consul.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n\n    consul {\n      cluster   = \"default\"\n      namespace = \"default\"\n      partition = \"prod\"\n    }\n\n    task \"web\" {\n\n      template {\n        data        = \"FRONTEND_NAME={{key \\\"fe/name\\\"}}\"\n        destination = \"local/config.txt\"\n      }\n    }\n\n    task \"app\" {\n\n      template {\n        data        = \"APP_NAME={{key \\\"app/name\\\"}}\"\n        destination = \"local/config.txt\"\n      }\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Mapping with QEMU in Nomad\nDESCRIPTION: This example demonstrates how to set up port mapping between the host and guest VM. It forwards the host port with label 'db' to the guest VM's port 6539.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/qemu.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  # Forward the host port with the label \"db\" to the guest VM's port 6539.\n  port_map {\n    db = 6539\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Task Arguments in Nomad HCL\nDESCRIPTION: Shows how to pass arguments to a Docker container, including the use of Nomad variables and environment variables.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  args = [\n    \"-bind\", \"${NOMAD_PORT_http}\",\n    \"${nomad.datacenter}\",\n    \"${MY_ENV}\",\n    \"${meta.foo}\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Namespaces with Prefix Filter in Shell\nDESCRIPTION: Makes a GET request to retrieve namespaces filtered by a prefix. This example filters for namespaces starting with 'prod'.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/namespaces.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/namespaces?prefix=prod\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Updating a Job in Nomad API\nDESCRIPTION: Example JSON payload for updating an existing job, demonstrating the use of EnforceIndex and JobModifyIndex for implementing check-and-set style updates.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"Job\": {\n    // ...\n  },\n  \"EnforceIndex\": true,\n  \"JobModifyIndex\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nomad Agent Command in Plaintext\nDESCRIPTION: This snippet shows the basic usage of the 'nomad agent' command. It's important to note that on Linux systems, client agents need to be run as root or with sudo for proper functionality of cpuset accounting and network namespaces.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/agent.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad agent [options]\n```\n\n----------------------------------------\n\nTITLE: Updating a Job using curl in Nomad API\nDESCRIPTION: Sample request for registering a new job or updating an existing job. Uses the POST method on the /v1/job/:job_id endpoint with a JSON payload.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_24\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://localhost:4646/v1/job/my-job\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Networks in Nomad Network Block\nDESCRIPTION: This HCL snippet demonstrates how to configure host networks in a Nomad network block. It specifies a bridge mode network with two ports, each assigned to different host networks for public and private traffic.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/network.mdx#2025-04-19_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nnetwork {\n  mode = \"bridge\"\n\n  # define a port to use for public https traffic\n  port \"https\" {\n    static       = 443\n    to           = 8080\n    host_network = \"public\"\n  }\n  # define a port that is only exposed to private traffic\n  port \"admin\" {\n    to           = 9000\n    host_network = \"private\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Allocation Services in Nomad\nDESCRIPTION: Demonstrates how to make an API request to retrieve services registered for a specific allocation in Nomad. Includes the curl command and a sample JSON response.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/allocations.mdx#2025-04-19_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/allocation/177160af-26f6-619f-9c9f-5e46d1104395/services\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Address\": \"127.0.0.1\",\n    \"AllocID\": \"177160af-26f6-619f-9c9f-5e46d1104395\",\n    \"CreateIndex\": 14,\n    \"Datacenter\": \"dc1\",\n    \"ID\": \"_nomad-task-177160af-26f6-619f-9c9f-5e46d1104395-redis-example-cache-redis-db\",\n    \"JobID\": \"example\",\n    \"ModifyIndex\": 24,\n    \"Namespace\": \"default\",\n    \"NodeID\": \"7406e90b-de16-d118-80fe-60d0f2730cb3\",\n    \"Port\": 29702,\n    \"ServiceName\": \"example-cache-redis\",\n    \"Tags\": [\n      \"db\",\n      \"cache\"\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Keyring Configuration in HCL\nDESCRIPTION: Basic structure for configuring a keyring block in Nomad agent configuration. Requires a type label and supports name and active parameters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/keyring/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nkeyring [TYPE] {\n  name   = \"example\"\n  active = true\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Network Block with Port Configuration in Nomad Job Specification (HCL)\nDESCRIPTION: Example of a Nomad network block configuring two dynamic ports ('http' and 'https') and one static port ('lb') with value 8889. This shows the basic structure of network configuration within a Nomad job.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/network.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    network {\n      port \"http\" {}\n      port \"https\" {}\n      port \"lb\" {\n        static = 8889\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Additional Variable Access Policy in HCL\nDESCRIPTION: This HCL snippet defines an ACL policy that grants read access to all variables in the 'shared' namespace. It can be associated with a specific task to provide additional variable access.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/variables.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nnamespace \"shared\" {\n  variables {\n    path \"*\" {\n      capabilities = [\"read\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Node Status Command Usage\nDESCRIPTION: Shows the basic syntax for using the nomad node status command. The command can be used with or without a specific node ID, where omitting the node ID enters 'list mode' to show all nodes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/status.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad node status [options] [node]\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Server for OIDC\nDESCRIPTION: This HCL snippet shows how to modify the Nomad server configuration to enable OIDC by setting the oidc_issuer attribute. This enables the HTTP endpoint that allows third parties to discover Nomad's OIDC configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/aws-oidc-provider.mdx#2025-04-19_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nserver {\n  enabled = true\n  [...]\n  oidc_issuer = \"https://<DOMAIN_NAME>\"\n  [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to All Events in Default Namespace\nDESCRIPTION: Makes a curl request to stream all events and topics in the default namespace using the Nomad Events API endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/events.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl -s -v -N http://127.0.0.1:4646/v1/event/stream\n```\n\n----------------------------------------\n\nTITLE: Configuring IIS Web Application in Nomad HCL Job Specification\nDESCRIPTION: A sample Nomad job specification that demonstrates how to configure an IIS web application task using the IIS driver. The job creates an application with subapplication and configures HTTP binding with a dynamic port allocation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/nomad-iis.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"iis-test\" {\n  datacenters = [\"dc1\"]\n  type = \"service\"\n\n  group \"iis-test\" {\n    count = 1\n\n    network {\n      port \"httplabel\" {}\n    }\n\n    task \"iis-test\" {\n      driver = \"iis\"\n\n      config {\n        application {\n          path = \"C:\\\\inetpub\\\\wwwroot\"\n        }\n        application {\n          alias = \"subapp\"\n          path = \"C:\\\\inetpub\\\\wwwroot\"\n        }\n\n        binding {\n          type = \"http\"\n          port = \"httplabel\"\n        }\n      }\n\n      env {\n        my_key = \"my-value\"\n      }\n\n      resources {\n        cpu    = 100\n        memory = 20\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Retry Behavior in Nomad HCL\nDESCRIPTION: Controls the retry behavior when an error is returned from Consul. It uses exponential back-off and retry functions to handle Consul cluster unavailability, specifying attempts, backoff time, and maximum backoff.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/client.mdx#2025-04-19_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nconsul_retry {\n  # This specifies the number of attempts to make before giving up. Each\n  # attempt adds the exponential backoff sleep time. Setting this to\n  # zero will implement an unlimited number of retries.\n  attempts = 12\n  # This is the base amount of time to sleep between retry attempts. Each\n  # retry sleeps for an exponent of 2 longer than this base. For 5 retries,\n  # the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.\n  backoff = \"250ms\"\n  # This is the maximum amount of time to sleep between retry attempts.\n  # When max_backoff is set to zero, there is no upper limit to the\n  # exponential sleep between retry attempts.\n  # If max_backoff is set to 10s and backoff is set to 1s, sleep times\n  # would be: 1s, 2s, 4s, 8s, 10s, 10s, ...\n  max_backoff = \"1m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lost After in Job Specification\nDESCRIPTION: Job specification with two groups configured with 'lost_after' set to 12 hours but with different reconciliation strategies when clients reconnect.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/disconnect.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# jobspec.nomad\n\ngroup \"first\" {\n  disconnect {\n    lost_after = \"12h\"\n    reconcile = \"best_score\"\n  }\n\n  task \"first-task\" {\n    ...\n  }\n}\n\ngroup \"second\" {\n  disconnect {\n    lost_after = \"12h\"\n    reconcile = \"keep_original\"\n  }\n\n  task \"second-task\" {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nomad Task Execution JSON Configuration\nDESCRIPTION: A JSON structure representing the state of a Nomad task execution, including task events, container ID, network configuration, and driver reattachment settings. The configuration shows a successfully started task running in a Docker container with assigned IP and Unix socket communication.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/client-state.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DisplayMessage\": \"Task started by client\",\n  \"Details\": {},\n  \"FailsTask\": false,\n  \"RestartReason\": \"\",\n  \"SetupError\": \"\",\n  \"DriverError\": \"\",\n  \"ExitCode\": 0,\n  \"Signal\": 0,\n  \"KillTimeout\": 0,\n  \"KillError\": \"\",\n  \"KillReason\": \"\",\n  \"StartDelay\": 0,\n  \"DownloadError\": \"\",\n  \"ValidationError\": \"\",\n  \"DiskLimit\": 0,\n  \"FailedSibling\": \"\",\n  \"VaultError\": \"\",\n  \"TaskSignalReason\": \"\",\n  \"TaskSignal\": \"\",\n  \"DriverMessage\": \"\",\n  \"GenericSource\": \"\"\n}\n],\n\"TaskHandle\": null\n},\n\"DriverState\": {\n\"ContainerID\": \"7d6d10ece65bd6f64095c7b1b665b3529254796d4c17866c7e6a5e16ad4727c8\",\n\"DriverNetwork\": {\n  \"AutoAdvertise\": false,\n  \"IP\": \"172.17.0.2\",\n  \"PortMap\": null\n},\n\"ReattachConfig\": {\n  \"Addr\": \"/tmp/plugin1827627390\",\n  \"Network\": \"unix\",\n  \"Pid\": 97706,\n  \"Protocol\": \"grpc\"\n}\n}\n}\n}\n}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Binary on the Node with Exec Task Driver\nDESCRIPTION: This example demonstrates how to run a binary that is present on the node using the exec task driver. It specifies an absolute path for the command.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/exec.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"example\" {\n  driver = \"exec\"\n\n  config {\n    # When running a binary that exists on the host, the path must be absolute.\n    command = \"/bin/sleep\"\n    args    = [\"1\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Nomad Service Logs\nDESCRIPTION: This snippet demonstrates how to view the Nomad service logs using journalctl on Linux. This is useful for reading the metrics printed after sending a SIGUSR1 signal.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/nomad-agent.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ journalctl -u nomad\n```\n\n----------------------------------------\n\nTITLE: Querying Nomad Client State with jq\nDESCRIPTION: This example shows how to use the 'nomad operator client-state' command and pipe its output to jq for better JSON formatting and filtering. This allows users to inspect detailed allocation information such as job specifications, resource usage, network configuration, and task configurations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/client-state.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator client-state | jq\n```\n\n----------------------------------------\n\nTITLE: Configuring Mesh Gateway in Source Datacenter (DC1)\nDESCRIPTION: Nomad job configuration for datacenter 'one' that sets up a mesh gateway and dashboard service that connects to an API in another datacenter. Includes bridge network configuration and Connect sidecar service with mesh gateway upstream configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/gateway.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\njob \"countdash-mesh-one\" {\n  datacenters = [\"one\"]\n\n  group \"mesh-gateway-one\" {\n    network {\n      mode = \"bridge\"\n\n      # A mesh gateway will require a host_network configured on at least one\n      # Nomad client that can establish cross-datacenter connections. Nomad will\n      # automatically schedule the mesh gateway task on compatible Nomad clients.\n      port \"mesh_wan\" {\n        host_network = \"public\"\n      }\n    }\n\n    service {\n      name = \"mesh-gateway\"\n\n      # The mesh gateway connect service should be configured to use a port from\n      # the host_network capable of cross-datacenter connections.\n      port = \"mesh_wan\"\n\n      connect {\n        gateway {\n          mesh {\n            # No configuration options in the mesh block.\n          }\n\n          # Consul gateway [envoy] proxy options.\n          proxy {\n            # The following options are automatically set by Nomad if not explicitly\n            # configured with using bridge networking.\n            #\n            # envoy_gateway_no_default_bind = true\n            # envoy_gateway_bind_addresses \"lan\" {\n            #   address = \"0.0.0.0\"\n            #   port    = <generated dynamic port>\n            # }\n            # envoy_gateway_bind_addresses \"wan\" {\n            #   address = \"0.0.0.0\"\n            #   port    = <configured service port>\n            # }\n            # Additional options are documented at\n            # https://developer.hashicorp.com/nomad/docs/job-specification/gateway#proxy-parameters\n          }\n        }\n      }\n    }\n  }\n\n  group \"dashboard\" {\n    network {\n      mode = \"bridge\"\n\n      port \"http\" {\n        static = 9002\n        to     = 9002\n      }\n    }\n\n    service {\n      name = \"count-dashboard\"\n      port = \"9002\"\n\n      connect {\n        sidecar_service {\n          proxy {\n            upstreams {\n              destination_name = \"count-api\"\n              local_bind_port  = 8080\n\n              # This dashboard service is running in datacenter \"one\", and will\n              # make requests to the \"count-api\" service running in datacenter\n              # \"two\", by going through the mesh gateway in each datacenter.\n              datacenter       = \"two\"\n\n              mesh_gateway {\n                # Using \"local\" mode indicates requests should exit this datacenter\n                # through the mesh gateway, and enter the destination datacenter\n                # through a mesh gateway in that datacenter.\n                # Using \"remote\" mode indicates requests should bypass the local\n                # mesh gateway, instead directly connecting to the mesh gateway\n                # in the destination datacenter.\n                mode = \"local\"\n              }\n            }\n          }\n        }\n      }\n    }\n\n    task \"dashboard\" {\n      driver = \"docker\"\n\n      env {\n        COUNTING_SERVICE_URL = \"http://${NOMAD_UPSTREAM_ADDR_count_api}\"\n      }\n\n      config {\n        image = \"hashicorpdev/counter-dashboard:v3\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Job - JSON Payload\nDESCRIPTION: Example job definition payload for creating a Redis cache service\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Job\": {\n    \"Datacenters\": [\"dc1\"],\n    \"ID\": \"cache\",\n    \"NodePool\": \"prod\",\n    \"TaskGroups\": [\n      {\n        \"Name\": \"cache\",\n        \"Networks\": [\n          {\n            \"DynamicPorts\": [\n              {\n                \"Label\": \"db\",\n                \"To\": 6379\n              }\n            ]\n          }\n        ],\n        \"Services\": [\n          {\n            \"Name\": \"redis-cache\",\n            \"PortLabel\": \"db\"\n          }\n        ],\n        \"Tasks\": [\n          {\n            \"Config\": {\n              \"image\": \"redis:7\",\n              \"ports\": [\"db\"]\n            },\n            \"Driver\": \"docker\",\n            \"Name\": \"redis\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling drain mode with detached monitoring\nDESCRIPTION: This example demonstrates how to enable drain mode, detach from monitoring, and then reattach later for continued monitoring.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/drain.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node drain -enable -detach -self\n...\n$ nomad node drain -self -monitor\n...\n```\n\n----------------------------------------\n\nTITLE: Promoting canaries in a specific group\nDESCRIPTION: This example demonstrates how to promote canaries in a particular group (cache) of a job named 'example'. It shows the command execution and the resulting job status output.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/promote.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n# Have two task groups waiting for promotion.\n$ nomad status example\nID            = example\nName          = example\nSubmit Date   = 07/25/17 18:37:14 UTC\nType          = service\nPriority      = 50\nDatacenters   = dc1\nStatus        = running\nPeriodic      = false\nParameterized = false\n\nSummary\nTask Group  Queued  Starting  Running  Failed  Complete  Lost\ncache       0       0         3        0       0         0\nweb         0       0         3        0       0         0\n\nLatest Deployment\nID          = a6b87a6c\nStatus      = running\nDescription = Deployment is running but requires manual promotion\n\nDeployed\nTask Group  Promoted  Desired  Canaries  Placed  Healthy  Unhealthy\ncache       false     2        1         1       1        0\nweb         false     2        1         1       1        0\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created At\n3071ab8f  6240eed6  web         1        run      running  07/25/17 18:37:14 UTC\neeeed13b  6240eed6  cache       1        run      running  07/25/17 18:37:14 UTC\n0ee7800c  6240eed6  cache       0        run      running  07/25/17 18:37:08 UTC\na714a926  6240eed6  cache       0        run      running  07/25/17 18:37:08 UTC\ncee52788  6240eed6  web         0        run      running  07/25/17 18:37:08 UTC\nee8f972e  6240eed6  web         0        run      running  07/25/17 18:37:08 UTC\n\n# Promote only the cache canaries\n$ nomad job promote -group=cache example\n==> Monitoring evaluation \"37383564\"\n    Evaluation triggered by job \"example\"\n    Evaluation within deployment: \"a6b87a6c\"\n    Allocation \"bbddf5c3\" created: node \"6240eed6\", group \"cache\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"37383564\" finished with status \"complete\"\n\n# Inspect the status and see that only the cache canaries are promoted\n$ nomad status example\nID            = example\nName          = example\nSubmit Date   = 07/25/17 18:37:14 UTC\nType          = service\nPriority      = 50\nDatacenters   = dc1\nStatus        = running\nPeriodic      = false\nParameterized = false\n\nSummary\nTask Group  Queued  Starting  Running  Failed  Complete  Lost\ncache       0       0         2        0       2         0\nweb         0       0         3        0       0         0\n\nLatest Deployment\nID          = a6b87a6c\nStatus      = running\nDescription = Deployment is running but requires manual promotion\n\nDeployed\nTask Group  Promoted  Desired  Canaries  Placed  Healthy  Unhealthy\nweb         false     2        1         1       1        0\ncache       true      2        1         2       2        0\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status    Created At\nbbddf5c3  6240eed6  cache       1        run      running   07/25/17 18:37:40 UTC\neeeed13b  6240eed6  cache       1        run      running   07/25/17 18:37:14 UTC\n3071ab8f  6240eed6  web         1        run      running   07/25/17 18:37:14 UTC\na714a926  6240eed6  cache       0        stop     complete  07/25/17 18:37:08 UTC\ncee52788  6240eed6  web         0        run      running   07/25/17 18:37:08 UTC\nee8f972e  6240eed6  web         0        run      running   07/25/17 18:37:08 UTC\n0ee7800c  6240eed6  cache       0        stop     complete  07/25/17 18:37:08 UTC\n```\n\n----------------------------------------\n\nTITLE: Docker Volume Driver Configuration in Nomad\nDESCRIPTION: Example showing how to configure named volumes with a specific volume driver in Docker.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  volumes = [\n    # Use named volume created outside nomad.\n    \"name-of-the-volume:/path/in/container\"\n  ]\n  # Name of the Docker Volume Driver used by the container\n  volume_driver = \"pxd\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Jail Task in Nomad HCL\nDESCRIPTION: This snippet demonstrates how to configure a Jail task in a Nomad job specification. It includes settings for the jail path, IP address, execution parameters, and resource controls.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/jail-task-driver.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"http-echo-jail\" {\n\t\tdriver = \"jail-task-driver\"\n\t\tconfig {\n\t\t\tPath  = \"/zroot/iocage/jails/myjail/root\"\n\t\t\tAllow_raw_sockets = true\n\t\t\tAllow_chflags     = true\n\t\t\tIp4_addr          = \"em1|192.168.1.102\"\n\t\t\tExec_start        = \"/usr/local/bin/http-echo -listen :9999 -text hello\"\n\t\t\tRctl =  {\n\t\t\t\tVmemoryuse = {\n\t\t\t\t\tAction = \"deny\"\n\t\t\t\t\tAmount = \"1G\"\n\t\t\t\t\tPer = \"process\"\n\t\t\t\t}\n\t\t\t\tOpenfiles = {\n\t\t\t\t\tAction = \"deny\"\n\t\t\t\t\tAmount = \"500\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Static Port Configuration in Nomad Network Block (HCL)\nDESCRIPTION: Example of configuring a static port in Nomad's network block. Static ports reserve a specific port number (6539 in this case) and place the job on a host where this port is available.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/network.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nnetwork {\n  port \"lb\" {\n    static = 6539\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Arguments for Podman Container\nDESCRIPTION: Defines a list of arguments to be passed to the container command. If no command is specified, these arguments are passed directly to the container.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  args = [\n    \"arg1\",\n    \"arg2\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad UI Access ACL Policy\nDESCRIPTION: Basic ACL policy configuration required for users to access the Nomad web UI. Grants read permissions for node and agent endpoints which are essential for most UI functionality.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/acl-policy.mdx#2025-04-19_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nnode {\n  policy = \"read\"\n}\n\nagent {\n  policy = \"read\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Nomad Logs Rotation Configuration\nDESCRIPTION: Example showing customized log rotation settings with 3 rotated files and 5MB maximum file size for both stdout and stderr streams.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/logs.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nlogs {\n  max_files     = 3\n  max_file_size = 5\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a job using check-index\nDESCRIPTION: Example of updating a job using the '-check-index' option to ensure the job is being updated from a known state.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/run.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job run -check-index 5 example.nomad.hcl\nEnforcing job modify index 5: job exists with conflicting job modify index: 6\nJob not updated\n\n$ nomad job run -check-index 6 example.nomad.hcl\n==> 2021-06-09T16:57:29-07:00: Monitoring evaluation \"5ef16dff\"\n    2021-06-09T16:57:29-07:00: Evaluation triggered by job \"example\"\n    2021-06-09T16:57:29-07:00: Allocation \"6ec7d16f\" modified: node \"6e1f9bf6\", group \"cache\"\n==> 2021-06-09T16:57:30-07:00: Monitoring evaluation \"5ef16dff\"\n    2021-06-09T16:57:30-07:00: Evaluation within deployment: \"62eb607c\"\n    2021-06-09T16:57:30-07:00: Evaluation status changed: \"pending\" -> \"complete\"\n==> 2021-06-09T16:57:30-07:00: Evaluation \"5ef16dff\" finished with status \"complete\"\n==> 2021-06-09T16:57:30-07:00: Monitoring deployment \"62eb607c\"\n  ✓ Deployment \"62eb607c\" successful\n\n    2021-06-09T16:57:30-07:00\n    ID          = 62eb607c\n    Job ID      = example\n    Job Version = 2\n    Status      = successful\n    Description = Deployment completed successfully\n\n    Deployed\n    Task Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline\n    cache       1        1       1        0          2021-06-09T17:07:00-07:00\n```\n\n----------------------------------------\n\nTITLE: Exploring Allocation Filesystem with Nomad CLI\nDESCRIPTION: Demonstrates the use of the 'nomad alloc fs' command to inspect the allocation filesystem structure. This shows how to view the contents of the allocation, shared, and task-specific directories.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/filesystem.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad alloc fs c0b2245f\nMode        Size     Modified Time         Name\ndrwxrwxrwx  4.0 KiB  2020-10-27T18:00:39Z  alloc/\ndrwxrwxrwx  4.0 KiB  2020-10-27T18:00:32Z  task1/\ndrwxrwxrwx  4.0 KiB  2020-10-27T18:00:39Z  task2/\n\n$ nomad alloc fs c0b2245f alloc/\nMode        Size     Modified Time         Name\ndrwxrwxrwx  4.0 KiB  2020-10-27T18:00:32Z  data/\ndrwxrwxrwx  4.0 KiB  2020-10-27T18:00:39Z  logs/\ndrwxrwxrwx  4.0 KiB  2020-10-27T18:00:32Z  tmp/\n\n$ nomad alloc fs c0b2245f task1/\nMode         Size     Modified Time         Name\ndrwxrwxrwx   4.0 KiB  2020-10-27T18:00:33Z  local/\ndrwxrwxrwx   60 B     2020-10-27T18:00:32Z  private/\ndrwxrwxrwx   60 B     2020-10-27T18:00:32Z  secrets/\ndtrwxrwxrwx  4.0 KiB  2020-10-27T18:00:32Z  tmp/\n```\n\n----------------------------------------\n\nTITLE: OIDC Configuration JSON with Client Assertion\nDESCRIPTION: This JSON configuration example demonstrates how to set up an OIDC-based ACL Auth Method using a private key JWT client assertion instead of a client secret. It includes settings for discovery URL, client ID, client assertion, bound audiences, redirect URIs, and claim mappings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/auth-method/create.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"OIDCDiscoveryURL\": \"https://my-keycloak-instance.com/realms/nomad\",\n  \"OIDCClientID\": \"my-great-client-id\",\n  \"OIDCClientAssertion\": {\n    \"KeySource\": \"nomad\"\n  },\n  \"BoundAudiences\": [\n    \"my-great-client-id\"\n  ],\n  \"AllowedRedirectURIs\": [\n    \"http://localhost:4646/oidc/callback\"\n  ],\n  \"ListClaimMappings\": {\n    \"groups\": \"groups\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using For Expressions with Lists in HCL\nDESCRIPTION: Example of using a for expression to transform a list of strings to uppercase. This iterates over each element in var.list and applies the upper() function.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/expressions.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n[for s in var.list : upper(s)]\n```\n\n----------------------------------------\n\nTITLE: Configuring StatsD Address in HCL\nDESCRIPTION: An example of how to specify the address of a StatsD server for forwarding metrics in the telemetry block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/telemetry.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ntelemetry {\n  statsd_address = \"statsd.company.local:8125\"\n}\n```\n\n----------------------------------------\n\nTITLE: Nomad ACL Policy for Azure VMSS Plugin in HCL\nDESCRIPTION: ACL policy definition required for the azure-vmss plugin to function properly in a Nomad cluster with ACLs enabled. This grants write permissions on nodes, allowing the plugin to manage node lifecycle.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/target/azure-vmss.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nnode {\n  policy = \"write\"\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Vault Setup Example for Nomad Workload Identity\nDESCRIPTION: A complete example showing an interactive session of configuring Vault for use with Nomad workload identities, including namespace creation, JWT auth method setup, and policy creation. The example also demonstrates using the -destroy flag to clean up configurations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/setup/vault.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad setup vault\n\nThis command will walk you through configuring all the components required for\nNomad workloads to authenticate themselves against Vault ACL using their\nrespective workload identities.\n\nFirst we need to connect to Vault.\n\n[?] Is \"http://127.0.0.1:8200\" the correct address of your Vault cluster? [Y/n]\n\nSince you're running Vault Enterprise, we will additionally create\na namespace \"nomad-workloads\" and create all configuration within that namespace.\n\n[?] Create the namespace \"nomad-workloads\" in your Vault cluster? [Y/n]\n[✔] Created namespace \"nomad-workloads\".\n\nWe will now enable the JWT credential backend and create a JWT auth method that\nNomad workloads will use.\n\nThis is the method configuration:\n\n{\n    \"default_role\": \"nomad-workloads\",\n    \"jwks_url\": \"http://localhost:4646/.well-known/jwks.json\",\n    \"jwt_supported_algs\": [\n        \"EdDSA\",\n        \"RS256\"\n    ]\n}\n[?] Create JWT auth method in your Vault cluster? [Y/n]\n[✔] Created JWT auth method \"jwt-nomad\".\n\nWe need to create a role that Nomad workloads will assume while authenticating,\nand a policy associated with that role.\n\n\nThese are the rules for the policy \"nomad-workloads\" that we will create. It uses a templated\npolicy to allow Nomad tasks to access secrets in the path\n\"secrets/data/<job namespace>/<job name>\":\n\npath \"secret/data/{{identity.entity.aliases.auth_jwt_1b8dcc32.metadata.nomad_namespace}}/{{identity.entity.aliases.auth_jwt_1b8dcc32.metadata.nomad_job_id}}/*\" {\n  capabilities = [\"read\"]\n}\n\npath \"secret/data/{{identity.entity.aliases.auth_jwt_1b8dcc32.metadata.nomad_namespace}}/{{identity.entity.aliases.auth_jwt_1b8dcc32.metadata.nomad_job_id}}\" {\n  capabilities = [\"read\"]\n}\n\npath \"secret/metadata/{{identity.entity.aliases.auth_jwt_1b8dcc32.metadata.nomad_namespace}}/*\" {\n  capabilities = [\"list\"]\n}\n\npath \"secret/metadata/*\" {\n  capabilities = [\"list\"]\n}\n\n[?] Create the above policy in your Vault cluster? [Y/n]\n[✔] Created policy \"nomad-workloads\".\n\nWe will now create an ACL role called \"nomad-workloads\" associated with the policy above.\n\n{\n    \"bound_audiences\": \"vault.io\",\n    \"claim_mappings\": {\n        \"nomad_job_id\": \"nomad_job_id\",\n        \"nomad_namespace\": \"nomad_namespace\",\n        \"nomad_task\": \"nomad_task\"\n    },\n    \"role_type\": \"jwt\",\n    \"token_period\": \"30m\",\n    \"token_policies\": [\n        \"nomad-workloads\"\n    ],\n    \"token_type\": \"service\",\n    \"user_claim\": \"/nomad_job_id\",\n    \"user_claim_json_pointer\": true\n}\n[?] Create role in your Vault cluster? [Y/n] n\n\nBy answering \"no\" to any of these questions, you are risking an incorrect Vault\ncluster configuration. Nomad workloads with Workload Identity will not be able\nto authenticate unless you create missing configuration yourself.\n\n[?] Remove everything this command creates? [Y/n]\nThe following items will be deleted:\n  * Policy: \"nomad-workloads\"\n  * JWT auth method: \"jwt-nomad\"\n  * Namespace: \"nomad-workloads\"\n\n[?] Remove all the items listed above? [Y/n]\n[✔] Deleted policy \"nomad-workloads\".\n[✔] Disabled JWT auth method \"jwt-nomad\".\n[✔] Deleted namespace \"nomad-workloads\".\n\nVault cluster has not been configured for authenticating Nomad tasks and\nservices using workload identities.\n\nRun the command again to finish the configuration process.\n```\n\n----------------------------------------\n\nTITLE: Defining Scaling Policy Checks in Nomad HCL\nDESCRIPTION: This snippet demonstrates how to define multiple checks within a scaling policy. It includes examples of different check types using Prometheus as a data source and applying various strategies such as target-value and threshold.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/concepts/policy-eval/checks.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\npolicy {\n  # ...\n  check \"cpu_allocated_percentage\" {\n    source = \"prometheus\"\n    query  = \"...\"\n\n    strategy \"target-value\" {\n      target = 70\n    }\n  }\n\n  check \"high-memory-usage\" {\n    source = \"prometheus\"\n    query  = \"...\"\n    group  = \"memory-usage\"\n\n    strategy \"threshold\" {\n      upper_bound = 100\n      lower_bound = 70\n      delta       = 1\n    }\n  }\n\n  check \"low-memory-usage\" {\n    source = \"prometheus\"\n    query  = \"...\"\n    group  = \"memory-usage\"\n\n    strategy \"threshold\" {\n      upper_bound = 30\n      lower_bound = 0\n      delta       = -1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prometheus Check in Policy Configuration\nDESCRIPTION: Example of how to configure a check in a policy that uses the Prometheus APM plugin to query metrics. Defines the source as 'prometheus' and specifies a query to retrieve HAProxy session metrics.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/apm/prometheus.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ncheck {\n  source = \"prometheus\"\n  query  = \"avg((haproxy_server_current_sessions{backend=\\\"http_back\\\"}))\"\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: check_restart Limit Configuration\nDESCRIPTION: Example showing the limit parameter configuration in a check_restart block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/check_restart.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ncheck_restart {\n  limit = 3\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Configuration Files with CLI\nDESCRIPTION: A shell command demonstrating how to start the Nomad Autoscaler agent with multiple configuration sources. It loads from a single file, a directory of files, and an additional JSON file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/agent.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad-autoscaler agent -config=autoscaler.hcl -config=/etc/nomad-autoscaler -config=extra.json\n```\n\n----------------------------------------\n\nTITLE: Displaying job status with nomad status\nDESCRIPTION: This example shows how to use the nomad status command to display detailed information about a job named 'example'. It includes job details, summary, latest deployment status, and allocation information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/status.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad status example\nID            = example\nName          = example\nSubmit Date   = 08/28/17 23:01:39 UTC\nType          = service\nPriority      = 50\nDatacenters   = dc1\nStatus        = running\nPeriodic      = false\nParameterized = false\n\nSummary\nTask Group  Queued  Starting  Running  Failed  Complete  Lost\ncache       0       0         1        0       0         0\n\nLatest Deployment\nID          = f5506391\nStatus      = running\nDescription = Deployment is running\n\nDeployed\nTask Group  Desired  Placed  Healthy  Unhealthy\ncache       1        1       0        0\n\nActions\nAction Name     Task Group  Task\nmy-action       cache       my-task\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created At\ne1d14a39  f9dabe93  cache       0        run      running  08/28/17 23:01:39 UTC\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Node Metric Query in HCL\nDESCRIPTION: This snippet shows how to configure a check in the policy to query Nomad for client node metrics. It uses the 'percentage-allocated_cpu' query and specifies a node class for targeting.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/apm/nomad.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\npolicy {\n  # ...\n  check {\n    source = \"nomad-apm\"\n    query  = \"percentage-allocated_cpu\"\n    # ...\n  }\n\n  target \"...\" {\n    # ...\n    node_class = \"autoscale\"\n    # ..\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Maps with For Expressions in HCL\nDESCRIPTION: Example of using a for expression with curly braces to create an object/map. This creates key-value pairs where original list elements become keys and uppercase versions become values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/expressions.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n{for s in var.list : s => upper(s)}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Local Values in HCL Configuration\nDESCRIPTION: This example demonstrates how to define local values in a 'locals' block and reference them elsewhere in the configuration. It shows computed values, conditional expressions, and type conversion, along with how to reference these local values using the 'local.' prefix.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/locals.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# A computed default name prefix\nlocals {\n  default_name_prefix = \"${var.project_name}-web\"\n  name_prefix         = \"${var.name_prefix != \"\" ? var.name_prefix : local.default_name_prefix}\"\n\n  # unlike variables, locals don't have type constraints, so if you use\n  # functions that take maps but not objects, you may need to convert them\n  number_of_ports = length(convert({\"www\" = \"80\"}, map(string)))\n}\n\n# Local values can be interpolated elsewhere using the \"local.\" prefix.\njob \"example_loadbalancer\" {\n  name = \"${local.name_prefix}_loadbalancer\"\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad Config Command in CLI\nDESCRIPTION: This snippet demonstrates the basic usage syntax for the 'nomad config' command in the command-line interface. It shows how to use subcommands and access help for specific subcommands.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/config/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nUsage: `nomad config <subcommand> [options]`\n\nRun `nomad config <subcommand> -h` for help on that subcommand. The\nfollowing subcommands are available:\n\n- [`config validate`][validate] - Validate configuration files\n\n[validate]: /nomad/docs/commands/config/validate 'Validate configuration files'\n```\n\n----------------------------------------\n\nTITLE: Reading Single Allocation\nDESCRIPTION: Retrieves details for a specific allocation using its UUID\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/allocations.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/allocation/5456bd7a-9fc0-c0dd-6131-cbee77f57577\n```\n\n----------------------------------------\n\nTITLE: Configuring Pot Task Driver in Nomad Job Specification (HCL)\nDESCRIPTION: This snippet demonstrates how to configure a Nomad job to use the Pot task driver. It includes settings for image, network, port mapping, file copying, mounting, and extra hosts.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/pot.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"nginx-pot\" {\n    driver = \"pot\"\n\n    config {\n      image = \"https://pot-registry.zapto.org/registry/\"\n      pot = \"FBSD120-nginx\"\n      tag = \"1.0\"\n      command = \"nginx\"\n      args = [\n        \"-g 'daemon off;'\"\n      ]\n      network_mode = \"public-bridge\"\n      port_map = {\n        http = \"80\"\n      }\n      copy = [\n        \"/root/index.html:/usr/local/www/nginx-dist/index.html\",\n        \"/root/nginx.conf:/usr/local/etc/nginx/nginx.conf\"\n      ]\n      mount = [\n        \"/tmp/test:/root/test\",\n      ]\n      mount_read_only = [\n        \"/tmp/test2:/root/test2\"\n      ]\n      extra_hosts = [\n        \"artifactory.yourdomain.com:192.168.0.1\",\n        \"mail.yourdomain.com:192.168.0.2\"\n      ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Hetzner Cloud Auto-join Configuration with go-netaddrs in HCL\nDESCRIPTION: A server_join configuration using go-netaddrs to discover and join Nomad servers in Hetzner Cloud. This uses the hcloud CLI to find servers tagged as 'nomad-server=true'.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/server_join.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nserver_join {\n  retry_join = [ \"exec=hcloud server list -o noheader -o columns=ipv4 -l nomad-server=true | tr '\\n' ' '\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NUMA Affinity with 'require' Option in Nomad HCL\nDESCRIPTION: Strict NUMA configuration that forces the scheduler to allocate CPU cores from the same NUMA node. If suitable cores can't be found on a single NUMA node, the client is marked as exhausted for 'numa-cores' resource.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/cpu.mdx#2025-04-19_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\nresources {\n  cores = 4\n  numa {\n    affinity = \"require\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex ACL Policy for Variable Access in HCL\nDESCRIPTION: This HCL snippet demonstrates a more complex ACL policy for variable access. It includes rules for multiple paths, showing how specific path rules can override more general ones.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/variables.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nnamespace \"*\" {\n  variables {\n    path \"nomad/jobs\" {\n      capabilities = [\"list\"]\n    }\n\n    path \"nomad/jobs/*\" {\n      capabilities = [\"deny\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing CSI volumes with verbose information\nDESCRIPTION: Example of listing CSI volumes with the verbose flag, which includes additional information from the storage provider such as external IDs and condition status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/status.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume -type csi status -verbose\nID            Name      Namespace  Plugin ID  Schedulable  Access Mode\nebs_prod_db1  database  default    ebs-prod   true         single-node-writer\n\nExternal ID   Condition                         Nodes\nvol-abcedf    OK                                i-abc123f2,i-14a12df13\nvol-cd46df    Abnormal (provider message here)  i-14a12df13\n```\n\n----------------------------------------\n\nTITLE: Optional Token Configuration Parameters\nDESCRIPTION: Parameters for customizing token behavior including naming format, TTL, and default status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/partials/api-docs/auth-method-params.mdx#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `TokenNameFormat` `(string <optional>)` - Defines the token name format for\nthe generated tokens This can be lightly templated using HIL `${foo}` syntax.\nDefaults to `${auth_method_type}-${auth_method_name}`.\n\n - `MaxTokenTTL` `(duration: <required>)` - Defines the maximum life of a token\ncreated by this method. When set, it will initialize the `ExpirationTime` field\non all tokens to a value of `Token.CreateTime + AuthMethod.MaxTokenTTL`. This\nfield is not persisted beyond its initial use. Can be specified in the form of\n`\"60s\"` or `\"5m\"` (i.e., 60 seconds or 5 minutes, respectively).\n\n- `Default` `(bool: false)` - Defines whether this ACL Auth Method is to be\nset as default when running `nomad login` command.\n```\n\n----------------------------------------\n\nTITLE: Restoring Snapshot using cURL in Shell\nDESCRIPTION: This snippet shows how to use cURL to restore a Nomad server state from a previously generated snapshot. The snapshot file 'snapshot.tgz' is sent as binary data in the request body to the restore endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/snapshot.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request PUT \\\n    --data-binary @snapshot.tgz \\\n    http://127.0.0.1:4646/v1/operator/snapshot\n```\n\n----------------------------------------\n\nTITLE: Monitoring Nomad Evaluation Example\nDESCRIPTION: Shows how to monitor an evaluation in real-time using the -monitor flag, displaying status changes and allocation creation events.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/eval/status.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad eval status -monitor 8262bc83\n==> Monitoring evaluation \"8262bc83\"\n    Allocation \"bd6bd0de\" created: node \"6f299da5\", group \"group1\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"8262bc83\" finished with status \"complete\"\n```\n\n----------------------------------------\n\nTITLE: Full Status of Periodic Nomad Job\nDESCRIPTION: Shows complete status information for a periodic job including next launch time and children job summary.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/status.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job status example\nID                   = example\nName                 = example\nSubmit Date          = 07/25/17 15:59:52 UTC\nType                 = batch\nPriority             = 50\nDatacenters          = dc1\nStatus               = running\nPeriodic             = true\nParameterized        = false\nNext Periodic Launch = 07/25/17 16:00:30 UTC (5s from now)\n\nChildren Job Summary\nPending  Running  Dead\n0        3        0\n\nPreviously Launched Jobs\nID                           Status\nexample/periodic-1500998400  running\nexample/periodic-1500998410  running\nexample/periodic-1500998420  running\n```\n\n----------------------------------------\n\nTITLE: Sample Scheduler Configuration Response\nDESCRIPTION: Example JSON response containing the current scheduler configuration including preemption settings, scheduler algorithm, and memory oversubscription settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/scheduler.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Index\": 5,\n  \"KnownLeader\": true,\n  \"LastContact\": 0,\n  \"NextToken\": \"\",\n  \"SchedulerConfig\": {\n    \"CreateIndex\": 5,\n    \"MemoryOversubscriptionEnabled\": false,\n    \"ModifyIndex\": 5,\n    \"PauseEvalBroker\": false,\n    \"PreemptionConfig\": {\n      \"BatchSchedulerEnabled\": false,\n      \"ServiceSchedulerEnabled\": false,\n      \"SysBatchSchedulerEnabled\": false,\n      \"SystemSchedulerEnabled\": true\n    },\n    \"RejectJobRegistration\": false,\n    \"SchedulerAlgorithm\": \"binpack\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS ASG Target Plugin in HCL\nDESCRIPTION: This HCL snippet demonstrates how to configure the AWS ASG target plugin in the Nomad agent configuration. It includes AWS region and credentials settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/target/aws-asg.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"aws-asg\" {\n  driver = \"aws-asg\"\n  config = {\n    aws_region            = \"eu-west-3\"\n    aws_access_key_id     = \"AKIAIOSFODNN7EXAMPLE\"\n    aws_secret_access_key = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Special Characters in Nomad Templates (HCL)\nDESCRIPTION: This snippet demonstrates how to use the toJSON function to properly handle special characters in secrets or certificates within Nomad templates.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nCERT_PEM={{ file \"path/to/cert.pem\" | toJSON }}\n```\n\nLANGUAGE: hcl\nCODE:\n```\n{{ with secret \"secrets/data/application/backend\" }}\nDB_PASSWD={{ .Data.data.DB_PASSWD | toJSON }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Server for Nomad Integration\nDESCRIPTION: Sets up Vault configuration including environment variables, policy writing, role creation, and token generation for Nomad server access.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/dev/vault/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport VAULT_ADDR='http://127.0.0.1:8200'\nvault policy write nomad-server nomad-server-policy.hcl\nvault write /auth/token/roles/nomad-cluster @nomad-cluster-role.json\nvault token create -policy nomad-server -period 72h -orphan\n```\n\n----------------------------------------\n\nTITLE: Creating a Nomad variable with key-value pair\nDESCRIPTION: Demonstrates how to create a Nomad variable at the path 'secret/creds' with a key 'passcode' and its corresponding value.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/put.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad var put secret/creds passcode=my-long-passcode\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Client-to-Server IPv6 Communication (HCL)\nDESCRIPTION: These snippets demonstrate two methods to configure client-to-server communication in Nomad using IPv6 addresses. The first uses the servers parameter, while the second uses the server_join block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/ipv6-support.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  enabled = true\n  servers = [\"[2001:db8::1]\", \"[2001:db8::2]\", \"[2001:db8::3]\"]\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  enabled = true\n  server_join {\n    retry_join = [\"[2001:db8::1]\", \"[2001:db8::2]\", \"[2001:db8::3]\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CPU Environment Variables Example\nDESCRIPTION: Example of environment variables that Nomad sets in a task's runtime environment to inform the task about available CPU resources.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/cpu.mdx#2025-04-19_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nNOMAD_CPU_CORES=3-5\nNOMAD_CPU_LIMIT=9000\n```\n\n----------------------------------------\n\nTITLE: Consul ACL Policy for Nomad Servers (HCL)\nDESCRIPTION: This Consul ACL policy represents the minimal permissions required for Nomad servers. It includes read and write permissions for various Consul resources.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/consul.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nagent_prefix \"\" {\n  policy = \"read\"\n}\n\nnode_prefix \"\" {\n  policy = \"write\"\n}\n\nservice_prefix \"\" {\n  policy = \"write\"\n}\n\nacl  = \"write\"\nmesh = \"write\"\n```\n\n----------------------------------------\n\nTITLE: Example Consul Service Intention Configuration in HCL\nDESCRIPTION: A Consul service intention configuration that allows a downstream service (count-dashboard) to connect to an upstream service (count-api). This works with transparent proxy to enable service-to-service communication.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/transparent_proxy.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nKind = \"service-intentions\"\nName = \"count-api\"\nSources = [\n  {\n    Name   = \"count-dashboard\"\n    Action = \"allow\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Distinct Property Constraint Examples\nDESCRIPTION: Demonstrates both verbose and compact syntax for distinct_property constraints to ensure distribution across properties like rack identifiers.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/constraint.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nconstraint {\n  operator  = \"distinct_property\"\n  attribute = \"${meta.rack}\"\n  value     = \"3\"\n}\n\nconstraint {\n  distinct_property = \"${meta.rack}\"\n  value             = \"3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stats Function in Go for Nomad Device Plugin\nDESCRIPTION: The Stats function returns a channel on which the plugin emits device statistics at specified intervals. It continues until an error occurs or the context is cancelled. It allows for dimensioned statistics to be returned for each device in a device group.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/plugins/devices.mdx#2025-04-19_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n\"Stats(context.Context, time.Duration) (<-chan *StatsResponse, error)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Nomad Tasks\nDESCRIPTION: Demonstrates how to set environment variables for a Nomad task using the Env key. This example shows how to use Nomad variables for interpolation in environment variable values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/json-jobs.mdx#2025-04-19_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Env\": {\n    \"NODE_CLASS\": \"${nomad.class}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Remote Nomad Server Example\nDESCRIPTION: Example showing how to join a local Nomad server to a remote server at IP address 10.0.0.8 using port 4648. The success message indicates that one server was joined successfully.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/server/join.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad server join 10.0.0.8:4648\nJoined 1 servers successfully\n```\n\n----------------------------------------\n\nTITLE: Creating CLI TLS Certificate - Nomad CLI\nDESCRIPTION: Example of creating a TLS certificate for the Nomad CLI using the tls cert create command. The command generates CLI certificates and keys using the CA files.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/tls/cert-create.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad tls cert create -cli\n==> Using CA file nomad-agent-ca.pem and CA key nomad-agent-ca-key.pem\n==> Cli Certificate saved to global-cli-nomad.pem\n==> Cli Certificate key saved to global-cli-nomad-key.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Workload Identity in Nomad Enterprise\nDESCRIPTION: This example illustrates how to configure Nomad workload identities for Consul authentication in Nomad Enterprise. It shows how to specify a Consul cluster name and create identities for both services and tasks using the appropriate naming convention.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/identity.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\njob \"httpd\" {\n  group \"httpd\" {\n    consul {\n      cluster = \"prod\"\n    }\n\n    network {\n      port \"http\" {}\n    }\n\n    service {\n      provider = \"consul\"\n      name     = \"httpd\"\n      port     = \"http\"\n\n      identity {\n        aud = [\"consul.io\"]\n        ttl = \"1h\"\n      }\n    }\n\n    task \"httpd\" {\n      driver = \"docker\"\n\n      config {\n        image   = \"busybox:1.36\"\n        command = \"httpd\"\n        args    = [\"-f\", \"-p\", \"${NOMAD_PORT_http}\"]\n        ports   = [\"http\"]\n      }\n\n      identity {\n        name = \"consul_prod\"\n        aud  = [\"consul.io\"]\n        ttl  = \"1h\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Retry Behavior in Nomad HCL\nDESCRIPTION: Controls the retry behavior when an error is returned from Nomad. It uses exponential back-off and retry functions to handle Nomad cluster unavailability, specifying attempts, backoff time, and maximum backoff.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/client.mdx#2025-04-19_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nnomad_retry {\n  # This specifies the number of attempts to make before giving up. Each\n  # attempt adds the exponential backoff sleep time. Setting this to\n  # zero will implement an unlimited number of retries.\n  attempts = 12\n  # This is the base amount of time to sleep between retry attempts. Each\n  # retry sleeps for an exponent of 2 longer than this base. For 5 retries,\n  # the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.\n  backoff = \"250ms\"\n  # This is the maximum amount of time to sleep between retry attempts.\n  # When max_backoff is set to zero, there is no upper limit to the\n  # exponential sleep between retry attempts.\n  # If max_backoff is set to 10s and backoff is set to 1s, sleep times\n  # would be: 1s, 2s, 4s, 8s, 10s, 10s, ...\n  max_backoff = \"1m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Linux Bridge Network Settings\nDESCRIPTION: This configuration file sets the bridge network parameters to persist across system reboots. It enables ARP tables, IPv6 tables, and IP tables processing for bridge network traffic.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/partials/install/bridge-iptables.mdx#2025-04-19_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nnet.bridge.bridge-nf-call-arptables = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Signal-based Token Change Handling in Nomad with HCL\nDESCRIPTION: Example showing how to configure a Vault block to signal the task with SIGINT instead of restarting it when a token changes. This allows more graceful handling of token updates.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/vault.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvault {\n  role = \"prod\"\n\n  change_mode   = \"signal\"\n  change_signal = \"SIGINT\"\n}\n```\n\n----------------------------------------\n\nTITLE: CSI Volume Access ACL Policy\nDESCRIPTION: Additional ACL policy configuration required for users who need to read jobs that mount CSI volumes in the Nomad UI. Grants read permissions for plugin-related operations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/acl-policy.mdx#2025-04-19_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\nplugin {\n  policy = \"read\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards in Job Datacenter Specification\nDESCRIPTION: Demonstrates the use of wildcards in the 'datacenters' field of a Nomad job specification. This feature was introduced in Nomad 1.5.0 to allow matching multiple datacenters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/upgrade/upgrade-specific.mdx#2025-04-19_snippet_6\n\nLANGUAGE: HCL\nCODE:\n```\njob \"example\" {\n  datacenters = [\"dc*\"]\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Transit Keyring in Nomad\nDESCRIPTION: This snippet demonstrates how to configure Nomad to use Vault's transit secrets engine for its keyring. It includes settings for Vault connection, authentication, key configuration, and TLS options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/keyring/transit.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nkeyring \"transit\" {\n\n  active = true\n  name   = \"example\"\n\n  # fields specific to transit\n  address            = \"https://vault:8200\"\n  token              = \"s.Qf1s5zigZ4OX6akYjQXJC1jY\"\n  disable_renewal    = \"false\"\n\n  # Key configuration\n  key_name           = \"transit_key_name\"\n  mount_path         = \"transit/\"\n  namespace          = \"ns1/\"\n\n  # TLS Configuration\n  tls_ca_cert        = \"/etc/vault/ca_cert.pem\"\n  tls_client_cert    = \"/etc/vault/client_cert.pem\"\n  tls_client_key     = \"/etc/vault/ca_cert.pem\"\n  tls_server_name    = \"vault\"\n  tls_skip_verify    = \"false\"\n}\n```\n\n----------------------------------------\n\nTITLE: Required Nomad ACL Permissions for GCE MIG Plugin\nDESCRIPTION: HCL policy definition showing the required ACL permissions for the gce-mig plugin when running in a Nomad cluster with ACLs enabled. The policy needs write access to nodes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/target/gce-mig.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nnode {\n  policy = \"write\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Consul ACL Binding Rule for Services\nDESCRIPTION: This shell command creates a Consul ACL binding rule for Nomad services. It associates the Consul ACL token with a service identity, allowing token to register and manage the lifecycle of a given service.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/acl.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nconsul acl binding-rule create \\\n    -method 'nomad-workloads' \\\n    -bind-type 'service' \\\n    -bind-name '${value.nomad_service}' \\\n    -selector '\"nomad_service\" in value'\n```\n\n----------------------------------------\n\nTITLE: Implementing app-sizing-max Strategy in Nomad Policy Configuration\nDESCRIPTION: HCL configuration for using the app-sizing-max strategy in a policy check. This plugin calculates the maximum resource value seen within the available dataset and doesn't require any additional configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/strategy/app-sizing-max.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ncheck \"max\" {\n  strategy \"app-sizing-max\" {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Periodic Job in Nomad\nDESCRIPTION: Example of configuring a periodic job in Nomad using a cron schedule. This snippet shows how to set up a job to run every 15 minutes in the Europe/Berlin timezone, with overlap prevention enabled.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/json-jobs.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Periodic\": {\n    \"Spec\": \"*/15 - *\",\n    \"TimeZone\": \"Europe/Berlin\",\n    \"SpecType\": \"cron\",\n    \"Enabled\": true,\n    \"ProhibitOverlap\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Plugin Configuration in Nomad\nDESCRIPTION: Complete example of Docker plugin configuration including authentication, TLS, garbage collection, and volume settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_23\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"docker\" {\n  config {\n    endpoint = \"unix:///var/run/docker.sock\"\n\n    auth {\n      config = \"/etc/docker-auth.json\"\n      helper = \"ecr-login\"\n    }\n\n    tls {\n      cert = \"/etc/nomad/nomad.pub\"\n      key  = \"/etc/nomad/nomad.pem\"\n      ca   = \"/etc/nomad/nomad.cert\"\n    }\n\n    extra_labels = [\"job_name\", \"job_id\", \"task_group_name\", \"task_name\", \"namespace\", \"node_name\", \"node_id\"]\n\n    gc {\n      image       = true\n      image_delay = \"3m\"\n      container   = true\n\n      dangling_containers {\n        enabled        = true\n        dry_run        = false\n        period         = \"5m\"\n        creation_grace = \"5m\"\n      }\n    }\n\n    volumes {\n      enabled      = true\n      selinuxlabel = \"z\"\n    }\n\n    allow_privileged = false\n    allow_caps       = [\"chown\", \"net_raw\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing ACL Policies in Nomad with Shell Session Example\nDESCRIPTION: This example demonstrates how to list all ACL policies using the 'nomad acl policy list' command in a shell session. The output displays the name and description of each policy.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/policy/list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl policy list\nName      Description\npolicy-1  The first policy\npolicy-2  The second policy\n```\n\n----------------------------------------\n\nTITLE: Displaying node status with nomad status\nDESCRIPTION: This example demonstrates how to use the nomad status command to display detailed information about a specific node. It includes node details, resource allocation, utilization, and current allocations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/status.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad status f9dabe93\nID      = f9dabe93\nName    = nomad-server01\nClass   = <none>\nDC      = dc1\nDrain   = false\nStatus  = ready\nDrivers = docker,exec,java,qemu,raw_exec,rkt\nUptime  = 4h17m24s\n\nAllocated Resources\nCPU           Memory           Disk\n500/8709 MHz  256 MiB/2.0 GiB  300 MiB/24 GiB\n\nAllocation Resource Utilization\nCPU         Memory\n3/8709 MHz  6.3 MiB/2.0 GiB\n\nHost Resource Utilization\nCPU           Memory           Disk\n116/8709 MHz  335 MiB/2.0 GiB  12 GiB/38 GiB\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created At\ne1d14a39  f9dabe93  cache       0        run      running  08/28/17 23:01:39 UTC\n```\n\n----------------------------------------\n\nTITLE: Reading Job Scale Status with GET Request in Shell\nDESCRIPTION: Makes a GET request to read the scale status of a job named 'my-job' using curl.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/job/my-job/scale\n```\n\n----------------------------------------\n\nTITLE: Reading Node Details with Nomad HTTP API\nDESCRIPTION: This snippet shows how to query the status of a specific client node using its full UUID. It demonstrates a GET request to the /v1/node/:node_id endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/nodes.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://localhost:4646/v1/node/f7476465-4d6e-c0de-26d0-e383c49be941\n```\n\n----------------------------------------\n\nTITLE: Sample Autopilot Configuration Response\nDESCRIPTION: The JSON response from the Autopilot configuration endpoint showing settings like CleanupDeadServers, LastContactThreshold, and other configuration options with their current values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/autopilot.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CleanupDeadServers\": true,\n  \"LastContactThreshold\": \"200ms\",\n  \"MaxTrailingLogs\": 250,\n  \"ServerStabilizationTime\": \"10s\",\n  \"EnableRedundancyZones\": false,\n  \"DisableUpgradeMigration\": false,\n  \"EnableCustomUpgrades\": false,\n  \"CreateIndex\": 4,\n  \"ModifyIndex\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Client Assertion with User-Provided Key for Microsoft Entra ID\nDESCRIPTION: JSON configuration for OIDC client assertion using a user-provided RSA private key. This example is for Microsoft Entra ID (formerly Azure Active Directory) and includes both the private key and certificate in PEM format for JWT signing and x5t#S256 thumbprint derivation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/acl/auth-methods/oidc.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"OIDCDiscoveryURL\": \"https://login.microsoftonline.com/{tenant}/v2.0\",\n  \"OIDCClientID\": \"{app-client-id}\",\n  \"BoundAudiences\": [\"{app-client-id}\"],\n  \"OIDCClientAssertion\": {\n    \"KeySource\": \"private_key\",\n    \"KeyAlgorithm\": \"RS256\",\n    \"PrivateKey\": {\n      \"PemKey\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIE...the-rest-of-the-key...uJ8fR\\n-----END RSA PRIVATE KEY-----\",\n      \"PemCert\": \"-----BEGIN CERTIFICATE-----\\nMIID...the-rest-of-the-cert...GUCk=\\n-----END CERTIFICATE-----\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Policy Source Block in Nomad Autoscaler\nDESCRIPTION: This snippet shows how to configure a policy source block within the Nomad Autoscaler configuration. It demonstrates disabling the nomad policy source using the enabled parameter.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/agent/policy.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\npolicy {\n  source \"nomad\" {\n    enabled = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Ports for Nomad Agents\nDESCRIPTION: This table describes the network ports and protocols used by Nomad agents for various communication purposes, including HTTP, RPC, and gossip protocols.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/security.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Port / Protocol**  | Agents  | Description                                                                                                                                                           |\n|----------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **4646** / TCP       | All     | [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) to provide [UI](/nomad/tutorials/web-ui/web-ui-access) and [API](/nomad/api-docs) access to agents. |\n| **4647** / TCP       | All     | [RPC](https://en.wikipedia.org/wiki/Remote_procedure_call) protocol used by agents.                                                                                   |\n| **4648** / TCP + UDP | Servers | [gossip](/nomad/docs/concepts/gossip) protocol to manage server membership using [Serf][serf].                                                                        |\n```\n\n----------------------------------------\n\nTITLE: Setting Single Target Percentage for Spread in Nomad\nDESCRIPTION: This example configures a spread block with a single target percentage, allocating 50% of tasks to us-east1 datacenter and the rest among other datacenters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/spread.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nspread {\n  attribute = \"${node.datacenter}\"\n  weight    = 100\n\n  target \"us-east1\" {\n    percent = 50\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parameterized Job with Required Payload and Metadata\nDESCRIPTION: A comprehensive example of a video encoding job that requires both a payload and metadata. It shows how the payload is written to a file that can be accessed by the task.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/parameterized.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\njob \"video-encode\" {\n  # ...\n\n  type = \"batch\"\n\n  parameterized {\n    payload       = \"required\"\n    meta_required = [\"dispatcher_email\"]\n  }\n\n  group \"encode\" {\n    # ...\n\n    task \"ffmpeg\" {\n      driver = \"exec\"\n\n      config {\n        command = \"ffmpeg-wrapper\"\n\n        # When dispatched, the payload is written to a file that is then read by\n        # the created task upon startup\n        args = [\"-config=${NOMAD_TASK_DIR}/config.json\"]\n      }\n\n      dispatch_payload {\n        file = \"config.json\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Deployment Allocations - Shell Request\nDESCRIPTION: Sample curl command to list allocations for a specific deployment.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/deployments.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/deployment/allocations/5456bd7a-9fc0-c0dd-6131-cbee77f57577\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Oversubscription in Pledge Task Resources\nDESCRIPTION: Resource configuration demonstrating how to set memory oversubscription for a Pledge driver task. This specifies CPU cores, guaranteed memory, and maximum memory limits for the task.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/pledge.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresources {\n  cpu        = 2000\n  memory     = 1024\n  memory_max = 2048\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Server Parameters in HCL\nDESCRIPTION: Example HCL configuration block for Nomad server parameters. Includes settings for authoritative region, bootstrap expectations, data directory, and other core server options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/server.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nserver {\n  authoritative_region = \"global\"\n  bootstrap_expect = 3\n  data_dir = \"/opt/nomad/server\"\n  enabled = true\n  enabled_schedulers = [\"batch\", \"service\"]\n  encrypt = \"base64_encoded_key\"\n  node_gc_threshold = \"24h\"\n  job_gc_interval = \"5m\"\n  eval_gc_threshold = \"1h\"\n  deployment_gc_threshold = \"1h\"\n  heartbeat_grace = \"10s\"\n  min_heartbeat_ttl = \"10s\"\n  max_heartbeats_per_second = 50.0\n  num_schedulers = 4\n  raft_protocol = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up GetterOptions for Artifact Downloads in Nomad\nDESCRIPTION: Configures options for the go-getter library used to download artifacts, including checksum verification and AWS credentials for accessing protected resources.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/json-jobs.mdx#2025-04-19_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"GetterOptions\": {\n    \"checksum\": \"md5:c4aa853ad2215426eb7d70a21922e794\",\n\n    \"aws_access_key_id\": \"<id>\",\n    \"aws_access_key_secret\": \"<secret>\",\n    \"aws_access_token\": \"<token>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NVIDIA Plugin in Nomad\nDESCRIPTION: HCL configuration block for the NVIDIA GPU device plugin, including options for enabling the plugin, ignoring specific GPUs, and setting fingerprint period.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/devices/nvidia.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"nomad-device-nvidia\" {\n  config {\n    enabled            = true\n    ignored_gpu_ids    = [\"GPU-fef8089b\", \"GPU-ac81e44d\"]\n    fingerprint_period = \"1m\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Node Pool Nodes List Response in JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of the response when listing nodes in a node pool. It includes detailed information about each node, such as address, attributes, drivers, and status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/node-pools.mdx#2025-04-19_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Address\": \"10.138.0.5\",\n    \"Attributes\": {\n      \"os.name\": \"ubuntu\"\n    },\n    \"CreateIndex\": 6,\n    \"Datacenter\": \"dc1\",\n    \"Drain\": false,\n    \"Drivers\": {\n      \"java\": {\n        \"Attributes\": {\n          \"driver.java.runtime\": \"OpenJDK Runtime Environment (build 1.8.0_162-8u162-b12-1~deb9u1-b12)\",\n          \"driver.java.vm\": \"OpenJDK 64-Bit Server VM (build 25.162-b12, mixed mode)\",\n          \"driver.java.version\": \"openjdk version \\\"1.8.0_162\"\n        },\n        \"Detected\": true,\n        \"HealthDescription\": \"\",\n        \"Healthy\": true,\n        \"UpdateTime\": \"2018-04-11T23:33:48.781948669Z\"\n      },\n      \"qemu\": {\n        \"Attributes\": null,\n        \"Detected\": false,\n        \"HealthDescription\": \"\",\n        \"Healthy\": false,\n        \"UpdateTime\": \"2018-04-11T23:33:48.7819898Z\"\n      },\n      \"rkt\": {\n        \"Attributes\": {\n          \"driver.rkt.appc.version\": \"0.8.11\",\n          \"driver.rkt.volumes.enabled\": \"1\",\n          \"driver.rkt.version\": \"1.29.0\"\n        },\n        \"Detected\": true,\n        \"HealthDescription\": \"Driver rkt is detected: true\",\n        \"Healthy\": true,\n        \"UpdateTime\": \"2018-04-11T23:34:48.81079772Z\"\n      },\n      \"docker\": {\n        \"Attributes\": {\n          \"driver.docker.bridge_ip\": \"172.17.0.1\",\n          \"driver.docker.version\": \"18.03.0-ce\",\n          \"driver.docker.volumes.enabled\": \"1\"\n        },\n        \"Detected\": true,\n        \"HealthDescription\": \"Driver is available and responsive\",\n        \"Healthy\": true,\n        \"UpdateTime\": \"2018-04-11T23:34:48.713720323Z\"\n      },\n      \"exec\": {\n        \"Attributes\": {},\n        \"Detected\": true,\n        \"HealthDescription\": \"Driver exec is detected: true\",\n        \"Healthy\": true,\n        \"UpdateTime\": \"2018-04-11T23:34:48.711026521Z\"\n      },\n      \"raw_exec\": {\n        \"Attributes\": {},\n        \"Detected\": true,\n        \"HealthDescription\": \"\",\n        \"Healthy\": true,\n        \"UpdateTime\": \"2018-04-11T23:33:48.710448534Z\"\n      }\n    },\n    \"ID\": \"f7476465-4d6e-c0de-26d0-e383c49be941\",\n    \"LastDrain\": null,\n    \"ModifyIndex\": 2526,\n    \"Name\": \"nomad-4\",\n    \"NodeClass\": \"\",\n    \"NodePool\": \"prod-eng\",\n    \"SchedulingEligibility\": \"eligible\",\n    \"Status\": \"ready\",\n    \"StatusDescription\": \"\",\n    \"Version\": \"0.8.0-rc1\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling drain mode on a specific node\nDESCRIPTION: This example demonstrates enabling drain mode on a node with ID prefix '4d2ba53b', including a message for the operation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/drain.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node drain -enable f4e8a9e5 -m \"node maintenance\"\nAre you sure you want to enable drain mode for node \"f4e8a9e5-30d8-3536-1e6f-cda5c869c35e\"? [y/N] y\n2018-03-30T23:13:16Z: Ctrl-C to stop monitoring: will not cancel the node drain\n2018-03-30T23:13:16Z: Node \"f4e8a9e5-30d8-3536-1e6f-cda5c869c35e\" drain strategy set\n2018-03-30T23:13:17Z: Alloc \"1877230b-64d3-a7dd-9c31-dc5ad3c93e9a\" marked for migration\n2018-03-30T23:13:17Z: Alloc \"1877230b-64d3-a7dd-9c31-dc5ad3c93e9a\" draining\n2018-03-30T23:13:17Z: Alloc \"1877230b-64d3-a7dd-9c31-dc5ad3c93e9a\" status running -> complete\n2018-03-30T23:13:29Z: Alloc \"3fce5308-818c-369e-0bb7-f61f0a1be9ed\" marked for migration\n2018-03-30T23:13:29Z: Alloc \"3fce5308-818c-369e-0bb7-f61f0a1be9ed\" draining\n2018-03-30T23:13:30Z: Alloc \"3fce5308-818c-369e-0bb7-f61f0a1be9ed\" status running -> complete\n2018-03-30T23:13:41Z: Alloc \"9a98c5aa-a719-2f34-ecfc-0e6268b5d537\" marked for migration\n2018-03-30T23:13:41Z: Alloc \"9a98c5aa-a719-2f34-ecfc-0e6268b5d537\" draining\n2018-03-30T23:13:41Z: Node \"f4e8a9e5-30d8-3536-1e6f-cda5c869c35e\" has marked all allocations for migration\n2018-03-30T23:13:42Z: Alloc \"9a98c5aa-a719-2f34-ecfc-0e6268b5d537\" status running -> complete\n2018-03-30T23:13:42Z: All allocations on node \"f4e8a9e5-30d8-3536-1e6f-cda5c869c35e\" have stopped.\n```\n\n----------------------------------------\n\nTITLE: Querying Raft Configuration using Nomad CLI\nDESCRIPTION: This command uses the Nomad CLI to query the Raft configuration via the API. It returns information about servers in the Raft peer configuration including their addresses, IDs, and leadership status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/raft.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator api /v1/operator/raft/configuration\n```\n\n----------------------------------------\n\nTITLE: Setting Network Mode for Podman Container\nDESCRIPTION: Configures the network mode for the container, defaulting to the task group's network settings or bridge/slirp4netns.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_24\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  network_mode = \"bridge\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nomad on Ubuntu/Debian\nDESCRIPTION: Updates package lists and installs the Nomad package from the HashiCorp repository.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo apt-get update && sudo apt-get install nomad\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Server Force-Leave with Prune Option in Shell\nDESCRIPTION: This example shows how to use the `nomad server force-leave` command with the `-prune` option to immediately remove a failed or left server named 'node1' from the Serf member list.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/server/force-leave.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad server force-leave -prune node1\n\n```\n\n----------------------------------------\n\nTITLE: Defining Service Name with Variable Interpolation in Nomad\nDESCRIPTION: Explains the naming convention for services in Nomad tasks, including the use of variable interpolation for job, task group, and task names. This snippet is part of the Services configuration in a Nomad task.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/json-jobs.mdx#2025-04-19_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nName: An explicit name for the Service. Nomad will replace ${JOB},\n${TASKGROUP} and ${TASK} by the name of the job, task group or task,\nrespectively. ${BASE} expands to the equivalent of\n${JOB}-${TASKGROUP}-${TASK}, and is the default name for a Service.\n```\n\n----------------------------------------\n\nTITLE: Promoting Specific Task Groups in Deployment with JavaScript\nDESCRIPTION: This snippet shows how to promote specific task groups in a deployment. It includes the deployment ID and an array of group names to be promoted.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/deployments.mdx#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"DeploymentID\": \"5456bd7a-9fc0-c0dd-6131-cbee77f57577\",\n  \"Groups\": [\"web\", \"api-server\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Node Allocation List API Request\nDESCRIPTION: Example curl command demonstrating how to fetch allocations for a specific node using the Nomad HTTP API.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/nodes.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://localhost:4646/v1/node/e02b6169-83bd-9df6-69bd-832765f333eb/allocations\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Creation with Preferred and Required Topologies\nDESCRIPTION: This example shows how to configure a 'topology_request' block for volume creation with both preferred and required topologies. It specifies that the volume must be created within racks R1 or R2, but prefers R1.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/topology_request.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntopology_request {\n  required {\n    topology { segments { rack = \"R1\", zone = \"us-east-1a\" } }\n    topology { segments { rack = \"R2\", zone = \"us-east-1a\" } }\n  }\n  preferred {\n    topology { segments { rack = \"R1\", zone = \"us-east-1a\"} }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux Capabilities for Java Driver\nDESCRIPTION: This snippet demonstrates how to add specific Linux capabilities to a Java task using the cap_add configuration option.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/java.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  cap_add = [\"net_raw\", \"sys_time\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Node Status with Operating System Information in Nomad CLI\nDESCRIPTION: Lists Nomad nodes with their operating system information by using the -os flag, showing OS name alongside other node details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/status.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node status -os\nID        Node Pool  DC   Name   Class   OS      Drain  Eligibility  Status\na72dfba2  default    dc1  node1  <none>  ubuntu  false  eligible     ready\nf73e3993  dev        dc1  node2  <none>  centos  false  eligible     ready\n```\n\n----------------------------------------\n\nTITLE: Nomad Job Tag Apply Example - Latest Version\nDESCRIPTION: Example showing how to tag the latest version of a job with a name and description.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/tag.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad job tag apply -name \"golden-version\" \\\n\t\t-description \"The version we can roll back to.\" \\\n    hello-world\n```\n\n----------------------------------------\n\nTITLE: Locking a variable with TTL and executing a command\nDESCRIPTION: Example of acquiring a lock on a variable at path 'secret/creds' with a 15-second TTL, then executing the 'nomad job run' command if the lock is successfully acquired.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/lock.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad var lock -ttl=15s secret/creds \"nomad job run webapp.nomad.hcl\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Quota Response JSON in Nomad\nDESCRIPTION: This JSON structure represents a quota response in Hashicorp Nomad. It includes details about resource usage, regional limits, and quota identification. The response contains information on CPU, memory, network, and device allocations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/quotas.mdx#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Used\": {\n    \"+kpaU440830Btn3/a0VUL4ROJCQyBOE55xwRR8rlFpc=\": {\n      \"Region\": \"global\",\n      \"RegionLimit\": {\n        \"CPU\": 500,\n        \"Cores\": 0,\n        \"MemoryMB\": 256,\n        \"MemoryMaxMB\": 256,\n        \"DiskMB\": 0,\n        \"IOPS\": 0,\n        \"Networks\": [\n          {\n            \"CIDR\": \"\",\n            \"Device\": \"\",\n            \"DynamicPorts\": null,\n            \"IP\": \"\",\n            \"MBits\": 50,\n            \"Mode\": \"\",\n            \"ReservedPorts\": null\n          }\n        ],\n        \"Devices\": [\n          {\n            \"Name\": \"nvidia/gpu/Tesla M60\",\n            \"Count\": 1,\n            \"Constraints\": null,\n            \"Affinities\": null\n          }\n        ],\n        \"NUMA\": null,\n        \"SecretsMB\": 0\n      },\n      \"VariablesLimit\": 0,\n      \"Hash\": \"+kpaU440830Btn3/a0VUL4ROJCQyBOE55xwRR8rlFpc=\"\n    }\n  },\n  \"Name\": \"default-quota\",\n  \"CreateIndex\": 11,\n  \"ModifyIndex\": 38\n}\n```\n\n----------------------------------------\n\nTITLE: Using uuidv5 with DNS Namespace in Nomad\nDESCRIPTION: Example of generating a UUID v5 using the DNS namespace with a fully-qualified domain name.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/uuid/uuidv5.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> uuidv5(\"dns\", \"developer.hashicorp.com/nomad\")\nd2616d48-e1cb-5b87-8a8c-46355decc76a\n```\n\n----------------------------------------\n\nTITLE: Configuring Mount Options for CSI Volumes in Nomad\nDESCRIPTION: Example configuration block demonstrating how to specify mount options for a CSI volume in Nomad. Shows settings for volume ID, namespace, capacity limits, filesystem type, and mount flags. The configuration allows customization of how the volume is mounted in the container.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/mount_options.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nid           = \"ebs_prod_db1\"\nnamespace    = \"default\"\nname         = \"database\"\ntype         = \"csi\"\nplugin_id    = \"ebs-prod\"\ncapacity_max = \"200G\"\ncapacity_min = \"100G\"\n\nmount_options {\n  fs_type     = \"ext4\"\n  mount_flags = [\"noatime\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ACL Policy for Cluster Level Metrics in HCL\nDESCRIPTION: This snippet defines an ACL policy required to obtain cluster level metrics in a Nomad cluster with ACLs enabled.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/apm/nomad.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nnode {\n  policy = \"read\"\n}\n\nnamespace \"default\" {\n  policy       = \"read\"\n  capabilities = [\"read-job\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering with For Expressions in HCL\nDESCRIPTION: Example of a for expression with an if clause that filters elements from the source collection. This creates a list of uppercase strings while excluding empty strings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/expressions.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n[for s in var.list : upper(s) if s != \"\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault ACL Role for Nomad Workload Identities\nDESCRIPTION: JSON configuration for a Vault ACL role that specifies audience values, claim mappings, and token properties for Nomad workload identities. This role defines the permissions and restrictions for tokens issued to Nomad tasks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/vault/acl.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"role_type\": \"jwt\",\n  \"bound_audiences\": [\"vault.io\"],\n  \"bound_claims\": {\n     \"nomad_namespace\": \"default\",\n     \"nomad_job_id\": \"mongo\"\n  },\n  \"user_claim\": \"/nomad_job_id\",\n  \"user_claim_json_pointer\": true,\n  \"claim_mappings\": {\n    \"nomad_namespace\": \"nomad_namespace\",\n    \"nomad_job_id\": \"nomad_job_id\",\n    \"nomad_task\": \"nomad_task\"\n  },\n  \"token_type\": \"service\",\n  \"token_policies\": [\"nomad-workloads\"],\n  \"token_period\": \"30m\",\n  \"token_explicit_max_ttl\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Using Distinct Function in Nomad Configuration\nDESCRIPTION: Demonstrates how to use the distinct function to remove duplicate elements from a list. The function preserves the first occurrence of each value and maintains the relative ordering of elements.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/distinct.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> distinct([\"a\", \"b\", \"a\", \"c\", \"d\", \"b\"])\n[\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n]\n```\n\n----------------------------------------\n\nTITLE: Using 'can' Function in Nomad Configuration\nDESCRIPTION: Demonstrates the usage of the 'can' function to evaluate expressions and handle potential runtime errors. It shows examples of successful and failed evaluations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/conversion/can.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> local.foo\n{\n  \"bar\" = \"baz\"\n}\n> can(local.foo.bar)\ntrue\n> can(local.foo.boop)\nfalse\n```\n\n----------------------------------------\n\nTITLE: Requesting an OIDC Authentication URL with curl\nDESCRIPTION: Shell command using curl to request an OIDC authentication URL from the Nomad API. The command makes a POST request with a JSON payload to the specified endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/oidc.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://localhost:4646/v1/acl/oidc/auth-url\n```\n\n----------------------------------------\n\nTITLE: Type Coercion in Nomad Environment Variables\nDESCRIPTION: Shows different ways to specify environment variables with automatic type coercion to strings, including numbers and boolean values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/env.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nenv {\n  key   = 1.4\n  key   = \"1.4\"\n\n  key = true\n  key = \"1\"\n  key = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Datadog Check Policy in HCL\nDESCRIPTION: Configuration block for defining a Datadog check policy that specifies the metric query for autoscaling decisions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/apm/datadog.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ncheck {\n  source = \"datadog\"\n  query  = \"avg:proxy.backend.response.time{proxy-service:web-app}\"\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a One-Time ACL Token\nDESCRIPTION: This endpoint creates a one-time token for the ACL token provided in the X-Nomad-Token header. It requires any valid ACL token.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    -H \"X-Nomad-Token: aa534e09-6a07-0a45-2295-a7f77063d429\" \\\n    https://localhost:4646/v1/acl/token/onetime\n```\n\n----------------------------------------\n\nTITLE: Interactive Batched Restart of Allocations in Nomad Job\nDESCRIPTION: This example shows how to pause between batches of restarts and wait for user input on how to proceed. It uses the '-batch-size' and '-batch-wait=ask' flags to enable interactive control over the restart process, allowing the user to confirm or adjust the wait time between batches.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/restart.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job restart -batch-size=2 -batch-wait=ask example\n==> 2023-02-28T18:04:19-05:00: Restarting 5 allocations\n==> 2023-02-28T18:04:19-05:00: Restarting 1st batch of 2 allocations\n    2023-02-28T18:04:19-05:00: Restarting running tasks in allocation \"4d18e545\" for group \"web\"\n    2023-02-28T18:04:19-05:00: Restarting running tasks in allocation \"653f983e\" for group \"web\"\n==> 2023-02-28T18:04:19-05:00: Proceed with next batch? [Y/n/<duration>] y\n==> 2023-02-28T18:04:20-05:00: Restarting 2nd batch of 2 allocations\n    2023-02-28T18:04:20-05:00: Restarting running tasks in allocation \"4fd581ee\" for group \"proxy\"\n    2023-02-28T18:04:20-05:00: Restarting running tasks in allocation \"32e143f8\" for group \"proxy\"\n==> 2023-02-28T18:04:20-05:00: Proceed with next batch? [Y/n/<duration>] 10s\n==> 2023-02-28T18:04:22-05:00: Proceeding restarts with new wait time of 10s\n==> 2023-02-28T18:04:22-05:00: Waiting 10s before restarting the next batch\n==> 2023-02-28T18:04:32-05:00: Restarting 3rd batch of 1 allocations\n    2023-02-28T18:04:32-05:00: Restarting running tasks in allocation \"77d5c4f6\" for group \"proxy\"\n==> 2023-02-28T18:04:32-05:00: Finished job restart\n\nAll allocations restarted successfully!\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Sysctl Parameters in Nomad HCL\nDESCRIPTION: Demonstrates how to set sysctl parameters for a Docker container in the Nomad task configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  sysctl = {\n    \"net.core.somaxconn\" = \"16384\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching ACL token information in Nomad\nDESCRIPTION: This example shows how to fetch information about an existing ACL token using the 'nomad acl token info' command. It displays details such as Accessor ID, Secret ID, Name, Type, Global status, Creation and Expiry times, Creation and Modification indices, associated Policies, and Roles.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/token/info.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl token info 1b60edc8-e4ed-08ef-208d-ecc18a90ccc3\nAccessor ID  = 1b60edc8-e4ed-08ef-208d-ecc18a90ccc3\nSecret ID    = e4c7c80e-870b-c6a6-43d2-dbfa90130c06\nName         = example-acl-token\nType         = client\nGlobal       = false\nCreate Time  = 2022-08-23 12:17:35.45067293 +0000 UTC\nExpiry Time  = 2022-08-23 20:17:35.45067293 +0000 UTC\nCreate Index = 142\nModify Index = 142\nPolicies     = [example-acl-policy]\n\nRoles\n<none>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Host Volumes List Response\nDESCRIPTION: Sample JSON response when listing dynamic host volumes, showing volume properties like capacity, creation time and state\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"CapacityBytes\": 1048576000,\n    \"CreateIndex\": 42,\n    \"CreateTime\": 1736191825846395400,\n    \"ID\": \"3735cc2c-cc64-11ef-89ed-bfb5b3bc38ea\",\n    \"ModifyIndex\": 64,\n    \"ModifyTime\": 1736191825846395400,\n    \"Name\": \"example\",\n    \"Namespace\": \"default\",\n    \"NodeID\": \"5c5830d0-cc64-11ef-a293-4f03e55969ea\",\n    \"NodePool\": \"default\",\n    \"PluginID\": \"plugin-id1\",\n    \"State\": \"ready\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Nomad Agent Docker Plugin Configuration\nDESCRIPTION: Example of configuring Docker credential helper in Nomad agent configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_19\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  enabled = true\n}\n\nplugin \"docker\" {\n  config {\n    auth {\n      helper = \"ecr-login\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ACL Auth Method in Nomad Using JSON\nDESCRIPTION: Sample JSON payload for creating an OIDC ACL auth method. This configuration includes method name, type, token settings, and OIDC-specific parameters like discovery URL, client credentials, and claim mappings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/auth-methods.mdx#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Name\": \"example-acl-auth-method\",\n  \"Type\": \"OIDC\",\n  \"TokenLocality\": \"local\",\n  \"TokenNameFormat\": \"${auth_method_type}-${value.user}\",\n  \"MaxTokenTTL\": \"1h0m0s\",\n  \"Default\": false,\n  \"Config\": {\n    \"OIDCDiscoveryURL\": \"https://my-corp-app-name.auth0.com/\",\n    \"OIDCClientID\": \"V1RPi2MYptMV1RPi2MYptMV1RPi2MYpt\",\n    \"OIDCClientSecret\": \"example-client-secret\",\n    \"OIDCScopes\": [\n      \"groups\"\n    ],\n    \"BoundAudiences\": [\n      \"V1RPi2MYptMV1RPi2MYptMV1RPi2MYpt\"\n    ],\n    \"AllowedRedirectURIs\": [\n      \"http://localhost:4646/oidc/callback\"\n    ],\n    \"ClaimMappings\": {\n      \"http://example.com/first_name\": \"first_name\",\n      \"http://example.com/last_name\": \"last_name\"\n    },\n    \"ListClaimMappings\": {\n      \"http://nomad.com/groups\": \"groups\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nomad Job Configuration with Consul Namespace\nDESCRIPTION: Example Nomad job specification showing how to configure a service with a specific Consul namespace. The configuration demonstrates setting up a Redis service in the 'prod' Consul namespace.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/acl.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n  group \"cache\" {\n    network {\n      port \"db\" {\n        to = 6379\n      }\n    }\n\n    consul {\n      namespace = \"prod\"\n    }\n\n    service {\n      port     = \"db\"\n      name     = \"redis\"\n      provider = \"consul\"\n    }\n\n    task \"redis\" {\n      driver = \"docker\"\n\n      config {\n        image = \"redis:7\"\n        ports = [\"db\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Retry Behavior in Nomad HCL\nDESCRIPTION: Controls the retry behavior when an error is returned from Vault. It uses exponential back-off and retry functions to handle Vault cluster unavailability, specifying attempts, backoff time, and maximum backoff.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/client.mdx#2025-04-19_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nvault_retry {\n  # This specifies the number of attempts to make before giving up. Each\n  # attempt adds the exponential backoff sleep time. Setting this to\n  # zero will implement an unlimited number of retries.\n  attempts = 12\n  # This is the base amount of time to sleep between retry attempts. Each\n  # retry sleeps for an exponent of 2 longer than this base. For 5 retries,\n  # the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.\n  backoff = \"250ms\"\n  # This is the maximum amount of time to sleep between retry attempts.\n  # When max_backoff is set to zero, there is no upper limit to the\n  # exponential sleep between retry attempts.\n  # If max_backoff is set to 10s and backoff is set to 1s, sleep times\n  # would be: 1s, 2s, 4s, 8s, 10s, 10s, ...\n  max_backoff = \"1m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Node Metadata Update Command for Transparent Proxy Configuration\nDESCRIPTION: Shell command example showing how to update node metadata to change the default UID for transparent proxy on a specific Nomad client node, followed by a command to verify the updated metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/transparent_proxy.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad node meta apply connect.transparent_proxy.default_uid=120\n$ nomad node meta read -json | jq -r '.Dynamic | .\"connect.transparent_proxy.default_uid\"'\n120\n```\n\n----------------------------------------\n\nTITLE: Disabling Local Node Scheduling Eligibility\nDESCRIPTION: Example of disabling scheduling eligibility on the local node using the -self flag. Shows both the command and its output.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/eligibility.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node eligibility -disable -self\nNode \"574545c5-c2d7-e352-d505-5e2cb9fe169f\" scheduling eligibility set: ineligible for scheduling\n```\n\n----------------------------------------\n\nTITLE: Enabling drain mode without stopping system jobs\nDESCRIPTION: This example demonstrates enabling drain mode while ignoring system jobs using the '-ignore-system' flag.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/drain.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node drain -enable -ignore-system 4d2ba53b\n...\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Volume Register Command\nDESCRIPTION: Basic command syntax for registering volumes in Nomad. The command requires a file path containing the volume specification or can accept input from STDIN using '-'.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/register.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad volume register [options] [file]\n```\n\n----------------------------------------\n\nTITLE: Configuring nspawn Task in Nomad Job Specification\nDESCRIPTION: This snippet demonstrates how to configure an nspawn task in a Nomad job specification. It includes setting the driver, image, and resolv_conf options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/nspawn.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"debian\" {\n  driver = \"nspawn\"\n  config {\n    image = \"/var/lib/machines/Debian\"\n    resolv_conf = \"copy-host\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating External Volumes in Nomad\nDESCRIPTION: These snippets demonstrate how to create external volumes using the Nomad CLI. It shows the command to create volumes from a HCL file and the resulting output with volume IDs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/hostpath/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cat hostpath.hcl | sed | nomad volume create -\nCreated external volume 7185cd16-993f-11eb-a052-0242ac110002 with ID test-volume[0]\n\n$ cat hostpath.hcl | sed | nomad volume create -\nCreated external volume 718bd6b4-993f-11eb-a052-0242ac110002 with ID test-volume[1]\n```\n\n----------------------------------------\n\nTITLE: Enabling Consul Connect for API Service\nDESCRIPTION: Service configuration block that enables Consul Connect with transparent proxy for the API service, listening on port 9001.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/service-mesh.mdx#2025-04-19_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"api\" {\n\n  # ...\n\n  service {\n    name = \"count-api\"\n    port = \"9001\"\n\n    connect {\n      sidecar_service {\n        proxy {\n          transparent_proxy {}\n        }\n      }\n    }\n  }\n\n  # ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating CPU Bandwidth Formula\nDESCRIPTION: Formula for calculating the total CPU bandwidth of a Nomad node by summing the product of frequency and number of cores for each core type (performance and efficiency).\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/cpu.mdx#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbandwidth = (p_cores * p_frequency) + (e_cores * e_frequency)\n```\n\n----------------------------------------\n\nTITLE: Executing action within a specific task in a Nomad job\nDESCRIPTION: This example shows how to execute an action named 'weather' within a specific task group and task of a Nomad job. It demonstrates using the -group, -task, and -job options to specify the execution context.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/action.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad action \\\n  -group=my-group \\\n  -task=my-task \\\n  -job=my-job \\\n  weather\n\nToronto: ☁️   +3°C\n```\n\n----------------------------------------\n\nTITLE: Draining a Node using JSON Payload in Nomad\nDESCRIPTION: This JSON payload specifies the drain configuration for a node, including the deadline for allocation migration and whether to ignore system jobs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/nodes.mdx#2025-04-19_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DrainSpec\": {\n    \"Deadline\": 3600000000000,\n    \"IgnoreSystemJobs\": true\n  },\n  \"Meta\": {\n    \"message\": \"drain for maintenance\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Raw Exec driver in Nomad plugin configuration\nDESCRIPTION: Configuration block for enabling the raw_exec driver in Nomad. For security reasons, the raw_exec driver is disabled by default and must be explicitly enabled in the client configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/raw_exec.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"raw_exec\" {\n  config {\n    enabled = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reserving CPU Resources by Bandwidth\nDESCRIPTION: HCL configuration to reserve CPU bandwidth for the operating system and non-Nomad processes using the client's reserved block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/cpu.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  reserved {\n    cpu = 3000 # mhz\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiline String Syntax in Nomad HCL Configuration\nDESCRIPTION: This snippet demonstrates the use of multiline string literals in Nomad HCL configuration using the heredoc style. It shows how to define a template with multi-line data content.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/index.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate {\n  data = <<EOF\nhello\n  world\n  EOF\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Gateway Block Structure in HCL\nDESCRIPTION: Shows the basic structure of a gateway block within a Nomad service connect configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/gateway.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nservice {\n  connect {\n    gateway {\n      # ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing all volumes with nomad volume status\nDESCRIPTION: Example of listing all volumes showing both Dynamic Host Volumes and Container Storage Interface volumes with their basic information including ID, name, namespace, plugin ID, node details, and state.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/status.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume status\nDynamic Host Volumes\nID        Name             Namespace  Plugin ID            Node ID   Node Pool  State\n070dc8ca  internal-plugin  default    mkdir                c3c27514  default    ready\n7ce38017  external-plugin  default    example-plugin-mkfs  c3c27514  default    ready\n\nContainer Storage Interface\nID            Name      Namespace  Plugin ID  Schedulable  Access Mode\nebs_prod_db1  database  default    ebs-prod   true         single-node-writer\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping with Operator Token\nDESCRIPTION: This shell command shows how to bootstrap the ACL system with an operator-provided token from a JSON file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @root-token.json \\\n    https://localhost:4646/v1/acl/bootstrap\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Maps in For Expressions\nDESCRIPTION: Example of using a for expression to iterate over a map/object, accessing both keys and values. This creates a list containing the sum of lengths of each key and value.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/expressions.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n[for k, v in var.map : length(k) + length(v)]\n```\n\n----------------------------------------\n\nTITLE: Configuring Virt Task Parameters in Nomad HCL\nDESCRIPTION: This snippet demonstrates the configuration of various parameters for a Virt task in Nomad. It includes settings for the VM image, hostname, commands, user authentication, and disk size.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/virt/task-config.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  image                           = \"local/focal-server-cloudimg-amd64.img\"\n  use_thing_copy                  = false\n  hostname                        = \"\"\n  cmds                            = [\"python -m http.server 8000\"]\n  #default_user_password          = \"CHANGE-ME\"\n  default_user_authorized_ssh_key = \"\"\n  user_data                       = \"\"\n  primary_disk_size               = 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Target Percentages for Spread in Nomad\nDESCRIPTION: This snippet demonstrates a spread block that specifies percentage-based allocation across two datacenters, distributing 60% to us-east1 and 40% to us-west1.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/spread.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nspread {\n  attribute = \"${node.datacenter}\"\n  weight    = 100\n\n  target \"us-east1\" {\n    percent = 60\n  }\n\n  target \"us-west1\" {\n      percent = 40\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication for Image Registry in Podman Task\nDESCRIPTION: Configures authentication for pulling images from a private registry. Includes options for username, password, and TLS verification.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  image = \"your.registry.tld/some/image\"\n  auth {\n    username = \"someuser\"\n    password = \"sup3rs3creT\"\n    tlsVerify = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Basic Service with Consul Provider\nDESCRIPTION: This example shows how to register a basic service named 'load-balancer' using the Consul provider. It specifies the service name and port.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/service.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nservice {\n  name = \"load-balancer\"\n  port = \"lb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling a job with detach option\nDESCRIPTION: Example of scheduling a job and returning immediately using the '-detach' option.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/run.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job run -detach example.nomad.hcl\nJob registration successful\nEvaluation ID: e18819c1-b83d-dc17-5e7b-b6f264990283\n```\n\n----------------------------------------\n\nTITLE: Configuring High Availability for Nomad Autoscaler in HCL\nDESCRIPTION: This snippet demonstrates how to configure the high availability block for the Nomad Autoscaler agent. It includes settings for enabling HA mode, specifying the lock namespace and path, and setting TTL and delay values for the leadership lock.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/agent/high_availability.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nhigh_availability {\n  enabled        = true\n  lock_namespace = \"prod\"\n  lock_path      = \"custom/lock/path\"\n  lock_ttl       = \"30s\"\n  lock_delay     = \"15s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul ACL Policy for Nomad Clients in HCL\nDESCRIPTION: This HCL snippet defines the minimal Consul ACL policy permissions required for Nomad clients. It includes read access to agent prefixes and write access to node and service prefixes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/acl.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nagent_prefix \"\" {\n  policy = \"read\"\n}\n\nnode_prefix \"\" {\n  policy = \"write\"\n}\n\nservice_prefix \"\" {\n  policy = \"write\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nomad Variables in HCL\nDESCRIPTION: This snippet demonstrates the structure of a Nomad Variable specification file. It includes optional path and namespace settings, and the required 'items' map for storing key-value pairs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/variables.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# A variable path can be specified in the specification file\n# and will be used when writing the variable without specifying a\n# path in the command or when writing JSON directly to the `/var/`\n# HTTP API endpoint\n# path = \"path/to/variable\"\n\n# The Namespace to write the variable can be included in the specification. This\n# value can be overridden by specifying the \"-namespace\" flag on the \"put\"\n# command.\n# namespace = \"default\"\n\n# The items map is the only strictly required part of a variable\n# specification, since path and namespace can be set via other means.\n# It contains the sensitive material to encrypt and store as a Nomad\n# variable. The entire items map is encrypted and decrypted as a\n# single unit.\n\n# REMINDER: While keys in the items map can contain dots, using them\n# in templates is easier when they do not. As a best practice, avoid\n# dotted keys when possible.\nitems {\n  key1 = \"value 1\"\n  key2 = \"value 2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exec2 Task Configuration Example\nDESCRIPTION: Task-level configuration for the Exec2 driver, showing command, arguments, filesystem access permissions, and OOM score adjustment.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/exec2.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  command       = \"/usr/bin/cat\"\n  args          = [\"/etc/os-release\"]\n  unveil        = [\"r:/etc/os-release\"]\n  oom_score_adj = 500\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure VMSS Target with Credentials in HCL\nDESCRIPTION: Configuration block for the azure-vmss target plugin using tenant_id, client_id, secret_access_key, and subscription_id for authentication. This method passes Azure credentials directly in the configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/target/azure-vmss.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"azure-vmss\" {\n  driver = \"azure-vmss\"\n  config = {\n    tenant_id         = \"02e99e69-91b0-4d0a-bd61-bf5c08fbfbab\"\n    client_id         = \"34c276fa-2a74-4cf9-9fce-4e60642274cb\"\n    secret_access_key = \"ThisIrznTIS_~FAKEj4X93FTyAgilUC511\"\n    subscription_id   = \"ee0886ab-5cc2-4583-a3f0-c4bfd044ee82\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FreeBSD rc.conf for Nomad (Shell)\nDESCRIPTION: This snippet shows the required lines to be added to the FreeBSD rc.conf file for running Nomad with the Pot task driver. It sets the Nomad user to root and defines the PATH environment variable.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/pot.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnomad_user=\"root\"\nnomad_env=\"PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/sbin:/bin\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Access Rules in Nomad\nDESCRIPTION: Example of setting read-only access policy for node operations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/acl-policy.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nnode {\n  policy = \"read\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Allocation Health Checks in Nomad\nDESCRIPTION: Shows how to make an API request to retrieve health checks for a specific allocation in Nomad. Includes the curl command and a sample JSON response.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/allocations.mdx#2025-04-19_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/allocation/177160af-26f6-619f-9c9f-5e46d1104395/checks\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"a1ed96606694742bf201a640a607e306\": {\n    \"Check\": \"redis_probe\",\n    \"Group\": \"example.cache[0]\",\n    \"ID\": \"a1ed96606694742bf201a640a607e306\",\n    \"Mode\": \"healthiness\",\n    \"Output\": \"nomad: tcp ok\",\n    \"Service\": \"redis\",\n    \"Status\": \"success\",\n    \"Timestamp\": 1690442203\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to a Nomad Group\nDESCRIPTION: Demonstrates how to add arbitrary user-defined metadata to a group using the meta block. This metadata can be used for labeling or additional information about the group.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/group.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"example\" {\n  meta {\n    my-key = \"my-value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Docker Client Attributes in Nomad Job Constraints\nDESCRIPTION: Example job configuration that demonstrates how to use Docker-related client attributes in job constraints. This constraint requires Docker version higher than 1.2 for job placement.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_27\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  # Require docker version higher than 1.2.\n  constraint {\n    attribute = \"${attr.driver.docker.version}\"\n    operator  = \">\"\n    version   = \"1.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lightrun Task in HCL\nDESCRIPTION: HCL configuration block for setting up a Lightrun Java task in a Nomad job specification, including required Lightrun server details, secret, and certificate.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/lightrun.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"run-with-lightrun\" {\n  driver = \"lightrun-java\"\n\n  config {\n    lightrun_server = \"https://app.lightrun.com/company/<COMPANY-NAME>\"\n    lightrun_secret = \"<COMPANY-SECRET>\"\n    lightrun_certificate = \"ee80811b38e7e6c2dc4cc372cbea86bd86b446b012e427f2e19bf094afba5d12\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Percentage-Based Batching of Allocation Restarts in Nomad Job\nDESCRIPTION: This example demonstrates how to batch allocation restarts as a percentage of total running allocations. It uses the '-batch-size' flag with a percentage value (50%) to restart half of the total allocations in each batch.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/restart.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job restart -batch-size=50% example\n==> 2023-02-28T18:52:47-05:00: Restarting 5 allocations\n==> 2023-02-28T18:52:47-05:00: Restarting 1st batch of 3 allocations\n    2023-02-28T18:52:47-05:00: Restarting running tasks in allocation \"d28f6f60\" for group \"proxy\"\n    2023-02-28T18:52:47-05:00: Restarting running tasks in allocation \"b931b496\" for group \"proxy\"\n    2023-02-28T18:52:47-05:00: Restarting running tasks in allocation \"18673b40\" for group \"proxy\"\n==> 2023-02-28T18:52:48-05:00: Restarting 2nd batch of 2 allocations\n    2023-02-28T18:52:48-05:00: Restarting running tasks in allocation \"439b1632\" for group \"web\"\n    2023-02-28T18:52:48-05:00: Restarting running tasks in allocation \"8fae60f6\" for group \"web\"\n==> 2023-02-28T18:52:48-05:00: Finished job restart\n\nAll allocations restarted successfully!\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul ACL Policy for Nomad Servers in HCL\nDESCRIPTION: This HCL snippet defines the minimal Consul ACL policy permissions required for Nomad servers. It includes read access to agent prefixes, write access to node and service prefixes, and write access to ACL and mesh.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/acl.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nagent_prefix \"\" {\n  policy = \"read\"\n}\n\nnode_prefix \"\" {\n  policy = \"write\"\n}\n\nservice_prefix \"\" {\n  policy = \"write\"\n}\n\nacl  = \"write\"\nmesh = \"write\"\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificates with AWS ACM\nDESCRIPTION: Creates and validates SSL certificates using AWS Certificate Manager with DNS validation through Route53. Requires hosted zone ID and handles certificate lifecycle management.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/aws-oidc-provider.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"zone_id\" {\n  type    = string\n  default = \"<HOSTED_ZONE_ID>\"\n}\n\nresource \"aws_acm_certificate\" \"example\" {\n  domain_name       = var.domain_name\n  validation_method = \"DNS\"\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n\nresource \"aws_route53_record\" \"cert_dns\" {\n  allow_overwrite = true\n  name            = tolist(aws_acm_certificate.example.domain_validation_options)[0].resource_record_name\n  records         = [tolist(aws_acm_certificate.example.domain_validation_options)[0].resource_record_value]\n  type            = tolist(aws_acm_certificate.example.domain_validation_options)[0].resource_record_type\n  zone_id         = var.zone_id\n  ttl             = 60\n}\n\nresource \"aws_acm_certificate_validation\" \"example\" {\n  certificate_arn         = aws_acm_certificate.example.arn\n  validation_record_fqdns = [aws_route53_record.cert_dns.fqdn]\n}\n```\n\n----------------------------------------\n\nTITLE: Unblocking a Nomad deployment example\nDESCRIPTION: This example demonstrates how to manually unblock a deployment using its ID, and then check its status. It shows the command execution and the resulting output, including the deployment status across multiple regions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/deployment/unblock.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad deployment unblock 8990cfbc\nDeployment \"8990cfbc-28c0-cb28-ca31-856cf691b987\" unblocked\n\n==> Monitoring evaluation \"a2d97ad5\"\n    Evaluation triggered by job \"example\"\n    Evaluation within deployment: \"8990cfbc\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"a2d97ad5\" finished with status \"complete\"\n\n$ nomad deployment status 8990cfbc\nID          = 8990cfbc\nJob ID      = example\nJob Version = 2\nStatus      = successful\nDescription = Deployment successful\n\nMulti-region Deployment\nRegion        ID        Status\nwest          8990cfbc  successful\nsouth         085787e3  blocked\neast (error)  <none>    <none>\n\nDeployed\nTask Group  Desired  Placed  Healthy  Unhealthy\ncache       3        2       1        0\n```\n\n----------------------------------------\n\nTITLE: Multi-Task Consul Namespace Configuration\nDESCRIPTION: Demonstrates configuring different Consul namespaces and clusters for multiple tasks within a group.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/consul.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n\n    task \"web\" {\n\n      consul {\n        namespace = \"engineering/frontend\"\n      }\n\n      template {\n        data        = \"FRONTEND_NAME={{key \\\"fe/name\\\"}}\"\n        destination = \"local/config.txt\"\n      }\n    }\n\n    task \"app\" {\n\n      consul {\n        namespace = \"engineering/apps\"\n        cluster   = \"prod-apps\"\n      }\n\n      template {\n        data        = \"APP_NAME={{key \\\"app/name\\\"}}\"\n        destination = \"local/config.txt\"\n      }\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring Variable Lock - Shell Request\nDESCRIPTION: HTTP PUT request to acquire a lock on a variable at a specified path.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/variables/locks.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    -XPUT -d@spec.nsv.json \\\n    https://localhost:4646/v1/var/example/first?lock-acquire\n```\n\n----------------------------------------\n\nTITLE: Dropping Linux Capabilities in Podman Task Configuration\nDESCRIPTION: Specifies Linux capabilities to be removed from the container using the --cap-drop option.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  cap_drop = [\n    \"MKNOD\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CSI Volume Configuration for Expansion\nDESCRIPTION: This HCL snippet shows the updated volume configuration with increased capacity, used for expanding the existing volume.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/csi.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nid        = \"ebs_prod_db1\"\nname      = \"database\"\ntype      = \"csi\"\nplugin_id = \"ebs-prod\"\n# all of the above must remain the same\n\ncapacity_min = \"100gib\" # double\ncapacity_max = \"100gib\" # increased to match\n\n# ... etc ...\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS KMS Keyring in Nomad\nDESCRIPTION: Example configuration for setting up AWS KMS keyring in Nomad's configuration file. Includes settings for region, access credentials, KMS key ID, and endpoint configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/keyring/awskms.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nkeyring \"awskms\" {\n  active = true\n  name   = \"example\"\n\n  # fields specific to awskms\n  region     = \"us-east-1\"\n  access_key = \"AKIAIOSFODNN7EXAMPLE\"\n  secret_key = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n  kms_key_id = \"19ec80b0-dfdd-4d97-8164-c6examplekey\"\n  endpoint   = \"https://vpce-0e1bb1852241f8cc6-pzi0do8n.kms.us-east-1.vpce.amazonaws.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Consul Token Configuration with Workload Identity\nDESCRIPTION: Shows how to configure Consul token access using workload identity with template integration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/consul.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n  group \"app\" {\n    task \"web\" {\n      identity {\n        name = \"consul_default\"\n      }\n\n      template {\n        data        = \"APP_NAME={{key \\\"app/name\\\"}}\"\n        destination = \"local/config.txt\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Raft Logs Export to File\nDESCRIPTION: Example showing how to export Raft logs to a file and examine them using jq. Requires sudo permissions to access the data directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/raft/logs.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo nomad operator raft logs /var/nomad/data > ~/raft-logs.json\n$ jq . < ~/raft-logs.json\n```\n\n----------------------------------------\n\nTITLE: Creating a Block Structure in HCL\nDESCRIPTION: An example of a block structure in HCL, showing a task block with a label, containing nested arguments and a config sub-block. This demonstrates the hierarchical nature of HCL configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/syntax.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"webserver\" {\n  driver = \"docker\"\n\n  config {\n    # ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing debug information for specific servers and nodes\nDESCRIPTION: Example of using the nomad operator debug command to capture information from all servers and two specific client nodes for a duration of 5 seconds with 5-second intervals.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/debug.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator debug -duration 5s -interval 5s -server-id all -node-id b5,20\nStarting debugger...\n\n          Servers: (3/3) [server1.global server2.global server3.global]\n          Clients: (2/3) [b547cd3a-085f-68c2-55f4-e99beebb0433 20c0964b-72cc-4083-87fe-ec6905b6230a]\n         Interval: 5s\n         Duration: 5s\n\nCapturing cluster data...\n    Capture interval 0000\n    Capture interval 0001\n    Capture interval 0002\n    Capture interval 0003\nCreated debug archive: nomad-debug-2020-12-08-034455Z.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Evaluating a job with force-reschedule option\nDESCRIPTION: Example of using the '-force-reschedule' option to reschedule eligible failed allocations when evaluating a job.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/eval.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job eval -force-reschedule job1\n==> Monitoring evaluation \"0f3bc0f3\"\n    Evaluation triggered by job \"test\"\n    Evaluation within deployment: \"51baf5c8\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"0f3bc0f3\" finished with status \"complete\"\n```\n\n----------------------------------------\n\nTITLE: Node Information Response Structure in JSON\nDESCRIPTION: Sample JSON response showing the complete structure of a Nomad node information response including attributes, drivers, events, resources, and status information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/nodes.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Attributes\": {\n    \"consul.datacenter\": \"dc1\",\n    \"consul.revision\": \"d2adfc0bd\",\n    \"consul.server\": \"true\",\n    \"consul.version\": \"1.5.2\",\n    \"cpu.arch\": \"amd64\",\n    \"cpu.frequency\": \"4000\",\n    \"cpu.modelname\": \"Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz\",\n    \"cpu.numcores\": \"8\",\n    \"cpu.totalcompute\": \"32000\",\n    \"driver.docker\": \"1\",\n    \"driver.docker.bridge_ip\": \"172.17.0.1\",\n    \"driver.docker.os_type\": \"linux\",\n    \"driver.docker.runtimes\": \"runc\",\n    \"driver.docker.version\": \"18.09.6\",\n    \"driver.docker.volumes.enabled\": \"true\",\n    \"driver.mock_driver\": \"1\",\n    \"driver.raw_exec\": \"1\",\n    \"kernel.name\": \"linux\",\n    \"kernel.version\": \"4.19.56\",\n    \"memory.totalbytes\": \"16571674624\",\n    \"nomad.revision\": \"30da2b8f6c3aa860113c9d313c695a05eff5bb97+CHANGES\",\n    \"nomad.version\": \"1.1.0\",\n    \"os.name\": \"nixos\",\n    \"os.signals\": \"SIGTTOU,SIGTTIN,SIGSTOP,SIGSYS,SIGXCPU,SIGBUS,SIGKILL,SIGTERM,SIGIOT,SIGILL,SIGIO,SIGQUIT,SIGSEGV,SIGUSR1,SIGXFSZ,SIGCHLD,SIGUSR2,SIGURG,SIGFPE,SIGHUP,SIGINT,SIGPROF,SIGCONT,SIGALRM,SIGPIPE,SIGTRAP,SIGTSTP,SIGWINCH,SIGABRT\",\n    \"os.version\": \"\\\"19.03.173017.85f820d6e41 (Koi)\\\"\",\n    \"unique.advertise.address\": \"127.0.0.1:4646\",\n    \"unique.cgroup.mountpoint\": \"/sys/fs/cgroup\",\n    \"unique.consul.name\": \"mew\",\n    \"unique.hostname\": \"mew\",\n    \"unique.network.ip-address\": \"127.0.0.1\",\n    \"unique.storage.bytesfree\": \"8273698816\",\n    \"unique.storage.bytestotal\": \"8285835264\",\n    \"unique.storage.volume\": \"tmpfs\"\n  },\n  \"ComputedClass\": \"v1:390058673753570317\",\n  \"CreateIndex\": 6,\n  \"Datacenter\": \"dc1\",\n  \"Drain\": false,\n  \"DrainStrategy\": null,\n  \"Drivers\": {\n    \"docker\": {\n      \"Attributes\": {\n        \"driver.docker\": \"true\",\n        \"driver.docker.bridge_ip\": \"172.17.0.1\",\n        \"driver.docker.os_type\": \"linux\",\n        \"driver.docker.runtimes\": \"runc\",\n        \"driver.docker.version\": \"18.09.6\",\n        \"driver.docker.volumes.enabled\": \"true\"\n      },\n      \"Detected\": true,\n      \"HealthDescription\": \"Healthy\",\n      \"Healthy\": true,\n      \"UpdateTime\": \"2019-08-26T12:22:50.762716458+02:00\"\n    },\n    \"exec\": {\n      \"Attributes\": null,\n      \"Detected\": false,\n      \"HealthDescription\": \"Driver must run as root\",\n      \"Healthy\": false,\n      \"UpdateTime\": \"2019-08-26T12:22:50.6873373+02:00\"\n    },\n    \"java\": {\n      \"Attributes\": null,\n      \"Detected\": false,\n      \"HealthDescription\": \"Driver must run as root\",\n      \"Healthy\": false,\n      \"UpdateTime\": \"2019-08-26T12:22:50.687274359+02:00\"\n    },\n    \"qemu\": {\n      \"Attributes\": null,\n      \"Detected\": false,\n      \"HealthDescription\": \"\",\n      \"Healthy\": false,\n      \"UpdateTime\": \"2019-08-26T12:22:50.688023782+02:00\"\n    },\n    \"raw_exec\": {\n      \"Attributes\": {\n        \"driver.raw_exec\": \"true\"\n      },\n      \"Detected\": true,\n      \"HealthDescription\": \"Healthy\",\n      \"Healthy\": true,\n      \"UpdateTime\": \"2019-08-26T12:22:50.687733347+02:00\"\n    },\n    \"rkt\": {\n      \"Attributes\": null,\n      \"Detected\": false,\n      \"HealthDescription\": \"Driver must run as root\",\n      \"Healthy\": false,\n      \"UpdateTime\": \"2019-08-26T12:22:50.68796043+02:00\"\n    }\n  },\n  \"Events\": [\n    {\n      \"CreateIndex\": 6,\n      \"Details\": null,\n      \"Message\": \"Node registered\",\n      \"Subsystem\": \"Cluster\",\n      \"Timestamp\": \"2021-03-31T12:11:39Z\"\n    },\n    {\n      \"CreateIndex\": 11,\n      \"Details\": null,\n      \"Message\": \"Node drain strategy set\",\n      \"Subsystem\": \"Drain\",\n      \"Timestamp\": \"2021-03-31T12:12:20.213412Z\"\n    },\n    {\n      \"CreateIndex\": 12,\n      \"Details\": null,\n      \"Message\": \"Node drain complete\",\n      \"Subsystem\": \"Drain\",\n      \"Timestamp\": \"2021-03-31T12:12:20.213639Z\"\n    }\n  ],\n  \"HTTPAddr\": \"127.0.0.1:4646\",\n  \"HostVolumes\": {\n    \"certificates\": {\n      \"Name\": \"certificates\",\n      \"Path\": \"/etc/ssl/certs\",\n      \"ReadOnly\": true\n    },\n    \"prod-mysql-a\": {\n      \"Name\": \"prod-mysql-a\",\n      \"Path\": \"/data/mysql\",\n      \"ReadOnly\": false\n    }\n  },\n  \"HostNetworks\" : {\n    \"public\": {\n      \"Name\": \"public\",\n      \"CIDR\": \"10.199.0.200/24\",\n      \"ReservedPorts\": \"8080,8081\"\n    }\n  }\n  \"ID\": \"1ac61e33-a465-2ace-f63f-cffa1285e7eb\",\n  \"LastDrain\": {\n    \"AccessorID\": \"4e1b7ce1-f8aa-d7ff-09f1-55c3a0fd3988\",\n    \"Meta\": {\n      \"message\": \"node maintenance\"\n    },\n    \"StartedAt\": \"2021-03-31T12:12:20Z\",\n    \"Status\": \"complete\",\n    \"UpdatedAt\": \"2021-03-31T12:12:20Z\"\n  },\n  \"Links\": {\n    \"consul\": \"dc1.mew\"\n  },\n  \"Meta\": {\n    \"connect.log_level\": \"info\",\n    \"connect.sidecar_image\": \"envoyproxy/envoy:v1.11.1\"\n  },\n  \"ModifyIndex\": 14,\n  \"Name\": \"mew\",\n  \"NodeClass\": \"\",\n  \"NodePool\": \"default\",\n  \"NodeResources\": {\n    \"Cpu\": {\n      \"CpuShares\": 32000\n    },\n    \"Devices\": [\n      {\n        \"Attributes\": {\n          \"attrB\": {\n            \"Float\": 10.5,\n            \"Unit\": \"MW\"\n          },\n          \"attrA\": {\n            \"Int\": 1024,\n            \"Unit\": \"MB\"\n          }\n        },\n        \"Instances\": [\n          {\n            \"HealthDescription\": \"\",\n            \"Healthy\": true,\n            \"ID\": \"6a61929e-d572-092d-5921-156a913f8e56\",\n            \"Locality\": {\n              \"PciBusID\": \"77cda534-0660-2688-6c2e-ad6c62fc5ff3\"\n            }\n          }\n        ],\n        \"Name\": \"modelA\",\n        \"Type\": \"skeleton\",\n        \"Vendor\": \"hashicorp\"\n      },\n      {\n        \"Attributes\": {\n          \"attrB\": {\n            \"Float\": 10.5,\n            \"Unit\": \"MW\"\n          },\n          \"attrA\": {\n            \"Int\": 1024,\n            \"Unit\": \"MB\"\n          }\n        },\n        \"Instances\": [\n          {\n            \"HealthDescription\": \"\",\n            \"Healthy\": true,\n            \"ID\": \"73af5d3e-00f9-0786-9bc1-8f5ffa953f15\",\n            \"Locality\": {\n              \"PciBusID\": \"dbda64d1-ad25-6c7c-d3fb-798bae0581bf\"\n            }\n          }\n        ],\n        \"Name\": \"modelB\",\n        \"Type\": \"skeleton\",\n        \"Vendor\": \"hashicorp\"\n      }\n    ],\n    \"Disk\": {\n      \"DiskMB\": 7890\n    },\n    \"Memory\": {\n      \"MemoryMB\": 15803\n    },\n    \"Networks\": [\n      {\n        \"CIDR\": \"127.0.0.1/32\",\n        \"Device\": \"lo\",\n        \"DynamicPorts\": null,\n        \"IP\": \"127.0.0.1\",\n        \"MBits\": 1000,\n        \"Mode\": \"\",\n        \"ReservedPorts\": null\n      },\n      {\n        \"CIDR\": \"::1/128\",\n        \"Device\": \"lo\",\n        \"DynamicPorts\": null,\n        \"IP\": \"::1\",\n        \"MBits\": 1000,\n        \"Mode\": \"\",\n        \"ReservedPorts\": null\n      }\n    ],\n    \"NodeNetworks\": [\n      {\n        \"Addresses\": [\n          {\n            \"Address\": \"127.0.0.1\",\n            \"Alias\": \"default\",\n            \"Family\": \"ipv4\",\n            \"Gateway\": \"\",\n            \"ReservedPorts\": \"\"\n          }\n        ],\n        \"Device\": \"lo\",\n        \"MacAddress\": \"00:00:00:00:00:00\",\n        \"Mode\": \"host\"\n      }\n    ]\n  },\n  \"Reserved\": {\n    \"CPU\": 0,\n    \"Devices\": null,\n    \"DiskMB\": 0,\n    \"IOPS\": 0,\n    \"MemoryMB\": 0,\n    \"Networks\": null\n  },\n  \"ReservedResources\": {\n    \"Cpu\": {\n      \"CpuShares\": 0\n    },\n    \"Disk\": {\n      \"DiskMB\": 0\n    },\n    \"Memory\": {\n      \"MemoryMB\": 0\n    },\n    \"Networks\": {\n      \"ReservedHostPorts\": \"\"\n    }\n  },\n  \"Resources\": {\n    \"CPU\": 32000,\n    \"Devices\": null,\n    \"DiskMB\": 7890,\n    \"IOPS\": 0,\n    \"MemoryMB\": 15803,\n    \"Networks\": [\n      {\n        \"CIDR\": \"127.0.0.1/32\",\n        \"Device\": \"lo\",\n        \"DynamicPorts\": null,\n        \"IP\": \"127.0.0.1\",\n        \"MBits\": 1000,\n        \"Mode\": \"\",\n        \"ReservedPorts\": null\n      },\n      {\n        \"CIDR\": \"::1/128\",\n        \"Device\": \"lo\",\n        \"DynamicPorts\": null,\n        \"IP\": \"::1\",\n        \"MBits\": 1000,\n        \"Mode\": \"\",\n        \"ReservedPorts\": null\n      }\n    ]\n  },\n  \"SchedulingEligibility\": \"eligible\",\n  \"SecretID\": \"\",\n  \"Status\": \"ready\",\n  \"StatusDescription\": \"\",\n  \"StatusUpdatedAt\": 1566814982,\n  \"TLSEnabled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an ACL Binding Rule JSON Payload\nDESCRIPTION: JSON payload for creating a new ACL Binding Rule. Includes required fields such as authentication method, bind type, bind name, and optional fields like description and selector expression.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/binding-rules.mdx#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Description\": \"example-acl-binding-rule\",\n  \"AuthMethod\": \"auth0\",\n  \"Selector\": \"engineering in list.roles\",\n  \"BindType\": \"role\",\n  \"BindName\": \"eng-ro\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Job ID instead of Allocation ID\nDESCRIPTION: Syntax for using the -job flag to select a random allocation from a specified job.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/exec.mdx#2025-04-19_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad alloc exec -job <job-id> <command> [<args>...]\n```\n\n----------------------------------------\n\nTITLE: Using nomad node drain command\nDESCRIPTION: The basic syntax for using the 'nomad node drain' command. It requires specifying options and a node identifier.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/drain.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad node drain [options] <node>\n```\n\n----------------------------------------\n\nTITLE: Git Repository Cloning with Specific Branch and Depth in Nomad\nDESCRIPTION: Shows how to clone a Git repository with specific ref (branch, tag or commit) and depth settings, which can be useful to limit the amount of data transferred.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/artifact.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nartifact {\n  source      = \"git::https://github.com/hashicorp/nomad-guides\"\n  destination = \"local/repo\"\n  options {\n    ref = \"main\"\n    depth = 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Initial Token with Provided Token\nDESCRIPTION: Example of bootstrapping the initial ACL token using a user-provided token stored in a file named 'root.token'.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/bootstrap.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl bootstrap root.token\nAccessor ID  = 5b7fd453-d3f7-6814-81dc-fcfe6daedea5\nSecret ID    = 2b778dd9-f5f1-6f29-b4b4-9a5fa948757a\nName         = Bootstrap Token\nType         = management\nGlobal       = true\nPolicies     = n/a\nCreate Time  = 2017-09-11 17:38:10.999089612 +0000 UTC\nCreate Index = 7\nModify Index = 7\n```\n\n----------------------------------------\n\nTITLE: Using csvdecode Function with CSV String in Shell Session\nDESCRIPTION: This example demonstrates the csvdecode function converting a CSV string with a header row and two data rows into a list of maps. Each map uses the header values as keys mapped to the corresponding values from each data row.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/encoding/csvdecode.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> csvdecode(\"a,b,c\\n1,2,3\\n4,5,6\")\n[\n  {\n    \"a\" = \"1\"\n    \"b\" = \"2\"\n    \"c\" = \"3\"\n  },\n  {\n    \"a\" = \"4\"\n    \"b\" = \"5\"\n    \"c\" = \"6\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Allocation Directory Structure in Shell\nDESCRIPTION: Shows the typical directory structure of a Nomad allocation with two tasks. This structure includes shared and task-specific directories for data, logs, and temporary files.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/filesystem.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n.\n├── alloc\n│   ├── data\n│   ├── logs\n│   │   ├── task1.stderr.0\n│   │   ├── task1.stdout.0\n│   │   ├── task2.stderr.0\n│   │   └── task2.stdout.0\n│   └── tmp\n├── task1\n│   ├── local\n│   ├── private\n│   ├── secrets\n│   └── tmp\n└── task2\n    ├── local\n    ├── private\n    ├── secrets\n    └── tmp\n```\n\n----------------------------------------\n\nTITLE: Installing Consul CNI Plugin on Ubuntu/Debian\nDESCRIPTION: Command to install the consul-cni package on Ubuntu or Debian systems using apt-get package manager. This is required for transparent proxying with Consul service mesh.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/partials/install/install-consul-cni-plugin.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt-get install -y consul-cni\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a Recommendation with cURL in Shell\nDESCRIPTION: This snippet shows how to create or update a recommendation using a POST request with a JSON payload containing the recommendation details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/recommendations.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://localhost:4646/v1/recommendation\n```\n\n----------------------------------------\n\nTITLE: Basic Dispatch Payload Block Configuration\nDESCRIPTION: Minimal configuration example showing how to specify a dispatch_payload block that writes payload content to a config.json file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/dispatch_payload.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndispatch_payload {\n  file = \"config.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Job Version Tag with cURL in Nomad API\nDESCRIPTION: This cURL command demonstrates how to create a tag named 'golden-version' for version zero of the 'hello-world' job using the Nomad API. It includes the necessary headers and JSON payload.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_49\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -X POST \\\n localhost:4646/v1/job/hello-world/versions/golden-version/tag \\\n -H \"Content-Type: application/json\" -d \\\n '{\"Version\": 0, \"Description\": \"The version we can roll back to.\"}'\n```\n\n----------------------------------------\n\nTITLE: Exporting Raft State to JSON File\nDESCRIPTION: Demonstrates how to export Raft state to a JSON file and view it using jq. Requires sudo permissions to access the data directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/raft/state.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo nomad operator raft state /var/nomad/data > ~/raft-state.json\n$ jq . < ~/raft-state.json\n```\n\n----------------------------------------\n\nTITLE: Limits Configuration\nDESCRIPTION: Definition of system limits for HTTP and RPC connections, including timeouts and maximum connections per client.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/index.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nlimits {\n  https_handshake_timeout = \"5s\"\n  http_max_conns_per_client = 100\n  rpc_handshake_timeout = \"5s\"\n  rpc_max_conns_per_client = 100\n}\n```\n\n----------------------------------------\n\nTITLE: GPU Memory Affinity Configuration\nDESCRIPTION: Two equivalent configurations for setting GPU memory preferences using different units.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/device.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ndevice \"nvidia/gpu\" {\n  affinity {\n    attribute = \"${device.attr.memory}\"\n    operator  = \">=\"\n    value     = \"1.5 GiB\"\n    weight    = 75\n  }\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\ndevice \"nvidia/gpu\" {\n  affinity {\n    attribute = \"${device.attr.memory}\"\n    operator  = \">=\"\n    value     = \"1500 MiB\"\n    weight    = 75\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Cluster Scaling Policies in File\nDESCRIPTION: Example of multiple scaling policies defined in a configuration file, showing AWS and Azure cluster scaling setups with various checks and targets.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/policy.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nscaling \"aws_cluster_policy\" {\n  enabled = true\n  min     = 1\n  max     = 2\n\n  policy {\n    cooldown            = \"2m\"\n    evaluation_interval = \"1m\"\n\n    check \"cpu_allocated_percentage\" {\n      source = \"prometheus\"\n      query  = \"...\"\n\n      strategy \"target-value\" {\n        target = 70\n      }\n    }\n\n    check \"mem_allocated_percentage\" {\n      source = \"prometheus\"\n      query  = \"...\"\n\n      strategy \"target-value\" {\n        target = 70\n      }\n    }\n\n    target \"aws-asg\" {\n      dry-run             = \"false\"\n      aws_asg_name        = \"hashistack-nomad_client\"\n      node_class          = \"hashistack\"\n      node_drain_deadline = \"5m\"\n    }\n  }\n}\n\nscaling \"azure_cluster_policy\" {\n  enabled = true\n  min     = 1\n  max     = 2\n\n  policy {\n    ...\n    target \"azure-vmss\" {\n      resource_group      = \"hashistack\"\n      vm_scale_set        = \"clients\"\n      node_class          = \"hashistack\"\n      node_drain_deadline = \"5m\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Job - Shell Request\nDESCRIPTION: POST request to create a new job using a payload file\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://localhost:4646/v1/jobs\n```\n\n----------------------------------------\n\nTITLE: Applying ACL Policy to Task via Nomad CLI\nDESCRIPTION: This shell command applies an ACL policy to a specific task within a job. It associates the 'redis-policy' with the 'redis' task in the 'cache' group of the 'example' job in the 'default' namespace.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/variables.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnomad acl policy apply \\\n   -namespace default -job example -group cache -task redis \\\n   redis-policy ./policy.hcl\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Rules for Input Variables\nDESCRIPTION: Example showing how to add custom validation logic to a variable to enforce specific rules. The condition expression must evaluate to true for valid values, and the error_message will be displayed when validation fails.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/variables.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"image_id\" {\n  type        = string\n  description = \"The id of the machine image (AMI) to use for the server.\"\n\n  validation {\n    condition     = substr(var.image_id, 0, 4) == \"ami-\"\n    error_message = \"The image_id value must be a valid AMI id, starting with \\\"ami-\\\".\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nomad Namespace Command Usage\nDESCRIPTION: Basic command syntax for using the Nomad namespace command with its various subcommands including apply, delete, inspect, list, and status operations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/namespace/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnomad namespace <subcommand> [options]\n```\n\n----------------------------------------\n\nTITLE: Updating Node Metadata Request Payload\nDESCRIPTION: Example JSON payload for updating dynamic node metadata via POST request. Shows setting new values and unsetting existing ones using null.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Meta\": {\n    \"connect.log_level\": \"debug\",\n    \"key_to_unset\": null,\n    \"foo\": \"bar\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Variables via HTTP GET\nDESCRIPTION: Makes a GET request to list all variables with optional filtering by prefix and namespace. Returns variable metadata without decrypted values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/variables/variables.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/vars?namespace=prod&prefix=example\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Initial Token Without Arguments\nDESCRIPTION: Example of bootstrapping the initial ACL token using the `nomad acl bootstrap` command without any arguments. This generates a system token and displays its details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/bootstrap.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl bootstrap\nAccessor ID  = 5b7fd453-d3f7-6814-81dc-fcfe6daedea5\nSecret ID    = 9184ec35-65d4-9258-61e3-0c066d0a45c5\nName         = Bootstrap Token\nType         = management\nGlobal       = true\nPolicies     = n/a\nCreate Time  = 2017-09-11 17:38:10.999089612 +0000 UTC\nCreate Index = 7\nModify Index = 7\n```\n\n----------------------------------------\n\nTITLE: Renewing Variable Lock - Shell Request\nDESCRIPTION: HTTP PUT request to renew an existing lock on a variable.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/variables/locks.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    -XPUT -d@spec.nsv.json \\\n    https://localhost:4646/v1/var/example/first?lock-renew\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing CNI Plugins for Nomad on Linux\nDESCRIPTION: This shell script detects the system architecture, downloads the CNI plugins package (version 1.6.2), and extracts the binaries to the /opt/cni/bin directory. The script handles both amd64 and arm64 architectures automatically.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/partials/install/install-cni-plugins.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport ARCH_CNI=$( [ $(uname -m) = aarch64 ] && echo arm64 || echo amd64)\nexport CNI_PLUGIN_VERSION=v1.6.2\ncurl -L -o cni-plugins.tgz \"https://github.com/containernetworking/plugins/releases/download/${CNI_PLUGIN_VERSION}/cni-plugins-linux-${ARCH_CNI}-${CNI_PLUGIN_VERSION}\".tgz && \\\n  sudo mkdir -p /opt/cni/bin && \\\n  sudo tar -C /opt/cni/bin -xzf cni-plugins.tgz\n```\n\n----------------------------------------\n\nTITLE: Running Consul Agent in Dev Mode for Service Mesh\nDESCRIPTION: Command to start a Consul agent in development mode, which is required for Nomad's service mesh integration. Consul must be in your PATH, and version 1.6 or later is required.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/service-mesh.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ consul agent -dev\n```\n\n----------------------------------------\n\nTITLE: Force Leave Request - Shell\nDESCRIPTION: POST request to force a failed node to leave the cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    https://localhost:4646/v1/agent/force-leave?node=client-ab2e23dc&prune=true\n```\n\n----------------------------------------\n\nTITLE: Expanding CSI Volume using Nomad CLI\nDESCRIPTION: This shell command expands the CSI volume in Nomad using the volume create command with the updated HCL configuration file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/csi.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume create volume.hcl\nCreated external volume vol-asdf1234 with ID ebs_prod_db1\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cleanup Task Pattern with Poststop Hook in Nomad\nDESCRIPTION: This snippet demonstrates a cleanup task that runs after the main application has stopped. It uses a poststop hook to send a notification to Slack when the main tasks have completed, useful for post-processing or notifications.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/lifecycle.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n  task \"main-app\" {\n    ...\n  }\n\n  task \"announce\" {\n    lifecycle {\n      hook = \"poststop\"\n    }\n\n    driver = \"docker\"\n    config {\n      image = \"alpine/httpie\"\n      command = \"http\"\n      args = [\n        \"POST\",\n        \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\",\n        \"text='All done!'\"\n      ]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Policy Block in Nomad Autoscaler\nDESCRIPTION: This snippet demonstrates how to configure the policy block in the Nomad Autoscaler configuration. It shows setting up a policy directory, custom default cooldown, and disabling the nomad policy source.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/agent/policy.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\npolicy {\n  dir              = \"/opt/nomad-autoscaler/policies\"\n  default_cooldown = \"2m\"\n\n  source \"nomad\" {\n    enabled = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ceph Volume in Nomad\nDESCRIPTION: Command to create a new volume in Nomad using a volume specification file. The volume requires secrets block with userID and userKey from Ceph keyring.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/ceph-csi-plugin/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad volume create ./volume.hcl\nCreated external volume 0001-0024-e9ba69fa-67ff-5920-b374-84d5801edd19-0000000000000002-3603408d-a9ca-11eb-8ace-080027c5bc64 with ID testvolume\n```\n\n----------------------------------------\n\nTITLE: Connect Ingress Gateway Configuration\nDESCRIPTION: Example of configuring a Consul Connect ingress gateway service with TCP listener for accessing an API service.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/connect.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\njob \"ingress-demo\" {\n\n  datacenters = [\"dc1\"]\n\n  group \"ingress-group\" {\n\n    network {\n      mode = \"bridge\"\n      port \"inbound\" {\n        static = 8080\n        to     = 8080\n      }\n    }\n\n    service {\n      name = \"my-ingress-service\"\n      port = \"8080\"\n\n      connect {\n        gateway {\n          ingress {\n            listener {\n              port     = 8080\n              protocol = \"tcp\"\n              service {\n                name = \"uuid-api\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nomad ACL Token Example\nDESCRIPTION: Demonstrates updating an ACL token with a new name, showing the complete output including the token's accessor ID, secret ID, type, policies, and roles.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/token/update.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl token update -name=\"example-acl-token-updated\" ef851ca0-b331-da5d-bbeb-7ede8f7c9151\nAccessor ID  = ef851ca0-b331-da5d-bbeb-7ede8f7c9151\nSecret ID    = 11d5348a-8768-5baa-6185-c154980e1488\nName         = example-acl-token-updated\nType         = client\nGlobal       = false\nCreate Time  = 2022-08-23 12:16:09.680699039 +0000 UTC\nExpiry Time  = <never>\nCreate Index = 140\nModify Index = 151\nPolicies     = [example-acl-policy]\n\nRoles\nID                                    Name\n2fe0c403-4502-e99d-4c79-a2821355e66d  example-acl-role-updated\n```\n\n----------------------------------------\n\nTITLE: Restarting All Allocations in Nomad Job\nDESCRIPTION: This example demonstrates how to restart all running tasks of all allocations in a Nomad job named 'example'. It shows the output of the command, including the number of allocations restarted and their respective groups.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/restart.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job restart example\n==> 2023-02-28T17:36:31-05:00: Restarting 5 allocations\n    2023-02-28T17:36:31-05:00: Restarting running tasks in allocation \"32e143f8\" for group \"proxy\"\n    2023-02-28T17:36:31-05:00: Restarting running tasks in allocation \"388129e0\" for group \"web\"\n    2023-02-28T17:36:31-05:00: Restarting running tasks in allocation \"4fd581ee\" for group \"proxy\"\n    2023-02-28T17:36:32-05:00: Restarting running tasks in allocation \"77d5c4f6\" for group \"proxy\"\n    2023-02-28T17:36:32-05:00: Restarting running tasks in allocation \"d4303a30\" for group \"web\"\n==> 2023-02-28T17:36:32-05:00: Finished job restart\n\nAll allocations restarted successfully!\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Settings for Podman in Nomad (HCL)\nDESCRIPTION: Enables or disables the ability for tasks to bind host paths (volumes) inside their container and sets SELinux labels for allocation and task local bind-mounts.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_41\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"nomad-driver-podman\" {\n  config {\n    volumes {\n      enabled      = true\n      selinuxlabel = \"z\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Variable via HTTP GET\nDESCRIPTION: Makes a GET request to read a specific variable by path, returning the decrypted variable body.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/variables/variables.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/var/example/first?namespace=prod\n```\n\n----------------------------------------\n\nTITLE: Sample ACL Login Request Payload in JSON\nDESCRIPTION: Example JSON payload for authenticating with the ACL login endpoint. Contains required AuthMethodName and LoginToken parameters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/login.mdx#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AuthMethodName\": \"github\",\n  \"LoginToken\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.NHVaYe26MbtOYhSKkoKYdFVomg4i8ZJd8_-RU8VNbftc4TSMb4bXP3l3YlNWACwyXPGffz5aXHc6lty1Y2t4SWRqGteragsVdZufDn5BlnJl9pdR_kdVFUsra2rWKEofkZeIC4yWytE58sMIihvo9H1ScmmVwBcQP6XETqYd0aSHp1gOa9RdUPDvoXQ5oqygTqVtxaDr6wUFKrKItgBMzWIdNZ6y7O9E0DhEPTbE9rfBo6KTFsHAZnMg4k68CDp2woYIaXbmYTWcvbzIuHO7_37GT79XdIwkm95QJ7hYC9RiwrV7mesbY4PAahERJawntho0my942XheVLmGwLMBkQ\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing ACL Tokens\nDESCRIPTION: GET request to list all ACL tokens, including both local tokens and global tokens that have been replicated to the region. This endpoint supports blocking queries and requires management ACLs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/acl/tokens\n```\n\n----------------------------------------\n\nTITLE: Simplified Variables Block Declaration in Nomad HCL\nDESCRIPTION: A more concise way to declare variables using the variables block syntax, which allows direct assignment of values without type constraints or detailed configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/variables.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariables {\n  foo       = \"value\"\n  my_secret = \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Check Expose Path in Nomad\nDESCRIPTION: Example of configuring an exposed health check endpoint using the expose parameter in a service check definition. Demonstrates automatic expose path generation for HTTP checks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/expose.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"expose-check-example\" {\n  datacenters = [\"dc1\"]\n\n  group \"api\" {\n    network {\n      mode = \"bridge\"\n    }\n\n    service {\n      name = \"count-api\"\n      port = \"9001\"\n\n      connect {\n        sidecar_service {}\n      }\n\n      check {\n        expose   = true\n        name     = \"api-health\"\n        type     = \"http\"\n        path     = \"/health\"\n        interval = \"10s\"\n        timeout  = \"3s\"\n      }\n    }\n\n    task \"web\" {\n      driver = \"docker\"\n\n      config {\n        image = \"hashicorpdev/counter-api:v3\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Preemption Information Using nomad plan Command\nDESCRIPTION: This example demonstrates using the 'nomad plan' command to dry run the scheduler and see which allocations would be preempted to place a new job. The output shows allocation IDs and job information that would be affected by preemption.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/scheduling/preemption.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad plan example.nomad.hcl\n\n+ Job: \"test\"\n+ Task Group: \"test\" (1 create)\n  + Task: \"test\" (forces create)\n\nScheduler dry-run:\n- All tasks successfully allocated.\n\nPreemptions:\n\nAlloc ID                              Job ID    Task Group\nddef9521                              my-batch   analytics\nae59fe45                              my-batch   analytics\n```\n\n----------------------------------------\n\nTITLE: Querying Metrics in JSON Format with curl\nDESCRIPTION: A shell command demonstrating how to query the Nomad metrics endpoint using curl to retrieve metrics in the default JSON format.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/metrics.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl https://localhost:4646/v1/metrics\n```\n\n----------------------------------------\n\nTITLE: Defining Split Function Syntax in HCL\nDESCRIPTION: Demonstrates the syntax for the split function which takes a separator and a string as arguments, returning a list of substrings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/split.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsplit(separator, string)\n```\n\n----------------------------------------\n\nTITLE: Examining Chroot Filesystem Structure in Nomad\nDESCRIPTION: Shell session output showing the filesystem tree created by the exec driver with chroot isolation. It displays the complete directory structure created in the allocation working directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/filesystem.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n.\n├── alloc\n│   ├── container\n│   ├── data\n│   ├── logs\n│   └── tmp\n└── task2\n    ├── alloc\n    ├── bin\n    ├── dev\n    ├── etc\n    ├── executor.out\n    ├── lib\n    ├── lib32\n    ├── lib64\n    ├── local\n    ├── private\n    ├── proc\n    ├── run\n    ├── sbin\n    ├── secrets\n    ├── sys\n    ├── tmp\n    └── usr\n```\n\n----------------------------------------\n\nTITLE: Special Character Handling in Nomad Environment Variables\nDESCRIPTION: Demonstrates how to set environment variables containing special characters like dots using alternative map assignment syntax.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/env.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nenv = {\n  \"discovery.type\" = \"single-node\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Volume Capability in Nomad HCL\nDESCRIPTION: This example demonstrates a basic volume configuration with a single capability block. It specifies a CSI volume with single-node-reader-only access mode and file-system attachment mode, along with other volume properties like capacity.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/capability.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nid           = \"ebs_prod_db1\"\nnamespace    = \"default\"\nname         = \"database\"\ntype         = \"csi\"\nplugin_id    = \"ebs-prod\"\ncapacity_max = \"200G\"\ncapacity_min = \"100G\"\n\ncapability {\n  access_mode     = \"single-node-reader-only\"\n  attachment_mode = \"file-system\"\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Path Expose Configuration\nDESCRIPTION: Example demonstrating how to expose multiple paths with different protocols (HTTP and HTTP2) through the proxy.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/expose.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nproxy {\n  expose {\n    path {\n      path            = \"/metrics\"\n      protocol        = \"http2\"\n      local_path_port = 9001\n      listener_port   = \"expose\"\n    }\n    path {\n      path            = \"/v2/health\"\n      protocol        = \"http\"\n      local_path_port = 9001\n      listener_port   = \"expose\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new ACL Role in Nomad\nDESCRIPTION: An example of creating a new ACL Role using the 'nomad acl role create' command. This example sets the name of the role to 'example-acl-role' and associates it with the 'example-acl-policy' policy.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/role/create.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl role create -name=\"example-acl-role\" -policy=example-acl-policy\nID           = a53b0095-c28a-6181-0586-807b82e665e4\nName         = example-acl-role\nDescription  = <none>\nPolicies     = example-acl-policy\nCreate Index = 71\nModify Index = 71\n```\n\n----------------------------------------\n\nTITLE: Parameterized Job with Metadata Interpolation\nDESCRIPTION: An email blast job that forbids payloads but requires metadata, demonstrating how to interpolate metadata values into task arguments using Nomad's interpolation syntax.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/parameterized.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\njob \"email-blast\" {\n  # ...\n\n  type = \"batch\"\n\n  parameterized {\n    payload       = \"forbidden\"\n    meta_required = [\"CAMPAIGN_ID\"]\n  }\n\n  group \"emails\" {\n    # ...\n\n    task \"emailer\" {\n      driver = \"exec\"\n\n      config {\n        command = \"emailer\"\n\n        # The campaign ID is interpolated and injected into the task's\n        # arguments\n        args = [\"-campaign=${NOMAD_META_CAMPAIGN_ID}\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Configuration for Resource Scaling in HCL\nDESCRIPTION: Configuration block for setting up scaling policies for task resources, including namespace, job, group, task, and resource specifications.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/target/app-sizing-nomad.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ncheck \"mem\" {\n  ...\n  target \"app-sizing-nomad\" {\n    Namespace = \"default\"\n    Job       = \"example\"\n    Group     = \"cache\"\n    Task      = \"Redis\"\n    Resource  = \"MemoryMB\"\n  }\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring denied host UIDs in Raw Exec plugin\nDESCRIPTION: Configuration for restricting which user IDs can run tasks with the raw_exec driver. This provides a security measure to prevent specific system users from being used to run tasks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/raw_exec.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  denied_host_uids = \"0,10-15,22\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an ACL Role in Nomad\nDESCRIPTION: This example shows how to delete an existing ACL Role using the Nomad CLI. It demonstrates the command execution and the success message returned upon deletion.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/role/delete.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl role delete a53b0095-c28a-6181-0586-807b82e665e4\nACL role a53b0095-c28a-6181-0586-807b82e665e4 successfully deleted\n```\n\n----------------------------------------\n\nTITLE: Configuring Bridge Network for API Service in Nomad\nDESCRIPTION: Basic network configuration block for API service task group using bridge networking mode.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/service-mesh.mdx#2025-04-19_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"api\" {\n  network {\n    mode = \"bridge\"\n  }\n\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Job Services Response in JSON\nDESCRIPTION: Response containing details of services registered within a job including allocation, node and service information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Address\": \"127.0.0.1\",\n    \"AllocID\": \"177160af-26f6-619f-9c9f-5e46d1104395\",\n    \"CreateIndex\": 14,\n    \"Datacenter\": \"dc1\",\n    \"ID\": \"_nomad-task-177160af-26f6-619f-9c9f-5e46d1104395-redis-example-cache-redis-db\",\n    \"JobID\": \"example\",\n    \"ModifyIndex\": 24,\n    \"Namespace\": \"default\",\n    \"NodeID\": \"7406e90b-de16-d118-80fe-60d0f2730cb3\",\n    \"Port\": 29702,\n    \"ServiceName\": \"example-cache-redis\",\n    \"Tags\": [\n      \"db\",\n      \"cache\"\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using Templates to Display Memory Usage\nDESCRIPTION: Example demonstrating how to use templates to display memory allocation across different job versions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/history.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job history -t \"{{range .}}\\v{{.Version}}: {{with index .TaskGroups 0}}{{with index .Tasks 0}}{{.Resources.MemoryMB}}{{end}}{{end}}\\n{{end}}\" example\nv2: 512\nv1: 256\nv0: 256\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Most Recent Job Deployment in Nomad API\nDESCRIPTION: Sample response showing details of the most recent deployment for a job, including deployment ID, job version, task group status, and deployment status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ID\": \"85ee4a9a-339f-a921-a9ef-0550d20b2c61\",\n  \"JobID\": \"my-job\",\n  \"JobVersion\": 1,\n  \"JobModifyIndex\": 19,\n  \"JobCreateIndex\": 7,\n  \"TaskGroups\": {\n    \"cache\": {\n      \"AutoRevert\": true,\n      \"Promoted\": false,\n      \"PlacedCanaries\": [\n        \"d0ad0808-2765-abf6-1e15-79fb7fe5a416\",\n        \"38c70cd8-81f2-1489-a328-87bb29ec0e0f\"\n      ],\n      \"DesiredCanaries\": 2,\n      \"DesiredTotal\": 3,\n      \"PlacedAllocs\": 2,\n      \"HealthyAllocs\": 2,\n      \"UnhealthyAllocs\": 0\n    }\n  },\n  \"Status\": \"running\",\n  \"StatusDescription\": \"Deployment is running\",\n  \"CreateIndex\": 21,\n  \"ModifyIndex\": 25\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Nomad Job Allocations\nDESCRIPTION: Demonstrates how to list allocations for a specific job named 'example', showing basic information such as ID, Node ID, Task Group, Version, Desired state, Status, and timestamps.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/allocs.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job allocs example\nID        Node ID   Task Group  Version  Desired  Status   Created   Modified\nc2b4606d  35085106  cache       2        run      running  21s ago   10s ago\nc413424b  35085106  cache       2        run      pending  1m8s ago  11s ago\n```\n\n----------------------------------------\n\nTITLE: Setting Core Resource Limits for Pledge Tasks\nDESCRIPTION: Basic resource configuration for a Pledge driver task, specifying CPU cores and memory limits. This allows the task to use up to 3 CPU cores and 512MB of memory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/pledge.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresources {\n  cores  = 3\n  memory = 512\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Swap for Podman Container\nDESCRIPTION: Sets a limit for combined memory and swap usage. Should be larger than the memory value.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_22\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  memory_swap = \"180m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an ACL Policy with curl in Nomad API\nDESCRIPTION: This curl command demonstrates how to delete a specific ACL policy by name. The DELETE request is always forwarded to the authoritative region and requires management ACL permissions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/policies.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    https://localhost:4646/v1/acl/policy/foo\n```\n\n----------------------------------------\n\nTITLE: Normalizing Variable Input Types using try Function in HCL\nDESCRIPTION: This snippet shows how to use the try function to handle situations where a value might be provided in different forms. It normalizes the input to a consistent format (a list) regardless of whether the input is a string or already a list.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/conversion/try.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"example\" {\n  type = any\n}\n\nlocals {\n  example = try(\n    [tostring(var.example)],\n    tolist(var.example),\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Scheduler Configuration Update to Nomad API\nDESCRIPTION: API request to update the scheduler configuration on a Nomad server using the PUT method. Configuration changes take effect immediately but are not persisted across server restarts.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_22\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request PUT \\\n    --data @payload.json \\\n    https://localhost:4646/v1/agent/schedulers/config\n```\n\n----------------------------------------\n\nTITLE: Configuring GCE MIG Target Plugin with Credentials in Nomad\nDESCRIPTION: HCL configuration for setting up the gce-mig target plugin with credentials. This example shows how to properly provide GCP credentials as a file path rather than as environment variables.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/target/gce-mig.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"gce-mig\" {\n  driver = \"gce-mig\"\n  config = {\n    credentials = \"local/creds.json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing External CSI Volumes (Shell)\nDESCRIPTION: Shell command to list external CSI volumes known to the storage provider. Uses curl to send a GET request with optional query parameters for filtering and pagination.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/volumes/external?&plugin_id=plugin-id1&per_page=2\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Client Configuration with Server Join (HCL)\nDESCRIPTION: This example demonstrates a basic configuration for a Nomad client joined to a cluster. It includes enabling the client and specifying server join parameters for connecting to the cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/client.mdx#2025-04-19_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  enabled = true\n  server_join {\n    retry_join     = [ \"1.1.1.1\", \"2.2.2.2\" ]\n    retry_max      = 3\n    retry_interval = \"15s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Draining a Node using cURL in Nomad\nDESCRIPTION: This cURL command sends a POST request to drain a node, using a JSON payload to specify drain parameters. It requires the node's UUID in the URL path.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/nodes.mdx#2025-04-19_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -XPOST \\\n    --data @drain.json \\\n    http://localhost:4646/v1/node/fb2170a8-257d-3c64-b14d-bc06cc94e34c/drain\n```\n\n----------------------------------------\n\nTITLE: Using nomad fmt command\nDESCRIPTION: This snippet demonstrates the basic usage syntax of the 'nomad fmt' command. It shows how to specify options and paths for formatting Nomad files.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/fmt.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad fmt [options] paths ...\n```\n\n----------------------------------------\n\nTITLE: Creating RPC Handler in Go for Nomad\nDESCRIPTION: Outlines the process of adding a handler for the new RPC request, including authentication, authorization, and ACL checks. It also mentions registering new RPC structs and provides guidance on different types of RPCs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/checklist-rpc-endpoint.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// In nomad/foo_endpoint.go\nfunc (f *Foo) HandleRequest(args *structs.FooRequest, reply *structs.FooResponse) error {\n    if done, err := f.srv.forward(\"Foo.HandleRequest\", args, args, reply); done {\n        return err\n    }\n    defer metrics.MeasureSince([]string{\"nomad\", \"foo\", \"handle_request\"}, time.Now())\n\n    // Resolve the ACL token\n    aclObj, err := f.srv.ResolveACL(args.AuthToken)\n    if err != nil {\n        return err\n    }\n\n    // Check permissions\n    if aclObj != nil && !aclObj.AllowFooAccess() {\n        return structs.ErrPermissionDenied\n    }\n\n    // Implement handler logic\n}\n```\n\n----------------------------------------\n\nTITLE: Response from Creating ACL Auth Method in Nomad\nDESCRIPTION: JSON response returned after successfully creating an ACL auth method, showing the created configuration with additional metadata like creation time and indexes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/auth-methods.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"MaxTokenTTL\": \"1h0m0s\",\n    \"Name\": \"example-acl-auth-method\",\n    \"Type\": \"OIDC\",\n    \"TokenLocality\": \"local\",\n    \"TokenNameFormat\": \"${auth_method_type}-${value.user}\",\n    \"Default\": false,\n    \"Config\": {\n        \"OIDCDiscoveryURL\": \"https://my-corp-app-name.auth0.com/\",\n        \"OIDCClientID\": \"v1rpi2myptmv1rpi2myptmv1rpi2mypt\",\n        \"OIDCClientSecret\": \"redacted\",\n        \"OIDCScopes\": [\n            \"groups\"\n        ],\n        \"BoundAudiences\": [\n            \"v1rpi2myptmv1rpi2myptmv1rpi2mypt\"\n        ],\n        \"AllowedRedirectURIs\": [\n            \"http://localhost:4646/oidc/callback\"\n        ],\n        \"DiscoveryCaPem\": null,\n        \"SigningAlgs\": null,\n        \"ClaimMappings\": {\n            \"http://example.com/first_name\": \"first_name\",\n            \"http://example.com/last_name\": \"last_name\"\n        },\n        \"ListClaimMappings\": {\n            \"http://nomad.com/groups\": \"groups\"\n        }\n    },\n    \"CreateTime\": \"2022-12-08T11:04:43.46206Z\",\n    \"ModifyTime\": \"2022-12-08T11:04:43.46206Z\",\n    \"CreateIndex\": 12,\n    \"ModifyIndex\": 12\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Periodic Job Execution with Parameters\nDESCRIPTION: Example command for forcing a periodic job with specific parameters to run, demonstrating how to manually trigger the execution of parameterized periodic jobs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/parameterized.mdx#2025-04-19_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n$ nomad job periodic force sync/dispatch-1730972650-247c6e97 \n```\n\n----------------------------------------\n\nTITLE: Forcing New Periodic Instance with POST Request in Shell\nDESCRIPTION: Makes a POST request to force a new instance of a periodic job named 'my-job' using curl.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    https://localhost:4646/v1/job/my-job/periodic/force\n```\n\n----------------------------------------\n\nTITLE: Basic Telemetry Configuration in HCL for Nomad Autoscaler\nDESCRIPTION: A simple telemetry configuration block that disables hostname prefixing in metrics. This is the basic structure of a telemetry configuration block in Nomad Autoscaler.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/agent/telemetry.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntelemetry {\n  disable_hostname = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Block in Nomad Job Specification\nDESCRIPTION: Example JSON configuration for the Template block in a Nomad job specification. This example shows how to set up a template that renders a configuration file from a source template and triggers a signal when the content changes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/json-jobs.mdx#2025-04-19_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Templates\": [\n    {\n      \"SourcePath\": \"local/config.conf.tpl\",\n      \"DestPath\": \"local/config.conf\",\n      \"EmbeddedTmpl\": \"\",\n      \"ChangeMode\": \"signal\",\n      \"ChangeSignal\": \"SIGUSR1\",\n      \"Splay\": 5000000000\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Quota from Namespace\nDESCRIPTION: Example showing how to remove a quota from an existing namespace.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/namespace/apply.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad namespace apply -quota= api-prod\n```\n\n----------------------------------------\n\nTITLE: Consul Namespace Policy for Nomad Server (HCL)\nDESCRIPTION: This example shows a Consul policy configuration for a Nomad server using a specific namespace. It includes agent read permissions and namespace-specific permissions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/consul.mdx#2025-04-19_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nagent_prefix \"\" {\n  policy = \"read\"\n}\n\nnamespace \"nomad-ns\" {\n  acl = \"write\"\n\n  key_prefix \"\" {\n    policy = \"read\"\n  }\n\n  node_prefix \"\" {\n    policy = \"read\"\n  }\n\n  service_prefix \"\" {\n    policy = \"write\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaling Specific Task Group\nDESCRIPTION: Shows how to scale a specific task group within a job by explicitly specifying both the job ID and group name.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/scale.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job scale job1 group1 8\n==> Monitoring evaluation \"529cc88e\"\n    Evaluation triggered by job \"job1\"\n    Evaluation within deployment: \"28a3378f\"\n    Allocation \"2a4df8ca\" created: node \"2f0a2f93\", group \"group1\"\n    Allocation \"b7eefe49\" created: node \"2f0a2f93\", group \"group1\"\n    Allocation \"bd54a83d\" created: node \"2f0a2f93\", group \"group1\"\n    Allocation \"fadeaea8\" created: node \"2f0a2f93\", group \"group1\"\n    Allocation \"4bd1397b\" modified: node \"2f0a2f93\", group \"group1\"\n    Allocation \"93684511\" modified: node \"2f0a2f93\", group \"group1\"\n    Allocation \"b409f0a2\" modified: node \"2f0a2f93\", group \"group1\"\n    Allocation \"18f50054\" created: node \"2f0a2f93\", group \"group1\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"529cc88e\" finished with status \"complete\"\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Client Timeout for Podman in Nomad (HCL)\nDESCRIPTION: Configures the default timeout used by http.Client requests in the Podman driver.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_40\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"nomad-driver-podman\" {\n  config {\n    client_http_timeout = \"60s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Allocation Status JSON Response\nDESCRIPTION: Example JSON response showing a detailed allocation status including task states, events, and timestamps for a Redis container deployment.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/evaluations.mdx#2025-04-19_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"ID\": \"a8198d79-cfdb-6593-a999-1e9adabcba2e\",\n    \"EvalID\": \"5456bd7a-9fc0-c0dd-6131-cbee77f57577\",\n    \"Name\": \"example.cache[0]\",\n    \"NodeID\": \"fb2170a8-257d-3c64-b14d-bc06cc94e34c\",\n    \"JobID\": \"example\",\n    \"TaskGroup\": \"cache\",\n    \"DesiredStatus\": \"run\",\n    \"DesiredDescription\": \"\",\n    \"ClientStatus\": \"running\",\n    \"ClientDescription\": \"\",\n    \"TaskStates\": {\n      \"redis\": {\n        \"State\": \"running\",\n        \"Failed\": false,\n        \"Events\": [\n          {\n            \"Type\": \"Received\",\n            \"Time\": 1495747371795703800,\n            \"FailsTask\": false,\n            \"RestartReason\": \"\",\n            \"SetupError\": \"\",\n            \"DriverError\": \"\",\n            \"ExitCode\": 0,\n            \"Signal\": 0,\n            \"Message\": \"\",\n            \"KillTimeout\": 0,\n            \"KillError\": \"\",\n            \"KillReason\": \"\",\n            \"StartDelay\": 0,\n            \"DownloadError\": \"\",\n            \"ValidationError\": \"\",\n            \"DiskLimit\": 0,\n            \"FailedSibling\": \"\",\n            \"VaultError\": \"\",\n            \"TaskSignalReason\": \"\",\n            \"TaskSignal\": \"\",\n            \"DriverMessage\": \"\"\n          },\n          {\n            \"Type\": \"Driver\",\n            \"Time\": 1495747371798867200,\n            \"FailsTask\": false,\n            \"RestartReason\": \"\",\n            \"SetupError\": \"\",\n            \"DriverError\": \"\",\n            \"ExitCode\": 0,\n            \"Signal\": 0,\n            \"Message\": \"\",\n            \"KillTimeout\": 0,\n            \"KillError\": \"\",\n            \"KillReason\": \"\",\n            \"StartDelay\": 0,\n            \"DownloadError\": \"\",\n            \"ValidationError\": \"\",\n            \"DiskLimit\": 0,\n            \"FailedSibling\": \"\",\n            \"VaultError\": \"\",\n            \"TaskSignalReason\": \"\",\n            \"TaskSignal\": \"\",\n            \"DriverMessage\": \"Downloading image redis:7\"\n          },\n          {\n            \"Type\": \"Started\",\n            \"Time\": 1495747379525667800,\n            \"FailsTask\": false,\n            \"RestartReason\": \"\",\n            \"SetupError\": \"\",\n            \"DriverError\": \"\",\n            \"ExitCode\": 0,\n            \"Signal\": 0,\n            \"Message\": \"\",\n            \"KillTimeout\": 0,\n            \"KillError\": \"\",\n            \"KillReason\": \"\",\n            \"StartDelay\": 0,\n            \"DownloadError\": \"\",\n            \"ValidationError\": \"\",\n            \"DiskLimit\": 0,\n            \"FailedSibling\": \"\",\n            \"VaultError\": \"\",\n            \"TaskSignalReason\": \"\",\n            \"TaskSignal\": \"\",\n            \"DriverMessage\": \"\"\n          }\n        ]\n      }\n    },\n    \"CreateIndex\": 54,\n    \"ModifyIndex\": 57,\n    \"CreateTime\": 1495747371794276400\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying default server members view\nDESCRIPTION: Example showing the default output of the 'nomad server members' command, displaying basic information about each server in the cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/server/members.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad server members\nName             Address    Port  Status  Leader  Raft Version  Build  Datacenter  Region\nserver-1.global  10.0.0.8   4648  alive   true    3             1.3.0  dc1         global\nserver-2.global  10.0.0.9   4648  alive   false   3             1.3.0  dc1         global\nserver-3.global  10.0.0.10  4648  alive   false   3             1.3.0  dc1         global\n```\n\n----------------------------------------\n\nTITLE: Using nomad var put Command with HCL File\nDESCRIPTION: This shell command demonstrates how to use the 'nomad var put' CLI command to submit a Nomad Variable specification file. It specifies the input format as HCL and uses the '@' symbol to reference the file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/variables.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad var put -in hcl some/path @spec.nv.hcl\n```\n\n----------------------------------------\n\nTITLE: Enabling Node Scheduling Eligibility\nDESCRIPTION: Example of enabling scheduling eligibility on a specific node using its ID prefix. Shows both the command and its output.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/eligibility.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node eligibility -enable 574545c5\nNode \"574545c5-c2d7-e352-d505-5e2cb9fe169f\" scheduling eligibility set: eligible for scheduling\n```\n\n----------------------------------------\n\nTITLE: Sample Evaluation Read Response in Nomad API\nDESCRIPTION: Example JSON response from the evaluation read endpoint showing detailed information about a specific evaluation, including its status, related evaluations, and resource allocation details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/evaluations.mdx#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CreateIndex\": 28,\n  \"CreateTime\": 1647394818583344000,\n  \"FailedTGAllocs\": {\n    \"cache\": {\n      \"AllocationTime\": 4111,\n      \"ClassExhausted\": null,\n      \"ClassFiltered\": null,\n      \"CoalescedFailures\": 0,\n      \"ConstraintFiltered\": null,\n      \"DimensionExhausted\": null,\n      \"NodesAvailable\": {\n        \"dc1\": 0\n      },\n      \"NodesEvaluated\": 0,\n      \"NodesExhausted\": 0,\n      \"NodesFiltered\": 0,\n      \"NodesInPool\": 0,\n      \"QuotaExhausted\": null,\n      \"ResourcesExhausted\": null,\n      \"ScoreMetaData\": null,\n      \"Scores\": null\n    }\n  },\n  \"ID\": \"2deb5f06-a100-f01a-3316-5e501a4965e7\",\n  \"JobID\": \"example\",\n  \"ModifyIndex\": 28,\n  \"ModifyTime\": 1647394818583344000,\n  \"Namespace\": \"default\",\n  \"PreviousEval\": \"0f98f7ea-59ae-4d90-d9bd-b8ce80b9e100\",\n  \"Priority\": 50,\n  \"RelatedEvals\": [\n    {\n      \"BlockedEval\": \"2deb5f06-a100-f01a-3316-5e501a4965e7\",\n      \"CreateIndex\": 27,\n      \"CreateTime\": 1647394818582736000,\n      \"DeploymentID\": \"79ae0a49-acf6-0fcf-183f-8646f3167b88\",\n      \"ID\": \"0f98f7ea-59ae-4d90-d9bd-b8ce80b9e100\",\n      \"JobID\": \"example\",\n      \"ModifyIndex\": 30,\n      \"ModifyTime\": 1647394818583565000,\n      \"Namespace\": \"default\",\n      \"NextEval\": \"\",\n      \"NodeID\": \"\",\n      \"PreviousEval\": \"\",\n      \"Priority\": 50,\n      \"Status\": \"complete\",\n      \"StatusDescription\": \"\",\n      \"TriggeredBy\": \"node-drain\",\n      \"Type\": \"service\",\n      \"WaitUntil\": null\n    }\n  ],\n  \"SnapshotIndex\": 27,\n  \"Status\": \"blocked\",\n  \"StatusDescription\": \"created to place remaining allocations\",\n  \"TriggeredBy\": \"queued-allocs\",\n  \"Type\": \"service\"\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Sidecar Service Configuration\nDESCRIPTION: Demonstrates the minimal required configuration for a sidecar_service block using default settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/sidecar_service.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n  connect {\n    sidecar_service {}\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting User Denylist in Nomad Client Options (HCL)\nDESCRIPTION: Configures a denylist of users that are not allowed to run tasks on the Nomad client. This example prevents tasks from running as root or ubuntu users.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/client.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  options = {\n    \"user.denylist\" = \"root,ubuntu\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT/OIDC Auth Method with Claim Mappings in Nomad\nDESCRIPTION: Example configuration for a JWT/OIDC auth method that maps claims to identity attributes. It demonstrates how to use ClaimMappings for singular values and ListClaimMappings for lists of values that can be used in binding rule selectors.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/partials/jwt_claim_mapping_details.mdx#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Name\": \"example-auth-method\",\n  \"Type\": \"<jwt|oidc>\",\n  \"Description\": \"Example auth method\",\n  \"Config\": {\n    \"ClaimMappings\": {\n      \"givenName\": \"first_name\",\n      \"surname\": \"last_name\"\n    },\n    \"ListClaimMappings\": {\n      \"groups\": \"roles\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CSI Volume in Nomad (JSON)\nDESCRIPTION: JSON payload for creating a CSI volume in an external storage provider and registering it with Nomad. Includes volume details such as ID, name, namespace, plugin ID, mount options, requested capacity, capabilities, secrets, and topologies.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Volumes\": [\n    {\n      \"ID\": \"volume-id1\",\n      \"Name\": \"volume one\",\n      \"Namespace\": \"default\",\n      \"PluginID\": \"plugin-id1\",\n      \"MountOptions\": {\n        \"FsType\": \"ext4\",\n        \"MountFlags\": [\"ro\", \"noatime\"],\n      },\n      \"RequestedCapacityMin\": 10737418240,\n      \"RequestedCapacityMax\": 21474836480,\n      \"RequestedCapabilities\": [\n        {\n          \"AccessMode\": \"single-node-writer\",\n          \"AttachmentMode\": \"file-system\"\n        },\n        {\n          \"AccessMode\": \"single-node-writer\",\n          \"AttachmentMode\": \"block-device\"\n        }\n      ],\n      \"Secrets\": {\n        \"password\": \"xyzzy\"\n      },\n      \"SnapshotID\": \"snap-12345\",\n      \"Topologies\": [{ \"foo\": \"bar\" }]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Application Sizing Block in HCL\nDESCRIPTION: Example configuration block showing basic Dynamic Application Sizing settings for Nomad Autoscaler. Demonstrates setting evaluation period and metrics preload threshold values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/agent/dynamic_application_sizing.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndynamic_application_sizing {\n  evaluate_after            = \"1h\"\n  metrics_preload_threshold = \"12h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Openstack Credentials in cloud.conf for Cinder CSI Plugin\nDESCRIPTION: Example cloud.conf configuration file required by the Cinder CSI Plugin. This file contains the OpenStack authentication credentials and endpoint information needed for the CSI driver to communicate with the Openstack API.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/cinder-csi-plugin/README.md#2025-04-19_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[Global]\nusername = openstack-user\npassword =  superSecret123\ndomain-name = default\nauth-url = https://service01a-c2.example.com:5001/\ntenant-id = 5sd6f4s5df6sd6fs5ds65fd4f65s\nregion = RegionOne\n```\n\n----------------------------------------\n\nTITLE: Deleting a Nomad Volume Snapshot Example\nDESCRIPTION: An example of using the 'nomad volume snapshot delete' command to delete a specific volume snapshot, showing the command and its output.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/snapshot-delete.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume snapshot delete aws-ebs0 snap-12345\nDeleted snapshot snap-12345.\n```\n\n----------------------------------------\n\nTITLE: Complete Mock Driver Job Specification\nDESCRIPTION: Comprehensive example of a mock driver job configuration demonstrating various options including kill timeout, exit behavior, and output settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/mock-driver.md#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\njob \"mock\" {\n\n  group \"group\" {\n\n    task \"task\" {\n\n      driver = \"mock_driver\"\n\n      kill_timeout = \"5s\"\n\n      config {\n        exit_code = 0\n        exit_err_msg = \"error on exit\"\n        exit_signal = 9\n        kill_after = \"3s\"\n        run_for = \"30s\"\n        signal_error = \"got signal\"\n        start_block_for = \"1s\"\n        stdout_repeat = 1\n        stdout_repeat_duration = \"10s\"\n        stdout_string = \"hello, world!\\n\"\n      }\n\n      resources {\n        cpu    = 128\n        memory = 128\n      }\n\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample ACL Login Response\nDESCRIPTION: Example JSON response from a successful ACL login request, including token details, expiration, and associated roles.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/login.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AccessorID\": \"cbbc7059-3acf-2ef5-378b-495f5f81f733\",\n  \"CreateIndex\": 18,\n  \"CreateTime\": \"2023-01-18T10:53:29.460987Z\",\n  \"ExpirationTTL\": 600000000000,\n  \"ExpirationTime\": \"2023-01-18T11:03:29.460987Z\",\n  \"Global\": true,\n  \"ModifyIndex\": 18,\n  \"Name\": \"JWT-github\",\n  \"Policies\": [],\n  \"Roles\": [\n    {\n      \"ID\": \"10b1a678-f71d-d266-2888-8b3e47e317b8\",\n      \"Name\": \"engineering-read\"\n    }\n  ],\n  \"SecretID\": \"1fce464c-06d1-4020-8564-631c25201ea7\",\n  \"Type\": \"client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Node Attributes for CPU with Mixed Core Types\nDESCRIPTION: Example of Nomad node attributes for an Intel i9-13900 CPU with mixed core types showing frequencies, core counts, and compute capacity.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/cpu.mdx#2025-04-19_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncpu.arch                        = amd64\ncpu.frequency.efficiency        = 1500\ncpu.frequency.performance       = 2000\ncpu.modelname                   = 13th Gen Intel(R) Core(TM) i9-13900\ncpu.numcores                    = 32\ncpu.numcores.efficiency         = 16\ncpu.numcores.performance        = 16\ncpu.reservablecores             = 32\ncpu.totalcompute                = 56000\ncpu.usablecompute               = 56000\n```\n\n----------------------------------------\n\nTITLE: Setting Allocation Health in Deployment with JavaScript\nDESCRIPTION: This snippet shows how to set the health of allocations in a deployment. It includes the deployment ID and an array of allocation IDs to be marked as healthy.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/deployments.mdx#2025-04-19_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"DeploymentID\": \"5456bd7a-9fc0-c0dd-6131-cbee77f57577\",\n  \"HealthyAllocationIDs\": [\n    \"eb13bc8a-7300-56f3-14c0-d4ad115ec3f5\",\n    \"6584dad8-7ae3-360f-3069-0b4309711cc1\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Envoy Image for Nomad Connect Gateway\nDESCRIPTION: Specifies a custom Docker image to use for the Connect gateway task, with interpolation of the Envoy version from Consul.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/gateway.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmeta.connect.gateway_image = custom/envoy-${NOMAD_envoy_version}:latest\n```\n\n----------------------------------------\n\nTITLE: AWS Cloud Auto-join Configuration in HCL\nDESCRIPTION: A server_join configuration using go-discover to automatically join Nomad servers in AWS EC2. This leverages EC2 instance tags to identify servers to join.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/server_join.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nserver_join {\n  retry_join = [ \"provider=aws tag_key=...\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: S3 Artifact with Virtual Hosted Style URL in Nomad\nDESCRIPTION: Demonstrates using the virtual hosted style URL format for S3 buckets. This is an alternative addressing method for Amazon S3 and compatible storage providers.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/artifact.mdx#2025-04-19_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\nartifact {\n  source = \"s3://my-bucket-example.s3-eu-west-1.amazonaws.com/my_app.tar.gz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function for APM Plugin in Go\nDESCRIPTION: The Query function is called during policy evaluation. It takes a query string and time range, and returns timestamped metrics. This function should interact with the APM system to fetch time series data.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/concepts/plugins/apm.mdx#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nQuery(query string, timeRange sdk.TimeRange) (sdk.TimestampedMetrics, error)\n```\n\n----------------------------------------\n\nTITLE: Initiating Garbage Collection in Nomad via HTTP API\nDESCRIPTION: This snippet demonstrates how to trigger a garbage collection operation in Nomad using a PUT request to the /v1/system/gc endpoint. This asynchronous operation collects jobs, evaluations, allocations, and nodes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/system.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request PUT \\\n    https://localhost:4646/v1/system/gc\n```\n\n----------------------------------------\n\nTITLE: Multiple NVIDIA GPU Configuration\nDESCRIPTION: Configuration for requesting multiple NVIDIA GPUs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/device.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndevice \"nvidia/gpu\" {\n  count = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Denied Host UIDs and GIDs for Exec Task Driver\nDESCRIPTION: These examples demonstrate how to specify denied host UIDs and GIDs in the exec driver configuration. This can be used to restrict which user and group IDs are allowed to run tasks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/exec.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  denied_host_uids = \"0,10-15,22\"\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  denied_host_gids = \"2,4-8\"\n}\n```\n\n----------------------------------------\n\nTITLE: Canary Deployment Status Example\nDESCRIPTION: Shows status output for a deployment using canary deployments waiting for promotion.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/deployment/status.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad deployment status 0b\nID          = 0b23b149\nJob ID      = example\nJob Version = 1\nStatus      = running\nDescription = Deployment is running but requires manual promotion\n\nDeployed\nTask Group  Promoted  Desired  Canaries  Placed  Healthy  Unhealthy  Progress Deadline\ncache       false     2        1         1       0        0          2021-06-09T15:20:27-07:00\nweb         N/A       2        0         2       2        0          2021-06-09T15:20:27-07:00\n```\n\n----------------------------------------\n\nTITLE: Reading node metadata with nomad node meta read\nDESCRIPTION: This example demonstrates how to use the 'nomad node meta read' command to display metadata for a specific node. It shows the output format, including All Meta, Dynamic Meta, and Static Meta sections.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/meta/read.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node meta read -node-id 3b58b0a6\n\nAll Meta\nconnect.gateway_image     = docker.io/envoyproxy/envoy:v${NOMAD_envoy_version}\nconnect.log_level         = info\nconnect.proxy_concurrency = 1\nconnect.sidecar_image     = docker.io/envoyproxy/envoy:v${NOMAD_envoy_version}\nexample                   = a\n\nDynamic Meta\nexample = a\n\nStatic Meta\nconnect.gateway_image     = docker.io/envoyproxy/envoy:v${NOMAD_envoy_version}\nconnect.log_level         = info\nconnect.proxy_concurrency = 1\nconnect.sidecar_image     = docker.io/envoyproxy/envoy:v${NOMAD_envoy_version}\n```\n\n----------------------------------------\n\nTITLE: Purging a Node using cURL in Nomad\nDESCRIPTION: This cURL command sends a POST request to purge a node from the system. It requires the node's UUID in the URL path.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/nodes.mdx#2025-04-19_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -XPOST http://localhost:4646/v1/node/f7476465-4d6e-c0de-26d0-e383c49be941/purge\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Quota Specification in Default JSON Format\nDESCRIPTION: Example of inspecting a quota named 'default-quota' with the default JSON output format, showing both the specification and current usage details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/quota/inspect.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad quota inspect default-quota\n{\n    \"Spec\": {\n        \"CreateIndex\": 11,\n        \"Description\": \"Limit the shared default namespace\",\n        \"Limits\": [\n            {\n                \"Hash\": \"p7s7A+4mFt+M41NS3nB3APheQS9YaePLguvnNn/c1t4=\",\n                \"Region\": \"global\",\n                \"RegionLimit\": {\n                    \"CPU\": 1000,\n                    \"Cores\": 1,\n                    \"Devices\": null,\n                    \"DiskMB\": 0,\n                    \"IOPS\": 0,\n                    \"MemoryMB\": 1000,\n                    \"MemoryMaxMB\": 0,\n                    \"NUMA\": null,\n                    \"Networks\": null\n                },\n                \"VariablesLimit\": 0\n            }\n        ],\n        \"ModifyIndex\": 11,\n        \"Name\": \"default-quota\"\n    },\n    \"UsageLookupErrors\": {},\n    \"Usages\": {\n        \"global\": {\n            \"CreateIndex\": 11,\n            \"ModifyIndex\": 12,\n            \"Name\": \"default\",\n            \"Used\": {\n                \"p7s7A+4mFt+M41NS3nB3APheQS9YaePLguvnNn/c1t4=\": {\n                    \"Hash\": \"p7s7A+4mFt+M41NS3nB3APheQS9YaePLguvnNn/c1t4=\",\n                    \"Region\": \"global\",\n                    \"RegionLimit\": {\n                        \"CPU\": 0,\n                        \"Cores\": 0,\n                        \"Devices\": null,\n                        \"DiskMB\": 0,\n                        \"IOPS\": 0,\n                        \"MemoryMB\": 0,\n                        \"MemoryMaxMB\": 0,\n                        \"NUMA\": null,\n                        \"Networks\": null\n                    },\n                    \"VariablesLimit\": 0\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ACL Token Request\nDESCRIPTION: POST request to create a new ACL token with the provided JSON payload. This endpoint requires management ACLs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://localhost:4646/v1/acl/token\n```\n\n----------------------------------------\n\nTITLE: Dispatch Job Sample Request\nDESCRIPTION: cURL command to dispatch a new job instance using the payload file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://localhost:4646/v1/job/my-job/dispatch\n```\n\n----------------------------------------\n\nTITLE: Create Dynamic Host Volume Request Example\nDESCRIPTION: Sample curl command and JSON payload for creating a new dynamic host volume.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"PolicyOverride\": false,\n  \"Volume\": {\n    \"Name\": \"example\",\n    \"Namespace\": \"default\",\n    \"NodePool\": \"prod\",\n    \"PluginID\": \"mkdir\",\n    \"RequestedCapacityMinBytes\": 10737418240,\n    \"RequestedCapacityMaxBytes\": 21474836480,\n    \"RequestedCapabilities\": [\n      {\n        \"AccessMode\": \"single-node-writer\",\n        \"AttachmentMode\": \"file-system\"\n      },\n      {\n        \"AccessMode\": \"single-node-writer\",\n        \"AttachmentMode\": \"block-device\"\n      }\n    ],\n    \"Constraints\": [\n      {\n        \"LTarget\": \"${attr.kernel.name}\",\n        \"RTarget\": \"linux\",\n        \"Operand\": \"=\"\n      }\n    ],\n    \"Parameters\": {\n      \"foo\": \"bar\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Item from a Variable\nDESCRIPTION: Example demonstrating how to extract just a single item value from a variable using the '-item' flag. This returns only the raw value without formatting, making it suitable for use in scripts.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/get.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad var get -item=passcode secret/creds\nmy-long-passcode\n```\n\n----------------------------------------\n\nTITLE: Executing Gossip Key Generation - Example Output\nDESCRIPTION: Example execution of the keyring generate command showing the resulting base64 encoded encryption key output.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/gossip/keyring-generate.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator gossip keyring generate\n6RhfKFZ5uYEaU6RgWzx69ssLcpiIkvnEZs5KBOQxvxA=\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure VMSS Target with VM Identity Authentication in HCL\nDESCRIPTION: Configuration block for the azure-vmss target plugin using virtual machine identities for authentication. This requires a user-managed identity with the Contributor role and specification of the subscription_id.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/target/azure-vmss.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"azure-vmss\" {\n  driver = \"azure-vmss\"\n  config = {\n    subscription_id = \"ee0886ab-5cc2-4583-a3f0-c4bfd044ee82\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus APM Plugin in Agent Configuration\nDESCRIPTION: Configuration block for setting up the Prometheus APM plugin in a Nomad agent. Includes options for connection settings, authentication, and custom headers.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/apm/prometheus.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\napm \"prometheus\" {\n  driver = \"prometheus\"\n\n  config = {\n    address = \"http://prometheus.my.endpoint.io:9090\"\n\n    ca_cert = \"/path/to/ca.crt\"\n\n    basic_auth_user     = \"user\"\n    basic_auth_password = \"secret\"\n\n    header_X-Scope-OrgID   = \"my-org\"\n    header_X-Custom-Header = \"custom-header\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Snapshot Agent in HCL\nDESCRIPTION: This HCL configuration file defines settings for the Nomad snapshot agent, including Nomad connection details, snapshot parameters, logging, Consul integration, and storage options for local, AWS S3, Azure Blob, and Google Storage.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/snapshot/agent.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nnomad {\n  address         = \"http://127.0.0.1:4646\"\n  token           = \"\"\n  region          = \"\"\n  ca_file         = \"\"\n  ca_path         = \"\"\n  cert_file       = \"\"\n  key_file        = \"\"\n  tls_server_name = \"\"\n}\n\n\nsnapshot {\n  interval         = \"1h\"\n  retain           = 30\n  stale            = false\n  service          = \"nomad-snapshot\"\n  deregister_after = \"72h\"\n  lock_key         = \"nomad-snapshot/lock\"\n  max_failures     = 3\n  prefix           = \"nomad\"\n}\n\nlog {\n  level           = \"INFO\"\n  enable_syslog   = false\n  syslog_facility = \"LOCAL0\"\n}\n\nconsul {\n  enabled         = true\n  http_addr       = \"127.0.0.1:8500\"\n  token           = \"\"\n  datacenter      = \"\"\n  ca_file         = \"\"\n  ca_path         = \"\"\n  cert_file       = \"\"\n  key_file        = \"\"\n  tls_server_name = \"\"\n}\n\n# one storage block is required\n\nlocal_storage {\n  path = \".\"\n}\n\naws_storage {\n  access_key_id     = \"\"\n  secret_access_key = \"\"\n  s3_region         = \"\"\n  s3_endpoint       = \"\"\n  s3_bucket         = \"\"\n  s3_key_prefix     = \"nomad-snapshot\"\n}\n\nazure_blob_storage {\n  account_name   = \"\"\n  account_key    = \"\"\n  container_name = \"\"\n}\n\ngoogle_storage {\n  bucket = \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Multiple Jobs in Nomad\nDESCRIPTION: Demonstrates stopping multiple jobs ('job1' and 'job2') simultaneously and monitoring their evaluations and deployments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/stop.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job stop job1 job2\n==> 2022-12-16T15:19:28-08:00: Monitoring evaluation \"166c39c5\"\n==> 2022-12-16T15:19:28-08:00: Monitoring evaluation \"049404c2\"\n    2022-12-16T15:19:28-08:00: Evaluation triggered by job \"job1\"\n    2022-12-16T15:19:28-08:00: Evaluation triggered by job \"job2\"\n    2022-12-16T15:19:28-08:00: Evaluation within deployment: \"90885ce7\"\n    2022-12-16T15:19:28-08:00: Evaluation status changed: \"pending\" -> \"complete\"\n==> 2022-12-16T15:19:28-08:00: Evaluation \"166c39c5\" finished with status \"complete\"\n==> 2022-12-16T15:19:28-08:00: Monitoring deployment \"90885ce7\"\n  ✓ Deployment \"90885ce7\" successful\n\n    2022-12-16T15:19:28-08:00\n    ID          = 90885ce7\n    Job ID      = job1\n    Job Version = 0\n    Status      = successful\n    Description = Deployment completed successfully\n\n    Deployed\n    Task Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline\n    example     1        1       1        0          2022-12-16T15:29:03-08:00\n==> 2022-12-16T15:19:29-08:00: Monitoring evaluation \"049404c2\"\n    2022-12-16T15:19:29-08:00: Evaluation within deployment: \"a13df8f8\"\n    2022-12-16T15:19:29-08:00: Evaluation status changed: \"pending\" -> \"complete\"\n==> 2022-12-16T15:19:29-08:00: Evaluation \"049404c2\" finished with status \"complete\"\n==> 2022-12-16T15:19:29-08:00: Monitoring deployment \"a13df8f8\"\n  ✓ Deployment \"a13df8f8\" successful\n\n    2022-12-16T15:19:29-08:00\n    ID          = a13df8f8\n    Job ID      = job2\n    Job Version = 0\n    Status      = successful\n    Description = Deployment completed successfully\n\n    Deployed\n    Task Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline\n    example2    1        1       1        0          2022-12-16T15:29:16-08:00\n```\n\n----------------------------------------\n\nTITLE: Short Format Single Node View in Nomad CLI\nDESCRIPTION: Displays condensed information about a specific node using the -short flag followed by the node ID, showing basic details and its allocations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/status.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node status -short 1f3f03ea\nID        = c754da1f\nName      = nomad\nNode Pool = default\nClass     = <none>\nDC        = dc1\nDrain     = false\nStatus    = ready\nUptime    = 17h2m25s\n\nAllocations\nID        Eval ID   Job ID   Task Group  Desired Status  Client Status\n0b8b9e37  8bf94335  example  cache       run             running\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Plugin with dry-run Parameter in Nomad\nDESCRIPTION: A configuration option for target plugins that allows testing scaling actions without actually performing them. When set to true, the target will not be scaled and the proposed scaling action will only be logged.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/target/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndry-run: false\n```\n\n----------------------------------------\n\nTITLE: Using nomad operator debug command\nDESCRIPTION: Basic usage syntax for the nomad operator debug command. This command accepts various options to customize the debug information collection process.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/debug.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator debug [options]\n```\n\n----------------------------------------\n\nTITLE: Creating peers.json for Single Nomad Server Upgrade\nDESCRIPTION: This Bash script creates a peers.json file required for upgrading a single Nomad server to Raft protocol version 3. It extracts the Nomad data directory, leader address, and node ID from the running server to construct a valid peers.json file in the raft directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/upgrade/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\nNOMAD_DATA_DIR=$(nomad agent-info -json | jq -r '.config.DataDir')\nNOMAD_ADDR=$(nomad agent-info -json | jq -r '.stats.nomad.leader_addr')\nNODE_ID=$(cat \"$NOMAD_DATA_DIR/server/node-id\")\n\ncat <<EOF > \"$NOMAD_DATA_DIR/server/raft/peers.json\"\n[\n  {\n    \"id\": \"$NODE_ID\",\n    \"address\": \"$NOMAD_ADDR\",\n    \"non_voter\": false\n  }\n]\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating an ACL Binding Rule with cURL\nDESCRIPTION: Makes a POST request to create a new ACL Binding Rule using the supplied JSON payload. Requires a management token and is forwarded to the authoritative region.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/binding-rules.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --header \"X-Nomad-Token: <NOMAD_TOKEN_SECRET_ID>\" \\\n    --data @payload.json \\\n    https://localhost:4646/v1/acl/binding-rule\n```\n\n----------------------------------------\n\nTITLE: Status with Evaluations\nDESCRIPTION: Displays detailed job status with evaluation information, including placement failures and deployment status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/status.mdx#2025-04-19_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job status -evals example\nID            = example\nName          = example\nSubmit Date   = 07/25/17 15:55:27 UTC\nType          = service\nPriority      = 50\nDatacenters   = dc1\nStatus        = running\nPeriodic      = false\nParameterized = false\n\nSummary\nTask Group  Queued  Starting  Running  Failed  Complete  Lost\ncache       1       0         4        0       0         0\n\nEvaluations\nID        Priority  Triggered By        Status    Placement Failures\ne44a39e8  50        deployment-watcher  canceled  false\n97018573  50        deployment-watcher  complete  true\nd5a7300c  50        deployment-watcher  canceled  false\nf05a4495  50        deployment-watcher  complete  true\ne3f3bdb4  50        deployment-watcher  canceled  false\nb5f08700  50        deployment-watcher  complete  true\n73bb867a  50        job-register        blocked   N/A - In Progress\n85052989  50        job-register        complete  true\n\nPlacement Failure\nTask Group \"cache\":\n  * Resources exhausted on 1 nodes\n  * Dimension \"cpu exhausted\" exhausted on 1 nodes\n\nLatest Deployment\nID          = bb4b2fb1\nStatus      = running\nDescription = Deployment is running\n\nDeployed\nTask Group  Desired  Placed  Healthy  Unhealthy\ncache       5        4       4        0\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created                    Modified\n048c1e9e  3f38ecb4  cache       0        run      running  07/25/17 15:55:27 UTC      07/25/17 15:55:27 UTC\n250f9dec  3f38ecb4  cache       0        run      running  07/25/17 15:55:27 UTC      07/25/17 15:55:27 UTC\n2eb772a1  3f38ecb4  cache       0        run      running  07/25/17 15:55:27 UTC      07/25/17 15:55:27 UTC\na17b7d3d  3f38ecb4  cache       0        run      running  07/25/17 15:55:27 UTC      07/25/17 15:55:27 UTC\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Allocation Restart Command Syntax\nDESCRIPTION: Shows the basic command syntax for restarting a Nomad allocation or task. Accepts an allocation ID and optional task name.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/restart.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad alloc restart [options] <allocation> <task>\n```\n\n----------------------------------------\n\nTITLE: Downloading from Private Git Repository with SSH Key in Nomad\nDESCRIPTION: Example for cloning a private Git repository using SSH authentication. Requires a base64-encoded SSH private key and properly configured known hosts on the Nomad client.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/artifact.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nartifact {\n  # The git:: prefix forces go-getter's protocol detection to use the git ssh\n  # protocol. It can also automatically detect the protocol from the domain of\n  # some git hosting providers (such as GitHub) without the prefix.\n  source      = \"git::git@bitbucket.org:example/nomad-examples\"\n  destination = \"local/repo\"\n  options {\n    # Make sure that the system known hosts file is populated:\n    # ssh-keyscan github.com | sudo tee -a /etc/ssh/ssh_known_hosts\n    # https://github.com/hashicorp/go-getter/issues/55\n    sshkey = \"${base64encode(file(\"/path/to/private-key\"))}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Valid HCL2 Syntax for Docker Mounts in Nomad 1.0\nDESCRIPTION: This snippet demonstrates the correct HCL2 syntax for specifying Docker mounts in Nomad 1.0. It shows how to use assignment syntax instead of block syntax for nested configurations within mounts.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/index.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# VALID in Nomad 1.0\nmounts = [\n  {\n    type = \"tmpfs\"\n    tmpfs_options = {\n      size = 10000\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining ACL Policy for Task Group Metrics in HCL\nDESCRIPTION: This snippet defines an ACL policy that provides appropriate permissions for obtaining task group metrics in a Nomad cluster with ACLs enabled.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/apm/nomad.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nnamespace \"default\" {\n  policy       = \"read\"\n  capabilities = [\"read-job\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Multiple Specific Topics with Filters\nDESCRIPTION: Makes a complex curl request that subscribes to specific node events, all deployment events, and job events for a specific job using URL-encoded parameters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/events.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl -G -s -v -N \\\n--data-urlencode \"topic=Node:ccc4ce56-7f0a-4124-b8b1-a4015aa82c40\" \\\n--data-urlencode \"topic=Deployment\" \\\n--data-urlencode \"topic=Job:web\" \\\nhttp://127.0.0.1:4646/v1/event/stream\n```\n\n----------------------------------------\n\nTITLE: Enabling Force Pull for Podman Container Images\nDESCRIPTION: When set to true, forces Podman to always pull the latest image on container start.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  force_pull = true\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Connect Sidecar Configuration\nDESCRIPTION: Minimal configuration block for enabling a Consul Connect sidecar proxy service.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/connect.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n  connect {\n    sidecar_service {}\n  }\n```\n\n----------------------------------------\n\nTITLE: Displaying Nomad Client Node Attributes for Virt Driver\nDESCRIPTION: Example of node attributes provided by the Virt task driver that can be used as constraints in job specifications. Shows version information, active/inactive status, and network configuration details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/virt/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndriver.virt                              = true\ndriver.virt.active                       = 0\ndriver.virt.emulator.version             = 8002002\ndriver.virt.inactive                     = 0bytes\ndriver.virt.libvirt.version              = 10000000\ndriver.virt.network.default.bridge_name  = virbr0\ndriver.virt.network.default.state        = active\n```\n\n----------------------------------------\n\nTITLE: Configuring CNI Network for Firecracker Tasks (JSON)\nDESCRIPTION: This snippet demonstrates how to set up a CNI network configuration for Firecracker micro-VMs. It includes plugins for IP allocation, firewall, and tap device redirection.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/firecracker-task-driver.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"default\",\n  \"cniVersion\": \"0.4.0\",\n  \"plugins\": [\n    {\n      \"type\": \"ptp\",\n      \"ipMasq\": true,\n      \"ipam\": {\n        \"type\": \"host-local\",\n        \"subnet\": \"192.168.127.0/24\",\n        \"resolvConf\": \"/etc/resolv.conf\"\n      }\n    },\n    {\n      \"type\": \"firewall\"\n    },\n    {\n      \"type\": \"tc-redirect-tap\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Volume in Nomad Job Specification\nDESCRIPTION: This snippet demonstrates how to configure a host volume in a Nomad job specification. It shows setting the volume type, source, and read-only flag.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/volume.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    volume \"certs\" {\n      type      = \"host\"\n      source    = \"ca-certificates\"\n      read_only = true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an OIDC Authentication Request Payload in JSON\nDESCRIPTION: JSON payload for requesting an OIDC authentication URL. It requires an authentication method name, a redirect URI for the callback, and a client nonce for security purposes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/oidc.mdx#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AuthMethodName\": \"auth0\",\n  \"RedirectURI\": \"http://localhost:4649/oidc/callback\",\n  \"ClientNonce\": \"fpSPuaodKevKfDU3IeXb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Counting Example\nDESCRIPTION: Demonstrates how the strlen function handles Unicode characters by counting emoji as individual characters (grapheme clusters) rather than counting bytes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/strlen.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n> length(\"👾🕹️\")\n2\n```\n\n----------------------------------------\n\nTITLE: Scaling Policies List Response\nDESCRIPTION: Sample JSON response showing multiple scaling policies including vertical CPU, memory and horizontal scaling configurations\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/scaling-policies.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"ID\": \"b2c64295-4315-2fdc-6158-a27156808729\",\n    \"Enabled\": true,\n    \"Type\": \"vertical_cpu\",\n    \"Target\": {\n      \"Namespace\": \"default\",\n      \"Job\": \"example\",\n      \"Group\": \"cache\",\n      \"Task\": \"redis\"\n    },\n    \"CreateIndex\": 1340,\n    \"ModifyIndex\": 1340\n  },\n  {\n    \"ID\": \"c355d0ec-7aa1-2604-449d-4ec79c813d2c\",\n    \"Enabled\": true,\n    \"Type\": \"vertical_mem\",\n    \"Target\": {\n      \"Job\": \"example\",\n      \"Group\": \"cache\",\n      \"Task\": \"redis\",\n      \"Namespace\": \"default\"\n    },\n    \"CreateIndex\": 1340,\n    \"ModifyIndex\": 1340\n  },\n  {\n    \"ID\": \"31a53813-24df-b2ad-77dc-1b4bad4e7dca\",\n    \"Enabled\": true,\n    \"Type\": \"horizontal\",\n    \"Target\": {\n      \"Job\": \"example\",\n      \"Group\": \"cache\",\n      \"Namespace\": \"default\"\n    },\n    \"CreateIndex\": 1358,\n    \"ModifyIndex\": 1358\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Reading a Namespace in JSON\nDESCRIPTION: Shows the expected JSON response when reading a specific namespace. The response includes all the namespace's properties and metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/namespaces.mdx#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Capabilities\": null,\n  \"CreateIndex\": 17,\n  \"Description\": \"Development Staging Namespace\",\n  \"Meta\": {\n    \"type\": \"dev\",\n    \"contact\": \"helpdesk@example.com\"\n  },\n  \"ModifyIndex\": 17,\n  \"Name\": \"staging\",\n  \"Quota\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pausing Deployment with POST Request in JavaScript\nDESCRIPTION: This snippet demonstrates how to pause a deployment by sending a POST request to the Nomad API. It includes the deployment ID and a boolean flag to pause the deployment.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/deployments.mdx#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"DeploymentID\": \"5456bd7a-9fc0-c0dd-6131-cbee77f57577\",\n  \"Pause\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Scheduler Configuration Payload\nDESCRIPTION: Example JSON payload for updating the scheduler configuration including algorithm type, memory oversubscription, and preemption settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/scheduler.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"SchedulerAlgorithm\": \"spread\",\n  \"MemoryOversubscriptionEnabled\": false,\n  \"RejectJobRegistration\": false,\n  \"PauseEvalBroker\": false,\n  \"PreemptionConfig\": {\n    \"SystemSchedulerEnabled\": true,\n    \"SysBatchSchedulerEnabled\": false,\n    \"BatchSchedulerEnabled\": false,\n    \"ServiceSchedulerEnabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering CSI Volume in Nomad (Shell)\nDESCRIPTION: Shell command to register a CSI volume using the Nomad API. Uses curl to send a PUT request with the JSON payload to the specified endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request PUT \\\n    --data @payload.json \\\n    https://localhost:4646/v1/volume/csi/volume-id1\n```\n\n----------------------------------------\n\nTITLE: Using Node Attributes in Nomad Job Constraints\nDESCRIPTION: This example demonstrates how to use node attributes in constraints to target specific types of client nodes based on architecture, CPU cores, and instance type.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/runtime/interpolation.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  # This will constrain this job to only run on 64-bit clients.\n  constraint {\n    attribute = \"${attr.cpu.arch}\"\n    value     = \"amd64\"\n  }\n\n  # This will restrict the job to only run on clients with 4 or more cores.\n  # Note: you may also declare a resource requirement for CPU for a task.\n  constraint {\n    attribute = \"${cpu.numcores}\"\n    operator  = \">=\"\n    value     = \"4\"\n  }\n\n  # Only run this job on a memory-optimized AWS EC2 instance.\n  constraint {\n    attribute = \"${attr.platform.aws.instance-type}\"\n    value     = \"m4.xlarge\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Volume Claims by ID Prefix in Nomad\nDESCRIPTION: Example demonstrating how to list task group host volume claims that match a specific ID prefix (in this case, '81').\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/claim-list.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume claim list 81\nID        Namespace  Job ID   Volume ID  Volume Name\n81b43af2  default    example  18377894   sticky-volume\n```\n\n----------------------------------------\n\nTITLE: Configuring Wait Parameters for Template Rendering in Nomad HCL\nDESCRIPTION: Defines the minimum and maximum wait times for re-rendering templates in Nomad. This configuration controls how often Consul Template attempts to re-render templates when underlying data changes, helping to minimize task restarts and reloads.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/client.mdx#2025-04-19_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nwait {\n  min     = \"5s\"\n  max     = \"4m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Autopilot Health Status via GET Request\nDESCRIPTION: This shell command demonstrates how to query the health status of the Autopilot system using a curl GET request to the /v1/operator/autopilot/health endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/autopilot.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/operator/autopilot/health\n```\n\n----------------------------------------\n\nTITLE: Querying Nomad Agent Members\nDESCRIPTION: Makes GET request to list known peers in the gossip pool. Returns member details including name, address, tags and protocol information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/agent/members\n```\n\n----------------------------------------\n\nTITLE: Nomad Port Allocation Configuration\nDESCRIPTION: Example of port allocation configuration in Nomad job specification.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_21\n\nLANGUAGE: hcl\nCODE:\n```\ngroup {\n  network {\n    port \"http\" {}\n    port \"https\" {}\n  }\n  task \"example\" {\n    driver = \"docker\"\n    config {\n      ports = [\"http\", \"https\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balancer Listener\nDESCRIPTION: Sets up an HTTPS listener for the Application Load Balancer with SSL certificate. Requires load balancer ARN, certificate ARN, and target group ARN.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/aws-oidc-provider.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_lb_listener\" \"example\" {\n  load_balancer_arn = <LB_ARN>\n  port              = \"443\"\n  protocol          = \"HTTPS\"\n  ssl_policy        = \"ELBSecurityPolicy-2016-08\"\n  certificate_arn   = <CERT_ARN>\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = <LB_TARGET_GROUP_ARN>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Volume Expansion Command Output (Shell)\nDESCRIPTION: Shell commands showing the volume expansion process and verification of new capacity.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/host.mdx#2025-04-19_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume create volume.hcl\nCreated host volume database with ID 0c903229-311d-ba8a-f77e-45c31b83fab3\n\n$ nomad volume status -type=host 0c903229 | grep Capacity\nCapacity             = 100 GiB\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Task with Template and Mount (HCL)\nDESCRIPTION: This snippet shows how to configure a Docker task with a template and mount to work around filesystem isolation restrictions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"task\" {\n  driver = \"docker\"\n\n  config {\n    image = \"redis:6.0\"\n    mount {\n      type   = \"bind\"\n      source = \"local\"\n      target = \"/etc/redis.d\"\n    }\n  }\n\n  template {\n    destination = \"local/redis.conf\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reserving CPU Resources by Cores\nDESCRIPTION: HCL configuration to reserve specific CPU cores for the operating system and non-Nomad processes, available only on Linux systems.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/cpu.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  reserved {\n    cores = \"0-3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Docker Mount Syntax in Nomad 1.0.1\nDESCRIPTION: This snippet showcases the new mount syntax introduced in Nomad 1.0.1 for Docker configurations. It provides a more appropriate and cleaner way to specify mount options, including nested blocks for tmpfs options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/index.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nmount {\n  type = \"tmpfs\"\n  tmpfs_options {\n    size = 10000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Namespace Rule Precedence Example in Nomad\nDESCRIPTION: Example demonstrating namespace rule precedence when using wildcards, where rules with greater character matching take precedence over more generic rules.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/acl-policy.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nnamespace \"*-web\" {\n  policy = \"deny\"\n}\n\nnamespace \"*\" {\n  policy = \"write\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Nomad Namespace\nDESCRIPTION: An example of using the `nomad namespace inspect` command to view detailed information about the 'default' namespace. The output includes creation and modification indexes, description, name, and associated quota.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/namespace/inspect.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad namespace inspect default\n{\n    \"CreateIndex\": 5,\n    \"Description\": \"Default shared namespace\",\n    \"ModifyIndex\": 38,\n    \"Name\": \"default\",\n    \"Quota\": \"shared-default-quota\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create Token Response\nDESCRIPTION: JSON response after successfully creating a new ACL token, containing the AccessorID, SecretID, and all other token properties.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AccessorID\": \"aa534e09-6a07-0a45-2295-a7f77063d429\",\n  \"SecretID\": \"8176afd3-772d-0b71-8f85-7fa5d903e9d4\",\n  \"Name\": \"Readonly token\",\n  \"Type\": \"client\",\n  \"Policies\": [\"readonly\"],\n  \"Global\": false,\n  \"CreateTime\": \"2017-08-23T23:25:41.429154233Z\",\n  \"CreateIndex\": 52,\n  \"ModifyIndex\": 52\n}\n```\n\n----------------------------------------\n\nTITLE: Full Node Status Information in Nomad CLI\nDESCRIPTION: Shows detailed information about a specific node including its drivers, events, resource allocation, utilization, and running allocations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/status.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node status 1f3f03ea\nID        = c754da1f\nName      = nomad-server01\nNode Pool = default\nClass     = <none>\nDC        = dc1\nDrain     = false\nStatus    = ready\nUptime    = 17h42m50s\n\nDrivers\nDriver    Detected  Healthy\ndocker    false     false\nexec      true      true\njava      true      true\nqemu      true      true\nraw_exec  true      true\nrkt       true      true\n\nNode Events\nTime                  Subsystem       Message\n2018-03-29T17:24:42Z  Driver: docker  Driver docker is not detected\n2018-03-29T17:23:42Z  Cluster         Node registered\n\nAllocated Resources\nCPU           Memory           Disk\n500/2600 MHz  256 MiB/2.0 GiB  300 MiB/32 GiB\n\nAllocation Resource Utilization\nCPU           Memory\n430/2600 MHz  199 MiB/2.0 GiB\n\nHost Resource Utilization\nCPU           Memory           Disk\n513/3000 MHz  551 MiB/2.4 GiB  4.2 GiB/52 GiB\n\nAllocations\nID        Eval ID   Job ID   Task Group  Desired Status  Client Status\n7bff7214  b3a6b9d2  example  cache       run             running\n```\n\n----------------------------------------\n\nTITLE: Registering CSI Volume in Nomad (JSON)\nDESCRIPTION: JSON payload for registering a CSI volume with Nomad. Includes volume details such as ID, name, namespace, plugin ID, requested capabilities, secrets, and topologies.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Volumes\": [\n    {\n      \"ExternalID\": \"vol-abcdef\",\n      \"ID\": \"volume-id1\",\n      \"Name\": \"volume one\",\n      \"Namespace\": \"default\",\n      \"PluginID\": \"plugin-id1\",\n      \"RequestedCapabilities\": [\n        {\n          \"AccessMode\": \"single-node-writer\",\n          \"AttachmentMode\": \"file-system\"\n        },\n        {\n          \"AccessMode\": \"single-node-writer\",\n          \"AttachmentMode\": \"block-device\"\n        }\n      ],\n      \"Secrets\": {\n        \"password\": \"xyzzy\"\n      },\n      \"Topologies\": [{ \"foo\": \"bar\" }]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an ACL Policy for Workload Access in HCL\nDESCRIPTION: Example ACL policy definition that allows a workload to access variables from the 'shared' namespace. This policy can be associated with specific tasks, groups, or jobs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/workload-identity.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nnamespace \"shared\" {\n  variables {\n    path \"*\" {\n      capabilities = [\"read\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Namespace ACL Policy Example\nDESCRIPTION: Example of an invalid namespace ACL policy without a label. In Nomad 1.6.0, all namespace policies require an explicit namespace label.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/upgrade/upgrade-specific.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nnamespace {\n  policy = \"read\"\n}\n```\n\n----------------------------------------\n\nTITLE: List Job Actions Response in JSON\nDESCRIPTION: Response showing available actions for tasks within a job including command details and task specifications.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Args\": [\n      \"-s\",\n      \"wttr.in/Toronto?format=3\"\n    ],\n    \"Command\": \"/usr/bin/curl\",\n    \"Name\": \"weather\",\n    \"TaskGroupName\": \"group1\",\n    \"TaskName\": \"task\"\n  },\n  {\n    \"Args\": [\n      \"-c\",\n      \"nomad alloc status ${NOMAD_ALLOC_ID}\"\n    ],\n    \"Command\": \"/bin/sh\",\n    \"Name\": \"get-alloc-info\",\n    \"TaskGroupName\": \"group2\",\n    \"TaskName\": \"task\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Promoting canaries in all groups\nDESCRIPTION: This example shows how to promote canaries in all task groups of a job named 'example'. It includes the command execution and the resulting job status output.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/promote.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n# Have two task groups waiting for promotion.\n$ nomad status example\nID            = example\nName          = example\nSubmit Date   = 07/25/17 18:35:05 UTC\nType          = service\nPriority      = 50\nDatacenters   = dc1\nStatus        = running\nPeriodic      = false\nParameterized = false\n\nSummary\nTask Group  Queued  Starting  Running  Failed  Complete  Lost\ncache       0       0         3        0       0         0\nweb         0       0         3        0       0         0\n\nLatest Deployment\nID          = 9fa81f27\nStatus      = running\nDescription = Deployment is running but requires manual promotion\n\nDeployed\nTask Group  Promoted  Desired  Canaries  Placed  Healthy  Unhealthy\nweb         false     2        1         1       0        0\ncache       false     2        1         1       0        0\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created At\n091377e5  a8dcce2d  web         1        run      running  07/25/17 18:35:05 UTC\nd2b13584  a8dcce2d  cache       1        run      running  07/25/17 18:35:05 UTC\n4bb185b7  a8dcce2d  web         0        run      running  07/25/17 18:31:34 UTC\n9b6811ee  a8dcce2d  cache       0        run      running  07/25/17 18:31:34 UTC\ne0a2441b  a8dcce2d  cache       0        run      running  07/25/17 18:31:34 UTC\nf2409f7d  a8dcce2d  web         0        run      running  07/25/17 18:31:34 UTC\n\n# Promote all groups\n$ nomad job promote example\n==> Monitoring evaluation \"6c6e64ae\"\n    Evaluation triggered by job \"example\"\n    Evaluation within deployment: \"9fa81f27\"\n    Allocation \"8fa21654\" created: node \"a8dcce2d\", group \"web\"\n    Allocation \"9f6727a6\" created: node \"a8dcce2d\", group \"cache\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"6c6e64ae\" finished with status \"complete\"\n\n# Inspect the status and see both groups have been promoted.\n$ nomad status example\nID            = example\nName          = example\nSubmit Date   = 07/25/17 18:35:05 UTC\nType          = service\nPriority      = 50\nDatacenters   = dc1\nStatus        = running\nPeriodic      = false\nParameterized = false\n\nSummary\nTask Group  Queued  Starting  Running  Failed  Complete  Lost\ncache       0       0         2        0       2         0\nweb         0       0         2        0       2         0\n\nLatest Deployment\nID          = 9fa81f27\nStatus      = successful\nDescription = Deployment completed successfully\n\nDeployed\nTask Group  Promoted  Desired  Canaries  Placed  Healthy  Unhealthy\nweb         true      2        1         2       2        0\ncache       true      2        1         2       2        0\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status    Created At\n8fa21654  a8dcce2d  web         1        run      running   07/25/17 18:35:21 UTC\n9f6727a6  a8dcce2d  cache       1        run      running   07/25/17 18:35:21 UTC\n091377e5  a8dcce2d  web         1        run      running   07/25/17 18:35:05 UTC\nd2b13584  a8dcce2d  cache       1        run      running   07/25/17 18:35:05 UTC\n4bb185b7  a8dcce2d  web         0        stop     complete  07/25/17 18:31:34 UTC\n9b6811ee  a8dcce2d  cache       0        stop     complete  07/25/17 18:31:34 UTC\ne0a2441b  a8dcce2d  cache       0        stop     complete  07/25/17 18:31:34 UTC\nf2409f7d  a8dcce2d  web         0        stop     complete  07/25/17 18:31:34 UTC\n```\n\n----------------------------------------\n\nTITLE: Sample ACL Login cURL Request\nDESCRIPTION: Example cURL command demonstrating how to make a POST request to the ACL login endpoint with a JSON payload.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/login.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://localhost:4646/v1/acl/login\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6 Advertise Addresses in Nomad (HCL)\nDESCRIPTION: This snippet demonstrates how to use go-sockaddr templating to dynamically select public IPv6 addresses for Nomad's advertise block. It fetches one IPv6 address from public interfaces for each protocol (http, rpc, serf).\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/ipv6-support.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nadvertise {\n  http = \"{{ GetPublicInterfaces | include `type` `IPv6` | limit 1 | attr `address` }}\"\n  rpc  = \"{{ GetPublicInterfaces | include `type` `IPv6` | limit 1 | attr `address` }}\"\n  serf = \"{{ GetPublicInterfaces | include `type` `IPv6` | limit 1 | attr `address` }}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of nomad setup consul Command\nDESCRIPTION: Shows the basic syntax for using the nomad setup consul command with optional parameters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/setup/consul.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad setup consul [options]\n```\n\n----------------------------------------\n\nTITLE: Nomad Job Tag Apply Example - Specific Version\nDESCRIPTION: Example showing how to tag a specific version (version 0) of a job.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/tag.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad job tag apply -version 0 \\\n      -name \"golden-version\" \\\n      hello-world\n```\n\n----------------------------------------\n\nTITLE: Examples of using nomad alloc stop command\nDESCRIPTION: Demonstrates two examples of using the 'nomad alloc stop' command. The first example shows interactive monitoring, while the second uses the -detach option to return immediately.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/stop.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc stop c1488bb5\n==> Monitoring evaluation \"26172081\"\n    Evaluation triggered by job \"example\"\n    Allocation \"4dcb1c98\" created: node \"b4dc52b9\", group \"cache\"\n    Evaluation within deployment: \"c0c594d0\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"26172081\" finished with status \"complete\"\n\n$ nomad alloc stop -detach eb17e557\n8a91f0f3-9d6b-ac83-479a-5aa186ab7795\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Job Restart Command\nDESCRIPTION: Basic command syntax for restarting a Nomad job. The command requires a job ID and supports various options for controlling restart behavior, batch operations, and error handling.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/restart.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad job restart [options] <job>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad APM Plugin in HCL\nDESCRIPTION: This snippet shows how to configure the Nomad APM plugin in the agent configuration. It specifies the driver to be used.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/apm/nomad.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\napm \"nomad-apm\" {\n  driver = \"nomad-apm\"\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Specific Group Allocations in Nomad Job\nDESCRIPTION: This example shows how to restart allocations of a specific group within a Nomad job. It uses the '-group' flag to target the 'web' group in the 'example' job, restarting only the allocations associated with that group.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/restart.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job restart -group=web example\n==> 2023-02-28T17:37:36-05:00: Restarting 2 allocations\n    2023-02-28T17:37:36-05:00: Restarting running tasks in allocation \"388129e0\" for group \"web\"\n    2023-02-28T17:37:37-05:00: Restarting running tasks in allocation \"d4303a30\" for group \"web\"\n==> 2023-02-28T17:37:37-05:00: Finished job restart\n\nAll allocations restarted successfully!\n```\n\n----------------------------------------\n\nTITLE: Listing Node Pools via HTTP GET in Shell\nDESCRIPTION: This snippet demonstrates how to list all node pools using the Nomad API. It includes examples of filtering by prefix, using pagination, and applying filters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/node-pools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api '/v1/node/pools'\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api '/v1/node/pools?prefix=prod'\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api -filter 'Meta.env == \"production\"' '/v1/node/pools?per_page=5'\n```\n\n----------------------------------------\n\nTITLE: Example of Displaying Certificate Information in Nomad CLI\nDESCRIPTION: Demonstrates how to use the 'nomad tls cert info' command with an example certificate file and shows the output including serial number, issuer information, common name, expiry date, DNS names, and IP addresses.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/tls/cert-info.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad tls cert info global-cli-nomad.pem\nSerial Number  307777061759235334129808343588809897525\nIssuer CN      Nomad Agent CA 314623649437549144006237783956683542664\nCommon Name    CN=cli.global.nomad\nExpiry Date    2023-11-14 21:40:45 +0000 UTC\nDNS Names      [cli.global.nomad localhost]\nIP Addresses   []\n```\n\n----------------------------------------\n\nTITLE: Basic Audit Configuration in HCL\nDESCRIPTION: Minimal configuration to enable audit logging in Nomad agent.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/audit.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\naudit {\n  enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new ACL Binding Rule\nDESCRIPTION: Example of creating a new ACL Binding Rule with a description, auth method, bind type, bind name, and selector. It demonstrates the basic usage of the command with its main options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/binding-rule/create.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl binding-rule create \\\n    -description \"example binding rule\" \\\n    -auth-method \"auth0\" \\\n    -bind-type \"role\" \\\n    -bind-name \"eng-ro\" \\\n    -selector \"engineering in list.roles\"\nID           = 698fdad6-dcb3-79dd-dc72-b43374057dea\nDescription  = example binding rule\nAuth Method  = auth0\nSelector     = \"engineering in list.roles\"\nBind Type    = role\nBind Name    = eng-ro\nCreate Time  = 2022-12-20 11:15:22.582568 +0000 UTC\nModify Time  = 2022-12-20 11:15:22.582568 +0000 UTC\nCreate Index = 14\nModify Index = 14\n```\n\n----------------------------------------\n\nTITLE: Manually Installing Consul CNI Plugin on Linux\nDESCRIPTION: Commands to manually download and install the Consul CNI plugin on Linux systems. This approach detects the architecture (amd64 or arm64) and extracts the binary to the CNI plugins directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/partials/install/install-consul-cni-plugin.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ export ARCH_CNI=$( [ $(uname -m) = aarch64 ] && echo arm64 || echo amd64)\n$ curl -L -o consul-cni.zip \"https://releases.hashicorp.com/consul-cni/1.5.1/consul-cni_1.5.1_linux_${ARCH_CNI}\".zip && \\\n  sudo unzip consul-cni.zip -d /opt/cni/bin -x LICENSE.txt\n```\n\n----------------------------------------\n\nTITLE: Updated Scheduler Configuration Response in Nomad API\nDESCRIPTION: JSON response after updating the scheduler configuration, showing the new settings that have been applied. Confirms the enabled scheduler types and the new number of scheduler workers.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enabled_schedulers\": [\n    \"service\",\n    \"batch\",\n    \"system\",\n    \"sysbatch\",\n    \"_core\"\n  ],\n  \"num_schedulers\": 12,\n  \"server_id\": \"server1.global\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing ACL Tokens with Prefix Filter\nDESCRIPTION: POST request to list ACL tokens filtered by an accessor ID prefix. The prefix must have an even number of hexadecimal characters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    https://localhost:4646/v1/acl/tokens?prefix=3da2ed52\n```\n\n----------------------------------------\n\nTITLE: Sample Response for One-Time Token Creation\nDESCRIPTION: The response includes the one-time token details such as AccessorID, CreateIndex, ExpiresAt, and OneTimeSecretID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Index\": 15,\n  \"OneTimeToken\": {\n    \"AccessorID\": \"b780e702-98ce-521f-2e5f-c6b87de05b24\",\n    \"CreateIndex\": 7,\n    \"ExpiresAt\": \"2017-08-23T22:47:14.695408057Z\",\n    \"ModifyIndex\": 7,\n    \"OneTimeSecretID\": \"3f4a0fcd-7c42-773c-25db-2d31ba0c05fe\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lock Acquisition Request Payload - JSON\nDESCRIPTION: JSON payload for lock acquisition containing namespace, path, items and lock parameters including TTL and LockDelay.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/variables/locks.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Namespace\": \"prod\",\n  \"Path\": \"example/first\",\n  \"Items\": {\n    \"user\": \"me\",\n    \"password\": \"passw0rd1\"\n  },\n  \"Lock\": {\n    \"TTL\": \"15s\",\n    \"LockDelay\": \"1m\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching ACL Role Info by Name in Nomad\nDESCRIPTION: This example shows how to fetch information about an existing ACL role using its name. The '-by-name' option is used to specify that the identifier is a name rather than an ID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/role/info.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl role info -by-name example-acl-role\nID           = a53b0095-c28a-6181-0586-807b82e665e4\nName         = example-acl-role\nDescription  = <none>\nPolicies     = general-write\nCreate Index = 71\nModify Index = 71\n```\n\n----------------------------------------\n\nTITLE: Registering a CSI Volume with HCL Configuration\nDESCRIPTION: Example HCL configuration for registering a CSI volume using the `volume register` command. The configuration defines volume attributes including ID, name, type, capabilities, mount options, topology requirements, secrets, parameters, and context information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/csi.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nid              = \"ebs_prod_db1\"\nname            = \"database\"\ntype            = \"csi\"\nexternal_id     = \"vol-23452345\"\nplugin_id       = \"ebs-prod\"\n\ncapability {\n  access_mode     = \"single-node-reader-only\"\n  attachment_mode = \"file-system\"\n}\n\ncapability {\n  access_mode     = \"single-node-writer\"\n  attachment_mode = \"file-system\"\n}\n\nmount_options {\n  fs_type     = \"ext4\"\n  mount_flags = [\"noatime\"]\n}\n\ntopology_request {\n  required {\n    topology { segments { \"rack\" = \"R2\" } }\n    topology { segments { \"rack\" = \"R1\", \"zone\" = \"us-east-1a\"} }\n  }\n}\n\nsecrets {\n  example_secret = \"xyzzy\"\n}\n\nparameters {\n  skuname = \"Premium_LRS\"\n}\n\ncontext {\n  endpoint = \"http://192.168.1.101:9425\"\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating a job with detach option\nDESCRIPTION: Example of using the '-detach' option with 'nomad job eval' to return immediately after triggering an evaluation, without monitoring its progress.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/eval.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job eval -detach job1\nCreated eval ID: \"4947e728\"\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Allocation Signal Command Syntax\nDESCRIPTION: Shows the basic command syntax for signaling allocations and tasks in Nomad.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/signal.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad alloc signal [options] <allocation> <task>\n```\n\n----------------------------------------\n\nTITLE: Displaying Job Version Differences\nDESCRIPTION: Example showing how to display the history of job versions with differences between versions using the -p flag.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/history.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job history -p e\nVersion     = 2\nStable      = false\nSubmit Date = 07/25/17 20:35:43 UTC\nDiff        =\n+/- Job: \"example\"\n+/- Task Group: \"cache\"\n  +/- Task: \"redis\"\n    +/- Resources {\n          CPU:      \"500\"\n          DiskMB:   \"0\"\n      +/- MemoryMB: \"256\" => \"512\"\n        }\n\nVersion     = 1\nStable      = false\nSubmit Date = 07/25/17 20:35:31 UTC\nDiff        =\n+/- Job: \"example\"\n+/- Task Group: \"cache\"\n  +/- Count: \"1\" => \"3\"\n      Task: \"redis\"\n\nVersion     = 0\nStable      = false\nSubmit Date = 07/25/17 20:35:28 UTC\n```\n\n----------------------------------------\n\nTITLE: Self-Referential Node Status in Nomad CLI\nDESCRIPTION: Displays detailed information about the local node when running the command on a Nomad client using the -self flag, showing node details and resource usage.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/status.mdx#2025-04-19_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node status -self\nID        = c754da1f\nName      = nomad-client01\nNode Pool = default\nClass     = <none>\nDC        = dc1\nDrain     = false\nStatus    = ready\nUptime    = 17h7m41s\n\nDrivers\nDriver    Detected  Healthy\ndocker    false     false\nexec      true      true\njava      true      true\nqemu      true      true\nraw_exec  true      true\nrkt       true      true\n\nNode Events\nTime                  Subsystem       Message\n2018-03-29T17:24:42Z  Driver: docker  Driver docker is not detected\n2018-03-29T17:23:42Z  Cluster         Node registered\n\nAllocated Resources\nCPU            Memory           Disk\n2500/2600 MHz  1.3 GiB/2.0 GiB  1.5 GiB/32 GiB\n\nAllocation Resource Utilization\nCPU            Memory\n2200/2600 MHz  1.7 GiB/2.0 GiB\n\nHost Resource Utilization\nCPU            Memory           Disk\n2430/3000 MHz  1.8 GiB/2.4 GiB  6.5 GiB/40 GiB\n\nAllocations\nID        Eval ID   Job ID   Task Group  Desired Status  Client Status\n0b8b9e37  8bf94335  example  cache       run             running\nb206088c  8bf94335  example  cache       run             running\nb82f58b6  8bf94335  example  cache       run             running\ned3665f5  8bf94335  example  cache       run             running\n24cfd201  8bf94335  example  cache       run             running\n```\n\n----------------------------------------\n\nTITLE: Configuring Raft BoltDB in Nomad Server\nDESCRIPTION: HCL configuration for disabling freelist-sync in the Raft BoltDB database to reduce disk IO on Nomad servers. This may increase server startup times.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/upgrade/upgrade-specific.mdx#2025-04-19_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nserver {\n  raft_boltdb {\n    no_freelist_sync = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Access Rules in Nomad\nDESCRIPTION: Example of setting read-only access policy for CSI plugin operations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/acl-policy.mdx#2025-04-19_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nplugin {\n  policy = \"read\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using nomad alloc exec command\nDESCRIPTION: Basic usage syntax for the nomad alloc exec command. It allows running a command in a specific allocation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/exec.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad alloc exec [options] <allocation> <command> [<args>...]\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Variable List Command Usage\nDESCRIPTION: Shows the basic command syntax for listing Nomad variables\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad var list [options] [<prefix>]\n```\n\n----------------------------------------\n\nTITLE: Viewing full status information of a volume\nDESCRIPTION: Example showing verbose output for a specific volume, including all volume details and allocation information such as ID, Node ID, Access Mode, and Task Group.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/status.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume status -verbose ebs_prod_db1\nID                   = ebs_prod_db1\nName                 = database\nType                 = csi\nExternal ID          = vol-23452345\nPlugin ID            = ebs-prod\nProvider             = aws.ebs\nVersion              = 1.0.1\nCapacity             = 100 GiB\nSchedulable          = true\nControllers Healthy  = 1\nControllers Expected = 1\nNodes Healthy        = 1\nNodes Expected       = 1\nAccess Mode          = single-node-writer\nAttachment Mode      = file-system\nMount options        = fs_type: ext4 flags: ro\nNamespace            = default\n\nAllocations\nID        Node ID   Access Mode   Task Group  Version  Desired  [...]\nb00fa322  28be17d5  write         csi         0        run\n```\n\n----------------------------------------\n\nTITLE: Read CSI Volume API Request\nDESCRIPTION: Example of making a GET request to read details of a specific CSI volume by ID\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/volume/csi/volume-id1\n```\n\n----------------------------------------\n\nTITLE: Streaming logs from a random allocation of a job\nDESCRIPTION: Example of using 'nomad alloc logs' with the -job option to display logs from a random allocation of a specific job.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/logs.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc logs -job example\n[ERR]: foo\n[ERR]: bar\n```\n\n----------------------------------------\n\nTITLE: Listing Nodes in a Node Pool via HTTP GET in Shell\nDESCRIPTION: This snippet shows how to list nodes in a specific node pool using the Nomad API. It includes examples of using pagination and including additional node information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/node-pools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api /v1/node/pool/prod-eng/nodes\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api /v1/node/pool/prod-eng/nodes?os=true\n```\n\n----------------------------------------\n\nTITLE: Installing Consul CNI Plugin on Amazon Linux\nDESCRIPTION: Command to install the consul-cni package on Amazon Linux using yum package manager. This is required for transparent proxying with Consul service mesh.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/partials/install/install-consul-cni-plugin.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo yum -y install consul-cni\n```\n\n----------------------------------------\n\nTITLE: Creating Job Version Tag with JSON Payload in Nomad API\nDESCRIPTION: This snippet shows the JSON payload structure for creating a job version tag. It includes optional fields for specifying the version number and a description for the tag.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": 0,\n  \"Description\": \"The version we can roll back to.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Scaling Command Usage\nDESCRIPTION: The basic syntax for using the Nomad scaling command with subcommands and options. Used to interact with scaling policies via the scaling API.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/scaling/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnomad scaling <subcommand> [options]\n```\n\n----------------------------------------\n\nTITLE: Basic Node Status List View in Nomad CLI\nDESCRIPTION: Displays a basic list view of Nomad nodes showing their ID, node pool, datacenter, name, class, drain status, eligibility, and status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/status.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node status\nID        Node Pool  DC   Name   Class   Drain  Eligibility  Status\na72dfba2  default    dc1  node1  <none>  false  eligible     ready\n1f3f03ea  dev        dc1  node2  <none>  false  eligible     ready\n```\n\n----------------------------------------\n\nTITLE: formatdate Usage Examples in Shell\nDESCRIPTION: Demonstrates various formatting patterns including date, time, and timezone formatting using the formatdate function with RFC 3339 timestamps.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/datetime/formatdate.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> formatdate(\"DD MMM YYYY hh:mm ZZZ\", \"2018-01-02T23:12:01Z\")\n02 Jan 2018 23:12 UTC\n> formatdate(\"EEEE, DD-MMM-YY hh:mm:ss ZZZ\", \"2018-01-02T23:12:01Z\")\nTuesday, 02-Jan-18 23:12:01 UTC\n> formatdate(\"EEE, DD MMM YYYY hh:mm:ss ZZZ\", \"2018-01-02T23:12:01-08:00\")\nTue, 02 Jan 2018 23:12:01 -0800\n> formatdate(\"MMM DD, YYYY\", \"2018-01-02T23:12:01Z\")\nJan 02, 2018\n> formatdate(\"HH:mmaa\", \"2018-01-02T23:12:01Z\")\n11:12pm\n```\n\n----------------------------------------\n\nTITLE: Reading Deployment - JSON Response\nDESCRIPTION: Sample JSON response showing detailed information about a specific deployment.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/deployments.mdx#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ID\": \"70638f62-5c19-193e-30d6-f9d6e689ab8e\",\n  \"JobID\": \"example\",\n  \"JobVersion\": 1,\n  \"JobModifyIndex\": 17,\n  \"JobSpecModifyIndex\": 17,\n  \"JobCreateIndex\": 7,\n  \"TaskGroups\": {\n    \"cache\": {\n      \"Promoted\": false,\n      \"DesiredCanaries\": 1,\n      \"DesiredTotal\": 3,\n      \"PlacedAllocs\": 1,\n      \"HealthyAllocs\": 0,\n      \"UnhealthyAllocs\": 0\n    }\n  },\n  \"Status\": \"running\",\n  \"StatusDescription\": \"\",\n  \"CreateIndex\": 19,\n  \"ModifyIndex\": 19\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Nomad Scheduler Worker Status\nDESCRIPTION: Example of requesting the status of all scheduler workers from a Nomad server agent. Returns details about each scheduler worker including their enabled schedulers, ID, start time, and current operational status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_17\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/agent/schedulers\n```\n\n----------------------------------------\n\nTITLE: Standard Nomad Job Scaling Events Output Example\nDESCRIPTION: Demonstrates the standard output format when viewing scaling events for a job named 'job1', showing task group, count changes, and timestamps.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/scaling-events.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job scaling-events job1\nTask Group  Count   PrevCount  Date\ngroup1      8       8          2020-10-23T09:06:47+02:00\ngroup1      8       3          2020-10-23T09:02:42+02:00\n```\n\n----------------------------------------\n\nTITLE: Provisioning Azure infrastructure with Terraform\nDESCRIPTION: Commands to initialize Terraform, fetch modules, plan the deployment, and apply the configuration to create the infrastructure on Azure.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/azure/README.md#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform get\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Stopping a Job with DELETE Request in Shell\nDESCRIPTION: Makes a DELETE request to stop a job named 'my-job' using curl. The 'purge' parameter is set to true to immediately purge the job.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    https://localhost:4646/v1/job/my-job?purge=true\n```\n\n----------------------------------------\n\nTITLE: Listing Variables Under Specific Path\nDESCRIPTION: Example showing how to list variables under the nomad/jobs path with default table output\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad var list nomad/jobs\nNamespace  Path                           Last Updated\ndefault    nomad/jobs/example             2022-08-23T10:35:47-04:00\ndefault    nomad/jobs/variable            2022-08-23T10:24:45-04:00\ndefault    nomad/jobs/variable/www        2022-08-23T10:24:45-04:00\ndefault    nomad/jobs/variable/www/nginx  2022-08-23T10:24:46-04:00\n```\n\n----------------------------------------\n\nTITLE: Streaming debug logs for a specific node\nDESCRIPTION: Example of using nomad monitor to stream debug-level logs for a specific node ID. It demonstrates how to set the log level and target a particular node.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/monitor.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad monitor -log-level=DEBUG -node-id=a57b2adb-1a30-2dda-8df0-25abb0881952\n2019-11-04T12:22:08.528-0500 [DEBUG] http: request complete: method=GET path=/v1/agent/health?type=server duration=1.445739ms\n2019-11-04T12:22:09.892-0500 [DEBUG] nomad: memberlist: Stream connection from=127.0.0.1:53628\n```\n\n----------------------------------------\n\nTITLE: Update Block Inheritance Example\nDESCRIPTION: Demonstration of update block inheritance between job and group levels, showing how parameters are merged.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/update.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n  ...\n\n  update {\n    max_parallel     = 2\n    health_check     = \"task_states\"\n    healthy_deadline = \"10m\"\n  }\n\n  group \"one\" {\n    ...\n\n    update {\n      canary = 1\n    }\n  }\n\n  group \"two\" {\n    ...\n\n    update {\n      min_healthy_time = \"3m\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux Capability Restrictions for Java Driver\nDESCRIPTION: This snippet shows how to drop all default Linux capabilities and selectively add only specific ones for a Java task.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/java.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  cap_drop = [\"all\"]\n  cap_add  = [\"chown\", \"sys_chroot\", \"mknod\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Task Meta Values in Templates\nDESCRIPTION: Example showing how to access task meta values from within a template by using environment variables.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nmeta {\n  mykey = \"some_value\"\n}\n\ntemplate {\n  data = <<EOH\n  {{ env \"NOMAD_META_mykey\" }}\nEOH\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring an EXT4 Filesystem Host Volume in Nomad HCL\nDESCRIPTION: A volume specification for the mkfs-ext4 plugin that creates a Linux ext4 filesystem. This configuration includes capacity constraints required by the plugin to limit filesystem size.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/plugins/storage/host-volumes.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ntype         = \"host\"\nname         = \"mkfs-vol\"\nplugin_id    = \"mkfs-ext4\" # plugin filename\ncapacity_min = \"50MB\" # capacity values are required by this plugin\ncapacity_max = \"50MB\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nomad Autoscaler Metrics via HTTP\nDESCRIPTION: Demonstrates how to retrieve metrics for the current Nomad Autoscaler process using curl. It shows both default JSON format and Prometheus format requests.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/api.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl https://localhost:8080/v1/metrics\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl https://localhost:8080/v1/metrics?format=prometheus\n```\n\n----------------------------------------\n\nTITLE: Setting Complex Variable Values through Environment Variables\nDESCRIPTION: Example showing how to set complex variable values (like arrays) using environment variables. This requires careful attention to syntax and string escaping in the shell.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/variables.mdx#2025-04-19_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ export NOMAD_VAR_availability_zone_names='[\"us-west-1b\",\"us-west-1d\"]'\n```\n\n----------------------------------------\n\nTITLE: Updating an ACL Binding Rule with cURL\nDESCRIPTION: Makes a POST request to update an existing ACL Binding Rule identified by its ID. Requires a management token and is forwarded to the authoritative region.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/binding-rules.mdx#2025-04-19_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --header \"X-Nomad-Token: <NOMAD_TOKEN_SECRET_ID>\" \\\n    --data @payload.json \\\n    https://localhost:4646/v1/acl/binding-rule/example-acl-binding-rule\n```\n\n----------------------------------------\n\nTITLE: Implementing PluginInfoResponse in Nomad Base Plugin (Go)\nDESCRIPTION: Example of a PluginInfoResponse struct implementation that contains metadata about the plugin, including its type, supported API versions, plugin version, and name.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/plugins/base.mdx#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nPluginInfoResponse{\n    // Type is the plugin type which is implemented\n    Type: PluginTypeDriver,\n    // Plugin API versions supported by the plugin\n    PluginApiVersions: []string{drivers.ApiVersion010},\n    // Version of the plugin\n    PluginVersion: \"0.1.0\",\n    // Name of the plugin\n    Name: \"foodriver\",\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Maps/Objects in HCL\nDESCRIPTION: Example of how to create map/object literals in HCL using curly braces with key-value pairs. Keys can be unquoted if they are valid identifiers or quoted otherwise.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/expressions.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n{\n  name = \"John\"\n  age  = 52\n}\n```\n\n----------------------------------------\n\nTITLE: Nomad Job Submission API Request\nDESCRIPTION: Shell command to retrieve job submission information using Nomad's HTTP API endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\nnomad operator api /v1/job/my-job/submission?version=42\n```\n\n----------------------------------------\n\nTITLE: Mixed Server Address and Cloud Auto-join Configuration in HCL\nDESCRIPTION: A server_join configuration combining both direct server addresses and cloud auto-join mechanisms. This provides flexibility in hybrid environments where some servers have static addresses and others are discovered dynamically.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/server_join.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nserver_join {\n  retry_join = [ \"1.1.1.1\", \"provider=aws tag_key=...\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Target Value Strategy Policy Configuration\nDESCRIPTION: HCL configuration block showing policy options including target, threshold, and scale limits.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/strategy/target-value.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ncheck \"target-value-check\" {\n  # ...\n  strategy \"target-value\" {\n    target    = 20\n    threshold = 0.0001\n  }\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using -task option with precedence over command argument\nDESCRIPTION: Example showing that when both -task option and command argument are used to specify task name, the -task option takes precedence.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/logs.mdx#2025-04-19_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc logs -task redis eb17e557 api\n```\n\n----------------------------------------\n\nTITLE: Scheduler Worker Status Response in Nomad API\nDESCRIPTION: JSON response from the /v1/agent/schedulers endpoint showing the status of multiple scheduler workers. Includes information about which schedulers are enabled, worker IDs, start times, and current operational states.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schedulers\": [\n    {\n      \"enabled_schedulers\": [\n        \"service\",\n        \"batch\",\n        \"system\",\n        \"sysbatch\",\n        \"_core\"\n      ],\n      \"id\": \"5669d6fa-0def-7369-6558-a47c35fdc675\",\n      \"started\": \"2021-12-21T19:25:00.911883Z\",\n      \"status\": \"Paused\",\n      \"workload_status\": \"Paused\"\n    },\n    {\n      \"enabled_schedulers\": [\n        \"service\",\n        \"batch\",\n        \"system\",\n        \"sysbatch\",\n        \"_core\"\n      ],\n      \"id\": \"c919709d-6d14-66bf-b425-80b8167a267e\",\n      \"started\": \"2021-12-21T19:25:00.91189Z\",\n      \"status\": \"Paused\",\n      \"workload_status\": \"Paused\"\n    },\n    {\n      \"enabled_schedulers\": [\n        \"service\",\n        \"batch\",\n        \"system\",\n        \"sysbatch\",\n        \"_core\"\n      ],\n      \"id\": \"f5edb69a-6122-be8f-b32a-23cd8511dba5\",\n      \"started\": \"2021-12-21T19:25:00.911961Z\",\n      \"status\": \"Paused\",\n      \"workload_status\": \"Paused\"\n    },\n    {\n      \"enabled_schedulers\": [\n        \"service\",\n        \"batch\",\n        \"system\",\n        \"sysbatch\",\n        \"_core\"\n      ],\n      \"id\": \"458816ae-83cf-0710-d8d4-35d2ad2e42d7\",\n      \"started\": \"2021-12-21T19:25:00.912119Z\",\n      \"status\": \"Started\",\n      \"workload_status\": \"WaitingToDequeue\"\n    }\n  ],\n  \"server_id\": \"server1.global\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an ACL Role with JSON payload in Nomad\nDESCRIPTION: JSON payload for creating a new ACL Role with a name, description, and associated policies. This is used with the POST /v1/acl/role endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/roles.mdx#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Name\": \"example-acl-role\",\n  \"Description\": \"my example ACL Role\",\n  \"Policies\": [\n    {\n      \"Name\": \"example-acl-policy\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Command for nspawn Container\nDESCRIPTION: This snippet shows how to specify a command to be executed in the nspawn container. It uses a list of strings to pass the command.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/nspawn.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  command = [ \"/bin/bash\", \"-c\", \"dhclient && nginx && tail -f /var/log/nginx/access.log\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Successful OIDC Authentication Response in JSON\nDESCRIPTION: JSON response after successfully completing OIDC authentication. It contains the generated token information including AccessorID, SecretID, associated roles, and expiration details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/oidc.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AccessorID\": \"cbbc7059-3acf-2ef5-378b-495f5f81f733\",\n  \"CreateIndex\": 18,\n  \"CreateTime\": \"2023-01-18T10:53:29.460987Z\",\n  \"ExpirationTTL\": 600000000000,\n  \"ExpirationTime\": \"2023-01-18T11:03:29.460987Z\",\n  \"Global\": true,\n  \"ModifyIndex\": 18,\n  \"Name\": \"OIDC-auth0\",\n  \"Policies\": [],\n  \"Roles\": [\n    {\n      \"ID\": \"10b1a678-f71d-d266-2888-8b3e47e317b8\",\n      \"Name\": \"engineering-read\"\n    }\n  ],\n  \"SecretID\": \"1fce464c-06d1-4020-8564-631c25201ea7\",\n  \"Type\": \"client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying server members in JSON format\nDESCRIPTION: Example showing how to use the -json flag to output server members information in JSON format, which includes detailed information about each server.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/server/members.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad server members -json\n[\n    {\n        \"Addr\": \"127.0.0.1\",\n        \"DelegateCur\": 4,\n        \"DelegateMax\": 5,\n        \"DelegateMin\": 2,\n        \"Name\": \"bacon-mac.global\",\n        \"Port\": 4648,\n        \"ProtocolCur\": 2,\n        \"ProtocolMax\": 5,\n        \"ProtocolMin\": 1,\n        \"Status\": \"alive\",\n        \"Tags\": {\n            \"build\": \"1.5.0\",\n            \"region\": \"global\",\n            \"rpc_addr\": \"127.0.0.1\",\n            \"role\": \"nomad\",\n            \"raft_vsn\": \"3\",\n            \"bootstrap\": \"1\",\n            \"expect\": \"1\",\n            \"dc\": \"dc1\",\n            \"port\": \"4647\",\n            \"revision\": \"fc40c491cacec3d8ec3f2f98cd82b9068a50797c\",\n            \"vsn\": \"1\",\n            \"id\": \"354fd9a8-4228-ca8e-8b93-3cf002514910\"\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Variables for AWS Nomad Cluster\nDESCRIPTION: This snippet shows the content of terraform.tfvars file, which sets various configuration parameters for the Nomad cluster deployment on AWS, including region, AMI, instance type, and cluster size.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/aws/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nregion                  = \"us-east-1\"\nami                     = \"ami-09730698a875f6abd\"\ninstance_type           = \"t2.medium\"\nkey_name                = \"KEY_NAME\"\nserver_count            = \"3\"\nclient_count            = \"4\"\n```\n\n----------------------------------------\n\nTITLE: Toggling Node Eligibility using cURL in Nomad\nDESCRIPTION: This cURL command sends a POST request to toggle a node's eligibility status. It requires the node's UUID in the URL path and uses a JSON payload to specify the eligibility.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/nodes.mdx#2025-04-19_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -XPOST \\\n    --data @eligibility.json \\\n    http://localhost:4646/v1/node/fb2170a8-257d-3c64-b14d-bc06cc94e34c/eligibility\n```\n\n----------------------------------------\n\nTITLE: Compact Distinct Hosts Constraint\nDESCRIPTION: Shows the compact representation of the distinct_hosts constraint operator.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/constraint.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconstraint {\n    distinct_hosts = true\n}\n```\n\n----------------------------------------\n\nTITLE: Nomad Allocation Restart Basic Examples\nDESCRIPTION: Demonstrates basic usage of the alloc restart command, including attempting to restart a non-existent task.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/restart.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc restart eb17e557\n\n$ nomad alloc restart eb17e557 foo\nCould not find task named: foo, found:\n* test\n<blocking>\n```\n\n----------------------------------------\n\nTITLE: Setting Linux Bridge Network Parameters for Iptables Processing\nDESCRIPTION: These commands set the tunable parameters to allow iptables processing for the bridge network. They enable ARP tables, IPv6 tables, and IP tables processing for bridge network traffic.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/partials/install/bridge-iptables.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ echo 1 > /proc/sys/net/bridge/bridge-nf-call-arptables\n$ echo 1 > /proc/sys/net/bridge/bridge-nf-call-ip6tables\n$ echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables\n```\n\n----------------------------------------\n\nTITLE: Running a Nomad Cluster with Specified Binary\nDESCRIPTION: Starts a 3-server, 2-client Nomad cluster using a specified Nomad binary. This script also runs a local Consul dev agent for service discovery.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/upgrades/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./run_cluster.sh /path/to/Nomad0.8.7\n```\n\n----------------------------------------\n\nTITLE: Sample Job Scale Payload in JavaScript\nDESCRIPTION: Example payload for scaling a job group with count, metadata, message and target specifications.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"Count\": 5,\n    \"Meta\": {\n        \"metrics\": [\n            \"cpu\",\n            \"memory\"\n        ]\n    },\n    \"Message\": \"metric did not satisfy SLA\",\n    \"Target\": {\n        \"Group\": \"cache\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Associating ACL Policy with a Specific Task in Nomad\nDESCRIPTION: An example of applying an ACL policy to a specific task within a job, group, and namespace using the -namespace, -job, -group, and -task options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/policy/apply.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl policy apply \\\n    -namespace default -job example -group cache -task redis \\\n    my-policy my-policy.json\nSuccessfully wrote 'my-policy' ACL policy!\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Clients with CNI Path and Config Directory\nDESCRIPTION: This HCL configuration enables the Nomad client and sets the CNI path and configuration directory. It uses the default values for both attributes: '/opt/cni/bin' for cni_path and '/opt/cni/config' for cni_config_dir.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/networking/cni.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  enabled = true\n  cni_path = \"opt/cni/bin\"\n  cni_config_dir = \"opt/cni/config\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the 'nomad acl policy list' Command in Nomad\nDESCRIPTION: This command is used to list available ACL policies in Nomad. It requires a management ACL token to view all policies, while a non-management token can query its own policies.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/policy/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl policy list\n```\n\n----------------------------------------\n\nTITLE: Nomad Job Deployments Command Syntax\nDESCRIPTION: Basic command syntax for listing job deployments in Nomad. Requires a job ID or prefix as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/deployments.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad job deployments [options] <job>\n```\n\n----------------------------------------\n\nTITLE: Reading a Sentinel policy example\nDESCRIPTION: An example of using the nomad sentinel read command to display a policy named 'foo'. The output shows the policy name, scope, enforcement level, description, and the actual policy content.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/sentinel/read.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad sentinel read foo\nName              = foo\nScope             = submit-job\nEnforcement Level = advisory\nDescription       = my test policy\nPolicy:\n\nmain = rule { true }\n\n```\n\n----------------------------------------\n\nTITLE: Listing Recommendations with cURL in Shell\nDESCRIPTION: This snippet demonstrates how to use cURL to list all available recommendations, optionally filtering by namespace, job, group, and task.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/recommendations.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/recommendations\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/recommendations?namespace=*\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/recommendations?namespace=*&job=example&group=cache&task=redis\n```\n\n----------------------------------------\n\nTITLE: Using Job ID with nomad alloc fs\nDESCRIPTION: Syntax for using nomad alloc fs with a job ID instead of an allocation ID to select a random allocation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/fs.mdx#2025-04-19_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad alloc fs -job <job-id> <path>\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a Namespace with Path Parameter in Shell\nDESCRIPTION: Makes a POST request to create or update a namespace with the path parameter. This example creates or updates the 'api-prod' namespace.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/namespaces.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @namespace.json \\\n    https://localhost:4646/v1/namespace/api-prod\n```\n\n----------------------------------------\n\nTITLE: Configuring Strategy Plugin in Nomad Autoscaler\nDESCRIPTION: Example configuration for a strategy plugin in Nomad Autoscaler. It demonstrates how to specify the driver, arguments, and configuration settings for the plugin.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/agent/strategy.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstrategy \"example-strategy-plugin\" {\n  driver = \"example-strategy-plugin\"\n  args   = [\"-my-flag\"]\n\n  config = {\n    algorithm = \"complex\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Node Drain in Nomad\nDESCRIPTION: This JSON response confirms the drain operation, providing the index and node modify index.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/nodes.mdx#2025-04-19_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EvalCreateIndex\": 0,\n  \"EvalIDs\": null,\n  \"Index\": 3742,\n  \"NodeModifyIndex\": 3742\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Singularity Commands\nDESCRIPTION: Configuration for passing command-line arguments to the Singularity run, exec, or test commands as a comma-separated list.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/singularity.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  args = [ \"echo\", \"hello Cloud\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Short View of Specific Nomad Job\nDESCRIPTION: Shows abbreviated status information for a specific job using the -short flag.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/status.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job status -short job1\nID            = job1\nName          = Test Job\nSubmit Date   = 07/25/17 15:47:11 UTC\nType          = service\nPriority      = 3\nDatacenters   = dc1,dc2,dc3\nStatus        = pending\nPeriodic      = false\nParameterized = false\n```\n\n----------------------------------------\n\nTITLE: List Volume Claims Response\nDESCRIPTION: JSON response showing the list of volume claims with details including allocation ID, job ID, and volume information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"AllocID\": \"34e44207-0cf3-a24d-4bbe-6c91cec642ce\",\n    \"CreateIndex\": 15,\n    \"ID\": \"75c417b5-cf90-86e4-8ffc-d18f445e0721\",\n    \"JobID\": \"example\",\n    \"ModifyIndex\": 15,\n    \"Namespace\": \"default\",\n    \"TaskGroupName\": \"echo\",\n    \"VolumeID\": \"0bb42da3-7e09-6937-a83d-69d5c9bfce30\",\n    \"VolumeName\": \"sticky-volume\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Raft Configuration using curl\nDESCRIPTION: This curl command queries the Raft configuration via the API. It returns information about servers in the Raft peer configuration including their addresses, IDs, and leadership status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/raft.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/operator/raft/configuration\n```\n\n----------------------------------------\n\nTITLE: Example Nomad Scaling Policy List Output\nDESCRIPTION: Demonstrates the default output format when listing all tracked scaling policies, showing policy IDs, enabled status, and targets.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/scaling/policy-list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad scaling policy list\n\nID                                    Enabled  Target\nb2c64295-4315-2fdc-6158-a27156808729  true     Namespace:default,Job:example,Group:cache,Task:redis\nc355d0ec-7aa1-2604-449d-4ec79c813d2c  true     Namespace:default,Job:webapp,Group:demo,Task:webapp\n```\n\n----------------------------------------\n\nTITLE: Dispatch Job Sample Response\nDESCRIPTION: JSON response showing the dispatch results including job and evaluation details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Index\": 13,\n  \"JobCreateIndex\": 12,\n  \"EvalCreateIndex\": 13,\n  \"EvalID\": \"e5f55fac-bc69-119d-528a-1fc7ade5e02c\",\n  \"DispatchedJobID\": \"example/dispatch-1485408778-81644024\"\n}\n```\n\n----------------------------------------\n\nTITLE: Promoting All Task Groups in Deployment with JavaScript\nDESCRIPTION: This snippet demonstrates how to promote all task groups in a deployment using a POST request. It includes the deployment ID and a boolean flag to promote all groups.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/deployments.mdx#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"DeploymentID\": \"5456bd7a-9fc0-c0dd-6131-cbee77f57577\",\n  \"All\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Host Volume Fields with Sentinel in Nomad\nDESCRIPTION: Examples of how to access Dynamic Host Volume fields using Sentinel syntax. The examples show how to access the volume name and requested capabilities properties of a volume object.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/enterprise/sentinel.mdx#2025-04-19_snippet_5\n\nLANGUAGE: sentinel\nCODE:\n```\nvolume.name\nvolume.requested_capabilities[0].access_mode\n```\n\n----------------------------------------\n\nTITLE: Running complex shell commands\nDESCRIPTION: Example of running a shell pipeline without streaming intermediate command output across the network.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/exec.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc exec eb17e557 /bin/sh -c 'cat /output | sort | uniq -c | sort -rn | head -n 5'\n...\n```\n\n----------------------------------------\n\nTITLE: Rotating the Active Root Key\nDESCRIPTION: This snippet shows how to force the Nomad server to rotate the active root key. The 'full' parameter can be used to decrypt all existing variables and re-encrypt with the new key. Requires management ACL token.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/keyring.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -XPUT \\\n    https://localhost:4646/v1/operator/keyring/rotate\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Index\": 13,\n  \"Key\": {\n    \"Algorithm\": \"aes256-gcm\",\n    \"CreateIndex\": 0,\n    \"CreateTime\": 1662665630638648800,\n    \"KeyID\": \"26cbda57-e01e-188d-5f39-b6e3fca95a5b\",\n    \"ModifyIndex\": 0,\n    \"State\": \"active\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing External CSI Volumes Response (JSON)\nDESCRIPTION: Sample JSON response for listing external CSI volumes. Includes a next token for pagination and an array of volume objects with details such as external ID, capacity, snapshot ID, published node IDs, and status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"NextToken\": \"eyJ2IjoiMiIsImMiOiJLZ\",\n  \"Volumes\": [\n    {\n      \"ExternalID\": \"vol-37ac485e\",\n      \"CapacityBytes\": 1000000,\n      \"SnapshotID\": \"snap-12345\",\n      \"PublishedExternalNodeIDs\": [\"i-12345\", \"i-abcde\"],\n      \"IsAbnormal\": false,\n      \"Status\": \"\"\n    },\n    {\n      \"ExternalID\": \"vol-10ac4879\",\n      \"CapacityBytes\": 1000000,\n      \"SnapshotID\": \"snap-abcdef\",\n      \"PublishedExternalNodeIDs\": [\"i-12345\", \"i-abcde\"],\n      \"IsAbnormal\": true,\n      \"Status\": \"example error message from provider\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Required Cgroup Controllers for Nomad on Linux\nDESCRIPTION: This command shows how to check for required cgroup controllers (cpuset, cpu, io, memory, pids) on a Linux system using cgroups v2. The output displays all available controllers that Nomad needs to function properly.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/partials/install/cgroup-controllers.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ cat /sys/fs/cgroup/cgroup.controllers\ncpuset cpu io memory pids\n```\n\n----------------------------------------\n\nTITLE: Listing Allocations for an Evaluation in Nomad API\nDESCRIPTION: Makes a GET request to retrieve all allocations created or modified for a specific evaluation. This endpoint supports blocking queries and requires the namespace:read-job ACL.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/evaluations.mdx#2025-04-19_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/evaluation/5456bd7a-9fc0-c0dd-6131-cbee77f57577/allocations\n```\n\n----------------------------------------\n\nTITLE: Creating ACL Token Payload\nDESCRIPTION: JSON payload for creating a new ACL token. Specifies a client token with readonly policy that is not replicated globally.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Name\": \"Readonly token\",\n  \"Type\": \"client\",\n  \"Policies\": [\"readonly\"],\n  \"Global\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NUMA Affinity with 'prefer' Option in Nomad HCL\nDESCRIPTION: NUMA configuration that instructs the scheduler to optimize core selection based on hardware topology but doesn't restrict cores to a single NUMA node. This provides a balance between performance and flexibility.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/cpu.mdx#2025-04-19_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\nresources {\n  cores = 4\n  numa {\n    affinity = \"prefer\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using nomad job action command\nDESCRIPTION: This snippet demonstrates the basic usage syntax for the 'nomad job action' command. It shows the command structure and indicates that an action name and job-related options are required.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/action.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad job action [options] <action>\n```\n\n----------------------------------------\n\nTITLE: Inspecting Enterprise Vault Namespace Claims in JSON\nDESCRIPTION: Example of additional claims in Nomad Enterprise for workloads with a Vault namespace specified. The claims include the standard workload information plus the Vault namespace.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/workload-identity.mdx#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nomad_namespace\": \"default\",\n  \"nomad_job_id\": \"example\",\n  \"nomad_allocation_id\": \"8623ac7a-28ba-20c3-24a6-e615a39bbbf3\",\n  \"nomad_service\": \"example-cache-redis\",\n  \"vault_namespace\": \"prod\"\n}\n```\n\n----------------------------------------\n\nTITLE: Lock Renewal Response - JSON\nDESCRIPTION: Server response showing metadata and lock parameters after renewal.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/variables/locks.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CreateIndex\": 11,\n  \"CreateTime\": 1694555280887153000,\n  \"Lock\": {\n    \"TTL\": \"15s\",\n    \"LockDelay\": \"15s\",\n    \"ID\": \"670c7248-e2ef-f982-e4c5-f4437f75f1e4\"\n  },\n  \"ModifyIndex\": 43,\n  \"ModifyTime\": 1694556175092779000,\n  \"Namespace\": \"prod\",\n  \"Path\": \"example/first\"\n}\n```\n\n----------------------------------------\n\nTITLE: GC Allocation API Request\nDESCRIPTION: Example request to garbage collect a specific allocation on a node.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api \\\n    /v1/client/allocation/5fc98185-17ff-26bc-a802-0c74fa471c99/gc\n```\n\n----------------------------------------\n\nTITLE: Configuring DataDog Address and Tags in HCL\nDESCRIPTION: An example of how to specify the address of a DataDog statsd server and add global tags for telemetry packets in the telemetry block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/telemetry.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ntelemetry {\n  datadog_address = \"dogstatsd.company.local:8125\"\n  datadog_tags    = [\"my_tag_name:my_tag_value\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying CNI Network Mode in Nomad Job Specification\nDESCRIPTION: This HCL snippet demonstrates how to specify the CNI network mode in a Nomad job specification. It uses the 'cni/mynet' mode and defines a port mapping for HTTP traffic.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/network.mdx#2025-04-19_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nnetwork {\n  mode = \"cni/mynet\"\n  port \"http\" {\n    to = 8080\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating a Node using cURL in Nomad\nDESCRIPTION: This snippet demonstrates how to evaluate a node by sending a POST request to the Nomad API. It requires the node's UUID as a parameter in the URL path.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/nodes.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -XPOST \\\n    http://localhost:4646/v1/node/fb2170a8-257d-3c64-b14d-bc06cc94e34c/evaluate\n```\n\n----------------------------------------\n\nTITLE: Using nomad alloc checks command\nDESCRIPTION: Basic usage syntax for the nomad alloc checks command. It accepts an allocation ID or prefix as an argument and displays health check status information for services in the allocation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/checks.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad alloc checks [options] <allocation>\n```\n\n----------------------------------------\n\nTITLE: Reading a Specific Evaluation with Related Evaluations in Nomad API\nDESCRIPTION: Makes a GET request to retrieve details of a specific evaluation by ID, including its related evaluations. This endpoint supports blocking queries and requires the namespace:read-job ACL.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/evaluations.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/evaluation/2deb5f06-a100-f01a-3316-5e501a4965e7?related=true\n```\n\n----------------------------------------\n\nTITLE: Setting Batch Evaluation Garbage Collection Threshold\nDESCRIPTION: Configures the threshold for garbage collection of batch job evaluations and allocations. This setting was introduced in Nomad 1.5.0 to control memory growth from repeated batch job executions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/upgrade/upgrade-specific.mdx#2025-04-19_snippet_7\n\nLANGUAGE: HCL\nCODE:\n```\nserver {\n  batch_eval_gc_threshold = \"24h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enterprise-Specific Autopilot Health Response\nDESCRIPTION: Extended JSON response for the health endpoint in Nomad Enterprise, showing additional information about read replicas, redundancy zones, and upgrade status that are only available in the Enterprise version.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/autopilot.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"ReadReplicas\": null,\n  \"RedundancyZones\": {},\n  \"Upgrade\": {\n    \"Status\": \"idle\",\n    \"TargetVersion\": \"1.7.5+ent\",\n    \"TargetVersionVoters\": [\n      \"e349749b-3303-3ddf-959c-b5885a0e1f6e\",\n      \"e36ee410-cc3c-0a0c-c724-63817ab30303\"\n    ],\n    \"TargetVersionNonVoters\": null,\n    \"TargetVersionReadReplicas\": null,\n    \"OtherVersionVoters\": null,\n    \"OtherVersionNonVoters\": null,\n    \"OtherVersionReadReplicas\": null,\n    \"RedundancyZones\": {}\n  },\n  \"OptimisticFailureTolerance\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Default CA Certificate Information in Nomad\nDESCRIPTION: Example showing how to display information for a default CA certificate, including serial number, issuer CN, common name, expiry date, and permitted DNS domains.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/tls/ca-info.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad tls ca info nomad-agent-ca.pem\nSerial Number          314623649437549144006237783956683542664\nIssuer CN              Nomad Agent CA 314623649437549144006237783956683542664\nCommon Name            CN=Nomad Agent CA 314623649437549144006237783956683542664,O=HashiCorp Inc.,POSTALCODE=94105,STREET=101 Second Street,L=San Francisco,ST=CA,C=US\nExpiry Date            2027-11-13 21:37:38 +0000 UTC\nPermitted DNS Domains  []\n```\n\n----------------------------------------\n\nTITLE: Required ACL Auth Method Parameters\nDESCRIPTION: Core parameters required for configuring an ACL authentication method, including name, type, and token locality settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/partials/api-docs/auth-method-params.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `Name` `(string: <required>)` - Name is the identifier of the ACL auth method.\nThe name can contain alphanumeric characters and dashes. This name must be\nunique and must not exceed 128 characters.\n\n- `Type` `(string: <required>)` - ACL auth method type, supports `OIDC` and\n`JWT`.\n\n- `TokenLocality` `(string: <required>)` - Defines whether the ACL auth method\ncreates a local or global token when performing SSO login. This field must be\nset to either `local` or `global`.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Pool Information in JSON Format\nDESCRIPTION: An example of retrieving node pool information in JSON format using the '-json' flag, which provides a more detailed and structured output.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/info.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node pool info -json prod\n{\n    \"CreateIndex\": 39,\n    \"Description\": \"Node pool for production workloads.\",\n    \"Meta\": {\n        \"env\": \"production\"\n    },\n    \"ModifyIndex\": 39,\n    \"Name\": \"prod\",\n    \"SchedulerConfiguration\": {\n        \"SchedulerAlgorithm\": \"spread\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating job list results in a node pool\nDESCRIPTION: This example illustrates how to paginate the list of jobs in the 'prod' node pool using the '-per-page' and '-page-token' options. It shows two separate commands to retrieve different pages of results.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/jobs.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node pool jobs -per-page 2 prod\nID       Type     Priority  Status          Submit Date\njob1     service  80        running         07/25/17 15:47:11 UTC\njob2     batch    40        complete        07/24/17 19:22:11 UTC\n\nResults have been paginated. To get the next page run:\n\nnomad node pool jobs -per-page 2 -page-token job3 prod\n\n$ nomad node pool jobs -per-page 2 -page-token job3 prod\nID       Type     Priority  Status          Submit Date\njob3     service  50        dead (stopped)  07/22/17 16:34:48 UTC\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nomad Job Versions JSON Response\nDESCRIPTION: This JSON response shows the structure of a Nomad job version, including details about the job, its task groups, and tasks. It includes information such as job ID, datacenters, priority, and task configurations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Diffs\": null,\n  \"Index\": 51,\n  \"KnownLeader\": true,\n  \"LastContact\": 0,\n  \"Versions\": [\n    {\n      \"Affinities\": null,\n      \"AllAtOnce\": false,\n      \"Constraints\": null,\n      \"CreateIndex\": 44,\n      \"Datacenters\": [\"dc1\"],\n      \"Dispatched\": false,\n      \"ID\": \"example\",\n      \"JobModifyIndex\": 44,\n      \"Meta\": null,\n      \"ModifyIndex\": 51,\n      \"Multiregion\": null,\n      \"Name\": \"example\",\n      \"Namespace\": \"default\",\n      \"NomadTokenID\": \"\",\n      \"NodePool\": \"prod\",\n      \"ParameterizedJob\": null,\n      \"ParentID\": \"\",\n      \"Payload\": null,\n      \"Periodic\": null,\n      \"Priority\": 50,\n      \"Region\": \"global\",\n      \"Spreads\": null,\n      \"Stable\": true,\n      \"Status\": \"running\",\n      \"StatusDescription\": \"\",\n      \"Stop\": false,\n      \"SubmitTime\": 1608304897537638400,\n      \"TaskGroups\": [\n        {\n          \"Affinities\": null,\n          \"Constraints\": null,\n          \"Count\": 1,\n          \"Disconnect\", null,\n          \"EphemeralDisk\": {\n            \"Migrate\": false,\n            \"SizeMB\": 300,\n            \"Sticky\": false\n          },\n          \"MaxClientDisconnect\": 300000000000,\n          \"Meta\": null,\n          \"Migrate\": {\n            \"HealthCheck\": \"checks\",\n            \"HealthyDeadline\": 300000000000,\n            \"MaxParallel\": 1,\n            \"MinHealthyTime\": 10000000000\n          },\n          \"Name\": \"cache\",\n          \"Networks\": [\n            {\n              \"CIDR\": \"\",\n              \"DNS\": null,\n              \"Device\": \"\",\n              \"DynamicPorts\": [\n                {\n                  \"HostNetwork\": \"default\",\n                  \"Label\": \"db\",\n                  \"To\": 6379,\n                  \"Value\": 0\n                }\n              ],\n              \"IP\": \"\",\n              \"MBits\": 0,\n              \"Mode\": \"\",\n              \"ReservedPorts\": null\n            }\n          ],\n          \"ReschedulePolicy\": {\n            \"Attempts\": 0,\n            \"Delay\": 30000000000,\n            \"DelayFunction\": \"exponential\",\n            \"Interval\": 0,\n            \"MaxDelay\": 3600000000000,\n            \"Unlimited\": true\n          },\n          \"RestartPolicy\": {\n            \"Attempts\": 2,\n            \"Delay\": 15000000000,\n            \"Interval\": 1800000000000,\n            \"Mode\": \"fail\"\n          },\n          \"Scaling\": null,\n          \"Services\": null,\n          \"ShutdownDelay\": null,\n          \"Spreads\": null,\n          \"StopAfterClientDisconnect\": null,\n          \"Tasks\": [\n            {\n              \"Affinities\": null,\n              \"Artifacts\": null,\n              \"CSIPluginConfig\": null,\n              \"Config\": {\n                \"image\": \"redis:7\",\n                \"ports\": [\"db\"]\n              },\n              \"Constraints\": null,\n              \"DispatchPayload\": null,\n              \"Driver\": \"docker\",\n              \"Env\": null,\n              \"KillSignal\": \"\",\n              \"KillTimeout\": 5000000000,\n              \"Kind\": \"\",\n              \"Leader\": false,\n              \"Lifecycle\": null,\n              \"LogConfig\": {\n                \"Disabled\": false,\n                \"MaxFileSizeMB\": 10,\n                \"MaxFiles\": 10\n              },\n              \"Meta\": null,\n              \"Name\": \"redis\",\n              \"Resources\": {\n                \"CPU\": 500,\n                \"Devices\": null,\n                \"DiskMB\": 0,\n                \"IOPS\": 0,\n                \"MemoryMB\": 256,\n                \"Networks\": null\n              },\n              \"RestartPolicy\": {\n                \"Attempts\": 2,\n                \"Delay\": 15000000000,\n                \"Interval\": 1800000000000,\n                \"Mode\": \"fail\"\n              },\n              \"ScalingPolicies\": null,\n              \"Services\": null,\n              \"ShutdownDelay\": 0,\n              \"Templates\": null,\n              \"User\": \"\",\n              \"Vault\": null,\n              \"VolumeMounts\": null\n            }\n          ],\n          \"Update\": {\n            \"AutoPromote\": false,\n            \"AutoRevert\": false,\n            \"Canary\": 0,\n            \"HealthCheck\": \"checks\",\n            \"HealthyDeadline\": 300000000000,\n            \"MaxParallel\": 1,\n            \"MinHealthyTime\": 10000000000,\n            \"ProgressDeadline\": 600000000000,\n            \"Stagger\": 30000000000\n          },\n          \"Volumes\": null\n        }\n      ],\n      \"Type\": \"service\",\n      \"Update\": {\n        \"AutoPromote\": false,\n        \"AutoRevert\": false,\n        \"Canary\": 0,\n        \"HealthCheck\": \"\",\n        \"HealthyDeadline\": 0,\n        \"MaxParallel\": 1,\n        \"MinHealthyTime\": 0,\n        \"ProgressDeadline\": 0,\n        \"Stagger\": 30000000000\n      },\n      \"VaultNamespace\": \"\",\n      \"Version\": 0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Directory of Nomad Configuration Files\nDESCRIPTION: Example demonstrating how to validate an entire directory containing Nomad configuration files.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/config/validate.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad config validate /etc/nomad.d\nConfiguration is valid!\n```\n\n----------------------------------------\n\nTITLE: Response from Reading ACL Auth Method by Name in Nomad\nDESCRIPTION: JSON response showing the complete configuration of a specific ACL auth method, including all OIDC settings, token parameters, and metadata. Shows the auth method as replicated to the current region.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/auth-methods.mdx#2025-04-19_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"MaxTokenTTL\": \"1h0m0s\",\n    \"Name\": \"example-acl-auth-method\",\n    \"Type\": \"OIDC\",\n    \"TokenLocality\": \"global\",\n    \"TokenNameFormat\": \"${auth_method_type}-${value.user}\",\n    \"Default\": true,\n    \"Config\": {\n      \"OIDCDiscoveryURL\": \"https://my-corp-app-name.auth0.com/\",\n      \"OIDCClientID\": \"V1RPi2MYptMV1RPi2MYptMV1RPi2MYpt\",\n      \"OIDCClientSecret\": \"example-client-secret\",\n      \"OIDCScopes\": [\n        \"groups\"\n      ],\n      \"BoundAudiences\": [\n        \"V1RPi2MYptMV1RPi2MYptMV1RPi2MYpt\"\n      ],\n      \"AllowedRedirectURIs\": [\n        \"http://localhost:4646/oidc/callback\"\n      ],\n      \"ClaimMappings\": {\n        \"http://example.com/first_name\": \"first_name\",\n        \"http://example.com/last_name\": \"last_name\"\n      },\n      \"ListClaimMappings\": {\n        \"http://nomad.com/groups\": \"groups\"\n      }\n    },\n    \"CreateTime\": \"2022-12-08T11:04:43.46206Z\",\n    \"ModifyTime\": \"2022-12-08T11:04:43.46206Z\",\n    \"CreateIndex\": 12,\n    \"ModifyIndex\": 32\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Authentication Task Configuration in HCL\nDESCRIPTION: Example of configuring Docker authentication credentials in a Nomad task definition for accessing private repositories.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_17\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"example\" {\n  driver = \"docker\"\n\n  config {\n    image = \"secret/service\"\n\n    auth {\n      username = \"dockerhub_user\"\n      password = \"dockerhub_password\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Node Eligibility Command - Basic Syntax\nDESCRIPTION: Basic command syntax for the nomad node eligibility command. Requires specifying a node ID or using the -self flag, along with either -enable or -disable flag to control eligibility.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/eligibility.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad node eligibility [options] <node>\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad Volume Delete Command\nDESCRIPTION: Command syntax for deleting volumes in Nomad. This command requires the volume ID as an argument and will fail if the volume is in use by an allocation or in the unpublishing process.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad volume delete [options] [volume]\n```\n\n----------------------------------------\n\nTITLE: Read Service Request Example\nDESCRIPTION: Sample cURL request to read details of a specific service by name.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/services.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/service/example-cache-redis\n```\n\n----------------------------------------\n\nTITLE: Creating Namespace with Quota\nDESCRIPTION: Example of creating a new namespace with a production quota and description.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/namespace/apply.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad namespace apply -description \"Prod API servers\" -quota prod api-prod\nSuccessfully applied namespace \"api-prod\"!\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Nomad Deployments API\nDESCRIPTION: This snippet displays the JSON response structure returned by the Nomad Deployments API. It includes detailed information about deployments, their status, and associated task groups.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/index.mdx#2025-04-19_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"CreateIndex\": 54,\n    \"EvalPriority\": 50,\n    \"ID\": \"58fd0616-ce64-d14b-6917-03d0ab5af67e\",\n    \"IsMultiregion\": false,\n    \"JobCreateIndex\": 52,\n    \"JobID\": \"countdash\",\n    \"JobModifyIndex\": 52,\n    \"JobSpecModifyIndex\": 52,\n    \"JobVersion\": 0,\n    \"ModifyIndex\": 59,\n    \"Namespace\": \"default\",\n    \"Status\": \"cancelled\",\n    \"StatusDescription\": \"Cancelled due to newer version of job\",\n    \"TaskGroups\": {\n      \"dashboard\": {\n        \"AutoPromote\": false,\n        \"AutoRevert\": false,\n        \"DesiredCanaries\": 0,\n        \"DesiredTotal\": 1,\n        \"HealthyAllocs\": 0,\n        \"PlacedAllocs\": 0,\n        \"PlacedCanaries\": null,\n        \"ProgressDeadline\": 600000000000,\n        \"Promoted\": false,\n        \"RequireProgressBy\": null,\n        \"UnhealthyAllocs\": 0\n      },\n      \"api\": {\n        \"AutoPromote\": false,\n        \"AutoRevert\": false,\n        \"DesiredCanaries\": 0,\n        \"DesiredTotal\": 1,\n        \"HealthyAllocs\": 0,\n        \"PlacedAllocs\": 0,\n        \"PlacedCanaries\": null,\n        \"ProgressDeadline\": 600000000000,\n        \"Promoted\": false,\n        \"RequireProgressBy\": null,\n        \"UnhealthyAllocs\": 0\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Podman Driver on Ubuntu/Debian\nDESCRIPTION: Commands to install the required packages, add HashiCorp GPG key, configure the repository, and install the Podman driver on Ubuntu/Debian systems.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo apt-get update && \\\n  sudo apt-get install wget gpg coreutils\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ echo \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo apt-get update && sudo apt-get install -y nomad-driver-podman\n```\n\n----------------------------------------\n\nTITLE: Creating a Kadalu CSI Volume in Nomad\nDESCRIPTION: Command to create a Nomad volume using the Kadalu CSI plugin, with variable substitution for volume configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/kadalu-csi/README.md#2025-04-19_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n# Create Nomad volume\n$ sed -e \"s/POOL/$volname/\" -e \"s/GHOST/$gluster_hosts/\" -e \"s/GVOL/$gluster_volname/\" $job_dir/volume.hcl | nomad volume create -\nCreated external volume csi-test with ID csi-test\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a Node Pool via HTTP POST in Shell\nDESCRIPTION: This snippet demonstrates how to create or update a node pool using the Nomad API. It shows sending a JSON payload to the API endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/node-pools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ cat pool.json | nomad operator api /v1/node/pools\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ cat pool.json | nomad operator api /v1/node/pool/prod-eng\n```\n\n----------------------------------------\n\nTITLE: Updating Server List\nDESCRIPTION: Makes POST request to replace the list of known servers with new addresses.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    \"https://localhost:4646/v1/agent/servers?address=1.2.3.4:4647&address=5.6.7.8:4647\"\n```\n\n----------------------------------------\n\nTITLE: Using nomad acl bootstrap Command\nDESCRIPTION: Basic usage of the `nomad acl bootstrap` command. It can be used without arguments to generate a system token, or with a file path to provide a user-generated token.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/bootstrap.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl bootstrap [options]\n```\n\n----------------------------------------\n\nTITLE: List Services Request Example\nDESCRIPTION: Sample cURL request to list all available Nomad services, with optional namespace parameter.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/services.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/services\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/services?namespace=*\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog APM Agent in HCL\nDESCRIPTION: Configuration block for setting up the Datadog APM agent with authentication keys and site settings. Supports both direct configuration and environment variables for API and app keys.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/apm/datadog.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\napm \"datadog\" {\n  driver = \"datadog\"\n\n  config = {\n    dd_api_key = \"<api key>\"\n    dd_app_key = \"<app key>\"\n\n    site = \"datadoghq.eu\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Variable Access Rules in Nomad Namespace\nDESCRIPTION: Example of setting up variable access control in a namespace, demonstrating different capability levels for project and system paths.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/acl-policy.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nnamespace \"dev\" {\n\n  variables {\n\n    # full access to secrets in all \"project\" paths\n    path \"project/*\" {\n      capabilities = [\"write\", \"read\", \"destroy\", \"list\"]\n    }\n\n    # read/list access within a \"system/\" path belonging to administrators\n    path \"system/*\" {\n      capabilities = [\"read\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Sentinel Policies - Response\nDESCRIPTION: Sample JSON response showing policy details including name, description, scope, enforcement level and hash values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/sentinel-policies.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Name\": \"foo\",\n    \"Description\": \"test policy\",\n    \"Scope\": \"submit-job\",\n    \"EnforcementLevel\": \"advisory\",\n    \"Hash\": \"CIs8aNX5OfFvo4D7ihWcQSexEJpHp+Za+dHSncVx5+8=\",\n    \"CreateIndex\": 8,\n    \"ModifyIndex\": 8\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using uuidv5 with OID Namespace in Nomad\nDESCRIPTION: Example of generating a UUID v5 using the OID namespace with an ISO/IEC object identifier.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/uuid/uuidv5.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n> uuidv5(\"oid\", \"1.3.6.1.4\")\naf9d40a5-7a36-5c07-b23a-851cd99fbfa5\n```\n\n----------------------------------------\n\nTITLE: Installing yum-utils on RHEL/CentOS\nDESCRIPTION: Installs yum-utils package which provides yum-config-manager utility needed to add repositories.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo yum install -y yum-utils\n```\n\n----------------------------------------\n\nTITLE: Creating Consul Auth Method with Namespace Rules\nDESCRIPTION: Shell command to create a Consul auth method with namespace rules for Nomad workloads. The command configures namespace binding based on the consul_namespace claim.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/acl.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ consul acl auth-method create \\\n  -name 'nomad-workloads' \\\n  -type 'jwt' \\\n  -config '@auth-method.json' \\\n  -namespace-rule-selector '\"consul_namespace\" in value' \\\n  -namespace-rule-bind-namespace '${value.consul_namespace}'\n```\n\n----------------------------------------\n\nTITLE: Viewing short status of a specific volume\nDESCRIPTION: Example of using the -short flag to view condensed status information for a specific volume, showing core details like ID, type, capacity, and plugin information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/status.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume status ebs_prod_db1\nID                   = ebs_prod_db1\nName                 = database\nType                 = csi\nExternal ID          = vol-23452345\nPlugin ID            = ebs-prod\nProvider             = aws.ebs\nVersion              = 1.0.1\nCapacity             = 100 GiB\nSchedulable          = true\nControllers Healthy  = 1\nControllers Expected = 1\nNodes Healthy        = 1\nNodes Expected       = 1\nAccess Mode          = single-node-writer\nAttachment Mode      = file-system\nMount options        = fs_type: ext4 flags: ro\nNamespace            = default\n```\n\n----------------------------------------\n\nTITLE: Listing Host Directories for Nomad Chroot Environment in JSON\nDESCRIPTION: This snippet lists the host machine directories that Nomad populates in the chroot environment for file system isolation. These directories are either linked or copied from the host into the chroot to provide necessary system files.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/exec.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"/bin\",\n  \"/etc\",\n  \"/lib\",\n  \"/lib32\",\n  \"/lib64\",\n  \"/run/resolvconf\",\n  \"/sbin\",\n  \"/usr\",\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Ulimit Configurations for Podman Containers in Nomad (HCL)\nDESCRIPTION: Configures ulimit settings for the containers to be started. This example sets the number of processes (nproc) and file descriptors (nofile) limits.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_34\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  ulimit {\n    nproc  = \"4242\"\n    nofile = \"2048:4096\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for Applying Recommendations\nDESCRIPTION: This JSON snippet shows the structure of the payload used to apply recommendations, specifying the recommendation IDs to be applied.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/recommendations.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Apply\": [\"cb80a13d-20d8-fb05-db3f-4ea0fe667b1b\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Server-to-Server IPv6 Communication (HCL)\nDESCRIPTION: This configuration block shows how to set up server-to-server communication in Nomad using IPv6 addresses. It uses the server_join block to specify IPv6 addresses for retry_join.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/ipv6-support.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nserver {\n  enabled = true\n  server_join {\n    retry_join = [\"[2001:db8::1]\", \"[2001:db8::2]\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring an APM Plugin in Nomad Autoscaler\nDESCRIPTION: This snippet demonstrates how to configure an APM plugin in Nomad Autoscaler using the 'apm' block. It specifies the driver, command-line arguments, and plugin-specific configuration like the address.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/agent/apm.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\napm \"example-apm-plugin\" {\n  driver = \"example-apm-plugin\"\n  args   = [\"-my-flag\"]\n\n  config = {\n    address = \"http://127.0.0.1:9090\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad Sentinel List Command in Plaintext\nDESCRIPTION: The basic syntax for the 'nomad sentinel list' command which displays all installed Sentinel policies in Nomad Enterprise. The command requires no arguments and ACLs must be enabled with a management token.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/sentinel/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad sentinel list [options]\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Job with Invalid Syntax\nDESCRIPTION: Example showing validation of a JSON job file with invalid syntax, demonstrating how validation errors are displayed when required configurations are missing.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/validate.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job validate -json example.json\nJob validation errors:\n1 error occurred:\n        * Missing job datacenters\n```\n\n----------------------------------------\n\nTITLE: Update Configuration Response\nDESCRIPTION: Example JSON response after attempting to update the scheduler configuration, indicating whether the update was successful and the current Raft index.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/scheduler.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Updated\": false,\n  \"Index\": 15\n}\n```\n\n----------------------------------------\n\nTITLE: Installing yum-config-manager on CentOS/RHEL\nDESCRIPTION: This command installs the yum-config-manager utility on CentOS or RHEL systems to manage repositories.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/virt/install.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo yum install -y yum-utils\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS on Nomad HTTP API Endpoints\nDESCRIPTION: Example showing how to enable Cross-Origin Resource Sharing (CORS) on Nomad's HTTP API endpoints by setting appropriate response headers.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/index.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nhttp_api_response_headers {\n  \"Access-Control-Allow-Origin\" = \"*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Default Keyring Configuration in HCL\nDESCRIPTION: Default configuration for keyring using the aead type, which uses authenticated encryption with associated data.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/keyring/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nkeyring \"aead\" {\n  active = true\n}\n```\n\n----------------------------------------\n\nTITLE: Timed Batched Restart of Allocations in Nomad Job\nDESCRIPTION: This example demonstrates how to set a fixed wait time between batches of restarts. It uses the '-batch-size' and '-batch-wait' flags to restart allocations in batches of 2, with a 10-second wait between each batch, providing a controlled and predictable restart process.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/restart.mdx#2025-04-19_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job restart -batch-size=2 -batch-wait=10s example\n==> 2023-02-28T18:03:43-05:00: Restarting 5 allocations\n==> 2023-02-28T18:03:43-05:00: Restarting 1st batch of 2 allocations\n    2023-02-28T18:03:43-05:00: Restarting running tasks in allocation \"653f983e\" for group \"web\"\n    2023-02-28T18:03:43-05:00: Restarting running tasks in allocation \"4d18e545\" for group \"web\"\n==> 2023-02-28T18:03:43-05:00: Waiting 10s before restarting the next batch\n==> 2023-02-28T18:03:53-05:00: Restarting 2nd batch of 2 allocations\n    2023-02-28T18:03:53-05:00: Restarting running tasks in allocation \"4fd581ee\" for group \"proxy\"\n    2023-02-28T18:03:53-05:00: Restarting running tasks in allocation \"32e143f8\" for group \"proxy\"\n==> 2023-02-28T18:03:53-05:00: Waiting 10s before restarting the next batch\n==> 2023-02-28T18:04:03-05:00: Restarting 3rd batch of 1 allocations\n    2023-02-28T18:04:03-05:00: Restarting running tasks in allocation \"77d5c4f6\" for group \"proxy\"\n==> 2023-02-28T18:04:03-05:00: Finished job restart\n\nAll allocations restarted successfully!\n```\n\n----------------------------------------\n\nTITLE: Nomad Quota List Example Output\nDESCRIPTION: Example showing the output of the quota list command displaying quota specifications with their names and descriptions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/quota/list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad quota list\nName     Description\ndefault  Limit the shared default namespace\n```\n\n----------------------------------------\n\nTITLE: Reading Node Stats via API\nDESCRIPTION: Example of querying actual resource consumption metrics from a Nomad client node.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnomad operator api /v1/client/stats\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad Node Pool Init Command\nDESCRIPTION: This snippet demonstrates the basic usage of the 'nomad node pool init' command. It creates an example node pool specification file with an optional filename parameter.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/init.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad node pool init <filename>\n```\n\n----------------------------------------\n\nTITLE: Verbose Listing of Nomad Job Allocations\nDESCRIPTION: Shows a verbose listing of allocations for the 'example' job, including additional details such as Eval ID, Node Name, and full timestamps.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/allocs.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job allocs -verbose example\nID                                    Eval ID                               Node ID                               Node Name  Task Group  Version  Desired  Status   Created                    Modified\nc2b4606d-1b02-0d8d-5fdd-031167cd4c91  5e2badb6-b7cf-5177-8281-8fe14f7193d2  35085106-9480-b465-a348-deb745024394  ubuntu     cache       2        run      running  2021-09-23T14:45:09-04:00  2021-09-23T14:45:19-04:00\nc413424b-d80e-9bc6-ea92-a02b336eaaf5  5e2badb6-b7cf-5177-8281-8fe14f7193d2  35085106-9480-b465-a348-deb745024394  ubuntu     cache       2        run      pending  2021-09-23T14:44:22-04:00  2021-09-23T14:45:19-04:00\n```\n\n----------------------------------------\n\nTITLE: Detaching CSI Volume from Nomad Client Node (Shell)\nDESCRIPTION: Shell command to detach a CSI volume from a Nomad client node. Uses curl to send a DELETE request to the specified endpoint with the node ID as a query parameter.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    https://localhost:4646/v1/volume/csi/volume-id/detach?node=00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Creating Volume Snapshot with Custom ID\nDESCRIPTION: Shows how to create a volume snapshot while specifying a custom snapshot ID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/snapshot-create.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume snapshot create ebs_prod_db1 snap-12345\nCompleted snapshot of volume ebs_prod_db1 with snapshot ID snap-12345.\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variable Denylist in Nomad Client (HCL)\nDESCRIPTION: Sets up a custom environment variable denylist for the Nomad client. This configuration prevents the specified environment variable from being passed to tasks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/client.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  options = {\n    \"env.denylist\" = \"MY_CUSTOM_ENVVAR\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Volume in Nomad Client HCL\nDESCRIPTION: Defines a host volume named 'ca-certificates' that can be used in Nomad jobs. It specifies the path on the host to be used as the source when this volume is mounted into a task, and sets it as read-only.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/client.mdx#2025-04-19_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  host_volume \"ca-certificates\" {\n    path      = \"/etc/ssl/certs\"\n    read_only = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad Quota Apply Command Syntax\nDESCRIPTION: The basic syntax for the 'nomad quota apply' command, which requires a path to the specification file. The specification can be read from stdin by setting the path to '-'.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/quota/apply.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad quota apply [options] <path>\n```\n\n----------------------------------------\n\nTITLE: Using nomad alloc fs to Inspect Chroot Directories\nDESCRIPTION: Shell session demonstrating how to use the 'nomad alloc fs' command to inspect the files and directories available in a Nomad allocation with chroot isolation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/filesystem.mdx#2025-04-19_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc fs eebd13a7\nMode        Size     Modified Time         Name\ndrwxrwxrwx  4.0 KiB  2020-10-27T19:05:24Z  alloc/\ndrwxrwxrwx  4.0 KiB  2020-10-27T19:05:24Z  task2/\n\n$ nomad alloc fs eebd13a7 task2\nMode         Size     Modified Time         Name\ndrwxrwxrwx   4.0 KiB  2020-10-27T19:05:24Z  alloc/\ndrwxr-xr-x   4.0 KiB  2020-10-27T19:05:22Z  bin/\ndrwxr-xr-x   4.0 KiB  2020-10-27T19:05:24Z  dev/\ndrwxr-xr-x   4.0 KiB  2020-10-27T19:05:22Z  etc/\n-rw-r--r--   297 B    2020-10-27T19:05:24Z  executor.out\ndrwxr-xr-x   4.0 KiB  2020-10-27T19:05:22Z  lib/\ndrwxr-xr-x   4.0 KiB  2020-10-27T19:05:22Z  lib32/\ndrwxr-xr-x   4.0 KiB  2020-10-27T19:05:22Z  lib64/\ndrwxrwxrwx   4.0 KiB  2020-10-27T19:05:22Z  local/\ndrwxrwxrwx   60 B     2020-10-27T19:05:22Z  private/\ndrwxr-xr-x   4.0 KiB  2020-10-27T19:05:24Z  proc/\ndrwxr-xr-x   4.0 KiB  2020-10-27T19:05:22Z  run/\ndrwxr-xr-x   12 KiB   2020-10-27T19:05:22Z  sbin/\ndrwxrwxrwx   60 B     2020-10-27T19:05:22Z  secrets/\ndrwxr-xr-x   4.0 KiB  2020-10-27T19:05:24Z  sys/\ndtrwxrwxrwx  4.0 KiB  2020-10-27T19:05:22Z  tmp/\ndrwxr-xr-x   4.0 KiB  2020-10-27T19:05:22Z  usr/\n```\n\n----------------------------------------\n\nTITLE: Listing Jobs - JSON Response\nDESCRIPTION: Sample response showing job details including ID, type, priority, status and job summary\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"ID\": \"example\",\n    \"ParentID\": \"\",\n    \"Name\": \"example\",\n    \"Type\": \"service\",\n    \"Priority\": 50,\n    \"Status\": \"pending\",\n    \"StatusDescription\": \"\",\n    \"JobSummary\": {\n      \"JobID\": \"example\",\n      \"Namespace\": \"default\",\n      \"Summary\": {\n        \"cache\": {\n          \"Queued\": 1,\n          \"Complete\": 1,\n          \"Failed\": 0,\n          \"Running\": 0,\n          \"Starting\": 0,\n          \"Lost\": 0\n        }\n      },\n      \"Children\": {\n        \"Pending\": 0,\n        \"Running\": 0,\n        \"Dead\": 0\n      },\n      \"CreateIndex\": 52,\n      \"ModifyIndex\": 96\n    },\n    \"CreateIndex\": 52,\n    \"ModifyIndex\": 93,\n    \"JobModifyIndex\": 52\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Short View Plugin Status Example\nDESCRIPTION: Shows how to get a concise status view of a specific plugin including basic health metrics and configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/plugin/status.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad plugin [-type csi] status ebs-prod\nID                   = ebs-prod\nProvider             = aws.ebs\nVersion              = 1.0.1\nControllers Healthy  = 1\nControllers Expected = 1\nNodes Healthy        = 1\nNodes Expected       = 1\n```\n\n----------------------------------------\n\nTITLE: Evaluations Count Response\nDESCRIPTION: Sample JSON response from the evaluations count API endpoint showing the total count and metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/evaluations.mdx#2025-04-19_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Count\": 36\n  \"Index\": 133,\n  \"KnownLeader\": true,\n  \"LastContact\": 0,\n  \"NextToken\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using nomad acl policy apply Command\nDESCRIPTION: The basic usage of the `nomad acl policy apply` command, which requires two arguments: the policy name and the path to the policy file. The policy can also be read from stdin by setting the path to \"-\".\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/policy/apply.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl policy apply [options] <name> <path>\n```\n\n----------------------------------------\n\nTITLE: Updating ACL Token Payload\nDESCRIPTION: JSON payload for updating an existing ACL token. This example changes the token's name and associated policy from readonly to readwrite.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AccessorID\": \"aa534e09-6a07-0a45-2295-a7f77063d429\",\n  \"Name\": \"Read-write token\",\n  \"Type\": \"client\",\n  \"Policies\": [\"readwrite\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Service Expose Configuration\nDESCRIPTION: Example showing basic configuration for exposing a metrics endpoint through the Envoy sidecar proxy.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/expose.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nservice {\n  name = \"count-dashboard\"\n  port = \"9001\"\n\n  connect {\n    sidecar_service {\n      proxy {\n        expose {\n          path {\n            path            = \"/metrics\"\n            protocol        = \"http\"\n            local_path_port = 9001\n            listener_port   = \"metrics\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad ACL Token List Command\nDESCRIPTION: The basic command syntax for listing ACL tokens in Nomad.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/token/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl token list\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad System GC Command Syntax\nDESCRIPTION: The basic syntax for executing the 'nomad system gc' command to manually trigger garbage collection of Nomad resources. This command requires a management token if ACLs are enabled.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/system/gc.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad system gc [options]\n```\n\n----------------------------------------\n\nTITLE: Viewing Default Namespace Status\nDESCRIPTION: Example showing how to view detailed status information for the default namespace, including name, description, quota, drivers, and network modes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/namespace/status.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad namespace status default\nName                 = api-prod\nDescription          = Prod API servers\nQuota                = prod\nEnabledDrivers       = docker,exec\nDisabledDrivers      = raw_exec\nEnabledNetworkModes  = bridge,cni/custom\nDisabledNetworkModes = host\n\nMetadata\ncontact = platform-eng@example.com\n\nQuota Limits\nRegion  CPU Usage   Memory Usage\nglobal  500 / 2500  256 / 2000\n```\n\n----------------------------------------\n\nTITLE: Server List Response\nDESCRIPTION: Sample JSON response showing list of known server addresses.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\"127.0.0.1:4647\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Podman Driver on CentOS/RHEL\nDESCRIPTION: Commands to install yum-utils, add the HashiCorp repository, and install the Podman driver on CentOS/RHEL systems.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo yum install -y yum-utils\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo yum -y install nomad-driver-podman\n```\n\n----------------------------------------\n\nTITLE: Verifying Data Persistence of Kadalu CSI Volume in Nomad\nDESCRIPTION: Commands to stop and restart the sample application, then verify that the data persists on the Kadalu CSI volume.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/kadalu-csi/README.md#2025-04-19_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n# Stop sample app and run it again to check data persistence\n$ nomad status\nID                         Type     Priority  Status   Submit Date\nkadalu-csi-controller      service  50        running  2021-09-20T18:23:07+05:30\nkadalu-csi-nodeplugin      system   50        running  2021-09-20T18:23:53+05:30\nsample-pv-check            service  50        running  2021-09-20T18:28:28+05:30\n\n$ nomad stop sample-pv-check\n==> 2021-09-20T18:36:47+05:30: Monitoring evaluation \"eecc0c00\"\n    2021-09-20T18:36:47+05:30: Evaluation triggered by job \"sample-pv-check\"\n==> 2021-09-20T18:36:48+05:30: Monitoring evaluation \"eecc0c00\"\n    2021-09-20T18:36:48+05:30: Evaluation within deployment: \"814e328c\"\n    2021-09-20T18:36:48+05:30: Evaluation status changed: \"pending\" -> \"complete\"\n==> 2021-09-20T18:36:48+05:30: Evaluation \"eecc0c00\" finished with status \"complete\"\n==> 2021-09-20T18:36:48+05:30: Monitoring deployment \"814e328c\"\n  ✓ Deployment \"814e328c\" successful\n\n    2021-09-20T18:36:48+05:30\n    ID          = 814e328c\n    Job ID      = sample-pv-check\n    Job Version = 0\n    Status      = successful\n    Description = Deployment completed successfully\n\n    Deployed\n    Task Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline\n    apps        1        1       1        0          2021-09-20T13:08:56Z\n\n$ nomad run $job_dir/app.nomad\n==> 2021-09-20T18:37:49+05:30: Monitoring evaluation \"e04b4549\"\n    2021-09-20T18:37:49+05:30: Evaluation triggered by job \"sample-pv-check\"\n==> 2021-09-20T18:37:50+05:30: Monitoring evaluation \"e04b4549\"\n    2021-09-20T18:37:50+05:30: Evaluation within deployment: \"66d246ee\"\n    2021-09-20T18:37:50+05:30: Allocation \"526d5543\" created: node \"4e105698\", group \"apps\"\n    2021-09-20T18:37:50+05:30: Evaluation status changed: \"pending\" -> \"complete\"\n==> 2021-09-20T18:37:50+05:30: Evaluation \"e04b4549\" finished with status \"complete\"\n==> 2021-09-20T18:37:50+05:30: Monitoring deployment \"66d246ee\"\n  ✓ Deployment \"66d246ee\" successful\n\n    2021-09-20T18:38:10+05:30\n    ID          = 66d246ee\n    Job ID      = sample-pv-check\n    Job Version = 2\n    Status      = successful\n    Description = Deployment completed successfully\n\n    Deployed\n    Task Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline\n    apps        1        1       1        0          2021-09-20T13:18:08Z\n\n# Export the new allocation ID and verify that md5sum matches after stopping and\n# running the same job\n$ export app=526d5543\n$ nomad alloc exec $app bash -c 'ls /mnt/pv; find /mnt/pv -type f -exec md5sum {} + | cut -f1 -d\" \" | sort | md5sum'\nfile1   file10  file2 file3   file4   file5   file6   file7   file8   file9\n6776dd355c0f2ba5a1781b9831e5c174  -\n```\n\n----------------------------------------\n\nTITLE: Reading Self ACL Token\nDESCRIPTION: This endpoint reads the ACL token given by the passed SecretID. It requires a valid ACL token in the X-Nomad-Token header.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Nomad-Token: 8176afd3-772d-0b71-8f85-7fa5d903e9d4\" \\\n    https://localhost:4646/v1/acl/token/self\n```\n\n----------------------------------------\n\nTITLE: Creating Server TLS Certificate - Nomad CLI\nDESCRIPTION: Example of creating a TLS certificate for Nomad servers using the tls cert create command. The command generates server certificates and keys with a warning about their sensitive nature.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/tls/cert-create.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad tls cert create -server\n==> WARNING: Server Certificates grants authority to become a\n    server and access all state in the cluster including root keys\n    and all ACL tokens. Do not distribute them to production hosts\n    that are not server nodes. Store them as securely as CA keys.\n==> Using CA file nomad-agent-ca.pem and CA key nomad-agent-ca-key.pem\n==> Server Certificate saved to global-server-nomad.pem\n==> Server Certificate key saved to global-server-nomad-key.pem\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Listing Recommendations\nDESCRIPTION: This JSON snippet shows the structure of the response when listing recommendations, including details such as ID, resource type, values, and metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/recommendations.mdx#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"ID\": \"cb80a13d-20d8-fb05-db3f-4ea0fe667b1b\",\n    \"Region\": \"global\",\n    \"Namespace\": \"default\",\n    \"JobID\": \"example\",\n    \"JobVersion\": 0,\n    \"Group\": \"cache\",\n    \"Task\": \"redis\",\n    \"Resource\": \"MemoryMB\",\n    \"Value\": 10,\n    \"Current\": 200,\n    \"Meta\": {\n      \"nomad_autoscaler.count.capped\": true,\n      \"nomad_autoscaler.count.original\": 6,\n      \"nomad_autoscaler.reason_history\": [],\n      \"nomad_policy_id\": \"c355d0ec-7aa1-2604-449d-4ec79c813d2c\",\n      \"num_evaluated_windows\": 1148,\n      \"window_size\": 300000000000\n    },\n    \"Stats\": {\n      \"min\": 2.6640625,\n      \"p99\": 6.51171875,\n      \"max\": 6.515625,\n      \"mean\": 4.816847859995009\n    },\n    \"EnforceVersion\": false,\n    \"SubmitTime\": 1603372587714807000,\n    \"CreateIndex\": 5193,\n    \"ModifyIndex\": 10437\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: HCL Variable Definitions File Format\nDESCRIPTION: Example of a variable definitions file in HCL format, which assigns values to variables using simple name-value pairs. This format supports complex data types like lists.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/variables.mdx#2025-04-19_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nimage_id = \"nginx:1.19\"\nlabels = [\n  \"testing\",\n  \"internal\",\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring NUMA Affinity with 'none' Option in Nomad HCL\nDESCRIPTION: Default NUMA configuration that uses bin-packing to reduce core fragmentation within NUMA nodes. This mode is used when no special NUMA affinity is required and helps manage resource allocation efficiently.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/cpu.mdx#2025-04-19_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nresources {\n  cores = 4\n  numa {\n    affinity = \"none\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting CSI Volume from Storage Provider (Shell)\nDESCRIPTION: Shell command to delete a CSI volume from the storage provider and deregister it from Nomad. Uses curl to send a DELETE request with optional secrets in the header.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    -H \"X-Nomad-CSI-Secrets: secret-key-1=value-1,secret-key-2=value-2\" \\\n    https://localhost:4646/v1/volume/csi/volume-id1/delete\n```\n\n----------------------------------------\n\nTITLE: Namespace with Node Pool Restrictions (Enterprise)\nDESCRIPTION: Enterprise feature to configure a namespace with allowed and denied node pools, controlling which pools jobs in that namespace can use.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/node-pools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nnamespace \"dev\" {\n  description = \"Jobs for the development environment.\"\n\n  node_pool_config {\n    default = \"dev\"\n    denied  = [\"prod\", \"qa\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of Nomad Agent-Info Command\nDESCRIPTION: Demonstrates the complete output of the agent-info command showing status information from all subsystems including raft consensus details, runtime metrics, serf protocol status, client health, and server configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/agent-info.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad agent-info\nraft\n  commit_index = 0\n  fsm_pending = 0\n  last_contact = never\n  last_snapshot_term = 0\n  state = Follower\n  term = 0\n  applied_index = 0\n  last_log_index = 0\n  last_log_term = 0\n  last_snapshot_index = 0\n  num_peers = 0\nruntime\n  cpu_count = 4\n  goroutines = 43\n  kernel.name = darwin\n  max_procs = 4\n  version = go1.5\n  arch = amd64\nserf\n  intent_queue = 0\n  member_time = 1\n  query_queue = 0\n  event_time = 1\n  event_queue = 0\n  failed = 0\n  left = 0\n  members = 1\n  query_time = 1\n  encrypted = false\nclient\n  heartbeat_ttl = 0\n  known_servers = 0\n  last_heartbeat = 9223372036854775807\n  num_allocations = 0\nnomad\n  bootstrap = false\n  known_regions = 1\n  leader = false\n  server = true\n```\n\n----------------------------------------\n\nTITLE: Flattening Nested Lists in Shell\nDESCRIPTION: Demonstrates the usage of the flatten function to eliminate nested lists from a list, including examples with different levels of nesting.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/flatten.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> flatten([[\"a\", \"b\"], [], [\"c\"]])\n[\"a\", \"b\", \"c\"]\n```\n\nLANGUAGE: shell\nCODE:\n```\n> flatten([[[\"a\", \"b\"], []], [\"c\"]])\n[\"a\", \"b\", \"c\"]\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Evaluation Events Starting from Index 100\nDESCRIPTION: Makes a curl request to stream all Evaluation events starting from index 100, useful for resuming event streaming from a specific point.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/events.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl -s -v -N http://127.0.0.1:4646/v1/event/stream?index=100&topic=Evaluation\n```\n\n----------------------------------------\n\nTITLE: Using nomad license get command\nDESCRIPTION: This snippet shows the basic usage syntax for the 'nomad license get' command. It retrieves the current Nomad Enterprise license from the server being contacted.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/license/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad license get [options]\n```\n\n----------------------------------------\n\nTITLE: Planning job update with insufficient cluster capacity\nDESCRIPTION: Example of planning an update to increase the count of an existing job when there isn't sufficient cluster capacity.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/plan.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job plan example.nomad.hcl\n+/- Job: \"example\"\n+/- Task Group: \"cache\" (7 create, 1 in-place update)\n  +/- Count: \"1\" => \"8\" (forces create)\n      Task: \"redis\"\n\nScheduler dry-run:\n- WARNING: Failed to place all allocations.\n  Task Group \"cache\" (failed to place 3 allocations):\n    * Resources exhausted on 1 nodes\n    * Dimension \"cpu\" exhausted on 1 nodes\n\nJob Modify Index: 15\nTo submit the job with version verification run:\n\nnomad job run -check-index 15 example.nomad.hcl\n\nWhen running the job with the check-index flag, the job will only be run if the\njob modify index given matches the server-side version. If the index has\nchanged, another user has modified the job and the plan's results are\npotentially invalid.\n```\n\n----------------------------------------\n\nTITLE: Full Status of Regular Nomad Job\nDESCRIPTION: Displays complete status information for a regular job including summary, deployment details, and allocations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/status.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job status example\nID            = example\nName          = example\nSubmit Date   = 07/25/17 15:53:04 UTC\nType          = service\nPriority      = 50\nDatacenters   = dc1\nStatus        = running\nPeriodic      = false\nParameterized = false\n\nSummary\nTask Group  Queued  Starting  Running  Failed  Complete  Lost\ncache       0       0         1        0       0         0\n\nLatest Deployment\nID          = 6294be0c\nStatus      = successful\nDescription = Deployment completed successfully\n\nDeployed\nTask Group  Desired  Placed  Healthy  Unhealthy\ncache       1        1       1        0\n\nActions\nAction Name     Task Group  Task\nmy-action       cache       my-task\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created   Modified\n478ce836  5ed166e8  cache       0        run      running  5m ago    5m ago\n```\n\n----------------------------------------\n\nTITLE: Example Version Command Output\nDESCRIPTION: Example output from running the version command, showing the version number and commit SHA with potential changes indicator.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/cli.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad-autoscaler version\nNomad Autoscaler v0.0.3-dev (da91fa9)\n```\n\n----------------------------------------\n\nTITLE: Practical Example of Range Function in HCL\nDESCRIPTION: A practical example demonstrating how to use the range function with other collections to produce a certain number of instances. It uses a map of name counts to generate expanded names with numbered suffixes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/range.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"name_counts\" {\n  type    = map(number)\n  default = {\n    \"foo\" = 2\n    \"bar\" = 4\n  }\n}\n\nlocals {\n  expanded_names = {\n    for name, count in var.name_counts : name => [\n      for i in range(count) : format(\"%s%02d\", name, i)\n    ]\n  }\n}\n\noutput \"expanded_names\" {\n  value = local.expanded_names\n}\n\n# Produces the following expanded_names value when run with the default\n# \"name_counts\":\n#\n# {\n#   \"bar\" = [\n#     \"bar00\",\n#     \"bar01\",\n#     \"bar02\",\n#     \"bar03\",\n#   ]\n#   \"foo\" = [\n#     \"foo00\",\n#     \"foo01\",\n#   ]\n# }\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram: Client Allocations Process in Nomad\nDESCRIPTION: This diagram shows the interaction between the Client, Follower RPC, State Store, and Allocation Runner in Nomad. It illustrates how clients pull new allocations, update them, and send allocation health data back to the server.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/architecture-eval-lifecycle.md#2025-04-19_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\n    participant followerRpc as Follower RPC\n    participant stateStore as State Store\n\n    participant client as Client\n    participant allocrunner as Allocation Runner\n\n    client ->> followerRpc: Alloc.GetAllocs RPC\n    activate client\n\n    Note right of client: this query can be stale\n\n    followerRpc ->> stateStore: query for Allocations\n    activate followerRpc\n    activate stateStore\n    stateStore -->> followerRpc: Allocations\n    deactivate stateStore\n    followerRpc -->> client: Allocations\n    deactivate followerRpc\n\n    client ->> allocrunner: Create or update allocation runners\n\n    client ->> followerRpc: Node.UpdateAlloc\n    Note right of followerRpc: will be forwarded to leader\n\n    deactivate client\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Operator Autopilot Health Command\nDESCRIPTION: Basic command syntax for checking Autopilot health status. Requires operator:read capability if ACLs are enabled.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/autopilot/health.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator autopilot health [options]\n```\n\n----------------------------------------\n\nTITLE: Creating Example Variable Specification\nDESCRIPTION: Example of running the 'nomad var init' command without parameters, which creates a default specification file named 'spec.nv.hcl' and displays a success message.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/init.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad var init\nExample variable specification written to spec.nv.hcl\n```\n\n----------------------------------------\n\nTITLE: Verbose Plugin Status Example\nDESCRIPTION: Demonstrates the detailed status output using the -verbose flag, showing full capabilities, topology information, and allocation details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/plugin/status.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad plugin [-type csi] -verbose status ebs-prod\nID                   = ebs-prod\nProvider             = aws.ebs\nVersion              = 1.0.1\nControllers Healthy  = 1\nControllers Expected = 1\nNodes Healthy        = 1\nNodes Expected       = 1\n\nController Capabilities\n  ATTACH_READONLY\n  CLONE_VOLUME\n  CONTROLLER_ATTACH_DETACH\n  CREATE_DELETE_SNAPSHOT\n  CREATE_DELETE_VOLUME\n  EXPAND_VOLUME\n  GET_CAPACITY\n  GET_VOLUME\n  LIST_SNAPSHOTS\n  LIST_VOLUMES\n  LIST_VOLUMES_PUBLISHED_NODES\n  VOLUME_CONDITION\n\nNode Capabilities\n  EXPAND_VOLUME\n  GET_VOLUME_STATS\n  STAGE_UNSTAGE_VOLUME\n  VOLUME_ACCESSIBILITY_CONSTRAINTS\n  VOLUME_CONDITION\n\nAccessible Topologies\nNode ID   Accessible Topology\n95303afc  topology.ebs.csi.aws.com/zone=us-east-1a\n8bf94335  topology.ebs.csi.aws.com/zone=us-east-1b\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status    Created    Modified\n0de05689  95303afc  csi         0        run      running  1m57s ago  1m19s ago\nb206088c  8bf94335  csi         0        run      running  1m56s ago  1m19s ago\n```\n\n----------------------------------------\n\nTITLE: Using nomad volume commands for dynamic host volumes\nDESCRIPTION: Example demonstrating the creation and deletion of a dynamic host volume using Nomad CLI commands. Shows the volume creation process and the volume delete command with ID prefix search.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/release-notes/nomad/v1-10-x.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad volume create ./internal-plugin.volume.hcl\n==> Created host volume internal-plugin with ID aeea91a0-06df-c16e-5403-ff82a2f28fd4\n✓ Host volume \"aeea91a0\" ready\n\n  2025-01-31T15:55:14-05:00\n  ID        = aeea91a0-06df-c16e-5403-ff82a2f28fd4\n  Name      = internal-plugin\n  Namespace = default\n  Plugin ID = mkdir\n  Node ID   = b4611abd-d4a8-c83a-b05e-7d9f5b44a179\n  Node Pool = default\n  Capacity  = 0 B\n  State     = ready\n  Host Path = /run/nomad/dev/data/host_volumes/aeea91a0-06df-c16e-5403-ff82a2f28fd4\n\n$ nomad volume delete -type host aeea91a0\nSuccessfully deleted volume \"aeea91a0-06df-c16e-5403-ff82a2f28fd4\"!\n```\n\n----------------------------------------\n\nTITLE: Configuring Operator Access Rules in Nomad\nDESCRIPTION: Example of setting read-only access policy for operator operations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/acl-policy.mdx#2025-04-19_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\noperator {\n  policy = \"read\"\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Insecure Registry Configuration\nDESCRIPTION: Configuration for allowing Docker daemon to pull from insecure registries.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"insecure-registries\": [\"example.local:5000\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Usage Syntax for Nomad Job Stop Command\nDESCRIPTION: Demonstrates the basic syntax for using the 'nomad job stop' command to stop one or more jobs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/stop.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad job stop [options] <job 1> <job 2> ... <job N>\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Token Response\nDESCRIPTION: The JSON response from bootstrapping the ACL system, containing the generated management token with its AccessorID, SecretID, and other properties.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AccessorID\": \"b780e702-98ce-521f-2e5f-c6b87de05b24\",\n  \"SecretID\": \"3f4a0fcd-7c42-773c-25db-2d31ba0c05fe\",\n  \"Name\": \"Bootstrap Token\",\n  \"Type\": \"management\",\n  \"Policies\": null,\n  \"Global\": true,\n  \"CreateTime\": \"2017-08-23T22:47:14.695408057Z\",\n  \"CreateIndex\": 7,\n  \"ModifyIndex\": 7\n}\n```\n\n----------------------------------------\n\nTITLE: Nomad Operator Autopilot Command Usage\nDESCRIPTION: Basic command syntax for getting Autopilot configuration. Requires operator:read capability if ACLs are enabled.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/autopilot/get-config.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator autopilot get-config [options]\n```\n\n----------------------------------------\n\nTITLE: Restart Allocation Payload - JSON\nDESCRIPTION: Sample payload for restarting a specific task in an allocation\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/allocations.mdx#2025-04-19_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"TaskName\": \"FOO\"\n}\n```\n\n----------------------------------------\n\nTITLE: Usage of nomad acl role list command\nDESCRIPTION: Shows the basic usage syntax for the 'nomad acl role list' command. This command is used to list existing ACL Roles in Nomad.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/role/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl role list [options]\n```\n\n----------------------------------------\n\nTITLE: Lock Acquisition Response - JSON\nDESCRIPTION: Server response showing the created/updated variable with lock details and metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/variables/locks.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CreateIndex\": 15,\n  \"CreateTime\": 1694552155379696000,\n  \"Items\": {\n    \"user\": \"me\",\n    \"password\": \"passw0rd1\"\n  },\n  \"Lock\": {\n    \"TTL\": \"15s\",\n    \"LockDelay\": \"15s\",\n    \"ID\": \"670c7248-e2ef-f982-e4c5-f4437f75f1e4\"\n  },\n  \"ModifyIndex\": 16,\n  \"ModifyTime\": 1694552206138804000,\n  \"Namespace\": \"prod\",\n  \"Path\": \"example/first\"\n}\n```\n\n----------------------------------------\n\nTITLE: Bridge Network Configuration for containerd Driver\nDESCRIPTION: Configuration showing how to enable bridge networking for containers using the containerd driver. This requires CNI plugins to be installed on Nomad client nodes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/containerd.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nnetwork {\n  mode = \"bridge\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Command for Nomad License Inspection\nDESCRIPTION: Shows the basic command syntax for inspecting a Nomad license file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/license/inspect.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad license inspect [/path/to/license.hclic]\n```\n\n----------------------------------------\n\nTITLE: Using nomad scaling policy info command\nDESCRIPTION: Basic syntax for using the nomad scaling policy info command, which requires a policy ID as input parameter.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/scaling/policy-info.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad scaling policy info [options] <policy_id>\n```\n\n----------------------------------------\n\nTITLE: Nomad Allocation Restart with Conflicting Task Specifications\nDESCRIPTION: Demonstrates behavior when task name is specified both as an argument and with -task option, where -task option takes precedence.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/restart.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc restart -task redis eb17e557 api\n```\n\n----------------------------------------\n\nTITLE: Displaying File Contents with nomad alloc fs\nDESCRIPTION: Example of using nomad alloc fs to display the contents of a file within an allocation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/fs.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc fs eb17e557 redis/local/redis.stdout\nfoobar\nbaz\n```\n\n----------------------------------------\n\nTITLE: Sample Response for One-Time Token Exchange\nDESCRIPTION: The response includes the details of the exchanged token, including AccessorID, CreateTime, Policies, and SecretID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Index\": 17,\n  \"Token\": {\n    \"AccessorID\": \"b780e702-98ce-521f-2e5f-c6b87de05b24\",\n    \"CreateIndex\": 7,\n    \"CreateTime\": \"2017-08-23T22:47:14.695408057Z\",\n    \"Global\": true,\n    \"Hash\": \"UhZESkSFGFfX7eBgq5Uwph30OctbUbpe8+dlH2i4whA=\",\n    \"ModifyIndex\": 7,\n    \"Name\": \"Developer token\",\n    \"Policies\": [\"developer\"],\n    \"SecretID\": \"3f4a0fcd-7c42-773c-25db-2d31ba0c05fe\",\n    \"Type\": \"client\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit Capabilities in Nomad Namespace Rules\nDESCRIPTION: Example showing how to define explicit capabilities instead of using the shorthand policy field, providing the same permissions as the previous example.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/acl-policy.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# Allow reading jobs and submitting jobs, without allowing access\n# to view log output or inspect the filesystem\nnamespace \"default\" {\n  capabilities = [\"submit-job\",\"list-jobs\",\"read-job\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Kadalu CSI Node Plugin in Nomad\nDESCRIPTION: Command to deploy the Kadalu CSI node plugin using Nomad, with output showing the deployment process and status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/kadalu-csi/README.md#2025-04-19_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ nomad run -var=\"volname=$volname\" -var=\"gluster_hosts=$gluster_hosts\" -var=\"gluster_volname=$gluster_volname\" $job_dir/nodeplugin.nomad\n==> 2021-09-20T18:23:53+05:30: Monitoring evaluation \"bd4d95d1\"\n    2021-09-20T18:23:53+05:30: Evaluation triggered by job \"kadalu-csi-nodeplugin\"\n==> 2021-09-20T18:23:54+05:30: Monitoring evaluation \"bd4d95d1\"\n    2021-09-20T18:23:54+05:30: Allocation \"4c05ab5a\" created: node \"4e105698\", group \"nodeplugin\"\n    2021-09-20T18:23:54+05:30: Evaluation status changed: \"pending\" -> \"complete\"\n==> 2021-09-20T18:23:54+05:30: Evaluation \"bd4d95d1\" finished with status \"complete\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Scheduler Configuration in Nomad\nDESCRIPTION: This example shows the output of running the 'nomad operator scheduler get-config' command. It displays various scheduler configuration settings such as the algorithm, memory oversubscription, job registration rejection, and preemption settings for different scheduler types.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/scheduler/get-config.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator scheduler get-config\nScheduler Algorithm           = binpack\nMemory Oversubscription       = false\nReject Job Registration       = false\nPause Eval Broker             = false\nPreemption System Scheduler   = true\nPreemption Service Scheduler  = false\nPreemption Batch Scheduler    = false\nPreemption SysBatch Scheduler = false\nModify Index                  = 5\n```\n\n----------------------------------------\n\nTITLE: Update Token Response\nDESCRIPTION: JSON response after successfully updating an ACL token, showing the updated properties while maintaining the original AccessorID and SecretID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AccessorID\": \"aa534e09-6a07-0a45-2295-a7f77063d429\",\n  \"SecretID\": \"8176afd3-772d-0b71-8f85-7fa5d903e9d4\",\n  \"Name\": \"Read-write token\",\n  \"Type\": \"client\",\n  \"Policies\": [\"readwrite\"],\n  \"Global\": false,\n  \"CreateTime\": \"2017-08-23T23:25:41.429154233Z\",\n  \"CreateIndex\": 52,\n  \"ModifyIndex\": 64\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Nomad variable from standard input\nDESCRIPTION: Illustrates how to create a Nomad variable by reading the value from standard input using the '-' symbol.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/put.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ echo \"abcd1234\" | nomad var put secret/foo bar=-\n```\n\n----------------------------------------\n\nTITLE: Examining None Isolation Filesystem Structure in Nomad\nDESCRIPTION: Shell session output showing the minimal filesystem tree created by the raw_exec driver with 'none' isolation. Without isolation, the task directory contains only basic files and directories.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/filesystem.mdx#2025-04-19_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n.\n├── alloc\n│   ├── data\n│   ├── logs\n│   │   ├── task3.stderr.0\n│   │   └── task3.stdout.0\n│   └── tmp\n└── task3\n    ├── executor.out\n    ├── local\n    ├── private\n    ├── secrets\n    └── tmp\n```\n\n----------------------------------------\n\nTITLE: Displaying allocation status with nomad status\nDESCRIPTION: This example demonstrates how to use the nomad status command to show detailed information about a specific allocation. It includes allocation details, task status, resource usage, and recent events.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/status.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad status e1d14a39\nID                  = e1d14a39\nEval ID             = cc882755\nName                = example.cache[0]\nNode ID             = f9dabe93\nJob ID              = example\nJob Version         = 0\nClient Status       = running\nClient Description  = <none>\nDesired Status      = run\nDesired Description = <none>\nCreated At          = 08/28/17 23:01:39 UTC\nDeployment ID       = f5506391\nDeployment Health   = healthy\n\nTask \"redis\" is \"running\"\nTask Resources\nCPU        Memory           Disk     Addresses\n4/500 MHz  6.3 MiB/256 MiB  300 MiB  db: 127.0.0.1:21752\n\nTask Events:\nStarted At     = 08/28/17 23:01:39 UTC\nFinished At    = N/A\nTotal Restarts = 0\nLast Restart   = N/A\n\nRecent Events:\nTime                   Type        Description\n08/28/17 23:01:39 UTC  Started     Task started by client\n08/28/17 23:01:39 UTC  Task Setup  Building Task Directory\n08/28/17 23:01:39 UTC  Received    Task received by client\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6 Docker Container with Auto Address Mode\nDESCRIPTION: This example demonstrates how to configure an IPv6 Docker container for Redis, using auto address mode for the service and driver address mode for the check.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/service.mdx#2025-04-19_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n  datacenters = [\"dc1\"]\n  group \"cache\" {\n\n    network {\n      port \"db\" {\n        to = 6379\n      }\n    }\n\n\n    task \"redis\" {\n      driver = \"docker\"\n\n      config {\n        image = \"redis:7\"\n        advertise_ipv6_address = true\n        ports = [\"db\"]\n      }\n\n      resources {\n        cpu    = 500 # 500 MHz\n        memory = 256 # 256MB\n      }\n\n      service {\n        name = \"ipv6-redis\"\n        port = \"db\"\n        check {\n          name     = \"ipv6-redis-check\"\n          type     = \"tcp\"\n          interval = \"10s\"\n          timeout  = \"2s\"\n          port     = \"db\"\n          address_mode = \"driver\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Security Options for Podman Container\nDESCRIPTION: Specifies a list of security-related options to be applied to the container.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_27\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  security_opt = [\n    \"no-new-privileges\"\n  ]\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Namespace for Podman in Nomad (HCL)\nDESCRIPTION: Sets the user namespace mode for the container. This example keeps the user ID and maps it to specific UID and GID values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_35\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  userns = \"keep-id:uid=200,gid=210\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Nomad Job Allocations with Go Template\nDESCRIPTION: Demonstrates how to use a Go template to filter and display only the running allocations for a job.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/allocs.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job allocs -t '{{ range . }}{{ if eq .ClientStatus \"running\" }}{{ println .ID }}{{ end }}{{ end }}' example\nc2b4606d-1b02-0d8d-5fdd-031167cd4c91\n```\n\n----------------------------------------\n\nTITLE: Fetching ACL Policy Information with Workload Identity\nDESCRIPTION: Example demonstrating how to fetch information for an ACL policy that includes workload identity information, showing additional details about the associated namespace, job ID, group, and task.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/policy/info.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl policy info my-policy\nName        = my-policy\nDescription = <none>\nCreateIndex = 749\nModifyIndex = 758\n\nAssociated Workload\nNamespace = default\nJobID     = example\nGroup     = cache\nTask      = redis\n\nRules\n\n{\n  \"Name\": \"my-policy\",\n  \"Description\": \"This is a great policy\",\n  \"Rules\": \"list_jobs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Wait Bounds for Template Rendering in Nomad HCL\nDESCRIPTION: Defines client-level lower and upper bounds for per-template wait configuration. This ensures that individual template wait times are within acceptable limits before being sent to consul-template.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/client.mdx#2025-04-19_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nwait_bounds {\n  min     = \"5s\"\n  max     = \"10s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting HCL Jobs to JSON with Nomad CLI\nDESCRIPTION: The nomad job run -output command converts HCL job files to JSON format without submitting the job to the scheduler.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/json-jobs.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad job run -output my-job.nomad\n```\n\n----------------------------------------\n\nTITLE: Verbose Nomad Service Info Command Example in Shell\nDESCRIPTION: Shows how to use the verbose flag to get detailed information about a service, including ID, namespace, datacenter, and other metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/service/info.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad service info -verbose example-cache-redis\nID           = _nomad-task-5f0730ca-b055-52ac-f56e-358f3f7412f6-redis-example-cache-redis-db\nService Name = example-cache-redis\nNamespace    = default\nJob ID       = example\nAlloc ID     = 5f0730ca-b055-52ac-f56e-358f3f7412f6\nNode ID      = 7406e90b-de16-d118-80fe-60d0f2730cb3\nDatacenter   = dc1\nAddress      = 127.0.0.1:22686\nTags         = [db,cache]\n\nID           = _nomad-task-a831f7f2-4c01-39dc-c742-f2b8ca178a49-redis-example-cache-redis-db\nService Name = example-cache-redis\nNamespace    = default\nJob ID       = example\nAlloc ID     = a831f7f2-4c01-39dc-c742-f2b8ca178a49\nNode ID      = 7406e90b-de16-d118-80fe-60d0f2730cb3\nDatacenter   = dc1\nAddress      = 127.0.0.1:25854\nTags         = [db,cache]\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Cleanup Options in Nomad Client\nDESCRIPTION: Example configuration for the Nomad client that disables automatic cleanup of Docker images after task completion. This setting prevents Nomad from removing images from stopped tasks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_26\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  options {\n    \"docker.cleanup.image\" = \"false\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Evaluations List Response in Nomad API\nDESCRIPTION: Example JSON response from the evaluations list endpoint showing evaluation details including ID, status, job information, and queue allocations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/evaluations.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"ID\": \"5456bd7a-9fc0-c0dd-6131-cbee77f57577\",\n    \"Priority\": 50,\n    \"Type\": \"service\",\n    \"TriggeredBy\": \"job-register\",\n    \"JobID\": \"example\",\n    \"JobModifyIndex\": 52,\n    \"NodeID\": \"\",\n    \"NodeModifyIndex\": 0,\n    \"Status\": \"complete\",\n    \"StatusDescription\": \"\",\n    \"Wait\": 0,\n    \"NextEval\": \"\",\n    \"PreviousEval\": \"\",\n    \"BlockedEval\": \"\",\n    \"FailedTGAllocs\": null,\n    \"ClassEligibility\": null,\n    \"EscapedComputedClass\": false,\n    \"AnnotatePlan\": false,\n    \"SnapshotIndex\": 53,\n    \"QueuedAllocations\": {\n      \"cache\": 0\n    },\n    \"CreateIndex\": 53,\n    \"ModifyIndex\": 55\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Nomad Help Output\nDESCRIPTION: Sample output from the nomad command showing available commands and options, used to verify successful installation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nUsage: nomad [-version] [-help] [-autocomplete-(un)install] <command> [args]\n\nCommon commands:\n    run         Run a new job or update an existing job\n    stop        Stop a running job\n    status      Display the status output for a resource\n    alloc       Interact with allocations\n    job         Interact with jobs\n    node        Interact with nodes\n    agent       Runs a Nomad agent\n\nOther commands:\n    acl                 Interact with ACL policies and tokens\n    agent-info          Display status information about the local agent\n    config              Interact with configurations\n    deployment          Interact with deployments\n    eval                Interact with evaluations\n    exec                Execute commands in task\n    fmt                 Rewrites Nomad config and job files to canonical format\n    license             Interact with Nomad Enterprise License\n    login               Login to Nomad using an auth method\n    monitor             Stream logs from a Nomad agent\n    namespace           Interact with namespaces\n    operator            Provides cluster-level tools for Nomad operators\n    plugin              Inspect plugins\n    quota               Interact with quotas\n    recommendation      Interact with the Nomad recommendation endpoint\n    scaling             Interact with the Nomad scaling endpoint\n    sentinel            Interact with Sentinel policies\n    server              Interact with servers\n    service             Interact with registered services\n    system              Interact with the system API\n    tls                 Generate Self Signed TLS Certificates for Nomad\n    ui                  Open the Nomad Web UI\n    var                 Interact with variables\n    version             Prints the Nomad version\n    volume              Interact with volumes\n```\n\n----------------------------------------\n\nTITLE: Example Nomad Operator Autopilot Health Output\nDESCRIPTION: Example output showing Autopilot health status including server health, voting status, and cluster details. Displays information about cluster health, failure tolerance, leader status, and detailed server information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/autopilot/health.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator autopilot health\nHealthy: true\nFailureTolerance: 0\nLeader: e349749b-3303-3ddf-959c-b5885a0e1f6e\nVoters:\n        e349749b-3303-3ddf-959c-b5885a0e1f6e\nServers:\nID                                    Name      Address         SerfStatus  Version   Leader  Voter  Healthy  LastContact  LastTerm  LastIndex  StableSince\ne349749b-3303-3ddf-959c-b5885a0e1f6e  node1     127.0.0.1:4647  alive       1.7.5     true    true   true     0s           2         14         2024-02-20 16:40:55 +0000 UTC\n```\n\n----------------------------------------\n\nTITLE: Dispatching Duplicate Job with Same Token\nDESCRIPTION: Example showing the response when attempting to dispatch a job with a previously used idempotency token.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/dispatch.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job dispatch -idempotency-token=prod video-encode video-config.json\nJob \"video-encode/dispatch-1485379325-cb38d00d\" already dispatched with idempotency token \"prod\".\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for ACL Policies List in Nomad\nDESCRIPTION: This JSON snippet shows the expected response format when listing ACL policies. Each policy in the array includes its name, description, creation index, and modification index.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/policies.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Name\": \"foo\",\n    \"Description\": \"\",\n    \"CreateIndex\": 12,\n    \"ModifyIndex\": 13\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Nomad Deployments API in Shell\nDESCRIPTION: This snippet shows how to query the Nomad Deployments API using the 'nomad operator api' command. It demonstrates both unfiltered and filtered requests to retrieve deployment information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/index.mdx#2025-04-19_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api /v1/deployments\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api -filter 'Status != \"successful\"' /v1/deployments\n```\n\n----------------------------------------\n\nTITLE: Using Java Version Constraints in Nomad Job\nDESCRIPTION: This snippet shows how to use Java client attributes in a job constraint to ensure the job runs only on nodes with a specific Java version.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/java.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  # Only run this job where the JVM is higher than version 1.6.0.\n  constraint {\n    attribute = \"${attr.driver.java.version}\"\n    operator  = \">\"\n    value     = \"1.6.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Maintenance Job with Constraints on 'all' Pool\nDESCRIPTION: Example of a maintenance job targeting all nodes but with constraints to fine-tune placement, including OS-specific requirements and node pool exclusions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/node-pools.mdx#2025-04-19_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\njob \"maintenance-linux\" {\n  type      = \"batch\"\n  namespace = \"infra\"\n  node_pool = \"all\"\n\n  constraint {\n    attribute = \"${attr.kernel.name}\"\n    value     = \"linux\"\n  }\n\n  constraint {\n    attribute = \"${node.pool}\"\n    operator  = \"!=\"\n    value     = \"ingress\"\n  }\n\n  periodic { /* ... */ }\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Nomad Client Vault Configuration Example\nDESCRIPTION: Example configuration for a Nomad client with Vault integration. This shows how to enable a client agent and configure Vault connection settings including address and TLS certificate paths.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/vault.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  enabled = true\n  # ...\n}\n\nvault {\n  enabled   = true\n  address   = \"https://vault.service.consul:8200\"\n  ca_path   = \"/etc/certs/ca\"\n  cert_file = \"/var/certs/vault.crt\"\n  key_file  = \"/var/certs/vault.key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Virt Driver on Ubuntu/Debian\nDESCRIPTION: This shell command installs the necessary packages for the Virt task driver plugin on Ubuntu or Debian systems. It includes packages for virtualization, cloud-init, networking, and QEMU.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/virt/install.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt-get update && \\\n  sudo apt-get install -y \\\n  wget \\\n  gpg \\\n  coreutils \\\n  bridge-utils \\\n  cloud-init \\\n  dnsmasq \\\n  iptables \\\n  libvirt-daemon-system \\\n  qemu-system \\\n  qemu-system-x86 \\\n  qemu-utils\n```\n\n----------------------------------------\n\nTITLE: Nomad Keyring List Command Examples\nDESCRIPTION: Demonstrates the output of the keyring list command in both standard and verbose modes, showing key IDs, states, and creation timestamps.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/root/keyring-list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator root keyring list\nKey       State     Create Time\n33374156  active    2022-07-11T19:11:07Z\n8d87a371  inactive  2022-07-11T19:10:37Z\n\n$ nomad operator root keyring list -verbose\nKey                                   State     Create Time\n33374156-9f81-b14c-83d4-a2f1f87dbf99  active    2022-07-11T19:11:07Z\n8d87a371-3594-e1e4-8ae1-3980122b0f25  inactive  2022-07-11T19:10:37Z\n```\n\n----------------------------------------\n\nTITLE: Applying Node Pool Configuration from Stdin\nDESCRIPTION: Shell commands showing how to pipe a node pool configuration from a file or heredoc to the `nomad node pool apply` command using stdin.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/apply.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ cat prod_pool.nomad.hcl | nomad node pool apply -\nSuccessfully applied node pool \"prod\"!\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ cat <<EOF | nomad node pool apply -\nnode_pool \"dev\" {\n  description = \"Node pool for dev workloads.\"\n}\nEOF\nSuccessfully applied node pool \"dev\"!\n```\n\n----------------------------------------\n\nTITLE: Listing Sentinel Policies in Nomad Enterprise via Shell\nDESCRIPTION: Example of executing the 'nomad sentinel list' command in a shell session. The output displays the name, scope, enforcement level, and description of each Sentinel policy installed in the Nomad cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/sentinel/list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad sentinel list\nName  Scope       Enforcement Level  Description\nfoo   submit-job  advisory           my test policy\n```\n\n----------------------------------------\n\nTITLE: Docker Device Configuration in Nomad\nDESCRIPTION: Example showing how to configure device mappings between host and container.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  devices = [\n    {\n      host_path = \"/dev/sda1\"\n      container_path = \"/dev/xvdc\"\n      cgroup_permissions = \"r\"\n    },\n    {\n      host_path = \"/dev/sda2\"\n      container_path = \"/dev/xvdd\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Downloaded Binary with Exec Task Driver\nDESCRIPTION: This snippet shows how to execute a binary that has been downloaded using an artifact in the Nomad job specification. It includes the artifact configuration for downloading the binary.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/exec.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"example\" {\n  driver = \"exec\"\n\n  config {\n    command = \"name-of-my-binary\"\n  }\n\n  artifact {\n    source = \"https://internal.file.server/name-of-my-binary\"\n    options {\n      checksum = \"sha256:abd123445ds4555555555\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pausing a scheduled task in Nomad\nDESCRIPTION: Example of using 'nomad alloc pause' to stop the 'schedtask' task of allocation '4d37a9d1', overriding its schedule.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/pause.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc pause -state=pause 4d37a9d1 schedtask\n```\n\n----------------------------------------\n\nTITLE: Example Nomad Deployment List Output\nDESCRIPTION: Demonstrates the default output format of the nomad deployment list command, showing deployment IDs, job IDs, versions, status, and descriptions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/deployment/list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad deployment list\nID        Job ID   Job Version  Status      Description\n8990cfbc  example  2            failed      Deployment marked as failed\n62eb607c  example  1            successful  Deployment completed successfully\n5f271fe2  example  0            successful  Deployment completed successfully\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Nodes in Nomad\nDESCRIPTION: This JSON response shows the structure of data returned when listing nodes. It includes details such as node address, attributes, drivers, status, and version information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/nodes.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Address\": \"10.138.0.5\",\n    \"Attributes\": {\n      \"os.name\": \"ubuntu\"\n    },\n    \"CreateIndex\": 6,\n    \"Datacenter\": \"dc1\",\n    \"Drain\": false,\n    \"Drivers\": {\n      \"java\": {\n        \"Attributes\": {\n          \"driver.java.runtime\": \"OpenJDK Runtime Environment (build 1.8.0_162-8u162-b12-1~deb9u1-b12)\",\n          \"driver.java.vm\": \"OpenJDK 64-Bit Server VM (build 25.162-b12, mixed mode)\",\n          \"driver.java.version\": \"openjdk version \\\"1.8.0_162\"\n        },\n        \"Detected\": true,\n        \"HealthDescription\": \"\",\n        \"Healthy\": true,\n        \"UpdateTime\": \"2018-04-11T23:33:48.781948669Z\"\n      },\n      \"qemu\": {\n        \"Attributes\": null,\n        \"Detected\": false,\n        \"HealthDescription\": \"\",\n        \"Healthy\": false,\n        \"UpdateTime\": \"2018-04-11T23:33:48.7819898Z\"\n      },\n      \"rkt\": {\n        \"Attributes\": {\n          \"driver.rkt.appc.version\": \"0.8.11\",\n          \"driver.rkt.volumes.enabled\": \"1\",\n          \"driver.rkt.version\": \"1.29.0\"\n        },\n        \"Detected\": true,\n        \"HealthDescription\": \"Driver rkt is detected: true\",\n        \"Healthy\": true,\n        \"UpdateTime\": \"2018-04-11T23:34:48.81079772Z\"\n      },\n      \"docker\": {\n        \"Attributes\": {\n          \"driver.docker.bridge_ip\": \"172.17.0.1\",\n          \"driver.docker.version\": \"18.03.0-ce\",\n          \"driver.docker.volumes.enabled\": \"1\"\n        },\n        \"Detected\": true,\n        \"HealthDescription\": \"Driver is available and responsive\",\n        \"Healthy\": true,\n        \"UpdateTime\": \"2018-04-11T23:34:48.713720323Z\"\n      },\n      \"exec\": {\n        \"Attributes\": {},\n        \"Detected\": true,\n        \"HealthDescription\": \"Driver exec is detected: true\",\n        \"Healthy\": true,\n        \"UpdateTime\": \"2018-04-11T23:34:48.711026521Z\"\n      },\n      \"raw_exec\": {\n        \"Attributes\": {},\n        \"Detected\": true,\n        \"HealthDescription\": \"\",\n        \"Healthy\": true,\n        \"UpdateTime\": \"2018-04-11T23:33:48.710448534Z\"\n      }\n    },\n    \"ID\": \"f7476465-4d6e-c0de-26d0-e383c49be941\",\n    \"LastDrain\": null,\n    \"ModifyIndex\": 2526,\n    \"Name\": \"nomad-4\",\n    \"NodeClass\": \"\",\n    \"NodePool\": \"default\",\n    \"SchedulingEligibility\": \"eligible\",\n    \"Status\": \"ready\",\n    \"StatusDescription\": \"\",\n    \"Version\": \"0.8.0-rc1\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Nomad ACL Binding Rule List Command Syntax\nDESCRIPTION: Basic command syntax for listing ACL binding rules in Nomad.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/binding-rule/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl binding-rule list [options]\n```\n\n----------------------------------------\n\nTITLE: Example of listing ACL Roles using nomad command\nDESCRIPTION: Demonstrates how to use the 'nomad acl role list' command to display all ACL Roles. The output shows the ID, Name, Description, and associated Policies for each role.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/role/list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl role list\nID                                    Name              Description  Policies\na53b0095-c28a-6181-0586-807b82e665e4  example-acl-role  <none>       general-write\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Recommendation Base Command\nDESCRIPTION: The base command for interacting with Nomad recommendations, showing the main command syntax and format.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/recommendation/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnomad recommendation <subcommand> [options]\n```\n\n----------------------------------------\n\nTITLE: Deleting an Inactive Root Key\nDESCRIPTION: This snippet demonstrates how to delete an inactive root key from the Nomad keyring. The 'force' parameter can be used to remove a key even if it was used to sign existing variables or workload identities. Requires management ACL token.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/keyring.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -XDELETE \\\n    https://localhost:4646/v1/operator/keyring/key/68237d9-1770-4d34-9c41-1f220107fc10\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Index\": 16\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Allocations - Basic Request\nDESCRIPTION: Makes a GET request to retrieve all allocations from the Nomad API\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/allocations.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/allocations\n```\n\n----------------------------------------\n\nTITLE: Nomad Changelog Format\nDESCRIPTION: Structured changelog entry format following HashiCorp's standard release note style, organizing changes into categories like SECURITY, IMPROVEMENTS, and BUG FIXES\nSOURCE: https://github.com/hashicorp/nomad/blob/main/CHANGELOG.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.8.10 (February 11, 2025)\n\nSECURITY:\n\n* api: sanitize the SignedIdentities in allocations of events to clean the identity token.\n* build: Updated Go to 1.23.6\n* event stream: fixes vulnerability CVE-2025-0937\n\nIMPROVEMENTS:\n\n* auth: adds `VerboseLogging` option\n* event stream: adds ability to authenticate using workload identities\n```\n\n----------------------------------------\n\nTITLE: Using the nomad volume deregister command\nDESCRIPTION: Command syntax for deregistering a CSI storage volume from Nomad. The command requires a volume ID and will fail if the volume is in use by an allocation or is being unpublished. When ACLs are enabled, a token with 'csi-write-volume' capability is required.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/deregister.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad volume deregister [options] [volume]\n```\n\n----------------------------------------\n\nTITLE: Creating a New Quota Specification in Nomad\nDESCRIPTION: Example showing how to apply a quota specification from a file named 'my-quota.hcl', which creates a new quota named 'my-quota' in Nomad Enterprise.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/quota/apply.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad quota apply my-quota.hcl\nSuccessfully applied quota specification \"my-quota\"!\n```\n\n----------------------------------------\n\nTITLE: Accessing Namespace Fields with Sentinel in Nomad\nDESCRIPTION: Examples of how to access Namespace fields using Sentinel syntax. The examples demonstrate accessing the description and node pool configuration properties of a namespace object.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/enterprise/sentinel.mdx#2025-04-19_snippet_2\n\nLANGUAGE: sentinel\nCODE:\n```\nnamespace.description\nnamespace.node_pool_configuration.allowed[0]\n```\n\n----------------------------------------\n\nTITLE: Automating job plan in CI/CD pipelines\nDESCRIPTION: Example of using 'nomad job plan' in automated environments like CI/CD pipelines, outputting the plan result and storing the check index for later use.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/plan.mdx#2025-04-19_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ nomad job plan -no-color example.nomad.hcl | tee /dev/stderr | grep 'Job Modify Index:' | awk -F': ' '{ print $2 }' > check-index || true\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Raft List-Peers Command Usage\nDESCRIPTION: Shows the basic command syntax for listing Raft peers in a Nomad cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/raft/list-peers.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator raft list-peers [options]\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Nomad Enterprise License API\nDESCRIPTION: This JSON response contains the license information returned by the Nomad Enterprise license API. It includes details such as customer ID, expiration time, available features, installation ID, and other license-related metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/license.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"KnownLeader\": false,\n  \"LastContact\": 0,\n  \"LastIndex\": 0,\n  \"License\": {\n    \"CustomerID\": \"customer name\",\n    \"ExpirationTime\": \"2020-06-01T14:50:16.581304556-04:00\",\n    \"Features\": [\n      \"Automated Upgrades\",\n      \"Enhanced Read Scalability\",\n      \"Redundancy Zones\",\n      \"Namespaces\",\n      \"Resource Quotas\",\n      \"Preemption\",\n      \"Audit Logging\",\n      \"Setinel Policies\"\n    ],\n    \"Flags\": {\n      \"modules\": [\"governance-policy\"]\n    },\n    \"InstallationID\": \"*\",\n    \"IssueTime\": \"2020-06-01T08:50:16.581304556-04:00\",\n    \"LicenseID\": \"6f706a45-bdac-4a70-968b-d93784894653\",\n    \"Modules\": [\"governance-policy\"],\n    \"Product\": \"nomad\",\n    \"StartTime\": \"2020-06-01T08:50:16.581304556-04:00\",\n    \"TerminationTime\": \"2020-06-01T14:50:16.581304556-04:00\"\n  },\n  \"RequestTime\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with an ACL Token in Nomad UI in Shell\nDESCRIPTION: Example of using the 'nomad ui' command with the -authenticate option to exchange your Nomad ACL token for authentication in the web UI.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/ui.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ NOMAD_ACL_TOKEN=e9674b26-763b-4637-a28f-0df95c53cdda nomad ui -authenticate\nOpening URL \"http://127.0.0.1:4646\" with token\n```\n\n----------------------------------------\n\nTITLE: Wait Configuration for Template Rendering\nDESCRIPTION: Example showing how to configure minimum and maximum wait times for Consul to reach a consistent state before rendering a template.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nwait {\n  min     = \"5s\"\n  max     = \"10s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining zipmap Function in HCL\nDESCRIPTION: The zipmap function takes two parameters: keyslist and valueslist. It constructs a map by pairing elements from these lists based on their indices. The keyslist must be a list of strings, while valueslist can be a list of any type. Both lists must have the same length.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/zipmap.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nzipmap(keyslist, valueslist)\n```\n\n----------------------------------------\n\nTITLE: Specifying Podman Socket for Task\nDESCRIPTION: Selects a named socket from the client agent's plugin configuration for the Podman task to use.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_29\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  socket = \"app1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming logs from a specific allocation and task\nDESCRIPTION: Example of using 'nomad alloc logs' to display stdout logs from a Redis task in a specific allocation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/logs.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc logs eb17e557 redis\nfoobar\nbaz\nbam\n```\n\n----------------------------------------\n\nTITLE: Using heredoc for command execution\nDESCRIPTION: Example of using heredoc syntax to pass a command to be executed in the task environment.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/exec.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc exec eb17e557 /bin/sh <<'EOF'\n> echo $NOMAD_ALLOC_ID\n> EOF\neb17e557-443e-4c51-c049-5bba7a9850bc\n```\n\n----------------------------------------\n\nTITLE: Creating Variable via HTTP PUT\nDESCRIPTION: Makes a PUT request to create or update a variable with specified payload.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/variables/variables.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -XPUT -d@spec.nsv.json \\\n    https://localhost:4646/v1/var/example/first\n```\n\n----------------------------------------\n\nTITLE: Adding IPC_LOCK Capability to Exec Task\nDESCRIPTION: Job specification configuration for adding the ipc_lock capability to a specific exec task (Vault in this example) that uses the mlock system call.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/upgrade/upgrade-specific.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"vault\" {\n  driver = \"exec\"\n\n  config {\n    cap_add = [\"ipc_lock\"]\n\n    # ... other task configuration\n  }\n\n# ... rest of jobspec\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Delete Operation in Nomad Host Volume Plugin\nDESCRIPTION: Lists the environment variables available to the delete operation in a Nomad host volume plugin. These variables provide context and information needed for the delete operation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/plugins/storage/host-volumes.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDHV_OPERATION=delete\nDHV_CREATED_PATH={path that `create` returned}\nDHV_VOLUMES_DIR={directory that volumes should be put in}\nDHV_PLUGIN_DIR={path to directory containing plugins}\nDHV_NAMESPACE={volume namespace}\nDHV_VOLUME_NAME={name from the volume specification}\nDHV_VOLUME_ID={volume ID generated by Nomad}\nDHV_NODE_ID={Nomad node ID}\nDHV_NODE_POOL={Nomad node pool}\nDHV_PARAMETERS={stringified json of parameters from the volume spec}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Complete Variable from Nomad\nDESCRIPTION: Example showing how to retrieve the full contents of a variable stored at 'secret/creds'. The output displays the namespace, path, creation time, check index, and all variable items.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/get.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad var get secret/creds\nNamespace   = default\nPath        = secret/creds\nCreate Time = 2022-08-23T11:14:37-04:00\nCheck Index = 116\n\nItems\npasscode = my-long-passcode\n```\n\n----------------------------------------\n\nTITLE: Listing jobs in a specific namespace and node pool\nDESCRIPTION: This example demonstrates how to list jobs in the 'default' namespace within the 'prod' node pool. It displays job ID, type, priority, status, and submit date.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/jobs.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node pool jobs -namespace default prod\nID       Type     Priority  Status          Submit Date\njob1     service  80        running         07/25/17 15:47:11 UTC\njob2     batch    40        complete        07/24/17 19:22:11 UTC\njob3     service  50        dead (stopped)  07/22/17 16:34:48 UTC\n```\n\n----------------------------------------\n\nTITLE: Deploying Portworx CSI Plugin in Nomad\nDESCRIPTION: Command to deploy the Portworx CSI plugin job in Nomad using the provided HCL configuration file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/portworx-csi-plugin/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnomad job run portworx-csi-plugin.hcl\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad API Usage\nDESCRIPTION: Simple example of using the nomad operator api command to access the /v1/jobs endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/api.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnomad operator api /v1/jobs\n```\n\n----------------------------------------\n\nTITLE: CPU Cores Configuration in Nomad Resources\nDESCRIPTION: Example demonstrating how to specify CPU core requirements using the cores parameter in the resources block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/resources.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresources {\n  cores = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Using the nomad volume create command\nDESCRIPTION: The basic syntax for using the 'nomad volume create' command to create a new storage volume in Nomad. This command requires a path to a file containing the volume specification or can read from STDIN when the path is specified as '-'.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/create.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad volume create [options] [file]\n```\n\n----------------------------------------\n\nTITLE: Target Value Strategy Agent Configuration\nDESCRIPTION: HCL configuration block for setting up the target-value strategy in the agent configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/strategy/target-value.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nstrategy \"target-value\" {\n  driver = \"target-value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Gossip Encryption Key - Nomad CLI Command\nDESCRIPTION: Basic command syntax for generating a new encryption key for Nomad server gossip traffic using the built-in key generator.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/gossip/keyring-generate.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator gossip keyring generate\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad Node Command\nDESCRIPTION: This snippet shows the basic usage syntax for the 'nomad node' command. It demonstrates how to run a subcommand and access help for specific subcommands.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnomad node <subcommand> [options]\n```\n\nLANGUAGE: shell\nCODE:\n```\nnomad node <subcommand> -h\n```\n\n----------------------------------------\n\nTITLE: Updating Node Metadata via API\nDESCRIPTION: Example of making a POST request to update node metadata using a JSON payload file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnomad operator api /v1/client/metadata < meta.json\n```\n\n----------------------------------------\n\nTITLE: Nomad Volume Command Basic Usage\nDESCRIPTION: The basic syntax for using the nomad volume command with subcommands and options. This command is used to interact with volumes in a Nomad cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnomad volume <subcommand> [options]\n```\n\n----------------------------------------\n\nTITLE: Node Registration Event Response Structure in JSON\nDESCRIPTION: Complete JSON response showing a Nomad node registration event. Contains detailed information about the node including its resources, network configuration, supported drivers, and system attributes. The response includes both basic node metadata and detailed resource specifications.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/events.mdx#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Index\": 7,\n  \"Events\": [\n    {\n      \"Topic\": \"Node\",\n      \"Type\": \"NodeRegistration\",\n      \"Key\": \"ccc4ce56-7f0a-4124-b8b1-a4015aa82c40\",\n      \"Namespace\": \"\",\n      \"FilterKeys\": null,\n      \"Index\": 7,\n      \"Payload\": {\n        \"Node\": {\n          \"ID\": \"ccc4ce56-7f0a-4124-b8b1-a4015aa82c40\",\n          \"Datacenter\": \"dc1\",\n          \"Name\": \"nomad-4\",\n          \"HTTPAddr\": \"127.0.0.1:4646\",\n          \"TLSEnabled\": false,\n          \"Attributes\": {\n            \"cpu.arch\": \"amd64\",\n            \"cpu.frequency\": \"4200\",\n            \"cpu.modelname\": \"Intel(R) Core(TM) i7-8650U CPU @ 1.90GHz\",\n            \"cpu.numcores\": \"8\",\n            \"cpu.totalcompute\": \"33600\",\n            \"driver.docker\": \"1\",\n            \"driver.docker.bridge_ip\": \"172.17.0.1\",\n            \"driver.docker.os_type\": \"linux\",\n            \"driver.docker.runtimes\": \"runc\",\n            \"driver.docker.version\": \"19.03.13\",\n            \"driver.mock_driver\": \"1\",\n            \"driver.raw_exec\": \"1\",\n            \"kernel.name\": \"linux\",\n            \"kernel.version\": \"5.4.0-48-generic\",\n            \"memory.totalbytes\": \"16525733888\",\n            \"nomad.revision\": \"8c88f29bff0849720e33b0cc73af87495358f3b8\",\n            \"nomad.version\": \"0.13.0-dev\",\n            \"os.name\": \"ubuntu\",\n            \"os.signals\": \"SIGBUS,SIGFPE,SIGTRAP,SIGTTOU,SIGWINCH,SIGXFSZ,SIGHUP,SIGILL,SIGALRM,SIGCHLD,SIGSYS,SIGXCPU,SIGPROF,SIGQUIT,SIGTERM,SIGUSR2,SIGCONT,SIGIO,SIGSEGV,SIGTTIN,SIGIOT,SIGKILL,SIGPIPE,SIGABRT,SIGINT,SIGSTOP,SIGTSTP,SIGURG,SIGUSR1\",\n            \"os.version\": \"20.04\",\n            \"unique.advertise.address\": \"127.0.0.1:4646\",\n            \"unique.cgroup.mountpoint\": \"/sys/fs/cgroup/systemd\",\n            \"unique.hostname\": \"x1c\",\n            \"unique.network.ip-address\": \"127.0.0.1\",\n            \"unique.storage.bytesfree\": \"299488927744\",\n            \"unique.storage.bytestotal\": \"502468108288\",\n            \"unique.storage.volume\": \"/dev/nvme0n1p2\"\n          },\n          \"NodeResources\": {\n            \"Cpu\": {\n              \"CpuShares\": 33600\n            },\n            \"Memory\": {\n              \"MemoryMB\": 15760\n            },\n            \"Disk\": {\n              \"DiskMB\": 285614\n            },\n            \"Networks\": [\n              {\n                \"Mode\": \"bridge\",\n                \"Device\": \"\",\n                \"CIDR\": \"\",\n                \"IP\": \"\",\n                \"MBits\": 0,\n                \"DNS\": null,\n                \"ReservedPorts\": null,\n                \"DynamicPorts\": null\n              },\n              {\n                \"Mode\": \"host\",\n                \"Device\": \"lo\",\n                \"CIDR\": \"127.0.0.1/32\",\n                \"IP\": \"127.0.0.1\",\n                \"MBits\": 1000,\n                \"DNS\": null,\n                \"ReservedPorts\": null,\n                \"DynamicPorts\": null\n              },\n              {\n                \"Mode\": \"host\",\n                \"Device\": \"lo\",\n                \"CIDR\": \"::1/128\",\n                \"IP\": \"::1\",\n                \"MBits\": 1000,\n                \"DNS\": null,\n                \"ReservedPorts\": null,\n                \"DynamicPorts\": null\n              }\n            ],\n            \"NodeNetworks\": [\n              {\n                \"Mode\": \"bridge\",\n                \"Device\": \"\",\n                \"MacAddress\": \"\",\n                \"Speed\": 0,\n                \"Addresses\": null\n              },\n              {\n                \"Mode\": \"host\",\n                \"Device\": \"lo\",\n                \"MacAddress\": \"\",\n                \"Speed\": 1000,\n                \"Addresses\": [\n                  {\n                    \"Family\": \"ipv4\",\n                    \"Alias\": \"default\",\n                    \"Address\": \"127.0.0.1\",\n                    \"ReservedPorts\": \"\",\n                    \"Gateway\": \"\"\n                  },\n                  {\n                    \"Family\": \"ipv6\",\n                    \"Alias\": \"default\",\n                    \"Address\": \"::1\",\n                    \"ReservedPorts\": \"\",\n                    \"Gateway\": \"\"\n                  }\n                ]\n              }\n            ],\n            \"Devices\": null\n          },\n          \"ReservedResources\": {\n            \"Cpu\": {\n              \"CpuShares\": 0\n            },\n            \"Memory\": {\n              \"MemoryMB\": 0\n            },\n            \"Disk\": {\n              \"DiskMB\": 0\n            },\n            \"Networks\": {\n              \"ReservedHostPorts\": \"\"\n            }\n          },\n          \"Resources\": {\n            \"CPU\": 33600,\n            \"MemoryMB\": 15760,\n            \"DiskMB\": 285614,\n            \"IOPS\": 0,\n            \"Networks\": [\n              {\n                \"Mode\": \"host\",\n                \"Device\": \"lo\",\n                \"CIDR\": \"127.0.0.1/32\",\n                \"IP\": \"127.0.0.1\",\n                \"MBits\": 1000,\n                \"DNS\": null,\n                \"ReservedPorts\": null,\n                \"DynamicPorts\": null\n              },\n              {\n                \"Mode\": \"host\",\n                \"Device\": \"lo\",\n                \"CIDR\": \"::1/128\",\n                \"IP\": \"::1\",\n                \"MBits\": 1000,\n                \"DNS\": null,\n                \"ReservedPorts\": null,\n                \"DynamicPorts\": null\n              }\n            ],\n            \"Devices\": null\n          },\n          \"Reserved\": {\n            \"CPU\": 0,\n            \"MemoryMB\": 0,\n            \"DiskMB\": 0,\n            \"IOPS\": 0,\n            \"Networks\": null,\n            \"Devices\": null\n          },\n          \"Links\": null,\n          \"Meta\": {\n            \"connect.gateway_image\": \"envoyproxy/envoy:v1.11.2@sha256:a7769160c9c1a55bb8d07a3b71ce5d64f72b1f665f10d81aa1581bc3cf850d09\",\n            \"connect.log_level\": \"info\",\n            \"connect.sidecar_image\": \"envoyproxy/envoy:v1.11.2@sha256:a7769160c9c1a55bb8d07a3b71ce5d64f72b1f665f10d81aa1581bc3cf850d09\"\n          },\n          \"NodeClass\": \"\",\n          \"ComputedClass\": \"v1:9803688035578634002\",\n          \"Drain\": false,\n          \"DrainStrategy\": null,\n          \"SchedulingEligibility\": \"eligible\",\n          \"Status\": \"initializing\",\n          \"StatusDescription\": \"\",\n          \"StatusUpdatedAt\": 1602770857,\n          \"Events\": [\n            {\n              \"Message\": \"Node registered\",\n              \"Subsystem\": \"Cluster\",\n              \"Details\": null,\n              \"Timestamp\": \"2020-10-15T10:07:37-04:00\",\n              \"CreateIndex\": 0\n            }\n          ],\n          \"Drivers\": {\n            \"docker\": {\n              \"Attributes\": {\n                \"driver.docker\": \"true\",\n                \"driver.docker.bridge_ip\": \"172.17.0.1\",\n                \"driver.docker.os_type\": \"linux\",\n                \"driver.docker.runtimes\": \"runc\",\n                \"driver.docker.version\": \"19.03.13\"\n              },\n              \"Detected\": true,\n              \"Healthy\": true,\n              \"HealthDescription\": \"Healthy\",\n              \"UpdateTime\": \"2020-10-15T10:07:37.904159516-04:00\"\n            },\n            \"exec\": {\n              \"Attributes\": null,\n              \"Detected\": false,\n              \"Healthy\": false,\n              \"HealthDescription\": \"Driver must run as root\",\n              \"UpdateTime\": \"2020-10-15T10:07:37.445083368-04:00\"\n            },\n            \"java\": {\n              \"Attributes\": null,\n              \"Detected\": false,\n              \"Healthy\": false,\n              \"HealthDescription\": \"Driver must run as root\",\n              \"UpdateTime\": \"2020-10-15T10:07:37.445601605-04:00\"\n            },\n            \"qemu\": {\n              \"Attributes\": null,\n              \"Detected\": false,\n              \"Healthy\": false,\n              \"HealthDescription\": \"\",\n              \"UpdateTime\": \"2020-10-15T10:07:37.445684857-04:00\"\n            },\n            \"raw_exec\": {\n              \"Attributes\": {\n                \"driver.raw_exec\": \"true\"\n              },\n              \"Detected\": true,\n              \"Healthy\": true,\n              \"HealthDescription\": \"Healthy\",\n              \"UpdateTime\": \"2020-10-15T10:07:37.445431163-04:00\"\n            }\n          },\n          \"CSIControllerPlugins\": null,\n          \"CSINodePlugins\": null,\n          \"HostVolumes\": null,\n          \"CreateIndex\": 7,\n          \"ModifyIndex\": 7\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Example Node Pool Specification\nDESCRIPTION: This example shows how to use the 'nomad node pool init' command to generate an example node pool specification. The command writes the specification to a file named 'pool.nomad.hcl' by default.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/init.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node pool init\nExample node pool specification written to pool.nomad.hcl\n```\n\n----------------------------------------\n\nTITLE: Listing Namespaces with cURL in Shell\nDESCRIPTION: Makes a GET request to retrieve all namespaces. The endpoint supports blocking queries and requires namespace:* ACL capability.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/namespaces.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/namespaces\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad ACL Command\nDESCRIPTION: The basic usage syntax for the `nomad acl` command. It shows how to invoke subcommands and access help for specific subcommands.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnomad acl <subcommand> [options]\n```\n\nLANGUAGE: shell\nCODE:\n```\nnomad acl <subcommand> -h\n```\n\n----------------------------------------\n\nTITLE: Promoting Canaries in a Specific Group\nDESCRIPTION: This example shows how to promote canaries in a particular group (cache) using the `-group` option with the `nomad deployment promote` command. It demonstrates the deployment status before and after promoting only the cache group.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/deployment/promote.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n# Have two task groups waiting for promotion.\n$ nomad status example\nID            = example\nName          = example\nSubmit Date   = 07/25/17 18:37:14 UTC\nType          = service\nPriority      = 50\nDatacenters   = dc1\nStatus        = running\nPeriodic      = false\nParameterized = false\n\nSummary\nTask Group  Queued  Starting  Running  Failed  Complete  Lost\ncache       0       0         3        0       0         0\nweb         0       0         3        0       0         0\n\nLatest Deployment\nID          = a6b87a6c\nStatus      = running\nDescription = Deployment is running but requires manual promotion\n\nDeployed\nTask Group  Promoted  Desired  Canaries  Placed  Healthy  Unhealthy\ncache       false     2        1         1       1        0\nweb         false     2        1         1       1        0\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created At\n3071ab8f  6240eed6  web         1        run      running  07/25/17 18:37:14 UTC\neeeed13b  6240eed6  cache       1        run      running  07/25/17 18:37:14 UTC\n0ee7800c  6240eed6  cache       0        run      running  07/25/17 18:37:08 UTC\na714a926  6240eed6  cache       0        run      running  07/25/17 18:37:08 UTC\ncee52788  6240eed6  web         0        run      running  07/25/17 18:37:08 UTC\nee8f972e  6240eed6  web         0        run      running  07/25/17 18:37:08 UTC\n\n# Promote only the cache canaries\n$ nomad deployment promote -group cache a6b87a6c\n==> Monitoring evaluation \"37383564\"\n    Evaluation triggered by job \"example\"\n    Evaluation within deployment: \"a6b87a6c\"\n    Allocation \"bbddf5c3\" created: node \"6240eed6\", group \"cache\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"37383564\" finished with status \"complete\"\n\n# Inspect the status and see that only the cache canaries are promoted\n$ nomad status example\nID            = example\nName          = example\nSubmit Date   = 07/25/17 18:37:14 UTC\nType          = service\nPriority      = 50\nDatacenters   = dc1\nStatus        = running\nPeriodic      = false\nParameterized = false\n\nSummary\nTask Group  Queued  Starting  Running  Failed  Complete  Lost\ncache       0       0         2        0       2         0\nweb         0       0         3        0       0         0\n\nLatest Deployment\nID          = a6b87a6c\nStatus      = running\nDescription = Deployment is running but requires manual promotion\n\nDeployed\nTask Group  Promoted  Desired  Canaries  Placed  Healthy  Unhealthy\nweb         false     2        1         1       1        0\ncache       true      2        1         2       2        0\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status    Created At\nbbddf5c3  6240eed6  cache       1        run      running   07/25/17 18:37:40 UTC\neeeed13b  6240eed6  cache       1        run      running   07/25/17 18:37:14 UTC\n3071ab8f  6240eed6  web         1        run      running   07/25/17 18:37:14 UTC\na714a926  6240eed6  cache       0        stop     complete  07/25/17 18:37:08 UTC\ncee52788  6240eed6  web         0        run      running   07/25/17 18:37:08 UTC\nee8f972e  6240eed6  web         0        run      running   07/25/17 18:37:08 UTC\n0ee7800c  6240eed6  cache       0        stop     complete  07/25/17 18:37:08 UTC\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Operator Command Usage\nDESCRIPTION: The basic syntax for using the nomad operator command with subcommands and options. This command should be used with caution as it can affect cluster operations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnomad operator <subcommand> <subcommand> [options]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ceil Function Usage in Nomad Shell\nDESCRIPTION: This snippet shows two examples of using the ceil function. It demonstrates how the function handles whole numbers and fractions, returning the closest whole number greater than or equal to the input.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/numeric/ceil.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> ceil(5)\n5\n> ceil(5.1)\n6\n```\n\n----------------------------------------\n\nTITLE: Register Host Volume Response\nDESCRIPTION: JSON response showing the registered volume details including allocated resources, capacity, and status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Volume\": {\n    \"Allocations\": [],\n    \"CapacityBytes\": 21474836480,\n    \"Constraints\": [\n      {\n        \"LTarget\": \"${attr.kernel.name}\",\n        \"RTarget\": \"linux\",\n        \"Operand\": \"=\"\n      }\n    ],\n    \"CreateIndex\": 11,\n    \"CreateTime\": 1736191993011594200,\n    \"ID\": \"c0f7ee7d-5cc6-92fd-f2b5-14b79f01979f\",\n    \"ModifyIndex\": 31,\n    \"ModifyTime\": 1736191993721594200,\n    \"Name\": \"example\",\n    \"Namespace\": \"default\",\n    \"NodeID\": \"45460554-cc67-11ef-84b7-33d383a55487\",\n    \"NodePool\": \"prod\",\n    \"Parameters\": {\n      \"foo\": \"bar\"\n    },\n    \"PluginID\": \"mkdir\",\n    \"RequestedCapabilities\": [\n      {\n        \"AccessMode\": \"single-node-writer\",\n        \"AttachmentMode\": \"file-system\"\n      },\n      {\n        \"AccessMode\": \"single-node-writer\",\n        \"AttachmentMode\": \"block-device\"\n      }\n    ],\n    \"RequestedCapacityMaxBytes\": 21474836480,\n    \"RequestedCapacityMinBytes\": 10737418240,\n    \"State\": \"ready\"\n  },\n  \"Warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Scaling Policies - Shell Request\nDESCRIPTION: Basic HTTP GET request to list all scaling policies\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/scaling-policies.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/scaling/policies\n```\n\n----------------------------------------\n\nTITLE: Using -json Flag with nomad quota inspect\nDESCRIPTION: Example showing the use of the '-json' flag to get quota specifications in JSON format, which focuses on the quota specs without the usage information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/quota/inspect.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad quota inspect -json default-quota\n{\n    \"CreateIndex\": 11,\n    \"Description\": \"Limit the shared default namespace\",\n    \"Limits\": [\n        {\n            \"Hash\": \"p7s7A+4mFt+M41NS3nB3APheQS9YaePLguvnNn/c1t4=\",\n            \"Region\": \"global\",\n            \"RegionLimit\": {\n                \"CPU\": 1000,\n                \"Cores\": 1,\n                \"Devices\": null,\n                \"DiskMB\": 0,\n                \"IOPS\": 0,\n                \"MemoryMB\": 1000,\n                \"MemoryMaxMB\": 0,\n                \"NUMA\": null,\n                \"Networks\": null\n            },\n            \"VariablesLimit\": 0\n        }\n    ],\n    \"ModifyIndex\": 11,\n    \"Name\": \"default-quota\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stat File API Request\nDESCRIPTION: Example request to get file statistics for a specific file in an allocation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api \\\n    /v1/client/fs/stat/5fc98185-17ff-26bc-a802-0c74fa471c99\n```\n\n----------------------------------------\n\nTITLE: Planning job update causing rolling update\nDESCRIPTION: Example of planning an update to an existing job that would cause a rolling update.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/plan.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job plan example.nomad.hcl\n+/- Job: \"example\"\n+/- Task Group: \"cache\" (3 create/destroy update)\n  +/- Task: \"redis\" (forces create/destroy update)\n    +/- Config {\n      +/- image:           \"redis:2.8\" => \"redis:7\"\n          port_map[0][db]: \"6379\"\n    }\n\nScheduler dry-run:\n- All tasks successfully allocated.\n- Rolling update, next evaluation will be in 10s.\n\nJob Modify Index: 7\nTo submit the job with version verification run:\n\nnomad job run -check-index 7 example.nomad.hcl\n\nWhen running the job with the check-index flag, the job will only be run if the\njob modify index given matches the server-side version. If the index has\nchanged, another user has modified the job and the plan's results are\npotentially invalid.\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Operator Gossip Keyring Use Command\nDESCRIPTION: This snippet shows the basic usage syntax for the 'nomad operator gossip keyring use' command. It requires specifying options and the new encryption key as arguments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/gossip/keyring-use.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator gossip keyring use [options] <key>\n```\n\n----------------------------------------\n\nTITLE: Variables List Response\nDESCRIPTION: Sample JSON response when listing variables showing metadata like namespace, path and modification details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/variables/variables.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Namespace\": \"prod\",\n    \"Path\": \"example/first\",\n    \"CreateIndex\": 1457,\n    \"ModifyIndex\": 1457,\n    \"CreateTime\": 1662061225600373000,\n    \"ModifyTime\": 1662061225600373000\n  },\n  {\n    \"Namespace\": \"prod\",\n    \"Path\": \"example/second\",\n    \"CreateIndex\": 800,\n    \"ModifyIndex\": 1000,\n    \"CreateTime\": 1662061717905426000,\n    \"ModifyTime\": 1662062162982630000\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Job Scale Command Syntax\nDESCRIPTION: Shows the basic command syntax for scaling Nomad jobs, including required arguments for job ID, group name, and desired count.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/scale.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad job scale [options] <job> <group> <count>\n```\n\n----------------------------------------\n\nTITLE: Installing Nomad CLI Autocomplete\nDESCRIPTION: This command installs autocomplete functionality for the Nomad CLI. It enhances the user experience by providing command suggestions as you type.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad -autocomplete-install\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Eval Status Usage\nDESCRIPTION: Shows the basic command syntax for checking evaluation status in Nomad. Requires an evaluation ID or prefix as input.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/eval/status.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad eval status [options] <evaluation>\n```\n\n----------------------------------------\n\nTITLE: Retrieving JSON Specification for Existing Jobs\nDESCRIPTION: The nomad job inspect command retrieves the JSON specification for a job that already exists in the Nomad cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/json-jobs.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad job inspect example\n```\n\n----------------------------------------\n\nTITLE: Accessing Hyphenated Secret Names from Vault KV API v2 (HCL)\nDESCRIPTION: Shows how to access Vault secrets with hyphenated names from KV API v2 using index notation with the nested data structure specific to v2.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/template.mdx#2025-04-19_snippet_23\n\nLANGUAGE: hcl\nCODE:\n```\n  template {\n    data = <<EOF\n      DB_PASSWORD = \"{{with secret \"secret/data/app\"}}{{index .Data.data \"db-password\"}}{{end}}\"\n    EOF\n  }\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Fields with Sentinel in Nomad\nDESCRIPTION: Examples of how to access Node fields using Sentinel syntax. The examples show how to access the node class and metadata properties of a node object.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/enterprise/sentinel.mdx#2025-04-19_snippet_3\n\nLANGUAGE: sentinel\nCODE:\n```\nnode.class\nnode.meta[\"foo\"]\n```\n\n----------------------------------------\n\nTITLE: Using S3-specific Syntax for Region Override in Nomad Artifacts\nDESCRIPTION: Shows how to use S3-specific syntax to override automatic region detection when downloading artifacts from S3 buckets.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/json-jobs.mdx#2025-04-19_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Artifacts\": [\n    {\n      \"GetterSource\": \"s3::https://my-bucket-example.s3-eu-west-1.amazonaws.com/my_app.tar.gz\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Nomad ACL Token - Example\nDESCRIPTION: Demonstrates deleting a specific ACL token using its AccessorID with command output showing successful deletion.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/token/delete.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl token delete d532c40a-30f1-695c-19e5-c35b882b0efd\n\nToken d532c40a-30f1-695c-19e5-c35b882b0efd successfully deleted\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for ACL Policy Read in Nomad\nDESCRIPTION: This JSON snippet shows the expected response format when reading a specific ACL policy. It includes the policy name, rules, description, creation index, and modification index.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/policies.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Name\": \"foo\",\n  \"Rules\": \"\",\n  \"Description\": \"\",\n  \"CreateIndex\": 12,\n  \"ModifyIndex\": 13\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating URL Encoding with urlencode Function in Nomad\nDESCRIPTION: These examples show how the urlencode function is used to encode various strings, including spaces, non-ASCII characters, and its application in constructing a URL query string.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/encoding/urlencode.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> urlencode(\"Hello World\")\nHello%20World\n> urlencode(\"☃\")\n%E2%98%83\n> \"http://example.com/search?q=${urlencode(\"nomad urlencode\")}\"\nhttp://example.com/search?q=nomad%20urlencode\n```\n\n----------------------------------------\n\nTITLE: Using nomad acl binding-rule info Command in Nomad\nDESCRIPTION: This command is used to fetch information about an existing ACL Binding Rule. It requires the binding rule's ID as an argument and can be used with options like -json for JSON output or -t for custom Go template formatting.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/binding-rule/info.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl binding-rule info [options] <binding-rule_id>\n```\n\n----------------------------------------\n\nTITLE: Rescheduling Allocations in Nomad Job\nDESCRIPTION: This example demonstrates how to reschedule allocations instead of restarting them in-place. It uses the '-reschedule' flag along with the '-group' flag to target the 'web' group in the 'example' job, resulting in the allocations being rescheduled rather than restarted.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/restart.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n❯ nomad job restart -group=web -reschedule example\n==> 2023-02-28T17:39:14-05:00: Restarting 2 allocations\n    2023-02-28T17:39:14-05:00: Rescheduling allocation \"388129e0\" for group \"web\"\n    2023-02-28T17:39:45-05:00: Rescheduling allocation \"d4303a30\" for group \"web\"\n==> 2023-02-28T17:40:16-05:00: Finished job restart\n\nAll allocations restarted successfully!\n```\n\n----------------------------------------\n\nTITLE: Using the convert function in HCL for type conversions\nDESCRIPTION: This example demonstrates multiple use cases of the convert function to transform values between strings, numbers, booleans, lists, sets, and maps. It shows basic type conversions as well as converting collection types.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/conversion/convert.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> convert(3, string)\n\"3\"\n> convert(\"3\", number)\n3\n> convert(\"false\", bool)\nfalse\n> convert(false, string)\n\"false\"\n> convert([\"a\", \"b\", 3], list(string))\n[\n  \"a\",\n  \"b\",\n  \"3\",\n]\n> convert([\"c\", \"b\", \"b\"], set(string))\n[\n  \"b\",\n  \"c\",\n]\n> convert({\"a\" = \"foo\", \"b\" = true}, map(string))\n{\n  \"a\" = \"foo\"\n  \"b\" = \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Nomad Allocation Restart with Task Option\nDESCRIPTION: Shows how to restart a specific task using the -task flag option instead of a command argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/restart.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc restart -task redis eb17e557\n```\n\n----------------------------------------\n\nTITLE: Example ACL Token List Output\nDESCRIPTION: Example output showing how the ACL token list command displays token information including name, type, global status, accessor ID, and expiration status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/token/list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl token list\nName               Type        Global  Accessor ID                           Expired\nBootstrap Token    management  true    9c2d1b3a-cbc3-d9a0-3df9-5a382545a819  false\nexample-acl-token  client      false   ef851ca0-b331-da5d-bbeb-7ede8f7c9151  false\n```\n\n----------------------------------------\n\nTITLE: Filtering Nodes by Datacenter\nDESCRIPTION: Example demonstrating how to filter nodes in a pool using an expression to show only nodes in a specific datacenter.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/nodes.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node pool nodes -filter='Datacenter == \"dc2\"' prod\nID        DC   Name      Class   Drain  Eligibility  Status\n31c5347f  dc2  client-3  <none>  false  eligible     ready\n6e98e378  dc2  client-2  <none>  false  eligible     ready\n```\n\n----------------------------------------\n\nTITLE: Index Function Syntax - HCL\nDESCRIPTION: Basic syntax for the index function that retrieves elements from lists or maps using an index or key value.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/index-fn.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nindex(list, value)\n```\n\n----------------------------------------\n\nTITLE: Querying Node Pool Jobs - Basic Request\nDESCRIPTION: Basic shell command to query jobs in a production engineering node pool using the Nomad operator API.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/node-pools.mdx#2025-04-19_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api /v1/node/pool/prod-eng/jobs\n```\n\n----------------------------------------\n\nTITLE: Limiting PIDs for Podman Container\nDESCRIPTION: Sets a limit on the number of processes that can be created inside the container.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_25\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  pids_limit = 64\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Example Volume Specification with Nomad\nDESCRIPTION: An example of using the `nomad volume init` command in a shell session. It demonstrates the command execution and the resulting output.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/init.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume init\nExample volume specification written to volume.hcl\n```\n\n----------------------------------------\n\nTITLE: Configuring App-Sizing-Percentile Strategy in Nomad Policy HCL\nDESCRIPTION: This snippet demonstrates how to configure the app-sizing-percentile strategy in a Nomad policy check. It specifies the percentile value to use for the strategy calculation, which defaults to 99 if not explicitly set.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/strategy/app-sizing-percentile.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ncheck \"p95\" {\n  strategy \"app-sizing-percentile\" {\n    percentile = \"95\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Gateway Task in Nomad Connect\nDESCRIPTION: Demonstrates how to configure a custom task for the gateway using the sidecar_task block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/gateway.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nconnect {\n  gateway {\n    # ...\n  }\n\n  sidecar_task {\n    # see /docs/job-specification/sidecar_task for more details\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Prometheus Metrics in Nomad Podman Setup (Shell)\nDESCRIPTION: Uses curl to verify that the Nomad job is working correctly by fetching Prometheus metrics from the specified endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\n$ curl http://your-machine:7777/metrics\n```\n\n----------------------------------------\n\nTITLE: Stop Allocation Request - Shell\nDESCRIPTION: Sample request to stop a specific allocation using cURL\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/allocations.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -X POST \\\n    https://localhost:4646/v1/allocation/5456bd7a-9fc0-c0dd-6131-cbee77f57577/stop\n```\n\n----------------------------------------\n\nTITLE: Basic Evaluation Status Flow Diagram in Mermaid\nDESCRIPTION: A flowchart showing the transitions between different evaluation statuses (pending, blocked, complete, failed, canceled) in Nomad. It illustrates how evaluation statuses change and when new evaluations are created with specific trigger types.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/architecture-eval-states.md#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\n    event((Cluster\\nEvent))\n\n    pending([pending])\n    blocked([blocked])\n    complete([complete])\n    failed([failed])\n    canceled([canceled])\n\n    %% style classes\n    classDef status fill:#d5f6ea,stroke-width:4px,stroke:#1d9467\n    classDef other fill:#d5f6ea,stroke:#1d9467\n    class event other;\n    class pending,blocked,complete,failed,canceled status;\n\n    event -. \"job-register\n      job-deregister\n      periodic-job\n      node-update\n      node-drain\n      alloc-stop\n      scheduled\n      alloc-failure\n      job-scaling\" .-> pending\n\n    pending -. \"new eval\\n(rolling-update)\" .-> pending\n    pending -. \"new eval\\n(preemption)\" .-> pending\n\n    pending -. \"new eval\\n(max-plan-attempts)\" .-> blocked\n    pending -- if plan submitted --> complete\n    pending -- if invalid --> failed\n    pending -- if no-op --> canceled\n\n    failed -- if retried --> blocked\n    failed -- if retried --> complete\n\n    blocked -- if no-op --> canceled\n    blocked -- if plan submitted --> complete\n\n    complete -. \"new eval\\n(deployment-watcher)\" .-> pending\n    complete -. \"new eval\\n(queued-allocs)\" .-> blocked\n```\n\n----------------------------------------\n\nTITLE: Starting Nomad Agent with Plugin Directory\nDESCRIPTION: Command to start the Nomad agent in development mode with a specified plugin directory for the Lightrun driver.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/lightrun.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo nomad agent -dev -bind 0.0.0.0 -log-level DEBUG -plugin-dir=<path_to_plugins_directory>\n```\n\n----------------------------------------\n\nTITLE: Starting Consul Agent with External Binding for Docker Desktop Compatibility\nDESCRIPTION: Command to start a Consul agent in development mode, configured to be accessible from Docker containers by binding to a specific IP address. This allows services running in Docker to register with and use Consul.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/faq.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nconsul agent -dev -client=0.0.0.0 -bind=192.168.0.10\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Join with go-netaddrs in HCL\nDESCRIPTION: Example configuration showing how to use go-netaddrs with the Hetzner Cloud CLI (hcloud) to discover server IP addresses. The configuration uses retry_join with an executable command that filters and formats server IP addresses.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/server_join.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nserver_join {\n  retry_join = [ \"exec=hcloud server list -o noheader -o columns=ipv4 -l nomad-server=true | tr '\\n' ' '\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Nomad Job Tag Unset Example\nDESCRIPTION: Example demonstrating how to remove a specific tag from a job.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/tag.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad job tag unset -name \"golden-version\" hello-world\n```\n\n----------------------------------------\n\nTITLE: Response from Updating ACL Auth Method in Nomad\nDESCRIPTION: JSON response after successfully updating an ACL auth method, showing the updated configuration with the changes to TokenLocality and Default status, along with updated metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/auth-methods.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"MaxTokenTTL\": \"1h0m0s\",\n    \"Name\": \"example-acl-auth-method\",\n    \"Type\": \"OIDC\",\n    \"TokenLocality\": \"global\",\n    \"TokenNameFormat\": \"${auth_method_type}-${value.user}\",\n    \"Default\": true,\n    \"Config\": {\n        \"OIDCDiscoveryURL\": \"https://my-corp-app-name.auth0.com/\",\n        \"OIDCClientID\": \"V1RPi2MYptMV1RPi2MYptMV1RPi2MYpt\",\n        \"OIDCClientSecret\": \"redacted\",\n        \"OIDCScopes\": [\n          \"groups\"\n        ],\n        \"BoundAudiences\": [\n          \"V1RPi2MYptMV1RPi2MYptMV1RPi2MYpt\"\n        ],\n        \"AllowedRedirectURIs\": [\n          \"http://localhost:4646/oidc/callback\"\n        ],\n        \"ClaimMappings\": {\n          \"http://example.com/first_name\": \"first_name\",\n          \"http://example.com/last_name\": \"last_name\"\n        },\n        \"ListClaimMappings\": {\n          \"http://nomad.com/groups\": \"groups\"\n        }\n    },\n    \"CreateTime\": \"2022-12-08T11:04:43.46206Z\",\n    \"ModifyTime\": \"2022-12-08T11:04:43.46206Z\",\n    \"CreateIndex\": 12,\n    \"ModifyIndex\": 32\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an EXT4 Filesystem Host Volume Plugin in Bash\nDESCRIPTION: A more complex bash plugin that creates an ext4 filesystem, mounts it as a loopback device, and manages its lifecycle. This plugin supports capacity constraints and handles mount/unmount operations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/plugins/storage/host-volumes.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\nset -euo pipefail\n\nversion='0.0.1'\n\nstderr() {\n  1>&2 echo \"$@\"\n}\n\nget_path() {\n  if [ -z \"$DHV_VOLUMES_DIR\" ]; then\n    stderr \"DHV_VOLUMES_DIR must not be empty\"\n    exit 1\n  fi\n  if [ -z \"$DHV_VOLUME_ID\" ]; then\n    stderr \"DHV_VOLUME_ID must not be empty\"\n    exit 1\n  fi\n  echo \"$DHV_VOLUMES_DIR/$DHV_VOLUME_ID\"\n}\n\nis_mounted() {\n  mount | grep -q \" $1 \"\n}\n\ncreate_volume() {\n    local path=\"$1\"\n    local bytes=\"$2\"\n\n    # translate to mb for dd block size\n    local megs=$((bytes / 1024 / 1024)) # lazy, approximate\n    if [ $megs -le 0 ]; then\n      stderr \"minimum capacity must be greater than zero.\"\n      exit 2\n    fi\n\n    mkdir -p \"$path\"\n    # the if statements ensure idempotency\n    if [ ! -f \"$path.ext4\" ]; then\n      # dd only writes to stderr, so safe to run without redirection\n      dd if=/dev/zero of=\"$path.ext4\" bs=1M count=\"$megs\"\n      # mkfs includes stdout, so we need to redirect that to stderr\n      mkfs.ext4 \"$path.ext4\" 1>&2\n    fi\n    if ! is_mounted \"$path\"; then\n      mount \"$path.ext4\" \"$path\"\n    fi\n}\n\ndelete_volume() {\n  local path=\"$1\"\n  is_mounted \"$path\" && umount \"$path\"\n  rm -rf \"$path\"\n  rm -f \"$path.ext4\"\n}\n\ncase \"$1\" in\n  \"fingerprint\")\n    printf '{\"version\": \"%s\"}' \"$version\"\n    ;;\n  \"create\")\n    path=\"$(get_path)\"\n    stderr \"creating volume at $path\"\n    create_volume \"$path\" \"$DHV_CAPACITY_MIN_BYTES\"\n    # output what Nomad expects\n    bytes=\"$(stat --format='%s' \"$path.ext4\")\"\n    printf '{\"path\": \"%s\", \"bytes\": %s}' \"$path\" \"$bytes\"\n    ;;\n  \"delete\")\n    path=\"$(get_path)\"\n    stderr \"deleting volume at $path\"\n    delete_volume \"$path\" ;;\n  *)\n    echo \"unknown operation: $1\"\n    exit 1 ;;\nesac\n```\n\n----------------------------------------\n\nTITLE: Example Execution of Nomad Quota Init Command\nDESCRIPTION: An example of executing the nomad quota init command and its output message indicating that an example specification has been written to spec.hcl.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/quota/init.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad quota init\nExample quota specification written to spec.hcl\n```\n\n----------------------------------------\n\nTITLE: Nomad Eval Status with Placement Failures Example\nDESCRIPTION: Demonstrates checking the status of an evaluation that has placement failures, showing filtered nodes and constraints that prevented successful placement.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/eval/status.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad eval status 2ae0e6a5\nID                 = 2ae0e6a5\nStatus             = complete\nStatus Description = complete\nType               = service\nTriggeredBy        = job-register\nJob ID             = example\nNamespace          = default\nPriority           = 50\nPlacement Failures = true\n\n==> Failed Placements\nTask Group \"cache\" (failed to place 1 allocation):\n  * Class \"foo\" filtered 1 nodes\n  * Constraint \"${attr.kernel.name} = windows\" filtered 1 nodes\n\n\nEvaluation \"67493a64\" waiting for additional capacity to place remainder\n```\n\n----------------------------------------\n\nTITLE: Using -t Flag with nomad quota inspect for Go Template Formatting\nDESCRIPTION: Example demonstrating the use of the '-t' flag to format and display quota specifications using a Go template, extracting just the description field.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/quota/inspect.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad quota inspect -t '{{ .Description }}' default-quota\nLimit the shared default namespace\n```\n\n----------------------------------------\n\nTITLE: Advanced cidrsubnets Usage with For Expressions\nDESCRIPTION: Demonstrates how to use nested cidrsubnets calls with for expressions to create hierarchical network address allocations. This example generates groups of network address blocks from a large CIDR range.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/ipnet/cidrsubnets.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n> [for cidr_block in cidrsubnets(\"10.0.0.0/8\", 8, 8, 8, 8) : cidrsubnets(cidr_block, 4, 4)]\n[\n  [\n    \"10.0.0.0/20\",\n    \"10.0.16.0/20\",\n  ],\n  [\n    \"10.1.0.0/20\",\n    \"10.1.16.0/20\",\n  ],\n  [\n    \"10.2.0.0/20\",\n    \"10.2.16.0/20\",\n  ],\n  [\n    \"10.3.0.0/20\",\n    \"10.3.16.0/20\",\n  ],\n]\n```\n\n----------------------------------------\n\nTITLE: Basic check_restart Configuration\nDESCRIPTION: Simple example showing the grace period configuration in a check_restart block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/check_restart.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ncheck_restart {\n  # ...\n  grace = \"90s\"\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Scaling Policy Detail Response\nDESCRIPTION: Sample JSON response showing detailed configuration of a specific horizontal scaling policy\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/scaling-policies.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CreateIndex\": 10,\n  \"Enabled\": true,\n  \"ID\": \"5e9f9ef2-5223-6d35-bac1-be0f3cb974ad\",\n  \"Type\": \"horizontal\",\n  \"Max\": 10,\n  \"Min\": 0,\n  \"ModifyIndex\": 10,\n  \"Policy\": {\n    \"engage\": true,\n    \"foo\": \"bar\",\n    \"howdy\": \"doody\",\n    \"value\": 6.0\n  },\n  \"Target\": {\n    \"Group\": \"cache\",\n    \"Job\": \"example\",\n    \"Namespace\": \"default\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Prefix Search Request Payload - All Contexts\nDESCRIPTION: JSON payload for searching across all contexts with a prefix\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/search.mdx#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Prefix\": \"abc\",\n  \"Context\": \"all\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nomad ACL Token with Policy and Role\nDESCRIPTION: Example demonstrating how to create an ACL token with a specified name, linked to an ACL policy and role. Shows the complete output including Accessor ID, Secret ID, and other token details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/token/create.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl token create -name=\"example-acl-token\" -policy=example-acl-policy -role-name=example-acl-role\nAccessor ID  = ef851ca0-b331-da5d-bbeb-7ede8f7c9151\nSecret ID    = 11d5348a-8768-5baa-6185-c154980e1488\nName         = example-acl-token\nType         = client\nGlobal       = false\nCreate Time  = 2022-08-23 12:16:09.680699039 +0000 UTC\nExpiry Time  = <none>\nCreate Index = 140\nModify Index = 140\nPolicies     = [example-acl-policy]\n\nRoles\nID                                    Name\n2fe0c403-4502-e99d-4c79-a2821355e66d  example-acl-policy\n```\n\n----------------------------------------\n\nTITLE: Using the 'nomad volume snapshot list' Command Syntax\nDESCRIPTION: The basic syntax for the 'nomad volume snapshot list' command, which requires options like plugin ID and can accept secrets.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/snapshot-list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad volume snapshot list [-plugin plugin_id -secrets key=value]\n```\n\n----------------------------------------\n\nTITLE: Displaying File Stats with nomad alloc fs\nDESCRIPTION: Example of using nomad alloc fs with the -stat option to show file information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/fs.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc fs -stat eb17e557 redis/local/redis.stdout\nMode        Size  Modified Time        Name\n-rw-rw-rw-  17    28 Jan 16 05:39 UTC  redis.stdout\n```\n\n----------------------------------------\n\nTITLE: Updating ACL Token Request\nDESCRIPTION: POST request to update an existing ACL token by its accessor ID. Note that a token cannot be switched from global to local or vice versa.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://localhost:4646/v1/acl/token/aa534e09-6a07-0a45-2295-a7f77063d429\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad Alloc Command\nDESCRIPTION: The basic usage syntax for the `nomad alloc` command. It shows how to invoke subcommands and access help for each subcommand.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnomad alloc <subcommand> [options]\n```\n\nLANGUAGE: shell\nCODE:\n```\nnomad alloc <subcommand> -h\n```\n\n----------------------------------------\n\nTITLE: Installing Nomad on Linux\nDESCRIPTION: This snippet downloads and installs the Nomad binary on a Linux system. It fetches a specific version (0.12.4) of Nomad, unzips it, moves it to the /usr/local/bin directory, and verifies the installation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncurl \"https://releases.hashicorp.com/nomad/0.12.4/nomad_0.12.4_linux_amd64.zip\" -o nomad.zip\nunzip nomad.zip\nsudo mv nomad /usr/local/bin\nnomad --version\n```\n\n----------------------------------------\n\nTITLE: Applying an ACL Policy to All Tasks in a Group using CLI\nDESCRIPTION: Command to apply an ACL policy to all tasks within a group. This associates the policy with the workload identities of all tasks in the cache group of the example job.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/workload-identity.mdx#2025-04-19_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\nnomad acl policy apply \\\n   -namespace default -job example -group cache \\\n   redis-policy ./policy.hcl\n```\n\n----------------------------------------\n\nTITLE: Listing Volume Claims for a Specific Job in Nomad\nDESCRIPTION: Example showing how to list all task group host volume claims associated with a particular job ID using the '-job' flag.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/claim-list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume claim list -job=example\nID        Namespace  Job ID   Volume ID  Volume Name\n81b43af2  default    example  18377894   sticky-volume\n7ce38017  default    example  c3c27514   example-volume\n```\n\n----------------------------------------\n\nTITLE: Streaming JSON-formatted logs\nDESCRIPTION: Example of using nomad monitor to stream debug-level logs in JSON format. This demonstrates how to use the -json flag for structured log output.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/monitor.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad monitor -log-level=DEBUG -json=true\n{\"@level\":\"debug\",\"@message\":\"request complete\"...}\n```\n\n----------------------------------------\n\nTITLE: Configuring DataDog Integration in Nomad Autoscaler\nDESCRIPTION: Configuration block for forwarding metrics to a DataDog statsd server with global tags. This enables integration with DataDog for metrics collection and tagging.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/agent/telemetry.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ntelemetry {\n  dogstatsd_address = \"dogstatsd.company.local:8125\"\n  dogstatsd_tags    = [\"my_tag_name:my_tag_value\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Metrics API\nDESCRIPTION: A sample JSON response from the Nomad metrics API showing the structure with Counters, Gauges, and Samples. Each section contains metrics with their respective values, labels, and statistical information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/metrics.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Counters\": [\n    {\n      \"Count\": 11,\n      \"Labels\": {},\n      \"Max\": 1.0,\n      \"Mean\": 1.0,\n      \"Min\": 1.0,\n      \"Name\": \"nomad.nomad.rpc.query\",\n      \"Stddev\": 0.0,\n      \"Sum\": 11.0\n    }\n  ],\n  \"Gauges\": [\n    {\n      \"Labels\": {\n        \"node_id\": \"cd7c3e0c-0174-29dd-17ba-ea4609e0fd1f\",\n        \"datacenter\": \"dc1\"\n      },\n      \"Name\": \"nomad.client.allocations.blocked\",\n      \"Value\": 0.0\n    },\n    {\n      \"Labels\": {\n        \"datacenter\": \"dc1\",\n        \"node_id\": \"cd7c3e0c-0174-29dd-17ba-ea4609e0fd1f\"\n      },\n      \"Name\": \"nomad.client.allocations.migrating\",\n      \"Value\": 0.0\n    }\n  ],\n  \"Samples\": [\n    {\n      \"Count\": 20,\n      \"Labels\": {},\n      \"Max\": 0.03544100001454353,\n      \"Mean\": 0.023678050097078084,\n      \"Min\": 0.00956599973142147,\n      \"Name\": \"nomad.memberlist.gossip\",\n      \"Stddev\": 0.005445327799243976,\n      \"Sum\": 0.4735610019415617\n    },\n    {\n      \"Count\": 1,\n      \"Labels\": {},\n      \"Max\": 0.0964059978723526,\n      \"Mean\": 0.0964059978723526,\n      \"Min\": 0.0964059978723526,\n      \"Name\": \"nomad.nomad.client.update_status\",\n      \"Stddev\": 0.0,\n      \"Sum\": 0.0964059978723526\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Metrics in Prometheus Format with curl\nDESCRIPTION: A shell command demonstrating how to query the Nomad metrics endpoint using curl with the format parameter set to prometheus to retrieve metrics in Prometheus format.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/metrics.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl https://localhost:4646/v1/metrics?format=prometheus\n```\n\n----------------------------------------\n\nTITLE: Updating Nomad Server List\nDESCRIPTION: Example demonstrating how to update the list of servers for a Nomad client node, showing the atomic update of multiple server addresses\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/config.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node config -update-servers server1:4647 server2:4647 server3:4647 server4\n\n```\n\n----------------------------------------\n\nTITLE: Equivalent Curl Command for Nomad API Access\nDESCRIPTION: The equivalent curl command showing how nomad operator api simplifies API access compared to manual curl usage.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/api.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n  --cacert \"$HOME/.nomad/ca.pem\" \\\n  --cert \"$HOME/.nomad/client.pem\" \\\n  --key \"$HOME/.nomad/client-key.pem\" \\\n  --connect-to \"client.global.nomad:4646:remote.client123.internal:4646\" \\\n  -H \"X-Nomad-Token: ${NOMAD_TOKEN}\" \\\n  https://client.global.nomad:4646/v1/jobs\n```\n\n----------------------------------------\n\nTITLE: Accessing Nomad Cluster via SSH in Bash\nDESCRIPTION: This command demonstrates how to SSH into one of the Nomad cluster servers using its public IP address and a private key file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/aws/README.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ssh -i /path/to/private/key ubuntu@PUBLIC_IP\n```\n\n----------------------------------------\n\nTITLE: cURL command for reading an ACL Role by ID in Nomad\nDESCRIPTION: Shell command using cURL to retrieve a specific ACL Role by sending a GET request with the role ID in the URL path.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/roles.mdx#2025-04-19_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Nomad-Token: <NOMAD_TOKEN_SECRET_ID>\" \\\n    https://localhost:4646/v1/acl/role/77c50812-fcdd-701b-9f1a-6cf55387b09d\n```\n\n----------------------------------------\n\nTITLE: Configuring ACL Policy for Enterprise License Reading\nDESCRIPTION: An HCL configuration snippet that provides the necessary operator read permissions for Nomad Autoscaler Enterprise to read the Nomad Enterprise license information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/agent.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\noperator {\n  policy = \"read\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed Value Strategy in Nomad Agent\nDESCRIPTION: This snippet shows how to configure the fixed-value strategy plugin in the Nomad agent configuration. It specifies the driver to be used for the strategy.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/strategy/fixed-value.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstrategy \"fixed-value\" {\n  driver = \"fixed-value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts for Podman Container\nDESCRIPTION: Defines host path to container path bindings with optional mount options. Named volumes are not supported.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_32\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  volumes = [\n    \"/some/host/data:/container/data:ro,noexec\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Quota Specifications in Shell\nDESCRIPTION: HTTP GET request examples for listing all quota specifications, with optional prefix filtering\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/quotas.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/quotas\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/quotas?prefix=sha\n```\n\n----------------------------------------\n\nTITLE: Configuring Sysctl Parameters for Podman Container\nDESCRIPTION: Sets custom sysctl configurations for the container at startup.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_30\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  sysctl = {\n    \"net.core.somaxconn\" = \"16384\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Locking a variable using a specification file\nDESCRIPTION: Example of locking a variable at path 'secret/foo' using a specification file 'spec.nv.json' (created with 'nomad var init'), then executing the 'nomad job run' command while holding the lock.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/lock.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad var lock secret/foo @spec.nv.json `nomad job run webapp.nomad.hcl`\n```\n\n----------------------------------------\n\nTITLE: License Inspection with File Path\nDESCRIPTION: Example of inspecting a license using a direct file path, showing detailed license information including product details, timestamps, and validation status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/license/inspect.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad license inspect /path/to/nomad/license.hclic\nSource: /path/to/nomad/license.hclic\nProduct: nomad\nLicense ID: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\nCustomer ID: bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb\nInstallation ID: *\nIssue Time: 2021-12-01 17:49:23.021041516 +0000 UTC\nStart Time: 2021-12-01 00:00:00 +0000 UTC\nExpiration Time: 2023-12-01 00:00:00 +0000 UTC\nTermination Time: 2024-01-01 00:00:00 +0000 UTC\nBuild Date: 2000-01-01 00:00:00 +0000 UTC\nFlags: {\n   \"modules\": [\n      \"multicluster-and-efficiency\",\n      \"governance-policy\"\n   ]\n}\n\nLicense is valid\n```\n\n----------------------------------------\n\nTITLE: License Inspection with Environment Variable Path\nDESCRIPTION: Example showing how to inspect a license using the NOMAD_LICENSE_PATH environment variable.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/license/inspect.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ export NOMAD_LICENSE_PATH=/path/to/nomad/license.hclic\n$ nomad license inspect\nSource: /path/to/nomad/license.hclic (path from the NOMAD_LICENSE_PATH environment variable)\nProduct: nomad\n.....\nLicense is valid\n```\n\n----------------------------------------\n\nTITLE: Adding Linux Capabilities in Podman Task Configuration\nDESCRIPTION: Specifies additional Linux capabilities to be added to the container using the --cap-add option.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  cap_add = [\n    \"SYS_TIME\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Entrypoint for Podman Container\nDESCRIPTION: Defines the entrypoint for the container, overriding the default entrypoint set in the image.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  entrypoint = \"/entrypoint.sh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Periodic Job Evaluation with Detach Option\nDESCRIPTION: This example shows how to force the evaluation of a job named 'example' using the '-detach' option, which returns immediately without monitoring. It provides an Evaluation ID for further tracking.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/periodic-force.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job periodic force -detach example\nForce periodic successful\nEvaluation ID: 0865fbf3-30de-5f53-0811-821e73e63178\n```\n\n----------------------------------------\n\nTITLE: Nomad License Command Basic Usage\nDESCRIPTION: Basic command syntax for using the nomad license command with subcommands and options. Used to manage Nomad Enterprise licenses.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/license/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnomad license <subcommand> [options]\n```\n\n----------------------------------------\n\nTITLE: Generating Number Sequences with Range Function in HCL\nDESCRIPTION: The range function generates a list of numbers using start, limit, and step values. It can be called with one, two, or three arguments, defaulting start to 0 and step to 1 or -1 depending on the direction.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/range.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nrange(max)\nrange(start, limit)\nrange(start, limit, step)\n```\n\n----------------------------------------\n\nTITLE: Example of pausing a Nomad deployment\nDESCRIPTION: This example demonstrates how to manually pause a deployment using the 'nomad deployment pause' command with a specific deployment ID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/deployment/pause.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad deployment pause 2f14ba55\nDeployment \"2f14ba55-acfb-cb31-821c-facf1b9b0830\" paused\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad Deployment Command\nDESCRIPTION: This snippet shows the basic usage syntax for the `nomad deployment` command. It demonstrates how to run a subcommand and access help for specific subcommands.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/deployment/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnomad deployment <subcommand> [options]\n```\n\nLANGUAGE: shell\nCODE:\n```\nnomad deployment <subcommand> -h\n```\n\n----------------------------------------\n\nTITLE: Register Host Volume Request Payload\nDESCRIPTION: JSON payload for registering a host volume with specifications including name, namespace, plugin ID, capacity requirements, and constraints.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"PolicyOverride\": false,\n  \"Volume\": {\n    \"Name\": \"example\",\n    \"Namespace\": \"default\",\n    \"NodePool\": \"prod\",\n    \"PluginID\": \"mkdir\",\n    \"RequestedCapacityMinBytes\": 10737418240,\n    \"RequestedCapacityMaxBytes\": 21474836480,\n    \"RequestedCapabilities\": [\n      {\n        \"AccessMode\": \"single-node-writer\",\n        \"AttachmentMode\": \"file-system\"\n      },\n      {\n        \"AccessMode\": \"single-node-writer\",\n        \"AttachmentMode\": \"block-device\"\n      }\n    ],\n    \"Constraints\": [\n      {\n        \"LTarget\": \"${attr.kernel.name}\",\n        \"RTarget\": \"linux\",\n        \"Operand\": \"=\"\n      }\n    ],\n    \"Parameters\": {\n      \"foo\": \"bar\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Audit Log in JSON\nDESCRIPTION: Example of an audit log entry showing an error response with permission denied.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/audit.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": \"2020-03-24T13:18:36.121978648-04:00\",\n  \"event_type\": \"audit\",\n  \"payload\": {\n    \"id\": \"21c6f97a-fbfb-1090-1e34-34d1ece57cc2\",\n    \"stage\": \"OperationComplete\",\n    \"type\": \"audit\",\n    \"timestamp\": \"2020-03-24T13:18:36.121428628-04:00\",\n    \"version\": 1,\n    \"auth\": {\n      \"accessor_id\": \"anonymous\",\n      \"name\": \"Anonymous Token\",\n      \"policies\": [\"anonymous\"],\n      \"create_time\": \"0001-01-01T00:00:00Z\"\n    },\n    \"request\": {\n      \"id\": \"c696cc9e-962e-18b3-4097-e0a09070f89e\",\n      \"operation\": \"GET\",\n      \"endpoint\": \"/v1/jobs?prefix=web\",\n      \"namespace\": {\n        \"id\": \"default\"\n      },\n      \"request_meta\": {\n        \"remote_address\": \"127.0.0.1:33874\",\n        \"user_agent\": \"Go-http-client/1.1\"\n      },\n      \"node_meta\": {\n        \"ip\": \"127.0.0.1:4646\"\n      }\n    },\n    \"response\": {\n      \"status_code\": 403,\n      \"error\": \"Permission denied\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Job Services Request in Shell\nDESCRIPTION: cURL command to retrieve all services registered for a specific job.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/job/example/services\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents with nomad alloc fs\nDESCRIPTION: Example of using nomad alloc fs to list the contents of an allocation's root directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/fs.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc fs eb17e557\nMode        Size  Modified Time        Name\ndrwxrwxr-x  4096  28 Jan 16 05:39 UTC  alloc/\ndrwxrwxr-x  4096  28 Jan 16 05:39 UTC  redis/\n-rw-rw-r--  0     28 Jan 16 05:39 UTC  redis_exit_status\n```\n\n----------------------------------------\n\nTITLE: Basic Coalesce Function Usage in Nomad\nDESCRIPTION: Examples demonstrating the basic usage of coalesce function with different argument types including strings and numbers. The function returns the first non-null, non-empty value from the provided arguments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/coalesce.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> coalesce(\"a\", \"b\")\na\n> coalesce(\"\", \"b\")\nb\n> coalesce(1,2)\n1\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Node Config Command Usage\nDESCRIPTION: Shows the basic syntax for using the nomad node config command with options\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/config.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad node config [options]\n```\n\n----------------------------------------\n\nTITLE: Reading a Specific Namespace in Shell\nDESCRIPTION: Makes a GET request to retrieve information about a specific namespace. This example retrieves details about the 'staging' namespace.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/namespaces.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/namespace/staging\n```\n\n----------------------------------------\n\nTITLE: Validating Job with Configuration Warnings\nDESCRIPTION: Example showing validation of a job file that produces warnings due to potentially problematic configuration settings, such as update parallelism exceeding group count.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/validate.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job validate example.nomad.hcl\nJob Warnings:\n1 warning(s):\n\n* Group \"cache\" has warnings: 1 error(s) occurred:\n\n* Update max parallel count is greater than task group count (6 > 3). A destructive change would result in the simultaneous replacement of all allocations.\n\nJob validation successful\n```\n\n----------------------------------------\n\nTITLE: Listing All Nomad Jobs Status\nDESCRIPTION: Example showing how to list all jobs with their basic status information including ID, type, priority and status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/status.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job status\nID       Type     Priority  Status          Submit Date\njob1     service  80        running         07/25/17 15:47:11 UTC\njob2     batch    40        complete        07/24/17 19:22:11 UTC\njob3     service  50        dead (stopped)  07/22/17 16:34:48 UTC\n```\n\n----------------------------------------\n\nTITLE: Interactive Consul Setup Session with Destroy Option\nDESCRIPTION: Example of an interactive session using the nomad setup consul command, demonstrating configuration steps and the use of the -destroy flag to remove configuration components from Consul.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/setup/consul.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad setup consul\n\nThis command will walk you through configuring all the components required for\nNomad workloads to authenticate themselves against Consul ACL using their\nrespective workload identities.\n\nFirst we need to connect to Consul.\n\n[?] Is \"127.0.0.1:8500\" the correct address of your Consul cluster? [Y/n]\n\nSince you're running Consul Enterprise, we will additionally create\na namespace \"nomad-workloads\" and bind the auth methods to that namespace.\n\n[?] Create the namespace \"nomad-workloads\" in your Consul cluster? [Y/n]\n[✔] Created namespace \"nomad-workloads\".\n\nNomad needs a JWT auth method for Consul services and tasks. The method for\nservices will be called \"nomad-workloads\".\n\nThis is the \"nomad-workloads\" method configuration:\n\n{\n    \"Name\": \"nomad-workloads\",\n    \"Type\": \"jwt\",\n    \"DisplayName\": \"nomad-workloads\",\n    \"Description\": \"Login method for Nomad workloads using workload identities\",\n    \"TokenLocality\": \"local\",\n    \"Config\": {\n        \"BoundAudiences\": [\n            \"consul.io\"\n        ],\n        \"ClaimMappings\": {\n            \"consul_namespace\": \"consul_namespace\",\n            \"nomad_job_id\": \"nomad_job_id\",\n            \"nomad_namespace\": \"nomad_namespace\",\n            \"nomad_service\": \"nomad_service\",\n            \"nomad_task\": \"nomad_task\"\n        },\n        \"JWKSURL\": \"http://localhost:4646/.well-known/jwks.json\",\n        \"JWTSupportedAlgs\": [\n            \"RS256\"\n        ]\n    },\n    \"CreateIndex\": 0,\n    \"ModifyIndex\": 0,\n    \"NamespaceRules\": [\n        {\n            \"BindNamespace\": \"${value.consul_namespace}\"\n        }\n    ]\n}\n[?] Create \"nomad-workloads\" auth method in your Consul cluster? [Y/n]\n[✔] Created auth method \"nomad-workloads\".\n\nConsul uses binding rules to map claims between Nomad's JWTs to Consul service\nidentities and ACL roles, so we need to create a two binding rules for the auth\nmethod we created above: one for services, and one for tasks.\n\nThis is the binding rule for services:\n\n{\n    \"ID\": \"\",\n    \"Description\": \"Binding rule for Nomad services authenticated using a workload identity\",\n    \"AuthMethod\": \"nomad-workloads\",\n    \"Selector\": \"\\\"nomad_service\\\" in value\",\n    \"BindType\": \"service\",\n    \"BindName\": \"${value.nomad_service}\",\n    \"CreateIndex\": 0,\n    \"ModifyIndex\": 0\n}\n[?] Create this binding rule in your Consul cluster? [Y/n]\n[✔] Created binding rule for auth method \"nomad-workloads\".\n\nThis is the binding rule for tasks:\n\n{\n    \"ID\": \"\",\n    \"Description\": \"Binding rule for Nomad tasks authenticated using a workload identity\",\n    \"AuthMethod\": \"nomad-workloads\",\n    \"Selector\": \"\\\"nomad_service\\\" not in value\",\n    \"BindType\": \"role\",\n    \"BindName\": \"nomad-${value.nomad_namespace}-tasks\",\n    \"CreateIndex\": 0,\n    \"ModifyIndex\": 0\n}\n[?] Create this binding rule in your Consul cluster? [Y/n] n\n\nBy answering \"no\" to any of these questions, you are risking an incorrect Consul\ncluster configuration. Nomad workloads with Workload Identity will not be able\nto authenticate unless you create missing configuration yourself.\n\n[?] Remove everything this command creates? [Y/n]\nThe following items will be deleted:\n  * Auth method: nomad-workloads\n  * Binding rules: 4d80108a-6d77-36e1-71b1-d20a9acf8b17\n  * Namespace: nomad-workloads\n\n[?] Remove all the items listed above? [Y/n]\n[✔] Deleted binding rule \"4d80108a-6d77-36e1-71b1-d20a9acf8b17\".\n[✔] Deleted auth method \"nomad-workloads\".\n[✔] Deleted namespace \"nomad-workloads\".\n\nConsul cluster has not been configured for authenticating Nomad tasks and\nservices using workload identitiies.\n\nRun the command again to finish the configuration process.\n```\n\n----------------------------------------\n\nTITLE: Viewing Nomad Server Logs During Hard Region Failure\nDESCRIPTION: This log snippet demonstrates the debug and info messages that appear in the logs of functioning Nomad servers when a federated region becomes completely unreachable. It shows failed UDP pings, suspect node failure notifications, and sync attempt messages.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/federation/failure.mdx#2025-04-19_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n[DEBUG] go-hclog@v1.6.3/stdlog.go:58: nomad: memberlist: Failed UDP ping: asia-south-1-server-1.asia-south-1 (timeout reached)\n[INFO]  go-hclog@v1.6.3/stdlog.go:60: nomad: memberlist: Suspect asia-south-1-server-1.asia-south-1 has failed, no acks received\n[DEBUG] go-hclog@v1.6.3/stdlog.go:58: nomad: memberlist: Initiating push/pull sync with: us-east-1-server-1.us-east-1 192.168.1.193:9002\n[DEBUG] go-hclog@v1.6.3/stdlog.go:58: nomad: memberlist: Failed UDP ping: asia-south-1-server-1.asia-south-1 (timeout reached)\n[INFO]  go-hclog@v1.6.3/stdlog.go:60: nomad: memberlist: Suspect asia-south-1-server-1.asia-south-1 has failed, no acks received\n```\n\n----------------------------------------\n\nTITLE: Creating ACL Auth Method in Nomad Using curl\nDESCRIPTION: Shell command for making a POST request to create an ACL auth method. Requires a Nomad token with management permissions and the JSON payload in a file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/auth-methods.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --header \"X-Nomad-Token: <NOMAD_TOKEN_SECRET_ID>\" \\\n    --data @payload.json \\\n    https://localhost:4646/v1/acl/auth-method\n```\n\n----------------------------------------\n\nTITLE: Pausing Deployment Response in JSON\nDESCRIPTION: This snippet shows the expected JSON response after pausing a deployment. It includes the evaluation ID, creation index, deployment modify index, and overall index.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/deployments.mdx#2025-04-19_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EvalID\": \"0d834913-58a0-81ac-6e33-e452d83a0c66\",\n  \"EvalCreateIndex\": 20,\n  \"DeploymentModifyIndex\": 20,\n  \"Index\": 20\n}\n```\n\n----------------------------------------\n\nTITLE: Using nomad operator snapshot inspect command\nDESCRIPTION: This snippet shows the basic usage syntax for the 'nomad operator snapshot inspect' command. It allows users to specify options and the file path for the snapshot to be inspected.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/snapshot/inspect.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator snapshot inspect [options] [file]\n```\n\n----------------------------------------\n\nTITLE: Configuring Fingerprint Allowlist in Nomad Client (HCL)\nDESCRIPTION: Sets up an allowlist for fingerprinters in the Nomad client. This configuration allows only the network fingerprinter to be used.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/client.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  options = {\n    \"fingerprint.allowlist\" = \"network\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CSI Volume using Nomad CLI\nDESCRIPTION: This shell command creates a CSI volume in Nomad using the volume create command and the previously defined HCL configuration file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/csi.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume create volume.hcl\nCreated external volume vol-asdf1234 with ID ebs_prod_db1\n```\n\n----------------------------------------\n\nTITLE: Using nomad tls ca create Command\nDESCRIPTION: This snippet shows the basic usage syntax for the 'nomad tls ca create' command. It can be used with various options to customize the CA creation process.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/tls/ca-create.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad tls ca create [options]\n```\n\n----------------------------------------\n\nTITLE: Updated Volume Expansion Configuration (HCL)\nDESCRIPTION: Modified HCL configuration for volume expansion with increased capacity settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/host.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nid        = \"0c903229-311d-ba8a-f77e-45c31b83fab3\"\nname      = \"database\"\ntype      = \"host\"\nplugin_id = \"external-plugin\"\n\ncapacity_min = \"100GiB\" # double\ncapacity_max = \"100GiB\" # increased to match\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Headers for Artifact Download in Nomad\nDESCRIPTION: This example demonstrates how to set custom HTTP headers when downloading an artifact. Headers can be used for authentication or to provide additional context to the server.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/artifact.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nartifact {\n  source = \"https://example.com/file.txt\"\n\n  headers {\n    User-Agent    = \"nomad-[${NOMAD_JOB_ID}]-[${NOMAD_GROUP_NAME}]-[${NOMAD_TASK_NAME}]\"\n    X-Nomad-Alloc = \"${NOMAD_ALLOC_ID}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a Namespace without Path Parameter in Shell\nDESCRIPTION: Makes a POST request to create or update a namespace without specifying the namespace in the path. The namespace is specified in the request payload.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/namespaces.mdx#2025-04-19_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @namespace.json \\\n    https://localhost:4646/v1/namespace\n```\n\n----------------------------------------\n\nTITLE: Custom Template Node Pool List\nDESCRIPTION: Example of using Go templates to customize the output format of node pool information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/list.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node pool list -t '{{range .}}{{.Name}} [{{.Meta.env}}] - {{.Description}}{{println}}{{end}}'\nall [<no value>] - Node pool with all nodes in the cluster.\ndefault [<no value>] - Default node pool.\ndev [development] - Node pool for dev workloads.\nprod [production] - Node pool for production workloads.\n```\n\n----------------------------------------\n\nTITLE: Using nomad operator scheduler get-config Command\nDESCRIPTION: This snippet demonstrates the basic usage of the 'nomad operator scheduler get-config' command. It shows the command syntax and mentions that ACLs, if enabled, require a token with the 'operator:read' capability.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/scheduler/get-config.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator scheduler get-config [options]\n```\n\n----------------------------------------\n\nTITLE: Generating UUID v4 in Nomad Configuration\nDESCRIPTION: Example of generating a random UUID v4 using the uuidv4() function in Nomad. The function generates a unique identifier string formatted according to RFC 4122 section 4.4, producing a Version 4 UUID based on pseudo-random numbers.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/uuid/uuidv4.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> uuidv4()\nb5ee72a3-54dd-c4b8-551c-4bdc0204cedb\n```\n\n----------------------------------------\n\nTITLE: Verbose Nomad Job Scaling Events Output Example\nDESCRIPTION: Shows the detailed output format when using the -verbose flag, including additional information such as error status, messages, and evaluation IDs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/scaling-events.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job scaling-events -verbose job1\nTask Group  Count   PrevCount  Error  Message                        Eval ID                               Date\ngroup1      8       8          false  submitted using the Nomad CLI  b754d6b3-8960-5652-60d8-d47df6eaed13  2020-10-23T09:06:47+02:00\ngroup1      8       3          false  submitted using the Nomad CLI  529cc88e-8887-725e-2a79-4997f50df153  2020-10-23T09:02:42+02:00\n```\n\n----------------------------------------\n\nTITLE: Demonstrating setunion Function Usage in Shell Session\nDESCRIPTION: This example demonstrates the usage of the setunion function with three input sets. It combines elements from all sets, removing duplicates, and returns a single set with unique elements.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/setunion.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> setunion([\"a\", \"b\"], [\"b\", \"c\"], [\"d\"])\n[\n  \"d\",\n  \"b\",\n  \"c\",\n  \"a\",\n]\n```\n\n----------------------------------------\n\nTITLE: Using Interpolation in Nomad Meta Blocks\nDESCRIPTION: Example showing how to use Nomad interpolation to dynamically populate meta values with node data.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/meta.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmeta {\n  class = \"${node.class}\"\n}\n```\n\n----------------------------------------\n\nTITLE: List All Node Pools Example\nDESCRIPTION: Demonstrates the default output format when listing all node pools.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node pool list\nName     Description\nall      Node pool with all nodes in the cluster.\ndefault  Default node pool.\ndev      Node pool for dev workloads.\nprod     Node pool for production workloads.\n```\n\n----------------------------------------\n\nTITLE: Detached Job Scaling\nDESCRIPTION: Demonstrates scaling a job with the -detach flag to return immediately without monitoring the evaluation process.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/scale.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job scale -detach job1 8\nEvaluation ID: b754d6b3-8960-5652-60d8-d47df6eaed13\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux Options for Podman Container\nDESCRIPTION: Defines a list of SELinux process labels to be used by the container.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_28\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  selinux_opts = [\n    \"type:my_container.process\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Host Info Request - Shell\nDESCRIPTION: GET request to retrieve host environment information for a specific node.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/agent/host?node_id=4bb9aca7-d43b-43fc-d604-3a271ef0a6c0\n```\n\n----------------------------------------\n\nTITLE: Converting Path with abspath Function in Nomad Shell\nDESCRIPTION: Demonstrates using the abspath function to convert a relative path 'nomad.txt' to an absolute path. The function joins the relative path with the job file directory to create a complete filesystem path.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/file/abspath.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> abspath(\"nomad.txt\")\n/home/user/some/nomad-job/nomad.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Rotation in Nomad Tasks\nDESCRIPTION: Sets up log rotation for a task's stdout and stderr with parameters for maximum files and file size. This configuration retains 3 rotated files with a maximum size of 10MB each, requiring a minimum of 60MB disk space for the task.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/json-jobs.mdx#2025-04-19_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"LogConfig\": {\n    \"Disabled\": false,\n    \"MaxFiles\": 3,\n    \"MaxFileSizeMB\": 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Nomad Volume Claim Delete Operation\nDESCRIPTION: Demonstrates a practical example of deleting a volume claim with ID '3f25be9a', showing the interactive confirmation prompt and successful deletion message.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/claim-delete.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume claim delete 3f25be9a\n\n  If you delete a volume claim, the allocation that uses this claim to \"stick\"\n  to a particular volume ID will no longer use it upon its next reschedule or\n  migration. The deployment of the task group the allocation runs will still\n  claim another feasible volume ID during reschedule or replacement.\n\n[?] Are you sure you want to delete task group host volume claim 3f25be9a? [Y/n]\nTask group host volume claim 3f25be9a-a2ee-3d7f-c248-45099fd54939 successfully deleted\n```\n\n----------------------------------------\n\nTITLE: Reserving CPU Cores in Nomad Client Configuration (HCL)\nDESCRIPTION: Specifies a reservation of CPU cores for the Nomad client. This example reserves cores 0 through 4 for Nomad's use.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/client.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  reserved {\n    cores = \"0-4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using nomad node pool jobs command\nDESCRIPTION: This snippet shows the basic usage syntax for the 'nomad node pool jobs' command. It allows listing jobs in a specified node pool with optional parameters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/jobs.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad node pool jobs [options] <node-pool>\n```\n\n----------------------------------------\n\nTITLE: Defining Task Driver Capabilities in Go\nDESCRIPTION: This code snippet defines the Capabilities struct for a Nomad task driver plugin. It specifies various features and isolation modes supported by the driver.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/plugins/task-drivers.mdx#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Capabilities struct {\n    SendSignals bool\n    Exec bool\n    FSIsolation fsisolation.Mode\n    NetIsolationModes []NetIsolationMode\n    MustInitiateNetwork bool\n    MountConfigs MountConfigSupport\n    DisableLogCollection bool\n    DynamicWorkloadUsers bool\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Nomad Cluster with Terraform in Bash\nDESCRIPTION: This sequence of commands initializes Terraform, fetches required modules, creates an execution plan, and applies the configuration to provision the Nomad cluster on AWS.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/aws/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform get\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Access in Podman Task\nDESCRIPTION: Specifies a list of host devices to be made available to the container, with optional permissions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  devices = [\n    \"/dev/net/tun\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping a Job with Detach Option in Nomad\nDESCRIPTION: Illustrates using the '-detach' option to stop a job and return immediately without monitoring the evaluation process.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/stop.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job stop -detach job1\n507d26cb\n```\n\n----------------------------------------\n\nTITLE: Member List Response\nDESCRIPTION: Sample JSON response showing member details including server name, region, DC and member list with status and protocol information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ServerName\": \"bacon-mac\",\n  \"ServerRegion\": \"global\",\n  \"ServerDC\": \"dc1\",\n  \"Members\": [\n    {\n      \"Name\": \"bacon-mac.global\",\n      \"Addr\": \"127.0.0.1\",\n      \"Port\": 4648,\n      \"Tags\": {\n        \"mvn\": \"1\",\n        \"build\": \"0.5.5dev\",\n        \"port\": \"4647\",\n        \"bootstrap\": \"1\",\n        \"role\": \"nomad\",\n        \"region\": \"global\",\n        \"dc\": \"dc1\",\n        \"vsn\": \"1\"\n      },\n      \"Status\": \"alive\",\n      \"ProtocolMin\": 1,\n      \"ProtocolMax\": 5,\n      \"ProtocolCur\": 2,\n      \"DelegateMin\": 2,\n      \"DelegateMax\": 4,\n      \"DelegateCur\": 4\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Nomad License Reporting Logs\nDESCRIPTION: Sample log output showing successful license utilization reporting in Nomad. The logs show the reporting process including payload creation, authentication, and successful delivery to HashiCorp's reporting service.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/enterprise/license/utilization-reporting.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[DEBUG] core.reporting: beginning snapshot export\n[DEBUG] core.reporting: creating payload\n[DEBUG] core.reporting: marshalling payload to json\n[DEBUG] core.reporting: generating authentication headers\n[DEBUG] core.reporting: creating request\n[DEBUG] core.reporting: sending request\n[DEBUG] core.reporting: performing request: method=POST url=https://reporting.hashicorp.services\n[DEBUG] core.reporting: recording audit record\n[INFO]  reporting: Report sent: auditRecord={\"payload\":{\"payload_version\":\"1\",\"license_id\":\"d2cdd857-4202-5a45-70a6-e4b531050c34\",\"product\":\"nomad\",\"product_version\":\"1.6.0\",\"export_timestamp\":\"2023-05-26T20:09:13.753921087Z\",\"snapshots\":[{\"snapshot_version\":1,\"snapshot_id\":\"0001J724F90F4XWQDSAA76ZQWA\",\"process_id\":\"01H1CTJPC1S8H7Q45MKTJ689ZW\",\"timestamp\":\"2023-05-26T20:09:13.753513962Z\",\"schema_version\":\"1.0.0\",\"service\":\"nomad\",\"metrics\":{\"nomad.billable.nodes\":{\"key\":\"nomad.billable.nodes\",\"kind\":\"counter\",\"mode\":\"write\",\"value\":33}}}]}}\n[DEBUG] completed recording audit record\n[DEBUG] core.reporting: export finished successfully\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Namespace Apply Command Usage\nDESCRIPTION: Basic syntax for using the nomad namespace apply command to create or update namespaces.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/namespace/apply.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad namespace apply [options] <input>\n```\n\n----------------------------------------\n\nTITLE: List CSI Snapshots Response Example\nDESCRIPTION: Detailed JSON response showing paginated list of CSI snapshots with metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"NextToken\": \"eyJ2IjoiMiIsImMiOiJLZ\",\n  \"Snapshots\": [\n    {\n      \"CreateTime\": 1227088980,\n      \"ExternalSourceVolumeID\": \"vol-37ac485e\",\n      \"ID\": \"snap-9df717f4\",\n      \"IsReady\": true,\n      \"Parameters\": null,\n      \"PluginID\": \"aws-ebs0\",\n      \"SizeBytes\": 2147483648\n    },\n    {\n      \"CreateTime\": 1227091232,\n      \"ExternalSourceVolumeID\": \"vol-10ac4879\",\n      \"ID\": \"snap-5cf81835\",\n      \"IsReady\": true,\n      \"Parameters\": null,\n      \"PluginID\": \"aws-ebs0\",\n      \"SizeBytes\": 11811160064\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing specific recommendation information in Nomad Enterprise\nDESCRIPTION: Example of viewing detailed information about a recommendation, including ID, namespace, job ID, task information, resource recommendations, and statistical data.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/recommendation/info.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad recommendation info 68236421-c90f-efa6-fc02-37ae2d59bf03\nID         = 68236421-c90f-efa6-fc02-37ae2d59bf03\nNamespace  = default\nJob ID     = example\nTask Group = cache\nTask       = redis\nResource   = CPU\nValue      = 57\nCurrent    = 500\n\nStats\nmax   mean  min   p99\n5.89  1.66  0.44  5.89\n\nMeta\nnomad_policy_id       = e20dc742-dd5d-5419-8add-c5e0233933f5\nnum_evaluated_windows = 2\nwindow_size           = 3e+11\n```\n\n----------------------------------------\n\nTITLE: Sample Job Scale Request in Shell\nDESCRIPTION: cURL command to send a POST request for scaling a job using a payload file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://localhost:4646/v1/job/example/scale\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Namespace Inspect Command\nDESCRIPTION: The basic usage syntax for the `nomad namespace inspect` command. It requires the namespace name as an argument and supports various options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/namespace/inspect.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad namespace inspect [options] <namespace_name>\n```\n\n----------------------------------------\n\nTITLE: List Services Response Format\nDESCRIPTION: Example JSON response showing the format of the services list, including namespace and service details with tags.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/services.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Namespace\": \"default\",\n    \"Services\": [\n      {\n        \"ServiceName\": \"example-cache-redis\",\n        \"Tags\": [\n          \"cache\",\n          \"db\"\n        ]\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Listing services in the default namespace\nDESCRIPTION: Example showing how to list all services in the default namespace, displaying service names and their associated tags.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/service/list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad service list\nService Name         Tags\nexample-cache-redis  [cache,db]\n```\n\n----------------------------------------\n\nTITLE: Customizing Node Pool Info Output with Go Template\nDESCRIPTION: An example of using the '-t' flag to customize the output of the node pool info command using a Go template, allowing for specific formatting of the information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/info.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node pool info -t \"{{.Name}} [{{.Meta.env}}] - {{.Description}}\" prod\nprod [production] - Node pool for production workloads.\n```\n\n----------------------------------------\n\nTITLE: Defining format Function in HCL\nDESCRIPTION: Demonstrates the basic syntax of the format function in HCL. It takes a specification string and a variable number of values to format.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/format.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nformat(spec, values...)\n```\n\n----------------------------------------\n\nTITLE: Planning a new job submission\nDESCRIPTION: Example of planning a new job that has not been previously submitted to the cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/plan.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job plan example.nomad.hcl\n+ Job: \"example\"\n+ Task Group: \"cache\" (1 create)\n  + Task: \"redis\" (forces create)\n\nScheduler dry-run:\n- All tasks successfully allocated.\n\nJob Modify Index: 0\nTo submit the job with version verification run:\n\nnomad job run -check-index 0 example.nomad.hcl\n\nWhen running the job with the check-index flag, the job will only be run if the\njob modify index given matches the server-side version. If the index has\nchanged, another user has modified the job and the plan's results are\npotentially invalid.\n```\n\n----------------------------------------\n\nTITLE: Displaying allocation checks with short ID\nDESCRIPTION: Example of using the nomad alloc checks command with a short allocation ID to display health check status information for an allocation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/checks.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc checks e0fdbd85\n\nStatus of 1 Nomad Service Checks\n\nID         =  9f4e18fd0867cebb19a8fac3d7a1cf27\nName       =  alive\nGroup      =  example.cache[0]\nTask       =  (group)\nService    =  redis-cache\nStatus     =  success\nMode       =  healthiness\nTimestamp  =  2023-03-09T16:10:23+01:00\nOutput     =  nomad: tcp ok\n```\n\n----------------------------------------\n\nTITLE: Formatting quota status with Go template\nDESCRIPTION: This example demonstrates the use of the -t flag to format and display the quota status using a Go template. It extracts and displays only the description of the quota.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/quota/status.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad quota status -t {{ .Description }} default-quota\nLimit the shared default namespace\n```\n\n----------------------------------------\n\nTITLE: Listing Volume Snapshots with Secret Key-Value Pairs\nDESCRIPTION: Example demonstrating how to list volume snapshots with two secret key/value pairs, which are passed to the plugin for authentication or configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/snapshot-list.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume snapshot list -plugin aws-ebs0 -secret key1=value1 -secret key2=val2\nSnapshot ID  External ID  Size   Creation Time         Ready?\nsnap-12345   vol-abcdef   50GiB  2021-01-03T12:15:02Z  true\n```\n\n----------------------------------------\n\nTITLE: Listing Volume Snapshots for a Specific Plugin\nDESCRIPTION: Example showing how to list volume snapshots for a plugin named 'aws-ebs0', displaying snapshot IDs, external IDs, sizes, creation times, and ready status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/snapshot-list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume snapshot list -plugin aws-ebs0\nSnapshot ID  External ID  Size   Creation Time         Ready?\nsnap-12345   vol-abcdef   50GiB  2021-01-03T12:15:02Z  true\nsnap-67890   vol-fedcba   50GiB  2021-01-04T15:45:00Z  true\n```\n\n----------------------------------------\n\nTITLE: Disabling Restart Policy in HCL\nDESCRIPTION: This example demonstrates how to disable the restart policy for a task group by setting attempts to 0 and mode to \"fail\". This prevents any automatic restarts of failed tasks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/restart.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    restart {\n      attempts = 0\n      mode     = \"fail\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSON output with nomad alloc checks\nDESCRIPTION: Example of using the -json flag with the nomad alloc checks command to get health check status information in JSON format.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/checks.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\nnomad alloc checks -json 54fde4f8\n\n{\n    \"9810e90177a4c21ce3bfe04dc7da6131\": {\n        \"Check\": \"alive\",\n        \"Group\": \"example.cache[0]\",\n        \"ID\": \"9810e90177a4c21ce3bfe04dc7da6131\",\n        \"Mode\": \"healthiness\",\n        \"Output\": \"nomad: tcp ok\",\n        \"Service\": \"redis-cache\",\n        \"Status\": \"success\",\n        \"StatusCode\": 0,\n        \"Task\": \"\",\n        \"Timestamp\": 1678444309\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Command Usage Syntax\nDESCRIPTION: Shows the basic command syntax and structure for the snapshot save operation\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/snapshot/save.mdx#2025-04-19_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator snapshot save [options] <file>\n```\n\n----------------------------------------\n\nTITLE: Configuring Journald Logging for Podman Container\nDESCRIPTION: Sets up logging using the journald driver, forwarding container logs to the host's journal system.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_20\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  logging = {\n    driver = \"journald\"\n    options = [\n      {\n        \"tag\" = \"redis\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching ACL Binding Rule Information in Nomad\nDESCRIPTION: This example demonstrates how to use the 'nomad acl binding-rule info' command to retrieve detailed information about an existing ACL Binding Rule. The output includes the rule's ID, description, authentication method, selector, bind type, bind name, creation and modification times, and indexes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/binding-rule/info.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl binding-rule info dc0e494d-0878-4e56-37d4-482e371e5bdb\nID           = dc0e494d-0878-4e56-37d4-482e371e5bdb\nDescription  = example binding rule\nAuth Method  = auth0\nSelector     = \"engineering in list.roles\"\nBind Type    = role\nBind Name    = engineering-ro\nCreate Time  = 2022-12-20 11:17:40.483196 +0000 UTC\nModify Time  = 2022-12-20 11:17:40.483196 +0000 UTC\nCreate Index = 17\nModify Index = 17\n```\n\n----------------------------------------\n\nTITLE: Verbose Deployment Monitoring Example\nDESCRIPTION: Demonstrates monitoring a deployment with verbose output showing allocation details and progress updates.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/deployment/status.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad deployment status -monitor -verbose dab\n2021-06-09T15:10:38-07:00: Monitoring deployment \"da9bfc23-576f-be32-61c9-0f9997fe70a6\"\n  ⠙ Deployment \"da9bfc23-576f-be32-61c9-0f9997fe70a6\" in progress...\n\n    2021-06-09T15:10:40-07:00\n    ID          = da9bfc23-576f-be32-61c9-0f9997fe70a6\n    Job ID      = example\n    Job Version = 0\n    Status      = running\n    Description = Deployment is running\n\n    Deployed\n    Task Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline\n    cache       2        2       1        0          2021-06-09T15:20:27-07:00\n    web         1        1       1        0          2021-06-09T15:20:27-07:00\n\n    Allocations\n    ID                                    Eval ID                               Node ID                               Node Name  Task Group  Version  Desired  Status   Created                    Modified\n    9e1b4cb9-35c4-49f3-3ccb-1cb10a5a5aa6  e337d747-f59e-329e-4718-46edcc293695  70279742-b106-c487-315f-fb583e13178e  mbp.local  cache       0        run      running  2021-06-09T15:10:17-07:00  2021-06-09T15:10:31-07:00\n    bd0a8773-0d37-bca6-6ca1-2d9c8473bdf8  e337d747-f59e-329e-4718-46edcc293695  70279742-b106-c487-315f-fb583e13178e  mbp.local  cache       0        run      running  2021-06-09T15:10:17-07:00  2021-06-09T15:10:29-07:00\n    ee873095-8e76-7d4f-095f-b80ce5712d9b  e337d747-f59e-329e-4718-46edcc293695  70279742-b106-c487-315f-fb583e13178e  mbp.local  web         0        run      running  2021-06-09T15:10:17-07:00  2021-06-09T15:10:27-07:00\n```\n\n----------------------------------------\n\nTITLE: HCL Block Syntax for Nomad Meta Configuration\nDESCRIPTION: This snippet demonstrates the HCL block syntax for configuring meta information in a Nomad job specification. It shows how to use unquoted attributes and quoted values within a block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/index.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmeta {\n  team         = \"...\"\n  organization = \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Node Pool List Command Usage\nDESCRIPTION: Shows the basic syntax for listing node pools in Nomad.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad node pool list [options]\n```\n\n----------------------------------------\n\nTITLE: Setting AppArmor Profile in Podman Task Configuration\nDESCRIPTION: Specifies a custom AppArmor profile for the container. The 'unconfined' value disables AppArmor.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  apparmor_profile = \"your-profile\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing services across all namespaces\nDESCRIPTION: Example demonstrating how to list services across all namespaces using the wildcard namespace identifier. The output shows services from different namespaces with their tags.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/service/list.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad service list -namespace=\"*\"\nService Name                  Namespace  Tags\nexample-cache-redis           default    [cache,db]\nplatform-example-cache-redis  platform   []\n```\n\n----------------------------------------\n\nTITLE: Opening the Nomad UI Homepage in Shell\nDESCRIPTION: Example of using the 'nomad ui' command without arguments to open the Nomad UI homepage in the default browser.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/ui.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad ui\nOpening URL \"http://127.0.0.1:4646\"\n```\n\n----------------------------------------\n\nTITLE: Nomad Version Command Example Output\nDESCRIPTION: Demonstrates the actual output of the nomad version command, showing version number, build date, and revision information including local changes indicator.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/version.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad version\nNomad v1.5.0\nBuildDate 2023-02-17T19:29:26Z\nRevision a536284ebcfb4ff26065955abae446d81cc92b87+CHANGES\n```\n\n----------------------------------------\n\nTITLE: Checking CSI Volume Status in Nomad\nDESCRIPTION: Command output showing the status of a CSI volume in Nomad, including volume details, health status, and allocation information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/digitalocean/README.md#2025-04-19_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ nomad volume status nomad-csi\nID                   = nomad-csi-test\nName                 = nomad-csi-test\nExternal ID          = 58c4ef75-25d1-11eb-a381-0a58ac1449b9\nPlugin ID            = digitalocean\nProvider             = dobs.csi.digitalocean.com\nVersion              = v2.1.1\nSchedulable          = true\nControllers Healthy  = 1\nControllers Expected = 1\nNodes Healthy        = 1\nNodes Expected       = 1\nAccess Mode          = single-node-writer\nAttachment Mode      = block-device\nMount Options        = <none>\nNamespace            = default\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created  Modified\n8d223dc7  ce46add9  cache       0        run      running  21s ago  3s ago\n```\n\n----------------------------------------\n\nTITLE: Fuzzy Search API Request Example\nDESCRIPTION: Example of making a POST request to the fuzzy search endpoint using curl with a JSON payload file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/search.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://localhost:4646/v1/search/fuzzy\n```\n\n----------------------------------------\n\nTITLE: Configuring Bind Mounts in nspawn Container\nDESCRIPTION: This snippet demonstrates how to configure bind mounts inside the nspawn container. It shows binding a host directory to a container directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/nspawn.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  bind {\n    \"/var/lib/postgresql\" = \"/postgres\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Read-Only Bind Mounts in nspawn Container\nDESCRIPTION: This snippet shows how to set up read-only bind mounts in the nspawn container. It binds a host file to a container file in read-only mode.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/nspawn.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  bind_read_only {\n    \"/etc/passwd\" = \"/etc/passwd\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Node Pool Template Info\nDESCRIPTION: Shows how to display information for a single node pool using a custom template.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/list.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node pool info -t \"{{.Name}} [{{.Meta.env}}] - {{.Description}}\" prod\nprod [production] - Node pool for production workloads.\n```\n\n----------------------------------------\n\nTITLE: Prefix Match Search Result Example\nDESCRIPTION: Example response showing matches for a prefix search, including deployment IDs that match the prefix pattern.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/search.mdx#2025-04-19_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Index\": 267,\n  \"KnownLeader\": true,\n  \"LastContact\": 0,\n  \"Matches\": {\n    \"scaling_policy\": [],\n    \"evals\": [],\n    \"deployment\": [\n      {\n        \"ID\": \"cc786388-e071-31ec-5821-b829839f9681\"\n      }\n    ],\n    \"volumes\": []\n  },\n  \"Truncations\": {\n    \"deployment\": false,\n    \"volumes\": false,\n    \"plugins\": false,\n    \"namespaces\": false,\n    \"scaling_policy\": false,\n    \"evals\": false,\n    \"allocs\": false,\n    \"jobs\": false,\n    \"nodes\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using nomad acl token self command\nDESCRIPTION: This snippet demonstrates the basic usage of the 'nomad acl token self' command, which is used to fetch information about the currently set ACL token.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/token/self.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl token self\n```\n\n----------------------------------------\n\nTITLE: Deleting a Node Pool via HTTP DELETE in Shell\nDESCRIPTION: This snippet demonstrates how to delete a node pool using the Nomad API.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/node-pools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api -X DELETE /v1/node/pool/prod-eng\n```\n\n----------------------------------------\n\nTITLE: Deleting Evaluations with Filter and Auto-confirmation\nDESCRIPTION: Example of using the `-filter` option along with `-yes` to automatically confirm and delete evaluations for specific schedulers without prompts.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/eval/delete.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad eval delete -filter='Scheduler == \"system\" or Scheduler == \"service\"' -yes\nSuccessfully deleted 23 evaluations\n```\n\n----------------------------------------\n\nTITLE: Create/Update Policy - Request Payload\nDESCRIPTION: JSON payload for creating or updating a Sentinel policy, specifying the policy name, description, scope, enforcement level and policy content.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/sentinel-policies.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Name\": \"my-policy\",\n  \"Description\": \"This is a great policy\",\n  \"Scope\": \"submit-job\",\n  \"EnforcementLevel\": \"advisory\",\n  \"Policy\": \"main = rule { true }\"\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting a Nomad configuration file\nDESCRIPTION: This example shows the process of formatting a Nomad configuration file using the 'nomad fmt' command. It displays the original file content, the command execution, and the resulting formatted file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/fmt.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ cat agent.hcl\nserver {\n    enabled = true\n  bootstrap_expect = 1\n}\n\nclient {\n  enabled = true\n}\n\n$ nomad fmt\nagent.hcl\n\n$ cat agent.hcl\nserver {\n  enabled          = true\n  bootstrap_expect = 1\n}\n\nclient {\n  enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Query Allocation Stats Shell Command\nDESCRIPTION: Command to query allocation statistics via the Nomad API using the operator command.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api \\\n    /v1/client/allocation/5fc98185-17ff-26bc-a802-0c74fa471c99/stats\n```\n\n----------------------------------------\n\nTITLE: Executing Nomad Operator Metrics Command with Pretty Printing\nDESCRIPTION: This example demonstrates running the 'nomad operator metrics' command with the '-pretty' option to format the JSON output for better readability. It shows sample metrics data including counters, gauges, and samples.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/metrics.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator metrics -pretty\n{\n  \"Counters\": [\n    {\n      \"Count\": 11,\n      \"Labels\": {},\n      \"Max\": 1.0,\n      \"Mean\": 1.0,\n      \"Min\": 1.0,\n      \"Name\": \"nomad.nomad.rpc.query\",\n      \"Stddev\": 0.0,\n      \"Sum\": 11.0\n    }\n  ],\n  \"Gauges\": [\n    {\n      \"Labels\": {\n        \"node_id\": \"cd7c3e0c-0174-29dd-17ba-ea4609e0fd1f\",\n        \"datacenter\": \"dc1\"\n      },\n      \"Name\": \"nomad.client.allocations.blocked\",\n      \"Value\": 0.0\n    },\n    {\n      \"Labels\": {\n        \"datacenter\": \"dc1\",\n        \"node_id\": \"cd7c3e0c-0174-29dd-17ba-ea4609e0fd1f\"\n      },\n      \"Name\": \"nomad.client.allocations.migrating\",\n      \"Value\": 0.0\n    }\n  ],\n  \"Samples\": [\n    {\n      \"Count\": 20,\n      \"Labels\": {},\n      \"Max\": 0.03544100001454353,\n      \"Mean\": 0.023678050097078084,\n      \"Min\": 0.00956599973142147,\n      \"Name\": \"nomad.memberlist.gossip\",\n      \"Stddev\": 0.005445327799243976,\n      \"Sum\": 0.4735610019415617\n    },\n    {\n      \"Count\": 1,\n      \"Labels\": {},\n      \"Max\": 0.0964059978723526,\n      \"Mean\": 0.0964059978723526,\n      \"Min\": 0.0964059978723526,\n      \"Name\": \"nomad.nomad.client.update_status\",\n      \"Stddev\": 0.0,\n      \"Sum\": 0.0964059978723526\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: List Files API Response\nDESCRIPTION: Example response showing directory contents with file metadata including size, permissions and modification time.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Name\": \"alloc\",\n    \"IsDir\": true,\n    \"Size\": 4096,\n    \"FileMode\": \"drwxrwxr-x\",\n    \"ModTime\": \"2016-03-15T15:40:00.414236712-07:00\"\n  },\n  {\n    \"Name\": \"redis\",\n    \"IsDir\": true,\n    \"Size\": 4096,\n    \"FileMode\": \"drwxrwxr-x\",\n    \"ModTime\": \"2016-03-15T15:40:56.810238153-07:00\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Snapshot using cURL in Shell\nDESCRIPTION: This snippet demonstrates how to use cURL to generate and download a snapshot of the Nomad server state. The snapshot is saved as a gzipped tar archive named 'snapshot.tgz' in the current working directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/snapshot.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -o snapshot.tgz \\\n    http://127.0.0.1:4646/v1/operator/snapshot\n```\n\n----------------------------------------\n\nTITLE: Unblocking Deployment with cURL in Shell\nDESCRIPTION: This snippet shows how to use cURL to send a POST request to unblock a multi-region deployment. It demonstrates the endpoint structure and how to include the deployment ID in the URL.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/deployments.mdx#2025-04-19_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    https://localhost:4646/v1/deployment/unblock/5456bd7a-9fc0-c0dd-6131-cbee77f57577\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Target in Policy HCL\nDESCRIPTION: This snippet demonstrates how to configure the Nomad target in a scaling policy. It specifies the namespace, job, and group to be scaled. This section can be omitted if using the Nomad job specification scaling block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/target/nomad.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ncheck \"example-check\" {\n  ...\n  target \"nomad\" {\n    Namespace = \"default\"\n    Job       = \"example\"\n    Group     = \"cache\"\n  }\n  ...\n```\n\n----------------------------------------\n\nTITLE: Using the upper Function in Nomad HCL2\nDESCRIPTION: Examples demonstrating how to use the upper function to convert string text to uppercase. The function works with both Latin and non-Latin characters, following Unicode's definition of letters and case.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/upper.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> upper(\"hello\")\nHELLO\n> upper(\"алло!\")\nАЛЛО!\n```\n\n----------------------------------------\n\nTITLE: Retrieving quota status in JSON format\nDESCRIPTION: This example shows how to use the -json flag to get the quota status in JSON format. It provides detailed information about the quota, including creation index, description, limits, and region-specific details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/quota/status.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad quota status -json default-quota\n{\n    \"CreateIndex\": 8,\n    \"Description\": \"Limit the shared default namespace\",\n    \"Limits\": [\n        {\n            \"Hash\": \"p7s7A+4mFt+M41NS3nB3APheQS9YaePLguvnNn/c1t4=\",\n            \"Region\": \"global\",\n            \"RegionLimit\": {\n                \"CPU\": 1000,\n                \"Cores\": 1,\n                \"Devices\": null,\n                \"DiskMB\": 0,\n                \"IOPS\": 0,\n                \"MemoryMB\": 1000,\n                \"MemoryMaxMB\": 0,\n                \"NUMA\": null,\n                \"Networks\": null\n            },\n            \"VariablesLimit\": 0\n        }\n    ],\n    \"ModifyIndex\": 56,\n    \"Name\": \"default-quota\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying CSI Volume Expansion in Nomad\nDESCRIPTION: This shell command uses the Nomad CLI to verify the new capacity of the expanded CSI volume.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/csi.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume status ebs_prod_db1 | grep Capacity\nCapacity             = 100 GiB\n```\n\n----------------------------------------\n\nTITLE: Applying Node Metadata in Nomad with Unset Option\nDESCRIPTION: This example shows how to use the 'nomad node meta apply' command to unset specific metadata keys and set new key-value pairs. It demonstrates unsetting 'testing' and 'tempvar' keys while setting 'ready' and 'role' values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/meta/apply.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node meta apply -unset testing,tempvar ready=1 role=preinit-db\n```\n\n----------------------------------------\n\nTITLE: Read CSI Volume Response\nDESCRIPTION: Detailed JSON response when reading a specific CSI volume, including volume configuration, allocations, and health metrics\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ID\": \"volume-id1\",\n  \"Name\": \"volume id1\",\n  \"Namespace\": \"default\",\n  \"ExternalID\": \"vol-abcdef\",\n  \"Topologies\": [{ \"foo\": \"bar\" }],\n  \"AccessMode\": \"multi-node-single-writer\",\n  \"AttachmentMode\": \"file-system\",\n  \"RequestedCapabilities\": [\n    {\n      \"AccessMode\": \"single-node-writer\",\n      \"AttachmentMode\": \"file-system\"\n    },\n    {\n      \"AccessMode\": \"single-node-writer\",\n      \"AttachmentMode\": \"block-device\"\n    }\n  ],\n  \"Allocations\": [\n    {\n      \"ID\": \"a8198d79-cfdb-6593-a999-1e9adabcba2e\",\n      \"EvalID\": \"5456bd7a-9fc0-c0dd-6131-cbee77f57577\",\n      \"Name\": \"example.cache[0]\",\n      \"NodeID\": \"fb2170a8-257d-3c64-b14d-bc06cc94e34c\",\n      \"PreviousAllocation\": \"516d2753-0513-cfc7-57ac-2d6fac18b9dc\",\n      \"NextAllocation\": \"cd13d9b9-4f97-7184-c88b-7b451981616b\",\n      \"RescheduleTracker\": {\n        \"Events\": [\n          {\n            \"PrevAllocID\": \"516d2753-0513-cfc7-57ac-2d6fac18b9dc\",\n            \"PrevNodeID\": \"9230cd3b-3bda-9a3f-82f9-b2ea8dedb20e\",\n            \"RescheduleTime\": 1517434161192946200,\n            \"Delay\": \"5000000000\"\n          }\n        ]\n      },\n      \"JobID\": \"example\",\n      \"TaskGroup\": \"cache\",\n      \"DesiredStatus\": \"run\",\n      \"DesiredDescription\": \"\",\n      \"ClientStatus\": \"running\",\n      \"ClientDescription\": \"\",\n      \"TaskStates\": {\n        \"redis\": {\n          \"State\": \"running\",\n          \"FinishedAt\": \"0001-01-01T00:00:00Z\",\n          \"LastRestart\": \"0001-01-01T00:00:00Z\",\n          \"Restarts\": 0,\n          \"StartedAt\": \"2017-07-25T23:36:26.106431265Z\",\n          \"Failed\": false,\n          \"Events\": [\n            {\n              \"Type\": \"Received\",\n              \"Time\": 1495747371795703800,\n              \"FailsTask\": false,\n              \"RestartReason\": \"\",\n              \"SetupError\": \"\",\n              \"DriverError\": \"\",\n              \"ExitCode\": 0,\n              \"Signal\": 0,\n              \"Message\": \"\",\n              \"KillTimeout\": 0,\n              \"KillError\": \"\",\n              \"KillReason\": \"\",\n              \"StartDelay\": 0,\n              \"DownloadError\": \"\",\n              \"ValidationError\": \"\",\n              \"DiskLimit\": 0,\n              \"FailedSibling\": \"\",\n              \"VaultError\": \"\",\n              \"TaskSignalReason\": \"\",\n              \"TaskSignal\": \"\",\n              \"DriverMessage\": \"\"\n            },\n            {\n              \"Type\": \"Driver\",\n              \"Time\": 1495747371798867200,\n              \"FailsTask\": false,\n              \"RestartReason\": \"\",\n              \"SetupError\": \"\",\n              \"DriverError\": \"\",\n              \"ExitCode\": 0,\n              \"Signal\": 0,\n              \"Message\": \"\",\n              \"KillTimeout\": 0,\n              \"KillError\": \"\",\n              \"KillReason\": \"\",\n              \"StartDelay\": 0,\n              \"DownloadError\": \"\",\n              \"ValidationError\": \"\",\n              \"DiskLimit\": 0,\n              \"FailedSibling\": \"\",\n              \"VaultError\": \"\",\n              \"TaskSignalReason\": \"\",\n              \"TaskSignal\": \"\",\n              \"DriverMessage\": \"Downloading image redis:7\"\n            },\n            {\n              \"Type\": \"Started\",\n              \"Time\": 1495747379525667800,\n              \"FailsTask\": false,\n              \"RestartReason\": \"\",\n              \"SetupError\": \"\",\n              \"DriverError\": \"\",\n              \"ExitCode\": 0,\n              \"Signal\": 0,\n              \"Message\": \"\",\n              \"KillTimeout\": 0,\n              \"KillError\": \"\",\n              \"KillReason\": \"\",\n              \"StartDelay\": 0,\n              \"DownloadError\": \"\",\n              \"ValidationError\": \"\",\n              \"DiskLimit\": 0,\n              \"FailedSibling\": \"\",\n              \"VaultError\": \"\",\n              \"TaskSignalReason\": \"\",\n              \"TaskSignal\": \"\",\n              \"DriverMessage\": \"\"\n            }\n          ]\n        }\n      },\n      \"CreateIndex\": 54,\n      \"ModifyIndex\": 57,\n      \"CreateTime\": 1495747371794276400,\n      \"ModifyTime\": 1495747371794276400\n    }\n  ],\n  \"ReadAllocs\": {\n    \"a8198d79-cfdb-6593-a999-1e9adabcba2e\": null\n  },\n  \"WriteAllocs\": {},\n  \"Schedulable\": true,\n  \"PluginID\": \"plugin-id1\",\n  \"Provider\": \"ebs\",\n  \"Version\": \"1.0.1\",\n  \"ControllerRequired\": true,\n  \"ControllersHealthy\": 3,\n  \"ControllersExpected\": 3,\n  \"NodesHealthy\": 15,\n  \"NodesExpected\": 18,\n  \"ResourceExhausted\": 0,\n  \"CreateIndex\": 42,\n  \"ModifyIndex\": 64\n}\n```\n\n----------------------------------------\n\nTITLE: Value Coercion in Nomad Meta Blocks\nDESCRIPTION: Demonstrates different ways to specify key-value pairs in meta blocks. All values are internally stored as their string representation regardless of the input type.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/meta.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmeta {\n  key = \"true\"\n  key = true\n\n  key = 1.4\n  key = \"1.4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Fuzzy Search Response Example\nDESCRIPTION: Example response showing the full structure of a fuzzy search result, including matches across services, tasks, jobs, groups, images, plugins, and allocations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/search.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Index\": 260,\n  \"KnownLeader\": true,\n  \"LastContact\": 0,\n  \"Matches\": {\n    \"services\": [\n      {\n        \"ID\": \"python-logger\",\n        \"Scope\": [\n          \"default\",\n          \"example-python\",\n          \"my-spy-app\",\n          \"my-python-task\"\n        ]\n      },\n      {\n        \"ID\": \"super-spy-service\",\n        \"Scope\": [\n          \"default\",\n          \"example-python\",\n          \"my-spy-app\"\n        ]\n      }\n    ],\n    \"tasks\": [\n      {\n        \"ID\": \"my-python-task\",\n        \"Scope\": [\n          \"default\",\n          \"example-python\",\n          \"my-spy-app\"\n        ]\n      }\n    ],\n    \"jobs\": [\n      {\n        \"ID\": \"example-python\",\n        \"Scope\": [\n          \"default\"\n        ]\n      }\n    ],\n    \"evals\": [],\n    \"scaling_policy\": [],\n    \"groups\": [\n      {\n        \"ID\": \"my-spy-app\",\n        \"Scope\": [\n          \"default\",\n          \"example-python\"\n        ]\n      }\n    ],\n    \"images\": [\n      {\n        \"ID\": \"python:3\",\n        \"Scope\": [\n          \"default\",\n          \"example-python\",\n          \"my-spy-app\",\n          \"my-python-task\"\n        ]\n      }\n    ],\n    \"plugins\": [\n      {\n        \"ID\": \"aws-spy-plugin\"\n      }\n    ],\n    \"deployment\": [],\n    \"volumes\": [],\n    \"allocs\": [\n      {\n        \"ID\": \"example-python.my-spy-app[0]\",\n        \"Scope\": [\n          \"default\",\n          \"48608246-4c28-0446-f3d1-c67e3bc650ad\"\n        ]\n      }\n    ]\n  },\n  \"Truncations\": {\n    \"deployment\": false,\n    \"volumes\": false,\n    \"plugins\": false,\n    \"namespaces\": false,\n    \"scaling_policy\": false,\n    \"evals\": false,\n    \"allocs\": false,\n    \"jobs\": false,\n    \"nodes\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Volume Expansion Configuration (HCL)\nDESCRIPTION: Initial HCL configuration for volume expansion example, defining basic volume properties with initial capacity settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/host.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nname      = \"database\"\ntype      = \"host\"\nplugin_id = \"external-plugin\"\n\ncapacity_min = \"30GiB\"\ncapacity_max = \"50GiB\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Reading Job Scale Status in JSON\nDESCRIPTION: Shows a sample JSON response when reading the scale status of a job. Includes job details and task group scaling information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"JobCreateIndex\": 10,\n  \"JobID\": \"example\",\n  \"Namespace\": \"default\",\n  \"JobModifyIndex\": 18,\n  \"JobStopped\": false,\n  \"TaskGroups\": {\n    \"cache\": {\n      \"Desired\": 1,\n      \"Events\": null,\n      \"Healthy\": 1,\n      \"Placed\": 1,\n      \"Running\": 0,\n      \"Unhealthy\": 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing ACL Policies with curl in Nomad API\nDESCRIPTION: This snippet demonstrates how to retrieve a list of all ACL policies using the Nomad API. The GET request to the /v1/acl/policies endpoint returns all policies replicated to the region, with an optional prefix filter for narrowing results.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/policies.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/acl/policies\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/acl/policies?prefix=prod\n```\n\n----------------------------------------\n\nTITLE: Comparing Job Versions by Tag\nDESCRIPTION: Demonstrates how to compare job versions using a specific tag name with the -diff-tag flag.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/history.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job history -diff-tag=low-energy-version example\n\nVersion     = 3\nStable      = false\nSubmit Date = 2024-09-09T16:41:53-04:00\nDiff        =\n+/- Job: \"example\"\n+/- Task Group: \"group\"\n  +/- Count: \"3\" => \"4\"\n      Task: \"task\"\n\nVersion         = 2\nStable          = false\nSubmit Date     = 2024-09-09T16:41:53-04:00\nTag Name        = low-energy-version\nTag Description = test description\n\nVersion     = 1\nStable      = false\nSubmit Date = 2024-09-09T16:41:53-04:00\nDiff        =\n+/- Job: \"example\"\n+/- Task Group: \"group\"\n  +/- Count: \"3\" => \"2\"\n      Task: \"task\"\n\nVersion     = 0\nStable      = false\nSubmit Date = 2024-09-09T16:41:53-04:00\nDiff        =\n+/- Job: \"example\"\n+/- Task Group: \"group\"\n  +/- Count: \"3\" => \"1\"\n      Task: \"task\"\n```\n\n----------------------------------------\n\nTITLE: Stale Snapshot Save Command\nDESCRIPTION: Creates a potentially stale snapshot from any available server when no leader is available\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/snapshot/save.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator snapshot save -stale backup.snap\n```\n\n----------------------------------------\n\nTITLE: Nomad ACL Binding Rule Delete Command Syntax\nDESCRIPTION: The basic command syntax for deleting an ACL binding rule, requiring the binding rule ID as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/binding-rule/delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl binding-rule delete [options] <binding-rule_id>\n```\n\n----------------------------------------\n\nTITLE: SSH Access to Nomad Cluster Nodes\nDESCRIPTION: Provides commands for SSH access to both Linux and Windows nodes in the Nomad cluster using the generated SSH key.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/terraform/README.md#2025-04-19_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nssh -i keys/${CLUSTER_UNIQUE_IDENTIFIER}/nomad-e2e-*.pem ubuntu@${EC2_IP_ADDR}\n```\n\nLANGUAGE: sh\nCODE:\n```\nssh -i keys/${CLUSTER_UNIQUE_IDENTIFIER}/nomad-e2e-*.pem Administrator@${EC2_IP_ADDR}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pledge Driver Plugin Options in Nomad Client\nDESCRIPTION: Plugin configuration block for the Pledge task driver in Nomad client configuration. This example specifies the path to the pledge.com executable on the client host.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/pledge.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"nomad-pledge-driver\" {\n  config {\n    pledge_executable = \"/opt/bin/pledge-1.8.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding a Script in Nomad Job Specification Template (HCL)\nDESCRIPTION: This example shows how to embed a script within a 'data' block of another 'template' block in a Nomad job specification. It demonstrates creating a script file and using it in a change_script block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/change_script.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    task \"server\" {\n      template {\n        data        = \"{{key \\\"my_key\\\"}}\"\n        destination = \"local/test\"\n        change_mode = \"script\"\n\n        change_script {\n          command = \"/local/script.sh\"\n        }\n      }\n\n      template {\n        data        = <<EOF\n#!/usr/bin/env bash\necho \"Running change_mode script\"\nsleep 10\necho \"Done\"\nEOF\n        destination = \"local/script.sh\"\n        perms       = \"777\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Syntax for nomad quota inspect Command\nDESCRIPTION: Shows the basic syntax for the 'nomad quota inspect' command, which requires a quota name as an argument and displays raw information about that quota.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/quota/inspect.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad quota inspect [options] <quota_name>\n```\n\n----------------------------------------\n\nTITLE: Using nomad alloc logs command\nDESCRIPTION: Basic usage of the 'nomad alloc logs' command to stream logs from a specific allocation and task.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/logs.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad alloc logs [options] <allocation> <task>\n```\n\n----------------------------------------\n\nTITLE: Using Heredoc String Syntax in HCL\nDESCRIPTION: Example of using heredoc style string literals in HCL, which allow for multi-line strings with a custom delimiter. This style is useful for expressing multi-line text more clearly.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/expressions.mdx#2025-04-19_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\n<<EOF\nhello\nworld\nEOF\n```\n\n----------------------------------------\n\nTITLE: Setting Command for Podman Container Startup\nDESCRIPTION: Defines the command to be executed when starting the container.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  command = \"some-command\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Plugins API Response\nDESCRIPTION: Sample JSON response showing plugin status including controller and node health information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/plugins.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"ID\": \"example\",\n    \"Provider\": \"aws.ebs\",\n    \"ControllerRequired\": true,\n    \"ControllersHealthy\": 2,\n    \"ControllersExpected\": 3,\n    \"NodesHealthy\": 14,\n    \"NodesExpected\": 16,\n    \"CreateIndex\": 52,\n    \"ModifyIndex\": 93\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Job Status Output for Periodic Parameterized Jobs\nDESCRIPTION: Command output showing the job hierarchy and naming patterns when using periodic with parameterized jobs, demonstrating how dispatched jobs trigger periodic children.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/parameterized.mdx#2025-04-19_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n$ nomad job status                                                      \nID                                                     Type                            Submit Date\nsync                                                   batch/periodic/parameterized    2024-11-07T10:43:30+01:00 // Original submitted job\nsync/dispatch-1730972650-247c6e97                      batch/periodic                  2024-11-07T10:44:10+01:00 // First dispatched job with parameters A\nsync/dispatch-1730972650-247c6e97/periodic-1730972680  batch                           2024-11-07T10:44:40+01:00 // Cron job with parameters A\nsync/dispatch-1730972650-247c6e97/periodic-1730972860  batch                           2024-11-07T10:47:40+01:00 // Cron job with parameters A\nsync/dispatch-1730972760-f79a96e1                      batch/periodic                  2024-11-07T10:46:00+01:00 // Second dispatched job with parameters B\nsync/dispatch-1730972760-f79a96e1/periodic-1730972800  batch                           2024-11-07T10:46:40+01:00 // Cron job with parameters B\nsync/dispatch-1730972760-f79a96e1/periodic-1730972860  batch                           2024-11-07T10:47:40+01:00 // Cron job with parameters B\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Manual Upstreams\nDESCRIPTION: Environment configuration using interpolated upstream address for API communication.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/service-mesh.mdx#2025-04-19_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\nenv {\n  COUNTING_SERVICE_URL = \"http://${NOMAD_UPSTREAM_ADDR_count_api}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response After Creating an ACL Binding Rule\nDESCRIPTION: JSON response returned after successfully creating a binding rule. Includes all rule details plus system-generated fields like ID, creation time, and indices.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/binding-rules.mdx#2025-04-19_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AuthMethod\": \"auth0\",\n  \"BindName\": \"eng-ro\",\n  \"BindType\": \"role\",\n  \"CreateIndex\": 16,\n  \"CreateTime\": \"2022-12-16T10:29:07.248465Z\",\n  \"Description\": \"example-acl-binding-rule\",\n  \"ID\": \"5da76548-1a60-b8fb-f9be-c7736a5bca09\",\n  \"ModifyIndex\": 16,\n  \"ModifyTime\": \"2022-12-16T10:29:07.248465Z\",\n  \"Selector\": \"engineering in list.roles\"\n}\n```\n\n----------------------------------------\n\nTITLE: Infrastructure Namespace with Node Pool Governance\nDESCRIPTION: Enterprise feature configuring an infrastructure namespace with a default node pool and specifically allowed node pools for infrastructure jobs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/node-pools.mdx#2025-04-19_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nnamespace \"infra\" {\n  description = \"Infrastructure jobs.\"\n\n  node_pool_config {\n    default = \"infra\"\n    allowed = [\"ingress\", \"csi-controllers\", \"all\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nomad ACL Role Example\nDESCRIPTION: Example showing how to update an existing ACL role by modifying its name. The command updates the role and displays the updated role information including ID, name, policies, and index values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/role/update.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl role update -name=\"example-acl-role-updated\" a53b0095-c28a-6181-0586-807b82e665e4\nID           = a53b0095-c28a-6181-0586-807b82e665e4\nName         = example-acl-role-updated\nDescription  = <none>\nPolicies     = general-write\nCreate Index = 71\nModify Index = 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Target Plugin in HCL\nDESCRIPTION: This snippet shows how to configure the Nomad target plugin in the agent configuration. It's optional since the Nomad Autoscaler automatically launches the target.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/target/nomad.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"nomad\" {\n  driver = \"nomad-target\"\n}\n```\n\n----------------------------------------\n\nTITLE: Nomad Snapshot Restore Command Usage Syntax\nDESCRIPTION: Shows the command syntax for the nomad operator snapshot restore command with options placeholder\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/snapshot/restore.mdx#2025-04-19_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator snapshot restore [options] <file>\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Job Planning in JSON\nDESCRIPTION: Shows a sample JSON response from planning a job. Includes details about the job diff, created evaluations, and allocation failures.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Index\": 0,\n  \"NextPeriodicLaunch\": \"0001-01-01T00:00:00Z\",\n  \"Warnings\": \"\",\n  \"Diff\": {\n    \"Type\": \"Added\",\n    \"TaskGroups\": [\n      {\n        \"Updates\": {\n          \"create\": 1\n        },\n        \"Type\": \"Added\",\n        \"Tasks\": [\n          {\n            \"Type\": \"Added\",\n            \"Objects\": [\"...\"],\n            \"Name\": \"redis\",\n            \"Fields\": [\n              {\n                \"Type\": \"Added\",\n                \"Old\": \"\",\n                \"New\": \"docker\",\n                \"Name\": \"Driver\",\n                \"Annotations\": null\n              },\n              {\n                \"Type\": \"Added\",\n                \"Old\": \"\",\n                \"New\": \"5000000000\",\n                \"Name\": \"KillTimeout\",\n                \"Annotations\": null\n              }\n            ],\n            \"Annotations\": [\"forces create\"]\n          }\n        ],\n        \"Objects\": [\"...\"],\n        \"Name\": \"cache\",\n        \"Fields\": [\"...\"]\n      }\n    ],\n    \"Objects\": [\n      {\n        \"Type\": \"Added\",\n        \"Objects\": null,\n        \"Name\": \"Datacenters\",\n        \"Fields\": [\"...\"]\n      },\n      {\n        \"Type\": \"Added\",\n        \"Objects\": null,\n        \"Name\": \"Constraint\",\n        \"Fields\": [\"...\"]\n      },\n      {\n        \"Type\": \"Added\",\n        \"Objects\": null,\n        \"Name\": \"Update\",\n        \"Fields\": [\"...\"]\n      }\n    ],\n    \"ID\": \"example\",\n    \"Fields\": [\"...\"]\n  },\n  \"CreatedEvals\": [\n    {\n      \"ModifyIndex\": 0,\n      \"CreateIndex\": 0,\n      \"SnapshotIndex\": 0,\n      \"AnnotatePlan\": false,\n      \"EscapedComputedClass\": false,\n      \"NodeModifyIndex\": 0,\n      \"NodeID\": \"\",\n      \"JobModifyIndex\": 0,\n      \"JobID\": \"example\",\n      \"TriggeredBy\": \"job-register\",\n      \"Type\": \"batch\",\n      \"Priority\": 50,\n      \"ID\": \"312e6a6d-8d01-0daf-9105-14919a66dba3\",\n      \"Status\": \"blocked\",\n      \"StatusDescription\": \"created to place remaining allocations\",\n      \"Wait\": 0,\n      \"NextEval\": \"\",\n      \"PreviousEval\": \"80318ae4-7eda-e570-e59d-bc11df134817\",\n      \"BlockedEval\": \"\",\n      \"FailedTGAllocs\": null,\n      \"ClassEligibility\": {\n        \"v1:7968290453076422024\": true\n      }\n    }\n  ],\n  \"JobModifyIndex\": 0,\n  \"FailedTGAllocs\": {\n    \"cache\": {\n      \"CoalescedFailures\": 3,\n      \"AllocationTime\": 46415,\n      \"Scores\": null,\n      \"NodesEvaluated\": 1,\n      \"NodesFiltered\": 0,\n      \"NodesAvailable\": {\n        \"dc1\": 1\n      },\n      \"NodesInPool\": 1,\n      \"ClassFiltered\": null,\n      \"ConstraintFiltered\": null,\n      \"NodesExhausted\": 1,\n      \"ClassExhausted\": null,\n      \"DimensionExhausted\": {\n        \"cpu\": 1\n      }\n    }\n  },\n  \"Annotations\": {\n    \"DesiredTGUpdates\": {\n      \"cache\": {\n        \"DestructiveUpdate\": 0,\n        \"InPlaceUpdate\": 0,\n        \"Stop\": 0,\n        \"Migrate\": 0,\n        \"Place\": 11,\n        \"Ignore\": 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying tail of logs with specified number of lines\nDESCRIPTION: Example of using 'nomad alloc logs' with -tail and -n options to display the last 2 lines of logs from a Redis task.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/logs.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc logs -tail -n 2 eb17e557 redis\nfoobar\nbaz\n```\n\n----------------------------------------\n\nTITLE: Inspecting Enterprise Consul Namespace Claims in JSON\nDESCRIPTION: Example of additional claims in Nomad Enterprise for workloads with a Consul namespace specified. The claims include the standard workload information plus the Consul namespace.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/workload-identity.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"consul_namespace\": \"prod\",\n  \"nomad_namespace\": \"default\",\n  \"nomad_job_id\": \"example\",\n  \"nomad_allocation_id\": \"8623ac7a-28ba-20c3-24a6-e615a39bbbf3\",\n  \"nomad_service\": \"example-cache-redis\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Namespace Delete Command\nDESCRIPTION: This snippet shows the usage syntax for the 'nomad namespace delete' command. It requires the name of the namespace to be deleted as an argument and supports additional options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/namespace/delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad namespace delete [options] <namespace>\n```\n\n----------------------------------------\n\nTITLE: Creating an ACL Auth Method with OIDC configuration\nDESCRIPTION: This example demonstrates how to create a new ACL Auth Method using the 'nomad acl auth-method create' command. It sets various parameters including name, type, token TTL, locality, and loads configuration from a JSON file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/auth-method/create.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl auth-method create -name \"example-acl-auth-method\" -type \"OIDC\" -max-token-ttl \"1h\" -token-locality \"local\" -config \"@config.json\"\nName                = example-acl-auth-method\nType                = OIDC\nLocality            = local\nMax Token TTL       = 1h0m0s\nToken Name Format   = ${auth_method_type}-${auth_method_name}\nDefault             = false\nCreate Index        = 14\nModify Index        = 14\n\nAuth Method Config\n\nOIDC Discovery URL     = https://my-corp-app-name.auth0.com/\nOIDC Client ID         = V1RPi2MYptMV1RPi2MYptMV1RPi2MYpt\nOIDC Client Secret     = example-client-secret\nBound audiences        = V1RPi2MYptMV1RPi2MYptMV1RPi2MYpt\nAllowed redirects URIs = http://localhost:4646/oidc/callback\nDiscovery CA pem       = <none>\nSigning algorithms     = <none>\nClaim mappings         = {http://example.com/first_name: first_name}; {http://example.com/last_name: last_name}\nList claim mappings    = {http://nomad.com/groups: groups}\n```\n\n----------------------------------------\n\nTITLE: Stream Allocation File Shell Command\nDESCRIPTION: Command to stream a file from an allocation directory with optional tailing.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api \\\n    /v1/client/fs/stream/5fc98185-17ff-26bc-a802-0c74fa471c99?path=/alloc/logs/redis.log\n```\n\n----------------------------------------\n\nTITLE: Signal Allocation Request - Shell\nDESCRIPTION: Sample request to send a signal to an allocation using cURL\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/allocations.mdx#2025-04-19_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -X POST -d '{\"Signal\": \"SIGUSR1\" }' \\\n    https://localhost:4646/v1/client/allocation/5456bd7a-9fc0-c0dd-6131-cbee77f57577/signal\n```\n\n----------------------------------------\n\nTITLE: Using nomad recommendation list command\nDESCRIPTION: The basic usage of the `nomad recommendation list` command. This command requires no arguments and is used to list available recommendations in Nomad Enterprise.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/recommendation/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad recommendation list [options]\n```\n\n----------------------------------------\n\nTITLE: Log Streaming Response - JSON\nDESCRIPTION: JSON response containing streamed log data in base64 format with offset tracking.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Offset\": 0,\n  \"Data\": \"NTMxOTMyCjUzMTkzMwo1MzE5MzQKNTMx...\"\n  \"FileEvent\": \"log\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Volume Claim Delete Command Usage\nDESCRIPTION: Shows the basic syntax for using the nomad volume claim delete command to remove a volume claim using its ID or prefix.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/claim-delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad volume claim delete [options] <claim_id>\n```\n\n----------------------------------------\n\nTITLE: Empty Set Example with Setproduct\nDESCRIPTION: Demonstrates that if any of the arguments to setproduct is empty, the result is also empty, similar to how multiplying by zero gives zero.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/setproduct.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n> setproduct([\"development\", \"staging\", \"production\"], [])\n[]\n```\n\n----------------------------------------\n\nTITLE: Accessing ACL Token Fields with Sentinel in Nomad\nDESCRIPTION: Examples of how to access ACL token fields using Sentinel syntax. The examples show how to access the accessor ID and policies, noting that the SecretID field is always redacted to prevent credential leaks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/enterprise/sentinel.mdx#2025-04-19_snippet_1\n\nLANGUAGE: sentinel\nCODE:\n```\nnomad_acl_token.accessor_id\nnomad_acl_token.policies[0]\n```\n\n----------------------------------------\n\nTITLE: Applying Recommendations with cURL in Shell\nDESCRIPTION: This snippet demonstrates how to apply recommendations using a POST request with a JSON payload containing the recommendation IDs to be applied.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/recommendations.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://localhost:4646/v1/recommendations/apply\n```\n\n----------------------------------------\n\nTITLE: Creating a New ACL Policy in Nomad\nDESCRIPTION: An example of creating a new ACL policy named 'my-policy' using a JSON file 'my-policy.json'.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/policy/apply.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl policy apply my-policy my-policy.json\nSuccessfully wrote 'my-policy' ACL policy!\n```\n\n----------------------------------------\n\nTITLE: Reading an ACL Binding Rule by ID using cURL\nDESCRIPTION: Makes a GET request to retrieve details of a specific ACL Binding Rule identified by its ID. This requires a management token and supports blocking queries and all consistency modes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/binding-rules.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Nomad-Token: <NOMAD_TOKEN_SECRET_ID>\" \\\n    https://localhost:4646/v1/acl/binding-rule/5da76548-1a60-b8fb-f9be-c7736a5bca09\n```\n\n----------------------------------------\n\nTITLE: Basic ACL Policy Delete Command Syntax\nDESCRIPTION: The basic syntax for deleting an ACL policy using the Nomad CLI. The command requires the policy name as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/policy/delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl policy delete <policy_name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Mesh Gateway in Destination Datacenter (DC2)\nDESCRIPTION: Nomad job configuration for datacenter 'two' that sets up a mesh gateway and API service. Includes bridge network configuration and basic Connect service configuration for the API endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/gateway.mdx#2025-04-19_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\njob \"countdash-mesh-two\" {\n  datacenters = [\"two\"]\n\n  group \"mesh-gateway-two\" {\n    network {\n      mode = \"bridge\"\n\n      # A mesh gateway will require a host_network configured for at least one\n      # Nomad client that can establish cross-datacenter connections. Nomad will\n      # automatically schedule the mesh gateway task on compatible Nomad clients.\n      port \"mesh_wan\" {\n        host_network = \"public\"\n      }\n    }\n\n    service {\n      name = \"mesh-gateway\"\n\n      # The mesh gateway connect service should be configured to use a port from\n      # the host_network capable of cross-datacenter connections.\n      port = \"mesh_wan\"\n\n      connect {\n        gateway {\n          mesh {\n            # No configuration options in the mesh block.\n          }\n\n          # Consul gateway [envoy] proxy options.\n          proxy {\n            # The following options are automatically set by Nomad if not explicitly\n            # configured with using bridge networking.\n            #\n            # envoy_gateway_no_default_bind = true\n            # envoy_gateway_bind_addresses \"lan\" {\n            #   address = \"0.0.0.0\"\n            #   port    = <generated dynamic port>\n            # }\n            # envoy_gateway_bind_addresses \"wan\" {\n            #   address = \"0.0.0.0\"\n            #   port    = <configured service port>\n            # }\n            # Additional options are documented at\n            # https://developer.hashicorp.com/nomad/docs/job-specification/gateway#proxy-parameters\n          }\n        }\n      }\n    }\n  }\n\n  group \"api\" {\n    network {\n      mode = \"bridge\"\n    }\n\n    service {\n      name = \"count-api\"\n      port = \"9001\"\n      connect {\n        sidecar_service {}\n      }\n    }\n\n    task \"api\" {\n      driver = \"docker\"\n\n      config {\n        image = \"hashicorpdev/counter-api:v3\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: cURL command for deleting an ACL Role in Nomad\nDESCRIPTION: Shell command using cURL to delete a specific ACL Role by sending a DELETE request with the role ID in the URL path.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/roles.mdx#2025-04-19_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    --header \"X-Nomad-Token: <NOMAD_TOKEN_SECRET_ID>\" \\\n    https://localhost:4646/v1/acl/role/77c50812-fcdd-701b-9f1a-6cf55387b09d\n```\n\n----------------------------------------\n\nTITLE: Fetching ACL token information in Nomad\nDESCRIPTION: This example shows how to set the NOMAD_TOKEN environment variable and then use the 'nomad acl token self' command to fetch detailed information about the current ACL token, including its accessor ID, secret ID, name, type, and other attributes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/token/self.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ export NOMAD_TOKEN=85310d07-9afa-ef53-0933-0c043cd673c7\n\n$ nomad acl token self\nAccessor ID  = 9c2d1b3a-cbc3-d9a0-3df9-5a382545a819\nSecret ID    = 85310d07-9afa-ef53-0933-0c043cd673c7\nName         = Bootstrap Token\nType         = management\nGlobal       = true\nCreate Time  = 2022-08-23 10:35:32.371025521 +0000 UTC\nExpiry Time  = <none>\nCreate Index = 8\nModify Index = 8\nPolicies     = n/a\nRoles        = n/a\n```\n\n----------------------------------------\n\nTITLE: Creating a Nomad Variable with Put Command\nDESCRIPTION: This example demonstrates how to create or update a variable at the path 'secret/creds' with a passcode item. The command shows the usage of the nomad var put command with table output format.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad var put -out=table secret/creds passcode=my-long-passcode\nSuccessfully created variable \"secret/creds\"!\n\nNamespace   = default\nPath        = secret/creds\nCreate Time = 2022-08-23T11:14:37-04:00\nCheck Index = 116\n\nItems\npasscode = my-long-passcode\n```\n\n----------------------------------------\n\nTITLE: Executing Nomad Server Force-Leave Command in Shell\nDESCRIPTION: This example demonstrates how to use the `nomad server force-leave` command to force-leave a server named 'node1' from the Nomad cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/server/force-leave.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad server force-leave node1\n\n```\n\n----------------------------------------\n\nTITLE: Creating OIDC Identity Provider\nDESCRIPTION: Establishes an OIDC identity provider in AWS IAM for Nomad integration. Requires the certificate domain name and configures the client ID list and certificate thumbprint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/aws-oidc-provider.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"tls_certificate\" \"example\" {\n  url = <CERT_DOMAIN_NAME>\n}\n\nresource \"aws_iam_openid_connect_provider\" \"nomad\" {\n  # Nomad HTTPS URL\n  url = <CERT_DOMAIN_NAME>\n\n  client_id_list = [\n    \"aws\",\n  ]\n\n  thumbprint_list = [data.tls_certificate.example.certificates.0.sha1_fingerprint]\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Nomad UI for a Specific Allocation in Shell\nDESCRIPTION: Example of using the 'nomad ui' command with an allocation identifier to open the Nomad UI directly to the allocation details page.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/ui.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad ui d4005969\nOpening URL \"http://127.0.0.1:4646/ui/allocations/d4005969-b16f-10eb-4fe1-a5374986083d\"\n```\n\n----------------------------------------\n\nTITLE: Completing OIDC Authentication with curl\nDESCRIPTION: Shell command using curl to complete the OIDC authentication process. The command makes a POST request with a JSON payload containing the authorization code and other required parameters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/oidc.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://localhost:4646/v1/acl/oidc/complete-auth\n```\n\n----------------------------------------\n\nTITLE: Using nomad alloc status command\nDESCRIPTION: Shows the basic usage of the 'nomad alloc status' command, including the command syntax and required arguments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/status.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad alloc status [options] <allocation>\n```\n\n----------------------------------------\n\nTITLE: Nomad Autopilot Configuration Success Output\nDESCRIPTION: Displays the expected output message when Autopilot configuration is successfully updated.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/autopilot/set-config.mdx#2025-04-19_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nConfiguration updated!\n```\n\n----------------------------------------\n\nTITLE: Using Functions in HCL Expressions\nDESCRIPTION: An example showing the basic syntax for calling a built-in function in HCL. This demonstrates calling the max() function with three integer arguments to find the maximum value.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmax(5, 12, 9)\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Stopping a Job in JSON\nDESCRIPTION: Shows a sample JSON response after stopping a job. Includes the evaluation ID, creation index, and job modification index.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EvalID\": \"d092fdc0-e1fd-2536-67d8-43af8ca798ac\",\n  \"EvalCreateIndex\": 35,\n  \"JobModifyIndex\": 34\n}\n```\n\n----------------------------------------\n\nTITLE: Serial Update Configuration\nDESCRIPTION: Configuration for serial updates, processing one task group at a time with default health timing.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/update.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nupdate {\n  max_parallel = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading from Private DigitalOcean Spaces in Nomad\nDESCRIPTION: Example for downloading from private DigitalOcean Spaces buckets, requiring the s3:: prefix and restructuring of the URL to move the bucket name to the path component.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/artifact.mdx#2025-04-19_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\nartifact {\n  source = \"s3::https://sfo3.digitaloceanspaces.com/my-bucket-example/my_app.tar.gz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ACL Auth Method in Nomad Using curl\nDESCRIPTION: Shell command for making a POST request to update an existing ACL auth method by its name. Requires a management token and the updated JSON payload.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/auth-methods.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --header \"X-Nomad-Token: <NOMAD_TOKEN_SECRET_ID>\" \\\n    --data @payload.json \\\n    https://localhost:4646/v1/acl/auth-method/example-acl-auth-method\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Compact Function Usage in Nomad Shell\nDESCRIPTION: This example shows how the compact function removes empty string elements from a list. It takes a list containing both non-empty and empty strings as input and returns a new list with only the non-empty strings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/compact.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> compact([\"a\", \"\", \"b\", \"c\"])\n[\n  \"a\",\n  \"b\",\n  \"c\",\n]\n```\n\n----------------------------------------\n\nTITLE: Computing MD5 Hash in Shell\nDESCRIPTION: This example demonstrates how to use the md5 function to compute the MD5 hash of the string \"hello world\". The function returns the hash encoded as lowercase hexadecimal digits.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/crypto/md5.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> md5(\"hello world\")\n5eb63bbbe01eeed093cb22bb8f5acdc3\n```\n\n----------------------------------------\n\nTITLE: Using nomad quota status command\nDESCRIPTION: This snippet shows the basic usage of the nomad quota status command. It requires a quota name as an argument and supports various options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/quota/status.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad quota status [options] <quota_name>\n```\n\n----------------------------------------\n\nTITLE: Exchanging a One-Time Token\nDESCRIPTION: This endpoint exchanges a one-time token for the original ACL token used to create it. It requires any valid ACL token.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    -d '{ \"OneTimeSecretID\": \"aa534e09-6a07-0a45-2295-a7f77063d429\" } \\\n    https://localhost:4646/v1/acl/token/onetime/exchange\n```\n\n----------------------------------------\n\nTITLE: Basic Allocation Signal Examples\nDESCRIPTION: Demonstrates basic usage of the alloc signal command, including an example of signaling an allocation and attempting to signal a non-existent task.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/signal.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc signal eb17e557\n\n$ nomad alloc signal eb17e557 redis\nCould not find task named: redis, found:\n* test\n<blocking>\n```\n\n----------------------------------------\n\nTITLE: Querying Evaluations Count API\nDESCRIPTION: Example curl commands demonstrating how to query the Nomad API endpoint for counting evaluations, with and without prefix filtering.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/evaluations.mdx#2025-04-19_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/evaluations/count\n\n$ curl \\\n    https://localhost:4646/v1/evaluations/count?prefix=25ba81\n```\n\n----------------------------------------\n\nTITLE: Using nomad deployment fail command\nDESCRIPTION: This snippet shows the basic usage of the 'nomad deployment fail' command. It requires a deployment ID or prefix as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/deployment/fail.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad deployment fail [options] <deployment id>\n```\n\n----------------------------------------\n\nTITLE: Creating an ACL Binding Rule with escaped selector on Windows\nDESCRIPTION: Example of creating an ACL Binding Rule where the selector needs to be escaped on Windows machines via PowerShell. It demonstrates the different escaping method required for Windows environments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/binding-rule/create.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad.exe acl binding-rule create \\\n    -description \"example binding rule\" \\\n    -auth-method \"auth0\" \\\n    -bind-type \"role\" \\\n    -bind-name \"eng-ro\" \\\n    -selector=\"`\"project-developer`\"\nID           = 698fdad6-dcb3-79dd-dc72-b43374057dea\nDescription  = example binding rule\nAuth Method  = auth0\nSelector     = \"\\\"project-developer\\\" in list.roles\"\nBind Type    = role\nBind Name    = eng-ro\nCreate Time  = 2022-12-20 11:15:22.582568 +0000 UTC\nModify Time  = 2022-12-20 11:15:22.582568 +0000 UTC\nCreate Index = 14\nModify Index = 14\n```\n\n----------------------------------------\n\nTITLE: Using Go Template for Namespace Status Display\nDESCRIPTION: Shows how to use the -t flag with a Go template to format and display specific namespace information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/namespace/status.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad namespace status -t {{.Description}} default\nDefault shared namespace\n```\n\n----------------------------------------\n\nTITLE: Health Check Response - JSON\nDESCRIPTION: JSON response showing health status of client and server.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n{\n  \"client\": {\n    \"message\": \"ok\",\n    \"ok\": true\n  },\n  \"server\": {\n    \"message\": \"ok\",\n    \"ok\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Launching Nomad Device Plugin\nDESCRIPTION: Series of commands to build the plugin launcher and fs-device plugin, then launch and interact with the plugin. Shows both basic launch and configuration-based launch scenarios.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/plugins/shared/cmd/launcher/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Current working directory should be the root folder: github.com/hashicorp/nomad\n\n# Build the plugin launcher\n$ go build github.com/hashicorp/nomad/plugins/shared/cmd/launcher/\n\n# Build the example fs-device plugin\n$ go build -o fs-device github.com/hashicorp/nomad/plugins/device/cmd/example/cmd\n\n# Launch the plugin\n$ ./launcher device ./fs-device\n> Availabile commands are: exit(), fingerprint(), stop_fingerprint(), stats(), stop_stats(), reserve(id1, id2, ...)\n>  2018-08-28T14:54:45.658-0700 [INFO ] nomad-plugin-launcher.fs-device: config set: @module=example-fs-device config=\"example.Config{Dir:\".\", ListPeriod:\"5s\", StatsPeriod:\"5s\", UnhealthyPerm:\"-rwxrwxrwx\"}\" timestamp=2018-08-28T14:54:45.658-0700\n\n^C\n2018-08-28T14:54:54.727-0700 [ERROR] nomad-plugin-launcher: error interacting with plugin: error=interrupted\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Lets launch changing the configuration\n$ cat <<\\EOF >fs-device.config\n> config {\n>   dir = \"./plugins\"\n> }\n> EOF\n\n$ ./launcher device ./fs-device ./fs-device.config\n2018-08-28T14:59:45.886-0700 [INFO ] nomad-plugin-launcher.fs-device: config set: @module=example-fs-device config=\"example.Config{Dir:\"./plugins\", ListPeriod:\"5s\", StatsPeriod:\"2s\", UnhealthyPerm:\"-rwxrwxrwx\"}\" timestamp=2018-08-28T14:59:45.886-0700\n> Availabile commands are: exit(), fingerprint(), stop_fingerprint(), stats(), stop_stats(), reserve(id1, id2, ...)\n>  fingerprint()\n>  > fingerprint: &device.FingerprintResponse{\n    Devices: {\n        &device.DeviceGroup{\n            Vendor:  \"nomad\",\n            Type:    \"file\",\n            Name:    \"mock\",\n            Devices: {\n                &device.Device{\n                    ID:         \"serve.go\",\n                    Healthy:    true,\n                    HealthDesc: \"\",\n                    HwLocality: (*device.DeviceLocality)(nil),\n                },\n            },\n            Attributes: {},\n        },\n    },\n    Error: nil,\n}\n^C\n2018-08-28T15:00:00.329-0700 [ERROR] nomad-plugin-launcher: error interacting with plugin: error=interrupted\n```\n\n----------------------------------------\n\nTITLE: Pausing Deployment with cURL in Shell\nDESCRIPTION: This snippet shows how to use cURL to send a POST request to pause a deployment. It demonstrates the endpoint structure and how to include the deployment ID in the URL.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/deployments.mdx#2025-04-19_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    https://localhost:4646/v1/deployment/pause/5456bd7a-9fc0-c0dd-6131-cbee77f57577\n```\n\n----------------------------------------\n\nTITLE: Listing Deployments with Prefix - Shell Request\nDESCRIPTION: Sample curl command to list deployments filtered by ID prefix.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/deployments.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/deployments?prefix=25ba81c\n```\n\n----------------------------------------\n\nTITLE: Filtering recommendations by job and group\nDESCRIPTION: An example of using the `nomad recommendation list` command with the `-job` and `-group` options to filter recommendations for a specific job and task group.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/recommendation/list.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad recommendation list -job=example -group=cache\nID                                    Job      Group  Task   Resource  Value\n68236421-c90f-efa6-fc02-37ae2d59bf03  example  cache  redis  CPU       57\n980c2554-7a1b-0c51-933a-f46850a228bd  example  cache  redis  MemoryMB  10\n```\n\n----------------------------------------\n\nTITLE: Configuring IPC_LOCK Capability in Nomad Client for Exec Driver\nDESCRIPTION: Configuration for allowing the ipc_lock capability in the Nomad Client exec driver plugin. This is required for tasks that use the mlock system call in Nomad 1.6.0.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/upgrade/upgrade-specific.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"exec\" {\n  config {\n    allow_caps = [\"audit_write\", \"chown\", \"dac_override\", \"fowner\", \"fsetid\",\n      \"kill\", \"mknod\", \"net_bind_service\", \"setfcap\", \"setgid\", \"setpcap\",\n      \"setuid\", \"sys_chroot\", \"ipc_lock\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pass-Through Strategy in Policy Check\nDESCRIPTION: HCL configuration block showing how to implement the pass-through strategy within a policy check block. Supports optional max_scale_up and max_scale_down parameters for controlling scaling operations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/strategy/pass-through.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ncheck \"pass-through-check\" {\n  # ...\n  strategy \"pass-through\" {}\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad Volume Snapshot Delete Command\nDESCRIPTION: The basic syntax for using the 'nomad volume snapshot delete' command, which requires both the plugin ID and the snapshot ID as arguments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/snapshot-delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad volume snapshot delete [plugin_id] [snapshot_id]\n```\n\n----------------------------------------\n\nTITLE: Forcing Periodic Job Evaluation with Monitoring\nDESCRIPTION: This example demonstrates forcing the evaluation of a job named 'example' while monitoring the placement process. It shows the output including evaluation triggering, allocation creation, and status changes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/periodic-force.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job periodic force example\n==> Monitoring evaluation \"54b2d6d9\"\n    Evaluation triggered by job \"example/periodic-1555094493\"\n    Allocation \"637aee17\" created: node \"a35ab8fc\", group \"cache\"\n    Allocation \"637aee17\" status changed: \"pending\" -> \"running\" (Tasks are running)\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"54b2d6d9\" finished with status \"complete\"\n```\n\n----------------------------------------\n\nTITLE: Reading Scheduler Configuration with cURL\nDESCRIPTION: Example request to retrieve the current scheduler configuration using cURL against the Nomad API endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/scheduler.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/operator/scheduler/configuration\n```\n\n----------------------------------------\n\nTITLE: Configuring Virt Task Driver Plugin in Nomad\nDESCRIPTION: This HCL configuration block shows the default plugin configuration for the Virt task driver in Nomad. It specifies the data directory, allowed image paths, and emulator settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/virt/install.mdx#2025-04-19_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"nomad-driver-driver\" {\n  config {\n    data_dir     = \"/var/lib/virt\"\n    image_paths  = [\"/var/lib/virt\", \"${ALLOC_DIR}\"]\n\n    emulator {\n      uri      = \"qemu:///system\"\n      user     = \"\"\n      password = \"\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Access Rules in Nomad\nDESCRIPTION: Example of setting read-only access policy for agent operations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/acl-policy.mdx#2025-04-19_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nagent {\n  policy = \"read\"\n}\n```\n\n----------------------------------------\n\nTITLE: Status with Placement Failures\nDESCRIPTION: Shows job status information including placement failures and resource exhaustion details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/status.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job status example\nID            = example\nName          = example\nSubmit Date   = 07/25/17 15:55:27 UTC\nType          = service\nPriority      = 50\nDatacenters   = dc1\nStatus        = running\nPeriodic      = false\nParameterized = false\n\nSummary\nTask Group  Queued  Starting  Running  Failed  Complete  Lost\ncache       1       0         4        0       0         0\n\nPlacement Failure\nTask Group \"cache\":\n  * Resources exhausted on 1 nodes\n  * Dimension \"cpu\" exhausted on 1 nodes\n\nLatest Deployment\nID          = bb4b2fb1\nStatus      = running\nDescription = Deployment is running\n\nDeployed\nTask Group  Desired  Placed  Healthy  Unhealthy\ncache       5        4       4        0\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created   Modified\n048c1e9e  3f38ecb4  cache       0        run      running  5m ago    5m ago\n250f9dec  3f38ecb4  cache       0        run      running  5m ago    5m ago\n2eb772a1  3f38ecb4  cache       0        run      running  5m ago    5m ago\na17b7d3d  3f38ecb4  cache       0        run      running  5m ago    5m ago\n```\n\n----------------------------------------\n\nTITLE: Retrieving Autopilot Configuration via GET Request\nDESCRIPTION: This shell command shows how to retrieve the current Autopilot configuration using a curl GET request to the /v1/operator/autopilot/configuration endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/autopilot.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/operator/autopilot/configuration\n```\n\n----------------------------------------\n\nTITLE: Volume Creation Command Output (Shell)\nDESCRIPTION: Shell session showing the creation of a volume using the nomad volume create command and its output including volume details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/host.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume create ./volume.hcl\n==> Created host volume database with ID 0c903229-311d-ba8a-f77e-45c31b83fab3\n✓ Host volume \"0c903229\" ready\n\n 2025-01-06T16:56:09-05:00\n ID        = 0c903229-311d-ba8a-f77e-45c31b83fab3\n Name      = database\n Namespace = default\n Plugin ID = external-plugin\n Node ID   = cfe033a7-50de-2c46-cd18-12be7429eeb3\n Node Pool = default\n Capacity  = 50 GiB\n State     = ready\n Host Path = /run/nomad/dev/alloc_mounts/0c903229-311d-ba8a-f77e-45c31b83fab3\n```\n\n----------------------------------------\n\nTITLE: Restoring Nomad Snapshot Example Command\nDESCRIPTION: Example command showing how to restore a Nomad snapshot from a backup file named backup.snap\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/snapshot/restore.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator snapshot restore backup.snap\n```\n\n----------------------------------------\n\nTITLE: Nomad Job Specification with Device\nDESCRIPTION: Example job specification showing how to request a device in a Nomad job.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/plugins/device/cmd/example/README.md#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\njob \"job\" {\n  group \"grp\" {\n    task \"tsk\" {\n      driver = \"...\"\n      config {}\n      resources {\n        device \"nomad/file/mock\" {\n          count = 1\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Indented Heredoc Strings in HCL Blocks\nDESCRIPTION: Example of the indented heredoc string variant introduced by <<-, which automatically trims leading spaces based on the line with the smallest indentation. This improves readability in indented blocks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/expressions.mdx#2025-04-19_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nblock {\n  value = <<-EOF\n  hello\n    world\n  EOF\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Service Command Usage\nDESCRIPTION: The basic command syntax for using the Nomad service CLI command with subcommands and options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/service/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnomad service <subcommand> [options]\n```\n\n----------------------------------------\n\nTITLE: Reading Single Plugin API Response\nDESCRIPTION: Sample JSON response showing detailed plugin information including controller and node details, health status, and capabilities.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/plugins.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"ID\": \"example_plugin_id\",\n    \"Provider\": \"aws.ebs\",\n    \"Version\": \"1.0.1\",\n    \"ControllersRequired\": true,\n    \"ControllersHealthy\": 1,\n    \"Controllers\": {\n      \"example_node_id\": {\n        \"PluginID\": \"example_plugin_id\",\n        \"Provider\": \"aws.ebs\",\n        \"ProviderVersion\": \"1.0.1\",\n        \"AllocID\": \"alloc-id\",\n        \"Healthy\": true,\n        \"HealthDescription\": \"healthy\",\n        \"UpdateTime\": \"2020-01-31T00:00:00.000Z\",\n        \"RequiresControllerPlugin\": true,\n        \"RequiresTopologies\": true,\n        \"ControllerInfo\": {\n          \"SupportsReadOnlyAttach\": true,\n          \"SupportsAttachDetach\": true,\n          \"SupportsListVolumes\": true,\n          \"SupportsListVolumesAttachedNodes\": false\n        }\n      }\n    },\n    \"NodesHealthy\": 1,\n    \"Nodes\": {\n      \"example_node_id\": {\n        \"PluginID\": \"example_plugin_id\",\n        \"Provider\": \"aws.ebs\",\n        \"ProviderVersion\": \"1.0.1\",\n        \"AllocID\": \"alloc-id\",\n        \"Healthy\": true,\n        \"HealthDescription\": \"healthy\",\n        \"UpdateTime\": \"2020-01-30T00:00:00.000Z\",\n        \"RequiresControllerPlugin\": true,\n        \"RequiresTopologies\": true,\n        \"NodeInfo\": {\n          \"ID\": \"example_node_id\",\n          \"MaxVolumes\": 51,\n          \"AccessibleTopology\": {\n            \"key\": \"val2\"\n          },\n          \"RequiresNodeStageVolume\": true\n        }\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Paginated Node Listing\nDESCRIPTION: Example showing how to paginate through nodes in a pool using the -per-page option, including the next page token information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/nodes.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node pool nodes -per-page=2 prod\nID        DC   Name         Class   Drain  Eligibility  Status\n31c5347f  dc2  us-client-3  <none>  false  eligible     ready\n3ed547cd  dc1  us-client-1  <none>  false  eligible     ready\n\nResults have been paginated. To get the next page run:\n\nnomad node pool nodes -per-page=2 prod -page-token 6e98e378-b41a-86ac-8e5e-5ca8ab66236d\n```\n\n----------------------------------------\n\nTITLE: Nomad ACL Role Update Command Syntax\nDESCRIPTION: Basic command syntax for updating an existing ACL role in Nomad. The command requires a role ID as an argument and supports various options for modifying role properties.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/role/update.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl role update [options] <role_id>\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Storage Options in Nomad\nDESCRIPTION: Example demonstrating how to configure storage options for Docker containers.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  storage_opt = {\n    size = \"40G\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of timeadd Function in Shell Session\nDESCRIPTION: Shows an example of using the timeadd function to add 10 minutes to a timestamp. The input timestamp is in RFC 3339 format, and the result is a new timestamp with the specified duration added.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/datetime/timeadd.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> timeadd(\"2017-11-22T00:00:00Z\", \"10m\")\n2017-11-22T00:10:00Z\n```\n\n----------------------------------------\n\nTITLE: Sample ACL Binding Rule Response\nDESCRIPTION: JSON response returned when retrieving a binding rule. Contains details such as authentication method, bind type, bind name, description, and selector expression.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/binding-rules.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AuthMethod\": \"example-acl-auth-method\",\n  \"BindName\": \"role\",\n  \"BindType\": \"role\",\n  \"CreateIndex\": 16,\n  \"CreateTime\": \"2022-12-16T10:29:07.248465Z\",\n  \"Description\": \"updated-acl-binding-rule\",\n  \"ID\": \"5da76548-1a60-b8fb-f9be-c7736a5bca09\",\n  \"ModifyIndex\": 17,\n  \"ModifyTime\": \"2022-12-19T16:40:52.602004Z\",\n  \"Selector\": \"engineering in list.roles\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using trimsuffix Function to Remove a Suffix from a String in Nomad\nDESCRIPTION: Demonstrates how to use the trimsuffix function to remove the suffix 'world' from the string 'helloworld', resulting in 'hello'. This function is useful for string manipulation in Nomad configuration files.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/trimsuffix.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> trimsuffix(\"helloworld\", \"world\")\nhello\n```\n\n----------------------------------------\n\nTITLE: Failing Deployment - JSON Response\nDESCRIPTION: Sample JSON response after marking a deployment as failed.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/deployments.mdx#2025-04-19_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EvalID\": \"0d834913-58a0-81ac-6e33-e452d83a0c66\",\n  \"EvalCreateIndex\": 20,\n  \"DeploymentModifyIndex\": 20,\n  \"RevertedJobVersion\": 1,\n  \"Index\": 20\n}\n```\n\n----------------------------------------\n\nTITLE: Task-Specific Signal Command Examples\nDESCRIPTION: Shows how to use the -task option to specify tasks and demonstrates option precedence when using both argument and -task option.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/signal.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc signal -task redis eb17e557\n\n$ nomad alloc signal -task redis eb17e557 api\n```\n\n----------------------------------------\n\nTITLE: GC All Allocations API Request\nDESCRIPTION: Example request to garbage collect all stopped allocations on a node.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api /v1/client/gc\n```\n\n----------------------------------------\n\nTITLE: Nomad Eval List Example with Filtering\nDESCRIPTION: Demonstrates using the eval list command with pagination and status filtering. Shows output including evaluation IDs, priorities, triggers, job IDs, and other metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/eval/list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad eval list -per-page 3 -status complete\nID        Priority  Triggered By        Job ID   Namespace  Node ID  Status    Placement Failures\n456e37aa  50        deployment-watcher  example  default    <none>   complete  false\n1a1eafe6  50        alloc-stop          example  default    <node>   complete  false\n3411e37b  50        job-register        example  default    <node>   complete  false\n\nResults have been paginated. To get the next page run:\n\nnomad eval list -page-token 9ecffbba-73be-d909-5d7e-ac2694c10e0c\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Quota Specification Payload\nDESCRIPTION: Sample JSON payload for creating or updating a quota specification with resource limits\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/quotas.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"Name\": \"default-quota\",\n  \"Description\": \"Limit the shared default namespace\",\n  \"Limits\": [\n    {\n      \"Region\": \"global\",\n      \"RegionLimit\": {\n        \"CPU\": 2500,\n        \"MemoryMB\": 2000,\n        \"MemoryMaxMB\": 2000,\n        \"Devices\": [\n          {\n            \"Name\": \"nvidia/gpu/Tesla M60\",\n            \"Count\": 1\n          }\n        ],\n        \"VariablesLimit\": 1000\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the replace Function in HCL\nDESCRIPTION: This snippet shows the syntax for using the replace function in HCL. It takes three parameters: the original string, the substring to be replaced, and the replacement string.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/replace.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nreplace(string, substring, replacement)\n```\n\n----------------------------------------\n\nTITLE: Applying a Nomad Node Pool Specification via CLI\nDESCRIPTION: This shell command demonstrates how to apply a Nomad node pool specification using the 'nomad node pool apply' CLI command. The specification is read from a file named 'pool.nomad.hcl'.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/node-pool.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad node pool apply ./pool.nomad.hcl\nSuccessfully applied node pool \"example\"!\n```\n\n----------------------------------------\n\nTITLE: Subnet Bit Allocation Example\nDESCRIPTION: Shows how the additional bits are allocated when creating a subnet, demonstrating the relationship between network, subnet, and host portions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/ipnet/cidrsubnet.mdx#2025-04-19_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n      10 .        1 .        2 .    ?        0\n00001010   00000001   00000010 |   XXXX | 0000\n         parent network        | netnum | host\n```\n\nLANGUAGE: text\nCODE:\n```\n      10 .        1 .        2 .    15       0\n00001010   00000001   00000010 |   1111 | 0000\n         parent network        | netnum | host\n```\n\n----------------------------------------\n\nTITLE: Using nomad recommendation dismiss command\nDESCRIPTION: This snippet shows the basic usage syntax for the 'nomad recommendation dismiss' command. It requires at least one recommendation ID, and multiple IDs can be passed separated by spaces.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/recommendation/dismiss.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad recommendation dismiss [options] <recommendation_ids>\n```\n\n----------------------------------------\n\nTITLE: Nomad UI Keyboard Shortcuts Table\nDESCRIPTION: A markdown table showing the default keyboard shortcuts available in the Nomad UI for navigation and operation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/ui.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                  | Pattern    |\n| --------------------- | ----------- |\n| Go to Jobs | `g j` |\n| Go to Storage | `g r` |\n| Go to Servers | `g s` |\n| Go to Clients | `g c` |\n| Go to Topology | `g t` |\n| Go to Evaluations | `g e` |\n| Go to ACL Tokens | `g a` |\n| Next Subnav | `Shift + →` |\n| Previous Subnav | `Shift + ←` |\n| Next Main Section | `Shift + ↓` |\n| Previous Main Section | `Shift + ↑` |\n| Show Keyboard Shortcuts | `Shift + ?` |\n| Hide Keyboard Shortcuts | `Escape` |\n| Go Up a Level | `u` |\n```\n\n----------------------------------------\n\nTITLE: Using nomad monitor command\nDESCRIPTION: Basic usage syntax for the nomad monitor command. It shows how to invoke the command with options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/monitor.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad monitor [options]\n```\n\n----------------------------------------\n\nTITLE: Read Dynamic Host Volume Request Example\nDESCRIPTION: Sample curl command for retrieving dynamic host volume information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    https://localhost:4646/v1/volume/host/c0f7ee7d-5cc6-92fd-f2b5-14b79f01979f\n```\n\n----------------------------------------\n\nTITLE: Nomad Server Join Command Syntax\nDESCRIPTION: Basic command syntax for joining one or more Nomad servers. The command requires at least one server address and supports multiple addresses for joining multiple servers simultaneously.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/server/join.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad server join [options] <addr> [<addr>...]\n```\n\n----------------------------------------\n\nTITLE: Normalizing YAML Data using try Function in HCL\nDESCRIPTION: This snippet demonstrates how to use the try function to normalize data retrieved from an external system in YAML format. It creates a predictable data structure by providing fallback values for potentially missing attributes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/conversion/try.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  raw_value = yamldecode(\"${path.folder}/example.yaml\")\n  normalized_value = {\n    name   = tostring(try(local.raw_value.name, null))\n    groups = try(local.raw_value.groups, [])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Paginated JSON Variable Listing\nDESCRIPTION: Example showing paginated query results in JSON format with metadata\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/list.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad var list -out=json -namespace=\"*\" -per-page=1 nomad/jobs/variable/www\n{\n    \"Data\": [\n        {\n           \"Namespace\": \"default\",\n            \"Path\": \"nomad/jobs/variable/www\",\n            \"CreateIndex\": 1457,\n            \"ModifyIndex\": 1457,\n            \"CreateTime\": 1662061225600373000,\n            \"ModifyTime\": 1662061225600373000\n        }\n    ],\n    \"QueryMeta\": {\n        \"KnownLeader\": true,\n        \"LastContact\": 0,\n        \"LastIndex\": 43,\n        \"NextToken\": \"default.nomad/jobs/variable/www/nginx\",\n        \"RequestTime\": 875792\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an ACL Binding Rule with ClaimMapping selector\nDESCRIPTION: Example of creating an ACL Binding Rule where the selector uses a matching against a single ClaimMapping which uses 'owner' as its value. It demonstrates how to use selectors with ClaimMappings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/binding-rule/create.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl binding-rule create \\\n    -description \"example binding rule\" \\\n    -auth-method \"github\" \\\n    -bind-type \"role\" \\\n    -bind-name \"eng-ro\" \\\n    -selector=\"value.owner == user\"\nID           = 698fdad6-dcb3-79dd-dc72-b43374057dea\nDescription  = example binding rule\nAuth Method  = github\nSelector     = \"value.owner == user\"\nBind Type    = role\nBind Name    = eng-ro\nCreate Time  = 2022-12-20 11:15:22.582568 +0000 UTC\nModify Time  = 2022-12-20 11:15:22.582568 +0000 UTC\nCreate Index = 14\nModify Index = 14\n```\n\n----------------------------------------\n\nTITLE: Using Nomad ACL Token Delete Command - Basic Syntax\nDESCRIPTION: Shows the basic command syntax for deleting an ACL token using the token's AccessorID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/token/delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl token delete <token_accessor_id>\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad Operator Metrics Command\nDESCRIPTION: This snippet shows the basic usage syntax for the 'nomad operator metrics' command. It can be used with various options to query and format the metrics data.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/metrics.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator metrics [options]\n```\n\n----------------------------------------\n\nTITLE: Delete Service Registration Request Example\nDESCRIPTION: Sample cURL request to delete a specific service registration by service name and ID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/services.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    https://localhost:4646/v1/service/example-cache-redis/_nomad-task-ba731da0-6df9-9858-ef23-806e9758a899-redis-example-cache-redis-db\n```\n\n----------------------------------------\n\nTITLE: Calculating Total CPU Cores Formula\nDESCRIPTION: Formula for calculating the total number of CPU cores by summing the number of performance cores and efficiency cores.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/cpu.mdx#2025-04-19_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncores = p_cores + e_cores\n```\n\n----------------------------------------\n\nTITLE: Batching Allocation Restarts in Nomad Job\nDESCRIPTION: This example shows how to batch allocation restarts using the '-batch-size' flag. It restarts allocations in batches of 2, demonstrating how to control the number of simultaneous restarts to manage the impact on the system.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/restart.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job restart -batch-size=2 example\n==> 2023-02-28T17:40:58-05:00: Restarting 5 allocations\n==> 2023-02-28T17:40:58-05:00: Restarting 1st batch of 2 allocations\n    2023-02-28T17:40:58-05:00: Restarting running tasks in allocation \"653f983e\" for group \"web\"\n    2023-02-28T17:40:58-05:00: Restarting running tasks in allocation \"4d18e545\" for group \"web\"\n==> 2023-02-28T17:40:58-05:00: Restarting 2nd batch of 2 allocations\n    2023-02-28T17:40:58-05:00: Restarting running tasks in allocation \"32e143f8\" for group \"proxy\"\n    2023-02-28T17:40:58-05:00: Restarting running tasks in allocation \"4fd581ee\" for group \"proxy\"\n==> 2023-02-28T17:40:59-05:00: Restarting 3rd batch of 1 allocations\n    2023-02-28T17:40:59-05:00: Restarting running tasks in allocation \"77d5c4f6\" for group \"proxy\"\n==> 2023-02-28T17:40:59-05:00: Finished job restart\n\nAll allocations restarted successfully!\n```\n\n----------------------------------------\n\nTITLE: Sample JWT Claims Structure with Nested Data\nDESCRIPTION: Example of decoded JWT claims showing both top-level and nested data structures. This example demonstrates the claim structure that would be referenced using direct keys or JSON Pointer syntax in the claim mappings configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/partials/jwt_claim_mapping_details.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"division\": \"North America\",\n  \"groups\": {\n    \"primary\": \"Engineering\",\n    \"secondary\": \"Software\"\n  },\n  \"iss\": \"https://my-corp-app-name.auth0.com/\",\n  \"sub\": \"auth0|eiw7OWoh5ieSh7ieyahC3ief0uyuraphaengae9d\",\n  \"aud\": \"V1RPi2MYptMV1RPi2MYptMV1RPi2MYpt\",\n  \"iat\": 1589224148,\n  \"exp\": 1589260148,\n  \"nonce\": \"eKiihooH3Fah8Ieshah4leeti6ien3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Registry Authentication File Path for Podman in Nomad (Shell)\nDESCRIPTION: Configures the environment variable to specify the location of the registry authentication file for Nomad and the Podman driver.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\nREGISTRY_AUTH_FILE=/etc/nomad.d/registry/auth.json\n```\n\n----------------------------------------\n\nTITLE: Querying Nomad Autoscaler Health API\nDESCRIPTION: Shows how to use curl to query the Nomad Autoscaler agent health endpoint. This endpoint returns a 200 OK status if the agent is alive, or a 503 ServiceUnavailable if not.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/api.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl https://localhost:8080/v1/health\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Job Summary in Nomad API\nDESCRIPTION: Sample response showing a job summary including task group allocation counts, child job information, and metadata indexes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"JobID\": \"example\",\n  \"Summary\": {\n    \"cache\": {\n      \"Queued\": 0,\n      \"Complete\": 0,\n      \"Failed\": 0,\n      \"Running\": 1,\n      \"Starting\": 0,\n      \"Lost\": 0\n    }\n  },\n  \"Children\": {\n    \"Pending\": 0,\n    \"Running\": 0,\n    \"Dead\": 0\n  },\n  \"CreateIndex\": 7,\n  \"ModifyIndex\": 13\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Nomad Scheduler Algorithm to Spread\nDESCRIPTION: Example showing how to modify the scheduler algorithm to use spread allocation strategy instead of binpack.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/scheduler/set-config.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator scheduler set-config -scheduler-algorithm=spread\nScheduler configuration updated!\n```\n\n----------------------------------------\n\nTITLE: Using format Function in Shell Session\nDESCRIPTION: Shows examples of using the format function to create formatted strings. It demonstrates formatting with string (%s) and integer (%d) placeholders.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/format.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> format(\"Hello, %s!\", \"Ander\")\nHello, Ander!\n> format(\"There are %d lights\", 4)\nThere are 4 lights\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad TLS Command in Bash\nDESCRIPTION: This snippet demonstrates the usage syntax for the `nomad tls` command. It shows how to run the command with subcommands and options, and how to access help for specific subcommands.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/tls/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnomad tls <subcommand> <subcommand> [options]\n```\n\nLANGUAGE: bash\nCODE:\n```\nnomad tls <subcommand> -h\n```\n\n----------------------------------------\n\nTITLE: Adding Labels to Podman Container\nDESCRIPTION: Applies custom labels to the container for identification or metadata purposes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_18\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  labels = {\n    \"nomad\" = \"job\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HashiCorp Repository on Fedora\nDESCRIPTION: Adds the official HashiCorp Linux repository to dnf package manager for Fedora systems.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo dnf config-manager addrepo --from-repofile=https://rpm.releases.hashicorp.com/fedora/hashicorp.repo\n```\n\n----------------------------------------\n\nTITLE: Filtering Nodes by HTTPAddr\nDESCRIPTION: Example showing how to filter nodes by their HTTP address using a regular expression pattern. This demonstrates how to access fields in the full resource definition rather than the stub.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/index.mdx#2025-04-19_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator api -filter 'HTTPAddr matches \"10.0.0..+\"' /v1/nodes\n```\n\n----------------------------------------\n\nTITLE: Creating Portworx Volume in Nomad\nDESCRIPTION: Command to create a new Portworx volume using the specified HCL configuration file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/portworx-csi-plugin/README.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnomad volume create portworx-volume.hcl\n```\n\n----------------------------------------\n\nTITLE: Lock Release Request Payload - JSON\nDESCRIPTION: JSON payload for lock release containing path, namespace and lock ID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/variables/locks.mdx#2025-04-19_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Path\": \"example/first\",\n  \"Namespace\": \"prod\",\n  \"Lock\": {\n    \"ID\": \"670c7248-e2ef-f982-e4c5-f4437f75f1e4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic strrev Function Syntax in HCL\nDESCRIPTION: Demonstrates the basic syntax of the strrev function which takes a string parameter and returns the string with its characters reversed.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/strrev.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstrrev(string)\n```\n\n----------------------------------------\n\nTITLE: Job Scale Response in JSON\nDESCRIPTION: Response structure after a job scaling operation including evaluation details and job modification indices.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EvalCreateIndex\": 45,\n  \"EvalID\": \"116f3ede-f6a5-f6e7-2d0e-1fda136390f0\",\n  \"Index\": 45,\n  \"JobModifyIndex\": 44,\n  \"KnownLeader\": false,\n  \"LastContact\": 0,\n  \"Warnings\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Node Status with Running Allocations in Nomad CLI\nDESCRIPTION: Shows Nomad nodes with the count of running allocations by using the -allocs flag, providing a quick view of workload distribution.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/status.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node status -allocs\nID        Node Pool  DC   Name   Class   Drain  Eligibility  Status  Running Allocs\n4d2ba53b  default    dc1  node1  <none>  false  eligible     ready   1\n34dfba32  dev        dc1  node2  <none>  false  eligible     ready   3\n```\n\n----------------------------------------\n\nTITLE: Configuring denied host GIDs in Raw Exec plugin\nDESCRIPTION: Configuration for restricting which group IDs can run tasks with the raw_exec driver. This limits which system groups can be used to execute tasks for security purposes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/raw_exec.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  denied_host_gids = \"2,4-8\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an ACL Token\nDESCRIPTION: This endpoint deletes the ACL token by accessor. It requires management ACL and does not support blocking queries.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    https://localhost:4646/v1/acl/token/aa534e09-6a07-0a45-2295-a7f77063d429\n```\n\n----------------------------------------\n\nTITLE: Concatenating Lists using concat Function in Nomad Shell\nDESCRIPTION: This example demonstrates how to use the concat function to combine two lists. The function takes two lists as arguments and returns a single list containing all elements from both input lists.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/concat.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> concat([\"a\", \"\"], [\"b\", \"c\"])\n[\n  \"a\",\n  \"\",\n  \"b\",\n  \"c\",\n]\n```\n\n----------------------------------------\n\nTITLE: IPv4 and IPv6 Examples of cidrsubnets Function\nDESCRIPTION: Examples showing how to use the cidrsubnets function with both IPv4 and IPv6 prefixes. The function returns an array of subnet addresses in CIDR notation based on the specified newbits values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/ipnet/cidrsubnets.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> cidrsubnets(\"10.1.0.0/16\", 4, 4, 8, 4)\n[\n  \"10.1.0.0/20\",\n  \"10.1.16.0/20\",\n  \"10.1.32.0/24\",\n  \"10.1.48.0/20\",\n]\n\n> cidrsubnets(\"fd00:fd12:3456:7890::/56\", 16, 16, 16, 32)\n[\n  \"fd00:fd12:3456:7800::/72\",\n  \"fd00:fd12:3456:7800:100::/72\",\n  \"fd00:fd12:3456:7800:200::/72\",\n  \"fd00:fd12:3456:7800:300::/88\",\n]\n```\n\n----------------------------------------\n\nTITLE: Inspecting a scaling policy example\nDESCRIPTION: Example of inspecting a Nomad scaling policy that shows the policy ID, status, target, min/max values, and the full JSON policy configuration for a Prometheus-based autoscaling setup.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/scaling/policy-info.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad scaling policy info 31a53813-24df-b2ad-77dc-1b4bad4e7dca\n\nID      = 31a53813-24df-b2ad-77dc-1b4bad4e7dca\nEnabled = true\nTarget  = Namespace:default,Job:webapp,Group:demo\nMin     = 1\nMax     = 20\n\nPolicy:\n{\n    \"check\": [\n        {\n            \"avg_sessions\": [\n                {\n                    \"query\": \"scalar(sum(traefik_entrypoint_open_connections{entrypoint=\\\"horizontal-webapp\\\"}))\",\n                    \"source\": \"prometheus\",\n                    \"strategy\": [\n                        {\n                            \"target-value\": [\n                                {\n                                    \"target\": 10.0\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    \"cooldown\": \"1m\",\n    \"evaluation_interval\": \"30s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Upstream Configuration for API Service\nDESCRIPTION: Alternative service configuration without transparent proxy for the API service.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/service-mesh.mdx#2025-04-19_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"api\" {\n\n  # ...\n\n  service {\n    name = \"count-api\"\n    port = \"9001\"\n\n    connect {\n      sidecar_service {}\n    }\n  }\n\n  # ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Nomad Job Init Command Example\nDESCRIPTION: Demonstrates running the nomad job init command which generates an example job file in the current directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/init.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job init\nExample job file written to example.nomad.hcl\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Initial Token with Stdin Input\nDESCRIPTION: Example of bootstrapping the initial ACL token by providing the token through stdin using the '-' argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/bootstrap.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl bootstrap -\n2b778dd9-f5f1-6f29-b4b4-9a5fa948757a\nEOF\nAccessor ID  = 5b7fd453-d3f7-6814-81dc-fcfe6daedea5\nSecret ID    = 2b778dd9-f5f1-6f29-b4b4-9a5fa948757a\nName         = Bootstrap Token\nType         = management\nGlobal       = true\nPolicies     = n/a\nCreate Time  = 2017-09-11 17:38:10.999089612 +0000 UTC\nCreate Index = 7\nModify Index = 7\n```\n\n----------------------------------------\n\nTITLE: Listing ACL Auth Methods in Nomad\nDESCRIPTION: Shows an example of using the 'nomad acl auth-method list' command to list all ACL Auth Methods. The output displays the Name, Type, and Default status of each auth method.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/auth-method/list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl auth-method list\nName                     Type  Default\nexample-acl-auth-method  OIDC  false\n```\n\n----------------------------------------\n\nTITLE: Creating CSI Volume Snapshot (Shell)\nDESCRIPTION: Shell command to create a snapshot of a CSI volume. Uses curl to send a POST request with the JSON payload to the specified endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://localhost:4646/v1/volumes/snapshot\n```\n\n----------------------------------------\n\nTITLE: Using Sort Function with String List in Nomad\nDESCRIPTION: Demonstrates sorting a list of strings lexicographically using the sort function. The example shows how strings are sorted based on Unicode codepoints, with lower codepoints appearing first in the resulting array.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/sort.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> sort([\"e\", \"d\", \"a\", \"x\"])\n[\n  \"a\",\n  \"d\",\n  \"e\",\n  \"x\",\n]\n```\n\n----------------------------------------\n\nTITLE: Listing Evaluations in Nomad API\nDESCRIPTION: Makes a GET request to retrieve a list of all evaluations in Nomad. This endpoint supports blocking queries and requires the namespace:read-job ACL.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/evaluations.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/evaluations\n```\n\n----------------------------------------\n\nTITLE: Sample Response for ACL Binding Rules List\nDESCRIPTION: JSON response containing an array of binding rules with abbreviated details including ID, auth method, description, and creation/modification indices.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/binding-rules.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"AuthMethod\": \"auth0\",\n    \"CreateIndex\": 16,\n    \"Description\": \"updated-acl-binding-rule\",\n    \"Hash\": \"N7aEMsAfl3btWrZSwaWdzcRIAO3uRrRH2yQ8rPsuJ44=\",\n    \"ID\": \"5da76548-1a60-b8fb-f9be-c7736a5bca09\",\n    \"ModifyIndex\": 17\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: HTTP Basic Authentication for Artifact Downloads in Nomad\nDESCRIPTION: Demonstrates how to use HTTP basic authentication when downloading artifacts by including the credentials in the URL. Special characters in the username and password must be URL encoded.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/artifact.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nartifact {\n  source = \"https://exampleUser:pass%2Fword%21@example.com/file.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Audit Log Output in JSON\nDESCRIPTION: Sample audit log entries showing the OperationReceived and OperationComplete stages for a request.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/audit.mdx#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": \"2020-03-24T13:09:35.703869927-04:00\",\n  \"event_type\": \"audit\",\n  \"payload\": {\n    \"id\": \"8b826146-b264-af15-6526-29cb905145aa\",\n    \"stage\": \"OperationReceived\",\n    \"type\": \"audit\",\n    \"timestamp\": \"2020-03-24T13:09:35.703865005-04:00\",\n    \"version\": 1,\n    \"auth\": {\n      \"accessor_id\": \"a162f017-bcf7-900c-e22a-a2a8cbbcef53\",\n      \"name\": \"Bootstrap Token\",\n      \"global\": true,\n      \"create_time\": \"2020-03-24T17:08:35.086591881Z\"\n    },\n    \"request\": {\n      \"id\": \"02f0ac35-c7e8-0871-5a58-ee9dbc0a70ea\",\n      \"operation\": \"GET\",\n      \"endpoint\": \"/v1/job/web/summary\",\n      \"namespace\": {\n        \"id\": \"default\"\n      },\n      \"request_meta\": {\n        \"remote_address\": \"127.0.0.1:33648\",\n        \"user_agent\": \"Go-http-client/1.1\"\n      },\n      \"node_meta\": {\n        \"ip\": \"127.0.0.1:4646\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting the number of client nodes in debug capture\nDESCRIPTION: Example of using the nomad operator debug command to capture information from all servers and limit the number of client nodes to 1, with a duration of 5 seconds and 5-second intervals.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/debug.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator debug -duration 5s -interval 5s -server-id all -node-id all -max-nodes=1\nStarting debugger...\n\n          Servers: (3/3) [server1.global server2.global server3.global]\n          Clients: (1/3) [b547cd3a-085f-68c2-55f4-e99beebb0433]\n                   Max node count reached (1)\n         Interval: 5s\n         Duration: 5s\n\nCapturing cluster data...\n    Capture interval 0000\n    Capture interval 0001\n    Capture interval 0002\n    Capture interval 0003\nCreated debug archive: nomad-debug-2020-12-08-034113Z.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Setting Envoy Stats Tags for Connect Sidecar\nDESCRIPTION: HCL configuration for manually setting Envoy stats tags in a Connect sidecar proxy configuration. This overrides Nomad's automatic injection of the allocation ID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/upgrade/upgrade-specific.mdx#2025-04-19_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nconnect {\n  sidecar_service {\n    proxy {\n      config {\n        envoy_stats_tags = [\"nomad.alloc_id=<allocID>\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Reservation for Podman Container\nDESCRIPTION: Configures a soft limit for memory usage in the container, which becomes enforced during memory contention.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_21\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  memory_reservation = \"100m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting a task to its schedule in Nomad\nDESCRIPTION: Example of using 'nomad alloc pause' to return a task to its original schedule.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/pause.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc pause -state=scheduled 4d37a9d1 schedtask\n```\n\n----------------------------------------\n\nTITLE: Deleting a Namespace in Nomad\nDESCRIPTION: This example demonstrates how to delete a namespace named 'api-prod' using the Nomad CLI. The command returns a success message upon successful deletion of the namespace.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/namespace/delete.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad namespace delete api-prod\nSuccessfully deleted namespace \"api-prod\"!\n```\n\n----------------------------------------\n\nTITLE: Querying All Namespaces in Nomad\nDESCRIPTION: Example showing how to query jobs across all namespaces by providing a wildcard (*) as the namespace parameter to the API request.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/index.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl 'localhost:4646/v1/jobs?namespace=*'\n```\n\n----------------------------------------\n\nTITLE: Configuring Garbage Collection for Podman in Nomad (HCL)\nDESCRIPTION: Sets the garbage collection option for containers. When set to false, Nomad will not remove the container when the task exits.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_37\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"nomad-driver-podman\" {\n  config {\n    gc {\n      container = false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional File Content Loading in HCL\nDESCRIPTION: Demonstrates using fileexists in a ternary operation to either load a custom file's contents or use default content if the file doesn't exist.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/file/fileexists.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nfileexists(\"custom-section.sh\") ? file(\"custom-section.sh\") : local.default_content\n```\n\n----------------------------------------\n\nTITLE: Using parseint Function with Various Bases in Nomad\nDESCRIPTION: Examples of using the parseint function to convert string representations of integers in different bases (decimal, hexadecimal, binary, and base 62) to their numerical values. The function requires two parameters: the string to parse and the base to use for parsing.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/numeric/parseint.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> parseint(\"100\", 10)\n100\n\n> parseint(\"FF\", 16)\n255\n\n> parseint(\"-10\", 16)\n-16\n\n> parseint(\"1011111011101111\", 2)\n48879\n\n> parseint(\"aA\", 62)\n656\n\n> parseint(\"12\", 2)\n\nError: Invalid function argument\n\nInvalid value for \"number\" parameter: cannot parse \"12\" as a base 2 integer.\n```\n\n----------------------------------------\n\nTITLE: Node Metadata Response Format\nDESCRIPTION: Sample JSON response showing the structure of node metadata, including Meta (merged), Dynamic (API-set), and Static (config file) fields.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Meta\": {\n        \"connect.proxy_concurrency\": \"1\",\n        \"connect.sidecar_image\": \"docker.io/envoyproxy/envoy:v${NOMAD_envoy_version}\",\n        \"connect.gateway_image\": \"docker.io/envoyproxy/envoy:v${NOMAD_envoy_version}\",\n        \"connect.log_level\": \"debug\",\n        \"foo\": \"bar\"\n    },\n    \"Dynamic\": {\n        \"key_to_unset\": null,\n        \"foo\": \"bar\",\n        \"connect.log_level\": \"debug\"\n    },\n    \"Static\": {\n        \"connect.sidecar_image\": \"docker.io/envoyproxy/envoy:v${NOMAD_envoy_version}\",\n        \"connect.gateway_image\": \"docker.io/envoyproxy/envoy:v${NOMAD_envoy_version}\",\n        \"connect.log_level\": \"info\",\n        \"connect.proxy_concurrency\": \"1\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Variables on Command Line\nDESCRIPTION: Example showing how to set variable values using the -var command line option when running a Nomad job. This approach is useful for specifying individual variable values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/variables.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad job run -var=\"image_id=nginx:1.19\" example.nomad.hcl\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed Value Strategy in Nomad Policy\nDESCRIPTION: This snippet demonstrates how to configure the fixed-value strategy within a policy check. It includes the required 'value' parameter, which sets the target count for scaling.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/strategy/fixed-value.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ncheck \"fixed-value-check\" {\n  # ...\n  strategy \"fixed-value\" {\n    value = 3\n  }\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing QueryMultiple Function for APM Plugin in Go\nDESCRIPTION: The QueryMultiple function is similar to Query but allows returning multiple time series. It's used for Dynamic Application Sizing. This function should fetch data for multiple entities or metrics from the APM system.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/concepts/plugins/apm.mdx#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nQueryMultiple(query string, timeRange sdk.TimeRange) ([]sdk.TimestampedMetrics, error)\n```\n\n----------------------------------------\n\nTITLE: Using trim Function in Nomad Configuration\nDESCRIPTION: Demonstrates how to use the trim function to remove specified characters ('!' and '?') from both the start and end of a string. The function preserves characters in the middle of the string.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/trim.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> trim(\"?!hello?!\", \"!?\")\nhello\n```\n\n----------------------------------------\n\nTITLE: Listing Deployments - Shell Request\nDESCRIPTION: Sample curl command to list all deployments from the Nomad API.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/deployments.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/deployments\n```\n\n----------------------------------------\n\nTITLE: Simple Service Check Expose Configuration\nDESCRIPTION: Example of a minimal service check configuration using the expose parameter for automatic path generation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/expose.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ncheck {\n  expose   = true\n  type     = \"http\"\n  name     = \"dashboard-health\"\n  path     = \"/health\"\n  interval = \"10s\"\n  timeout  = \"3s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Volume Detach Command in CLI\nDESCRIPTION: Command syntax for detaching CSI volumes from nodes in Nomad. Requires volume ID and node ID as arguments. Volume must not be in use by any allocation. Supports node ID prefix unless node was garbage collected.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/detach.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad volume detach [options] [volume] [node]\n```\n\n----------------------------------------\n\nTITLE: Logging into Azure using CLI\nDESCRIPTION: Command to authenticate with Azure using the CLI tool. The output shows account information including subscription ID and tenant ID which are needed for subsequent steps.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/azure/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ az login\n\n[\n  {\n    \"cloudName\": \"AzureCloud\",\n    \"id\": \"SUBSCRIPTION_ID\",\n    \"isDefault\": true,\n    \"name\": \"Free Trial\",\n    \"state\": \"Enabled\",\n    \"tenantId\": \"TENANT_ID\",\n    \"user\": {\n      \"name\": \"rob@hashicorp.com\",\n      \"type\": \"user\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Directory Host Volume in Nomad HCL\nDESCRIPTION: A minimal volume specification for the custom-mkdir plugin that creates a basic directory for storage. This configuration assumes the plugin is located in the host volume plugin directory and is executable.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/plugins/storage/host-volumes.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntype      = \"host\"\nname      = \"mkdir-vol\"\nplugin_id = \"custom-mkdir\" # plugin filename\n```\n\n----------------------------------------\n\nTITLE: Basic fileexists Function Syntax in HCL\nDESCRIPTION: Demonstrates the basic syntax for using the fileexists function to check if a file exists at a specified path.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/file/fileexists.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfileexists(path)\n```\n\n----------------------------------------\n\nTITLE: Joining Nomad Agent Nodes - Shell Request\nDESCRIPTION: POST request to join multiple Nomad agent nodes to the cluster by specifying their addresses.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    \"https://localhost:4646/v1/agent/join?address=1.2.3.4&address=5.6.7.8\"\n```\n\n----------------------------------------\n\nTITLE: Join Function Examples in Nomad Configuration\nDESCRIPTION: Examples showing how the join function works with different inputs, including joining multiple strings and handling a single-element list.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/join.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> join(\", \", [\"foo\", \"bar\", \"baz\"])\nfoo, bar, baz\n> join(\", \", [\"foo\"])\nfoo\n```\n\n----------------------------------------\n\nTITLE: Node Pool Read Response in JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of the response when reading a specific node pool. It includes details such as creation index, description, metadata, and scheduler configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/node-pools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CreateIndex\": 11,\n  \"Description\": \"Production workloads\",\n  \"Meta\": {\n    \"env\": \"production\",\n    \"team\": \"engineering\"\n  },\n  \"ModifyIndex\": 11,\n  \"Name\": \"prod-eng\",\n  \"SchedulerConfiguration\": {\n    \"SchedulerAlgorithm\": \"spread\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Completing OIDC Authentication Request Payload in JSON\nDESCRIPTION: JSON payload for completing the OIDC authentication flow. It includes the auth method name, redirect URI, client nonce, state parameter, and authorization code returned from the OIDC provider.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/oidc.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AuthMethodName\": \"auth0\",\n  \"RedirectURI\": \"http://localhost:4649/oidc/callback\",\n  \"ClientNonce\": \"fpSPuaodKevKfDU3IeXb\",\n  \"State\": \"st_4i68Nt7FcxDsomestate\",\n  \"Code\": \"SplxlOBeZQQYbYS6WxSbIA\"\n}\n```\n\n----------------------------------------\n\nTITLE: Scale Method Implementation in Go\nDESCRIPTION: The Scale method is called during policy evaluation to perform scaling actions against a target. It takes a scaling action and configuration map as parameters and returns an error if the scaling operation fails.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/concepts/plugins/target.mdx#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nScale(action sdk.ScalingAction, config map[string]string) error\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Job Status Command Usage\nDESCRIPTION: Shows the basic syntax for using the nomad job status command with optional job ID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/status.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad job status [options] [job]\n```\n\n----------------------------------------\n\nTITLE: Using Filter with nomad operator api command\nDESCRIPTION: Example showing how to use the -filter flag with the nomad operator api command to filter API results. This is an alternative to using curl with the filter parameter.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/index.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator api -filter '<filter expression>' /v1/<path>\n```\n\n----------------------------------------\n\nTITLE: Defining setunion Function Syntax in HCL\nDESCRIPTION: This snippet shows the basic syntax for using the setunion function in HashiCorp Configuration Language. It takes multiple sets as arguments and returns a single set containing all unique elements.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/setunion.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsetunion(sets...)\n```\n\n----------------------------------------\n\nTITLE: Node Pool Create/Update Payload in JSON\nDESCRIPTION: This JSON snippet shows the structure of the payload used to create or update a node pool. It includes fields for name, description, metadata, and scheduler configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/node-pools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Name\": \"prod-eng\",\n  \"Description\": \"Production workloads\",\n  \"Meta\": {\n    \"env\": \"production\",\n    \"team\": \"engineering\"\n  },\n  \"SchedulerConfiguration\": {\n    \"SchedulerAlgorithm\": \"spread\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of cidrhost Function Usage\nDESCRIPTION: Provides examples of using the cidrhost function with both IPv4 and IPv6 addresses. It shows how different host numbers result in different IP addresses within the given network prefix.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/ipnet/cidrhost.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> cidrhost(\"10.12.127.0/20\", 16)\n10.12.112.16\n> cidrhost(\"10.12.127.0/20\", 268)\n10.12.113.12\n> cidrhost(\"fd00:fd12:3456:7890:00a2::/72\", 34)\nfd00:fd12:3456:7890::22\n```\n\n----------------------------------------\n\nTITLE: Formatting server members output using Go template\nDESCRIPTION: Example demonstrating the use of the -t flag to format and display server members information using a Go template, allowing for custom output formatting.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/server/members.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad server members -t '{{range .}}{{printf \"%s: %s\" .Name .Status }}{{end}}'\nbacon-mac.global: alive\n```\n\n----------------------------------------\n\nTITLE: Reviewing Node Events for Plan Rejection Ineligibility\nDESCRIPTION: Example node event message shown when a node is marked as ineligible for scheduling due to excessive plan rejections as detected by Nomad's plan rejection tracker.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/monitoring-nomad.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNode marked as ineligible for scheduling due to multiple plan rejections, refer to https://developer.hashicorp.com/nomad/s/port-plan-failure for more information\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Autopilot Command Usage\nDESCRIPTION: Shows the basic command syntax for setting Autopilot configuration in Nomad. Requires operator:write capability if ACLs are enabled.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/autopilot/set-config.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator autopilot set-config [options]\n```\n\n----------------------------------------\n\nTITLE: Deploying Kadalu CSI Controller in Nomad\nDESCRIPTION: Command to deploy the Kadalu CSI plugin controller using Nomad, with output showing the deployment process and status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/kadalu-csi/README.md#2025-04-19_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nomad run -var=\"volname=$volname\" -var=\"gluster_hosts=$gluster_hosts\" -var=\"gluster_volname=$gluster_volname\" $job_dir/controller.nomad\n==> 2021-09-20T18:23:07+05:30: Monitoring evaluation \"19317b74\"\n    2021-09-20T18:23:07+05:30: Evaluation triggered by job \"kadalu-csi-controller\"\n==> 2021-09-20T18:23:08+05:30: Monitoring evaluation \"19317b74\"\n    2021-09-20T18:23:08+05:30: Evaluation within deployment: \"d9ee4dd7\"\n    2021-09-20T18:23:08+05:30: Allocation \"d55e314d\" created: node \"4e105698\", group \"controller\"\n    2021-09-20T18:23:08+05:30: Evaluation status changed: \"pending\" -> \"complete\"\n==> 2021-09-20T18:23:08+05:30: Evaluation \"19317b74\" finished with status \"complete\"\n==> 2021-09-20T18:23:08+05:30: Monitoring deployment \"d9ee4dd7\"\n  ✓ Deployment \"d9ee4dd7\" successful\n\n    2021-09-20T18:23:28+05:30\n    ID          = d9ee4dd7\n    Job ID      = kadalu-csi-controller\n    Job Version = 0\n    Status      = successful\n    Description = Deployment completed successfully\n\n    Deployed\n    Task Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline\n    controller  1        1       1        0          2021-09-20T13:03:27Z\n```\n\n----------------------------------------\n\nTITLE: List CSI Snapshots Response Sample\nDESCRIPTION: Example JSON response showing the structure of CSI volume snapshot data including ID, size, creation time and source volume details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Snapshots\": [\n    {\n      \"ID\": \"snap-031f5f7e3406d594a\",\n      \"SizeBytes\": 10737418240,\n      \"CreateTime\": 1617909982,\n      \"IsReady\": false,\n      \"SourceVolumeID\": \"volume-id1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reversing a List using the reverse Function in Nomad Shell\nDESCRIPTION: This snippet demonstrates how to use the reverse function to reverse the order of elements in a list. It takes a list of integers [1, 2, 3] and returns a new list with the elements in reverse order [3, 2, 1].\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/reverse.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> reverse([1, 2, 3])\n[\n  3,\n  2,\n  1,\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring app-sizing-nomad Target Plugin in HCL\nDESCRIPTION: Basic agent configuration block for the app-sizing-nomad target plugin in Nomad Autoscaler Enterprise.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/target/app-sizing-nomad.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"app-sizing-nomad\" {\n  driver = \"app-sizing-nomad\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an ACL Binding Rule JSON Payload\nDESCRIPTION: JSON payload for updating an existing ACL Binding Rule. Only includes the fields that need to be modified, in this case changing just the description.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/binding-rules.mdx#2025-04-19_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Description\": \"new description\"\n}\n```\n\n----------------------------------------\n\nTITLE: Nomad Metrics Table\nDESCRIPTION: A tabular representation of Nomad's internal timing metrics showing metric names, descriptions, units, types, and dimensions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/metrics-reference.mdx#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| `nomad.nomad.fsm.persist`                               | Time elapsed to apply `Persist` raft entry                                                                                                             | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.fsm.register_job`                          | Time elapsed to apply `RegisterJob` raft entry                                                                                                         | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.fsm.register_node`                         | Time elapsed to apply `RegisterNode` raft entry                                                                                                        | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.fsm.update_eval`                           | Time elapsed to apply `UpdateEval` raft entry                                                                                                          | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.fsm.upsert_node_events`                    | Time elapsed to apply `UpsertNodeEvents` raft entry                                                                                                    | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.fsm.upsert_scaling_event`                  | Time elapsed to apply `UpsertScalingEvent` raft entry                                                                                                  | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.fsm.upsert_si_accessor`                    | Time elapsed to apply `UpsertSITokenAccessors` raft entry                                                                                              | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.fsm.upsert_vault_accessor`                 | Time elapsed to apply `UpsertVaultAccessor` raft entry                                                                                                 | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.job.allocations`                           | Time elapsed for `Job.Allocations` RPC call                                                                                                            | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.job.batch_deregister`                      | Time elapsed for `Job.BatchDeregister` RPC call                                                                                                        | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.job.deployments`                           | Time elapsed for `Job.Deployments` RPC call                                                                                                            | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.job.deregister`                            | Time elapsed for `Job.Deregister` RPC call                                                                                                             | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.job.dispatch`                              | Time elapsed for `Job.Dispatch` RPC call                                                                                                               | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.job.evaluate`                              | Time elapsed for `Job.Evaluate` RPC call                                                                                                               | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.job.evaluations`                           | Time elapsed for `Job.Evaluations` RPC call                                                                                                            | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.job.get_job_versions`                      | Time elapsed for `Job.GetJobVersions` RPC call                                                                                                         | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.job.get_job`                               | Time elapsed for `Job.GetJob` RPC call                                                                                                                 | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.job.latest_deployment`                     | Time elapsed for `Job.LatestDeployment` RPC call                                                                                                       | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.job.list`                                  | Time elapsed for `Job.List` RPC call                                                                                                                   | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.job.plan`                                  | Time elapsed for `Job.Plan` RPC call                                                                                                                   | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.job.register`                              | Time elapsed for `Job.Register` RPC call                                                                                                               | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.job.revert`                                | Time elapsed for `Job.Revert` RPC call                                                                                                                 | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.job.scale_status`                          | Time elapsed for `Job.ScaleStatus` RPC call                                                                                                            | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.job.scale`                                 | Time elapsed for `Job.Scale` RPC call                                                                                                                  | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.job.stable`                                | Time elapsed for `Job.Stable` RPC call                                                                                                                 | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.job.validate`                              | Time elapsed for `Job.Validate` RPC call                                                                                                               | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.job_summary.get_job_summary`               | Time elapsed for `Job.Timer` RPC call                                                                                                                  | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.leader.barrier`                            | Time elapsed to establish a raft barrier during leader transition                                                                                      | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.leader.reconcileMember`                    | Time elapsed to reconcile a serf peer with state store                                                                                                 | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.leader.reconcile`                          | Time elapsed to reconcile all serf peers with state store                                                                                              | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.namespace.delete_namespaces`               | Time elapsed for `Namespace.DeleteNamespaces`                                                                                                          | Milliseconds             | Timer   | host                                                    |\n| `nomad.nomad.namespace.get_namespace`                   | Time elapsed for `Namespace.GetNamespace`                                                                                                              | Milliseconds             | Timer   | host                                                    |\n```\n\n----------------------------------------\n\nTITLE: Read Allocation File Shell Commands\nDESCRIPTION: Commands to read files from an allocation directory via the Nomad API.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api \\\n    /v1/client/fs/cat/5fc98185-17ff-26bc-a802-0c74fa471c99\n\n$ nomad operator api \\\n    /v1/client/fs/cat/5fc98185-17ff-26bc-a802-0c74fa471c99?path=alloc/file.json\n```\n\n----------------------------------------\n\nTITLE: Listing Type-Filtered Scaling Policies - Shell Request\nDESCRIPTION: HTTP GET request to list scaling policies filtered by policy type\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/scaling-policies.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/scaling/policies?type=vertical\n```\n\n----------------------------------------\n\nTITLE: Running a task in Nomad overriding its schedule\nDESCRIPTION: Example of using 'nomad alloc pause' to run a task, overriding its current state or schedule.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/pause.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc pause -state=pause 4d37a9d1 schedtask\n```\n\n----------------------------------------\n\nTITLE: Nomad Operator Gossip Keyring Remove Command Examples\nDESCRIPTION: Examples showing successful and failed attempts to remove gossip encryption keys from a Nomad cluster. Demonstrates error handling and success scenarios.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/gossip/keyring-remove.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator gossip keyring remove HD5Y61iE+neTxd1n6TnXhCPViPIUq5QpWq8WW8012XA=\nRemoving gossip encryption key...\nerror: Unexpected response code: 500 (3/3 nodes reported failure)\n\n$ nomad operator gossip keyring remove AOUfjGff+MrTBzNU7NCOTmYajKRkGv8r2ToxheWd+jk=\nRemoving gossip encryption key...\n```\n\n----------------------------------------\n\nTITLE: Next Page Variable Listing\nDESCRIPTION: Example showing how to fetch the next page of variables using a page token\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/list.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad var list -per-page=3 \\\n  -page-token=default.nomad/jobs/variable/www/nginx\nNamespace  Path                 Last Updated\ndefault    nomad/jobs/variable/www/nginx  2022-08-23T10:24:46-04:00\n```\n\n----------------------------------------\n\nTITLE: Listing Plugins API Request\nDESCRIPTION: Example of making a GET request to list all CSI plugins via the Nomad API.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/plugins.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/plugins?type=csi\n```\n\n----------------------------------------\n\nTITLE: Examples of Using Split Function in Shell Session\nDESCRIPTION: Shows three examples of using the split function: splitting a comma-separated string into a list, splitting a string with no separator occurrence, and splitting an empty string.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/split.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> split(\",\", \"foo,bar,baz\")\n[\n  \"foo\",\n  \"bar\",\n  \"baz\",\n]\n> split(\",\", \"foo\")\n[\n  \"foo\",\n]\n> split(\",\", \"\")\n[\n  \"\",\n]\n```\n\n----------------------------------------\n\nTITLE: cURL command for listing ACL Roles with a prefix filter in Nomad\nDESCRIPTION: Shell command using cURL to retrieve a filtered list of ACL Roles by specifying a prefix parameter in the query string.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/roles.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Nomad-Token: <NOMAD_TOKEN_SECRET_ID>\" \\\n    https://localhost:4646/v1/acl/roles?prefix=25ba81\n```\n\n----------------------------------------\n\nTITLE: Creating DNS Alias for Load Balancer\nDESCRIPTION: Creates a DNS alias record in Route53 pointing to the load balancer. Requires hosted zone ID and load balancer DNS information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/aws-oidc-provider.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_route53_record\" \"www\" {\n  zone_id = <HOSTED_ZONE_ID>\n  name    = var.domain_name\n  type    = \"A\"\n\n  alias {\n    name                   = <LB_ALIAS_DNS_NAME>\n    zone_id                = <LB_ALIAS_ZONE_ID>\n    evaluate_target_health = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Allocation Migration Completion Flow in Nomad\nDESCRIPTION: This diagram shows the flow of events when allocation migrations are complete. It demonstrates how the JobWatcher detects changes and how the NodeDrainer processes completed migrations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/architecture-drainer.md#2025-04-19_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    %% entities\n    clients\n    StateStore([state store])\n    NodeDrainer([NodeDrainer])\n    JobWatcher([DrainingJobWatcher])\n\n    %% style classes\n    classDef component fill:#d5f6ea,stroke-width:4px,stroke:#1d9467\n    classDef other fill:#d5f6ea,stroke:#1d9467\n    class clients,StateStore other;\n    class NodeDrainer,JobWatcher component;\n\n    clients -. \"1. UpdateAlloc\" .-> StateStore\n    StateStore -- \"2. blocking query\\nfor allocs\" --> JobWatcher\n    JobWatcher -- \"3. Migrated(): allocs that are done\" --> NodeDrainer\n    NodeDrainer -- \"4. NodesDrainComplete\\n(raft shim)\" --> StateStore\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Network Ports in Nomad Agent\nDESCRIPTION: Default port configuration for Nomad agent services including HTTP server (4646), RPC communication (4647), and Serf gossip protocol (4648).\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/index.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nports {\n  http = 4646\n  rpc  = 4647\n  serf = 4648\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Variable Definitions File Format\nDESCRIPTION: Example of a variable definitions file in JSON format, providing an alternative to HCL syntax. The root object properties correspond to variable names.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/variables.mdx#2025-04-19_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"image_id\": \"nginx:1.19\",\n  \"labels\": [\"testing\", \"internal\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Quota List Command\nDESCRIPTION: Basic command syntax for listing quota specifications in Nomad Enterprise.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/quota/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad quota list\n```\n\n----------------------------------------\n\nTITLE: Implementing Struct Methods in Nomad's structs Package\nDESCRIPTION: Guidelines for implementing Copy, Equal, and Validate methods for new structs in the nomad/structs package. It emphasizes the importance of deep copying and proper validation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/checklist-jobspec.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [ ] Add structs/fields to `nomad/structs` package\n  * `structs/` structs usually have Copy, Equal, and Validate methods\n    * `Validate` methods in this package _must_ be implemented\n    * `Equal` methods are used when comparing one job to another (e.g. did this thing get updated?)\n    * `Copy` methods ensure modifications do not modify the copy of a job in the state store\n      * Use `slices.CloneFunc` and `maps.CloneFunc` to ensure creation of deep copies\n  * Note that analogous struct field names should match with `api/` package\n  * Test the structs/fields via methods mentioned above\n  * Implement and test other logical methods\n```\n\n----------------------------------------\n\nTITLE: Checking Nomad Cluster Readiness for Vault Workload Identity\nDESCRIPTION: Example showing how to use the -check flag to verify if a Nomad cluster is ready to migrate to using workload identities with Vault. The output displays jobs without workload identity, outdated nodes, and existing Vault tokens that need attention.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/setup/vault.mdx#2025-04-19_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n$ nomad setup vault -check\n\nJobs Without Workload Identity for Vault\nThe following jobs access Vault but are not configured for workload identity.\n\nYou should redeploy them before fully migrating to workload identities with\nVault to prevent unexpected errors if their tokens need to be recreated.\n\nRefer to https://developer.hashicorp.com/nomad/s/vault-workload-identity-migration\nfor more information.\n\nID       Namespace  Type     Status\nexample  default    service  running\n\nOutdated Nodes\nThe following nodes are running a version of Nomad that does not support using\nworkload identities with Vault.\n\nYou should upgrade them to Nomad 1.7 before fully migrating to workload\nidentities with Vault to prevent unexpected errors if they receive allocations\nfor jobs that use Vault.\n\nRefer to https://developer.hashicorp.com/nomad/s/vault-workload-identity-migration\nfor more information.\n\nID        Name      Address        Version  Drain  Eligibility  Status\n049f7683  client-1  192.168.0.186  1.6.4    false  eligible     ready\n\nVault Tokens\nThe following Vault ACL tokens were created by Nomad but will not be\nautomatically revoked after migrating to workload identities. They will expire\nonce their TTL reaches zero.\n\nAccessor ID               Allocation ID  Node ID   Configured TTL\nczh9MPcRXzAhxBL9XKyb3Kh1  f00893d4       049f7683  60\n```\n\n----------------------------------------\n\nTITLE: Using Pathexpand Function in Shell\nDESCRIPTION: Examples demonstrating the pathexpand function usage for expanding home directory paths and handling regular file paths. Shows how the function expands '~' to the user's home directory while leaving regular paths unchanged.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/file/pathexpand.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> pathexpand(\"~/.ssh/id_rsa\")\n/home/steve/.ssh/id_rsa\n> pathexpand(\"/etc/resolv.conf\")\n/etc/resolv.conf\n```\n\n----------------------------------------\n\nTITLE: Basic Fileset Function Syntax in HCL\nDESCRIPTION: Demonstrates the basic syntax of the fileset function which takes a path and pattern as arguments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/file/fileset.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfileset(path, pattern)\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Timeout for Podman Task\nDESCRIPTION: Configures the timeout duration for pulling container images. Cannot exceed the client_http_timeout.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  image_pull_timeout = \"5m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Nomad Namespaces Example\nDESCRIPTION: Example showing the output of listing all namespaces in a Nomad cluster, displaying both default and custom namespaces with their descriptions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/namespace/list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad namespace list\nName      Description\ndefault   Default shared namespace\napi-prod  Production instances of backend API servers\napi-qa    QA instances of backend API servers\nweb-prod  Production instances of webservers\nweb-qa    QA instances of webservers\n```\n\n----------------------------------------\n\nTITLE: Reading a Specific Recommendation with cURL in Shell\nDESCRIPTION: This snippet shows how to read information about a specific recommendation using its ID with a GET request.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/recommendations.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/recommendation/cb80a13d-20d8-fb05-db3f-4ea0fe667b1b\n```\n\n----------------------------------------\n\nTITLE: JWT Configuration Parameters\nDESCRIPTION: Parameters specific to JWT authentication including validation keys, bound audiences, and timing configurations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/partials/api-docs/auth-method-params.mdx#2025-04-19_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n  - `JWTValidationPubKeys` `(array<string>)` - A list of PEM-encoded public keys\n  to use to validate JWT signatures locally. Either this, the `JWKSURL` or the\n  `OIDCDiscoveryURL` is required for `JWT` method type.\n\n  - `JWKSURL` `(string)` - JSON Web Key Sets url for authenticating JWT\n  signatures. Either this, the `JWTValidationPubKeys` or the\n  `OIDCDiscoverURL` is required for `JWT` method type.\n\n  - `BoundAudiences` `(array<string>)` - List of aud claims that are valid for\n  login; any match is sufficient.\n\n  - `BoundIssuer` `(array<string>)` - The value against which to match the iss\n  claim in a JWT.\n```\n\n----------------------------------------\n\nTITLE: Nomad Service Help Command\nDESCRIPTION: Command to get help information for any service subcommand.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/service/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnomad service <subcommand> -h\n```\n\n----------------------------------------\n\nTITLE: Using jsondecode Function in Nomad Configuration Language\nDESCRIPTION: Examples of using the jsondecode function to parse a JSON object and a JSON boolean value. The function converts JSON formatted strings into their corresponding Nomad language data types and structures.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/encoding/jsondecode.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> jsondecode(\"{\\\"hello\\\": \\\"world\\\"}\")\n{\n  \"hello\" = \"world\"\n}\n> jsondecode(\"true\")\ntrue\n```\n\n----------------------------------------\n\nTITLE: Using the nomad setup vault Command\nDESCRIPTION: Basic syntax for the nomad setup vault command that configures Vault for Nomad workload identity authentication.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/setup/vault.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad setup vault [options]\n```\n\n----------------------------------------\n\nTITLE: Defining TaskEvents Function for Nomad Driver in Go\nDESCRIPTION: The TaskEvents function allows the driver to publish driver-specific events about tasks. It returns a channel of TaskEvent pointers and an error. This function is used by the Nomad client to associate events with the correct allocation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/plugins/task-drivers.mdx#2025-04-19_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nTaskEvents(context.Context) (<-chan *TaskEvent, error)\n```\n\n----------------------------------------\n\nTITLE: Manually failing a deployment with nomad\nDESCRIPTION: This example demonstrates how to manually mark an ongoing deployment as failed using the 'nomad deployment fail' command. It also shows how to check the status of the failed deployment.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/deployment/fail.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad deployment fail 8990cfbc\nDeployment \"8990cfbc-28c0-cb28-ca31-856cf691b987\" failed\n\n==> Monitoring evaluation \"a2d97ad5\"\n    Evaluation triggered by job \"example\"\n    Evaluation within deployment: \"8990cfbc\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"a2d97ad5\" finished with status \"complete\"\n\n$ nomad deployment status 8990cfbc\nID          = 8990cfbc\nJob ID      = example\nJob Version = 2\nStatus      = failed\nDescription = Deployment marked as failed\n\nDeployed\nTask Group  Desired  Placed  Healthy  Unhealthy\ncache       3        2       1        0\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for nspawn Container\nDESCRIPTION: This snippet demonstrates how to set environment variables for the init process in the nspawn container.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/nspawn.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  environment = {\n    FOO = \"bar\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Redis Job with CSI Volumes in Nomad\nDESCRIPTION: This snippet shows how to run a Redis job that utilizes the created CSI volumes. It demonstrates the job deployment process and allocation creation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/hostpath/README.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad job run ./redis.nomad\n==> Monitoring evaluation \"3178513e\"\n    Evaluation triggered by job \"example\"\n    Evaluation within deployment: \"ffb161f4\"\n    Allocation \"139caa78\" created: node \"917b009b\", group \"cache\"\n    Allocation \"5e1b57f5\" created: node \"917b009b\", group \"cache\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"3178513e\" finished with status \"complete\"\n```\n\n----------------------------------------\n\nTITLE: Example Nomad Raft List-Peers Output\nDESCRIPTION: Demonstrates the output format when listing Raft peers in a three-server Nomad cluster, showing node names, IDs, addresses, states, and voter status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/raft/list-peers.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator raft list-peers\nNode                   ID               Address          State     Voter\nnomad-server01.global  10.10.11.5:4647  10.10.11.5:4647  follower  true\nnomad-server02.global  10.10.11.6:4647  10.10.11.6:4647  leader    true\nnomad-server03.global  10.10.11.7:4647  10.10.11.7:4647  follower  true\n```\n\n----------------------------------------\n\nTITLE: Lookup Function Syntax in HCL\nDESCRIPTION: Demonstrates the basic syntax for the lookup function which takes three parameters: a map, a key to look up, and a default value to return if the key is not found.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/lookup.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlookup(map, key, default)\n```\n\n----------------------------------------\n\nTITLE: Applying Node Pool Configuration from File\nDESCRIPTION: A shell command demonstrating how to apply a node pool configuration from a file using the `nomad node pool apply` command.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/apply.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad node pool apply prod_pool.nomad.hcl\nSuccessfully applied node pool \"prod\"!\n```\n\n----------------------------------------\n\nTITLE: Prefix Search Response Example\nDESCRIPTION: Sample JSON response from a prefix search showing matches and truncations\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/search.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Matches\": {\n    \"allocs\": null,\n    \"deployment\": null,\n    \"evals\": [\"abc2fdc0-e1fd-2536-67d8-43af8ca798ac\"],\n    \"jobs\": [\"abcde\"],\n    \"nodes\": null,\n    \"plugins\": null,\n    \"volumes\": null\n  },\n  \"Truncations\": {\n    \"allocs\": \"false\",\n    \"deployment\": \"false\",\n    \"evals\": \"false\",\n    \"jobs\": \"false\",\n    \"nodes\": \"false\",\n    \"plugins\": \"false\",\n    \"volumes\": \"false\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a command without interactive shell\nDESCRIPTION: Example of running a command and streaming results without starting an interactive shell.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/exec.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc exec eb17e557 cat /etc/resolv.conf\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring CPU Detection Disable in Nomad HCL\nDESCRIPTION: This snippet shows how to disable CPU detection using dmidecode in Nomad's configuration. It's part of the improvements in version 1.9.7 to allow more control over CPU stats collection.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncpu_disable_dmidecode = true\n```\n\n----------------------------------------\n\nTITLE: Checking Volume Status in Nomad\nDESCRIPTION: This snippet demonstrates how to check the status of created volumes using the Nomad CLI. It displays information about the volumes, including their IDs, names, plugin IDs, and access modes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/hostpath/README.md#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad volume status\nContainer Storage Interface\nID              Name            Plugin ID         Schedulable  Access Mode\ntest-volume[0]  test-volume[0]  hostpath-plugin0  true         single-node-reader-only\ntest-volume[1]  test-volume[1]  hostpath-plugin0  true         single-node-reader-only\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Logging Driver for Podman Container\nDESCRIPTION: Sets up logging using the Nomad driver, which redirects container logs directly to a Nomad FIFO.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_19\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  logging = {\n    driver = \"nomad\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Raw Payload Dispatch Sample Response\nDESCRIPTION: JSON response for dispatching a job with raw payload data.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DispatchedJobID\": \"param/dispatch-1730920906-81821d1f\",\n  \"EvalCreateIndex\": 179,\n  \"EvalID\": \"5e973383-8d59-3f33-4496-72112a882605\",\n  \"Index\": 179,\n  \"JobCreateIndex\": 178\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying stderr logs from a specific allocation and task\nDESCRIPTION: Example of using 'nomad alloc logs' with the -stderr option to display error logs from a Redis task.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/logs.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc logs -stderr eb17e557 redis\n[ERR]: foo\n[ERR]: bar\n```\n\n----------------------------------------\n\nTITLE: Accessing Demo Web Server\nDESCRIPTION: This command demonstrates how to access the demo web server using curl, showing the persistence of data stored in NFS.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/nfs/README.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:29291\nhello from Wed Apr 12 23:18:01 UTC 2023\n```\n\n----------------------------------------\n\nTITLE: Listing Sentinel Policies - GET Request\nDESCRIPTION: Makes a GET request to list all Sentinel policies that have been replicated to the region.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/sentinel-policies.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/sentinel/policies\n```\n\n----------------------------------------\n\nTITLE: JSON Format Node Pool List\nDESCRIPTION: Shows how to retrieve node pool information in JSON format with detailed metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/list.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node pool list -json\n[\n    {\n        \"CreateIndex\": 1,\n        \"Description\": \"Node pool with all nodes in the cluster.\",\n        \"Meta\": null,\n        \"ModifyIndex\": 1,\n        \"Name\": \"all\",\n        \"SchedulerConfiguration\": null\n    },\n    {\n        \"CreateIndex\": 1,\n        \"Description\": \"Default node pool.\",\n        \"Meta\": null,\n        \"ModifyIndex\": 1,\n        \"Name\": \"default\",\n        \"SchedulerConfiguration\": null\n    },\n    {\n        \"CreateIndex\": 21,\n        \"Description\": \"Node pool for dev workloads.\",\n        \"Meta\": {\n            \"env\": \"development\"\n        },\n        \"ModifyIndex\": 21,\n        \"Name\": \"dev\",\n        \"SchedulerConfiguration\": null\n    },\n    {\n        \"CreateIndex\": 39,\n        \"Description\": \"Node pool for production workloads.\",\n        \"Meta\": {\n            \"env\": \"production\"\n        },\n        \"ModifyIndex\": 39,\n        \"Name\": \"prod\",\n        \"SchedulerConfiguration\": {\n            \"SchedulerAlgorithm\": \"spread\"\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Status Method Implementation in Go\nDESCRIPTION: The Status method retrieves the current state of a scaling target during policy evaluation. It takes a configuration map and returns target status information including current scaling level, readiness, and metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/concepts/plugins/target.mdx#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nStatus(config map[string]string) (*sdk.TargetStatus, error)\n```\n\n----------------------------------------\n\nTITLE: Using rsadecrypt Function in Nomad Configuration Language\nDESCRIPTION: The rsadecrypt function accepts a base64-encoded ciphertext and a PEM-encoded RSA private key, returning the decrypted cleartext. It uses the PKCS #1 v1.5 padding scheme and standard Base64 alphabet as defined in RFC 4648.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/crypto/rsadecrypt.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nrsadecrypt(ciphertext, privatekey)\n```\n\n----------------------------------------\n\nTITLE: Accessing Job Fields with Sentinel in Nomad\nDESCRIPTION: Examples of how to access various job fields using Sentinel syntax. The examples convert standard JSON job specification fields to the Sentinel convention of lowercase and underscore-separated identifiers.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/enterprise/sentinel.mdx#2025-04-19_snippet_0\n\nLANGUAGE: sentinel\nCODE:\n```\njob.id\njob.all_at_once\njob.parent_id\njob.task_groups\njob.task_groups[0].ephemeral_disk.size_mb\n```\n\n----------------------------------------\n\nTITLE: Reading a Node Pool via HTTP GET in Shell\nDESCRIPTION: This snippet shows how to query information about a specific node pool using the Nomad API.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/node-pools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api /v1/node/pool/prod-eng\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of 'nomad volume claim list' Command\nDESCRIPTION: Shows the basic syntax for the 'nomad volume claim list' command which can take an optional claim ID or prefix as an argument to filter results.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/claim-list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad volume claim list [options] [claim_id]\n```\n\n----------------------------------------\n\nTITLE: Core CI Workflow Steps in Markdown\nDESCRIPTION: Detailed breakdown of the steps involved in Nomad's core CI testing workflow, including module caching, test execution, validation checks, and cross-platform compilation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/ci/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CI (unit testing)\n\nThis README describes how the Core CI Tests Github Actions works, which provides\nNomad with continuous integration unit testing.\n\n## Steps\n\n1. When a branch is pushed, GHA triggers `.github/workflows/test-core.yaml`.\n\n2. The first job is `mods` which creates a pre-cache of Go modules.\n  - Only useful for the followup jobs on Linux runners\n  - Is keyed on `hash(go.sum)`, so a cache is re-used until deps are modified.\n\n3. The `checks`, `test-api`, `test-*` jobs are started.\n  - The checks job runs `make check`\n  - The test job runs groups of tests, see below\n\n3i. The check step also runs `make missing`\n  - Invokes `tools/missing` to scan `ci/test-cores.json` && nomad source.\n  - Fails the build if any packages in Nomad are not covered.\n\n4a. The `test-*` jobs are run.\n  - Configured as a matrix of \"groups\"; each group is a set of packages.\n  - The GHA invokes `test-nomad` with $GOTEST_GROUP for each group.\n  - The makefile uses `tools/missing` to translate the group into packages\n  - Package groups are configured in `ci/test-core.json`\n\n4b. The `test-api` job is run.\n  - Because `api` is a submodule, invokation of test command is special.\n  - The GHA invokes `test-nomad-module` with the name of the submodule.\n\n5. The `compile` jobs are run\n  - Waits on checks to complete first\n  - Runs on each of `linux`, `macos`, `windows`\n```\n\n----------------------------------------\n\nTITLE: Configuring StatsD Integration in Nomad Autoscaler\nDESCRIPTION: Configuration block for forwarding metrics to a StatsD server by specifying the server address. This enables integration with StatsD for metrics collection.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/agent/telemetry.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ntelemetry {\n  statsd_address = \"statsd.company.local:8125\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Docker Desktop Services via Host Network Interface\nDESCRIPTION: Example command showing how to access a service running in Docker Desktop from the host machine by using the network interface IP address instead of localhost.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/faq.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://192.168.0.10:8080\n```\n\n----------------------------------------\n\nTITLE: Using Nomad UI Command Syntax in Plaintext\nDESCRIPTION: The basic syntax for the 'nomad ui' command, which can be used with an optional identifier to open the Nomad Web UI to a specific object like a job, allocation, or node.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/ui.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad ui [options] <identifier>\n```\n\n----------------------------------------\n\nTITLE: Variable Create/Update Payload\nDESCRIPTION: Sample JSON payload for creating or updating a variable with namespace, path and items.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/variables/variables.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Namespace\": \"prod\",\n  \"Path\": \"example/first\",\n  \"Items\": {\n    \"user\": \"me\",\n    \"password\": \"passw0rd1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying task name with -task option\nDESCRIPTION: Example of using 'nomad alloc logs' with the -task option to specify the task name separately from the allocation ID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/logs.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc logs -task redis eb17e557\n```\n\n----------------------------------------\n\nTITLE: Using cidrnetmask Function in HCL\nDESCRIPTION: The basic syntax for using the cidrnetmask function in HCL. This function takes a single parameter 'prefix' which must be in IPv4 CIDR notation and returns a subnet mask in dotted-decimal format.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/ipnet/cidrnetmask.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncidrnetmask(prefix)\n```\n\n----------------------------------------\n\nTITLE: Comparing Specific Job Versions\nDESCRIPTION: Shows how to compare a specific job version with another version using the -version and -diff-version flags.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/history.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job history -version=3 -diff-version=1 example\nVersion     = 3\nStable      = false\nSubmit Date = 07/25/17 20:35:43 UTC\nDiff        =\n+/- Job: \"example\"\n+/- Task Group: \"cache\"\n  +/- Task: \"redis\"\n    +/- Resources {\n          CPU:      \"500\"\n          DiskMB:   \"0\"\n      +/- MemoryMB: \"256\" => \"512\"\n        }\n```\n\n----------------------------------------\n\nTITLE: Example of rsadecrypt Function with File Input\nDESCRIPTION: This example demonstrates how to use the rsadecrypt function to decrypt content from a file. It reads the ciphertext from a file, converts it to base64, and uses a private key file to decrypt it.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/crypto/rsadecrypt.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> rsadecrypt(base64(file(\"${path.folder}/ciphertext\")), file(\"privatekey.pem\"))\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Nomad Agent-Info Command\nDESCRIPTION: Shows the basic command syntax for retrieving agent information. Requires agent:read capability when ACLs are enabled.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/agent-info.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad agent-info [options]\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Volume Init Command\nDESCRIPTION: The basic usage of the `nomad volume init` command to create an example volume specification file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/init.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad volume init\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Service Info Command Syntax in plaintext\nDESCRIPTION: Shows the basic usage syntax for the 'nomad service info' command, which requires a service name as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/service/info.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad service info [options] <service_name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin in Nomad Job Specification (HCL)\nDESCRIPTION: Example of configuring a raw_exec driver in a Nomad job specification using HCL. The config block defines the command to execute and its arguments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/plugins/base.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n...\n      driver = \"raw_exec\"\n      config {\n        command = \"/bin/sleep\"\n        args = [\"100\"]\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Host Metrics Table in Markdown\nDESCRIPTION: Markdown table defining all host-level metrics emitted by Nomad, including their descriptions, units, types, and labels. Covers CPU, memory, disk, allocation, and task metrics.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/metrics-reference.mdx#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Metric                                    | Description                                                                          | Unit       | Type    | Labels                                                                                           |\n|-------------------------------------------|--------------------------------------------------------------------------------------|------------|---------|--------------------------------------------------------------------------------------------------|\n| `nomad.client.allocated.cpu`              | Total amount of CPU shares the scheduler has allocated to tasks                      | Mhz        | Gauge   | datacenter, host, node_class, node_id, node_pool, node_scheduling_eligibility, node_status       |\n| `nomad.client.allocated.memory`           | Total amount of memory the scheduler has allocated to tasks                          | Megabytes  | Gauge   | datacenter, host, node_class, node_id, node_pool, node_scheduling_eligibility, node_status       |\n```\n\n----------------------------------------\n\nTITLE: Executing Nomad Operator Gossip Keyring Use Command\nDESCRIPTION: This example demonstrates how to use the 'nomad operator gossip keyring use' command to change the primary gossip encryption key. It shows the command execution and the expected output.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/gossip/keyring-use.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator gossip keyring use HD5Y61iE+neTxd1n6TnXhCPViPIUq5QpWq8WW8012XA=\nChanging primary gossip encryption key...\n```\n\n----------------------------------------\n\nTITLE: Job with Inferred Node Pool from Namespace\nDESCRIPTION: Example job that inherits the default node pool from its namespace configuration, eliminating the need to specify a node_pool attribute in the job definition.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/node-pools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\njob \"app-dev\" {\n  # The \"dev\" node pool will be used because it is the\n  # namespace's default node pool.\n  namespace = \"dev\"\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the log Function in HCL\nDESCRIPTION: This snippet shows the basic syntax for using the log function in HCL. It takes two parameters: the number and the base for the logarithm.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/numeric/log.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlog(number, base)\n```\n\n----------------------------------------\n\nTITLE: Starting Nomad Agent with Network Interface Binding for Docker Desktop\nDESCRIPTION: Command to start a Nomad agent in development mode, binding to all interfaces and specifying a particular network interface to use. This configuration helps connect Docker containers to the host network on macOS and Windows.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/faq.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo nomad agent -dev -bind=0.0.0.0 -network-interface=en0\n```\n\n----------------------------------------\n\nTITLE: Proper Object Mutation Patterns in Nomad\nDESCRIPTION: Shows the correct approach for modifying objects retrieved from the state store. Objects must be copied before mutation to prevent inconsistent state across servers, transaction failures, and potential panics.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/architecture-state-store.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n# Incorrect: job is mutated without copying.\njob, err := state.JobByID(ws, namespace, id)\njob.Status = structs.JobStatusRunning\n\n# Correct: only the job copy is mutated.\njob, err := state.JobByID(ws, namespace, id)\nupdateJob := job.Copy()\nupdateJob.Status = structs.JobStatusRunning\n```\n\n----------------------------------------\n\nTITLE: Executing action within a specific Nomad allocation\nDESCRIPTION: This example demonstrates how to execute an action named 'echo-time' within a specific allocation of a Nomad job. It uses the -alloc option to specify the allocation ID and the -job option to specify the job name.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/action.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad action \\\n  -alloc=f200a789-6da4-504c-d131-6181764f101e \\\n  -job=actions-demo \\\n  echo-time\n\nRunning for 0 seconds\nRunning for 1 seconds\nRunning for 2 seconds\nRunning for 3 seconds\n```\n\n----------------------------------------\n\nTITLE: Basic Setproduct Function Syntax in HCL\nDESCRIPTION: The basic syntax for the setproduct function which finds all possible combinations of elements from multiple sets by computing the Cartesian product.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/setproduct.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsetproduct(sets...)\n```\n\n----------------------------------------\n\nTITLE: Interpolating Node Metadata in Nomad Jobs\nDESCRIPTION: This snippet demonstrates how to interpolate node metadata within Nomad job specifications using the ${meta.<key>} syntax. This allows for dynamic use of node-specific metadata in job configurations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/meta/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[interpolation using the `${meta.<key>}` syntax in jobs][interp]\n```\n\n----------------------------------------\n\nTITLE: Using coalescelist Function with List of Lists in Shell\nDESCRIPTION: This example shows how to use the coalescelist function with a list of lists by using the '...' symbol to expand the outer list as arguments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/coalescelist.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> coalescelist([[], [\"c\", \"d\"]]...)\n[\n  \"c\",\n  \"d\",\n]\n```\n\n----------------------------------------\n\nTITLE: Example output of nomad operator raft info command\nDESCRIPTION: This example demonstrates the output of running the 'nomad operator raft info' command on a specific data directory. It shows information such as the path, length, first index, and last index of the Raft logs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/raft/info.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo nomad operator raft info /var/nomad/data\npath:        /var/nomad/data/server/raft/raft.db\nlength:      10\nfirst index: 1\nlast index:  10\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for HCP Authentication in Terraform\nDESCRIPTION: Sets the required environment variables for authenticating with HashiCorp Cloud Platform (HCP) when provisioning the Nomad cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/terraform/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport HCP_CLIENT_ID=\nexport HCP_CLIENT_SECRET=\n```\n\n----------------------------------------\n\nTITLE: Fetching ACL Auth Method Information\nDESCRIPTION: This example demonstrates how to use the 'nomad acl auth-method info' command to fetch information about an existing ACL Auth Method named 'example-acl-auth-method'. It displays details such as name, type, locality, TTL, token name format, and configuration parameters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/auth-method/info.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl auth-method info example-acl-auth-method\nName                = example-acl-auth-method\nType                = OIDC\nLocality            = local\nMax Token TTL       = 1h0m0s\nToken Name Format   = ${auth_method_type}-${auth_method_name}\nDefault             = false\nCreate Index        = 14\nModify Index        = 14\n\nAuth Method Config\n\nOIDC Discovery URL     = https://my-corp-app-name.auth0.com/\nOIDC Client ID         = V1RPi2MYptMV1RPi2MYptMV1RPi2MYpt\nOIDC Client Secret     = example-client-secret\nBound audiences        = V1RPi2MYptMV1RPi2MYptMV1RPi2MYpt\nAllowed redirects URIs = http://localhost:4646/oidc/callback\nDiscovery CA pem       = <none>\nSigning algorithms     = <none>\nClaim mappings         = {http://example.com/first_name: first_name}; {http://example.com/last_name: last_name}\nList claim mappings    = {http://nomad.com/groups: groups}\n```\n\n----------------------------------------\n\nTITLE: Error When Starting Nomad with Invalid License Configuration\nDESCRIPTION: Command line output showing what happens when Nomad is started with an invalid license configuration. The server exits with a descriptive error message about the license issue.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/enterprise/license/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNOMAD_LICENSE=misconfigured nomad agent -dev\n==> No configuration files loaded\n==> Starting Nomad agent...\n==> Error starting agent: server setup failed: failed to initialize enterprise licensing: a file license was configured but the license is invalid: error decoding version: expected integer\n```\n\n----------------------------------------\n\nTITLE: Examples of try Function Usage in Shell Session\nDESCRIPTION: These examples demonstrate the try function's behavior when working with local variables. It shows how try returns the value when an attribute exists and falls back to the provided default when it doesn't.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/conversion/try.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n> local.foo\n{\n  \"bar\" = \"baz\"\n}\n> try(local.foo.bar, \"fallback\")\nbaz\n> try(local.foo.boop, \"fallback\")\nfallback\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Environment Variables in Bash\nDESCRIPTION: This snippet shows how to set the AWS access key ID and secret access key as environment variables for authentication with AWS services.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/aws/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export AWS_ACCESS_KEY_ID=[AWS_ACCESS_KEY_ID]\n$ export AWS_SECRET_ACCESS_KEY=[AWS_SECRET_ACCESS_KEY]\n```\n\n----------------------------------------\n\nTITLE: Example Execution of Nomad System Reconcile Summaries Command\nDESCRIPTION: An example showing the execution of the reconcile summaries command, which does not produce any output unless an error occurs during execution.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/system/reconcile-summaries.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad system reconcile summaries\n\n\n```\n\n----------------------------------------\n\nTITLE: Create/Update Policy - POST Request\nDESCRIPTION: Makes a POST request to create or update a Sentinel policy using the provided JSON payload.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/sentinel-policies.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://localhost:4646/v1/sentinel/policy/my-policy\n```\n\n----------------------------------------\n\nTITLE: Allocation List Response Schema\nDESCRIPTION: Example JSON response showing the structure of allocation data returned by the API\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/allocations.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"ClientDescription\": \"Tasks are running\",\n    \"ClientStatus\": \"running\",\n    \"CreateIndex\": 10,\n    \"CreateTime\": 1636017249798459000,\n    \"DeploymentStatus\": {\n      \"Canary\": false,\n      \"Healthy\": true,\n      \"ModifyIndex\": 15,\n      \"Timestamp\": \"2021-11-04T10:14:22.054814+01:00\"\n    },\n    \"DesiredDescription\": \"\",\n    \"DesiredStatus\": \"run\",\n    \"DesiredTransition\": {\n      \"ForceReschedule\": null,\n      \"Migrate\": null,\n      \"Reschedule\": null\n    },\n    \"EvalID\": \"cb20d15d-861f-8d8d-8253-e93932beea2e\",\n    \"FollowupEvalID\": \"\",\n    \"ID\": \"5457f16d-0f87-8e6b-5e91-0c7da3a41eb7\",\n    \"JobID\": \"example\",\n    \"JobType\": \"service\",\n    \"JobVersion\": 0,\n    \"ModifyIndex\": 15,\n    \"ModifyTime\": 1636017262190928000,\n    \"Name\": \"example.cache[0]\",\n    \"Namespace\": \"default\",\n    \"NodeID\": \"f476d2b4-02dc-c216-d031-273396727347\",\n    \"NodeName\": \"linux\",\n    \"PreemptedAllocations\": null,\n    \"PreemptedByAllocation\": \"\",\n    \"RescheduleTracker\": null,\n    \"TaskGroup\": \"cache\",\n    \"TaskStates\": {\n      \"redis\": {\n        \"Events\": [\n          {\n            \"Details\": {},\n            \"DiskLimit\": 0,\n            \"DisplayMessage\": \"Task received by client\",\n            \"DownloadError\": \"\",\n            \"DriverError\": \"\",\n            \"DriverMessage\": \"\",\n            \"ExitCode\": 0,\n            \"FailedSibling\": \"\",\n            \"FailsTask\": false,\n            \"GenericSource\": \"\",\n            \"KillError\": \"\",\n            \"KillReason\": \"\",\n            \"KillTimeout\": 0,\n            \"Message\": \"\",\n            \"RestartReason\": \"\",\n            \"SetupError\": \"\",\n            \"Signal\": 0,\n            \"StartDelay\": 0,\n            \"TaskSignal\": \"\",\n            \"TaskSignalReason\": \"\",\n            \"Time\": 1636017249803624000,\n            \"Type\": \"Received\",\n            \"ValidationError\": \"\",\n            \"VaultError\": \"\"\n          },\n          {\n            \"Details\": {\n              \"message\": \"Building Task Directory\"\n            },\n            \"DiskLimit\": 0,\n            \"DisplayMessage\": \"Building Task Directory\",\n            \"DownloadError\": \"\",\n            \"DriverError\": \"\",\n            \"DriverMessage\": \"\",\n            \"ExitCode\": 0,\n            \"FailedSibling\": \"\",\n            \"FailsTask\": false,\n            \"GenericSource\": \"\",\n            \"KillError\": \"\",\n            \"KillReason\": \"\",\n            \"KillTimeout\": 0,\n            \"Message\": \"Building Task Directory\",\n            \"RestartReason\": \"\",\n            \"SetupError\": \"\",\n            \"Signal\": 0,\n            \"StartDelay\": 0,\n            \"TaskSignal\": \"\",\n            \"TaskSignalReason\": \"\",\n            \"Time\": 1636017249805254000,\n            \"Type\": \"Task Setup\",\n            \"ValidationError\": \"\",\n            \"VaultError\": \"\"\n          },\n          {\n            \"Details\": {},\n            \"DiskLimit\": 0,\n            \"DisplayMessage\": \"Task started by client\",\n            \"DownloadError\": \"\",\n            \"DriverError\": \"\",\n            \"DriverMessage\": \"\",\n            \"ExitCode\": 0,\n            \"FailedSibling\": \"\",\n            \"FailsTask\": false,\n            \"GenericSource\": \"\",\n            \"KillError\": \"\",\n            \"KillReason\": \"\",\n            \"KillTimeout\": 0,\n            \"Message\": \"\",\n            \"RestartReason\": \"\",\n            \"SetupError\": \"\",\n            \"Signal\": 0,\n            \"StartDelay\": 0,\n            \"TaskSignal\": \"\",\n            \"TaskSignalReason\": \"\",\n            \"Time\": 1636017252049956000,\n            \"Type\": \"Started\",\n            \"ValidationError\": \"\",\n            \"VaultError\": \"\"\n          }\n        ],\n        \"Failed\": false,\n        \"FinishedAt\": null,\n        \"LastRestart\": null,\n        \"Restarts\": 0,\n        \"StartedAt\": \"2021-11-04T09:14:12.04996Z\",\n        \"State\": \"running\",\n        \"TaskHandle\": null\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: NUMA Node Attributes in Nomad\nDESCRIPTION: Example of NUMA topology information exposed as Nomad client node attributes, showing node count and core associations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/cpu.mdx#2025-04-19_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nnuma.node.count       = 4\nnuma.node0.cores      = 0-23,96-119\nnuma.node1.cores      = 24-47,120-143\nnuma.node2.cores      = 48-71,144-167\nnuma.node3.cores      = 72-95,168-191\n```\n\n----------------------------------------\n\nTITLE: Full Status of Parameterized Nomad Job\nDESCRIPTION: Displays complete status information for a parameterized job including payload requirements and dispatched jobs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/status.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job status example\nID            = example\nName          = example\nSubmit Date   = 07/25/17 15:59:52 UTC\nType          = batch\nPriority      = 50\nDatacenters   = dc1\nStatus        = running\nPeriodic      = false\nParameterized = true\n\nParameterized Job\nPayload           = required\nRequired Metadata = foo\nOptional Metadata = bar\n\nParameterized Job Summary\nPending  Running  Dead\n0        2        0\n\nDispatched Jobs\nID                                    Status\nexample/dispatch-1485411496-58f24d2d  running\nexample/dispatch-1485411499-fa2ee40e  running\n```\n\n----------------------------------------\n\nTITLE: Example of Modified List Items in Nomad Documentation\nDESCRIPTION: Shows how list items might be changed while maintaining link compatibility. Only changes to the inline code at the beginning of a list item would cause permalink issues.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/README.md#2025-04-19_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- lsdhfhksdjf\n- `this` jsdhfkdsjhkdsfjh\n```\n\n----------------------------------------\n\nTITLE: Installing Nomad on Fedora\nDESCRIPTION: Installs the Nomad package from the HashiCorp repository using dnf package manager.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo dnf -y install nomad\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Response with Operator Token\nDESCRIPTION: JSON response when bootstrapping with an operator-provided token, showing the token was accepted and initialized with management permissions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AccessorID\": \"b780e702-98ce-521f-2e5f-c6b87de05b24\",\n  \"SecretID\": \"2b778dd9-f5f1-6f29-b4b4-9a5fa948757a\",\n  \"Name\": \"Bootstrap Token\",\n  \"Type\": \"management\",\n  \"Policies\": null,\n  \"Global\": true,\n  \"CreateTime\": \"2017-08-23T22:47:14.695408057Z\",\n  \"CreateIndex\": 7,\n  \"ModifyIndex\": 7\n}\n```\n\n----------------------------------------\n\nTITLE: Nomad ACL Binding Rule Update Command Syntax\nDESCRIPTION: Basic command syntax for updating an existing ACL binding rule in Nomad. Requires the binding rule ID as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/binding-rule/update.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl binding-rule update [options] <binding-rule_ID>\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Setup for Nomad API Access\nDESCRIPTION: Example environment variable configuration for setting up secure access to Nomad's API including token, certificates, and server details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/api.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nNOMAD_TOKEN=d4434353-c797-19e4-a14d-4068241f86a4\nNOMAD_CACERT=$HOME/.nomad/ca.pem\nNOMAD_CLIENT_CERT=$HOME/.nomad/cli.pem\nNOMAD_CLIENT_KEY=$HOME/.nomad/client-key.pem\nNOMAD_TLS_SERVER_NAME=client.global.nomad\nNOMAD_ADDR=https://remote.client123.internal:4646\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Evaluations with Filter\nDESCRIPTION: Example of using the `-filter` option to delete multiple evaluations matching specific criteria, such as status and job ID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/eval/delete.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad eval delete -filter='Status == \"pending\" and JobID == \"example\"'\nAre you sure you want to delete 3 evals? [y/N] y\n\nSuccessfully deleted 3 evaluations\n```\n\n----------------------------------------\n\nTITLE: Executing Nomad Operator Root Keyring Rotate Commands\nDESCRIPTION: These examples demonstrate different ways to use the 'nomad operator root keyring rotate' command. They show how to rotate the key immediately, with verbose output, and with a prepublish duration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/root/keyring-rotate.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator root keyring rotate -now\nKey       State   Create Time           Publish Time\nf19f6029  active  2022-07-11T19:14:36Z  <none>\n\n$ nomad operator root keyring rotate -now -verbose\nKey                                   State   Create Time           Publish Time\n53186ac1-9002-c4b6-216d-bb19fd37a791  active  2022-07-11T19:14:47Z  <none>\n\n$ nomad operator root keyring rotate -prepublish 1h\nKey       State   Create Time           Publish Time\n7f15e4e9  active  2022-07-11T19:15:10Z  2022-07-11T20:15:10Z\n```\n\n----------------------------------------\n\nTITLE: Merging Maps with the 'merge' Function in Nomad Configuration\nDESCRIPTION: This example demonstrates how to use the 'merge' function to combine two maps. The function takes two maps as arguments and returns a single map with merged key-value pairs. When keys conflict, the value from the later argument takes precedence.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/merge.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> merge({\"a\"=\"b\", \"c\"=\"d\"}, {\"e\"=\"f\", \"c\"=\"z\"})\n{\n  \"a\" = \"b\"\n  \"c\" = \"z\"\n  \"e\" = \"f\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Job with Detach Flag\nDESCRIPTION: Example showing how to dispatch a job with the detach flag to return immediately without monitoring.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/dispatch.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job dispatch -detach video-encode video-config.json\nDispatched Job ID = example/dispatch-1485380684-c37b3dba\nEvaluation ID     = d9034c4e\n```\n\n----------------------------------------\n\nTITLE: Using uuidv5 with URL Namespace in Nomad\nDESCRIPTION: Example of generating a UUID v5 using the URL namespace with a valid URL.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/uuid/uuidv5.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n> uuidv5(\"url\", \"https://developer.hashicorp.com/nomad/\")\na1572394-3948-5251-b0c7-b4ded43587b4\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Version Command Basic Syntax\nDESCRIPTION: Shows the basic syntax for running the nomad version command to display version information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/version.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad version\n```\n\n----------------------------------------\n\nTITLE: Join Function Syntax in Nomad HCL Configuration\nDESCRIPTION: The join function takes two arguments: a separator string and a list of strings to concatenate. It returns a single string with all elements joined by the separator.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/join.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njoin(separator, list)\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Raft State Command Usage\nDESCRIPTION: Shows the basic syntax for using the nomad operator raft state command to display Raft server state from a specified data directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/raft/state.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator raft state [options] <path to data dir>\n```\n\n----------------------------------------\n\nTITLE: Viewing NUMA Node Distances with numactl\nDESCRIPTION: Shell command example showing how to use numactl to view the performance penalties associated with cross-NUMA node memory access.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/cpu.mdx#2025-04-19_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ numactl -H\navailable: 4 nodes (0-3)\n...\nnode distances:\nnode   0   1   2   3\n  0:  10  12  32  32\n  1:  12  10  32  32\n  2:  32  32  10  12\n  3:  32  32  12  10\n```\n\n----------------------------------------\n\nTITLE: Adding HashiCorp Repository on RHEL/CentOS\nDESCRIPTION: Adds the official HashiCorp Linux repository to yum package manager for RHEL/CentOS systems.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n```\n\n----------------------------------------\n\nTITLE: Examples of regex_replace Function in Nomad Shell\nDESCRIPTION: Demonstrates various use cases of regex_replace function including simple string replacement, pattern matching with regular expressions, and using capture groups with $n and ${n} syntax in the replacement string.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/regex_replace.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> regex_replace(\"hello world\", \"world\", \"everybody\")\nhello everybody\n\n\n> regex_replace(\"hello world\", \"w.*d\", \"everybody\")\nhello everybody\n\n> regex_replace(\"-ab-axxb-\", \"a(x*)b\", \"$1W\")\n---\n\n> regex_replace(\"-ab-axxb-\", \"a(x*)b\", \"${1}W\")\n-W-xxW-\n```\n\n----------------------------------------\n\nTITLE: Usage Syntax for Nomad TLS Certificate Info Command\nDESCRIPTION: Shows the basic syntax for using the 'nomad tls cert info' command, which requires a certificate file path as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/tls/cert-info.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad tls cert info <certificate file>\n```\n\n----------------------------------------\n\nTITLE: Using api.Client for Job Namespace in Go\nDESCRIPTION: This Go code snippet demonstrates how to ensure the job namespace is respected when using the api.Client in Nomad. It's relevant to changes in the Job Run and Plan APIs in Nomad 1.0.9 and 1.1.3.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/upgrade/upgrade-specific.mdx#2025-04-19_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// For users of api.Client who want their job namespace respected,\n// you must ensure the Config.Namespace field is unset.\nconfig := api.DefaultConfig()\nconfig.Namespace = \"\"\nclient, err := api.NewClient(config)\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Job Scaling Events Command Syntax\nDESCRIPTION: Shows the basic command syntax for viewing job scaling events. Requires a job ID as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/scaling-events.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad job scaling-events [options] <job>\n```\n\n----------------------------------------\n\nTITLE: Setting Nomad Scheduler Algorithm with Check Index\nDESCRIPTION: Example demonstrating how to modify the scheduler algorithm while using the check-index flag to ensure updates are made from a known state.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/scheduler/set-config.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator scheduler set-config -scheduler-algorithm=spread -check-index=5\nScheduler configuration updated!\n```\n\n----------------------------------------\n\nTITLE: Prefix Match Search Payload Example\nDESCRIPTION: Example payload for performing a prefix match search with 'all' context, demonstrating how to search for UUID-based resources.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/search.mdx#2025-04-19_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"Text\":\"cc\",\n   \"Context\":\"all\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Job with Config File\nDESCRIPTION: Example of dispatching a job using a configuration file as input.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/dispatch.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job dispatch video-encode video-config.json\nDispatched Job ID = video-encode/dispatch-1485379325-cb38d00d\nEvaluation ID     = 31199841\n\n==> Monitoring evaluation \"31199841\"\n    Evaluation triggered by job \"example/dispatch-1485379325-cb38d00d\"\n    Allocation \"8254b85f\" created: node \"82ff9c50\", group \"cache\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"31199841\" finished with status \"complete\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for HCP Authentication\nDESCRIPTION: Environment variables required for HCP client authentication\nSOURCE: https://github.com/hashicorp/nomad/blob/main/enos/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport HCP_CLIENT_ID=\nexport HCP_CLIENT_SECRET=\n```\n\n----------------------------------------\n\nTITLE: Installing Exec2 Driver on Ubuntu/Debian\nDESCRIPTION: Commands to install the required packages, add HashiCorp GPG key, configure the repository, and install the Exec2 driver on Ubuntu/Debian systems.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/exec2.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo apt-get update && \\\n  sudo apt-get install wget gpg coreutils\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ echo \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) test\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo apt-get update && sudo apt-get install nomad-driver-exec2\n```\n\n----------------------------------------\n\nTITLE: Using Title Function for String Case Conversion in Nomad\nDESCRIPTION: Demonstrates how to use the title function to convert the first letter of each word in a string to uppercase. The function follows Unicode's definition of letters and case sensitivity.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/title.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntitle(\"hello world\")\nHello World\n```\n\n----------------------------------------\n\nTITLE: Listing ACL Auth Methods in Nomad Using curl\nDESCRIPTION: Shell command for retrieving all ACL auth methods from Nomad. This endpoint supports blocking queries and consistency modes, and requires a Nomad token.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/auth-methods.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Nomad-Token: <NOMAD_TOKEN_SECRET_ID>\" \\\n    https://localhost:4646/v1/acl/auth-methods\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Options for Singularity\nDESCRIPTION: Configuration for security modules such as SELinux, AppArmor, and seccomp within the Singularity container, including changing the UID and GID of the user at runtime.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/singularity.mdx#2025-04-19_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  security = [ \"uid:1000 \" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Flattening Network Subnets for Resource Creation in HCL\nDESCRIPTION: Shows how to use the flatten function to create a flat list of subnet objects from a nested structure, which can then be used with for_each to create AWS subnet resources.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/flatten.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  network_subnets = flatten([\n    for network_key, network in var.networks : [\n      for subnet_key, subnet in network.subnets : {\n        network_key = network_key\n        subnet_key  = subnet_key\n        network_id  = aws_vpc.example[network_key].id\n        cidr_block  = subnet.cidr_block\n      }\n    ]\n  ])\n}\n\nresource \"aws_subnet\" \"example\" {\n  for_each = {\n    for subnet in local.network_subnets : \"${subnet.network_key}.${subnet.subnet_key}\" => subnet\n  }\n\n  vpc_id            = each.value.network_id\n  availability_zone = each.value.subnet_key\n  cidr_block        = each.value_cidr_block\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Azure resource group environment variable\nDESCRIPTION: Summary of all environment variables needed for the Packer build process, including a new environment variable for the resource group name.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/azure/README.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport ARM_SUBSCRIPTION_ID=[ARM_SUBSCRIPTION_ID]  \nexport ARM_TENANT_ID=[ARM_TENANT_ID]  \nexport ARM_CLIENT_ID=[ARM_CLIENT_ID]  \nexport ARM_CLIENT_SECRET=[ARM_CLIENT_SECRET]  \n```\n\nLANGUAGE: bash\nCODE:\n```\nexport AZURE_RESOURCE_GROUP=packer  \n```\n\n----------------------------------------\n\nTITLE: Displaying Nomad Job Allocations Usage\nDESCRIPTION: Shows the basic usage syntax for the `nomad job allocs` command, which requires a job ID or prefix as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/allocs.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad job allocs [options] <job>\n```\n\n----------------------------------------\n\nTITLE: Reading Sentinel Policy - Response\nDESCRIPTION: Sample JSON response showing complete policy details including the policy content.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/sentinel-policies.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Name\": \"foo\",\n  \"Description\": \"test policy\",\n  \"Scope\": \"submit-job\",\n  \"EnforcementLevel\": \"advisory\",\n  \"Policy\": \"main = rule { true }\\n\",\n  \"Hash\": \"CIs8aNX5OfFvo4D7ihWcQSexEJpHp+Za+dHSncVx5+8=\",\n  \"CreateIndex\": 8,\n  \"ModifyIndex\": 8\n}\n```\n\n----------------------------------------\n\nTITLE: Read File at Offset Shell Command\nDESCRIPTION: Command to read a file at a specific offset and limit from an allocation directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api \\\n    /v1/client/fs/readat/5fc98185-17ff-26bc-a802-0c74fa471c99?path=/alloc/foo&offset=1323&limit=19303\n```\n\n----------------------------------------\n\nTITLE: Simplified Service Identity Configuration\nDESCRIPTION: Shows simplified service configuration when consul.service_identity is configured on the server.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/consul.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n  group \"web\" {\n    service {\n      port = \"www\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Scheduler Command Usage\nDESCRIPTION: Shows the basic command syntax for the nomad operator scheduler set-config command. Requires operator:write capability if ACLs are enabled.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/scheduler/set-config.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator scheduler set-config [options]\n```\n\n----------------------------------------\n\nTITLE: Delete CSI Snapshot Request Example\nDESCRIPTION: Sample curl command demonstrating how to delete a CSI volume snapshot with custom secrets header.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --request DELETE \\\n    -H \"X-Nomad-CSI-Secrets: secret-key-1=value-1,secret-key-2=value-2\" \\\n    https://localhost:4646/v1/volumes/snapshot\n```\n\n----------------------------------------\n\nTITLE: Docker Credential Helper Configuration in JSON\nDESCRIPTION: Example Docker config file showing credential helper setup for ECR and internal repositories.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auths\": {\n    \"internal.repo\": {\n      \"auth\": \"`echo -n '<username>:<password>' | base64 -w0`\"\n    }\n  },\n  \"credHelpers\": {\n    \"<XYZ>.dkr.ecr.<region>.amazonaws.com\": \"ecr-login\"\n  },\n  \"credsStore\": \"secretservice\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Evaluations with Prefix Filter in Nomad API\nDESCRIPTION: Makes a GET request to retrieve evaluations filtered by ID prefix. This allows finding evaluations with IDs starting with the specified prefix.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/evaluations.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/evaluations?prefix=25ba81\n```\n\n----------------------------------------\n\nTITLE: Operator-Provided Token Payload\nDESCRIPTION: JSON payload for bootstrapping the ACL system with an operator-provided token instead of a generated one. The token should be in UUID format.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"BootstrapSecret\": \"2b778dd9-f5f1-6f29-b4b4-9a5fa948757a\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HashiCorp Repository on Amazon Linux\nDESCRIPTION: Adds the official HashiCorp repository specifically for Amazon Linux to the yum package manager.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo yum-config-manager \\\n  --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo\n```\n\n----------------------------------------\n\nTITLE: OIDC Authentication URL Response in JSON\nDESCRIPTION: JSON response from the auth-url endpoint containing the generated authentication URL. This URL is where the user needs to be redirected to authenticate with their OIDC provider.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/oidc.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AuthURL\": \"https://some-domain.uk.auth0.com/authorize?client_id=4fOYtJiC5fo98EQj2TScs2someclient&nonce=fpSPuaodKevKfDU3IeXb&redirect_uri=http%3A%2F%2Flocalhost%3A4649%2Foidc%2Fcallback&response_type=code&scope=openid&state=st_4i68Nt7FcxDsomestate\"\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting JSON Formatted Jobs\nDESCRIPTION: The nomad job run -json flag allows submitting a JSON formatted job file directly to the Nomad scheduler.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/json-jobs.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad job run -json example.json\n```\n\n----------------------------------------\n\nTITLE: Dispatching Job with ID Prefix\nDESCRIPTION: Example demonstrating job dispatch with a custom ID prefix template.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/dispatch.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job dispatch -id-prefix-template=config1 video-encode video-config1.json\nJb\nDispatched Job ID = video-encode/dispatch-config1-1485379325-cb38d00d\nEvaluation ID     = 31199841\n\n==> Monitoring evaluation \"31199841\"\n    Evaluation triggered by job \"example/dispatch-config1-1485379325-cb38d00d\"\n    Allocation \"8254b85f\" created: node \"82ff9c50\", group \"cache\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"31199841\" finished with status \"complete\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Docker Labels with HCLv2 (Current Format)\nDESCRIPTION: The correct HCLv2 syntax for specifying Docker labels with dots in their keys using the list-of-maps format. This is the required format in Nomad 1.9.0 and later.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/upgrade/upgrade-specific.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nlabels = [\n  {\n    \"com.datadoghq.ad.check_names\"  = \"[\\\"openmetrics\\\"]\"\n    \"com.datadoghq.ad.init_configs\" = \"[{}]\"\n    # ...\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a CA with Specified Domain and Name Constraint\nDESCRIPTION: This example shows how to create a CA certificate with a specified domain and name constraint. It uses the '-name-constraint' and '-domain' options to customize the CA creation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/tls/ca-create.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad tls ca create -name-constraint=\"true\" -domain=\"foo.com\"\n==> CA Certificate saved to: foo.com-agent-ca.pem\n==> CA Certificate key saved to: foo.com-agent-ca-key.pem\n```\n\n----------------------------------------\n\nTITLE: Basic Volume Snapshot Create Command Syntax\nDESCRIPTION: Shows the basic command syntax for creating a snapshot of a CSI volume in Nomad.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/snapshot-create.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad volume snapshot create [volume] [snapshot_name]\n```\n\n----------------------------------------\n\nTITLE: List Index Example - Shell Session\nDESCRIPTION: Example showing how to retrieve an element from a list using a numeric index. Returns the second element (index 1) from a list of letters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/index-fn.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> index([\"a\", \"b\", \"c\"], 1)\n\"b\"\n```\n\n----------------------------------------\n\nTITLE: Usage of nomad acl auth-method list command\nDESCRIPTION: Demonstrates the basic syntax for using the 'nomad acl auth-method list' command. This command is used to list existing ACL Auth Methods in Nomad.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/auth-method/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl auth-method list [options]\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Job Tag Command Usage\nDESCRIPTION: Shows the basic syntax for using the nomad job tag command with subcommands.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/tag.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnomad job tag <subcommand> [options] [args]\n```\n\n----------------------------------------\n\nTITLE: Querying Vault Nodes using DNS\nDESCRIPTION: DNS queries to find active and standby Vault nodes in the cluster. These commands use Consul's DNS interface to locate Vault services.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dig active.vault.service.consul\n$ dig active.vault.service.consul SRV\n$ dig standby.vault.service.consul\n```\n\n----------------------------------------\n\nTITLE: Failed Deployment with Auto-Revert Monitoring\nDESCRIPTION: Shows monitoring output for a failed deployment with auto-revert enabled, including rollback process.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/deployment/status.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad deployment status -monitor e45\n2021-06-09T15:49:19-07:00: Monitoring deployment \"e45cc3c1\"\n  ! Deployment \"e45cc3c1\" failed\n\n    2021-06-09T15:49:48-07:00\n    ID          = e45cc3c1\n    Job ID      = example\n    Job Version = 1\n    Status      = failed\n    Description = Failed due to progress deadline - rolling back to job version 0\n\n    Deployed\n    Task Group  Auto Revert  Desired  Placed  Healthy  Unhealthy  Progress Deadline\n    cache       true         2        1       0        1          2021-06-09T15:49:48-07:00\n    web         false        1        1       1        0          2021-06-09T15:59:28-07:00\n\n  ⠙ Deployment \"e094a0be\" in progress...\n\n    2021-06-09T15:50:02-07:00\n    ID          = e094a0be\n    Job ID      = example\n    Job Version = 2\n    Status      = running\n    Description = Deployment is running\n\n    Deployed\n    Task Group  Auto Revert  Desired  Placed  Healthy  Unhealthy  Progress Deadline\n    cache       true         2        2       1        0          2021-06-09T15:52:00-07:00\n    web         false        1        1       1        0          2021-06-09T15:59:58-07:00\n```\n\n----------------------------------------\n\nTITLE: Using the keys Function with a Map in Nomad HCL\nDESCRIPTION: Example of using the keys function to extract keys from a map in lexicographical order. The function takes a map as input and returns a list of strings representing the map's keys.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/keys.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> keys({a=1, c=2, d=3})\n[\n  \"a\",\n  \"c\",\n  \"d\",\n]\n```\n\n----------------------------------------\n\nTITLE: Decoding JWT Access Token with jq in Bash\nDESCRIPTION: A bash command that uses jq to extract, split, and base64-decode the access_token field from a JSON response, allowing inspection of the JWT payload for troubleshooting OIDC claims and authentication issues.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/acl/auth-methods/oidc.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njq --raw-output '.access_token / \".\" | .[1] | @base64d' jwt.json\n```\n\n----------------------------------------\n\nTITLE: Simplified Consul Token Configuration\nDESCRIPTION: Demonstrates simplified configuration when server has consul.task_identity configured.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/consul.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n  group \"app\" {\n    task \"web\" {\n      template {\n        data        = \"APP_NAME={{key \\\"app/name\\\"}}\"\n        destination = \"local/config.txt\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Kadalu CSI Plugin Status in Nomad\nDESCRIPTION: Command to check the status of the deployed Kadalu CSI plugin in Nomad, showing health and allocation information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/kadalu-csi/README.md#2025-04-19_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ nomad plugin status kadalu-csi\nID                   = kadalu-csi\nProvider             = kadalu\nVersion              = 0.8.15\nControllers Healthy  = 1\nControllers Expected = 1\nNodes Healthy        = 1\nNodes Expected       = 1\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created    Modified\nd55e314d  4e105698  controller  0        run      running  1m20s ago  1m ago\n4c05ab5a  4e105698  nodeplugin  0        run      running  35s ago    20s ago\n```\n\n----------------------------------------\n\nTITLE: Installing Nomad on RHEL/CentOS\nDESCRIPTION: Installs the Nomad package from the HashiCorp repository using yum package manager.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo yum -y install nomad\n```\n\n----------------------------------------\n\nTITLE: Extracting Ceph Admin Key\nDESCRIPTION: Command to extract the Ceph admin key from the keyring file using Nomad alloc exec command. This key is required for volume creation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/ceph-csi-plugin/README.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad alloc exec 77f  cat /etc/ceph/ceph.client.admin.keyring | awk '/key/{print $3}'\nAQDsIoxgHqpeBBAAtmd9Ndu4m1xspTbvwZdIzA==\n```\n\n----------------------------------------\n\nTITLE: Creating Namespace from HCL Configuration File\nDESCRIPTION: Example demonstrating namespace creation using an HCL configuration file that specifies capabilities, metadata, and other settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/namespace/apply.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nname        = \"dev\"\ndescription = \"Namespace for developers\"\n\ncapabilities {\n  enabled_task_drivers   = [\"docker\", \"exec\"]\n  disabled_task_drivers  = [\"raw_exec\"]\n  enabled_network_modes  = [\"bridge\", \"cni/custom\"]\n  disabled_network_modes = [\"host\"]\n}\n\nmeta {\n  owner        = \"John Doe\"\n  contact_mail = \"john@mycompany.com\"\n}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad namespace apply namespace.hcl\n```\n\n----------------------------------------\n\nTITLE: Declaring Network Variable Structure in HCL\nDESCRIPTION: Shows an example of declaring a variable for network structures in HCL, which can be used in conjunction with the flatten function for resource creation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/flatten.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"networks\" {\n  type = map(object({\n    cidr_block = string\n    subnets = map(object({\n      cidr_block = string\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Nomad snapshot file\nDESCRIPTION: This example demonstrates how to use the 'nomad operator snapshot inspect' command to examine a snapshot file named 'backup.snap'. The output includes detailed information about the snapshot, such as creation time, size, and counts of various Nomad objects.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/snapshot/inspect.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator snapshot inspect backup.snap\nCreated = 2024-06-10T10:54:41+01:00\nID      = 10-215871-1718013281130\nSize    = 158 KiB\nIndex   = 215871\nTerm    = 10\nVersion = 1\n\nType                 Count  Size\nJobVersion           15     42 KiB\nAlloc                5      37 KiB\nTimeTable            1      28 KiB\nJobSubmission        15     17 KiB\nNode                 2      14 KiB\nJob                  4      10 KiB\nCSIPlugin            1      1.9 KiB\nEval                 5      1.6 KiB\nCSIVolume            1      1.1 KiB\nJobSummary           4      825 B\nVariables            2      695 B\nVariablesQuota       8      562 B\nIndex                18     498 B\nDeployment           1      496 B\nServiceRegistration  1      318 B\nACLToken             1      286 B\nSchedulerConfig      1      242 B\nNodePool             2      236 B\nNamespace            1      209 B\nRootKeyMeta          1      127 B\nClusterMetadata      1      71 B\n\nTotal                90     158 KiB\n```\n\n----------------------------------------\n\nTITLE: Using Nomad System Reconcile Summaries Command\nDESCRIPTION: The command syntax for reconciling the summaries of all registered jobs in Nomad. This command requires a management token if ACLs are enabled.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/system/reconcile-summaries.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad system reconcile summaries [options]\n```\n\n----------------------------------------\n\nTITLE: Reading Single Plugin API Request\nDESCRIPTION: Example of making a GET request to get detailed information about a specific plugin by ID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/plugins.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/plugin/csi/example_plugin_id\n```\n\n----------------------------------------\n\nTITLE: AWS Authentication with Doormat\nDESCRIPTION: Commands to refresh AWS credentials with appropriate IAM role using Doormat\nSOURCE: https://github.com/hashicorp/nomad/blob/main/enos/README.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ doormat login --force\n$ doormat aws cred-file add-profile --role \"$ROLE\" --set-default\n```\n\n----------------------------------------\n\nTITLE: Defining Indent Function Syntax in HCL\nDESCRIPTION: This snippet shows the syntax for using the indent function in HCL. It takes two parameters: the number of spaces to indent and the string to be indented.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/indent.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nindent(num_spaces, string)\n```\n\n----------------------------------------\n\nTITLE: Example of Setproduct Usage with Environment and Application Sets\nDESCRIPTION: Demonstrates how to use the setproduct function to generate all combinations of environments and applications, which is useful for resource configurations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/setproduct.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> setproduct([\"development\", \"staging\", \"production\"], [\"app1\", \"app2\"])\n[\n  [\n    \"development\",\n    \"app1\",\n  ],\n  [\n    \"development\",\n    \"app2\",\n  ],\n  [\n    \"staging\",\n    \"app1\",\n  ],\n  [\n    \"staging\",\n    \"app2\",\n  ],\n  [\n    \"production\",\n    \"app1\",\n  ],\n  [\n    \"production\",\n    \"app2\",\n  ],\n]\n```\n\n----------------------------------------\n\nTITLE: Mixed Types with Setproduct Function\nDESCRIPTION: Demonstrates type conversion behavior when mixing strings and numbers in setproduct arguments. Nomad converts to the most general type to ensure consistent result types.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/setproduct.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n> setproduct([\"staging\", \"production\"], [\"a\", 2])\n[\n  [\n    \"staging\",\n    \"a\",\n  ],\n  [\n    \"staging\",\n    \"2\",\n  ],\n  [\n    \"production\",\n    \"a\",\n  ],\n  [\n    \"production\",\n    \"2\",\n  ],\n]\n```\n\n----------------------------------------\n\nTITLE: Using Buf for Protobuf Generation in Nomad\nDESCRIPTION: Command to invoke Buf for Protobuf generation using the configuration in the current directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/tools/buf/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake proto\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Status Command Usage\nDESCRIPTION: Shows the basic syntax for the nomad plugin status command which can accept an optional plugin ID or prefix.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/plugin/status.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad plugin status [options] [plugin]\n```\n\n----------------------------------------\n\nTITLE: Prefix Search Request - cURL Example\nDESCRIPTION: Shell command showing how to make a prefix search request\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/search.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://localhost:4646/v1/search\n```\n\n----------------------------------------\n\nTITLE: Vault Workload Identity Check Response - JSON\nDESCRIPTION: Sample response showing jobs without Vault identity, outdated nodes, and existing Vault tokens that may be affected during upgrade. Includes detailed node information and Vault token metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/upgrade-check.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Index\": 20,\n  \"JobsWithoutVaultIdentity\": [\n    {\n      \"CreateIndex\": 11,\n      \"Datacenters\": [\n        \"*\"\n      ],\n      \"ID\": \"example\",\n      \"JobModifyIndex\": 11,\n      \"JobSummary\": null,\n      \"ModifyIndex\": 19,\n      \"Multiregion\": null,\n      \"Name\": \"example\",\n      \"Namespace\": \"default\",\n      \"NodePool\": \"default\",\n      \"ParameterizedJob\": false,\n      \"ParentID\": \"\",\n      \"Periodic\": false,\n      \"Priority\": 50,\n      \"Status\": \"running\",\n      \"StatusDescription\": \"\",\n      \"Stop\": false,\n      \"SubmitTime\": 1704995322434188000,\n      \"Type\": \"service\"\n    }\n  ],\n  \"KnownLeader\": true,\n  \"LastContact\": 0,\n  \"NextToken\": \"\",\n  \"OutdatedNodes\": [\n    {\n      \"Address\": \"192.168.0.186\",\n      \"CreateIndex\": 8,\n      \"Datacenter\": \"dc1\",\n      \"Drain\": false,\n      \"Drivers\": {\n        \"qemu\": {\n          \"Attributes\": {\n            \"driver.qemu\": \"true\",\n            \"driver.qemu.version\": \"8.1.1\"\n          },\n          \"Detected\": true,\n          \"HealthDescription\": \"Healthy\",\n          \"Healthy\": true,\n          \"UpdateTime\": \"2024-01-11T12:48:35.993541-05:00\"\n        },\n        \"exec\": {\n          \"Attributes\": {},\n          \"Detected\": false,\n          \"HealthDescription\": \"exec driver unsupported on client OS\",\n          \"Healthy\": false,\n          \"UpdateTime\": \"2024-01-11T12:48:35.958495-05:00\"\n        },\n        \"raw_exec\": {\n          \"Attributes\": {\n            \"driver.raw_exec\": \"true\"\n          },\n          \"Detected\": true,\n          \"HealthDescription\": \"Healthy\",\n          \"Healthy\": true,\n          \"UpdateTime\": \"2024-01-11T12:48:35.958539-05:00\"\n        },\n        \"java\": {\n          \"Attributes\": {},\n          \"Detected\": false,\n          \"HealthDescription\": \"\",\n          \"Healthy\": false,\n          \"UpdateTime\": \"2024-01-11T12:48:35.97141-05:00\"\n        },\n        \"docker\": {\n          \"Attributes\": {\n            \"driver.docker.bridge_ip\": \"172.17.0.1\",\n            \"driver.docker.runtimes\": \"io.containerd.runc.v2,runc\",\n            \"driver.docker.os_type\": \"linux\",\n            \"driver.docker\": \"true\",\n            \"driver.docker.version\": \"24.0.7\"\n          },\n          \"Detected\": true,\n          \"HealthDescription\": \"Healthy\",\n          \"Healthy\": true,\n          \"UpdateTime\": \"2024-01-11T12:48:35.989993-05:00\"\n        }\n      },\n      \"HostVolumes\": null,\n      \"ID\": \"049f7683-0cde-727f-428a-913a89f92bd8\",\n      \"LastDrain\": null,\n      \"ModifyIndex\": 10,\n      \"Name\": \"client-1\",\n      \"NodeClass\": \"\",\n      \"NodePool\": \"default\",\n      \"SchedulingEligibility\": \"eligible\",\n      \"Status\": \"ready\",\n      \"StatusDescription\": \"\",\n      \"Version\": \"1.6.4\"\n    }\n  ],\n  \"VaultTokens\": [\n    {\n      \"Accessor\": \"czh9MPcRXzAhxBL9XKyb3Kh1\",\n      \"AllocID\": \"f00893d4-d9ef-4937-6a7a-ab495b68a971\",\n      \"CreateIndex\": 14,\n      \"CreationTTL\": 60,\n      \"NodeID\": \"049f7683-0cde-727f-428a-913a89f92bd8\",\n      \"Task\": \"redis\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Nomad Servers\nDESCRIPTION: Makes GET request to retrieve list of known server nodes from a client agent.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/agent/servers\n```\n\n----------------------------------------\n\nTITLE: Reading Sentinel Policy - GET Request\nDESCRIPTION: Makes a GET request to read a specific Sentinel policy by name.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/sentinel-policies.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/sentinel/policy/foo\n```\n\n----------------------------------------\n\nTITLE: Reading ACL Auth Method by Name in Nomad Using curl\nDESCRIPTION: Shell command for retrieving a specific ACL auth method by its name. This endpoint supports blocking queries and consistency modes, and requires a management token.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/auth-methods.mdx#2025-04-19_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Nomad-Token: <NOMAD_TOKEN_SECRET_ID>\" \\\n    https://localhost:4646/v1/acl/auth-method/example-acl-auth-method\n```\n\n----------------------------------------\n\nTITLE: Installing Nomad with Homebrew on macOS\nDESCRIPTION: Installs the signed Nomad binary from the HashiCorp tap using Homebrew package manager on macOS.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ brew install hashicorp/tap/nomad\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Job Dispatch Command Syntax\nDESCRIPTION: Shows the basic command syntax for dispatching a parameterized job in Nomad.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/dispatch.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad job dispatch [options] <parameterized job> [input source]\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog Entry File\nDESCRIPTION: Command that helps generate a changelog entry file using the cl-entry tool in Nomad.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/CHANGELOG.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake cl\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Value Strategy Driver in Nomad Autoscaler HCL\nDESCRIPTION: This snippet shows how to configure the target-value strategy driver in the Nomad Autoscaler agent configuration. This setup is optional as the app-sizing-percentile plugin is automatically launched by Nomad Autoscaler Enterprise.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/strategy/app-sizing-percentile.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstrategy \"target-value\" {\n  driver = \"target-value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Nomad API Usage Examples\nDESCRIPTION: Examples demonstrating verbose output and region-specific filtering with the nomad operator api command.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/api.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator api -verbose /v1/agent/members?pretty\n> GET http://127.0.0.1:4646/v1/agent/members?pretty=\n* Sending request and receiving response...\n< HTTP/1.1 200 OK\n< Date: Wed, 02 Mar 2022 01:10:59 GMT\n< Content-Type: application/json\n< Vary: Accept-Encoding\n{\n    \"Members\": [\n...\n\n\n$ nomad operator api -region eu-west -filter 'Status == \"completed\"' -dryrun /v1/evaluations\ncurl \\\n  -X GET \\\n    http://127.0.0.1:4646/v1/evaluations?filter=.Status+%3D%3D+%22completed%22&region=eu-west\n```\n\n----------------------------------------\n\nTITLE: Using QEMU Version Constraints in Nomad Jobs\nDESCRIPTION: An example showing how to use QEMU driver attributes in job constraints. This ensures the job only runs on nodes where the QEMU version is greater than a specified version.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/qemu.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  # Only run this job where the qemu version is higher than 1.2.3.\n  constraint {\n    attribute = \"${driver.qemu.version}\"\n    operator  = \">\"\n    value     = \"1.2.3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Element Function Example in Shell Session\nDESCRIPTION: A simple example showing how to retrieve the second element (index 1) from a list using the element function.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/element.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> element([\"a\", \"b\", \"c\"], 1)\nb\n```\n\n----------------------------------------\n\nTITLE: Using nomad acl token info command\nDESCRIPTION: This snippet demonstrates the usage syntax for the 'nomad acl token info' command. It requires an existing token's AccessorID as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/token/info.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl token info <token_accessor_id>\n```\n\n----------------------------------------\n\nTITLE: Basic Command Usage - Nomad Gossip Keyring List\nDESCRIPTION: Shows the basic command syntax for listing gossip encryption keys in a Nomad cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/gossip/keyring-list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator gossip keyring list [options]\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Deployment Promote Command\nDESCRIPTION: Basic usage syntax for the `nomad deployment promote` command. It requires a deployment ID or prefix as an argument and can be used with various options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/deployment/promote.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad deployment promote [options] <deployment id>\n```\n\n----------------------------------------\n\nTITLE: Basic uuidv5 Function Syntax in HCL\nDESCRIPTION: The basic syntax for the uuidv5 function that takes a namespace and name parameter to generate a deterministic UUID v5.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/uuid/uuidv5.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nuuidv5(namespace, name)\n```\n\n----------------------------------------\n\nTITLE: OIDC Configuration Parameters\nDESCRIPTION: Specific configuration options for OIDC authentication including discovery URL, client credentials, and PKCE settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/partials/api-docs/auth-method-params.mdx#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n  - `OIDCDiscoveryURL` `(string: <required>)` - The OIDC discovery URL, without\n  any `.well-known` component (base path). Required for `OIDC` method type.\n  Either this, the `JWKSURL` or the `JWTValidationPubKeys` is required for\n  `JWT` method type.\n\n  - `OIDCClientID` `(string: <required>)` - The OAuth client ID configured with\n  your OIDC provider. Required for `OIDC` method type.\n\n  - `OIDCClientSecret` `(string: <required>)` - The OAuth client secret\n  configured with your OIDC provider. Required for `OIDC` method type.\n\n  - `OIDCEnablePKCE` `(bool: false)` - When set to `true`, Nomad will include\n  [PKCE][] verification in the auth flow. Even with PKCE enabled in Nomad,\n  you may still need to enable it in your OIDC provider.\n```\n\n----------------------------------------\n\nTITLE: Running CSI Plugin Job in Nomad\nDESCRIPTION: This snippet demonstrates how to run the CSI plugin job using Nomad. It shows the command and its output, including allocation creation and status changes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/hostpath/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad job run ./plugin.nomad\n==> Monitoring evaluation \"7ac3cc8d\"\n    Evaluation triggered by job \"csi-plugin\"\n    Allocation \"bbd34b72\" created: node \"917b009b\", group \"csi\"\n==> Monitoring evaluation \"7ac3cc8d\"\n    Allocation \"bbd34b72\" status changed: \"pending\" -> \"running\" (Tasks are running)\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"7ac3cc8d\" finished with status \"complete\"\nNodes Healthy        = 1\n```\n\n----------------------------------------\n\nTITLE: Using setintersection Function with Multiple Sets\nDESCRIPTION: Demonstrates how to use the setintersection function with three different sets to find common elements across all sets. The example shows that 'b' is the only element common to all three sets.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/setintersection.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> setintersection([\"a\", \"b\"], [\"b\", \"c\"], [\"b\", \"d\"])\n[\n  \"b\",\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Data Directory in Nomad Server\nDESCRIPTION: This example shows how to configure a custom data directory for storing Nomad server data, which is useful for specifying alternate storage locations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/server.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nserver {\n  data_dir = \"/opt/nomad/server\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring nspawn Plugin Options\nDESCRIPTION: This snippet demonstrates how to configure plugin options for the nspawn driver using the new plugin syntax. It shows enabling the driver and volume support.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/nspawn.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"nspawn\" {\n  config {\n    enabled = true\n    volumes = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Memory Swappiness for Podman Container\nDESCRIPTION: Tunes the container's memory swappiness behavior, accepting an integer between 0 and 100.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_23\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  memory_swappiness = 60\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad Eval Command in CLI\nDESCRIPTION: This snippet demonstrates the basic usage of the 'nomad eval' command in the command-line interface. It shows the general syntax and mentions that help is available for each subcommand.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/eval/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nUsage: `nomad eval <subcommand> [options]`\n\nRun `nomad eval <subcommand> -h` for help on that subcommand. The following\nsubcommands are available:\n- [`eval delete`][delete] - Delete evals\n- [`eval list`][list] - List all evals\n- [`eval status`][status] - Display the status of a eval\n```\n\n----------------------------------------\n\nTITLE: Reconciling Job Summaries in Nomad via HTTP API\nDESCRIPTION: This snippet shows how to reconcile the summaries of all registered jobs in Nomad using a PUT request to the /v1/system/reconcile/summaries endpoint. This operation ensures job summaries are up-to-date.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/system.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request PUT \\\n    https://localhost:4646/v1/system/reconcile/summaries\n```\n\n----------------------------------------\n\nTITLE: Cloning Nomad Repository for Source Compilation\nDESCRIPTION: Sets up the directory structure and clones the Nomad repository from GitHub into the GOPATH for source compilation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_19\n\nLANGUAGE: shell-session\nCODE:\n```\n$ mkdir -p $GOPATH/src/github.com/hashicorp && cd $_\n$ git clone https://github.com/hashicorp/nomad.git\n$ cd nomad\n```\n\n----------------------------------------\n\nTITLE: Deleting a quota specification example\nDESCRIPTION: An example of using the nomad quota delete command to delete a quota specification named 'my-quota', showing both the command and the successful output message.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/quota/delete.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad quota delete my-quota\nSuccessfully deleted quota \"my-quota\"!\n```\n\n----------------------------------------\n\nTITLE: Creating Terraform Service Account\nDESCRIPTION: This command creates a service account named 'terraform' that will be used by Terraform to manage GCP resources.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_13\n\nLANGUAGE: console\nCODE:\n```\ngcloud iam service-accounts create terraform \\\n    --display-name \"Terraform Service Account\" \\\n    --description \"Service account to use with Terraform\"\n```\n\n----------------------------------------\n\nTITLE: Promoting Canaries in All Groups\nDESCRIPTION: This example demonstrates how to promote canaries in all groups of a deployment using the `nomad deployment promote` command. It shows the deployment status before and after promotion.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/deployment/promote.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n# Have two task groups waiting for promotion.\n$ nomad status example\nID            = example\nName          = example\nSubmit Date   = 07/25/17 18:35:05 UTC\nType          = service\nPriority      = 50\nDatacenters   = dc1\nStatus        = running\nPeriodic      = false\nParameterized = false\n\nSummary\nTask Group  Queued  Starting  Running  Failed  Complete  Lost\ncache       0       0         3        0       0         0\nweb         0       0         3        0       0         0\n\nLatest Deployment\nID          = 9fa81f27\nStatus      = running\nDescription = Deployment is running but requires manual promotion\n\nDeployed\nTask Group  Promoted  Desired  Canaries  Placed  Healthy  Unhealthy\nweb         false     2        1         1       0        0\ncache       false     2        1         1       0        0\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created At\n091377e5  a8dcce2d  web         1        run      running  07/25/17 18:35:05 UTC\nd2b13584  a8dcce2d  cache       1        run      running  07/25/17 18:35:05 UTC\n4bb185b7  a8dcce2d  web         0        run      running  07/25/17 18:31:34 UTC\n9b6811ee  a8dcce2d  cache       0        run      running  07/25/17 18:31:34 UTC\ne0a2441b  a8dcce2d  cache       0        run      running  07/25/17 18:31:34 UTC\nf2409f7d  a8dcce2d  web         0        run      running  07/25/17 18:31:34 UTC\n\n# Promote all groups within the deployment\n$ nomad deployment promote 9fa81f27\n==> Monitoring evaluation \"6c6e64ae\"\n    Evaluation triggered by job \"example\"\n    Evaluation within deployment: \"9fa81f27\"\n    Allocation \"8fa21654\" created: node \"a8dcce2d\", group \"web\"\n    Allocation \"9f6727a6\" created: node \"a8dcce2d\", group \"cache\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"6c6e64ae\" finished with status \"complete\"\n\n# Inspect the status and see both groups have been promoted.\n$ nomad status example\nID            = example\nName          = example\nSubmit Date   = 07/25/17 18:35:05 UTC\nType          = service\nPriority      = 50\nDatacenters   = dc1\nStatus        = running\nPeriodic      = false\nParameterized = false\n\nSummary\nTask Group  Queued  Starting  Running  Failed  Complete  Lost\ncache       0       0         2        0       2         0\nweb         0       0         2        0       2         0\n\nLatest Deployment\nID          = 9fa81f27\nStatus      = successful\nDescription = Deployment completed successfully\n\nDeployed\nTask Group  Promoted  Desired  Canaries  Placed  Healthy  Unhealthy\nweb         true      2        1         2       2        0\ncache       true      2        1         2       2        0\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status    Created At\n8fa21654  a8dcce2d  web         1        run      running   07/25/17 18:35:21 UTC\n9f6727a6  a8dcce2d  cache       1        run      running   07/25/17 18:35:21 UTC\n091377e5  a8dcce2d  web         1        run      running   07/25/17 18:35:05 UTC\nd2b13584  a8dcce2d  cache       1        run      running   07/25/17 18:35:05 UTC\n4bb185b7  a8dcce2d  web         0        stop     complete  07/25/17 18:31:34 UTC\n9b6811ee  a8dcce2d  cache       0        stop     complete  07/25/17 18:31:34 UTC\ne0a2441b  a8dcce2d  cache       0        stop     complete  07/25/17 18:31:34 UTC\nf2409f7d  a8dcce2d  web         0        stop     complete  07/25/17 18:31:34 UTC\n```\n\n----------------------------------------\n\nTITLE: Querying Nomad API with curl\nDESCRIPTION: Basic example of using curl to query the Nomad API members endpoint. This request targets the default Nomad port (4646) on localhost.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl http://127.0.0.1:4646/v1/agent/members\n```\n\n----------------------------------------\n\nTITLE: Using the chomp function to remove trailing newlines in HCL\nDESCRIPTION: Examples of using the chomp function to remove various types of trailing newline characters from strings. It demonstrates handling both Unix-style (\\n) and Windows-style (\\r\\n) line endings, as well as multiple consecutive newlines.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/chomp.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> chomp(\"hello\\n\")\nhello\n> chomp(\"hello\\r\\n\")\nhello\n> chomp(\"hello\\n\\n\")\nhello\n```\n\n----------------------------------------\n\nTITLE: Lookup Function Usage Examples\nDESCRIPTION: Shows practical examples of using the lookup function with a simple map containing string values. Demonstrates both successful key lookup and fallback to default value when key doesn't exist.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/lookup.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> lookup({a=\"ay\", b=\"bee\"}, \"a\", \"what?\")\nay\n> lookup({a=\"ay\", b=\"bee\"}, \"c\", \"what?\")\nwhat?\n```\n\n----------------------------------------\n\nTITLE: Specifying Docker Labels with HCLv1 (Deprecated Format)\nDESCRIPTION: An example of the deprecated HCLv1 format for specifying Docker labels with dots in their keys, particularly for DataDog autodiscovery. This format is no longer supported in Nomad 1.9.0.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/upgrade/upgrade-specific.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlabels {\n  \"com.datadoghq.ad.check_names\"  = \"[\\\"openmetrics\\\"]\"\n  \"com.datadoghq.ad.init_configs\" = \"[{}]\"\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic Singularity Task in Nomad\nDESCRIPTION: A basic configuration for running a Singularity container in Nomad using the lolcow example image from the Sylabs container library.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/singularity.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"lolcow\" {\n  driver = \"Singularity\"\n\n  config {\n     # this example run an image from sylabs container library with the\n     # canonical example of lolcow\n     image = \"library://sylabsed/examples/lolcow:latest\"\n     # command can be run, exec or test\n     command = \"run\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Raft Peer using Nomad CLI\nDESCRIPTION: This command uses the Nomad CLI to remove a server from the Raft configuration by specifying its address. The DELETE operation removes the server with the given address from the Raft peer configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/raft.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator api -X DELETE \\\n   /v1/operator/raft/peer?address=1.2.3.4:4647\n```\n\n----------------------------------------\n\nTITLE: Stopping a Nomad Node\nDESCRIPTION: Forcefully terminates a specified Nomad node using kill -9. Note that for maintaining quorum, you can only stop one server at a time.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/upgrades/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./kill_node.sh server1\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ./kill_node.sh client1\n```\n\n----------------------------------------\n\nTITLE: Using the nomad sentinel read command syntax\nDESCRIPTION: Basic syntax for using the nomad sentinel read command, which requires a policy name argument. This command is only available when ACLs are enabled and requires a management token.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/sentinel/read.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad sentinel read [options] <Policy Name>\n```\n\n----------------------------------------\n\nTITLE: Deleting an ACL Binding Rule with cURL\nDESCRIPTION: Makes a DELETE request to remove an ACL Binding Rule identified by its ID. Requires a management token and is forwarded to the authoritative region.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/binding-rules.mdx#2025-04-19_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    --header \"X-Nomad-Token: <NOMAD_TOKEN_SECRET_ID>\" \\\n    https://localhost:4646/v1/acl/binding-rule/5da76548-1a60-b8fb-f9be-c7736a5bca09\n```\n\n----------------------------------------\n\nTITLE: Node Pool Jobs API Response Structure\nDESCRIPTION: Sample JSON response showing the structure of job data returned by the API, including job status, summary, and modification indices.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/node-pools.mdx#2025-04-19_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"ID\": \"example\",\n    \"ParentID\": \"\",\n    \"Name\": \"example\",\n    \"Type\": \"service\",\n    \"Priority\": 50,\n    \"Status\": \"pending\",\n    \"StatusDescription\": \"\",\n    \"JobSummary\": {\n      \"JobID\": \"example\",\n      \"Namespace\": \"default\",\n      \"Summary\": {\n        \"cache\": {\n          \"Queued\": 1,\n          \"Complete\": 1,\n          \"Failed\": 0,\n          \"Running\": 0,\n          \"Starting\": 0,\n          \"Lost\": 0\n        }\n      },\n      \"Children\": {\n        \"Pending\": 0,\n        \"Running\": 0,\n        \"Dead\": 0\n      },\n      \"CreateIndex\": 52,\n      \"ModifyIndex\": 96\n    },\n    \"CreateIndex\": 52,\n    \"ModifyIndex\": 93,\n    \"JobModifyIndex\": 52\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Nomad Resource Policy JSON Response Schema\nDESCRIPTION: Example response showing a resource policy configuration for a Nomad job. Contains metadata like creation time and indices, job identifiers, resource limits, and statistical metrics for memory usage.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/recommendations.mdx#2025-04-19_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CreateIndex\": 22,\n  \"Current\": 256,\n  \"EnforceVersion\": false,\n  \"Group\": \"cache\",\n  \"ID\": \"47c97404-918f-8b19-873b-36d802f16f23\",\n  \"JobID\": \"example\",\n  \"JobVersion\": 0,\n  \"Meta\": {\n    \"nomad_policy_id\": \"c355d0ec-7aa1-2604-449d-4ec79c813d2c\"\n  },\n  \"ModifyIndex\": 25,\n  \"Namespace\": \"default\",\n  \"Region\": \"global\",\n  \"Resource\": \"MemoryMB\",\n  \"Stats\": {\n    \"mean\": 4.816847859995009,\n    \"min\": 2.6640625,\n    \"p99\": 6.51171875,\n    \"max\": 6.515625\n  },\n  \"SubmitTime\": 1603444202372926000,\n  \"Task\": \"redis\",\n  \"Value\": 512\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Namespace in Shell\nDESCRIPTION: Makes a DELETE request to remove a namespace. This example deletes the 'api-prod' namespace. This operation requires management ACL capability.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/namespaces.mdx#2025-04-19_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    https://localhost:4646/v1/namespace/api-prod\n```\n\n----------------------------------------\n\nTITLE: Encoding Terminal Input/Output in Nomad API\nDESCRIPTION: Demonstrates how to encode terminal input and output, including control characters, for use with Nomad's API. Includes examples of form feed and ANSI control sequences.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/allocations.mdx#2025-04-19_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n# \\x12: form feed, to clear terminal\n{\"stdin\":{\"data\":\"DA==\"}}\n\n# \"\\x1b[H\\x1b[2J$ \":\n# CSI-H (move cursor to top left corner), CSI-2J (clear entire screen), print \"$ \"\n{\"stdout\":{\"data\":\"G1tIG1sySiQg\"}}\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Command in Nomad HCL\nDESCRIPTION: Demonstrates how to specify a custom command to run when starting the Docker container.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  command = \"my-command\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites on Ubuntu/Debian for Nomad\nDESCRIPTION: Updates package lists and installs required dependencies (wget, gpg, coreutils) before installing Nomad on Ubuntu/Debian systems.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo apt-get update && \\\n  sudo apt-get install wget gpg coreutils\n```\n\n----------------------------------------\n\nTITLE: Health Check Request - Shell\nDESCRIPTION: GET request to check agent health status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/agent/health\n```\n\n----------------------------------------\n\nTITLE: Adding HashiCorp Repository on CentOS/RHEL\nDESCRIPTION: This command adds the official HashiCorp Linux repository to the system's package sources on CentOS or RHEL systems.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/virt/install.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n```\n\n----------------------------------------\n\nTITLE: License Inspection Error Example\nDESCRIPTION: Example showing validation errors when inspecting an invalid or expired license.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/license/inspect.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad license inspect license.hclic\n...\nValidation Errors:\n   * license is no longer valid\n   * license expiration date is before version build date: expiration=2023-01-13T23:59:59Z build=2023-03-17T00:00:00Z\n```\n\n----------------------------------------\n\nTITLE: Debugging Pledge Permissions with Strace\nDESCRIPTION: Example command demonstrating how to use strace to monitor syscalls for a pledge-wrapped process. This helps identify which syscalls are being blocked by pledge permissions, indicated by EPERM errors.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/pledge.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nstrace -ff /opt/bin/pledge-1.8.com -p \"stdio rpath inet\" -- curl example.com\n```\n\n----------------------------------------\n\nTITLE: Viewing Nomad Service Check Status via CLI - Allocation Summary\nDESCRIPTION: Example of using the 'nomad alloc status' command to view summary information for Nomad service checks in an allocation, showing service, task, check name, mode, and status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/check.mdx#2025-04-19_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc status <allocation-id>\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nNomad Service Checks:\nService   Task     Name          Mode         Status\ndatabase  task     db_tcp_probe  readiness    success\nweb       (group)  healthz       healthiness  failure\nweb       (group)  index-page    healthiness  success\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad Node Pool Command\nDESCRIPTION: This snippet shows the basic usage syntax for the 'nomad node pool' command. It demonstrates how to run the command with a subcommand and options, and how to access help for specific subcommands.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnomad node pool <subcommand> [options]\n```\n\nLANGUAGE: shell\nCODE:\n```\nnomad node pool <subcommand> -h\n```\n\n----------------------------------------\n\nTITLE: Defining Evaluation Trigger Constants in Go\nDESCRIPTION: Constants defining the different types of evaluation triggers in Nomad's scheduling system. These constants are used to identify the reason why an evaluation was created, ranging from job registration to node updates and deployment monitoring.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/architecture-eval-triggers.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\tEvalTriggerJobRegister          = \"job-register\"\n\tEvalTriggerJobDeregister        = \"job-deregister\"\n\tEvalTriggerPeriodicJob          = \"periodic-job\"\n\tEvalTriggerNodeDrain            = \"node-drain\"\n\tEvalTriggerNodeUpdate           = \"node-update\"\n\tEvalTriggerAllocStop            = \"alloc-stop\"\n\tEvalTriggerScheduled            = \"scheduled\"\n\tEvalTriggerRollingUpdate        = \"rolling-update\"\n\tEvalTriggerDeploymentWatcher    = \"deployment-watcher\"\n\tEvalTriggerFailedFollowUp       = \"failed-follow-up\"\n\tEvalTriggerMaxPlans             = \"max-plan-attempts\"\n\tEvalTriggerRetryFailedAlloc     = \"alloc-failure\"\n\tEvalTriggerQueuedAllocs         = \"queued-allocs\"\n\tEvalTriggerPreemption           = \"preemption\"\n\tEvalTriggerScaling              = \"job-scaling\"\n\tEvalTriggerMaxDisconnectTimeout = \"max-disconnect-timeout\"\n\tEvalTriggerReconnect            = \"reconnect\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using nomad alloc fs Command\nDESCRIPTION: Basic usage syntax for the nomad alloc fs command, specifying an allocation ID and path.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/fs.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad alloc fs [options] <allocation> <path>\n```\n\n----------------------------------------\n\nTITLE: Default Nomad Logs Configuration\nDESCRIPTION: Empty logs block showing default configuration where Nomad automatically enables logging with default settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/logs.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Using nomad operator raft info command\nDESCRIPTION: This snippet shows the usage syntax for the 'nomad operator raft info' command. It requires specifying the path to the data directory as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/raft/info.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator raft info <path to data dir>\n```\n\n----------------------------------------\n\nTITLE: Nomad Operator Gossip Keyring Remove Command Syntax\nDESCRIPTION: The basic command syntax for removing a gossip encryption key from the Nomad cluster. Requires specifying the encryption key as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/gossip/keyring-remove.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator gossip keyring remove [options] <key>\n```\n\n----------------------------------------\n\nTITLE: Using nomad sentinel delete Command Syntax\nDESCRIPTION: The basic syntax for the nomad sentinel delete command, which requires a single argument specifying the policy name to delete.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/sentinel/delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad sentinel delete [options] <Policy Name>\n```\n\n----------------------------------------\n\nTITLE: ACL Token List Response\nDESCRIPTION: JSON response showing the list of ACL tokens. Each token includes its AccessorID, Name, Type, Policies, and other properties. SecretIDs are not included in the listing response.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"AccessorID\": \"b780e702-98ce-521f-2e5f-c6b87de05b24\",\n    \"Name\": \"Bootstrap Token\",\n    \"Type\": \"management\",\n    \"Policies\": null,\n    \"Global\": true,\n    \"CreateTime\": \"2017-08-23T22:47:14.695408057Z\",\n    \"CreateIndex\": 7,\n    \"ModifyIndex\": 7\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Single Element Sets with Setproduct\nDESCRIPTION: Shows that when all arguments to setproduct have only one element, the result has only one element containing the first element of each argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/setproduct.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n> setproduct([\"a\"], [\"b\"])\n[\n  [\n    \"a\",\n    \"b\",\n  ],\n]\n```\n\n----------------------------------------\n\nTITLE: File Stream Response JSON\nDESCRIPTION: Example response from streaming a file from an allocation directory, showing file offset and content data.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n({\n  \"File\": \"alloc/logs/redis.log\",\n  \"Offset\": 3604480,\n  \"Data\": \"NTMxOTMyCjUzMTkzMwo1MzE5MzQKNTMx...\"\n},\n{\n  \"File\": \"alloc/logs/redis.log\",\n  \"FileEvent\": \"file deleted\"\n})\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad Sentinel Apply Command\nDESCRIPTION: Basic syntax for the 'nomad sentinel apply' command, which requires a policy name and policy file as arguments. The command is only available when ACLs are enabled and requires a management token.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/sentinel/apply.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad sentinel apply [options] <Policy Name> <Policy File>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Packer-built image ID\nDESCRIPTION: Azure CLI command to list and query for the custom Hashistack image that was created by Packer. This returns the full resource ID needed for Terraform.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/azure/README.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ az image list --query \"[?tags.Product=='Hashistack'].id\"\n\n[\n  \"/subscriptions/SUBSCRIPTION_ID/resourceGroups/PACKER/providers/Microsoft.Compute/images/hashistack\"\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Slice Function Syntax in HCL\nDESCRIPTION: Demonstrates the basic syntax for the slice function that extracts consecutive elements from a list. Takes a list and two indices as parameters - startindex (inclusive) and endindex (exclusive).\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/slice.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nslice(list, startindex, endindex)\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Application Load Balancer\nDESCRIPTION: Configures an AWS Application Load Balancer with logging enabled. Requires security group IDs, subnet IDs, and an S3 bucket for access logs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/aws-oidc-provider.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_lb\" \"test\" {\n  name               = \"test-lb-tf\"\n  internal           = false\n  load_balancer_type = \"application\"\n  security_groups    = [<SECURITY_GROUP_ID>]\n  subnets            = [<SUBNET_IDS>]\n\n  enable_deletion_protection = true\n\n  access_logs {\n    bucket  = <S3_BUCKET_ID>\n    prefix  = \"test-lb\"\n    enabled = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Working Directory in Podman for Nomad (HCL)\nDESCRIPTION: Sets the working directory for the container. If not specified, it defaults to the image's default working directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_33\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  working_dir = \"/data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Working Directory for Process Inside Container\nDESCRIPTION: Configuration to set the initial working directory for the payload process inside the Singularity container, similar to the Docker WORKDIR directive.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/singularity.mdx#2025-04-19_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  pwd = \"/path/to/folder\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Nomad Raft Peers via HTTP API\nDESCRIPTION: HTTP GET request to retrieve the set of raft peers in the region. Returns an array of peer addresses in JSON format. This endpoint does not support blocking queries and requires no ACL permissions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/status.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/status/peers\n```\n\nLANGUAGE: json\nCODE:\n```\n[\"127.0.0.1:4647\"]\n```\n\n----------------------------------------\n\nTITLE: Querying Node Pool Jobs - With Namespace\nDESCRIPTION: Shell command demonstrating how to query jobs in a specific node pool while filtering by namespace.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/node-pools.mdx#2025-04-19_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api /v1/node/pool/prod-eng/jobs?namespace=prod\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Check Headers in Nomad Service Definition\nDESCRIPTION: Example showing how to set HTTP headers for health checks in a Nomad job configuration. This demonstrates setting an Authorization header for a HTTP health check that runs every 5 seconds with a 2 second timeout.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/check.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nservice {\n  # ...\n  check {\n    type     = \"http\"\n    port     = \"lb\"\n    path     = \"/_healthz\"\n    interval = \"5s\"\n    timeout  = \"2s\"\n    header {\n      Authorization = [\"Basic ZWxhc3RpYzpjaGFuZ2VtZQ==\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure service principal for Consul auto-join\nDESCRIPTION: Command to create a service principal with Reader permissions for Consul's cloud auto-join feature. This allows Consul agents to discover and join the cluster automatically.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/azure/README.md#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ az ad sp create-for-rbac --role=\"Reader\" --scopes=\"/subscriptions/[SUBSCRIPTION_ID]\"\n\n{\n  \"appId\": \"CLIENT_ID\",\n  \"displayName\": \"azure-cli-...\",\n  \"name\": \"http://azure-cli-...\",\n  \"password\": \"CLIENT_SECRET\",\n  \"tenant\": \"TENANT_ID\"\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing format Function with Template Interpolation\nDESCRIPTION: Illustrates the similarity between using the format function and template interpolation syntax for simple formatting tasks. It shows how template interpolation can be more readable for basic string insertions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/format.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n> format(\"Hello, %s!\", var.name)\nHello, Valentina!\n> \"Hello, ${var.name}!\"\nHello, Valentina!\n```\n\n----------------------------------------\n\nTITLE: Requesting Formatted JSON Output from Nomad API\nDESCRIPTION: Example of making an HTTP request to Nomad's API with pretty-printed JSON output.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/index.mdx#2025-04-19_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl https://localhost:4646/v1/page?pretty\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Path-based Style Artifact Downloads in Nomad\nDESCRIPTION: Specifies how to download an artifact from an S3 bucket using path-based addressing style, targeting a specific AWS region.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/json-jobs.mdx#2025-04-19_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Artifacts\": [\n    {\n      \"GetterSource\": \"https://my-bucket-example.s3-us-west-2.amazonaws.com/my_app.tar.gz\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Quota Access Rules in Nomad\nDESCRIPTION: Example of setting read-only access policy for quota operations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/acl-policy.mdx#2025-04-19_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nquota {\n  policy = \"read\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using nomad acl auth-method create command\nDESCRIPTION: This snippet shows the basic usage syntax for the 'nomad acl auth-method create' command. It demonstrates how to use the command with options to create a new ACL auth method.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/auth-method/create.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl auth-method create [options]\n```\n\n----------------------------------------\n\nTITLE: Using nomad var init Command\nDESCRIPTION: Basic usage syntax for the 'nomad var init' command. This command creates an example variable specification file, with an optional filename parameter.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/init.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad var init <filename>\n```\n\n----------------------------------------\n\nTITLE: Default Audit Sink Configuration in HCL\nDESCRIPTION: Default sink configuration that gets created when audit logging is enabled with minimal settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/audit.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\naudit {\n  enabled = true\n  sink \"audit\" {\n    type               = \"file\"\n    delivery_guarantee = \"enforced\"\n    format             = \"json\"\n    path               = \"/[data_dir]/audit/audit.log\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Paginated Node Pool List\nDESCRIPTION: Demonstrates how to use pagination to list node pools in smaller chunks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/list.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node pool list -per-page 2\nName     Description\nall      Node pool with all nodes in the cluster.\ndefault  Default node pool.\n\nResults have been paginated. To get the next page run:\n\nnomad node pool list -per-page 2 -page-token dev\n\n$ nomad node pool list -per-page 2 -page-token dev\nName  Description\ndev   Node pool for dev workloads.\nprod  Node pool for production workloads.\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Volume Access in Nomad 0.12.0 (HCL)\nDESCRIPTION: Configuration snippet to restore pre-0.12.0 behavior for Docker volume access. This enables the Docker 'volume' plugin to allow binding host paths.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/upgrade/upgrade-specific.mdx#2025-04-19_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"docker\" {\n  config {\n    volumes {\n      enabled = true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using nomad acl role create command\nDESCRIPTION: The basic usage syntax for the 'nomad acl role create' command. This command is used to create new ACL Roles and requires specific options to be set via flags.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/role/create.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl role create [options]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nomad Enterprise License Info via HTTP API\nDESCRIPTION: This curl command demonstrates how to retrieve information about the current Nomad Enterprise license using the license operator HTTP API endpoint. The request is sent as a GET request to the /v1/operator/license endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/license.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/operator/license\n```\n\n----------------------------------------\n\nTITLE: Accessing the Nomad cluster via SSH\nDESCRIPTION: Command to SSH into one of the deployed servers using the auto-generated private key and the server's public IP address. The private key is created during the provisioning process.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/azure/README.md#2025-04-19_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ ssh -i azure-hashistack.pem ubuntu@PUBLIC_IP\n```\n\n----------------------------------------\n\nTITLE: Usage of nomad job promote command\nDESCRIPTION: Demonstrates the basic syntax for using the 'nomad job promote' command. It requires a job ID or prefix as an argument and can be used with additional options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/promote.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad job promote [options] <job>\n```\n\n----------------------------------------\n\nTITLE: Setting Lightrun Driver Permissions in Shell\nDESCRIPTION: Command to set executable permissions for the Lightrun Java driver plugin file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/lightrun.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x ./plugins/lightrun-java-driver\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Snapshot Agent Command\nDESCRIPTION: This command syntax shows how to run the Nomad snapshot agent with a specified configuration file. The agent can be run as a long-running daemon or in one-shot mode for batch jobs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/snapshot/agent.mdx#2025-04-19_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator snapshot agent [options] <config_file>\n```\n\n----------------------------------------\n\nTITLE: Creating a Job - JSON Response\nDESCRIPTION: Response containing evaluation ID and job modification details\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EvalID\": \"\",\n  \"EvalCreateIndex\": 0,\n  \"JobModifyIndex\": 109,\n  \"Warnings\": \"\",\n  \"Index\": 0,\n  \"LastContact\": 0,\n  \"KnownLeader\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nomad Agent with Custom Configuration\nDESCRIPTION: This command starts a Nomad agent using a custom configuration file that provides the host volume for NFS and allows Docker privileged mode.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/nfs/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo nomad agent -config=agent.hcl\n```\n\n----------------------------------------\n\nTITLE: Example go-netaddrs Output Format\nDESCRIPTION: Demonstrates the expected space-delimited output format from a go-netaddrs executable command. The output contains IPv4 addresses separated by spaces.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/server_join.mdx#2025-04-19_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n\"1.1.1.1 2.2.2.2\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Canary Deployment Evaluation Flow in Mermaid\nDESCRIPTION: Mermaid flowchart illustrating the sequence of evaluations created during a canary deployment process, showing how the Deployment Watcher generates new evaluations as allocations become healthy.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/architecture-eval-triggers.md#2025-04-19_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n\n    registerEvent((Job\\nRegister))\n    alloc1health((Canary\\nHealthy))\n    alloc2health((Alloc 2\\nHealthy))\n    alloc3health((Alloc 3\\nHealthy))\n\n    register([job-register])\n    dwPostCanary([deployment-watcher])\n    dwPostAlloc2([deployment-watcher])\n    dwPostAlloc3([deployment-watcher])\n\n    %% style classes\n    classDef eval fill:#d5f6ea,stroke-width:4px,stroke:#1d9467\n    classDef other fill:#d5f6ea,stroke:#1d9467\n    class registerEvent,alloc1health,alloc2health,alloc3health other\n    class register,dwPostCanary,dwPostAlloc2,dwPostAlloc3 eval\n\n    registerEvent --> register\n    register --> wait1\n    alloc1health --> wait1\n    wait1 --> dwPostCanary\n\n    dwPostCanary --> wait2\n    alloc2health --> wait2\n    wait2 --> dwPostAlloc2\n\n    dwPostAlloc2 --> wait3\n    alloc3health --> wait3\n    wait3 --> dwPostAlloc3\n```\n\n----------------------------------------\n\nTITLE: Using nomad acl auth-method info command\nDESCRIPTION: This snippet shows the basic usage syntax for the 'nomad acl auth-method info' command. It requires an existing auth method's name as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/auth-method/info.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl auth-method info [options] <auth-method_name>\n```\n\n----------------------------------------\n\nTITLE: Installing Nomad with Chocolatey on Windows\nDESCRIPTION: Installs the Nomad package using Chocolatey package manager on Windows systems.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_16\n\nLANGUAGE: shell-session\nCODE:\n```\n$ choco install nomad\n```\n\n----------------------------------------\n\nTITLE: Checking Device Fingerprint Status\nDESCRIPTION: Command to check the status of detected devices using the Nomad CLI.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/plugins/device/cmd/example/README.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnomad node status -json -self | jq '.NodeResources.Devices'\n```\n\n----------------------------------------\n\nTITLE: Computing SHA512 Hash in Nomad Configuration Language\nDESCRIPTION: This example demonstrates how to use the sha512 function to compute the SHA512 hash of the string \"hello world\". The function first encodes the input as UTF-8, applies the SHA512 algorithm, and then encodes the result as lowercase hexadecimal digits.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/crypto/sha512.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> sha512(\"hello world\")\n309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n```\n\n----------------------------------------\n\nTITLE: Configuring HCP Vault Authentication in Terraform\nDESCRIPTION: Sets up the Vault authentication for the Nomad cluster by applying a separate Terraform configuration and exporting the necessary environment variables.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/terraform/README.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd ./hcp-vault-auth\nterraform init\nterraform apply --auto-approve\n$(terraform output --raw environment)\ncd ../\n```\n\n----------------------------------------\n\nTITLE: Calculating Exponents Using pow Function in Nomad Shell\nDESCRIPTION: This snippet demonstrates the usage of the 'pow' function in Nomad's configuration language. It shows two examples: raising 3 to the power of 2, and raising 4 to the power of 0.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/numeric/pow.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> pow(3, 2)\n9\n> pow(4, 0)\n1\n```\n\n----------------------------------------\n\nTITLE: Navigating to Terraform Environment Directory in Bash\nDESCRIPTION: This command changes the current directory to the US East environment subdirectory for Terraform configurations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/aws/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd env/us-east\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabbed Content with MDX\nDESCRIPTION: Example of using the Tabs component to create tabbed content sections, commonly used for showing code examples in different languages.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/README.md#2025-04-19_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\nNormal **markdown** content.\n\n<Tabs>\n<Tab heading=\"CLI command\">\n            <!-- Intentionally skipped line.. -->\n```shell-session\n$ command ...\n```\n            <!-- Intentionally skipped line.. -->\n</Tab>\n<Tab heading=\"API call using cURL\">\n\n```shell-session\n$ curl ...\n```\n\n</Tab>\n</Tabs>\n\nContinued normal markdown content\n```\n\n----------------------------------------\n\nTITLE: Setting Singularity Command Action\nDESCRIPTION: Configuration to specify the Singularity command action to use when running the container. Options include run, exec, or test.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/singularity.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  command = \"run\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Recommendation Apply Command Syntax\nDESCRIPTION: Shows the basic command syntax for applying recommendations in Nomad Enterprise. The command requires at least one recommendation ID as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/recommendation/apply.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad recommendation apply [options] <recommendation_ids>\n```\n\n----------------------------------------\n\nTITLE: Fuzzy Search Request Payload - Jobs Context\nDESCRIPTION: JSON payload for fuzzy searching within jobs context\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/search.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Text\": \"py\",\n  \"Context\": \"jobs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Virt Driver on CentOS/RHEL\nDESCRIPTION: This command installs the Nomad Virt driver plugin on CentOS or RHEL systems.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/virt/install.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo yum -y install nomad-driver-virt\n```\n\n----------------------------------------\n\nTITLE: Running Demo Setup Script\nDESCRIPTION: This command executes a setup script that configures all necessary components for the NFS plugin demo.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/nfs/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Markdown Table for Issue Type Labels\nDESCRIPTION: Defines the main types of issues in the Nomad project, including enhancements, bugs, and questions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/issue-labels.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nLabel | Description\n---|---\ntype/enhancement | Proposed improvement or new feature\ntype/bug | Feature does not function as expected or crashes Nomad\ntype/question | General questions\n```\n\n----------------------------------------\n\nTITLE: Complete Nomad Job Revert Example\nDESCRIPTION: Comprehensive example showing job history inspection and reversion process, including checking job history, reverting to a previous version, and verifying the changes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/revert.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad job history -p example\nVersion     = 1\nStable      = false\nSubmit Date = 07/25/17 21:27:30 UTC\nDiff        =\n+/- Job: \"example\"\n+/- Task Group: \"cache\"\n  +/- Task: \"redis\"\n    +/- Config {\n      +/- image:           \"redis:7\" => \"redis:4.0\"\n          port_map[0][db]: \"6379\"\n        }\n\nVersion     = 0\nStable      = false\nSubmit Date = 07/25/17 21:27:18 UTC\n\n$ nomad job revert example 0\n==> Monitoring evaluation \"faff5c30\"\n    Evaluation triggered by job \"example\"\n    Evaluation within deployment: \"e17c8592\"\n    Allocation \"4ed0ca3b\" modified: node \"e8a2243d\", group \"cache\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"faff5c30\" finished with status \"complete\"\n\n$ nomad job history -p example\nVersion     = 2\nStable      = true\nSubmit Date = 07/25/17 21:27:43 UTC\nDiff        =\n+/- Job: \"example\"\n+/- Task Group: \"cache\"\n  +/- Task: \"redis\"\n    +/- Config {\n      +/- image:           \"redis:4.0\" => \"redis:7\"\n          port_map[0][db]: \"6379\"\n        }\n\nVersion     = 1\nStable      = false\nSubmit Date = 07/25/17 21:27:30 UTC\nDiff        =\n+/- Job: \"example\"\n+/- Task Group: \"cache\"\n  +/- Task: \"redis\"\n    +/- Config {\n      +/- image:           \"redis:7\" => \"redis:4.0\"\n          port_map[0][db]: \"6379\"\n        }\n\nVersion     = 0\nStable      = false\nSubmit Date = 07/25/17 21:27:18 UTC\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Unarchiving for Artifacts in Nomad\nDESCRIPTION: Shows how to disable Nomad's automatic unarchiving behavior for archive files by setting the archive option to false, keeping the original archive intact.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/artifact.mdx#2025-04-19_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nartifact {\n  source = \"https://example.com/file.tar.gz\"\n  options {\n    archive = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using signum Function with Different Numerical Inputs in Shell Session\nDESCRIPTION: Examples demonstrating the signum function which returns -1 for negative numbers, 0 for zero, and 1 for positive numbers. The function takes a single number as input and returns a value indicating its sign.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/numeric/signum.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> signum(-13)\n-1\n> signum(0)\n0\n> signum(344)\n1\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Virtual-hosted Style Artifact Downloads in Nomad\nDESCRIPTION: Demonstrates how to download an artifact from an S3 bucket using virtual-hosted style addressing in a specific AWS region.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/json-jobs.mdx#2025-04-19_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Artifacts\": [\n    {\n      \"GetterSource\": \"my-bucket-example.s3-eu-west-1.amazonaws.com/my_app.tar.gz\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Map Index Example - Shell Session\nDESCRIPTION: Example showing how to retrieve a value from a map using a key. Returns the value associated with key 'c' from a map of key-value pairs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/index-fn.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> index({\"a\"=1, \"c\"=2, \"d\"=3}, \"c\")\n2\n```\n\n----------------------------------------\n\nTITLE: Configuring QEMU Plugin Options in Nomad\nDESCRIPTION: This snippet shows how to configure global QEMU plugin options at the client level. It demonstrates setting allowed image paths and restricting command line arguments for security.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/qemu.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"qemu\" {\n  config {\n    image_paths    = [\"/mnt/image/paths\"]\n    args_allowlist = [\"-drive\", \"-usbdevice\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HCL Syntax for Docker Sysctl Configuration in Nomad\nDESCRIPTION: This snippet shows how to use the map assignment syntax for Docker sysctl configuration in Nomad when the keys aren't valid HCL2 identifiers. It demonstrates the correct way to specify sysctl options with special characters in the key names.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/index.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nsysctl = {\n  \"net.core.somaxconn/docs/drivers/docker#sysctl\" = \"16384\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Command Usage Syntax\nDESCRIPTION: Shows the basic syntax for using the nomad acl policy info command to fetch policy information. Requires a policy name as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/policy/info.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl policy info <name>\n```\n\n----------------------------------------\n\nTITLE: Basic Snapshot Save Command\nDESCRIPTION: Creates a snapshot from the leader server and saves it to backup.snap\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/snapshot/save.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator snapshot save backup.snap\n```\n\n----------------------------------------\n\nTITLE: Base64 String Encoding Example in Nomad Shell\nDESCRIPTION: Demonstrates how to use the base64encode function to encode a simple string \"Hello World\" into its Base64 representation. The function first converts the Unicode string to UTF-8 and then applies standard Base64 encoding.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/encoding/base64encode.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> base64encode(\"Hello World\")\nSGVsbG8gV29ybGQ=\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nomad Autoscaler Runtime Profiles via HTTP\nDESCRIPTION: Demonstrates how to retrieve runtime profile information for the Nomad Autoscaler using curl and analyze it with Go tools. This includes goroutine, CPU profile, and trace data.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/api.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -O \"http://localhost:8080/debug/pprof/goroutine\"\n$ go tool pprof goroutine\n\n$ curl -O \"http://localhost:8080/debug/pprof/profile?seconds=3\"\n$ go tool pprof profile\n\n$ curl -O \"http://localhost:8080/debug/pprof/trace?&seconds=5\"\n$ go tool trace trace\n```\n\n----------------------------------------\n\nTITLE: Element Function Syntax in HCL\nDESCRIPTION: The basic syntax for the element function which takes a list and an index parameter. The index is zero-based, and the function produces an error if used with an empty list.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/element.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nelement(list, index)\n```\n\n----------------------------------------\n\nTITLE: Configuring QEMU Image Paths in Nomad 0.12.0 (HCL)\nDESCRIPTION: Configuration snippet to allow loading QEMU images from specific paths outside the allocation directories. This example allows loading images from '/mnt/qemu-images'.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/upgrade/upgrade-specific.mdx#2025-04-19_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"qemu\" {\n  config {\n    image_paths = [\"/mnt/qemu-images\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Pause Schedule State in Nomad\nDESCRIPTION: Shows how to retrieve the current schedule state for a time-based task in Nomad using the API. Includes the nomad operator command and a sample JSON response.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/allocations.mdx#2025-04-19_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api /v1/client/allocation/23f520cc-629a-46ff-395f-0661e7aa939e/pause?task=schedtask\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ScheduleState\": \"scheduled_pause\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Pool Information\nDESCRIPTION: An example of retrieving information about a node pool named 'prod', displaying its name, description, metadata, and scheduler configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/info.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node pool info prod\nName        = prod\nDescription = Node pool for production workloads.\n\nMetadata\nenv = production\n\nScheduler Configuration\nScheduler Algorithm = spread\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad Login Command\nDESCRIPTION: This snippet shows the basic usage syntax for the `nomad login` command. It's used to log in to an SSO provider and exchange third-party credentials for a Nomad ACL token.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/login.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad login [options]\n```\n\n----------------------------------------\n\nTITLE: Failing Deployment - Shell Request\nDESCRIPTION: Sample curl command to mark a deployment as failed.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/deployments.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    https://localhost:4646/v1/deployment/fail/5456bd7a-9fc0-c0dd-6131-cbee77f57577\n```\n\n----------------------------------------\n\nTITLE: Querying Nomad Cluster for Proxy IP Address\nDESCRIPTION: Uses nested Nomad CLI commands and jq to retrieve the public IP address of the proxy allocation for accessing the web UI.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/terraform/README.md#2025-04-19_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnomad node status -json -verbose \\\n    $(nomad operator api '/v1/allocations?namespace=proxy' | jq -r '.[] | select(.JobID == \"nomad-proxy\") | .NodeID') \\\n    | jq '.Attributes.\"unique.platform.aws.public-ipv4\"'\n```\n\n----------------------------------------\n\nTITLE: Generating TLS Certificates for Testing Misconfiguration Scenarios\nDESCRIPTION: Commands to generate valid but incompatible certificates from a different CA for the 'badRegion' to test incorrect TLS configuration scenarios.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/helper/tlsutil/testdata/README.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Generate CA certificate and key.\nnomad tls ca create -name-constraint=true -domain bad\n\n# Generate certificates and keys for region badRegion.\n# 1. Generate server certificate for region badRegion\n# 2. Generate client certificate for region badRegion\nnomad tls cert create -server -region badRegion -domain=bad\nnomad tls cert create -client -region badRegion -domain=bad\n```\n\n----------------------------------------\n\nTITLE: Configuring Namespace with Default Node Pool (Enterprise)\nDESCRIPTION: Enterprise feature to configure a namespace with a default node pool, which is automatically used by all jobs in that namespace unless overridden.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/node-pools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nnamespace \"dev\" {\n  description = \"Jobs for the development environment.\"\n\n  node_pool_config {\n    default = \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Job Init Command Usage\nDESCRIPTION: Shows the basic syntax for using the nomad job init command with optional filename parameter.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/init.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad job init [options] [filename]\n```\n\n----------------------------------------\n\nTITLE: Listing Specific Directory with nomad alloc fs\nDESCRIPTION: Example of using nomad alloc fs to list the contents of a specific directory within an allocation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/fs.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc fs eb17e557 redis/local\nMode        Size  Modified Time        Name\n-rw-rw-rw-  0     28 Jan 16 05:39 UTC  redis.stderr\n-rw-rw-rw-  17    28 Jan 16 05:39 UTC  redis.stdout\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Driver Plugin Options\nDESCRIPTION: Plugin configuration options for the mock driver, including file system isolation settings and shutdown behavior for periodic tasks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/mock-driver.md#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"mock_driver\" {\n  fs_isolation               = \"none\"\n  shutdown_periodic_after    = false\n  shutdown_periodic_duration = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Using nomad job inspect command\nDESCRIPTION: Shows the basic usage syntax for the 'nomad job inspect' command. It requires a single argument, which is the submitted job's name.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/inspect.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad job inspect [options] <job>\n```\n\n----------------------------------------\n\nTITLE: Docker Volume Mount Configuration in HCL\nDESCRIPTION: Example configuration showing a Docker volume mount specification that requires docker.volumes.enabled=true to function. Demonstrates volume mount options including driver configuration and device settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/upgrade/upgrade-specific.mdx#2025-04-19_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\nmounts = [\n  {\n    type     = \"volume\"\n    target   = \"/path/in/container\"\n    source   = \"docker_volume\"\n    volume_options = {\n      driver_config = {\n        name = \"local\"\n        options = [\n          {\n            device = \"/\"\n            o      = \"ro,bind\"\n            type   = \"ext4\"\n          }\n        ]\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Evaluation Flow for Node Heartbeat Failure in Mermaid\nDESCRIPTION: Mermaid flowchart showing how a node missing a heartbeat creates multiple evaluations for system and service jobs, resulting in blocked, failed, and follow-up evaluations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/architecture-eval-triggers.md#2025-04-19_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n\n    event((Node\\nmisses\\nheartbeat))\n\n    system([system\\nnode-update])\n    service1([service 1\\nnode-update])\n    service2([service 2\\nnode-update])\n\n    blocked([service 1\\nblocked\\nqueued-allocs])\n    failed([service 2\\nfailed\\nmax-plan-attempts])\n    followup([service 2\\nfailed-follow-up])\n\n    %% style classes\n    classDef eval fill:#d5f6ea,stroke-width:4px,stroke:#1d9467\n    classDef other fill:#d5f6ea,stroke:#1d9467\n    class event other;\n    class system,service1,service2,blocked,failed,followup eval;\n\n    event --> system\n    event --> service1\n    event --> service2\n\n    service1 --> blocked\n\n    service2 --> failed\n    failed --> followup\n```\n\n----------------------------------------\n\nTITLE: Usage Syntax for Nomad ACL Auth-Method Update Command\nDESCRIPTION: This snippet shows the basic usage syntax for the `nomad acl auth-method update` command. It requires specifying the name of an existing auth method as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/auth-method/update.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl auth-method update [options] <auth-method_name>\n```\n\n----------------------------------------\n\nTITLE: Installing dnf-plugins-core on Fedora\nDESCRIPTION: Installs dnf-plugins-core package which provides dnf config-manager utility needed to add repositories.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo dnf install -y dnf-plugins-core\n```\n\n----------------------------------------\n\nTITLE: Register Host Volume CURL Request\nDESCRIPTION: Shell command to register a host volume using the Nomad API endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_25\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request PUT \\\n    --data @payload.json \\\n    https://localhost:4646/v1/volume/host/register\n```\n\n----------------------------------------\n\nTITLE: Testing NVIDIA Container Environment\nDESCRIPTION: Docker command to verify NVIDIA GPU container functionality by running nvidia-smi in a CUDA container.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/devices/nvidia.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm --gpus all nvidia/cuda:11.0-base nvidia-smi\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad to Disable License Reporting with HCL\nDESCRIPTION: HCL configuration snippet for disabling automated license reporting in Nomad. This block should be added to the server.hcl configuration file and doesn't require a system restart.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/enterprise/license/utilization-reporting.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nreporting {\n\tlicense {\n\t\tenabled = false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Nomad variable from a file\nDESCRIPTION: Shows how to create a Nomad variable using a specification file created with the `nomad var init` command.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/put.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad var put secret/foo @spec.nv.json\n```\n\n----------------------------------------\n\nTITLE: Visualizing Job Registration Flow in Nomad using Mermaid\nDESCRIPTION: A sequence diagram illustrating the synchronous process of job registration in Nomad, showing how a user command flows through the CLI, HTTP API, leader RPC, and state store components to create a job and evaluation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/architecture-eval-lifecycle.md#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\n    participant user as User\n    participant cli as CLI\n    participant httpAPI as HTTP API\n    participant leaderRpc as Leader RPC\n    participant stateStore as State Store\n\n    user ->> cli: nomad job run\n    activate cli\n    cli ->> httpAPI: Create Job API\n    httpAPI ->> leaderRpc: Job.Register\n\n    activate leaderRpc\n\n    leaderRpc ->> stateStore: write Job\n    activate stateStore\n    stateStore -->> leaderRpc: ok\n    deactivate stateStore\n\n    leaderRpc ->> stateStore: write Evaluation\n\n    activate stateStore\n    stateStore -->> leaderRpc: ok\n\n    Note right of stateStore: EvalBroker.Enqueue\n    Note right of stateStore: (see Scheduling below)\n\n    deactivate stateStore\n\n    leaderRpc -->> httpAPI: Job.Register response\n    deactivate leaderRpc\n\n    httpAPI -->> cli: Create Job response\n    deactivate cli\n```\n\n----------------------------------------\n\nTITLE: Viewing Nomad Server Error Logs in Soft Failure Scenario\nDESCRIPTION: This log snippet shows the error messages that appear in Nomad server logs when a federated region has lost leadership but servers are still reachable. The worker fails to dequeue evaluation due to the absence of a cluster leader.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/federation/failure.mdx#2025-04-19_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n[ERROR] nomad/worker.go:504: worker: failed to dequeue evaluation: worker_id=d19e6bb5-5ec9-8f75-9caf-47e2513fe28d error=\"No cluster leader\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform variables for Azure deployment\nDESCRIPTION: Example terraform.tfvars configuration showing required variables for deploying the cluster. Includes location, image ID, VM size, node counts, and Consul auto-join configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/azure/README.md#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nlocation = \"East US\"\nimage_id = \"/subscriptions/SUBSCRIPTION_ID/resourceGroups/PACKER/providers/Microsoft.Compute/images/hashistack\"\nvm_size = \"Standard_DS1_v2\"\nserver_count = 1\nclient_count = 4\nretry_join = \"provider=azure tag_name=ConsulAutoJoin tag_value=auto-join subscription_id=SUBSCRIPTION_ID tenant_id=TENANT_ID client_id=CLIENT_ID secret_access_key=CLIENT_SECRET\"\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Nomad Project for Compilation\nDESCRIPTION: Downloads and compiles necessary libraries and tools needed to compile Nomad from source.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_20\n\nLANGUAGE: shell-session\nCODE:\n```\n$ make bootstrap\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Mode for Singularity Runtime\nDESCRIPTION: Configuration option to enable extra verbosity in the Singularity runtime logging, which is useful for debugging issues with containers.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/singularity.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  verbose = \"false\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Evaluation by ID\nDESCRIPTION: Example of deleting a specific evaluation using its ID with the `nomad eval delete` command.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/eval/delete.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad eval delete 9ecffbba-73be-d909-5d7e-ac2694c10e0c\nSuccessfully deleted 1 evaluation\n```\n\n----------------------------------------\n\nTITLE: Basic URL Redirect Configuration\nDESCRIPTION: Example of a basic redirect rule configuration that sends traffic from /foo to /bar permanently.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/README.md#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  source: '/foo',\n  destination: '/bar',\n  permanent: true\n}\n```\n\n----------------------------------------\n\nTITLE: Computing SHA1 Hash with HCL\nDESCRIPTION: Demonstrates computing a SHA1 hash of a string using the sha1 function. The function takes a UTF-8 encoded string input and returns a lowercase hexadecimal representation of the hash. Note that this example shows the hash computation for the string 'hello world'.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/crypto/sha1.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> sha1(\"hello world\")\n2aae6c35c94fcfb415dbe95f408b9ce91ee846ed\n```\n\n----------------------------------------\n\nTITLE: Using min Function with Direct Arguments in Nomad HCL\nDESCRIPTION: This example demonstrates how to use the min function with direct number arguments to find the smallest value in a set of numbers.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/numeric/min.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> min(12, 54, 3)\n3\n```\n\n----------------------------------------\n\nTITLE: Installing yum-utils on Amazon Linux\nDESCRIPTION: Installs yum-utils package on Amazon Linux which provides yum-config-manager utility needed to add repositories.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo yum install -y yum-utils\n```\n\n----------------------------------------\n\nTITLE: Using Contains Function with Examples in Shell\nDESCRIPTION: Example usage of the contains function demonstrating true and false cases when checking for string values in a list.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/contains.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> contains([\"a\", \"b\", \"c\"], \"a\")\ntrue\n> contains([\"a\", \"b\", \"c\"], \"d\")\nfalse\n```\n\n----------------------------------------\n\nTITLE: Using regex_replace Function Syntax in Nomad HCL\nDESCRIPTION: Basic syntax for the regex_replace function in Nomad's HCL configuration language, which takes a string, substring pattern (regular expression), and replacement string as arguments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/regex_replace.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nregex_replace(string, substring, replacement)\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Service Info Command Example in Shell\nDESCRIPTION: Demonstrates querying basic information about a specific service named 'example-cache-redis', displaying job ID, address, tags, node ID, and allocation ID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/service/info.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad service info example-cache-redis\nJob ID   Address          Tags        Node ID   Alloc ID\nexample  127.0.0.1:22686  [db,cache]  7406e90b  5f0730ca\nexample  127.0.0.1:25854  [db,cache]  7406e90b  a831f7f2\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad ACL Token Create Command Syntax\nDESCRIPTION: Shows the basic command syntax for creating ACL tokens in Nomad. This command requires no arguments but supports various options for configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/token/create.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl token create [options]\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad ACL Token Update Command Syntax\nDESCRIPTION: Shows the basic command syntax for updating ACL tokens in Nomad, requiring a token accessor ID as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/token/update.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl token update [options] <token_accessor_id>\n```\n\n----------------------------------------\n\nTITLE: Decoding Base64 String in Nomad Shell\nDESCRIPTION: This example demonstrates how to use the base64decode function to decode a Base64 encoded string 'Hello World'. The function takes the encoded string as input and returns the original decoded string.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/encoding/base64decode.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> base64decode(\"SGVsbG8gV29ybGQ=\")\nHello World\n```\n\n----------------------------------------\n\nTITLE: Using Job ID instead of Allocation ID\nDESCRIPTION: Example of using 'nomad alloc logs' with the -job flag to select a random allocation from a specific job.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/logs.mdx#2025-04-19_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad alloc logs -job <job-id> <task>\n```\n\n----------------------------------------\n\nTITLE: Disabling Log Collection for Podman Tasks in Nomad (HCL)\nDESCRIPTION: Disables Nomad's log collection for Podman tasks. This can be useful if you're using host-based log aggregation instead of relying on Nomad's log capabilities.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_39\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"nomad-driver-podman\" {\n  config {\n    disable_log_collection = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Test Device Instances\nDESCRIPTION: Shell commands to create test device files, including one with unhealthy permissions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/plugins/device/cmd/example/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p /tmp/nomad-device\ncd /tmp/nomad-device\ntouch device01 && chmod 0777 device01\ntouch device02\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Job Command Usage\nDESCRIPTION: The basic syntax for using the nomad job command with subcommands and options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnomad job <subcommand> [options]\n```\n\n----------------------------------------\n\nTITLE: Forcing TLS 1.2 in Powershell for Windows Packer Build\nDESCRIPTION: This snippet forces the use of TLS 1.2 protocol for the current Powershell script. It's necessary because the default TLS protocol in the .NET version used by Powershell cmdlets is 1.0, which may be rejected by many properly configured HTTP servers.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/terraform/packer/windows-2016-amd64/README.md#2025-04-19_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n# Force TLS1.2\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n```\n\n----------------------------------------\n\nTITLE: Using uuidv5 with Custom Namespace UUID in Nomad\nDESCRIPTION: Example of generating a UUID v5 using a custom namespace UUID that's not part of the standard RFC 4122 namespaces.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/uuid/uuidv5.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n> uuidv5(\"743ac3c0-3bf7-4a5b-9e6c-59360447c757\", \"LIBS:diskfont.library\")\nede1a974-df7e-5f17-84b9-76208818b2c8\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Deployment Resume Command Usage\nDESCRIPTION: Shows the basic command syntax for resuming a paused deployment in Nomad. The command requires a deployment ID or prefix as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/deployment/resume.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad deployment resume [options] <deployment id>\n```\n\n----------------------------------------\n\nTITLE: Registering Nomad as a Windows Service using sc.exe\nDESCRIPTION: This command uses sc.exe to create a Windows service named 'Nomad'. It specifies the full path to the Nomad executable and includes configuration arguments. The service is set to start automatically.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/windows-service.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsc.exe create \"Nomad\" binPath=\"«full path to nomad.exe» agent -config=«path to config file or directory»\" start= auto\n```\n\n----------------------------------------\n\nTITLE: Using cidrhost Function in HCL\nDESCRIPTION: Demonstrates the syntax for using the cidrhost function in HCL. The function takes two parameters: a prefix in CIDR notation and a host number.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/ipnet/cidrhost.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncidrhost(prefix, hostnum)\n```\n\n----------------------------------------\n\nTITLE: Updating FSM Apply Method in Go for Nomad RPC\nDESCRIPTION: Shows how to add a dispatch case to the switch statement in the Apply method of the nomadFSM struct. This involves creating a method to decode the request and call the appropriate state method.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/checklist-rpc-endpoint.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// In nomad/fsm.go\nfunc (n *nomadFSM) Apply(log *raft.Log) interface{} {\n    switch log.Type {\n    // Existing cases\n    case structs.NewRequestType:\n        return n.applyNewRequest(buf[1:])\n    }\n}\n\nfunc (n *nomadFSM) applyNewRequest(buf []byte) interface{} {\n    // Decode request and call state method\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling UI URL hints in Nomad CLI\nDESCRIPTION: Example showing how to disable the new UI URL hints feature in Nomad CLI using environment variables. The example demonstrates the default behavior with hints and how to turn them off.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/release-notes/nomad/v1-10-x.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad status\nNo running jobs\n\n==> View and manage Nomad jobs in the Web UI: https://localhost:4646/ui/jobs\n\n$ export NOMAD_CLI_SHOW_HINTS=0\n$ nomad status\nNo running jobs\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Capabilities for a Nomad Volume\nDESCRIPTION: This example shows how to configure a volume with multiple capability requirements. It defines two separate capability blocks, one for read-only access and another for write access, both using file-system attachment mode.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/capability.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ncapability {\n  access_mode     = \"single-node-reader-only\"\n  attachment_mode = \"file-system\"\n}\n\ncapability {\n  access_mode     = \"single-node-writer\"\n  attachment_mode = \"file-system\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Job Periodic Force Command\nDESCRIPTION: This snippet shows the basic usage syntax for the 'nomad job periodic force' command. It requires a single argument specifying the ID of the periodic job to be forced for evaluation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/periodic-force.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad job periodic force [options] <job id>\n```\n\n----------------------------------------\n\nTITLE: Installing Virt Driver on Ubuntu/Debian\nDESCRIPTION: This command updates the package list and installs the Nomad Virt driver plugin on Ubuntu or Debian systems.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/virt/install.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt-get update && sudo apt-get install nomad-driver-virt\n```\n\n----------------------------------------\n\nTITLE: Referencing Nomad Configuration Blocks\nDESCRIPTION: Demonstrates the configuration blocks (affinity, spread, and meta) that are affected by the scheduler update behavior in Nomad. The affinity and spread blocks now update non-destructively, while meta blocks can be used to force redistribution.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/partials/release-notes/v1-10/breaking-affinity-spread.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\naffinity\nspread\nmeta\n```\n\n----------------------------------------\n\nTITLE: Running Nomad Clients\nDESCRIPTION: Command to run the client configuration job file which starts Nomad clients that will join the server. The client.nomad file can be modified to adjust the count of clients being deployed.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/dev/docker-clients/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnomad run client.nomad\n```\n\n----------------------------------------\n\nTITLE: Visualizing Nomad Scheduling Process using Mermaid\nDESCRIPTION: A sequence diagram showing how evaluations are processed by the scheduler in Nomad. It illustrates the flow between the leader RPC, state store, planner, eval broker, and scheduler components, including plan submission and allocation creation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/architecture-eval-lifecycle.md#2025-04-19_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\n    participant leaderRpc as Leader RPC\n    participant stateStore as State Store\n    participant planner as Planner\n    participant broker as Eval Broker\n    participant sched as Scheduler\n\n    leaderRpc ->> stateStore: write Evaluation (see above)\n    stateStore ->> broker: EvalBroker.Enqueue\n    activate broker\n    broker -->> broker: enqueue eval\n    broker -->> stateStore: ok\n    deactivate broker\n\n    sched ->> broker: Eval.Dequeue (blocks until work available)\n    activate sched\n    broker -->> sched: Evaluation\n\n    sched ->> stateStore: query to get job and cluster state\n    stateStore -->> sched: results\n\n    sched -->> sched: Reconcile (how many allocs are needed?)\n    deactivate sched\n\n    alt\n        Note right of sched: Needs new allocs\n        activate sched\n        sched -->> sched: create Allocations\n        sched -->> sched: create Deployment (service jobs)\n        Note left of sched: for Deployments, only 1 \"batch\" of Allocs will get created for each Eval\n        sched -->> sched: Feasibility Check\n        Note left of sched: iterate over Nodes to find a placement for each Alloc\n        sched -->> sched: Ranking\n        Note left of sched: pick best option for each Alloc\n\n        %% start rect highlight for blocked eval\n        rect rgb(213, 246, 234)\n            Note left of sched: Not enough room! (But we can submit a partial plan)\n            sched ->> leaderRpc: Eval.Upsert (blocked)\n            activate leaderRpc\n            leaderRpc ->> stateStore: write Evaluation\n            activate stateStore\n            stateStore -->> leaderRpc: ok\n            deactivate stateStore\n            leaderRpc --> sched: ok\n            deactivate leaderRpc\n        end\n        %% end rect highlight for blocked eval\n\n\n        %% start rect highlight for planner\n        rect rgb(213, 246, 234)\n            Note over sched, planner: Note: scheduler snapshot may be stale state relative to leader so it's serialized by plan applier\n\n            sched ->> planner: Plan.Submit (Allocations + Deployment)\n            planner -->> planner: is plan still valid?\n\n            Note right of planner: Plan is valid\n            activate planner\n\n            planner ->> leaderRpc: Allocations.Upsert + Deployment.Upsert\n            activate leaderRpc\n            leaderRpc ->> stateStore: write Allocations and Deployment\n            activate stateStore\n            stateStore -->> leaderRpc: ok\n            deactivate stateStore\n            leaderRpc -->> planner: ok\n            deactivate leaderRpc\n            planner -->> sched: ok\n            deactivate planner\n\n        end\n        %% end rect highlight for planner\n\n        sched -->> sched: retry on failure, if exceed max attempts will Eval.Nack\n\n    else\n\n    end\n\n    sched ->> broker: Eval.Ack (Eval.Nack if failed)\n    activate broker\n    broker ->> stateStore: complete Evaluation\n    activate stateStore\n    stateStore -->> broker: ok\n    deactivate stateStore\n    broker -->> sched: ok\n    deactivate broker\n    deactivate sched\n```\n\n----------------------------------------\n\nTITLE: Detailed Evaluation Status Flow with Quasi-Statuses in Mermaid\nDESCRIPTION: An expanded flowchart showing both explicit evaluation statuses and implicit quasi-statuses (scheduling, applying, delayed, deleted) in Nomad. This diagram provides deeper insight into evaluation lifecycle and shows how evaluations are linked through PreviousEval, NextEval, and BlockedEval ID pointers.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/architecture-eval-states.md#2025-04-19_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\n    event((Cluster\\nEvent))\n\n    %% statuss\n    pending([pending])\n    blocked([blocked])\n    complete([complete])\n    failed([failed])\n    canceled([canceled])\n\n    %% quasi-statuss\n    deleted([deleted])\n    delayed([delayed])\n    scheduling([scheduling])\n    applying([applying])\n\n    %% style classes\n    classDef status fill:#d5f6ea,stroke-width:4px,stroke:#1d9467\n    classDef quasistatus fill:#d5f6ea,stroke-dasharray: 5 5,stroke:#1d9467\n    classDef other fill:#d5f6ea,stroke:#1d9467\n\n    class event other;\n    class pending,blocked,complete,failed,canceled status;\n    class deleted,delayed,scheduling,applying quasistatus;\n\n    event -- \"job-register\n      job-deregister\n      periodic-job\n      node-update\n      node-drain\n      alloc-stop\n      scheduled\n      alloc-failure\n      job-scaling\" --> pending\n\n    pending -- dequeued --> scheduling\n    pending -- if delayed --> delayed\n    delayed -- dequeued --> scheduling\n\n    scheduling -. \"not all allocs placed\n      new eval created by scheduler\n      trigger queued-allocs\n      new has .PreviousEval = old.ID\n      old has .BlockedEval = new.ID\" .-> blocked\n\n    scheduling -. \"failed to plan\n      new eval created by scheduler\n      trigger: max-plan-attempts\n      new has .PreviousEval = old.ID\n      old has .BlockedEval = new.ID\" .-> blocked\n\n    scheduling -- \"not all allocs placed\n      reuse already-blocked eval\" --> blocked\n\n    blocked -- \"unblocked by\n      external state changes\" --> scheduling\n\n    scheduling -- allocs placed --> complete\n\n    scheduling -- \"wrong eval type or\n      max retries exceeded\n      on plan submit\" --> failed\n\n    scheduling -- \"canceled by\n      job update/stop\" --> canceled\n\n    failed -- retry --> scheduling\n\n    scheduling -. \"new eval from rolling update (system jobs)\n      created by scheduler\n      trigger: rolling-update\n      new has .PreviousEval = old.ID\n      old has .NextEval = new.ID\" .-> pending\n\n    scheduling -- submit --> applying\n    applying -- failed --> scheduling\n\n    applying -. \"new eval for preempted allocs\n      created by plan applier\n      trigger: preemption\n      new has .PreviousEval = unset!\n      old has .BlockedEval = unset!\" .-> pending\n\n    complete -. \"new eval from deployments (service jobs)\n      created by deploymentwatcher\n      trigger: deployment-watcher\n      new has .PreviousEval = unset!\n      old has .NextEval = unset!\" .-> pending\n\n    failed -- \"new eval\n      trigger: failed-follow-up\n      new has .PreviousEval = old.ID\n      old has .NextEval = new.ID\" --> pending\n\n    pending -- \"undeliverable evals\n      reaped by leader\" --> failed\n\n    blocked -- \"duplicate blocked evals\n      reaped by leader\" --> canceled\n\n    canceled -- garbage\\ncollection --> deleted\n    failed -- garbage\\ncollection --> deleted\n    complete -- garbage\\ncollection --> deleted\n```\n\n----------------------------------------\n\nTITLE: Enabling GCP Compute API\nDESCRIPTION: This command enables the Compute Engine API for the project, which is necessary for deploying and managing virtual machines.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_12\n\nLANGUAGE: console\nCODE:\n```\ngcloud services enable compute.googleapis.com\n```\n\n----------------------------------------\n\nTITLE: Verifying Nomad Installation\nDESCRIPTION: Tests that Nomad is correctly installed by running the nomad command without arguments to display help output.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_17\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Directories in Go Tests\nDESCRIPTION: Illustrates the correct way to create and use temporary directories in Go tests.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/testing.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntempDir := t.TempDir()\n```\n\n----------------------------------------\n\nTITLE: Dismissing a single recommendation with nomad CLI\nDESCRIPTION: This example demonstrates how to dismiss a single recommendation using the Nomad CLI. It shows the command execution and the successful dismissal message.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/recommendation/dismiss.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad recommendation dismiss a9c041c5-3c04-aa24-bd55-0a80cded4f10\nSuccessfully dismissed recommendation\n```\n\n----------------------------------------\n\nTITLE: Reading Specific Scaling Policy - Shell Request\nDESCRIPTION: HTTP GET request to read a specific scaling policy by ID\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/scaling-policies.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/scaling/policy/5e9f9ef2-5223-6d35-bac1-be0f3cb974ad\n```\n\n----------------------------------------\n\nTITLE: Installing Terraform on Linux\nDESCRIPTION: This snippet downloads and installs the Terraform binary on a Linux system. It fetches a specific version (0.13.1) of Terraform, unzips it, moves it to the /usr/local/bin directory, and verifies the installation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ncurl \"https://releases.hashicorp.com/terraform/0.13.1/terraform_0.13.1_linux_amd64.zip\" -o terraform.zip\nunzip terraform.zip\nsudo mv terraform /usr/local/bin\nterraform --version\n```\n\n----------------------------------------\n\nTITLE: Configuring Pass-Through Strategy in Nomad Agent\nDESCRIPTION: HCL configuration block for setting up the pass-through strategy driver in the Nomad agent configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/strategy/pass-through.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstrategy \"pass-through\" {\n  driver = \"pass-through\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using uuidv5 with X500 Namespace in Nomad\nDESCRIPTION: Example of generating a UUID v5 using the X500 namespace with an X.500 Distinguished Name.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/uuid/uuidv5.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n> uuidv5(\"x500\", \"CN=Example,C=GB\")\n84e09961-4aa4-57f8-95b7-03edb1073253\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault for Nomad with IPv6 (Bash)\nDESCRIPTION: This command uses the nomad setup vault command to configure Vault for use with Nomad, specifying the JWKS URL with an IPv6 address.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/ipv6-support.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnomad setup vault -y -jwks-url=\"$NOMAD_ADDR/.well-known/jwks.json\"\n```\n\n----------------------------------------\n\nTITLE: Scheduler Configuration Response in Nomad API\nDESCRIPTION: JSON response from the /v1/agent/schedulers/config endpoint showing the current scheduler configuration. Includes the list of enabled scheduler types and the number of scheduler workers configured.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enabled_schedulers\": [\n    \"service\",\n    \"batch\",\n    \"system\",\n    \"sysbatch\",\n    \"_core\"\n  ],\n  \"num_schedulers\": 8,\n  \"server_id\": \"server1.global\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Nomad Job Validation Request\nDESCRIPTION: Shell command demonstrating how to validate a Nomad job file using curl. The request sends a POST to the /v1/validate/job endpoint with the job specification as the request body.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/validate.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @my-job.nomad.json \\\n    https://localhost:4646/v1/validate/job\n```\n\n----------------------------------------\n\nTITLE: Listing Allocations - All Namespaces\nDESCRIPTION: Retrieves allocations across all namespaces with an ID prefix filter\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/allocations.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/allocations?namespace=*&prefix=a8198d79\n```\n\n----------------------------------------\n\nTITLE: Usage of nomad deployment pause command\nDESCRIPTION: This snippet shows the basic usage syntax for the 'nomad deployment pause' command. It requires a deployment ID or prefix as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/deployment/pause.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad deployment pause [options] <deployment id>\n```\n\n----------------------------------------\n\nTITLE: Device Status JSON Output\nDESCRIPTION: Example JSON output showing the status of detected devices, including health state and descriptions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/plugins/device/cmd/example/README.md#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Attributes\": null,\n    \"Instances\": [\n      {\n        \"HealthDescription\": \"Device has bad permissions \\\"-rwxrwxrwx\\\"\",\n        \"Healthy\": false,\n        \"ID\": \"device01\",\n        \"Locality\": null\n      },\n      {\n        \"HealthDescription\": \"\",\n        \"Healthy\": true,\n        \"ID\": \"device02\",\n        \"Locality\": null\n      }\n    ],\n    \"Name\": \"mock\",\n    \"Type\": \"file\",\n    \"Vendor\": \"nomad\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Manual Upstream Configuration for Dashboard Service\nDESCRIPTION: Service configuration with explicit upstream configuration for the dashboard service.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/service-mesh.mdx#2025-04-19_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\nservice {\n  name = \"count-dashboard\"\n  port = \"http\"\n\n  connect {\n    sidecar_service {\n      proxy {\n        upstreams {\n          destination_name = \"count-api\"\n          local_bind_port  = 8080\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using min Function with Collection Spread Operator in Nomad HCL\nDESCRIPTION: This example shows how to use the min function with a list or set value by using the spread operator (...) to expand the collection into individual arguments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/numeric/min.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> min([12, 54, 3]...)\n3\n```\n\n----------------------------------------\n\nTITLE: Using coalescelist Function with Multiple List Arguments in Shell\nDESCRIPTION: This example demonstrates how to use the coalescelist function with two list arguments. It returns the first non-empty list.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/coalescelist.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> coalescelist([\"a\", \"b\"], [\"c\", \"d\"])\n[\n  \"a\",\n  \"b\",\n]\n> coalescelist([], [\"c\", \"d\"])\n[\n  \"c\",\n  \"d\",\n]\n```\n\n----------------------------------------\n\nTITLE: Using Contain Mode for Singularity Isolation\nDESCRIPTION: Configuration option to use minimal /dev and empty other directories instead of sharing filesystems from the host, providing better isolation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/singularity.mdx#2025-04-19_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  contain = \"false\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tailing File Contents with nomad alloc fs\nDESCRIPTION: Example of using nomad alloc fs with tail and follow options to continuously display file contents.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/fs.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc fs -tail -f -n 3 eb17e557 redis/local/redis.stdout\nfoobar\nbaz\nbam\n<blocking>\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Raft Configuration API\nDESCRIPTION: This JSON response from the Raft configuration API includes an index value and details about servers in the Raft peer configuration. Each server entry contains information such as address, ID, node name, leadership status, and voting capability.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/raft.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Index\": 0,\n    \"Servers\": [\n        {\n            \"Address\": \"10.1.0.10:4647\",\n            \"ID\": \"c13f9998-a0f3-d765-0b52-55a0b3ce5f88\",\n            \"Leader\": false,\n            \"Node\": \"node1.global\",\n            \"RaftProtocol\": \"3\",\n            \"Voter\": true\n        },\n        {\n            \"Address\": \"10.1.0.20:4647\",\n            \"ID\": \"d7927f2b-067f-45a4-6266-af8bb84de082\",\n            \"Leader\": true,\n            \"Node\": \"node2.global\",\n            \"RaftProtocol\": \"3\",\n            \"Voter\": true\n        },\n        {\n            \"Address\": \"10.1.0.30:4647\",\n            \"ID\": \"00d56ef8-938e-abc3-6f8a-f8ac80a80fb9\",\n            \"Leader\": false,\n            \"Node\": \"node3.global\",\n            \"RaftProtocol\": \"3\",\n            \"Voter\": true\n        }\n\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Usage of Nomad Sentinel Command\nDESCRIPTION: Demonstrates the basic usage syntax for the `nomad sentinel` command. It shows how to run a subcommand and access help for specific subcommands.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/sentinel/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnomad sentinel <subcommand> [options]\n```\n\nLANGUAGE: bash\nCODE:\n```\nnomad sentinel <subcommand> -h\n```\n\n----------------------------------------\n\nTITLE: Using 'nomad node meta apply' Command in Nomad\nDESCRIPTION: This snippet demonstrates the basic usage syntax for the 'nomad node meta apply' command. It allows users to update node metadata by specifying key-value pairs and optional flags for node ID and unsetting keys.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/meta/apply.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad node meta apply [-node-id ...] [-unset ...] key1=value1 ... kN=vN\n```\n\n----------------------------------------\n\nTITLE: Sample Changelog Entry with Markdown Formatting\nDESCRIPTION: Example of a longer changelog entry that uses markdown formatting like code blocks, emphasis, and bold text within the release note.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/CHANGELOG.md#2025-04-19_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\nmain: Lorem ipsum dolor `sit amet`, _consectetur_ adipiscing elit, **sed** do\neiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\nveniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\nconsequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\ncillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\nproident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Values Function Usage in Nomad Shell\nDESCRIPTION: This example shows how to use the 'values' function to extract a list of values from a map. The function returns the values in lexicographical order based on their corresponding keys.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/values.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> values({a=3, c=2, d=1})\n[\n  3,\n  2,\n  1,\n]\n```\n\n----------------------------------------\n\nTITLE: Checking Hostpath Plugin Status in Nomad\nDESCRIPTION: This snippet shows how to check the status of the hostpath plugin using the Nomad CLI. It displays information about the plugin's ID, provider, version, and allocation details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/hostpath/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad plugin status hostpath\nID                   = hostpath-plugin0\nProvider             = csi-hostpath\nVersion              = v1.2.0-0-g83590990\nControllers Healthy  = 1\nControllers Expected = 1\nNodes Healthy        = 1\nNodes Expected       = 1\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created  Modified\nbbd34b72  917b009b  csi         0        run      running  3s ago   2s ago\n```\n\n----------------------------------------\n\nTITLE: Subscribing to All Events Across All Namespaces\nDESCRIPTION: Makes a curl request to stream all events and topics from all namespaces by using the namespace=* parameter.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/events.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl -s -v -N http://127.0.0.1:4646/v1/event/stream?namespace=*\n```\n\n----------------------------------------\n\nTITLE: Setting Node Metadata for Consul Token Timeouts\nDESCRIPTION: Shell command for configuring Consul token and service preflight check timeouts via node metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/service-mesh.mdx#2025-04-19_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nnomad node meta apply -node-id $nodeID \\\n    consul.token_preflight_check.timeout=10s \\\n    consul.token_preflight_check.base=500ms \\\n    consul.service_preflight_check.timeout=60s \\\n    consul.service_preflight_check.base=1s\n```\n\n----------------------------------------\n\nTITLE: Deploying Reverse Proxy for Nomad Web UI Access\nDESCRIPTION: Sets up a reverse proxy to access the Nomad web UI by applying a namespace and deploying a job using the Nomad CLI.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/terraform/README.md#2025-04-19_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnomad namespace apply proxy\nnomad job run ../ui/input/proxy.nomad\n```\n\n----------------------------------------\n\nTITLE: Managing Quota Specifications via Shell Commands\nDESCRIPTION: Shell commands for creating, reading, and deleting quota specifications\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/quotas.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @spec.json \\\n    https://localhost:4646/v1/quota/shared-quota\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/quota/shared-quota\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    https://localhost:4646/v1/quota/shared-quota\n```\n\n----------------------------------------\n\nTITLE: Releasing Variable Lock - Shell Request\nDESCRIPTION: HTTP PUT request to release a lock on a variable.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/variables/locks.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    -XPUT -d@spec.nsv.json \\\n    https://localhost:4646/v1/var/example/first?lock-release\n```\n\n----------------------------------------\n\nTITLE: Chunklist Function Examples - Shell Session\nDESCRIPTION: Examples demonstrating the chunklist function with different chunk sizes. Shows how the function splits lists into chunks of size 2 and 1.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/chunklist.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> chunklist([\"a\", \"b\", \"c\", \"d\", \"e\"], 2)\n[\n  [\"a\", \"b\"],\n  [\"c\", \"d\"],\n  [\"e\"]\n]\n> chunklist([\"a\", \"b\", \"c\", \"d\", \"e\"], 1)\n[\n  [\"a\"],\n  [\"b\"],\n  [\"c\"],\n  [\"d\"],\n  [\"e\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Starting/Upgrading a Nomad Node\nDESCRIPTION: Starts a Nomad node with a specified binary, typically used for upgrading nodes to newer versions. The script uses the same data directory so the node rejoins the existing cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/upgrades/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./run_node.sh /path/to/Nomad0.9 server1\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ./run_node.sh /path/to/Nomad0.9 client1\n```\n\n----------------------------------------\n\nTITLE: Examples of strrev Function Usage\nDESCRIPTION: Shows examples of using the strrev function with both ASCII and Unicode strings, demonstrating how it properly handles Unicode grapheme cluster boundaries.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/strrev.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> strrev(\"hello\")\nolleh\n> strrev(\"a ☃\")\n☃ a\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for API Communication\nDESCRIPTION: Environment configuration block for setting up API service URL using Consul DNS.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/service-mesh.mdx#2025-04-19_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nenv {\n  COUNTING_SERVICE_URL = \"http://count-api.virtual.consul\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul ACL Policy for Cross-DC Connect\nDESCRIPTION: HCL configuration for a Consul ACL policy that allows cross-datacenter requests for Connect services registered by Nomad. This is needed due to changes in Service Identity Token creation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/upgrade/upgrade-specific.mdx#2025-04-19_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nservice_prefix \"\" { policy = \"read\" }\nnode_prefix    \"\" { policy = \"read\" }\n```\n\n----------------------------------------\n\nTITLE: Building AMI with Packer in Bash\nDESCRIPTION: This command uses Packer to build an Amazon Machine Image (AMI) based on the configuration in packer.json.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/aws/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ packer build packer.json\n```\n\n----------------------------------------\n\nTITLE: Purging a variable in Nomad\nDESCRIPTION: An example of using the `nomad var purge` command to delete a variable at the 'secret/creds' path. The `-y` flag is used to automatically confirm the action.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/purge.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad var purge -y secret/creds\nSuccessfully purged variable \"secret/creds\"!\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Go Tests\nDESCRIPTION: Shows how to properly set environment variables in Go tests using the testing.T method.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/testing.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nt.Setenv(\"VARIABLE_NAME\", \"value\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Deterministic State Updates in Nomad\nDESCRIPTION: Demonstrates the correct pattern for handling non-deterministic values like timestamps when updating state. Instead of generating timestamps within the state store, they should be passed as inputs from outside to ensure consistency across all servers.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/architecture-state-store.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n# Incorrect: generating a timestamp in the state store is not deterministic.\nfunc (s *StateStore) UpsertObject(...) {\n    # ...\n    obj.CreateTime = time.Now()\n    # ...\n}\n\n# Correct: non-deterministic values should be passed as inputs:\nfunc (s *StateStore) UpsertObject(..., timestamp time.Time) {\n    # ...\n    obj.CreateTime = timestamp\n    # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Standard Markdown List Items in Nomad Documentation\nDESCRIPTION: Demonstrates the syntax for creating normal list items and list items that begin with inline code, with a note about how changing inline code at the start of list items can break permalinks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/README.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- this is a normal list item\n- `this` is a list item that begins with inline code\n```\n\n----------------------------------------\n\nTITLE: Adding HashiCorp Repository on Ubuntu/Debian\nDESCRIPTION: Adds the official HashiCorp Linux repository to the system's package sources for Nomad installation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ echo \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" \\\n| sudo tee /etc/apt/sources.list.d/hashicorp.list\n```\n\n----------------------------------------\n\nTITLE: Autopilot Health Status Response\nDESCRIPTION: The JSON response from the health endpoint showing the overall cluster health status, failure tolerance, and detailed information about each server in the cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/autopilot.mdx#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Healthy\": true,\n  \"FailureTolerance\": 0,\n  \"Servers\": [\n    {\n      \"ID\": \"e349749b-3303-3ddf-959c-b5885a0e1f6e\",\n      \"Name\": \"node1\",\n      \"Address\": \"127.0.0.1:4647\",\n      \"SerfStatus\": \"alive\",\n      \"Version\": \"0.8.0\",\n      \"Leader\": true,\n      \"LastContact\": \"0s\",\n      \"LastTerm\": 2,\n      \"LastIndex\": 46,\n      \"Healthy\": true,\n      \"Voter\": true,\n      \"StableSince\": \"2017-03-06T22:07:51Z\"\n    },\n    {\n      \"ID\": \"e36ee410-cc3c-0a0c-c724-63817ab30303\",\n      \"Name\": \"node2\",\n      \"Address\": \"127.0.0.1:4747\",\n      \"SerfStatus\": \"alive\",\n      \"Version\": \"0.8.0\",\n      \"Leader\": false,\n      \"LastContact\": \"27.291304ms\",\n      \"LastTerm\": 2,\n      \"LastIndex\": 46,\n      \"Healthy\": true,\n      \"Voter\": false,\n      \"StableSince\": \"2017-03-06T22:18:26Z\"\n    }\n  ],\n  \"Leader\": \"e349749b-3303-3ddf-959c-b5885a0e1f6e\",\n  \"Voters\": [\n    \"e349749b-3303-3ddf-959c-b5885a0e1f6e\",\n    \"e36ee410-cc3c-0a0c-c724-63817ab30303\"\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HashiCorp Tap for Homebrew on macOS\nDESCRIPTION: Adds the HashiCorp tap to Homebrew, which is a repository of all HashiCorp packages for macOS.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ brew tap hashicorp/tap\n```\n\n----------------------------------------\n\nTITLE: Checking Node Metadata via Shell Command\nDESCRIPTION: Shell command to verify the Task API operation by filtering nodes based on the metadata set in the previous job.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/task-api.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnomad node status -filter 'Meta.example == \"Hello World!\"'\n```\n\n----------------------------------------\n\nTITLE: Authenticating gcloud CLI\nDESCRIPTION: This command authenticates the gcloud CLI tool with Google Cloud Platform, allowing it to interact with GCP services and resources.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ngcloud auth login\n```\n\n----------------------------------------\n\nTITLE: Defining Web Crawler Rules in robots.txt for Nomad Project\nDESCRIPTION: This snippet defines the rules for web crawlers accessing the Nomad project website. It disallows crawling of the 404 and 500 error pages for all user agents.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/public/robots.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow: /404\nDisallow: /500\n```\n\n----------------------------------------\n\nTITLE: Defining HCL Specification for Plugin Configuration (Go)\nDESCRIPTION: Example of creating an HCL specification object for validating plugin configuration. This specification defines a schema with two keys: a required 'command' string and an optional 'args' string list.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/plugins/base.mdx#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n    spec :=  hclspec.NewObject(map[string]*hclspec.Spec{\n\t\t\"command\": hclspec.NewAttr(\"command\", \"string\", true),\n\t\t\"args\":    hclspec.NewAttr(\"args\", \"list(string)\", false),\n\t})\n```\n\n----------------------------------------\n\nTITLE: Job Version Tag Deletion Response in Nomad API\nDESCRIPTION: This JSON response is returned after successfully deleting a job version tag. It includes various fields related to evaluation and indexing, which are mostly empty or zero in this case.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EvalID\":\"\",\n  \"EvalCreateIndex\":0,\n  \"JobModifyIndex\":0,\n  \"VolumeEvalID\":\"\",\n  \"VolumeEvalIndex\":0,\n  \"Index\":0,\n  \"LastContact\":0,\n  \"KnownLeader\":false,\n  \"NextToken\":\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad Operator Snapshot State Command\nDESCRIPTION: The basic usage syntax for the `nomad operator snapshot state` command requires specifying the snapshot file to analyze.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/snapshot/state.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator snapshot state <file>\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Deployment Status Command Usage\nDESCRIPTION: Shows the basic command syntax for checking deployment status with options flag reference.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/deployment/status.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad deployment status [options] <deployment id>\n```\n\n----------------------------------------\n\nTITLE: Sample Changelog Feature Entry\nDESCRIPTION: Example of how to format a feature changelog entry, typically used for significant major release features that would be included in release announcements.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/CHANGELOG.md#2025-04-19_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\n**Consul namespace support (Enterprise)**: Run Nomad-defined services in their HashiCorp Consul namespaces more easily using Nomad Enterpris\n```\n```\n\n----------------------------------------\n\nTITLE: Processing Nomad Raft Snapshot with Redirection and jq\nDESCRIPTION: Example showing how to redirect the command output to a file and then use jq to explore the JSON data, as the output can be very large.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/snapshot/state.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator snapshot state backup.snap > ~/raft-state.json\n$ jq . < ~/raft-state.json\n```\n\n----------------------------------------\n\nTITLE: Join Response - JSON\nDESCRIPTION: JSON response indicating number of nodes successfully joined.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"\",\n  \"num_joined\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Nomad Job Validation Payload\nDESCRIPTION: Placeholder indicating the request body should contain a valid Nomad job specification in JSON format.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/validate.mdx#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n(any valid nomad job IN JSON FORMAT)\n```\n\n----------------------------------------\n\nTITLE: Displaying Nomad Server Command Usage\nDESCRIPTION: Shows the basic usage syntax for the `nomad server` command and how to access help for subcommands.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/server/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnomad server <subcommand> [options]\n```\n\n----------------------------------------\n\nTITLE: Example of try Function Limitations with Invalid References\nDESCRIPTION: This example demonstrates that the try function cannot catch errors related to constructs that are invalid before dynamic expression evaluation, such as references to undeclared variables.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/conversion/try.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n> try(local.nonexist, \"fallback\")\n\nError: Reference to undeclared local value\n\nA local value with the name \"nonexist\" has not been declared.\n```\n\n----------------------------------------\n\nTITLE: Listing Allocations - With Prefix Filter\nDESCRIPTION: Retrieves allocations filtered by ID prefix from the Nomad API\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/allocations.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/allocations?prefix=a8198d79\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Server Force-Leave Command in Plaintext\nDESCRIPTION: This snippet shows the basic usage syntax for the `nomad server force-leave` command. It expects one argument, which is the node to be forced into the 'left' state.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/server/force-leave.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad server force-leave [options] <node>\n```\n\n----------------------------------------\n\nTITLE: Defining an Argument in HCL\nDESCRIPTION: An example of how to assign a value to an argument in HCL syntax. This shows the basic structure of an argument with a name and a value separated by an equals sign.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/syntax.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nimage_id = \"nginx:1.19\"\n```\n\n----------------------------------------\n\nTITLE: Configuring app-sizing-avg Strategy in Nomad Autoscaler Agent\nDESCRIPTION: HCL configuration block for setting up the app-sizing-avg strategy plugin in the Nomad Autoscaler Enterprise agent. This configuration is optional as the plugin is automatically launched by Nomad Autoscaler Enterprise.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/strategy/app-sizing-avg.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstrategy \"app-sizing-avg\" {\n  driver = \"app-sizing-avg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ceph Development Environment in Vagrant\nDESCRIPTION: Script output showing the deployment of a demo Ceph container in Vagrant VM for development purposes. Includes deployment confirmation and readiness check.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/ceph-csi-plugin/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ ./run-ceph.sh\n\nnomad job run -var-file=nomad.vars ./ceph.nomad\n==> Monitoring evaluation \"68dde586\"\n    Evaluation triggered by job \"ceph\"\n==> Monitoring evaluation \"68dde586\"\n    Evaluation within deployment: \"79e23968\"\n    Allocation \"77fd50fb\" created: node \"ca3ee034\", group \"ceph\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"68dde586\" finished with status \"complete\"\n\nwaiting for Ceph to be ready..............................\nready!\n```\n\n----------------------------------------\n\nTITLE: HTTP Verb Usage in Nomad API\nDESCRIPTION: Example showing how different HTTP verbs (PUT and GET) on the same endpoint trigger different behaviors in Nomad's API.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/index.mdx#2025-04-19_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nPUT /v1/jobs\nGET /v1/jobs\n```\n\n----------------------------------------\n\nTITLE: Making Vault Workload Identity Check Request - Shell\nDESCRIPTION: Example of making a GET request to the Nomad API endpoint for checking Vault workload identity upgrade compatibility.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/upgrade-check.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnomad operator api \\\n    /v1/operator/upgrade-check/vault-workload-identity\n```\n\n----------------------------------------\n\nTITLE: Creating AWS VPC Resources with for_each in HCL\nDESCRIPTION: Demonstrates how to use the networks variable directly with for_each to create AWS VPC resources.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/flatten.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_vpc\" \"example\" {\n  for_each = var.networks\n\n  cidr_block = each.value.cidr_block\n}\n```\n\n----------------------------------------\n\nTITLE: Using replace Function in Shell Session\nDESCRIPTION: These examples demonstrate how to use the replace function in a shell session. The first example replaces '+' with '-' in a mathematical expression, while the second replaces 'world' with 'everybody' in a greeting.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/replace.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> replace(\"1 + 2 + 3\", \"+\", \"-\")\n1 - 2 - 3\n\n> replace(\"hello world\", \"world\", \"everybody\")\nhello everybody\n```\n\n----------------------------------------\n\nTITLE: Website Navigation Path Configuration\nDESCRIPTION: Example of configuring internal navigation paths for documentation in docs-navigation.js file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/README.md#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  source: '/foo', destination: '/nested/foo', permanent: true }\n```\n\n----------------------------------------\n\nTITLE: Building Packer Image\nDESCRIPTION: This command builds a machine image using Packer based on the configuration in packer.json. The image will be used as a base for deploying the Nomad cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_17\n\nLANGUAGE: console\nCODE:\n```\npacker build packer.json\n```\n\n----------------------------------------\n\nTITLE: Importing Test Library in Go\nDESCRIPTION: Demonstrates the recommended import for the testing library used in Nomad unit tests.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/testing.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/shoenig/test\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Client RPC in Go for Nomad\nDESCRIPTION: Provides guidance on implementing a Client RPC, emphasizing the use of QueryOptions instead of WriteRequest and setting AllowStale to true in the Server RPC forwarder to avoid infinite loops.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/checklist-rpc-endpoint.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// In client RPC implementation\ntype FooRequest struct {\n    QueryOptions\n    // Other fields\n}\n\n// In server RPC forwarder\nargs.QueryOptions.AllowStale = true\nerr := s.forwardServer(\"Foo.HandleRequest\", args, reply)\n```\n\n----------------------------------------\n\nTITLE: Legacy configuration for enabling Raw Exec in Nomad\nDESCRIPTION: Deprecated method for enabling the raw_exec driver in Nomad versions before v0.9. This configuration is still supported in v0.9.0 but is deprecated in favor of the plugin block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/raw_exec.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  options = {\n    \"driver.raw_exec.enable\" = \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Skip Verify for Nomad Service Checks in HCL\nDESCRIPTION: This snippet demonstrates how to set the tls_skip_verify parameter for Nomad service checks. This feature was added in version 1.9.6 to allow skipping TLS verification in certain scenarios.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/CHANGELOG.md#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ncheck {\n  # ... other check configuration ...\n  tls_skip_verify = true\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a custom Azure image\nDESCRIPTION: Command to delete the custom hashistack image from Azure if needed. This targets the specific image in the packer resource group.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/azure/README.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ az image delete --name hashistack --resource-group packer\n```\n\n----------------------------------------\n\nTITLE: List CSI Snapshots Request Example\nDESCRIPTION: Sample curl command showing how to list CSI volume snapshots with pagination parameters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    -H \"X-Nomad-CSI-Secrets: secret-key-1=value-1,secret-key-2=value-2\" \\\n    https://localhost:4646/v1/volumes/snapshot?plugin_id=plugin-id1&per_page=2\n```\n\n----------------------------------------\n\nTITLE: Installing Gossip Encryption Key Example\nDESCRIPTION: Example showing how to install a new gossip encryption key using a base64 encoded key string. The command provides feedback on the installation process.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/gossip/keyring-install.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator gossip keyring install AOUfjGff+MrTBzNU7NCOTmYajKRkGv8r2ToxheWd+jk=\nInstalling new gossip encryption key...\n```\n\n----------------------------------------\n\nTITLE: Referencing the Nomad Configuration Package Structure\nDESCRIPTION: Shows the import path for the configuration package that contains shared structs. This package is designed to avoid import cycles by being terminal in the dependency graph.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/nomad/structs/config/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`nomad/structs/config`\n```\n\n----------------------------------------\n\nTITLE: Artifactory Token Generation\nDESCRIPTION: Command to obtain Artifactory token using Doormat\nSOURCE: https://github.com/hashicorp/nomad/blob/main/enos/README.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport ARTIFACTORY_TOKEN=$(doormat artifactory create-token | jq -r .access_token)\n```\n\n----------------------------------------\n\nTITLE: Exploring Host Filesystem Access with None Isolation\nDESCRIPTION: Shell session showing how tasks using 'none' isolation (raw_exec driver) have full access to the host filesystem and run with the Nomad client's user privileges, highlighting the security implications.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/filesystem.mdx#2025-04-19_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc exec 87ec7d12 /bin/sh\n# ls /\nbin   dev  home        lib    lib64   lost+found  mnt  proc  run   snap  sys  usr  vmlinuz\nboot  etc  initrd.img  lib32  libx32  media       opt  root  sbin  srv   tmp  var\n\n# echo $NOMAD_SECRETS_DIR\n/var/nomad/alloc/87ec7d12-5e35-8fba-96cc-09e5376be15a/task3/secrets\n\n# whoami\nroot\n```\n\n----------------------------------------\n\nTITLE: Markdown Table for Issue Stage Labels\nDESCRIPTION: Details the various stages an issue can be in during its lifecycle, from acceptance to investigation and resolution.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/issue-labels.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nLabel | Description\n---|---\nstage/accepted | The Nomad team intends to work on this bug or feature, but does not commit to a specific timeline. This doesn't mean the design of the feature has been fully completed, just that we want to do so.\nstage/thinking | The Nomad team member who triages the issue needs a few days to think and respond to the issue\nstage/needs-discussion | This topic needs discussion with the larger Nomad maintainers group before committing to it. This doesn't signify that design needs to be discussed.\nstage/needs-investigation | The issue described is detailed and complex. It will need some work and can't be immediately resolved.\nstage/waiting-reply | We need more information from the reporter.\nstage/not-a-bug | Reported as a bug but turned out to be expected behavior and was closed.\n```\n\n----------------------------------------\n\nTITLE: Grouping Results in For Expressions\nDESCRIPTION: Example of using the ... operator in a for expression to group results with common keys. This creates an object where keys are the first character of each string and values are grouped by that key.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/expressions.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n{for s in var.list : substr(s, 0, 1) => s... if s != \"\"}\n```\n\n----------------------------------------\n\nTITLE: Annotating Test Failures in Go\nDESCRIPTION: Shows how to add detailed annotations to test failures using the must package.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/testing.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmust.Sprint(\"Failure occurred: %v\", err)\n```\n\n----------------------------------------\n\nTITLE: Toggling Node Eligibility using JSON Payload in Nomad\nDESCRIPTION: This JSON payload specifies the eligibility status for a node, which can be either 'eligible' or 'ineligible'.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/nodes.mdx#2025-04-19_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Eligibility\": \"ineligible\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Nomad Environment with Vagrant\nDESCRIPTION: This command uses Vagrant to set up a Linux environment for running Nomad with NFS plugins.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/nfs/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvagrant up linux\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Node Pool Apply Command\nDESCRIPTION: The basic usage syntax for the `nomad node pool apply` command. It takes options and an input file or stdin.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/apply.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad node pool apply [options] <input>\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace Using trimspace Function in Shell\nDESCRIPTION: Demonstrates using the trimspace function to remove various types of whitespace characters (spaces, tabs, newlines) from both the beginning and end of a string. The function handles all Unicode-defined space characters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/trimspace.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> trimspace(\"  hello\\n\\n\")\nhello\n```\n\n----------------------------------------\n\nTITLE: Sample Nomad License Utilization JSON Payload\nDESCRIPTION: Example JSON payload showing the license utilization data format sent to HashiCorp. This specific example shows the billable nodes count metric for Nomad.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/enterprise/license/utilization-reporting.mdx#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"metrics\": {\n    \"nomad.billable.nodes\": {\n        \"key\": \"nomad.billable.nodes\",\n        \"kind\": \"counter\",\n        \"mode\": \"write\",\n        \"value\": 33\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Delete Response\nDESCRIPTION: Sample JSON response after successfully deleting a variable.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/variables/variables.mdx#2025-04-19_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Index\": 16\n}\n```\n\n----------------------------------------\n\nTITLE: Coalesce Function with List Expansion in Nomad\nDESCRIPTION: Example showing how to use the coalesce function with a list of strings using the spread operator (...) to expand the list as individual arguments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/coalesce.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> coalesce([\"\", \"b\"]...)\nb\n```\n\n----------------------------------------\n\nTITLE: Listing all available recommendations\nDESCRIPTION: An example of using the `nomad recommendation list` command to display all available recommendations. The output shows the ID, Job, Group, Task, Resource, and Value for each recommendation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/recommendation/list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad recommendation list\nID                                    Job      Group     Task   Resource  Value\nea130ac3-1410-cfe0-f34d-adc3ca94712d  example  cache-lb  nginx  CPU       57\n68236421-c90f-efa6-fc02-37ae2d59bf03  example  cache     redis  CPU       57\n980c2554-7a1b-0c51-933a-f46850a228bd  example  cache     redis  MemoryMB  10\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Job Deployments in Nomad API\nDESCRIPTION: Sample response showing job deployment details including deployment ID, job information, task group status, deployment status, and metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"ID\": \"85ee4a9a-339f-a921-a9ef-0550d20b2c61\",\n    \"JobID\": \"my-job\",\n    \"JobVersion\": 1,\n    \"JobModifyIndex\": 19,\n    \"JobCreateIndex\": 7,\n    \"TaskGroups\": {\n      \"cache\": {\n        \"AutoRevert\": true,\n        \"Promoted\": false,\n        \"PlacedCanaries\": [\n          \"d0ad0808-2765-abf6-1e15-79fb7fe5a416\",\n          \"38c70cd8-81f2-1489-a328-87bb29ec0e0f\"\n        ],\n        \"DesiredCanaries\": 2,\n        \"DesiredTotal\": 3,\n        \"PlacedAllocs\": 2,\n        \"HealthyAllocs\": 2,\n        \"UnhealthyAllocs\": 0\n      }\n    },\n    \"Status\": \"running\",\n    \"StatusDescription\": \"Deployment is running\",\n    \"CreateIndex\": 21,\n    \"ModifyIndex\": 25\n  },\n  {\n    \"ID\": \"fb6070fb-4a44-e255-4e6f-8213eba3871a\",\n    \"JobID\": \"my-job\",\n    \"JobVersion\": 0,\n    \"JobModifyIndex\": 7,\n    \"JobCreateIndex\": 7,\n    \"TaskGroups\": {\n      \"cache\": {\n        \"AutoRevert\": true,\n        \"Promoted\": false,\n        \"PlacedCanaries\": null,\n        \"DesiredCanaries\": 0,\n        \"DesiredTotal\": 3,\n        \"PlacedAllocs\": 3,\n        \"HealthyAllocs\": 3,\n        \"UnhealthyAllocs\": 0\n      }\n    },\n    \"Status\": \"successful\",\n    \"StatusDescription\": \"Deployment completed successfully\",\n    \"CreateIndex\": 9,\n    \"ModifyIndex\": 17\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Nomad Repo with Vagrant\nDESCRIPTION: Commands to clone the Nomad repository and set up a local staging environment using Vagrant. This environment pre-installs necessary tools like Packer, Terraform, Docker, and Azure CLI.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:hashicorp/nomad.git\n$ cd nomad/terraform\n$ vagrant up && vagrant ssh\n```\n\n----------------------------------------\n\nTITLE: Basic nomad service list command usage syntax\nDESCRIPTION: The basic syntax for using the nomad service list command. The command requires no arguments and lists all registered services.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/service/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad service list [options]\n```\n\n----------------------------------------\n\nTITLE: Using Slice Function with String List in Shell\nDESCRIPTION: Example showing how to use the slice function to extract elements from a list of strings. Extracts elements at indices 1 and 2 from a four-element list.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/slice.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> slice([\"a\", \"b\", \"c\", \"d\"], 1, 3)\n[\n  \"b\",\n  \"c\",\n]\n```\n\n----------------------------------------\n\nTITLE: Showing the Nomad UI URL Without Opening Browser in Shell\nDESCRIPTION: Example of using the 'nomad ui' command with the -show-url flag to display the UI URL without actually opening the browser.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/ui.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad ui -show-url\nURL for web UI: http://127.0.0.1:4646\n```\n\n----------------------------------------\n\nTITLE: Using zipmap Function in Shell Session\nDESCRIPTION: This example demonstrates the usage of the zipmap function in a shell session. It creates a map with keys \"a\" and \"b\", and corresponding values 1 and 2.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/zipmap.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> zipmap([\"a\", \"b\"], [1, 2])\n{\n  \"a\" = 1,\n  \"b\" = 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Job with Stdin Configuration\nDESCRIPTION: Example of dispatching a video encoding job with configuration payload provided via stdin.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/dispatch.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ cat << EOF | nomad job dispatch video-encode -\n{\n  \"s3-input\": \"https://video-bucket.s3-us-west-1.amazonaws.com/cb31dabb1\",\n  \"s3-output\": \"https://video-bucket.s3-us-west-1.amazonaws.com/a149adbe3\",\n  \"input-codec\": \"mp4\",\n  \"output-codec\": \"webm\",\n  \"quality\": \"1080p\"\n}\nEOF\nDispatched Job ID = video-encode/dispatch-1485379325-cb38d00d\nEvaluation ID     = 31199841\n\n==> Monitoring evaluation \"31199841\"\n    Evaluation triggered by job \"example/dispatch-1485379325-cb38d00d\"\n    Allocation \"8254b85f\" created: node \"82ff9c50\", group \"cache\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"31199841\" finished with status \"complete\"\n```\n\n----------------------------------------\n\nTITLE: Configuring app-sizing-max Strategy in Nomad Autoscaler Agent\nDESCRIPTION: Optional HCL configuration for the app-sizing-max strategy plugin in the Nomad Autoscaler agent. This setup is usually not required as the plugin is automatically launched by Nomad Autoscaler Enterprise.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/strategy/app-sizing-max.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstrategy \"app-sizing-max\" {\n  driver = \"app-sizing-max\"\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Nomad Leader Error Logs During Authoritative Region Hard Failure\nDESCRIPTION: This log snippet shows the cascade of error messages that appear in the logs of functioning region leaders when the authoritative region becomes completely unreachable. It shows failed attempts to fetch various resources like namespaces, policies, and tokens from the authoritative region.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/federation/failure.mdx#2025-04-19_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n[ERROR] nomad/leader.go:544: nomad: failed to fetch namespaces from authoritative region: error=\"rpc error: EOF\"\n[ERROR] nomad/leader.go:1767: nomad: failed to fetch policies from authoritative region: error=\"rpc error: EOF\"\n[ERROR] nomad/leader.go:2498: nomad: failed to fetch ACL binding rules from authoritative region: error=\"rpc error: EOF\"\n[ERROR] nomad/leader_ent.go:226: nomad: failed to fetch quota specifications from authoritative region: error=\"rpc error: EOF\"\n[ERROR] nomad/leader.go:703: nomad: failed to fetch node pools from authoritative region: error=\"rpc error: EOF\"\n[ERROR] nomad/leader.go:1909: nomad: failed to fetch tokens from authoritative region: error=\"rpc error: EOF\"\n[ERROR] nomad/leader.go:2083: nomad: failed to fetch ACL Roles from authoritative region: error=\"rpc error: EOF\"\n[DEBUG] nomad/leader_ent.go:84: nomad: failed to fetch policies from authoritative region: error=\"rpc error: EOF\"\n[ERROR] nomad/leader.go:2292: nomad: failed to fetch ACL auth-methods from authoritative region: error=\"rpc error: EOF\"\n[DEBUG] go-hclog@v1.6.3/stdlog.go:58: nomad: memberlist: Failed UDP ping: europe-west-1-server-1.europe-west-1 (timeout reached)\n[INFO]  go-hclog@v1.6.3/stdlog.go:60: nomad: memberlist: Suspect europe-west-1-server-1.europe-west-1 has failed, no acks received\n[DEBUG] go-hclog@v1.6.3/stdlog.go:58: nomad: memberlist: Failed UDP ping: europe-west-1-server-1.europe-west-1 (timeout reached)\n```\n\n----------------------------------------\n\nTITLE: Signal Allocation Payload - JSON\nDESCRIPTION: Sample payload for sending a signal to a specific task in an allocation\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/allocations.mdx#2025-04-19_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Signal\": \"SIGUSR1\",\n  \"Task\": \"FOO\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Nomad Jobs API in Shell\nDESCRIPTION: This snippet demonstrates how to query the Nomad Jobs API using the 'nomad operator api' command. It shows both unfiltered and filtered requests to retrieve job information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/index.mdx#2025-04-19_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api /v1/jobs\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api -filter 'Datacenters contains \"dc2\"' /v1/jobs\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pre-requisites for Kadalu CSI Demo\nDESCRIPTION: Commands to set up environment variables and verify the Gluster volume status before deploying the CSI plugin.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/kadalu-csi/README.md#2025-04-19_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ export volname=\"sample-pool\" gluster_hosts=\"10.x.x.x\" gluster_volname=\"sample-vol\" job_dir=\"${job_dir:-$(pwd)}\"\n\n# Make sure external gluster volume is started and quota is set\n$ ssh $gluster_hosts \"gluster volume info $gluster_volname | grep Status\"\nStatus: Started\n\n$ ssh $gluster_hosts \"gluster volume quota $gluster_volname enable\"\nvolume quota : success\n```\n\n----------------------------------------\n\nTITLE: Configuring Statsite Integration in Nomad Autoscaler\nDESCRIPTION: Configuration block for forwarding metrics to a Statsite server by specifying the server address. This enables integration with Statsite for metrics collection.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/agent/telemetry.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntelemetry {\n  statsite_address = \"statsite.company.local:8125\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Variable via HTTP DELETE\nDESCRIPTION: Makes a DELETE request to remove a specific variable by path.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/variables/variables.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -XDELETE \\\n    https://localhost:4646/v1/var/example/first?namespace=prod\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Plugin for Portworx in Nomad\nDESCRIPTION: Configuration block for enabling privileged Docker containers and volumes in Nomad client configuration. Required for running Portworx OCI-monitor container.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/portworx-csi-plugin/README.md#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"docker\" {\n  config {\n    allow_privileged = true\n    volumes {\n      enabled = true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Changelog Improvement Entry\nDESCRIPTION: Example of how to format an improvement changelog entry in Nomad using markdown-like syntax with release-note tag.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/CHANGELOG.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\ninternal/server: Add new option for configs\n```\n```\n\n----------------------------------------\n\nTITLE: Nomad Job Tag Unset Command Usage\nDESCRIPTION: Shows the syntax for the job tag unset command used to delete tags from versions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/tag.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnomad job tag unset [options] <job_id>\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Job Revert Command Usage\nDESCRIPTION: Basic syntax for using the nomad job revert command to revert a job to a specific version or tag.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/revert.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnomad job revert [options] <job> <version|tag>\n```\n\n----------------------------------------\n\nTITLE: Describing Nomad Examples in Markdown\nDESCRIPTION: This Markdown snippet introduces the purpose of the examples included in the Nomad project. It explains that the examples are designed to showcase specific features and provide a learning experience. Additionally, it mentions that these examples are automatically provisioned into VM home directories in cloud environments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/examples/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Examples\n\nThe examples included here are designed to introduce specific features and \nprovide a basic learning experience. The examples subdirectory is automatically \nprovisioned into the home directory of the VMs in your cloud environment.\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging in Go Tests\nDESCRIPTION: Demonstrates how to properly configure logging in Go tests using the testlog package.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/testing.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nlogger := helper.testlog.HCLogger(t)\n```\n\n----------------------------------------\n\nTITLE: Disabling Nomad License Reporting with Environment Variable\nDESCRIPTION: Command to set an environment variable that disables automated license reporting in Nomad. This approach requires a system restart to take effect.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/enterprise/license/utilization-reporting.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ export OPTOUT_LICENSE_REPORTING=true\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram: Deployment Watcher Process in Nomad\nDESCRIPTION: This diagram illustrates the interaction between the Deployment Watcher, State Store, and Leader RPC in Nomad. It shows how the watcher queries for new deployments, monitors allocation health, and updates deployment states.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/architecture-eval-lifecycle.md#2025-04-19_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\n    participant leaderRpc as Leader RPC\n    participant stateStore as State Store\n    participant dw as Deployment Watcher\n\n    dw ->> stateStore: blocking query for new Deployments\n    activate dw\n    stateStore -->> dw: new Deployment\n    dw -->> dw: start watcher\n\n    dw ->> stateStore: blocking query for Allocation health\n    stateStore -->> dw: Allocation health updates\n    dw ->> dw: next step?\n\n    Note right of dw: Update state and create evaluations for next batch...\n    Note right of dw: Or fail the Deployment and update state\n\n    dw ->> leaderRpc: Deployment.Upsert + Evaluation.Upsert\n    activate leaderRpc\n    leaderRpc ->> stateStore: write Deployment and Evaluations\n    activate stateStore\n    stateStore -->> leaderRpc: ok\n    deactivate stateStore\n    leaderRpc -->> dw: ok\n    deactivate leaderRpc\n    deactivate dw\n```\n\n----------------------------------------\n\nTITLE: Creating a Nomad Release Binary\nDESCRIPTION: Commands for building a release binary of Nomad for multiple platforms, with resulting binaries placed in the ./pkg directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/README.md#2025-04-19_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ make prerelease\n$ make release\n$ ls ./pkg\n```\n\n----------------------------------------\n\nTITLE: Example Output - Nomad Gossip Keyring List\nDESCRIPTION: Demonstrates the expected output when listing gossip encryption keys, showing multiple active keys in the cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/gossip/keyring-list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator gossip keyring list\nGathering installed encryption keys...\nKey\nHD5Y61iE+neTxd1n6TnXhCPViPIUq5QpWq8WW8012XA=\nAOUfjGff+MrTBzNU7NCOTmYajKRkGv8r2ToxheWd+jk=\n```\n\n----------------------------------------\n\nTITLE: Cloning Kadalu-Nomad Configuration Repository\nDESCRIPTION: Commands to clone the configuration repository used for creating a local Nomad cluster in Docker and setting up the environment.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/kadalu-csi/README.md#2025-04-19_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# Clone configuration repository used to create local Nomad cluster in Docker\n$ git clone https://github.com/leelavg/kadalu-nomad && cd kadalu-nomad\n\n# Install Shipyard following the instructions in https://shipyard.run\n# Create local cluster\n$ shipyard run\n[...]\n$ eval $(shipyard env)\n$ export job_dir=\"$(pwd)/kadalu\"\n```\n\n----------------------------------------\n\nTITLE: Debug Environment Setup\nDESCRIPTION: Command to set up debug environment variables for Nomad cluster connection\nSOURCE: https://github.com/hashicorp/nomad/blob/main/enos/README.md#2025-04-19_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ $(./debug-environment .enos/c545bbc25c5eec0ca86c99595a9034b5451a91aa10b586da2baab435df65be2e)\n```\n\n----------------------------------------\n\nTITLE: Installing go-changelog Tool for Nomad\nDESCRIPTION: Command to install the go-changelog tool which is used to generate Nomad's changelog on release.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/hashicorp/go-changelog/cmd/changelog-build@latest\n```\n\n----------------------------------------\n\nTITLE: Using the lower function for string conversion in Nomad HCL2\nDESCRIPTION: Examples demonstrating how the lower function converts uppercase letters to lowercase, including both Latin and Cyrillic characters. The function follows Unicode's definition of letter cases.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/lower.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> lower(\"HELLO\")\nhello\n> lower(\"АЛЛО!\")\nалло!\n```\n\n----------------------------------------\n\nTITLE: Installing Consul CNI Plugin on RHEL/CentOS\nDESCRIPTION: Command to install the consul-cni package on RHEL or CentOS systems using yum package manager. This is required for transparent proxying with Consul service mesh.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/partials/install/install-consul-cni-plugin.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo yum -y install consul-cni\n```\n\n----------------------------------------\n\nTITLE: Installing Nomad Device Plugin\nDESCRIPTION: Instructions for building and installing the example device plugin in the Nomad plugins directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/plugins/device/cmd/example/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnomad_plugin_dir='/opt/nomad/plugins' # for example\ngo build -o $nomad_plugin_dir/nomad-device-example ./cmd\n```\n\n----------------------------------------\n\nTITLE: Using nomad server members command\nDESCRIPTION: Basic usage of the 'nomad server members' command to list servers in the Nomad cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/server/members.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad server members [options]\n```\n\n----------------------------------------\n\nTITLE: Using bcrypt Function in Nomad HCL\nDESCRIPTION: This snippet demonstrates the syntax for using the bcrypt function in Nomad's HCL configuration. It takes a string and an optional cost parameter, which defaults to 10 if not specified.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/crypto/bcrypt.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nbcrypt(string, cost)\n```\n\n----------------------------------------\n\nTITLE: Linking Billing Account to GCP Project\nDESCRIPTION: This command links the specified billing account to the newly created GCP project, enabling resource creation and usage billing.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_11\n\nLANGUAGE: console\nCODE:\n```\ngcloud alpha billing projects link \"$GOOGLE_PROJECT\" --billing-account \"$GOOGLE_BILLING_ACCOUNT\"\n```\n\n----------------------------------------\n\nTITLE: Using Nomad ACL Role Info Command\nDESCRIPTION: This snippet shows the basic usage syntax for the 'nomad acl role info' command. It requires either a role ID or role name as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/role/info.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl role info [options] <role_id> or <role_name>\n```\n\n----------------------------------------\n\nTITLE: Using the nomad quota delete command syntax\nDESCRIPTION: The basic syntax for the nomad quota delete command, which requires the quota specification name as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/quota/delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad quota delete <quota_name>\n```\n\n----------------------------------------\n\nTITLE: Running Nomad UI in Development Mode with Live Nomad Process\nDESCRIPTION: Command to start the Ember development server with Mirage disabled to use a live Nomad instance instead of generated data.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/ui/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUSE_MIRAGE=false ember serve\n```\n\n----------------------------------------\n\nTITLE: Using the nomad volume status command\nDESCRIPTION: Basic syntax for the 'nomad volume status' command which displays status information for volumes. It accepts an optional volume ID or prefix as the sole argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/status.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad volume status [options] [volume]\n```\n\n----------------------------------------\n\nTITLE: Reading Nomad Scheduler Worker Configuration\nDESCRIPTION: API request to retrieve the current scheduler configuration from a Nomad server agent. Shows how to query which schedulers are enabled and how many scheduler workers are configured.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_19\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/agent/schedulers/config\n```\n\n----------------------------------------\n\nTITLE: Using nomad job eval command\nDESCRIPTION: The basic syntax for using the 'nomad job eval' command. It requires a job ID as an argument and can include additional options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/eval.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad job eval [options] <job_id>\n```\n\n----------------------------------------\n\nTITLE: Examining Server Logs for Plan Rejection Ineligibility\nDESCRIPTION: Example log output from Nomad server when a node is marked as ineligible due to multiple plan rejections, which helps identify problematic nodes in the cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/monitoring-nomad.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[WARN]  nomad.state_store: marking node as ineligible due to multiple plan rejections: node_id=67af2541-5e96-6f54-9095-11089d627626\n```\n\n----------------------------------------\n\nTITLE: Configuring Stopped Container Recovery for Podman in Nomad (HCL)\nDESCRIPTION: Deprecated option to allow the driver to start and reuse previously stopped containers after a Nomad client restart.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_38\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"nomad-driver-podman\" {\n  config {\n    recover_stopped = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Download Component\nDESCRIPTION: Examples of implementing the ProductDownloader component with and without prerelease configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/README.md#2025-04-19_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<ProductDownloader\n  product=\"<Product>\"\n  version={VERSION}\n  downloads={downloadData}\n  community=\"/resources\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ProductDownloader\n  product=\"<Product>\"\n  version={VERSION}\n  downloads={downloadData}\n  community=\"/resources\"\n  prerelease={{\n    type: 'release candidate', // the type of prerelease: beta, release candidate, etc.\n    name: 'v1.0.0', // the name displayed in text on the website\n    version: '1.0.0-rc1', // the actual version tag that was pushed to releases.hashicorp.com\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Documenting Go Version Update in Changelog (Markdown)\nDESCRIPTION: This snippet demonstrates how a Go version update is typically documented in the Nomad project's changelog. It includes the build update and references the GitHub issue number.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/golang.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n* build: Updated to Go 1.12.13 [GH-6606]\n```\n```\n\n----------------------------------------\n\nTITLE: Stop Allocation Response - JSON\nDESCRIPTION: Response returned when stopping an allocation, containing the evaluation ID and index\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/allocations.mdx#2025-04-19_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EvalID\": \"5456bd7a-9fc0-c0dd-6131-cbee77f57577\",\n  \"Index\": 54\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying the Cinder CSI Plugin in Nomad\nDESCRIPTION: Command-line instructions for deploying the Cinder CSI Plugin as a Nomad job. This sets the necessary environment variables for authentication and runs the plugin job file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/cinder-csi-plugin/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport NOMAD_ADDR=https://nomad.example.com:4646\nexport NOMAD_TOKEN=34534-3sdf3-szfdsafsdf3423-zxdfsd3\nnomad job run cinder-csi-plugin.hcl\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Kadalu CSI Resources in Nomad\nDESCRIPTION: Commands to stop the sample application, delete the volume, stop the CSI plugin components, and destroy the local Shipyard cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/kadalu-csi/README.md#2025-04-19_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n# Stop sample app, delete the volume and stop the CSI plugin components\n$ nomad stop sample-pv-check\n$ nomad volume delete csi-test\n$ nomad stop kadalu-csi-nodeplugin\n$ nomad stop kadalu-csi-controller\n\n# Destroy local Shipyard cluster\n$ shipyard destroy\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Variables with Custom Nomad Binary\nDESCRIPTION: This example shows how to include a custom Nomad binary URL in the terraform.tfvars file, allowing for runtime replacement of the Nomad binary during cluster deployment.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/aws/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nregion                  = \"us-east-1\"\nami                     = \"ami-09730698a875f6abd\"\ninstance_type           = \"t2.medium\"\nkey_name                = \"KEY_NAME\"\nserver_count            = \"3\"\nclient_count            = \"4\"\nnomad_binary            = \"https://releases.hashicorp.com/nomad/0.7.0/nomad_0.7.0_linux_amd64.zip\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Web Service Information\nDESCRIPTION: This command retrieves information about the 'web' service in Nomad, including assigned ports.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/nfs/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnomad service info web\n```\n\n----------------------------------------\n\nTITLE: Using MDX Inline Alert Components in Nomad Documentation\nDESCRIPTION: Demonstrates how to use custom MDX alert components to create visually distinctive information boxes. Shows different alert types (Tip, Highlight, Note, Warning) and how to override the title.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/README.md#2025-04-19_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n## Alert types\n\n### Tip\n\n<Tip>\n  To provide general information to the user regarding the current context or\n  relevant actions.\n</Tip>\n\n### Highlight\n\n<Highlight>\n  To provide general or promotional information to the user prominently.\n</Highlight>\n\n### Note\n\n<Note>\n  To help users avoid an issue. Provide guidance and actions if possible.\n</Note>\n\n### Warning\n\n<Warning>\n  To indicate critical issues that need immediate action or help users\n  understand something critical.\n</Warning>\n\n## Title override prop\n\n<Note title=\"Hashiconf 2027\">To provide general information.</Note>\n```\n\n----------------------------------------\n\nTITLE: List Volume Claims Request\nDESCRIPTION: Shell command to list all host volume claims via the Nomad API.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_28\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/volumes/claims\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Nomad Operator Root Keyring Remove Command\nDESCRIPTION: Examples showing the removal of encryption keys, including an error case when attempting to remove an active key and a successful removal of an inactive key.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/root/keyring-remove.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator root keyring remove 48596ce5-3ff5-8f77-2dcf-301682ada0ce\nerror: Unexpected response code: 500 (active root key cannot be deleted - call rotate first)\n\n$ nomad operator root keyring remove 33374156-9f81-b14c-83d4-a2f1f87dbf99\nRemoved encryption key 33374156-9f81-b14c-83d4-a2f1f87dbf99\n```\n\n----------------------------------------\n\nTITLE: Setting up Nomad Development Environment with Vagrant\nDESCRIPTION: Instructions for cloning the Nomad repository and setting up a development environment using Vagrant and VirtualBox.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/hashicorp/nomad.git\n$ cd nomad\n$ vagrant up\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ vagrant ssh\n```\n\n----------------------------------------\n\nTITLE: Checking Nomad Client Status\nDESCRIPTION: Command to verify that Nomad clients have started and joined the cluster. This displays the status of all nodes in the Nomad cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/dev/docker-clients/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnomad node-status\n```\n\n----------------------------------------\n\nTITLE: Configuring Singularity Driver Plugin Options in Nomad\nDESCRIPTION: Example configuration for the Singularity driver plugin using the plugin syntax, including enabling the driver and setting the Singularity cache location.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/singularity.mdx#2025-04-19_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"nomad-driver-Singularity\" {\n  config {\n    enabled = true\n    singularity_path = \"/var/lib/singularity\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Use of changelog-build Tool\nDESCRIPTION: Example of directly using the changelog-build binary to generate changelog entries, specifying the previous release, current release, and template files.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/CHANGELOG.md#2025-04-19_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncd .changelog\nchangelog-build -last-release v1.1.2 -this-release HEAD \\\n                -entries-dir . -changelog-template changelog.tmpl -note-template note.tmpl\n```\n\n----------------------------------------\n\nTITLE: Declaring Contains Function Signature in HCL\nDESCRIPTION: Function signature showing how to use the contains function to check if a value exists in a list or set.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/contains.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncontains(list, value)\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes\nDESCRIPTION: Detailed release notes for Nomad 1.8.0 including improvements and bug fixes across various components including agent, API, artifact handling, autopilot, CLI, client, networking, UI, and more.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/CHANGELOG.md#2025-04-19_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.8.0 (May 28, 2024)\n\nIMPROVEMENTS:\n\n* agent: Added support for systemd readiness notifications [[GH-20528](https://github.com/hashicorp/nomad/issues/20528)]\n* api: new /v1/jobs/statuses endpoint collates details about jobs' allocs and latest deployment, intended for use in the updated UI jobs index page [[GH-20130](https://github.com/hashicorp/nomad/issues/20130)]\n* artifact: Added support for downloading artifacts without validating the TLS certificate [[GH-20126](https://github.com/hashicorp/nomad/issues/20126)]\n* autopilot: Added `operator autopilot health` command to review Autopilot health data [[GH-20156](https://github.com/hashicorp/nomad/issues/20156)]\n* cli: Add `-jwks-ca-file` argument to `setup consul/vault` commands [[GH-20518](https://github.com/hashicorp/nomad/issues/20518)]\n* client/volumes: Add a mount volume level option for selinux tags on volumes [[GH-19839](https://github.com/hashicorp/nomad/issues/19839)]\n* client: expose network namespace bridge/cni configuration values as task env vars [[GH-11810](https://github.com/hashicorp/nomad/issues/11810)]\n* connect: Added support for `volume_mount` blocks on sidecar task overrides [[GH-20575](https://github.com/hashicorp/nomad/issues/20575)]\n* consul/connect: Attempt autodetection of podman task driver for Connect gateways [[GH-20611](https://github.com/hashicorp/nomad/issues/20611)]\n* consul: provide tasks that have Consul tokens the CONSUL_HTTP_TOKEN environment variable [[GH-20519](https://github.com/hashicorp/nomad/issues/20519)]\n* core: Do not create evaluations within batch deregister endpoint during job garbage collection [[GH-20510](https://github.com/hashicorp/nomad/issues/20510)]\n* csi: Added support for wildcard namespace to `plugin status` command [[GH-20551](https://github.com/hashicorp/nomad/issues/20551)]\n* deps: Update msgpack to v2 [[GH-20173](https://github.com/hashicorp/nomad/issues/20173)]\n* deps: Updated `docker` dependency to 26.0.1 [[GH-20389](https://github.com/hashicorp/nomad/issues/20389)]\n* driver/rawexec: Allow specifying custom cgroups [[GH-20481](https://github.com/hashicorp/nomad/issues/20481)]\n* func: Allow custom paths to be added the the getter landlock [[GH-20315](https://github.com/hashicorp/nomad/issues/20315)]\n* jobspec: Add a schedule{} block for time based task execution (Enterprise) [[GH-22201](https://github.com/hashicorp/nomad/issues/22201)]\n* metrics: Added tracking of enqueue and dequeue times of evaluations to the broker [[GH-20329](https://github.com/hashicorp/nomad/issues/20329)]\n* networking: Inject constraints on CNI plugins when using bridge networking [[GH-15473](https://github.com/hashicorp/nomad/issues/15473)]\n* scheduler: Added a new configuration to avoid rescheduling allocations if a nodes misses one or more heartbits [[GH-19101](https://github.com/hashicorp/nomad/issues/19101)]\n* server: Add new options for reconcilation in case of disconnected nodes [[GH-20029](https://github.com/hashicorp/nomad/issues/20029)]\n* ui: Added a UI for creating, editing and deleting Sentinel Policies [[GH-20483](https://github.com/hashicorp/nomad/issues/20483)]\n* ui: Added a copy button on Action output [[GH-19496](https://github.com/hashicorp/nomad/issues/19496)]\n* ui: Added a new UI block to job spec in order to provide description and links in the Web UI [[GH-18292](https://github.com/hashicorp/nomad/issues/18292)]\n* ui: Added token.name information to the top nav for ease of operator debugging [[GH-20539](https://github.com/hashicorp/nomad/issues/20539)]\n* ui: Improve error and warning messages for invalid variable and job template paths/names [[GH-19989](https://github.com/hashicorp/nomad/issues/19989)]\n* ui: Overhaul of the Jobs Index list page, with live updates, more informative statuses, filter expressions, and pagination [[GH-20452](https://github.com/hashicorp/nomad/issues/20452)]\n* ui: Prompt a user before they close an exec window to prevent accidental close-browser-tab shortcuts that overlap with terminal ones [[GH-19985](https://github.com/hashicorp/nomad/issues/19985)]\n* ui: Replaced single-line variable value fields with multi-line textarea blocks [[GH-19544](https://github.com/hashicorp/nomad/issues/19544)]\n* ui: Updated the style of components in the Variables web ui [[GH-19544](https://github.com/hashicorp/nomad/issues/19544)]\n* ui: change the State filter on clients page to split out eligibility and drain status [[GH-18607](https://github.com/hashicorp/nomad/issues/18607)]\n\nBUG FIXES:\n\n* cli: Fix handling of scaling jobs which don't generate evals [[GH-20479](https://github.com/hashicorp/nomad/issues/20479)]\n* client: Fix unallocated CPU metric calculation when client reserved CPU is set [[GH-20543](https://github.com/hashicorp/nomad/issues/20543)]\n* client: terminate old exec task processes before starting new ones, to avoid accidentally leaving running processes in case of an error [[GH-20500](https://github.com/hashicorp/nomad/issues/20500)]\n* config: Fixed a panic triggered by registering a job specifying a Vault cluster that has not been configured within the server [[GH-22227](https://github.com/hashicorp/nomad/issues/22227)]\n* core: Fix multiple incorrect type conversion for potential overflows [[GH-20553](https://github.com/hashicorp/nomad/issues/20553)]\n* csi: Fixed a bug where concurrent mount and unmount operations could unstage volumes needed by another allocation [[GH-20550](https://github.com/hashicorp/nomad/issues/20550)]\n* csi: Fixed a bug where plugins would not be deleted on GC if their job updated the plugin ID [[GH-20555](https://github.com/hashicorp/nomad/issues/20555)]\n* csi: Fixed a bug where volumes in different namespaces but the same ID would fail to stage on the same client [[GH-20532](https://github.com/hashicorp/nomad/issues/20532)]\n* job endpoint: fix implicit constraint mutation for task-level services [[GH-22229](https://github.com/hashicorp/nomad/issues/22229)]\n* quota (Enterprise): Fixed a bug where quota usage would not be freed if a job was purged\n* services: Added retry to Nomad service deregistration RPCs during alloc stop [[GH-20596](https://github.com/hashicorp/nomad/issues/20596)]\n* services: Fixed bug where Nomad services might not be deregistered when nodes are marked down or allocations are terminal [[GH-20590](https://github.com/hashicorp/nomad/issues/20590)]\n* structs: Fix job canonicalization for array type fields [[GH-20522](https://github.com/hashicorp/nomad/issues/20522)]\n* ui: Fix a bug where the UI would prompt a user to promote a deployment with unplaced canaries [[GH-20408](https://github.com/hashicorp/nomad/issues/20408)]\n* ui: Fixed an issue where keynav would not trigger evaluation sidebar expand [[GH-20047](https://github.com/hashicorp/nomad/issues/20047)]\n* ui: Show the namespace in the web UI exec command hint [[GH-20218](https://github.com/hashicorp/nomad/issues/20218)]\n* windows: Fixed a regression where scanning task processes was inefficient [[GH-20619](https://github.com/hashicorp/nomad/issues/20619)]\n\n## Unsupported Versions\n\nVersions of Nomad before 1.8.0 are no longer supported. See [CHANGELOG-unsupported.md](./CHANGELOG-unsupported.md) for their changelogs.\n```\n\n----------------------------------------\n\nTITLE: Job Version Tag Creation Response in Nomad API\nDESCRIPTION: This JSON response is returned after successfully creating a job version tag. It includes details such as the tag name, description, creation time, and various indexes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Name\":\"golden-version\",\n  \"Description\":\"The version we can roll back to.\",\n  \"TaggedTime\":1728325495829793000,\n  \"Index\":361,\n  \"LastContact\":0,\n  \"KnownLeader\":false,\n  \"NextToken\":\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example of bcrypt Function Usage in Shell\nDESCRIPTION: This example shows how to use the bcrypt function in a shell session. It demonstrates hashing the string 'hello world' using the default cost value.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/crypto/bcrypt.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> bcrypt(\"hello world\")\n$2a$10$D5grTTzcsqyvAeIAnY/mYOIqliCoG7eAMX0/oFcuD.iErkksEbcAa\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Autoscaler Version Command\nDESCRIPTION: Command to display the version information of the Nomad Autoscaler binary. Shows the version number and commit SHA of the build.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/cli.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad-autoscaler version\n```\n\n----------------------------------------\n\nTITLE: Simple String Length Example\nDESCRIPTION: Shows a basic example of using the strlen function to count the characters in the word \"hello\", which returns 5.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/strlen.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> length(\"hello\")\n5\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Client with Device Plugin\nDESCRIPTION: Example configuration for the Nomad client agent including the plugin configuration block with directory scanning options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/plugins/device/cmd/example/README.md#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nclient {\n  enabled = true\n}\n\nplugin_dir = \"/opt/nomad/plugins\"\n\nplugin \"nomad-device-example\" {\n  config {\n    dir            = \"/tmp/nomad-device\"\n    list_period    = \"1s\"\n    unhealthy_perm = \"-rwxrwxrwx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gossip Keyring Command Syntax\nDESCRIPTION: Basic command syntax for installing a new gossip encryption key in Nomad. The command requires a key parameter and supports additional options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/gossip/keyring-install.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator gossip keyring install [options] <key>\n```\n\n----------------------------------------\n\nTITLE: Enabling drain mode on the local node\nDESCRIPTION: This example shows how to enable drain mode on the local node using the '-self' flag.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/drain.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node drain -enable -self\n...\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Domain CA Certificate Information in Nomad\nDESCRIPTION: Example demonstrating how to display information for a CA certificate with a custom domain, showing all certificate details including permitted DNS domains.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/tls/ca-info.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad tls ca info foo.com-agent-ca.pem\nSerial Number          189027561135335847320487296530900061259\nIssuer CN              Nomad Agent CA 189027561135335847320487296530900061259\nCommon Name            CN=Nomad Agent CA 189027561135335847320487296530900061259,O=HashiCorp Inc.,POSTALCODE=94105,STREET=101 Second Street,L=San Francisco,ST=CA,C=US\nExpiry Date            2027-11-13 21:38:15 +0000 UTC\nPermitted DNS Domains  [foo.com localhost]\n```\n\n----------------------------------------\n\nTITLE: Querying Most Recent Job Deployment using curl in Nomad API\nDESCRIPTION: Sample request for retrieving the most recent deployment for a specific job. Uses the GET method on the /v1/job/:job_id/deployment endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_19\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/job/my-job/deployment\n```\n\n----------------------------------------\n\nTITLE: Sample Changelog with Multiple Entries\nDESCRIPTION: Example of how to include multiple changelog entries in a single PR, with separate release-note blocks for each change.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/CHANGELOG.md#2025-04-19_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\ndriver/docker: Fix broken code\n```\n```release-note:bug\nclient: Fix broken code\n```\n```release-note:bug\ncli: Fix broken code\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring policy_eval Block in Nomad Autoscaler\nDESCRIPTION: An example of how to configure the policy_eval block in Nomad Autoscaler. This configuration sets the acknowledgment timeout, delivery limit, and worker counts for different scaling strategies.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/agent/policy_eval.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\npolicy_eval {\n  ack_timeout    = \"10m\"\n  delivery_limit = 4\n\n  workers = {\n    cluster    = 2\n    horizontal = 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Node Flapping Evaluation Cascade in Mermaid\nDESCRIPTION: Mermaid flowchart demonstrating the large number of evaluations created when nodes with system jobs are flapping (going down and coming back up), showing the potential for evaluation explosion in large clusters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/architecture-eval-triggers.md#2025-04-19_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n\n    %% style classes\n    classDef eval fill:#d5f6ea,stroke-width:4px,stroke:#1d9467\n    classDef other fill:#d5f6ea,stroke:#1d9467\n\n    eventAdown((Node A\\nmisses\\nheartbeat))\n    eventAup((Node A\\nheartbeats))\n    eventBdown((Node B\\nmisses\\nheartbeat))\n    eventBup((Node B\\nheartbeats))\n\n    eventAdown --> eventAup\n    eventBdown --> eventBup\n\n    A01down([job 1 node A\\nnode-update])\n    A02down([job 2 node A\\nnode-update])\n    A03down([job 3 node A\\nnode-update])\n    A04down([job 4 node A\\nnode-update])\n    A05down([job 5 node A\\nnode-update])\n\n    B01down([job 1 node B\\nnode-update])\n    B02down([job 2 node B\\nnode-update])\n    B03down([job 3 node B\\nnode-update])\n    B04down([job 4 node B\\nnode-update])\n    B05down([job 5 node B\\nnode-update])\n\n    A01up([job 1 node A\\nnode-update])\n    A02up([job 2 node A\\nnode-update])\n    A03up([job 3 node A\\nnode-update])\n    A04up([job 4 node A\\nnode-update])\n    A05up([job 5 node A\\nnode-update])\n\n    B01up([job 1 node B\\nnode-update])\n    B02up([job 2 node B\\nnode-update])\n    B03up([job 3 node B\\nnode-update])\n    B04up([job 4 node B\\nnode-update])\n    B05up([job 5 node B\\nnode-update])\n\n    eventAdown:::other --> A01down:::eval\n    eventAdown:::other --> A02down:::eval\n    eventAdown:::other --> A03down:::eval\n    eventAdown:::other --> A04down:::eval\n    eventAdown:::other --> A05down:::eval\n\n    eventAup:::other --> A01up:::eval\n    eventAup:::other --> A02up:::eval\n    eventAup:::other --> A03up:::eval\n    eventAup:::other --> A04up:::eval\n    eventAup:::other --> A05up:::eval\n\n    eventBdown:::other --> B01down:::eval\n    eventBdown:::other --> B02down:::eval\n    eventBdown:::other --> B03down:::eval\n    eventBdown:::other --> B04down:::eval\n    eventBdown:::other --> B05down:::eval\n\n    eventBup:::other --> B01up:::eval\n    eventBup:::other --> B02up:::eval\n    eventBup:::other --> B03up:::eval\n    eventBup:::other --> B04up:::eval\n    eventBup:::other --> B05up:::eval\n```\n\n----------------------------------------\n\nTITLE: Updating Nomad ACL Binding Rule Example\nDESCRIPTION: Example showing how to update an ACL binding rule's description, demonstrating the command usage and output format including the rule's updated properties.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/binding-rule/update.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl binding-rule update -description \"new description\" dc0e494d-0878-4e56-37d4-482e371e5bdb\nID           = dc0e494d-0878-4e56-37d4-482e371e5bdb\nDescription  = new description\nAuth Method  = auth0\nSelector     = \"engineering in list.roles\"\nBind Type    = role\nBind Name    = engineering-ro\nCreate Time  = 2022-12-20 11:17:40.483196 +0000 UTC\nModify Time  = 2022-12-20 11:23:30.355439 +0000 UTC\nCreate Index = 17\nModify Index = 25\n```\n\n----------------------------------------\n\nTITLE: Adding HashiCorp GPG Key on Ubuntu/Debian\nDESCRIPTION: This command downloads and adds the HashiCorp GPG key to the system's keyring for package verification on Ubuntu or Debian systems.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/virt/install.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n```\n\n----------------------------------------\n\nTITLE: Reading an ACL Policy with curl in Nomad API\nDESCRIPTION: This snippet demonstrates how to retrieve details of a specific ACL policy by name. The GET request returns the policy that has been replicated to the region, which may lag behind the authoritative region.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/policies.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/acl/policy/foo\n```\n\n----------------------------------------\n\nTITLE: Running Packer Builds for Nomad E2E Testing\nDESCRIPTION: Commands for running Packer builds to create AMIs for Nomad's end-to-end test infrastructure. Shows how to check the Packer version and run builds for Ubuntu and Windows platforms.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/terraform/packer/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ packer --version\n1.6.4\n\n# build Ubuntu Jammy AMI\n$ ./build ubuntu-jammy-amd64\n\n# build Windows AMI\n$ ./build windows-2016-amd64\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Nomad Federation\nDESCRIPTION: Main documentation content explaining Nomad federation concepts, including page metadata, headings, and description of features like cross-region forwarding and replication.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/architecture/federation.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: docs\npage_title: Federation\ndescription: |-\n  Nomad federation enables multiple Nomad clusters in different regions to work together seamlessly. Learn about cross-region request forwarding, replication, and Nomad Enterprise's multi-region job deployments.\n---\n\n# Federation\n\nThis page provides conceptual information about the Nomad federation feature.\nLearn about cross-region request forwarding, replication, and Nomad Enterprise's\nmulti-region job deployments.\n\nNomad federation is a multi-cluster orchestration and management feature that\nenables multiple Nomad clusters running in different regions to work together\nseamlessly. By federating clusters, you benefit from improved scalability, fault\ntolerance, and centralized management of workloads across various data centers\nor geographical locations.\n```\n\n----------------------------------------\n\nTITLE: Configuring Statsite Address in HCL\nDESCRIPTION: An example of how to specify the address of a Statsite server for forwarding metrics data in the telemetry block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/telemetry.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntelemetry {\n  statsite_address = \"statsite.company.local:8125\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure resource group\nDESCRIPTION: Command to create an Azure resource group named 'packer' in the East US region. This resource group will be used to store the Packer-built machine images.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/azure/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ az group create --name packer --location \"East US\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Enterprise Alert Component\nDESCRIPTION: Examples of using the EnterpriseAlert component in both standalone and inline formats with optional custom content.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/README.md#2025-04-19_snippet_6\n\nLANGUAGE: mdx\nCODE:\n```\n# Page Headline\n\n<EnterpriseAlert />\n\nContinued markdown content...\n```\n\nLANGUAGE: mdx\nCODE:\n```\n# Page Headline\n\n<EnterpriseAlert>\n  My custom text here, and <a href=\"#\">a link</a>!\n</EnterpriseAlert>\n\nContinued markdown content...\n```\n\nLANGUAGE: mdx\nCODE:\n```\n### Some Enterprise Feature <EnterpriseAlert inline />\n\nContinued markdown content...\n```\n\n----------------------------------------\n\nTITLE: Using nomad operator raft transfer-leadership Command in Plaintext\nDESCRIPTION: This snippet shows the basic usage syntax for the 'nomad operator raft transfer-leadership' command. It is used to transfer leadership to a specific Nomad server in the cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/raft/transfer-leadership.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator raft transfer-leadership [options]\n```\n\n----------------------------------------\n\nTITLE: Initializing and Unsealing Vault Cluster\nDESCRIPTION: Commands to initialize and unseal the Vault cluster. This includes creating a single unseal key for convenience and exporting the initial root token. Note that for production, multiple key shares are recommended.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ vault operator init -key-shares=1 -key-threshold=1\n$ vault operator unseal\n$ export VAULT_TOKEN=[INITIAL_ROOT_TOKEN]\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Output for Singularity Runtime\nDESCRIPTION: Configuration option to enable extra debug output in the Singularity runtime logging for more detailed troubleshooting information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/singularity.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  debug = \"false\"\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Nomad Web UI Locally in Development Mode\nDESCRIPTION: Commands for serving the Nomad Web UI locally in development mode. It includes options for both local and Vagrant environments, with and without proxying to a production Nomad cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/ui/DEVELOPMENT_MODE.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nember serve\n```\n\nLANGUAGE: bash\nCODE:\n```\nember serve --watch polling --port 4201\n```\n\nLANGUAGE: bash\nCODE:\n```\nember serve --proxy https://demo.example.com\n```\n\nLANGUAGE: bash\nCODE:\n```\nember serve --watch polling --port 4201 --proxy https://demo.example.com\n```\n\n----------------------------------------\n\nTITLE: Checking Administrator Privileges in Powershell for Windows Packer Build\nDESCRIPTION: This snippet checks if the script is running with administrator privileges. It's a safety check to ensure that certain operations that require elevated permissions can be performed. If not running as admin, it throws an error and exits.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/terraform/packer/windows-2016-amd64/README.md#2025-04-19_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$RunningAsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] \"Administrator\")\nif (!$RunningAsAdmin) {\n  Write-Error \"Must be executed in Administrator level shell.\"\n  exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Substr Example with Unicode Characters\nDESCRIPTION: Example demonstrating how substr handles Unicode characters, showing that offset and length are counted in Unicode characters rather than bytes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/substr.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n> substr(\"🤔🤷\", 0, 1)\n🤔\n```\n\n----------------------------------------\n\nTITLE: Setting Up OverlayFS for Singularity Containers\nDESCRIPTION: Configuration for enabling an overlayFS image for persistent data storage or as a read-only layer of the container. Multiple overlay paths can be specified.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/singularity.mdx#2025-04-19_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  overlay = [ \"host/path/to/overlay\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Operator Root Keyring Rotate Command\nDESCRIPTION: This snippet shows the basic usage syntax for the 'nomad operator root keyring rotate' command. It demonstrates how to use the command with optional parameters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/root/keyring-rotate.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator root keyring rotate [options]\n```\n\n----------------------------------------\n\nTITLE: Sample Changelog Improvement Entry with CLI Example\nDESCRIPTION: Example of how to format an incremental improvement changelog entry that doesn't rise to the feature level.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/CHANGELOG.md#2025-04-19_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\ncli: Added `-monitor` flag to `deployment status` command and automatically monitor deployments from `job run` command.\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Job Validate Command Syntax\nDESCRIPTION: Shows the basic command syntax for validating a Nomad job specification file. The command requires a single argument specifying the path to the job specification file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/validate.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad job validate <file>\n```\n\n----------------------------------------\n\nTITLE: Deleting GCP Project\nDESCRIPTION: This command completely deletes the GCP project that was created for the Nomad cluster deployment, removing all associated resources and billing.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_25\n\nLANGUAGE: console\nCODE:\n```\ngcloud projects delete $GOOGLE_PROJECT\n```\n\n----------------------------------------\n\nTITLE: Referencing Go Version Update Script (Markdown)\nDESCRIPTION: This snippet provides a link to the shell script used for updating the Go version across all build tools in the Nomad project. It's written in Markdown format.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/golang.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThe\n[`update_golang_version.sh`](https://github.com/hashicorp/nomad/blob/main/scripts/update_golang_version.sh)\nscript is used to update the Go version for all build tools.\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform\nDESCRIPTION: This command initializes Terraform in the current directory, downloading necessary providers and modules.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_19\n\nLANGUAGE: console\nCODE:\n```\nterraform init\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Layout Definition\nDESCRIPTION: Frontmatter configuration for the documentation page defining the layout, title and description.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/release-notes/nomad/upcoming.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: docs\npage_title: Upcoming\ndescription: >\n  Review upcoming HashiCorp Nomad release changes.\n---\n```\n\n----------------------------------------\n\nTITLE: Delete Host Volume Request\nDESCRIPTION: Shell command to delete a host volume using its ID via the Nomad API.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_27\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    https://localhost:4646/v1/volume/host/ba97ef42-cc68-11ef-a2e7-ffddaecbdb89\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Operator Raft Remove-Peer Command\nDESCRIPTION: Command syntax for removing a Nomad server from the Raft configuration. This command requires a management token if ACLs are enabled and accepts options including peer-id for specifying the server to remove.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/raft/remove-peer.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator raft remove-peer [options]\n```\n\n----------------------------------------\n\nTITLE: Docker Volume Mount Configuration in Nomad 0.11.7 (HCL)\nDESCRIPTION: Example of a Docker volume mount configuration that will fail unless 'docker.volumes.enabled = true' is set. This showcases the security fix for Docker volume mounts in Nomad 0.11.7.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/upgrade/upgrade-specific.mdx#2025-04-19_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\nmounts = [\n  {\n    type     = \"volume\"\n    target   = \"/path/in/container\"\n    source   = \"docker_volume\"\n    volume_options = {\n      driver_config = {\n        name = \"local\"\n        options = [\n          {\n            device = \"/\"\n            o      = \"ro,bind\"\n            type   = \"ext4\"\n          }\n        ]\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Listing Job Deployments Example\nDESCRIPTION: Example showing how to list deployments for a job named 'example', displaying deployment ID, job ID, version, status and description.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/deployments.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job deployments example\nID        Job ID   Job Version  Status      Description\n0b23b149  example  1            running     Deployment is running but requires manual promotion\n06ca68a2  example  0            successful  Deployment completed successfully\n```\n\n----------------------------------------\n\nTITLE: Setting Azure environment variables for authentication\nDESCRIPTION: Commands to export the subscription ID and tenant ID as environment variables for use with Packer and Terraform. These values come from the login output.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/azure/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport ARM_SUBSCRIPTION_ID=SUBSCRIPTION_ID\nexport ARM_TENANT_ID=TENANT_ID\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Forcing New Periodic Instance in JSON\nDESCRIPTION: Shows a sample JSON response after forcing a new instance of a periodic job. Includes the evaluation ID and creation index.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EvalCreateIndex\": 7,\n  \"EvalID\": \"57983ddd-7fcf-3e3a-fd24-f699ccfb36f4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Consul Service Identity Configuration\nDESCRIPTION: Example of configuring Consul service identity with workload identity integration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/consul.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n  group \"web\" {\n    service {\n      port = \"www\"\n      identity {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Complex Nested Structures to YAML in Nomad\nDESCRIPTION: This example illustrates yamlencode's capability to handle deeply nested structures, including arrays containing objects. It shows how the function maintains readability in complex data scenarios.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/encoding/yamlencode.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> yamlencode({\"foo\":[1, {\"a\":\"b\",\"c\":\"d\"}, 3], \"bar\": \"baz\"})\n\"bar\": \"baz\"\n\"foo\":\n- 1\n- \"a\": \"b\"\n  \"c\": \"d\"\n- 3\n```\n\n----------------------------------------\n\nTITLE: CLI to RPC Code Flow Pattern in Nomad\nDESCRIPTION: Illustrates the standard code flow pattern for commands in Nomad, showing how requests flow from CLI through API Client and HTTP API to RPC.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/checklist-command.md#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCLI (command/) -> API Client (api/) -> HTTP API (command/agent) -> RPC (nomad/)\n```\n\n----------------------------------------\n\nTITLE: Stat File API Response\nDESCRIPTION: Example response showing detailed file metadata for a specific file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Name\": \"redis-syslog-collector.out\",\n  \"IsDir\": false,\n  \"Size\": 96,\n  \"FileMode\": \"-rw-rw-r--\",\n  \"ModTime\": \"2016-03-15T15:40:56.822238153-07:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Range Function Usage in Shell Session\nDESCRIPTION: Examples of using the range function with various arguments, showing different sequences generated including positive and negative steps, and decimal step values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/range.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> range(3)\n[\n  0,\n  1,\n  2,\n]\n\n> range(1, 4)\n[\n  1,\n  2,\n  3,\n]\n\n> range(1, 8, 2)\n[\n  1,\n  3,\n  5,\n  7,\n]\n\n> range(1, 4, 0.5)\n[\n  1,\n  1.5,\n  2,\n  2.5,\n  3,\n  3.5,\n]\n\n> range(4, 1)\n[\n  4,\n  3,\n  2,\n]\n\n> range(10, 5, -2)\n[\n  10,\n  8,\n  6,\n]\n```\n\n----------------------------------------\n\nTITLE: Agent State Response\nDESCRIPTION: Sample JSON response showing comprehensive agent configuration and state information including addresses, client/server settings, and runtime statistics.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"Addresses\": {\n      \"HTTP\": \"127.0.0.1\",\n      \"RPC\": \"127.0.0.1\",\n      \"Serf\": \"127.0.0.1\"\n    },\n    \"AdvertiseAddrs\": {\n      \"HTTP\": \"127.0.0.1:4646\",\n      \"RPC\": \"127.0.0.1:4647\",\n      \"Serf\": \"127.0.0.1:4648\"\n    },\n    \"BindAddr\": \"127.0.0.1\",\n    \"Client\": {\n      \"AllocDir\": \"\",\n      \"ChrootEnv\": {},\n      \"ClientMaxPort\": 14512,\n      \"ClientMinPort\": 14000,\n      \"DisableRemoteExec\": false,\n      \"Enabled\": true,\n      \"GCDiskUsageThreshold\": 99,\n      \"GCInodeUsageThreshold\": 99,\n      \"GCInterval\": 600000000000,\n      \"MaxKillTimeout\": \"30s\",\n      \"Meta\": {},\n      \"NetworkInterface\": \"lo0\",\n      \"NetworkSpeed\": 0,\n      \"NodeClass\": \"\",\n      \"Options\": {\n        \"driver.docker.volumes\": \"true\"\n      },\n      \"Reserved\": {\n        \"CPU\": 0,\n        \"DiskMB\": 0,\n        \"MemoryMB\": 0,\n        \"ParsedReservedPorts\": null,\n        \"ReservedPorts\": \"\"\n      },\n      \"Servers\": null,\n      \"StateDir\": \"\"\n    },\n    \"Consul\": {\n      \"Addr\": \"\",\n      \"Auth\": \"\",\n      \"AutoAdvertise\": true,\n      \"CAFile\": \"\",\n      \"CertFile\": \"\",\n      \"ChecksUseAdvertise\": false,\n      \"ClientAutoJoin\": true,\n      \"ClientServiceName\": \"nomad-client\",\n      \"EnableSSL\": false,\n      \"KeyFile\": \"\",\n      \"ServerAutoJoin\": true,\n      \"ServerServiceName\": \"nomad\",\n      \"Timeout\": 5000000000,\n      \"Token\": \"\",\n      \"VerifySSL\": false\n    },\n    \"DataDir\": \"\",\n    \"Datacenter\": \"dc1\",\n    \"DevMode\": true,\n    \"DisableAnonymousSignature\": true,\n    \"DisableUpdateCheck\": false,\n    \"EnableDebug\": true,\n    \"EnableSyslog\": false,\n    \"Files\": null,\n    \"HTTPAPIResponseHeaders\": {},\n    \"LeaveOnInt\": false,\n    \"LeaveOnTerm\": false,\n    \"LogLevel\": \"DEBUG\",\n    \"NodeName\": \"\",\n    \"Ports\": {\n      \"HTTP\": 4646,\n      \"RPC\": 4647,\n      \"Serf\": 4648\n    },\n    \"Region\": \"global\",\n    \"Revision\": \"f551dcb83e3ac144c9dbb90583b6e82d234662e9\",\n    \"Server\": {\n      \"BootstrapExpect\": 0,\n      \"DataDir\": \"\",\n      \"Enabled\": true,\n      \"EnabledSchedulers\": null,\n      \"HeartbeatGrace\": \"\",\n      \"NodeGCThreshold\": \"\",\n      \"NumSchedulers\": 0,\n      \"ProtocolVersion\": 0,\n      \"RejoinAfterLeave\": false,\n      \"RetryInterval\": \"30s\",\n      \"RetryJoin\": [],\n      \"RetryMaxAttempts\": 0,\n      \"StartJoin\": []\n    },\n    \"SyslogFacility\": \"LOCAL0\",\n    \"TLSConfig\": {\n      \"CAFile\": \"\",\n      \"CertFile\": \"\",\n      \"EnableHTTP\": false,\n      \"EnableRPC\": false,\n      \"KeyFile\": \"\",\n      \"VerifyServerHostname\": false\n    },\n    \"Telemetry\": {\n      \"CirconusAPIApp\": \"\",\n      \"CirconusAPIToken\": \"\",\n      \"CirconusAPIURL\": \"\",\n      \"CirconusBrokerID\": \"\",\n      \"CirconusBrokerSelectTag\": \"\",\n      \"CirconusCheckDisplayName\": \"\",\n      \"CirconusCheckForceMetricActivation\": \"\",\n      \"CirconusCheckID\": \"\",\n      \"CirconusCheckInstanceID\": \"\",\n      \"CirconusCheckSearchTag\": \"\",\n      \"CirconusCheckSubmissionURL\": \"\",\n      \"CirconusCheckTags\": \"\",\n      \"CirconusSubmissionInterval\": \"\",\n      \"CollectionInterval\": \"1s\",\n      \"DataDogAddr\": \"\",\n      \"DataDogTags\": [],\n      \"DisableHostname\": false,\n      \"PublishAllocationMetrics\": false,\n      \"PublishNodeMetrics\": false,\n      \"StatsdAddr\": \"\",\n      \"StatsiteAddr\": \"\",\n      \"UseNodeName\": false\n    },\n    \"Vault\": {\n      \"Addr\": \"https://vault.service.consul:8200\",\n      \"AllowUnauthenticated\": true,\n      \"ConnectionRetryIntv\": 30000000000,\n      \"Enabled\": null,\n      \"Role\": \"\",\n      \"TLSCaFile\": \"\",\n      \"TLSCaPath\": \"\",\n      \"TLSCertFile\": \"\",\n      \"TLSKeyFile\": \"\",\n      \"TLSServerName\": \"\",\n      \"TLSSkipVerify\": null,\n      \"TaskTokenTTL\": \"\",\n      \"Token\": \"root\"\n    },\n    \"Version\": \"0.5.5\",\n    \"VersionPrerelease\": \"dev\"\n  },\n  \"member\": {\n    \"Addr\": \"127.0.0.1\",\n    \"DelegateCur\": 4,\n    \"DelegateMax\": 4,\n    \"DelegateMin\": 2,\n    \"Name\": \"bacon-mac.global\",\n    \"Port\": 4648,\n    \"ProtocolCur\": 2,\n    \"ProtocolMax\": 5,\n    \"ProtocolMin\": 1,\n    \"Status\": \"alive\",\n    \"Tags\": {\n      \"role\": \"nomad\",\n      \"region\": \"global\",\n      \"dc\": \"dc1\",\n      \"vsn\": \"1\",\n      \"mvn\": \"1\",\n      \"build\": \"0.5.5dev\",\n      \"port\": \"4647\",\n      \"bootstrap\": \"1\"\n    }\n  },\n  \"stats\": {\n    \"runtime\": {\n      \"cpu_count\": \"8\",\n      \"kernel.name\": \"darwin\",\n      \"arch\": \"amd64\",\n      \"version\": \"go1.8\",\n      \"max_procs\": \"7\",\n      \"goroutines\": \"79\"\n    },\n    \"nomad\": {\n      \"server\": \"true\",\n      \"leader\": \"true\",\n      \"leader_addr\": \"127.0.0.1:4647\",\n      \"bootstrap\": \"false\",\n      \"known_regions\": \"1\"\n    },\n    \"raft\": {\n      \"num_peers\": \"0\",\n      \"fsm_pending\": \"0\",\n      \"last_snapshot_index\": \"0\",\n      \"last_log_term\": \"2\",\n      \"commit_index\": \"144\",\n      \"term\": \"2\",\n      \"last_log_index\": \"144\",\n      \"snapshot_version_max\": \"1\",\n      \"latest_configuration_index\": \"1\",\n      \"latest_configuration\": \"[{Suffrage:Voter ID:127.0.0.1:4647 Address:127.0.0.1:4647}]\",\n      \"last_contact\": \"never\",\n      \"applied_index\": \"144\",\n      \"state\": \"Leader\",\n      \"last_snapshot_term\": \"0\"\n    },\n    \"client\": {\n      \"heartbeat_ttl\": \"17.79568937s\",\n      \"node_id\": \"fb2170a8-257d-3c64-b14d-bc06cc94e34c\",\n      \"known_servers\": \"127.0.0.1:4647\",\n      \"num_allocations\": \"0\",\n      \"last_heartbeat\": \"10.107423052s\"\n    },\n    \"serf\": {\n      \"event_time\": \"1\",\n      \"event_queue\": \"0\",\n      \"encrypted\": \"false\",\n      \"member_time\": \"1\",\n      \"query_time\": \"1\",\n      \"intent_queue\": \"0\",\n      \"query_queue\": \"0\",\n      \"members\": \"1\",\n      \"failed\": \"0\",\n      \"left\": \"0\",\n      \"health_score\": \"0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Complete Changelog for Release\nDESCRIPTION: Command to generate the complete changelog for a release using the make system.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/CHANGELOG.md#2025-04-19_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmake changelog\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Cloud KMS Keyring in Nomad Configuration\nDESCRIPTION: This snippet demonstrates how to configure a GCP Cloud KMS keyring in the Nomad configuration file. It includes setting required parameters like credentials path, GCP project, region, key ring, and crypto key.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/keyring/gcpckms.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nkeyring \"gcpckms\" {\n  active = true\n  name   = \"example\"\n\n  credentials = \"/etc/nomad.d/nomad-user-creds.json\"\n  project     = \"nomad-project\"\n  region      = \"global\"\n  key_ring    = \"nomad-keyring\"\n  crypto_key  = \"nomad-key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using nomad alloc fs with None Isolation\nDESCRIPTION: Shell session demonstrating how to use the 'nomad alloc fs' command to inspect a task with 'none' isolation, showing the minimal directory structure created for raw_exec tasks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/filesystem.mdx#2025-04-19_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc fs 87ec7d12 task3\nMode         Size     Modified Time         Name\n-rw-r--r--   140 B    2020-10-27T19:15:33Z  executor.out\ndrwxrwxrwx   4.0 KiB  2020-10-27T19:15:33Z  local/\ndrwxrwxrwx   60 B     2020-10-27T19:15:33Z  private/\ndrwxrwxrwx   60 B     2020-10-27T19:15:33Z  secrets/\ndtrwxrwxrwx  4.0 KiB  2020-10-27T19:15:33Z  tmp/\n```\n\n----------------------------------------\n\nTITLE: Starting the Nomad Windows Service using sc.exe\nDESCRIPTION: This command uses sc.exe to start the previously registered Nomad service. It displays the service status information after starting.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/windows-service.mdx#2025-04-19_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsc.exe start \"Nomad\"\n```\n\n----------------------------------------\n\nTITLE: Viewing status of a quota specification\nDESCRIPTION: This example demonstrates how to view the status of a quota specification named 'default-quota'. It displays the name, description, limits, and usage across different regions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/quota/status.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad quota status default-quota\nName        = default-quota\nDescription = Limit the shared default namespace\nLimits      = 1\n\nQuota Limits\nRegion  CPU Usage  Core Usage  Memory Usage  Memory Max Usage  Variables Usage\nglobal  0 / 1000   0 / 1       0 / 1000      0 / inf           0 / inf\n```\n\n----------------------------------------\n\nTITLE: Configuring robots.txt to Block All Web Crawlers\nDESCRIPTION: This robots.txt configuration uses the wildcard pattern to target all user agents (web crawlers) and instructs them not to access any content on the website with the Disallow directive.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/ui/public/robots.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# http://www.robotstxt.org\nUser-agent: *\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Logging in with OIDC Provider in Nomad\nDESCRIPTION: This example demonstrates how to use the `nomad login` command with an OIDC provider (specifically Auth0). It shows the command execution, the output including the generated ACL token details, and how to set the NOMAD_TOKEN environment variable for subsequent Nomad commands.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/login.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad login -method=auth0\nSuccessfully logged in via OIDC and auth0\n\nAccessor ID  = 68123fee-1e8b-7ecc-5b34-505ecd2dcb80\nSecret ID    = a47ed236-5a51-cadf-2ad0-4cd0fd5bc393\nName         = OIDC-auth0\nType         = client\nGlobal       = false\nCreate Time  = 2023-01-12 14:13:04.863238 +0000 UTC\nExpiry Time  = 2023-01-12 14:23:04.863238 +0000 UTC\nCreate Index = 30\nModify Index = 30\nPolicies     = [node-read]\n\nRoles\nID                                    Name\nac9d4281-2079-aadb-6740-625f4ed156d8  engineering\n\n$ export NOMAD_TOKEN=a47ed236-5a51-cadf-2ad0-4cd0fd5bc393\n$ nomad ...\n```\n\n----------------------------------------\n\nTITLE: Querying Job Evaluations using curl in Nomad API\nDESCRIPTION: Sample request for retrieving a list of evaluations for a specific job. Uses the GET method on the /v1/job/:job_id/evaluations endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/job/my-job/evaluations\n```\n\n----------------------------------------\n\nTITLE: Using the nomad node meta read command\nDESCRIPTION: This snippet shows the basic usage syntax for the 'nomad node meta read' command. It can be used with optional flags to specify the node ID and output format.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/meta/read.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad node meta read [-json] [-node-id ...]\n```\n\n----------------------------------------\n\nTITLE: License Terms in Markdown\nDESCRIPTION: Temporary license declaration that distinguishes between MPL 2.0 licensed text content and proprietary design elements owned by HashiCorp\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/LICENSE.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Proprietary License\n\nThis license is temporary while a more official one is drafted. However,\nthis should make it clear:\n\nThe text contents of this website are MPL 2.0 licensed.\n\nThe design contents of this website are proprietary and may not be reproduced\nor reused in any way other than to run the website locally. The license for\nthe design is owned solely by HashiCorp, Inc.\n```\n\n----------------------------------------\n\nTITLE: Viewing Nomad Worker Error Logs in Authoritative Region Soft Failure\nDESCRIPTION: This log snippet shows the error message that appears in Nomad server logs when the authoritative region has lost leadership but servers are still reachable. The worker fails to dequeue evaluation due to lack of a cluster leader.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/federation/failure.mdx#2025-04-19_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n[ERROR] nomad/worker.go:504: worker: failed to dequeue evaluation: worker_id=68b3abe2-5e16-8f04-be5a-f76aebb0e59e error=\"No cluster leader\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard Heredoc Strings in Block Context\nDESCRIPTION: Example showing how standard heredoc strings work within indented blocks. This format requires the content to be flush with the left margin, which can be awkward in indented contexts.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/expressions.mdx#2025-04-19_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nblock {\n  value = <<EOF\nhello\nworld\nEOF\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Update Strategy with Canary Deployments in HCL\nDESCRIPTION: HCL configuration block for a service job's update strategy that specifies a max parallel value of 1 and enables a single canary deployment.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/architecture-eval-triggers.md#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nupdate {\n  max_parallel = 1\n  canary       = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Artifact Decompression Limits in Nomad Client Configuration\nDESCRIPTION: Sets limits on artifact decompression size and file count in the Nomad client configuration. This was introduced in Nomad 1.5.0 to prevent unbounded decompression of artifacts.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/upgrade/upgrade-specific.mdx#2025-04-19_snippet_5\n\nLANGUAGE: HCL\nCODE:\n```\nclient {\n  artifact {\n    decompression_size_limit = \"100GB\"\n    decompression_file_count_limit = 4096\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Rescheduling in Nomad Job Specification\nDESCRIPTION: Example of how to disable the rescheduling feature in a Nomad job by setting attempts to zero and unlimited to false. This prevents Nomad from automatically rescheduling failed allocations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/reschedule.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    reschedule {\n      attempts  = 0\n      unlimited = false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting ACL Auth Method via Nomad API\nDESCRIPTION: Curl command example showing how to delete an ACL authentication method by making a DELETE request to the Nomad API endpoint. Requires a valid Nomad token for authentication provided via the X-Nomad-Token header.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/auth-methods.mdx#2025-04-19_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    --header \"X-Nomad-Token: <NOMAD_TOKEN_SECRET_ID>\" \\\n    https://localhost:4646/v1/acl/auth-method/example-acl-auth-method\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Namespace Status Command Usage\nDESCRIPTION: Shows the basic command structure for viewing namespace status in Nomad.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/namespace/status.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad namespace status [options] <namespace_name>\n```\n\n----------------------------------------\n\nTITLE: Scheduling a system job\nDESCRIPTION: Example output when scheduling a system job, which doesn't create a deployment.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/run.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job run example.nomad.hcl\n==> 2021-06-14T09:25:08-07:00: Monitoring evaluation \"88a91284\"\n    2021-06-14T09:25:08-07:00: Evaluation triggered by job \"example\"\n    2021-06-14T09:25:08-07:00: Allocation \"03501797\" created: node \"7849439f\", group \"cache\"\n==> 2021-06-14T09:25:09-07:00: Monitoring evaluation \"88a91284\"\n    2021-06-14T09:25:09-07:00: Evaluation status changed: \"pending\" -> \"complete\"\n==> 2021-06-14T09:25:09-07:00: Evaluation \"88a91284\" finished with status \"complete\"\n```\n\n----------------------------------------\n\nTITLE: Create Job Evaluation Payload\nDESCRIPTION: JSON payload for creating a new job evaluation with force reschedule option.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"JobID\": \"my-job\",\n  \"EvalOptions\": {\n    \"ForceReschedule\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lock Renewal Request Payload - JSON\nDESCRIPTION: JSON payload for lock renewal containing path, namespace and lock ID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/variables/locks.mdx#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Path\": \"example/first\",\n  \"Namespace\": \"prod\",\n  \"Lock\": {\n    \"ID\": \"670c7248-e2ef-f982-e4c5-f4437f75f1e4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Changelog Bug Fix Entry\nDESCRIPTION: Example of how to format a bug fix changelog entry, specifying the component that was fixed.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/CHANGELOG.md#2025-04-19_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nclient/fingerprint/java: Fixed a bug where java fingerprinter would not detect some Java distributions\n```\n```\n\n----------------------------------------\n\nTITLE: Validating Single Nomad Configuration File\nDESCRIPTION: Example showing how to validate a single Nomad configuration file using the config validate command.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/config/validate.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad config validate ./nomad.hcl\nConfiguration is valid!\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nomad Enterprise license with stale option\nDESCRIPTION: This example shows the use of the 'nomad license get' command with the '-stale=true' option, which may return potentially outdated license information but with reduced load on the Nomad servers.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/license/get.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad license get -stale=true\n\nProduct        = nomad\nLicense Status = valid\nLicense ID     = 8c647f6c-1e6d-18d8-7f05-92c4d8110b2d\nCustomer ID    = 350356e5-8aec-bdf4-8510-b205079ccad2\nIssued At      = 2021-03-31 14:21:16.969610774 +0000 UTC\nExpires At     = 2022-04-01 00:00:00 +0000 UTC\nTerminates At  = 2022-04-04 00:00:00 +0000 UTC\nDatacenter     = *\nModules:\n        governance-policy\n        multicluster-and-efficiency\nLicensed Features:\n        Automated Upgrades\n        Enhanced Read Scalability\n        Redundancy Zones\n        Namespaces\n        Resource Quotas\n        Audit Logging\n        Sentinel Policies\n        Multiregion Deployments\n        Automated Backups\n        Multi-Vault Namespaces\n```\n\n----------------------------------------\n\nTITLE: Configuring Prefix Filters in Python\nDESCRIPTION: An example of how to set up prefix filters for allowing or blocking metrics in the telemetry configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/telemetry.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n['-nomad.raft', '+nomad.raft.apply', '-nomad.memberlist']\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentinel Import Plugin in HCL\nDESCRIPTION: Demonstrates how to configure a custom Sentinel import plugin in the Nomad agent configuration. The configuration specifies the plugin path and additional arguments to be passed during plugin startup.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/sentinel.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsentinel {\n    import \"custom-plugin\" {\n        path = \"/usr/bin/sentinel-custom-plugin\"\n        args = [\"-verbose\", \"foo\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul for Nomad with IPv6 (Bash)\nDESCRIPTION: This command uses the nomad setup consul command to configure Consul for use with Nomad, specifying the JWKS URL with an IPv6 address.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/ipv6-support.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnomad setup consul -y -jwks-url=\"$NOMAD_ADDR/.well-known/jwks.json\"\n```\n\n----------------------------------------\n\nTITLE: Using Substr Function in HCL\nDESCRIPTION: The basic syntax for the substr function, which takes a string, an offset position, and the length of characters to extract.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/substr.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsubstr(string, offset, length)\n```\n\n----------------------------------------\n\nTITLE: Targeting a specific task in an allocation\nDESCRIPTION: Example of using the -task flag to target a specific task in an allocation with multiple tasks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/exec.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc exec -i -t -task mytask a1827f93 /bin/bash\na1827f93$\n```\n\n----------------------------------------\n\nTITLE: OIDC Configuration JSON for ACL Auth Method\nDESCRIPTION: This JSON configuration example shows the structure and content of a config file used for creating an OIDC-based ACL Auth Method. It includes settings for discovery URL, client ID, client secret, bound audiences, redirect URIs, and claim mappings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/auth-method/create.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"OIDCDiscoveryURL\": \"https://my-corp-app-name.auth0.com/\",\n  \"OIDCClientID\": \"V1RPi2MYptMV1RPi2MYptMV1RPi2MYpt\",\n  \"OIDCClientSecret\": \"example-client-secret\",\n  \"BoundAudiences\": [\n    \"V1RPi2MYptMV1RPi2MYptMV1RPi2MYpt\"\n  ],\n  \"AllowedRedirectURIs\": [\n    \"http://localhost:4646/oidc/callback\"\n  ],\n  \"ClaimMappings\": {\n    \"http://example.com/first_name\": \"first_name\",\n    \"http://example.com/last_name\": \"last_name\"\n  },\n  \"ListClaimMappings\": {\n    \"http://nomad.com/groups\": \"groups\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Keyring List Command Usage\nDESCRIPTION: Shows the basic syntax for using the nomad operator root keyring list command with optional parameters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/root/keyring-list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator root keyring list [options]\n```\n\n----------------------------------------\n\nTITLE: Signal Allocation Response - JSON\nDESCRIPTION: Empty response returned when signaling an allocation\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/allocations.mdx#2025-04-19_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Variable Read Response\nDESCRIPTION: Sample JSON response when reading a variable showing both metadata and decrypted variable contents.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/variables/variables.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Namespace\": \"prod\",\n  \"Path\": \"example/first\",\n  \"CreateIndex\": 1457,\n  \"ModifyIndex\": 1457,\n  \"CreateTime\": 1662061225600373000,\n  \"ModifyTime\": 1662061225600373000,\n  \"Items\": {\n    \"user\": \"me\",\n    \"password\": \"passw0rd1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Sentinel Policy - DELETE Request\nDESCRIPTION: Makes a DELETE request to remove a specific Sentinel policy by name.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/sentinel-policies.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    https://localhost:4646/v1/sentinel/policy/foo\n```\n\n----------------------------------------\n\nTITLE: Using the nomad operator snapshot redact command\nDESCRIPTION: Basic usage syntax for the `nomad operator snapshot redact` command which takes a snapshot file as an argument. This command removes key material from an existing snapshot file when using the AEAD keyring provider.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/snapshot/redact.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator snapshot redact <file>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Job with Idempotency Token\nDESCRIPTION: Examples showing job dispatch with idempotency token for preventing duplicate job instances.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/dispatch.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job dispatch -idempotency-token=prod video-encode video-config.json\nDispatched Job ID = video-encode/dispatch-1485379325-cb38d00d\nEvaluation ID     = 31199841\n\n==> Monitoring evaluation \"31199841\"\n    Evaluation triggered by job \"example/dispatch-1485379325-cb38d00d\"\n    Allocation \"8254b85f\" created: node \"82ff9c50\", group \"cache\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"31199841\" finished with status \"complete\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Evaluations in Nomad API\nDESCRIPTION: Makes a DELETE request to remove specified evaluations. This operation requires the eval broker to be paused first and should only be used in specific outage situations. Requires management ACL.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/evaluations.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    --data @payload.json \\\n    https://localhost:4646/v1/evaluations\n```\n\n----------------------------------------\n\nTITLE: Applying Single Recommendation with Monitoring\nDESCRIPTION: Example showing how to apply a single recommendation and monitor its evaluation progress. Displays the evaluation status and allocation creation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/recommendation/apply.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad recommendation apply a9c041c5-3c04-aa24-bd55-0a80cded4f10\n==> Monitoring evaluation \"529cc88e\"\n    Evaluation triggered by job \"job1\"\n    Evaluation within deployment: \"28a3378f\"\n    Allocation \"2a4df8ca\" created: node \"2f0a2f93\", group \"group1\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"529cc88e\" finished with status \"complete\"\n```\n\n----------------------------------------\n\nTITLE: Listing Job-Specific Scaling Policies - Shell Request\nDESCRIPTION: HTTP GET request to list scaling policies filtered by job ID\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/scaling-policies.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/scaling/policies?job=example\n```\n\n----------------------------------------\n\nTITLE: Sample Nomad Telemetry Output\nDESCRIPTION: Example output of a Nomad telemetry dump showing various runtime metrics including broker stats, memory usage, garbage collection metrics, and operation timings. The output demonstrates different metric types like gauges, counters and timers with their respective values and statistics.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/metrics-reference.mdx#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[2015-09-17 16:59:40 -0700 PDT][G] 'nomad.nomad.broker.total_pending': 0.000\n[2015-09-17 16:59:40 -0700 PDT][G] 'nomad.nomad.plan.queue_depth': 0.000\n[2015-09-17 16:59:40 -0700 PDT][G] 'nomad.runtime.malloc_count': 7568.000\n[2015-09-17 16:59:40 -0700 PDT][G] 'nomad.runtime.total_gc_runs': 8.000\n[2015-09-17 16:59:40 -0700 PDT][G] 'nomad.nomad.broker.total_ready': 0.000\n[2015-09-17 16:59:40 -0700 PDT][G] 'nomad.runtime.num_goroutines': 56.000\n[2015-09-17 16:59:40 -0700 PDT][G] 'nomad.runtime.sys_bytes': 3999992.000\n[2015-09-17 16:59:40 -0700 PDT][G] 'nomad.runtime.heap_objects': 4135.000\n[2015-09-17 16:59:40 -0700 PDT][G] 'nomad.nomad.heartbeat.active': 1.000\n[2015-09-17 16:59:40 -0700 PDT][G] 'nomad.nomad.broker.total_unacked': 0.000\n[2015-09-17 16:59:40 -0700 PDT][G] 'nomad.nomad.broker.total_waiting': 0.000\n[2015-09-17 16:59:40 -0700 PDT][G] 'nomad.runtime.alloc_bytes': 634056.000\n[2015-09-17 16:59:40 -0700 PDT][G] 'nomad.runtime.free_count': 3433.000\n[2015-09-17 16:59:40 -0700 PDT][G] 'nomad.runtime.total_gc_pause_ns': 6572135.000\n[2015-09-17 16:59:40 -0700 PDT][C] 'nomad.memberlist.msg.alive': Count: 1 Sum: 1.000\n[2015-09-17 16:59:40 -0700 PDT][C] 'nomad.serf.member.join': Count: 1 Sum: 1.000\n[2015-09-17 16:59:40 -0700 PDT][C] 'nomad.raft.barrier': Count: 1 Sum: 1.000\n[2015-09-17 16:59:40 -0700 PDT][C] 'nomad.raft.apply': Count: 1 Sum: 1.000\n[2015-09-17 16:59:40 -0700 PDT][C] 'nomad.nomad.rpc.query': Count: 2 Sum: 2.000\n[2015-09-17 16:59:40 -0700 PDT][S] 'nomad.serf.queue.Query': Count: 6 Sum: 0.000\n[2015-09-17 16:59:40 -0700 PDT][S] 'nomad.nomad.fsm.register_node': Count: 1 Sum: 1.296\n[2015-09-17 16:59:40 -0700 PDT][S] 'nomad.serf.queue.Intent': Count: 6 Sum: 0.000\n[2015-09-17 16:59:40 -0700 PDT][S] 'nomad.runtime.gc_pause_ns': Count: 8 Min: 126492.000 Mean: 821516.875 Max: 3126670.000 Stddev: 1139250.294 Sum: 6572135.000\n[2015-09-17 16:59:40 -0700 PDT][S] 'nomad.raft.leader.dispatchLog': Count: 3 Min: 0.007 Mean: 0.018 Max: 0.039 Stddev: 0.018 Sum: 0.054\n[2015-09-17 16:59:40 -0700 PDT][S] 'nomad.nomad.leader.reconcileMember': Count: 1 Sum: 0.007\n[2015-09-17 16:59:40 -0700 PDT][S] 'nomad.nomad.leader.reconcile': Count: 1 Sum: 0.025\n[2015-09-17 16:59:40 -0700 PDT][S] 'nomad.raft.fsm.apply': Count: 1 Sum: 1.306\n[2015-09-17 16:59:40 -0700 PDT][S] 'nomad.nomad.client.get_allocs': Count: 1 Sum: 0.110\n[2015-09-17 16:59:40 -0700 PDT][S] 'nomad.nomad.worker.dequeue_eval': Count: 29 Min: 0.003 Mean: 363.426 Max: 503.377 Stddev: 228.126 Sum: 10539.354\n[2015-09-17 16:59:40 -0700 PDT][S] 'nomad.serf.queue.Event': Count: 6 Sum: 0.000\n[2015-09-17 16:59:40 -0700 PDT][S] 'nomad.raft.commitTime': Count: 3 Min: 0.013 Mean: 0.037 Max: 0.079 Stddev: 0.037 Sum: 0.110\n[2015-09-17 16:59:40 -0700 PDT][S] 'nomad.nomad.leader.barrier': Count: 1 Sum: 0.071\n[2015-09-17 16:59:40 -0700 PDT][S] 'nomad.nomad.client.register': Count: 1 Sum: 1.626\n[2015-09-17 16:59:40 -0700 PDT][S] 'nomad.nomad.eval.dequeue': Count: 21 Min: 500.610 Mean: 501.753 Max: 503.361 Stddev: 1.030 Sum: 10536.813\n[2015-09-17 16:59:40 -0700 PDT][S] 'nomad.memberlist.gossip': Count: 12 Min: 0.009 Mean: 0.017 Max: 0.025 Stddev: 0.005 Sum: 0.204\n```\n\n----------------------------------------\n\nTITLE: Nomad Namespace List Command Syntax\nDESCRIPTION: Basic command syntax for listing Nomad namespaces. The command requires no arguments but supports optional flags for output formatting.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/namespace/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad namespace list [options]\n```\n\n----------------------------------------\n\nTITLE: Transferring Raft Leadership using curl\nDESCRIPTION: This curl command transfers leadership in the Raft cluster by sending a PUT request with the target server's address. It requires a management token for authorization and works only with Raft protocol v3 or greater.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/raft.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl --request PUT \\\n    --header \"X-Nomad-Token: ${NOMAD_TOKEN}\"\n    \"https://127.0.0.1:4646/v1/operator/raft/transfer-leadership?address=1.2.3.4:4647\"\n```\n\n----------------------------------------\n\nTITLE: Sending an ACL Role creation request via cURL in Nomad\nDESCRIPTION: Shell command using cURL to create a new ACL Role by sending a POST request with an authentication token and JSON payload to the Nomad API.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/roles.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --header \"X-Nomad-Token: <NOMAD_TOKEN_SECRET_ID>\" \\\n    --data @payload.json \\\n    https://localhost:4646/v1/acl/role\n```\n\n----------------------------------------\n\nTITLE: Registering a Cinder Volume with Nomad\nDESCRIPTION: Command-line instructions for registering a Cinder volume with Nomad. This requires setting the Nomad address and authentication token before registering the volume configuration file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/cinder-csi-plugin/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport NOMAD_ADDR=https://nomad.example.com:4646\nexport NOMAD_TOKEN=34534-3sdf3-szfdsafsdf3423-zxdfsd3\nnomad volume register example_volume.hcl\n```\n\n----------------------------------------\n\nTITLE: Creating Service Account Key\nDESCRIPTION: This command creates a JSON key file (account.json) for the Terraform service account, which will be used for authentication.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_15\n\nLANGUAGE: console\nCODE:\n```\ngcloud iam service-accounts keys create account.json \\\n    --iam-account \"terraform@$GOOGLE_PROJECT.iam.gserviceaccount.com\"\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Configuration Using Make\nDESCRIPTION: Alternative method to apply the Terraform configuration using a Makefile, which includes setting environment variables for license paths.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/terraform/README.md#2025-04-19_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport NOMAD_LICENSE_PATH=./nomad.hclic\nexport CONSUL_LICENSE_PATH=./consul.hclic \nmake apply_full\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Node Evaluation in Nomad\nDESCRIPTION: This JSON response provides details about the evaluated node, including evaluation IDs, server information, and cluster statistics.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/nodes.mdx#2025-04-19_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EvalCreateIndex\": 3671,\n  \"EvalIDs\": [\"4dfc2db7-b481-c53b-3072-14479aa44be3\"],\n  \"HeartbeatTTL\": 0,\n  \"Index\": 3671,\n  \"KnownLeader\": false,\n  \"LastContact\": 0,\n  \"LeaderRPCAddr\": \"10.138.0.2:4647\",\n  \"NodeModifyIndex\": 0,\n  \"NumNodes\": 3,\n  \"Servers\": [\n    {\n      \"Datacenter\": \"dc1\",\n      \"RPCAdvertiseAddr\": \"10.138.0.2:4647\",\n      \"RPCMajorVersion\": 1,\n      \"RPCMinorVersion\": 1\n    },\n    {\n      \"Datacenter\": \"dc1\",\n      \"RPCAdvertiseAddr\": \"10.138.0.3:4647\",\n      \"RPCMajorVersion\": 1,\n      \"RPCMinorVersion\": 1\n    },\n    {\n      \"Datacenter\": \"dc1\",\n      \"RPCAdvertiseAddr\": \"10.138.0.4:4647\",\n      \"RPCMajorVersion\": 1,\n      \"RPCMinorVersion\": 1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching and Using a Kadalu CSI Volume in Nomad\nDESCRIPTION: Commands to attach the created volume to a sample application, verify accessibility, and perform read/write operations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/kadalu-csi/README.md#2025-04-19_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n# Attach the volume to a sample app\n$ nomad run $job_dir/app.nomad\n==> 2021-09-20T18:28:28+05:30: Monitoring evaluation \"e6dd3129\"\n    2021-09-20T18:28:28+05:30: Evaluation triggered by job \"sample-pv-check\"\n==> 2021-09-20T18:28:29+05:30: Monitoring evaluation \"e6dd3129\"\n    2021-09-20T18:28:29+05:30: Evaluation within deployment: \"814e328c\"\n    2021-09-20T18:28:29+05:30: Allocation \"64745b25\" created: node \"4e105698\", group \"apps\"\n    2021-09-20T18:28:29+05:30: Evaluation status changed: \"pending\" -> \"complete\"\n==> 2021-09-20T18:28:29+05:30: Evaluation \"e6dd3129\" finished with status \"complete\"\n==> 2021-09-20T18:28:29+05:30: Monitoring deployment \"814e328c\"\n  ✓ Deployment \"814e328c\" successful\n\n    2021-09-20T18:28:58+05:30\n    ID          = 814e328c\n    Job ID      = sample-pv-check\n    Job Version = 0\n    Status      = successful\n    Description = Deployment completed successfully\n\n    Deployed\n    Task Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline\n    apps        1        1       1        0          2021-09-20T13:08:56Z\n\n# Export allocation ID (64745b25) from the previous command output\n$ export app=64745b25\n\n# Verify that the CSI Volume is accessible\n$ nomad alloc exec $app bash /kadalu/script.sh\nThis is a sample application\n\n# df -h\nFilesystem                               Size      Used Available Use% Mounted on\n<gluster_hosts>:<gluster_volname>      181.2M         0    181.2M   0% /mnt/pv\n\n# mount\nWrite/Read test on PV mount Mon\nSep 20 12:59:34 UTC 2021\nSUCCESS\n\n# Write some data on the volume\n$ nomad alloc exec $app bash -c 'cd /mnt/pv; for i in {1..10}; do cat /dev/urandom | tr -dc [:space:][:print:] | head -c 1m > file$i; done;'\n\n# Checksum the written data\n$ nomad alloc exec $app bash -c 'ls /mnt/pv; find /mnt/pv -type f -exec md5sum {} + | cut -f1 -d\" \" | sort | md5sum'\nfile1   file2   file4   file6   file8\nfile10  file3   file5   file7   file9\n6776dd355c0f2ba5a1781b9831e5c174  -\n```\n\n----------------------------------------\n\nTITLE: Assigning Editor Role to Terraform Service Account\nDESCRIPTION: This command assigns the 'editor' role to the Terraform service account, granting it necessary permissions to manage resources in the project.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_14\n\nLANGUAGE: console\nCODE:\n```\ngcloud projects add-iam-policy-binding \"$GOOGLE_PROJECT\" \\\n  --member serviceAccount:\"terraform@$GOOGLE_PROJECT.iam.gserviceaccount.com\" \\\n  --role roles/editor\n```\n\n----------------------------------------\n\nTITLE: Listing Variables with JSON Output\nDESCRIPTION: Example demonstrating JSON formatted output for variable listing with namespace specification\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/list.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad var list -out=json -namespace=\"*\" nomad/jobs/variable/www\n[\n  {\n    \"Namespace\": \"default\",\n    \"Path\": \"nomad/jobs/variable/www\",\n    \"CreateIndex\": 1457,\n    \"ModifyIndex\": 1457,\n    \"CreateTime\": 1662061225600373000,\n    \"ModifyTime\": 1662061225600373000\n  },\n  {\n    \"Namespace\": \"default\",\n    \"Path\": \"nomad/jobs/variable/www/nginx\",\n    \"CreateIndex\": 800,\n    \"ModifyIndex\": 1000,\n    \"CreateTime\": 1662061717905426000,\n    \"ModifyTime\": 1662062162982630000\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Agent State\nDESCRIPTION: Makes GET request to retrieve detailed state information about the target agent.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/agent/self\n```\n\n----------------------------------------\n\nTITLE: Reading a Job - Shell Request\nDESCRIPTION: GET requests to read job information with optional namespace\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/job/my-job\n\n$ curl \\\n    https://localhost:4646/v1/job/my-job?namespace=apps\n```\n\n----------------------------------------\n\nTITLE: Setting Allocation Health with cURL in Shell\nDESCRIPTION: This snippet demonstrates how to use cURL to send a POST request to set allocation health in a deployment. It shows the endpoint structure and how to include the deployment ID in the URL.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/deployments.mdx#2025-04-19_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    https://localhost:4646/v1/deployment/allocation-health/5456bd7a-9fc0-c0dd-6131-cbee77f57577\n```\n\n----------------------------------------\n\nTITLE: Memory Usage Calculation Example\nDESCRIPTION: Example calculation showing how the plugin determines the new instance count based on memory usage metrics.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/strategy/target-value.mdx#2025-04-19_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nfactor = 80/70 = 1.1428571429\nnew_count = 1.1428571429 * 10 ~= 12\n```\n\n----------------------------------------\n\nTITLE: Revert Job Version Payload\nDESCRIPTION: JSON payloads demonstrating how to revert to specific job versions using version number or tag.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"JobID\": \"my-job\",\n  \"JobVersion\": 2\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"JobID\": \"my-job\",\n  \"TaggedVersion\": \"golden-version\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for MDX Content in Nomad Documentation\nDESCRIPTION: Example of YAML frontmatter that can be added to MDX files to define page metadata such as title and description. These properties are used to set HTML title and description tags.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/README.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'My Title'\ndescription: \"A thorough, yet succinct description of the page's contents\"\n---\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Container Mounts in Shell\nDESCRIPTION: Shows how to use Docker commands to inspect the bind mounts created by Nomad for a Docker task. This demonstrates how Nomad provides access to allocation and task directories inside the container.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/filesystem.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker inspect 32e | jq '.[0].HostConfig.Binds'\n[\n  \"/var/nomad/alloc/b0686b27-8af3-8252-028f-af485c81a8b3/alloc:/alloc\",\n  \"/var/nomad/alloc/b0686b27-8af3-8252-028f-af485c81a8b3/task1/local:/local\",\n  \"/var/nomad/alloc/b0686b27-8af3-8252-028f-af485c81a8b3/task1/secrets:/secrets\"\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a New GCP Project\nDESCRIPTION: This command creates a new GCP project using the project ID stored in the GOOGLE_PROJECT environment variable.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ngcloud projects create $GOOGLE_PROJECT\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Reading an ACL Token\nDESCRIPTION: The response includes details about the ACL token such as AccessorID, SecretID, Name, Type, Policies, and creation/modification timestamps.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AccessorID\": \"aa534e09-6a07-0a45-2295-a7f77063d429\",\n  \"SecretID\": \"8176afd3-772d-0b71-8f85-7fa5d903e9d4\",\n  \"Name\": \"Read-write token\",\n  \"Type\": \"client\",\n  \"Policies\": [\"readwrite\"],\n  \"Global\": false,\n  \"CreateTime\": \"2017-08-23T23:25:41.429154233Z\",\n  \"CreateIndex\": 52,\n  \"ModifyIndex\": 64\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a VNET Jail Task in Nomad HCL\nDESCRIPTION: This snippet shows how to configure a VNET (virtual network) jail task in a Nomad job specification. It includes settings for virtual networking, hostname, and various execution hooks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/jail-task-driver.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n task \"test01\" {\n      driver = \"jail-task-driver\"\n      config {\n\t\tPath    = \"/zroot/iocage/jails/myjail/root\"\n\t\tHost_hostname = \"nomad00\"\n\t\tExec_clean = true\n\t\tExec_start = \"sh /etc/rc\"\n\t\tExec_stop = \"sh /etc/rc.shutdown\"\n\t\tMount_devfs = true\n\t\tExec_prestart = \"logger trying to start \"\n\t\tExec_poststart = \"logger jail has started\"\n\t\tExec_prestop = \"logger shutting down jail \"\n\t\tExec_poststop = \"logger has shut down jail \"\n\t\tExec_consolelog =\"/var/tmp/vnet-example\"\n\t\tVnet = true\n\t\tVnet_nic = \"e0b_loghost\"\n\t\tExec_prestart = \"/usr/share/examples/jails/jib addm loghost em1\"\n\t\tExec_poststop = \"/usr/share/examples/jails/jib destroy loghost \"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating an ACL Binding Rule with escaped selector on UNIX\nDESCRIPTION: Example of creating an ACL Binding Rule where the selector needs to be escaped on UNIX machines. It shows how to properly format the selector when it contains quotes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/binding-rule/create.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl binding-rule create \\\n    -description \"example binding rule\" \\\n    -auth-method \"auth0\" \\\n    -bind-type \"role\" \\\n    -bind-name \"eng-ro\" \\\n    -selector \"\\\"product-developer\\\" in list.roles\"\nID           = 698fdad6-dcb3-79dd-dc72-b43374057dea\nDescription  = example binding rule\nAuth Method  = auth0\nSelector     = \"\\\"project-developer\\\" in list.roles\"\nBind Type    = role\nBind Name    = eng-ro\nCreate Time  = 2022-12-20 11:15:22.582568 +0000 UTC\nModify Time  = 2022-12-20 11:15:22.582568 +0000 UTC\nCreate Index = 14\nModify Index = 14\n```\n\n----------------------------------------\n\nTITLE: Destroying Nomad Cluster Infrastructure\nDESCRIPTION: Command to tear down the Nomad cluster and associated AWS infrastructure using Terraform destroy.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/terraform/README.md#2025-04-19_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncd e2e/terraform/\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Configuring Workload Identity Environment Variables and Files in Nomad Jobs\nDESCRIPTION: This example demonstrates how to configure a Nomad job to expose both the default Workload Identity and a custom OIDC identity to a task through environment variables and files, with different change modes for token renewal.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/identity.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    task \"api\" {\n\n      identity {\n        env         = true\n        file        = true\n        filepath    = \"local/example.jwt\"\n\n        # Restart on token renewal to get the new env var\n        change_mode = \"restart\"\n      }\n\n      identity {\n        name        = \"example\"\n        aud         = [\"oidc.example.com\"]\n        file        = true\n        ttl         = \"1h\"\n\n        # Send a HUP signal when the token file is updated\n        change_mode   = \"signal\"\n        change_signal = \"SIGHUP\"\n      }\n\n      # ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Nomad UI for a Specific Job in Shell\nDESCRIPTION: Example of using the 'nomad ui' command with a job identifier to open the Nomad UI directly to the job details page.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/ui.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad ui redis-job\nhttp://127.0.0.1:4646/ui/jobs/redis-job\n```\n\n----------------------------------------\n\nTITLE: Sample Telemetry Output Display - Text Format\nDESCRIPTION: Example output of a telemetry dump from the Nomad Autoscaler showing various runtime metrics including memory usage, garbage collection stats, and goroutine counts. The metrics are displayed with timestamps and values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/telemetry.mdx#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[2020-08-25 10:01:20 +0100 BST][G] 'nomad-autoscaler.pathfinder.runtime.sys_bytes': 74793216.000\n[2020-08-25 10:01:20 +0100 BST][G] 'nomad-autoscaler.pathfinder.runtime.malloc_count': 219856.000\n[2020-08-25 10:01:20 +0100 BST][G] 'nomad-autoscaler.pathfinder.runtime.free_count': 183613.000\n[2020-08-25 10:01:20 +0100 BST][G] 'nomad-autoscaler.pathfinder.runtime.total_gc_pause_ns': 348822.000\n[2020-08-25 10:01:20 +0100 BST][G] 'nomad-autoscaler.pathfinder.runtime.total_gc_runs': 5.000\n[2020-08-25 10:01:20 +0100 BST][G] 'nomad-autoscaler.pathfinder.runtime.num_goroutines': 12.000\n[2020-08-25 10:01:20 +0100 BST][G] 'nomad-autoscaler.pathfinder.policy.total_num': 0.000\n[2020-08-25 10:01:20 +0100 BST][G] 'nomad-autoscaler.pathfinder.runtime.alloc_bytes': 4316568.000\n[2020-08-25 10:01:20 +0100 BST][G] 'nomad-autoscaler.pathfinder.runtime.heap_objects': 36243.000\n[2020-08-25 10:01:20 +0100 BST][S] 'nomad-autoscaler.runtime.gc_pause_ns': Count: 5 Min: 38083.000 Mean: 69764.400 Max: 122291.000 Stddev: 31487.808 Sum: 348822.000 LastUpdated: 2020-08-25 10:01:26.574809 +0100 BST m=+1.241576679\n[2020-08-25 10:01:30 +0100 BST][G] 'nomad-autoscaler.pathfinder.runtime.alloc_bytes': 4370504.000\n[2020-08-25 10:01:30 +0100 BST][G] 'nomad-autoscaler.pathfinder.runtime.malloc_count': 220853.000\n[2020-08-25 10:01:30 +0100 BST][G] 'nomad-autoscaler.pathfinder.runtime.free_count': 183613.000\n[2020-08-25 10:01:30 +0100 BST][G] 'nomad-autoscaler.pathfinder.policy.total_num': 0.000\n[2020-08-25 10:01:30 +0100 BST][G] 'nomad-autoscaler.pathfinder.runtime.num_goroutines': 12.000\n[2020-08-25 10:01:30 +0100 BST][G] 'nomad-autoscaler.pathfinder.runtime.total_gc_pause_ns': 348822.000\n[2020-08-25 10:01:30 +0100 BST][G] 'nomad-autoscaler.pathfinder.runtime.total_gc_runs': 5.000\n[2020-08-25 10:01:30 +0100 BST][G] 'nomad-autoscaler.pathfinder.runtime.sys_bytes': 74793216.000\n[2020-08-25 10:01:30 +0100 BST][G] 'nomad-autoscaler.pathfinder.runtime.heap_objects': 37240.000\n```\n\n----------------------------------------\n\nTITLE: Sample Allocation Response in JSON\nDESCRIPTION: This snippet shows a sample JSON response for an allocation in Nomad. It includes detailed information about the allocation, job, resources, and task states.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/nodes.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"AllocModifyIndex\": 2555,\n    \"ClientDescription\": \"\",\n    \"ClientStatus\": \"running\",\n    \"CreateIndex\": 2555,\n    \"CreateTime\": 1523490066575461000,\n    \"DeploymentID\": \"\",\n    \"DeploymentStatus\": {\n      \"Healthy\": true,\n      \"ModifyIndex\": 0\n    },\n    \"DesiredDescription\": \"\",\n    \"DesiredStatus\": \"run\",\n    \"DesiredTransition\": {\n      \"Migrate\": null\n    },\n    \"EvalID\": \"5129bc74-9785-c39a-08da-bddc8aa778b1\",\n    \"FollowupEvalID\": \"\",\n    \"ID\": \"fefe81d0-08b2-4eca-fae6-6560cde46d31\",\n    \"Job\": {\n      \"AllAtOnce\": false,\n      \"Constraints\": null,\n      \"CreateIndex\": 2553,\n      \"Datacenters\": [\"dc1\"],\n      \"ID\": \"webapp\",\n      \"JobModifyIndex\": 2553,\n      \"Meta\": null,\n      \"ModifyIndex\": 2554,\n      \"Name\": \"webapp\",\n      \"Namespace\": \"default\",\n      \"ParameterizedJob\": null,\n      \"ParentID\": \"\",\n      \"Payload\": null,\n      \"Periodic\": null,\n      \"Priority\": 50,\n      \"Region\": \"global\",\n      \"Stable\": false,\n      \"Status\": \"pending\",\n      \"StatusDescription\": \"\",\n      \"Stop\": false,\n      \"SubmitTime\": 1523490066563405000,\n      \"TaskGroups\": [\n        {\n          \"Constraints\": null,\n          \"Count\": 9,\n          \"EphemeralDisk\": {\n            \"Migrate\": false,\n            \"SizeMB\": 300,\n            \"Sticky\": false\n          },\n          \"Meta\": null,\n          \"Migrate\": {\n            \"HealthCheck\": \"checks\",\n            \"HealthyDeadline\": 300000000000,\n            \"MaxParallel\": 2,\n            \"MinHealthyTime\": 15000000000\n          },\n          \"Name\": \"webapp\",\n          \"ReschedulePolicy\": {\n            \"Attempts\": 0,\n            \"Delay\": 30000000000,\n            \"DelayFunction\": \"exponential\",\n            \"Interval\": 0,\n            \"MaxDelay\": 3600000000000,\n            \"Unlimited\": true\n          },\n          \"RestartPolicy\": {\n            \"Attempts\": 2,\n            \"Delay\": 15000000000,\n            \"Interval\": 1800000000000,\n            \"Mode\": \"fail\"\n          },\n          \"Tasks\": [\n            {\n              \"Artifacts\": null,\n              \"Config\": {\n                \"args\": [\"-text\", \"ok4\"],\n                \"image\": \"hashicorp/http-echo:0.2.3\",\n                \"port_map\": [\n                  {\n                    \"http\": 5678\n                  }\n                ]\n              },\n              \"Constraints\": null,\n              \"DispatchPayload\": null,\n              \"Driver\": \"docker\",\n              \"Env\": null,\n              \"KillSignal\": \"\",\n              \"KillTimeout\": 5000000000,\n              \"Leader\": false,\n              \"LogConfig\": {\n                \"MaxFileSizeMB\": 10,\n                \"MaxFiles\": 10\n              },\n              \"Meta\": null,\n              \"Name\": \"webapp\",\n              \"Resources\": {\n                \"CPU\": 100,\n                \"DiskMB\": 0,\n                \"MemoryMB\": 300,\n                \"Networks\": [\n                  {\n                    \"CIDR\": \"\",\n                    \"Device\": \"\",\n                    \"DynamicPorts\": [\n                      {\n                        \"Label\": \"http\",\n                        \"Value\": 0\n                      }\n                    ],\n                    \"IP\": \"\",\n                    \"MBits\": 10,\n                    \"ReservedPorts\": null\n                  }\n                ]\n              },\n              \"Services\": [\n                {\n                  \"AddressMode\": \"auto\",\n                  \"Checks\": [\n                    {\n                      \"AddressMode\": \"\",\n                      \"Args\": null,\n                      \"CheckRestart\": null,\n                      \"Command\": \"\",\n                      \"Header\": null,\n                      \"InitialStatus\": \"\",\n                      \"Interval\": 10000000000,\n                      \"Method\": \"\",\n                      \"Name\": \"http-ok\",\n                      \"Path\": \"/\",\n                      \"PortLabel\": \"\",\n                      \"Protocol\": \"\",\n                      \"TLSSkipVerify\": false,\n                      \"Timeout\": 2000000000,\n                      \"Type\": \"http\"\n                    }\n                  ],\n                  \"Name\": \"webapp\",\n                  \"PortLabel\": \"http\",\n                  \"Tags\": null\n                }\n              ],\n              \"ShutdownDelay\": 0,\n              \"Templates\": null,\n              \"User\": \"\",\n              \"Vault\": null\n            }\n          ],\n          \"Update\": null\n        }\n      ],\n      \"Type\": \"service\",\n      \"Update\": {\n        \"AutoRevert\": false,\n        \"Canary\": 0,\n        \"HealthCheck\": \"\",\n        \"HealthyDeadline\": 0,\n        \"MaxParallel\": 0,\n        \"MinHealthyTime\": 0,\n        \"Stagger\": 0\n      },\n      \"VaultToken\": \"\",\n      \"Version\": 0\n    },\n    \"JobID\": \"webapp\",\n    \"Metrics\": {\n      \"AllocationTime\": 63337,\n      \"ClassExhausted\": null,\n      \"ClassFiltered\": null,\n      \"CoalescedFailures\": 0,\n      \"ConstraintFiltered\": null,\n      \"DimensionExhausted\": null,\n      \"NodesAvailable\": {\n        \"dc1\": 2\n      },\n      \"NodesEvaluated\": 2,\n      \"NodesExhausted\": 0,\n      \"NodesFiltered\": 0,\n      \"NodesInPool\": 2,\n      \"QuotaExhausted\": null,\n      \"Scores\": {\n        \"46f1c6c4-a0e5-21f6-fd5c-d76c3d84e806.binpack\": 2.6950883117541586,\n        \"f7476465-4d6e-c0de-26d0-e383c49be941.binpack\": 2.6950883117541586\n      }\n    },\n    \"ModifyIndex\": 2567,\n    \"ModifyTime\": 1523490089807324000,\n    \"Name\": \"webapp.webapp[0]\",\n    \"Namespace\": \"default\",\n    \"NextAllocation\": \"\",\n    \"NodeID\": \"f7476465-4d6e-c0de-26d0-e383c49be941\",\n    \"PreviousAllocation\": \"\",\n    \"RescheduleTracker\": null,\n    \"Resources\": {\n      \"CPU\": 100,\n      \"DiskMB\": 300,\n      \"MemoryMB\": 300,\n      \"Networks\": [\n        {\n          \"CIDR\": \"\",\n          \"Device\": \"eth0\",\n          \"DynamicPorts\": [\n            {\n              \"Label\": \"http\",\n              \"Value\": 25920\n            }\n          ],\n          \"IP\": \"10.138.0.5\",\n          \"MBits\": 10,\n          \"ReservedPorts\": null\n        }\n      ]\n    },\n    \"SharedResources\": {\n      \"CPU\": 0,\n      \"DiskMB\": 300,\n      \"MemoryMB\": 0,\n      \"Networks\": null\n    },\n    \"TaskGroup\": \"webapp\",\n    \"TaskResources\": {\n      \"webapp\": {\n        \"CPU\": 100,\n        \"DiskMB\": 0,\n        \"MemoryMB\": 300,\n        \"Networks\": [\n          {\n            \"CIDR\": \"\",\n            \"Device\": \"eth0\",\n            \"DynamicPorts\": [\n              {\n                \"Label\": \"http\",\n                \"Value\": 25920\n              }\n            ],\n            \"IP\": \"10.138.0.5\",\n            \"MBits\": 10,\n            \"ReservedPorts\": null\n          }\n        ]\n      }\n    },\n    \"TaskStates\": {\n      \"webapp\": {\n        \"Events\": [\n          {\n            \"Details\": {},\n            \"DiskLimit\": 0,\n            \"DisplayMessage\": \"Task received by client\",\n            \"DownloadError\": \"\",\n            \"DriverError\": \"\",\n            \"DriverMessage\": \"\",\n            \"ExitCode\": 0,\n            \"FailedSibling\": \"\",\n            \"FailsTask\": false,\n            \"GenericSource\": \"\",\n            \"KillError\": \"\",\n            \"KillReason\": \"\",\n            \"KillTimeout\": 0,\n            \"Message\": \"\",\n            \"RestartReason\": \"\",\n            \"SetupError\": \"\",\n            \"Signal\": 0,\n            \"StartDelay\": 0,\n            \"TaskSignal\": \"\",\n            \"TaskSignalReason\": \"\",\n            \"Time\": 1523490066712543500,\n            \"Type\": \"Received\",\n            \"ValidationError\": \"\",\n            \"VaultError\": \"\"\n          },\n          {\n            \"Details\": {\n              \"message\": \"Building Task Directory\"\n            },\n            \"DiskLimit\": 0,\n            \"DisplayMessage\": \"Building Task Directory\",\n            \"DownloadError\": \"\",\n            \"DriverError\": \"\",\n            \"DriverMessage\": \"\",\n            \"ExitCode\": 0,\n            \"FailedSibling\": \"\",\n            \"FailsTask\": false,\n            \"GenericSource\": \"\",\n            \"KillError\": \"\",\n            \"KillReason\": \"\",\n            \"KillTimeout\": 0,\n            \"Message\": \"Building Task Directory\",\n            \"RestartReason\": \"\",\n            \"SetupError\": \"\",\n            \"Signal\": 0,\n            \"StartDelay\": 0,\n            \"TaskSignal\": \"\",\n            \"TaskSignalReason\": \"\",\n            \"Time\": 1523490066715208000,\n            \"Type\": \"Task Setup\",\n            \"ValidationError\": \"\",\n            \"VaultError\": \"\"\n          },\n          {\n            \"Details\": {},\n            \"DiskLimit\": 0,\n            \"DisplayMessage\": \"Task started by client\",\n            \"DownloadError\": \"\",\n            \"DriverError\": \"\",\n            \"DriverMessage\": \"\",\n            \"ExitCode\": 0,\n            \"FailedSibling\": \"\",\n            \"FailsTask\": false,\n            \"GenericSource\": \"\",\n            \"KillError\": \"\",\n            \"KillReason\": \"\",\n            \"KillTimeout\": 0,\n            \"Message\": \"\",\n            \"RestartReason\": \"\",\n            \"SetupError\": \"\",\n            \"Signal\": 0,\n            \"StartDelay\": 0,\n            \"TaskSignal\": \"\",\n            \"TaskSignalReason\": \"\",\n            \"Time\": 1523490068433051100,\n            \"Type\": \"Started\",\n            \"ValidationError\": \"\",\n            \"VaultError\": \"\"\n          }\n        ],\n        \"Failed\": false,\n        \"FinishedAt\": \"0001-01-01T00:00:00Z\",\n        \"LastRestart\": \"0001-01-01T00:00:00Z\",\n        \"Restarts\": 0,\n        \"StartedAt\": \"2018-04-11T23:41:08.445128764Z\",\n        \"State\": \"running\"\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Reading Deployment - Shell Request\nDESCRIPTION: Sample curl command to read information about a specific deployment by ID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/deployments.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/deployment/70638f62-5c19-193e-30d6-f9d6e689ab8e\n```\n\n----------------------------------------\n\nTITLE: Target Value Calculation Formula\nDESCRIPTION: Mathematical formula showing how the plugin calculates the new count based on current metric value and target.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/strategy/target-value.mdx#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfactor = current_metric_value / target\nnew_count = factor * current_count\n```\n\n----------------------------------------\n\nTITLE: Using nomad var purge command\nDESCRIPTION: The basic usage syntax for the `nomad var purge` command. It requires the path to the variable as an argument and supports various options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/purge.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad var purge [options] <path>\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Operator Root Keyring Remove Command - Basic Syntax\nDESCRIPTION: Basic command syntax for removing an encryption key from the Nomad cluster using a key ID (UUID).\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/root/keyring-remove.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator root keyring remove [options] <key ID>\n```\n\n----------------------------------------\n\nTITLE: Setting client credentials environment variables\nDESCRIPTION: Commands to export the client ID and client secret as environment variables. These values come from the service principal creation output.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/azure/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport ARM_CLIENT_ID=CLIENT_ID\nexport ARM_CLIENT_SECRET=CLIENT_SECRET\n```\n\n----------------------------------------\n\nTITLE: Querying Current Nomad Server List\nDESCRIPTION: Example showing how to query the currently configured servers for a Nomad client node\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/config.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node config -servers\nserver1:4647\nserver2:4647\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nomad Enterprise license information\nDESCRIPTION: This example demonstrates the output of the 'nomad license get' command, showing detailed information about the Nomad Enterprise license including its status, ID, expiration, and licensed features.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/license/get.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad license get\n\nProduct        = nomad\nLicense Status = valid\nLicense ID     = e23f63b1-00ec-4e67-e926-c22e7937ceec\nCustomer ID    = 350356e5-8aec-bdf4-8510-b205079ccad2\nIssued At      = 2021-03-31 14:21:16.969610774 +0000 UTC\nExpires At     = 2020-05-09 00:00:00 +0000 UTC\nTerminates At  = 2020-05-10 00:00:00 +0000 UTC\nDatacenter     = *\nModules:\n        governance-policy\nLicensed Features:\n        Automated Upgrades\n        Enhanced Read Scalability\n        Redundancy Zones\n        Namespaces\n        Resource Quotas\n        Preemption\n        Audit Logging\n        Setinel Policies\n```\n\n----------------------------------------\n\nTITLE: Deregistering CSI Volume in Nomad (Shell)\nDESCRIPTION: Shell command to deregister a CSI volume from Nomad. Uses curl to send a DELETE request to the specified endpoint, with an optional force parameter.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    https://localhost:4646/v1/volume/csi/volume-id1?force=false\n```\n\n----------------------------------------\n\nTITLE: Using nomad acl binding-rule create command\nDESCRIPTION: Basic usage syntax for the 'nomad acl binding-rule create' command. It shows the command structure and indicates that options are required.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/binding-rule/create.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl binding-rule create [options]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Node Drain Initiation Flow in Nomad\nDESCRIPTION: This diagram illustrates the flow of events when a node is marked for draining. It shows the interaction between various components like NodeDrainer, NodeWatcher, JobWatcher, and the state store.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/architecture-drainer.md#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    %% entities\n    clients\n    scheduler\n    user(user)\n    NodeDrainer([NodeDrainer])\n    NodeWatcher([DrainingNodeWatcher])\n    JobWatcher([DrainingJobWatcher])\n    StateStore([state store])\n\n    %% style classes\n    classDef component fill:#d5f6ea,stroke-width:4px,stroke:#1d9467\n    classDef other fill:#d5f6ea,stroke:#1d9467\n    class user,clients,scheduler,StateStore other;\n    class NodeDrainer,NodeWatcher,JobWatcher component;\n\n    user -. \"1. enable drain\\nfor node\" .-> StateStore\n    StateStore -- \"2. blocking query for\\nnewly draining nodes\" --> NodeWatcher\n    NodeWatcher -- \"3. RegisterJobs(jobs)\" --> JobWatcher\n    JobWatcher -- \"4. Drain(): allocs for job that need draining\" --> NodeDrainer\n    NodeDrainer -- \"5. AllocUpdateDesiredTransition\\n(raft shim)\" --> StateStore\n\n    StateStore -. 6. EvalDequeue .-> scheduler\n    StateStore -. 7. GetAllocs .-> clients\n```\n\n----------------------------------------\n\nTITLE: Examining Mount Points in Chroot Isolation\nDESCRIPTION: Shell session output showing the mount points created within a Nomad task using chroot isolation. It displays how allocation, private, and secrets directories are mounted.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/filesystem.mdx#2025-04-19_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc exec eebd13a7 /bin/sh\n$ mount\n...\n/dev/mapper/root on /alloc type ext4 (rw,relatime,errors=remount-ro,data=ordered)\ntmpfs on /private type tmpfs (rw,noexec,relatime,size=1024k)\ntmpfs on /secrets type tmpfs (rw,noexec,relatime,size=1024k,noswap)\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Meta Keys with Dots in Nomad\nDESCRIPTION: Alternative map assignment syntax for meta keys that aren't valid HCLv2 identifiers, such as keys containing periods.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/meta.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nmeta = {\n  \"project.team\" = \"sre\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Network Mode in Nomad HCL\nDESCRIPTION: This example shows an incorrect configuration of Docker network mode that conflicts with the group-level network mode, potentially causing communication issues between tasks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/networking/index.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"...\" {\n  network {\n    mode = \"bridge\"\n  }\n\n  task \"...\" {\n    driver = \"docker\"\n\n    config {\n      # This conflicts with the group-level network.mode configuration and\n      # should not be used.\n      network_mode = \"bridge\"\n      # ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the timeadd Function Syntax in HCL\nDESCRIPTION: Demonstrates the syntax for the timeadd function in Nomad configuration language. The function takes two arguments: a timestamp string in RFC 3339 format and a duration string.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/datetime/timeadd.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntimeadd(timestamp, duration)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Node Drain Deadline Handling in Nomad\nDESCRIPTION: This diagram illustrates the process of handling node drain deadlines. It shows how the DeadlineNotifier interacts with the NodeWatcher and NodeDrainer to manage nodes that have passed their drain deadline.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/architecture-drainer.md#2025-04-19_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    %% entities\n    NodeDrainer([NodeDrainer])\n    NodeWatcher([DrainingNodeWatcher])\n    DeadlineNotifier([DrainDeadlineNotifier])\n    StateStore([state store])\n\n    %% style classes\n    classDef component fill:#d5f6ea,stroke-width:4px,stroke:#1d9467\n    classDef other fill:#d5f6ea,stroke:#1d9467\n    class StateStore other;\n    class NodeDrainer,NodeWatcher,DeadlineNotifier component;\n\n    NodeWatcher -- \"1. Watch()\" --> DeadlineNotifier\n    NodeWatcher -- \"2a. Remove()\" --> DeadlineNotifier\n    DeadlineNotifier -- \"2b. watch the clock\" --> DeadlineNotifier\n    DeadlineNotifier -- \"3. node has passed deadline\" --> NodeDrainer\n    NodeDrainer -- \"4. NodesDrainComplete\\n(raft shim)\" --> StateStore\n```\n\n----------------------------------------\n\nTITLE: Checking CSI Volume Capacity in Nomad\nDESCRIPTION: This shell command uses the Nomad CLI to check the current capacity of the created CSI volume.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/csi.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume status ebs_prod_db1 | grep Capacity\nCapacity             = 50 GiB\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Scaling Policy List Command Usage\nDESCRIPTION: Shows the basic syntax for the nomad scaling policy list command with options placeholder. Used to list all scaling policies stored in Nomad.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/scaling/policy-list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad scaling policy list [options]\n```\n\n----------------------------------------\n\nTITLE: Querying Node Metadata via Nomad API\nDESCRIPTION: Example of making a GET request to read dynamic node metadata from the Nomad client API. Returns merged metadata from static and dynamic sources.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnomad operator api /v1/client/metadata\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Client Assertion with Nomad Keyring for Keycloak\nDESCRIPTION: JSON configuration for OIDC client assertion using Nomad's internal private key. This setup is for Keycloak and uses Nomad's jwks.json endpoint for key verification, providing enhanced security as the private key remains within Nomad.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/acl/auth-methods/oidc.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"OIDCDiscoveryURL\": \"https://your-keycloak-instance.com/realms/nomad\",\n  \"OIDCClientID\": \"{your-client-id}\",\n  \"BoundAudiences\": [\"{your-client-id}\"],\n  \"OIDCClientAssertion\": {\n    \"Audience\": [\"https://your-keycloak-instance.com/realms/nomad\"],\n    \"KeySource\": \"nomad\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Pause Schedule State in Nomad\nDESCRIPTION: Demonstrates how to override the schedule state for a time-based task in Nomad using the API. Includes the curl command and a sample JSON response.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/allocations.mdx#2025-04-19_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n$ echo '{\"Task\": \"schedtask\", \"ScheduleState\": \"run\"}' | \\\n  nomad operator api /v1/client/allocation/23f520cc-629a-46ff-395f-0661e7aa939e/pause\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Index\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Job Evaluations in Nomad API\nDESCRIPTION: Sample response showing job evaluation details including evaluation ID, priority, type, job information, status, and allocation information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"ID\": \"a9c5effc-2242-51b2-f1fe-054ee11ab189\",\n    \"Priority\": 50,\n    \"Type\": \"service\",\n    \"TriggeredBy\": \"job-register\",\n    \"JobID\": \"example\",\n    \"JobModifyIndex\": 7,\n    \"NodeID\": \"\",\n    \"NodeModifyIndex\": 0,\n    \"Status\": \"complete\",\n    \"StatusDescription\": \"\",\n    \"Wait\": 0,\n    \"NextEval\": \"\",\n    \"PreviousEval\": \"\",\n    \"BlockedEval\": \"\",\n    \"FailedTGAllocs\": null,\n    \"ClassEligibility\": null,\n    \"EscapedComputedClass\": false,\n    \"AnnotatePlan\": false,\n    \"QueuedAllocations\": {\n      \"cache\": 0\n    },\n    \"SnapshotIndex\": 8,\n    \"CreateIndex\": 8,\n    \"ModifyIndex\": 10\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Running Nomad Recommendation Help Command\nDESCRIPTION: Command to get help information for any recommendation subcommand.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/recommendation/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnomad recommendation <subcommand> -h\n```\n\n----------------------------------------\n\nTITLE: Adding Request Struct and Constant in Go for Nomad RPC\nDESCRIPTION: Defines the process of adding a new Request struct and corresponding constant in the structs.go file. It emphasizes appending new constants without changing existing values and keeping resource definitions separate.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/checklist-rpc-endpoint.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// In nomad/structs/structs.go\ntype Request struct {\n    // Fields\n}\n\nconst (\n    // Existing constants\n    *RequestType = \"new_request_type\"\n)\n```\n\n----------------------------------------\n\nTITLE: Writing a Sentinel Policy in Nomad\nDESCRIPTION: Example of using the 'nomad sentinel write' command to create a policy named 'foo' with a scope of 'submit-job', a description, and a policy file named 'test.sentinel'.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/sentinel/apply.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad sentinel write -scope \"submit-job\" -description \"My test policy\" foo test.sentinel\nSuccessfully wrote \"foo\" Sentinel policy!\n```\n\n----------------------------------------\n\nTITLE: Listing All ACL Binding Rules with cURL\nDESCRIPTION: Makes a GET request to fetch all ACL Binding Rules. Requires a management token and supports blocking queries and all consistency modes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/binding-rules.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Nomad-Token: <NOMAD_TOKEN_SECRET_ID>\" \\\n    https://localhost:4646/v1/acl/binding-rules\n```\n\n----------------------------------------\n\nTITLE: Making Compressed API Requests in Nomad\nDESCRIPTION: Example of making an HTTP request to Nomad's API with gzip compression enabled using curl.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/index.mdx#2025-04-19_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"Accept-Encoding: gzip\" \\\n    https://localhost:4646/v1/...\n```\n\n----------------------------------------\n\nTITLE: Basic formatdate Function Syntax in HCL\nDESCRIPTION: Shows the basic syntax for using the formatdate function which takes a format specification and timestamp as arguments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/datetime/formatdate.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nformatdate(spec, timestamp)\n```\n\n----------------------------------------\n\nTITLE: Log Streaming Request - Shell\nDESCRIPTION: GET request to stream logs from a specific node or leader with debug level logging.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    \"https://localhost:4646/v1/agent/monitor?log_level=debug&server_id=leader\"\n\n$ curl \\\n    \"https://localhost:4646/v1/agent/monitor?log_level=debug&node_id=a57b2adb-1a30-2dda-8df0-25abb0881952\"\n```\n\n----------------------------------------\n\nTITLE: Combining Non-List and List Arguments in formatlist\nDESCRIPTION: Example demonstrating how formatlist combines a static non-list argument with a list argument, repeating the non-list value for each element in the list.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/formatlist.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n> formatlist(\"%s, %s!\", \"Salutations\", [\"Valentina\", \"Ander\", \"Olivia\", \"Sam\"])\n[\n  \"Salutations, Valentina!\",\n  \"Salutations, Ander!\",\n  \"Salutations, Olivia!\",\n  \"Salutations, Sam!\",\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of 'nomad var get' Command\nDESCRIPTION: The basic syntax for retrieving a variable from Nomad. Requires a path parameter to specify which variable to retrieve.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad var get [options] <path>\n```\n\n----------------------------------------\n\nTITLE: Configuring NUMA Affinity with Device Colocation in Nomad HCL\nDESCRIPTION: Advanced NUMA configuration that specifies both affinity requirements and devices that must be colocated on the same NUMA node. This example requires 8 cores and specific GPU and network devices to be on the same NUMA node.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/cpu.mdx#2025-04-19_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\ntask {\n  resources {\n    cores = 8\n    memory = 16384\n\n    device \"nvidia/gpu/H100\" {\n      count = 2\n    }\n    device \"intel/net/XXVDA2\" {\n      count = 1\n    }\n    device \"xilinx/fpga/X7\" {\n      count = 1\n    }\n\n    numa {\n\t    affinity = \"require\"\n\t    devices = [\n  \t    \"nvidia/gpu/H100\",\n  \t    \"intel/net/XXVDA2\"\n\t    ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Quiet Mode Node Status in Nomad CLI\nDESCRIPTION: Lists only the node IDs without headers or additional information using the -quiet flag. This cannot be used with -verbose or -json flags.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/status.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node status -quiet\n820561cf-830d-b089-cg03-f2cfc4cecff7\n07949e3a-4c25-e1bf-3dbh-984c2e28fec2\n8bc2c581-37ba-dj08-9f67-53bc217f36f8\nf35be281-85a5-d1e6-d268-6e8a6f0684df\n```\n\n----------------------------------------\n\nTITLE: Nomad Allocation Configuration JSON\nDESCRIPTION: Comprehensive JSON structure detailing a Nomad allocation's configuration including deployment status, task states, environment variables, networking settings, and execution events. Contains sensitive information like allocation IDs, paths, and container configurations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/client-state.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CoalescedFailures\": 0,\n  \"DesiredStatus\": \"run\",\n  \"DesiredDescription\": \"\",\n  \"DesiredTransition\": {\n    \"Migrate\": null,\n    \"Reschedule\": null,\n    \"ForceReschedule\": null,\n    \"NoShutdownDelay\": null\n  },\n  \"ClientStatus\": \"pending\",\n  \"ClientDescription\": \"\",\n  \"TaskStates\": null,\n  \"AllocStates\": null\n  // Additional fields truncated for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: CSI Volumes List Response\nDESCRIPTION: Sample JSON response when listing CSI volumes, showing volume details including ID, namespace, topology, and health status\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"ID\": \"volume-id1\",\n    \"ExternalID\": \"vol-abcdef\",\n    \"Namespace\": \"default\",\n    \"Name\": \"volume id1\",\n    \"Topologies\": [\n      {\n        \"foo\": \"bar\"\n      }\n    ],\n    \"AccessMode\": \"multi-node-single-writer\",\n    \"AttachmentMode\": \"file-system\",\n    \"CurrentReaders\": 2,\n    \"CurrentWriters\": 1,\n    \"Schedulable\": true,\n    \"PluginID\": \"plugin-id1\",\n    \"Provider\": \"ebs\",\n    \"ControllerRequired\": true,\n    \"ControllersHealthy\": 3,\n    \"ControllersExpected\": 3,\n    \"NodesHealthy\": 15,\n    \"NodesExpected\": 18,\n    \"ResourceExhausted\": 0,\n    \"CreateIndex\": 42,\n    \"ModifyIndex\": 64\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for Creating or Updating a Recommendation\nDESCRIPTION: This JSON snippet demonstrates the structure of the payload used to create or update a recommendation, including details such as job ID, resource type, and statistical data.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/recommendations.mdx#2025-04-19_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Region\": \"global\",\n  \"Namespace\": \"default\",\n  \"JobID\": \"example\",\n  \"Group\": \"cache\",\n  \"Task\": \"redis\",\n  \"Resource\": \"MemoryMB\",\n  \"Value\": 512,\n  \"Meta\": {\n    \"nomad_policy_id\": \"c355d0ec-7aa1-2604-449d-4ec79c813d2c\"\n  },\n  \"Stats\": {\n    \"min\": 2.6640625,\n    \"p99\": 6.51171875,\n    \"max\": 6.515625,\n    \"mean\": 4.816847859995009\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul JWT Auth Method in JSON\nDESCRIPTION: This JSON configuration sets up a Consul JWT ACL auth method for Nomad workload identities. It specifies the JWKS URL, supported algorithms, bound audiences, and claim mappings for Nomad-specific attributes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/acl.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"JWKSURL\": \"https://nomad.example.com:4646/.well-known/jwks.json\",\n  \"JWTSupportedAlgs\": [\"RS256\"],\n  \"BoundAudiences\": [\"consul.io\"],\n  \"ClaimMappings\": {\n    \"nomad_namespace\": \"nomad_namespace\",\n    \"nomad_job_id\": \"nomad_job_id\",\n    \"nomad_task\": \"nomad_task\",\n    \"nomad_service\": \"nomad_service\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nomad UI in Development Mode with Vagrant\nDESCRIPTION: Command to run the Ember development server within a Vagrant environment with necessary modifications for file watching and port configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/ui/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ember serve --watch polling --port 4201\n```\n\n----------------------------------------\n\nTITLE: Executing Nomad System GC Command in Shell\nDESCRIPTION: Example showing how to run the 'nomad system gc' command in a shell session. The command produces no output when successful, as indicated by the empty response.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/system/gc.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad system gc\n\n\n```\n\n----------------------------------------\n\nTITLE: Nomad Scaling Help Command\nDESCRIPTION: Command to get help information for any scaling subcommand. This provides detailed usage information for specific subcommands.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/scaling/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnomad scaling <subcommand> -h\n```\n\n----------------------------------------\n\nTITLE: Response from Listing ACL Auth Methods in Nomad\nDESCRIPTION: JSON response showing a list of all ACL auth methods with minimal information including name, type, and index data. This list only contains methods replicated to the current region.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/auth-methods.mdx#2025-04-19_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"CreateIndex\": 12,\n        \"Default\": true,\n        \"ModifyIndex\": 32,\n        \"Name\": \"example-acl-auth-method\",\n        \"Type\": \"OIDC\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Formatting output with Go template\nDESCRIPTION: Example of using the -t flag with the nomad alloc checks command to format and display health check status information using a Go template.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/checks.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc checks -t '{{range .}}{{ printf \"%s: %s\\n\" .ID  .Status }}{{end}}' 54\n\n9810e90177a4c21ce3bfe04dc7da6131: success\n```\n\n----------------------------------------\n\nTITLE: Using the floor Function in Nomad HCL\nDESCRIPTION: Examples demonstrating how to use the floor function to convert numbers to the nearest whole number less than or equal to the input value. The function works with both whole numbers and fractions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/numeric/floor.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> floor(5)\n5\n> floor(4.9)\n4\n```\n\n----------------------------------------\n\nTITLE: Formatting a List of Names with formatlist Function\nDESCRIPTION: Example showing how to use formatlist to create a list of greeting strings from a list of names. The function applies the same format string to each element in the list.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/formatlist.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> formatlist(\"Hello, %s!\", [\"Valentina\", \"Ander\", \"Olivia\", \"Sam\"])\n[\n  \"Hello, Valentina!\",\n  \"Hello, Ander!\",\n  \"Hello, Olivia!\",\n  \"Hello, Sam!\",\n]\n```\n\n----------------------------------------\n\nTITLE: Formatting Nomad Job Allocations with Go Template\nDESCRIPTION: Illustrates how to use a Go template to format the output of the `nomad job allocs` command, specifically to print only the allocation IDs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/allocs.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job allocs -t '{{ range . }}{{ println .ID }}{{ end }}' example\nc2b4606d-1b02-0d8d-5fdd-031167cd4c91\nc413424b-d80e-9bc6-ea92-a02b336eaaf5\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Pool Access Rules in Nomad\nDESCRIPTION: Example of setting combined policy and capability rules for node pool access, allowing read and write but not delete permissions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/acl-policy.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nnode_pool \"dev-*\" {\n  policy       = \"read\"\n  capabilities = [\"write\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Policy Configuration for GCE MIG Target in Nomad Autoscaling\nDESCRIPTION: HCL policy configuration for a Nomad autoscaling check that targets a Google Cloud Engine Managed Instance Group. This example includes project and region specification, MIG name, node class, and drain settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/target/gce-mig.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ncheck \"hashistack-allocated-cpu\" {\n  # ...\n  target \"gce-mig\" {\n    project             = \"hashistack-demo\"\n    region              = \"us-west1\"\n    mig_name            = \"nomad-client-hashistack\"\n    node_class          = \"hashistack\"\n    node_drain_deadline = \"5m\"\n    node_purge          = \"true\"\n  }\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Nomad License Reporting Error Logs\nDESCRIPTION: Sample log output showing failed license utilization reporting in Nomad. The logs indicate an HTTP 403 status code, suggesting network configuration issues or access denial.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/enterprise/license/utilization-reporting.mdx#2025-04-19_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[DEBUG] core.reporting: beginning snapshot export\n[DEBUG] core.reporting: creating payload\n[DEBUG] core.reporting: marshalling payload to json\n[DEBUG] core.reporting: generating authentication headers\n[DEBUG] core.reporting: creating request\n[DEBUG] core.reporting: sending request\n[DEBUG] core.reporting: performing request: method=POST url=https://reporting.hashicorp.services\n[DEBUG] core.reporting: error status code received: statusCode=403\n```\n\n----------------------------------------\n\nTITLE: Fetching ACL Role Info by ID in Nomad\nDESCRIPTION: This example demonstrates how to fetch information about an existing ACL role using its ID. The command returns details such as ID, name, description, policies, and creation/modification indices.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/role/info.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl role info a53b0095-c28a-6181-0586-807b82e665e4\nID           = a53b0095-c28a-6181-0586-807b82e665e4\nName         = example-acl-role\nDescription  = <none>\nPolicies     = general-write\nCreate Index = 71\nModify Index = 71\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Wrapper in Go for Nomad RPC\nDESCRIPTION: Describes the process of creating a wrapper for the HTTP request, emphasizing backward compatibility and optional ACL checks for optimization.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/checklist-rpc-endpoint.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// In command/agent/foo_endpoint.go\nfunc (s *HTTPServer) FooRequest(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {\n    if s.agent.Client() == nil {\n        return s.errNoClientConn(w, r)\n    }\n\n    // Parse request\n\n    // Optional ACL check\n    if aclObj, err := s.ResolveACL(r); err != nil {\n        s.serverErrorf(w, r, \"failed to resolve ACL: %v\", err)\n        return\n    } else if aclObj != nil && !aclObj.AllowFooAccess() {\n        s.deniedErrorf(w, r, \"permission denied\")\n        return\n    }\n\n    // Make RPC request\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Java Task to Run a Class Instead of JAR\nDESCRIPTION: This example shows how to configure a Java task to run a specific Java class rather than a JAR file, including the class path configuration and artifact download.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/java.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"web\" {\n  driver = \"java\"\n\n  config {\n    class       = \"Hello\"\n    class_path  = \"${NOMAD_TASK_DIR}\"\n    jvm_options = [\"-Xmx2048m\", \"-Xms256m\"]\n  }\n\n  # Specifying an artifact is required with the \"java\" driver. This is the\n  # mechanism to ship the Jar to be run.\n  artifact {\n    source = \"https://internal.file.server/Hello.class\"\n\n    options {\n      checksum = \"md5:123445555555555\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining log and ceil Functions in Shell Session\nDESCRIPTION: This example shows how to use the log function in combination with the ceil function to find the minimum number of binary digits required to represent a given number of distinct values. It demonstrates this for 15, 16, and 17 distinct values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/numeric/log.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n> ceil(log(15, 2))\n4\n> ceil(log(16, 2))\n4\n> ceil(log(17, 2))\n5\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Nomad CLI Autocomplete\nDESCRIPTION: This command removes the autocomplete functionality from the Nomad CLI. It's useful if you want to disable or reinstall the autocomplete feature.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad -autocomplete-uninstall\n```\n\n----------------------------------------\n\nTITLE: Usage of nomad alloc stop command\nDESCRIPTION: Shows the basic usage syntax for the 'nomad alloc stop' command. It requires a single argument specifying the allocation ID or prefix to stop.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/stop.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad alloc stop [options] <allocation>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Nomad Node Pool\nDESCRIPTION: This example shows how to delete a node pool named 'dev' using the Nomad CLI. It demonstrates the command execution and the success message returned.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/delete.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node pool delete dev\nSuccessfully deleted node pool \"dev\"!\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad ACL Auth Method Delete Command\nDESCRIPTION: This snippet shows the basic usage syntax for the `nomad acl auth-method delete` command. It requires specifying the name of the existing auth method to be deleted.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/auth-method/delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl auth-method delete [options] <auth-method_name>\n```\n\n----------------------------------------\n\nTITLE: Sample response from listing ACL Roles in Nomad\nDESCRIPTION: JSON response showing an array of ACL Role objects returned when listing roles, each containing the role's properties and associated policies.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/roles.mdx#2025-04-19_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"CreateIndex\": 26,\n    \"Description\": \"my example ACL Role\",\n    \"ID\": \"77c50812-fcdd-701b-9f1a-6cf55387b09d\",\n    \"ModifyIndex\": 26,\n    \"Name\": \"example-acl-role\",\n    \"Policies\": [\n      {\n        \"Name\": \"example-acl-policy\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the basename Function in Nomad HCL\nDESCRIPTION: This example shows how the basename function extracts the last portion of a filesystem path. It takes a Unix-style path 'foo/bar/baz.txt' and returns only the filename 'baz.txt'.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/file/basename.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> basename(\"foo/bar/baz.txt\")\nbaz.txt\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Recommendations\nDESCRIPTION: Example demonstrating how to apply multiple recommendations simultaneously for different jobs, showing the results including IDs, namespaces, job IDs, and evaluation IDs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/recommendation/apply.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad recommendation apply a9c041c5-3c04-aa24-bd55-0a80cded4f10 811900b6-da11-ef08-f515-f5e6684007a8\nErrors\nNone\n\nResults\nIDs                                   Namespace  Job ID   Eval ID                               Warnings\na9c041c5-3c04-aa24-bd55-0a80cded4f10  default    example  7c39ad13-0246-ab8e-6c50-9f3ee500bf5f  <none>\n811900b6-da11-ef08-f515-f5e6684007a8  default    demoapp  68236421-c90f-efa6-fc02-37ae2d59bf03  <none>\n```\n\n----------------------------------------\n\nTITLE: Checking Portworx Deployment Status\nDESCRIPTION: Command to check the status of the Portworx deployment job in Nomad.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/portworx-csi-plugin/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnomad job status portworx\n```\n\n----------------------------------------\n\nTITLE: Deleting Nomad ACL Binding Rule Example\nDESCRIPTION: Example showing how to delete an ACL binding rule using its UUID, with successful deletion confirmation message.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/binding-rule/delete.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl binding-rule delete 698fdad6-dcb3-79dd-dc72-b43374057dea\nACL binding rule 698fdad6-dcb3-79dd-dc72-b43374057dea successfully deleted\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Service Tags in Nomad HCL\nDESCRIPTION: This example demonstrates how to configure multiple service blocks with the same name but different ports and tags. It allows for grouping services and querying specific protocols using tags.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/networking/service-discovery.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\njob \"...\" {\n  # ...\n  group \"...\" {\n    network {\n      port \"http\" {}\n      port \"grpc\" {}\n    }\n\n    service {\n      name = \"my-app\"\n      port = \"http\"\n      tags = [\"http\"]\n      # ...\n    }\n\n    service {\n      name = \"my-app\"\n      port = \"grpc\"\n      tags = [\"grpc\"]\n      # ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad with Consul TLS for Service Mesh\nDESCRIPTION: HCL configuration for Nomad to work with Consul Connect when TLS is enabled. Required for Consul 1.14+ which made backwards incompatible changes to TLS-enabled GRPC listeners.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/service-mesh.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nconsul {\n  grpc_ca_file = \"/etc/tls/consul-agent-ca.pem\"\n  grpc_address = \"127.0.0.1:8503\"\n  ca_file      = \"/etc/tls/consul-agent-ca.pem\"\n  cert_file    = \"/etc/tls/dc1-client-consul-0.pem\"\n  key_file     = \"/etc/tls/dc1-client-consul-0-key.pem\"\n  ssl          = true\n  address      = \"127.0.0.1:8501\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Deployments - JSON Response\nDESCRIPTION: Sample JSON response showing deployment details including job information and task group status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/deployments.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"ID\": \"70638f62-5c19-193e-30d6-f9d6e689ab8e\",\n    \"JobID\": \"example\",\n    \"JobVersion\": 1,\n    \"JobModifyIndex\": 17,\n    \"JobSpecModifyIndex\": 17,\n    \"JobCreateIndex\": 7,\n    \"TaskGroups\": {\n      \"cache\": {\n        \"Promoted\": false,\n        \"DesiredCanaries\": 1,\n        \"DesiredTotal\": 3,\n        \"PlacedAllocs\": 1,\n        \"HealthyAllocs\": 0,\n        \"UnhealthyAllocs\": 0\n      }\n    },\n    \"Status\": \"running\",\n    \"StatusDescription\": \"\",\n    \"CreateIndex\": 19,\n    \"ModifyIndex\": 19\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Computing SHA256 Hash in Nomad Shell\nDESCRIPTION: This example demonstrates how to use the sha256 function to compute the SHA256 hash of the string 'hello world'. The function first encodes the input string as UTF-8, applies the SHA256 algorithm, and then encodes the result as lowercase hexadecimal digits.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/crypto/sha256.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> sha256(\"hello world\")\nb94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Linux Capabilities for Docker Containers in Nomad\nDESCRIPTION: This snippet defines the default list of allowed Linux capabilities for Docker containers in Nomad. It includes common capabilities required for most applications while excluding potentially dangerous ones like NET_RAW.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_25\n\nLANGUAGE: hcl\nCODE:\n```\n[\"audit_write\", \"chown\", \"dac_override\", \"fowner\", \"fsetid\", \"kill\", \"mknod\",\n \"net_bind_service\", \"setfcap\", \"setgid\", \"setpcap\", \"setuid\", \"sys_chroot\"]\n```\n\n----------------------------------------\n\nTITLE: Using nomad var lock command syntax\nDESCRIPTION: Shows the basic syntax for the 'nomad var lock' command. The command can either lock an existing variable or create a new variable using a specification file, then execute a child process while holding the lock.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/lock.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad var lock [options] <lock spec file reference> child...\nnomad var lock [options] <path to store variable> [<variable spec file reference>] child\n```\n\n----------------------------------------\n\nTITLE: Installing Packer on Linux\nDESCRIPTION: This snippet downloads and installs the Packer binary on a Linux system. It fetches a specific version (1.6.2) of Packer, unzips it, moves it to the /usr/local/bin directory, and verifies the installation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncurl \"https://releases.hashicorp.com/packer/1.6.2/packer_1.6.2_linux_amd64.zip\" -o packer.zip\nunzip packer.zip\nsudo mv packer /usr/local/bin\npacker --version\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests with Terraform Output\nDESCRIPTION: Commands to set up the environment using Terraform output and run all end-to-end tests. This requires that the Terraform provisioning has been completed.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# from the ./e2e/terraform directory, set your client environment\n# if you haven't already\n$(terraform output environment)\n\ncd ..\ngo test -v ./...\n```\n\n----------------------------------------\n\nTITLE: Nomad Service Delete Command Syntax\nDESCRIPTION: The basic syntax for the nomad service delete command, which requires two arguments: the service name and the service ID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/service/delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad service delete [options] <service_name> <service_id>\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad Node Meta Command\nDESCRIPTION: This snippet shows the basic usage of the 'nomad node meta' command. It includes the command syntax and mentions the two main subcommands: 'apply' for updating metadata and 'read' for retrieving metadata.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node/meta/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nUsage: `nomad node meta <subcommand> [options]`\n```\n\n----------------------------------------\n\nTITLE: Allocating Ports for Go Tests\nDESCRIPTION: Shows the recommended method for dynamically allocating ports in Go tests.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/testing.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nport := ci.PortAllocator.Grab()\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Quota Init Command Usage\nDESCRIPTION: The basic syntax for using the nomad quota init command to generate an example quota specification file.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/quota/init.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad quota init\n```\n\n----------------------------------------\n\nTITLE: CLI Example of file Function in Nomad\nDESCRIPTION: Shows an example of using the file function in a Nomad CLI session. It reads the contents of a file named 'hello.txt' in the current directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/file/file.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> file(\"./hello.txt\")\nHello World\n```\n\n----------------------------------------\n\nTITLE: Basic Substr Example with ASCII Characters\nDESCRIPTION: Example showing how to extract a substring 'ello' from 'hello world' by starting at position 1 and taking 4 characters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/substr.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> substr(\"hello world\", 1, 4)\nello\n```\n\n----------------------------------------\n\nTITLE: Using the length Function with Collections in Nomad Configuration\nDESCRIPTION: Examples of using the length function to determine the number of elements in different collection types. The function works with empty lists, populated lists, and maps, returning the count of elements in each collection.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/length.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> length([])\n0\n> length([\"a\", \"b\"])\n2\n> length({\"a\" = \"b\"})\n1\n```\n\n----------------------------------------\n\nTITLE: Basic TLS CA Info Command Usage in Nomad\nDESCRIPTION: Shows the basic command syntax for retrieving CA certificate information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/tls/ca-info.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad tls ca info <CA file>\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating an ACL Policy with curl in Nomad API\nDESCRIPTION: This curl command shows how to create or update an ACL policy by sending a POST request with a JSON payload to the specified endpoint. The request is forwarded to the authoritative region and requires management ACL permissions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/policies.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://localhost:4646/v1/acl/policy/my-policy\n```\n\n----------------------------------------\n\nTITLE: Configuring USB Device Plugin in Nomad\nDESCRIPTION: An HCL configuration block for the USB device plugin that demonstrates how to enable the plugin and configure inclusion/exclusion lists for vendor and product IDs. It also shows how to set the fingerprint period for device detection.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/devices/usb.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"usb\" {\n  config {\n    enabled = true\n\n    included_vendor_ids = [0x1CF1, 0x067b]\n    excluded_vendor_ids = []\n\n    included_product_ids = [0x0030, 0x2303]\n    excluded_product_ids = []\n\n    fingerprint_period = \"1m\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Raw Exec Job with None Isolation in Nomad\nDESCRIPTION: A minimal Nomad job specification that demonstrates the 'none' isolation mode using the raw_exec driver. This runs a job without filesystem isolation, providing access to the host filesystem.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/filesystem.mdx#2025-04-19_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\njob \"example\" {\n  datacenters = [\"dc1\"]\n\n  task \"task3\" {\n    driver = \"raw_exec\"\n\n    config {\n      command = \"/bin/sh\"\n      args = [\"-c\", \"sleep 600\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Firecracker Task in Nomad Job Specification (HCL)\nDESCRIPTION: This snippet shows how to configure a Firecracker task in a Nomad job specification. It includes settings for kernel image, Firecracker binary location, CPU, memory, and network.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/firecracker-task-driver.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"test01\" {\n  driver = \"firecracker-task-driver\"\n\n  config {\n    KernelImage = \"/home/build/hello-vmlinux.bin\"\n    Firecracker = \"/home/build/firecracker\"\n    Vcpus       = 1\n    Mem         = 128\n    Network     = \"default\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample response from ACL Role creation in Nomad\nDESCRIPTION: JSON response returned after successfully creating an ACL Role, showing the generated ID, indexes, and the data provided in the request.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/roles.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CreateIndex\": 26,\n  \"Description\": \"my example ACL Role\",\n  \"ID\": \"77c50812-fcdd-701b-9f1a-6cf55387b09d\",\n  \"ModifyIndex\": 26,\n  \"Name\": \"example-acl-role\",\n  \"Policies\": [\n    {\n      \"Name\": \"example-acl-policy\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: S3 Artifact with Explicit Protocol Prefix in Nomad\nDESCRIPTION: Example showing how to force the S3-specific syntax using the s3:: prefix when downloading from an S3 bucket. This explicit format may be necessary for some S3-compatible storage providers.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/artifact.mdx#2025-04-19_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nartifact {\n  source = \"s3::https://my-bucket-example.s3-eu-west-1.amazonaws.com/my_app.tar.gz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PluginInfo Function in Go for Nomad Autoscaler Plugin\nDESCRIPTION: This code snippet demonstrates how to implement the PluginInfo function for a Prometheus APM plugin in the Nomad Autoscaler. It returns a PluginInfo struct containing metadata about the plugin, including its name and type.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/concepts/plugins/base.mdx#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nPluginInfo{\n    // Name of the plugin\n    Name: \"prometheus\",\n    // Plugin type: \"apm\", \"strategy\", or \"target\"\n    PluginType: \"apm\"\n}\n```\n\n----------------------------------------\n\nTITLE: Payload for Deleting Evaluations in Nomad API\nDESCRIPTION: JSON payload structure for the delete evaluations endpoint. The payload contains an array of evaluation UUIDs to be deleted. This operation should be used cautiously and only during outage situations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/evaluations.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"EvalIDs\": [\n    \"167ec27d-2e36-979a-280a-a6b920d382db\",\n    \"6c193955-ac66-42e2-f4c7-f1fc707f1f5e\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Detailed Nomad Service Check Status via CLI\nDESCRIPTION: Example of using the 'nomad alloc checks' command to view complete status information for all checks in an allocation, including IDs, names, statuses, timestamps, and output details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/check.mdx#2025-04-19_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc checks <allocation-id>\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nStatus of 3 Nomad Service Checks\n\nID         =  d8651d93a50b9e28375a7beb9418c418\nName       =  db_tcp_probe\nGroup      =  example.group[0]\nTask       =  task\nService    =  database\nStatus     =  success\nMode       =  readiness\nTimestamp  =  2022-08-22T10:41:23-05:00\nOutput     =  nomad: tcp ok\n\nID          =  0413b61bda7014f02671675d7e146373\nName        =  index-page\nGroup       =  example.group[0]\nTask        =  (group)\nService     =  web\nStatus      =  success\nStatusCode  =  200\nMode        =  healthiness\nTimestamp   =  2022-08-22T10:41:23-05:00\nOutput      =  nomad: http ok\n\nID         =  c3cce3f0c97975f84bbf39bdd50deaea\nName       =  healthz\nGroup      =  example.group[0]\nTask       =  (group)\nService    =  web\nStatus     =  failure\nMode       =  healthiness\nTimestamp  =  2022-08-22T10:41:23-05:00\nOutput     =  nomad: Get \"http://:9999/\": dial tcp :9999: connect: connection refused\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Nested Block Limitations in HCL for Nomad\nDESCRIPTION: Example showing how nested blocks like 'port' normally only accept literal blocks, not expressions. This illustrates the limitation that dynamic blocks address.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/expressions.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nnetwork {\n  mode = \"host\" # can use expressions here\n\n  port \"label\" {\n    # but the \"port\" block is always a literal block\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Node Pool List Response in JSON\nDESCRIPTION: This JSON snippet shows the structure of the response when listing node pools. It includes details such as creation index, description, metadata, and scheduler configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/node-pools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"CreateIndex\": 11,\n    \"Description\": \"Production workloads\",\n    \"Meta\": {\n      \"env\": \"production\",\n      \"team\": \"engineering\"\n    },\n    \"ModifyIndex\": 11,\n    \"Name\": \"prod-eng\",\n    \"SchedulerConfiguration\": {\n      \"SchedulerAlgorithm\": \"spread\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining AWS IAM Policy for ASG Plugin in JSON\nDESCRIPTION: This JSON snippet defines the IAM policy required for the AWS ASG plugin to function properly. It grants permissions for AutoScaling group operations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/target/aws-asg.mdx#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"autoscaling:UpdateAutoScalingGroup\",\n        \"autoscaling:DescribeScalingActivities\",\n        \"autoscaling:DescribeAutoScalingGroups\",\n        \"autoscaling:CreateOrUpdateTags\",\n        \"autoscaling:TerminateInstanceInAutoScalingGroup\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Standard Go Tests\nDESCRIPTION: Command to run tests that use the standard Go testing package without the notion of \"suites\".\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/README.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngo test -v . -run TestExample/TestExample_Simple\n```\n\n----------------------------------------\n\nTITLE: Deleting a Nomad Service Example\nDESCRIPTION: Example showing how to delete a specific Redis cache service registration using the nomad service delete command.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/service/delete.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad service delete example-cache-redis _nomad-task-a831f7f2-4c01-39dc-c742-f2b8ca178a49-redis-example-cache-redis-db\nSuccessfully deleted service registration\n```\n\n----------------------------------------\n\nTITLE: Listing ACL Binding Rules Example\nDESCRIPTION: Example showing how to list all ACL binding rules with their IDs, descriptions, and authentication methods.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/binding-rule/list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl binding-rule list\nID                                    Description           Auth Method\ndc0e494d-0878-4e56-37d4-482e371e5bdb  example binding rule  auth0\n```\n\n----------------------------------------\n\nTITLE: Promoting Deployment with cURL in Shell\nDESCRIPTION: This snippet demonstrates how to use cURL to send a POST request to promote a deployment. It shows the endpoint structure and how to include the deployment ID in the URL.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/deployments.mdx#2025-04-19_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    https://localhost:4646/v1/deployment/promote/5456bd7a-9fc0-c0dd-6131-cbee77f57577\n```\n\n----------------------------------------\n\nTITLE: Using the nomad recommendation info command in Nomad Enterprise\nDESCRIPTION: Basic syntax for using the nomad recommendation info command, which requires a recommendation ID as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/recommendation/info.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad recommendation info [options] <recommendation_id>\n```\n\n----------------------------------------\n\nTITLE: Simple Server Address retry_join Configuration in HCL\nDESCRIPTION: A server_join configuration with just the retry_join parameter specifying direct server IP addresses to connect to. This is used when server addresses are known in advance.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/server_join.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nserver_join {\n  retry_join = [ \"1.1.1.1\", \"2.2.2.2\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Indent Function Usage in Shell Session\nDESCRIPTION: This example demonstrates how to use the indent function to insert a multi-line string into an already-indented context. It indents all lines except the first by 2 spaces.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/indent.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> \"  items: %{indent(2, \"[\\n  foo,\\n  bar,\\n]\\n\")}\"\n  items: [\n    foo,\n    bar,\n  ]\n```\n\n----------------------------------------\n\nTITLE: Creating Consul ACL Binding Rule for Tasks\nDESCRIPTION: This shell command creates a Consul ACL binding rule for Nomad tasks. It associates the Consul ACL token with an ACL role, which defines the permissions for tasks to access information from Consul.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/acl.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nconsul acl binding-rule create \\\n  -method 'nomad-workloads' \\\n  -bind-type 'role' \\\n  -bind-name 'nomad-tasks-${value.nomad_namespace}' \\\n  -selector '\"nomad_service\" not in value'\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation to Input Variables\nDESCRIPTION: Example showing how to add a description to a variable to document its purpose. Good documentation helps users understand what values are expected.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/variables.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"image_id\" {\n  type        = string\n  description = \"The docker image used for task.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enos Variables Configuration\nDESCRIPTION: HCL configuration for Enos variables including authentication tokens, version specifications, and regional settings\nSOURCE: https://github.com/hashicorp/nomad/blob/main/enos/README.md#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nartifactory_username = \"<your email address>\"\nartifactory_token    = \"<your ARTIFACTORY_TOKEN from above>\"\nproduct_version      = \"1.8.9\"                        # starting version\nupgrade_version      = \"1.9.4\"                        # version to upgrade to\ndownload_binary_path = \"/home/foo/Downloads/nomad\"    # directory on your machine to download binaries\nnomad_license        = \"<your Nomad Enterprise license, when running Nomad ENT>\"\nconsul_license       = \"<your Consul Enterprise license, currently always required>\"\naws_region           = \"us-east-1\"\n```\n\n----------------------------------------\n\nTITLE: Complete Deployment Status Example\nDESCRIPTION: Demonstrates checking status of a successful deployment showing task group placement and health information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/deployment/status.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad deployment status 06ca68a2\nID          = 06ca68a2\nJob ID      = example\nJob Version = 0\nStatus      = successful\nDescription = Deployment completed successfully\n\nDeployed\nTask Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline\ncache       2        2       2        0          2021-06-09T15:20:27-07:00\nweb         2        2       2        0          2021-06-09T15:20:27-07:00\n```\n\n----------------------------------------\n\nTITLE: Implementing Run Function for Nomad Strategy Plugin in Go\nDESCRIPTION: The Run function is a core component of the strategy plugin interface that processes scaling evaluations. It takes a scaling check evaluation and current count as input, and returns an updated evaluation containing the scaling decision.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/concepts/plugins/strategy.mdx#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nRun(eval *sdk.ScalingCheckEvaluation, count int64) (*sdk.ScalingCheckEvaluation, error)\n```\n\n----------------------------------------\n\nTITLE: Implementing SignalTask Function for Nomad Driver in Go\nDESCRIPTION: The SignalTask function is used by drivers that support sending OS signals to tasks. It takes a taskID and signal string as parameters and returns an error. This function is optional and can be skipped by embedding drivers.DriverSignalTaskNotSupported.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/plugins/task-drivers.mdx#2025-04-19_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nSignalTask(taskID string, signal string) error\n```\n\n----------------------------------------\n\nTITLE: Listing All Root Keys in the Keyring\nDESCRIPTION: This snippet demonstrates how to retrieve a list of all root keys known to the Nomad cluster. Only key metadata is returned, not the actual key material. Requires management ACL token.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/keyring.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/operator/keyring/keys\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Algorithm\": \"aes256-gcm\",\n    \"CreateIndex\": 13,\n    \"CreateTime\": 1662665630638648800,\n    \"KeyID\": \"26cbda57-e01e-188d-5f39-b6e3fca95a5b\",\n    \"ModifyIndex\": 13,\n    \"State\": \"active\"\n  },\n  {\n    \"Algorithm\": \"aes256-gcm\",\n    \"CreateIndex\": 6,\n    \"CreateTime\": 1662665528857979100,\n    \"KeyID\": \"64b96f4b-f167-f2dd-9148-7867f7e420e3\",\n    \"ModifyIndex\": 12,\n    \"State\": \"inactive\"\n  },\n  {\n    \"Algorithm\": \"aes256-gcm\",\n    \"CreateIndex\": 12,\n    \"CreateTime\": 1662665624108063000,\n    \"KeyID\": \"f9725e52-9b49-5b55-a8eb-083e23db4a3e\",\n    \"ModifyIndex\": 13,\n    \"State\": \"inactive\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving OIDC Configuration Metadata\nDESCRIPTION: This snippet shows how to access the OIDC configuration metadata endpoint for using workload identities with third-party services. This allows Nomad to act as an identity provider for authenticating workload identity JWTs.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/operator/keyring.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad operator api '/.well-known/openid-configuration'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id_token_signing_alg_values_supported\": [\n    \"RS256\",\n    \"EdDSA\"\n  ],\n  \"issuer\": \"http://example.com\",\n  \"jwks_uri\": \"http://example.com/.well-known/jwks.json\",\n  \"response_types_supported\": [\n    \"code\"\n  ],\n  \"subject_types_supported\": [\n    \"public\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an ACL Auth Method in Nomad\nDESCRIPTION: This example demonstrates how to delete an existing ACL Auth Method named 'example-auth-method' using the Nomad CLI. It also shows the success message returned upon successful deletion.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/auth-method/delete.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl auth-method delete example-auth-method\nACL auth method example-auth-method successfully deleted\n```\n\n----------------------------------------\n\nTITLE: Using Nomad CLI with Remote Cluster (Command-line Flag)\nDESCRIPTION: This command shows how to use the Nomad CLI with a remote Nomad cluster by specifying the address directly in the command using the -address flag. It provides an alternative to setting the environment variable.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/index.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ nomad status -address=https://remote-address:4646\n```\n\n----------------------------------------\n\nTITLE: Starting Vagrant Nomad Demo Environment\nDESCRIPTION: Command to initialize and start the Vagrant environment for the Nomad demo.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/vagrant/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ vagrant up\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Absolute Value Function in Nomad Shell\nDESCRIPTION: This snippet shows examples of using the 'abs' function with different numeric inputs. It demonstrates how the function handles positive, zero, and negative values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/numeric/abs.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> abs(23)\n23\n> abs(0)\n0\n> abs(-12.4)\n12.4\n```\n\n----------------------------------------\n\nTITLE: Basic cidrsubnets Function Syntax in HCL\nDESCRIPTION: Demonstrates the basic syntax for the cidrsubnets function which calculates consecutive IP address ranges within a CIDR prefix. It accepts a prefix in CIDR notation and multiple newbits arguments to specify additional network prefix bits for each returned range.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/ipnet/cidrsubnets.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncidrsubnets(prefix, newbits...)\n```\n\n----------------------------------------\n\nTITLE: formatdate Literal Character Examples\nDESCRIPTION: Shows how to include literal characters and quotes in format strings using single quotes and escape sequences.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/datetime/formatdate.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n> formatdate(\"h'h'mm\", \"2018-01-02T23:12:01-08:00\")\n23h12\n> formatdate(\"H 'o''clock'\", \"2018-01-02T23:12:01-08:00\")\n11 o'clock\n```\n\n----------------------------------------\n\nTITLE: Chunklist Function Syntax - HCL\nDESCRIPTION: Basic syntax for using the chunklist function, which takes a list and chunk_size as parameters to split a list into smaller chunks.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/chunklist.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nchunklist(list, chunk_size)\n```\n\n----------------------------------------\n\nTITLE: Binary Address Representation Example\nDESCRIPTION: Illustrates the binary representation of an IP address showing network and host portions for the example 10.1.2.0/24.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/ipnet/cidrsubnet.mdx#2025-04-19_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n      10 .        1 .        2 .        0\n00001010   00000001   00000010 | 00000000\n         network               |   host\n```\n\n----------------------------------------\n\nTITLE: Querying pprof Profiles from Nomad API\nDESCRIPTION: Shows how to fetch various pprof profiles (goroutine, CPU profile, trace) from the Nomad API and analyze them with the Go profiling tools. Uses curl to retrieve profiles with authentication token and server/node identification.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/agent.mdx#2025-04-19_snippet_16\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl -O -J \\\n    --header \"X-Nomad-Token: 8176afd3-772d-0b71-8f85-7fa5d903e9d4\" \\\n    \"https://localhost:4646/v1/agent/pprof/goroutine?server_id=leader\"\n\n$ go tool pprof goroutine\n\n$ curl -O -J \\\n    --header \"X-Nomad-Token: 8176afd3-772d-0b71-8f85-7fa5d903e9d4\" \\\n    \"https://localhost:4646/v1/agent/pprof/profile?seconds=5&node_id=a57b2adb-1a30-2dda-8df0-25abb0881952\"\n\n$ go tool pprof profile\n\n$ curl -O -J \\\n    --header \"X-Nomad-Token: 8176afd3-772d-0b71-8f85-7fa5d903e9d4\" \\\n    \"https://localhost:4646/v1/agent/pprof/trace?&seconds=5&server_id=server1.global\"\n\ngo tool trace trace\n```\n\n----------------------------------------\n\nTITLE: cURL command for updating an ACL Role in Nomad\nDESCRIPTION: Shell command using cURL to update an existing ACL Role by sending a POST request with the role ID in the URL path and an updated payload.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/roles.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --header \"X-Nomad-Token: <NOMAD_TOKEN_SECRET_ID>\" \\\n    --data @payload.json \\\n    https://localhost:4646/v1/acl/role/77c50812-fcdd-701b-9f1a-6cf55387b09d\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificates with Nomad TLS for Default and Region-Specific Configurations\nDESCRIPTION: Commands to generate CA certificates and keys, along with server and client certificates for both default values and the 'regionFoo' region using the Nomad TLS command.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/helper/tlsutil/testdata/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Generate CA certificate and key.\nnomad tls ca create\n\n# Generate certificates and keys with default values.\n# 1. Generate server certificate with default values\n# 2. Generate client certificate with default values\nnomad tls cert create -server\nnomad tls cert create -client\n\n# Generate certificates and keys for region regionFoo.\n# 1. Generate server certificate for region regionFoo\n# 2. Generate client certificate for region regionFoo\nnomad tls cert create -server -region regionFoo\nnomad tls cert create -client -region regionFoo\n```\n\n----------------------------------------\n\nTITLE: Inspecting Basic Workload Identity Claims in JSON\nDESCRIPTION: Example of the basic claims included in a Nomad workload identity JWT for tasks. The claims identify the namespace, job ID, allocation ID, and task name.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/workload-identity.mdx#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nomad_namespace\": \"default\",\n  \"nomad_job_id\": \"example\",\n  \"nomad_allocation_id\": \"5c6328f7-48c5-4d03-bada-91ef2e904d0d\",\n  \"nomad_task\": \"web\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing app-sizing-avg Strategy in Policy Check\nDESCRIPTION: HCL configuration block for using the app-sizing-avg strategy within a check block in a Nomad Autoscaler policy. This plugin doesn't require any additional configuration parameters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/strategy/app-sizing-avg.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ncheck \"avg\" {\n  strategy \"app-sizing-avg\" {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Rookout Task in Nomad\nDESCRIPTION: Basic configuration example for running a Java application with Rookout integration in Nomad. Demonstrates how to specify the driver and Rookout token.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/rookout.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"run-with-rookout\" {\n  driver = \"java-rookout\"\n\n  config {\n    rookout_token = \"ea15c38c4e05cf4549b...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Logs API Response\nDESCRIPTION: Example response showing the structure of log stream data including file information and base64 encoded content.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/client.mdx#2025-04-19_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n({\n  \"File\": \"alloc/logs/redis.stdout.0\",\n  \"Offset\": 3604480,\n  \"Data\": \"NTMxOTMyCjUzMTkzMwo1MzE5MzQKNTMx...\"\n},\n{\n  \"File\": \"alloc/logs/redis.stdout.0\",\n  \"FileEvent\": \"file deleted\"\n})\n```\n\n----------------------------------------\n\nTITLE: Creating CSI Volume in Nomad (Shell)\nDESCRIPTION: Shell command to create a CSI volume using the Nomad API. Uses curl to send a PUT request with the JSON payload to the specified endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request PUT \\\n    --data @payload.json \\\n    https://localhost:4646/v1/volume/csi/volume-id1\n```\n\n----------------------------------------\n\nTITLE: Usage of nomad var put command\nDESCRIPTION: Shows the basic syntax for using the nomad var put command. It can be used with a variable spec file reference or with key-value pairs directly.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/put.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad var put [options] <variable spec file reference> [<key>=<value>]...\nnomad var put [options] <path to store variable> [<variable spec file reference>] [<key>=<value>]...\n```\n\n----------------------------------------\n\nTITLE: Adding HashiCorp Repository on Ubuntu/Debian\nDESCRIPTION: This command adds the official HashiCorp Linux test repository to the system's package sources on Ubuntu or Debian systems.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/virt/install.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ echo \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) test\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\n```\n\n----------------------------------------\n\nTITLE: Configuring Bind Mounts for Singularity Containers\nDESCRIPTION: Configuration for binding host paths to container paths, allowing data to be shared between the host and the container with optional read/write options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/singularity.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  bind = [ \"host/path:/container/path\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Device Quota Specification\nDESCRIPTION: Example quota specification showing how to set device limits.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/plugins/device/cmd/example/README.md#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nname = \"dev\"\nlimit {\n  region = \"global\"\n  region_limit {\n    device \"nomad/file/mock\" {\n      count = 2 # to allow for deployments/reschedules\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Init Process in Podman Container\nDESCRIPTION: Runs an init process inside the container to forward signals and reap processes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  init = true\n}\n```\n\n----------------------------------------\n\nTITLE: Basic cidrsubnet Function Syntax in HCL\nDESCRIPTION: Demonstrates the basic syntax for using the cidrsubnet function which takes three parameters: prefix (in CIDR notation), newbits (number of additional bits), and netnum (network number).\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/ipnet/cidrsubnet.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncidrsubnet(prefix, newbits, netnum)\n```\n\n----------------------------------------\n\nTITLE: Using filebase64 Function Syntax in Nomad Configuration\nDESCRIPTION: The basic syntax for the filebase64 function that takes a file path as input and returns the file contents as a base64-encoded string.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/file/filebase64.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfilebase64(path)\n```\n\n----------------------------------------\n\nTITLE: Basic strlen Function Syntax in HCL\nDESCRIPTION: Demonstrates the basic syntax of the strlen function in HCL. The function takes a string as its only parameter and returns the number of characters in that string.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/strlen.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstrlen(string)\n```\n\n----------------------------------------\n\nTITLE: Limitations of 'can' Function in Nomad Configuration\nDESCRIPTION: Illustrates that the 'can' function does not catch errors related to invalid constructs or undeclared references. This example shows an error when trying to use 'can' with an undeclared local value.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/conversion/can.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> can(local.nonexist)\n\nError: Reference to undeclared local value\n\nA local value with the name \"nonexist\" has not been declared.\n```\n\n----------------------------------------\n\nTITLE: Job with Forbidden Node Pool\nDESCRIPTION: Example of a job that will fail to register because it attempts to use a node pool that is denied by its namespace configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/node-pools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\njob \"app-dev\" {\n  namespace = \"dev\"\n\n  # Jobs in the \"dev\" namespace are not allowed to use the\n  # \"prod\" node pool and so this job will fail to register.\n  node_pool = \"prod\"\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting NOMAD_ADDR Environment Variable for IPv6 (Bash)\nDESCRIPTION: This command sets the NOMAD_ADDR environment variable to use an IPv6 address for connecting to the Nomad API and UI.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/ipv6-support.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport NOMAD_ADDR='http://[2001:db8::1]:4646'\n```\n\n----------------------------------------\n\nTITLE: Displaying verbose server members view\nDESCRIPTION: Example showing the verbose output of the 'nomad server members' command using the -verbose flag, which includes additional details and tags for each server.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/server/members.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad server members -verbose\nName             Address    Port  Status  Leader  Protocol  Raft Version  Build  Datacenter  Region  Tags\nserver-1.global  10.0.0.8   4648  alive   true    2         3             1.3.0  dc1         global  id=46122039-7c4d-4647-673a-81786bce2c23,rpc_addr=10.0.0.8,role=nomad,region=global,raft_vsn=3,expect=3,dc=dc1,build=1.3.0,port=4647\nserver-2.global  10.0.0.9   4648  alive   false   2         3             1.3.0  dc1         global  id=04594bee-fec9-4cec-f308-eebe82025ae7,dc=dc1,expect=3,rpc_addr=10.0.0.9,raft_vsn=3,port=4647,role=nomad,region=global,build=1.3.0\nserver-3.global  10.0.0.10  4648  alive   false   2         3             1.3.0  dc1         global  region=global,dc=dc1,rpc_addr=10.0.0.10,raft_vsn=3,build=1.3.0,expect=3,id=59542f6c-fb0e-50f1-4c9f-98bb593e9fe8,role=nomad,port=4647\n```\n\n----------------------------------------\n\nTITLE: Applying an ACL Policy to an Entire Job using CLI\nDESCRIPTION: Command to apply an ACL policy to all tasks within a job. This associates the policy with the workload identities of all tasks in all groups of the example job.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/workload-identity.mdx#2025-04-19_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\nnomad acl policy apply \\\n   -namespace default -job example \\\n   redis-policy ./policy.hcl\n```\n\n----------------------------------------\n\nTITLE: Configuring denied environment variables in Raw Exec plugin\nDESCRIPTION: Configuration for specifying environment variables that should be scrubbed from task environments. Supports globbing patterns to filter sensitive environment variables.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/raw_exec.mdx#2025-04-19_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  denied_envvars = [\"AWS_SECRET_KEY\", \"*_TOKEN\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic CA Certificate\nDESCRIPTION: This example demonstrates how to create a basic CA certificate using the 'nomad tls ca create' command. It generates and saves the CA certificate and key files.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/tls/ca-create.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad tls ca create\n==> CA Certificate saved to: nomad-agent-ca.pem\n==> CA Certificate key saved to: nomad-agent-ca-key.pem\n```\n\n----------------------------------------\n\nTITLE: Starting a Persistent Nomad Server\nDESCRIPTION: Command to start a Nomad server with a persistent configuration. This allows the server to maintain state when stopped and restarted, unlike the development mode configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/dev/docker-clients/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnomad agent -config persistent.hcl\n```\n\n----------------------------------------\n\nTITLE: Registering a Service in Nomad HCL\nDESCRIPTION: This snippet demonstrates how to register a service in a Nomad job specification using the 'service' block. It specifies the service name, port, and provider.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/networking/service-discovery.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"...\" {\n  # ...\n  group \"...\" {\n    service {\n      name     = \"database\"\n      port     = \"db\"\n      provider = \"nomad\"\n      # ...\n    }\n    # ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: cURL command for listing ACL Roles in Nomad\nDESCRIPTION: Shell command using cURL to retrieve a list of all ACL Roles by sending a GET request to the roles endpoint with an authentication token.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/roles.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Nomad-Token: <NOMAD_TOKEN_SECRET_ID>\" \\\n    https://localhost:4646/v1/acl/roles\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul for Service Mesh in HCL Format\nDESCRIPTION: HCL configuration for enabling Consul service mesh on a non-dev Consul agent. This enables the required GRPC port and turns on the Connect feature.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/service-mesh.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# ...\n\nports {\n  grpc = 8502\n}\n\nconnect {\n  enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining String Variable in Nomad HCL\nDESCRIPTION: Example of defining a string variable 'foo' in Nomad's HCL configuration. Shows basic variable declaration without a default value, demonstrating required value behavior.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/variables.mdx#2025-04-19_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"foo\" {\n  type = string\n}\n```\n\n----------------------------------------\n\nTITLE: Using the nomad operator client-state Command in Plaintext\nDESCRIPTION: This snippet demonstrates the usage syntax for the 'nomad operator client-state' command. When executed, it generates a JSON representation of the stored client state in Nomad.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/client-state.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator client-state\n```\n\n----------------------------------------\n\nTITLE: Planning Terraform Infrastructure Changes\nDESCRIPTION: This command creates a Terraform plan, showing what changes will be made to the infrastructure based on the current configuration and variable values.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_20\n\nLANGUAGE: console\nCODE:\n```\nterraform plan -var=\"project=${GOOGLE_PROJECT}\" -var=\"credentials=${GOOGLE_APPLICATION_CREDENTIALS}\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to Terraform environment directory\nDESCRIPTION: Command to change to the East US environment directory containing Terraform configuration for that region. Each region has its own deployment configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/azure/README.md#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ cd env/EastUS\n```\n\n----------------------------------------\n\nTITLE: Exec2 Plugin Configuration Example\nDESCRIPTION: Configuration options for the Exec2 plugin at the Nomad client level, showing how to control filesystem access defaults and permissions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/exec2.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"nomad-driver-exec2\" {\n  config {\n    unveil_defaults = true\n    unveil_paths    = []\n    unveil_by_task  = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending SIGUSR1 Signal to Nomad Agent\nDESCRIPTION: This snippet shows how to send a SIGUSR1 signal to the Nomad agent using systemctl on Linux. This signal causes Nomad to print its metrics without stopping the agent.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/operations/nomad-agent.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo systemctl kill nomad -s SIGUSR1\n```\n\n----------------------------------------\n\nTITLE: Generating CA Certificate for Whitespace Testing\nDESCRIPTION: Command to create a CA certificate for testing whitespace handling in certificate files. Manual editing is required to add whitespace after the certificate end marker.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/helper/tlsutil/testdata/README.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Generate CA certificate and key.\nnomad tls ca create -name-constraint=true -domain whitespace\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Pool Fields with Sentinel in Nomad\nDESCRIPTION: Examples of how to access Node Pool fields using Sentinel syntax. The examples demonstrate accessing the description and scheduler configuration properties of a node pool object.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/enterprise/sentinel.mdx#2025-04-19_snippet_4\n\nLANGUAGE: sentinel\nCODE:\n```\nnode_pool.description\nnode_pool.scheduler_configuration.scheduler_algorithm\n```\n\n----------------------------------------\n\nTITLE: Listing Nodes in Prod Pool\nDESCRIPTION: Example showing how to list all nodes in the 'prod' node pool with their basic information including ID, datacenter, name, class, drain status, eligibility, and status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/nodes.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad node pool nodes prod\nID        DC   Name      Class   Drain  Eligibility  Status\n31c5347f  dc2  client-3  <none>  false  eligible     ready\n3ed547cd  dc1  client-1  <none>  false  eligible     ready\n6e98e378  dc2  client-2  <none>  false  eligible     ready\n```\n\n----------------------------------------\n\nTITLE: Example of cidrnetmask Function with IPv4 CIDR Notation\nDESCRIPTION: A practical example of using the cidrnetmask function to convert the CIDR notation '172.16.0.0/12' to its corresponding subnet mask in dotted-decimal format, resulting in '255.240.0.0'.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/ipnet/cidrnetmask.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> cidrnetmask(\"172.16.0.0/12\")\n255.240.0.0\n```\n\n----------------------------------------\n\nTITLE: Executing a Sentinel Policy Deletion in Nomad\nDESCRIPTION: Example of using the nomad sentinel delete command to delete a Sentinel policy named 'foo', with the success confirmation message displayed.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/sentinel/delete.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad sentinel delete foo\nSuccessfully deleted \"foo\" Sentinel policy!\n```\n\n----------------------------------------\n\nTITLE: Defining setintersection Function Signature in HCL\nDESCRIPTION: Shows the function signature for the setintersection function which takes multiple sets as arguments and returns their intersection.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/setintersection.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsetintersection(sets...)\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes Service YAML Configuration\nDESCRIPTION: A Kubernetes Service manifest that defines how a set of Pods are accessed. This configuration creates a service named 'my-service' that selects Pods with the label 'app.kubernetes.io/name: MyApp' and maps port 80 to the Pods' port 9376.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/networking/index.mdx#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\nspec:\n  selector:\n    app.kubernetes.io/name: MyApp\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 9376\n```\n\n----------------------------------------\n\nTITLE: Configuring Disconnect Block in Nomad Job Specification\nDESCRIPTION: Example of configuring disconnect blocks in a Nomad job specification to handle network partitions. This example demonstrates two group configurations: one using 'lost_after' and another using 'stop_on_client_after'.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/disconnect.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njob \"docs\" {\n  group \"example\" {\n    disconnect {\n      lost_after = \"6h\"\n      replace = false\n      reconcile = \"keep_original\"\n    }\n  }\n\n  group \"example2\" {\n    disconnect {\n      stop_on_client_after = \"12h\"\n      replace = false\n      reconcile = \"keep_original\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Config Validate Command Usage\nDESCRIPTION: Shows the basic syntax for using the nomad config validate command to validate one or more configuration files.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/config/validate.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad config validate <config_path> [<config_path...>]\n```\n\n----------------------------------------\n\nTITLE: Using max function with a collection in Nomad HCL\nDESCRIPTION: Example of using the max function with a list of numbers that is expanded into individual arguments using the spread operator (...) to find the greatest value.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/numeric/max.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> max([12, 54, 3]...)\n54\n```\n\n----------------------------------------\n\nTITLE: Using nomad deployment unblock command\nDESCRIPTION: The basic usage of the `nomad deployment unblock` command, which requires a deployment ID or prefix as an argument. It also mentions ACL requirements when enabled.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/deployment/unblock.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad deployment unblock [options] <deployment id>\n```\n\n----------------------------------------\n\nTITLE: Nomad Operator Autopilot Configuration Output\nDESCRIPTION: Example output showing all Autopilot configuration parameters including cleanup settings, thresholds, and migration options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/autopilot/get-config.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad operator autopilot get-config\nCleanupDeadServers = true\nLastContactThreshold = 200ms\nMaxTrailingLogs = 250\nServerStabilizationTime = 10s\nRedundancyZoneTag = \"\"\nDisableUpgradeMigration = false\nUpgradeMigrationTag = \"\"\n```\n\n----------------------------------------\n\nTITLE: Destroying Terraform Infrastructure\nDESCRIPTION: This command destroys all the infrastructure resources created by Terraform, effectively cleaning up the deployed Nomad cluster and associated resources.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_24\n\nLANGUAGE: console\nCODE:\n```\nterraform destroy -force -var=\"project=${GOOGLE_PROJECT}\" -var=\"credentials=${GOOGLE_APPLICATION_CREDENTIALS}\"\n```\n\n----------------------------------------\n\nTITLE: Element Function Wrap-Around Behavior Example in Shell Session\nDESCRIPTION: An example demonstrating the wrap-around behavior of the element function, where the index is taken modulo the length of the list when the index exceeds the list length.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/collection/element.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n> element([\"a\", \"b\", \"c\"], 3)\na\n```\n\n----------------------------------------\n\nTITLE: Lock Conflict Response - JSON\nDESCRIPTION: Server response when attempting to access a locked variable without proper permissions.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/variables/locks.mdx#2025-04-19_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CreateIndex\": 0,\n  \"CreateTime\": 0,\n  \"Items\": null,\n  \"Lock\": null,\n  \"ModifyIndex\": 0,\n  \"ModifyTime\": 0,\n  \"Namespace\": \"default\",\n  \"Path\": \"example/first\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Eval Delete Command\nDESCRIPTION: The basic usage of the `nomad eval delete` command, which can take an optional evaluation ID or use filters to delete multiple evaluations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/eval/delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad eval delete [options] [args]\n```\n\n----------------------------------------\n\nTITLE: Generating a GCP Project ID\nDESCRIPTION: This command generates a unique project ID for a new GCP project by combining 'nomad-gcp-' with a random string of characters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nexport GOOGLE_PROJECT=\"nomad-gcp-$(cat /dev/random | head -c 5 | xxd -p)\"\n```\n\n----------------------------------------\n\nTITLE: Using Nomad Node Pool Info Command\nDESCRIPTION: The basic usage of the 'nomad node pool info' command, which requires specifying the node pool name and optional flags.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/info.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad node pool info [options] <node-pool>\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Sidebar Structure\nDESCRIPTION: Example of directory structure and corresponding JSON configuration for documentation navigation sidebars.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/README.md#2025-04-19_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n.\n├── docs\n│   └── directory\n│       ├── index.mdx\n│       ├── file.mdx\n│       ├── another-file.mdx\n│       └── nested-directory\n│           ├── index.mdx\n│           └── nested-file.mdx\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"title\": \"Directory\",\n    \"routes\": [\n      {\n        \"title\": \"Overview\",\n        \"path\": \"directory\"\n      },\n      {\n        \"title\": \"File\",\n        \"path\": \"directory/file\"\n      },\n      {\n        \"title\": \"Another File\",\n        \"path\": \"directory/another-file\"\n      },\n      {\n        \"title\": \"Nested Directory\",\n        \"routes\": [\n          {\n            \"title\": \"Overview\",\n            \"path\": \"directory/nested-directory\"\n          },\n          {\n            \"title\": \"Nested File\",\n            \"path\": \"directory/nested-directory/nested-file\"\n          }\n        ]\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Lock Release Response - JSON\nDESCRIPTION: Server response showing the variable state after lock release.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/variables/locks.mdx#2025-04-19_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CreateIndex\": 11,\n  \"CreateTime\": 1694555280887153000,\n  \"ModifyIndex\": 66,\n  \"ModifyTime\": 1694556922600469000,\n  \"Namespace\": \"prod\",\n  \"Path\": \"example/first\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Node Pool Nodes Command Usage\nDESCRIPTION: Shows the basic syntax for using the nomad node pool nodes command with options and node-pool parameter.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/nodes.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad node pool nodes [options] <node-pool>\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Shell Session\nDESCRIPTION: Shows a shell session example of using fileexists to check if hello.txt exists in the current directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/file/fileexists.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> fileexists(\"./hello.txt\")\ntrue\n```\n\n----------------------------------------\n\nTITLE: License Inspection with License String Environment Variable\nDESCRIPTION: Example demonstrating license inspection using the NOMAD_LICENSE environment variable containing the full license text.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/license/inspect.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ export NOMAD_LICENSE=full-license-text-string\n$ nomad license inspect\nSource: NOMAD_LICENSE environment variable\n.....\nLicense is valid\n```\n\n----------------------------------------\n\nTITLE: Restart Allocation Response - JSON\nDESCRIPTION: Empty response returned when restarting an allocation\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/allocations.mdx#2025-04-19_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Job History Command Usage\nDESCRIPTION: Shows the basic syntax for using the nomad job history command with options.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/history.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad job history [options] <job>\n```\n\n----------------------------------------\n\nTITLE: Advanced Audit Sink Configuration in HCL\nDESCRIPTION: Extended sink configuration with file rotation and permission settings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/configuration/audit.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\naudit {\n  enabled = true\n\n  sink \"audit\" {\n    type               = \"file\"\n    delivery_guarantee = \"enforced\"\n    format             = \"json\"\n    path               = \"/var/lib/nomad/audit/audit.log\"\n    rotate_bytes       = 100\n    rotate_duration    = \"24h\"\n    rotate_max_files   = 10\n    mode               = \"0600\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Nomad API Request with cURL\nDESCRIPTION: This shell command demonstrates how to make a cURL request to the Nomad API to retrieve job versions with diffs enabled.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/job/my-job/versions?diffs=true\n```\n\n----------------------------------------\n\nTITLE: Using max function with individual numbers in Nomad HCL\nDESCRIPTION: Example of using the max function with three numbers passed as individual arguments to find the greatest value in the set.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/numeric/max.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> max(12, 54, 3)\n54\n```\n\n----------------------------------------\n\nTITLE: Blue/Green Deployment Configuration\nDESCRIPTION: Configuration for blue/green deployments using canary allocations equal to group count.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/update.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"api-server\" {\n    count = 3\n\n    update {\n      canary       = 3\n      max_parallel = 3\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Meta Values in Nomad Templates\nDESCRIPTION: Example showing how to access meta values in a Nomad template by referencing their environment variable form.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/meta.mdx#2025-04-19_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate {\n  destination = \"local/out.txt\"\n  data = <<EOH\n  {{ env \"NOMAD_META_mykey\" }}\nEOH\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Nomad Demo Environment via SSH\nDESCRIPTION: Commands to SSH into the Vagrant box and check Nomad installation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/vagrant/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ vagrant ssh\n...\n$ nomad\nusage: nomad [--version] [--help] <command> [<args>]\n\nAvailable commands are:\n    agent                 Runs a Nomad agent\n    agent-info            Display status information about the local agent\n...\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Init Path for Podman Container\nDESCRIPTION: Sets a custom path to the container-init binary when using the init option.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_17\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  init = true\n  init_path = \"/usr/libexec/podman/catatonit\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Jobs - Shell Request\nDESCRIPTION: Example requests for listing jobs, including filtering by prefix and namespace\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl https://localhost:4646/v1/jobs\n\n$ curl https://localhost:4646/v1/jobs?prefix=team\n\n$ curl https://localhost:4646/v1/jobs?namespace=*&prefix=team\n```\n\n----------------------------------------\n\nTITLE: Installing Buf in Nomad Project\nDESCRIPTION: Command to install the specific version of Buf used by Nomad using the project's make system.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/tools/buf/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake bootstrap\n```\n\n----------------------------------------\n\nTITLE: Fetching Basic ACL Policy Information\nDESCRIPTION: Example showing how to fetch information for a basic ACL policy named 'my-policy', displaying the policy name, description, creation index, modification index, and rules.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/policy/info.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl policy info my-policy\nName        = my-policy\nDescription = <none>\nCreateIndex = 749\nModifyIndex = 758\n\nRules\n\n{\n  \"Name\": \"my-policy\",\n  \"Description\": \"This is a great policy\",\n  \"Rules\": \"list_jobs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example of filebase64 Function Usage in Nomad\nDESCRIPTION: A practical example showing how to use the filebase64 function with a file path. The function reads the contents of 'hello.txt' in the module path and returns the base64-encoded string 'SGVsbG8gV29ybGQ='.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/file/filebase64.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> filebase64(\"${path.module}/hello.txt\")\nSGVsbG8gV29ybGQ=\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Demo Resources\nDESCRIPTION: This command runs a teardown script that removes all resources created during the demo setup, excluding the Nomad data directory and host NFS directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/nfs/README.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./teardown.sh\n```\n\n----------------------------------------\n\nTITLE: External Link Navigation Configuration\nDESCRIPTION: Demonstrates how to configure external links in the documentation navigation structure.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/README.md#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  category: 'docs',\n  content: [\n    { title: 'Foo Title', href: 'https://learn.hashicorp.com/<product>/foo' }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating a job with ID 'job1'\nDESCRIPTION: Example of evaluating a job with ID 'job1' using the 'nomad job eval' command. This will trigger an evaluation and monitor its progress.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/eval.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job eval job1\n==> Monitoring evaluation \"0f3bc0f3\"\n    Evaluation triggered by job \"test\"\n    Evaluation within deployment: \"51baf5c8\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"0f3bc0f3\" finished with status \"complete\"\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Deployment List Command Usage\nDESCRIPTION: Shows the basic syntax for the nomad deployment list command. The command requires no arguments but supports various options for output formatting.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/deployment/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad deployment list [options]\n```\n\n----------------------------------------\n\nTITLE: Displaying Raft Logs Command Syntax\nDESCRIPTION: Basic command syntax for viewing Nomad Raft log entries from the data directory.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/operator/raft/logs.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad operator raft logs [options] <path to data dir>\n```\n\n----------------------------------------\n\nTITLE: Viewing Namespace Status in JSON Format\nDESCRIPTION: Demonstrates how to retrieve namespace status information in JSON format using the -json flag.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/namespace/status.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad namespace status -json default\n{\n    \"Capabilities\": null,\n    \"CreateIndex\": 1,\n    \"Description\": \"Default shared namespace\",\n    \"Meta\": null,\n    \"ModifyIndex\": 1,\n    \"Name\": \"default\",\n    \"Quota\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: List Volumes API Request\nDESCRIPTION: Example of making a GET request to list volumes with node_id and plugin_id filters\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/volumes?type=csi&node_id=foo&plugin_id=plugin-id1\n```\n\n----------------------------------------\n\nTITLE: Setting Tmpfs Mount Points in Podman Container\nDESCRIPTION: Specifies a list of tmpfs mount points to be created inside the container.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/podman.mdx#2025-04-19_snippet_31\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  tmpfs = [\n    \"/var\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Volume Snapshot Example\nDESCRIPTION: Demonstrates creating a snapshot of a production database volume with automatic snapshot ID generation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/volume/snapshot-create.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume snapshot create ebs_prod_db1\nCompleted snapshot of volume ebs_prod_db1 with snapshot ID snap-12345.\n```\n\n----------------------------------------\n\nTITLE: Nomad Job Tag Apply Command Usage\nDESCRIPTION: Demonstrates the syntax for the job tag apply command used to create or modify version tags.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/tag.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnomad job tag apply [options] <job_id>\n```\n\n----------------------------------------\n\nTITLE: Compiling Protobuf Files in Nomad\nDESCRIPTION: Instructions for recompiling Protobuf files after making changes to .proto files in the Nomad codebase.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/README.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ make boostrap\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ make proto\n```\n\n----------------------------------------\n\nTITLE: Installing Azure CLI on Ubuntu\nDESCRIPTION: Commands to install the Azure CLI on a Debian-based system. This adds the Microsoft repositories, installs the required dependencies, and then installs the Azure CLI tool.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/azure/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ wheezy main\" | /\n  sudo tee /etc/apt/sources.list.d/azure-cli.list\n$ sudo apt-key adv --keyserver packages.microsoft.com --recv-keys 417A0893\n$ sudo apt-get install apt-transport-https\n$ sudo apt-get update && sudo apt-get install azure-cli\n```\n\n----------------------------------------\n\nTITLE: Using nomad alloc pause command\nDESCRIPTION: Basic usage syntax for the 'nomad alloc pause' command. It allows specifying options, allocation ID, and command.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/pause.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad alloc pause [options] <allocation> <command>\n```\n\n----------------------------------------\n\nTITLE: Job Specification Example Using file Function in Nomad\nDESCRIPTION: Illustrates how to use the file function within a Nomad job specification. It reads the contents of a file and uses it in a template stanza for a Docker task.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/file/file.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# /path/to/example/jobspec.nomad\njob \"test\" {\n  group \"test\" {\n    task \"test\" {\n      driver = \"docker\"\n      config {\n        image  = \"test/image:latest\"\n\n        volumes = [\n          \"local/file.txt:/path/to/file/on/container/file.txt\"\n        ]\n      }\n\n      template {\n        data        = file(\"/path/to/example/file.txt\")\n        destination = \"local/file.txt\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling a job with placement failure\nDESCRIPTION: Example of scheduling a job that cannot be successfully placed, resulting in a scheduling failure with detailed placement information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/job/run.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad job run failing.nomad.hcl\n==> 2021-06-09T16:49:00-07:00: Monitoring evaluation \"2ae0e6a5\"\n    2021-06-09T16:49:00-07:00: Evaluation triggered by job \"example\"\n==> 2021-06-09T16:49:01-07:00: Monitoring evaluation \"2ae0e6a5\"\n    2021-06-09T16:49:01-07:00: Evaluation within deployment: \"db0c5e57\"\n    2021-06-09T16:49:01-07:00: Evaluation status changed: \"pending\" -> \"complete\"\n==> 2021-06-09T16:49:01-07:00: Evaluation \"2ae0e6a5\" finished with status \"complete\" but failed to place all allocations:\n    2021-06-09T16:49:01-07:00: Task Group \"cache\" (failed to place 1 allocation):\n      * Class \"foo\" filtered 1 nodes\n      * Constraint \"${attr.kernel.name} = linux\" filtered 1 nodes\n    2021-06-09T16:49:01-07:00: Evaluation \"67493a64\" waiting for additional capacity to place remainder\n==> 2021-06-09T16:49:01-07:00: Monitoring deployment \"db0c5e57\"\n  ⠧ Deployment \"db0c5e57\" in progress...\n\n    2021-06-09T16:49:03-07:00\n    ID          = db0c5e57\n    Job ID      = example\n    Job Version = 8\n    Status      = running\n    Description = Deployment is running\n\n    Deployed\n    Task Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline\n    cache       1        0       0        0          N/A\n```\n\n----------------------------------------\n\nTITLE: Using nomad acl role delete Command in Nomad CLI\nDESCRIPTION: This snippet demonstrates the usage syntax for the 'nomad acl role delete' command. It requires an existing role's ID as an argument.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/role/delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad acl role delete [options] <role_id>\n```\n\n----------------------------------------\n\nTITLE: Displaying verbose status of an allocation in Nomad\nDESCRIPTION: Demonstrates using the 'nomad alloc status' command with the -verbose option to show detailed information about an allocation, including evaluation details and task events.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/alloc/status.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad alloc status -verbose 0af996ed\nID                     = 0af996ed-aff4-8ddb-a566-e55ebf8969c9\nEval ID                = be9bde98-0490-1beb-ced0-012d10ddf22e\nName                   = example.cache[0]\nNode ID                = 43c0b14e-7f96-e432-a7da-06605257ce0c\nJob ID                 = example\nJob Version            = 0\nClient Status          = running\nClient Description     = <none>\nDesired Status         = run\nDesired Description    = <none>\nCreated                = 07/25/17 16:12:48 UTC\nModified               = 07/25/17 16:12:48 UTC\nDeployment ID          = 0c83a3b1-8a7b-136b-0e11-8383dc6c9276\nDeployment Health      = healthy\nReschedule Eligibility = 2m from now\nEvaluated Nodes        = 1\nFiltered Nodes         = 0\nExhausted Nodes        = 0\nAllocation Time        = 38.474µs\nFailures               = 0\n\nTask \"redis\" is \"running\"\nTask Resources\nCPU        Memory           Disk     Addresses\n1/500 MHz  6.3 MiB/256 MiB  300 MiB  db: 127.0.0.1:27908\n\nTask Events:\nStarted At     = 07/25/17 16:12:48 UTC\nFinished At    = N/A\nTotal Restarts = 0\nLast Restart   = N/A\n\nRecent Events:\nTime                   Type        Description\n07/25/17 16:12:48 UTC  Started     Task started by client\n07/25/17 16:12:48 UTC  Task Setup  Building Task Directory\n07/25/17 16:12:48 UTC  Received    Task received by client\n\nTask \"web\" is \"running\"\nTask Resources\nCPU        Memory           Disk     Addresses\n1/500 MHz  6.3 MiB/256 MiB  300 MiB  db: 127.0.0.1:30572\n\nTask Events:\nStarted At     = 07/25/17 16:12:49 UTC\nFinished At    = N/A\nTotal Restarts = 0\nLast Restart   = N/A\n\nRecent Events:\nTime                   Type        Description\n07/25/17 16:12:49 UTC  Started     Task started by client\n07/25/17 16:12:48 UTC  Task Setup  Building Task Directory\n07/25/17 16:12:48 UTC  Received    Task received by client\n```\n\n----------------------------------------\n\nTITLE: Starting Vault Server in Development Mode\nDESCRIPTION: Launches a Vault server in development mode for testing purposes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/dev/vault/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault server -dev\n```\n\n----------------------------------------\n\nTITLE: Configuring memory oversubscription for Raw Exec tasks\nDESCRIPTION: Configuration for a task with no maximum memory limit when using the raw_exec driver with memory oversubscription enabled. Sets memory_max to -1 to indicate no limit should be applied.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/raw_exec.mdx#2025-04-19_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nresources {\n  cpu        = 500\n  memory     = 128\n  memory_max = -1 # no limit\n}\n```\n\n----------------------------------------\n\nTITLE: Example ACL Policy Deletion\nDESCRIPTION: Example showing how to delete an ACL policy named 'my-policy' using the Nomad CLI, including the success message output.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/policy/delete.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl policy delete my-policy\nSuccessfully deleted 'my-policy' ACL policy!\n```\n\n----------------------------------------\n\nTITLE: Upgrading Nomad with Homebrew on macOS\nDESCRIPTION: Updates the Nomad installation to the latest version available in the HashiCorp Homebrew tap.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/install/index.mdx#2025-04-19_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\n$ brew upgrade hashicorp/tap/nomad\n```\n\n----------------------------------------\n\nTITLE: Building Azure machine image with Packer\nDESCRIPTION: Command to build a machine image using Packer based on the packer.json configuration file. This creates a custom image with Hashicorp tools pre-installed.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/azure/README.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ packer build packer.json\n```\n\n----------------------------------------\n\nTITLE: Volume Status Check Command (Shell)\nDESCRIPTION: Shell command for checking volume capacity using the nomad volume status command.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/other-specifications/volume/host.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad volume status -type=host 0c903229 | grep Capacity\nCapacity             = 50 GiB\n```\n\n----------------------------------------\n\nTITLE: Using file Function in Nomad HCL\nDESCRIPTION: Demonstrates the basic syntax of the file function in Nomad's HCL configuration language. It takes a file path as an argument and returns the file contents as a string.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/file/file.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfile(path)\n```\n\n----------------------------------------\n\nTITLE: Updating Core Scheduler in Go for Nomad RPC\nDESCRIPTION: Explains how to update the core scheduler to use the new RPC, including version checks for backward compatibility. It emphasizes using the correct version number matching the actual release.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/checklist-rpc-endpoint.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// In nomad/core_sched.go\nif s.srv.ServersMeetMinimumVersion(minVersionForNewRPC) {\n    // Use new RPC\n    err = s.srv.RPC(\"Foo.NewRPC\", args, reply)\n} else {\n    // Use old RPC\n    err = s.srv.RPC(\"Foo.OldRPC\", args, reply)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Consul CNI Plugin on Fedora\nDESCRIPTION: Command to install the consul-cni package on Fedora systems using dnf package manager. This is required for transparent proxying with Consul service mesh.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/partials/install/install-consul-cni-plugin.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo dnf -y install consul-cni\n```\n\n----------------------------------------\n\nTITLE: Parsing a Job - JSON Payload\nDESCRIPTION: Request payload for parsing HCL job specification into JSON\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"JobHCL\": \"job \\\"example\\\" {\\n  type = \\\"service\\\"\\n  group \\\"cache\\\" {}\\n}\",\n  \"Canonicalize\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Namespaces in JSON\nDESCRIPTION: Shows the expected JSON response when listing namespaces. The response includes namespace details such as name, description, metadata, and quota information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/namespaces.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Capabilities\": null,\n    \"CreateIndex\": 1,\n    \"Description\": \"Default shared namespace\",\n    \"Meta\": null,\n    \"ModifyIndex\": 1,\n    \"Name\": \"default\",\n    \"Quota\": \"\"\n  },\n  {\n    \"Capabilities\": null,\n    \"CreateIndex\": 17,\n    \"Description\": \"Development Staging Namespace\",\n    \"Meta\": {\n        \"type\": \"dev\",\n        \"contact\": \"helpdesk@example.com\"\n    },\n    \"ModifyIndex\": 17,\n    \"Name\": \"staging\",\n    \"Quota\": \"\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Paginated Variable Listing\nDESCRIPTION: Example showing paginated query results with per-page limit\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/var/list.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad var list -per-page=3\nNamespace  Path                           Last Updated\ndefault    nomad/jobs/example             2022-08-23T10:35:47-04:00\ndefault    nomad/jobs/variable            2022-08-23T10:24:45-04:00\ndefault    nomad/jobs/variable/www        2022-08-23T10:24:45-04:00\nNext page token: default.nomad/jobs/variable/www/nginx\n```\n\n----------------------------------------\n\nTITLE: Using trimprefix Function in Nomad Configuration\nDESCRIPTION: This example demonstrates how to use the trimprefix function to remove a specific prefix ('hello') from the start of a string ('helloworld'), resulting in 'world'.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/trimprefix.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> trimprefix(\"helloworld\", \"hello\")\nworld\n```\n\n----------------------------------------\n\nTITLE: Internal Documentation Navigation Structure\nDESCRIPTION: Shows the basic structure for internal documentation navigation configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/README.md#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  category: 'docs',\n  content: [\n    'foo'\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Parallel Test Execution in Go\nDESCRIPTION: Demonstrates how to enable parallel execution for package-level tests in Go.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/testing.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nci.Parallel(t)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure service principal for Contributor role\nDESCRIPTION: Command to create an Azure service principal with Contributor permissions on the subscription. This generates the client ID and secret needed for Packer and Terraform authentication.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/azure/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ az ad sp create-for-rbac --role=\"Contributor\" --scopes=\"/subscriptions/${ARM_SUBSCRIPTION_ID}\"\n\n{\n  \"appId\": \"CLIENT_ID\",\n  \"displayName\": \"azure-cli-...\",\n  \"name\": \"http://azure-cli-...\",\n  \"password\": \"CLIENT_SECRET\",\n  \"tenant\": \"TENANT_ID\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking NUMA Node Information with lscpu\nDESCRIPTION: Shell command example showing how to use lscpu to view NUMA node information and CPU core associations on a system.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/concepts/cpu.mdx#2025-04-19_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ lscpu | grep NUMA\nNUMA node(s):           4\nNUMA node0 CPU(s):      0-23,96-119\nNUMA node1 CPU(s):      24-47,120-143\nNUMA node2 CPU(s):      48-71,144-167\nNUMA node3 CPU(s):      72-95,168-191\n```\n\n----------------------------------------\n\nTITLE: Encoding Nested Structures to YAML in Nomad\nDESCRIPTION: This example shows how yamlencode handles more complex data structures, including nested arrays within objects. It demonstrates the function's behavior with multi-level data.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/encoding/yamlencode.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> yamlencode({\"foo\":[1, 2, 3], \"bar\": \"baz\"})\n\"bar\": \"baz\"\n\"foo\":\n- 1\n- 2\n- 3\n```\n\n----------------------------------------\n\nTITLE: Implementing State Method in Go for Nomad RPC\nDESCRIPTION: Describes the process of adding a state method for modifying objects in a transaction within the state package. It emphasizes creating separate files for each new resource following a specific naming convention.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/checklist-rpc-endpoint.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// In nomad/state/state_store_[resource].go\nfunc (s *StateStore) UpsertResource(index uint64, resource *structs.Resource) error {\n    txn := s.db.WriteTxn(index)\n    defer txn.Abort()\n\n    // Modify objects\n\n    return txn.Commit()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating NFS Host Directory\nDESCRIPTION: This command creates a directory on the host machine that will be used to serve NFS.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/nfs/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /srv/host-nfs\n```\n\n----------------------------------------\n\nTITLE: Parsing a Job - Shell Request\nDESCRIPTION: POST request to parse HCL job specification\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://localhost:4646/v1/jobs/parse\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Regions List in Nomad API\nDESCRIPTION: This snippet shows a sample JSON response from the /v1/regions endpoint. The response is an array of strings, where each string represents a region name.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/regions.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\"region1\", \"region2\"]\n```\n\n----------------------------------------\n\nTITLE: JSON payload for updating an ACL Role in Nomad\nDESCRIPTION: JSON payload for updating an existing ACL Role, requiring the ID field to match the role being updated along with the updated properties.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/roles.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ID\": \"77c50812-fcdd-701b-9f1a-6cf55387b09d\",\n  \"Name\": \"example-acl-role\",\n  \"Description\": \"my example ACL Role\",\n  \"Policies\": [\n    {\n      \"Name\": \"example-acl-policy\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Job Version Tag with cURL in Nomad API\nDESCRIPTION: This cURL command shows how to delete the 'golden-version' tag from the 'hello-world' job using the Nomad API. It specifies the DELETE method and the appropriate endpoint.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_51\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -X DELETE localhost:4646/v1/job/hello-world/versions/golden-version/tag -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Address Environment Variable\nDESCRIPTION: This command sets the VAULT_ADDR environment variable to the local address of the Vault server, which is useful for interacting with Vault using the CLI.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_23\n\nLANGUAGE: console\nCODE:\n```\nexport VAULT_ADDR=http://localhost:8200\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Suites in Nomad E2E Framework\nDESCRIPTION: Command to run a specific test suite using the -suite flag. This will only run tests with a matching Framework.TestSuite.Component value.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/README.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo test -v -suite=Consul .\n```\n\n----------------------------------------\n\nTITLE: Encoding Simple Key-Value Pairs to YAML in Nomad\nDESCRIPTION: This example demonstrates how to use the yamlencode function to convert a simple key-value object into YAML format. It shows the basic syntax and output structure.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/encoding/yamlencode.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> yamlencode({\"a\":\"b\", \"c\":\"d\"})\n\"a\": \"b\"\n\"c\": \"d\"\n```\n\n----------------------------------------\n\nTITLE: Running Enos Scenario Commands\nDESCRIPTION: Commands for validating, outlining, running, and debugging Enos scenarios\nSOURCE: https://github.com/hashicorp/nomad/blob/main/enos/README.md#2025-04-19_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ enos scenario validate upgrade --var-file /tmp/enos.vars\n$ echo $?\n0\n\n$ enos scenario outline upgrade --var-file /tmp/enos.vars --format=html > /tmp/outline.html\n$ open /tmp/outline.html\n\n$ enos scenario run upgrade --var-file /tmp/enos.vars --timeout 2h\n```\n\n----------------------------------------\n\nTITLE: Visualizing NFS Plugin Arrangement in Mermaid\nDESCRIPTION: This Mermaid sequence diagram illustrates the interaction between the host machine, NFS server, controller plugin, node plugin, and web server in the NFS plugin setup.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/nfs/README.md#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant host machine\n  participant nfs server\n  participant controller plugin\n  participant node plugin\n  participant web server\n  host machine->>nfs server: /srv/host-nfs host volume\n  nfs server->>nfs server: export /srv/nfs\n  controller plugin->>nfs server: create csi volume<br/>/srv/nfs/csi-nfs\n  node plugin->>host machine: mount nfs server:/srv/nfs/csi-nfs into web alloc dir\n  web server->>nfs server: read/write to /alloc/web-nfs\n```\n\n----------------------------------------\n\nTITLE: Set Job Stability Payload\nDESCRIPTION: JSON payload for setting a job's stability status.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/jobs.mdx#2025-04-19_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"JobID\": \"my-job\",\n  \"JobVersion\": 2,\n  \"Stable\": true\n}\n```\n\n----------------------------------------\n\nTITLE: cURL command for reading an ACL Role by name in Nomad\nDESCRIPTION: Shell command using cURL to retrieve a specific ACL Role by sending a GET request with the role name in the URL path.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/roles.mdx#2025-04-19_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Nomad-Token: <NOMAD_TOKEN_SECRET_ID>\" \\\n    https://localhost:4646/v1/acl/role/name/example-acl-role\n```\n\n----------------------------------------\n\nTITLE: Viewing License Expiration Warnings in Nomad Server Logs\nDESCRIPTION: Log output showing the warning messages that appear as a Nomad Enterprise license approaches its expiration time. The logs show countdown warnings followed by an error when the license finally expires.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/enterprise/license/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n2021-03-29T15:02:28.100-0400 [WARN]  nomad.licensing: license expiring: time_left=5m0s\n2021-03-29T15:03:28.103-0400 [WARN]  nomad.licensing: license expiring: time_left=4m0s\n2021-03-29T15:04:28.106-0400 [WARN]  nomad.licensing: license expiring: time_left=3m0s\n2021-03-29T15:05:28.109-0400 [WARN]  nomad.licensing: license expiring: time_left=2m0s\n2021-03-29T15:06:28.112-0400 [WARN]  nomad.licensing: license expiring: time_left=1m0s\n2021-03-29T15:07:28.114-0400 [WARN]  nomad.licensing: license expiring: time_left=0s\n2021-03-29T15:07:58.104-0400 [ERROR] nomad.licensing: license expired, please update license: error=\"invalid license or license is expired\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Node Purge in Nomad\nDESCRIPTION: This JSON response confirms the purge operation, providing evaluation details and updated cluster information.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/nodes.mdx#2025-04-19_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EvalCreateIndex\": 3817,\n  \"EvalIDs\": [\"71bad787-5ab1-9939-be02-4809441583cd\"],\n  \"HeartbeatTTL\": 0,\n  \"Index\": 3816,\n  \"KnownLeader\": false,\n  \"LastContact\": 0,\n  \"LeaderRPCAddr\": \"\",\n  \"NodeModifyIndex\": 3816,\n  \"NumNodes\": 0,\n  \"Servers\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Infrastructure Changes\nDESCRIPTION: This command applies the Terraform plan, creating or modifying the infrastructure resources as defined in the configuration files.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_21\n\nLANGUAGE: console\nCODE:\n```\nterraform apply -auto-approve -var=\"project=${GOOGLE_PROJECT}\" -var=\"credentials=${GOOGLE_APPLICATION_CREDENTIALS}\"\n```\n\n----------------------------------------\n\nTITLE: Basic Nomad Eval List Command Syntax\nDESCRIPTION: Shows the basic command syntax for listing evaluations in Nomad. The command accepts various options but requires no arguments.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/eval/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad eval list [options]\n```\n\n----------------------------------------\n\nTITLE: Using the log Function in Shell Session\nDESCRIPTION: These examples demonstrate how to use the log function with different numbers and bases. The first example calculates the base-10 logarithm of 50, while the second calculates the base-2 logarithm of 16.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/numeric/log.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> log(50, 10)\n1.6989700043360185\n> log(16, 2)\n4\n```\n\n----------------------------------------\n\nTITLE: Creating SSH Tunnels for Cluster Access\nDESCRIPTION: These commands create SSH tunnels to access the Nomad, Vault, and Consul web UIs running inside the cluster. Each tunnel is started as a background process.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_22\n\nLANGUAGE: console\nCODE:\n```\ngcloud compute ssh hashistack-server-0 --zone=us-east1-c --tunnel-through-iap -- -f -N -L 127.0.0.1:4646:127.0.0.1:4646\ngcloud compute ssh hashistack-server-0 --zone=us-east1-c --tunnel-through-iap -- -f -N -L 127.0.0.1:8200:127.0.0.1:8200\ngcloud compute ssh hashistack-server-0 --zone=us-east1-c --tunnel-through-iap -- -f -N -L 127.0.0.1:8500:127.0.0.1:8500\n```\n\n----------------------------------------\n\nTITLE: Setting GOOGLE_APPLICATION_CREDENTIALS Environment Variable\nDESCRIPTION: This command sets the GOOGLE_APPLICATION_CREDENTIALS environment variable to the full path of the account.json file, which is used for authenticating Terraform.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_16\n\nLANGUAGE: console\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=$(realpath account.json)\n```\n\n----------------------------------------\n\nTITLE: Using the Nomad Node Pool Delete Command\nDESCRIPTION: This snippet demonstrates the usage syntax for the 'nomad node pool delete' command. It shows the command structure and options placeholder.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/node-pool/delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnomad node pool delete [options] <node-pool>\n```\n\n----------------------------------------\n\nTITLE: Running Content Validation for Nomad Documentation\nDESCRIPTION: Command to validate content against conformance rules before committing changes, using the HashiCorp platform content conformance package.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run content-check\n```\n\n----------------------------------------\n\nTITLE: Listing All Plugins Status Example\nDESCRIPTION: Demonstrates how to list all plugins with their basic status information including ID, provider, and health status of controllers and nodes.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/plugin/status.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad plugin [-type csi] status\nID         Provider  Controllers Healthy / Expected  Nodes Healthy / Expected\nebs-prod   aws.ebs   1 / 1                           1 / 1\n```\n\n----------------------------------------\n\nTITLE: Basic formatlist Function Syntax in HCL\nDESCRIPTION: The basic syntax for the formatlist function which takes a specification string and a variable number of values to format into a list of strings.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/string/formatlist.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nformatlist(spec, values...)\n```\n\n----------------------------------------\n\nTITLE: Installing Vault on Linux\nDESCRIPTION: This snippet downloads and installs the Vault binary on a Linux system. It fetches a specific version (1.5.3) of Vault, unzips it, moves it to the /usr/local/bin directory, and verifies the installation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ncurl \"https://releases.hashicorp.com/vault/1.5.3/vault_1.5.3_linux_amd64.zip\" -o vault.zip\nunzip vault.zip\nsudo mv vault /usr/local/bin\nvault --version\n```\n\n----------------------------------------\n\nTITLE: Starting a Non-persistent Nomad Server with Docker Privileged Mode\nDESCRIPTION: Command to start a Nomad agent in development mode with Docker privileged configuration. This setup allows the Docker driver to start containers with the Privileged parameter but does not persist state between restarts.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/dev/docker-clients/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnomad agent -dev -config docker-privileged.hcl\n```\n\n----------------------------------------\n\nTITLE: Mapping Ports in nspawn Container\nDESCRIPTION: This snippet shows how to map ports in the nspawn container. It uses a key-value map to define port labels.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/nspawn.mdx#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  port_map {\n    http = 80\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing to Terraform Environment Directory\nDESCRIPTION: This command changes the current working directory to the Terraform environment directory for the us-east region.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_18\n\nLANGUAGE: console\nCODE:\n```\ncd env/us-east\n```\n\n----------------------------------------\n\nTITLE: SSH Access to Test Machines\nDESCRIPTION: Command to SSH into a test machine using the key generated by Terraform. The EC2_IP_ADDR should be obtained from Terraform output.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/README.md#2025-04-19_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nssh -i keys/nomad-e2e-*.pem ubuntu@${EC2_IP_ADDR}\n```\n\n----------------------------------------\n\nTITLE: Setting Rookout Environment Variables in Nomad\nDESCRIPTION: Example showing how to configure additional Rookout settings through environment variables in the Nomad task specification.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/rookout.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nenv {\n    ROOKOUT_REMOTE_ORIGIN=\"https://github.com/Rookout/tutorial-java\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Individual Tests with Regex Pattern\nDESCRIPTION: Examples of how to run specific tests by using regex patterns with the -run flag. Shows the structure of test names in the framework.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/README.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngo test -v . -run 'TestE2E/Consul/\\*consul\\.ScriptChecksE2ETest/TestGroup'\n                              ^       ^             ^               ^\n                              |       |             |               |\n                          Component   |             |           Test func\n                                      |             |\n                                  Go Package      Struct\n```\n\n----------------------------------------\n\nTITLE: Examples of Invalid Script Check Configurations in Nomad\nDESCRIPTION: Examples of incorrect script check configurations that will not work in Nomad: one using a command without a path and another where path interpolation won't work.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/check.mdx#2025-04-19_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n# invalid because command is not a path\ncheck {\n  type    = \"script\"\n  command = \"test -f /tmp/file.txt\"\n}\n\n# invalid because path will not be interpolated\ncheck {\n  type    = \"script\"\n  command = \"/bin/test\"\n  args    = [\"-f\", \"${HEALTH_CHECK_FILE}\"]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Encoding Strategy for Nomad API Responses\nDESCRIPTION: Explains different approaches for handling JSON encoding of API responses in Nomad. It covers direct return, conversion to api/ structs, and using intermediate structs, providing examples and considerations for each approach.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/contributing/checklist-jobspec.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## JSON Encoding\n\nAs a general rule, HTTP endpoints (under `command/agent/`) will make RPC calls that return structs belonging to \n`nomad/structs/`. These handlers ultimately return an object that is encoded by the Nomad HTTP server. The encoded form\nneeds to match the Nomad API; specifically, it should have the form of the corresponding struct from `api/`. There are\na few ways that this can be accomplished:\n* directly return the struct from the RPC call, if it has the same shape as the corresponding struct in `api/`. \n  This is convenient when possible, resulting in the least work for the developer. \n  Examples of this approach include [GET `/v1/evaluation/:id`](https://github.com/hashicorp/nomad/blob/v1.0.\n  0/command/agent/eval_endpoint.go#L88).\n* convert the struct from the RPC call to the appropriate `api/` struct.\n  This approach is the most developer effort, but it does have a strong guarantee that the HTTP response matches the \n  API, due to the explicit conversion (assuming proper implementation, which requires tests).\n  Examples of this approach include [GET `/v1/volume/csi/:id`](https://github.com/hashicorp/nomad/blob/v1.0.0/command/agent/csi_endpoint.go#L108)\n* convert to an intermediate struct with the same shape as the `api/` struct.\n  This approach strikes a balance between the former two approaches. \n  This conversion can be performed in-situ in the agent HTTP handler, as long as the conversion doesn't need to \n  appear in other handlers. \n  Otherwise, it is possible to register an extension on the JSON encoding used by the HTTP agent; these extensions\n  can be put in `nomad/jsonhandles/extensions.go`.\n```\n\n----------------------------------------\n\nTITLE: Installing Consul on Linux\nDESCRIPTION: This snippet downloads and installs the Consul binary on a Linux system. It fetches a specific version (1.8.3) of Consul, unzips it, moves it to the /usr/local/bin directory, and verifies the installation.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncurl \"https://releases.hashicorp.com/consul/1.8.3/consul_1.8.3_linux_amd64.zip\" -o consul.zip\nunzip consul.zip\nsudo mv consul /usr/local/bin\nconsul --version\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Configuration for Nomad Cluster\nDESCRIPTION: Initializes and applies the Terraform configuration to provision the Nomad cluster, including specifying license files for Consul and Nomad Enterprise.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/terraform/README.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd e2e/terraform/\nterraform init\nterraform apply -var=\"consul_license=$(cat full_path_to_consul.hclic)\" -var=\"nomad_license=$(cat full_path_to_nomad.hclic)\"    \n```\n\n----------------------------------------\n\nTITLE: Creating CSI Volume Snapshot (JSON)\nDESCRIPTION: JSON payload for creating a snapshot of a CSI volume. Includes details such as source volume ID, plugin ID, name, secrets, and parameters.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/volumes.mdx#2025-04-19_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Snapshots\": [\n    {\n      \"SourceVolumeID\": \"volume-id1\",\n      \"PluginID\": \"plugin-id1\",\n      \"Name\": \"mysnap\",\n      \"Secrets\": {\n        \"password\": \"xyzzy\"\n      },\n      \"Parameters\": {\n        \"example\": \"infrequent_access\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting gcloud Config to Use New Project\nDESCRIPTION: This command configures gcloud to use the newly created project for subsequent operations.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ngcloud config set project $GOOGLE_PROJECT\n```\n\n----------------------------------------\n\nTITLE: Installing Nomad UI Dependencies with Yarn\nDESCRIPTION: Commands to navigate to the UI directory and install all required dependencies using Yarn package manager.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/ui/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ui\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Running a Node-resident binary with Raw Exec in Nomad HCL\nDESCRIPTION: Example configuration for executing a binary that is already present on the host node. When running a binary that exists on the host, the path must be absolute.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/raw_exec.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntask \"example\" {\n  driver = \"raw_exec\"\n\n  config {\n    # When running a binary that exists on the host, the path must be absolute/\n    command = \"/bin/sleep\"\n    args    = [\"1\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Billing Account Environment Variable\nDESCRIPTION: This command sets the GOOGLE_BILLING_ACCOUNT environment variable with the selected billing account ID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nexport GOOGLE_BILLING_ACCOUNT=\"XXXXXXX\"\n```\n\n----------------------------------------\n\nTITLE: Reading an ACL Token by Accessor ID\nDESCRIPTION: This endpoint reads an ACL token with the given accessor ID. It requires management ACL or a matching SecretID.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/acl/tokens.mdx#2025-04-19_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/acl/token/aa534e09-6a07-0a45-2295-a7f77063d429\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixed Nomad Versions in Terraform\nDESCRIPTION: Terraform variables configuration to deploy a cluster with mixed Nomad versions. This example sets up 3 servers with version 0.12.1 and 2 Linux clients with versions 0.12.1 and 0.12.2.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/e2e/README.md#2025-04-19_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# will be used for servers\nnomad_version = \"0.12.1\"\n\n# will override the nomad_version for Linux clients\nnomad_version_client_linux = [\n    \"0.12.1\",\n    \"0.12.2\"\n]\n```\n\n----------------------------------------\n\nTITLE: Listing GCP Billing Accounts\nDESCRIPTION: This command lists all available billing accounts in GCP, which is necessary for linking a billing account to the new project.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/terraform/gcp/README.md#2025-04-19_snippet_9\n\nLANGUAGE: console\nCODE:\n```\ngcloud alpha billing accounts list\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Frontend Network with Static Port\nDESCRIPTION: Network configuration for dashboard group with bridge mode and static port forwarding setup.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/integrations/consul/service-mesh.mdx#2025-04-19_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"dashboard\" {\n  network {\n    mode = \"bridge\"\n\n    port \"http\" {\n      static = 9002\n      to     = 9002\n    }\n  }\n\n  # ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Toggling Node Eligibility in Nomad\nDESCRIPTION: This JSON response confirms the eligibility change operation, providing the index and node modify index.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/nodes.mdx#2025-04-19_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EvalCreateIndex\": 0,\n  \"EvalIDs\": null,\n  \"Index\": 3742,\n  \"NodeModifyIndex\": 3742\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Driver Capabilities in HCL\nDESCRIPTION: This HCL snippet shows how to configure the Docker driver to allow the CAP_NET_RAW capability, which is disabled by default in Nomad 1.1.0-rc1, 1.0.5, and 0.12.12 for security reasons.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/upgrade/upgrade-specific.mdx#2025-04-19_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"docker\" {\n  config {\n    allow_caps = [\n      \"CHOWN\", \"DAC_OVERRIDE\", \"FSETID\", \"FOWNER\", \"MKNOD\",\n      \"SETGID\", \"SETUID\", \"SETFCAP\", \"SETPCAP\", \"NET_BIND_SERVICE\",\n      \"SYS_CHROOT\", \"KILL\", \"AUDIT_WRITE\", \"NET_RAW\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows IIS Plugin Options in Nomad\nDESCRIPTION: Example configuration for the Windows IIS plugin options, showing how to enable the driver and set the statistics collection interval.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/iis.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"win_iis\" {\n  client {\n    enabled = true\n    stats_interval = \"30s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Threshold Strategy Agent in HCL\nDESCRIPTION: Basic configuration for enabling the threshold strategy plugin in the Nomad agent configuration.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/tools/autoscaling/plugins/strategy/threshold.mdx#2025-04-19_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstrategy \"threshold\" {\n  driver = \"threshold\"\n}\n```\n\n----------------------------------------\n\nTITLE: Restart Delay Configuration\nDESCRIPTION: Configuration example for setting the restart delay in a restart block.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/check_restart.mdx#2025-04-19_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nrestart {\n  # ...\n  delay    = \"10s\"\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request to List Regions in Nomad API\nDESCRIPTION: This snippet demonstrates how to send a GET request to the /v1/regions endpoint using curl. This request retrieves a list of all known regions in the Nomad cluster.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/api-docs/regions.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://localhost:4646/v1/regions\n```\n\n----------------------------------------\n\nTITLE: Installing Exec2 Driver on CentOS/RHEL\nDESCRIPTION: Commands to install the required utilities, add HashiCorp repository, and install the Exec2 driver on CentOS/RHEL systems.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/exec2.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo yum install -y yum-utils\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo yum -y install nomad-driver-exec2\n```\n\n----------------------------------------\n\nTITLE: Specifying Singularity Image in Nomad Configuration\nDESCRIPTION: Configuration snippet showing how to specify a Singularity image to run in a Nomad job. The image can be a local path or a supported URI.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/singularity.mdx#2025-04-19_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  image = \"library://sylabsed/examples/lolcow:latest\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying CSI Volumes with Terraform\nDESCRIPTION: Commands to deploy CSI volumes on DigitalOcean using Terraform. Requires setting the Nomad address and DigitalOcean API token as environment variables.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/demo/csi/digitalocean/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport NOMAD_ADDR=http://${IP_ADDRESS}:4646\nterraform apply -var do_token=${DIGITALOCEAN_TOKEN}\n```\n\n----------------------------------------\n\nTITLE: Accessing Nomad Server Subcommand Help\nDESCRIPTION: Shows how to get help for specific server subcommands.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/server/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnomad server <subcommand> -h\n```\n\n----------------------------------------\n\nTITLE: Server Configuration for Lost After Example\nDESCRIPTION: Nomad server configuration that sets the heartbeat_grace period to 2 minutes, which affects when clients are considered disconnected.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/disconnect.mdx#2025-04-19_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# server_config.hcl\n\nserver {\n  enabled         = true\n  heartbeat_grace = \"2m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory for Singularity Container\nDESCRIPTION: Configuration to specify a working directory to be used for /tmp, /var/tmp, and $HOME when the contain option is enabled.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/plugins/drivers/community/singularity.mdx#2025-04-19_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nconfig {\n  workdir = \"/path/to/folder\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using uuidv5 with Explicit DNS Namespace UUID in Nomad\nDESCRIPTION: Example showing that using the explicit DNS namespace UUID produces the same result as using the 'dns' keyword.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/job-specification/hcl2/functions/uuid/uuidv5.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n> uuidv5(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\", \"developer.hashicorp.com/nomad\")\nd2616d48-e1cb-5b87-8a8c-46355decc76a\n```\n\n----------------------------------------\n\nTITLE: Docker Group Addition Command\nDESCRIPTION: Shell command to add the Nomad user to the Docker group for socket access.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/drivers/docker.mdx#2025-04-19_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nsudo usermod -G docker -a nomad\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing ACL Auth Method in Nomad\nDESCRIPTION: This example demonstrates updating an existing ACL auth method named 'example-acl-auth-method'. It modifies the token locality, token name format, and loads configuration from a JSON file. The command outputs the updated auth method details.\nSOURCE: https://github.com/hashicorp/nomad/blob/main/website/content/docs/commands/acl/auth-method/update.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl auth-method update -token-locality \"global\" -token-name-format '${auth_method_name}-${value.user}' -config @config.json example-acl-auth-method\nName                = example-acl-auth-method\nType                = OIDC\nLocality            = global\nMax Token TTL       = 1h0m0s\nToken Name Format   = ${auth_method_name}-${value.user}\nDefault             = false\nCreate Index        = 14\nModify Index        = 33\n\nAuth Method Config\n\nOIDC Discovery URL     = https://my-corp-app-name.auth0.com/\nOIDC Client ID         = V1RPi2MYptMV1RPi2MYptMV1RPi2MYpt\nOIDC Client Secret     = example-client-secret\nBound audiences        = V1RPi2MYptMV1RPi2MYptMV1RPi2MYpt\nAllowed redirects URIs = http://localhost:4646/oidc/callback\nDiscovery CA pem       = <none>\nSigning algorithms     = <none>\nClaim mappings         = {http://example.com/first_name: first_name}; {http://example.com/last_name: last_name}\nList claim mappings    = {http://nomad.com/groups: groups}\n```"
  }
]