[
  {
    "owner": "buger",
    "repo": "probe",
    "content": "TITLE: Generating Code Documentation Automatically with Probe and AI in Node.js\nDESCRIPTION: This JavaScript snippet automates documentation generation for JavaScript functions within a codebase. It uses `probe.query` to find function definitions, then for each function, it uses `probe.extract` to get the full code context. An OpenAI model (via LangChain's `ChatOpenAI`) is prompted to generate documentation based on the extracted code. The generated Markdown documentation is saved to separate files named after the function in a specified output directory. Dependencies include `@buger/probe`, `fs/promises`, `path`, and `@langchain/openai`.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/nodejs-sdk.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { query, extract } from '@buger/probe';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { ChatOpenAI } from '@langchain/openai';\n\nasync function generateDocumentation(codebasePath, outputDir) {\n  // Create output directory if it doesn't exist\n  await fs.mkdir(outputDir, { recursive: true });\n  \n  // Find all functions in the codebase\n  const functions = await query({\n    path: codebasePath,\n    pattern: 'function $NAME($$$PARAMS) $$$BODY',\n    language: 'javascript',\n    maxResults: 100,\n    json: true\n  });\n  \n  // Create AI model for documentation generation\n  const model = new ChatOpenAI({\n    modelName: \"gpt-4o\",\n    temperature: 0.2\n  });\n  \n  // Generate documentation for each function\n  for (const func of functions.matches || []) {\n    try {\n      // Extract the full function code\n      const extracted = await extract({\n        files: [`${func.file}:${func.line}`],\n        contextLines: 5,\n        json: true\n      });\n      \n      // Generate documentation using AI\n      const response = await model.invoke([\n        {\n          role: \"system\",\n          content: \"You are a technical documentation expert. Generate clear, concise documentation for the following function. Include: purpose, parameters, return value, and example usage.\"\n        },\n        {\n          role: \"user\",\n          content: `Generate documentation for this function:\\n\\n${extracted.content}`\n        }\n      ]);\n      \n      // Save documentation to file\n      const funcName = func.name || `function_line_${func.line}`;\n      const docPath = path.join(outputDir, `${funcName}.md`);\n      await fs.writeFile(docPath, response.content);\n      \n      console.log(`Generated documentation for ${funcName}`);\n    } catch (error) {\n      console.error(`Error generating documentation for function at ${func.file}:${func.line}:`, error);\n    }\n  }\n  \n  console.log(`Documentation generation complete. Files saved to ${outputDir}`);\n}\n\n// Usage\nawait generateDocumentation('/path/to/your/project', './docs');\n```\n\n----------------------------------------\n\nTITLE: Advanced probe Integration with xargs for Batch Processing in Bash\nDESCRIPTION: Demonstrates using `xargs` with `probe`: extracting code snippets (`probe extract`) from a list of files generated by `probe search --files-only`, and executing `probe search` for multiple search terms provided via `echo` and standard input.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/advanced-cli.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Extract code from all files matching a pattern\nprobe search \"class\" --files-only | xargs -I {} probe extract {}\n\n# Process multiple search terms\necho -e \"auth\\nuser\\nprofile\" | xargs -I {} probe search \"{}\" ./src\n```\n\n----------------------------------------\n\nTITLE: Integrating Probe Tools with LangChain in JavaScript\nDESCRIPTION: This JavaScript code shows how to integrate `@buger/probe` tools with LangChain. It uses the `tools.createSearchTool`, `tools.createQueryTool`, and `tools.createExtractTool` factory functions from `@buger/probe` to create LangChain-compatible tools. These tools are then bound to a `ChatOpenAI` model instance using the `.withTools()` method, enabling the AI model to leverage Probe's code search, query, and extraction capabilities during conversation.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/nodejs-sdk.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ChatOpenAI } from '@langchain/openai';\nimport { tools } from '@buger/probe';\n\n// Create the LangChain tools\nconst searchTool = tools.createSearchTool();\nconst queryTool = tools.createQueryTool();\nconst extractTool = tools.createExtractTool();\n\n// Create a ChatOpenAI instance with tools\nconst model = new ChatOpenAI({\n  modelName: \"gpt-4o\",\n  temperature: 0.7\n}).withTools([searchTool, queryTool, extractTool]);\n\n// Use the model with tools\nasync function chatWithAI(userMessage) {\n  const result = await model.invoke([\n    { role: \"system\", content: \"You are a code intelligence assistant. Use the provided tools to search and analyze code.\" },\n    { role: \"user\", content: userMessage }\n  ]);\n  \n  return result.content;\n}\n```\n\n----------------------------------------\n\nTITLE: Automating Codebase Analysis using Probe in Node.js\nDESCRIPTION: This JavaScript snippet demonstrates an automated code analysis pipeline using the Buger Probe SDK. It counts functions across various programming languages (JavaScript, TypeScript, Python, Rust, Go) using `probe.query` with language-specific patterns. It also searches for potential security issues (like hardcoded secrets) using `probe.search` with a list of predefined patterns. The results, including metrics and potential issues (with truncated content for brevity), are saved to a JSON file (`codebase-analysis.json`). Dependencies include `@buger/probe` and `fs/promises`.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/nodejs-sdk.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search, query } from '@buger/probe';\nimport fs from 'fs/promises';\n\nasync function analyzeCodebase(codebasePath) {\n  const analysis = {\n    timestamp: new Date().toISOString(),\n    codebasePath,\n    metrics: {},\n    patterns: {},\n    potentialIssues: []\n  };\n  \n  // Count functions by language\n  const languages = ['javascript', 'typescript', 'python', 'rust', 'go'];\n  const functionCounts = {};\n  \n  for (const lang of languages) {\n    try {\n      const pattern = lang === 'javascript' || lang === 'typescript'\n        ? 'function $NAME($$$PARAMS) $$$BODY'\n        : lang === 'python'\n          ? 'def $NAME($$$PARAMS): $$$BODY'\n          : lang === 'rust'\n            ? 'fn $NAME($$$PARAMS) $$$BODY'\n            : 'func $NAME($$$PARAMS) $$$BODY';\n      \n      const results = await query({\n        path: codebasePath,\n        pattern,\n        language: lang,\n        maxResults: 1000,\n        json: true\n      });\n      \n      functionCounts[lang] = results.matches ? results.matches.length : 0;\n    } catch (error) {\n      console.error(`Error counting functions in ${lang}:`, error);\n      functionCounts[lang] = -1; // Error indicator\n    }\n  }\n  \n  analysis.metrics.functionCounts = functionCounts;\n  \n  // Find potential security issues\n  const securityPatterns = [\n    'password',\n    'token',\n    'api_key',\n    'apikey',\n    'secret',\n    'credential',\n    'eval(',\n    'exec(',\n    'shell_exec'\n  ];\n  \n  for (const pattern of securityPatterns) {\n    try {\n      const results = await search({\n        path: codebasePath,\n        query: pattern,\n        maxResults: 50,\n        json: true\n      });\n      \n      if (results.matches && results.matches.length > 0) {\n        analysis.potentialIssues.push({\n          pattern,\n          matches: results.matches.map(match => ({\n            file: match.file,\n            line: match.line,\n            content: match.content.substring(0, 100) + '...' // Truncate long content\n          }))\n        });\n      }\n    } catch (error) {\n      console.error(`Error searching for pattern ${pattern}:`, error);\n    }\n  }\n  \n  // Save analysis to file\n  await fs.writeFile(\n    'codebase-analysis.json',\n    JSON.stringify(analysis, null, 2)\n  );\n  \n  return analysis;\n}\n\n// Usage\nconst analysis = await analyzeCodebase('/path/to/your/project');\nconsole.log('Analysis complete. Results saved to codebase-analysis.json');\nconsole.log(`Found ${Object.values(analysis.metrics.functionCounts).reduce((a, b) => a + (b > 0 ? b : 0), 0)} functions across all languages`);\nconsole.log(`Found ${analysis.potentialIssues.length} potential security issues`);\n```\n\n----------------------------------------\n\nTITLE: Building an AI Code Assistant with Probe and LangChain in Node.js\nDESCRIPTION: This JavaScript snippet demonstrates how to create a code assistant using the Buger Probe SDK and LangChain. It searches a specified codebase for relevant code snippets based on a user's question using `probe.search`, then uses LangChain with an OpenAI model (GPT-4o) and a prompt template to analyze the search results and provide an answer. Dependencies include `@buger/probe`, `@langchain/openai`, `@langchain/core/prompts`, and `@langchain/core/output_parsers`.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/nodejs-sdk.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe';\nimport { ChatOpenAI } from '@langchain/openai';\nimport { PromptTemplate } from '@langchain/core/prompts';\nimport { StringOutputParser } from '@langchain/core/output_parsers';\n\nasync function createCodeAssistant() {\n  // Create a chat model\n  const model = new ChatOpenAI({\n    modelName: \"gpt-4o\",\n    temperature: 0.7\n  });\n  \n  // Create a prompt template\n  const promptTemplate = PromptTemplate.fromTemplate(`\n    You are a code assistant. I'll provide you with a question and some code search results.\n    Please analyze the code and answer the question.\n    \n    Question: {question}\n    \n    Code search results:\n    {searchResults}\n    \n    Your analysis:\n  `);\n  \n  // Create a chain\n  const chain = promptTemplate\n    .pipe(model)\n    .pipe(new StringOutputParser());\n  \n  // Function to answer questions about code\n  async function answerCodeQuestion(question, codebasePath) {\n    // Search for relevant code\n    const searchResults = await search({\n      path: codebasePath,\n      query: question,\n      maxResults: 5,\n      maxTokens: 10000\n    });\n    \n    // Get the answer from the AI\n    const answer = await chain.invoke({\n      question,\n      searchResults\n    });\n    \n    return answer;\n  }\n  \n  return { answerCodeQuestion };\n}\n\n// Usage\nconst assistant = await createCodeAssistant();\nconst answer = await assistant.answerCodeQuestion(\n  \"How is authentication implemented?\",\n  \"/path/to/your/project\"\n);\nconsole.log(answer);\n```\n\n----------------------------------------\n\nTITLE: Creating a Code Search REST API with Express and Probe in Node.js\nDESCRIPTION: This JavaScript snippet sets up a basic REST API using Express.js to expose Buger Probe's functionality. It defines three POST endpoints: `/api/search` (using `probe.search`), `/api/query` (using `probe.query`), and `/api/extract` (using `probe.extract`). Each endpoint accepts parameters like codebase path, query/pattern, and options via the request body and returns the results from the respective Probe function as JSON. Dependencies include `express` and `@buger/probe`.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/nodejs-sdk.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\nimport { search, query, extract } from '@buger/probe';\n\nconst app = express();\napp.use(express.json());\n\n// Search endpoint\napp.post('/api/search', async (req, res) => {\n  try {\n    const { path, query, options } = req.body;\n    const results = await search({\n      path,\n      query,\n      ...options\n    });\n    res.json({ results });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Query endpoint\napp.post('/api/query', async (req, res) => {\n  try {\n    const { path, pattern, language, options } = req.body;\n    const results = await query({\n      path,\n      pattern,\n      language,\n      ...options\n    });\n    res.json({ results });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Extract endpoint\napp.post('/api/extract', async (req, res) => {\n  try {\n    const { files, options } = req.body;\n    const results = await extract({\n      files,\n      ...options\n    });\n    res.json({ results });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Code search API running on port 3000');\n});\n```\n\n----------------------------------------\n\nTITLE: Term Modifiers in Probe Search\nDESCRIPTION: Examples of using term modifiers to require, exclude, or match exact phrases in search queries.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-functionality.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"+authentication login\"  # Required term\nprobe search \"database -sqlite\"  # Excluded term\nprobe search \"\\\"handle error\\\"\"  # Exact phrase\n```\n\n----------------------------------------\n\nTITLE: Setting up and running Probe Chat using npx\nDESCRIPTION: This snippet shows how to set up the API key and run Probe Chat directly using npx without installation. It also demonstrates how to specify a directory to search.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/cli-ai-workflows.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Set your API key first\nexport ANTHROPIC_API_KEY=your_api_key\n# Or for OpenAI\n# export OPENAI_API_KEY=your_api_key\n\n# Run directly with npx (no installation needed)\nnpx -y @buger/probe-chat@latest\n\n# Or specify a directory to search\nnpx -y @buger/probe-chat@latest /path/to/your/project\n```\n\n----------------------------------------\n\nTITLE: Running Probe AI Chat with npx\nDESCRIPTION: Commands to run the Probe AI chat functionality using npx, including setting API keys and specifying search directories.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n# Run directly with npx (no installation needed)\nnpx -y @buger/probe-chat\n\n# Set your API key\nexport ANTHROPIC_API_KEY=your_api_key\n# Or for OpenAI\n# export OPENAI_API_KEY=your_api_key\n\n# Or specify a directory to search\nnpx -y @buger/probe-chat /path/to/your/project\n```\n\n----------------------------------------\n\nTITLE: Running the Unified Probe Interface Using npx (Bash)\nDESCRIPTION: These commands demonstrate how to invoke the @buger/probe-chat CLI or web interface directly via npx, and how to set required environment variables for OpenAI or Anthropic API keys and permissible search directories. Prerequisite: npx must be available. Key parameters include --web for web UI mode and environment variables such as ANTHROPIC_API_KEY, OPENAI_API_KEY, and ALLOWED_FOLDERS, which govern access and provider credentials. Outputs appear in the terminal or browser depending on mode.\nSOURCE: https://github.com/buger/probe/blob/main/site/web-interface.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Run in CLI mode (default)\nnpx -y @buger/probe-chat@latest\n\n# Run in web interface mode\nnpx -y @buger/probe-chat@latest --web\n\n# Set your API key first (either Anthropic or OpenAI)\nexport ANTHROPIC_API_KEY=your_api_key\n# OR\nexport OPENAI_API_KEY=your_api_key\n\n# Configure allowed folders (required)\nexport ALLOWED_FOLDERS=/path/to/folder1,/path/to/folder2\n```\n\n----------------------------------------\n\nTITLE: Running Probe AI Chat for a Specific Project (Bash)\nDESCRIPTION: Runs the Probe AI chat using `npx`, specifically targeting the code within the `/path/to/your/project` directory. This allows the AI assistant to provide context-aware responses based on the contents of the specified project.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Specify a directory to search (optional)\nnpx -y @buger/probe-chat /path/to/your/project\n```\n\n----------------------------------------\n\nTITLE: Implementing a Code Analysis Pipeline with @buger/probe in JavaScript\nDESCRIPTION: This snippet outlines a code analysis pipeline using @buger/probe's `query` and `search` functions. The `analyzeCodebase` function first uses `query` with language-specific structural patterns to count functions in various programming languages within a codebase. It then uses `search` to look for potential security issues based on a list of sensitive keywords. The collected metrics and potential issues are compiled into an analysis object and saved to a JSON file.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport { search, query } from '@buger/probe@latest';\nimport fs from 'fs/promises';\n\nasync function analyzeCodebase(codebasePath) {\n  const analysis = {\n    timestamp: new Date().toISOString(),\n    codebasePath,\n    metrics: {},\n    patterns: {},\n    potentialIssues: []\n  };\n  \n  // Count functions by language\n  const languages = ['javascript', 'typescript', 'python', 'rust', 'go'];\n  const functionCounts = {};\n  \n  for (const lang of languages) {\n    try {\n      const pattern = lang === 'javascript' || lang === 'typescript'\n        ? 'function $NAME($$$PARAMS) $$$BODY'\n        : lang === 'python'\n          ? 'def $NAME($$$PARAMS): $$$BODY'\n          : lang === 'rust'\n            ? 'fn $NAME($$$PARAMS) $$$BODY'\n            : 'func $NAME($$$PARAMS) $$$BODY';\n      \n      const results = await query({\n        path: codebasePath,\n        pattern,\n        language: lang,\n        maxResults: 1000,\n        json: true\n      });\n      \n      functionCounts[lang] = results.matches ? results.matches.length : 0;\n    } catch (error) {\n      console.error(`Error counting functions in ${lang}:`, error);\n      functionCounts[lang] = -1; // Error indicator\n    }\n  }\n  \n  analysis.metrics.functionCounts = functionCounts;\n  \n  // Find potential security issues\n  const securityPatterns = [\n    'password',\n    'token',\n    'api_key',\n    'apikey',\n    'secret',\n    'credential',\n    'eval(',\n    'exec(',\n    'shell_exec'\n  ];\n  \n  for (const pattern of securityPatterns) {\n    try {\n      const results = await search({\n        path: codebasePath,\n        query: pattern,\n        maxResults: 50,\n        json: true\n      });\n      \n      if (results.matches && results.matches.length > 0) {\n        analysis.potentialIssues.push({\n          pattern,\n          matches: results.matches.map(match => ({\n            file: match.file,\n            line: match.line,\n            content: match.content.substring(0, 100) + '...' // Truncate long content\n          }))\n        });\n      }\n    } catch (error) {\n      console.error(`Error searching for pattern ${pattern}:`, error);\n    }\n  }\n  \n  // Save analysis to file\n  await fs.writeFile(\n    'codebase-analysis.json',\n    JSON.stringify(analysis, null, 2)\n  );\n  \n  return analysis;\n}\n\n// Usage\nconst analysis = await analyzeCodebase('/path/to/your/project');\nconsole.log('Analysis complete. Results saved to codebase-analysis.json');\nconsole.log(`Found ${Object.values(analysis.metrics.functionCounts).reduce((a, b) => a + (b > 0 ? b : 0), 0)} functions across all languages`);\nconsole.log(`Found ${analysis.potentialIssues.length} potential security issues`);\n```\n```\n\n----------------------------------------\n\nTITLE: Limiting Results for AI Integration Example\nDESCRIPTION: Example showing how to limit the token count and format output as JSON for integration with AI systems.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-functionality.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"database connection pool\" --max-tokens 4000 --format json\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Probe AI Chat as npm Package\nDESCRIPTION: Commands to install the Probe AI chat as a global npm package and run it.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n# Install globally\nnpm install -g @buger/probe-chat\n\n# Start the chat interface\nprobe-chat\n```\n\n----------------------------------------\n\nTITLE: Single and Multi-Term Query Syntax with Probe CLI in Bash\nDESCRIPTION: Illustrates basic search term syntax with the Probe CLI using single and multi-term queries. Multi-term queries use implicit AND logic, returning results that match all provided terms. Inputs are search terms provided in quotes; outputs are files or code blocks matching the terms.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-reference.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"authentication\"  # Single term\nprobe search \"user authentication\"  # Multiple terms (AND logic)\n```\n\n----------------------------------------\n\nTITLE: Custom AI Assistant Implementation\nDESCRIPTION: Complete example of building a custom AI assistant using LangChain and Buger Probe for code analysis.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search, query, extract } from '@buger/probe';\nimport { ChatOpenAI } from '@langchain/openai';\nimport { PromptTemplate } from '@langchain/core/prompts';\nimport { StringOutputParser } from '@langchain/core/output_parsers';\n\n// Create a custom AI assistant that can search code\nasync function createCodeAssistant() {\n  // Create a chat model\n  const model = new ChatOpenAI({\n    modelName: \"gpt-4o\",\n    temperature: 0.7\n  });\n  \n  // Create a prompt template\n  const promptTemplate = PromptTemplate.fromTemplate(`\n    You are a code assistant. I'll provide you with a question and some code search results.\n    Please analyze the code and answer the question.\n    \n    Question: {question}\n    \n    Code search results:\n    {searchResults}\n    \n    Your analysis:\n  `);\n  \n  // Create a chain\n  const chain = promptTemplate\n    .pipe(model)\n    .pipe(new StringOutputParser());\n  \n  // Function to answer questions about code\n  async function answerCodeQuestion(question, codebasePath) {\n    // Search for relevant code\n    const searchResults = await search({\n      path: codebasePath,\n      query: question,\n      maxResults: 5,\n      maxTokens: 10000\n    });\n    \n    // Get the answer from the AI\n    const answer = await chain.invoke({\n      question,\n      searchResults\n    });\n    \n    return answer;\n  }\n  \n  return { answerCodeQuestion };\n}\n\n// Usage\nconst assistant = await createCodeAssistant();\nconst answer = await assistant.answerCodeQuestion(\n  \"How is authentication implemented?\",\n  \"/path/to/your/project\"\n);\nconsole.log(answer);\n```\n\n----------------------------------------\n\nTITLE: Launching AI Chat with Probe in Bash\nDESCRIPTION: This command starts the AI chat functionality of Probe using npx. It launches a web interface for the built-in AI agent, which requires an OpenAI or Anthropic API key.\nSOURCE: https://github.com/buger/probe/blob/main/site/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx -y @buger/probe-chat@latest --web\n```\n\n----------------------------------------\n\nTITLE: Building a Code Explanation Chain with Probe and LangChain - JavaScript\nDESCRIPTION: Shows how to construct a LangChain processing chain specifically for code explanation. The chain first uses Probe's 'search' function to retrieve relevant code snippets based on a user's question and then pipes these results, along with the question, into a 'ChatOpenAI' model guided by a 'PromptTemplate' to generate a detailed explanation.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/building-ai-tools.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe';\nimport { ChatOpenAI } from '@langchain/openai';\nimport { PromptTemplate } from '@langchain/core/prompts';\nimport { StringOutputParser } from '@langchain/core/output_parsers';\n\n// Create a chain for code explanation\nasync function createCodeExplainer() {\n  // Create a chat model\n  const model = new ChatOpenAI({\n    modelName: \"gpt-4o\",\n    temperature: 0.5\n  });\n  \n  // Create a prompt template\n  const promptTemplate = PromptTemplate.fromTemplate(`\n    You are a code explanation expert. I'll provide you with a question and some code search results.\n    Please analyze the code and explain it in a clear, concise manner.\n    \n    Question: {question}\n    \n    Code search results:\n    {searchResults}\n    \n    Your explanation:\n  `);\n  \n  // Create a chain\n  const chain = promptTemplate\n    .pipe(model)\n    .pipe(new StringOutputParser());\n  \n  // Function to explain code\n  async function explainCode(question, codebasePath) {\n    // Search for relevant code\n    const searchResults = await search({\n      path: codebasePath,\n      query: question,\n      maxResults: 5,\n      maxTokens: 8000\n    });\n    \n    // Get the explanation from the AI\n    const explanation = await chain.invoke({\n      question,\n      searchResults\n    });\n    \n    return explanation;\n  }\n  \n  return { explainCode };\n}\n\n// Usage\nconst explainer = await createCodeExplainer();\nconst explanation = await explainer.explainCode(\n  \"How does the authentication system work?\",\n  \"/path/to/your/project\"\n);\nconsole.log(explanation);\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running Probe Web Interface with npx\nDESCRIPTION: Basic setup commands for deploying Probe's web interface with API keys, folder configuration, and authentication settings. This snippet shows how to set environment variables and run the web interface using npx.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/deploying-probe-web-interface.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Set your API key first (either Anthropic or OpenAI)\nexport ANTHROPIC_API_KEY=your_anthropic_api_key\n# OR\nexport OPENAI_API_KEY=your_openai_api_key\n\n# Configure allowed folders (required)\nexport ALLOWED_FOLDERS=/path/to/repo1,/path/to/repo2\n\n# Enable authentication for team use\nexport AUTH_ENABLED=true\nexport AUTH_USERNAME=team\nexport AUTH_PASSWORD=secure_password\n\n# Run the web interface\nnpx -y @buger/probe-chat@latest --web\n```\n\n----------------------------------------\n\nTITLE: Integrating @buger/probe Tools with LangChain in JavaScript\nDESCRIPTION: Shows how to create LangChain-compatible tools (search, query, extract) from `@buger/probe` using factory functions (`createSearchTool`, `createQueryTool`, `createExtractTool`). These tools are then bound to a `ChatOpenAI` model using `withTools`, allowing the LangChain agent to utilize probe's code analysis capabilities. Requires `@langchain/openai` and `@buger/probe` packages.\nSOURCE: https://github.com/buger/probe/blob/main/npm/README.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport { ChatOpenAI } from '@langchain/openai';\nimport { tools } from '@buger/probe';\n\n// Create the LangChain tools\nconst searchTool = tools.createSearchTool();\nconst queryTool = tools.createQueryTool();\nconst extractTool = tools.createExtractTool();\n\n// Create a ChatOpenAI instance with tools\nconst model = new ChatOpenAI({\n  modelName: \"gpt-4o\",\n  temperature: 0.7\n}).withTools([searchTool, queryTool, extractTool]);\n\n// Use the model with tools\nasync function chatWithAI(userMessage) {\n  const result = await model.invoke([\n    { role: \"system\", content: \"You are a code intelligence assistant. Use the provided tools to search and analyze code.\" },\n    { role: \"user\", content: userMessage }\n  ]);\n  \n  return result.content;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Probe AI Chat Programmatically in Node.js - JavaScript\nDESCRIPTION: This JavaScript snippet illustrates creating and using a ProbeChat instance in Node.js for programmatic access to the chat functionality, including streaming and non-streaming response options, and running within an Express or Next.js API handler. Dependencies: @buger/probe-chat npm package, correct API key for the selected provider, and optionally 'ai' package for StreamingTextResponse. Required parameters include the model, API key, (optionally) provider force, and allowed project folders. Input: user messages; Output: AI-generated responses (streaming or full).\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ProbeChat } from '@buger/probe-chat';\nimport { StreamingTextResponse } from 'ai';\n\n// Create a chat instance\nconst chat = new ProbeChat({\n  model: 'claude-3-sonnet-20240229',\n  anthropicApiKey: process.env.ANTHROPIC_API_KEY,\n  // Or use OpenAI\n  // openaiApiKey: process.env.OPENAI_API_KEY,\n  // Or use Google\n  // googleApiKey: process.env.GOOGLE_API_KEY,\n  // Force a specific provider\n  // forceProvider: 'anthropic', // Options: 'anthropic', 'openai', 'google'\n  allowedFolders: ['/path/to/your/project']\n});\n\n// In an API route or Express handler\nexport async function POST(req) {\n  const { messages } = await req.json();\n  const userMessage = messages[messages.length - 1].content;\n  \n  // Get a streaming response from the AI\n  const stream = await chat.chat(userMessage, { stream: true });\n  \n  // Return a streaming response\n  return new StreamingTextResponse(stream);\n}\n\n// Or use it in a non-streaming way\nconst response = await chat.chat('How is authentication implemented?');\nconsole.log(response);\n```\n\n----------------------------------------\n\nTITLE: Using the search_code Tool via MCP in JSON\nDESCRIPTION: Provides an example payload for the `search_code` tool within the MCP server. It specifies the target project path (`/path/to/your/project`), an Elasticsearch-like search query (`authentication flow`), and a maximum token limit (`20000`) for the results. This tool performs text-based code searches with session caching.\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-server.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"/path/to/your/project\",\n  \"query\": \"authentication flow\",\n  \"maxTokens\": 20000\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Boolean and Field Queries for Authentication with Probe CLI in Bash\nDESCRIPTION: Demonstrates a complex search for authentication flows using boolean operators to include or exclude multiple terms with Probe CLI. Useful for finding authentication logic without test code. Query string includes AND, OR, and NOT; output is ranked, relevant code blocks.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-reference.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"(login OR authenticate) AND (user OR account) NOT test\"\n```\n\n----------------------------------------\n\nTITLE: Searching for Authentication Flows Example\nDESCRIPTION: Complex query example for finding authentication-related code using boolean operators and exclusions.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-functionality.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"(login OR authenticate) AND (user OR account) NOT test\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Probe AI Chat with npm (Bash)\nDESCRIPTION: Provides commands for globally installing the `@buger/probe-chat` package using npm and then starting the chat interface in either CLI mode (`probe-chat`) or web mode (`probe-chat --web`). Requires npm to be installed.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-chat.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install globally\nnpm install -g @buger/probe-chat@latest\n\n# Start the chat interface in CLI mode\nprobe-chat\n\n# Start the chat interface in web mode\nprobe-chat --web\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Probe Node.js SDK as a Library\nDESCRIPTION: Example of using the Probe SDK's core functions (search, query, extract) in a Node.js application. Demonstrates how to import and use these functions with basic parameters.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search, query, extract } from '@buger/probe@latest';\n\n// Search for code\nconst searchResults = await search({\n  path: '/path/to/your/project',\n  query: 'function',\n  maxResults: 10\n});\n\n// Query for specific code structures\nconst queryResults = await query({\n  path: '/path/to/your/project',\n  pattern: 'function $NAME($$$PARAMS) $$$BODY',\n  language: 'javascript'\n});\n\n// Extract code blocks\nconst extractResults = await extract({\n  files: ['/path/to/your/project/src/main.js:42']\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting Code with LLM Prompt using Probe SDK - JavaScript\nDESCRIPTION: Shows advanced usage of the 'extract' function to integrate with Large Language Models (LLMs). This example demonstrates extracting a specific function ('authenticate' from 'auth.js') and providing context using a built-in prompt template ('engineer') along with specific 'instructions' for the LLM.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/building-ai-tools.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Extract with LLM prompt and instructions\nconst codeWithPrompt = await extract({\n  files: ['/path/to/your/project/src/auth.js#authenticate'],\n  prompt: 'engineer',  // Use engineer template\n  instructions: 'Explain this authentication function'\n});\n```\n\n----------------------------------------\n\nTITLE: Using the query function in @buger/probe\nDESCRIPTION: Detailed example of using the query function from @buger/probe, including all available options.\nSOURCE: https://github.com/buger/probe/blob/main/npm/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { query } from '@buger/probe';\n\nconst results = await query({\n  path: '/path/to/your/project',\n  pattern: 'function $NAME($$$PARAMS) $$$BODY',\n  // Optional parameters\n  language: 'javascript',\n  ignore: ['node_modules', 'dist'],\n  allowTests: false,\n  maxResults: 10,\n  format: 'markdown',\n  json: false,\n  binaryOptions: {\n    forceDownload: false,\n    version: '1.0.0'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Searching Code Patterns with Probe SDK - JavaScript\nDESCRIPTION: Illustrates the basic usage of the 'search' function from the '@buger/probe' SDK. This function asynchronously searches for code patterns within a specified project directory based on a query string. Key parameters include 'path' (project directory), 'query' (search term), and 'maxResults' (limit on results).\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/building-ai-tools.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe';\n\n// Search for code patterns\nconst results = await search({\n  path: '/path/to/your/project',\n  query: 'authentication',\n  maxResults: 10\n});\n\nconsole.log(results);\n```\n\n----------------------------------------\n\nTITLE: Using the search function in @buger/probe\nDESCRIPTION: Detailed example of using the search function from @buger/probe, including all available options.\nSOURCE: https://github.com/buger/probe/blob/main/npm/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe';\n\nconst results = await search({\n  path: '/path/to/your/project',\n  query: 'function',\n  // Optional parameters\n  filesOnly: false,\n  ignore: ['node_modules', 'dist'],\n  excludeFilenames: false,\n  reranker: 'hybrid',\n  frequencySearch: true,\n  maxResults: 10,\n  maxBytes: 1000000,\n  maxTokens: 40000,\n  allowTests: false,\n  noMerge: false,\n  mergeThreshold: 5,\n  json: false,\n  binaryOptions: {\n    forceDownload: false,\n    version: '1.0.0'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Reports (Markdown/JSON) with probe search in Bash\nDESCRIPTION: Illustrates using the `--format` flag (`markdown`, `json`) with `probe search` to generate structured reports. The output is redirected to files (e.g., `todo-report.md`, `error-handling.json`) suitable for documentation or further automated processing.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/advanced-cli.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Generate a markdown report of all TODO comments\nprobe search \"TODO\" --format markdown > todo-report.md\n\n# Create a JSON report of error handling patterns\nprobe search \"try|catch|error\" --format json > error-handling.json\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of Probe Search Function\nDESCRIPTION: Detailed example of using the search function with all available options. Demonstrates how to configure search parameters, file exclusions, and output formatting.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe@latest';\n\nconst results = await search({\n  path: '/path/to/your/project',\n  query: 'function',\n  // Optional parameters\n  filesOnly: false,\n  ignore: ['node_modules', 'dist'],\n  excludeFilenames: false,\n  reranker: 'hybrid',\n  frequencySearch: true,\n  exact: false,\n  maxResults: 10,\n  maxBytes: 1000000,\n  maxTokens: 40000,\n  allowTests: false,\n  noMerge: false,\n  mergeThreshold: 5,\n  json: false,\n  binaryOptions: {\n    forceDownload: false,\n    version: '1.0.0'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Probe's Interactive AI Chat\nDESCRIPTION: Instructions for using Probe's built-in AI assistant with web interface, including setting up API keys and example usage.\nSOURCE: https://github.com/buger/probe/blob/main/site/quick-start.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Run directly with npx (no installation needed)\nnpx -y @buger/probe-chat@latest --web\nnpx -y @buger/probe-chat@latest\n\n# Set your API key first\nexport ANTHROPIC_API_KEY=your_api_key\n# Or for OpenAI\n# export OPENAI_API_KEY=your_api_key\n\n# Specify a directory to search (optional)\nnpx -y @buger/probe-chat@latest /path/to/your/project\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Probe Search, Query, and Extract in JavaScript\nDESCRIPTION: This JavaScript snippet provides basic examples of using the core functions from the `@buger/probe` library. It shows how to use `search` to find code snippets matching a textual query, `query` to find code structures matching a specific pattern (like a function definition) in a given language, and `extract` to retrieve a specific code block based on its file path and line number.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/nodejs-sdk.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search, query, extract } from '@buger/probe';\n\n// Search for code\nconst searchResults = await search({\n  path: '/path/to/your/project',\n  query: 'function',\n  maxResults: 10\n});\n\n// Query for specific code structures\nconst queryResults = await query({\n  path: '/path/to/your/project',\n  pattern: 'function $NAME($$$PARAMS) $$$BODY',\n  language: 'javascript'\n});\n\n// Extract code blocks\nconst extractResults = await extract({\n  files: ['/path/to/your/project/src/main.js:42']\n});\n```\n\n----------------------------------------\n\nTITLE: Example: Limiting Results for AI Integration with Probe CLI in Bash\nDESCRIPTION: Illustrates calling Probe CLI with query terms, maximum token count, and JSON output format, intended for AI pipelines that require machine-readable, size-constrained code search results. Inputs are query terms with options --max-tokens and --format=json; outputs are JSON-formatted, token-limited ranked results.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-reference.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"database connection pool\" --max-tokens 4000 --format json\n```\n\n----------------------------------------\n\nTITLE: Automating Code Review with Probe and OpenAI in JavaScript\nDESCRIPTION: This JavaScript function `reviewPullRequest` demonstrates automating code reviews for changed files in a repository. It uses `@buger/probe`'s `extract` to get file content and `search` to find potential security issues (passwords, tokens, etc.). It then utilizes `ChatOpenAI` from LangChain to generate a review based on the code and identified issues. Reviews (or errors) for each file are collected and saved to a `code-review.json` file.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/nodejs-sdk.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search, extract } from '@buger/probe';\nimport { ChatOpenAI } from '@langchain/openai';\nimport fs from 'fs/promises';\n\nasync function reviewPullRequest(repoPath, changedFiles) {\n  const model = new ChatOpenAI({\n    modelName: \"gpt-4o\",\n    temperature: 0.3\n  });\n  \n  const reviews = [];\n  \n  for (const file of changedFiles) {\n    try {\n      // Extract the file content\n      const fileContent = await extract({\n        files: [path.join(repoPath, file)],\n        json: true\n      });\n      \n      // Search for potential issues\n      const securityIssues = await search({\n        path: path.join(repoPath, file),\n        query: 'password OR token OR secret OR eval OR exec',\n        maxResults: 10,\n        json: true\n      });\n      \n      // Generate review using AI\n      const response = await model.invoke([\n        {\n          role: \"system\",\n          content: \"You are a code review expert. Review the provided code for issues related to security, performance, maintainability, and best practices. Be concise but thorough.\"\n        },\n        {\n          role: \"user\",\n          content: `Review this file: ${file}\\n\\nContent:\\n${fileContent.content}\\n\\nPotential security issues found:\\n${JSON.stringify(securityIssues.matches || [])}`\n        }\n      ]);\n      \n      reviews.push({\n        file,\n        review: response.content\n      });\n      \n      console.log(`Reviewed ${file}`);\n    } catch (error) {\n      console.error(`Error reviewing ${file}:`, error);\n      reviews.push({\n        file,\n        error: error.message\n      });\n    }\n  }\n  \n  // Save reviews to file\n  await fs.writeFile(\n    'code-review.json',\n    JSON.stringify(reviews, null, 2)\n  );\n  \n  return reviews;\n}\n\n// Usage\nconst changedFiles = ['src/auth.js', 'src/api.js', 'src/utils.js'];\nconst reviews = await reviewPullRequest('/path/to/your/project', changedFiles);\nconsole.log(`Reviewed ${reviews.length} files. Results saved to code-review.json`);\n```\n\n----------------------------------------\n\nTITLE: Integrating @buger/probe Tools with Vercel AI SDK in JavaScript\nDESCRIPTION: Demonstrates how to use the pre-built search, query, and extract tools from `@buger/probe` within the Vercel AI SDK's `generateText` function. It sets up a chat model with the probe tools enabled for code intelligence tasks, requiring the `ai` and `@buger/probe` packages.\nSOURCE: https://github.com/buger/probe/blob/main/npm/README.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport { generateText } from 'ai';\nimport { tools } from '@buger/probe';\n\n// Use the pre-built tools with Vercel AI SDK\nasync function chatWithAI(userMessage) {\n  const result = await generateText({\n    model: provider(modelName),\n    messages: [{ role: 'user', content: userMessage }],\n    system: \"You are a code intelligence assistant. Use the provided tools to search and analyze code.\",\n    tools: {\n      search: tools.searchTool,\n      query: tools.queryTool,\n      extract: tools.extractTool\n    },\n    maxSteps: 15,\n    temperature: 0.7\n  });\n  \n  return result.text;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Advanced search example using @buger/probe\nDESCRIPTION: An advanced example showing how to use multiple options with the search function in @buger/probe.\nSOURCE: https://github.com/buger/probe/blob/main/npm/README.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe';\n\nasync function advancedSearchExample() {\n  try {\n    const results = await search({\n      path: '/path/to/your/project',\n      query: 'config AND (parse OR tokenize)',\n      ignore: ['node_modules', 'dist'],\n      reranker: 'hybrid',\n      frequencySearch: true,\n      maxResults: 10,\n      maxTokens: 20000,\n      allowTests: false\n    });\n    \n    console.log('Advanced search results:');\n    console.log(results);\n  } catch (error) {\n    console.error('Advanced search error:', error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of Probe Extract Function\nDESCRIPTION: Detailed example of using the extract function with all available options. Demonstrates how to extract code from specific files and lines, and configure output formatting.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extract } from '@buger/probe@latest';\n\nconst results = await extract({\n  files: [\n    '/path/to/your/project/src/main.js',\n    '/path/to/your/project/src/utils.js:42'  // Extract from line 42\n  ],\n  // Optional parameters\n  allowTests: false,\n  contextLines: 2,\n  format: 'markdown',\n  json: false,\n  binaryOptions: {\n    forceDownload: false,\n    version: '1.0.0'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Search, Ranking, and Filtering via CLI - Bash\nDESCRIPTION: Examples of advanced command-line switches for Code Search, including modes to search files only, include filenames, enable frequency-based search, control ranking algorithms (TF-IDF/BM25/hybrid), result limits, and custom ignore patterns. These commands are intended as direct examples for user interaction and scripting, requiring substitution for actual search patterns and file globs as needed.\nSOURCE: https://github.com/buger/probe/blob/main/tests/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncode-search --path . --query search --files-only\n```\n\nLANGUAGE: bash\nCODE:\n```\ncode-search --path . --query search --include-filenames\n```\n\nLANGUAGE: bash\nCODE:\n```\ncode-search --path . --query search --frequency\n```\n\nLANGUAGE: bash\nCODE:\n```\ncode-search --path . --query search --reranker tfidf\n```\n\nLANGUAGE: bash\nCODE:\n```\ncode-search --path . --query search --reranker bm25\n```\n\nLANGUAGE: bash\nCODE:\n```\ncode-search --path . --query search --reranker hybrid\n```\n\nLANGUAGE: bash\nCODE:\n```\ncode-search --path . --query search --max-results 10\n```\n\nLANGUAGE: bash\nCODE:\n```\ncode-search --path . --query search --max-bytes 10240\n```\n\nLANGUAGE: bash\nCODE:\n```\ncode-search --path . --query search --max-tokens 500\n```\n\nLANGUAGE: bash\nCODE:\n```\ncode-search --path . --query search --ignore \"*.py\" --ignore \"*.js\"\n```\n\n----------------------------------------\n\nTITLE: Using Probe CLI Extract Command\nDESCRIPTION: Examples of using the Probe CLI extract command to extract code blocks from files with various options and formats.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n# 1) Extract a function containing line 42 from main.rs\nprobe extract src/main.rs:42\n\n# 2) Extract multiple files or blocks\nprobe extract src/main.rs:42 src/lib.rs:15 src/cli.rs\n\n# 3) Extract with JSON output format\nprobe extract src/main.rs:42 --format json\n\n# 4) Extract with 5 lines of context around the specified line\nprobe extract src/main.rs:42 --context 5\n\n# 5) Extract a specific function by name (using # symbol syntax)\nprobe extract src/main.rs#handle_extract\n\n# 6) Extract a specific line range (using : syntax)\nprobe extract src/main.rs:10-20\n\n# 7) Extract from stdin (useful with error messages or compiler output)\ncat error_log.txt | probe extract\n```\n\n----------------------------------------\n\nTITLE: Running Probe Chat with Command-Line Options (Bash)\nDESCRIPTION: These example bash commands show how to customize Probe's behavior via command-line arguments, such as selecting web mode, specifying port, choosing the AI model, or overriding the search path. They require Node.js and an installed version of the Probe project. Options include --web, --port, --model, and a direct codebase path, influencing interface mode, network port, AI backend, and target directories respectively. Output is a running chat tool adapted to the arguments given.\nSOURCE: https://github.com/buger/probe/blob/main/site/web-interface.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Run in web mode on port 3000\nnode index.js --web --port 3000\n\n# Run in CLI mode with a specific model\nnode index.js --model claude-3-7-sonnet-latest\n\n# Search a specific codebase\nnode index.js /path/to/codebase\n```\n\n----------------------------------------\n\nTITLE: Extracting Code Block by Line Number using Probe (Bash)\nDESCRIPTION: Uses the `probe extract` command to identify and output the specific function, class, or other relevant code block that contains line 42 within the file `src/main.rs`.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nprobe extract src/main.rs:42\n```\n\n----------------------------------------\n\nTITLE: Basic and Advanced Search Examples with Probe\nDESCRIPTION: This snippet demonstrates various ways to use the 'search' command, including basic searches, specific folder searches, limiting results, and using advanced query operators.\nSOURCE: https://github.com/buger/probe/blob/main/site/cli-mode.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Basic search - current directory\nprobe search \"authentication flow\"\n\n# Search in specific folder\nprobe search \"updateUser\" ./src/api\n\n# Limit for AI context windows\nprobe search \"error handling\" --max-tokens 8000\n\n# Find raw files without parsing\nprobe search \"config\" --files-only\n\n# Elastic search queries\n# Use AND operator for terms that must appear together\nprobe search \"error AND handling\" ./\n\n# Use OR operator for alternative terms\nprobe search \"login OR authentication OR auth\" ./src\n\n# Group terms with parentheses for complex queries\nprobe search \"(error OR exception) AND (handle OR process)\" ./\n\n# Use wildcards for partial matching\nprobe search \"auth* connect*\" ./\n\n# Exclude terms with NOT operator\nprobe search \"database NOT sqlite\" ./\n\n# Output as JSON for programmatic use\nprobe search \"authentication\" --format json\n\n# Output as XML\nprobe search \"authentication\" --format xml\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Code Structures with Probe SDK - JavaScript\nDESCRIPTION: Shows how to use the 'query' function from the '@buger/probe' SDK to find specific code structures, such as function definitions, matching a given structural pattern. Requires the project 'path', the 'pattern' to match (using placeholders like $NAME, $$$PARAMS, $$$BODY), and optionally the 'language'.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/building-ai-tools.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { query } from '@buger/probe';\n\n// Find JavaScript functions\nconst functions = await query({\n  path: '/path/to/your/project',\n  pattern: 'function $NAME($$$PARAMS) $$$BODY',\n  language: 'javascript'\n});\n\nconsole.log(functions);\n```\n\n----------------------------------------\n\nTITLE: Using Probe MCP 'query_code' Tool via JSON\nDESCRIPTION: This JSON object defines the parameters for the 'query_code' tool, which finds specific code structures using tree-sitter patterns. It includes the project 'path', the tree-sitter 'pattern' (e.g., 'fn $NAME($$$PARAMS) $$$BODY' for Rust functions), and the target code 'language'.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"/path/to/your/project\",\n  \"pattern\": \"fn $NAME($$$PARAMS) $$$BODY\",\n  \"language\": \"rust\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Probe as a Command-Line Tool\nDESCRIPTION: Examples of using the Probe SDK as a command-line tool when installed globally. Shows how to perform search, query, and extract operations from the command line.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Search for code\nprobe search \"function\" /path/to/your/project\n\n# Query for specific code structures\nprobe query \"function $NAME($$$PARAMS) $$$BODY\" /path/to/your/project\n\n# Extract code blocks\nprobe extract /path/to/your/project/src/main.js:42\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Code Search API with Probe and Express - JavaScript\nDESCRIPTION: Provides an example of creating a simple REST API using Node.js and the Express framework. This API wraps the core Probe SDK functions ('search', 'query', 'extract') and exposes them via HTTP POST endpoints ('/api/search', '/api/query', '/api/extract'). It includes basic request body parsing and error handling.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/building-ai-tools.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\nimport { search, query, extract } from '@buger/probe';\n\nconst app = express();\napp.use(express.json());\n\n// Search endpoint\napp.post('/api/search', async (req, res) => {\n  try {\n    const { path, query, options } = req.body;\n    const results = await search({\n      path,\n      query,\n      ...options\n    });\n    res.json({ results });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Query endpoint\napp.post('/api/query', async (req, res) => {\n  try {\n    const { path, pattern, language, options } = req.body;\n    const results = await query({\n      path,\n      pattern,\n      language,\n      ...options\n    });\n    res.json({ results });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Extract endpoint\napp.post('/api/extract', async (req, res) => {\n  try {\n    const { files, prompt, instructions, options } = req.body;\n    const results = await extract({\n      files,\n      prompt,\n      instructions,\n      ...options\n    });\n    res.json({ results });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Code search API running on port 3000');\n});\n```\n\n----------------------------------------\n\nTITLE: Boolean Operators in Probe Search\nDESCRIPTION: Examples of using boolean operators (AND, OR, NOT) to create more precise search queries.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-functionality.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"error AND handling\"  # Require both terms\nprobe search \"login OR authentication\"  # Match either term\nprobe search \"database NOT sqlite\"  # Exclude term\n```\n\n----------------------------------------\n\nTITLE: Code Query Examples with Probe\nDESCRIPTION: This snippet demonstrates how to use the 'query' command to find specific code structures in different programming languages, such as functions, structs, and classes.\nSOURCE: https://github.com/buger/probe/blob/main/site/cli-mode.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Find Rust functions\nprobe query \"fn $NAME($$$PARAMS) $$$BODY\" ./src --language rust\n\n# Find Python functions\nprobe query \"def $NAME($$$PARAMS): $$$BODY\" ./src --language python\n\n# Find Go structs\nprobe query \"type $NAME struct { $$$FIELDS }\" ./src --language go\n\n# Find C++ classes\nprobe query \"class $NAME { $$$METHODS };\" ./src --language cpp\n\n# Output as JSON for programmatic use\nprobe query \"fn $NAME($$$PARAMS) $$$BODY\" ./src --language rust --format json\n```\n\n----------------------------------------\n\nTITLE: Integrating @buger/probe Tools with LangChain ChatOpenAI in JavaScript\nDESCRIPTION: This snippet demonstrates how to integrate @buger/probe tools (search, query, extract) with LangChain's ChatOpenAI model in JavaScript. It initializes the tools with a unique session ID and debug options, then creates a ChatOpenAI model instance configured to use these tools. An example function `chatWithAI` shows how to invoke the model with system and user messages to perform code intelligence tasks.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport { ChatOpenAI } from '@langchain/openai';\nimport { tools, createSearchTool, createQueryTool, createExtractTool } from '@buger/probe@latest';\nimport { randomUUID } from 'crypto';\n\n// Generate a session ID\nconst sessionId = randomUUID();\n\n// Create the LangChain tools with configuration\nconst searchTool = tools.createSearchTool({\n  sessionId,\n  debug: process.env.DEBUG === 'true'\n});\nconst queryTool = tools.createQueryTool({ debug: true });\nconst extractTool = tools.createExtractTool({ debug: true });\n\n// Create a ChatOpenAI instance with tools\nconst model = new ChatOpenAI({\n  modelName: \"gpt-4o\",\n  temperature: 0.7\n}).withTools([searchTool, queryTool, extractTool]);\n\n// Use the model with tools\nasync function chatWithAI(userMessage) {\n  const result = await model.invoke([\n    { role: \"system\", content: \"You are a code intelligence assistant. Use the provided tools to search and analyze code.\" },\n    { role: \"user\", content: userMessage }\n  ]);\n  \n  return result.content;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Format in Probe Commands\nDESCRIPTION: Examples of how to use the --format or -o option to specify the output format for different Probe commands. The available formats include color, terminal, markdown, plain, json, and xml.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"query\" --format json\nprobe query \"pattern\" ./src --format xml\nprobe extract file.rs:42 --format markdown\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of Probe Query Function\nDESCRIPTION: Detailed example of using the query function with all available options. Shows how to configure query parameters, language selection, and output formatting.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { query } from '@buger/probe@latest';\n\nconst results = await query({\n  path: '/path/to/your/project',\n  pattern: 'function $NAME($$$PARAMS) $$$BODY',\n  // Optional parameters\n  language: 'javascript',\n  ignore: ['node_modules', 'dist'],\n  allowTests: false,\n  maxResults: 10,\n  format: 'markdown',\n  json: false,\n  binaryOptions: {\n    forceDownload: false,\n    version: '1.0.0'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using ProbeChat programmatically in Node.js\nDESCRIPTION: Example of importing and using the ProbeChat class programmatically in a Node.js application. Demonstrates creating a chat instance, getting responses, retrieving usage statistics, and clearing history.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/npm/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ProbeChat, tools } from '@buger/probe-chat';\n\n// Create a new chat instance\nconst chat = new ProbeChat({\n  debug: true,\n  model: 'claude-3-7-sonnet-latest',\n  anthropicApiKey: 'your-api-key',\n  allowedFolders: ['/path/to/your/project']\n});\n\n// Get a response from the chat\nconst response = await chat.chat('How is the authentication implemented in this codebase?');\nconsole.log(response);\n\n// Get token usage statistics\nconst usage = chat.getTokenUsage();\nconsole.log(`Request tokens: ${usage.request}`);\nconsole.log(`Response tokens: ${usage.response}`);\nconsole.log(`Total tokens: ${usage.total}`);\n\n// Clear the chat history\nchat.clearHistory();\n```\n\n----------------------------------------\n\nTITLE: Integrating Probe Tools with Vercel AI SDK in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to integrate `@buger/probe`'s functionalities (`search`, `query`, `extract`) as tools within the Vercel AI SDK. It generates a unique session ID for tool isolation, configures the tools with options like `sessionId` and `maxTokens`, and then passes these configured tools to the `generateText` function from the `ai` package. This allows an AI model to use Probe's capabilities to analyze code based on user messages.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/nodejs-sdk.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { generateText } from 'ai';\nimport { searchTool, queryTool, extractTool } from '@buger/probe';\nimport { randomUUID } from 'crypto';\n\n// Generate a session ID for tool isolation\nconst sessionId = randomUUID();\n\n// Configure tools with options\nconst configOptions = {\n  sessionId,\n  debug: process.env.DEBUG === 'true',\n  maxTokens: 30000 // Optional: override default max tokens\n};\n\n// Create configured tool instances\nconst configuredTools = {\n  search: searchTool(configOptions),\n  query: queryTool(configOptions),\n  extract: extractTool(configOptions)\n};\n\n// Use the configured tools with Vercel AI SDK\nasync function chatWithAI(userMessage) {\n  const result = await generateText({\n    model: provider(modelName),\n    messages: [{ role: 'user', content: userMessage }],\n    system: \"You are a code intelligence assistant. Use the provided tools to search and analyze code.\",\n    tools: configuredTools,\n    maxSteps: 15,\n    temperature: 0.7\n  });\n  \n  return result.text;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Manually Installed Probe MCP Server in JSON\nDESCRIPTION: This JSON configuration block shows how to configure an AI editor to use a manually installed Probe MCP server. It defines an MCP server named 'probe' that directly invokes the 'probe-mcp' command, assuming it's available in the system's PATH after global installation.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"probe\": {\n      \"command\": \"probe-mcp\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Probe Tool Generators with Vercel AI SDK - JavaScript\nDESCRIPTION: Illustrates the use of Probe's tool *generators* ('searchTool()', 'queryTool()', 'extractTool()') with the Vercel AI SDK ('generateText'). This approach allows passing configuration options like 'sessionId' for concurrent request isolation, 'debug' for logging, and 'maxTokens'. A unique 'sessionId' is generated using 'crypto.randomUUID()'.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/building-ai-tools.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { generateText } from 'ai';\nimport { searchTool, queryTool, extractTool } from '@buger/probe';\nimport { randomUUID } from 'crypto';\n\n// Generate a session ID for tool isolation\nconst sessionId = randomUUID();\nconsole.log(`Generated session ID: ${sessionId}`);\n\n// Configure tools with options\nconst configOptions = {\n  sessionId,\n  debug: process.env.DEBUG === 'true',\n  maxTokens: 30000 // Optional: override default max tokens\n};\n\n// Create configured tool instances\nconst configuredTools = {\n  search: searchTool(configOptions),\n  query: queryTool(configOptions),\n  extract: extractTool(configOptions)\n};\n\n// Use the configured tools with Vercel AI SDK\nasync function chatWithAI(userMessage) {\n  const result = await generateText({\n    model: provider(modelName),\n    messages: [{ role: 'user', content: userMessage }],\n    system: \"You are a code intelligence assistant. Use the provided tools to search and analyze code.\",\n    tools: configuredTools,\n    maxSteps: 15,\n    temperature: 0.7\n  });\n  \n  return result.text;\n}\n\n// Example usage\nconst response = await chatWithAI(\"Find all API endpoints in this project\");\nconsole.log(response);\n```\n\n----------------------------------------\n\nTITLE: Using the query_code Tool in Probe MCP via JSON\nDESCRIPTION: This JSON object demonstrates how to use the `query_code` tool to find specific code structures. It defines the project path, a tree-sitter pattern (`fn $NAME($$$PARAMS) $$$BODY`) to find Rust function definitions, and specifies the language context as \"rust\".\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-integration.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"/path/to/your/project\",\n  \"pattern\": \"fn $NAME($$$PARAMS) $$$BODY\",\n  \"language\": \"rust\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Discovering API Endpoints via Function Name Wildcards in Probe CLI in Bash\nDESCRIPTION: Shows how to combine field specifiers, wildcards, and required terms to target API endpoint functions using Probe CLI. The query matches function names starting with 'create' and requires presence of 'api' and 'endpoint'. Returns full function definitions for API creation points.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-reference.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"function:create* api endpoint\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript JSON Output Parser\nDESCRIPTION: Example Node.js script for parsing JSON output from the probe search command, including handling of the --keep-input flag results.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst { execSync } = require('child_process');\n\n// Run probe search and capture output\nconst output = execSync('probe search \"authentication\" --format json', { encoding: 'utf-8' });\nconst results = JSON.parse(output);\n\n// Process the results\n// Check if original input is present (when using --keep-input)\nif (results.original_input) {\n  console.log(`Original Input:\\n${results.original_input}`);\n  console.log('---');\n}\n\nresults.results.forEach(result => {\n  console.log(`File: ${result.file}`);\n  console.log(`Lines: ${result.lines[0]}-${result.lines[1]}`);\n  console.log(`Code:\\n${result.code}`);\n  console.log('---');\n});\n\n// Get summary information\nconsole.log(`Found ${results.summary.count} results`);\nconsole.log(`Total bytes: ${results.summary.total_bytes}`);\nconsole.log(`Total tokens: ${results.summary.total_tokens}`);\n```\n\n----------------------------------------\n\nTITLE: Configuring and Enabling Authentication for the Web Interface (Bash and .env)\nDESCRIPTION: This snippet demonstrates how to enable and configure HTTP basic authentication for the web UI by setting environment variables either in the shell or in the .env configuration file. Variables set include AUTH_ENABLED, AUTH_USERNAME, and AUTH_PASSWORD, which together activate and control credentials required for access. When active, users (or API clients) must provide valid credentials to avoid receiving a 401 error from the server.\nSOURCE: https://github.com/buger/probe/blob/main/site/web-interface.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Enable authentication\nexport AUTH_ENABLED=true\n\n# Set custom username and password (optional)\nexport AUTH_USERNAME=admin\nexport AUTH_PASSWORD=secure_password\n```\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_ENABLED=true\nAUTH_USERNAME=admin\nAUTH_PASSWORD=secure_password\n```\n\n----------------------------------------\n\nTITLE: Query API Reference\nDESCRIPTION: Complete API reference for the query function with all supported parameters and configuration options.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport { query } from '@buger/probe';\n\nconst results = await query({\n  path: '/path/to/your/project',\n  pattern: 'function $NAME($$$PARAMS) $$$BODY',\n  // Optional parameters\n  language: 'javascript',\n  ignore: ['node_modules', 'dist'],\n  allowTests: false,\n  maxResults: 10,\n  format: 'markdown',\n  json: false,\n  binaryOptions: {\n    forceDownload: false,\n    version: '1.0.0'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Robust Error Handling for Probe Searches in JavaScript\nDESCRIPTION: Wraps the @buger/probe search function in a try-catch block to capture and process various error types, logging meaningful messages for binary absence, permission issues, and timeouts. This pattern helps prevent crashes in production by handling failures gracefully and providing fallbacks. Requires only the '@buger/probe' package, inputs generic search parameters, and returns either the search results or an error structure indicating the problem; may be extended for specific remediation logic.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/building-ai-tools.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe';\n\nasync function robustSearch(params) {\n  try {\n    return await search(params);\n  } catch (error) {\n    console.error('Search error:', error);\n    \n    // Handle specific errors\n    if (error.message.includes('Binary not found')) {\n      // Handle missing binary\n      console.error('Probe binary not found. Trying to reinstall...');\n      // Implement reinstall logic\n    } else if (error.message.includes('Permission denied')) {\n      // Handle permission issues\n      console.error('Permission denied. Check file permissions.');\n    } else if (error.message.includes('timeout')) {\n      // Handle timeouts\n      console.error('Search timed out. Try with a more specific query.');\n    }\n    \n    // Return a fallback result\n    return { error: error.message, fallback: true };\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating Code Documentation Snippets using probe query and extract in Bash\nDESCRIPTION: Demonstrates a workflow for documentation generation using Probe. It uses `probe query` with a language-specific pattern (`--language typescript`) to find exported functions and either saves the list or pipes the query results directly to `probe extract` to generate API documentation snippets in Markdown.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/advanced-cli.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# Extract all exported functions\nprobe query \"export function $NAME($$$PARAMS) $$$BODY\" ./src --language typescript > exported-functions.txt\n\n# Generate API documentation\nprobe query \"export function $NAME($$$PARAMS) $$$BODY\" ./src --language typescript | \\\n  probe extract > api-docs.md\n```\n\n----------------------------------------\n\nTITLE: Enabling Authentication for Probe Web Interface\nDESCRIPTION: Shows how to enable basic authentication for securing the Probe web interface by setting the AUTH_ENABLED, AUTH_USERNAME, and AUTH_PASSWORD environment variables.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/deploying-probe-web-interface.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Enable basic authentication\nexport AUTH_ENABLED=true\nexport AUTH_USERNAME=your_username\nexport AUTH_PASSWORD=your_secure_password\n```\n\n----------------------------------------\n\nTITLE: API: Chatting with the AI via /api/chat Endpoint (JSON)\nDESCRIPTION: This pair of request and response JSON bodies illustrate how to programmatically send natural language messages to the AI agent via POST /api/chat. The 'message' field contains the user query, and 'stream' toggles streaming vs. non-streaming behavior. The non-streaming response returns the AI reply, token usage statistics, and a timestamp; in streaming mode, the server streams plain text responses. Utilizes OpenAI or Anthropic backends as configured and may require authentication if enabled.\nSOURCE: https://github.com/buger/probe/blob/main/site/web-interface.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"your question about the code\",\n  \"stream\": true\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\": \"AI response text\",\n  \"tokenUsage\": {\n    \"request\": 123,\n    \"response\": 456,\n    \"total\": 579\n  },\n  \"timestamp\": \"2025-08-03T07:10:00.000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Common JSON Structure for Probe Output\nDESCRIPTION: The shared top-level JSON structure used by all three Probe commands. It includes a results array and a summary object with count, total_bytes, and total_tokens fields.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    // Array of result objects\n  ],\n  \"summary\": {\n    \"count\": 5,           // Number of results\n    \"total_bytes\": 1024,  // Total bytes of code in results\n    \"total_tokens\": 256   // Total tokens in results (for AI usage)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging and Contextual Extraction with Probe CLI in Bash\nDESCRIPTION: This group of Bash snippets shows how Probe can extract code related to errors directly from log files or provide code context by line number. The cat and pipe pattern enables seamless flow from error output to code extraction, while the --context flag adjusts the amount of surrounding code included. Inputs are log files or file paths and line numbers; outputs are contextual code blocks for debugging. Probe CLI must be installed and available on the command line.\nSOURCE: https://github.com/buger/probe/blob/main/site/code-extraction.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Extract code from error stack trace\ncat error.log | probe extract\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Extract function with additional context\nprobe extract src/api.js:27 --context 10\n\n```\n\n----------------------------------------\n\nTITLE: Using the Probe Node.js SDK 'search' Function in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates using the 'search' function from the '@buger/probe' SDK. It imports the function and calls it asynchronously to search for code matching the 'query' within the specified 'path', limiting results with 'maxResults'.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe';\n\nconst searchResults = await search({\n  path: '/path/to/your/project',\n  query: 'function',\n  maxResults: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Probe using curl for macOS and Linux\nDESCRIPTION: Downloads and executes an installation script for Probe on macOS and Linux systems. The script detects OS/architecture, downloads the appropriate binary, verifies its checksum, and installs it to /usr/local/bin.\nSOURCE: https://github.com/buger/probe/blob/main/site/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://raw.githubusercontent.com/buger/probe/main/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Using the Probe Search Command\nDESCRIPTION: The basic command structure for using Probe search, including the required query parameter and optional path and options.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-functionality.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nprobe search <QUERY> [PATH] [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Extracting Code Blocks with Probe\nDESCRIPTION: Examples of using Probe to extract specific functions or code blocks, including usage with failing test output and LLM prompts.\nSOURCE: https://github.com/buger/probe/blob/main/site/quick-start.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nprobe extract src/main.rs:42\n\ngo test | probe extract\n\n# Extract with engineer prompt template\nprobe extract src/auth.rs#authenticate --prompt engineer --instructions \"Explain this authentication function\"\n\n# Extract with architect prompt template\nprobe extract src/api.js --prompt architect --instructions \"Analyze this API module\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Raw Request Debugging (Bash)\nDESCRIPTION: Starts the application using npm with raw request debugging enabled. This is done by setting the DEBUG_RAW_REQUEST environment variable to true before the npm start command. This mode specifically reveals the exact prompts being sent to the Large Language Models (LLMs).\nSOURCE: https://github.com/buger/probe/blob/main/site/web-interface.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG_RAW_REQUEST=true npm start\n```\n\n----------------------------------------\n\nTITLE: Using @buger/probe as a Node.js library\nDESCRIPTION: Example of how to use @buger/probe as a Node.js library, demonstrating search, query, and extract functions.\nSOURCE: https://github.com/buger/probe/blob/main/npm/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search, query, extract } from '@buger/probe';\n\n// Search for code\nconst searchResults = await search({\n  path: '/path/to/your/project',\n  query: 'function',\n  maxResults: 10\n});\n\n// Query for specific code structures\nconst queryResults = await query({\n  path: '/path/to/your/project',\n  pattern: 'function $NAME($$$PARAMS) $$$BODY',\n  language: 'javascript'\n});\n\n// Extract code blocks\nconst extractResults = await extract({\n  files: ['/path/to/your/project/src/main.js:42']\n});\n```\n\n----------------------------------------\n\nTITLE: Optimizing Probe Usage via Roo Custom Mode Configuration (JSON)\nDESCRIPTION: This JSON snippet shows a `.roomodes` configuration defining a custom mode ('ask-probe') for the Roo AI assistant. It provides specific instructions (roleDefinition, customInstructions) guiding the AI on how to effectively use Probe's MCP tools (`search_code`, `query_code`, `extract_code`) for code search, query, and extraction, including syntax recommendations (ElasticSearch) and best practices to improve interaction quality.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/ai-code-editors.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customModes\": [\n    {\n      \"slug\": \"ask-probe\",\n      \"name\": \"Ask Probe\",\n      \"roleDefinition\": \"You are Roo, a code intelligence assistant powered by the Probe MCP tools. Always prefer Probe MCP tools for searching the code. Rather then guessing, start with using `search_code` tool, with exact keywords, and extend your search deeper. AVOID reading full files, unless absolutelly necessary. Use this tools as a scalpel, not a hammer. Use 'exact' parameter if you looking for something specific. Avoid searching with too common keywords, like 'if', 'for', 'while', etc. If you need to extract a specific code block, use `extract_code` tool. If you need to find a specific code structure, use `query_code` tool. If you are unsure about the results, refine your query or ask for clarification.\",\n      \"groups\": [\n        \"read\",\n        \"mcp\"\n      ],\n      \"customInstructions\": \"Leverage Probe MCP tools effectively:\\n\\n1. **search_code**:\\n   - Use simple, unique keywords (e.g., 'rpc' over 'rpc layer')\\n   - Use ElasticSearch query language: ALWAYS use + for required terms, and omit for general and optional, - for excluded terms, and AND/OR for logic. Prefer explicit searches, with this syntax.\\n\\n2. **query_code**:\\n   - Craft tree-sitter patterns (e.g., 'fn $NAME($$$PARAMS) $$$BODY') for specific structures\\n   - Match patterns to the language (e.g., Rust, Python)\\n   - Use sparingly for precise structural queries\\n\\n3. **extract_code**:\\n   - Extract blocks by line number (e.g., '/file.rs:42') or full files for context\\n   - Include `contextLines` only if AST parsing fails\\n\\n**Approach**:\\n- Start with a clear search strategy\\n- Interpret results concisely, tying them to the user's question\\n- If unsure, refine queries or ask for clarification\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Searching Multiple Repositories with Probe in JavaScript\nDESCRIPTION: This JavaScript function `batchSearch` demonstrates how to perform code searches across multiple local repositories using `@buger/probe`. It iterates through a list of repository paths, executes the `search` function for each with a specified query and parameters (`maxResults`, `json: true`), and collects the results. Errors encountered during the search for any repository are caught and recorded. The aggregated results are then saved to a JSON file.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/nodejs-sdk.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nasync function batchSearch(repositories, searchQuery) {\n  const results = {};\n  \n  for (const repo of repositories) {\n    console.log(`Searching in ${repo}...`);\n    try {\n      const searchResults = await search({\n        path: repo,\n        query: searchQuery,\n        maxResults: 20,\n        json: true // Get structured results\n      });\n      \n      results[repo] = searchResults;\n    } catch (error) {\n      console.error(`Error searching in ${repo}:`, error);\n      results[repo] = { error: error.message };\n    }\n  }\n  \n  return results;\n}\n\n// Example usage\nconst repositories = [\n  '/path/to/repo1',\n  '/path/to/repo2',\n  '/path/to/repo3'\n];\n\nconst results = await batchSearch(repositories, 'security AND (vulnerability OR exploit)');\n\n// Save results to a file\nawait fs.writeFile(\n  path.join(process.cwd(), 'search-results.json'),\n  JSON.stringify(results, null, 2)\n);\n\nconsole.log('Search completed and results saved to search-results.json');\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP for Cline in JSON\nDESCRIPTION: JSON configuration for Cline to use Probe via MCP. This specifies the command and arguments to run the Probe MCP server using NPX.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/integrating-probe-into-ai-code-editors.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"probe\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp@latest\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Session-Based Caching with Probe Search in JavaScript\nDESCRIPTION: This JavaScript snippet illustrates the use of session IDs for caching in `@buger/probe`'s `search` function. An initial search is performed (potentially with `session: ''` to start a new session). The `sessionId` returned in the results is then passed to subsequent, related searches using the `session` parameter. This allows Probe to avoid returning code blocks already seen in the same session, improving performance and relevance for sequential queries.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/nodejs-sdk.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe';\n\n// First search with empty session string (generates a session ID)\nconst results1 = await search({\n  path: '/path/to/your/project',\n  query: 'authentication',\n  session: ''\n});\n\n// Get the session ID from the results\nconst sessionId = results1.session;\nconsole.log(`Session ID: ${sessionId}`);\n\n// Use the same session ID for related searches\nconst results2 = await search({\n  path: '/path/to/your/project',\n  query: 'login',\n  session: sessionId\n});\n\n// This will skip code blocks already shown in the previous search\nconsole.log(`Found ${results2.matches.length} new matches`);\n```\n\n----------------------------------------\n\nTITLE: Batch Processing Code Searches Across Multiple Repositories in JavaScript\nDESCRIPTION: This snippet demonstrates how to perform batch code searches across a list of repository paths using the @buger/probe library. The `batchSearch` function iterates through an array of repository paths, executes a specified search query within each using `probe.search`, and collects the results (or errors) in an object keyed by repository path. It uses the `json: true` option for structured results and saves the final aggregated results to a JSON file.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport { search } from '@buger/probe@latest';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nasync function batchSearch(repositories, searchQuery) {\n  const results = {};\n  \n  for (const repo of repositories) {\n    console.log(`Searching in ${repo}...`);\n    try {\n      const searchResults = await search({\n        path: repo,\n        query: searchQuery,\n        maxResults: 20,\n        json: true // Get structured results\n      });\n      \n      results[repo] = searchResults;\n    } catch (error) {\n      console.error(`Error searching in ${repo}:`, error);\n      results[repo] = { error: error.message };\n    }\n  }\n  \n  return results;\n}\n\n// Example usage\nconst repositories = [\n  '/path/to/repo1',\n  '/path/to/repo2',\n  '/path/to/repo3'\n];\n\nconst results = await batchSearch(repositories, 'security AND (vulnerability OR exploit)');\n\n// Save results to a file\nawait fs.writeFile(\n  path.join(process.cwd(), 'search-results.json'),\n  JSON.stringify(results, null, 2)\n);\n\nconsole.log('Search completed and results saved to search-results.json');\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Probe Search Tool Implementation - JavaScript\nDESCRIPTION: This JavaScript code provides a template for implementing a custom search tool within the Probe MCP server tool ecosystem. It defines tool metadata (name, description), required parameters (path, query), and an asynchronous execute function that performs a Probe search and custom filters the results. Dependencies include the Probe search function and a user-supplied customFilterFunction. Inputs are the path and query; output is a filtered result set from the search. This enables you to customize or extend search behavior for specialized use cases.\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-integration.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Custom search tool implementation\\nconst customSearchTool = {\\n  name: 'custom_search',\\n  description: 'Custom search tool that filters results',\\n  parameters: {\\n    type: 'object',\\n    properties: {\\n      path: {\\n        type: 'string',\\n        description: 'Path to search in'\\n      },\\n      query: {\\n        type: 'string',\\n        description: 'Search query'\\n      }\\n    },\\n    required: ['path', 'query']\\n  },\\n  execute: async ({ path, query }) => {\\n    // Call the Probe search function\\n    const results = await search({\\n      path,\\n      query,\\n      maxResults: 10\\n    });\\n    \\n    // Apply custom filtering or processing\\n    const filteredResults = customFilterFunction(results);\\n    \\n    return filteredResults;\\n  }\\n};\n```\n\n----------------------------------------\n\nTITLE: Starting the Probe Web Server\nDESCRIPTION: Command to start the Probe web server using npm, which makes the interface accessible via browser.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Querying Code Structures with Probe CLI\nDESCRIPTION: The 'query' command allows users to find specific code structures using tree-sitter patterns. It supports options for specifying languages, ignoring patterns, and controlling output format.\nSOURCE: https://github.com/buger/probe/blob/main/site/cli-mode.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nprobe query <PATTERN> <PATH> [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Using the Probe Node.js SDK 'extract' Function in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the 'extract' function from the '@buger/probe' SDK, used to pull code blocks from files. It imports the function and calls it asynchronously with an array of 'files', potentially including line numbers, to specify the exact code segments to retrieve.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extract } from '@buger/probe';\n\nconst extractResults = await extract({\n  files: ['/path/to/your/project/src/main.js:42']\n});\n```\n\n----------------------------------------\n\nTITLE: Using Session-Based Caching in Probe\nDESCRIPTION: This snippet demonstrates how to use session-based caching in Probe to avoid seeing the same code blocks multiple times in a session.\nSOURCE: https://github.com/buger/probe/blob/main/site/cli-mode.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# First search - generates a session ID\nprobe search \"authentication\" --session \"\"\n# Session: a1b2 (example output)\n\n# Subsequent searches - reuse the session ID\nprobe search \"login\" --session \"a1b2\"\n# Will skip code blocks already shown in the previous search\n```\n\n----------------------------------------\n\nTITLE: Configuring Manually Installed Probe MCP Server in JSON\nDESCRIPTION: Configures the MCP server to use a manually installed `probe-mcp` command. This JSON snippet should be placed in the AI editor's MCP configuration file, assuming the `probe-mcp` executable is available in the system's PATH following a global NPM installation.\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-server.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"probe-mcp\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Probe Integration - JSON\nDESCRIPTION: This JSON snippet provides the configuration required to define 'probe' as an MCP server using npx to run the @buger/probe-mcp@latest package. It should be placed within a mcp_config.json file under a .cline directory in your project root. The structure defines the command and arguments needed for the integration; no extra dependencies are required beyond Node.js and relevant npm access. This enables Cline (and other MCP-compatible applications) to use the Probe MCP server for AI codebase queries.\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-integration.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"mcpServers\\\": {\\n    \\\"probe\\\": {\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\n        \\\"-y\\\",\\n        \\\"@buger/probe-mcp@latest\\\"\\n      ]\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering probe Search Results using grep and awk in Bash\nDESCRIPTION: Shows how to pipe `probe search` output to standard Unix utilities. Examples include filtering lines containing 'connection' using `grep`, processing exported functions using `awk` on plain text output, and counting 'TODO' occurrences using `grep -c`.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/advanced-cli.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Find code, then filter with grep\nprobe search \"database\" | grep \"connection\"\n\n# Process results with awk\nprobe search \"function\" --format plain | awk '/export/ {print $0}'\n\n# Count occurrences\nprobe search \"TODO\" --format plain | grep -c \"TODO\"\n```\n\n----------------------------------------\n\nTITLE: Managing Concurrent Probe Searches with p-limit in JavaScript\nDESCRIPTION: Demonstrates how to execute multiple asynchronous repository searches concurrently while enforcing a maximum concurrency limit using the p-limit utility. Integrates the @buger/probe search function and maps search jobs to limited promises to avoid overwhelming system resources. Expects an array of repository paths and a search query, returning an object keyed by repository with their respective results; requires both '@buger/probe' and 'p-limit' dependencies, and is best suited for batch or multi-repo search scenarios.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/building-ai-tools.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe';\nimport pLimit from 'p-limit';\n\n// Limit concurrency to 5 simultaneous searches\nconst limit = pLimit(5);\n\n// Function to search multiple repositories\nasync function searchMultipleRepos(query, repositories) {\n  // Map each repository to a limited promise\n  const promises = repositories.map(repo => \n    limit(() => search({\n      path: repo,\n      query,\n      maxResults: 10\n    }))\n  );\n  \n  // Wait for all searches to complete\n  const results = await Promise.all(promises);\n  \n  // Combine and return results\n  return repositories.reduce((acc, repo, index) => {\n    acc[repo] = results[index];\n    return acc;\n  }, {});\n}\n\n// Example usage\nconst results = await searchMultipleRepos(\n  'authentication',\n  [\n    '/path/to/repo1',\n    '/path/to/repo2',\n    '/path/to/repo3',\n    '/path/to/repo4',\n    '/path/to/repo5'\n  ]\n);\n\n```\n\n----------------------------------------\n\nTITLE: API: Searching Code via /api/search Endpoint (JSON)\nDESCRIPTION: This JSON payload and sample response show how to use the POST /api/search API endpoint to perform a code search. The required 'keywords' parameter specifies the pattern to search for, while 'folder', 'exact', and 'allow_tests' control the location, result accuracy, and inclusion of test files. Returns a result object containing search output, the command used, and a timestamp. Authentication may be required depending on server settings.\nSOURCE: https://github.com/buger/probe/blob/main/site/web-interface.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keywords\": \"search pattern\",\n  \"folder\": \"/path/to/repo\",\n  \"exact\": false,\n  \"allow_tests\": false\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": \"search results text\",\n  \"command\": \"probe command that was executed\",\n  \"timestamp\": \"2025-08-03T07:10:00.000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Probe MCP Agent Server\nDESCRIPTION: Commands for starting the server using different installation methods and provider options.\nSOURCE: https://github.com/buger/probe/blob/main/mcp-agent/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# If installed globally\nprobe-mcp-agent\n\n# If installed locally\nnpx probe-mcp-agent\n\n# Or start with npm\nnpm start\n\n# Force a specific provider\nprobe-mcp-agent --provider anthropic\nprobe-mcp-agent --provider openai\nprobe-mcp-agent --provider google\n```\n\n----------------------------------------\n\nTITLE: Extracting Code Blocks with Probe CLI\nDESCRIPTION: The 'extract' command is used to pull complete code blocks from specific files and lines. It supports various options for controlling the extraction process and output format.\nSOURCE: https://github.com/buger/probe/blob/main/site/cli-mode.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nprobe extract <FILES> [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Boolean Logic Query Operators with Probe CLI in Bash\nDESCRIPTION: Shows how to use boolean operators (AND, OR, NOT) in Probe CLI queries to refine search results. This enables complex matching criteria, requiring, allowing, or excluding specific terms in results. Inputs are search queries with boolean operators; outputs are ranked code files or blocks matching the defined logic.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-reference.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"error AND handling\"  # Require both terms\nprobe search \"login OR authentication\"  # Match either term\nprobe search \"database NOT sqlite\"  # Exclude term\n```\n\n----------------------------------------\n\nTITLE: Configuring Probe as an MCP Server (JSON)\nDESCRIPTION: Provides a JSON configuration example for integrating Probe as a Memory Context Provider (MCP) server within an AI-enabled editor or IDE that supports the MCP protocol. It specifies the command (`npx`) and arguments required to launch the `@buger/probe-mcp` server process, enabling the editor to query the codebase via Probe.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Probe MCP Server with NPX in Bash\nDESCRIPTION: Command to install and run the Probe MCP server using NPX without permanent installation. This downloads the package, the appropriate Probe binary, and starts the MCP server.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/integrating-probe-into-ai-code-editors.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx -y @buger/probe-mcp@latest\n```\n\n----------------------------------------\n\nTITLE: Using Probe's Node.js SDK\nDESCRIPTION: Example of using Probe programmatically in Node.js applications, demonstrating search, query, and extract functionalities.\nSOURCE: https://github.com/buger/probe/blob/main/site/quick-start.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search, query, extract } from '@buger/probe';\n\n// Search for code\nconst searchResults = await search({\n  path: '/path/to/your/project',\n  query: 'authentication',\n  maxResults: 10\n});\n\n// Query for specific code structures\nconst queryResults = await query({\n  path: '/path/to/your/project',\n  pattern: 'function $NAME($$$PARAMS) $$$BODY',\n  language: 'javascript'\n});\n\n// Extract code blocks\nconst extractResults = await extract({\n  files: ['/path/to/your/project/src/main.js:42']\n});\n\n// Extract with LLM prompt and instructions\nconst extractWithPrompt = await extract({\n  files: ['/path/to/your/project/src/auth.js#authenticate'],\n  prompt: 'engineer',\n  instructions: 'Explain this authentication function'\n});\n\nconsole.log(searchResults);\n```\n\n----------------------------------------\n\nTITLE: Controlling probe Search Result Ranking Algorithms in Bash\nDESCRIPTION: Demonstrates using the `--reranker` flag with `probe search` to select different algorithms for ranking search results. Options include `hybrid` (default), `bm25` (often better for longer documents), and the classic `tfidf` algorithm.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/advanced-cli.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Use different ranking algorithms\nprobe search \"authentication\" --reranker hybrid  # Default\nprobe search \"authentication\" --reranker bm25    # Better for longer documents\nprobe search \"authentication\" --reranker tfidf   # Classic algorithm\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Probe\nDESCRIPTION: JSON configuration for setting up the MCP server to use Probe in AI editors.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Search API Reference\nDESCRIPTION: Complete API reference for the search function including all available parameters and options.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe';\n\nconst results = await search({\n  path: '/path/to/your/project',\n  query: 'function',\n  // Optional parameters\n  filesOnly: false,\n  ignore: ['node_modules', 'dist'],\n  excludeFilenames: false,\n  reranker: 'hybrid',\n  frequencySearch: true,\n  exact: false,\n  maxResults: 10,\n  maxBytes: 1000000,\n  maxTokens: 40000,\n  allowTests: false,\n  noMerge: false,\n  mergeThreshold: 5,\n  json: false,\n  binaryOptions: {\n    forceDownload: false,\n    version: '1.0.0'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Probe AI Chat with Command-Line Options (Bash)\nDESCRIPTION: Examples of configuring the Probe AI Chat mode using command-line options when running via `node index.js`. Demonstrates enabling debug mode (`--debug`), specifying a model (`--model`), forcing a provider (`--force-provider`), running in web mode (`--web`), setting a custom port (`--port`), and specifying a project directory.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-chat.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Enable debug mode\nnode index.js --debug\n\n# Specify a model\nnode index.js --model claude-3-7-sonnet-latest\n\n# Force a specific provider\nnode index.js --force-provider anthropic\n\n# Run in web mode\nnode index.js --web\n\n# Specify a port for web mode\nnode index.js --web --port 3000\n\n# Specify a directory to search\nnode index.js /path/to/your/project\n```\n\n----------------------------------------\n\nTITLE: Using Probe MCP 'search_code' Tool via JSON\nDESCRIPTION: This JSON object represents the parameters for the 'search_code' tool provided by the Probe MCP server. It specifies the target project 'path', the 'query' using Elasticsearch-like syntax (e.g., 'authentication flow'), and the 'maxTokens' limit for the results. This tool is used for general code searching.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"/path/to/your/project\",\n  \"query\": \"authentication flow\",\n  \"maxTokens\": 20000\n}\n```\n\n----------------------------------------\n\nTITLE: API: Querying Code Structure via /api/query Endpoint (JSON)\nDESCRIPTION: This JSON code block shows a request/response for the POST /api/query endpoint, which runs structural code pattern queries using ast-grep syntax. The 'pattern' parameter provides the AST search template, while 'path', 'language', and 'allow_tests' control scope, syntax highlighting, and test file inclusion. The response returns matched results and a timestamp. Designed for advanced code structural search and may need authentication if enabled.\nSOURCE: https://github.com/buger/probe/blob/main/site/web-interface.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pattern\": \"function $NAME($$$PARAMS) { $$$BODY }\",\n  \"path\": \"/path/to/repo\",\n  \"language\": \"javascript\",\n  \"allow_tests\": false\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": \"query results text\",\n  \"timestamp\": \"2025-08-03T07:10:00.000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using @buger/probe Default System Message and Tools with AI SDK in JavaScript\nDESCRIPTION: This snippet shows how to use the `DEFAULT_SYSTEM_MESSAGE` provided by @buger/probe along with configured search, query, and extract tools. It demonstrates setting up configuration options (like `sessionId`) and passing the system message and tools to an AI generation function, potentially from a framework like the Vercel AI SDK (`generateText`).\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport { DEFAULT_SYSTEM_MESSAGE, searchTool, queryTool, extractTool } from '@buger/probe@latest';\n\n// Use the default system message in your AI application\nconst systemMessage = DEFAULT_SYSTEM_MESSAGE;\n\n// Generate a session ID\nconst sessionId = randomUUID();\n\n// Create configured tools with the session ID\nconst configOptions = { sessionId };\n\n// Example with Vercel AI SDK\nconst result = await generateText({\n  model: provider(modelName),\n  messages: [{ role: 'user', content: userMessage }],\n  system: DEFAULT_SYSTEM_MESSAGE,\n  tools: {\n    search: searchTool(configOptions),\n    query: queryTool(configOptions),\n    extract: extractTool(configOptions)\n  }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Optimizing Probe Search Performance with Pre-Filtering in JavaScript\nDESCRIPTION: Improves overall search speed and accuracy by first retrieving only files matching the query, limiting their number, then refining the search if too many are found, or else performing a content search. This staged approach can reduce resource consumption and improve responsiveness for large repositories. Requires only '@buger/probe', expects a search query and a path, outputs either a quickly filtered or refined set of results, and adapts dynamically to the number of matching files.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/building-ai-tools.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe';\n\n// Optimize search for performance\nasync function optimizedSearch(query, path) {\n  // First, do a quick search for files only\n  const fileResults = await search({\n    path,\n    query,\n    filesOnly: true,\n    maxResults: 50\n  });\n  \n  // If we have too many files, refine the query\n  if (fileResults.files && fileResults.files.length > 20) {\n    console.log('Too many files, refining query...');\n    // Add more specific terms to narrow down results\n    return search({\n      path,\n      query: `${query} AND (function OR class OR method)`,\n      maxResults: 10\n    });\n  }\n  \n  // Otherwise, search the content of the files we found\n  return search({\n    path,\n    query,\n    maxResults: 10\n  });\n}\n\n```\n\n----------------------------------------\n\nTITLE: API: Extracting Code Segments via /api/extract Endpoint (JSON)\nDESCRIPTION: This request/response JSON illustration demonstrates extraction of code blocks or line ranges from files through the /api/extract endpoint. Clients supply file path and optional line numbers, plus output formatting options. The response includes extracted text and a server timestamp. Used for retrieving specific code fragments for display or analysis; subject to authentication if enabled.\nSOURCE: https://github.com/buger/probe/blob/main/site/web-interface.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"file_path\": \"src/main.js:42\",\n  \"line\": 42,\n  \"end_line\": 60,\n  \"allow_tests\": false,\n  \"context_lines\": 10,\n  \"format\": \"plain\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": \"extracted code text\",\n  \"timestamp\": \"2025-08-03T07:10:00.000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Search Queries with Probe CLI in Bash\nDESCRIPTION: Demonstrates the core usage of the Probe command-line tool to perform searches within a codebase. Users provide a query, optional search path, and specific command-line options to customize search behavior. Outputs code blocks or file matches per the provided options; requires Probe to be installed and accessible from the system shell.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-reference.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nprobe search <QUERY> [PATH] [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Handling Timeout Errors with Buger Probe in JavaScript\nDESCRIPTION: Demonstrates how to handle timeout errors by using the execAsync function with a custom timeout duration. This approach allows for longer execution times when searching through large codebases.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe@latest';\n\n// Increase the timeout by using the execAsync function directly\nimport { promisify } from 'util';\nimport { exec } from 'child_process';\nconst execAsync = promisify(exec);\n\n// Get the binary path\nimport { getBinaryPath } from '@buger/probe@latest';\nconst binaryPath = await getBinaryPath();\n\n// Execute the command with a longer timeout\nconst { stdout } = await execAsync(`${binaryPath} search \"query\" /path/to/project`, {\n  timeout: 60000 // 60 seconds\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Interactive probe-chat Session with Editing (Shell)\nDESCRIPTION: This command initiates an interactive chat session with `probe-chat`, providing a specific project directory (`/path/to/project`) as context for the conversation. The `--allow-edit` flag enables file editing capabilities during the session, which, as noted in the preceding comment, requires the Aider tool to be installed and configured.\nSOURCE: https://github.com/buger/probe/blob/main/site/cli-mode.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nprobe-chat /path/to/project --allow-edit\n```\n\n----------------------------------------\n\nTITLE: Using Pre-configured Probe Tools with Vercel AI SDK (Backward Compatibility) - JavaScript\nDESCRIPTION: Shows the backward-compatible method for using Probe tools with the Vercel AI SDK. Instead of using tool generators, this example directly passes the pre-configured tool objects ('tools.searchTool', 'tools.queryTool', 'tools.extractTool') to the 'tools' parameter of the 'generateText' function.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/building-ai-tools.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { tools } from '@buger/probe';\n\n// Use the pre-configured tools\nconst result = await generateText({\n  model: provider(modelName),\n  messages: [{ role: 'user', content: userMessage }],\n  system: \"You are a code intelligence assistant.\",\n  tools: {\n    search: tools.searchTool,\n    query: tools.queryTool,\n    extract: tools.extractTool\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using the extract function in @buger/probe\nDESCRIPTION: Detailed example of using the extract function from @buger/probe, including all available options.\nSOURCE: https://github.com/buger/probe/blob/main/npm/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extract } from '@buger/probe';\n\nconst results = await extract({\n  files: [\n    '/path/to/your/project/src/main.js',\n    '/path/to/your/project/src/utils.js:42'  // Extract from line 42\n  ],\n  // Optional parameters\n  allowTests: false,\n  contextLines: 2,\n  format: 'markdown',\n  json: false,\n  binaryOptions: {\n    forceDownload: false,\n    version: '1.0.0'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Running Probe AI Chat Mode via npx - Bash\nDESCRIPTION: These bash commands let you run Probe's AI-powered chat mode directly using npx, including setting API keys for Anthropic, OpenAI, or Google Gemini providers. Required: Node.js and access to the internet; set your API key as an environment variable before launching the chat. You can specify a project directory for code search, and no prior installation is required when using npx.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Run directly with npx (no installation needed)\nnpx -y @buger/probe-chat@latest\n\n# Set your API key first\nexport ANTHROPIC_API_KEY=your_api_key\n# Or for OpenAI\n# export OPENAI_API_KEY=your_api_key\n# Or for Google\n# export GOOGLE_API_KEY=your_api_key\n\n# Or specify a directory to search\nnpx -y @buger/probe-chat@latest /path/to/your/project\n```\n\n----------------------------------------\n\nTITLE: Accessing tools and system messages from the package\nDESCRIPTION: Example showing how to import and use the tools exposed by the @buger/probe-chat package, including searchTool, queryTool, extractTool, and the default system message.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/npm/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { tools } from '@buger/probe-chat';\n\n// Access the tools\nconst { searchTool, queryTool, extractTool } = tools;\n\n// Access the default system message\nconst systemMessage = tools.DEFAULT_SYSTEM_MESSAGE;\n```\n\n----------------------------------------\n\nTITLE: Using session-based caching with Probe search\nDESCRIPTION: These commands demonstrate how to use session-based caching in Probe to avoid showing the same code blocks multiple times in a conversation. It shows generating a session ID and reusing it in subsequent searches.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/cli-ai-workflows.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# First search generates a session ID\nprobe search \"authentication\" --session \"\"\n# Session: a1b2 (example output)\n\n# Subsequent searches reuse the session ID\nprobe search \"login\" --session \"a1b2\"\n# Will skip code blocks already shown in the previous search\n```\n\n----------------------------------------\n\nTITLE: Extract API Reference\nDESCRIPTION: Complete API reference for the extract function showing all available parameters and configuration options.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extract } from '@buger/probe';\n\nconst results = await extract({\n  files: [\n    '/path/to/your/project/src/main.js',\n    '/path/to/your/project/src/utils.js:42'  // Extract from line 42\n  ],\n  // Optional parameters\n  allowTests: false,\n  contextLines: 2,\n  format: 'markdown',\n  json: false,\n  binaryOptions: {\n    forceDownload: false,\n    version: '1.0.0'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Building a Code Search API with Express and @buger/probe in JavaScript\nDESCRIPTION: This snippet demonstrates creating a simple Node.js API using Express to expose code search, query, and extraction functionalities from the @buger/probe library. It sets up three POST endpoints (`/api/search`, `/api/query`, `/api/extract`) that accept parameters in the request body, call the corresponding functions from @buger/probe (`search`, `query`, `extract`), and return the results as JSON. Basic error handling is included.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport express from 'express';\nimport { search, query, extract } from '@buger/probe@latest';\n\nconst app = express();\napp.use(express.json());\n\n// Search endpoint\napp.post('/api/search', async (req, res) => {\n  try {\n    const { path, query, options } = req.body;\n    const results = await search({\n      path,\n      query,\n      ...options\n    });\n    res.json({ results });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Query endpoint\napp.post('/api/query', async (req, res) => {\n  try {\n    const { path, pattern, language, options } = req.body;\n    const results = await query({\n      path,\n      pattern,\n      language,\n      ...options\n    });\n    res.json({ results });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Extract endpoint\napp.post('/api/extract', async (req, res) => {\n  try {\n    const { files, options } = req.body;\n    const results = await extract({\n      files,\n      ...options\n    });\n    res.json({ results });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Code search API running on port 3000');\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Python Pattern Matching Templates in Probe\nDESCRIPTION: Provides pattern templates for matching Python function definitions (including decorated ones) and class definitions using the Probe tool. Placeholders like `$NAME`, `$$$PARAMS`, `$$$BODY`, `$$$METHODS`, and `$DECORATOR` represent variable parts of the code structure.\nSOURCE: https://github.com/buger/probe/blob/main/site/supported-languages.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndef $NAME($$$PARAMS): $$$BODY\nclass $NAME: $$$METHODS\n@$DECORATOR\\ndef $NAME($$$PARAMS): $$$BODY\n```\n\n----------------------------------------\n\nTITLE: Defining Read-Only Probe Assistant Workflow in GitHub Actions (YAML)\nDESCRIPTION: Configures a GitHub Actions workflow named 'AI Comment Handler' using YAML. It triggers on new pull requests, issues, and issue comments. The workflow utilizes the reusable `buger/probe/probe.yml` workflow to act as an AI assistant, responding to comments starting with `/probe`. It requires read permissions for repository content and write permissions for issues and pull requests to post responses, using secrets like `ANTHROPIC_API_KEY`.\nSOURCE: https://github.com/buger/probe/blob/main/site/integrations/github-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: AI Comment Handler\n\non:\n  pull_request:\n    types: [opened] # Trigger on new PRs\n  issue_comment:\n    types: [created] # Trigger on new issue comments\n  issues:\n    types: [opened] # Trigger on new issues\n\n# Define permissions needed for the workflow\npermissions:\n  issues: write # To post comments on issues\n  pull-requests: write # To post comments on PRs\n  contents: read # To read repository code for context\n\njobs:\n  trigger_probe_chat:\n    # Use the reusable workflow from the main Probe repository\n    uses: buger/probe/.github/workflows/probe.yml@main\n    # Pass required inputs\n    with:\n      # Define the command prefix to trigger the bot\n      command_prefix: \"/probe\" # Or '/ai', '/ask', etc.\n      # Optionally override the default npx command if the secret isn't set\n      # default_probe_chat_command: 'node path/to/custom/script.js'\n    # Pass necessary secrets to the reusable workflow\n    secrets:\n      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}\n      ANTHROPIC_API_URL: ${{ secrets.ANTHROPIC_API_URL }}\n      # GITHUB_TOKEN is automatically passed\n```\n\n----------------------------------------\n\nTITLE: Using probe search for Security Auditing in Bash\nDESCRIPTION: Provides example `probe search` commands tailored for finding potential security vulnerabilities. It shows searching for common sensitive keywords (password, token, etc.) and patterns potentially indicative of SQL injection, saving results to files.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/advanced-cli.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# Search for common security vulnerabilities\nprobe search \"password|token|secret|api_key\" --format markdown > security-audit.md\n\n# Look for SQL injection vulnerabilities\nprobe search \"exec|eval|SELECT.*FROM.*WHERE\" --format json > sql-injection-check.json\n```\n\n----------------------------------------\n\nTITLE: ProbeChat Class API Reference\nDESCRIPTION: API reference for the ProbeChat class, including constructor options and available methods. Shows how to create a new chat instance with configuration options.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/npm/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ProbeChat } from '@buger/probe-chat';\n\n// Create a new chat instance\nconst chat = new ProbeChat(options);\n```\n\n----------------------------------------\n\nTITLE: Configuring Probe AI Chat with Environment Variables (Bash)\nDESCRIPTION: Shows how to configure the Probe AI Chat using environment variables. Examples include overriding the default model (`MODEL_NAME`), forcing a provider (`FORCE_PROVIDER`), setting custom API URLs for proxies or enterprise deployments (`ANTHROPIC_API_URL`, `OPENAI_API_URL`, `GOOGLE_API_URL`), and enabling debug mode (`DEBUG=1`).\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-chat.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Override the default model\nexport MODEL_NAME=claude-3-opus-20240229\nprobe-chat\n\n# Force a specific provider\nexport FORCE_PROVIDER=anthropic  # Options: anthropic, openai, google\nprobe-chat\n\n# Override API URLs (useful for proxies or enterprise deployments)\nexport ANTHROPIC_API_URL=https://your-anthropic-proxy.com\nexport OPENAI_API_URL=https://your-openai-proxy.com/v1\nexport GOOGLE_API_URL=https://your-google-proxy.com\nprobe-chat\n\n# Enable debug mode for detailed logging\nexport DEBUG=1 probe-chat\n```\n\n----------------------------------------\n\nTITLE: Querying Code Structures with Probe\nDESCRIPTION: Examples of using Probe to find specific code structures using tree-sitter patterns for different programming languages.\nSOURCE: https://github.com/buger/probe/blob/main/site/quick-start.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Find JavaScript functions\nprobe query \"function $NAME($$$PARAMS) $$$BODY\" ./src --language javascript\n\n# Find Python functions\nprobe query \"def $NAME($$$PARAMS): $$$BODY\" ./src --language python\n\n# Find Go structs\nprobe query \"type $NAME struct { $$$FIELDS }\" ./src --language go\n```\n\n----------------------------------------\n\nTITLE: Running Probe AI Chat with npx (Bash)\nDESCRIPTION: Demonstrates how to run the Probe AI Chat directly using npx without global installation. Shows commands for running in default CLI mode, web interface mode (`--web`), setting API keys (Anthropic, OpenAI, Google) via environment variables, and specifying a project directory.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-chat.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Run directly with npx in CLI mode (no installation needed)\nnpx -y @buger/probe-chat@latest\n\n# Run in web interface mode\nnpx -y @buger/probe-chat@latest --web\n\n# Set your API key first\nexport ANTHROPIC_API_KEY=your_api_key\n# Or for OpenAI\n# export OPENAI_API_KEY=your_api_key\n# Or for Google\n# export GOOGLE_API_KEY=your_api_key\n\n# Or specify a directory to search\nnpx -y @buger/probe-chat@latest /path/to/your/project\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cache Layer for Probe Search Results - JavaScript\nDESCRIPTION: Demonstrates how to implement a simple in-memory caching mechanism for the Probe 'search' function using the 'node-cache' library. It wraps the original 'search' call, generating a cache key from the input parameters. If a result exists in the cache for that key, it's returned directly (cache hit); otherwise, the search is performed, and the result is stored in the cache before returning (cache miss).\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/building-ai-tools.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe';\nimport NodeCache from 'node-cache';\n\n// Create a cache with 1 hour TTL\nconst cache = new NodeCache({ stdTTL: 3600 });\n\n// Cached search function\nasync function cachedSearch(params) {\n  // Create a cache key from the parameters\n  const cacheKey = JSON.stringify(params);\n  \n  // Check if we have a cached result\n  const cachedResult = cache.get(cacheKey);\n  if (cachedResult) {\n    console.log('Cache hit!');\n    return cachedResult;\n  }\n  \n  // Perform the search\n  console.log('Cache miss, performing search...');\n  const results = await search(params);\n  \n  // Cache the results\n  cache.set(cacheKey, results);\n  \n  return results;\n}\n\n// Example usage\nconst results = await cachedSearch({\n  path: '/path/to/your/project',\n  query: 'authentication',\n  maxResults: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @buger/probe locally using npm\nDESCRIPTION: Command to install the @buger/probe package locally using npm.\nSOURCE: https://github.com/buger/probe/blob/main/npm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @buger/probe\n```\n\n----------------------------------------\n\nTITLE: Session-Based Caching in Probe CLI\nDESCRIPTION: Demonstrates how to use session IDs in Probe CLI to avoid seeing the same code blocks multiple times in related searches.\nSOURCE: https://github.com/buger/probe/blob/main/site/quick-start.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# First search - generates a session ID\nprobe search \"authentication\" --session \"\"\n# Session: a1b2 (example output)\n\n# Subsequent searches - reuse the session ID\nprobe search \"login\" --session \"a1b2\"\n# Will skip code blocks already shown in the previous search\n```\n\n----------------------------------------\n\nTITLE: Creating LangChain Tools with Probe SDK - JavaScript\nDESCRIPTION: Demonstrates integrating Probe's functionalities ('search', 'query', 'extract') into LangChain applications. It uses the 'tools.create*Tool()' functions from '@buger/probe' to create LangChain-compatible tools, which are then bound to a ChatOpenAI model using '.withTools()'. An example chat interaction using these tools is provided.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/building-ai-tools.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ChatOpenAI } from '@langchain/openai';\nimport { tools } from '@buger/probe';\n\n// Create LangChain tools from Probe\nconst searchTool = tools.createSearchTool();\nconst queryTool = tools.createQueryTool();\nconst extractTool = tools.createExtractTool();\n\n// Create a ChatOpenAI instance with tools\nconst model = new ChatOpenAI({\n  modelName: \"gpt-4o\",\n  temperature: 0.7\n}).withTools([searchTool, queryTool, extractTool]);\n\n// Use the model with tools\nasync function chatWithAI(userMessage) {\n  const result = await model.invoke([\n    { \n      role: \"system\", \n      content: \"You are a code intelligence assistant. Use the provided tools to search and analyze code.\" \n    },\n    { \n      role: \"user\", \n      content: userMessage \n    }\n  ]);\n  \n  return result.content;\n}\n\n// Example usage\nconst response = await chatWithAI(\"How is authentication implemented in this project?\");\nconsole.log(response);\n```\n\n----------------------------------------\n\nTITLE: Example: Searching for Error Handling Code Using Probe CLI in Bash\nDESCRIPTION: Provides a practical command-line example for finding code related to error handling with Probe CLI. Combines multiple search terms and utilizes Probe's tokenization and ranking logic. Inputs are a space-separated query string; outputs are code blocks ranked by relevance to error handling patterns.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-reference.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"error handling try catch\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Code Search with Token Limiting\nDESCRIPTION: Example of an advanced search using Probe with token limiting, useful for AI tools with context window constraints.\nSOURCE: https://github.com/buger/probe/blob/main/site/quick-start.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"prompt injection\" ./ --max-tokens 10000\n```\n\n----------------------------------------\n\nTITLE: Defining Reasoning with XML Tag - XML\nDESCRIPTION: This snippet shows how the LLM should encode its thought process using a \\u003cthinking\\u003e tag per protocol. It precedes every tool invocation or completion action. No dependencies are required beyond XML compatibility. The content inside the tag provides a human- or machine-readable explanation for the model's current reasoning or next action. Input is implicit (the agent\\'s reasoning), output is a strictly formed XML fragment.\nSOURCE: https://github.com/buger/probe/blob/main/site/blog/agentic-flow-custom-xml-protocol.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<thinking>Analyzing user request. Need to find files related to 'authentication'. The 'search' tool is appropriate.</thinking>\n```\n\n----------------------------------------\n\nTITLE: MCP Tool Input Schema Example - JSON\nDESCRIPTION: Example JSON schema for providing input to the MCP search_code tool. The object requires a path (string), query (array of strings), and files_only (boolean) fields. Used as input for server or API-based invocation of semantic search. Input must be supplied as valid JSON.\nSOURCE: https://github.com/buger/probe/blob/main/tests/README.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"Directory path to search in\",\n  \"query\": [\"Query patterns to search for\"],\n  \"files_only\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Search Configuration\nDESCRIPTION: Advanced search example demonstrating multiple search options including ignore patterns, reranking, and frequency-based search.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe';\n\nasync function advancedSearchExample() {\n  try {\n    const results = await search({\n      path: '/path/to/your/project',\n      query: 'config AND (parse OR tokenize)',\n      ignore: ['node_modules', 'dist'],\n      reranker: 'hybrid',\n      frequencySearch: true,\n      maxResults: 10,\n      maxTokens: 20000,\n      allowTests: false\n    });\n    \n    console.log('Advanced search results:');\n    console.log(results);\n  } catch (error) {\n    console.error('Advanced search error:', error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Chat Command in Probe CLI\nDESCRIPTION: The 'probe-chat' command enables interactive chat sessions with the Probe AI agent or allows sending single messages for non-interactive use. It supports various options for customization and output control.\nSOURCE: https://github.com/buger/probe/blob/main/site/cli-mode.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nprobe-chat [PATH] [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Reporting Tool Execution Results (Successful Search) - XML\nDESCRIPTION: This snippet shows how tool execution or orchestration results are returned to the LLM. The parent \\u003ctool_result\\u003e tag has a tool_name attribute, and the content includes file metadata and a code snippet (in this case, JavaScript) related to the initial search request. Content should be XML-escaped or enclosed in CDATA for special characters. The input is the tool result data or error message, output is a protocol-compliant XML message passed to the LLM.\nSOURCE: https://github.com/buger/probe/blob/main/site/blog/agentic-flow-custom-xml-protocol.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<tool_result tool_name=\"search\">\nFile: src/server/auth.js\nLines: 50-75\n```javascript\nfunction loginUser(username, password) {\n  // ... implementation ...\n  const token = generateJwt(user.id);\n  return { success: true, token };\n}\n```\n(Content should be XML-escaped or use CDATA if necessary)\n</tool_result>\n```\n\n----------------------------------------\n\nTITLE: Using Probe MCP 'extract_code' Tool via JSON\nDESCRIPTION: This JSON object specifies parameters for the 'extract_code' tool, used to retrieve specific code blocks. It requires the base 'path' of the project and a list of 'files', where each file path can optionally include a line number (e.g., 'src/main.rs:42') to target a specific location.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"/path/to/your/project\",\n  \"files\": [\"/path/to/your/project/src/main.rs:42\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Probe AI Chat from Example Code (Bash)\nDESCRIPTION: Shows the steps to run the AI Chat interface from the provided example code. This involves navigating to the example directory, installing dependencies with `npm install`, setting the required AI provider API key (Anthropic, OpenAI, or Google), and starting the interface using `node index.js` for CLI mode or `node index.js --web` for web mode. Requires Node.js and npm.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-chat.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Navigate to the examples directory\ncd examples/chat\n\n# Install dependencies\nnpm install\n\n# Set your API key\nexport ANTHROPIC_API_KEY=your_api_key\n# Or for OpenAI\n# export OPENAI_API_KEY=your_api_key\n# Or for Google\n# export GOOGLE_API_KEY=your_api_key\n\n# Start the chat interface in CLI mode\nnode index.js\n\n# Start the chat interface in web mode\nnode index.js --web\n```\n\n----------------------------------------\n\nTITLE: Code Structure Query Examples\nDESCRIPTION: Demonstrates querying specific code structures in different programming languages using pattern matching.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { query } from '@buger/probe';\n\nasync function queryExample() {\n  try {\n    // Find all JavaScript functions\n    const jsResults = await query({\n      path: '/path/to/your/project',\n      pattern: 'function $NAME($$$PARAMS) $$$BODY',\n      language: 'javascript',\n      maxResults: 5\n    });\n    \n    console.log('JavaScript functions:');\n    console.log(jsResults);\n    \n    // Find all Rust structs\n    const rustResults = await query({\n      path: '/path/to/your/project',\n      pattern: 'struct $NAME $$$BODY',\n      language: 'rust',\n      maxResults: 5\n    });\n    \n    console.log('Rust structs:');\n    console.log(rustResults);\n  } catch (error) {\n    console.error('Query error:', error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BM25 Formula for Ranking Code Search Results in Probe (Mathematical Expression)\nDESCRIPTION: Presents the BM25 ranking formula applied by Probe to measure relevance between code blocks and queries. This formula accounts for term frequency, block length normalization, and saturation to enhance accuracy over basic TF-IDF. Inputs are block and query terms, constants k1 and b; output is a BM25 relevance score.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-reference.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nBM25(block, query) = ∑ IDF(term) * (TF(term, block) * (k1 + 1)) / (TF(term, block) + k1 * (1 - b + b * (block_length / average_block_length)))\n```\n\n----------------------------------------\n\nTITLE: Advanced Probe Usage Techniques\nDESCRIPTION: This snippet showcases advanced techniques for using Probe, including extracting code from compiler errors, integrating with Unix pipelines, and combining different Probe commands for powerful workflows.\nSOURCE: https://github.com/buger/probe/blob/main/site/cli-mode.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Extract code from compiler errors\nrustc main.rs 2>&1 | probe extract\n\n# Pull code from test failures\ngo test ./... | probe extract\n\n# Find then filter\nprobe search \"database\" | grep \"connection\"\n\n# Process & format\nprobe search \"api\" --format json | jq '.results[0]'\n\n# Find authentication code without tests\nprobe search \"authenticate\" --max-results 10 --ignore \"test\" --no-merge\n\n# Extract specific functions with context\ngrep -n \"handleRequest\" ./src/*.js | cut -d':' -f1,2 | probe extract --context 3\n\n# Find and extract error handlers\nprobe search \"error handling\" --files-only | xargs -I{} probe extract {} --format markdown\n```\n\n----------------------------------------\n\nTITLE: Optimizing probe Memory Usage with Batch Processing in Bash\nDESCRIPTION: Illustrates a memory optimization technique for `probe search` when dealing with very large repositories or limited memory. It uses `find` to list target files, `split` to divide the list into smaller batches, and a `for` loop to process each batch sequentially.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/advanced-cli.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# Process files in smaller batches\nfind ./src -name \"*.js\" | split -l 100 - batch_\nfor batch in batch_*; do\n  probe search \"memory leak\" $(cat $batch)\n  rm $batch\ndone\n```\n\n----------------------------------------\n\nTITLE: Implementing OCaml Language Support with Tree-sitter in Rust\nDESCRIPTION: This Rust code implements the LanguageImpl trait for OCaml support in the Probe project using tree-sitter. It defines the OCamlLanguage struct and implements methods for tree-sitter language binding, file extension detection, AST node filtering (acceptable parents), and heuristic test node detection. Required dependencies include the crate's language_trait module, the tree-sitter and tree-sitter-ocaml crates. The primary input is a syntax node and source bytes, and outputs are decisions (booleans or strings) used by the Probe tool in language processing and testing workflows.\nSOURCE: https://github.com/buger/probe/blob/main/site/adding-languages.md#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n// src/language/ocaml.rs\nuse crate::language::language_trait::LanguageImpl;\nuse tree_sitter::{Language as TSLanguage, Node};\n\npub struct OCamlLanguage;\n\nimpl Default for OCamlLanguage {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\nimpl OCamlLanguage {\n    pub fn new() -> Self {\n        OCamlLanguage\n    }\n}\n\nimpl LanguageImpl for OCamlLanguage {\n    fn get_tree_sitter_language(&self) -> TSLanguage {\n        tree_sitter_ocaml::language_ocaml()\n    }\n\n    fn get_extension(&self) -> &'static str {\n        \".ml\"\n    }\n\n    fn is_acceptable_parent(&self, node: &Node) -> bool {\n        matches!(\n            node.kind(),\n            \"let_binding\"\n                | \"type_definition\"\n                | \"module_definition\"\n                | \"module_type_definition\"\n                | \"class_definition\"\n                | \"method_definition\"\n                | \"external\"\n        )\n    }\n\n    fn is_test_node(&self, node: &Node, source: &[u8]) -> bool {\n        let node_type = node.kind();\n        \n        if node_type == \"let_binding\" {\n            // Check for test function names\n            let mut cursor = node.walk();\n            for child in node.children(&mut cursor) {\n                if child.kind() == \"value_name\" {\n                    if let Ok(name) = child.utf8_text(source) {\n                        return name.starts_with(\"test_\") || name.contains(\"_test\");\n                    }\n                }\n            }\n        }\n        \n        false\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Probe using npm for Node.js users\nDESCRIPTION: Installs the latest version of Probe globally using npm. This method is recommended for Node.js users as it handles dependencies and updates automatically.\nSOURCE: https://github.com/buger/probe/blob/main/site/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @buger/probe@latest\n```\n\n----------------------------------------\n\nTITLE: Searching Code with Probe (Basic Example) (Bash)\nDESCRIPTION: Demonstrates a basic search using the `probe` CLI tool to find occurrences of the phrase \"llm pricing\" recursively within the current directory (`./`).\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"llm pricing\" ./\n```\n\n----------------------------------------\n\nTITLE: Chat Command Examples with Probe\nDESCRIPTION: This snippet provides examples of using the 'probe-chat' command, including starting interactive chat sessions, targeting specific project paths, and using custom prompts.\nSOURCE: https://github.com/buger/probe/blob/main/site/cli-mode.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Start interactive chat in the current directory\nprobe-chat\n\n# Start interactive chat targeting a specific project path\nprobe-chat /path/to/my/project\n\n# Use the 'engineer' persona\nprobe-chat --prompt engineer\n```\n\n----------------------------------------\n\nTITLE: Configuring Probe MCP Server via NPX in JSON\nDESCRIPTION: This JSON configuration snippet shows how to set up the Probe MCP server using NPX within an AI editor's configuration file (e.g., `.cline/mcp_config.json`). It specifies the command (`npx`) and arguments (`-y`, `@buger/probe-mcp@latest`) to automatically download and run the latest Probe MCP server package.\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"probe\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp@latest\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel AI SDK Integration with Buger Probe\nDESCRIPTION: Demonstrates how to integrate Buger Probe with Vercel AI SDK using tool generators and session management. This setup enables AI-assisted code search with session persistence.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { searchTool } from '@buger/probe@latest';\nimport { randomUUID } from 'crypto';\n\n// Generate a session ID\nconst sessionId = randomUUID();\nconsole.log(`Session ID: ${sessionId}`);\n\n// Create a configured search tool with the session ID\nconst configuredSearchTool = searchTool({\n  sessionId,\n  debug: true // Enable debug logging\n});\n\n// Use the configured tool with Vercel AI SDK\n// All searches performed with this tool will use the same session ID\nconst result = await generateText({\n  model: provider(modelName),\n  messages: [{ role: 'user', content: userMessage }],\n  system: \"You are a code intelligence assistant. Use the provided tools to search and analyze code.\",\n  tools: {\n    search: configuredSearchTool\n  },\n  maxSteps: 15\n});\n```\n\n----------------------------------------\n\nTITLE: Starting the Probe Chat Web Interface with npm Script - Bash\nDESCRIPTION: Launches the web chat interface via the npm 'web' script, which must be defined in package.json. This automates running 'node index.js --web', guaranteeing consistent startup parameters.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run web\n\n```\n\n----------------------------------------\n\nTITLE: JSON Format for Query Command Results\nDESCRIPTION: The JSON output structure for the query command, showing the fields included for each result such as file path, line numbers, node type, code content, and column positions for AST-based queries.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"file\": \"/path/to/file.rs\",       // File path\n      \"lines\": [10, 20],                // Start and end line numbers\n      \"node_type\": \"function\",          // Type of code block (function, class, struct, etc.)\n      \"code\": \"fn example() { ... }\",   // The actual code content\n      \"column_start\": 0,                // Starting column\n      \"column_end\": 20                  // Ending column\n    },\n    // More results...\n  ],\n  \"summary\": {\n    \"count\": 5,\n    \"total_bytes\": 1024,\n    \"total_tokens\": 256\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing probe search Output for Token Efficiency in Bash\nDESCRIPTION: Presents methods to make `probe search` output more concise and token-efficient for AI processing. Techniques include excluding filenames (`--exclude-filenames`), using more specific search terms, and ignoring irrelevant file types via `--ignore`.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/advanced-cli.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Exclude filenames to save tokens\nprobe search \"authentication\" --exclude-filenames\n\n# Use more specific search terms to reduce noise\nprobe search \"authentication function\"\n\n# Focus on specific file types\nprobe search \"authentication\" ./src --ignore \"*.test.js,*.spec.js,*.css,*.html\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for Probe MCP Server in JSON\nDESCRIPTION: This JSON configuration snippet demonstrates how to enable debug mode for the Probe MCP server. Setting the `DEBUG` environment variable to `\"1\"` within the server's environment settings will cause the server to output detailed logging for troubleshooting purposes.\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-integration.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"probe\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp@latest\"\n      ],\n      \"env\": {\n        \"DEBUG\": \"1\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Related Topics Using Anchor Links in Markdown\nDESCRIPTION: This snippet shows how to create a Markdown link that points to a specific subsection ('patterns') within the 'search-functionality' page using an anchor link (#patterns). This is useful for directing users to highly relevant information within a larger document.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-cross-references.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nLearn more about [search patterns](/search-functionality#patterns) to improve your search results.\n```\n\n----------------------------------------\n\nTITLE: Searching Code with Token Limit using Probe (Bash)\nDESCRIPTION: Performs a search for \"prompt injection\" in the current directory (`./`) while limiting the total tokens in the results to 10000 using the `--max-tokens` flag. This is useful for integrating results with AI tools that have context window constraints.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"prompt injection\" ./ --max-tokens 10000\n```\n\n----------------------------------------\n\nTITLE: Using @buger/probe as a command-line tool\nDESCRIPTION: Examples of using @buger/probe as a command-line tool for searching, querying, and extracting code.\nSOURCE: https://github.com/buger/probe/blob/main/npm/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Search for code\nprobe search \"function\" /path/to/your/project\n\n# Query for specific code structures\nprobe query \"function $NAME($$$PARAMS) $$$BODY\" /path/to/your/project\n\n# Extract code blocks\nprobe extract /path/to/your/project/src/main.js:42\n```\n\n----------------------------------------\n\nTITLE: Finding Specific API Endpoints Example\nDESCRIPTION: Example of using field specifiers and wildcards to find API endpoint functions that start with 'create'.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-functionality.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"function:create* api endpoint\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for Probe MCP Server in JSON\nDESCRIPTION: This JSON configuration enables debug mode for the Probe MCP server, useful for troubleshooting. It sets the 'DEBUG' environment variable to '1' using the 'env' property, causing the server to output detailed logs.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"probe\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp@latest\"\n      ],\n      \"env\": {\n        \"DEBUG\": \"1\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Specific Code Fields Using Probe CLI in Bash\nDESCRIPTION: Demonstrates usage of field specifiers (such as 'function:') to target specific elements in code searches via Probe CLI. Allows scoping queries to function names, classes, or other structural code elements for precise results. Inputs are search queries specifying fields; outputs are code blocks where the specified field matches the query.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-reference.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"function:authenticate\"  # Search in function names\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Code Assistant with LangChain and @buger/probe in JavaScript\nDESCRIPTION: This snippet illustrates building a custom AI assistant tailored for code-related questions using LangChain and @buger/probe. It defines an async function `createCodeAssistant` that sets up a LangChain `ChatOpenAI` model, a `PromptTemplate` for structuring the input (question and search results), and a processing chain. An inner function `answerCodeQuestion` uses @buger/probe's `search` function to find relevant code based on the question and then invokes the LangChain chain to generate an analysis and answer.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport { search, query, extract } from '@buger/probe@latest';\nimport { ChatOpenAI } from '@langchain/openai';\nimport { PromptTemplate } from '@langchain/core/prompts';\nimport { StringOutputParser } from '@langchain/core/output_parsers';\n\n// Create a custom AI assistant that can search code\nasync function createCodeAssistant() {\n  // Create a chat model\n  const model = new ChatOpenAI({\n    modelName: \"gpt-4o\",\n    temperature: 0.7\n  });\n  \n  // Create a prompt template\n  const promptTemplate = PromptTemplate.fromTemplate(`\n    You are a code assistant. I'll provide you with a question and some code search results.\n    Please analyze the code and answer the question.\n    \n    Question: {question}\n    \n    Code search results:\n    {searchResults}\n    \n    Your analysis:\n  `);\n  \n  // Create a chain\n  const chain = promptTemplate\n    .pipe(model)\n    .pipe(new StringOutputParser());\n  \n  // Function to answer questions about code\n  async function answerCodeQuestion(question, codebasePath) {\n    // Search for relevant code\n    const searchResults = await search({\n      path: codebasePath,\n      query: question,\n      maxResults: 5,\n      maxTokens: 10000\n    });\n    \n    // Get the answer from the AI\n    const answer = await chain.invoke({\n      question,\n      searchResults\n    });\n    \n    return answer;\n  }\n  \n  return { answerCodeQuestion };\n}\n\n// Usage\nconst assistant = await createCodeAssistant();\nconst answer = await assistant.answerCodeQuestion(\n  \"How is authentication implemented?\",\n  \"/path/to/your/project\"\n);\nconsole.log(answer);\n```\n```\n\n----------------------------------------\n\nTITLE: Utilizing AI Tools from Probe Library in JavaScript\nDESCRIPTION: Demonstrates the usage of AI tools provided by @buger/probe, including tools compatible with Vercel AI SDK and LangChain. It shows how to access search, query, and extract tools, as well as their schemas and default system message.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport { tools } from '@buger/probe';\n\n// Vercel AI SDK tools\nconst { searchTool, queryTool, extractTool } = tools;\n\n// LangChain tools\nconst searchLangChainTool = tools.createSearchTool();\nconst queryLangChainTool = tools.createQueryTool();\nconst extractLangChainTool = tools.createExtractTool();\n\n// Access schemas\nconst { searchSchema, querySchema, extractSchema } = tools;\n\n// Access default system message\nconst systemMessage = tools.DEFAULT_SYSTEM_MESSAGE;\n```\n\n----------------------------------------\n\nTITLE: Extract code blocks example using @buger/probe\nDESCRIPTION: An example showing how to extract code blocks from specific files and line numbers using @buger/probe.\nSOURCE: https://github.com/buger/probe/blob/main/npm/README.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extract } from '@buger/probe';\n\nasync function extractExample() {\n  try {\n    const results = await extract({\n      files: [\n        '/path/to/your/project/src/main.js',\n        '/path/to/your/project/src/utils.js:42'  // Extract from line 42\n      ],\n      contextLines: 2,\n      format: 'markdown'\n    });\n    \n    console.log('Extracted code:');\n    console.log(results);\n  } catch (error) {\n    console.error('Extract error:', error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Elastic Search Queries with Probe\nDESCRIPTION: Examples of using advanced Elastic Search query syntax with Probe for more powerful searches.\nSOURCE: https://github.com/buger/probe/blob/main/site/quick-start.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Use AND operator for terms that must appear together\nprobe search \"error AND handling\" ./\n\n# Use OR operator for alternative terms\nprobe search \"login OR authentication OR auth\" ./src\n\n# Group terms with parentheses for complex queries\nprobe search \"(error OR exception) AND (handle OR process)\" ./\n\n# Use wildcards for partial matching\nprobe search \"auth* connect*\" ./\n\n# Exclude terms with NOT operator\nprobe search \"database NOT sqlite\" ./\n```\n\n----------------------------------------\n\nTITLE: Linking Use Cases to Reference Documentation in Markdown\nDESCRIPTION: This snippet demonstrates how a 'Use Cases' page (like 'Using in the CLI for Advanced AI') should link to detailed 'Reference' documentation, such as the 'CLI Reference', for specific technical details.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-cross-references.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n# Using in the CLI for Advanced AI\n\n[...content...]\n\nFor a complete list of CLI options, see the [CLI Reference](/cli-mode).\n```\n\n----------------------------------------\n\nTITLE: Integrating LLM Prompts and Custom Templates with Probe Extract in Bash\nDESCRIPTION: These Bash code snippets demonstrate the Probe CLI's ability to interface directly with LLMs using the --prompt and --instructions flags. They cover usage with built-in prompt templates (engineer, architect), custom prompt template files, and function-specific extraction. Each command takes source code paths and prompt metadata and returns LLM-ready code review content. Requires the Probe CLI and, for custom prompts, a path to a template file; outputs vary by target (function, file, or line) and prompt configuration.\nSOURCE: https://github.com/buger/probe/blob/main/site/code-extraction.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Extract code with engineer prompt template\nprobe extract src/main.rs#handle_request --prompt engineer --instructions \"Explain this function\"\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Extract code with architect prompt template\nprobe extract src/auth.rs --prompt architect --instructions \"Analyze this authentication module\"\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Extract code with custom prompt template\nprobe extract src/api.js:42 --prompt /path/to/custom/prompt.txt --instructions \"Refactor this code\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for @buger/probe-mcp in Claude/VSCode (JSON)\nDESCRIPTION: A JSON configuration snippet for adding the @buger/probe-mcp server to the `mcpServers` section in Claude Desktop or VSCode settings. It configures the 'memory' server to use `npx` to execute the `@buger/probe-mcp` package, allowing the AI assistant to interact with the Probe tool.\nSOURCE: https://github.com/buger/probe/blob/main/mcp/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent Orchestrator Core Loop in TypeScript\nDESCRIPTION: Provides the TypeScript implementation for an agent's main processing loop (`processUserRequest`). It uses the `ai` SDK (`streamText`) to interact with an LLM, processes the streamed response using a custom `StreamingXmlParser` to detect tool calls or final completions within custom XML tags (like `<search>`, `<extract>`, `<attempt_completion>`), executes the identified tools via a placeholder `executeTool` function, and manages the conversation history (`messages`). Includes basic error handling and a maximum iteration limit to prevent infinite loops.\nSOURCE: https://github.com/buger/probe/blob/main/site/blog/agentic-flow-custom-xml-protocol.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { streamText, CoreMessage } from 'ai';\nimport { openai } from '@ai-sdk/openai'; // Or other provider\n\nasync function processUserRequest(initialMessages: CoreMessage[], systemPrompt: string): Promise<string> {\n  let messages: CoreMessage[] = [...initialMessages];\n  const maxIterations = 10; // Prevent infinite loops\n\n  for (let i = 0; i < maxIterations; i++) {\n    // --- 1. Call LLM for next action ---\n    const { textStream } = await streamText({\n      model: openai('gpt-4o-mini'), // Choose appropriate model\n      system: systemPrompt,\n      messages: messages,\n      // DO NOT pass 'tools' or 'toolChoice' here\n    });\n\n    // --- 2. Process Stream for Custom XML ---\n    let assistantResponse = \"\"; // Full raw text from this turn\n    let parsedAction: ParsedAction | null = null; // Result from XML parser\n\n    // Use a stateful streaming XML parser (see section 3.2)\n    const xmlParser = new StreamingXmlParser(['thinking', 'search', 'extract', 'query', 'attempt_completion']);\n\n    for await (const textDelta of textStream) {\n      assistantResponse += textDelta;\n      parsedAction = xmlParser.processChunk(textDelta);\n      if (parsedAction && (parsedAction.type === 'tool' || parsedAction.type === 'completion')) {\n         // Found a terminal action (tool call or completion), stop processing stream for this turn\n         // Note: A real implementation might need to drain the rest of the stream silently\n         // or handle the LLM potentially generating text *after* the XML block.\n         break;\n      }\n      // Handle 'thinking' block if needed (e.g., logging)\n      if (parsedAction && parsedAction.type === 'thinking') {\n          console.log(\"LLM Thinking:\", parsedAction.content);\n          parsedAction = null; // Reset after logging thinking\n      }\n    }\n\n    // Ensure the parser is finalized after the stream ends\n    if (!parsedAction) {\n        parsedAction = xmlParser.finalize();\n    }\n\n    // Add raw assistant response to history\n    messages.push({ role: 'assistant', content: assistantResponse });\n\n    // --- 3. Analyze Parsed Action ---\n    if (!parsedAction || (parsedAction.type !== 'tool' && parsedAction.type !== 'completion')) {\n      // LLM failed to produce a valid tool/completion XML block\n      const errorFeedback = \"Error: Response did not contain a valid XML action (<tool_name>...</tool_name> or <attempt_completion>...). Adhere strictly to the protocol.\";\n      messages.push({ role: 'user', content: `<tool_result>Error: ${errorFeedback}</tool_result>` }); // Use tool_result structure for feedback\n      if (i === maxIterations - 1) throw new Error(\"Max iterations reached: LLM failed to provide valid action.\");\n      continue; // Next iteration, hope LLM corrects\n    }\n\n    if (parsedAction.type === 'completion') {\n      // Task Complete\n      return parsedAction.result;\n    }\n\n    if (parsedAction.type === 'tool') {\n      // --- 4. Execute Tool ---\n      let toolOutput: string;\n      try {\n        // Add validation logic here based on parsedAction.params and tool schema\n        toolOutput = await executeTool(parsedAction.name, parsedAction.params);\n      } catch (error: any) {\n        toolOutput = `Error: Tool execution failed. ${error.message}`;\n      }\n\n      // --- 5. Feed Result Back ---\n      // Ensure output is XML-safe\n      const escapedOutput = toolOutput.replace(/[<>&'\"]/g, (c: string) => {\n         return { '<': '<', '>': '>', '&': '&amp;', \"'\": '&apos;', '\"': '\"' }[c]!;\n      });\n      const resultMessageContent = `<tool_result tool_name=\"${parsedAction.name}\">${escapedOutput}</tool_result>`;\n      messages.push({ role: 'user', content: resultMessageContent });\n\n      if (i === maxIterations - 1) throw new Error(\"Max iterations reached after last tool call.\");\n      // Continue to next iteration\n    }\n  } // End loop\n\n  throw new Error(\"Agent loop finished unexpectedly (max iterations likely).\");\n}\n\n// Placeholder types/functions\ntype ParsedAction =\n  | { type: 'tool'; name: string; params: Record<string, string> }\n  | { type: 'completion'; result: string }\n  | { type: 'thinking'; content: string };\n\ndeclare class StreamingXmlParser {\n  constructor(knownTags: string[]);\n  processChunk(chunk: string): ParsedAction | null;\n  finalize(): ParsedAction | null;\n}\ndeclare function executeTool(name: string, params: Record<string, string>): Promise<string>;\n\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Term Search in Probe\nDESCRIPTION: Examples of basic search queries using single terms or multiple terms with implicit AND logic.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-functionality.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"authentication\"  # Single term\nprobe search \"user authentication\"  # Multiple terms (AND logic)\n```\n\n----------------------------------------\n\nTITLE: Starting Probe Chat on a Specific Codebase Path - Bash\nDESCRIPTION: Executes Probe Chat against a user-specified codebase directory by including a filesystem path argument. This overrides the ALLOWED_FOLDERS setting in the .env file and directs the search capabilities to the given location.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js /path/to/codebase\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Two-Phase Search Strategy with probe and xargs in Bash\nDESCRIPTION: Presents a method for handling very large repositories: first, find relevant files using `probe search --files-only` and save the list, then search for the specific term only within those files using `cat`, `xargs`, and `probe search`.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/advanced-cli.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Phase 1: Find relevant files\nprobe search \"authentication\" --files-only > auth-files.txt\n\n# Phase 2: Search only in those files\ncat auth-files.txt | xargs probe search \"password reset\"\n```\n\n----------------------------------------\n\nTITLE: Using Term Modifiers and Phrase Search in Probe CLI in Bash\nDESCRIPTION: Shows syntax for requiring terms, excluding terms, and searching for exact phrases using Probe CLI. Plus (+), minus (-), and double quotes are used to modify search behavior. Inputs are queries with term modifiers and phrase indicators; outputs are code blocks matching the modified terms or phrases.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-reference.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"+authentication login\"  # Required term\nprobe search \"database -sqlite\"  # Excluded term\nprobe search \"\\\"handle error\\\"\"  # Exact phrase\n```\n\n----------------------------------------\n\nTITLE: Limiting probe search Output Size for AI Integration in Bash\nDESCRIPTION: Shows how to constrain the output size of `probe search` using flags like `--max-tokens`, `--max-bytes`, or `--max-results`. This is essential for managing context window limits when feeding search results into AI models.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/advanced-cli.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Limit by token count (for AI context windows)\nprobe search \"authentication flow\" --max-tokens 8000\n\n# Limit by byte size\nprobe search \"authentication flow\" --max-bytes 16000\n\n# Limit by result count\nprobe search \"authentication flow\" --max-results 5\n```\n\n----------------------------------------\n\nTITLE: Extracting Code from Test Output using Probe (Bash)\nDESCRIPTION: Demonstrates piping the standard output of a command (like `go test`) into `probe extract`. Probe analyzes the input text (e.g., test failure logs) to automatically identify and extract the relevant source files and Abstract Syntax Tree (AST) information associated with the failure.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo test | probe extract\n```\n\n----------------------------------------\n\nTITLE: Controlling Code Block Merging with probe search in Bash\nDESCRIPTION: Demonstrates disabling adjacent code block merging (`--no-merge`) and adjusting the line threshold (`--merge-threshold`) for merging in `probe search` results. Use `--no-merge` for separate results or adjust the threshold to control the amount of context included between related blocks.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/advanced-cli.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Disable merging completely\nprobe search \"authentication\" --no-merge\n\n# Adjust the threshold for merging (default is 5 lines)\nprobe search \"authentication\" --merge-threshold 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Result Limits for Probe MCP Server in JSON\nDESCRIPTION: This JSON configuration snippet shows how to set a default limit for search results returned by the Probe MCP server. It utilizes the 'env' property to define the 'PROBE_MAX_TOKENS' environment variable, controlling the maximum token count for responses.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"probe\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp@latest\"\n      ],\n      \"env\": {\n        \"PROBE_MAX_TOKENS\": \"20000\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Probe Binary Path in JavaScript\nDESCRIPTION: Shows how to use getBinaryPath and setBinaryPath functions from @buger/probe for managing the probe binary. It includes examples of getting the binary path with optional parameters and manually setting the binary path.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getBinaryPath, setBinaryPath } from '@buger/probe';\n\n// Get the path to the probe binary\nconst binaryPath = await getBinaryPath({\n  forceDownload: false,\n  version: '1.0.0'\n});\n\n// Manually set the path to the probe binary\nsetBinaryPath('/path/to/probe/binary');\n```\n\n----------------------------------------\n\nTITLE: Structuring Extracted Code Output - JSON\nDESCRIPTION: Shows a sample of Probe\\'s output format when formatted as JSON and using the --keep-input flag. Useful for integration with downstream tools, automated documentation, or AI-assisted analysis. This snippet demonstrates the structure of command output, including original input, extraction results, and summary statistics. Dependencies: Probe CLI with JSON output support. Input is code location and valid source files; output is a JSON object with fields for original input, code block details, and extraction summary. Limitations: Only provided when --format json or similar is specified.\nSOURCE: https://github.com/buger/probe/blob/main/site/code-extraction.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"original_input\": \"src/main.rs:42: error: invalid syntax\",\n  \"results\": [\n    {\n      \"file\": \"src/main.rs\",\n      \"lines\": [40, 45],\n      \"node_type\": \"function\",\n      \"code\": \"fn process_data(data: &[u8]) -> Result<Vec<u8>, Error> {\\n    // Processing logic\\n    ...\\n}\"\n    }\n  ],\n  \"summary\": {\n    \"count\": 1,\n    \"total_bytes\": 85,\n    \"total_tokens\": 25\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Piping compiler errors to Probe Chat\nDESCRIPTION: This command shows how to compile a Rust program and pipe any errors directly to Probe Chat for explanation, combining compiler output with AI assistance.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/cli-ai-workflows.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Compile and pipe errors to AI chat\nrustc main.rs 2>&1 | probe-chat\n```\n\n----------------------------------------\n\nTITLE: Performing Manual Code Search with Probe CLI in Bash\nDESCRIPTION: This Bash command demonstrates how to perform a manual code search using the Probe command-line interface (CLI). It searches for the keyword \"authentication\" within the `./src` directory. This method is useful when direct AI editor integration (like MCP) is not available, allowing users to copy search results manually.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/ai-code-editors.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"authentication\" ./src\n```\n\n----------------------------------------\n\nTITLE: Configuring Probe Tools with Custom Options\nDESCRIPTION: Example of using tool generators to create configured instances of Probe tools. Shows how to set custom options for each tool, including session ID and debug mode.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { searchTool, queryTool, extractTool } from '@buger/probe@latest';\nimport { randomUUID } from 'crypto';\n\n// Generate a session ID\nconst sessionId = randomUUID();\n\n// Configure tools with options\nconst configOptions = {\n  sessionId,                        // Session ID for caching search results\n  debug: process.env.DEBUG === '1', // Enable debug logging\n  maxTokens: 30000                  // Override default max tokens (search tool only)\n};\n\n// Create configured tool instances\nconst search = searchTool(configOptions);\nconst query = queryTool({ debug: true });  // Each tool can have different options\nconst extract = extractTool({ debug: true });\n```\n\n----------------------------------------\n\nTITLE: Terminal Output Format with Keep-Input Flag - Bash\nDESCRIPTION: Shows the typical output structure in terminal-friendly formats when using the --keep-input flag: the original user input is printed, followed by a separator, then the extracted code. This is useful for side-by-side debugging, documentation, or error message association. No external dependencies outside Probe; pure output formatting example.\nSOURCE: https://github.com/buger/probe/blob/main/site/code-extraction.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--- Original Input ---\nsrc/main.rs:42: error: invalid syntax\n\n--- Extracted Code ---\nfn process_data(data: &[u8]) -> Result<Vec<u8>, Error> {\n    // Processing logic\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Query Command with JSON Output\nDESCRIPTION: An example of running the query command with JSON output format, showing the command syntax and the resulting JSON structure for querying Rust functions.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nprobe query \"fn $NAME($$$PARAMS) $$$BODY\" ./src --language rust --format json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"file\": \"/path/to/functions.rs\",\n      \"lines\": [5, 8],\n      \"node_type\": \"function\",\n      \"code\": \"fn add(a: i32, b: i32) -> i32 {\\n    a + b\\n}\",\n      \"column_start\": 0,\n      \"column_end\": 35\n    }\n  ],\n  \"summary\": {\n    \"count\": 1,\n    \"total_bytes\": 35,\n    \"total_tokens\": 15\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Format for Search Command Results\nDESCRIPTION: The JSON output structure for the search command, showing the fields included for each result such as file path, line numbers, node type, code content, matched keywords, rank, and score.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"file\": \"/path/to/file.rs\",       // File path\n      \"lines\": [10, 20],                // Start and end line numbers\n      \"node_type\": \"function\",          // Type of code block (function, class, struct, etc.)\n      \"code\": \"fn example() { ... }\",   // The actual code content\n      \"matched_keywords\": [             // Keywords that matched (if available)\n        \"example\",\n        \"function\"\n      ],\n      \"rank\": 1,                        // Rank in search results (if available)\n      \"score\": 0.95                     // Relevance score (if available)\n    },\n    // More results...\n  ],\n  \"summary\": {\n    \"count\": 5,\n    \"total_bytes\": 1024,\n    \"total_tokens\": 256\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Use Cases Back to Core Concepts in Markdown\nDESCRIPTION: This snippet illustrates how a 'Use Cases' page (like 'Using with AI Code Editors') should link back to foundational 'Core Concepts' pages, such as the 'language parsing capabilities' overview, to provide necessary background.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-cross-references.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n# Using with AI Code Editors\n\n[...content...]\n\nThis integration relies on Probe's [language parsing capabilities](/language-support-overview) to provide accurate code context.\n```\n\n----------------------------------------\n\nTITLE: Using Advanced Query Syntax with Probe (Bash)\nDESCRIPTION: Shows various advanced search techniques using Probe's query syntax, similar to Elasticsearch. Examples include using boolean operators (`AND`, `OR`, `NOT`), grouping terms with parentheses `()`, and using wildcards `*` for partial matching to conduct complex and precise code searches within specified directories.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Use AND operator for terms that must appear together\nprobe search \"error AND handling\" ./\n\n# Use OR operator for alternative terms\nprobe search \"login OR authentication OR auth\" ./src\n\n# Group terms with parentheses for complex queries\nprobe search \"(error OR exception) AND (handle OR process)\" ./\n\n# Use wildcards for partial matching\nprobe search \"auth* connect*\" ./\n\n# Exclude terms with NOT operator\nprobe search \"database NOT sqlite\" ./\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct Session-Based Caching in Buger Probe\nDESCRIPTION: Shows how to implement session-based caching using the search function directly. This approach manages session IDs to avoid duplicate results across related searches.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe@latest';\n\n// First search with empty session string (generates a session ID)\nconst results1 = await search({\n  path: '/path/to/your/project',\n  query: 'authentication',\n  session: ''\n});\n\n// Get the session ID from the results\nconst sessionId = results1.session;\nconsole.log(`Session ID: ${sessionId}`);\n\n// Use the same session ID for related searches\nconst results2 = await search({\n  path: '/path/to/your/project',\n  query: 'login',\n  session: sessionId\n});\n\n// This will skip code blocks already shown in the previous search\nconsole.log(`Found ${results2.matches.length} new matches`);\n```\n\n----------------------------------------\n\nTITLE: Using Probe extract with LLM prompt templates\nDESCRIPTION: These commands demonstrate how to use Probe's extract feature with built-in prompt templates for LLM integration. It shows examples of using engineer and architect prompts, as well as piping extracted code to Probe Chat.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/cli-ai-workflows.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Extract with engineer prompt template\nprobe extract src/auth.rs#authenticate --prompt engineer --instructions \"Explain this authentication function\"\n\n# Extract with architect prompt template\nprobe extract src/api.js --prompt architect --instructions \"Analyze this API module\"\n\n# Extract and pipe to AI chat\nprobe extract src/main.rs:42 --prompt engineer --instructions \"Explain this function\" | probe-chat\n```\n\n----------------------------------------\n\nTITLE: Code Block Extraction\nDESCRIPTION: Example of extracting code blocks from specific files and line numbers with context lines.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extract } from '@buger/probe';\n\nasync function extractExample() {\n  try {\n    const results = await extract({\n      files: [\n        '/path/to/your/project/src/main.js',\n        '/path/to/your/project/src/utils.js:42'  // Extract from line 42\n      ],\n      contextLines: 2,\n      format: 'markdown'\n    });\n    \n    console.log('Extracted code:');\n    console.log(results);\n  } catch (error) {\n    console.error('Extract error:', error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Code with Custom Prompt File using Probe SDK - JavaScript\nDESCRIPTION: Illustrates using the 'extract' function with a custom prompt template loaded from an external file. This allows for tailored instructions and context when extracting code, such as providing refactoring guidelines. It requires the 'files' to extract from, the 'prompt' file path, and 'instructions'.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/building-ai-tools.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Extract with custom prompt template\nconst codeWithCustomPrompt = await extract({\n  files: ['/path/to/your/project/src/api.js:42'],\n  prompt: '/path/to/custom/prompt.txt',  // Path to custom prompt file\n  instructions: 'Refactor this code'\n});\n```\n\n----------------------------------------\n\nTITLE: Querying probe-chat with JSON Output (Shell)\nDESCRIPTION: This command sends a single, non-interactive question to the `probe-chat` tool using the `--message` flag. The `--json` flag ensures that the response from the tool is formatted as JSON, suitable for programmatic parsing or structured viewing.\nSOURCE: https://github.com/buger/probe/blob/main/site/cli-mode.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nprobe-chat --message \"Explain the auth flow in main.go\" --json\n```\n\n----------------------------------------\n\nTITLE: Using AI tools in @buger/probe\nDESCRIPTION: Example of accessing and using AI tools provided by @buger/probe, including Vercel AI SDK tools, LangChain tools, and schemas.\nSOURCE: https://github.com/buger/probe/blob/main/npm/README.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { tools } from '@buger/probe';\n\n// Vercel AI SDK tools\nconst { searchTool, queryTool, extractTool } = tools;\n\n// LangChain tools\nconst searchLangChainTool = tools.createSearchTool();\nconst queryLangChainTool = tools.createQueryTool();\nconst extractLangChainTool = tools.createExtractTool();\n// Access schemas\nconst { searchSchema, querySchema, extractSchema } = tools;\n\n// Access default system message\nconst systemMessage = tools.DEFAULT_SYSTEM_MESSAGE;\n```\n\n----------------------------------------\n\nTITLE: Configuring Probe MCP Server via NPX in JSON\nDESCRIPTION: Defines the MCP server configuration using NPX to execute the latest `@buger/probe-mcp` package. It specifies the command (`npx`) and arguments (`-y`, `@buger/probe-mcp@latest`) needed to start the server. This configuration is intended for AI editor MCP configuration files (e.g., `.cline/mcp_config.json`).\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-server.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp@latest\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Vercel AI SDK with Buger Probe Tools\nDESCRIPTION: Demonstrates how to integrate Buger Probe tools with Vercel AI SDK for AI-powered code analysis. Uses pre-built tools for search, query, and extraction capabilities.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { generateText } from 'ai';\nimport { tools } from '@buger/probe';\n\n// Use the pre-built tools with Vercel AI SDK\nasync function chatWithAI(userMessage) {\n  const result = await generateText({\n    model: provider(modelName),\n    messages: [{ role: 'user', content: userMessage }],\n    system: \"You are a code intelligence assistant. Use the provided tools to search and analyze code.\",\n    tools: {\n      search: tools.searchTool,\n      query: tools.queryTool,\n      extract: tools.extractTool\n    },\n    maxSteps: 15,\n    temperature: 0.7\n  });\n  \n  return result.text;\n}\n```\n\n----------------------------------------\n\nTITLE: Field Specifiers in Probe Search\nDESCRIPTION: Example of using field specifiers to target specific parts of the code, such as function names.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-functionality.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"function:authenticate\"  # Search in function names\n```\n\n----------------------------------------\n\nTITLE: Session-Based Caching in Node.js\nDESCRIPTION: Example of using session-based caching with Probe in a Node.js application for related searches.\nSOURCE: https://github.com/buger/probe/blob/main/site/quick-start.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe';\n\n// First search with empty session string (generates a session ID)\nconst results1 = await search({\n  path: '/path/to/your/project',\n  query: 'authentication',\n  session: ''\n});\n\n// Get the session ID from the results\nconst sessionId = results1.session;\n\n// Use the same session ID for related searches\nconst results2 = await search({\n  path: '/path/to/your/project',\n  query: 'login',\n  session: sessionId\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Core Search with Probe in Bash\nDESCRIPTION: This command runs the core search functionality of Probe using npx. It enables fast semantic code search with elastic search syntax.\nSOURCE: https://github.com/buger/probe/blob/main/site/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx -y @buger/probe@latest \"+stemming -lexer\"\n```\n\n----------------------------------------\n\nTITLE: Group and Combine Terms Using Parentheses in Probe CLI in Bash\nDESCRIPTION: Demonstrates advanced grouping in queries using parentheses to combine logical operators for more precise searches. Grouped terms allow construction of sophisticated and nested query logic. Inputs are parentheses-grouped search queries; outputs are matches satisfying the logical group conditions.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-reference.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"(error OR exception) AND (handle OR process)\"\n```\n\n----------------------------------------\n\nTITLE: Using the extract_code Tool via MCP in JSON\nDESCRIPTION: Shows an example payload for the `extract_code` tool. It extracts specific code blocks based on an array of file paths (optionally with line numbers, e.g., `/path/to/your/project/src/main.rs:42`), a base project path, an optional LLM prompt template (`engineer`), and optional user instructions (`Explain this function`).\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-server.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"/path/to/your/project\",\n  \"files\": [\"/path/to/your/project/src/main.rs:42\"],\n  \"prompt\": \"engineer\",\n  \"instructions\": \"Explain this function\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the @buger/probe Default System Message in JavaScript\nDESCRIPTION: Illustrates how to access and use the `DEFAULT_SYSTEM_MESSAGE` provided by `@buger/probe` within an AI application. This pre-defined message instructs AI assistants on how to effectively use the probe tools. The example demonstrates its usage with the Vercel AI SDK's `generateText` function.\nSOURCE: https://github.com/buger/probe/blob/main/npm/README.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport { tools } from '@buger/probe';\n\n// Use the default system message in your AI application\nconst systemMessage = tools.DEFAULT_SYSTEM_MESSAGE;\n\n// Example with Vercel AI SDK\nconst result = await generateText({\n  model: provider(modelName),\n  messages: [{ role: 'user', content: userMessage }],\n  system: tools.DEFAULT_SYSTEM_MESSAGE,\n  tools: {\n    search: tools.searchTool,\n    query: tools.queryTool,\n    extract: tools.extractTool\n  }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Combined Debugging Modes (Bash)\nDESCRIPTION: Starts the application using npm with both general debug mode and raw request debugging enabled simultaneously. This provides the maximum level of debugging information by combining detailed logs with the exact LLM prompts. It is achieved by setting both the DEBUG and DEBUG_RAW_REQUEST environment variables to true before executing the npm start command.\nSOURCE: https://github.com/buger/probe/blob/main/site/web-interface.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=true DEBUG_RAW_REQUEST=true npm start\n```\n\n----------------------------------------\n\nTITLE: Using the probe-chat CLI with various options\nDESCRIPTION: Examples of using the probe-chat command line interface with different options such as specifying directories, enabling debug mode, and selecting models.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/npm/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Basic usage (searches in current directory)\nprobe-chat\n\n# Search in a specific directory\nprobe-chat /path/to/your/project\n\n# Enable debug mode\nprobe-chat --debug /path/to/your/project\n\n# Specify a model to use\nprobe-chat --model claude-3-7-sonnet-latest /path/to/your/project\n```\n\n----------------------------------------\n\nTITLE: Extracting and Reviewing Code Changes with Probe and Git Diff in Bash\nDESCRIPTION: These Bash snippets show how to combine git diff output with Probe's extract capabilities to capture both line-based diffs and full AST nodes. The pipeline feeds both change context and full code blocks into an AI assistant for review. Dependencies include git, Probe CLI tool, and an AI assistant application, and the output is a merged context suitable for automated code review. Inputs are paths to the codebase and target files, and outputs are contextualized review data; ensure Probe is installed and configured in PATH.\nSOURCE: https://github.com/buger/probe/blob/main/site/code-extraction.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Comprehensive code review with both diff and AST context\ngit diff > /tmp/changes.diff && git diff | probe extract > /tmp/ast_blocks.txt && cat /tmp/changes.diff /tmp/ast_blocks.txt | ai-assistant \"Review these changes. The first part shows the diff, and the second part shows the complete AST blocks of modified functions.\"\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Extract code with LLM prompt and instructions\nprobe extract src/auth.rs#authenticate --format json --prompt engineer --instructions \"Explain this authentication function\"\n\n```\n\n----------------------------------------\n\nTITLE: Grouping Terms in Probe Search\nDESCRIPTION: Example of using parentheses to group terms and create more complex query expressions with combined boolean logic.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-functionality.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"(error OR exception) AND (handle OR process)\"\n```\n\n----------------------------------------\n\nTITLE: Using CodeEditor Component in Markdown\nDESCRIPTION: Example of using the CodeEditor custom component to display code snippets with syntax highlighting in documentation.\nSOURCE: https://github.com/buger/probe/blob/main/site/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<CodeEditor filePath=\"example.js\">\nfunction handleError(error) {\n  console.error(`Error: ${error.message}`);\n  return { success: false, error: error.message };\n}\n</CodeEditor>\n```\n\n----------------------------------------\n\nTITLE: Linking Reference Documentation to Use Cases in Markdown\nDESCRIPTION: This snippet shows how 'Reference' documentation (like the 'CLI Reference') should mention relevant 'Use Cases' (like 'AI chat workflows' or 'building custom tools') where the technical features are applied.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-cross-references.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n# CLI Reference\n\n[...content...]\n\nThese commands are commonly used in [AI chat workflows](/ai-chat) and when [building custom tools](/nodejs-sdk).\n```\n\n----------------------------------------\n\nTITLE: Manually Cloning the Repository and Setting Up the Environment (Bash and Shell Configuration)\nDESCRIPTION: This snippet shows manual setup of the Probe project by cloning the git repository, installing dependencies, and configuring environment variables in a .env file. Key setup steps: git clone for code retrieval, npm install for dependencies, and environment variable assignment for API keys and application settings. The .env segment demonstrates the required and optional keys, such as API credentials, allowed folders, port, model, and authentication settings. The final commands show how to start the chat interface in CLI or web mode using npm.\nSOURCE: https://github.com/buger/probe/blob/main/site/web-interface.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/buger/probe.git\ncd probe/examples/chat\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Required: At least one of these API keys must be provided\nANTHROPIC_API_KEY=your_anthropic_api_key\nOPENAI_API_KEY=your_openai_api_key\n   \n# Required: Configure folders to search\nALLOWED_FOLDERS=/path/to/repo1,/path/to/repo2\n   \n# Optional configuration\nPORT=8080\nMODEL_NAME=claude-3-7-sonnet-latest\nAUTH_ENABLED=false\nAUTH_USERNAME=admin\nAUTH_PASSWORD=password\n```\n\nLANGUAGE: bash\nCODE:\n```\n# CLI mode\nnpm start\n   \n# Web mode\nnpm run web\n```\n\n----------------------------------------\n\nTITLE: Executing a Probe Search via CLI - Bash\nDESCRIPTION: This code snippet demonstrates how to use the Probe command-line interface to search for occurrences of the term \\\"error handling\\\" within the ./src directory. Requires Probe to be installed and accessible in the shell environment. The first argument is the search query as a string, and the second argument is the target directory. Outputs matching results directly to the console. This command is useful for quickly locating specific content within a codebase.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \\\"error handling\\\" ./src\n```\n\n----------------------------------------\n\nTITLE: Installing Probe AI Chat CLI Globally - Bash\nDESCRIPTION: This bash snippet installs Probe's AI chat CLI globally using npm and then starts the chat interface with the command 'probe-chat'. Requires Node.js and internet connection. After installation, further configuration should be handled via environment variables for provider selection and authentication.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install globally\nnpm install -g @buger/probe-chat@latest\n\n# Start the chat interface\nprobe-chat\n```\n\n----------------------------------------\n\nTITLE: Extracting Code with Probe CLI - Bash\nDESCRIPTION: Demonstrates invoking the probe extract command to extract code from specified files or code locations using various CLI flags. These snippets illustrate syntax for extracting by symbol, line, or error context, with advanced options such as --keep-input, --format selection, and integrating the tool in shell pipelines (with rustc, go test, find, grep, xargs, etc). Dependencies: Probe CLI installed in PATH, target files in the specified locations. Parameters specify files, symbols, line numbers, and extraction/output options; input is file paths or content, output is code or structured representations. Limitations: Requires supported file types and language grammars.\nSOURCE: https://github.com/buger/probe/blob/main/site/code-extraction.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nprobe extract <FILES> [OPTIONS]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Extract a Rust function\nprobe extract src/main.rs#handle_request\n\n# Extract an impl block\nprobe extract src/models.rs:42\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Extract a JavaScript class\nprobe extract src/components/Button.js#Button\n\n# Extract a React component\nprobe extract src/App.tsx:15\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Extract a Python class\nprobe extract src/models.py#UserModel\n\n# Extract a decorated function\nprobe extract src/views.py:42\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Extract a Go struct\nprobe extract pkg/models/user.go#User\n\n# Extract a method\nprobe extract pkg/handlers/auth.go:42\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Extract code while preserving original input\nprobe extract src/main.rs:42 --keep-input\n\n# Using the short form\nprobe extract src/main.rs:42 -k\n```\n\nLANGUAGE: bash\nCODE:\n```\nrustc main.rs 2>&1 | probe extract\n\ngo test ./... | probe extract\n\nrustc main.rs 2>&1 | probe extract --keep-input\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Extract code from git diff output (auto-detection)\ngit diff | probe extract\n\n# Extract code from a diff file (auto-detection)\nprobe extract diff_file.patch\n\n# Extract code from clipboard containing git diff (auto-detection)\nprobe extract --from-clipboard\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Find and extract error handlers\nprobe search \"error handling\" --files-only | xargs -I{} probe extract {} --format markdown\n\n# Extract specific functions with context\ngrep -n \"handleRequest\" ./src/*.js | cut -d':' -f1,2 | probe extract --context 3\n\n# Extract all functions matching a pattern\nfind . -name \"*.py\" | xargs grep -l \"def test_\" | xargs -I{} probe extract {}#test_\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Extract a Rust function\nprobe extract src/main.rs#handle_extract\n\n# Extract a JavaScript class method\nprobe extract src/components/User.js#User.authenticate\n\n# Extract a Python class method\nprobe extract src/models.py#UserModel.save\n\n# Extract a Go interface\nprobe extract pkg/service/interface.go#UserService\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Extract from multiple specific files\nprobe extract src/auth.js:15 src/api.js:27 src/models.rs:42\n\n# Extract using glob patterns\nprobe extract src/*.rs:42\n\n# Extract multiple symbols\nprobe extract src/main.rs#handle_request src/models.rs#User\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Extract changes for review (using auto-detection)\ngit diff | probe extract\n\n# Extract changes from a specific commit\ngit show commit_hash | probe extract\n\n# Extract changes between branches\ngit diff main..feature-branch | probe extract\n\n# Extract functions modified in a PR\ngit diff --name-only origin/main | xargs grep -l \"fn \" | xargs -I{} probe extract {}\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Extract public API functions for documentation\nfind . -name \"*.rs\" | xargs grep -l \"pub fn\" | xargs -I{} probe extract {} --format markdown > api_docs.md\n\n# Extract class definitions for API reference\nfind . -name \"*.py\" | xargs grep -l \"class \" | xargs -I{} probe extract {} --format markdown > classes.md\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Extract code for AI context\nprobe extract src/main.rs:42 --format json | jq '.results[0].code' | ai-assistant \"Explain this code\"\n\n# Extract multiple related functions for AI analysis\nprobe extract src/auth.rs#authenticate src/auth.rs#validate --format json --max-tokens 4000\n\n# Code review with git diff and AST extraction\ngit diff | tee /tmp/changes.diff | ai-assistant \"Here are the changes:\" && git diff | probe extract | ai-assistant \"Here are the complete functions that were modified:\"\n```\n\n----------------------------------------\n\nTITLE: Customizing System Prompt for Probe AI Chat in Node.js - JavaScript\nDESCRIPTION: This snippet shows how to instantiate ProbeChat in Node.js with a custom system message, influencing the AI's overall behavior and prioritization (e.g., focusing on security). Dependencies: @buger/probe-chat npm package, appropriate API key, optional provider selection, and allowedFolders for context restriction. Useful when high-level behavioral guidance needs to be passed programmatically to the AI.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst chat = new ProbeChat({\n  model: 'claude-3-sonnet-20240229',\n  anthropicApiKey: process.env.ANTHROPIC_API_KEY,\n  // Or use a different provider\n  // forceProvider: 'google',\n  // googleApiKey: process.env.GOOGLE_API_KEY,\n  allowedFolders: ['/path/to/your/project'],\n  systemMessage: 'You are a code expert focusing on security issues. When analyzing code, prioritize identifying security vulnerabilities.'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Probe Binary Path for MCP Server in JSON\nDESCRIPTION: Adjusts the NPX-based MCP server configuration to use a custom-built Probe binary instead of the one bundled with the NPM package. The path to the custom binary is specified using the `PROBE_PATH` environment variable.\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-server.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp@latest\"\n      ],\n      \"env\": {\n        \"PROBE_PATH\": \"/path/to/custom/probe\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Probe search results with Unix tools\nDESCRIPTION: This command demonstrates how to combine Probe search with standard Unix tools like grep to filter results before piping them to Probe Chat for analysis.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/cli-ai-workflows.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Find then filter\nprobe search \"database\" | grep \"connection\" | probe-chat\n```\n\n----------------------------------------\n\nTITLE: Hybrid Ranking Formula for Code Search Relevance in Probe (Mathematical Expression)\nDESCRIPTION: Shows how Probe's hybrid ranking algorithm combines TF-IDF and BM25 scores for balanced code search results, with additional consideration for position and block/file-level metrics. The formula is illustrative rather than executable, representing probe's weighting strategy. Inputs are TF-IDF and BM25 scores, as well as weighting parameter α; output is a single combined relevance score.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-reference.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nCombined = α * TF-IDF + (1-α) * BM25\n```\n\n----------------------------------------\n\nTITLE: Optimizing probe search Speed and Precision in Bash\nDESCRIPTION: Shows techniques to enhance `probe search` performance and relevance. Options include using frequency-based search (default), employing more specific or exact search terms for better precision, and performing a file-only search first in a multi-phase approach.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/advanced-cli.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Use frequency-based search (default)\nprobe search \"authentication\" --frequency\n\n# Use more specific search terms for better precision\nprobe search \"exactString function\"\n\n# Search only filenames first, then content\nprobe search \"config\" --files-only\n```\n\n----------------------------------------\n\nTITLE: Cloud Deployment of Probe (Bash)\nDESCRIPTION: This snippet demonstrates how to deploy Probe on a cloud server. It includes cloning the repository, setting up environment variables, and using PM2 to keep the server running.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/team-chat.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# On your cloud server\ngit clone https://github.com/buger/probe.git\ncd probe/examples/web\nnpm install\n\n# Configure environment\nexport ANTHROPIC_API_KEY=your_api_key\nexport ALLOWED_FOLDERS=/path/to/repos\nexport AUTH_ENABLED=true\nexport AUTH_USERNAME=team\nexport AUTH_PASSWORD=secure_password\nexport PORT=8080\n\n# Use PM2 to keep the server running\nnpm install -g pm2\npm2 start npm -- start\n```\n\n----------------------------------------\n\nTITLE: Enabling Code Editing in Probe Chat\nDESCRIPTION: This snippet demonstrates how to enable and use the code editing feature in Probe chat sessions, which allows the AI agent to modify the codebase using the Aider tool.\nSOURCE: https://github.com/buger/probe/blob/main/site/cli-mode.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Start an interactive chat session with editing enabled\nprobe-chat --allow-edit\n\n# Send a single message requesting a change (non-interactive)\nprobe-chat --allow-edit --message \"Add comments to the process_data function in utils.py\"\n```\n\n----------------------------------------\n\nTITLE: Installing Probe via npm - Bash\nDESCRIPTION: This bash command installs the latest version of Probe globally using npm. It is meant for quick setup, assumes npm is installed on the user's system, and the user has sufficient privileges to install global packages. Key parameters: -g for global installation, @buger/probe@latest specifies the latest release. The output is Probe available system-wide. Requires network connectivity and appropriate permissions.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-maintenance.md#2025-04-23_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install -g @buger/probe@latest\n```\n\n----------------------------------------\n\nTITLE: Running Probe via NPX\nDESCRIPTION: Command to execute Probe without installation using NPX\nSOURCE: https://github.com/buger/probe/blob/main/site/features.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx -y @buger/probe-chat@latest\n```\n\n----------------------------------------\n\nTITLE: Performing Code Quality Analysis with probe search and query in Bash\nDESCRIPTION: Shows examples of using Probe for code quality checks. This includes using `probe search` to find common markers like TODO/FIXME/HACK comments and deprecated API usage, and using `probe query` with a language-specific pattern (`--language javascript`) to identify potentially large functions.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/advanced-cli.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# Find TODO comments\nprobe search \"TODO|FIXME|HACK\" > todos.txt\n\n# Look for large functions\nprobe query \"function $NAME($$$PARAMS) $$$BODY\" ./src --language javascript > large-functions.txt\n\n# Find deprecated API usage\nprobe search \"deprecated\" --format markdown > deprecated-usage.md\n```\n\n----------------------------------------\n\nTITLE: Configuring custom API URLs for Probe Chat\nDESCRIPTION: This code demonstrates how to set custom API URLs for Anthropic and OpenAI, which is useful for enterprise deployments or when using proxies.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/cli-ai-workflows.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Override API URLs\nexport ANTHROPIC_API_URL=https://your-anthropic-proxy.com\nexport OPENAI_API_URL=https://your-openai-proxy.com/v1\nprobe-chat\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Probe Web Interface\nDESCRIPTION: Example Nginx server configuration for setting up a secure HTTPS proxy for the Probe web interface. Includes SSL certificate settings, proxy configuration, and rate limiting.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/deploying-probe-web-interface.md#2025-04-23_snippet_8\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 443 ssl;\n    server_name code-chat.yourcompany.com;\n\n    ssl_certificate /path/to/cert.pem;\n    ssl_certificate_key /path/to/key.pem;\n\n    location / {\n        proxy_pass http://localhost:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        \n        # Rate limiting\n        limit_req zone=one burst=10 nodelay;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Search Paths for Probe MCP Server in JSON\nDESCRIPTION: This JSON configuration demonstrates an advanced setup for the Probe MCP server, specifying default search directories. It uses the 'env' property to set the 'PROBE_DEFAULT_PATHS' environment variable, providing a comma-separated list of paths for the server to search by default.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"probe\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp@latest\"\n      ],\n      \"env\": {\n        \"PROBE_DEFAULT_PATHS\": \"/path/to/project1,/path/to/project2\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode (Bash)\nDESCRIPTION: Starts the application using npm or node with the general debug mode enabled. This can be achieved either by setting the DEBUG environment variable to true before the command or by passing the --debug command-line option directly to the node script. Enabling this mode provides detailed logging, including API requests/responses, tool usage, system messages, and token estimates.\nSOURCE: https://github.com/buger/probe/blob/main/site/web-interface.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Via environment variable\nDEBUG=true npm start\n\n# Via command-line option\nnode index.js --debug\n```\n\n----------------------------------------\n\nTITLE: Finding Error Handling Code Example\nDESCRIPTION: Example of searching for error handling code, demonstrating how Probe processes and ranks results for this common use case.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-functionality.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"error handling try catch\"\n```\n\n----------------------------------------\n\nTITLE: Using Probe Chat SDK in Node.js with Vercel AI SDK (JavaScript)\nDESCRIPTION: Demonstrates programmatically integrating the `@buger/probe-chat` SDK into a Node.js application, potentially within an API route (like Next.js or Express). It shows initializing `ProbeChat` with model configuration, API keys, and allowed directories. The example handles incoming POST requests, extracts user messages, interacts with the chat model (streaming or non-streaming), and returns the AI's response using Vercel's `ai` SDK utilities like `StreamingTextResponse`. Requires the `@buger/probe-chat` and `ai` packages, and API keys set as environment variables.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ProbeChat } from '@buger/probe-chat';\nimport { StreamingTextResponse } from 'ai';\n\n// Create a chat instance\nconst chat = new ProbeChat({\n  model: 'claude-3-sonnet-20240229',\n  anthropicApiKey: process.env.ANTHROPIC_API_KEY,\n  allowedFolders: ['/path/to/your/project']\n});\n\n// In an API route or Express handler\nexport async function POST(req) {\n  const { messages } = await req.json();\n  const userMessage = messages[messages.length - 1].content;\n  \n  // Get a streaming response from the AI\n  const stream = await chat.chat(userMessage, { stream: true });\n  \n  // Return a streaming response\n  return new StreamingTextResponse(stream);\n}\n\n// Or use it in a non-streaming way\nconst response = await chat.chat('How is authentication implemented?');\nconsole.log(response);\n```\n\n----------------------------------------\n\nTITLE: Adding Use Case References from Reference Documentation - Markdown\nDESCRIPTION: Provides markdown for linking feature reference documentation back to practical use cases. This ensures users can switch from technical information to real-world application workflows. The code gives context for both the reference and link destinations.\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-cross-references.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n# CLI Reference\n\n[...content...]\n\nThese commands are commonly used in [AI chat workflows](/ai-chat) and when [building custom tools](/nodejs-sdk).\n```\n\n----------------------------------------\n\nTITLE: Starting Probe Server on Local Network (Bash)\nDESCRIPTION: This snippet demonstrates how to start the Probe server on a local network with authentication enabled. It sets environment variables for API key, allowed folders, and authentication credentials.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/team-chat.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport ANTHROPIC_API_KEY=your_api_key\nexport ALLOWED_FOLDERS=/path/to/repos\nexport AUTH_ENABLED=true\nexport AUTH_USERNAME=team\nexport AUTH_PASSWORD=secure_password\n\nnpx -y @buger/probe-chat@latest --web\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Prompt File Location via Environment Variable - Bash\nDESCRIPTION: This snippet demonstrates how to provide the path to a custom prompt file by setting the CUSTOM_PROMPT environment variable. ProbeChat will use the specified file as the source for system prompt instructions if the command-line flag is not used. Dependencies: The provided path must be accessible and point to a properly formatted prompt file.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nCUSTOM_PROMPT=/path/to/your/prompt.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Probe via curl (macOS and Linux)\nDESCRIPTION: Command to install Probe using curl for macOS and Linux systems.\nSOURCE: https://github.com/buger/probe/blob/main/site/quick-start.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://raw.githubusercontent.com/buger/probe/main/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Ignore Patterns with probe search in Bash\nDESCRIPTION: Illustrates using the `--ignore` flag with `probe search` to exclude specified directories or file patterns (e.g., node_modules, build artifacts, tests, vendor code) from the search results. This helps focus the search on relevant code.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/advanced-cli.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Exclude generated code, tests, and third-party libraries\nprobe search \"api\" --ignore \"node_modules,dist,build,vendor,test,__tests__\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting Probe Chat Globally with npm (Bash)\nDESCRIPTION: This set of bash commands illustrates a typical install-and-run workflow for the Probe chat package using npm. It includes global installation, running the interface in CLI or web UI mode using the 'probe-chat' command, and covers both options with and without the web interface. Prerequisites include Node.js and npm installed globally. Output is a running chat interface accessible as specified.\nSOURCE: https://github.com/buger/probe/blob/main/site/web-interface.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install globally\nnpm install -g @buger/probe-chat@latest\n\n# Run in CLI mode\nprobe-chat\n\n# Run in web mode\nprobe-chat --web\n```\n\n----------------------------------------\n\nTITLE: Implementing Tool Execution Function in TypeScript\nDESCRIPTION: This TypeScript function 'executeTool' handles the execution of different tools based on the provided name and parameters. It includes cases for 'search' and 'extract' tools, with error handling and parameter validation.\nSOURCE: https://github.com/buger/probe/blob/main/site/blog/agentic-flow-custom-xml-protocol.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nasync function executeTool(name: string, params: Record<string, string>): Promise<string> {\n  console.log(`Executing tool: ${name}`, params);\n  try {\n    switch (name) {\n      case 'search':\n        // Validate params.query exists, etc.\n        const query = params.query;\n        if (!query) throw new Error(\"Missing required parameter: query\");\n        const path = params.path || '.'; // Default path\n        // Call actual search implementation\n        const searchResults = await performCodeSearch(query, path);\n        return formatSearchResults(searchResults); // Return results as a string\n\n      case 'extract':\n        // Validate params.file_path\n        const filePath = params.file_path;\n        if (!filePath) throw new Error(\"Missing required parameter: file_path\");\n        // Call actual extract implementation\n        const extractedCode = await performCodeExtraction(filePath);\n        return extractedCode; // Return code as string\n\n      // Add cases for other tools\n\n      default:\n        throw new Error(`Unknown tool name: ${name}`);\n    }\n  } catch (error: any) {\n    console.error(`Tool ${name} failed:`, error);\n    // Re-throw or format error string for LLM\n    throw new Error(`Tool ${name} execution failed: ${error.message}`);\n  }\n}\n\n// Placeholder implementations\ndeclare function performCodeSearch(query: string, path: string): Promise<any>;\ndeclare function formatSearchResults(results: any): string;\ndeclare function performCodeExtraction(filePath: string): Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: Basic Code Search Implementation\nDESCRIPTION: Simple example of using the search functionality to find code patterns in a project directory. Includes basic error handling and result logging.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe';\n\nasync function basicSearchExample() {\n  try {\n    const results = await search({\n      path: '/path/to/your/project',\n      query: 'function',\n      maxResults: 5\n    });\n    \n    console.log('Search results:');\n    console.log(results);\n  } catch (error) {\n    console.error('Search error:', error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Probe\nDESCRIPTION: Sample content for the .env file that configures the Probe web interface. Includes API key, port, and directory restrictions.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_39\n\nLANGUAGE: plaintext\nCODE:\n```\nANTHROPIC_API_KEY=your_anthropic_api_key\nPORT=8080\nALLOWED_FOLDERS=/path/to/folder1,/path/to/folder2\n```\n\n----------------------------------------\n\nTITLE: Sample .env Configuration for Provider API Keys and Settings - ENV\nDESCRIPTION: Demonstrates a template .env file, used to specify API keys for supported AI providers (Anthropic Claude, OpenAI, Google Gemini), optional provider-forcing, debug mode, default model names, custom API endpoints, allowed search folders, and web server settings. Required for the application to identify the correct credentials/providers and runtime behavior. Some fields are commented for clarity and activation when needed.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_1\n\nLANGUAGE: env\nCODE:\n```\n# API Keys (uncomment and add your key)\nANTHROPIC_API_KEY=your_anthropic_api_key\n# OPENAI_API_KEY=your_openai_api_key\n# GOOGLE_API_KEY=your_google_api_key\n\n# Force a specific provider (optional)\n# FORCE_PROVIDER=anthropic  # Options: anthropic, openai, google\n\n# Debug mode (set to true for verbose logging)\nDEBUG=false\n\n# Default model (optional)\n# For Anthropic: MODEL_NAME=claude-3-7-sonnet-latest\n# For OpenAI: MODEL_NAME=gpt-4o-2024-05-13\n# For Google: MODEL_NAME=gemini-2.0-flash\n\n# API URL configuration (optional)\n# Generic base URL for all providers (if provider-specific URL not set)\n# LLM_BASE_URL=https://your-custom-endpoint.com\n# Provider-specific URLs (override LLM_BASE_URL)\n# ANTHROPIC_API_URL=https://your-anthropic-endpoint.com\n# OPENAI_API_URL=https://your-openai-endpoint.com\n# GOOGLE_API_URL=https://your-google-endpoint.com\n\n# Folders to search (comma-separated list of paths)\n# If not specified, the current directory will be used by default\n# ALLOWED_FOLDERS=/path/to/folder1,/path/to/folder2\n\n# Web interface settings (optional)\n# PORT=8080\n# AUTH_ENABLED=false\n# AUTH_USERNAME=admin\n# AUTH_PASSWORD=password\n\n```\n\n----------------------------------------\n\nTITLE: Forcing a Specific Provider via Command Line Option - Bash\nDESCRIPTION: Instructs Probe Chat to use a particular AI provider by specifying the '--force-provider' argument ('anthropic', 'openai', or 'google') when starting the server. Ensures the desired backend is always selected, provided the matching API key is configured.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js --force-provider anthropic\nnode index.js --force-provider openai\nnode index.js --force-provider google\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Cross-Reference Structure in Markdown Documentation\nDESCRIPTION: Example of a full implementation of cross-references in a Markdown document, including installation instructions, next steps section, and related topics to provide users with a clear navigation path through the documentation.\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-maintenance.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n# Quick Start\n\nThis guide will help you get up and running with Probe quickly.\n\n## Installation\n\nThe easiest way to install Probe is via npm:\n\n```bash\nnpm install -g @buger/probe@latest\n```\n\nFor more detailed installation instructions, including manual installation and building from source, see the [Installation Guide](/installation).\n\n...\n\n## Next Steps\n\n- Learn more about the [CLI Mode](/cli-mode) for detailed command options\n- Explore the [AI Chat Mode](/ai-chat) for interactive code exploration\n- Check out the [Web Interface](/web-interface) for a browser-based experience\n- Understand [How It Works](/how-it-works) to get the most out of Probe\n\n## Related Topics\n\n- [Installation](/installation) - Detailed installation instructions\n- [CLI Mode](/cli-mode) - Command-line interface reference\n- [AI Chat Mode](/ai-chat) - Interactive CLI interface for asking questions about your code\n- [Web Interface](/web-interface) - Browser-based exploration\n```\n\n----------------------------------------\n\nTITLE: Enabling debug mode for Probe Chat\nDESCRIPTION: This snippet shows how to enable debug mode for Probe Chat, which provides detailed logging for troubleshooting or development purposes.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/cli-ai-workflows.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Enable debug mode for detailed logging\nexport DEBUG=1 probe-chat\n```\n\n----------------------------------------\n\nTITLE: Creating a bash script to automate code analysis with Probe Chat\nDESCRIPTION: This bash script example shows how to use Probe Chat in an automated task, specifically to analyze potential security issues in a codebase and output the results to a file.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/cli-ai-workflows.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# Example script to analyze code quality\necho \"What are the potential security issues in this codebase?\" | probe-chat > security_report.txt\n```\n\n----------------------------------------\n\nTITLE: Model Selection and Configuration of AI Chat Mode - Bash\nDESCRIPTION: This snippet shows how to configure the AI chat mode using environment variables in bash. You can override the model name, force a specific provider, set API URLs for custom/proxy endpoints, enable debug logging, and restrict searchable folders. All options should be set before launching 'probe-chat'. Intended for granular control over the chat experience and integration.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Override the default model\nexport MODEL_NAME=claude-3-opus-20240229\nprobe-chat\n\n# For Google models\nexport MODEL_NAME=gemini-2.0-flash\nprobe-chat\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Force a specific provider\nexport FORCE_PROVIDER=anthropic  # Options: anthropic, openai, google\nprobe-chat\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Override API URLs (useful for proxies or enterprise deployments)\nexport ANTHROPIC_API_URL=https://your-anthropic-proxy.com\nexport OPENAI_API_URL=https://your-openai-proxy.com/v1\nexport GOOGLE_API_URL=https://your-google-proxy.com\nprobe-chat\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Enable debug mode for detailed logging\nexport DEBUG=1 probe-chat\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Specify which folders the AI can search\nexport ALLOWED_FOLDERS=/path/to/project1,/path/to/project2\nprobe-chat\n```\n\n----------------------------------------\n\nTITLE: Manually Moving Probe Binary and Updating PATH (Windows) (PowerShell)\nDESCRIPTION: Sequence of PowerShell commands for the final steps of manual Probe installation on Windows. It first ensures the target installation directory (`$env:LOCALAPPDATA\\Probe`) exists, then moves the extracted `probe.exe` into it. Finally, it demonstrates how to append this directory to the user's PATH environment variable, allowing `probe.exe` to be run from the command line without specifying the full path (requires restarting the shell/terminal).\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\n# For Windows (using PowerShell)\n# Create a directory for the binary (if it doesn't exist)\n$installDir = \"$env:LOCALAPPDATA\\Probe\"\nNew-Item -ItemType Directory -Path $installDir -Force\n\n# Move the binary\nMove-Item -Path .\\probe\\probe.exe -Destination $installDir\n\n# Add to PATH (optional)\n[Environment]::SetEnvironmentVariable('PATH', [Environment]::GetEnvironmentVariable('PATH', 'User') + \";$installDir\", 'User')\n```\n\n----------------------------------------\n\nTITLE: Using Probe CLI Search Command\nDESCRIPTION: Examples of using the Probe CLI search command with various options to search for code patterns in different contexts.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n# 1) Search for \"setTools\" in the current directory with frequency-based search\nprobe search \"setTools\"\n\n# 2) Search for \"impl\" in ./src\nprobe search \"impl\"  ./src\n\n# 3) Search for \"keyword\" returning only the top 5 results\nprobe search \"keyword\" --max-tokens 10000\n\n# 4) Search for \"function\" and disable merging of adjacent code blocks\nprobe search \"function\" --no-merge\n```\n\n----------------------------------------\n\nTITLE: XML Format for Search Command Results\nDESCRIPTION: The XML output structure for the search command, showing the elements included for each result such as file path, line numbers, node type, code content, matched keywords, rank, and score.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<probe_results>\n  <result>\n    <file>/path/to/file.rs</file>\n    <lines>\n      <start>10</start>\n      <end>20</end>\n    </lines>\n    <node_type>function</node_type>\n    <code><![CDATA[fn example() { ... }]]></code>\n    <matched_keywords>\n      <keyword>example</keyword>\n      <keyword>function</keyword>\n    </matched_keywords>\n    <rank>1</rank>\n    <score>0.95</score>\n  </result>\n  <!-- More results... -->\n  <summary>\n    <count>5</count>\n    <total_bytes>1024</total_bytes>\n    <total_tokens>256</total_tokens>\n  </summary>\n</probe_results>\n```\n\n----------------------------------------\n\nTITLE: Performing Targeted Directory Searches with probe search in Bash\nDESCRIPTION: Explains how to limit the scope of `probe search` to one or more specific directories instead of searching the entire repository. This technique improves performance, especially when working within large monorepos.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/advanced-cli.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Search only in the authentication module\nprobe search \"password reset\" ./src/auth\n\n# Search multiple specific directories\nprobe search \"user profile\" ./src/users ./src/profiles ./src/auth\n```\n\n----------------------------------------\n\nTITLE: Starting Probe Chat on a Sample Repository Path - Bash\nDESCRIPTION: Demonstrates running Probe Chat with the target repository path set to '../../tyk', redirecting all code analysis and search queries to that directory. Useful for quickly testing on specific projects or monorepos.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js ../../tyk\n\n```\n\n----------------------------------------\n\nTITLE: Referencing Configuration and Syntax Options in CLI Use Cases - Markdown\nDESCRIPTION: Demonstrates linking advanced CLI use cases to specific output formatting references, pattern syntax details, and environment configuration options. These markdown links offer users quick access to specialized technical information. No dependencies are needed.\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-cross-references.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n# Using in the CLI for Advanced AI\n\n[...content about CLI usage...]\n\n## Advanced Configuration\n\nFor advanced use cases, you can configure various aspects of the CLI:\n\n- For output formatting options, see [Output Formats Reference](/output-formats)\n- For search pattern syntax, see [Search Functionality](/search-functionality#patterns)\n- For environment variables, see [AI Integration Reference](/ai-integration#configuration-options)\n```\n\n----------------------------------------\n\nTITLE: Deploying Probe with Docker (Bash)\nDESCRIPTION: This snippet shows how to build and run a Docker container for Probe. It includes building the image and running the container with environment variables and volume mounting for code access.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/team-chat.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Build the Docker image\ndocker build -t code-search-chat ./examples/web\n\n# Run the container\ndocker run -p 8080:8080 \\\n  -e ANTHROPIC_API_KEY=your_anthropic_api_key \\\n  -e ALLOWED_FOLDERS=/app/code \\\n  -e AUTH_ENABLED=true \\\n  -e AUTH_USERNAME=team \\\n  -e AUTH_PASSWORD=secure_password \\\n  -v /path/to/your/repos:/app/code \\\n  code-search-chat\n```\n\n----------------------------------------\n\nTITLE: Starting the Web Interface on a Custom Port - Bash\nDESCRIPTION: Runs the Probe Chat web server on port 3000 by passing both '--web' and '--port 3000' flags. Useful for avoiding port conflicts or meeting deployment requirements. This overrides the PORT variable in environment settings.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js --web --port 3000\n\n```\n\n----------------------------------------\n\nTITLE: Running Probe Chat Example Project - Bash\nDESCRIPTION: These bash commands demonstrate how to run the Probe chat example from the package's examples directory. After changing into the directory, dependencies are installed with npm, and the preferred API key is set via environment variable. You then execute the example Node.js script. Requires Node.js and the correct API key for the desired provider.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Navigate to the examples directory\ncd examples/chat\n\n# Install dependencies\nnpm install\n\n# Set your API key\nexport ANTHROPIC_API_KEY=your_api_key\n# Or for OpenAI\n# export OPENAI_API_KEY=your_api_key\n# Or for Google\n# export GOOGLE_API_KEY=your_api_key\n\n# Start the chat interface\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Running Probe AI Chat via npx (Bash)\nDESCRIPTION: Executes the Probe interactive AI chat assistant directly using `npx` without requiring a prior global installation of the `@buger/probe-chat` package. The `-y` flag automatically confirms any installation prompts from npx.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Run directly with npx (no installation needed)\nnpx -y @buger/probe-chat\n```\n\n----------------------------------------\n\nTITLE: Command-Line Options for Probe Web Interface\nDESCRIPTION: Demonstrates various command-line options available when running Probe's web interface, including help, port selection, model specification, debug mode, and directory selection.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/deploying-probe-web-interface.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Show help\nnpx -y @buger/probe-chat@latest --help\n\n# Run in web mode on a specific port\nnpx -y @buger/probe-chat@latest --web --port 3000\n\n# Specify a model\nnpx -y @buger/probe-chat@latest --web --model claude-3-7-sonnet-latest\n\n# Enable debug mode\nnpx -y @buger/probe-chat@latest --web --debug\n\n# Specify a directory to search\nnpx -y @buger/probe-chat@latest --web /path/to/your/project\n```\n\n----------------------------------------\n\nTITLE: Using Installation Options with Probe PowerShell Script (PowerShell)\nDESCRIPTION: Demonstrates how to use command-line arguments with the Probe PowerShell installation script (`install.ps1`) executed via `iwr | iex`. The `-args` parameter allows passing options like `--system` for a system-wide installation (requires administrator privileges), `--dir` followed by a path to specify a custom installation directory, or `--help` to display usage information.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\n# Install for current user (default)\niwr -useb https://raw.githubusercontent.com/buger/probe/main/install.ps1 | iex\n\n# Install system-wide (requires admin privileges)\niwr -useb https://raw.githubusercontent.com/buger/probe/main/install.ps1 | iex -args \"--system\"\n\n# Install to a custom directory\niwr -useb https://raw.githubusercontent.com/buger/probe/main/install.ps1 | iex -args \"--dir\", \"C:\\Tools\\Probe\"\n\n# Show help\niwr -useb https://raw.githubusercontent.com/buger/probe/main/install.ps1 | iex -args \"--help\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Result Limits for Probe MCP in JSON\nDESCRIPTION: This JSON configuration shows how to set a default maximum token limit for search results returned by the Probe MCP server. It configures the `PROBE_MAX_TOKENS` environment variable to `\"20000\"` within the server's environment settings.\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-integration.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"probe\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp@latest\"\n      ],\n      \"env\": {\n        \"PROBE_MAX_TOKENS\": \"20000\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parallelizing probe Searches Across Directories using find and xargs in Bash\nDESCRIPTION: Demonstrates splitting a search across multiple directories using `find` to list directories and processing them in parallel (4 processes in this example) with `xargs -P` and `probe search`. Useful for speeding up searches in extremely large codebases.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/advanced-cli.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Split the search across multiple directories\nfind ./src -type d -maxdepth 1 | xargs -P 4 -I {} probe search \"error handling\" {} --format json\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting @buger/probe: Forcing Binary Download in JavaScript\nDESCRIPTION: This snippet addresses network errors that might occur during the automatic download of the Probe binary. It demonstrates how to use the `getBinaryPath` function from @buger/probe with the `forceDownload: true` option to initiate a new download attempt. Optionally, a specific `version` can also be specified.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport { getBinaryPath } from '@buger/probe@latest';\n\n// Force download with a specific version\nconst binaryPath = await getBinaryPath({\n  forceDownload: true,\n  version: '1.0.0'\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Starting the Probe Chat Web Interface - Bash\nDESCRIPTION: Runs the Probe Chat application in web server mode by executing index.js with the '--web' flag. This starts a web-based chat interface accessible via a browser. Requires all web mode prerequisites to be correctly configured.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js --web\n\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys for Probe AI Chat (Bash)\nDESCRIPTION: Shows how to set the necessary API key (either Anthropic or OpenAI) as an environment variable using the `export` command in Bash. This key is required for the Probe AI chat to authenticate and interact with the respective AI model's API.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Set your API key first\nexport ANTHROPIC_API_KEY=your_api_key\n# Or for OpenAI\n# export OPENAI_API_KEY=your_api_key\n```\n\n----------------------------------------\n\nTITLE: Connecting Workflow Steps Across Documentation - Markdown\nDESCRIPTION: Illustrates how to connect different steps in a workflow using cross-referential links in markdown. Each part of the workflow is linked to relevant instructions, allowing users to traverse related documentation smoothly. No dependencies are needed. Each link uses a descriptive anchor for clarity.\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-cross-references.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nAfter [setting up the MCP server](/mcp-server#setting-up-the-mcp-server), you can [integrate it with your AI editor](/mcp-integration#editor-integration).\n```\n\n----------------------------------------\n\nTITLE: Forcing a Specific Provider via .env Variable - ENV\nDESCRIPTION: Shows how to permanently set the AI provider by adding the FORCE_PROVIDER variable to the .env file. When set, Probe Chat will automatically utilize this provider for all sessions unless superseded by a command-line argument.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_10\n\nLANGUAGE: env\nCODE:\n```\nFORCE_PROVIDER=anthropic  # or openai, google\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Folders in Probe\nDESCRIPTION: Sets environment variables to specify allowed folders for the Probe tool to search. This is an optional configuration that restricts which directories the tool can access.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nexport ALLOWED_FOLDERS=/path/to/folder1,/path/to/folder2\n```\n\n----------------------------------------\n\nTITLE: Managing the probe binary in @buger/probe\nDESCRIPTION: Examples of using getBinaryPath and setBinaryPath functions for managing the probe binary.\nSOURCE: https://github.com/buger/probe/blob/main/npm/README.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getBinaryPath, setBinaryPath } from '@buger/probe';\n\n// Get the path to the probe binary\nconst binaryPath = await getBinaryPath({\n  forceDownload: false,\n  version: '1.0.0'\n});\n\n// Manually set the path to the probe binary\nsetBinaryPath('/path/to/probe/binary');\n```\n\n----------------------------------------\n\nTITLE: Extracting Probe archive files for manual installation\nDESCRIPTION: Commands for extracting Probe archive files during manual installation. Includes commands for both Linux/macOS (.tar.gz) and Windows (.zip) platforms.\nSOURCE: https://github.com/buger/probe/blob/main/site/installation.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# For Linux/macOS\ntar -xzf probe-*-*.tar.gz\n\n# For Windows (using PowerShell)\nExpand-Archive -Path probe-*-windows.zip -DestinationPath .\\probe\n```\n\n----------------------------------------\n\nTITLE: Basic search example using @buger/probe\nDESCRIPTION: A simple example demonstrating how to perform a basic search using the @buger/probe package.\nSOURCE: https://github.com/buger/probe/blob/main/npm/README.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe';\n\nasync function basicSearchExample() {\n  try {\n    const results = await search({\n      path: '/path/to/your/project',\n      query: 'function',\n      maxResults: 5\n    });\n    \n    console.log('Search results:');\n    console.log(results);\n  } catch (error) {\n    console.error('Search error:', error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Probe Node.js SDK 'query' Function in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to use the 'query' function from the '@buger/probe' SDK to find specific code structures. It imports the function and calls it asynchronously, providing the project 'path', a tree-sitter 'pattern', and the target 'language'.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { query } from '@buger/probe';\n\nconst queryResults = await query({\n  path: '/path/to/your/project',\n  pattern: 'function $NAME($$$PARAMS) $$$BODY',\n  language: 'javascript'\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Format for Extract Command with Keep-Input Flag\nDESCRIPTION: The JSON output structure for the extract command when using the --keep-input flag, which includes the original input text in the output along with the extracted code.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"original_input\": \"src/main.rs:42: error: invalid syntax\",  // Original input when using --keep-input\n  \"results\": [\n    {\n      \"file\": \"src/main.rs\",\n      \"lines\": [40, 45],\n      \"node_type\": \"function\",\n      \"code\": \"fn process_data(data: &[u8]) -> Result<Vec<u8>, Error> {\\n    // Processing logic\\n    ...\\n}\"\n    }\n  ],\n  \"summary\": {\n    \"count\": 1,\n    \"total_bytes\": 85,\n    \"total_tokens\": 25\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Probe Chat CLI Interface with npm - Bash\nDESCRIPTION: Launches the Probe Chat CLI via the 'npm start' command, which assumes a start script is defined in package.json. Provides a convenient alias for 'node index.js', initiating the terminal chat interface.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Descriptive Link Text for Cross-References in Markdown\nDESCRIPTION: Example showing how to use descriptive link text for cross-referencing in Markdown documentation. This snippet contrasts good practice (descriptive text) with bad practice (using file paths as link text).\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-maintenance.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nLearn more about [how Probe works](/how-it-works)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[how-it-works.md](/how-it-works)\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Engineer Workflow with Code Editing in GitHub Actions (YAML)\nDESCRIPTION: Defines a GitHub Actions workflow named 'Probe Engineer Handler' using YAML. This workflow triggers exclusively on issue comments and uses the `/engineer` command prefix. It leverages the reusable `buger/probe/probe.yml` workflow, explicitly enabling code modification (`allow_edit: true`) and using the 'engineer' AI persona (`prompt: engineer`). Requires write permissions for repository contents, issues, and pull requests, along with necessary AI provider and potentially GitHub App secrets.\nSOURCE: https://github.com/buger/probe/blob/main/site/integrations/github-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Probe Engineer Handler\n\non:\n  issue_comment:\n    types: [created] # Trigger only on issue comments\n\n# Define permissions needed for the workflow\npermissions:\n  issues: write # To post comments\n  pull-requests: write # To potentially create/comment on PRs (depending on implement tool behavior)\n  contents: write # REQUIRED to allow code modifications\n\njobs:\n  trigger_probe_implement:\n    # Use the reusable workflow\n    uses: buger/probe/.github/workflows/probe.yml@main\n    with:\n      # Define the command prefix\n      command_prefix: \"/engineer\" # Specific prefix for this persona\n      # --- Enable Editing ---\n      allow_edit: true # Explicitly allow code modifications\n      # --- Set AI Persona ---\n      prompt: engineer # Use the 'engineer' predefined prompt\n    secrets:\n      # AI Provider Secrets\n      ANTHROPIC_API_KEY: ${{ secrets.PROBE_ANTHROPIC_API_KEY }}\n      ANTHROPIC_API_URL: ${{ secrets.PROBE_ANTHROPIC_URL }}\n      # GitHub App Secrets (Potentially needed for more complex git operations)\n      APP_ID: ${{ secrets.PROBE_APP_ID }}\n      APP_PRIVATE_KEY: ${{ secrets.PROBE_APP_PRIVATE_KEY }}\n      # GITHUB_TOKEN is automatically passed\n```\n\n----------------------------------------\n\nTITLE: Testing Implementation in Rust\nDESCRIPTION: Comprehensive test suite for the new language implementation including extension, parent node, and test detection verification.\nSOURCE: https://github.com/buger/probe/blob/main/site/adding-languages.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use crate::language::mylanguage::MyLanguage;\n    use crate::language::language_trait::LanguageImpl;\n    use tree_sitter::Parser;\n\n    #[test]\n    fn test_mylanguage_extension() {\n        let lang = MyLanguage::new();\n        assert_eq!(lang.get_extension(), \".ml\");\n    }\n\n    #[test]\n    fn test_mylanguage_acceptable_parent() {\n        let lang = MyLanguage::new();\n        let source = r#\"\n            function add(x, y) {\n                return x + y;\n            }\n        \"#;\n        \n        let mut parser = Parser::new();\n        parser.set_language(lang.get_tree_sitter_language()).unwrap();\n        let tree = parser.parse(source, None).unwrap();\n        let root_node = tree.root_node();\n        \n        // Find a function node and test if it's an acceptable parent\n        let function_node = root_node.named_child(0).unwrap();\n        assert!(lang.is_acceptable_parent(&function_node));\n    }\n\n    #[test]\n    fn test_mylanguage_test_node() {\n        let lang = MyLanguage::new();\n        let source = r#\"\n            function test_add() {\n                assert.equal(add(1, 2), 3);\n            }\n        \"#;\n        \n        let mut parser = Parser::new();\n        parser.set_language(lang.get_tree_sitter_language()).unwrap();\n        let tree = parser.parse(source, None).unwrap();\n        let root_node = tree.root_node();\n        \n        // Find a test function node and test if it's recognized as a test\n        let function_node = root_node.named_child(0).unwrap();\n        assert!(lang.is_test_node(&function_node, source.as_bytes()));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm - Bash\nDESCRIPTION: Installs all required Node.js dependencies for Probe Chat using npm. This must be run inside the 'examples/chat' directory after cloning the repository. Ensures all packages specified in package.json are installed for correct application operation.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting @buger/probe: Manually Setting Binary Path in JavaScript\nDESCRIPTION: This snippet provides a solution for the 'Binary not found' error when using @buger/probe. It shows how to import and use the `setBinaryPath` function from the library to explicitly tell the JavaScript wrapper where the Probe executable file is located on the system.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport { setBinaryPath } from '@buger/probe@latest';\n\n// Manually set the path to the probe binary\nsetBinaryPath('/path/to/probe/binary');\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Probe MCP Server after Manual Installation in JSON\nDESCRIPTION: This JSON configuration snippet is used in an AI editor's settings after manually installing the Probe MCP server globally via NPM. It tells the editor to directly execute the `probe-mcp` command to start the server, assuming it's available in the system's PATH.\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"probe\": {\n      \"command\": \"probe-mcp\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Probe binary to system PATH for manual installation\nDESCRIPTION: Commands for moving the Probe binary to a location in the system PATH after manual extraction. Includes commands for both Linux/macOS and Windows platforms.\nSOURCE: https://github.com/buger/probe/blob/main/site/installation.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# For Linux/macOS\nsudo mv probe /usr/local/bin/\n\n# For Windows (using PowerShell)\n# Create a directory for the binary (if it doesn't exist)\n$installDir = \"$env:LOCALAPPDATA\\Probe\"\nNew-Item -ItemType Directory -Path $installDir -Force\n\n# Move the binary\nMove-Item -Path .\\probe\\probe.exe -Destination $installDir\n\n# Add to PATH (optional)\n[Environment]::SetEnvironmentVariable('PATH', [Environment]::GetEnvironmentVariable('PATH', 'User') + \";$installDir\", 'User')\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Folders for Security\nDESCRIPTION: Sets the ALLOWED_FOLDERS environment variable to restrict which directories can be searched by Probe. This is a crucial security setting to prevent access to sensitive files.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/deploying-probe-web-interface.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Specify which folders can be searched\nexport ALLOWED_FOLDERS=/path/to/repo1,/path/to/repo2,/path/to/repo3\n```\n\n----------------------------------------\n\nTITLE: Customizing the Model via Command Line Option - Bash\nDESCRIPTION: Demonstrates how to specify which model the selected provider should use by passing the '--model' parameter on startup. Each line sets a suitable model for a different provider, allowing for advanced customization of AI responses.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js --model claude-3-7-sonnet-latest\nnode index.js --model gpt-4o-2024-05-13\nnode index.js --model gemini-2.0-flash\n\n```\n\n----------------------------------------\n\nTITLE: Installing Probe MCP Server Globally using NPM in Bash\nDESCRIPTION: Shows the command to manually install the `@buger/probe-mcp` package globally using NPM. This is an alternative to the NPX setup and makes the `probe-mcp` command available system-wide. Requires Node.js and NPM to be installed.\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-server.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @buger/probe-mcp@latest\n```\n\n----------------------------------------\n\nTITLE: Example Python Code for AST Demonstration\nDESCRIPTION: Sample Python code used to demonstrate AST structure analysis.\nSOURCE: https://github.com/buger/probe/blob/main/site/adding-languages.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef hello(name):\n    return f\"Hello, {name}!\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Contextual Cross-Reference Links in Documentation - Markdown\nDESCRIPTION: This Markdown snippet shows best practices for inserting contextual cross-references in documentation. It compares descriptive in-text links to ambiguous filenames and demonstrates linking to specific sections using anchor syntax. It requires a Markdown-compatible renderer (such as VitePress) and assumes referenced documents exist at the specified paths. Inputs are link text and URLs; output is rendered Markdown with user-friendly navigation. Ensure that section headers referenced with anchors exist to avoid broken links.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-maintenance.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nLearn more about [how Probe works](/how-it-works)\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n[how-it-works.md](/how-it-works)\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n[Search Syntax](/search-functionality#search-syntax)\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in JavaScript - JavaScript\nDESCRIPTION: This snippet defines a JavaScript function named handleError which logs the provided error's message to the console and returns an object containing the success status (false) and the error message. No external dependencies are required beyond a JavaScript runtime. The function expects an error object with a message property and returns a standardized response object, supporting error reporting and handling flows in Node.js apps or browser scripts.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleError(error) {\\n  console.error(`Error: ${error.message}`);\\n  return { success: false, error: error.message };\\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Assistant MCP Server Configuration with Environment Variables - JSON\nDESCRIPTION: This JSON configuration enables the 'probe' MCP server with additional environment variables, designed for integration with multiple AI assistants. The env property sets PROBE_DEFAULT_PATHS, allowing the server to restrict or direct search locations. Place this snippet in mcp_config.json to configure different assistants to share the same Probe server. Required dependencies mirror the primary MCP setup, and all values must be valid for your system and codebase.\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-integration.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"mcpServers\\\": {\\n    \\\"probe\\\": {\\n      \\\"command\\\": \\\"npx\\\",\\n      \\\"args\\\": [\\n        \\\"-y\\\",\\n        \\\"@buger/probe-mcp@latest\\\"\\n      ],\\n      \\\"env\\\": {\\n        \\\"PROBE_DEFAULT_PATHS\\\": \\\"/path/to/project\\\"\\n      }\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Default Search Paths for Probe MCP in JSON\nDESCRIPTION: This JSON configuration snippet demonstrates advanced setup for the Probe MCP server. It uses the `env` key to set the `PROBE_DEFAULT_PATHS` environment variable, allowing specification of multiple comma-separated default directories (`/path/to/project1,/path/to/project2`) for Probe searches.\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-integration.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"probe\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp@latest\"\n      ],\n      \"env\": {\n        \"PROBE_DEFAULT_PATHS\": \"/path/to/project1,/path/to/project2\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @buger/probe Dependency (npm) - Bash\nDESCRIPTION: Demonstrates how to install the '@buger/probe' package using npm. It can be added as a project dependency or installed globally. The installation process automatically downloads the appropriate Probe binary for the user's operating system (Windows, macOS, or Linux).\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/building-ai-tools.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Add to your project\nnpm install @buger/probe@latest\n\n# Or install globally\nnpm install -g @buger/probe@latest\n```\n\n----------------------------------------\n\nTITLE: Managing Probe Binary Path in Node.js\nDESCRIPTION: Example of using the getBinaryPath and setBinaryPath functions to manage the Probe binary. Shows how to retrieve the current binary path and set a custom path.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getBinaryPath, setBinaryPath } from '@buger/probe@latest';\n\n// Get the path to the probe binary\nconst binaryPath = await getBinaryPath({\n  forceDownload: false,\n  version: '1.0.0'\n});\n\n// Manually set the path to the probe binary\nsetBinaryPath('/path/to/probe/binary');\n```\n\n----------------------------------------\n\nTITLE: Customizing the Model via .env Variable - ENV\nDESCRIPTION: Permanently sets the AI model for all interactions by including the MODEL_NAME variable in the .env configuration. Overridden by the --model argument if specified on the command line. The correct model must be compatible with the selected provider.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_12\n\nLANGUAGE: env\nCODE:\n```\nMODEL_NAME=claude-3-7-sonnet-latest\n\n```\n\n----------------------------------------\n\nTITLE: Installing Rust for building Probe from source\nDESCRIPTION: Commands for installing Rust and Cargo, which are prerequisites for building Probe from source. Includes installation commands for both macOS/Linux and Windows systems.\nSOURCE: https://github.com/buger/probe/blob/main/site/installation.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nFor macOS/Linux:\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Probe Web Interface\nDESCRIPTION: Command to install the required Node.js dependencies for the Probe web interface using npm.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Code Extraction Examples with Probe\nDESCRIPTION: This snippet showcases different ways to use the 'extract' command, including extracting specific lines, functions, adding context, and using LLM prompts for code explanation or refactoring.\nSOURCE: https://github.com/buger/probe/blob/main/site/cli-mode.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Get function containing line 42\nprobe extract src/main.rs:42\n\n# Extract multiple blocks\nprobe extract src/auth.js:15 src/api.js:27\n\n# Extract by symbol name\nprobe extract src/main.rs#handle_extract\n\n# Extract a specific line range\nprobe extract src/main.rs:10-20\n\n# Output as JSON\nprobe extract src/handlers.rs:108 --format json\n\n# Output as XML\nprobe extract src/handlers.rs:108 --format xml\n\n# Add surrounding context\nprobe extract src/utils.rs:72 --context 5\n\n# Preserve original input alongside extracted code\nprobe extract src/main.rs:42 --keep-input\n\n# Extract from error output while preserving original messages\nrustc main.rs 2>&1 | probe extract -k\n\n# Extract code with LLM prompt and instructions\nprobe extract src/auth.rs#authenticate --prompt engineer --instructions \"Explain this authentication function\"\n\n# Extract code with custom prompt template\nprobe extract src/api.js:42 --prompt /path/to/custom/prompt.txt --instructions \"Refactor this code\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Code Snippets with Probe SDK - JavaScript\nDESCRIPTION: Demonstrates the basic use of the 'extract' function from the '@buger/probe' SDK. This function retrieves code content from specified files or specific lines within files. It takes a 'files' array containing file paths or file paths with line numbers (e.g., 'file.js:42').\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/building-ai-tools.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extract } from '@buger/probe';\n\n// Extract code from specific files\nconst code = await extract({\n  files: [\n    '/path/to/your/project/src/auth.js',\n    '/path/to/your/project/src/api.js:42'  // Extract from line 42\n  ]\n});\n\n// [...] Example continues below\n\nconsole.log(code);\n```\n\n----------------------------------------\n\nTITLE: Navigating to Web Directory for Probe Setup\nDESCRIPTION: Command to change into the web directory of the Probe project, which is the first step in the manual setup process.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\ncd web\n```\n\n----------------------------------------\n\nTITLE: Manually Moving Probe Binary (Linux/macOS) (Bash)\nDESCRIPTION: Command used during manual installation on Linux or macOS to move the extracted `probe` executable file to a standard directory (`/usr/local/bin`) that is typically included in the system's PATH environment variable. This makes the `probe` command accessible from any location in the terminal. Requires `sudo` for write permissions to `/usr/local/bin`.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# For Linux/macOS\nsudo mv probe /usr/local/bin/\n```\n\n----------------------------------------\n\nTITLE: Limiting Search Result Size for Probe MCP Server in JSON\nDESCRIPTION: This JSON configuration demonstrates how to limit the amount of code returned by the Probe MCP server, which is useful for large codebases. It sets the `PROBE_MAX_TOKENS` environment variable via the `env` property to control the maximum token count in search results sent back to the AI editor.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/ai-code-editors.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"probe\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp\"\n      ],\n      \"env\": {\n        \"PROBE_MAX_TOKENS\": \"20000\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Probe Node.js SDK Locally\nDESCRIPTION: Command to install the Probe Node.js SDK locally using npm. This installs the latest version of the package.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @buger/probe@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Probe Node.js SDK Locally using Bash\nDESCRIPTION: This Bash command installs the '@buger/probe' Node.js SDK as a local dependency within the current project using npm. This allows the project's code to import and use the SDK's functions.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @buger/probe@latest\n```\n\n----------------------------------------\n\nTITLE: Checking Probe Binary Path with @buger/probe (JavaScript)\nDESCRIPTION: A JavaScript snippet demonstrating how to import and use the `getBinaryPath` function from the `@buger/probe` package. Executing this code will print the file system path where the Probe binary is located, which is useful for debugging binary download or execution issues.\nSOURCE: https://github.com/buger/probe/blob/main/mcp/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getBinaryPath } from '@buger/probe';\nconsole.log(getBinaryPath());\n```\n\n----------------------------------------\n\nTITLE: Extracting Login Function Signature in JavaScript (Example)\nDESCRIPTION: This snippet shows the result of an example 'extract' tool call within an agent interaction flow. It displays the function signature for `loginUser` found in a hypothetical JavaScript file (`src/auth/login.js`), demonstrating how the agent might retrieve code snippets.\nSOURCE: https://github.com/buger/probe/blob/main/site/blog/agentic-flow-custom-xml-protocol.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nfunction loginUser(email, password) { /* ... */ }\n```\n```\n\n----------------------------------------\n\nTITLE: Building Probe from Source using Cargo (Bash)\nDESCRIPTION: Compiles the Probe project from its source code using Cargo, the Rust build system and package manager. The `cargo build --release` command builds an optimized release version of the executable. This command must be run from within the root directory of the cloned Probe repository. Requires the Rust toolchain (Rust and Cargo) to be installed.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Running Probe AI Chat from Example Code\nDESCRIPTION: Steps to run the Probe AI chat from the example code in the repository, including installing dependencies and setting API keys.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\n# Navigate to the examples directory\ncd examples/chat\n\n# Install dependencies\nnpm install\n\n# Set your API key\nexport ANTHROPIC_API_KEY=your_api_key\n# Or for OpenAI\n# export OPENAI_API_KEY=your_api_key\n\n# Start the chat interface\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Tokenization and Stemming Examples for Query Preprocessing in Probe (Text)\nDESCRIPTION: Shows how Probe breaks search terms into tokens and reduces words to root forms before running the search. These preprocessing steps are not executable code, but rather algorithmic representations of how terms are normalized. Input is a string (e.g., identifier or synonym set); output is a list of tokens or a stemmed term.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-reference.md#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nfindUserByEmail → [find, user, by, email]\n```\n\nLANGUAGE: text\nCODE:\n```\nimplementing, implementation → implement\n```\n\n----------------------------------------\n\nTITLE: Building and installing Probe from source\nDESCRIPTION: Commands for building Probe in release mode and optionally installing it globally using Cargo. The installed binary will be placed in the Cargo bin directory.\nSOURCE: https://github.com/buger/probe/blob/main/site/installation.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Forcing Specific AI Provider in Probe AI Chat (Bash)\nDESCRIPTION: Illustrates how to force the Probe AI Chat to use a specific AI provider (Anthropic, OpenAI, or Google) using the `--force-provider` command-line option, overriding the default behavior which selects based on available API keys.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-chat.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Force using Anthropic Claude\nprobe-chat --force-provider anthropic\n\n# Force using OpenAI\nprobe-chat --force-provider openai\n\n# Force using Google Gemini\nprobe-chat --force-provider google\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server Integration for Probe\nDESCRIPTION: JSON configuration for integrating Probe with AI editors using MCP (Machine Comprehension Protocol) server.\nSOURCE: https://github.com/buger/probe/blob/main/site/quick-start.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Probe-Chat as Global npm Package\nDESCRIPTION: Shows how to install Probe-Chat globally using npm and start the web interface. This approach is an alternative to using npx for more permanent installations.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/deploying-probe-web-interface.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Install globally\nnpm install -g @buger/probe-chat@latest\n\n# Start the web interface\nprobe-chat --web --port 3000\n```\n\n----------------------------------------\n\nTITLE: JSON Format for Extract Command Results\nDESCRIPTION: The JSON output structure for the extract command, showing the fields included for each result such as file path, line numbers, node type, and extracted code content.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"file\": \"/path/to/file.rs\",       // File path\n      \"lines\": [10, 20],                // Start and end line numbers\n      \"node_type\": \"function\",          // Type: \"function\", \"struct\", \"file\", \"range\", \"context\"\n      \"code\": \"fn example() { ... }\"    // The extracted code content\n    },\n    // More results...\n  ],\n  \"summary\": {\n    \"count\": 1,\n    \"total_bytes\": 1024,\n    \"total_tokens\": 256\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Query Command with XML Output\nDESCRIPTION: An example of running the query command with XML output format, showing the command syntax and the resulting XML structure for querying Rust functions.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nprobe query \"fn $NAME($$$PARAMS) $$$BODY\" ./src --language rust --format xml\n```\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<probe_results>\n  <result>\n    <file>/path/to/functions.rs</file>\n    <lines>\n      <start>5</start>\n      <end>8</end>\n    </lines>\n    <node_type>function</node_type>\n    <column_start>0</column_start>\n    <column_end>35</column_end>\n    <code><![CDATA[fn add(a: i32, b: i32) -> i32 {\n    a + b\n}]]></code>\n  </result>\n  <summary>\n    <count>1</count>\n    <total_bytes>35</total_bytes>\n    <total_tokens>15</total_tokens>\n  </summary>\n</probe_results>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Result Limits for Probe MCP Server in JSON\nDESCRIPTION: Modifies the NPX-based MCP server configuration to set a default maximum token limit for search results. This is achieved by setting the `PROBE_MAX_TOKENS` environment variable (e.g., to `20000`) within the server's configuration.\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-server.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp@latest\"\n      ],\n      \"env\": {\n        \"PROBE_MAX_TOKENS\": \"20000\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Extracting Probe Archive (Linux/macOS) (Bash)\nDESCRIPTION: Command used in the manual installation process on Linux or macOS to extract the contents of the downloaded Probe archive file (which typically has a `.tar.gz` extension). It uses the `tar` utility with flags `-x` (extract), `-z` (decompress gzip), and `-f` (specify file).\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# For Linux/macOS\ntar -xzf probe-*-*.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Integrating LLM with Extract Function in JavaScript\nDESCRIPTION: Demonstrates how to use the extract function from @buger/probe for code extraction with different prompt templates. It shows examples of using engineer, architect, and custom prompts, along with specifying file paths and instructions.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extract } from '@buger/probe';\n\n// Extract code with engineer prompt template\nconst results = await extract({\n  files: ['/path/to/your/project/src/auth.js#authenticate'],\n  prompt: 'engineer',\n  instructions: 'Explain this authentication function',\n  format: 'json'\n});\n\n// Extract code with architect prompt template\nconst results = await extract({\n  files: ['/path/to/your/project/src/auth.js'],\n  prompt: 'architect',\n  instructions: 'Analyze this authentication module',\n  format: 'json'\n});\n\n// Extract code with custom prompt template\nconst results = await extract({\n  files: ['/path/to/your/project/src/api.js:42'],\n  prompt: '/path/to/custom/prompt.txt',\n  instructions: 'Refactor this code',\n  format: 'json'\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Probe Globally via npm (Bash)\nDESCRIPTION: Installs the Probe tool globally using the Node Package Manager (npm). Requires Node.js and npm to be installed. This makes the `probe` command available system-wide from the command line.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @buger/probe\n```\n\n----------------------------------------\n\nTITLE: Wildcard Searches with Probe CLI in Bash\nDESCRIPTION: Explains how to use wildcard syntax to match term prefixes and similar code elements during searches with Probe CLI. Wildcards (*) expand matches to any terms starting with the prefix. Input is a query with a trailing asterisk; output is all code matching the wildcarded prefix.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-reference.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"auth*\"  # Matches \"auth\", \"authentication\", \"authorize\", etc.\n```\n\n----------------------------------------\n\nTITLE: Starting Code Search Server in MCP Mode - Bash\nDESCRIPTION: Demonstrates the command to run Code Search as an MCP-compliant server. This starts a background server process that responds to search requests via the MCP protocol. Requires Code Search to be built and available in the user's PATH.\nSOURCE: https://github.com/buger/probe/blob/main/tests/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncode-search server\n```\n\n----------------------------------------\n\nTITLE: Verifying Probe Installation (Bash/PowerShell)\nDESCRIPTION: Command used to verify that the Probe tool has been installed correctly and is accessible from the command line interface (CLI). Running `probe --version` should output the installed version number. This command works in both Bash (Linux/macOS) and PowerShell (Windows).\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nprobe --version\n```\n\n----------------------------------------\n\nTITLE: Installing @buger/probe-mcp using npm or npx (Bash)\nDESCRIPTION: Provides Bash commands to either install the @buger/probe-mcp package globally using npm or execute it directly using npx. This package provides an MCP server for the Probe code search tool and depends on @buger/probe for binary management.\nSOURCE: https://github.com/buger/probe/blob/main/mcp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install globally\nnpm install -g @buger/probe-mcp\n\n# Or use directly with npx\nnpx @buger/probe-mcp\n```\n\n----------------------------------------\n\nTITLE: Example Extract Command with JSON Output\nDESCRIPTION: An example of running the extract command with JSON output format, showing the command syntax and the resulting JSON structure for extracting code from a specific line.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nprobe extract src/main.rs:42 --format json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"file\": \"src/main.rs\",\n      \"lines\": [40, 45],\n      \"node_type\": \"function\",\n      \"code\": \"fn process_data(data: &[u8]) -> Result<Vec<u8>, Error> {\\n    // Processing logic\\n    ...\\n}\"\n    }\n  ],\n  \"summary\": {\n    \"count\": 1,\n    \"total_bytes\": 85,\n    \"total_tokens\": 25\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Generic LLM API Endpoint - ENV\nDESCRIPTION: Sets the LLM_BASE_URL variable in the .env file to direct all model requests through a custom generic endpoint. This value is used unless overridden by a provider-specific API URL.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_13\n\nLANGUAGE: env\nCODE:\n```\nLLM_BASE_URL=https://your-custom-endpoint.com\n\n```\n\n----------------------------------------\n\nTITLE: Managing API Keys for Probe Chat\nDESCRIPTION: Shows how to configure API keys for either Anthropic Claude or OpenAI services. These environment variables provide the AI capabilities for the Probe web interface.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/deploying-probe-web-interface.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# For Anthropic Claude (recommended)\nexport ANTHROPIC_API_KEY=your_anthropic_api_key\n\n# OR for OpenAI\nexport OPENAI_API_KEY=your_openai_api_key\n```\n\n----------------------------------------\n\nTITLE: Installing Probe via npm\nDESCRIPTION: Command to install Probe globally using npm package manager.\nSOURCE: https://github.com/buger/probe/blob/main/site/quick-start.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @buger/probe@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Code Search Globally - Bash\nDESCRIPTION: Explains how to install the built Code Search application globally using Cargo. This makes the code-search binary available system-wide. Assumes you are inside the project root and have Rust toolchain permissions.\nSOURCE: https://github.com/buger/probe/blob/main/tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --path .\n```\n\n----------------------------------------\n\nTITLE: Setting up PM2 Process Management for Probe\nDESCRIPTION: Commands for using PM2 process manager to run Probe in production environments. Includes installing PM2, starting Probe with environment variables, and configuring it to start on system boot.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/deploying-probe-web-interface.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Install PM2\nnpm install -g pm2\n\n# Start the web interface with PM2\npm2 start \"npx -y @buger/probe-chat@latest --web\" --name \"probe-web\" --env \"ANTHROPIC_API_KEY=your_key\" \"ALLOWED_FOLDERS=/path/to/repos\"\n\n# Ensure it starts on system boot\npm2 startup\npm2 save\n```\n\n----------------------------------------\n\nTITLE: Installing Locally Built Probe Binary using Cargo (Bash)\nDESCRIPTION: Installs the Probe binary that was previously compiled from source (using `cargo build`) into the user's Cargo binary directory (typically `$HOME/.cargo/bin` on Linux/macOS or `%USERPROFILE%\\.cargo\\bin` on Windows). The `cargo install --path .` command makes the locally built `probe` executable accessible system-wide if the Cargo bin directory is in the system's PATH.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --path .\n```\n\n----------------------------------------\n\nTITLE: Query example for specific code structures using @buger/probe\nDESCRIPTION: An example demonstrating how to query for specific code structures in JavaScript and Rust using @buger/probe.\nSOURCE: https://github.com/buger/probe/blob/main/npm/README.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { query } from '@buger/probe';\n\nasync function queryExample() {\n  try {\n    // Find all JavaScript functions\n    const jsResults = await query({\n      path: '/path/to/your/project',\n      pattern: 'function $NAME($$$PARAMS) $$$BODY',\n      language: 'javascript',\n      maxResults: 5\n    });\n    \n    console.log('JavaScript functions:');\n    console.log(jsResults);\n    \n    // Find all Rust structs\n    const rustResults = await query({\n      path: '/path/to/your/project',\n      pattern: 'struct $NAME $$$BODY',\n      language: 'rust',\n      maxResults: 5\n    });\n    \n    console.log('Rust structs:');\n    console.log(rustResults);\n  } catch (error) {\n    console.error('Query error:', error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Probe (Nginx)\nDESCRIPTION: This snippet provides an example Nginx configuration for Probe deployment. It includes SSL setup, proxy settings, and rate limiting for improved security.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/team-chat.md#2025-04-23_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 443 ssl;\n    server_name code-chat.yourcompany.com;\n\n    ssl_certificate /path/to/cert.pem;\n    ssl_certificate_key /path/to/key.pem;\n\n    location / {\n        proxy_pass http://localhost:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        \n        # Rate limiting\n        limit_req zone=one burst=10 nodelay;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Probe MCP Server for Cline Editor in JSON\nDESCRIPTION: This JSON configuration snippet defines how the Cline AI code editor should launch the Probe MCP server. It specifies the command (`npx`) and arguments (`-y`, `@buger/probe-mcp`) needed to start the server, enabling Cline to leverage Probe's search capabilities via the Model Context Protocol.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/ai-code-editors.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"probe\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Probe Chat CLI Interface - Bash\nDESCRIPTION: Runs the Probe Chat tool via Node.js directly using the main index.js file in CLI mode. This launches an interactive chat interface in the terminal. Requires prior dependency installation and proper environment configuration.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js\n\n```\n\n----------------------------------------\n\nTITLE: Using the search_code Tool in Probe MCP via JSON\nDESCRIPTION: This JSON object provides an example payload for the `search_code` tool provided by the Probe MCP server. It specifies the target project path (`/path/to/your/project`), the search query (\"authentication flow\"), and sets a maximum token limit (`maxTokens`) of 20000 for the returned code content, useful for controlling AI context window usage.\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"/path/to/your/project\",\n  \"query\": \"authentication flow\",\n  \"maxTokens\": 20000\n}\n```\n\n----------------------------------------\n\nTITLE: LangChain Integration with Buger Probe\nDESCRIPTION: Shows how to integrate Buger Probe tools with LangChain framework. Creates search, query, and extract tools for use with ChatOpenAI model.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ChatOpenAI } from '@langchain/openai';\nimport { tools } from '@buger/probe';\n\n// Create the LangChain tools\nconst searchTool = tools.createSearchTool();\nconst queryTool = tools.createQueryTool();\nconst extractTool = tools.createExtractTool();\n\n// Create a ChatOpenAI instance with tools\nconst model = new ChatOpenAI({\n  modelName: \"gpt-4o\",\n  temperature: 0.7\n}).withTools([searchTool, queryTool, extractTool]);\n\n// Use the model with tools\nasync function chatWithAI(userMessage) {\n  const result = await model.invoke([\n    { role: \"system\", content: \"You are a code intelligence assistant. Use the provided tools to search and analyze code.\" },\n    { role: \"user\", content: userMessage }\n  ]);\n  \n  return result.content;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Search Command with XML Output\nDESCRIPTION: An example of running the search command with XML output format, showing the command syntax and the resulting XML structure for searching the term 'authentication'.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"authentication\" --format xml\n```\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<probe_results>\n  <result>\n    <file>/path/to/auth.rs</file>\n    <lines>\n      <start>15</start>\n      <end>30</end>\n    </lines>\n    <node_type>function</node_type>\n    <code><![CDATA[fn authenticate_user(username: &str, password: &str) -> Result<User, AuthError> {\n    // Authentication logic\n    ...\n}]]></code>\n    <matched_keywords>\n      <keyword>authenticate</keyword>\n      <keyword>user</keyword>\n    </matched_keywords>\n    <rank>1</rank>\n    <score>0.98</score>\n  </result>\n  <summary>\n    <count>1</count>\n    <total_bytes>120</total_bytes>\n    <total_tokens>30</total_tokens>\n  </summary>\n</probe_results>\n```\n\n----------------------------------------\n\nTITLE: Installing Probe using PowerShell for Windows\nDESCRIPTION: Downloads and executes an installation script for Probe on Windows systems. The script detects architecture, downloads the appropriate binary, verifies its checksum, and installs it to the user directory.\nSOURCE: https://github.com/buger/probe/blob/main/site/installation.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\niwr -useb https://raw.githubusercontent.com/buger/probe/main/install.ps1 | iex\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Probe from different installation methods\nDESCRIPTION: Commands for uninstalling Probe from systems where it was installed via npm or the curl script. For npm, the uninstallation uses the package manager; for manual installations, it removes the binary file.\nSOURCE: https://github.com/buger/probe/blob/main/site/installation.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# If installed via npm\nnpm uninstall -g @buger/probe@latest\n\n# If installed via curl script or manually on macOS/Linux\nsudo rm /usr/local/bin/probe\n```\n\n----------------------------------------\n\nTITLE: Installing @buger/probe using npm in Bash\nDESCRIPTION: These Bash commands show how to install the `@buger/probe` package using the Node Package Manager (npm). The first command installs it as a local dependency for the current project, while the second command uses the `-g` flag to install it globally, making the `probe` CLI tool available system-wide.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/nodejs-sdk.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Local installation\nnpm install @buger/probe@latest\n\n# Global installation\nnpm install -g @buger/probe@latest\n```\n\n----------------------------------------\n\nTITLE: Cloning and building Probe from source\nDESCRIPTION: Commands for cloning the Probe repository from GitHub and building the project from source using Cargo, the Rust package manager and build system.\nSOURCE: https://github.com/buger/probe/blob/main/site/installation.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/buger/probe.git\ncd probe\n```\n\n----------------------------------------\n\nTITLE: Command Line Usage Example\nDESCRIPTION: Shows how to use the probe extract command with XML output format from the command line.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nprobe extract src/main.rs:42 --format xml\n\n# With --keep-input flag to preserve original input\nprobe extract src/main.rs:42 --format xml --keep-input\n```\n\n----------------------------------------\n\nTITLE: Installing Probe via NPM\nDESCRIPTION: Command for global installation of Probe through NPM package manager\nSOURCE: https://github.com/buger/probe/blob/main/site/features.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @buger/probe@latest\n```\n\n----------------------------------------\n\nTITLE: XML Output with Keep-Input Flag\nDESCRIPTION: Demonstrates XML output when using the --keep-input flag, which includes the original input text in the results.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<probe_results>\n  <original_input><![CDATA[src/main.rs:42: error: invalid syntax]]></original_input>\n  <result>\n    <file>src/main.rs</file>\n    <lines>\n      <start>40</start>\n      <end>45</end>\n    </lines>\n    <node_type>function</node_type>\n    <code><![CDATA[fn process_data(data: &[u8]) -> Result<Vec<u8>, Error> {\n    // Processing logic\n    ...\n}]]></code>\n  </result>\n  <summary>\n    <count>1</count>\n    <total_bytes>85</total_bytes>\n    <total_tokens>25</total_tokens>\n  </summary>\n</probe_results>\n```\n\n----------------------------------------\n\nTITLE: Verifying Probe Installation (PowerShell)\nDESCRIPTION: Command specifically for verifying the Probe installation on Windows using PowerShell by checking its version. If the installation directory is not in the PATH, this command might fail unless run from the installation directory.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_24\n\nLANGUAGE: powershell\nCODE:\n```\nprobe --version\n```\n\n----------------------------------------\n\nTITLE: Installing Probe globally from source\nDESCRIPTION: Command for installing the locally built Probe binary globally using Cargo. This places the binary in the Cargo bin directory which is typically in the user's PATH.\nSOURCE: https://github.com/buger/probe/blob/main/site/installation.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --path .\n```\n\n----------------------------------------\n\nTITLE: Example Search Command with JSON Output\nDESCRIPTION: An example of running the search command with JSON output format, showing the command syntax and the resulting JSON structure for searching the term 'authentication'.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"authentication\" --format json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"file\": \"/path/to/auth.rs\",\n      \"lines\": [15, 30],\n      \"node_type\": \"function\",\n      \"code\": \"fn authenticate_user(username: &str, password: &str) -> Result<User, AuthError> {\\n    // Authentication logic\\n    ...\\n}\",\n      \"matched_keywords\": [\"authenticate\", \"user\"],\n      \"rank\": 1,\n      \"score\": 0.98\n    }\n  ],\n  \"summary\": {\n    \"count\": 1,\n    \"total_bytes\": 120,\n    \"total_tokens\": 30\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example for CLI Searches - Bash\nDESCRIPTION: Shows multiple example commands demonstrating core usages of Code Search in CLI mode. Each invocation specifies a search path and pattern, with some filtering for demonstration. The placeholders <DIRECTORY_PATH> and <SEARCH_PATTERN> are to be substituted by the user as required.\nSOURCE: https://github.com/buger/probe/blob/main/tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncode-search --path <DIRECTORY_PATH> --query <SEARCH_PATTERN>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncode-search --path . --query setTools\n```\n\nLANGUAGE: bash\nCODE:\n```\ncode-search --path ./src --query impl\n```\n\n----------------------------------------\n\nTITLE: Python JSON Output Parser\nDESCRIPTION: Example Python script for parsing JSON output from the probe search command, including handling of the --keep-input flag results.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport subprocess\n\n# Run probe search and capture output\noutput = subprocess.check_output([\"probe\", \"search\", \"authentication\", \"--format\", \"json\"])\nresults = json.loads(output)\n\n# Process the results\n# Check if original input is present (when using --keep-input)\nif \"original_input\" in results:\n    print(f\"Original Input:\\n{results['original_input']}\")\n    print(\"---\")\n\nfor result in results[\"results\"]:\n    print(f\"File: {result['file']}\")\n    print(f\"Lines: {result['lines'][0]}-{result['lines'][1]}\")\n    print(f\"Code:\\n{result['code']}\")\n    print(\"---\")\n\n# Get summary information\nprint(f\"Found {results['summary']['count']} results\")\nprint(f\"Total bytes: {results['summary']['total_bytes']}\")\nprint(f\"Total tokens: {results['summary']['total_tokens']}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Probe via PowerShell (Windows)\nDESCRIPTION: Command to install Probe using PowerShell for Windows systems.\nSOURCE: https://github.com/buger/probe/blob/main/site/quick-start.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\niwr -useb https://raw.githubusercontent.com/buger/probe/main/install.ps1 | iex\n```\n\n----------------------------------------\n\nTITLE: Linking to Major Sections in Markdown Documentation - Markdown\nDESCRIPTION: Demonstrates how to insert a markdown link that navigates to another major documentation section for improved user navigation. No external dependencies are required. The link text corresponds to the section being referenced, and the relative path specifies the documentation location. Input is plain markdown, and output is a rendered link in documentation.\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-cross-references.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFor more information on installation, see the [Core Concepts & Setup](/installation) section.\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Thinking Feature in ProbeChat (Claude 3.7) - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates enabling the experimental thinking option when creating a ProbeChat instance with Claude 3.7 models. The 'experimentalThinking' option enhances AI reasoning using a token budget. Required: Claude 3.7-compatible model, API key, @buger/probe-chat package. Inputs: user queries; Outputs: detailed AI-generated responses. This option is experimental and may not be available for all models.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst chat = new ProbeChat({\n  model: 'claude-3-7-sonnet-latest',\n  anthropicApiKey: process.env.ANTHROPIC_API_KEY,\n  allowedFolders: ['/path/to/your/project'],\n  experimentalThinking: {\n    enabled: true,\n    budget: 8000\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Probe Node.js SDK Globally using Bash\nDESCRIPTION: This Bash command installs the '@buger/probe' Node.js SDK globally using npm. Global installation might be useful if the SDK provides command-line tools or if you intend to use it across multiple projects without installing it in each.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @buger/probe@latest\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Probe on Windows systems\nDESCRIPTION: PowerShell commands for completely uninstalling Probe on Windows. Includes removing the binary file and optionally cleaning up PATH environment variables for both user and system installations.\nSOURCE: https://github.com/buger/probe/blob/main/site/installation.md#2025-04-23_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\n# If installed via PowerShell script to default user location\nRemove-Item -Path \"$env:LOCALAPPDATA\\Probe\\probe.exe\" -Force\n\n# If installed via PowerShell script to system location\nRemove-Item -Path \"$env:ProgramFiles\\Probe\\probe.exe\" -Force\n\n# If you added the installation directory to PATH, you may want to remove it\n# For user PATH:\n$userPath = [Environment]::GetEnvironmentVariable('PATH', 'User')\n$userPath = ($userPath -split ';' | Where-Object { $_ -ne \"$env:LOCALAPPDATA\\Probe\" }) -join ';'\n[Environment]::SetEnvironmentVariable('PATH', $userPath, 'User')\n\n# For system PATH (requires admin privileges):\n$systemPath = [Environment]::GetEnvironmentVariable('PATH', 'Machine')\n$systemPath = ($systemPath -split ';' | Where-Object { $_ -ne \"$env:ProgramFiles\\Probe\" }) -join ';'\n[Environment]::SetEnvironmentVariable('PATH', $systemPath, 'Machine')\n```\n\n----------------------------------------\n\nTITLE: Configuring model selection for Probe Chat\nDESCRIPTION: This snippet shows how to override the default AI model used by Probe Chat by setting an environment variable before running the chat interface.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/cli-ai-workflows.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Override the default model\nexport MODEL_NAME=claude-3-opus-20240229\nprobe-chat\n```\n\n----------------------------------------\n\nTITLE: Running ProbeChat with a Custom Prompt File - Node.js CLI - Bash\nDESCRIPTION: This snippet demonstrates how to run the ProbeChat assistant from the command line using Node.js, specifying a file containing a custom system prompt via the --prompt flag. The file at the provided path will be used in place of the default system prompt. Prerequisites: Ensure Node.js is installed and index.js is present in the working directory. The --prompt flag must point to a valid file containing a properly formatted prompt.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js --prompt /path/to/your/prompt.txt\n```\n\n----------------------------------------\n\nTITLE: Basic Code Search with Probe\nDESCRIPTION: Example of a basic code search using Probe to find the phrase \"llm pricing\" in the current directory.\nSOURCE: https://github.com/buger/probe/blob/main/site/quick-start.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"llm pricing\" ./\n```\n\n----------------------------------------\n\nTITLE: Wildcards in Probe Search\nDESCRIPTION: Example of using wildcards in search terms to match variations of a word or pattern.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-functionality.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nprobe search \"auth*\"  # Matches \"auth\", \"authentication\", \"authorize\", etc.\n```\n\n----------------------------------------\n\nTITLE: Installing @buger/probe-chat locally\nDESCRIPTION: Command for installing the @buger/probe-chat package locally in your project using npm.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/npm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @buger/probe-chat\n```\n\n----------------------------------------\n\nTITLE: Customizing the Code Review Prompt Type - Bash\nDESCRIPTION: Runs Probe Chat with the 'code-review' prompt by supplying '--prompt code-review'. The assistant will direct its responses to code quality, adherence to best practices, and actionable improvements.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js --prompt code-review\n\n```\n\n----------------------------------------\n\nTITLE: Customizing the Architect Prompt Type - Bash\nDESCRIPTION: Starts Probe Chat with the 'architect' prompt specialization, using '--prompt architect'. This configures the assistant to focus on architectural analysis, design patterns, and high-level recommendations.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js --prompt architect\n\n```\n\n----------------------------------------\n\nTITLE: Setting Allowed Folders for Security\nDESCRIPTION: Example of setting the ALLOWED_FOLDERS environment variable to restrict code search to specific repositories.\nSOURCE: https://github.com/buger/probe/blob/main/mcp-agent/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Restrict searches to only these two repositories\nALLOWED_FOLDERS=/home/user/projects/repo1,/home/user/projects/repo2\n```\n\n----------------------------------------\n\nTITLE: Installing Rust using rustup (Linux/macOS) (Bash)\nDESCRIPTION: Installs the Rust programming language toolchain (including the compiler `rustc` and package manager `cargo`) on Linux or macOS systems. It uses `curl` to download the official `rustup` installation script and pipes it to `sh` for execution. This is a prerequisite step for building the Probe project from source.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: Installing @buger/probe globally using npm\nDESCRIPTION: Command to install the @buger/probe package globally using npm, making it available as a command-line tool.\nSOURCE: https://github.com/buger/probe/blob/main/npm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @buger/probe\n```\n\n----------------------------------------\n\nTITLE: Customizing the Support Prompt Type - Bash\nDESCRIPTION: Executes Probe Chat with the 'support' prompt for troubleshooting and problem-solving, activated by '--prompt support'. This tailors the assistant to assist with diagnosing errors and finding solutions.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js --prompt support\n\n```\n\n----------------------------------------\n\nTITLE: Using the query_code Tool via MCP in JSON\nDESCRIPTION: Demonstrates the payload for the `query_code` tool, used for finding specific code structures. It requires a project path (`/path/to/your/project`), a tree-sitter pattern (`fn $NAME($$$PARAMS) $$$BODY`) to match structures like Rust functions, and the target programming language (`rust`).\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-server.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"/path/to/your/project\",\n  \"pattern\": \"fn $NAME($$$PARAMS) $$$BODY\",\n  \"language\": \"rust\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript/TypeScript Pattern Matching Templates in Probe\nDESCRIPTION: Provides pattern templates for matching JavaScript and TypeScript standard functions, arrow functions, and class definitions using the Probe tool. Placeholders like `$NAME`, `$$$PARAMS`, `$$$BODY`, and `$$$METHODS` represent variable parts of the code structure.\nSOURCE: https://github.com/buger/probe/blob/main/site/supported-languages.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nfunction $NAME($$$PARAMS) { $$$BODY }\nconst $NAME = ($$$PARAMS) => $$$BODY\nclass $NAME { $$$METHODS }\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting @buger/probe: Fixing Permission Denied Error using Bash\nDESCRIPTION: This snippet provides a Bash command to resolve 'Permission denied' errors encountered when trying to run the Probe binary downloaded by the @buger/probe package. The `chmod +x` command makes the specified binary file executable by the user.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Make the binary executable\nchmod +x /path/to/probe/binary\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Probe Web Interface\nDESCRIPTION: Shows the URL format for accessing the deployed web interface and how to customize the port settings. Includes the command for running Probe on a custom port.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/deploying-probe-web-interface.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx -y @buger/probe-chat@latest --web --port 3000\n```\n\n----------------------------------------\n\nTITLE: Running Different Types of Tests\nDESCRIPTION: Commands for running specific types of tests in the Probe project.\nSOURCE: https://github.com/buger/probe/blob/main/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake test-unit          # Unit tests\nmake test-integration   # Integration tests\nmake test-property      # Property-based tests\nmake test-cli           # CLI tests\n```\n\n----------------------------------------\n\nTITLE: Configuring Probe MCP Server via NPX in JSON\nDESCRIPTION: This JSON configuration block demonstrates how to set up the Probe MCP server within an AI editor's configuration file using NPX. It defines an MCP server named 'probe' that executes the latest version of the '@buger/probe-mcp' package using 'npx'. This is the recommended method for easy setup.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"probe\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp@latest\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub\nDESCRIPTION: Command for pushing your local branch to your fork on GitHub.\nSOURCE: https://github.com/buger/probe/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Updating Language Module Exports in Rust\nDESCRIPTION: Module declaration update to include the new language implementation.\nSOURCE: https://github.com/buger/probe/blob/main/site/adding-languages.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// Existing modules...\npub mod rust;\npub mod javascript;\n// Add your new language\npub mod mylanguage;\n```\n\n----------------------------------------\n\nTITLE: Installing @buger/probe-chat globally\nDESCRIPTION: Command for installing the @buger/probe-chat package globally using npm. This is the recommended installation method.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/npm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @buger/probe-chat\n```\n\n----------------------------------------\n\nTITLE: Example Structure of a Custom Prompt File - Prompt Format - Plain Text\nDESCRIPTION: This snippet shows how to structure a custom prompt file for ProbeChat, outlining instruction formatting, system message content, and step-by-step process guidance. The file should provide clear instructions tailored to your use case and include details for agent behavior, tool usage, XML formatting, and final result completion. There are no software dependencies, but the file must be accessible by the CLI command and adhere to ProbeChat's required prompt conventions.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\nYou are ProbeChat Custom, a specialized AI assistant for [your specific use case].\nYou focus on [specific area of expertise] and excel at [key strengths].\n\nFollow these instructions carefully:\n1.  Analyze the user's request with a focus on [your specific focus area].\n2.  Use <thinking></thinking> tags to analyze the situation and determine the appropriate tool for each step.\n3.  Use the available tools step-by-step to fulfill the request.\n4.  Ensure to get really deep and understand the full picture before answering.\n5.  You MUST respond with exactly ONE tool call per message, using the specified XML format, until the task is complete.\n6.  Wait for the tool execution result (provided in the next user message in a <tool_result> block) before proceeding to the next step.\n7.  Once the task is fully completed, and you have confirmed the success of all steps, use the '<attempt_completion>' tool to provide the final result.\n8.  Prefer concise and focused search queries. Use specific keywords and phrases to narrow down results.\n9.  [Add any additional specialized instructions here]\n```\n\n----------------------------------------\n\nTITLE: Manually Extracting Probe Archive (Windows) (PowerShell)\nDESCRIPTION: PowerShell command used in the manual installation process on Windows to extract the contents of the downloaded Probe archive file (which typically has a `.zip` extension). It uses the `Expand-Archive` cmdlet, specifying the source archive path (`-Path`) and the destination directory (`-DestinationPath`).\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\n# For Windows (using PowerShell)\nExpand-Archive -Path probe-*-windows.zip -DestinationPath .\\probe\n```\n\n----------------------------------------\n\nTITLE: Defining Go Pattern Matching Templates in Probe\nDESCRIPTION: Provides pattern templates for matching Go functions, struct type definitions, and methods associated with types using the Probe tool. Placeholders like `$NAME`, `$$$PARAMS`, `$$$BODY`, `$$$FIELDS`, `$RECEIVER`, and `$TYPE` represent variable parts of the code structure.\nSOURCE: https://github.com/buger/probe/blob/main/site/supported-languages.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nfunc $NAME($$$PARAMS) $$$BODY\ntype $NAME struct { $$$FIELDS }\nfunc ($RECEIVER $TYPE) $NAME($$$PARAMS) $$$BODY\n```\n\n----------------------------------------\n\nTITLE: Verifying Probe installation with full path on Windows\nDESCRIPTION: PowerShell commands for verifying Probe installation using the full path to the executable when the installation directory may not be in the PATH environment variable.\nSOURCE: https://github.com/buger/probe/blob/main/site/installation.md#2025-04-23_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\n# If installed to the default user location\n& \"$env:LOCALAPPDATA\\Probe\\probe.exe\" --version\n\n# If installed to the default system location\n& \"$env:ProgramFiles\\Probe\\probe.exe\" --version\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Code Search Project - Bash\nDESCRIPTION: Provides the commands to clone the Code Search repository from GitHub, change into the project directory, and build the release binary using Cargo. Required for both running the CLI and server mode. Expects git, Rust, and Cargo to be installed and available in the PATH.\nSOURCE: https://github.com/buger/probe/blob/main/tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/yourusername/code-search.git\ncd code-search\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Finding Specific Links Using grep in Bash\nDESCRIPTION: This Bash command uses `grep` to recursively search (-r) for all occurrences of Markdown links pointing to a specific path ('/old-page-path') within the 'site/' directory. This is useful for finding and updating links when a page is moved or renamed.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-cross-references.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Find all links to a specific page\ngrep -r \"\\[.*\\](\\/old-page-path)\" site/\n```\n\n----------------------------------------\n\nTITLE: Installing Probe Node.js SDK Globally\nDESCRIPTION: Command to install the Probe Node.js SDK globally using npm. This makes the 'probe' command available system-wide.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @buger/probe@latest\n```\n\n----------------------------------------\n\nTITLE: XML Format for Query Command Results\nDESCRIPTION: The XML output structure for the query command, showing the elements included for each result such as file path, line numbers, node type, code content, and column positions for AST-based queries.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<probe_results>\n  <result>\n    <file>/path/to/file.rs</file>\n    <lines>\n      <start>10</start>\n      <end>20</end>\n    </lines>\n    <node_type>function</node_type>\n    <column_start>0</column_start>\n    <column_end>20</column_end>\n    <code><![CDATA[fn example() { ... }]]></code>\n  </result>\n  <!-- More results... -->\n  <summary>\n    <count>5</count>\n    <total_bytes>1024</total_bytes>\n    <total_tokens>256</total_tokens>\n  </summary>\n</probe_results>\n```\n\n----------------------------------------\n\nTITLE: Installing Probe via curl (macOS/Linux) (Bash)\nDESCRIPTION: Installs Probe on macOS or Linux systems using a single `curl` command. This command downloads an installation script from the official GitHub repository and executes it using `bash`. The script automatically detects the operating system and architecture, downloads the appropriate pre-compiled binary, verifies its checksum for security, and installs it to `/usr/local/bin`. Requires `curl`, `bash`, and may require `sudo` privileges for the final installation step.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://raw.githubusercontent.com/buger/probe/main/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Cloning the Probe Repository (Bash)\nDESCRIPTION: Sequence of commands to download the Probe source code from its GitHub repository using `git clone` and then navigate into the newly created project directory (`code-search`) using `cd`. This is the first step required when building the project from source.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/buger/probe.git\ncd code-search\n```\n\n----------------------------------------\n\nTITLE: Installing Probe via PowerShell (Windows) (PowerShell)\nDESCRIPTION: Installs Probe on Windows systems using a PowerShell command. It utilizes `Invoke-WebRequest` (`iwr`) with the `-useb` (UseBasicParsing) flag to download an installation script (`install.ps1`) from GitHub and pipes it to `Invoke-Expression` (`iex`) for execution. The script detects system architecture, downloads the correct Windows binary, verifies its checksum, installs it (defaulting to `%LOCALAPPDATA%\\Probe`), and provides guidance on adding the location to the system's PATH environment variable. Requires PowerShell 5.1 or later.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\niwr -useb https://raw.githubusercontent.com/buger/probe/main/install.ps1 | iex\n```\n\n----------------------------------------\n\nTITLE: Verifying Probe Installation Using Full Path (Windows) (PowerShell)\nDESCRIPTION: Demonstrates how to verify the Probe installation on Windows using PowerShell by executing the `probe.exe` file via its full path. This is necessary if the installation directory (e.g., default user location `%LOCALAPPDATA%\\Probe` or default system location `%ProgramFiles%\\Probe`) has not been added to the system's PATH environment variable. The ampersand (`&`) is used in PowerShell to invoke the command specified by the quoted path.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_25\n\nLANGUAGE: powershell\nCODE:\n```\n# If installed to the default user location\n& \"$env:LOCALAPPDATA\\Probe\\probe.exe\" --version\n\n# If installed to the default system location\n& \"$env:ProgramFiles\\Probe\\probe.exe\" --version\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Default Search Paths for Probe MCP Server in JSON\nDESCRIPTION: Extends the NPX-based MCP server configuration to define default search directories using the `PROBE_DEFAULT_PATHS` environment variable. Multiple paths can be provided, separated by commas. This allows the MCP server to target specific project locations by default.\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-server.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp@latest\"\n      ],\n      \"env\": {\n        \"PROBE_DEFAULT_PATHS\": \"/path/to/project1,/path/to/project2\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Releases\nDESCRIPTION: Command for building release packages for all supported platforms.\nSOURCE: https://github.com/buger/probe/blob/main/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nVERSION=vX.Y.Z make release\n```\n\n----------------------------------------\n\nTITLE: Building Documentation Site for Production\nDESCRIPTION: Command for building the documentation site for production deployment using npm.\nSOURCE: https://github.com/buger/probe/blob/main/site/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Stemming Example in Probe Search\nDESCRIPTION: Shows how Probe reduces words to their root form through stemming, allowing matches across different word variants.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-functionality.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nimplementing, implementation → implement\n```\n\n----------------------------------------\n\nTITLE: Installing and running Probe Chat globally\nDESCRIPTION: This code snippet demonstrates how to install Probe Chat globally using npm and then start the chat interface. This method is recommended for regular use.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/cli-ai-workflows.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install globally\nnpm install -g @buger/probe-chat@latest\n\n# Start the chat interface\nprobe-chat\n```\n\n----------------------------------------\n\nTITLE: Cloning the Probe Repository\nDESCRIPTION: Commands for forking and cloning the Probe repository to begin development.\nSOURCE: https://github.com/buger/probe/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR-USERNAME/probe.git\ncd probe\n```\n\n----------------------------------------\n\nTITLE: Memory Efficient Batched Probe Searches with Manual GC in JavaScript\nDESCRIPTION: Executes searches on individual subdirectories in small batches to reduce memory usage, explicitly invoking garbage collection if enabled via the Node.js --expose-gc flag. Useful when searching very large, multi-part repositories on memory-constrained systems. Requires '@buger/probe', accepts a search query and root path, splits the workload into 'src', 'lib', and 'packages' subfolders and collects results into an array; includes a comment for configuring Node.js for manual GC support.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/building-ai-tools.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@buger/probe';\n\n// Search with memory constraints\nasync function memoryEfficientSearch(query, path) {\n  // Split the search into smaller batches\n  const directories = [\n    `${path}/src`,\n    `${path}/lib`,\n    `${path}/packages`\n  ];\n  \n  const results = [];\n  \n  // Process each directory separately\n  for (const dir of directories) {\n    const dirResults = await search({\n      path: dir,\n      query,\n      maxResults: 5\n    });\n    \n    results.push(dirResults);\n    \n    // Optional: Force garbage collection if available\n    if (global.gc) {\n      global.gc();\n    }\n  }\n  \n  return results;\n}\n\n// Run with --expose-gc flag to enable manual garbage collection\n// node --expose-gc your-script.js\n\n```\n\n----------------------------------------\n\nTITLE: Enterprise Deployment Configuration (Bash)\nDESCRIPTION: This snippet shows a complete example of enterprise deployment configuration for Probe. It includes settings for API access, repository access, security, performance, and debugging.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/team-chat.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# API access\nexport ANTHROPIC_API_KEY=your_api_key\n\n# Repository access\nexport ALLOWED_FOLDERS=/app/repos/frontend,/app/repos/backend,/app/repos/mobile\n\n# Security\nexport AUTH_ENABLED=true\nexport AUTH_USERNAME=company_username\nexport AUTH_PASSWORD=strong_company_password\n\n# Performance\nexport MODEL_NAME=claude-3-opus-20240229\nexport PORT=8080\n\n# Debugging\nexport DEBUG=false\n```\n\n----------------------------------------\n\nTITLE: Creating Use Case Back-References to Core Concepts - Markdown\nDESCRIPTION: Shows markdown usage for enabling use case documentation to reference back to core concept explanations. This reinforces the bidirectional nature of documentation and provides users with background information. The anchor in the link targets a conceptual overview.\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-cross-references.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n# Using with AI Code Editors\n\n[...content...]\n\nThis integration relies on Probe's [language parsing capabilities](/language-support-overview) to provide accurate code context.\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function Example for AST Representation\nDESCRIPTION: A simple JavaScript function example used to demonstrate how the code would be parsed into an Abstract Syntax Tree (AST) structure. This example shows a basic 'add' function with two parameters.\nSOURCE: https://github.com/buger/probe/blob/main/site/language-support-overview.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add(a, b) {\n    return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Extraction Process Flow with AST Parsing - Bash\nDESCRIPTION: Illustrates the step-wise extraction workflow using AST parsing via tree-sitter, from file content through code block extraction. This code block visually summarizes the parsing and extraction process in Probe. Dependencies: tree-sitter for AST generation. Inputs: code file; Outputs: extracted, complete code unit. Limitation: Diagrammatic, not executable.\nSOURCE: https://github.com/buger/probe/blob/main/site/code-extraction.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nFile Content → Tree-sitter Parser → AST Generation → Node Location → Parent Node Identification → Code Block Extraction\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom Probe Binary Path for MCP Server in JSON\nDESCRIPTION: This JSON configuration snippet allows specifying the path to a custom-built Probe binary using the `PROBE_PATH` environment variable (`/path/to/custom/probe`). This overrides the default behavior where the MCP server automatically downloads and manages the Probe binary.\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-integration.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"probe\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp@latest\"\n      ],\n      \"env\": {\n        \"PROBE_PATH\": \"/path/to/custom/probe\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Language Module Structure in Rust\nDESCRIPTION: Initial setup of a new language module file with basic structure and default implementations.\nSOURCE: https://github.com/buger/probe/blob/main/site/adding-languages.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// src/language/mylanguage.rs\nuse crate::language::language_trait::LanguageImpl;\nuse tree_sitter::{Language as TSLanguage, Node};\n\npub struct MyLanguage;\n\nimpl Default for MyLanguage {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\nimpl MyLanguage {\n    pub fn new() -> Self {\n        MyLanguage\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Reference Documentation in Markdown\nDESCRIPTION: This snippet demonstrates creating a Markdown link to a specific part of the reference documentation, in this case, the 'search-command' section within the 'CLI Reference' page.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-cross-references.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nSee the [CLI Reference](/cli-mode#search-command) for a complete list of search options.\n```\n\n----------------------------------------\n\nTITLE: Extending get_language for New Tree-sitter Language - Rust\nDESCRIPTION: Provides code to update the get_language function in src/language.rs to associate file extensions with tree-sitter parsers. Accepts the extension string and returns the matching Language object. Extend the match arms for additional supported languages by pattern.\nSOURCE: https://github.com/buger/probe/blob/main/tests/README.md#2025-04-23_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\npub fn get_language(extension: &str) -> Option<Language> {\n    match extension {\n        // ... existing languages\n        \"nl\" => Some(tree_sitter_newlang::language()),\n        _ => None,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider-specific API Endpoints - ENV\nDESCRIPTION: Overrides the generic LLM_BASE_URL by specifying custom API URLs for each AI provider in the .env file. These targeted variables ensure traffic is routed to the designated backend for Anthropic, OpenAI, or Google only.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_14\n\nLANGUAGE: env\nCODE:\n```\nANTHROPIC_API_URL=https://your-anthropic-endpoint.com\nOPENAI_API_URL=https://your-openai-endpoint.com\nGOOGLE_API_URL=https://your-google-endpoint.com\n\n```\n\n----------------------------------------\n\nTITLE: Installing Probe MCP Agent from Source\nDESCRIPTION: Steps to clone the repository, navigate to the project directory, install dependencies and build the package from source.\nSOURCE: https://github.com/buger/probe/blob/main/mcp-agent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Clone the repository\ngit clone https://github.com/buger/probe.git\n\n# Navigate to the directory\ncd probe/mcp-agent\n\n# Install dependencies\nnpm install\n\n# Build the package\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating MCP Configuration for Cline in Bash\nDESCRIPTION: Bash commands to create a .cline directory and an MCP configuration file in the project root. This sets up the necessary structure for Cline to use Probe.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/integrating-probe-into-ai-code-editors.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p .cline\n\n# Create the configuration file\ntouch .cline/mcp_config.json\n```\n\n----------------------------------------\n\nTITLE: Setting Default Prompt Type via Environment Variable - Bash\nDESCRIPTION: This code sets the PROMPT_TYPE environment variable, determining which default system prompt configuration ProbeChat should use without requiring a custom prompt file. Dependencies: This must be set in the shell environment before running the ProbeChat server, and the value should match a supported prompt type (e.g., 'architect'). The environment variable can be overridden by command-line arguments if specified.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nPROMPT_TYPE=architect\n```\n\n----------------------------------------\n\nTITLE: Installing Rust using rustup (Windows) (PowerShell)\nDESCRIPTION: Installs the Rust programming language toolchain on Windows systems. It uses PowerShell's `Invoke-WebRequest` to download the `rustup-init.exe` installer and then executes it. The installer guides the user through the setup process. This is a prerequisite for building the Probe project from source on Windows.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_19\n\nLANGUAGE: powershell\nCODE:\n```\n# Download and run the Rust installer\nInvoke-WebRequest -Uri https://win.rustup.rs/x86_64 -OutFile rustup-init.exe\n.\\rustup-init.exe\n# Follow the on-screen instructions\n```\n\n----------------------------------------\n\nTITLE: Linking Use Cases to Reference Documentation - Markdown\nDESCRIPTION: Shows how to link from real-world use case documentation to reference sections, helping users find specific technical documentation. The snippet includes a content section followed by a markdown link to the CLI Reference for command details.\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-cross-references.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n# Using in the CLI for Advanced AI\n\n[...content...]\n\nFor a complete list of CLI options, see the [CLI Reference](/cli-mode).\n```\n\n----------------------------------------\n\nTITLE: Implementing LanguageImpl Trait in Rust\nDESCRIPTION: Complete implementation of the LanguageImpl trait for the new language, including parsing and test detection logic.\nSOURCE: https://github.com/buger/probe/blob/main/site/adding-languages.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nimpl LanguageImpl for MyLanguage {\n    fn get_tree_sitter_language(&self) -> TSLanguage {\n        // Return the tree-sitter language for your language\n        tree_sitter_mylanguage::language()\n    }\n\n    fn is_acceptable_parent(&self, node: &Node) -> bool {\n        // Determine if a node is an acceptable container/parent entity\n        match node.kind() {\n            \"function_definition\" | \"class_definition\" | \"method_definition\" => true,\n            // Add other relevant node types for your language\n            _ => false,\n        }\n    }\n\n    fn is_test_node(&self, node: &Node, source: &[u8]) -> bool {\n        // Determine if a node represents test code\n        let node_type = node.kind();\n        \n        if node_type == \"function_definition\" {\n            // Example: Check if function name contains \"test\"\n            let name_node = node.child_by_field_name(\"name\");\n            if let Some(name) = name_node {\n                if let Ok(name_text) = name.utf8_text(source) {\n                    return name_text.contains(\"test\");\n                }\n            }\n        }\n        \n        false\n    }\n\n    fn get_extension(&self) -> &'static str {\n        // Return the primary file extension for your language\n        \".ml\" // Example for OCaml\n    }\n\n    // Optional: Override these methods if needed for your language\n    \n    fn find_topmost_struct_type<'a>(&self, node: Node<'a>) -> Option<Node<'a>> {\n        // Default implementation returns the node itself\n        Some(node)\n    }\n\n    fn find_parent_function<'a>(&self, _node: Node<'a>) -> Option<Node<'a>> {\n        // Default implementation returns None\n        None\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rust Data Model for Search Results - Rust\nDESCRIPTION: Defines the core SearchResult struct used in Code Search for representing a semantic code search result. It declares fields for file path, line range, AST node type, code string, and scoring/ranking metadata. Some fields are optional (Option<T>) to account for search modes or incomplete information. Used internally for result collection, and likely in API outputs.\nSOURCE: https://github.com/buger/probe/blob/main/tests/README.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nstruct SearchResult {\n    pub file: String,\n    pub lines: (usize, usize),\n    pub node_type: String,\n    pub code: String,\n    pub matched_by_filename: Option<bool>,\n    pub rank: Option<usize>,\n    pub score: Option<f64>,\n    pub tfidf_score: Option<f64>,\n    pub bm25_score: Option<f64>,\n    pub tfidf_rank: Option<usize>,\n    pub bm25_rank: Option<usize>,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining System Prompt Instructions to Enforce XML Protocol (Prompt Engineering) - Bash\nDESCRIPTION: This snippet provides detailed system prompt instructions embedded in a bash code block for clarity and emphasis in documentation. It defines the LLM agent\\'s role, core rules, XML protocol requirements, and communication flow. Intended for use by prompt engineers to seed system instructions, it requires that the consuming interface or orchestrator present these instructions verbatim to the LLM. Inputs are user requests and tool results; output is structured XML messages for cross-process communication.\nSOURCE: https://github.com/buger/probe/blob/main/site/blog/agentic-flow-custom-xml-protocol.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Role Definition\nYou are a code assistant...\n\n# Core Instructions\n- Your primary goal is to fulfill the user's request by reasoning and using the available tools.\n- You MUST use the <thinking> tag to explain your reasoning before every action (tool call or completion).\n- You MUST use XML tags for ALL tool calls and for signaling task completion. DO NOT respond with plain text unless it is inside the <result> tag of a final <attempt_completion>.\n- You MUST choose EXACTLY ONE action per response turn: either ONE tool call (e.g., <search>...</search>) OR the final <attempt_completion> tag.\n\n# XML Protocol Specification\n1.  **Thinking:** Use `<thinking>Your reasoning here</thinking>` before any tool or completion tag.\n2.  **Tool Calls:** Use `<tool_name>...</tool_name>` where `tool_name` is one of the available tools listed below. Parameters MUST be nested as `<param_name>value</param_name>`. Example:\n    <search>\n      <query>user session</query>\n      <path>./src</path>\n    </search>\n3.  **Completion:** When the task is fully complete, respond ONLY with `<attempt_completion><result>Your final answer here</result></attempt_completion>`.\n4.  **Parameter Values:** Ensure parameter values are valid text. Use XML entities (<, >, &amp;) if needed for special characters within values.\n\n# Available Tools\n- `<search>`: Searches code. Parameters: `<query>(string, required)`, `<path>(string, optional)`, `<allow_tests>(boolean, optional)`.\n- `<extract>`: Extracts code snippets. Parameters: `<file_path>(string, required)`, `<line>(number, optional)`, `<end_line>(number, optional)`.\n- `<query>`: (Add description if used)\n\n# Tool Result Feedback\n- After you request a tool, I will provide the result in the next message, enclosed in `<tool_result tool_name=\"invoked_tool_name\">...</tool_result>`.\n- If the tool succeeded, the content will be the tool's output.\n- If the tool failed, the content will start with \"Error:\".\n- Analyze the content of \\`<tool_result>\\` to inform your next <thinking> step and subsequent action. If an error occurred, adapt your plan.\n```\n\n----------------------------------------\n\nTITLE: Installing Probe MCP Server Globally using NPM in Bash\nDESCRIPTION: This Bash command demonstrates how to manually install the Probe MCP server package globally using NPM. This step is required if you choose the manual installation method instead of NPX, making the `probe-mcp` command available system-wide.\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @buger/probe-mcp@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branches\nDESCRIPTION: Git commands for creating new branches when developing features or fixing bugs.\nSOURCE: https://github.com/buger/probe/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b fix/issue-you-are-fixing\n```\n\n----------------------------------------\n\nTITLE: Reporting Tool Execution Results (Extract Error) - XML\nDESCRIPTION: This fragment provides the result of a failed tool invocation using the \\u003ctool_result\\u003e tag. The content starts with 'Error:' per protocol to denote failure and allows the LLM to react accordingly. The protocol requires valid XML and specifies the tool_name as an attribute. Input is the error message (typically from a failed extract or operation), output is the structured XML containing the failure report.\nSOURCE: https://github.com/buger/probe/blob/main/site/blog/agentic-flow-custom-xml-protocol.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<tool_result tool_name=\"extract\">\nError: File not found at path 'src/server/auth.js#loginUser'\n</tool_result>\n```\n\n----------------------------------------\n\nTITLE: Running in Development Mode\nDESCRIPTION: Command for running the Probe MCP Agent in development mode.\nSOURCE: https://github.com/buger/probe/blob/main/mcp-agent/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Run in development mode\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Styling Landing Page for Probe in CSS\nDESCRIPTION: This CSS snippet defines the styling for the Probe landing page. It includes styles for quick start options, responsive design, and various layout elements.\nSOURCE: https://github.com/buger/probe/blob/main/site/index.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.quick-start-section,\n.vision-section {\n  padding: 1rem 0;\n}\n\n.quick-start-section {\n  text-align: center;\n  margin-top: -1rem;\n}\n\n.quick-start-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.quick-start-option {\n  text-align: center;\n}\n\n.quick-start-option h3 {\n  margin-bottom: 0.5rem;\n  color: var(--vp-c-text-1);\n  margin-top: 0px;\n}\n\n.pre-wrapper {\n  display: flex;\n  justify-content: center;\n  margin: 0.5rem auto;\n  width: auto;\n  overflow-x: auto;\n}\n\n.pre-wrapper pre {\n  width: auto;\n  padding: 0.75rem 0.75rem;\n  border-radius: 6px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n  transition: box-shadow 0.2s ease;\n  display: inline-block;\n  overflow-x: auto;\n}\n\n.pre-wrapper pre:hover {\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n}\n\n.option-description {\n  font-size: 0.9rem;\n  color: var(--vp-c-text-2);\n  margin-top: 0.5rem;\n}\n\n.container {\n  margin: 0 auto;\n  padding: 0 0.5rem;\n  max-width: 1200px;\n}\n\n.vision-section p {\n  font-size: 1rem;\n  line-height: 1.6;\n  margin: 0.75rem 0;\n  color: var(--vp-c-text-2);\n}\n\n.vision-section h2 {\n  margin-top: 1.5rem;\n}\n\nh2 {\n  font-size: 1.5rem;\n  margin-bottom: 0.75rem;\n  color: var(--vp-c-text-1);\n}\n\n@media (max-width: 640px) {\n  .quick-start-grid {\n    grid-template-columns: 1fr;\n    gap: 1rem;\n  }\n  \n  .quick-start-option {\n    width: 100%;\n  }\n  \n  .container {\n    padding: 0 0.25rem;\n  }\n  \n  .pre-wrapper {\n    padding: 0;\n  }\n  \n  .pre-wrapper pre {\n    padding: 0.5rem 0.25rem;\n    font-size: 0.9rem;\n    width: 100%;\n  }\n  \n  .quick-start-section {\n    padding: 0.5rem 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Code Explorer Prompt Type - Bash\nDESCRIPTION: Launches Probe Chat using the 'code-explorer' system prompt by passing '--prompt code-explorer'. This specializes the assistant for in-depth code explanation and navigation. Equivalent to default behavior.\nSOURCE: https://github.com/buger/probe/blob/main/examples/chat/README.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js --prompt code-explorer\n\n```\n\n----------------------------------------\n\nTITLE: Python XML Output Parser\nDESCRIPTION: Example Python script for parsing XML output from the probe search command using ElementTree.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport subprocess\nimport xml.etree.ElementTree as ET\n\n# Run probe search and capture output\noutput = subprocess.check_output([\"probe\", \"search\", \"authentication\", \"--format\", \"xml\"])\nroot = ET.fromstring(output)\n\n# Process the results\n# Check if original input is present (when using --keep-input)\noriginal_input = root.find('original_input')\nif original_input is not None:\n    print(f\"Original Input:\\n{original_input.text}\")\n    print(\"---\")\n\nfor result in root.findall('./result'):\n    file = result.find('file').text\n    lines_start = result.find('./lines/start').text\n    lines_end = result.find('./lines/end').text\n    code = result.find('code').text\n    \n    print(f\"File: {file}\")\n    print(f\"Lines: {lines_start}-{lines_end}\")\n    print(f\"Code:\\n{code}\")\n    print(\"---\")\n\n# Get summary information\nsummary = root.find('summary')\ncount = summary.find('count').text\ntotal_bytes = summary.find('total_bytes').text\ntotal_tokens = summary.find('total_tokens').text\n\nprint(f\"Found {count} results\")\nprint(f\"Total bytes: {total_bytes}\")\nprint(f\"Total tokens: {total_tokens}\")\n```\n\n----------------------------------------\n\nTITLE: Conceptualizing Stateful Streaming XML Parser Logic (Pseudocode)\nDESCRIPTION: Presents pseudocode outlining the logic for a stateful `StreamingXmlParser` class. This parser is designed to process text chunks from an LLM stream, maintain an internal buffer and state (e.g., `OUTSIDE`, `IN_THINKING`, `IN_SEARCH`), detect known XML start and end tags (like `<thinking>`, `<search>`, `<query>`, `<attempt_completion>`), accumulate content and parameters within tags, and produce a structured `ParsedAction` object upon finding a complete tag block, even if the tag is split across multiple stream chunks. It handles transitions between states based on detected tags.\nSOURCE: https://github.com/buger/probe/blob/main/site/blog/agentic-flow-custom-xml-protocol.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n```text\nclass StreamingXmlParser:\n  buffer = \"\"\n  state = \"OUTSIDE\" // e.g., OUTSIDE, IN_THINKING, IN_SEARCH, IN_SEARCH_QUERY\n  currentAction = null // Stores partially built action { type, name, params }\n  knownToolTags = [\"search\", \"extract\", ...]\n  allKnownTags = [\"thinking\", \"attempt_completion\", \"result\"] + knownToolTags + paramTags...\n\n  processChunk(chunk):\n    buffer += chunk\n    actionCompleted = null\n\n    while true: // Process buffer repeatedly until no more actions found in current buffer\n      foundActionThisPass = false\n      if state == \"OUTSIDE\":\n        // Check buffer for start tags <thinking>, <attempt_completion>, <search>, etc.\n        match = find_earliest_start_tag(buffer, allKnownTags)\n        if match:\n          // Consume buffer up to tag start\n          buffer = buffer.substring(match.index)\n          state = \"IN_\" + match.tagName.toUpperCase()\n          if match.tagName is a tool tag:\n            currentAction = { type: \"tool\", name: match.tagName, params: {} }\n          else if match.tagName == \"thinking\":\n            currentAction = { type: \"thinking\", content: \"\" }\n          else if match.tagName == \"attempt_completion\":\n            currentAction = { type: \"completion\", result: \"\" } // Need to find <result> later\n          // Consume the start tag itself\n          buffer = buffer.substring(match.tagLength)\n          foundActionThisPass = true\n        else:\n          break // No more start tags found in buffer for now\n\n      else if state == \"IN_THINKING\":\n        endTagIndex = buffer.indexOf(\"</thinking>\")\n        if endTagIndex != -1:\n          currentAction.content = buffer.substring(0, endTagIndex) // Extract content\n          actionCompleted = currentAction // Finalize this action\n          buffer = buffer.substring(endTagIndex + len(\"</thinking>\")) // Consume tag\n          state = \"OUTSIDE\"\n          currentAction = null\n          foundActionThisPass = true\n        else:\n          break // End tag not yet in buffer\n\n      else if state == \"IN_SEARCH\": // Example tool state\n        // Look for parameter tags <query>, <path> OR the end tag </search>\n        queryStart = buffer.indexOf(\"<query>\")\n        pathStart = buffer.indexOf(\"<path>\")\n        endSearch = buffer.indexOf(\"</search>\")\n\n        // Find the earliest relevant tag index... (complex logic here)\n        earliestIndex = min_positive(queryStart, pathStart, endSearch)\n\n        if earliestIndex == endSearch:\n           // Found the end of the search tool call\n           actionCompleted = currentAction\n           buffer = buffer.substring(endSearch + len(\"</search>\"))\n           state = \"OUTSIDE\"\n           currentAction = null\n           foundActionThisPass = true\n        else if earliestIndex == queryStart:\n           // Found a query parameter tag, transition state\n```\n```\n\n----------------------------------------\n\nTITLE: Verifying Probe installation on Windows\nDESCRIPTION: Commands for verifying Probe installation on Windows, including standard verification and alternative methods if the installation directory is not in the PATH.\nSOURCE: https://github.com/buger/probe/blob/main/site/installation.md#2025-04-23_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nprobe --version\n```\n\n----------------------------------------\n\nTITLE: Referencing Core Technology and Workflows from CLI Reference - Markdown\nDESCRIPTION: Illustrates how reference documentation can link back to both core technological concepts and practical use cases from the command-line interface documentation, supporting knowledge transfer between reference material and application guides. Uses section headers and bulleted lists for structure.\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-cross-references.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n# CLI Reference\n\n[...command reference...]\n\n## Background\n\nThe CLI commands are built on Probe's [core search technology](/how-it-works#search-technology).\n\n## Common Workflows\n\nThese commands are commonly used in:\n\n- [AI chat sessions](/ai-chat) for interactive code exploration\n- [Custom AI tools](/nodejs-sdk) for automated code analysis\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming XML Parser for LLM Output in Pseudocode\nDESCRIPTION: This pseudocode outlines a simplified streaming XML parser designed to process LLM outputs. It handles different states for searching and extracting query and path parameters from XML tags.\nSOURCE: https://github.com/buger/probe/blob/main/site/blog/agentic-flow-custom-xml-protocol.md#2025-04-23_snippet_10\n\nLANGUAGE: pseudocode\nCODE:\n```\nstate = \"IN_SEARCH_QUERY\"\nbuffer = buffer.substring(queryStart + len(\"<query>\"))\nfoundActionThisPass = true\nelse if earliestIndex == pathStart:\n   // Found a path parameter tag...\n   state = \"IN_SEARCH_PATH\"\n   buffer = buffer.substring(pathStart + len(\"<path>\"))\n   foundActionThisPass = true\nelse:\n   break // No relevant tags found yet\n\nelse if state == \"IN_SEARCH_QUERY\":\n endQuery = buffer.indexOf(\"</query>\")\n if endQuery != -1:\n    currentAction.params[\"query\"] = buffer.substring(0, endQuery) // Extract value\n    buffer = buffer.substring(endQuery + len(\"</query>\"))\n    state = \"IN_SEARCH\" // Go back to looking for more params or end tag\n    foundActionThisPass = true\n else:\n    break\n\n// ... other states for other tools, params, completion, result ...\n\nif not foundActionThisPass:\n break // Nothing more to process in the buffer currently\n\nreturn actionCompleted // Return completed action, or null if none finished\n```\n\n----------------------------------------\n\nTITLE: Custom Parent Node Matching for AST Code Blocks - Rust\nDESCRIPTION: Adds logic to is_acceptable_parent in src/language.rs, used to determine if an AST node represents a complete code structure for extraction. Matches based on extension and node type, providing flexibility for new language grammars. Additional match arms and node types can be listed for extensibility.\nSOURCE: https://github.com/buger/probe/blob/main/tests/README.md#2025-04-23_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\npub fn is_acceptable_parent(node: &Node, extension: &str) -> bool {\n    let node_type = node.kind();\n    \n    match extension {\n        // ... existing languages\n        \"nl\" => {\n            matches!(node_type,\n                \"function_declaration\" |\n                \"class_declaration\" |\n                \"other_structure\"\n            )\n        },\n        _ => false,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript XML Output Parser\nDESCRIPTION: Example Node.js script for parsing XML output from the probe search command using xml2js.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst { execSync } = require('child_process');\nconst { parseString } = require('xml2js');\n\n// Run probe search and capture output\nconst output = execSync('probe search \"authentication\" --format xml', { encoding: 'utf-8' });\n\n// Parse XML\nparseString(output, (err, result) => {\n  if (err) {\n    console.error('Error parsing XML:', err);\n    return;\n  }\n  \n  // Process the results\n  // Check if original input is present (when using --keep-input)\n  if (result.probe_results.original_input) {\n    console.log(`Original Input:\\n${result.probe_results.original_input[0]}`);\n    console.log('---');\n  }\n  \n  const results = result.probe_results.result || [];\n  results.forEach(result => {\n    const file = result.file[0];\n    const linesStart = result.lines[0].start[0];\n    const linesEnd = result.lines[0].end[0];\n    const code = result.code[0];\n    \n    console.log(`File: ${file}`);\n    console.log(`Lines: ${linesStart}-${linesEnd}`);\n    console.log(`Code:\\n${code}`);\n    console.log('---');\n  });\n  \n  // Get summary information\n  const summary = result.probe_results.summary[0];\n  console.log(`Found ${summary.count[0]} results`);\n  console.log(`Total bytes: ${summary.total_bytes[0]}`);\n  console.log(`Total tokens: ${summary.total_tokens[0]}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Requesting Tool Invocation (Extract Tool) - XML\nDESCRIPTION: This XML fragment is used to invoke the 'extract' tool with required nested parameters (\\u003cfile_path\\u003e). It adheres to the strict XML schema, requiring valid XML and correct tag naming. Used when an LLM needs to request code extraction, with the input as an explicit file path or symbol and output as a tool-ready XML structure.\nSOURCE: https://github.com/buger/probe/blob/main/site/blog/agentic-flow-custom-xml-protocol.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<extract>\n  <file_path>src/server/auth.js#loginUser</file_path>\n</extract>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Probe on macOS/Linux\nDESCRIPTION: Commands to uninstall Probe on macOS and Linux systems, either when installed via npm or manually.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n# If installed via npm\nnpm uninstall -g @buger/probe\n\n# If installed via curl script or manually\nsudo rm /usr/local/bin/probe\n```\n\n----------------------------------------\n\nTITLE: Using CommandExample Component in Markdown\nDESCRIPTION: Examples of using the CommandExample custom component for displaying command-line examples with and without output.\nSOURCE: https://github.com/buger/probe/blob/main/site/README.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<CommandExample>probe search \"error handling\" ./src</CommandExample>\n\n<CommandExample output=\"Found 3 matches in 2 files\">probe search \"user authentication\" ./src</CommandExample>\n```\n\n----------------------------------------\n\nTITLE: Example: Linking CLI Reference Back to Concepts and Use Cases\nDESCRIPTION: This Markdown snippet illustrates how the 'CLI Reference' page should provide context by linking back to the underlying 'Core Concepts' (core search technology) and relevant 'Use Cases' (AI chat, custom tools) where the CLI commands are typically employed.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-cross-references.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n# CLI Reference\n\n[...command reference...]\n\n## Background\n\nThe CLI commands are built on Probe's [core search technology](/how-it-works#search-technology).\n\n## Common Workflows\n\nThese commands are commonly used in:\n\n- [AI chat sessions](/ai-chat) for interactive code exploration\n- [Custom AI tools](/nodejs-sdk) for automated code analysis\n```\n\n----------------------------------------\n\nTITLE: Test File Detection Implementation in Rust\nDESCRIPTION: Implementation of test file detection logic based on file naming patterns.\nSOURCE: https://github.com/buger/probe/blob/main/site/adding-languages.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\npub fn is_test_file(path: &Path) -> bool {\n    // Existing code...\n    \n    // Check file name patterns\n    if let Some(file_name) = path.file_name().and_then(|f| f.to_str()) {\n        // Existing patterns...\n        \n        // MyLanguage: test_*.ml, *_test.ml\n        if file_name.starts_with(\"test_\") && file_name.ends_with(\".ml\")\n            || file_name.ends_with(\"_test.ml\")\n        {\n            return true;\n        }\n    }\n    \n    // Existing code...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Session-Based Caching with probe search in Bash\nDESCRIPTION: Shows how to initiate a search session (`--session \"\"`) and reuse the generated session ID in subsequent searches to avoid showing duplicate code blocks. This is useful when exploring topics with multiple related queries or interacting with AI assistants.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/advanced-cli.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# First search - generates a session ID\nprobe search \"authentication\" --session \"\"\n# Session: a1b2c3d4 (example output)\n\n# Subsequent searches - reuse the session ID\nprobe search \"login\" --session \"a1b2c3d4\"\n# Will skip code blocks already shown in the previous search\n```\n\n----------------------------------------\n\nTITLE: Requesting Tool Invocation (Search Tool) - XML\nDESCRIPTION: This snippet demonstrates invoking the 'search' tool via a well-structured XML payload with required and optional nested parameters. It requires protocol-compliant XML syntax and the specific set of supported tool names and parameters described elsewhere in the guide. Parameters such as \\u003cquery\\u003e, \\u003cpath\\u003e, and \\u003callow_tests\\u003e are included to direct the search functionality. Input is parameter values, output is strict XML for tool consumption.\nSOURCE: https://github.com/buger/probe/blob/main/site/blog/agentic-flow-custom-xml-protocol.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<search>\n  <query>authentication implementation</query>\n  <path>src/server</path>\n  <allow_tests>false</allow_tests>\n</search>\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation and Sidebar in VitePress - JavaScript\nDESCRIPTION: This JavaScript snippet sets up the navigation menu (nav) and sidebar structure (sidebar) for a Probe documentation site using VitePress. It defines the navigation hierarchy, top-level navigation, and organized sidebar items for each documentation section. Dependencies include VitePress and its theme configuration options; it expects the code to be inserted into `.vitepress/config.js` and requires a compatible VitePress project structure. Outputs are used by VitePress at build time to render organized navigation. Modifications to this configuration may require a server restart.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-maintenance.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  // ... other VitePress configuration options\n  \n  themeConfig: {\n    // ... other theme configuration options\n    \n    sidebar: {\n      '/': [\n        {\n          text: 'Getting Started',\n          collapsed: false,\n          items: [\n            { text: 'Quick Start', link: '/quick-start' },\n            { text: 'Installation', link: '/installation' },\n            { text: 'Core Features', link: '/features' },\n          ]\n        },\n        {\n          text: 'Core Functionality',\n          collapsed: false,\n          items: [\n            { text: 'How It Works', link: '/how-it-works' },\n            { text: 'Search Functionality', link: '/search-functionality' },\n            { text: 'Code Extraction', link: '/code-extraction' },\n            { text: 'CLI Mode', link: '/cli-mode' },\n          ]\n        },\n        {\n          text: 'AI Integration',\n          collapsed: false,\n          items: [\n            { text: 'AI Integration Overview', link: '/ai-integration' },\n            { text: 'AI Chat Mode', link: '/ai-chat' },\n            { text: 'MCP Server', link: '/mcp-server' },\n            { text: 'MCP Integration', link: '/mcp-integration' },\n            { text: 'Node.js SDK', link: '/nodejs-sdk' },\n            { text: 'Web Interface', link: '/web-interface' },\n          ]\n        },\n        {\n          text: 'Language Support',\n          collapsed: false,\n          items: [\n            { text: 'Language Support Overview', link: '/language-support-overview' },\n            { text: 'Supported Languages', link: '/supported-languages' },\n            { text: 'Adding Languages', link: '/adding-languages' },\n          ]\n        },\n        {\n          text: 'Advanced Topics',\n          collapsed: true,\n          items: [\n            { text: 'Result Ranking', link: '/result-ranking' },\n            { text: 'Pattern Matching', link: '/pattern-matching' },\n            { text: 'Performance Optimization', link: '/performance-optimization' },\n            { text: 'Customization', link: '/customization' },\n          ]\n        },\n        {\n          text: 'Contributing',\n          collapsed: true,\n          items: [\n            { text: 'Contributing Guide', link: '/contributing' },\n            { text: 'Code of Conduct', link: '/code-of-conduct' },\n            { text: 'Development Setup', link: '/development-setup' },\n          ]\n        },\n      ]\n    },\n    \n    nav: [\n      { text: 'Home', link: '/' },\n      { text: 'Quick Start', link: '/quick-start' },\n      { \n        text: 'Documentation', \n        items: [\n          { text: 'Getting Started', items: [\n            { text: 'Quick Start', link: '/quick-start' },\n            { text: 'Installation', link: '/installation' },\n            { text: 'Core Features', link: '/features' },\n          ]},\n          { text: 'Core Functionality', items: [\n            { text: 'How It Works', link: '/how-it-works' },\n            { text: 'Search Functionality', link: '/search-functionality' },\n            { text: 'Code Extraction', link: '/code-extraction' },\n            { text: 'CLI Mode', link: '/cli-mode' },\n          ]},\n          { text: 'AI Integration', items: [\n            { text: 'AI Integration Overview', link: '/ai-integration' },\n            { text: 'AI Chat Mode', link: '/ai-chat' },\n            { text: 'MCP Server', link: '/mcp-server' },\n            { text: 'MCP Integration', link: '/mcp-integration' },\n            { text: 'Node.js SDK', link: '/nodejs-sdk' },\n            { text: 'Web Interface', link: '/web-interface' },\n          ]},\n          { text: 'Language Support', items: [\n            { text: 'Language Support Overview', link: '/language-support-overview' },\n            { text: 'Supported Languages', link: '/supported-languages' },\n            { text: 'Adding Languages', link: '/adding-languages' },\n          ]},\n        ]\n      },\n      { text: 'GitHub', link: 'https://github.com/buger/probe' }\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Anchor Links for Specificity in Markdown\nDESCRIPTION: This snippet shows how to use a Markdown anchor link (`#search-options`) to point directly to the 'search command options' section within the '/cli-mode' page, allowing users to navigate to precise information.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-cross-references.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\nSee the [search command options](/cli-mode#search-options) for more details.\n```\n\n----------------------------------------\n\nTITLE: Configuring Features in YAML Frontmatter\nDESCRIPTION: Example schema for defining feature sections in index.md frontmatter with optional properties like icons, titles, descriptions, and styling options.\nSOURCE: https://github.com/buger/probe/blob/main/site/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfeatures:\n  - icon: 🔎                      # Emoji icon (optional if image is provided)\n    title: Feature Title          # Required\n    details: Feature description  # Required\n    link: /page-link              # Optional link to another page\n    linkText: Learn more          # Optional custom text for the link (defaults to \"Learn more\")\n    theme: alt                    # Optional theme (alt, brand, or default)\n    image: /icons/my-icon.svg     # Optional image path (replaces the emoji icon)\n    highlight: true               # Optional boolean to highlight the feature\n```\n\n----------------------------------------\n\nTITLE: Tokenization Example in Probe Search\nDESCRIPTION: Demonstrates how Probe breaks down compound terms into individual tokens during the search process, enhancing search accuracy.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-functionality.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfindUserByEmail → [find, user, by, email]\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Navigation for Probe Documentation\nDESCRIPTION: VitePress configuration file that defines the sidebar and navigation structure for the Probe documentation. This setup organizes content into logical sections including Getting Started, Core Functionality, AI Integration, Language Support, Advanced Topics, and Contributing.\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-maintenance.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ... other VitePress configuration options\n  \n  themeConfig: {\n    // ... other theme configuration options\n    \n    sidebar: {\n      '/': [\n        {\n          text: 'Getting Started',\n          collapsed: false,\n          items: [\n            { text: 'Quick Start', link: '/quick-start' },\n            { text: 'Installation', link: '/installation' },\n            { text: 'Core Features', link: '/features' },\n          ]\n        },\n        {\n          text: 'Core Functionality',\n          collapsed: false,\n          items: [\n            { text: 'How It Works', link: '/how-it-works' },\n            { text: 'Search Functionality', link: '/search-functionality' },\n            { text: 'Code Extraction', link: '/code-extraction' },\n            { text: 'CLI Mode', link: '/cli-mode' },\n          ]\n        },\n        {\n          text: 'AI Integration',\n          collapsed: false,\n          items: [\n            { text: 'AI Integration Overview', link: '/ai-integration' },\n            { text: 'AI Chat Mode', link: '/ai-chat' },\n            { text: 'MCP Server', link: '/mcp-server' },\n            { text: 'MCP Integration', link: '/mcp-integration' },\n            { text: 'Node.js SDK', link: '/nodejs-sdk' },\n            { text: 'Web Interface', link: '/web-interface' },\n          ]\n        },\n        {\n          text: 'Language Support',\n          collapsed: false,\n          items: [\n            { text: 'Language Support Overview', link: '/language-support-overview' },\n            { text: 'Supported Languages', link: '/supported-languages' },\n            { text: 'Adding Languages', link: '/adding-languages' },\n          ]\n        },\n        {\n          text: 'Advanced Topics',\n          collapsed: true,\n          items: [\n            { text: 'Result Ranking', link: '/result-ranking' },\n            { text: 'Pattern Matching', link: '/pattern-matching' },\n            { text: 'Performance Optimization', link: '/performance-optimization' },\n            { text: 'Customization', link: '/customization' },\n          ]\n        },\n        {\n          text: 'Contributing',\n          collapsed: true,\n          items: [\n            { text: 'Contributing Guide', link: '/contributing' },\n            { text: 'Code of Conduct', link: '/code-of-conduct' },\n            { text: 'Development Setup', link: '/development-setup' },\n          ]\n        },\n      ]\n    },\n    \n    nav: [\n      { text: 'Home', link: '/' },\n      { text: 'Quick Start', link: '/quick-start' },\n      { \n        text: 'Documentation', \n        items: [\n          { text: 'Getting Started', items: [\n            { text: 'Quick Start', link: '/quick-start' },\n            { text: 'Installation', link: '/installation' },\n            { text: 'Core Features', link: '/features' },\n          ]},\n          { text: 'Core Functionality', items: [\n            { text: 'How It Works', link: '/how-it-works' },\n            { text: 'Search Functionality', link: '/search-functionality' },\n            { text: 'Code Extraction', link: '/code-extraction' },\n            { text: 'CLI Mode', link: '/cli-mode' },\n          ]},\n          { text: 'AI Integration', items: [\n            { text: 'AI Integration Overview', link: '/ai-integration' },\n            { text: 'AI Chat Mode', link: '/ai-chat' },\n            { text: 'MCP Server', link: '/mcp-server' },\n            { text: 'MCP Integration', link: '/mcp-integration' },\n            { text: 'Node.js SDK', link: '/nodejs-sdk' },\n            { text: 'Web Interface', link: '/web-interface' },\n          ]},\n          { text: 'Language Support', items: [\n            { text: 'Language Support Overview', link: '/language-support-overview' },\n            { text: 'Supported Languages', link: '/supported-languages' },\n            { text: 'Adding Languages', link: '/adding-languages' },\n          ]},\n        ]\n      },\n      { text: 'GitHub', link: 'https://github.com/buger/probe' }\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Manual Triggering for Probe Workflow in GitHub Actions (YAML)\nDESCRIPTION: Demonstrates how to modify a GitHub Actions workflow YAML file to allow manual triggering via `workflow_dispatch`. It defines an input field (`user_request`) for the user to provide the query when triggering manually from the GitHub UI. The workflow then passes this input to the reusable `buger/probe/probe.yml` workflow using the `manual_input` parameter. It also shows how to keep existing triggers like `issue_comment` alongside the manual trigger.\nSOURCE: https://github.com/buger/probe/blob/main/site/integrations/github-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Manual Probe Run\n\non:\n  workflow_dispatch: # Allows manual triggering\n    # Optional: Define inputs for the manual run\n    inputs:\n      user_request:\n        description: 'The request/question for Probe'\n        required: true\n        default: 'Explain the main function in src/main.rs'\n      # Add other inputs if needed, e.g., target branch\n\n  # Keep other triggers if needed\n  issue_comment:\n    types: [created]\n\npermissions:\n  # ... your permissions ...\n  contents: read # Or write if allow_edit is true\n\njobs:\n  trigger_probe_manual:\n    uses: buger/probe/.github/workflows/probe.yml@main\n    with:\n      # Use the input from the manual trigger\n      manual_input: ${{ github.event.inputs.user_request }}\n      # Set other parameters as needed\n      allow_edit: false # Example: disable editing for manual runs\n      # command_prefix is not typically needed for workflow_dispatch\n    secrets:\n      # ... your secrets ...\n```\n\n----------------------------------------\n\nTITLE: Example Document with Installation, Cross-References, and Related Topics - Markdown\nDESCRIPTION: This Markdown block provides an end-to-end example of a documentation page with installation instructions, user guidance, and structured cross-references. It demonstrates using fenced code blocks for commands, embedding related documentation links, and structuring progression with 'Next Steps' and 'Related Topics' sections. Dependencies include a Markdown renderer like VitePress and the presence of all referenced files. The code uses backticks for code and lists, and expects the documentation site to resolve all internal links.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-maintenance.md#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n# Quick Start\n\nThis guide will help you get up and running with Probe quickly.\n\n## Installation\n\nThe easiest way to install Probe is via npm:\n\n```bash\nnpm install -g @buger/probe@latest\n```\n\nFor more detailed installation instructions, including manual installation and building from source, see the [Installation Guide](/installation).\n\n...\n\n## Next Steps\n\n- Learn more about the [CLI Mode](/cli-mode) for detailed command options\n- Explore the [AI Chat Mode](/ai-chat) for interactive code exploration\n- Check out the [Web Interface](/web-interface) for a browser-based experience\n- Understand [How It Works](/how-it-works) to get the most out of Probe\n\n## Related Topics\n\n- [Installation](/installation) - Detailed installation instructions\n- [CLI Mode](/cli-mode) - Command-line interface reference\n- [AI Chat Mode](/ai-chat) - Interactive CLI interface for asking questions about your code\n- [Web Interface](/web-interface) - Browser-based exploration\n```\n\n----------------------------------------\n\nTITLE: TF-IDF Calculation Formulas\nDESCRIPTION: Mathematical formulas showing how Term Frequency (TF) and Inverse Document Frequency (IDF) are calculated and combined for the TF-IDF ranking algorithm.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-functionality.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nTF(term, block) = (Number of times term appears in block) / (Total number of terms in block)\n```\n\nLANGUAGE: bash\nCODE:\n```\nIDF(term) = ln(Total number of blocks / Number of blocks containing term)\n```\n\nLANGUAGE: bash\nCODE:\n```\nTF-IDF(term, block) = TF(term, block) * IDF(term)^2\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Probe on Windows\nDESCRIPTION: PowerShell commands to uninstall Probe on Windows, including removal of the executable and updating the PATH environment variable.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_27\n\nLANGUAGE: powershell\nCODE:\n```\n# If installed via PowerShell script to default user location\nRemove-Item -Path \"$env:LOCALAPPDATA\\Probe\\probe.exe\" -Force\n\n# If installed via PowerShell script to system location\nRemove-Item -Path \"$env:ProgramFiles\\Probe\\probe.exe\" -Force\n\n# If you added the installation directory to PATH, you may want to remove it\n# For user PATH:\n$userPath = [Environment]::GetEnvironmentVariable('PATH', 'User')\n$userPath = ($userPath -split ';' | Where-Object { $_ -ne \"$env:LOCALAPPDATA\\Probe\" }) -join ';'\n[Environment]::SetEnvironmentVariable('PATH', $userPath, 'User')\n```\n\n----------------------------------------\n\nTITLE: Finding Links to a Specific Page with grep - Bash\nDESCRIPTION: Provides a bash command for locating all markdown links to a particular page within the documentation source tree using grep regular expressions. Assumes a Unix-like shell and requires grep. The key parameter is the target page path, and the output is a list of file matches.\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-cross-references.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Find all links to a specific page\ngrep -r \"\\[.*\\](\\/old-page-path)\" site/\n```\n\n----------------------------------------\n\nTITLE: Signaling Task Completion - XML\nDESCRIPTION: This snippet signals to the orchestrator that the LLM has completed its overall task, encapsulating the final answer in a \\u003cresult\\u003e tag within \\u003cattempt_completion\\u003e. It is used per protocol at the end of an agentic session. Inputs are the completed answer text; output is a protocol-compliant XML message. Only valid after all prior steps are complete.\nSOURCE: https://github.com/buger/probe/blob/main/site/blog/agentic-flow-custom-xml-protocol.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<attempt_completion>\n  <result>The authentication flow uses JWT tokens stored in httpOnly cookies. Key functions are `loginUser` and `verifyToken` in `src/server/auth.js`.</result>\n</attempt_completion>\n```\n\n----------------------------------------\n\nTITLE: Selecting probe Output Formats for AI Model Compatibility in Bash\nDESCRIPTION: Explains how to choose the output format of `probe search` using the `--format` flag (e.g., `markdown`, `plain`, `json`). Selecting the appropriate format ensures compatibility with the specific requirements of different AI models.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/advanced-cli.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Markdown format for most AI models\nprobe search \"authentication\" --format markdown\n\n# Plain text for simpler models\nprobe search \"authentication\" --format plain\n\n# JSON for programmatic processing\nprobe search \"authentication\" --format json\n```\n\n----------------------------------------\n\nTITLE: Cross-Linking Core Concepts to Use Cases in List Format - Markdown\nDESCRIPTION: Provides a markdown snippet showing how to list links from core concepts to multiple use cases, enabling users to explore practical applications based on interests. The header and bulleted list format clarify intended navigation. No special dependencies.\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-cross-references.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n# What is Probe?\n\n[...content about Probe's features...]\n\n## Real-World Applications\n\nProbe can be used in various workflows:\n\n- For AI-assisted coding, see [Using with AI Code Editors](/mcp-integration)\n- For team collaboration, see [Hosting a Team Chat](/web-interface)\n- For custom AI tools, see [Building AI Tools with Node.js SDK](/nodejs-sdk)\n```\n\n----------------------------------------\n\nTITLE: Linking Core Concepts to Use Cases in Markdown\nDESCRIPTION: This snippet shows an example structure within a 'Core Concepts' page (like 'Language Support') demonstrating how to link to relevant 'Use Cases' pages, such as AI editor integration and the Node.js SDK.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-cross-references.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n# Language Support\n\n[...content...]\n\n## Using in Your Workflow\n\nOnce you understand the supported languages, you can:\n\n- [Use Probe with AI Code Editors](/mcp-integration) for intelligent code assistance\n- [Build custom tools with the Node.js SDK](/nodejs-sdk) for language-specific processing\n```\n\n----------------------------------------\n\nTITLE: Basic XML Output Structure for Probe Extract Command\nDESCRIPTION: Shows the basic XML output structure from the extract command including file location, line numbers, node type and code content.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<probe_results>\n  <result>\n    <file>/path/to/file.rs</file>\n    <lines>\n      <start>10</start>\n      <end>20</end>\n    </lines>\n    <node_type>function</node_type>\n    <code><![CDATA[fn example() { ... }]]></code>\n  </result>\n  <!-- More results... -->\n  <summary>\n    <count>1</count>\n    <total_bytes>1024</total_bytes>\n    <total_tokens>256</total_tokens>\n  </summary>\n</probe_results>\n```\n\n----------------------------------------\n\nTITLE: Creating Git Tag for Probe Release\nDESCRIPTION: Commands for creating and pushing a git tag to trigger the GitHub Actions release workflow for Probe. This is part of the versioning and release process.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a vX.Y.Z -m \"Release vX.Y.Z\"\ngit push origin vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Providing Contextual Markdown Links with Enhanced Anchors - Markdown\nDESCRIPTION: Compares basic and improved examples of adding contextual markdown links. The better example demonstrates including descriptive anchor fragments for linking to specific output formats, making navigation more precise. The inputs are link texts and URLs with anchors; the output is better user guidance.\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-cross-references.md#2025-04-23_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n# Good\nFor details on output formatting, see the [Output Formats Reference](/output-formats).\n\n# Better\nFor details on how to format search results as JSON or XML, see the [Output Formats Reference](/output-formats#json-and-xml).\n```\n\n----------------------------------------\n\nTITLE: Improving Link Context in Markdown\nDESCRIPTION: This snippet contrasts two ways of linking in Markdown. The 'Good' example is a general link, while the 'Better' example provides more context and links to a specific section (#json-and-xml) using an anchor, improving user experience.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-cross-references.md#2025-04-23_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n# Good\nFor details on output formatting, see the [Output Formats Reference](/output-formats).\n\n# Better\nFor details on how to format search results as JSON or XML, see the [Output Formats Reference](/output-formats#json-and-xml).\n```\n\n----------------------------------------\n\nTITLE: Referencing Feature Documentation in Markdown - Markdown\nDESCRIPTION: Provides a markdown snippet for linking to command-line interface (CLI) reference documentation. This supports direct user access to detailed feature specifications and is applicable anywhere feature-specific references are needed. Inputs are markdown text; outputs are rendered documentation links.\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-cross-references.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nSee the [CLI Reference](/cli-mode#search-command) for a complete list of search options.\n```\n\n----------------------------------------\n\nTITLE: Example: Linking CLI Use Case to Reference and Related Docs\nDESCRIPTION: This Markdown snippet shows how a specific 'Use Cases' page ('Using in the CLI for Advanced AI') should link to relevant reference documentation (Output Formats, Search Patterns) and configuration details (AI Integration Reference) for advanced users.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-cross-references.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n# Using in the CLI for Advanced AI\n\n[...content about CLI usage...]\n\n## Advanced Configuration\n\nFor advanced use cases, you can configure various aspects of the CLI:\n\n- For output formatting options, see [Output Formats Reference](/output-formats)\n- For search pattern syntax, see [Search Functionality](/search-functionality#patterns)\n- For environment variables, see [AI Integration Reference](/ai-integration#configuration-options)\n```\n\n----------------------------------------\n\nTITLE: TF-IDF Formula for Search Ranking in Probe (Mathematical Expression)\nDESCRIPTION: Defines the core formulas for Term Frequency (TF), Inverse Document Frequency (IDF), and combined TF-IDF scoring used by Probe to rank code search results. These formulas do not require computational dependencies but represent the statistical model underlying the ranking algorithms. Inputs are term frequencies and document statistics; outputs are computed scores for relevance.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-reference.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nTF(term, block) = (Number of times term appears in block) / (Total number of terms in block)\n```\n\nLANGUAGE: text\nCODE:\n```\nIDF(term) = ln(Total number of blocks / Number of blocks containing term)\n```\n\nLANGUAGE: text\nCODE:\n```\nTF-IDF(term, block) = TF(term, block) * IDF(term)^2\n```\n\n----------------------------------------\n\nTITLE: Defining the LanguageImpl Trait in Rust\nDESCRIPTION: The LanguageImpl trait defines the interface that all language implementations must follow in Probe. It includes methods for tree-sitter language integration, determining acceptable code containers, detecting test nodes, and finding related code structures.\nSOURCE: https://github.com/buger/probe/blob/main/site/language-support-overview.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub trait LanguageImpl {\n    // Get the tree-sitter language for parsing\n    fn get_tree_sitter_language(&self) -> TSLanguage;\n\n    // Check if a node is an acceptable container/parent entity\n    fn is_acceptable_parent(&self, node: &Node) -> bool;\n\n    // Check if a node represents a test\n    fn is_test_node(&self, node: &Node, source: &[u8]) -> bool;\n\n    // Get the file extension for this language\n    fn get_extension(&self) -> &'static str;\n\n    // Find the topmost struct type (mainly for Go)\n    fn find_topmost_struct_type<'a>(&self, node: Node<'a>) -> Option<Node<'a>> {\n        // Default implementation returns the node itself\n        Some(node)\n    }\n\n    // Find the parent function or method declaration for a node (if any)\n    fn find_parent_function<'a>(&self, _node: Node<'a>) -> Option<Node<'a>> {\n        // Default implementation returns None\n        None\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Broken Links Using linkcheck in Bash\nDESCRIPTION: This Bash command demonstrates using the `npx linkcheck` tool to automatically check for broken links on a deployed documentation website ('https://probe-docs.example.com'). Regularly running this helps maintain the integrity of the documentation's cross-references.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-cross-references.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Using a tool like linkcheck\nnpx linkcheck https://probe-docs.example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Probe Binary Path for MCP Server in JSON\nDESCRIPTION: This JSON configuration illustrates how to direct the Probe MCP server to use a custom-built Probe binary. It sets the 'PROBE_PATH' environment variable via the 'env' property, pointing to the location of the custom executable.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"probe\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp@latest\"\n      ],\n      \"env\": {\n        \"PROBE_PATH\": \"/path/to/custom/probe\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Documentation for Broken Links Using linkcheck - Bash\nDESCRIPTION: Provides a bash command that utilizes the npx linkcheck tool to validate hyperlinks in the documentation site for broken URLs. Requires Node.js and npx. Input is the root documentation URL, and output is a report of valid and broken links.\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-cross-references.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Using a tool like linkcheck\nnpx linkcheck https://probe-docs.example.com\n```\n\n----------------------------------------\n\nTITLE: Installing Rust and Cargo from Shell - Bash\nDESCRIPTION: Demonstrates how to install Rust and Cargo via the official rustup.sh script using curl. This approach is prerequisite for building Code Search from source and must be run in a terminal. No input parameters are required, and it is expected to download and launch the installer for interactive installation. Requires internet connectivity and Unix-like shell support.\nSOURCE: https://github.com/buger/probe/blob/main/tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: HTML Blog Post Card Layout Structure\nDESCRIPTION: Defines the structure for displaying blog posts in a card format with title, metadata, description, tags and read more link.\nSOURCE: https://github.com/buger/probe/blob/main/site/blog/index.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"blog-post-list\">\n  <div class=\"blog-post-card\">\n    <h3><a href=\"/blog/agentic-flow-custom-xml-protocol\">Technical Guide: Agentic Flow via Custom XML Protocol</a></h3>\n    <div class=\"blog-post-meta\">\n      <span class=\"blog-post-date\">July 4, 2025</span>\n      <span class=\"blog-post-author\">By Probe Team</span>\n    </div>\n    <p>Learn how to implement agentic AI flows using a custom XML protocol for reliable tool interactions.</p>\n    <div class=\"blog-post-tags\">\n      <span class=\"blog-post-tag\">agentic-ai</span>\n      <span class=\"blog-post-tag\">xml-protocol</span>\n      <span class=\"blog-post-tag\">tool-use</span>\n      <span class=\"blog-post-tag\">llm</span>\n      <span class=\"blog-post-tag\">technical-guide</span>\n    </div>\n    <a href=\"/blog/agentic-flow-custom-xml-protocol\" class=\"blog-post-read-more\">Read More →</a>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Rust Pattern Matching Templates in Probe\nDESCRIPTION: Provides pattern templates for matching Rust functions, structs, and implementation blocks using the Probe tool. Placeholders like `$NAME`, `$$$PARAMS`, `$$$BODY`, `$$$FIELDS`, `$TYPE`, and `$$$METHODS` represent variable parts of the code structure for flexible searching and extraction.\nSOURCE: https://github.com/buger/probe/blob/main/site/supported-languages.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfn $NAME($$$PARAMS) $$$BODY\nstruct $NAME { $$$FIELDS }\nimpl $TYPE { $$$METHODS }\n```\n\n----------------------------------------\n\nTITLE: Linking Core Concepts to Use Cases - Markdown\nDESCRIPTION: Illustrates how to form markdown cross-references from core concept pages to relevant use cases, aiding users in understanding practical applications of core topics. It includes a section title, description, and a bulleted list of use case links. No dependencies are required.\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-cross-references.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n# Language Support\n\n[...content...]\n\n## Using in Your Workflow\n\nOnce you understand the supported languages, you can:\n\n- [Use Probe with AI Code Editors](/mcp-integration) for intelligent code assistance\n- [Build custom tools with the Node.js SDK](/nodejs-sdk) for language-specific processing\n```\n\n----------------------------------------\n\nTITLE: Creating Section-Specific References in Markdown Documentation\nDESCRIPTION: Example of implementing anchor links to reference specific sections within documentation files, allowing for more targeted cross-references in technical documentation.\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-maintenance.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[Search Syntax](/search-functionality#search-syntax)\n```\n\n----------------------------------------\n\nTITLE: Declaring Tree-sitter Grammar Dependency in Cargo.toml - TOML\nDESCRIPTION: Shows how to add a new tree-sitter grammar crate for language support by modifying the dependencies section of Cargo.toml. Replace 'newlang' and the version string as appropriate for the language being added. Required for extending Code Search to new programming languages using tree-sitter.\nSOURCE: https://github.com/buger/probe/blob/main/tests/README.md#2025-04-23_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ntree-sitter-newlang = \"0.20\"\n```\n\n----------------------------------------\n\nTITLE: Linking Directly to Section Anchors in Markdown - Markdown\nDESCRIPTION: Shows how to use markdown anchor links that reference exact sections within a documentation page. This improves navigation granularity and helps users find targeted information quickly. No dependencies required; just standard markdown.\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-cross-references.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\nSee the [search command options](/cli-mode#search-options) for more details.\n```\n\n----------------------------------------\n\nTITLE: Forcing Specific AI Provider in Probe Chat CLI - Bash\nDESCRIPTION: This set of bash commands demonstrates how to force Probe's chat interface to use a specific AI provider (Anthropic, OpenAI, or Google) via the '--force-provider' CLI option. Useful when multiple API keys are set or for testing specific model behavior. Requires 'probe-chat' to be installed (globally or via npx).\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Force using Anthropic Claude\nprobe-chat --force-provider anthropic\n\n# Force using OpenAI\nprobe-chat --force-provider openai\n\n# Force using Google Gemini\nprobe-chat --force-provider google\n```\n\n----------------------------------------\n\nTITLE: Building and Running Probe\nDESCRIPTION: Commands for building the project in different modes and running the application.\nSOURCE: https://github.com/buger/probe/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake run\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake run-release\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Blog Post Cards\nDESCRIPTION: Defines styles for blog post cards including grid layout, hover effects, typography, tags, and responsive design for mobile devices.\nSOURCE: https://github.com/buger/probe/blob/main/site/blog/index.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.blog-post-list {\n  /* display: grid; */\n  /* grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); */\n  /* gap: 2rem; */\n  /* margin-top: 2rem; */\n}\n\n.blog-post-card {\n  margin-top: 1em;\n  border: 1px solid var(--vp-c-divider);\n  border-radius: 8px;\n  padding: 1.5rem;\n  transition: transform 0.2s, box-shadow 0.2s;\n}\n\n.blog-post-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n}\n\n.blog-post-card h3 {\n  margin-top: 0;\n  font-size: 1.3rem;\n}\n\n.blog-post-card h3 a {\n  color: var(--vp-c-brand);\n  text-decoration: none;\n}\n\n.blog-post-meta {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n  margin-bottom: 1rem;\n  font-size: 0.9rem;\n  color: var(--vp-c-text-2);\n}\n\n.blog-post-tags {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  margin-top: 1rem;\n}\n\n.blog-post-tag {\n  font-size: 0.8rem;\n  padding: 0.2rem 0.6rem;\n  border-radius: 4px;\n  background-color: var(--vp-c-brand-soft);\n  color: var(--vp-c-brand-dark);\n}\n\n.blog-post-read-more {\n  display: inline-block;\n  margin-top: 1rem;\n  color: var(--vp-c-brand);\n  font-weight: 500;\n  text-decoration: none;\n}\n\n@media (max-width: 768px) {\n  .blog-post-list {\n    grid-template-columns: 1fr;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing and Code Quality\nDESCRIPTION: Commands for running tests, formatting code, and linting to ensure code quality.\nSOURCE: https://github.com/buger/probe/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake format\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Installing Probe MCP Server Globally using Bash\nDESCRIPTION: This Bash command installs the '@buger/probe-mcp' package globally using npm. This is required for the manual setup method where the AI editor configuration directly references the 'probe-mcp' command.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @buger/probe-mcp@latest\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation\nDESCRIPTION: Command for generating the project documentation.\nSOURCE: https://github.com/buger/probe/blob/main/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake doc\n```\n\n----------------------------------------\n\nTITLE: Implementing Homepage Features with YAML\nDESCRIPTION: Complete example of homepage configuration using YAML frontmatter, showing hero section and feature definitions with various styling options.\nSOURCE: https://github.com/buger/probe/blob/main/site/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: home\n\nhero:\n  name: \"Probe\"\n  text: \"Local, AI-ready\\nCode Exploration\"\n  tagline: \"Open-source tooling that truly understands your codebase.\"\n  \nfeatures:\n  - icon: 🔎\n    title: AST-Aware Code Search\n    details: Search your code with semantic understanding. Find functions, classes, and patterns across your entire codebase.\n    link: /how-it-works\n    linkText: Learn how it works\n    highlight: true\n    \n  - icon: ⚡\n    title: Lightning Fast\n    details: Built on ripgrep and tree-sitter for blazing fast performance. No indexing needed.\n    theme: alt\n    \n  - icon: 🔒\n    title: 100% Local & Private\n    details: Your code stays on your machine. Perfect for sensitive projects.\n    image: /icons/privacy-icon.svg\n---\n```\n\n----------------------------------------\n\nTITLE: Using MCP Client with Probe Agent\nDESCRIPTION: Example JavaScript code showing how to use the search_code tool with an MCP client, including query parameters.\nSOURCE: https://github.com/buger/probe/blob/main/mcp-agent/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await useMcpTool({\n  serverName: 'probe-mcp-agent',\n  toolName: 'search_code',\n  arguments: {\n    query: \"How does the search functionality work in this codebase?\",\n    path: \"/path/to/codebase\"\n  }\n});\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: Environment variables for configuring API keys, URLs, providers, model settings, and security options.\nSOURCE: https://github.com/buger/probe/blob/main/mcp-agent/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# API Keys (required - at least one)\nANTHROPIC_API_KEY=your_anthropic_api_key\nOPENAI_API_KEY=your_openai_api_key\nGOOGLE_API_KEY=your_google_api_key\n\n# API URLs (optional)\nANTHROPIC_API_URL=https://api.anthropic.com/v1\nOPENAI_API_URL=https://api.openai.com/v1\nGOOGLE_API_URL=https://generativelanguage.googleapis.com\n\n# Force specific provider (optional)\nFORCE_PROVIDER=anthropic|openai|google\n\n# Model Configuration (optional)\nMODEL_NAME=claude-3-7-sonnet-latest\n\n# Token Limits (optional)\nMAX_TOKENS=4000\nMAX_HISTORY_MESSAGES=20\n\n# Allowed Folders (optional, but recommended for security)\nALLOWED_FOLDERS=/path/to/repo1,/path/to/repo2\n\n# Setting ALLOWED_FOLDERS restricts code search to only these directories\n# and prevents access to other parts of the filesystem\n\n# Debug Mode (optional)\nDEBUG=true\n```\n\n----------------------------------------\n\nTITLE: Installing Probe MCP Agent via NPM\nDESCRIPTION: Commands for installing the Probe MCP Agent either globally or locally using npm package manager.\nSOURCE: https://github.com/buger/probe/blob/main/mcp-agent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install globally\nnpm install -g @buger/probe-mcp-agent\n\n# Or install locally\nnpm install @buger/probe-mcp-agent\n```\n\n----------------------------------------\n\nTITLE: Using the extract_code Tool in Probe MCP via JSON\nDESCRIPTION: This JSON example shows the usage of the `extract_code` tool. It specifies the base project path and a list containing a file path with a specific line number (`/path/to/your/project/src/main.rs:42`) from which to extract relevant code blocks.\nSOURCE: https://github.com/buger/probe/blob/main/site/mcp-integration.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"/path/to/your/project\",\n  \"files\": [\"/path/to/your/project/src/main.rs:42\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Probe with Vercel AI SDK\nDESCRIPTION: Example of integrating Probe tools with Vercel AI SDK. Demonstrates how to create configured tool instances and use them with the AI SDK for code intelligence tasks.\nSOURCE: https://github.com/buger/probe/blob/main/site/nodejs-sdk.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { generateText } from 'ai';\nimport { searchTool, queryTool, extractTool } from '@buger/probe@latest';\nimport { randomUUID } from 'crypto';\n\n// Generate a session ID\nconst sessionId = randomUUID();\n\n// Create configured tools with the session ID\nconst configOptions = {\n  sessionId,\n  debug: process.env.DEBUG === 'true'\n};\n\n// Create configured tool instances\nconst configuredTools = {\n  search: searchTool(configOptions),\n  query: queryTool(configOptions),\n  extract: extractTool(configOptions)\n};\n\n// Use the configured tools with Vercel AI SDK\nasync function chatWithAI(userMessage) {\n  const result = await generateText({\n    model: provider(modelName),\n    messages: [{ role: 'user', content: userMessage }],\n    system: \"You are a code intelligence assistant. Use the provided tools to search and analyze code.\",\n    tools: configuredTools,\n    maxSteps: 15,\n    temperature: 0.7\n  });\n  \n  return result.text;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default System Message with AI Tools\nDESCRIPTION: Example of using the default system message provided by Buger Probe with AI assistants. Shows integration with Vercel AI SDK.\nSOURCE: https://github.com/buger/probe/blob/main/site/ai-integration.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { tools } from '@buger/probe';\n\n// Use the default system message in your AI application\nconst systemMessage = tools.DEFAULT_SYSTEM_MESSAGE;\n\n// Example with Vercel AI SDK\nconst result = await generateText({\n  model: provider(modelName),\n  messages: [{ role: 'user', content: userMessage }],\n  system: tools.DEFAULT_SYSTEM_MESSAGE,\n  tools: {\n    search: tools.searchTool,\n    query: tools.queryTool,\n    extract: tools.extractTool\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Probe AI Chat Environment Variables\nDESCRIPTION: Environment variable configurations for the Probe AI chat, including API keys, model selection, and debug options.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\n# Use Claude models (recommended)\nexport ANTHROPIC_API_KEY=your_api_key\n\n# Or use OpenAI models\nexport OPENAI_API_KEY=your_api_key\n\n# Override the default model\nexport MODEL_NAME=claude-3-opus-20240229\n\n# Override API URLs (useful for proxies or enterprise deployments)\nexport ANTHROPIC_API_URL=https://your-anthropic-proxy.com\nexport OPENAI_API_URL=https://your-openai-proxy.com/v1\n\n# Enable debug mode for detailed logging\nexport DEBUG=1\n```\n\n----------------------------------------\n\nTITLE: Linking to Related Topics Within a Section - Markdown\nDESCRIPTION: Shows how to reference related topics within the same file or documentation set using markdown. This pattern enhances reader context and discoverability. The snippet only requires standard markdown syntax, with link text and anchor to the relevant sub-section. No special constraints.\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-cross-references.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nLearn more about [search patterns](/search-functionality#patterns) to improve your search results.\n```\n\n----------------------------------------\n\nTITLE: Running Probe Web Interface with npx\nDESCRIPTION: Command to run the Probe web-based chat interface using npx and setting the API key.\nSOURCE: https://github.com/buger/probe/blob/main/README.md#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\n# Run directly with npx (no installation needed)\nnpx -y @buger/probe-web\n\n# Set your API key first\nexport ANTHROPIC_API_KEY=your_api_key\n```\n\n----------------------------------------\n\nTITLE: Advanced MCP Configuration for Probe in JSON\nDESCRIPTION: Advanced JSON configuration for the Probe MCP server, including environment variables for default search paths, maximum tokens, and debug mode. This provides more control over the MCP server's behavior.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/integrating-probe-into-ai-code-editors.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"probe\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp@latest\"\n      ],\n      \"env\": {\n        \"PROBE_DEFAULT_PATHS\": \"/path/to/project1,/path/to/project2\",\n        \"PROBE_MAX_TOKENS\": \"20000\",\n        \"DEBUG\": \"1\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting AI Models for Probe\nDESCRIPTION: Demonstrates how to specify which AI model to use with Probe by setting the MODEL_NAME environment variable. Different options are shown for both Anthropic and OpenAI models.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/deploying-probe-web-interface.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# For Anthropic Claude\nexport MODEL_NAME=claude-3-opus-20240229\n\n# For OpenAI\nexport MODEL_NAME=gpt-4o\n```\n\n----------------------------------------\n\nTITLE: PowerShell installation options for Probe\nDESCRIPTION: Demonstrates various installation options for Probe on Windows, including user-specific installation (default), system-wide installation, custom directory installation, and displaying help information.\nSOURCE: https://github.com/buger/probe/blob/main/site/installation.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n# Install for current user (default)\niwr -useb https://raw.githubusercontent.com/buger/probe/main/install.ps1 | iex\n\n# Install system-wide (requires admin privileges)\niwr -useb https://raw.githubusercontent.com/buger/probe/main/install.ps1 | iex -args \"--system\"\n\n# Install to a custom directory\niwr -useb https://raw.githubusercontent.com/buger/probe/main/install.ps1 | iex -args \"--dir\", \"C:\\Tools\\Probe\"\n\n# Show help\niwr -useb https://raw.githubusercontent.com/buger/probe/main/install.ps1 | iex -args \"--help\"\n```\n\n----------------------------------------\n\nTITLE: Installing Rust on Windows for building Probe from source\nDESCRIPTION: PowerShell commands for downloading and running the Rust installer on Windows, which is required for building Probe from source.\nSOURCE: https://github.com/buger/probe/blob/main/site/installation.md#2025-04-23_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n# Download and run the Rust installer\nInvoke-WebRequest -Uri https://win.rustup.rs/x86_64 -OutFile rustup-init.exe\n.\\rustup-init.exe\n# Follow the on-screen instructions\n```\n\n----------------------------------------\n\nTITLE: Running Probe MCP Server in Debug Mode with Bash\nDESCRIPTION: Bash command to run the Probe MCP server with debug logging enabled. This is useful for troubleshooting integration issues and viewing detailed logs of tool calls and search queries.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/integrating-probe-into-ai-code-editors.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=1 npx -y @buger/probe-mcp@latest\n```\n\n----------------------------------------\n\nTITLE: Verifying Probe installation on macOS/Linux\nDESCRIPTION: Command for verifying that Probe has been installed correctly on macOS or Linux by checking its version. This should display the version number of the installed binary.\nSOURCE: https://github.com/buger/probe/blob/main/site/installation.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nprobe --version\n```\n\n----------------------------------------\n\nTITLE: Example: Linking 'What is Probe?' Core Concept to Use Cases\nDESCRIPTION: This Markdown snippet provides a concrete example of how the main 'What is Probe?' core concepts page should link out to various 'Use Cases' pages, illustrating practical applications like AI editor integration, team chat hosting, and SDK usage.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-cross-references.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n# What is Probe?\n\n[...content about Probe's features...]\n\n## Real-World Applications\n\nProbe can be used in various workflows:\n\n- For AI-assisted coding, see [Using with AI Code Editors](/mcp-integration)\n- For team collaboration, see [Hosting a Team Chat](/web-interface)\n- For custom AI tools, see [Building AI Tools with Node.js SDK](/nodejs-sdk)\n```\n\n----------------------------------------\n\nTITLE: Linking Steps in a Workflow Using Markdown\nDESCRIPTION: This snippet illustrates how to use Markdown links to connect different stages of a user workflow. It links from the MCP server setup page to the AI editor integration page, guiding the user through sequential tasks.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-cross-references.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nAfter [setting up the MCP server](/mcp-server#setting-up-the-mcp-server), you can [integrate it with your AI editor](/mcp-integration#editor-integration).\n```\n\n----------------------------------------\n\nTITLE: Adding Tree-sitter Grammar Dependencies in TOML\nDESCRIPTION: Configuration for adding a new tree-sitter grammar dependency to the project's Cargo.toml file.\nSOURCE: https://github.com/buger/probe/blob/main/site/adding-languages.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\n# Existing dependencies...\ntree-sitter = \"0.20.10\"\ntree-sitter-rust = \"0.20.4\"\n# Add your new language\ntree-sitter-mylanguage = \"0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Linking to Major Documentation Sections in Markdown\nDESCRIPTION: This snippet demonstrates the Markdown syntax for creating a link to a major section of the documentation, specifically linking to the 'Core Concepts & Setup' page located at '/installation'.\nSOURCE: https://github.com/buger/probe/blob/main/site/documentation-cross-references.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFor more information on installation, see the [Core Concepts & Setup](/installation) section.\n```\n\n----------------------------------------\n\nTITLE: Installing Probe via npm Command\nDESCRIPTION: Bash command for installing the Probe package using npm, intended to be included in the Quick Start documentation.\nSOURCE: https://github.com/buger/probe/blob/main/site/contributing/documentation-maintenance.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @buger/probe@latest\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment\nDESCRIPTION: Commands for installing git hooks and configuring the upstream remote repository.\nSOURCE: https://github.com/buger/probe/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake install-hooks\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/buger/probe.git\n```\n\n----------------------------------------\n\nTITLE: Searching Code with Probe CLI\nDESCRIPTION: The 'search' command allows users to find code across their entire codebase. It supports various options for refining searches and controlling output.\nSOURCE: https://github.com/buger/probe/blob/main/site/cli-mode.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nprobe search <QUERY> [PATH] [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Hybrid Ranking Algorithm Formula\nDESCRIPTION: Formula showing how the hybrid ranking algorithm combines TF-IDF and BM25 scores with a weighting factor for improved search results.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-functionality.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nCombined = α * TF-IDF + (1-α) * BM25\n```\n\n----------------------------------------\n\nTITLE: BM25 Ranking Formula\nDESCRIPTION: Mathematical formula for the BM25 ranking algorithm, which improves upon TF-IDF by accounting for document length and term frequency saturation.\nSOURCE: https://github.com/buger/probe/blob/main/site/search-functionality.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nBM25(block, query) = ∑ IDF(term) * (TF(term, block) * (k1 + 1)) / (TF(term, block) + k1 * (1 - b + b * (block_length / average_block_length)))\n```\n\n----------------------------------------\n\nTITLE: Common XML Structure for Probe Output\nDESCRIPTION: The shared XML structure used by all three Probe commands. It includes result elements and a summary element with count, total_bytes, and total_tokens elements.\nSOURCE: https://github.com/buger/probe/blob/main/site/output-formats.md#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<probe_results>\n  <result>\n    <!-- Result elements -->\n  </result>\n  <!-- More results... -->\n  <summary>\n    <count>5</count>\n    <total_bytes>1024</total_bytes>\n    <total_tokens>256</total_tokens>\n  </summary>\n</probe_results>\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Code Search Project - Bash\nDESCRIPTION: Details commands for building the Rust project in debug/release modes and running all or specific tests. These invocations rely on Cargo, the Rust build tool, and aid in development and CI environments. No special parameters are needed unless unit tests or build options are altered.\nSOURCE: https://github.com/buger/probe/blob/main/tests/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo test\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo test test_search_single_term\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Search Paths for Probe MCP Server in JSON\nDESCRIPTION: This advanced JSON configuration shows how to specify default search directories for the Probe MCP server. It uses the `env` property to set the `PROBE_DEFAULT_PATHS` environment variable, allowing the MCP server to automatically target specific project paths when performing searches initiated by the AI editor.\nSOURCE: https://github.com/buger/probe/blob/main/site/use-cases/ai-code-editors.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"probe\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@buger/probe-mcp\"\n      ],\n      \"env\": {\n        \"PROBE_DEFAULT_PATHS\": \"/path/to/project1,/path/to/project2\"\n      }\n    }\n  }\n}\n```"
  }
]