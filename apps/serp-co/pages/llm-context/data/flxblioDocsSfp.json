[
  {
    "owner": "flxbl-io",
    "repo": "docs-sfp",
    "content": "TITLE: Configuring Package Dependencies in sfdx-project.json\nDESCRIPTION: Example configuration showing how to define package dependencies in sfdx-project.json, including unlocked packages, source packages, and external dependencies. Demonstrates version management, package aliases, and dependency relationships between packages.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/concepts/dependency-management.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"packageDirectories\": [\n    {\n      \"path\": \"util\",\n      \"package\": \"Expense-Manager-Util\",\n      \"versionName\": \"Winter '25\",\n      \"versionDescription\": \"Welcome to Winter 2025 Release of Expense Manager Util Package\",\n      \"versionNumber\": \"4.7.0.NEXT\"\n    },\n    {\n      \"path\": \"exp-core\",\n      \"default\": false,\n      \"package\": \"ExpenseManager\",\n      \"versionName\": \"v 3.2\",\n      \"versionDescription\": \"Winter 2025 Release\",\n      \"versionNumber\": \"3.2.0.NEXT\",\n      \"dependencies\": [\n        {\n          \"package\": \"ExpenseManager-Util\",\n          \"versionNumber\": \"4.7.0.LATEST\"\n        },\n          {\n          \"package\": \"TriggerFramework\",\n          \"versionNumber\": \"1.7.0.LATEST\"\n        },\n        {\n          \"package\": \"External Apex Library - 1.0.0.4\"\n        }\n      ]\n    },\n    {\n      \"path\": \"src/exp-core-config\",\n      \"package\": \"Expense-Manager-Org-Config\",\n      \"type\" : \"source\",\n      \"versionName\": \"Winter '25\",\n      \"versionDescription\": \"Welcome to Winter 2025 Release of Expense Manager Util Package\",\n      \"versionNumber\": \"4.7.0.NEXT\"\n    },\n  ],\n  \"sourceApiVersion\": \"47.0\",\n  \"packageAliases\": {\n    \"TriggerFramework\": \"0HoB00000004RFpLAM\",\n    \"Expense Manager - Util\": \"0HoB00000004CFpKAM\",\n    \"External Apex Library@1.0.0.4\": \"04tB0000000IB1EIAW\",\n    \"Expense Manager\": \"0HoB00000004CFuKAM\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building All Packages with SFP CLI\nDESCRIPTION: Command to build artifacts for all packages in a project directory using a specified DevHub and branch.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/overview.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp build -v <devhub_name> --branch <value>\n```\n\n----------------------------------------\n\nTITLE: Using SFP Install Command for Salesforce Artifact Deployment\nDESCRIPTION: This command installs Salesforce artifacts from a directory to a target org with various configuration options. It supports selective package deployment, source tracking, and deployment based on release configurations. The command has aliases 'orchestrator deploy' and 'deploy'.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/core/install.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ @flxbl-io/sfp install -o <value> [--artifactdir <value>] [--waittime <value>] [-t <value>] [-b <value>\n    --skipifalreadyed] [-p <value>] [--releaseconfig <value>] [--enablesourcetracking] [-g <value>] [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -b, --baselineorg=<value>         The org against which the package skip should be baselined\n  -g, --logsgroupsymbol=<value>...  Symbol used by CICD platform to group/collapse logs in the console. Provide an\n                                    opening group, and an optional closing group symbol.\n  -o, --targetorg=<value>           (required) Username or alias of the target org.\n  -p, --artifacts=<value>...        Only install artifacts for the provided packages, use comma separated list of\n                                    package names if there are multiple packages\n  -t, --tag=<value>                 Tag the deploy with a label, useful for identification in metrics\n      --artifactdir=<value>         [default: artifacts] The directory containing artifacts to be deployed\n      --enablesourcetracking        Enable source tracking on the packages being deployed to an org\n      --loglevel=<option>           [default: info] logging level for this command invocation\n                                    <options: trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL>\n      --releaseconfig=<value>       Path to the config file which determines how the packages are deployed based on the\n                                    filters in release config\n      --skipifalreadyinstalled      Skip the package installation if the package is already installed in the org\n      --waittime=<value>            [default: 120] Wait time for command to finish in minutes\n\nDESCRIPTION\n  Installs artifact(s) from a given directory to a target org\n\nALIASES\n  $ @flxbl-io/sfp orchestrator deploy\n  $ @flxbl-io/sfp deploy\n\nEXAMPLES\n  $ sfp install -o <username>\n```\n\n----------------------------------------\n\nTITLE: Usage of @flxbl-io/sfp publish command\nDESCRIPTION: This snippet shows the usage syntax for the 'publish' command, including required and optional flags. It demonstrates how to publish packages with various options such as specifying artifact directory, git tagging, and NPM-specific configurations.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/core/publish.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ @flxbl-io/sfp publish -d <value> [-p -v <value>] [-t <value>] [--gittag] [--gittaglimit <value>]\n    [--gittagage <value>] [--pushgittag] [--scope <value> [--npm | -f <value>]] [--npmtag <value> ] [--npmrcpath <value>\n    ] [-g <value>] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n```\n\n----------------------------------------\n\nTITLE: Validating against a pool of prepared scratch orgs in Bash\nDESCRIPTION: This example demonstrates how to use the 'validate pool' command to validate changes against a pool of previously prepared scratch orgs labeled 'review'. It uses the DevHub org and includes a diff check.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/validating-a-change/overview.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp validate pool  -p review \\\n                   -v devhub  \\\n                   --diffcheck\n```\n\n----------------------------------------\n\nTITLE: Strict Validation Analysis of Salesforce Project\nDESCRIPTION: Example of using the 'sfp project:analyze' command with strict validation flags. This command will fail if duplicates are found or if there are unclaimed packages with issues.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/analysing-a-project/overview.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:analyze --fail-on duplicates --fail-on-unclaimed\n```\n\n----------------------------------------\n\nTITLE: Using @flxbl-io/sfp validate pool Command\nDESCRIPTION: This command validates changes in a project repository against a scratch org prepared by the prepare command. It allows for selecting scratch orgs from specified pools and offers various options for customizing the validation process.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/advanced/validate.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ @flxbl-io/sfp validate pool -p <value> -v <value> --mode individual|fastfeedback|thorough|ff-release-config|thorough-release-config [--installdeps] [--releaseconfig <value>] [--coveragepercent <value>] [--disablesourcepkgoverride] [-x] [--orginfo] [--keys <value>] [--basebranch <value>] [--tag <value>] [--disableparalleltesting] [--disablediffcheck] [--disableartifactupdate] [-g <value>] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n```\n\n----------------------------------------\n\nTITLE: Using SFP Build Command in Bash\nDESCRIPTION: This snippet demonstrates the usage of the '@flxbl-io/sfp build' command, including its various flags and options. The command is used to build artifacts of packages in a Salesforce project, with options for specifying the Dev Hub, branch, log level, and various build configurations.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/core/build.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ @flxbl-io/sfp build -v <value> --branch <value> [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL] [--apiversion <value>] [--diffcheck] [-p <value>] [-r <value>] [-f <value>] [--artifactdir <value>] [--waittime <value>] [--number <value>] [--executorcount <value>] [--tag <value>] [--releaseconfig <value>]\n```\n\n----------------------------------------\n\nTITLE: Installing a Salesforce Package Artifact to a Target Org\nDESCRIPTION: This command installs previously built package artifacts to a target Salesforce org. The -o parameter specifies the target org alias or username where the package should be installed.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/getting-started/build-and-install-an-artifact.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsfp install -o <TargetOrgAlias/TargetOrgUsername>\n```\n\n----------------------------------------\n\nTITLE: Building Changed Packages with SFP CLI\nDESCRIPTION: Command to selectively build artifacts only for packages that have been changed, using the --diffcheck flag to determine which packages need rebuilding.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/overview.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsfp build -v <devhub_name> --branch <value>  --diffcheck\n```\n\n----------------------------------------\n\nTITLE: Validating against a target org in Bash\nDESCRIPTION: This example shows how to use the 'validate org' command to validate changes against a specific target org named 'ci'. It uses the DevHub org and includes the option to install dependencies.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/validating-a-change/overview.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsfp validate org -u  ci \\\n                 -v devhub  \\\n                 --installdeps  \\\n```\n\n----------------------------------------\n\nTITLE: Building a Single Package with SFP CLI\nDESCRIPTION: Command to build a single package using SFP CLI. The command specifies the devhub organization, branch name, and the specific package to build.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/building-an-artifact-for-package-individually.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n// Build a single package\nsfp build -v devhub --branch=main -p feature-mgmt\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Definition in sfdx-project.json\nDESCRIPTION: A sample configuration in sfdx-project.json that defines a package with the minimum required attributes. Each package requires a path, package name, and version number at minimum.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/configuring-a-project/creating-a-package.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// A sample sfdx-project.json with a packag\n{\n  \"packageDirectories\": [\n    {\n      \"path\": \"src-env-specific-pre\",\n      \"package\": \"env-specific-pre\",\n      \"versionNumber\": \"4.7.0.NEXT\",\n    },\n     ...\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Salesforce Package Artifact with SFP\nDESCRIPTION: This command generates a zipped artifact file for each package defined in the sfdx-project.json file. The -v parameter specifies the DevHub alias or username to use for the build process.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/getting-started/build-and-install-an-artifact.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp build -v <DevHubAlias/DevHubUsername>\n```\n\n----------------------------------------\n\nTITLE: Installing Artifacts to DevHub using SFP CLI\nDESCRIPTION: This command uses the SFP CLI to install a set of artifacts to the DevHub org. It specifies the target org alias and the directory containing the artifacts to be deployed.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/installing-an-artifact/overview.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp install -u devhub --artifactdir artifacts\n```\n\n----------------------------------------\n\nTITLE: Installing SFP Pro Edition from Downloaded File\nDESCRIPTION: This command installs the SFP pro edition globally using NPM, from a locally downloaded .tgz file. The file path needs to be replaced with the actual path to the downloaded file.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/getting-started/install-sfp.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g <path-to-downloaded-file>\n```\n\n----------------------------------------\n\nTITLE: Triggering Apex Tests using @flxbl-io/sfp CLI\nDESCRIPTION: This command triggers Apex unit tests in a Salesforce org. It supports various test levels, including RunAllTestsInPackage, and allows for validation of individual class code coverage. The command offers multiple flags for customization, such as specifying test levels, packages, and coverage requirements.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/utilities/apex-tests.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ @flxbl-io/sfp apextests trigger -o <value> [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL] [--apiversion <value>] [-l RunSpecifiedTests|RunApexTestSuite|RunLocalTests|RunAllTestsInOrg|RunAllTestsInPackage] [-n <value>] [-c] [--validatepackagecoverage] [--specifiedtests <value>] [--apextestsuite <value>] [-p <value>] [-w <value>]\n```\n\n----------------------------------------\n\nTITLE: Executing SFP Release Command with NPM Registry\nDESCRIPTION: Example of using the sfp release command to deploy artifacts using a release definition file and NPM registry. The command requires a path to the release definition YAML file, target org specification, and NPM scope configuration.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/releasing-artifacts/overview.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  sfp release -p path/to/releasedefinition.yml \\\n              -u myorg --npm --scope myscope \\\n```\n\n----------------------------------------\n\nTITLE: Using SFP Release Command CLI\nDESCRIPTION: Command line interface usage for the @flxbl-io/sfp release command. Supports releasing artifacts defined in release definitions to target orgs with options for NPM registry integration, changelog generation, and package installation configuration.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/core/release.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ @flxbl-io/sfp release -p <value> -o <value> [--scope <value> [--npm | -f <value>]] [--npmrcpath <value> ]\n    [-g <value>] [-t <value>] [--waittime <value>] [--keys <value>] [-d <value>] [-b <value> --generatechangelog] [-v\n    <value>] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -b, --branchname=<value>            Repository branch in which the changelog files are located\n  -d, --directory=<value>             Relative path to directory to which the changelog should be generated, if the\n                                      directory doesnt exist, it will be created\n  -f, --scriptpath=<value>            (Optional: no-NPM) Path to script that authenticates and downloads artifacts from\n                                      the registry\n  -g, --logsgroupsymbol=<value>...    Symbol used by CICD platform to group/collapse logs in the console. Provide an\n                                      opening group, and an optional closing group symbol.\n  -o, --targetorg=<value>             (required) Username or alias of the target org.\n  -p, --releasedefinition=<value>...  (required) Path to release definiton yaml, Multiple paths can be seperated by\n                                      commas\n  -t, --tag=<value>                   Tag the release with a label, useful for identification in metrics\n  -v, --devhubalias=<value>           Username or alias of the Dev Hub org.\n      --generatechangelog             Create a release changelog\n      --keys=<value>                  Keys to be used while installing any managed package dependencies. Required format\n                                      is a string of key-value pairs separated by spaces e.g. packageA:pw123\n                                      packageB:pw123 packageC:pw123\n      --loglevel=<option>             [default: info] logging level for this command invocation\n                                      <options: trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL>\n      --npm                           Download artifacts from a pre-authenticated private npm registry\n      --npmrcpath=<value>             Path to .npmrc file used for authentication to registry. If left blank, defaults\n                                      to home directory\n      --scope=<value>                 (required for NPM) User or Organisation scope of the NPM package\n      --waittime=<value>              [default: 120] Wait time for package installation\n```\n\n----------------------------------------\n\nTITLE: Skipping Already Installed Artifacts in Salesforce Package Deployment (Bash)\nDESCRIPTION: This command deploys a set of artifacts to a DevHub org, skipping the installation of artifacts that are already present. It uses the 'skipifalreadyinstalled' flag to prevent redundant installations.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/installing-an-artifact/controlling-aspects-of-installation.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp install -u devhub --artifactdir artifacts --skipifalreadyinstalled\n```\n\n----------------------------------------\n\nTITLE: Defining Package Dependencies in sfdx-project.json for Salesforce Unlocked Packages\nDESCRIPTION: This snippet demonstrates how to configure package directories, define package dependencies, and specify package aliases in the sfdx-project.json file for Salesforce unlocked packages. It includes examples of version numbering, dependency management, and external package references.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/concepts/supported-package-types/unlocked-packages.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"packageDirectories\": [\n    {\n      \"path\": \"util\",\n      \"default\": true,\n      \"package\": \"Expense-Manager-Util\",\n      \"versionName\": \"Winter '20\",\n      \"versionDescription\": \"Welcome to Winter 2020 Release of Expense Manager Util Package\",\n      \"versionNumber\": \"4.7.0.NEXT\"\n    },\n    {\n      \"path\": \"exp-core\",\n      \"default\": false,\n      \"package\": \"ExpenseManager\",\n      \"versionName\": \"v 3.2\",\n      \"versionDescription\": \"Winter 2020 Release\",\n      \"versionNumber\": \"3.2.0.NEXT\",\n      \"dependencies\": [\n        {\n          \"package\": \"ExpenseManager-Util\",\n          \"versionNumber\": \"4.7.0.LATEST\"\n        },\n          {\n          \"package\": \"TriggerFramework\",\n          \"versionNumber\": \"1.7.0.LATEST\"\n        },\n        {\n          \"package\": \"External Apex Library - 1.0.0.4\"\n        }\n      ]\n    }\n  ],\n  \"sourceApiVersion\": \"47.0\",\n  \"packageAliases\": {\n    \"TriggerFramework\": \"0HoB00000004RFpLAM\",\n    \"Expense Manager - Util\": \"0HoB00000004CFpKAM\",\n    \"External Apex Library@1.0.0.4\": \"04tB0000000IB1EIAW\",\n    \"Expense Manager\": \"0HoB00000004CFuKAM\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Review Environment Using SFP CLI\nDESCRIPTION: Command for fetching a review environment from a specified pool and assigning it to a pull request/issue. Supports configuration of pool type, branch, issue number, and timing parameters. Requires SFP Pro (post August 24) and GitHub integration with appropriate APP_ID & PRIVATE_KEY credentials.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/review-environments/fetch-a-review-environment.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp reviewenv fetch --repository <owner/repo> --pool <pool> --poolType <type> --branch <branch> --issue <issue> [--devhubAlias <alias>] [--wait <minutes>] [--leaseFor <minutes>]\n```\n\n----------------------------------------\n\nTITLE: Running SFP Build Command with Package-Based Artifact Limiting\nDESCRIPTION: Example of limiting artifacts by explicitly specifying package names using the -p flag in the SFP build command. This approach allows building only selected packages while testing locally.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/limiting-artifacts-to-be-built.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n// Limit build by certain packages\nsfp build -v devhub --branch=main -p sales-ui,sales-channels\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Dependencies in sfdx-project.json\nDESCRIPTION: Example configuration showing how to define package dependencies in sfdx-project.json. Demonstrates setup of multiple package directories with dependencies, version numbers, and package aliases including both unlocked and managed packages.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/pools/pool-operations/preparing-pools/handling-dependencies.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"packageDirectories\": [\n    {\n      \"path\": \"util\",\n      \"default\": true,\n      \"package\": \"Expense-Manager-Util\",\n      \"versionName\": \"Winter '22\",\n      \"versionDescription\": \"Welcome to Winter 2022 Release of Expense Manager Util Package\",\n      \"versionNumber\": \"4.7.0.NEXT\"\n    },\n    {\n      \"path\": \"exp-core\",\n      \"default\": false,\n      \"package\": \"ExpenseManager\",\n      \"versionName\": \"v 3.2\",\n      \"versionDescription\": \"Winter 2022 Release\",\n      \"versionNumber\": \"3.2.0.NEXT\",\n      \"dependencies\": [\n        {\n          \"package\": \"ExpenseManager-Util\",\n          \"versionNumber\": \"4.7.0.LATEST\"\n        },\n          {\n          \"package\": \"TriggerFramework\",\n          \"versionNumber\": \"1.7.0.LATEST\"\n        },\n        {\n          \"package\": \"External Apex Library - 1.0.0.4\"\n        }\n      ]\n    }\n  ],\n  \"sourceApiVersion\": \"59.0\",\n  \"packageAliases\": {\n    \"TriggerFramework\": \"0HoB00000004RFpLAM\",\n    \"Expense Manager - Util\": \"0HoB00000004CFpKAM\",\n    \"External Apex Library@1.0.0.4\": \"04tB0000000IB1EIAW\",\n    \"Expense Manager\": \"0HoB00000004CFuKAM\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SFP Server Prerequisites using Bash Script\nDESCRIPTION: Curl command to download and execute the SFP server installation script that sets up all required prerequisites. The script requires sudo privileges and runs from the flxbl-io GitHub repository.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/installing-sfp-server.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://raw.githubusercontent.com/flxbl-io/sfp-pro-installation/main/install.sh | sudo -E bash\n```\n\n----------------------------------------\n\nTITLE: Preparing Scratch Org Pool\nDESCRIPTION: This command prepares a pool of scratch orgs with all packages installed upfront, optimizing validation for incoming changes. It supports custom pool configurations and package installation keys.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/advanced/pool.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ @flxbl-io/sfp pool prepare -v <value> [-f <value>] [--npmrcpath <value>] [--keys <value>] [-g <value>] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n```\n\n----------------------------------------\n\nTITLE: Release Definition YAML Configuration\nDESCRIPTION: Example release definition file that specifies the release version, artifacts, and changelog configuration. This file is used as input for the fetch command to determine which artifacts to retrieve.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/publishing-and-fetching-artifacts/fetching-artifacts.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrelease: Sprint-2-13-11-6844956242\nskipIfAlreadyInstalled: true\nskipArtifactUpdate: false\nartifacts:\n  feature-management: 1.0.19-6844956242\npromotePackagesBeforeDeploymentToOrg: prod\nchangelog:\n  workItemFilters:\n    - (FGK|FFK)-[0-9]{3,4}\n  workItemUrl: https://flxbl.atlassian.net/browse\n  limit: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring SFP Publish Command for Git Tagging\nDESCRIPTION: This snippet demonstrates the command-line options for the SFP publish command related to git tagging. It includes options for creating, pushing, and managing git tags for published artifacts.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/publishing-and-fetching-artifacts/publish-artifact.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  --gittag                          Tag the current commit ID with an annotated tag containing the package name and version -\n                                    does not push tag\n  --gittagage=<value>               Specifies the number of days,for a tag to be retained,any tags older the provided number\n                                    will be deleted\n  --gittaglimit=<value>             Specifies the minimum number of  tags to be retained for a package\n  --pushgittag                      Pushes the git tags created by this command to the repo, ensure you have access to the repo\n```\n\n----------------------------------------\n\nTITLE: Expanding Package Dependencies in sfdx-project.json\nDESCRIPTION: This command expands the dependency list in the sfdx-project.json file for each package, fixing any gaps in dependencies from dependent packages. It requires a Dev Hub username and offers an option to overwrite the existing configuration file.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/utilities/dependency.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ @flxbl-io/sfp dependency expand -v <value> [-o] [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -o, --overwrite                     Flag to overwrite existing sfdx-project.json file\n  -v, --targetdevhubusername=<value>  (required) Username or alias of the Dev Hub org.\n      --loglevel=<option>             [default: info] logging level for this command invocation\n                                      <options: trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL>\n\nDESCRIPTION\n  Expand the dependency list in sfdx-project.json file for each package, fix the gap of dependencies from its dependent\n  packages\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of sfp project:pull Command\nDESCRIPTION: Shows the basic syntax for using the 'sfp project:pull' command to retrieve changes from a Salesforce org.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/pull-changes-from-your-org.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:pull -o <org> [flags]\n```\n\n----------------------------------------\n\nTITLE: SFP Artifact Fetch Command\nDESCRIPTION: Command line instruction to fetch artifacts using the SFP CLI tool. The command uses a release definition file and specifies npm package scope for artifact retrieval.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/publishing-and-fetching-artifacts/fetching-artifacts.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsfp artifacts fetch -p Sprint2-13-11.yaml --npm --scope flxbl\n```\n\n----------------------------------------\n\nTITLE: Reconciling Local Profiles with Target Org\nDESCRIPTION: The 'profile reconcile' command reconciles profiles in the local directory with the attributes available in the target org. It allows specifying target org, folders, profiles, and destination folder for reconciled profiles.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/utilities/profile.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ @flxbl-io/sfp profile reconcile -o <value> [-f <value>] [-n <value>] [-d <value>] [-s] [--apiversion <value>] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n```\n\n----------------------------------------\n\nTITLE: Using @flxbl-io/sfp validate org Command\nDESCRIPTION: This command validates changes in a project repository against a specified Salesforce org. It supports various modes of validation and offers options for customizing the validation process.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/advanced/validate.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ @flxbl-io/sfp validate org -o <targetorg> --mode individual|fastfeedback|thorough|ff-release-config|thorough-release-config [--releaseconfig <value>] [--coveragepercent <value>] [--diffcheck] [--disableartifactupdate] [-g <value>] [--basebranch <value>] [--orginfo] [--installdeps] (--disablesourcepkgoverride -v <value>) [--disableparalleltesting] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n```\n\n----------------------------------------\n\nTITLE: Defining Artifacts and Versions in YAML for SFP Project\nDESCRIPTION: This YAML snippet shows how to define the artifacts that constitute the release, along with their version numbers. The version format is X.Y.Z-BuildNumber, where X is Major, Y is Minor, Z is Patch, and BuildNumber is the build that produced the package.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/releasing-artifacts/release-definitions.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nartifacts:\n  feature-management: 1.0.19-6844956242\n  apex-logger: 1.0.20-89\n```\n\n----------------------------------------\n\nTITLE: Optimizing Package Dependencies by Removing Duplicates\nDESCRIPTION: This command shrinks the dependency list in the sfdx-project.json file by removing duplicate dependencies that already exist in dependent packages. It requires a Dev Hub username and can optionally overwrite the existing configuration file.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/utilities/dependency.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ @flxbl-io/sfp dependency shrink -v <value> [-o] [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -o, --overwrite                     Flag to overwrite existing sfdx-project.json file\n  -v, --targetdevhubusername=<value>  (required) Username or alias of the Dev Hub org.\n      --loglevel=<option>             [default: info] logging level for this command invocation\n                                      <options: trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL>\n\nDESCRIPTION\n  Shrink the dependency list in sfdx-project.json file for each package, remove duplicate dependencies that already\n  exist in its dependent packages\n```\n\n----------------------------------------\n\nTITLE: Configuring a Diff Package in sfdx-project.json\nDESCRIPTION: Example configuration for setting up a diff package named 'unpackaged' in sfdx-project.json. The configuration shows how to mark a package as a diff type using the \"type\":\"diff\" property, along with other standard package properties like path, default, versionName, etc.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/concepts/supported-package-types/diff-package.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// sfdx-project.json\n\n{\n  \"packageDirectories\": [\n    {\n      \"path\": \"util\",\n      \"default\": false,\n      \"package\": \"Expense-Manager-Util\",\n      \"versionName\": \"Winter '24\",\n      \"versionDescription\": \"Welcome to Winter 2024 Release of Expense Manager Util Package\",\n      \"versionNumber\": \"4.7.0.NEXT\"\n    },\n     {\n      \"path\": \"unpackaged\",\n      \"default\": true,\n      \"package\": \"unpackaged\",\n      \"versionName\": \"v3.2\",\n      \"type\":\"diff\"\n    }\n  ],\n  \"sourceApiVersion\": \"58.0\",\n  \"packageAliases\": {\n    \"TriggerFramework\": \"0HoB00000004RFpLAM\",\n    \"Expense Manager - Util\": \"0HoB00000004CFpKAM\",\n    \"External Apex Library@1.0.0.4\": \"04tB0000000IB1EIAW\",\n    \"Expense Manager\": \"0HoB00000004CFuKAM\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching SFP artifacts from NPM registry\nDESCRIPTION: Command to fetch artifacts from an NPM-compatible registry using a release definition file. Supports both NPM and custom script-based authentication methods.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/advanced/artifacts.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ @flxbl-io/sfp artifacts fetch -d <value> [-p <value>] [--scope <value> [--npm | -f <value>]] [--npmrcpath <value>\n    ] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -d, --artifactdir=<value>        (required) [default: artifacts] Directory to save downloaded artifacts\n  -f, --scriptpath=<value>         (Optional: no-NPM) Path to script that authenticates and downloads artifacts from the\n                                   registry\n  -p, --releasedefinition=<value>  Path to YAML file containing map of packages and package versions to download\n      --loglevel=<option>          [default: info] logging level for this command invocation\n                                   <options: trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL>\n      --npm                        Download artifacts from a pre-authenticated private npm registry\n      --npmrcpath=<value>          Path to .npmrc file used for authentication to registry. If left blank, defaults to\n                                   home directory\n      --scope=<value>              (required for NPM) User or Organisation scope of the NPM package\n\nDESCRIPTION\n  Fetch sfp artifacts from a NPM compatible registry using a release definition file\n\nEXAMPLES\n  $ sfp artifacts:fetch -p myreleasedefinition.yaml -f myscript.sh\n\n  $ sfp artifacts:fetch -p myreleasedefinition.yaml --npm --scope myscope --npmrcpath path/to/.npmrc\n```\n\n----------------------------------------\n\nTITLE: Example of using @flxbl-io/sfp publish with NPM\nDESCRIPTION: This snippet provides a simple example of how to use the 'publish' command to publish packages to an NPM registry. It demonstrates the basic usage with the --npm flag.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/core/publish.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sfp publish --npm\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes Using Source Tracking\nDESCRIPTION: Example of pushing changes to an org using source tracking functionality, which efficiently tracks and deploys only the changes made locally since the last sync.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/push-changes-to-your-org.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:push -o myOrg\n```\n\n----------------------------------------\n\nTITLE: Examples of Triggering Apex Tests\nDESCRIPTION: These examples demonstrate how to use the apextests:trigger command with different options. The first example runs local tests in a scratch org, while the second runs all tests in a specific package and validates individual class coverage.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/utilities/apex-tests.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sfp apextests:trigger -o scratchorg -l RunLocalTests -s\n\n$ sfp apextests:trigger -o scratchorg -l RunAllTestsInPackage -n <mypackage> -c\n```\n\n----------------------------------------\n\nTITLE: SFP Pool Sandbox Fetch Example (Bash)\nDESCRIPTION: A practical example of the fetch command that retrieves a sandbox from 'dev-pool' for a specific feature branch and issue, with a lease duration of 60 minutes.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/pools/sandbox-pools/fetch-a-sandbox-from-pool.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsfp pool sandbox fetch --repository myorg/myrepo --pool dev-pool --branch feature/new-feature --issue 1234 --leasefor 60\n```\n\n----------------------------------------\n\nTITLE: Using SFP Pool Sandbox Fetch Command (Bash)\nDESCRIPTION: The basic command syntax for fetching a sandbox from a pool using the SFP CLI tool. This command assigns an available sandbox to a specific issue or pull request in a repository.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/pools/sandbox-pools/fetch-a-sandbox-from-pool.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp pool sandbox fetch --repository <owner/repo> --pool <pool-name> --branch <branch-name> --issue <issue-number> [--devhubalias <alias>] [--wait <minutes>] [--leasefor <minutes>]\n```\n\n----------------------------------------\n\nTITLE: Building Sales Domain Packages Using CLI\nDESCRIPTION: Command to build all packages defined in the sales domain release configuration using the SFP CLI tool.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/building-a-domain.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsfp build --releaseconfig sales.yaml -v devhub --branch main \n```\n\n----------------------------------------\n\nTITLE: Configuring Org-Dependent Unlocked Package in sfdx-project.json\nDESCRIPTION: This JSON snippet demonstrates how to configure an org-dependent unlocked package in the sfdx-project.json file, including attributes to skip testing and coverage validation during the validation process with sfpowerscripts.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/concepts/supported-package-types/org-dependent-unlocked-packages.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Org dependent unlocked package with additonal attributes\n\n  \"packageDirectories\": [\n    {\n      \"path\": \"src/core/core-crm\",\n      \"package\": \"core-crm\",\n      \"versionNumber\": \"4.7.0.NEXT\",\n      \"skipTesting\": true,\n      \"skipCoverageValidation\": true\n    },\n     ...\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Flow Activation Command Usage\nDESCRIPTION: Command syntax for activating flows in a target Salesforce org. Requires target org specification and optionally accepts developer name and namespace prefix parameters. Includes configurable logging levels.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/utilities/flow.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ @flxbl-io/sfp flow activate -o <value> [-f <value>] [-p <value>] [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -f, --developername=<value>    The developer name of the flow\n  -o, --targetorg=<value>        (required) Username or alias of the target org.\n  -p, --namespaceprefix=<value>  Use to specify a specific namespace prefix\n      --loglevel=<option>        [default: info] logging level for this command invocation\n                                 <options: trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL>\n```\n\n----------------------------------------\n\nTITLE: Basic SFP Dependency Command Usage\nDESCRIPTION: Examples of using the sfp dependency:explain command to analyze dependencies for all packages or a specific package.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/dependency-management/explain-dependencies.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Explain dependencies for all packages\nsfp dependency:explain\n\n# Explain dependencies for a specific package\nsfp dependency:explain -p <package-name>\n```\n\n----------------------------------------\n\nTITLE: Basic SFP Sandbox Login Command Syntax\nDESCRIPTION: Demonstrates the syntax for the sandbox login command in SFP. Two alternative command formats are shown, both requiring a sandbox name parameter.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/sandbox/login-to-sandbox.md#2025-04-18_snippet_0\n\nLANGUAGE: sh-session\nCODE:\n```\n$ sfp sandbox:login -n <string> [flags]\n$ sfp org:login:sandbox -n <string> [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Config for Domain-Based Artifact Limiting in YAML\nDESCRIPTION: A release configuration file example showing how to restrict artifacts to specific components (sales-ui and sales-channels) while defining additional release properties. This YAML configuration can be referenced in build commands to limit which artifacts are processed.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/limiting-artifacts-to-be-built.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# release-config for sales\nreleaseName: sales\npool: sales-pool\nexcludeAllPackageDependencies: true \nincludeOnlyArtifacts:\n  - sales-ui\n  - sales-channels\nreleasedefinitionProperties:\n  skipIfAlreadyInstalled: true\n  usePackageDiffDeploymentMode: true\n  promotePackagesBeforeDeploymentToOrg: prod\n  changelog:\n    workItemFilters:\n      -  (AKG|GIK)-[0-9]{2,5}\n    workItemUrl: https://example.atlassian.net/browse\n    limit: 30\n```\n\n----------------------------------------\n\nTITLE: Enhanced SFDX Project Configuration with Package Attributes\nDESCRIPTION: Extended SFDX project configuration adding package and versionNumber attributes required for SFP CLI compatibility.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/getting-started/setup-source-project.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"packageDirectories\" : [ \n    {\n       \"package\": \"force-app\",\n       \"versionNumber\": \"1.0.0.NEXT\",\n       \"path\": \"force-app\",\n       \"default\": true\n     }, \n    { \"path\" : \"unpackaged\" },  // You can repeat the same for additonal directories\n    { \"path\" : \"utils\" }  // You can repeat the same for additonal directories\n   ],\n\"namespace\": \"\", \n\"sfdcLoginUrl\" : \"https://login.salesforce.com\", \n\"sourceApiVersion\": \"60.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Profile Changes from Org to Local Project\nDESCRIPTION: The 'profile merge' command merges changes made directly in the Salesforce org to the profile files in the local project. It supports various flags for specifying target org, folders, profiles, and metadata types.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/utilities/profile.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ @flxbl-io/sfp profile merge -o <value> [-f <value>] [-n <value>] [-m <value>] [-d] [--apiversion <value>] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n```\n\n----------------------------------------\n\nTITLE: Generating Release Definition using SFP CLI\nDESCRIPTION: Command to generate a release definition file using the SFP CLI tool. It takes parameters for branch name, commit reference, output directory, release configuration, and release name. The command generates the definition based on specified inputs and can optionally push to a git repository.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/releasing-artifacts/generating-a-release-definition.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n sfp releasedefinition:generate -b releasedefns  \\\n                                -c  main  \\\n                                -d releasedefns_directory \\\n                                -f  ${{inputs.releaseconfig}} \\\n                                -n ${{env.RELEASE_NAME}}\n                                \n```\n\n----------------------------------------\n\nTITLE: Running SFP Project Analysis Command in Bash\nDESCRIPTION: Basic usage of the 'sfp project:analyze' command with optional flags for customizing the analysis process. The command can analyze Salesforce projects, run linters, and generate reports in various formats.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/analysing-a-project/overview.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:analyze [flags]\n```\n\n----------------------------------------\n\nTITLE: SFP CLI Quickbuild Command Usage\nDESCRIPTION: Command line interface usage for the @flxbl-io/sfp quickbuild command, including all available flags and options. The command builds package artifacts without dependency validation and supports features like parallel execution, diff-based building, and custom artifact directories.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/core/quickbuild.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n@flxbl-io/sfp quickbuild -v <value> --branch <value> [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL] [--apiversion <value>] [--diffcheck] [-p\n    <value>] [-r <value>] [-f <value>] [--artifactdir <value>] [--waittime <value>] [--buildnumber <value>]\n    [--executorcount <value>] [--tag <value>] [--releaseconfig <value>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Duplicate Check Analysis in Salesforce Project\nDESCRIPTION: Command for running duplicate check analysis with failure conditions for duplicates and unclaimed components.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/analysing-a-project/duplicate-check.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:analyze --fail-on duplicates --fail-on-unclaimed\n```\n\n----------------------------------------\n\nTITLE: Installing sfpowerscripts-artifact Unlocked Package in Salesforce Org\nDESCRIPTION: This command installs the sfpowerscripts-artifact package in a Salesforce org. The package is used to track installed artifacts, enabling sfp to skip installations of existing versions. It uses the Salesforce CLI to install the package with specific security settings and a timeout.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/getting-started/setup-salesforce-org.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsf package install --package 04t1P000000ka9mQAA -o <your_org_alias> --security-type=AdminsOnly --wait=120\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Scratch Org\nDESCRIPTION: This command deletes a particular scratch org in the pool. It's designed for use in pipelines with correct permissions or by administrators.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/advanced/pool.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ @flxbl-io/sfp pool org delete -o <value> -v <value> [--apiversion <value>] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n```\n\n----------------------------------------\n\nTITLE: Checking Review Environment Status with SFP CLI\nDESCRIPTION: This command checks the status of review environments assigned to a specific pull request or issue. It requires the repository path and issue number, with optional filters for pool, pool type, and branch.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/review-environments/check-review-environment-status.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp reviewenv check --repository <owner/repo> --issue <issue> [--pool <pool>] [--poolType <type>] [--branch <branch>]\n```\n\n----------------------------------------\n\nTITLE: Promoting SFP artifacts for unlocked packages\nDESCRIPTION: Command to promote artifacts, primarily used for unlocked packages with code coverage greater than 75%. This requires specifying the artifact directory and target Dev Hub org.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/advanced/artifacts.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ @flxbl-io/sfp artifacts promote -v <value> -d <value> [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -d, --artifactdir=<value>           (required) [default: artifacts] The directory where artifacts are located\n  -v, --targetdevhubusername=<value>  (required) Username or alias of the Dev Hub org.\n      --loglevel=<option>             [default: info] logging level for this command invocation\n                                      <options: trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL>\n\nDESCRIPTION\n  Promotes artifacts predominantly for unlocked packages with code coverage greater than 75%\n\nALIASES\n  $ @flxbl-io/sfp orchestrator promote\n\nEXAMPLES\n  $ sfp promote -d path/to/artifacts -v <org>\n```\n\n----------------------------------------\n\nTITLE: Installing Artifacts with Baseline Org Comparison in Salesforce (Bash)\nDESCRIPTION: This command deploys artifacts to a QA org, skipping already installed ones and using a DevHub org as a baseline for comparison. It demonstrates the use of 'baselineorg' parameter to ensure consistent installations across different orgs in the production path.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/installing-an-artifact/controlling-aspects-of-installation.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsfp install -u qa \\\n           --artifactdir artifacts \\\n           --skipifalreadyinstalled --baselineorg devhub\n```\n\n----------------------------------------\n\nTITLE: Example of SFP Sandbox Monitor Command\nDESCRIPTION: Practical example of the monitor command that monitors multiple sandbox pool configuration files using a specified Dev Hub and updates statuses in the GitHub repository.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/pools/sandbox-pools/monitor-sandbox-pools.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsfp pool sandbox monitor -v my-devhub -r myorg/myrepo -f config/pool-config-1.json config/pool-config-2.json\n```\n\n----------------------------------------\n\nTITLE: Deleting Pooled Scratch Orgs\nDESCRIPTION: This command deletes pooled scratch orgs from the Scratch Org Pool. It supports various flags for specifying the target Dev Hub, tag, and deletion options.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/advanced/pool.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ @flxbl-io/sfp pool delete -v <value> [-t <value>] [-i | -a] [-o] [--apiversion <value>] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n```\n\n----------------------------------------\n\nTITLE: Executing SFP Repository Patch Command in Bash\nDESCRIPTION: This command generates a dynamic branch with packages patched based on a release configuration file. It requires specifying release definitions, source branch, and target branch. Additional options include NPM-related flags and logging configuration.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/advanced/repo.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ @flxbl-io/sfp repo patch -p <value> -s <value> -t <value> [--scope <value> [--npm | -f <value>]]\n    [--npmrcpath <value> ] [-g <value>] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n```\n\n----------------------------------------\n\nTITLE: Validation Mode Command Flags\nDESCRIPTION: Command line flags used to specify different validation modes in SFP\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/validating-a-change/different-types-of-validation.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--mode=individual\n```\n\nLANGUAGE: bash\nCODE:\n```\n--mode=fastfeedback\n```\n\nLANGUAGE: bash\nCODE:\n```\n--mode=thorough\n```\n\nLANGUAGE: bash\nCODE:\n```\n--mode=ff-release-config\\n--releaseconfig=<value>\n```\n\nLANGUAGE: bash\nCODE:\n```\n--mode=thorough-release-config\\n--releaseconfig=<value>\n```\n\nLANGUAGE: bash\nCODE:\n```\n--disableparalleltesting\n```\n\n----------------------------------------\n\nTITLE: Using SFP CLI to List Sandboxes\nDESCRIPTION: Basic usage of the sandbox:list and sandbox:status commands to retrieve information about sandboxes from a Salesforce production org. The commands accept various flags to filter results and format output.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/sandbox/list-sandbox.md#2025-04-18_snippet_0\n\nLANGUAGE: sh-session\nCODE:\n```\n$ sfp sandbox:list [flags]\n$ sfp sandbox:status [flags]\n```\n\n----------------------------------------\n\nTITLE: Fetching Scratch Org Using SFP Pool Command\nDESCRIPTION: Command example showing how to fetch a scratch org from a development pool using the SFP CLI tool. The output displays installed managed packages, artifacts, and scratch org details including login credentials and expiry date.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/pools/pool-operations/fetch-a-scratch-org.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp pool fetch -t dev-pool -v devhub\n\nFetching a scratch org from pool dev-pool in Org 00D6F000002Xfaixxx\nEnabling source tracking, this will take a bit of time, please hang on\nCopying the repository to /var/folders/0n/qs0txqqj6p7gkjlztgmf224h0000gn/T/tmp-11226-pTuia24bl8Gs\nSuccessfully created temporary repository at /var/folders/0n/qs0txqqj6p7gkjlztgmf224h0000gn/T/tmp-11226-pTuia24bl8Gs with commit HEAD\nTotal Artifacts to Analyze: 1\n\nInstalled managed packages:\nPackages installed in org:\n                                                              \n Package             Version       Type      isOrgDependent \n FSL                 238.0.35.1    Managed   false          \n Conga Composer      8.174.0.15    Managed   false          \n Conga Batch         8.22.0.3      Managed   false          \n Vlocity Insurance   890.333.0.1   Managed   false          \n                                                              \nArtifacts installed in org:\n                                                                                          \n Artifact                      Version         Commit Id                                \n utils                         1.2.2.1        f79efddfd7f57e52d63222f6d9c23fb1e6a47152 \n\n                                                                                          \n======== Scratch org details ========\n KEY         VALUE                                                                                                                                               \n ─────────── ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── \n Id          2SR5m0000001d0vxxx                                                                                                                                  \n orgId       00D2O000000Hxxx                                                                                                                                     \n loginURL    https://efficiency-data-0000.my.salesforce.com/                                                                                                     \n username    test-zey1higmxxxx@example.com                                                                                                                       \n password    **********                                                                                                                                       \n expiryDate  2023-03-03                                                                                                                                          \n sfdxAuthUrl force://PlatformCLI::*******@efficiency-data-0000.my.salesforce.com \n status      Assigned                                                                                                                                            \n----------------------------------------------------------------------------------------------------\nSuccesfully fetched a scratch org and enabled source tracking  in 00:00:11.291\n----------------------------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Using SFP CLI Dependency Shrink Command\nDESCRIPTION: Examples of using the sfp dependency:shrink command to optimize project dependencies. Shows basic usage and overwrite option for modifying sfdx-project.json directly.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/dependency-management/shrink-dependencies.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create a shrunk version of the project configuration\nsfp dependency:shrink\n\n# Overwrite the existing sfdx-project.json with shrunk dependencies\nsfp dependency:shrink --overwrite\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre/Post Deployment Scripts in package.json for Salesforce\nDESCRIPTION: This JSON snippet demonstrates how to configure pre-deployment and post-deployment scripts in the package.json file for a Salesforce data package. It shows the usage of 'preDeploymentScript' and 'postDeploymentScript' attributes.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/configuring-installation-behaviour-of-a-package/pre-post-deployment-script.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageDirectories\": [\n      {    \n      \"path\": \"src/data-package-cl\",\n      \"package\": \"data-package-cloudlending\",\n      \"type\": \"data\",\n      \"versionNumber\": \"2.0.10.NEXT\",\n      \"preDeploymentScript\": \"scripts/enableEmailDeliverability.sh\"\n      \"postDeploymentScript\": \"scripts/pushData.sh\"\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Analyzing Specific Directory in Salesforce Project\nDESCRIPTION: Example of using the 'sfp project:analyze' command to analyze a specific directory within a Salesforce project. This command targets the './force-app/main/default' directory for analysis.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/analysing-a-project/overview.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:analyze -s ./force-app/main/default\n```\n\n----------------------------------------\n\nTITLE: Using SFP Impact Package Command in Bash\nDESCRIPTION: This command identifies packages impacted by changes from the last known tags. It requires specifying a base branch for git tag references and supports various logging levels.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/advanced/impact.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ @flxbl-io/sfp impact package --basebranch <value> [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  --basebranch=<value>  (required) The base branch on which the git tags should be used\n  --loglevel=<option>   [default: info] logging level for this command invocation\n                        <options: trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL>\n\nDESCRIPTION\n  Figures out impacted packages of a project, due to a change from the last known tags\n```\n\n----------------------------------------\n\nTITLE: Configuring SFP Publish Command for NPM Registry\nDESCRIPTION: This snippet shows the command-line options for the SFP publish command related to NPM registry configuration. It includes options for specifying the NPM registry, authentication, and package scoping.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/publishing-and-fetching-artifacts/publish-artifact.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  --npm                             Upload artifacts to a pre-authenticated private npm registry\n  --npmrcpath=<value>               Path to .npmrc file used for authentication to registry. If left blank, defaults to home\n                                    directory\n  --npmtag=<value>                  Add an optional distribution tag to NPM packages. If not provided, the 'latest' tag is set\n                                    to the published version.\n  --scope=<value>                   (required for NPM) User or Organisation scope of the NPM package\n```\n\n----------------------------------------\n\nTITLE: Configuring Scratch Org Pool Definition in JSON\nDESCRIPTION: Example JSON configuration for creating a scratch org pool named 'DEV-POOL' with 20 orgs. Demonstrates key settings like expiry, batch size, and artifact fetching configuration.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/pools/defining-a-pool.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tag\": \"DEV-POOL\",\n    \"maxAllocation\": 20,\n    \"expiry\": 10,\n    \"batchSize\": 10,\n    \"configFilePath\": \"config/project-scratch-def.json\",\n    \"relaxAllIPRanges\": true,\n    \"installAll\": true,\n    \"enableSourceTracking\": true,\n    \"retryOnFailure\": true,\n    \"succeedOnDeploymentErrors\": true,\n    \"fetchArtifacts\": {\n        \"npm\": {\n            \"scope\": \"myproject\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SFP Sandbox Command Examples\nDESCRIPTION: Example usage of the SFP CLI sandbox commands, demonstrating how to filter sandbox listings by name and status. The first example filters by sandbox name, while the second filters by completion status.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/sandbox/list-sandbox.md#2025-04-18_snippet_1\n\nLANGUAGE: sh-session\nCODE:\n```\n$ sfp sandbox:list --name mySandbox1 -v myDevHub\n$ sfp sandbox:status --status Completed -v myDevHub\n```\n\n----------------------------------------\n\nTITLE: Analyzing Specific Packages with JSON Output\nDESCRIPTION: Example of using the 'sfp project:analyze' command to analyze specific packages ('core' and 'utils') and output the results in JSON format for machine readability.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/analysing-a-project/overview.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:analyze -p core,utils --output-format json\n```\n\n----------------------------------------\n\nTITLE: CLI Usage - SFP Changelog Generation Command\nDESCRIPTION: Command-line interface for generating release changelogs. The command requires artifact directory location, release name, and work item filter regex. Optional parameters include branch name, directory path, logging level, and work item URL configuration. The tool generates comprehensive changelogs including artifact versions, related work items, and commit information.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/advanced/changelog.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ @flxbl-io/sfp changelog generate -d <value> -n <value> -w <value> [--limit <value>] [--workitemurl <value>]\n    [--directory <value>] (--nopush -b <value>) [--showallartifacts] [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -b, --branchname=<value>      (required) Repository branch in which the changelog files are located\n  -d, --artifactdir=<value>     (required) [default: artifacts] Directory containing sfp artifacts\n  -n, --releasename=<value>     (required) Name of the release for which to generate changelog\n  -w, --workitemfilter=<value>  (required) Regular expression used to search for work items (user stories) introduced in\n                                release\n      --directory=<value>       Relative path to directory to which the release defintion file should be generated, if\n                                the directory doesnt exist, it will be created\n      --limit=<value>           limit the number of releases to display in changelog markdown\n      --loglevel=<option>       [default: info] logging level for this command invocation\n                                <options: trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL>\n      --nopush                  Do not push the changelog to a repository to the provided branch\n      --showallartifacts        Show all artifacts in changelog markdown, including those that have not changed in the\n                                release\n      --workitemurl=<value>     Generic URL for work items. Each work item ID will be appended to the URL, providing\n                                quick access to work items\n```\n\n----------------------------------------\n\nTITLE: Listing Scratch Orgs in a Pool using SFP CLI\nDESCRIPTION: This command lists all active scratch orgs with the specified pool tag. It displays both available and in-progress scratch orgs, including details such as org ID, username, expiry date, status, and login URL. The command requires the pool tag (-t) and the DevHub alias (-v) as parameters.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/pools/pool-operations/list-scratch-orgs-in-a-pool.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp pool list -t dev-pool -v devhub\n\n======== Scratch org Details ========\nUnused Scratch Orgs in the Pool : 1 \n\nScratch Orgs being provisioned in the Pool : 1 \n\n TAG                   ORG ID          USERNAME                      EXPIRY DATE STATUS                   LOGIN U R L                                      \n ──────── ─────────────── ───────────────────────────── ─────────── ──────────────────────── ──────────────────────────────────────────────── \n dev-pool 00D2O000000xxxx test-zey1higmxxxx@example.com 2023-03-03  Provisioning in progress https://efficiency-data-0000.my.salesforce.com/  \n dev-pool 00D2N000000xxxx test-ofakal3gxxxx@example.com 2023-03-03  Available                https://inspiration-saas-0000.my.salesforce.com/ \n```\n\n----------------------------------------\n\nTITLE: Configuring Release Parameters in YAML for flxbl Projects\nDESCRIPTION: This YAML configuration example defines a release named 'core' with specific artifacts to include, dependencies to exclude, and changelog configuration properties. It demonstrates how to set up a release configuration that controls package management across different lifecycle stages.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/configuring-a-project/release-config.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n​releaseName: core\npool: core_pool\nincludeOnlyArtifacts:\n  - src-env-specific-pre\n  - src-env-specific-alias-pre\n  - core-crm\n  - telephony-service\nexcludePackageDependencies:\n  - Genesys Cloud for Salesforce\n  - Marketing Cloud\nreleasedefinitionProperties:\n  changelog:\n    workItemFilters:\n      -  BRO-[0-9]{3,4}\n    workItemUrl: https://bro.atlassian.net/browse\n    limit: 30\n```\n\n----------------------------------------\n\nTITLE: Sandbox Definition File Format for SFP\nDESCRIPTION: JSON configuration structure for defining sandbox properties when using a definition file with the SFP sandbox:create command. Includes options for sandbox name, description, source, and various configuration settings.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/sandbox/create-sandbox.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sandboxName\": \"MySandbox\",\n  \"description\": \"My sandbox description\",\n  \"sourceSandbox\": \"SourceSandboxName\",\n  \"apexClassId\": \"01p...\",\n  \"autoActivate\": true,\n  \"copyChatter\": true,\n  \"copyArchivedActivities\": true,\n  \"licenseType\": \"Developer\",\n  \"templateId\": \"0TT...\",\n  \"historyDays\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Scratch Orgs from Pool\nDESCRIPTION: This command retrieves an active/unused scratch org from the scratch org pool. It allows setting aliases, default usernames, and sending credentials to other users.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/advanced/pool.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ @flxbl-io/sfp pool fetch -v <value> -t <value> [--json] [-a <value>] [-s <value>] [-d] [--nosourcetracking] [--apiversion <value>] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n```\n\n----------------------------------------\n\nTITLE: Analyzing Specific Packages in Salesforce Project\nDESCRIPTION: Example of using the 'sfp project:analyze' command to analyze specific packages within a Salesforce project. This command targets the 'core' and 'utils' packages for analysis.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/analysing-a-project/overview.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:analyze -p core,utils\n```\n\n----------------------------------------\n\nTITLE: Using the SFP Sandbox Create Command\nDESCRIPTION: Command syntax for creating a Salesforce sandbox using the SFP CLI tool. Shows the standard usage with required parameters for target org, sandbox name, and optional source sandbox.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/sandbox/create-sandbox.md#2025-04-18_snippet_0\n\nLANGUAGE: sh-session\nCODE:\n```\n$ sfp sandbox:create -v <string> -n <string> -s <string> [flags]\n$ sfp org:create:sandbox -v <string> -n <string> -s <string> [flags]\n```\n\n----------------------------------------\n\nTITLE: Initial SFDX Project Configuration JSON Structure\nDESCRIPTION: Basic SFDX project configuration showing package directories setup with force-app, unpackaged, and utils paths.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/getting-started/setup-source-project.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \n\"packageDirectories\" : [ \n    { \"path\": \"force-app\", \"default\": true}, \n    { \"path\" : \"unpackaged\" }, \n    { \"path\" : \"utils\" } \n  ],\n\"namespace\": \"\", \n\"sfdcLoginUrl\" : \"https://login.salesforce.com\", \n\"sourceApiVersion\": \"60.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Domain-Limited Validation using SFP CLI\nDESCRIPTION: This command demonstrates how to use the SFP CLI to validate an organization with a specific focus on domains defined in a release config. It employs the 'thorough-release-config' mode and performs a diff check against the dev hub.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/validating-a-change/limiting-validation-by-domain.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp validate org        -u ci \n                         -v devhub \\\n                         --diffcheck \\\n                         --mode=thorough-release-config \\\n                         --releaseconfig=<path-to-release-config>\n```\n\n----------------------------------------\n\nTITLE: Monitoring Sandbox Pools Command\nDESCRIPTION: Command to monitor sandbox pool status, handling activations, expirations, and deletions using configuration files.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/pools/sandbox-pools/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsfp pool sandbox monitor -v <devhub-alias> -r <owner/repo> -f <path/to/config-file> [<path/to/config-file>...]\n```\n\n----------------------------------------\n\nTITLE: Extended Data Package Options Configuration in JSON\nDESCRIPTION: Complete configuration options for data packages including permission sets, deployment scripts, and aliasing options.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/concepts/supported-package-types/data-packages.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"path\": \"path--to--package\",\n    \"package\": \"name--of-the-package\",\n    \"versionNumber\": \"X.Y.Z.[NEXT/BUILDNUMBER]\",\n    \"type\": \"data\",\n    \"aliasfy\": \"<boolean>\",\n    \"assignPermSetsPreDeployment\": [\"\",\"\"],\n    \"assignPermSetsPostDeployment\": [\"\",\"\"],\n    \"preDeploymentScript\":\"<path>\",\n    \"postDeploymentScript\":\"<path>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Org Dependent Unlocked Package with SF CLI\nDESCRIPTION: Command to create a new Salesforce org-dependent unlocked package using the SF CLI. This package type depends on components in the installation org and includes additional flags for org dependency.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/configuring-a-project/creating-a-package.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsf package:create --name <package_name> --packagetype Unlocked  --org-dependent      --nonamespace -o <alias_for_org>\n```\n\n----------------------------------------\n\nTITLE: Using the sfp project:push Command\nDESCRIPTION: Basic syntax for the sfp project:push command which deploys source from local project to a specified Salesforce org.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/push-changes-to-your-org.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:push -o <org> [flags]\n```\n\n----------------------------------------\n\nTITLE: Requesting a Lock on a Resource using SFP GitHub Resource Command\nDESCRIPTION: This command acquires a lock on a specific resource in a GitHub repository. It returns a ticket ID representing the lock. Options include specifying the repository, resource name, and lease duration.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/helpers/managing-shared-resources.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sfp gh resource enqueue --repository owner/repo --resource resource-name --leasefor 1800\n```\n\n----------------------------------------\n\nTITLE: Installing External Package Dependencies\nDESCRIPTION: This command installs all external dependencies of a given Salesforce project. It requires both a target org username and a Dev Hub username, with an optional parameter for installation keys for key-protected packages.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/utilities/dependency.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ @flxbl-io/sfp dependency install -o <value> -v <value> [-k <value>] [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -k, --installationkeys=<value>      Installation key for key-protected packages (format is packagename:key -->\n                                      core:key nCino:key vlocity:key to allow some packages without installation key)\n  -o, --targetusername=<value>        (required) Username or alias of the target org.\n  -v, --targetdevhubusername=<value>  (required) Username or alias of the Dev Hub org.\n      --loglevel=<option>             [default: info] logging level for this command invocation\n                                      <options: trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL>\n\nDESCRIPTION\n  Install all the external dependencies of a given project\n```\n\n----------------------------------------\n\nTITLE: Pull Changes for Specific Package\nDESCRIPTION: Shows how to pull changes for a specific package from a Salesforce org.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/pull-changes-from-your-org.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:pull -o myOrg -p myPackage\n```\n\n----------------------------------------\n\nTITLE: Configuring Artifact Installation Skip Option in YAML for SFP Project\nDESCRIPTION: This YAML snippet demonstrates how to set the option to skip artifact installation if the same version is already installed in the target org.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/releasing-artifacts/release-definitions.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nskipIfAlreadyInstalled: true\n```\n\n----------------------------------------\n\nTITLE: Flow Cleanup Command Usage\nDESCRIPTION: Command syntax for cleaning up inactive flows in a target Salesforce org. Requires target org specification and optionally accepts developer name and namespace prefix parameters. Includes configurable logging levels.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/utilities/flow.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ @flxbl-io/sfp flow cleanup -o <value> [-f <value>] [-p <value>] [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -f, --developername=<value>    The developer name of the flow\n  -o, --targetorg=<value>        (required) Username or alias of the target org.\n  -p, --namespaceprefix=<value>  Use to specify a specific namespace prefix\n      --loglevel=<option>        [default: info] logging level for this command invocation\n                                 <options: trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL>\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Lock using SFP GitHub Resource Command\nDESCRIPTION: This command waits for a lock to be acquired, blocking until success or timeout. Options include specifying the repository, resource name, ticket ID, and maximum wait time.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/helpers/managing-shared-resources.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sfp gh resource wait --repository owner/repo --resource resource-name --ticketid ticket-id --timeout 1800\n```\n\n----------------------------------------\n\nTITLE: Basic Sandbox Deletion Command Syntax\nDESCRIPTION: Shows the basic command syntax for deleting Salesforce sandboxes using two alternative command formats. Both commands require a sandbox name parameter and support additional flags.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/sandbox/delete-sandbox.md#2025-04-18_snippet_0\n\nLANGUAGE: sh-session\nCODE:\n```\n$ sfp sandbox:delete -n <string> [flags]\n$ sfp org:delete:sandbox -n <string> [flags]\n```\n\n----------------------------------------\n\nTITLE: Deleting Orphaned Scratch Orgs with sfpowerscripts\nDESCRIPTION: Command to delete orphaned scratch orgs that were created but not properly initialized due to timeout issues. Uses the pool:delete command with the -o flag to target orphaned orgs and -v to specify the DevHub.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/pools/pool-operations/delete-pools.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp pool:delete -o -v flxbl\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Promotion in YAML for SFP Project\nDESCRIPTION: This YAML snippet demonstrates how to set up package promotion before deployment to a specific org. If the target org alias matches, unlocked packages are promoted before installation.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/releasing-artifacts/release-definitions.md#2025-04-18_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npromotePackagesBeforeDeploymentToOrg: <targetOrgAlias>\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes for a Specific Package\nDESCRIPTION: Example of pushing changes for a specific package to a Salesforce org, which limits the deployment scope to only the specified package.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/push-changes-to-your-org.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:push -o myOrg -p myPackage\n```\n\n----------------------------------------\n\nTITLE: Initializing Sandbox Pool Command\nDESCRIPTION: Command to initialize sandbox pools using configuration files, dev hub alias, and repository information.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/pools/sandbox-pools/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsfp pool sandbox init -f <path/to/config-file> -v <devhub-alias> -r <owner/repo>\n```\n\n----------------------------------------\n\nTITLE: Example Sandbox Pool Initialization\nDESCRIPTION: Practical example of initializing sandbox pools with specific configuration file, DevHub alias, and GitHub repository.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/pools/sandbox-pools/sandbox-pool-initialization.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsfp pool sandbox init -f config/my-sandbox-pools.json -v my-devhub -r myorg/myrepo\n```\n\n----------------------------------------\n\nTITLE: Installing sfpowerscripts Scratch Org Pooling Package in Salesforce DevHub\nDESCRIPTION: This command installs the sfpowerscripts Scratch Org Pooling Unlocked Package in the DevHub org. The package adds custom fields, validation rules, and workflow to the ScratchOrgInfo object to enable scratch org pool commands.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/pools/setting-up-your-salesforce-org-for-scratch-org-pools.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsf package install -p 04t1P000000katQQAQ -o <Your_DevHub_Username> -r -a package -s AdminsOnly -w 30\n```\n\n----------------------------------------\n\nTITLE: Review Environment Command References in flxbl\nDESCRIPTION: Key command examples for managing review environments including fetching with lease duration, extending leases, and environment status management.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/review-environments/considerations.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp reviewenv fetch --leaseFor\n```\n\nLANGUAGE: bash\nCODE:\n```\nsfp reviewenv fetch --wait\n```\n\nLANGUAGE: bash\nCODE:\n```\nsfp reviewenv extend\n```\n\n----------------------------------------\n\nTITLE: Deployment Architecture Diagram in Mermaid\nDESCRIPTION: Detailed diagram showing the deployment architecture including edge layer, API services, processing components, and external services integration within a cloud instance.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview.md#2025-04-18_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"Cloud Instance\"\n        subgraph \"Edge Layer\"\n            Caddy[Caddy Proxy]\n            TLS[TLS Termination]\n        end\n\n        subgraph \"API Services\"\n            API[API Gateway]\n            Auth[Auth Service]\n            Tasks[Task Service]\n            Docs[Document Service]\n        end\n\n        subgraph \"Processing\"\n            Queue[Task Queues]\n            CriticalW[Critical Workers]\n            NormalW[Normal Workers]\n            BatchW[Batch Workers]\n        end\n\n        subgraph \"Queue\"\n            Redis[(Redis)]\n        end\n    end\n\n    subgraph \"External Services\"\n        Supabase[(Supabase DB)]\n        Secrets[(Secret Store)]\n    end\n\n    Caddy --> API\n    API --> Auth\n    API --> Tasks\n    API --> Docs\n\n    Tasks --> Queue\n    Queue --> CriticalW\n    Queue --> NormalW\n    Queue --> BatchW\n\n    CriticalW --> Redis\n    NormalW --> Redis\n    BatchW --> Redis\n\n    Auth --> Supabase\n    Docs --> Supabase\n    Tasks --> Supabase\n```\n\n----------------------------------------\n\nTITLE: Configuring Changelog Generation in YAML for SFP Project\nDESCRIPTION: This YAML snippet shows how to configure changelog generation settings, including work item filters, work item URL, and the limit on the number of changes to include.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/releasing-artifacts/release-definitions.md#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nchangelog:\n  workItemFilters:\n    - (FGK|FFK)-[0-9]{3,4}\n  workItemUrl: https://flxbl.atlassian.net/browse\n  limit: 30\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes from a Specific Source Path\nDESCRIPTION: Example of pushing changes from a specific source path to a Salesforce org, which limits the deployment scope to only the files in the specified directory.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/push-changes-to-your-org.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:push -o myOrg -s force-app/main/default\n```\n\n----------------------------------------\n\nTITLE: Sandbox Deletion Examples\nDESCRIPTION: Demonstrates practical examples of deleting single and multiple Salesforce sandboxes. Shows how to specify target DevHub username and delete multiple sandboxes using comma-separated values.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/sandbox/delete-sandbox.md#2025-04-18_snippet_1\n\nLANGUAGE: sh-session\nCODE:\n```\n$ sfp sandbox:delete -n SIT -v my-sandbox-org\n$ sfp sandbox:delete -n SIT,UAT,DEV -v my-sandbox-org\n```\n\n----------------------------------------\n\nTITLE: Checking SFP Version\nDESCRIPTION: This command displays the installed version of SFP, along with the operating system and Node.js version information.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/getting-started/install-sfp.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsfp --version\n```\n\n----------------------------------------\n\nTITLE: Basic Analysis of All Packages in Salesforce Project\nDESCRIPTION: Example of using the 'sfp project:analyze' command to perform a basic analysis of all packages in a Salesforce project without specifying any additional flags.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/analysing-a-project/overview.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:analyze\n```\n\n----------------------------------------\n\nTITLE: JSON Output Structure for sfp project:pull\nDESCRIPTION: Provides the structure of the JSON output when using the '--json' flag with the 'sfp project:pull' command. This includes information about files, conflicts, and errors.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/pull-changes-from-your-org.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hasError\": boolean,\n  \"errorMessage\": string,\n  \"files\": [\n    {\n      \"fullName\": string,\n      \"type\": string,\n      \"createdByName\": string,\n      \"lastModifiedByName\": string,\n      \"createdDate\": string,\n      \"lastModifiedDate\": string\n    }\n  ],\n  \"conflicts\": [\n    {\n      \"fullName\": string,\n      \"type\": string,\n      \"filePath\": string,\n      \"state\": string\n    }\n  ],\n  \"errors\": [\n    {\n      \"fileName\": string,\n      \"problem\": string\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes and Ignoring Conflicts\nDESCRIPTION: Example of pushing changes to an org while ignoring conflicts, which overrides conflicts and potentially overwrites org metadata.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/push-changes-to-your-org.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:push -o myOrg -i\n```\n\n----------------------------------------\n\nTITLE: Pull Changes from Specific Source Path\nDESCRIPTION: Demonstrates pulling changes from a specific source path in a Salesforce org.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/pull-changes-from-your-org.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:pull -o myOrg -s force-app/main/default\n```\n\n----------------------------------------\n\nTITLE: Defining Release Structure in YAML for SFP Project\nDESCRIPTION: This YAML snippet defines the structure of a release definition. It includes the release name, deployment options, artifact versions, promotion settings, and changelog configuration.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/releasing-artifacts/release-definitions.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrelease: Sprint-2-13-11-6844956242\nskipIfAlreadyInstalled: true\nartifacts:\n  feature-management: 1.0.19-6844956242\n  apex-logger: 1.0.20-89\npromotePackagesBeforeDeploymentToOrg: prod\nchangelog:\n  workItemFilters:\n    - (FGK|FFK)-[0-9]{3,4}\n  workItemUrl: https://flxbl.atlassian.net/browse\n  limit: 30\n```\n\n----------------------------------------\n\nTITLE: Validating SFP Installation\nDESCRIPTION: This command lists all available SFP commands and their summaries, helping to verify that the installation was successful and all features are accessible.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/getting-started/install-sfp.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsfp commands\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-Deployment Permission Set Assignment in Package Manifest\nDESCRIPTION: Example configuration showing how to assign multiple Health Cloud permission sets to the deployment user before package installation. This ensures the deployment user has the necessary permissions for the package installation and testing to succeed.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/configuring-installation-behaviour-of-a-package/permissionset-assignment.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n {\n      \"path\": \"src/health-cloud\",\n      \"package\": \"health-cloud\",\n      \"versionName\": \"health-cloud-1.0\",\n      \"versionNumber\": \"1.0.0.0\",\n      \"assignPermSetsPreDeployment\": [\n        \"HealthCloudFoundation\",\n        \"HealthCloudSocialDeterminants\",\n        \"HealthCloudAppointmentManagement\",\n        \"HealthCloudVideoCalls\",\n        \"HealthCloudUtilizationManagement\",\n        \"HealthCloudMemberServices\",\n        \"HealthCloudAdmin\",\n        \"HealthCloudApi\",\n        \"HealthCloudLimited\",\n        \"HealthCloudPermissionSetLicense\",\n        \"HealthCloudStandard\",\n        \"HealthcareAssociatedInfectionDiseaseGroupAccess\"\n      ]\n    },\n```\n\n----------------------------------------\n\nTITLE: Reporting Metrics in SFP CLI\nDESCRIPTION: Command syntax for reporting custom metrics to SFP supported metric providers. The command requires specifying the metric name, type (gauge, counter, or timer), and optionally the value and tags for the metric.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/advanced/metrics.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ @flxbl-io/sfp metrics report -m <value> -t gauge|counter|timer [-v <value>] [-g <value>] [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -g, --tags=<value>       tags for metric\n  -m, --metric=<value>     (required) metrics to publish\n  -t, --type=<option>      (required) type of metric\n                           <options: gauge|counter|timer>\n  -v, --value=<value>      value of metric\n      --loglevel=<option>  [default: info] logging level for this command invocation\n                           <options: trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL>\n\nDESCRIPTION\n  Report a custom metric to any sfp supported metric provider\n\nEXAMPLES\n  $ sfp metrics:report -m <metric> -t <type> -v <value>\n```\n\n----------------------------------------\n\nTITLE: Pull Changes Using Source Tracking\nDESCRIPTION: Demonstrates how to pull changes from a Salesforce org using source tracking, if available.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/pull-changes-from-your-org.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:pull -o myOrg\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Ignore Settings in sfdx-project.json\nDESCRIPTION: Example of using the ignoreOnStage attribute in the sfdx-project.json file to exclude specific packages from the build process. The sample shows how to configure a package to be ignored during the build stage.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/limiting-artifacts-to-be-built.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// Sample sfdx project json \n{\n  \"packageDirectories\": [\n    {\n      \"path\": \"./src-env-specific-pre\",\n      \"package\": \"src-env-specific-pre\",\n      \"versionNumber\": \"1.0.0.0\",\n      \"ignoreOnStage\": [\n        \"build\"\n      ]\n    },\n    {\n      \"path\": \"./src/frameworks/feature-mgmt\",\n      \"package\": \"feature-mgmt\",\n      \"versionNumber\": \"1.0.0.NEXT\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking SFP Pro Version\nDESCRIPTION: This command displays the installed version of SFP pro, along with the operating system and Node.js version information.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/getting-started/install-sfp.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsfp --version\n```\n\n----------------------------------------\n\nTITLE: Publishing Pool Metrics\nDESCRIPTION: This command publishes metrics about scratch org pools to an observability platform using StatsD or direct APIs for supported platforms.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/advanced/pool.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ @flxbl-io/sfp pool metrics publish -v <value> [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n```\n\n----------------------------------------\n\nTITLE: Pull Changes for Specific Domain\nDESCRIPTION: Illustrates pulling changes for a specific domain from a Salesforce org.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/pull-changes-from-your-org.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:pull -o myOrg -d myDomain\n```\n\n----------------------------------------\n\nTITLE: Running SFP Build Command with Domain-Based Artifact Limiting\nDESCRIPTION: Example of using a release config file path as the domain parameter in the SFP build command to restrict artifacts being built to those specified in the configuration file.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/limiting-artifacts-to-be-built.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n// Limit build by release config\nsfp build -v devhub --branch=main --domain config/sales.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing SFP Community Edition via NPM\nDESCRIPTION: This command installs the SFP community edition globally using NPM. It requires Node.js and NPM to be installed on the system.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/getting-started/install-sfp.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g @flxbl-io/sfp\n```\n\n----------------------------------------\n\nTITLE: Generating SFDX Auth URL for Pipeline Authentication in Salesforce\nDESCRIPTION: This command displays the org information and generates an SFDX auth URL for pipeline authentication. The auth URL is used to authenticate to the DevHub for pool operations.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/pools/setting-up-your-salesforce-org-for-scratch-org-pools.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsf org display -o <orgAlias> --verbose --json > authFile.json\ncat authFile.json\n```\n\n----------------------------------------\n\nTITLE: Configuring alwaysDeploy in Package Configuration JSON\nDESCRIPTION: An example of how to add the alwaysDeploy attribute to a package descriptor in the project configuration file. When set to true, this ensures the package is deployed even if the same version is already in the org.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/configuring-installation-behaviour-of-a-package/always-deploy-a-package.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageDirectories\": [\n    {\n      \"path\": \"src-env-specific-pre\",\n      \"package\": \"env-specific-pre\",\n      \"versionDescription\": \"Environment related settings\",\n      \"versionNumber\": \"4.7.0.NEXT\",\n      \"alwaysDeploy\":true\n    },\n     ...\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sales Domain Release Settings in YAML\nDESCRIPTION: Release configuration YAML file that defines the sales domain settings including package artifacts, deployment properties, and changelog settings.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/building-a-domain.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# release-config for sales\nreleaseName: sales\npool: sales-pool\nexcludeAllPackageDependencies: true \nincludeOnlyArtifacts:\n  - sales-ui\n  - sales-channels\nreleasedefinitionProperties:\n  skipIfAlreadyInstalled: true\n  usePackageDiffDeploymentMode: true\n  promotePackagesBeforeDeploymentToOrg: prod\n  changelog:\n    workItemFilters:\n      -  (AKG|GIK)-[0-9]{2,5}\n    workItemUrl: https://example.atlassian.net/browse\n    limit: 30\n```\n\n----------------------------------------\n\nTITLE: Pull Changes Ignoring Conflicts\nDESCRIPTION: Shows how to pull changes from a Salesforce org while ignoring conflicts, potentially overwriting local changes.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/pull-changes-from-your-org.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:pull -o myOrg -p myPackage --ignore-conflicts\n```\n\n----------------------------------------\n\nTITLE: Configuring Flow Activation in Package JSON Configuration\nDESCRIPTION: This example demonstrates how to disable automatic Flow activation in a Salesforce package by setting the enableFlowActivation flag to false in the package configuration file. This prevents sfp from automatically activating Flows during deployment to production environments.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/configuring-installation-behaviour-of-a-package/state-management-for-flows.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Demonstrating package by disabling flow activation\n{\n  \"packageDirectories\": [\n      {    \n      \"path\": \"src/order-management\",\n      \"package\": \"order-management\",\n      \"versionNumber\": \"2.0.10.NEXT\",\n      \"enableFlowActivation\" : false\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Unassigning Review Environment Command Syntax\nDESCRIPTION: Command syntax for unassigning a review environment from an issue. Takes required parameters for repository and issue number, with an optional flag to return the environment to the pool. This command is available in sfp-pro from August 24 onwards and requires APP_ID & PRIVATE_KEY environment variables.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/review-environments/commands/unassign-a-review-environment.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp reviewenv unassign --repository <owner/repo> --issue <issue> [--returntopool]\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest SFP Docker Image\nDESCRIPTION: Command to pull the latest SFP Docker image from the flxbl-io GitHub packages registry.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/getting-started/docker-images/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/flxbl-io/sfp:latest\n```\n\n----------------------------------------\n\nTITLE: Building Changed Packages Using Differential Check\nDESCRIPTION: Command to build only the packages that have changed since the last published version using the diffcheck flag.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/building-a-domain.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsfp build --releaseconfig sales.yaml -v devhub --branch main  --diffcheck\n```\n\n----------------------------------------\n\nTITLE: Listing Scratch Orgs in Pool\nDESCRIPTION: This command lists active scratch orgs and their details from any pool. It can filter results based on the user's own pool and show all scratch orgs including used ones.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/advanced/pool.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ @flxbl-io/sfp pool list -v <value> [--json] [--apiversion <value>] [-t <value>] [-m] [-a] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n```\n\n----------------------------------------\n\nTITLE: Configuring Synchronous Test Execution in SFP Package JSON\nDESCRIPTION: This JSON snippet demonstrates how to set the 'testSynchronous' attribute to true for a package directory in the SFP configuration. This setting ensures that all tests for the specified package are triggered synchronously during validation, which can be useful for inherited codebases or tests with many DML statements.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/validating-a-change/controlling-validation-attributes-of-a-package/test-synchronously.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageDirectories\": [\n    {\n      \"path\": \"core-crm\",\n      \"package\": \"core-crm\",\n      \"versionDescription\": \"Package containing core schema and classes\",\n      \"versionNumber\": \"4.7.0.NEXT\",\n      \"testSynchronous\": true\n    },\n     ...\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using sfp Docker Image in CI/CD Configuration\nDESCRIPTION: Example of how to reference a specific sfp version in a CI/CD workflow using Docker. This approach is recommended for ensuring consistency across environments and simplifying the upgrade process.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/faqs/sfp-versioning-and-upgrade-process.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example Docker image reference in a CI/CD configuration\nimage: ghcr.io/flxbl-io/sfp:X.Y.Z  # Replace X.Y.Z with the specific version number\n```\n\n----------------------------------------\n\nTITLE: Validating SFP Pro Installation\nDESCRIPTION: This command lists all available SFP pro commands and their summaries, helping to verify that the pro installation was successful and all features are accessible.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/getting-started/install-sfp.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsfp commands\n```\n\n----------------------------------------\n\nTITLE: Configuring Picklist Updates in sfdx-project.json for Unlocked Packages\nDESCRIPTION: This code demonstrates how to configure the enablePicklist attribute in the sfdx-project.json file to control picklist updates for unlocked packages. Setting this attribute to false explicitly disables picklist updates for the specified package.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/configuring-installation-behaviour-of-a-package/updating-picklist.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Demonstrating how to disable optimized deployment\n{\n  \"packageDirectories\": [\n    {\n      \"path\": \"core-crm\",\n      \"package\": \"core-crm\",\n      \"versionDescription\": \"Package containing core schema and classes\",\n      \"versionNumber\": \"4.7.0.NEXT\",\n      \"enablePicklist\": false\n    },\n     ...\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using SFP Impact ReleaseConfig Command in Bash\nDESCRIPTION: This command determines release configurations impacted by changes from the last known tags. It allows filtering by configuration name, considering explicit dependencies, and offers options for comparing against branches instead of tags.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/advanced/impact.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ @flxbl-io/sfp impact releaseconfig --basebranch <value> [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL] [--branch <value>] [--releaseconfig <value>]\n    [--explicitDependencyCheck] [--filterBy <value>] [--filterByChangesInBranch]\n\nFLAGS\n  --basebranch=<value>       (required) The base branch on which the git tags should be used from\n  --branch=<value>           The branch on which the comparison is carried out\n  --explicitDependencyCheck  Activate to consider dependencyOn attribut while handling impact\n  --filterBy=<value>         Filter by a specific release config name\n  --filterByChangesInBranch  Filter packages by changes with the provided branches as opposed to tags\n  --loglevel=<option>        [default: info] logging level for this command invocation\n                             <options: trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL>\n  --releaseconfig=<value>    [default: config] Path to the directory containing release defns\n\nDESCRIPTION\n  Figures out impacted release configurations of a project, due to a change,from the last known tags\n```\n\n----------------------------------------\n\nTITLE: Pulling SFP-Pro Docker Images\nDESCRIPTION: Commands for pulling both the base SFP-Pro image and the SF CLI variant from the registry.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/getting-started/docker-images/sfp-pro.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# For base sfp-pro image\ndocker pull source.flxbl.io/sfp-pro:version\n\n# For sfp-pro with SF CLI\ndocker pull source.flxbl.io/sfp-pro-sf-cli:version\n```\n\n----------------------------------------\n\nTITLE: Building Main SFP-Pro Docker Image\nDESCRIPTION: Commands for building the main SFP-Pro Docker image using BuildKit and secure token handling.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/getting-started/docker-images/sfp-pro.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Create a file containing your  GITEA token\necho \"YOUR_GITEA_TOKEN\" > .npmrc.token\n\n# Build the image\ndocker buildx build \\\n  --secret id=npm_token,src=.npmrc.token \\\n  --build-arg NODE_MAJOR=22 \\\n  -f dockerfiles/sfp-pro.Dockerfile \\\n  -t sfp-pro:local .\n\n# Remove the token file\nrm .npmrc.token\n```\n\n----------------------------------------\n\nTITLE: Setting Up GitHub/GitLab Authentication (Bash)\nDESCRIPTION: Environment variable configuration required for authenticating with GitHub or GitLab when using the SFP sandbox fetch command. The tokens require appropriate scopes for repository access.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/pools/sandbox-pools/fetch-a-sandbox-from-pool.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGITHUB \n-------------------------\nEXPORT GITHUB=1\nEXPORT GITHUB_TOKEN=<YOUR_GITHUB_TOKEN> // GITHUB TOKEN NEEDS REPO SCOPE\n\nGITLAB\n-------------------------------\nEXPORT  GITLAB=1\nEXPORT GITLAB_TOKEN=<YOUR_GITLAB_TOKEN> //  GITLAB TOKEN NEEDS API SCOPE\n```\n\n----------------------------------------\n\nTITLE: Advanced SFP Dependency Command Examples\nDESCRIPTION: Additional examples showing how to analyze dependencies for specific packages and output in JSON format.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/dependency-management/explain-dependencies.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsfp dependency:explain\nsfp dependency:explain -p my-package\nsfp dependency:explain -p my-package --json\n```\n\n----------------------------------------\n\nTITLE: Retrieving Profiles from Salesforce Org\nDESCRIPTION: The 'profile retrieve' command retrieves profiles from the Salesforce org with all associated permissions. It's useful for migrating profile changes between environments or retrieving profiles from production to lower environments for testing.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/utilities/profile.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ @flxbl-io/sfp profile retrieve -o <value> [-f <value>] [-n <value>] [-d] [--apiversion <value>] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n```\n\n----------------------------------------\n\nTITLE: Flow Deactivation Command Usage\nDESCRIPTION: Command syntax for deactivating flows in a target Salesforce org. Requires target org specification and optionally accepts developer name and namespace prefix parameters. Includes configurable logging levels.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/utilities/flow.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ @flxbl-io/sfp flow deactivate -o <value> [-f <value>] [-p <value>] [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -f, --developername=<value>    The developer name of the flow\n  -o, --targetorg=<value>        (required) Username or alias of the target org.\n  -p, --namespaceprefix=<value>  Use to specify a specific namespace prefix\n      --loglevel=<option>        [default: info] logging level for this command invocation\n                                 <options: trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL>\n```\n\n----------------------------------------\n\nTITLE: Logging into Gitea Docker Registry\nDESCRIPTION: Commands for authenticating with the source.flxbl.io Docker registry using credentials.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/getting-started/docker-images/sfp-pro.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker login source.flxbl.io -u your-username\n```\n\n----------------------------------------\n\nTITLE: Server Management Commands\nDESCRIPTION: Common management commands for handling initialized SFP server instances.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/initializing-sfp-server.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsfp server logs <tenant>     # View server logs\nsfp server status <tenant>   # Check server status\nsfp server stop <tenant>     # Stop server\nsfp server update <tenant>   # Update server configuration\n```\n\n----------------------------------------\n\nTITLE: Using deleteOldData Parameter in SFDMU Configuration\nDESCRIPTION: JSON configuration for SFDMU showing how to use the deleteOldData parameter to remove existing records that don't match the new dataset before performing upsert operations.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/concepts/destructive-changes.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// Use of deleteOldData\n{\n  \"name\": \"CustomObject__c\",\n  \"operation\": \"Upsert\",\n  \"externalId\": \"External_Id__c\",\n  \"deleteOldData\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Querying SFP artifacts in a Salesforce org\nDESCRIPTION: Command to fetch details about artifacts that are installed in a target Salesforce org. This requires specifying the target org username or alias.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/command-guide/advanced/artifacts.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ @flxbl-io/sfp artifacts query -o <value> [--json] [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -o, --targetusername=<value>  (required) Username or alias of the target org.\n      --loglevel=<option>       [default: info] logging level for this command invocation\n                                <options: trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL>\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Fetch details about artifacts installed in a target org\n\nEXAMPLES\n  $ sfp artifacts:query -o <target_org>\n```\n\n----------------------------------------\n\nTITLE: Release Metrics Table in Markdown\nDESCRIPTION: Table showing different metrics emitted during a release process including duration, package counts, workitems and commits. Each metric is defined with its description and metric type.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/metrics/available-metrics.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| sfpowerscripts.release.duration                   | Time taken for a release                                                                                            | GAUGE |\n| sfpowerscripts.release.packages.scheduled         | Number of packages scheduled for release                                                                            | GAUGE |\n| sfpowerscripts.release.packages.succeeded         | Number of packages that were installed successfully in a release                                                    | GAUGE |\n| sfpowerscripts.release.packages.failed            | Number of packages that failed to install in a release                                                              | GAUGE |\n| sfpowerscripts.release.workitems                  | Aggregated count of workitems in a release (a release is identified by the identifier used in a release definition) | GAUGE |\n| sfpowerscripts.release.commits                    | Aggregated count of commits in a release (a release is identified by the identifier used in a release definition)   | GAUGE |\n```\n\n----------------------------------------\n\nTITLE: Production Server with Infisical Integration\nDESCRIPTION: Example showing production server initialization with Infisical secrets provider configuration.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/initializing-sfp-server.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsfp server init --tenant my-app --mode prod --secrets-provider infisical --infisical-token mytoken\n```\n\n----------------------------------------\n\nTITLE: Auto-resolved Package Dependency Configuration in Salesforce Project\nDESCRIPTION: An example of how the transitive dependency resolver automatically resolves and populates all required dependencies for the core-crm package, including both direct and transitive dependencies like sfdc-logging and feature-mgmt.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/concepts/transitive-dependency-resolution.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n {\n            \"path\": \"./src/core-crm\",\n            \"package\": \"core-crm\",\n            \"versionName\": \"Version 1.0.6\",\n            \"versionNumber\": \"1.0.6.NEXT\",\n            \"dependencies\": [\n                  {\n                    \"package\": \"sfdc-logging\",\n                    \"versionNumber\": \"1.0.2.LATEST\"\n                },\n                {\n                    \"package\": \"feature-mgmt\",\n                    \"versionNumber\": \"1.0.6.LATEST\"\n                }\n            ]\n        },\n        \n```\n\n----------------------------------------\n\nTITLE: Depicting Resource Management in SFP Pro Server using Mermaid\nDESCRIPTION: This diagram illustrates the resource management system in SFP Pro Server, showing the relationships between resource management components, queue management, and worker pools. It demonstrates how resource quotas, auto-scaling, and monitoring interact with different queues and worker types.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/task-processing-system.md#2025-04-18_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"Resource Management\"\n        Quotas[Resource Quotas]\n        Scaling[Auto Scaling]\n        Monitor[Resource Monitor]\n    end\n\n    subgraph \"Queue Management\"\n        CQ[Critical Queue]\n        NQ[Normal Queue]\n        BQ[Batch Queue]\n    end\n\n    subgraph \"Worker Pools\"\n        CW[Critical Workers]\n        NW[Normal Workers]\n        BW[Batch Workers]\n    end\n\n    Quotas --> CQ\n    Quotas --> NQ\n    Quotas --> BQ\n\n    Monitor --> Scaling\n    Scaling --> CW\n    Scaling --> NW\n    Scaling --> BW\n\n    CQ --> CW\n    NQ --> NW\n    BQ --> BW\n```\n\n----------------------------------------\n\nTITLE: SFP Sandbox Update Command Examples\nDESCRIPTION: Practical examples showing how to update a sandbox using either direct command line parameters or a definition file. Both methods require specifying the DevHub org.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/sandbox/update-sandbox.md#2025-04-18_snippet_1\n\nLANGUAGE: sh-session\nCODE:\n```\n$ sfp sandbox:update -o MyDevHub -n my-sandbox\\n$ sfp sandbox:update -o MyDevHub -f config/sandbox-def.json\n```\n\n----------------------------------------\n\nTITLE: Displaying Metrics Table in Markdown\nDESCRIPTION: A markdown table listing all available metrics for sfp, including their names, descriptions, and types. This table covers metrics for deployment, building, validation, publishing, package management, and scratch org operations.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/metrics/available-metrics.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| METRIC                                            | DESCRIPTION                                                                                                         | TYPE  |\n| ------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----- |\n| sfpowerscripts.deploy.failed                      | Number of times deploy command failed                                                                               | COUNT |\n| sfpowerscripts.deploy.duration                    | Time spent on executing deploy command                                                                              | GAUGE |\n| sfpowerscripts.deploy.scheduled                   | Number of times deployment was scheduled to run                                                                     | COUNT |\n| sfpowerscripts.deploy.packages.scheduled          | Number of packages that were scheduled to be deployed by the deploy command                                         | GAUGE |\n| sfpowerscripts.deploy.succeeded                   | Number of succeeded deploy executions                                                                               | COUNT |\n| sfpowerscripts.deploy.succeeded.packages          | Number of packages that were successfully deployed                                                                  | GAUGE |\n| sfpowerscripts.deploy.failed                      | Number of times deploy command failed to execute                                                                    | COUNT |\n| sfpowerscripts.deploy.failed.packages             | Number and details of packages that failed to deploy                                                                | GAUGE |\n| sfpowerscripts.build.scheduled                    | Number of times build was scheduled to run                                                                          | COUNT |\n| sfpowerscripts.build.duration                     | Time spent on executing build command                                                                               | GAUGE |\n| sfpowerscripts.build.scheduled.packages           | Number of packages being scheduled to build                                                                         | GAUGE |\n| sfpowerscripts.build.succeeded.packages           | Number of packages successfully built                                                                               | GAUGE |\n| sfpowerscripts.build.failed.packages              | Number of packages failed to build                                                                                  | GAUGE |\n| sfpowerscripts.validate.scheduled                 | Number of scheduled validations                                                                                     | COUNT |\n| sfpowerscripts.validate.succeeded                 | Number of successful validations                                                                                    | COUNT |\n| sfpowerscripts.validate.failed                    | Number of time validate failed to execute                                                                           | COUNT |\n| sfpowerscripts.validate.duration                  | Time spent on executing validate command                                                                            | GAUGE |\n| sfpowerscripts.validate.packages.scheduled        | Number of packages scheduled for installation in a validation                                                       | GAUGE |\n| sfpowerscripts.validate.packages.succeeded        | Number of successful package installations in a validation                                                          | GAUGE |\n| sfpowerscripts.validate.packages.failed           | Number of failed package installations in a validation                                                              | GAUGE |\n| sfpowerscripts.publish.duration                   | Time spent on executing publish command                                                                             | GAUGE |\n| sfpowerscripts.publish.succeeded                  | Number of succeeded publish executions                                                                              | COUNT |\n| sfpowerscripts.package.installation               | Number of times a package was installed                                                                             | COUNT |\n| sfpowerscripts.package.installation.elapsed_time | Time taken to install a package                                                                                     | GAUGE |\n| sfpowerscripts.package.elapsed                    | Time taken to create a package                                                                                      | GAUGE |\n| sfpowerscripts.package.created                    | Number of times a particular package was created                                                                    | COUNT |\n| sfpowerscripts.package.metadatacount              | Number of metadata in a package                                                                                     | GAUGE |\n| sfpowerscripts.package.testcoverage               | Test Coverage of a package                                                                                          | GAUGE |\n| sfpowerscripts.apextests.triggered                | Number of times apex tests were triggered for a package                                                             | COUNT |\n| sfpowerscripts.apextest.testtotal                 | Time taken for Apex Test Execution                                                                                  | GAUGE |\n| sfpowerscripts.apextest.command.time              | Time taken for Apex Test Execution (Command Time)                                                                   | GAUGE |\n| sfpowerscripts.prepare.succeededorgs              | Number of orgs that were succeeded during a run of prepare                                                          | GAUGE |\n| sfpowerscripts.prepare.failedorgs                 | Number of orgs that failed during a run of prepare                                                                  | GAUGE |\n| sfpowerscripts.prepare.duration                   | Time take to prepare a pool of scratchorgs                                                                          | GAUGE |\n| sfpowerscripts.prepare.org.checkpointfailed       | Number of scratch orgs that failed on a checkpoint, during prepare                                                  | COUNT |\n| sfpowerscripts.prepare.org.partial                | Number of scratch orgs that partially succeeded, during prepare                                                     | COUNT |\n| sfpowerscripts.prepare.packages.scheduled         | Number of packages scheduled for installation when preparing scratch org pools                                      | GAUGE |\n| sfpowerscripts.prepare.packages.succeeded         | Number of packages successfully installed when preparing scratch org pools                                          | GAUGE |\n| sfpowerscripts.prepare.packages.failed            | Number of packages failed to install when preparing scratch org pools                                               | GAUGE |\n| sfpowerscripts.so.packages.requested              | Number of packages requested to be installed to an individual scratch org in the pool                               | GAUGE |\n| sfpowerscripts.so.package.installed               | Number of packages successfully installed to an individual scratch org in the pool                                  | GAUGE |\n| sfpowerscripts.pool.available                     | Number of scratch orgs that are available in a pool after fetched by validate command                               | GAUGE |\n| sfpowerscripts.pool.sandbox.succeededorgs         | Number of sandbox that was succesfully activated                                                                    | COUNT |\n| sfpowerscripts.pool.sandbox.failedorgs            | Number of sandbox that failed to activate                                                                           | COUNT |\n| sfpowerscripts.pool.sandbox.deleted               | Number of sandbox that was sucuesfully deleted                                                                      | COUNT |\n| sfpowerscripts.pool.sandbox.deletefailed          | Number of sandbox that was failed to delete                                                                         | COUNT |\n| sfpowerscripts.issueops.dev.sandbox.requested     | Number of dev sandboxes that were requested by raising an issue                                                     | COUNT |\n| sfpowerscripts.issueops.dev.sandbox.failed        | Number of dev sandboxes that were failed during request                                                             | COUNT |\n| sfpowerscripts.release.scheduled                  | Number of scheduled releases                                                                                        | COUNT |\n| sfpowerscripts.release.succeeded                  | Number of successful releases                                                                                       | COUNT |\n| sfpowerscripts.release.failed                     | Number of failed releases                                                                                           | COUNT |\n```\n\n----------------------------------------\n\nTITLE: Using sfp metrics:report Command for Custom Metric Reporting\nDESCRIPTION: The sfp metrics:report command is used to send custom metrics to supported providers. It requires specifying the metric name, type, and optionally value and tags. The command supports various logging levels and metric types including gauge, counter, and timer.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/metrics/custom-metrics.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ @flxbl-io/sfp metrics report -m <value> -t gauge|counter|timer [-v <value>] [-g <value>] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sfp metrics:report -m <metric> -t <type> -v <value>\n```\n\n----------------------------------------\n\nTITLE: Configuring Optimized Deployment in sfdx-project.json\nDESCRIPTION: This JSON snippet demonstrates how to disable the optimized deployment feature for a specific package directory in the sfdx-project.json file. The 'isOptimizedDeployment' attribute is set to false, which will trigger the entire local tests in the org instead of using package-specific test classes.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/configuring-installation-behaviour-of-a-package/optimized-installation.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageDirectories\": [\n    {\n      \"path\": \"core-crm\",\n      \"package\": \"core-crm\",\n      \"versionDescription\": \"Package containing core schema and classes\",\n      \"versionNumber\": \"4.7.0.NEXT\",\n      \"isOptimizedDeployment\": false\n    },\n     ...\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Salesforce Project by Domain\nDESCRIPTION: Example of using the 'sfp project:analyze' command to analyze all packages within a specific domain of a Salesforce project. This command targets the 'sales' domain for analysis.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/analysing-a-project/overview.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:analyze -d sales\n```\n\n----------------------------------------\n\nTITLE: Visualizing Webhook Management Process in Mermaid\nDESCRIPTION: This diagram shows the flow of webhook processing, from various sources through validation, signature checking, rate limiting, event mapping, and task generation. It illustrates how the system handles incoming events securely and efficiently.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/network-architecture-and-integration-system.md#2025-04-18_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"Webhook Sources\"\n        SF_E[Salesforce Events]\n        GH_E[Git Events]\n        CI_E[CI/CD Events]\n    end\n\n    subgraph \"Processing Layer\"\n        Val[Validation]\n        Sig[Signature Check]\n        Rate[Rate Limiting]\n    end\n\n    subgraph \"Task Creation\"\n        Map[Event Mapping]\n        Task[Task Generation]\n        Queue[Queue Selection]\n    end\n\n    SF_E --> Val\n    GH_E --> Val\n    CI_E --> Val\n\n    Val --> Sig\n    Sig --> Rate\n    Rate --> Map\n    Map --> Task\n    Task --> Queue\n```\n\n----------------------------------------\n\nTITLE: SFP Sandbox Create Example\nDESCRIPTION: Practical example of creating a sandbox named 'MySandbox1' from a source sandbox 'SourceSandbox' using the DevHub alias 'MyDevHub'.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/sandbox/create-sandbox.md#2025-04-18_snippet_1\n\nLANGUAGE: sh-session\nCODE:\n```\n$ sfp sandbox:create -v MyDevHub -n MySandbox1 -s SourceSandbox\n```\n\n----------------------------------------\n\nTITLE: Configuring Splunk Environment Variables for sfp Metrics\nDESCRIPTION: This table defines the environment variables required to enable and configure Splunk metrics emission in sfp. It includes the variable names, types, and descriptions for activating Splunk integration, specifying the Splunk host URL, and providing the API key.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/metrics/configuring-collectors/splunk.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Environment Variable            | Type    |                                                                           |\n| ------------------------------- | ------- | ------------------------------------------------------------------------- |\n| `SFPOWERSCRIPTS_SPLUNK`         | boolean | Activate sending metrics to splunk by setting this key to true            |\n| `SFPOWERSCRIPTS_SPLUNK_HOST`    | string  | Provide the full **Splunk Event Collector Url** from your splunk instance |\n| `SFPOWERSCRIPTS_SPLUNK_API_KEY` | secret  | Provide a **HEC-Token** from your splunk instance.                        |\n```\n\n----------------------------------------\n\nTITLE: Executing Review Environment Status Transition in SFP CLI\nDESCRIPTION: This command updates the status of a review environment for a specific issue in a repository. It requires specifying the repository, issue number, and desired status. The command is available in sfp-pro from August 24 onwards and is currently limited to GitHub usage.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/review-environments/commands/transition-review-environment-status.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp reviewenv transition --repository <owner/repo> --issue <issue> --status <status>\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Reconciliation in Package Directory Configuration\nDESCRIPTION: A sample package configuration showing how to enable profile reconciliation in the sfdx-project.json file. The reconcileProfiles attribute is set to 'true' for the access-mgmt package directory.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/configuring-installation-behaviour-of-a-package/reconciling-profiles.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Sample package \n\n{\n  \"packageDirectories\": [\n      {    \n      \"path\": \"packages/access-mgmt\",\n      \"package\": \"access-mgmt\",\n      \"default\": false,\n      \"versionName\": \"access-mgmt\",\n      \"versionNumber\": \"1.0.0.0\",\n      \"reconcileProfiles\": \"true\"\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes for a Specific Domain\nDESCRIPTION: Example of pushing changes for a specific domain to a Salesforce org, which limits the deployment scope to only the specified domain.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/push-changes-to-your-org.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:push -o myOrg -d myDomain\n```\n\n----------------------------------------\n\nTITLE: JSON Output Structure for Dependency Analysis\nDESCRIPTION: Example of the JSON structure returned when using the --json flag with the dependency:explain command. Shows how package dependencies are represented including direct and transitive dependencies.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/dependency-management/explain-dependencies.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    {\n      \"name\": \"package-name\",\n      \"dependencies\": [\n        {\n          \"name\": \"dependency-name\",\n          \"version\": \"version-number\",\n          \"type\": \"direct|transitive\",\n          \"contributors\": [\"package-names\"] // Only present for transitive dependencies\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building SF CLI Docker Image\nDESCRIPTION: Commands for building the SFP-Pro SF CLI Docker image variant with secure token handling.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/getting-started/docker-images/sfp-pro.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Create a file containing your GitHub NPM token\necho \"YOUR_GITEA_TOKEN\" > .npmrc.token\n\n# Build the image\ndocker buildx build \\\n  --secret id=npm_token,src=.npmrc.token \\\n  --build-arg NODE_MAJOR=22 \\\n  -f dockerfiles/sfp-pro-sf-cli.Dockerfile \\\n  -t sfp-pro-sf-cli:local .\n\n# Remove the token file\nrm .npmrc.token\n```\n\n----------------------------------------\n\nTITLE: Defining Release Name in YAML for SFP Project\nDESCRIPTION: This YAML snippet shows how to define the release name. The release name is used for generating changelogs and identifying releases in other systems.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/releasing-artifacts/release-definitions.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrelease: Sprint-2-13-11-6844956242\n```\n\n----------------------------------------\n\nTITLE: Configuring a Data Package in sfdx-project.json\nDESCRIPTION: Configuration snippet for a data package in sfdx-project.json. Data packages require the standard package attributes along with a 'type' attribute set to 'data' to indicate its special nature.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/configuring-a-project/creating-a-package.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    {\n    \"path\": \"path--to--package\",\n    \"package\": \"name--of-the-package\", \n    \"versionNumber\": \"X.Y.Z.[NEXT/BUILDNUMBER]\",\n    \"type\": \"data\", // required for data packages\n    }\n```\n\n----------------------------------------\n\nTITLE: Data Package Pre/Post Deployment Script Example\nDESCRIPTION: Bash script example showing how to execute Apex code as part of pre/post deployment process for data packages.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/concepts/supported-package-types/data-packages.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# $1 package name\n# $2 org\n# $3 alias\n# $4 working directory\n# $5 package directory\n\nsfdx force:apex:execute -f scripts/datascript.apex -u $2\n```\n\n----------------------------------------\n\nTITLE: Extending Review Environment Lease with SFP CLI\nDESCRIPTION: This command extends the lease of a review environment assigned to a specific issue by 24 hours. It requires specifying the repository and issue number. The command is only available in sfp-pro from August 24 onwards and is currently limited to GitHub usage.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/review-environments/commands/extend-a-review-environment.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp reviewenv extend --repository <owner/repo> --issue <issue>\n```\n\n----------------------------------------\n\nTITLE: Sample SFDX Project Configuration JSON\nDESCRIPTION: Example of an SFDX project configuration file (sfdx-project.json) that defines multiple package directories with their paths, names, and version numbers.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/building-an-artifact-for-package-individually.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Sample sfdx project json \n{\n  \"packageDirectories\": [\n    {\n      \"path\": \"./src-env-specific-pre\",\n      \"package\": \"src-env-specific-pre\",\n      \"versionNumber\": \"1.0.0.0\",\n    },\n    {\n      \"path\": \"./src/frameworks/feature-mgmt\",\n      \"package\": \"feature-mgmt\",\n      \"versionNumber\": \"1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Environment Variables\nDESCRIPTION: Required environment variables for GitHub/GitLab authentication with appropriate token scopes.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/pools/sandbox-pools/sandbox-pool-initialization.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nGITHUB \n-------------------------\nEXPORT GITHUB=1\nEXPORT GITHUB_TOKEN=<YOUR_GITHUB_TOKEN> // GITHUB TOKEN NEEDS REPO SCOPE\n\nGITLAB\n-------------------------------\nEXPORT  GITLAB=1\nEXPORT GITLAB_TOKEN=<YOUR_GITLAB_TOKEN> //  GITLAB TOKEN NEEDS API SCOPE\n```\n\n----------------------------------------\n\nTITLE: Disabling Entitlement Filter in sfdx-project.json\nDESCRIPTION: This JSON configuration in sfdx-project.json disables the entitlement filtering globally for the sfp plugin. It's used to control the behavior of the entitlement deployment process.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/configuring-installation-behaviour-of-a-package/entitlement-deployment-helper.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"plugins\": {\n        \"sfp\": {\n          \"disableEntitlementFilter\": true //disable entitlement filtering\n          }\n        }\n```\n\n----------------------------------------\n\nTITLE: Vlocity Data Package Configuration in YAML\nDESCRIPTION: YAML configuration for Vlocity data packages defining project path, expansion path, and other Vlocity-specific settings.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/concepts/supported-package-types/data-packages.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprojectPath: src/vlocity-config\nexpansionPath: datapacks\nautoRetryErrors: true\nmanifest:\n```\n\n----------------------------------------\n\nTITLE: Generating Analysis Reports in Specific Directory\nDESCRIPTION: Example of using the 'sfp project:analyze' command to generate analysis reports and save them in a specific directory. This is useful for organizing and storing analysis results.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/analysing-a-project/overview.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:analyze --report-dir ./analysis-reports\n```\n\n----------------------------------------\n\nTITLE: Creating Release Configuration YAML for Domain Definition\nDESCRIPTION: Example YAML configuration for defining a business domain release. Shows how to specify release name, org pools, package artifacts, and deployment properties for Salesforce platform deployments.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/configuring-a-project/defining-a-domain.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n// Sample release config <business_domain.yaml>\nreleaseName: <business_domain>  # --> The name of the domain\npool: <sandbox/scratch org pools>\nexcludeAllPackageDependencies: true\nincludeOnlyArtifacts:   # --> Insert packages\n  - <pkg1>\nreleasedefinitionProperties:\n  promotePackagesBeforeDeploymentToOrg: prod\n```\n\n----------------------------------------\n\nTITLE: Using Config File Parameter in SFP Build Command\nDESCRIPTION: Demonstrates how to use the configFile parameter when running the SFP build command to specify a custom scratch org definition file. This parameter allows you to define the features and settings of the scratch org used for validating your unlocked package.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/controlling-aspects-of-the-build-command/use-of-multiple-config-file-in-build-command.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp build --configFile <path-to-config-file> -v <devhub>\n```\n\n----------------------------------------\n\nTITLE: Configuring .forceIgnore for Aliasfy Non-Merge Mode\nDESCRIPTION: This snippet shows the .forceIgnore configuration for aliasfy packages without merge mode. It ignores the entire package directory during push/pull operations.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/configuring-installation-behaviour-of-a-package/aliasfy-packages/aliasfy-packages-merge-mode.md#2025-04-18_snippet_1\n\nLANGUAGE: gitignore\nCODE:\n```\n# .forceIgnore (aliasfy non-merge mode)\nsrc-env-specific-alias-post\n```\n\n----------------------------------------\n\nTITLE: Sandbox Pool Configuration Schema\nDESCRIPTION: JSON configuration schema for defining sandbox pools, including pool name, count, source sandbox, branch, and expiration settings.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/pools/sandbox-pools/sandbox-pool-initialization.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"pool\": \"DEV\",\n    \"count\": 3,\n    \"sourceSB\": \"production\",\n    \"branch\": \"develop\",\n    \"defaultExpirationHours\": 24,\n    \"extendedExpirationHours\": 24,\n    \"averageOrgCreationTime\": 2\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Pools in YAML Configuration\nDESCRIPTION: This snippet demonstrates how to define pools in a configuration file. Each pool includes properties such as the name, description, admin group designations, associated packages, and expiry configuration. The pools help organize and manage user access to specific resources.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/pools/README.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npools:\n  - name: pool1\n    description: This is a Dev hub Pool for Team 1\n    isApprovalRequired: false\n    enableCheckout: false\n    type: development\n    adminGroups:\n      - dev-hub-admins\n    scratchOrgs: 3\n    # Expiry in Days\n    expiry: 2\n    package:\n      - \"alias:package1\"\n      - \"alias:package2\"\n\n  - name: pool2\n    description: This is a Dev hub Pool for Team 2\n    enableCheckout: true\n    defaultBranch: main\n    adminGroups:\n      - dev-hub-admins\n      - release-managers\n    restrictedBranches: [beta, main, master, develop, release]\n    expiry: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring CI/CD Integration for Duplicate Checking\nDESCRIPTION: Command for running duplicate check in a CI/CD pipeline with GitHub integration and specific output format.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/analysing-a-project/duplicate-check.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:analyze --fail-on duplicates --fail-on-unclaimed --output-format github\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Collections in sfdx-project.json\nDESCRIPTION: This snippet demonstrates how to configure the buildCollection attribute in sfdx-project.json to create a collection of packages that should be built together. It includes configurations for a core package and two feature packages, all set to build together when any of them change.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/controlling-aspects-of-the-build-command/building-a-collection-of-packages-together.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageDirectories\": [\n    {\n      \"path\": \"core\",\n      \"package\": \"core-package\",\n      \"versionName\": \"Core 1.0\",\n      \"versionNumber\": \"1.0.0.NEXT\",\n      \"default\": true,\n      \"buildCollection\": [\n        \"core-package\",\n        \"featureA-package\",\n        \"featureB-package\"\n      ]\n    },\n    {\n      \"path\": \"features/featureA\",\n      \"package\": \"featureA-package\",\n      \"versionName\": \"Feature A 1.0\",\n      \"versionNumber\": \"1.0.0.NEXT\"\n       \"buildCollection\": [\n        \"core-package\",\n        \"featureA-package\",\n        \"featureB-package\"\n      ]\n    },\n    {\n      \"path\": \"features/featureB\",\n      \"package\": \"featureB-package\",\n      \"versionName\": \"Feature B 1.0\",\n      \"versionNumber\": \"1.0.0.NEXT\",\n      \"buildCollection\": [\n        \"core-package\",\n        \"featureA-package\",\n        \"featureB-package\"\n      ]\n    }\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Required SFDX Project Configuration\nDESCRIPTION: Example of properly configured sfdx-project.json file with required attributes for artifact generation, including package directories and version information\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/faqs/common-errors/README.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageDirectories\": [\n    {\n      \"path\": \"force-app\",\n      \"package\": \"force-app\",\n      \"versionNumber\": \"1.0.0.1\",      \n      \"default\": true\n    }\n  ],\n  \"name\": \"flxbl-demo\",\n  \"namespace\": \"\",\n  \"sfdcLoginUrl\": \"https://login.salesforce.com\",\n  \"sourceApiVersion\": \"59.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Sandbox Pool Initialization Command\nDESCRIPTION: Command syntax for initializing Salesforce sandbox pools with required parameters for config file path, DevHub alias, and GitHub repository.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/pools/sandbox-pools/sandbox-pool-initialization.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp pool sandbox init -f <path/to/config-file> -v <devhub-alias> -r <owner/repo>\n```\n\n----------------------------------------\n\nTITLE: Sandbox Definition File Structure in JSON\nDESCRIPTION: JSON structure for a sandbox definition file that can be used with the sandbox:update command. This allows for more detailed configuration including setting description, apex class, license type, and other parameters.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/sandbox/update-sandbox.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"sandboxName\": \"MySandbox\",\\n  \"description\": \"Updated sandbox description\",\\n  \"apexClassId\": \"01p...\",\\n  \"autoActivate\": true,\\n  \"copyChatter\": true,\\n  \"historyDays\": 0,\\n  \"licenseType\": \"DEVELOPER\",\\n  \"templateId\": \"0TT...\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Email Deliverability Pre-Deployment Script for Salesforce\nDESCRIPTION: This Bash script is an example of a pre-deployment script that enables email deliverability for all users in a Salesforce org. It creates a temporary JSON file with Browserforce configuration and applies it to the target org if the org alias is 'ci'.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/configuring-installation-behaviour-of-a-package/pre-post-deployment-script.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nexport SF_DISABLE_DNS_CHECK=true\n\n# Create a temporary file\ntemp_file=\"$(mktemp)\"\n\n# Write the anonymous Apex code to the temp file\ncat << EOT >> \"$temp_file\"\n{\n  \"$schema\": \"https://raw.githubusercontent.com/amtrack/sfdx-browserforce-plugin/master/src/plugins/schema.json\",\n  \"settings\": {\n    \"emailDeliverability\": {\n      \"accessLevel\": \"All email\"\n    }\n  }\n}\nEOT\n\n\nif [ \"$3\" = 'ci' ]; then\n# Execute the browserforce configuration to this org\n  sf browserforce:apply  -f \"$temp_file\" --target-org $3\nfi\n\n# Clean up by removing the temporary file\nrm \"$temp_file\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Aliasfy Merge Mode in package.json\nDESCRIPTION: This snippet demonstrates how to configure the mergeMode option for an aliasfy package in the package.json file. It enables content inheritance for environment-specific aliases.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/configuring-installation-behaviour-of-a-package/aliasfy-packages/aliasfy-packages-merge-mode.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageDirectories\": [\n      {    \n      \"path\": \"src/src-env-specific-alias-post\",\n      \"package\": \"src-env-specific-alias-post\",\n      \"versionNumber\": \"2.0.10.NEXT\",\n      \"aliasfy\" : {\n          \"mergeMode\": true\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Aliases in sfdx-project.json\nDESCRIPTION: Sample configuration showing how to set up package aliases in the sfdx-project.json file. This is relevant when switching to source packages temporarily to address long build times.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/faqs/common-questions/dealing-with-long-build-times-in-salesforce.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageAliases\": {\n    \"myPackage\": \"04t...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .forceIgnore for Aliasfy Merge Mode\nDESCRIPTION: This snippet demonstrates the .forceIgnore configuration for aliasfy packages with merge mode enabled. It ignores specific environment subdirectories while allowing push/pull operations on the default folder.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/configuring-installation-behaviour-of-a-package/aliasfy-packages/aliasfy-packages-merge-mode.md#2025-04-18_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n# .forceIgnore (aliasfy merge mode)\nsrc-env-specific-alias-post/dev\nsrc-env-specific-alias-post/test\nsrc-env-specific-alias-post/prod\n```\n\n----------------------------------------\n\nTITLE: Fetching Sandbox from Pool Command\nDESCRIPTION: Command to fetch an available sandbox from a pool and assign it to a specific issue, with options for wait time and lease duration.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/pools/sandbox-pools/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsfp pool sandbox fetch --repository <owner/repo> --pool <pool-name> --branch <branch-name> --issue <issue-number> [--devhubalias <alias>] [--wait <minutes>] [--leasefor <minutes>]\n```\n\n----------------------------------------\n\nTITLE: Configuring skipDeployOnOrgs in package.json\nDESCRIPTION: Example showing how to configure the skipDeployOnOrgs attribute in package.json to skip deployment of a package to specific orgs. The array accepts both org aliases and usernames as values. In this example, installation will be skipped for the 'qa' org alias and the specified user in the 'sit' environment.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/configuring-installation-behaviour-of-a-package/skip-install-on-certain-orgs.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Demonstrating how to do use skipDeployOnOrgs\n{\n  \"packageDirectories\": [\n    {\n      \"path\": \"core-crm\",\n      \"package\": \"core-crm\",\n      \"versionDescription\": \"Package containing core schema and classes\",\n      \"versionNumber\": \"4.7.0.NEXT\",\n      \"skipDeployOnOrgs\":[\n       \"qa\",\n       \"user@colaorg.com.au.sit\n      ]\n    },\n     ...\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring skipTesting in sfdx-project.json\nDESCRIPTION: Example showing how to configure skipTesting attribute in a package directory configuration. This setting allows skipping of Apex tests during package validation for unlocked packages, org-dependent unlocked packages, source deployments, and diff deployments.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/validating-a-change/controlling-validation-attributes-of-a-package/skip-testing.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageDirectories\": [\n    {\n      \"path\": \"core-crm\",\n      \"package\": \"core-crm\",\n      \"versionDescription\": \"Package containing core schema and classes\",\n      \"versionNumber\": \"4.7.0.NEXT\",\n      \"skipTesting\": true\n    },\n     ...\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Delete Operation in SFDMU for Data Packages\nDESCRIPTION: JSON configuration for SFDMU to perform a delete operation on CustomObject__c records that match specific criteria, in this case inactive records.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/concepts/destructive-changes.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"CustomObject__c\",\n  \"operation\": \"Delete\",\n  \"query\": \"SELECT Id FROM CustomObject__c WHERE IsActive__c = false\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the SFP Sandbox Monitor Command\nDESCRIPTION: Command syntax for monitoring sandbox pools, showing the required parameters including target Dev Hub username, repository, and configuration file paths.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/pools/sandbox-pools/monitor-sandbox-pools.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp pool sandbox monitor -v <devhub-alias> -r <owner/repo> -f <path/to/config-file> [<path/to/config-file>...]\n```\n\n----------------------------------------\n\nTITLE: Configuring FHT and FT in Package Configuration JSON\nDESCRIPTION: A sample package.json configuration showing how to enable Field History Tracking and Feed Tracking for a package directory. The enableFHT and enableFT boolean attributes are set to true to activate these features for the core-crm package.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/configuring-installation-behaviour-of-a-package/field-history-and-feed-tracking.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Sample package \n\n{\n  \"packageDirectories\": [\n      {    \n      \"path\": \"src/core-crm\",\n      \"package\": \"core-crm\",\n      \"versionNumber\": \"2.0.10.NEXT\",\n      \"enableFHT\" : true,\n      \"enableFT\" : true\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Upsert Operation in SFDMU for Data Packages\nDESCRIPTION: JSON configuration for SFDMU to perform an upsert operation on a CustomObject__c, defining the external ID field and query conditions for the operation.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/concepts/destructive-changes.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"CustomObject__c\",\n  \"operation\": \"Upsert\",\n  \"externalId\": \"External_Id__c\",\n  \"query\": \"SELECT Id, Name, IsActive__c FROM CustomObject__c WHERE SomeCondition = true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Diff Package in sfdx-project.json\nDESCRIPTION: Configuration snippet for a diff package in sfdx-project.json. Diff packages track changes between commits and require a 'type' attribute set to 'diff' along with other standard package attributes.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/configuring-a-project/creating-a-package.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n    {\n    \"path\": \"path--to--package\",\n    \"package\": \"name--of-the-package\", \n    \"versionNumber\": \"X.Y.Z.[NEXT/BUILDNUMBER]\",\n    \"type\": \"diff\", // required for data packages\n    }\n```\n\n----------------------------------------\n\nTITLE: External Dependencies Configuration Structure\nDESCRIPTION: JSON structure for configuring external dependencies in sfdx-project.json using the plugins.sfp section. Shows the basic format for defining package dependencies.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/dependency-management/shrink-dependencies.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageDirectories\": [...],\n  \"plugins\": {\n    \"sfp\": {\n      \"externalDependencyMap\": {\n        \"package-name\": [\n          {\n            \"package\": \"04tXXXXXXXXXXXXXXX\",\n            \"versionNumber\": \"1.0.0.LATEST\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SFP Sandbox Login Command Examples\nDESCRIPTION: Provides practical examples of the sandbox login command. The first example shows a basic login with a target DevHub, while the second demonstrates using additional flags for setting an alias and writing login details to a file.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/sandbox/login-to-sandbox.md#2025-04-18_snippet_1\n\nLANGUAGE: sh-session\nCODE:\n```\n$ sfp sandbox:login --name mySandbox1 -v myDevHub\n$ sfp sandbox:login --name mySandbox1 -v myDevHub --alias mySandboxAlias --write-file\n```\n\n----------------------------------------\n\nTITLE: External Dependencies Configuration Example\nDESCRIPTION: Practical example of configuring external dependencies for a trigger framework package with specific version requirements.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/dependency-management/shrink-dependencies.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"sfp\": {\n      \"externalDependencyMap\": {\n        \"trigger-framework\": [\n          {\n            \"package\": \"0H1000XRTCam\",\n            \"versionNumber\": \"1.0.3.LATEST\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring seedMetadata for Standard ValueSets in Unlocked Packages\nDESCRIPTION: JSON configuration that specifies the path to standard value sets in a preliminary package. This ensures standard value sets are referenced correctly during the unlocked package deployment process.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/faqs/common-questions/standard-valuesets-and-unlocked-packages.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"seedMetadata\": {\n    \"path\": \"src-env-specific-pre/standardValueSets\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Commit Message for Work Item Identification (Plain Text)\nDESCRIPTION: This snippet shows an example of a commit message that includes a work item identifier (BE-1836). The work item is identified using a regex pattern specified in the release definition.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/releasing-artifacts/generating-a-changelog.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nfix/BE-1836: ⚡ added Config changes for Field type changes (#1629)\n* fix: ⚡ added Config changes for Field type changes\n```\n\n----------------------------------------\n\nTITLE: Using the SFP Sandbox Update Command with CLI Flags\nDESCRIPTION: Example usage of the sandbox:update command with CLI flags to update a specific sandbox in a DevHub org. This approach requires specifying the DevHub username/alias and sandbox name.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/sandbox/update-sandbox.md#2025-04-18_snippet_0\n\nLANGUAGE: sh-session\nCODE:\n```\n$ sfp sandbox:update [flags]\\n$ sfp org:update:sandbox [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Aliasfy for Package Directories in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure a package directory with the 'aliasfy' attribute set to true. It allows for environment-specific deployment based on aliases.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/configuring-installation-behaviour-of-a-package/aliasfy-packages/README.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageDirectories\": [\n      {    \n      \"path\": \"src/src-env-specific-alias-post\",\n      \"package\": \"src-env-specific-alias-post\",\n      \"versionNumber\": \"2.0.10.NEXT\",\n      \"aliasfy\" : true\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Data Package Configuration in JSON\nDESCRIPTION: Basic configuration for defining a data package in sfdx-project.json, specifying the package path, name, version number and type.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/concepts/supported-package-types/data-packages.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"path\": \"path--to--data--package\",\n    \"package\": \"name--of-the-data package\",\n    \"versionNumber\": \"X.Y.Z.0\",\n    \"type\": \"data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Expanding Dependencies using Custom YAML Tag in Configuration Files\nDESCRIPTION: This YAML snippet demonstrates the use of a custom tag '!expand' to dynamically expand dependencies in a configuration file. It shows how to reference and expand values from other parts of the configuration, allowing for more flexible and maintainable setups.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/dependency-management/expand-dependencies.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  - name: common\n    version: !expand ${version.common}\n  - name: core\n    version: !expand ${version.core}\n\nversion:\n  common: 1.0.0\n  core: 2.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Scratch Org Definition Files in sfdx-project.json\nDESCRIPTION: Shows how to configure package-specific scratch org definition files in the sfdx-project.json file. This example demonstrates setting up two packages where package1 uses a custom definition file while package2 uses the default definition.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/controlling-aspects-of-the-build-command/use-of-multiple-config-file-in-build-command.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageDirectories\": [\n    {\n      \"path\": \"package1\",\n      \"default\": true,\n    },\n    {\n      \"path\": \"package2\",\n      \"default\": false\n    }\n  ],\n  \"plugins\": {\n    \"sfpowerscripts\":{\n      \"scratchOrgDefFilePaths\":{\n        \"enableMultiDefinitionFiles\": true,\n        \"packages\": {\n          \"package1\":\"scratchOrgDef/package1-def.json\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Build Exclusions in JSON Configuration\nDESCRIPTION: Example configuration showing how to use ignoreOnStage attribute to skip packages during build stages. The configuration demonstrates excluding the src-env-specific-pre package from the build stage while keeping feature-mgmt package in the normal build process.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/controlling-aspects-of-the-build-command/ignoring-packages-from-being-built.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageDirectories\": [\n    {\n      \"path\": \"./src-env-specific-pre\",\n      \"package\": \"src-env-specific-pre\",\n      \"versionNumber\": \"1.0.0.NEXT\",\n      \"ignoreOnStage\": [\n       \"build\"\n      ]\n    },\n    {\n      \"path\": \"./src/frameworks/feature-mgmt\",\n      \"package\": \"feature-mgmt\",\n      \"versionNumber\": \"1.0.0.NEXT\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: System Architecture Layer Diagram in Mermaid\nDESCRIPTION: Detailed flowchart showing the complete system architecture with multiple layers including Client, Edge, Application, Processing, Storage, and Secrets Management layers. Shows component relationships and system boundaries.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview.md#2025-04-18_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    %%{init: {\"flowchart\": {\"nodeSpacing\": 25, \"rankSpacing\": 50}}}%%\n    classDef blockStyle fill:#f9f,stroke-width:0;\n    \n    subgraph ClientLayer[Client Layer]\n        CLI[SFP CLI]\n        IDE[VSCode/IDE]\n        CI[CI/CD Systems]\n        CD[Codev Desktop]\n    end\n\n    subgraph EdgeLayer[Edge Layer]\n        CP[Caddy Proxy]\n        TLS[TLS Termination]\n        WH[Webhook Handler]\n    end\n\n    subgraph AppLayer[Application Layer]\n        API[API Gateway]\n        Auth[Auth Service]\n        Tasks[Task Service]\n        WS[WebSocket Service]\n    end\n\n    subgraph ProcessLayer[Processing Layer]\n        Queue[Task Queues]\n        Workers[Worker Pool]\n        Cache[Redis Cache]\n    end\n\n    subgraph StorageLayer[Storage Layer]\n        DB[(Supabase DB)]\n    end\n\n    subgraph SecretsLayer[Secrets Management]\n        Secrets[(Secret Store)]\n    end\n\n    class ClientLayer,EdgeLayer,AppLayer,ProcessLayer,StorageLayer,SecretsLayer blockStyle;\n\n    ClientLayer -.-> EdgeLayer\n    EdgeLayer -.-> AppLayer\n    AppLayer -.-> ProcessLayer\n    ProcessLayer -.-> StorageLayer\n    ProcessLayer -.-> SecretsLayer\n\n    CLI -.-> IDE -.-> CI -.-> CD\n    CP -.-> TLS -.-> WH\n    API -.-> Auth -.-> Tasks -.-> WS\n    Queue -.-> Workers -.-> Cache\n\n    linkStyle default stroke-width:0,stroke:transparent;\n```\n\n----------------------------------------\n\nTITLE: Debugging SFP Quick Build Output with No Artifacts\nDESCRIPTION: Example of SFP orchestrator quickbuild command output when no artifacts are generated, showing empty package build list\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/faqs/common-errors/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n➜  flxbl-demo git:(main) sfp orchestrator:quickbuild -v DXScaleProd --branch main\n------------------------------------------------------------------------------------------\nsfp  -- Salesforce Package Manager -Version:30.3.5 -Release:January 24\n------------------------------------------------------------------------------------------\ncommand: quickbuild\nBuild Packages Only Changed: false\nConfig File Path: config/project-scratch-def.json\nArtifact Directory: artifacts\n------------------------------------------------------------------------------------------\nPackages scheduled for build\n                                \n Package   Reason to be built \n                                \n\nResolving dependencies\n\nValidating Project Dependencies...\n\n\n\nBuilding Packages\n\n\n\n\nGenerating Artifacts and Tags....\n```\n\n----------------------------------------\n\nTITLE: Visualizing Role and Permission Management in Mermaid\nDESCRIPTION: This diagram depicts the role and permission management system, showing different role definitions, permission sets, and the resources they can access. It illustrates how access control is implemented in the system.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/authentication-and-security-architecture.md#2025-04-18_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"Role Definitions\"\n        AD[Admin]\n        ME[Member]\n        AP[Application]\n    end\n\n    subgraph \"Permission Sets\"\n        PS[Production Access]\n        DS[Development Access]\n        CS[Configuration Access]\n    end\n\n    subgraph \"Resources\"\n        SO[Salesforce Orgs]\n        GR[Git Repositories]\n        CF[Configuration]\n    end\n\n    AD --> PS\n    AD --> DS\n    AD --> CS\n\n    ME --> DS\n    ME --> CS\n\n    AP --> PS\n    AP --> DS\n\n    PS --> SO\n    DS --> SO\n    CS --> GR\n    CS --> CF\n```\n\n----------------------------------------\n\nTITLE: Configuring SFP Release Candidate Docker Image\nDESCRIPTION: YAML configuration example for using a specific version or SHA of the SFP release candidate Docker image.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/getting-started/docker-images/README.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefault:\n   image: ghcr.io/flxbl-io/sfp-rc:<version-number>\n\nor\n   image: ghcr.io/flxbl-io/sfp-rc:<sha>\n```\n\n----------------------------------------\n\nTITLE: Sample SFDX Project Configuration for Package Type Analysis\nDESCRIPTION: A comprehensive example of sfdx-project.json showing package directory configurations with various package types including unlocked packages, source packages, and data packages. The configuration demonstrates package aliases, dependencies, and version information used for package type determination.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/concepts/identifying-types-of-a-package.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageDirectories\": [\n    {\n      \"path\": \"util\",\n      \"default\": true,\n      \"package\": \"Expense-Manager-Util\",\n      \"versionName\": \"Winter '20\",\n      \"versionDescription\": \"Welcome to Winter 2020 Release of Expense Manager Util Package\",\n      \"versionNumber\": \"4.7.0.NEXT\"\n    },\n    {\n      \"path\": \"exp-core\",\n      \"default\": false,\n      \"package\": \"ExpenseManager\",\n      \"versionName\": \"v 3.2\",\n      \"versionDescription\": \"Winter 2020 Release\",\n      \"versionNumber\": \"3.2.0.NEXT\",\n      \"dependencies\": [\n        {\n          \"package\": \"ExpenseManager-Util\",\n          \"versionNumber\": \"4.7.0.LATEST\"\n        },\n          {\n          \"package\": \"TriggerFramework\",\n          \"versionNumber\": \"1.7.0.LATEST\"\n        },\n        {\n          \"package\": \"External Apex Library - 1.0.0.4\"\n        }\n      ]\n    },\n    {\n      \"path\": \"exp-core-config\",\n      \"package\": \"expense-manager-config\",\n      \"versionNumber\": \"1.0.1.NEXT\",\n      \"versionDescription\": \"This source package extends expense manager unlocked package\"\n    },\n    {\n      \"path\": \"expense-manager-test-data\",\n      \"package\": \"exppense-manager-test-data\",\n      \"type\":\"data\",\n      \"versionNumber\": \"1.0.1.NEXT\",\n      \"versionDescription\": \"This source package extends expense manager unlocked package\"\n    }\n  ],\n  \"sourceApiVersion\": \"47.0\",\n  \"packageAliases\": {\n    \"TriggerFramework\": \"0HoB00000004RFpLAM\",\n    \"Expense Manager - Util\": \"0HoB00000004CFpKAM\",\n    \"External Apex Library@1.0.0.4\": \"04tB0000000IB1EIAW\",\n    \"Expense Manager\": \"0HoB00000004CFuKAM\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Version Management Flow Diagram\nDESCRIPTION: Mermaid diagram illustrating the version control and update process flow for managing system versions.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview.md#2025-04-18_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"Version Control\"\n        Config[Configuration Version]\n        Images[Docker Images]\n        Schema[Database Schema]\n    end\n\n    subgraph \"Update Process\"\n        Check[Version Check]\n        Pull[Image Pull]\n        Apply[Apply Updates]\n    end\n\n    Config --> Check\n    Images --> Check\n    Schema --> Check\n\n    Check --> Pull\n    Pull --> Apply\n```\n\n----------------------------------------\n\nTITLE: Instance Isolation Architecture in Mermaid\nDESCRIPTION: Mermaid diagram showing the instance isolation architecture where each organization gets its own dedicated Supabase instance with separate auth, data, and realtime services.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/database-architecture.md#2025-04-18_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"FLXBL-Managed Environment\"\n        subgraph \"Organization A Instance\"\n            A_Auth[Auth A]\n            A_Data[Data A]\n            A_RT[Realtime A]\n        end\n  \n        subgraph \"Organization B Instance\"\n            B_Auth[Auth B]\n            B_Data[Data B]\n            B_RT[Realtime B]\n        end\n    end\n\n    subgraph \"Global Services\"\n        OAuth[OAuth Handler]\n    end\n\n    OAuth -.-> A_Auth\n    OAuth -.-> B_Auth\n\n    A_Auth --> A_Data\n    A_Auth --> A_RT\n  \n    B_Auth --> B_Data\n    B_Auth --> B_RT\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Settings for Scratch Org Definition\nDESCRIPTION: JSON configuration to disable minimum password lifetime in scratch org definition file. This resolves the password reset error when creating scratch org pools with org shapes.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/faqs/common-errors/org-shapes.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"securitySettings\": {\n            \"passwordPolicies\": {\n                \"minimumPasswordLifetime\": false\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Tagging and Pushing Docker Images\nDESCRIPTION: Commands for tagging and pushing images to a custom registry.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/getting-started/docker-images/sfp-pro.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Tag for your registry\ndocker tag source.flxbl.io/sfp-pro:version your-registry/sfp-pro:version\n\n# Push to your registry\ndocker push your-registry/sfp-pro:version\n```\n\n----------------------------------------\n\nTITLE: Example Salesforce Project Configuration with Package Dependencies\nDESCRIPTION: A sample sfdx-project.json that defines three packages (sfdc-logging, feature-mgmt, core-crm) with dependencies between them. This demonstrates the base configuration that will be used to explain transitive dependency resolution.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/concepts/transitive-dependency-resolution.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packageDirectories\": [\n       {\n            \"path\": \"./src/frameworks/sfdc-logging\",\n            \"package\": \"sfdc-logging\",\n            \"versionName\": \"Version 1.0.2\",\n            \"versionNumber\": \"1.0.2.NEXT\"\n        },\n        {\n            \"path\": \"./src/frameworks/feature-mgmt\",\n            \"package\": \"feature-mgmt\",\n            \"versionName\": \"Version 1.0.6\",\n            \"versionNumber\": \"1.0.6.NEXT\",\n            \"dependencies\": [\n                {\n                    \"package\": \"sfdc-logging\",\n                    \"versionNumber\": \"1.0.2.LATEST\"\n                }\n            ]\n        },\n        {\n            \"path\": \"./src/core-crm\",\n            \"package\": \"core-crm\",\n            \"versionName\": \"Version 1.0.4\",\n            \"versionNumber\": \"1.0.4.NEXT\",\n            \"dependencies\": [\n                {\n                    \"package\": \"feature-mgmt\",\n                    \"versionNumber\": \"1.0.6.LATEST\"\n                }\n            ]\n        }\n    ],\n    \"namespace\": \"\",\n    \"sfdcLoginUrl\": \"https://login.salesforce.com\",\n    \"sourceApiVersion\": \"60.0\",\n    \"packageAliases\": {\n        \"feature-mgmt\": \"0Ho5f000000GmkrCAC\",\n        \"sfdc-logging\": \"0Ho5f000000GmerCAC\",\n        \"core-crm\": \"0Ho5f000000Amz7CAC\"\n    },\n    \"plugins\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Worker Lifecycle Flow Diagram\nDESCRIPTION: Mermaid diagram showing the worker lifecycle stages from initialization through termination.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview.md#2025-04-18_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"Worker Lifecycle\"\n        Init[Initialize Container]\n        Cred[Load Credentials]\n        Exec[Execute Task]\n        Report[Report Progress]\n        Term[Terminate Container]\n    end\n\n    Init --> Cred\n    Cred --> Exec\n    Exec --> Report\n    Report --> Term\n```\n\n----------------------------------------\n\nTITLE: Server Update Process Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram showing the server update process flow between Admin, CLI, Docker, and Services components.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview.md#2025-04-18_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Admin\n    participant CLI\n    participant Docker\n    participant Services\n\n    Admin->>CLI: sfp server stop\n    CLI->>Docker: Stop Services\n    Docker-->>CLI: Services Stopped\n\n    Admin->>CLI: sfp server update\n    CLI->>Docker: Pull New Images\n    Docker-->>CLI: Images Updated\n\n    Admin->>CLI: sfp server start\n    CLI->>Docker: Start Services\n    Docker-->>Services: Initialize\n    Services-->>CLI: Services Ready\n    CLI-->>Admin: Update Complete\n```\n\n----------------------------------------\n\nTITLE: Visualizing Integration Architecture in Mermaid\nDESCRIPTION: This diagram shows the overall integration architecture, including external systems, edge layer, application layer, worker layer, and secret storage. It illustrates how different components interact to handle various types of operations.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/network-architecture-and-integration-system.md#2025-04-18_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"External Systems\"\n        SF[Salesforce Orgs]\n        GH[GitHub/GitLab]\n        CI[CI/CD Systems]\n    end\n\n    subgraph \"Edge Layer\"\n        CP[Caddy Proxy]\n        TLS[TLS Termination]\n    end\n\n    subgraph \"Application Layer\"\n        API[API Gateway]\n        Tasks[Task Service]\n        Auth[Auth Service]\n    end\n\n    subgraph \"Worker Layer\"\n        WM[Worker Manager]\n        subgraph \"Ephemeral Worker\"\n            CS[Credential Service]\n            TH[Task Handler]\n        end\n    end\n\n    subgraph \"Secret Storage\"\n        Supa[Supabase]\n        Inf[Infisical]\n    end\n\n    CI --> CP\n    CP --> API\n    API --> Tasks\n    Tasks --> WM\n    WM --> CS\n    CS --> Inf\n    CS --> Supa\n    TH --> SF\n    TH --> GH\n```\n\n----------------------------------------\n\nTITLE: Azure Key Vault Integration Setup\nDESCRIPTION: Example demonstrating production server initialization with Azure Key Vault integration.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/initializing-sfp-server.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsfp server init --tenant my-app --mode prod \\\n  --secrets-provider azure-keyvault \\\n  --keyvault-url https://myvault.vault.azure.net\n```\n\n----------------------------------------\n\nTITLE: External Dependency Map Configuration in Salesforce Project\nDESCRIPTION: Configuration example showing how to define dependencies from external packages not included in the current repository. This allows the transitive dependency resolver to work with packages built in other repositories or managed packages.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/concepts/transitive-dependency-resolution.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n \"plugins\": {\n        \"sfp\": {\n            \"disableTransitiveDependencyResolver\": true,\n            \"ignoreFiles\": {\n                \"prepare\": \".forceignore\",\n                \"validate\": \".forceignore\",\n                \"quickbuild\": \"forceignores/.quickbuildignore\",\n                \"build\": \"forceignores/.buildignore\"\n            },\n            \"externalDependencyMap\": {\n                \"trigger-framework\": [\n                    {\n                        \"package\": \"0H1000XRTCam\",\n                        \"versionNumber\": \"1.0.3.LATEST\"\n                    }\n                ],\n          }\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram of Application Token Handling in SFP Pro Server\nDESCRIPTION: This sequence diagram demonstrates the strict approach to application token management. It shows the flow of token validation, permission checking, and the system's response to valid and invalid tokens, emphasizing the no automatic renewal policy.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/authentication-system-deep-dive.md#2025-04-18_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant App as Application\n    participant Guard as Auth Guard\n    participant Token as Token Service\n    participant Membership as Membership Service\n\n    App->>Guard: Request with App Token\n    Guard->>Token: Validate Token\n  \n    alt Token Valid\n        Token-->>Guard: Token Details\n        Guard->>Membership: Check Permissions\n        Membership-->>Guard: Permission Valid\n        Guard-->>App: Allow Request\n    else Token Invalid/Expired\n        Token-->>Guard: Validation Failed\n        Guard-->>App: 401 Unauthorized\n        Note over App,Guard: No Automatic Renewal\n    end\n```\n\n----------------------------------------\n\nTITLE: FLXBL-Managed Authentication Flow Diagram\nDESCRIPTION: Mermaid diagram illustrating the authentication architecture for FLXBL-managed deployments, showing flow from global services through organization instance components.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview.md#2025-04-18_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"FLXBL Global Services\"\n        GA[OAuth Callback Handler]\n        Apps[FLXBL Social Apps]\n    end\n\n    subgraph \"Organization Instance\"\n        subgraph \"Edge Layer\"\n            CP[Caddy Proxy]\n            TLS[TLS Termination]\n        end\n\n        subgraph \"Auth Services\"\n            Auth[Auth Service]\n            Token[Token Manager]\n            RBAC[Role Manager]\n        end\n    end\n\n    GA --> CP\n    CP --> Auth\n    Auth --> Token\n    Token --> RBAC\n```\n\n----------------------------------------\n\nTITLE: Visualizing Task Lifecycle in SFP Pro Server using Mermaid\nDESCRIPTION: This diagram illustrates the complete lifecycle of a task in the SFP Pro Server, from client submission through API, queuing, worker assignment, execution, and result delivery. It shows the interaction between different components and the flow of information.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/task-processing-system.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant API\n    participant Queue\n    participant WorkerManager\n    participant Worker\n    participant Resources\n\n    Client->>API: Submit Task\n    Note over API: Priority Analysis\n    Note over API: Validation\n    API->>Queue: Enqueue Task\n    Queue-->>Client: Task ID & WebSocket Channel\n  \n    loop Until Complete\n        WorkerManager->>Queue: Poll for Tasks\n        Queue-->>WorkerManager: Task Available\n        WorkerManager->>Worker: Spawn Worker\n  \n        Worker->>Resources: Initialize\n        Note over Worker: Load Secrets\n        Note over Worker: Setup Environment\n  \n        Worker->>Resources: Execute Task\n        Worker-->>Queue: Update Progress\n        Queue-->>Client: Real-time Updates\n    end\n  \n    Worker-->>Queue: Complete\n    Queue-->>Client: Final Result\n    Note over Worker: Cleanup & Terminate\n```\n\n----------------------------------------\n\nTITLE: Unlocking a Resource using SFP GitHub Resource Command\nDESCRIPTION: This command releases a lock on a specific resource for a particular ticket. Options include specifying the repository, resource name, and ticket ID associated with the lock to be released.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/helpers/managing-shared-resources.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sfp gh resource dequeue --repository owner/repo --resource resource-name --ticketid ticket-id\n```\n\n----------------------------------------\n\nTITLE: Vlocity Package Definition in JSON\nDESCRIPTION: JSON configuration for defining a Vlocity data package in sfdx-project.json.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/concepts/supported-package-types/data-packages.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"path\": \"./src/vlocity-config\",\n    \"package\": \"vlocity-attributes\",\n    \"versionNumber\": \"1.0.0.0\",\n    \"type\": \"data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Supabase Integration Architecture in Mermaid\nDESCRIPTION: Diagram showing how Supabase components integrate with the application architecture, including authentication, row-level security, real-time engine, and REST API interactions.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview.md#2025-04-18_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"Supabase Instance\"\n        Auth[Auth System]\n        RLS[Row Level Security]\n        RT[Real-time Engine]\n        REST[PostgREST API]\n        PG[(PostgreSQL Core)]\n    end\n\n    subgraph \"Application Components\"\n        API[API Gateway]\n        Workers[Worker Processes]\n        WS[WebSocket Service]\n    end\n\n    API --> REST\n    API --> Auth\n    Workers --> REST\n    WS --> RT\n\n    REST --> RLS\n    RT --> RLS\n    RLS --> PG\n```\n\n----------------------------------------\n\nTITLE: Illustrating Worker Lifecycle in SFP Pro Server using Mermaid\nDESCRIPTION: This diagram shows the lifecycle of a worker in the SFP Pro Server, from task assignment to termination. It includes steps such as initialization, secret loading, environment setup, task execution, progress updates, completion, cleanup, and termination.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/task-processing-system.md#2025-04-18_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Start[Task Assignment] --> Init[Initialize Worker]\n    Init --> Secrets[Load Secrets]\n    Secrets --> Setup[Setup Environment]\n    Setup --> Execute[Execute Task]\n    Execute --> Progress[Send Progress Updates]\n    Progress -->|Task Ongoing| Execute\n    Execute --> Complete[Task Complete]\n    Complete --> Cleanup[Cleanup Resources]\n    Cleanup --> Terminate[Terminate Worker]\n```\n\n----------------------------------------\n\nTITLE: Sample Markdown Output of Duplicate Analysis Report\nDESCRIPTION: Example markdown output showing the structured results of a duplicate check analysis, including aliasified package information and detailed component analysis with status indicators.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/analysing-a-project/duplicate-check.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Duplicate Analysis Report\n\n## Aliasified Package Information\n- Note: Package \"env-specific\" is aliasified - duplicates are allowed.\n\n## Component Analysis\n\n### ❌ CustomObject: Account.Custom_Field__c (Duplicate Component)\n- `src/package1/objects/Account.object` \n- `src/package2/objects/Account.object`\n\n### ⚠️ CustomLabel: Common_Label (Aliasified Component)\n- `src/env-specific/qa/labels/Custom.labels` (aliasified)\n- `src/env-specific/prod/labels/Custom.labels` (aliasified)\n```\n\n----------------------------------------\n\nTITLE: Basic SFP Server Initialization Command\nDESCRIPTION: Basic command syntax for initializing an SFP server with required tenant parameter and optional flags.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/initializing-sfp-server.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsfp server init -t <tenant-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: API Gateway Structure Diagram in Mermaid\nDESCRIPTION: Flowchart showing the relationship between API Gateway components, Processing layer, and Storage systems. Illustrates how different API services interact with task queues, worker pools, and databases.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"API Gateway\"\n        Auth[Authentication API]\n        Task[Task Management API]\n        Doc[Document Store API]\n        KV[Key-Value API]\n        SF[Salesforce Auth API]\n        WH[Webhook API]\n    end\n\n    subgraph \"Processing\"\n        TQ[Task Queues]\n        Workers[Worker Pool]\n    end\n\n    subgraph \"Storage\"\n        Supabase[(Supabase)]\n        Redis[(Redis)]\n    end\n\n    Auth --> Supabase\n    Task --> TQ\n    Task --> Supabase\n    Doc --> Supabase\n    KV --> Supabase\n    SF --> Supabase\n    WH --> Supabase\n\n    TQ --> Workers\n    Workers --> Supabase\n    Workers --> Redis\n```\n\n----------------------------------------\n\nTITLE: Visualizing Authentication Flows in SFP Pro Server\nDESCRIPTION: This diagram illustrates the authentication paths for interactive users, CI/CD systems, and applications. It shows how different token types are processed through the authentication layer, including validation and role checking.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/authentication-system-deep-dive.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"Authentication Sources\"\n        UI[Interactive Users]\n        CI[CI/CD Systems]\n        Apps[Applications]\n    end\n\n    subgraph \"Authentication Layer\"\n        Guard[Auth Guard]\n        Val[Token Validation]\n        Roles[Role Checking]\n    end\n\n    subgraph \"Token Types\"\n        JWT[JWT Tokens]\n        AppToken[Application Tokens]\n    end\n\n    UI --> JWT\n    CI --> AppToken\n    Apps --> AppToken\n\n    JWT --> Guard\n    AppToken --> Guard\n\n    Guard --> Val\n    Val --> Roles\n```\n\n----------------------------------------\n\nTITLE: Generating Duplicate Check Reports in Salesforce Projects\nDESCRIPTION: Command for generating duplicate check reports in a specific directory with markdown formatting for documentation and tracking purposes.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/analysing-a-project/duplicate-check.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsfp project:analyze --report-dir ./reports --output-format markdown\n```\n\n----------------------------------------\n\nTITLE: Development Server Initialization\nDESCRIPTION: Example of initializing an SFP server in development mode with basic configuration.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/initializing-sfp-server.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsfp server init --tenant my-app\n```\n\n----------------------------------------\n\nTITLE: Real-time State Management Sequence in Mermaid\nDESCRIPTION: Mermaid sequence diagram demonstrating the real-time state management flow between Client, Server, Supabase, and Worker components.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/database-architecture.md#2025-04-18_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n    participant Supabase\n    participant Worker\n\n    Client->>Server: Request Operation Status\n    Server->>Supabase: Subscribe to Changes\n  \n    Worker->>Supabase: Update State\n    Note over Supabase: Real-time Processing\n    Supabase-->>Server: Instant Update\n    Server-->>Client: Live Status\n```\n\n----------------------------------------\n\nTITLE: Authentication Flow Diagram in Mermaid\nDESCRIPTION: Mermaid diagram illustrating the authentication flow in SFP Pro Server, showing how different access types interact with Supabase Auth, JWT tokens, and Row Level Security to access instance data.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/database-architecture.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"Authentication Flow\"\n        SA[Supabase Auth]\n        JWT[JWT Tokens]\n        RLS[Row Level Security]\n    end\n\n    subgraph \"Access Types\"\n        UI[User Interface]\n        CI[CI/CD Systems]\n        AP[Application Access]\n    end\n\n    UI --> SA\n    CI --> SA\n    AP --> SA\n\n    SA --> JWT\n    JWT --> RLS\n\n    RLS --> Data[(Instance Data)]\n```\n\n----------------------------------------\n\nTITLE: Package ID Reference in Markdown\nDESCRIPTION: Reference to the SFPOWERSCRIPTS_ARTIFACT_PACKAGE ID used for tracking installed packages in scratch orgs.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/pools/pool-operations/preparing-pools/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n04t1P000000ka9mQAA\n```\n\n----------------------------------------\n\nTITLE: Custom Worker Configuration\nDESCRIPTION: Example showing server initialization with custom worker count configuration.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/initializing-sfp-server.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsfp server init --tenant my-app --worker-counts 2,3,1\n```\n\n----------------------------------------\n\nTITLE: Task System Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram showing the interaction flow between Client, API, Task System, and WebSocket for task execution and monitoring.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/integration-architecture-building-extensions.md#2025-04-18_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant API\n    participant Task\n    participant WebSocket\n  \n    Client->>API: Submit Task\n    API->>Task: Create Task\n    API-->>Client: Operation ID\n  \n    Client->>WebSocket: Subscribe to Updates\n  \n    loop Task Execution\n        Task-->>WebSocket: Progress Updates\n        WebSocket-->>Client: Real-time Status\n    end\n  \n    Task-->>WebSocket: Completion\n    WebSocket-->>Client: Final Result\n```\n\n----------------------------------------\n\nTITLE: Visualizing Sandbox Pool Lifecycle with Mermaid\nDESCRIPTION: State diagram showing the complete lifecycle of a sandbox within a pool, including creation, availability, usage, extension, and expiration states.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/pools/sandbox-pools/README.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> Created: Init (sfp pool sandbox init)\n    Created --> Available: Monitor (sfp pool sandbox monitor)\n    Available --> InUse: Fetch (sfp pool sandbox fetch)\n    InUse --> Available: Lease Expired (sfp pool sandbox fetch)\n    Available --> Extended: Extend (sfp pool sandbox extend)\n    Extended --> Available: Extension Expired (sfp sandbox monitor)\n    Available --> Expired: Monitor( sfp pool sandbox monitor )\n    Extended --> Expired: Monitor ( sfp pool sandbox monitor)\n    Expired --> [*] \n```\n\n----------------------------------------\n\nTITLE: Executing Standalone Changelog Generation Command (YAML)\nDESCRIPTION: This snippet demonstrates how to use the sfp changelog generate command to create a changelog independently of the release process. It includes options for specifying the branch, artifacts directory, work item filter, and issue tracker URL.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/releasing-artifacts/generating-a-changelog.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n sfp changelog generate -b releasedefns \\\n                        -d artifacts \\\n                        -w \"(FGK|FFK)-[0-9]{3,4}\" \\\n                        -r \"https://adiza.atlassian.net/browse\" \\\n                        -n Release-1 \\\n                       --directory changelog\n```\n\n----------------------------------------\n\nTITLE: JSON Output Structure for sfp project:push Command\nDESCRIPTION: Structure of the JSON output when using the --json flag with the sfp project:push command. Includes fields for errors, error messages, and conflict information.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/development/push-changes-to-your-org.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hasError\": boolean,\n  \"errorMessage\": string,\n  \"errors\": [\n    {\n      \"Name\": string,\n      \"Type\": string,\n      \"Status\": string,\n      \"Message\": string\n    }\n  ],\n  \"conflicts\": [\n    {\n      \"fullName\": string,\n      \"type\": string,\n      \"filePath\": string,\n      \"state\": string\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Real-time Updates Process in Mermaid\nDESCRIPTION: This sequence diagram illustrates the process of providing real-time updates through WebSocket connections. It shows how clients establish connections and receive updates from workers executing tasks.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/network-architecture-and-integration-system.md#2025-04-18_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Caddy\n    participant WebSocket\n    participant Task\n    participant Worker\n\n    Client->>Caddy: WebSocket Upgrade\n    Caddy->>WebSocket: Establish Connection\n  \n    loop Task Execution\n        Worker->>Task: Progress Update\n        Task->>WebSocket: Status Change\n        WebSocket->>Client: Real-time Update\n    end\n```\n\n----------------------------------------\n\nTITLE: Integration Methods and Authentication Flow Diagram\nDESCRIPTION: Mermaid diagram illustrating the primary integration methods (REST API, Webhooks, WebSocket) and their relationship with authentication and state management systems.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/integration-architecture-building-extensions.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"Integration Methods\"\n        API[REST API]\n        WH[Webhooks]\n        WS[WebSocket]\n    end\n\n    subgraph \"Authentication\"\n        AT[Application Tokens]\n        OAuth[OAuth Flow]\n    end\n\n    subgraph \"State Management\"\n        KV[Key-Value Store]\n        DS[Document Store]\n        TS[Task System]\n    end\n\n    API --> AT\n    API --> OAuth\n  \n    WH --> KV\n    WH --> DS\n  \n    WS --> TS\n```\n\n----------------------------------------\n\nTITLE: Executing sfp Release Command with Changelog Generation (YAML)\nDESCRIPTION: This snippet demonstrates how to use the sfp release command to generate a changelog. It includes flags for specifying the branch name, enabling changelog generation, and other release-related options.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/releasing-artifacts/generating-a-changelog.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsfp release -u prod \\\n            -p  releasedefn.yaml \\\n            --npm --scope flxbl \\\n            -v prod \\\n             --generatechangelog --branchname changelog\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for GitHub/GitLab Integration\nDESCRIPTION: Required environment variables to enable integration with GitHub or GitLab, including token setup with appropriate access permissions.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/environment-management/pools/sandbox-pools/monitor-sandbox-pools.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nGITHUB \n-------------------------\nEXPORT GITHUB=1\nEXPORT GITHUB_TOKEN=<YOUR_GITHUB_TOKEN> // GITHUB TOKEN NEEDS REPO SCOPE\n\nGITLAB\n-------------------------------\nEXPORT  GITLAB=1\nEXPORT GITLAB_TOKEN=<YOUR_GITLAB_TOKEN> //  GITLAB TOKEN NEEDS API SCOPE\n```\n\n----------------------------------------\n\nTITLE: Visualizing Secure Salesforce Integration Process in Mermaid\nDESCRIPTION: This sequence diagram illustrates the process of securely integrating with Salesforce, including credential management, worker spawning, and task execution. It shows how the system maintains security throughout the operation.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/network-architecture-and-integration-system.md#2025-04-18_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant API\n    participant Task\n    participant Worker\n    participant Secrets\n    participant Salesforce\n\n    Client->>API: Request Operation\n    API->>Task: Create Task\n    Task->>Worker: Spawn Worker\n  \n    Worker->>Secrets: Request Credentials\n    Note over Secrets: Decrypt Org Credentials\n    Secrets-->>Worker: Provide Credentials\n  \n    Worker->>Salesforce: Establish Connection\n    Note over Worker: Execute Operation\n  \n    Worker-->>Task: Report Progress\n    Task-->>Client: Status Updates\n  \n    Note over Worker: Clear Credentials\n    Worker->>Worker: Self Terminate\n```\n\n----------------------------------------\n\nTITLE: State Management Architecture Diagram Using Mermaid\nDESCRIPTION: Mermaid flowchart depicting the state management system architecture, showing relationships between state types (Operational, Resource, Task), storage systems (Supabase, Redis), and access patterns (API, WebSocket, Workers).\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview.md#2025-04-18_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"State Types\"\n        OS[Operational State]\n        RS[Resource State]\n        TS[Task State]\n    end\n\n    subgraph \"Storage Systems\"\n        DB[(Supabase)]\n        Cache[(Redis)]\n    end\n\n    subgraph \"Access Patterns\"\n        API[API Service]\n        WS[WebSocket Service]\n        Workers[Worker Processes]\n    end\n\n    OS --> DB\n    RS --> Cache\n    TS --> Cache\n\n    DB --> API\n    Cache --> WS\n    DB --> Workers\n    Cache --> Workers\n    FS --> Workers\n```\n\n----------------------------------------\n\nTITLE: Configuring skipCoverageValidation in Package JSON\nDESCRIPTION: Demonstrates how to configure skipCoverageValidation flag in package directory configuration. This setting allows skipping of apex test coverage validation for situations where coverage calculation may be unreliable. Applicable to unlocked, org-dependent unlocked, source, and diff package types.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/validating-a-change/controlling-validation-attributes-of-a-package/skip-coverage-validation.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageDirectories\": [\n    {\n      \"path\": \"core-crm\",\n      \"package\": \"core-crm\",\n      \"versionDescription\": \"Package containing core schema and classes\",\n      \"versionNumber\": \"4.7.0.NEXT\",\n      \"skipCoverageValidation\": true\n    },\n     ...\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Network Architecture Diagram\nDESCRIPTION: Mermaid diagram depicting the bridge network architecture using Docker Compose, showing service connections and external dependencies.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview.md#2025-04-18_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"Docker Bridge Network\"\n        subgraph \"Edge Services\"\n            Caddy[Caddy Proxy]\n        end\n\n        subgraph \"Core Services\"\n            App[API Service]\n            CriticalW[Critical Workers]\n            NormalW[Normal Workers]\n            BatchW[Batch Workers]\n        end\n\n        subgraph \"Infrastructure Services\"\n            Redis[(Redis)]\n        end\n    end\n\n    subgraph \"External Services\"\n        Supabase[(Supabase DB)]\n        Infisical[(Secret Store)]\n    end\n\n    Caddy --> App\n    App --> CriticalW\n    App --> NormalW\n    App --> BatchW\n    \n    CriticalW --> Redis\n    NormalW --> Redis\n    BatchW --> Redis\n    App --> Redis\n\n    CriticalW -.-> Supabase\n    NormalW -.-> Supabase\n    BatchW -.-> Supabase\n    App -.-> Supabase\n\n    CriticalW -.-> Infisical\n    NormalW -.-> Infisical\n    BatchW -.-> Infisical\n```\n\n----------------------------------------\n\nTITLE: Global vs Local Authentication Modes in SFP Pro Server\nDESCRIPTION: This diagram compares the global and local authentication modes supported by the system. It shows the different components involved in each mode (JWT validation, membership checks, Supabase Auth) and how they integrate with common layers like application tokens and role-based access control.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/authentication-system-deep-dive.md#2025-04-18_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"Global Auth Mode\"\n        GJ[JWT Validation]\n        GM[Membership Check]\n        GR[Role Verification]\n    end\n\n    subgraph \"Local Auth Mode\"\n        LS[Supabase Auth]\n        LM[Local Membership]\n        LR[Role Management]\n    end\n\n    subgraph \"Common Layer\"\n        AT[Application Tokens]\n        RB[Role-Based Access]\n    end\n\n    GJ --> GM\n    GM --> GR\n  \n    LS --> LM\n    LM --> LR\n  \n    AT --> RB\n    GR --> RB\n    LR --> RB\n```\n\n----------------------------------------\n\nTITLE: Self-Managed Authentication Flow Diagram\nDESCRIPTION: Mermaid diagram showing the authentication architecture for self-managed deployments where organizations handle their own OAuth applications.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview.md#2025-04-18_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"Organization Infrastructure\"\n        subgraph \"Edge Layer\"\n            CP[Caddy Proxy]\n            TLS[TLS Termination]\n        end\n\n        subgraph \"Auth Services\"\n            OAuth[Organization OAuth Apps]\n            Auth[Auth Service]\n            Token[Token Manager]\n            RBAC[Role Manager]\n        end\n    end\n\n    OAuth --> CP\n    CP --> Auth\n    Auth --> Token\n    Token --> RBAC\n```\n\n----------------------------------------\n\nTITLE: Installing sfp via npm (Not Recommended for Production)\nDESCRIPTION: Command for installing a specific version of sfp using npm. This method is not recommended for production environments, with Docker being the preferred installation approach.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/faqs/sfp-versioning-and-upgrade-process.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @flxbl-io/sfp@X.Y.Z  # Replace X.Y.Z with the specific version number\n```\n\n----------------------------------------\n\nTITLE: Visualizing Authentication Layers in Mermaid\nDESCRIPTION: This diagram illustrates the multiple layers of authentication in the system, including user authentication, global OAuth layer, instance auth layer, and resource security. It shows the flow of authentication from user interfaces through various services.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/authentication-and-security-architecture.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"User Authentication\"\n        UI[User Interface]\n        CLI[SFP CLI]\n        CI[CI/CD Systems]\n    end\n\n    subgraph \"Global OAuth Layer\"\n        GO[FLXBL OAuth Handler]\n        GC[OAuth Callbacks]\n        GP[Provider Apps]\n    end\n\n    subgraph \"Instance Auth Layer\"\n        LA[Local Auth Service]\n        LS[Session Management]\n        LR[Role Management]\n    end\n\n    subgraph \"Resource Security\"\n        SF[Salesforce Auth]\n        GH[GitHub Auth]\n        SK[Secret Management]\n    end\n\n    UI --> GO\n    CLI --> GO\n    CI --> LA\n\n    GO --> GC\n    GC --> GP\n    GP --> LA\n\n    LA --> LS\n    LA --> LR\n    LA --> SF\n    LA --> GH\n    LA --> SK\n```\n\n----------------------------------------\n\nTITLE: Visualizing Credential Security Architecture in Mermaid\nDESCRIPTION: This diagram shows the credential security architecture, including secret storage options, runtime access, and cleanup processes. It illustrates how credentials are securely managed and accessed throughout the system.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/authentication-and-security-architecture.md#2025-04-18_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"Secret Storage\"\n        IS[Infisical]\n        IV[Vault Alternative]\n        SK[Other Secret Providers]\n    end\n\n    subgraph \"Runtime Access\"\n        WK[Worker Process]\n        TH[Task Handler]\n    end\n\n    subgraph \"Cleanup\"\n        CT[Credential Cleanup]\n        MT[Memory Wipe]\n    end\n\n    IS --> WK\n    IV --> WK\n    SK --> WK\n\n    WK --> TH\n    TH --> CT\n    CT --> MT\n```\n\n----------------------------------------\n\nTITLE: Role-Based Access Control Hierarchy in SFP Pro Server\nDESCRIPTION: This diagram illustrates the role-based access control system, showing the hierarchy of roles (Owner, Member, Application) and their associated permission types (Production, Development, Configuration Access). It demonstrates how different roles have varying levels of access to different system aspects.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/authentication-system-deep-dive.md#2025-04-18_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"Role Hierarchy\"\n        Owner[Owner Role]\n        Member[Member Role]\n        App[Application Role]\n    end\n\n    subgraph \"Permission Types\"\n        PR[Production Access]\n        DR[Development Access]\n        CR[Configuration Access]\n    end\n\n    Owner --> PR\n    Owner --> DR\n    Owner --> CR\n  \n    Member --> DR\n    Member --> CR\n  \n  \n    App --> PR\n    App --> DR\n```\n\n----------------------------------------\n\nTITLE: Webhook System Architecture Diagram\nDESCRIPTION: Mermaid graph showing the webhook system architecture including event sources, processing components, and delivery targets.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/integration-architecture-building-extensions.md#2025-04-18_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"Event Sources\"\n        TS[Task System]\n        DS[Document Store]\n        Auth[Auth System]\n    end\n\n    subgraph \"Webhook Processing\"\n        Router[Event Router]\n        Filter[Event Filter]\n        Queue[Delivery Queue]\n    end\n\n    subgraph \"Delivery Targets\"\n        HTTP[HTTP Endpoints]\n    end\n\n    TS --> Router\n    DS --> Router\n    Auth --> Router\n  \n    Router --> Filter\n    Filter --> Queue\n    Queue --> HTTP\n```\n\n----------------------------------------\n\nTITLE: Visualizing Edge Layer and Application Layer Interaction in Mermaid\nDESCRIPTION: This diagram illustrates the flow of data from external clients through the edge layer (Caddy) to the application layer, showing how different types of connections are handled.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/running-sfp-as-a-server/sfp-pro-server-architecture-overview/network-architecture-and-integration-system.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"External Clients\"\n        CLI[CLI Tools]\n        CI[CI/CD Systems]\n        WH[Webhooks]\n        CD[Codev Desktop]\n    end\n\n    subgraph \"Edge Layer\"\n        CP[Caddy Proxy]\n        TLS[TLS Termination]\n        HC[Health Checks]\n    end\n\n    subgraph \"Application Layer\"\n        API[API Gateway]\n        WS[WebSocket Server]\n        Tasks[Task Service]\n    end\n\n    CLI --> CP\n    CI --> CP\n    WH --> CP\n    CD --> CP\n\n    CP --> TLS\n    TLS --> API\n    TLS --> WS\n  \n    API --> Tasks\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Forceignore Files in sfdx-project.json\nDESCRIPTION: Configuration example showing how to specify different .forceignore files for build and validate operations in a Salesforce DX project. The configuration is added to the sfdx-project.json file under the plugins.sfp.ignoreFiles section.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/building-artifacts/controlling-aspects-of-the-build-command/selective-ignoring-of-components-from-being-built.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n {\n  \"packageDirectories\": [\n    {\n      \"path\": \"core\",\n      \"package\": \"core-package\",\n      \"versionName\": \"Core 1.0\",\n      \"versionNumber\": \"1.0.0.NEXT\",\n      \"default\": true,\n    }\n  ],\n  \"plugins\": {\n        \"sfp\": {\n            \"ignoreFiles\": {\n               \"build\": \"forceignores/.buildignore\",\n                \"validate\": \".forceignore\"\n            }\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Disabling Transitive Dependency Resolution in Salesforce Project\nDESCRIPTION: Configuration option showing how to disable the transitive dependency resolver feature for projects that have more stringent dependency management requirements or prefer to manage dependencies manually.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/concepts/transitive-dependency-resolution.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"plugins\": {\n        \"sfp\": {\n            \"disableTransitiveDependencyResolver\": true,\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating an Unlocked Package with SF CLI\nDESCRIPTION: Command to create a new Salesforce unlocked package using the Salesforce CLI. This command specifies the package name, type, namespace configuration, and the target org.\nSOURCE: https://github.com/flxbl-io/docs-sfp/blob/main/configuring-a-project/creating-a-package.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsf package:create --name <package_name> --packagetype Unlocked  --nonamespace -o <alias_for_org>\n```"
  }
]