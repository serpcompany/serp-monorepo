[
  {
    "owner": "mrdoob",
    "repo": "three.js",
    "content": "TITLE: Creating and Animating a 3D Scene with Three.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a basic 3D scene using Three.js. It creates a camera, scene, and a cube mesh, then renders and animates the scene. The code uses WebGL for rendering and includes a simple rotation animation.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as THREE from 'three';\n\nconst width = window.innerWidth, height = window.innerHeight;\n\n// init\n\nconst camera = new THREE.PerspectiveCamera( 70, width / height, 0.01, 10 );\ncamera.position.z = 1;\n\nconst scene = new THREE.Scene();\n\nconst geometry = new THREE.BoxGeometry( 0.2, 0.2, 0.2 );\nconst material = new THREE.MeshNormalMaterial();\n\nconst mesh = new THREE.Mesh( geometry, material );\nscene.add( mesh );\n\nconst renderer = new THREE.WebGLRenderer( { antialias: true } );\nrenderer.setSize( width, height );\nrenderer.setAnimationLoop( animate );\ndocument.body.appendChild( renderer.domElement );\n\n// animation\n\nfunction animate( time ) {\n\n\tmesh.rotation.x = time / 2000;\n\tmesh.rotation.y = time / 1000;\n\n\trenderer.render( scene, camera );\n\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Using KTX2 Textures with Three.js\nDESCRIPTION: This snippet demonstrates how to use the KTX2Loader to load and apply a compressed KTX2 texture in a Three.js scene. It shows setting up the loader, detecting renderer support, and loading a texture with success and error callbacks.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/examples/jsm/libs/basis/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ktx2Loader = new KTX2Loader();\nktx2Loader.setTranscoderPath( 'examples/jsm/libs/basis/' );\nktx2Loader.detectSupport( renderer );\nktx2Loader.load( 'diffuse.ktx2', function ( texture ) {\n\n\tconst material = new THREE.MeshStandardMaterial( { map: texture } );\n\n}, function () {\n\n\tconsole.log( 'onProgress' );\n\n}, function ( e ) {\n\n\tconsole.error( e );\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Initializing DRACOLoader in JavaScript\nDESCRIPTION: Example showing how to initialize and configure the DRACOLoader including setting the decoder path and optionally overriding WASM support detection. This code demonstrates the basic setup required to use Draco compression in a three.js project.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/examples/jsm/libs/draco/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar dracoLoader = new DRACOLoader();\ndracoLoader.setDecoderPath('path/to/decoders/');\ndracoLoader.setDecoderConfig({type: 'js'}); // (Optional) Override detection of WASM support.\n```\n\n----------------------------------------\n\nTITLE: Cloning Three.js Repository with Depth Parameter in Shell\nDESCRIPTION: This command demonstrates how to clone the Three.js repository using Git with a depth parameter. It limits the clone to only the most recent commit, significantly reducing the download size from ~2 GB to a much smaller size.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone --depth=1 https://github.com/mrdoob/three.js.git\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Three.js Project\nDESCRIPTION: Command to install project dependencies using npm. This should be executed from the root folder of the project.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/test/unit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Prototype Methods for Undo/Redo in JavaScript\nDESCRIPTION: This snippet shows the required prototype methods for a command object: execute, undo, toJSON, and fromJSON. These methods handle the execution, reversal, serialization, and deserialization of the command respectively.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/editor/docs/Implementing additional commands for undo-redo.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDoSomethingCommand.prototype = {\n\n\texecute: function () {\n\n\t\t// TODO: apply changes to 'object' to reach the new state\n\n\t},\n\n\tundo: function () {\n\n\t\t// TODO: restore 'object' to old state\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar output = Command.prototype.toJSON.call( this ); // Required: Call 'toJSON'-method of prototype 'Command'\n\n\t\t// TODO: serialize all the necessary information as part of 'output' (JSON-format)\n\t\t// so that it can be restored in 'fromJSON'\n\n\t\treturn output;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tCommand.prototype.fromJSON.call( this, json ); // Required: Call 'fromJSON'-method of prototype 'Command'\n\n\t\t// TODO: restore command from json\n\n\t}\n\n};\n```\n\n----------------------------------------\n\nTITLE: Unit Test Template - JavaScript\nDESCRIPTION: Template code for implementing a new undo-redo command test, including basic setup with an Editor instance and common test objects. Shows structure for testing execute, undo, and redo operations.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/editor/docs/Writing unit tests for undo-redo commands.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule( \"DoSomethingCommand\" );\n\ntest(\"Test DoSomethingCommand (Undo and Redo)\", function() {\n\n    var editor = new Editor();\n\n    var box = aBox( 'Name your box' );\n\n    // other available objects from \"CommonUtilities.js\"\n    // var sphere = aSphere( 'Name your sphere' );\n    // var pointLight = aPointLight( 'Name your pointLight' );\n    // var perspectiveCamera = aPerspectiveCamera( 'Name your perspectiveCamera' );\n\n    // in most cases you'll need to add the object to work with\n    editor.execute( new AddObjectCommand( editor, box ) );\n\n\n    // your test begins here...\n\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Constructor for Undo/Redo in JavaScript\nDESCRIPTION: This snippet demonstrates the structure of a command constructor for implementing undo/redo functionality. It includes essential properties such as type and name, and prepares for storing state information.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/editor/docs/Implementing additional commands for undo-redo.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction DoSomethingCommand( editor ) {\n\n\tCommand.call( this, editor ); // Required: Call default constructor\n\n\tthis.type = 'DoSomethingCommand';            // Required: has to match the object-name!\n\tthis.name = 'Set/Do/Update Something'; // Required: description of the command, used in Sidebar.History\n\n\t// TODO: store all the relevant information needed to\n\t// restore the old and the new state\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Debugger Statement in JavaScript Test Code\nDESCRIPTION: Example of adding a debugger statement in JavaScript test code. This allows for pausing execution and inspecting the code when running tests in a browser's developer tools.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/test/unit/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndebugger;\n```\n\n----------------------------------------\n\nTITLE: Implementing Updatable Command for Undo/Redo in JavaScript\nDESCRIPTION: This snippet shows an example of an 'update' function for an updatable command. Updatable commands allow merging multiple related actions into a single undo step, which is useful for continuous operations like dragging.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/editor/docs/Implementing additional commands for undo-redo.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nupdate: function ( cmd ) {\n\n\tthis.newValue = cmd.newValue;\n\n},\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests in Node.js Environment\nDESCRIPTION: Command to execute unit tests in a Node.js environment. This should be run from the root folder of the project.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/test/unit/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-unit\n```\n\n----------------------------------------\n\nTITLE: Starting Local Web Server for Browser Testing\nDESCRIPTION: Command to start a local web server using servez for running tests in a browser environment. This serves the project on port 8080 with SSL enabled.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/test/unit/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx servez -p 8080 --ssl\n```\n\n----------------------------------------\n\nTITLE: Executing a Command for Undo/Redo in JavaScript\nDESCRIPTION: This snippet demonstrates how to execute a command using the editor object. The editor serves as the entry point for all commands to be added to the undo/redo history.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/editor/docs/Implementing additional commands for undo-redo.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor.execute( new DoSomethingCommand() );\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests for Three.js Examples\nDESCRIPTION: Shell commands for generating new screenshots and running end-to-end tests for Three.js examples. These commands allow for testing specific examples or all examples in the project.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/test/e2e/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# generate new screenshots for exact examples\nnpm run make-screenshot <example1_name> ... <exampleN_name>\n\n# check exact examples\nnpm run test-e2e <example1_name> ... <exampleN_name>\n\n# check all examples\nnpm run test-e2e\n```\n\n----------------------------------------\n\nTITLE: Linking to Member on Same Page (Documentation Syntax)\nDESCRIPTION: Outlines the syntax for creating a link to a property or method member that is documented within the same documentation file (on the current page). This syntax only requires the member name, prefixed with a dot.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/docs/api/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: Documentation Syntax\nCODE:\n```\n[page:.memberName]\n```\n\n----------------------------------------\n\nTITLE: Documenting Method (Documentation Syntax)\nDESCRIPTION: Details the necessary heading format (using `<h3>` tags) and the embedded tag used when documenting a class method. This tag requires specifying the method's return type and its name.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/docs/api/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: Documentation Syntax\nCODE:\n```\n<h3>[method:ReturnType methodName]</h3>\n```\n\n----------------------------------------\n\nTITLE: Linking to Page with Custom Title (Documentation Syntax)\nDESCRIPTION: Explains how to create a link to another documentation page for a given class, allowing a custom link text instead of using the class name as the default. This syntax requires specifying the target class name and the desired link title.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/docs/api/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Documentation Syntax\nCODE:\n```\n[page:ClassName link title]\n```\n\n----------------------------------------\n\nTITLE: Documenting Property (Documentation Syntax)\nDESCRIPTION: Specifies the required heading structure (using `<h3>` tags) and the embedded tag used for documenting a class property. This tag requires including the property's data type and name.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/docs/api/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: Documentation Syntax\nCODE:\n```\n<h3>[property:TypeName propertyName]</h3>\n```\n\n----------------------------------------\n\nTITLE: Linking to Page (Documentation Syntax)\nDESCRIPTION: Describes the basic syntax for creating a link to another documentation page for a specific class. When using this format, the class name itself will be used as the default link text.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/docs/api/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: Documentation Syntax\nCODE:\n```\n[page:ClassName]\n```\n\n----------------------------------------\n\nTITLE: Linking to Example with Custom Title (Documentation Syntax)\nDESCRIPTION: Shows the required syntax for linking to a specific example hosted on threejs.org/examples/. This format mandates providing a custom link title for the example link.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/docs/api/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: Documentation Syntax\nCODE:\n```\n[example:exampleName title]\n```\n\n----------------------------------------\n\nTITLE: Linking to Member on Another Page (Documentation Syntax)\nDESCRIPTION: Provides the syntax for linking directly to a specific property or method documented on a page belonging to a different class. This format requires specifying both the target class name and the member name.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/docs/api/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: Documentation Syntax\nCODE:\n```\n[page:ClassName.memberName]\n```\n\n----------------------------------------\n\nTITLE: Including Command in Editor Test Suite - HTML\nDESCRIPTION: Example showing how to include new command script references in the editor's test suite HTML file under the command object classes section.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/editor/docs/Writing unit tests for undo-redo commands.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n// <!-- command object classes -->\n//...\n<script src=\"../../editor/js/commands/AddScriptCommand.js\"></script>\n<script src=\"../../editor/js/commands/DoSomethingCommand.js\"></script>         // add this line\n<script src=\"../../editor/js/commands/MoveObjectCommand.js\"></script>\n//...\n```\n\n----------------------------------------\n\nTITLE: Including Test File Reference - HTML\nDESCRIPTION: Example showing how to include the new test file reference in the editor's test suite HTML file under the Undo-Redo tests section.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/editor/docs/Writing unit tests for undo-redo commands.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n// <!-- Undo-Redo tests -->\n//...\n<script src=\"editor/TestAddScriptCommand.js\"></script>\n<script src=\"editor/TestDoSomethingCommand.js\"></script>              // add this line\n<script src=\"editor/TestMoveObjectCommand.js\"></script>\n//...\n```\n\n----------------------------------------\n\nTITLE: Displaying Apache License 2.0 Text in Markdown\nDESCRIPTION: This code block contains the full text of the Apache License 2.0, formatted as a markdown code block. It includes all sections of the license, from definitions to accepting warranty or additional liability.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/src/nodes/materialx/DISCLAIMER.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n```\n\n----------------------------------------\n\nTITLE: Model Attribution and Modifications Documentation\nDESCRIPTION: Markdown documentation describing the RobotExpressive model, its creator, license (CC0 1.0), and modifications made to the original model including facial expressions, format conversion, and material optimizations.\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/examples/models/gltf/RobotExpressive/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# RobotExpressive\n\nModel by [Tomás Laulhé](https://www.patreon.com/quaternius). Before using this\nmodel on a project, consider supporting the creator's Patreon. CC0 1.0.\n\nModifications by [Don McCurdy](https://donmccurdy.com/):\n\n- Added three facial expression morph targets\n- Converted with FBX2GLTF\n- Removed duplicate materials and reduced material metalness\n```\n\n----------------------------------------\n\nTITLE: LDraw Part License Header\nDESCRIPTION: Standard license header that appears in LDraw parts files to indicate CCAL 2.0 license coverage\nSOURCE: https://github.com/mrdoob/three.js/blob/dev/examples/models/ldraw/officialLibrary/CAlicense.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0 !LICENSE Redistributable under CCAL version 2.0 : see CAreadme.txt\n```"
  }
]