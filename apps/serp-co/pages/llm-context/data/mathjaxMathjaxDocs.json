[
  {
    "owner": "mathjax",
    "repo": "mathjax-docs",
    "content": "TITLE: Labeling and Referencing an Equation in LaTeX\nDESCRIPTION: This LaTeX snippet demonstrates how to label an equation using `\\label` and reference it using `\\eqref`. The `\\label` command assigns a unique identifier to the equation, and `\\eqref` inserts the equation number at the reference point. The example includes a definite integral calculation.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/eqnumbers.rst#_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\nIn equation \\eqref{eq:sample}, we find the value of an\ninteresting integral:\n\n\\begin{equation}\n  \\int_0^\\infty \\frac{x^3}{e^x-1}\\,dx = \\frac{\\pi^4}{15}\n  \\label{eq:sample}\n\\end{equation}\n```\n\n----------------------------------------\n\nTITLE: Loading Latest MathJax from cdnjs\nDESCRIPTION: This snippet demonstrates how to load the latest 3.x.x version of the `tex-svg` component from cdnjs using the `latest.js` file. This file dynamically redirects to the newest version. Note the `?tex-svg.js` query string, which is necessary for this CDN.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/configuration.rst#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" id=\"MathJax-script\" async\n  src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.0.0/es5/latest?tex-svg.js\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring MathJax Inline\nDESCRIPTION: This snippet shows how to configure MathJax using an inline `<script>` tag before loading the MathJax script. It configures TeX input to use single dollar signs as inline math delimiters and sets the SVG output to use a global font cache.  It loads the `tex-svg` component file from the jsdelivr CDN.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/configuration.rst#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\nMathJax = {\n  tex: {\n    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']] // Escaped backslashes for LaTeX delimiters\n  },\n  svg: {\n    fontCache: 'global'\n  }\n};\n</script>\n<script type=\"text/javascript\" id=\"MathJax-script\" async\n  src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring MathJax with Global Object\nDESCRIPTION: This snippet demonstrates how to configure MathJax using a global `MathJax` object. It sets the `inlineMath` delimiters for the TeX input component and configures the SVG output component to use a global font cache. It should be placed in a `<script>` tag before loading MathJax.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/configuration.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  tex: {\n    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']] // Escaped backslashes for LaTeX delimiters\n  },\n  svg: {\n    fontCache: 'global'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Conditionally Loading MathJax based on TeX delimiters - JavaScript\nDESCRIPTION: This JavaScript code snippet checks the page content for TeX-like math delimiters ($, \\\\(, \\\\[, \\\\begin{...}) and dynamically loads MathJax if any are found. It also sets a basic MathJax configuration for inline math delimiters. This avoids loading MathJax on pages without math, improving page load times.  The script expects a 'body' variable containing the page content as a string.  It adds a script tag to the document head to load the MathJax component.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/typeset.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n(function () {\n  var body = document.body.textContent;\n  if (body.match(/(?:\\$|\\\\\\(|\\\\\\[|\\\\begin\\{.*?})/)) {\n    if (!window.MathJax) {\n      window.MathJax = {\n        tex: {\n          inlineMath: {'[+]': [['$', '$']]}\n        }\n      };\n    }\n    var script = document.createElement('script');\n    script.src = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js';\n    document.head.appendChild(script);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: HTML page with MathML using MathJax\nDESCRIPTION: This example demonstrates a complete HTML page that includes mathematical expressions written in MathML format, rendered by MathJax.  It showcases how to load the MathJax library and use MathML tags to represent math.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/basic/mathematics.rst#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n<title>MathJax MathML Test Page</title>\n<script type=\"text/javascript\" id=\"MathJax-script\" async\n  src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/mml-chtml.js\">\n</script>\n</head>\n<body>\n\n<p>\nWhen\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n  <mi>a</mi><mo>&#x2260;</mo><mn>0</mn>\n</math>,\nthere are two solutions to\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n  <mi>a</mi><msup><mi>x</mi><mn>2</mn></msup>\n  <mo>+</mo> <mi>b</mi><mi>x</mi>\n  <mo>+</mo> <mi>c</mi> <mo>=</mo> <mn>0</mn>\n</math>\nand they are\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\">\n  <mi>x</mi> <mo>=</mo>\n  <mrow>\n    <mfrac>\n      <mrow>\n        <mo>&#x2212;</mo>\n        <mi>b</mi>\n        <mo>&#x00B1;</mo>\n        <msqrt>\n          <msup><mi>b</mi><mn>2</mn></msup>\n          <mo>&#x2212;</mo>\n          <mn>4</mn><mi>a</mi><mi>c</mi>\n        </msqrt>\n      </mrow>\n      <mrow>\n        <mn>2</mn><mi>a</mi>\n      </mrow>\n    </mfrac>\n  </mrow>\n  <mtext>.</mtext>\n</math>\n</p>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Including MathJax from jsdelivr CDN\nDESCRIPTION: This code snippet demonstrates how to include the latest version of MathJax from the jsdelivr CDN. It loads the tex-mml-chtml.js file, which includes support for TeX and MathML input and generates HTML with CSS output (CommonHTML). It is placed in the <head> block of an HTML document.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/start.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" id=\"MathJax-script\" async\n     src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\">\n   </script>\n```\n\n----------------------------------------\n\nTITLE: Configuring TeX Input Processor Options in MathJax\nDESCRIPTION: This snippet shows how to configure various options for the TeX input processor within the MathJax global object. It configures packages, delimiters, escape processing, environment processing, and equation numbering. The snippet demonstrates how to customize the behavior of the TeX input processor to suit specific needs.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/input/tex.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  tex: {\n    packages: ['base'],        // extensions to use\n    inlineMath: [              // start/end delimiter pairs for in-line math\n      ['\\\\(', '\\\\)']\n    ],\n    displayMath: [             // start/end delimiter pairs for display math\n      ['$$', '$$'],\n      ['\\\\[', '\\\\]']\n    ],\n    processEscapes: true,      // use \\$ to produce a literal dollar sign\n    processEnvironments: true, // process \\begin{xxx}...\\end{xxx} outside math mode\n    processRefs: true,         // process \\ref{...} outside of math mode\n    digits: /^(?:[0-9]+(?:\\{,\\}[0-9]{3})*(?:\\.[0-9]*)?|\\.[0-9]+)/,\n                               // pattern for recognizing numbers\n    tags: 'none',              // or 'ams' or 'all'\n    tagSide: 'right',          // side for \\tag macros\n    tagIndent: '0.8em',        // amount to indent tags\n    useLabelIds: true,         // use label name rather than tag for ids\n    maxMacros: 10000,          // maximum number of macro substitutions per expression\n    maxBuffer: 5 * 1024,       // maximum size for the internal TeX string (5K)\n    baseURL:                   // URL for use with links to tags (when there is a <base> tag in effect)\n       (document.getElementsByTagName('base').length === 0) ?\n        '' : String(document.location).replace(/#.*$/, '')),\n    formatError:               // function called when TeX syntax errors occur\n        (jax, err) => jax.formatError(err)\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: MathML Tag Example in HTML\nDESCRIPTION: This code shows how to properly use MathML tags within an HTML document, specifically avoiding self-closing tags to ensure compatibility with older browsers.  It demonstrates the correct way to define an mspace tag.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/mathml.rst#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<mspace width=\"thinmathspace\"></mspace>\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Math Delimiters\nDESCRIPTION: This snippet demonstrates how to configure the inline math delimiters used by MathJax. It sets the `inlineMath` option to include both `$...$` and `\\(...\\)` as delimiters for inline mathematics. This allows MathJax to recognize and process these delimiters within the text.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/input/tex.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ninlineMath: [ ['$','$'], ['\\\\(','\\\\)'] ]\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration and MathJax: HTML\nDESCRIPTION: This snippet shows the HTML needed to load the combined configuration and MathJax loader JavaScript file.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/configuration.rst#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"load-mathjax.js\" async></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring MathJax for Inline Math Delimiters\nDESCRIPTION: This code snippet configures MathJax to use '$...$' and '\\(...\\)' as delimiters for inline math. It sets the MathJax global variable with a configuration object before loading the MathJax component (tex-chtml.js).  This enables single dollar signs as math delimiters.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/start.rst#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script>\n   MathJax = {\n     tex: {\n       inlineMath: [['$', '$'], ['\\\\(', '\\\\)']] // Escaped backslashes\n     }\n   };\n   </script>\n   <script id=\"MathJax-script\" async\n     src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js\">\n   </script>\n```\n\n----------------------------------------\n\nTITLE: HTML MathML non-self-closing tag example\nDESCRIPTION: This code snippet shows the correct way to include MathML in HTML. Self-closing tags should not be used.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/basic/mathematics.rst#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<mspace width=\"5pt\"></mspace>\n```\n\n----------------------------------------\n\nTITLE: MathJax Configuration with Tagformat Extension\nDESCRIPTION: This code snippet demonstrates how to configure MathJax to load the `tagformat` extension, set up a pageReady function for the startup component, configure the TeX input component, and define macros and tag formatting. It showcases various configuration options within the `MathJax` object.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/index.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {\n    load: ['[tex]/tagformat']\n  },\n  startup: {\n    pageReady: () => {\n      alert('Running MathJax');\n      return MathJax.startup.defaultPageReady();\n    }\n  },\n  tex: {\n    packages: {'[+]': ['tagformat']},\n    tagSide: 'left',\n    macros: {\n\t  RR: '{\\\\bf R}',\n\t  bold: ['{\\\\bf #1}',1]\n\t},\n    tagformat: {\n       tag: (n) => '[' + n + ']'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CommonHTML Output Processor in MathJax\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the CommonHTML output processor within MathJax. It sets various options such as scaling factor, minimum scale, font inheritance, font families for mtext and merror elements, unknown character font, MathML spacing, attributes to skip, ex factor, display alignment, and display indent.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/output/index.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  chtml: {\n    scale: 1,                      // global scaling factor for all expressions\n    minScale: .5,                  // smallest scaling factor to use\n    mtextInheritFont: false,       // true to make mtext elements use surrounding font\n    merrorInheritFont: false,      // true to make merror text use surrounding font\n    mtextFont: '',                 // font to use for mtext, if not inheriting (empty means use MathJax fonts)\n    merrorFont: 'serif',           // font to use for merror, if not inheriting (empty means use MathJax fonts)\n    unknownFamily: 'serif',        // font to use for character that aren't in MathJax's fonts\n    mathmlSpacing: false,          // true for MathML spacing rules, false for TeX rules\n    skipAttributes: {},            // RFDa and other attributes NOT to copy to the output\n    exFactor: .5,                  // default size of ex in em units\n    displayAlign: 'center',        // default for indentalign when set to 'auto'\n    displayIndent: '0'             // default for indentshift when set to 'auto'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Pre-defining TeX Macros with JavaScript in MathJax Configuration\nDESCRIPTION: This snippet shows how to pre-define TeX macros within the MathJax configuration using javascript objects. The macros are defined as a name: value pair within the 'macros' section of the 'tex' block. The replacement string needs to have backslashes escaped.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/macros.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {\n    macros: {\n\t  RR: \"{\\\\bf R}\",\n\t  bold: [\"{\\\\bf #1}\", 1]\n\t}\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Define TeX Macros with \\def\nDESCRIPTION: This LaTeX snippet demonstrates how to define new macros using the `\\def` command. It creates a macro `\\RR` that produces a bold \"R\" and a macro `\\bold` that typesets its argument in bold font. This functionality is provided by the `newcommand` extension in MathJax.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/newcommand.rst#_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\(\n   \\def\\RR{{\\bf R}}\n   \\def\\bold#1{{\\bf #1}}\n\\)\n```\n\n----------------------------------------\n\nTITLE: Install MathJax full source via npm\nDESCRIPTION: This command installs the full source code for MathJax version 3 using npm. It installs the source files for the components in `node_modules/mathjax-full/components/src`, the typescript source files in `node_modules/mathjax-full/ts`, and the compiled javascript files in `node_modules/mathjax-full/js`.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/hosting.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install mathjax-full@3\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Typesetting with MathJax\nDESCRIPTION: Demonstrates chaining asynchronous typesetting calls using promises to avoid simultaneous execution. This prevents potential errors when modifying the DOM and ensures proper handling of external file loading.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/typeset.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax.typesetPromise().then(() => {\n  // modify the DOM here\n  MathJax.typesetPromise();\n}).catch((err) => console.log(err.message));\n```\n\n----------------------------------------\n\nTITLE: Defining TeX Macros and Environments in MathJax Configuration\nDESCRIPTION: This code snippet demonstrates how to define custom TeX macros and environments within the MathJax configuration using the `macros` and `environments` options. It includes examples of a simple macro `\\RR`, a macro with one parameter `\\bold{math}`, and an environment `braced` that puts ``\\left\\{`` and ``\\right\\}`` around its contents.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/configmacros.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {\n    macros: {\n\t  RR: \"{\\\\bf R}\",\n\t  bold: [\"{\\\\bf #1}\", 1]\n\t},\n    environments: {\n      braced: [\"\\\\left\\\\{\", \"\\\\right\\\\}\"]\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoloaded TeX Extension\nDESCRIPTION: This JavaScript snippet demonstrates how to configure an autoloaded TeX extension (in this case 'color') by placing the configuration block at the top level of the MathJax configuration object and prefixing it with '[tex]/'. This is necessary when the extension is not explicitly loaded.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  '[tex]/color': {\n    padding: '5px'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TeX Macros Inline with LaTeX\nDESCRIPTION: This snippet demonstrates how to define TeX macros using LaTeX commands such as \\def within math delimiters. The defined macros become available for use throughout the page. MathJax only processes macros defined within math mode.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/macros.rst#_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\(\n   \\def\\RR{{\\bf R}}\n   \\def\\bold#1{{\\bf #1}}\n\\)\n```\n\n----------------------------------------\n\nTITLE: Using mhchem in LaTeX\nDESCRIPTION: Demonstrates the use of the `\\ce` macro for writing chemical equations in LaTeX within MathJax. It includes examples of simple formulas and reaction equations with annotations.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/mhchem.rst#_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\ce{C6H5-CHO}\n\\ce{$A$ ->[\\ce{+H2O}] $B$}\n\\ce{SO4^2- + Ba^2+ -> BaSO4 v}\n```\n\n----------------------------------------\n\nTITLE: Modifying skipHtmlTags Option in JavaScript\nDESCRIPTION: This snippet shows how to modify the `skipHtmlTags` option within the MathJax configuration.  It demonstrates how to add or remove HTML tags from the list of tags that MathJax should not process. The snippet allows fine-grained control over which HTML elements are searched for mathematical expressions.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/document.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nskipHtmlTags: {'[-]': ['code', 'pre'], '[+]': ['li']}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Math Delimiters in MathJax (JavaScript)\nDESCRIPTION: This JavaScript code snippet configures MathJax to use single dollar signs ($) as inline math delimiters, in addition to the default LaTeX delimiters (\\( and \\)). It modifies the `inlineMath` property within the `tex` configuration object of MathJax.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/delimiters.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {\n    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']] /*Escaping backslashes inside of javascript strings.*/\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring AMS Options in MathJax\nDESCRIPTION: This code snippet shows how to configure the `ams` extension options within the `tex` configuration block. It sets the `multlineWidth` and `multlineIndent` options.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/ams.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  tex: {\n    ams: {\n      multlineWidth: '100%',\n      multlineIndent: '1em'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading TeX Extension with Configuration\nDESCRIPTION: This JavaScript snippet demonstrates how to load the 'color' TeX extension using the MathJax loader and configure it by adding it to the tex packages. It also sets up the configuration for the tex input jax to enable it.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/color']},\n  tex: {packages: {'[+]': ['color']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Clearing the CommonHTML Output Cache - JavaScript\nDESCRIPTION: This JavaScript code clears the cache of the CommonHTML output jax, which resets the stylesheet.  This is useful when you want to generate a new stylesheet containing only the styles needed for the current set of math expressions. It requires MathJax to be loaded with the CommonHTML output jax.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/typeset.rst#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax.startup.output.clearCache();\n```\n\n----------------------------------------\n\nTITLE: Enable AMS Equation Numbering in MathJax\nDESCRIPTION: This JavaScript snippet configures MathJax to use AMS numbering rules for equations.  It tells the TeX input processor to only number equations within specific AMS environments, similar to LaTeX behavior. This requires the MathJax library to be included in the page.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/eqnumbers.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {\n    tags: 'ams'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring and Loading MathJax in One Script\nDESCRIPTION: This snippet demonstrates how to configure MathJax and load the MathJax script within a single JavaScript file (e.g., `load-mathjax.js`). The configuration is set within the file, and then a new `<script>` tag is dynamically created and appended to the document head to load MathJax from a CDN. It uses an immediately invoked function expression (IIFE) to create a closure.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/configuration.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {\n    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']] // Escaped backslashes for LaTeX delimiters\n  },\n  svg: {\n    fontCache: 'global'\n  }\n};\n\n(function () {\n  var script = document.createElement('script');\n  script.src = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js';\n  script.async = true;\n  document.head.appendChild(script);\n})();\n```\n\n----------------------------------------\n\nTITLE: Custom Path Definition in Loader\nDESCRIPTION: This JavaScript code defines a custom path prefix named 'custom' within the MathJax loader's `paths` option. It then uses this prefix to load a custom component called 'myComponent'. This configuration allows loading custom extensions from a specified URL.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/startup/loader.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  loader: {\n    paths: {custom: 'https://my.site.com/mathjax'},\n    load: ['[custom]/myComponent']\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Numbered Equation in LaTeX\nDESCRIPTION: This LaTeX snippet demonstrates a numbered equation using the `equation` environment. When automatic equation numbering with the `ams` tag is enabled in MathJax, this equation will be automatically numbered. The equation displays the formula E = mc^2.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/eqnumbers.rst#_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{equation}\n   E = mc^2\n\\end{equation}\n```\n\n----------------------------------------\n\nTITLE: MathJax Loader Configuration Block\nDESCRIPTION: This JavaScript code block demonstrates the structure of the `loader` configuration block within the MathJax configuration object.  It showcases various options such as `load`, `ready`, `failed`, `paths`, `source`, `dependencies`, `provides`, `require`, and `pathFilters`. It defines default values and provides examples of function overrides.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/startup/loader.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  loader: {\n    load: [],                                    // array of components to load\n    ready: Loader.defaultReady.bind(Loader),     // function to call when everything is loaded\n    failed: function (error) {                   // function to call if a component fails to load\n      console.log(`MathJax(${error.package || '?'}): ${error.message}`);\n    },\n    paths: {mathjax: Loader.getRoot()},          // the path prefixes for use in specifying components\n    source: {},                                  // the URLs for components, when defaults aren't right\n    dependencies: {},                            // arrays of dependencies for each component\n    provides: {},                                // components provided by each component\n    require: null,                               // function to use for loading components\n    pathFlters: []                               // functions to use to process package names\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Clearing and Updating Typeset Content\nDESCRIPTION: Demonstrates how to clear previously typeset math from an element before updating its content. This is essential when modifying parts of the page to ensure MathJax doesn't retain outdated information.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/typeset.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst node = document.getElementById('has-math');\nMathJax.typesetClear([node]);\nnode.innerHTML = new_html;\nMathJax.typesetPromise([node]).then(() => {\n  // the new content is has been typeset\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Additional MathJax Components\nDESCRIPTION: This example demonstrates how to load the version-2-compatible ``\\color`` macro using the `loader` and `tex` configuration options in MathJax v3. It uses a combined configuration file (tex-chtml.js) and specifies the `colorv2` package to be loaded and used instead of the default `color` package.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/configuration.rst#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<script>\n   MathJax = {\n     loader: {\n       load: ['[tex]/colorv2']\n     },\n     tex: {\n       packages: {'[+]': 'colorv2'},\n       autoload: {color: []}\n     }\n   };\n   </script>\n   <script type=\"text/javascript\" id=\"MathJax-script\" async\n     src=\"https://cdn.jsdelivr.net/npm/mathjax@3.0.0/es5/tex-chtml.js\">\n   </script>\n```\n\n----------------------------------------\n\nTITLE: Handling HTML Special Characters in AsciiMath (Corrected - Entities)\nDESCRIPTION: This HTML code snippet demonstrates the usage of HTML entities to properly encode special characters within AsciiMath delimiters. The `&lt;` entity is used for `<`, ensuring that the browser does not misinterpret it as an HTML tag. This guarantees the correct rendering of math expressions containing these special characters.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/asciimath.rst#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n\t  ... when `x &lt; y` we have ...\n```\n\n----------------------------------------\n\nTITLE: Using the Custom MathJax Function\nDESCRIPTION: This JavaScript snippet shows how to use the custom MathJax.tex2speech() function to generate speech from a TeX expression.  It calls the function asynchronously and retrieves the generated speech.  The MathJax.sreReady promise ensures that SRE is ready before the function is called.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/webpack.rst#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst speech = await MathJax.tex2speech('\\\\sqrt{x^2+1}', true);\n```\n\n----------------------------------------\n\nTITLE: Configure MathJax with CommonHTML Output (JavaScript)\nDESCRIPTION: This JavaScript code snippet configures MathJax to use TeX input and CommonHTML output. It sets the `load` array within the `loader` section of the MathJax configuration object to include `'input/tex'` and `'output/chtml'`. This configuration is typically used for inline or file-based MathJax setup.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/output/index.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: [\"input/tex\", \"output/chtml\"]}\n};\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Packages in MathJax\nDESCRIPTION: This example shows how to both add and remove packages from the MathJax configuration's default `packages` array using the `'[+]'` and `'[-]'` notations. It removes `autoload` and `require` while adding `enclose`.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/index.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npackages: {'[+]': ['enclose'], '[-]': ['autoload', 'require']}\n```\n\n----------------------------------------\n\nTITLE: Maintaining a Promise Chain for Typesetting\nDESCRIPTION: Illustrates how to maintain a promise chain for multiple typesetting calls, ensuring that they execute sequentially. The typeset function handles DOM modifications and triggers MathJax to typeset the relevant elements.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/typeset.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet promise = Promise.resolve();  // Used to hold chain of typesetting calls\n\nfunction typeset(code) {\n  promise = promise.then(() => MathJax.typesetPromise(code()))\n                   .catch((err) => console.log('Typeset failed: ' + err.message));\n  return promise;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MathML Input Processor in MathJax\nDESCRIPTION: This code snippet demonstrates how to configure the MathML input processor in MathJax. It shows the structure of the mml configuration block within the MathJax global object, including options for parsing mode, error handling, and verification of MathML structure and attributes. These options control how MathJax processes and renders MathML content found within a web page.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/input/mathml.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  mml: {\n    parseAs: 'html',                     // or 'xml'\n    forceReparse: false,                 // true to serialize and re-parse all MathML\n    parseError: function (node) {        // function to process parsing errors\n      this.error(this.adaptor.textContent(node).replace(/\\n.*/g, ''));\n    },\n    verify: {                            // parameters controlling verification of MathML\n      checkArity: true,                  //   check if number of children is correct\n      checkAttributes: false,            //   check if attribute names are valid\n      fullErrors: false,                 //   display full error messages or just error node\n      fixMmultiscripts: true,            //   fix unbalanced mmultiscripts\n      fixMtables: true                   //   fix incorrect nesting in mtables\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting tagSide option using setOptions in LaTeX\nDESCRIPTION: This snippet demonstrates how to use the `\\setOptions` macro to modify the `tagSide` option for typesetting equations. The first equation will have its tag on the left, and the second on the right.  These changes are global and affect subsequent equations.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/setoptions.rst#_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\[\n  \\setOptions{tagSide=left}\n  E = mc^2 \\tag{1}\n\\]\n\\[\n  \\setOptions{tagSide=right}\n  e^{\\pi 1} + 1 = 0 \\tag{2}\n\\]\n```\n\n----------------------------------------\n\nTITLE: Loading MathJax tex-chtml Component with Configuration\nDESCRIPTION: This code snippet demonstrates how to load the `tex-chtml` component of MathJax using a `<script>` tag. It also shows how to include a MathJax configuration within another `<script>` tag before loading the component. The `async` attribute allows the script to be loaded without blocking the page rendering.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/components/combined.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\nMathJax = {\n  // your configuration here, if needed\n};\n</script>\n<script type=\"text/javascript\" id=\"MathJax-script\" async\n  src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading MathJax Components Individually\nDESCRIPTION: This snippet demonstrates how to load individual MathJax components by setting the `load` array in the `loader` section of the `MathJax` configuration. It then loads the `startup` component, which loads the specified individual components.  It configures the TeX input, SVG output, menu UI, and TeX require extension.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/configuration.rst#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script>\nMathJax = {\n  loader: {\n    load: ['input/tex-base', 'output/svg', 'ui/menu', '[tex]/require']\n  },\n  tex: {\n    packages: ['base', 'require']\n  }\n};\n</script>\n<script type=\"text/javascript\" id=\"MathJax-script\" async\n  src=\"https://cdn.jsdelivr.net/npm/mathjax@3.0.0/es5/startup.js\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring TeX Extension Options\nDESCRIPTION: This JavaScript snippet configures the 'color' TeX extension by setting the padding option for the \\colorbox macro. It loads the extension, adds it to the packages array, and then defines the extension-specific options within the 'color' block under the 'tex' configuration.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/color']},\n  tex: {\n    packages: {'[+]': ['color']},\n    color: {\n      padding: '5px'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading AsciiMath with MathJax\nDESCRIPTION: This code snippet demonstrates how to configure MathJax to load the AsciiMath input jax along with other components like CommonHTML output and the contextual menu.  It modifies the MathJax configuration within a script tag to include 'input/asciimath' in the loader's load array. This configuration ensures that MathJax can process AsciiMath notation on the page.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/asciimath.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n   MathJax = {\n     loader: {load: ['input/asciimath', 'output/chtml', 'ui/menu']},\n   };\n   </script>\n   <script type=\"text/javascript\" id=\"MathJax-script\" async\n     src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/startup.js\">\n   </script>\n```\n\n----------------------------------------\n\nTITLE: Loading mathtools Extension in MathJax\nDESCRIPTION: This code snippet demonstrates how to load the `mathtools` extension in MathJax by adding it to the `load` array of the `loader` block and the `packages` array of the `tex` block in the MathJax configuration. This ensures that the mathtools package is available for use in TeX expressions. The `[+]` syntax adds to existing packages instead of overwriting.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/mathtools.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/mathtools']},\n  tex: {packages: {'[+]': ['mathtools']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Disable Newcommand Extension in MathJax Configuration\nDESCRIPTION: This JavaScript snippet demonstrates how to disable the `newcommand` extension in MathJax. It removes `newcommand` from the `packages` array of the `tex` block using the `[-]` notation. This can be useful if the extension is included by default but needs to be disabled.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/newcommand.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {packages: {'[-]': ['newcommand']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Enrichment in MathJax\nDESCRIPTION: This code snippet configures semantic enrichment options for MathJax, including enabling/disabling enrichment, setting speech rules, specifying the domain and style for speech generation, and defining a function to handle enrichment errors. The Speech-Rule Engine (SRE) is configured within the 'sre' block.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/accessibility.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  options: {\n    enableEnrichment: true,   // false to disable enrichment\n    sre: {\n      speech: 'none',         // or 'shallow', or 'deep'\n      domain: 'mathspeak',    // speech rules domain\n      style: 'default',       // speech rules style\n      locale: 'en'            // the language to use (en, fr, es, de, it)\n    },\n    enrichError: (doc, math, err) => doc.enrichError(doc, math, err),  // function to call if enrichment fails\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Textcomp Extension in MathJax\nDESCRIPTION: This code snippet demonstrates how to load the `textcomp` extension in MathJax using the `loader` and `tex` configuration options. It ensures that `textcomp` and `textmacros` are loaded and that the `textcomp` package is available for both math and text mode. It's a common configuration method for enabling extensions in MathJax.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/textcomp.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/textmacros', '[tex]/textcomp']},\n  tex: {packages: {'[+]': ['textmacros']}},\n  textmacros: {packages: {'[+]': ['textcomp']}}\n};\n\n```\n\n----------------------------------------\n\nTITLE: Dynamically Updating and Typesetting Content\nDESCRIPTION: Shows how to dynamically update the content of an HTML element and then asynchronously typeset the new content using MathJax. The code returns an array containing the element to be typeset.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/typeset.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntypeset(() => {\n  const math = document.querySelector('#math');\n  math.innerHTML = '$$\\frac{a}{1-a^2}$$';\n  return [math];\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring setoptions in MathJax\nDESCRIPTION: This snippet shows the default configuration options for the `setoptions` extension within the `tex` block of the MathJax configuration. It includes filters for packages, options and values, and settings to allow or disallow specific packages and options.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/setoptions.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  tex: {\n    setoptions: {\n      filterPackage: SetOptionsUtil.filterPackage,  // filter for whether a package can be configured\n      filterOption: SetOptionsUtil.filterOption,    // filter for whether an option can be set\n      filterValue: SetOptionsUtil.filterValue,      // filter for the value to assign to an option\n      allowPackageDefault: true,       // default for allowing packages when not explicitly set in allowOptions\n      allowOptionsDefault: true,       // default for allowing option that isn't explicitly set in allowOptions\n      allowOptions: {                  // list of packages to allow/disallow, and their options to allow/disallow\n        //\n        //  top-level tex items can be set, but not these ones\n        //    (that leaves digits and the tagging options that can be set)\n        //\n        tex: {\n          FindTeX: false,\n          formatError: false,\n          package: false,\n          baseURL: false,\n          tags: false,          // would require a new TeX input jax instance\n          maxBuffer: false,\n          maxMaxros: false,\n          macros: false,\n          environments: false\n        },\n        //\n        // These packages can't be configured at all\n        //\n        setoptions: false,\n        autoload: false,\n        require: false,\n        configmacros: false,\n        tagformat: false\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: HTML page with AsciiMath using MathJax\nDESCRIPTION: Demonstrates an HTML page with AsciiMath notation rendered using MathJax v3. It explicitly loads the asciimath input and chtml output components.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/basic/mathematics.rst#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n<title>MathJax AsciiMath Test Page</title>\n<script>\nMathJax = {\n  loader: {load: ['input/asciimath', 'output/chtml']}\n}\n</script>\n<script type=\"text/javascript\" id=\"MathJax-script\" async\n  src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/startup.js\">\n</script>\n<body>\n\n<p>When `a != 0`, there are two solutions to `ax^2 + bx + c = 0` and\nthey are</p>\n<p style=\"text-align:center\">\n  `x = (-b +- sqrt(b^2-4ac))/(2a) .`\n</p>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Macros with parameters and optional parameters\nDESCRIPTION: This code block showcases various macro definitions, including a simple string replacement (`RR`), a macro with one parameter (`bold`), a macro with an optional parameter that defaults to 'x' (`ddx`), and a macro equivalent to `\\def\\abc#1\\cba{(#1)}` (`abc`).\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/configmacros.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmacros: {\n  RR: '{\\\\bf R}',                    // a simple string replacement\n  bold: ['\\\\boldsymbol{#1}',1] ,     // this macro has one parameter\n  ddx: ['\\\\frac{d#2}{d#1}', 2, 'x'], // this macro has an optional parameter that defaults to 'x'\n  abc: ['(#1)', 1, [null, '\\\\cba']]  // equivalent to \\def\\abc#1\\cba{(#1)}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling HTML Special Characters in AsciiMath (Corrected - Spaces)\nDESCRIPTION: This LaTeX snippet demonstrates the corrected usage of HTML special characters within AsciiMath delimiters by adding spaces. Adding spaces around `<` and `>` prevents the browser from interpreting them as HTML tags, ensuring correct rendering of the math expression. This is a simple yet effective method to avoid common errors.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/asciimath.rst#_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n\t... when `x < y` we have ...\n```\n\n----------------------------------------\n\nTITLE: Adding spaces around less-than symbol in LaTeX\nDESCRIPTION: This example shows how adding spaces around the less-than symbol can prevent the browser from misinterpreting it as an HTML tag. It's a simple workaround to ensure correct rendering of mathematical expressions involving inequalities within HTML.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/html.rst#_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n... when $x < y$ we have ...\n```\n\n----------------------------------------\n\nTITLE: Custom MathJax Configuration (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows how to include default configuration options that can be overridden by user-defined configurations on a webpage. It updates the tex packages, and merges the user's configuration options into the provided defaults.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/webpack.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n//\n// Update the configuration to include any updated values\n//\nconst {insert} = require('mathjax-full/js/util/Options.js');\ninsert(MathJax.config, {tex: {packages: {'[+]': ['ams', 'newcommand', 'configmacros']}}}, false);\nMathJax.config = insert({\n  // your default options here\n}, MathJax.config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Component with Ready and Failed Functions in MathJax\nDESCRIPTION: This code snippet demonstrates how to configure a specific component ('input/tex') within the MathJax loader. It defines functions to be executed when the component is successfully loaded (ready) and when it fails to load (failed). The 'ready' function logs a message indicating the component is ready, while the 'failed' function logs an error message containing the package name.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/startup/loader.rst#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  loader: {\n    load: ['input/tex'],\n    'input/tex': {\n      ready: (name) => console.log(name + ' ready'),\n      failed: (error) => console.log(error.package + ' failed')\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Physics Extension Options\nDESCRIPTION: This snippet shows how to configure the physics extension's options, specifically `italicdiff` and `arrowdel`.  `italicdiff` controls whether the differential `d` is italicized, and `arrowdel` controls whether the nabla symbol has vector notation. The default values are `false` for both.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/physics.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  tex: {\n    physics: {\n      italicdiff: false,\n      arrowdel: false\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Load enclose extension with require\nDESCRIPTION: This LaTeX snippet demonstrates loading the `enclose` extension using the `\\require` macro and then using the `\\enclose` command to create a circle around 'x'.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/require.rst#_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\(\\require{enclose} \\enclose{circle}{x}\\)\n```\n\n----------------------------------------\n\nTITLE: Converting TeX expression to HTML with options - JavaScript\nDESCRIPTION: This JavaScript code converts a TeX expression to HTML using MathJax's tex2chtml method, specifying custom options such as 'em' size, 'ex' size, and 'display' mode.  It requires MathJax to be loaded with the TeX input and CommonHTML output jax. The resulting HTML is a DOM element that can be inserted into the document.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/typeset.rst#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet html = MathJax.tex2chtml('\\\\sqrt{x^2+1}', {em: 12, ex: 6, display: false});\n```\n\n----------------------------------------\n\nTITLE: Configure MathJax Menu Options\nDESCRIPTION: This code block shows how to configure MathJax's menu options, including enabling/disabling the menu, setting default values for TeX hints, zoom, renderer, scaling, and assistive MathML, and defining annotation types for the 'Show Math As' menu. The configuration is done within the `menuOptions` block of the `options` section.  This example requires the MathJax library to be included.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/menu.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  options: {\n    enableMenu: true,          // set to false to disable the menu\n    menuOptions: {\n      settings: {\n        texHints: true,        // put TeX-related attributes on MathML\n        semantics: false,      // put original format in <semantic> tag in MathML\n        zoom: 'NoZoom',        // or 'Click' or 'DoubleClick' as zoom trigger\n        zscale: '200%',        // zoom scaling factor\n        renderer: 'CHTML',     // or 'SVG'\n        alt: false,            // true if ALT required for zooming\n        cmd: false,            // true if CMD required for zooming\n        ctrl: false,           // true if CTRL required for zooming\n        shift: false,          // true if SHIFT required for zooming\n        scale: 1,              // scaling factor for all math\n        inTabOrder: true,      // true if tabbing includes math\n\n        assistiveMml: true,    // true if hidden assistive MathML should be generated for screen readers\n        collapsible: false,    // true if complex math should be collapsible\n        explorer: false,       // true if the expression explorer should be active\n      },\n      annotationTypes: {\n        TeX: ['TeX', 'LaTeX', 'application/x-tex'],\n        StarMath: ['StarMath 5.0'],\n        Maple: ['Maple'],\n        ContentMathML: ['MathML-Content', 'application/mathml-content+xml'],\n        OpenMath: ['OpenMath']\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Including Custom MathJax Build in Web Page\nDESCRIPTION: This HTML snippet demonstrates how to include a custom MathJax build (mathjax-speech.min.js) in a web page.  It loads the custom script, allowing you to use the custom functions defined in the build.  The script should be placed in the HTML head or body.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/webpack.rst#_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"mathjax-speech.min.js\" id=\"MathJax-script\" async></script>\n```\n\n----------------------------------------\n\nTITLE: Custom CSS for Unknown Characters in MathJax v3\nDESCRIPTION: This CSS snippet shows how to specify a fallback font for characters not included in the default MathJax fonts.  It targets the mjx-utext class for CommonHTML output and the text element within svg for SVG output. Using the variant attribute, different fallback fonts can be selected for each variant of the characters, such as sans-serif.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/v2.rst#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nmjx-container mjx-utext {\n  font-family: my-favorite-font;\n}\nmjx-container svg text {\n  font-family: my-favorite-font;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading the tagformat Extension in MathJax\nDESCRIPTION: This snippet shows how to load the `tagformat` extension in MathJax by adding it to the `load` array in the `loader` block and the `packages` array in the `tex` block.  It configures MathJax to utilize the tagformat extension for customizing equation tags.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/tagformat.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/tagformat']},\n  tex: {packages: {'[+]': ['tagformat']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Including a Specific MathJax Version from cdnjs\nDESCRIPTION: This code includes a specific version of MathJax (3.0.0) from the cdnjs CDN. The tex-mml-chtml.js component is loaded. This ensures that the same version is always used, regardless of updates.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/start.rst#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" id=\"MathJax-script\" async\n     src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.0.0/es5/tex-mml-chtml.js\">\n   </script>\n```\n\n----------------------------------------\n\nTITLE: Link to MathJax with absolute path in HTML\nDESCRIPTION: This HTML snippet shows how to link to a locally hosted MathJax file located at the root of the web server.  It assumes the MathJax files are in a directory named `mathjax`.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/hosting.rst#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/mathjax/tex-chtml.js\" id=\"MathJax-script\" async></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring MathJax with Local File\nDESCRIPTION: This snippet demonstrates how to configure MathJax using a separate JavaScript file (e.g., `mathjax-config.js`) that contains the configuration. The configuration file is loaded using a `<script>` tag before loading the MathJax script.  It uses the `defer` attribute to ensure the configuration loads before MathJax.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/configuration.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {\n    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']] // Escaped backslashes for LaTeX delimiters\n  },\n  svg: {\n    fontCache: 'global'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TeX Macros with configmacros Package in MathJax\nDESCRIPTION: This configuration example demonstrates how to use the `configmacros` extension to pre-define macros within the `tex` block of the MathJax configuration. This allows you to use these macros in TeX expressions throughout your document. This requires the `tex-configmacros` package to be loaded.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/input/tex.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  tex: {\n    macros: {\n      R: '\\\\mathbf{R}'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Content MathML Extension in HTML\nDESCRIPTION: This snippet demonstrates how to configure MathJax to use the Content MathML extension.  It involves including \"content-mathml.js\" in the extensions array within the MathML configuration block. The script tag must appear before loading MathJax.js.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/mathml.rst#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/x-mathjax-config\">\n       MathJax.Hub.Config({\n         MathML: {\n           extensions: [\"content-mathml.js\"]\n         }\n       });\n       </script>\n```\n\n----------------------------------------\n\nTITLE: Loading MathJax tex-svg component\nDESCRIPTION: This snippet shows how to load the `tex-svg` component from the jsdelivr CDN to process TeX input and produce SVG output. It uses the `@3` notation to get the latest 3.x.x version of the component. The `async` attribute is used for asynchronous loading.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/configuration.rst#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" id=\"MathJax-script\" async\n  src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Load Newcommand Extension in MathJax Configuration\nDESCRIPTION: This JavaScript snippet shows how to explicitly load the `newcommand` extension in your MathJax configuration. It adds `[tex]/newcommand` to the `load` array of the `loader` block and `newcommand` to the `packages` array of the `tex` block.  This is necessary when using `input/tex-base`.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/newcommand.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/newcommand']},\n  tex: {packages: {'[+]': ['newcommand']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Loading the Physics Extension in MathJax\nDESCRIPTION: This code snippet demonstrates how to load the physics extension in MathJax. It configures the loader to load the '[tex]/physics' extension and adds 'physics' to the tex packages array. This allows MathJax to process the physics-related LaTeX commands.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/physics.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/physics']},\n  tex: {packages: {'[+]': ['physics']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Looking Up MathItems on a Page\nDESCRIPTION: Demonstrates retrieving all MathItems within the body of the document using MathJax's getMathItemsWithin method. This allows access to information about each typeset mathematical expression.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/typeset.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax.startup.document.getMathItemsWithin(document.body);\n```\n\n----------------------------------------\n\nTITLE: Custom MathJax Component Control File (JavaScript)\nDESCRIPTION: This JavaScript file defines a custom MathJax component. It initializes MathJax, pre-loads necessary modules (TeX input, SVG output, extensions), loads the specified components, updates the configuration to include desired TeX packages (ams, newcommand, configmacros), and performs the standard startup operations.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/webpack.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//\n//  Initialize the MathJax startup code\n//\nrequire('mathjax-full/components/src/startup/lib/startup.js');\n\n//\n//  Get the loader module and indicate the modules that\n//  will be loaded by hand below\n//\nconst {Loader} = require('mathjax-full/js/components/loader.js');\nLoader.preLoad(\n  'loader', 'startup',\n  'core',\n  'input/tex-base',\n  '[tex]/ams',\n  '[tex]/newcommand',\n  '[tex]/configmacros',\n  'output/svg', 'output/svg/fonts/tex.js',\n  'ui/menu'\n);\n\n//\n// Load the components that we want to combine into one component\n//   (the ones listed in the preLoad() call above)\n//\nrequire('mathjax-full/components/src/core/core.js');\n\nrequire('mathjax-full/components/src/input/tex-base/tex-base.js');\nrequire('mathjax-full/components/src/input/tex/extensions/ams/ams.js');\nrequire('mathjax-full/components/src/input/tex/extensions/newcommand/newcommand.js');\nrequire('mathjax-full/components/src/input/tex/extensions/configmacros/configmacros.js');\n\nrequire('mathjax-full/components/src/output/svg/svg.js');\nrequire('mathjax-full/components/src/output/svg/fonts/tex/tex.js');\n\nrequire('mathjax-full/components/src/ui/menu/menu.js');\n\n//\n// Update the configuration to include any updated values\n//\nconst {insert} = require('mathjax-full/js/util/Options.js');\ninsert(MathJax.config, {\n  tex: {\n    packages: {'[+]': ['ams', 'newcommand', 'configmacros']}\n  }\n});\n\n//\n// Loading this component will cause all the normal startup\n//   operations to be performed\n//\nrequire('mathjax-full/components/src/startup/startup.js');\n```\n\n----------------------------------------\n\nTITLE: Typesetting with Initial MathJax Promise\nDESCRIPTION: Illustrates using MathJax.startup.promise to ensure initial typesetting is complete before further typesetting operations. This avoids potential conflicts or errors when adding or modifying math content on the page.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/typeset.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction typeset(code) {\n  MathJax.startup.promise = MathJax.startup.promise\n    .then(() => MathJax.typesetPromise(code()))\n    .catch((err) => console.log('Typeset failed: ' + err.message));\n  return MathJax.startup.promise;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading mhchem Explicitly in MathJax\nDESCRIPTION: Shows how to configure MathJax to explicitly load the `mhchem` extension.  This involves modifying the `loader` and `tex` blocks within the MathJax configuration to include `mhchem`.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/mhchem.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/mhchem']},\n  tex: {packages: {'[+]': ['mhchem']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Configure autoload to load verb extension\nDESCRIPTION: This example configures MathJax to automatically load the `tex-verb` extension when the `\\verb` command is first used.  It demonstrates how to specify the macro that triggers the autoloading of a particular extension.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/autoload.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {\n    autoload: {\n      verb: ['verb']\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: MathJax v2 API Compatibility Patch (JavaScript)\nDESCRIPTION: This JavaScript code provides a patch for MathJax v3 to support legacy MathJax v2 API calls, specifically MathJax.Hub.Queue and MathJax.Hub.Typeset. It also flags usages of MathJax.Hub.Register.StartupHook and other hook-registering commands, and converts MathJax.Hub.Config and x-mathjax-config scripts.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/v2.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n         //\n         // Add a replacement for MathJax.Callback command\n         //\n         MathJax.Callback = function (args) {\n           if (Array.isArray(args)) {\n             if (args.length === 1 && typeof(args[0]) === 'function') {\n               return args[0];\n             } else if (typeof(args[0]) === 'string' && args[1] instanceof Object &&\n```\n\n----------------------------------------\n\nTITLE: Obtaining the CommonHTML Stylesheet - JavaScript\nDESCRIPTION: This JavaScript code retrieves the CommonHTML stylesheet element by calling MathJax.chtmlStylesheet(). This stylesheet is required for proper rendering of CommonHTML output. It should be called after typesetting the math to minimize the stylesheet size, including only the necessary styles.  It requires MathJax to be loaded with the CommonHTML output jax.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/typeset.rst#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax.chtmlStylesheet();\n```\n\n----------------------------------------\n\nTITLE: Loading 'boldsymbol' Extension in MathJax Configuration (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to explicitly load the 'boldsymbol' extension within the MathJax configuration. It modifies the loader and tex blocks to include the 'boldsymbol' package, ensuring that it's available for use in TeX expressions. This is necessary when not using the autoload extension or when specific control over package loading is required.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/boldsymbol.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/boldsymbol']},\n  tex: {packages: {'[+]': ['boldsymbol']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Converting TeX expression to HTML string with options - JavaScript\nDESCRIPTION: This JavaScript code converts a TeX expression to HTML using MathJax's tex2chtml method, specifying custom options such as 'em' size, 'ex' size, and 'display' mode. It then retrieves the serialized HTML string using the 'outerHTML' property.  It requires MathJax to be loaded with the TeX input and CommonHTML output jax. The resulting string represents the HTML of the converted math.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/typeset.rst#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet html = MathJax.tex2chtml('\\\\sqrt{x^2+1}', {em: 12, ex: 6, display: false});\nlet text = html.outerHTML;\n```\n\n----------------------------------------\n\nTITLE: Complex Loader Configuration Example\nDESCRIPTION: This JavaScript code demonstrates a more complex loader configuration. It defines dependencies for a custom component '[tex]/myExtension', including 'input/tex', and loads the custom component after loading dependencies to avoid redundant loading of dependencies.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/startup/loader.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  loader: {\n    source: {\n      '[tex]/myExtension: 'https://my.site.com/mathjax/tex/myExtension.js'},\n    },\n    dependencies: {\n      '[tex]/myExtension': ['input/tex-base', '[tex]/newcommand', '[tex]/enclose']\n    },\n    load: ['input/tex', '[tex]/myExtension']\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading the noerrors Extension in MathJax v3 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to load the `noerrors` extension in MathJax version 3. It configures the `loader` block to load the `[tex]/noerrors` component and adds `noerrors` to the `packages` array of the `tex` block. This will prevent TeX errors from being displayed and show the original TeX code instead.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/noerrors.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/noerrors']},\n  tex: {packages: {'[+]': ['noerrors']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring autoload for gensymb Commands in MathJax\nDESCRIPTION: This code snippet shows how to configure the autoload extension to automatically load specific gensymb commands in MathJax.  It defines the gensymb property within the tex.autoload configuration, listing commands such as 'celsius', 'degree', 'micro', 'ohm', and 'perthousand'. This allows these commands to be used directly without explicitly loading the entire extension.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/gensymb.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {\n    autoload: {\n      gensymb: ['celsius', 'degree', 'micro', 'ohm', 'perthousand']\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling a TeX Extension\nDESCRIPTION: This snippet shows how to disable a TeX extension by removing it from the default package list. It uses the `'[-]'` notation to remove the `noundefined` extension, preventing unknown macro names from being displayed in red and causing error messages instead.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/input/tex.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  tex: {\n    packages: {'[-]': ['noundefined']}\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading the color extension\nDESCRIPTION: This JavaScript code snippet demonstrates how to load the color extension for MathJax. It shows how to add '[tex]/color' to the load array of the loader block and 'color' to the packages array of the tex block in the MathJax configuration.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/color.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/color']},\n  tex: {packages: {'[+]': ['color']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Asynchronous TeX to CHTML Conversion with MathJax\nDESCRIPTION: This snippet demonstrates asynchronous TeX to CHTML conversion using MathJax, handling dynamic extension loading with `\\require`. It gets the metrics for a specified HTML element, converts the TeX expression, appends the resulting HTML to the document, and updates the CHTML stylesheet. The promise-based approach ensures that extensions are loaded transparently.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/typeset.rst#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlet node = document.querySelector('#math');\nlet options = MathJax.getMetricsFor(node, true);\nMathJax.tex2chtmlPromise('\\\\require{bbox}\\\\bbox[red]{\\\\sqrt{x^2+1}}', options)\n  .then((html) => {\n    node.appendChild(html);\n    let sheet = document.querySelector('#MJX-CHTML-styles');\n    if (sheet) sheet.parentNode.removeChild(sheet);\n    document.head.appendChild(MathJax.chtmlStylesheet());\n  });\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration File (JavaScript)\nDESCRIPTION: This JavaScript file is the webpack configuration for building the custom MathJax component. It defines the package name, location of MathJax library, packages to link, current directory, and the output directory for the packaged component. It leverages the `webpack.common.js` file from MathJax for the build process.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/webpack.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst PACKAGE = require('mathjax-full/components/webpack.common.js');\n\nmodule.exports = PACKAGE(\n  'custom-mathjax',                     // the name of the package to build\n  '../node_modules/mathjax-full/js',    // location of the mathjax library\n  [],                                   // packages to link to\n  __dirname,                            // our directory\n  '.'                                   // where to put the packaged component\n);\n```\n\n----------------------------------------\n\nTITLE: Clearing the Font Cache (JavaScript)\nDESCRIPTION: This code snippet shows how to clear the MathJax CommonHTML output processor's font cache. This forces MathJax to regenerate CSS styles, which can be useful when adaptiveCSS is enabled and the content of the page has changed.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/output/chtml.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax.startup.document.output.clearCache();\n```\n\n----------------------------------------\n\nTITLE: mathtools Configuration Options\nDESCRIPTION: This code snippet shows the available configuration options for the `mathtools` extension within the `tex` block of the MathJax configuration.  These options allow customization of the behavior of the mathtools package, such as spacing, alignment, and delimiter handling.  This configures many aspects of the extension's behavior.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/mathtools.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  tex: {\n    mathtools: {\n      multlinegap: '1em',\n      multlined-pos: 'c',\n      firstline-afterskip: '',\n      lastline-preskip: '',\n      smallmatrix-align: 'c',\n      shortvdotsadjustabove: '.2em',\n      shortvdotsadjustbelow: '.2em',\n      centercolon: false,\n      centercolon-offset: '.04em',\n      thincolon-dx: '-.04em',\n      thincolon-dw: '-.08em',\n      use-unicode: false,\n      prescript-sub-format: '',\n      prescript-sup-format: '',\n      prescript-arg-format: '',\n      allow-mathtoolsset: true,\n      pairedDelimiters: {},\n      tagforms: {}\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Default tagformat Options in MathJax\nDESCRIPTION: This code demonstrates the default configuration options for the `tagformat` extension. It shows the default functions for formatting equation numbers, tags, IDs, and URLs for referencing equations.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/tagformat.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntagformat: {\n   number: (n) => n.toString(),\n   tag:    (tag) => '(' + tag + ')',\n   id:     (id) => 'mjx-eqn:' + id.replace(/\\s/g, '_'),\n   url:    (id, base) => base + '#' + encodeURIComponent(id),\n }\n```\n\n----------------------------------------\n\nTITLE: Performing Actions After MathJax Typesetting (pageReady)\nDESCRIPTION: This JavaScript code snippet overrides the `pageReady()` function in the MathJax startup configuration. It calls `MathJax.startup.defaultPageReady()` and uses the returned promise's `then()` method to queue a function that is executed after the initial typesetting is complete.  Ensure that the promise returned from `then()` is returned by `pageReady()`.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/configuration.rst#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n     startup: {\n       pageReady: () => {\n         return MathJax.startup.defaultPageReady().then(() => {\n           console.log('MathJax initial typesetting complete');\n         });\n       }\n     }\n   };\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoload for upgreek Symbols\nDESCRIPTION: This code demonstrates how to configure the `autoload` extension in MathJax to automatically load the `upgreek` extension when specific upright Greek symbols are used.  It specifies a list of macros associated with `upgreek`, ensuring that when any of these macros are encountered, the `upgreek` extension is loaded dynamically. This enhances performance by only loading the extension when needed.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/upgreek.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {\n    autoload: {\n      upgreek: ['upalpha', 'upbeta', 'upchi', 'updelta', 'Updelta', 'upepsilon',\n                  'upeta', 'upgamma', 'Upgamma', 'upiota', 'upkappa', 'uplambda',\n                  'Uplambda', 'upmu', 'upnu', 'upomega', 'Upomega', 'upomicron',\n                  'upphi', 'Upphi', 'uppi', 'Uppi', 'uppsi', 'Uppsi', 'uprho',\n                  'upsigma', 'Upsigma', 'uptau', 'uptheta', 'Uptheta', 'upupsilon',\n                  'Upupsilon', 'upvarepsilon', 'upvarphi', 'upvarpi', 'upvarrho',\n                  'upvarsigma', 'upvartheta', 'upxi', 'Upxi', 'upzeta']\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MathJax to load bbox extension\nDESCRIPTION: JavaScript configuration for MathJax to explicitly load the bbox extension.  This involves adding '[tex]/bbox' to the 'load' array of the 'loader' block and adding 'bbox' to the 'packages' array of the 'tex' block.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/bbox.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/bbox']},\n  tex: {packages: {'[+]': ['bbox']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Output Configuration Options in MathJax v3.1\nDESCRIPTION: This code snippet demonstrates the default values for the new output configuration options introduced in MathJax v3.1, which control the fonts used for `<mtext>` and `<merror>` elements. It shows how to set the inheritance and specific font families for these elements.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/whats-new-3.1.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmtextInheritFont: false,\nmerrorInheritFont: false,\nmtextFont: '',\nmerrorFont: 'serif',\n```\n\n----------------------------------------\n\nTITLE: Default Autoload Configuration\nDESCRIPTION: This snippet represents the default autoload configuration for MathJax's TeX input jax.  It shows which macros and environments will trigger the loading of specific TeX extensions. The `expandable` function is assumed to exist, but its exact implementation is not relevant for understanding the autoload configuration itself.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/autoload.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  tex: {\n    autoload: expandable({\n      action: ['toggle', 'mathtip', 'texttip'],\n      amscd: [[], ['CD']],\n      bbox: ['bbox'],\n      boldsymbol: ['boldsymbol'],\n      braket: ['bra', 'ket', 'braket', 'set', 'Bra', 'Ket', 'Braket', 'Set', 'ketbra', 'Ketbra'],\n      cancel: ['cancel', 'bcancel', 'xcancel', 'cancelto'],\n      color: ['color', 'definecolor', 'textcolor', 'colorbox', 'fcolorbox'],\n      enclose: ['enclose'],\n      extpfeil: ['xtwoheadrightarrow', 'xtwoheadleftarrow', 'xmapsto',\n                   'xlongequal', 'xtofrom', 'Newextarrow'],\n      html: ['href', 'class', 'style', 'cssId'],\n      mhchem: ['ce', 'pu'],\n      newcommand: ['newcommand', 'renewcommand', 'newenvironment', 'renewenvironment', 'def', 'let'],\n      unicode: ['unicode'],\n      verb: ['verb']\n    })\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading centernot Extension with Loader\nDESCRIPTION: This JavaScript code shows how to load the centernot extension in MathJax using the loader configuration.  It adds '[tex]/centernot' to the load array and 'centernot' to the packages array.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/centernot.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/centernot']},\n  tex: {packages: {'[+]': ['centernot']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Including MathJax with cdnjs using latest.js\nDESCRIPTION: This snippet shows how to include the latest MathJax version from cdnjs using the latest.js file. It requests version 3.0.0 initially, but the latest.js script updates it to the newest 3.x.x version automatically.  This also includes the tex-mml-chtml component.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/start.rst#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" id=\"MathJax-script\" async\n     src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.0.0/es5/latest?tex-mml-chtml.js\">\n   </script>\n```\n\n----------------------------------------\n\nTITLE: Performing Actions After MathJax Typesetting\nDESCRIPTION: This JavaScript code snippet overrides the `ready()` function in the MathJax startup configuration. It calls `MathJax.startup.defaultReady()` to perform the default initialization, and then uses `MathJax.startup.promise.then()` to queue a function that will be executed after the initial typesetting is complete.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/configuration.rst#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n     startup: {\n       ready: () => {\n         MathJax.startup.defaultReady();\n         MathJax.startup.promise.then(() => {\n           console.log('MathJax initial typesetting complete');\n         });\n       }\n     }\n   };\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Custom MathJax Build\nDESCRIPTION: This JavaScript file defines the webpack configuration for building a custom MathJax file. It specifies the package name, the location of the MathJax library, and the output directory.  It uses the mathjax-full/components/webpack.common.js configuration to handle the build process. Requires mathjax-full as a dependency.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/webpack.rst#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst PACKAGE = require('mathjax-full/components/webpack.common.js');\n\nmodule.exports = PACKAGE(\n  'mathjax-speech',                     // the name of the package to build\n  '../node_modules/mathjax-full/js',    // location of the mathjax library\n  [],                                   // packages to link to\n  __dirname,                            // our directory\n  '.'                                   // where to put the packaged component\n);\n```\n\n----------------------------------------\n\nTITLE: Escaping backslashes for LaTeX array\nDESCRIPTION: This example demonstrates the use of double backslashes to ensure a single backslash appears in the HTML page when using LaTeX in environments that interpret backslashes as escape characters.  This is necessary for commands like `\\begin` and `\\\\` to be correctly interpreted by MathJax.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/html.rst#_snippet_6\n\nLANGUAGE: latex\nCODE:\n```\n    \\\\begin{array}{cc}\n      a & b \\\\\\\n      c & c\n    \\\\end{array}\n```\n\n----------------------------------------\n\nTITLE: Loading the gensymb Extension in MathJax\nDESCRIPTION: This code snippet demonstrates how to load the gensymb extension in MathJax. It adds '[tex]/gensymb' to the load array of the loader block and 'gensymb' to the packages array of the tex block. This configuration ensures that the gensymb extension is available for use in MathJax.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/gensymb.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/gensymb']},\n  tex: {packages: {'[+]': ['gensymb']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Including Polyfill for Browser Compatibility\nDESCRIPTION: This snippet includes the polyfill library to support older browsers like IE11 when using MathJax.  It loads es6 features from cdnjs.cloudflare.com to provide backwards compatibility.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/start.rst#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdnjs.cloudflare.com/polyfill/v3/polyfill.min.js?features=es6\"></script>\n```\n\n----------------------------------------\n\nTITLE: Complete HTML page linking to MathJax\nDESCRIPTION: This is a complete HTML example showing how to include the MathJax script in the `<head>` section of the document. The script source points to a locally hosted MathJax instance.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/hosting.rst#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<html>\n <head>\n ...\n <script src=\"/mathjax/tex-chtml.js\" id=\"MathJax-script\" async></script>\n </head>\n <body>\n ...\n </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Overriding Component Source Location\nDESCRIPTION: This JavaScript code snippet shows how to override the default location of a component using the `source` option in the MathJax loader configuration. The example specifies a custom URL for the 'special/extension' component.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/startup/loader.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  loader: {\n    source: {\n      'special/extension': 'https://my.site.com/mathjax/special/extension.js'\n    },\n    load: ['special/extension']\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MathJax Startup Options in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure the MathJax `startup` component by setting various options such as `elements`, `typeset`, `ready`, `pageReady`, and others. It shows the structure for defining MathJax's initial configuration.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/startup/startup.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  startup: {\n    elements: null,          // The elements to typeset (default is document body)\n    typeset: true,           // Perform initial typeset?\n    ready: Startup.defaultReady.bind(Startup),          // Called when components are loaded\n    pageReady: Startup.defaultPageReady.bind(Startup),  // Called when MathJax and page are ready\n    document: document,      // The document (or fragment or string) to work in\n    invalidOption: 'warn',   // Are invalid options fatal or produce an error?\n    optionError: OPTIONS.optionError,  // Function used to report invalid options\n    input: [],               // The names of the input jax to use from among those loaded\n    output: null,            // The name for the output jax to use from among those loaded\n    handler: null,           // The name of the handler to register from among those loaded\n    adaptor: null            // The name for the DOM adaptor to use from among those loaded\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: LaTeX HTML Extension Examples\nDESCRIPTION: These LaTeX code snippets demonstrate the usage of the `\\href`, `\\class`, and `\\cssId` macros provided by the MathJax HTML extension. They show how to create a hyperlink, attach a CSS class, and assign a CSS ID to mathematical expressions within a MathJax equation.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/html.rst#_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\nx \\href{why-equal.html}{=} y^2 + 1\n\n(x+1)^2 = \\class{hidden}{(x+1)(x+1)}\n\n(x+1)^2 = \\cssId{step1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n```\n\n----------------------------------------\n\nTITLE: Explicitly load require extension\nDESCRIPTION: This JavaScript snippet shows how to explicitly load the `require` extension when using `input/tex-base` by adding `'[tex]/require'` to the `load` array of the `loader` block and `'require'` to the `packages` array of the `tex` block.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/require.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/require']},\n  tex: {packages: {'[+]': ['require']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Unnumbered Equation in LaTeX\nDESCRIPTION: This LaTeX snippet demonstrates an unnumbered equation using the `equation*` environment. Even with automatic equation numbering enabled, this equation will not be numbered due to the starred version of the environment. The equation displays Euler's identity: e^(πi) + 1 = 0.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/eqnumbers.rst#_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{equation*}\n   e^{\\pi i} + 1 = 0\n\\end{equation*}\n```\n\n----------------------------------------\n\nTITLE: Configuring Assistive MathML, Collapsible Math, and Expression Explorer in MathJax\nDESCRIPTION: This code snippet demonstrates how to configure the MathJax menu options to enable assistive MathML, collapsible math, and the expression explorer. These settings control the accessibility features of MathJax.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/accessibility.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  options: {\n    menuOptions: {\n      settings: {\n        assistiveMml: true,   // true to enable assistive MathML\n        collapsible: false,   // true to enable collapsible math\n        explorer: false      // true to enable the expression explorer\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CommonHTML Output in MathJax (JavaScript)\nDESCRIPTION: This code configures the CommonHTML output processor for MathJax. It sets options for scaling, font handling, spacing, and CSS generation. It demonstrates how to customize the appearance and behavior of MathJax's CommonHTML output.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/output/chtml.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  chtml: {\n    scale: 1,                      // global scaling factor for all expressions\n    minScale: .5,                  // smallest scaling factor to use\n    mtextInheritFont: false,       // true to make mtext elements use surrounding font\n    merrorInheritFont: true,       // true to make merror text use surrounding font\n    mathmlSpacing: false,          // true for MathML spacing rules, false for TeX rules\n    skipAttributes: {},            // RFDa and other attributes NOT to copy to the output\n    exFactor: .5,                  // default size of ex in em units\n    displayAlign: 'center',        // default for indentalign when set to 'auto'\n    displayIndent: '0',            // default for indentshift when set to 'auto'\n    matchFontHeight: true,         // true to match ex-height of surrounding font\n    fontURL: '[mathjax]/components/output/chtml/fonts/woff-v2',   // The URL where the fonts are found\n    adaptiveCSS: true              // true means only produce CSS that is used in the processed equations\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Include Custom MathJax Component (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to include the custom-built MathJax component in a web page. It adds a script tag to load the `custom-mathjax.min.js` file, setting the `id` to `MathJax-script` and using the `async` attribute.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/webpack.rst#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"custom-mathjax.min.js\" id=\"MathJax-script\" async></script>\n```\n\n----------------------------------------\n\nTITLE: Disabling Assistive MathML in MathJax\nDESCRIPTION: This JavaScript code snippet demonstrates how to disable the assistive-mml extension in MathJax. By setting `enableAssistiveMml` to `false` within the `options` object, the automatic insertion of visually hidden MathML will be prevented. This configuration is useful for visual users who do not require the screen reader support provided by the extension.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/accessibility.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  options: {\n    enableAssistiveMml: false\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading and Activating TeX Extension\nDESCRIPTION: This snippet demonstrates how to load a TeX extension and activate it by including it in the `packages` list. The `loader` block loads the `enclose` extension, and the `tex` block adds it to the packages to be initialized. This enables the `enclose` extension for use in MathJax.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/input/tex.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  loader: {load: ['[tex]/enclose']},\n  tex: {\n    packages: {'[+]': ['enclose']}\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading MathJax Action Extension with Configuration\nDESCRIPTION: This JavaScript code snippet demonstrates how to load the `action` extension in MathJax by modifying the `loader` and `tex` configuration blocks. It explicitly adds the extension to the `load` array of the `loader` and the `packages` array of the `tex` block.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/action.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/action']},\n  tex: {packages: {'[+]': ['action']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Typeset Verbatim Text with \\verb LaTeX\nDESCRIPTION: This snippet demonstrates how to use the \\verb macro in LaTeX to typeset text verbatim, meaning without further processing. The first character after \\verb is the delimiter, and everything until the next occurrence of the delimiter is typeset in a monospaced font.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/verb.rst#_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\verb|\\sqrt{x}|\n```\n\n----------------------------------------\n\nTITLE: Loading cases Extension via Loader Configuration\nDESCRIPTION: This JavaScript code snippet shows how to load the `cases` extension for MathJax by adding it to the `load` array within the `loader` block and the `packages` array within the `tex` block of the MathJax configuration. This configuration ensures that the `cases` extension is available for use in TeX expressions.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/cases.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/cases']},\n  tex: {packages: {'[+]': ['cases']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Environments\nDESCRIPTION: This javascript code snippet demonstrates how to define custom environments within MathJax's TeX configuration. It defines two environments: `braced`, which wraps content in stretchy braces, and `ABC`, which demonstrates parameter handling including an optional parameter.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/configmacros.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nenvironments: {\n  braced: ['\\\\left\\\\{', '\\\\right\\\\}'],\n  ABC: ['(#1)(#2)(', ')', 2, 'X']\n}\n```\n\n----------------------------------------\n\nTITLE: Loading the Textmacros Extension in MathJax\nDESCRIPTION: This code snippet demonstrates how to load the `textmacros` extension in MathJax. It adds `'[tex]/textmacros'` to the `load` array of the `loader` block and `'textmacros'` to the `packages` array of the `tex` block. This configuration enables the use of text-mode macros within MathJax.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/textmacros.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/textmacros']},\n  tex: {packages: {'[+]': ['textmacros']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Autoloading Custom Extensions\nDESCRIPTION: This code snippet demonstrates how to configure autoloading for a custom extension. It assumes that the extension has a prefix of `[extensions]` and that the extension's name is `myExtension`.  The `myMacro` and `myOtherMacro` commands will trigger the loading of this extension.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/autoload.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  tex: {\n    autoload: expandable({\n      '[extensions]/myExtension' : ['myMacro', 'myOtherMacro']\n    })\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Section Numbering Example in MathJax\nDESCRIPTION: This example demonstrates how to implement section numbering for automatic equation numbers when using the `ams` or `all` tags options. It uses pre- and post-filters to handle section numbers properly for forward references.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/tagformat.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  section: 1,\n  tex: {\n    tagformat: {\n\t  number: (n) => MathJax.config.section + '.' + n,\n      id: (tag) => 'eqn-id:' + tag\n\t}\n  },\n  startup: {\n    ready() {\n      MathJax.startup.defaultReady();\n      MathJax.startup.input[0].preFilters.add(({math}) => {\n        if (math.inputData.recompile) {\n          MathJax.config.section = math.inputData.recompile.section;\n        }\n      });\n      MathJax.startup.input[0].postFilters.add(({math}) => {\n        if (math.inputData.recompile) {\n          math.inputData.recompile.section = MathJax.config.section;\n        }\n      });\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MathJax Options in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure MathJax options using a JavaScript object. It defines settings for skipping certain HTML tags, including specific tags within math expressions, specifying classes to ignore or process, and defining error handling functions.  The configuration is done within the `MathJax` global object.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/document.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  options: {\n    skipHtmlTags: [            //  HTML tags that won't be searched for math\n        'script', 'noscript', 'style', 'textarea', 'pre',\n        'code', 'annotation', 'annotation-xml'\n    ],\n    includeHtmlTags: {         //  HTML tags that can appear within math\n        br: '\\n', wbr: '', '#comment': ''\n    },\n    ignoreHtmlClass: 'tex2jax_ignore',    //  class that marks tags not to search\n    processHtmlClass: 'tex2jax_process',  //  class that marks tags that should be searched\n    compileError: function (doc, math, err) {doc.compileError(math, err)},\n    typesetError: function (doc, math, err) {doc.typesetError(math, err)},\n    renderActions: {...}\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading the Experimental mml3 Extension with JavaScript\nDESCRIPTION: This code snippet shows how to enable the experimental mml3 extension in MathJax. This extension provides support for elementary math tags like `<mstack>` and `<mlongdiv>`.  It configures the `loader` to load the `[mml]/mml3` module.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/mathml.rst#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nMathJax = {\n     loader: {load: ['[mml]/mml3']}\n   };\n```\n\n----------------------------------------\n\nTITLE: Install Webpack Dependencies (Shell)\nDESCRIPTION: Installs webpack and its dependencies using npm, which are required for building custom MathJax components.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/webpack.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install webpack\nnpm install webpack-cli\nnpm install terser-webpack-plugin\nnpm install babel-loader\nnpm install @babel/core\nnpm install @babel/preset-env\n```\n\n----------------------------------------\n\nTITLE: Creating TeX Macros for Section Numbering\nDESCRIPTION: This snippet demonstrates how to create TeX macros to control the section number using `\\nextSection` to increment and `\\setSection{n}` to set the section number.  It defines new commands that can be used within math delimiters to adjust the section numbering.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/tagformat.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  startup: {\n    ready() {\n      const Configuration = MathJax._.input.tex.Configuration.Configuration;\n      const CommandMap = MathJax._.input.tex.SymbolMap.CommandMap;\n      new CommandMap('sections', {\n        nextSection: 'NextSection',\n        setSection: 'SetSection',\n      }, {\n        NextSection(parser, name) {\n          MathJax.config.section++;\n          parser.tags.counter = parser.tags.allCounter = 0;\n        },\n        SetSection(parser, name) {\n          const n = parser.GetArgument(name);\n          MathJax.config.section = parseInt(n);\n        }\n      });\n      Configuration.create(\n        'sections', {handler: {macro: ['sections']}}\n      );\n      MathJax.startup.defaultReady();\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading empheq Extension via Configuration\nDESCRIPTION: This code snippet demonstrates how to load the `empheq` extension in MathJax using the `loader` and `tex` configuration blocks. It adds `'[tex]/empheq'` to the `load` array and `'empheq'` to the `packages` array, ensuring the extension is available for use.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/empheq.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/empheq']},\n  tex: {packages: {'[+]': ['empheq']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Using the ABC Environment\nDESCRIPTION: This LaTeX code shows the usage of the `ABC` environment with and without the optional parameter. It demonstrates how the optional parameter is used when provided and how the default value is applied when the optional parameter is omitted.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/configmacros.rst#_snippet_6\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{ABC}{Z} xyz \\end{ABC}\n```\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{ABC}[Y]{Z} xyz \\end{ABC}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expression Explorer in MathJax\nDESCRIPTION: This code snippet shows how to configure the expression explorer in MathJax, including enabling or disabling the explorer, and setting options for speech, braille, subtitles, highlighting, magnification, and information display. These settings provide a customizable interactive exploration experience for mathematical expressions.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/accessibility.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  options: {\n    enableExplorer: true,                // set to false to disable the explorer\n    a11y: {\n      speech: true,                      // switch on speech output\n      braille: true,                     // switch on Braille output\n      subtitles: true,                   // show speech as a subtitle\n      viewBraille: false,                // display Braille output as subtitles\n\n      backgroundColor: 'Blue',           // color for background of selected sub-expression\n      backgroundOpacity: .2,             // opacity for background of selected sub-expression\n      foregroundColor: 'Black',          // color to use for text of selected sub-expression\n      foregroundOpacity: 1,              // opacity for text of selected sub-expression\n\n      highlight: 'None',                 // type of highlighting for collapsible sub-expressions\n      flame: false,                      // color collapsible sub-expressions\n      hover: false,                      // show collapsible sub-expression on mouse hovering\n\n      treeColoring: false,               // tree color expression\n\n      magnification: 'None',             // type of magnification\n      magnify: '400%',                   // percentage of magnification of zoomed expressions\n      keyMagnifier: false,               // switch on magnification via key exploration\n      mouseMagnifier: false,             // switch on magnification via mouse hovering\n      align: 'top',                      // placement of magnified expression\n\n      infoType: false,                   // show semantic type on mouse hovering\n      infoRole: false,                   // show semantic role on mouse hovering\n      infoPrefix: false,                 // show speech prefixes on mouse hovering\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: HTML page with TeX using MathJax\nDESCRIPTION: This example demonstrates a complete HTML page that includes mathematical expressions written in TeX format, rendered by MathJax. It showcases how to load the MathJax library and use TeX delimiters for inline and display math.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/basic/mathematics.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n<title>MathJax TeX Test Page</title>\n<script type=\"text/javascript\" id=\"MathJax-script\" async\n  src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js\">\n</script>\n</head>\n<body>\nWhen \\(a \\ne 0\\), there are two solutions to \\(ax^2 + bx + c = 0\\) and they are\n$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring MathJax to Load the braket Extension\nDESCRIPTION: This code snippet shows how to configure MathJax to load the `braket` extension explicitly.  It adds the extension to the `load` array of the `loader` block and the `packages` array of the `tex` block. This ensures the extension is available when MathJax initializes.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/braket.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/braket']},\n  tex: {packages: {'[+]': ['braket']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Escaping underscores in LaTeX within Markdown\nDESCRIPTION: This example showcases escaping underscores with backslashes in LaTeX within a Markdown environment to prevent Markdown from interpreting them as italics. This allows MathJax to correctly render subscripts.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/html.rst#_snippet_5\n\nLANGUAGE: latex\nCODE:\n```\n    ... we have $x\\_1 = 132$ and $x\\_2 = 370$ and so ...\n```\n\n----------------------------------------\n\nTITLE: Component Providing Sub-components\nDESCRIPTION: This JavaScript code shows the use of the `provides` property in the MathJax loader to declare sub-components provided by a main component. This prevents redundant loading of dependencies. In the given example, 'input/tex' provides components such as 'input/tex-base', '[tex]/ams', etc.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/startup/loader.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nloader: {\n  provides: {\n    'input/tex': [\n      'input/tex-base',\n      '[tex]/ams',\n      '[tex]/newcommand',\n      '[tex]/noundefined',\n      '[tex]/require',\n      '[tex]/autoload',\n      '[tex]/configmacros'\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Autoloading empheq Extension\nDESCRIPTION: This code shows how to configure MathJax to autoload the `empheq` extension when the `empheq` environment is first used. This is achieved through the `autoload` configuration option within the `tex` block.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/empheq.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {\n    autoload: {\n      empheq: [[], ['empheq']]\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Synchronizing with SRE Using the sreReady Promise\nDESCRIPTION: This JavaScript function provides a mechanism for synchronizing with the Speech-Rule Engine (SRE) using the MathJax.sreReady promise. It asynchronously generates speech for a given TeX string and displays it in a DOM element, ensuring SRE is ready before translation occurs. Requires a DOM element with id=\"speech\".\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/webpack.rst#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction showSpeech(tex, display = false) {\n   MathJax.sreReady = MathJax.sreReady.then(async () => {\n     const speech = await MathJax.tex2speech(tex, display);\n     const output = document.getElementById('speech');\n     output.innerHTML = '';\n     output.appendChild(document.createTextNode(speech));\n   });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring color options\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure the color options for the MathJax TeX extension. It shows how to set the padding and borderWidth within the color sub-block of the tex configuration.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/color.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  tex: {\n    color: {\n      padding: '5px',\n      borderWidth: '2px'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading AMS Extension in MathJax Configuration\nDESCRIPTION: This code snippet demonstrates how to explicitly load the `ams` extension when using `input/tex-base`. It configures the MathJax loader to include the `ams` extension and adds `ams` to the TeX packages.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/ams.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/ams']},\n  tex: {packages: {'[+]': ['ams']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Using Node.js Require Function\nDESCRIPTION: This JavaScript code configures MathJax to use Node.js's `require` function for loading components. It sets the `require` property in the loader configuration to the `require` function available in the Node.js environment. This is useful for running MathJax in a Node.js environment.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/startup/loader.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  loader: {\n    require: require\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading setoptions extension in MathJax Configuration\nDESCRIPTION: This configures MathJax to load the `setoptions` extension.  It adds `'[tex]/setoptions'` to the `load` array of the `loader` block and `'setoptions'` to the `packages` array of the `tex` block, enabling the use of `\\setOptions` in TeX expressions.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/setoptions.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/centernot']},\n  tex: {packages: {'[+]': ['centernot']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MathJax with separate script tag HTML\nDESCRIPTION: This HTML snippet shows the recommended HTML5-compliant method of configuring MathJax using a separate <script> tag with type=\"text/x-mathjax-config\". This tag should come before the one that loads MathJax.js.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/earlier/upgrade.rst#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({\n    jax: [\"input/TeX\",\"output/HTML-CSS\"],\n    extensions: [\"tex2jax.js\"]\n  });\n</script>\n<script type=\"text/javascript\" src=\"/MathJax/MathJax.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Loading Unicode Extension via Configuration\nDESCRIPTION: Illustrates how to load the unicode extension via MathJax configuration. It shows how to add '[tex]/unicode' to the load array of the loader block and 'unicode' to the packages array of the tex block.  This is needed to enable the unicode extension for MathJax.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/unicode.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/unicode']},\n  tex: {packages: {'[+]': ['unicode']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Obtaining Metrics and Converting TeX to SVG - JavaScript\nDESCRIPTION: This JavaScript code retrieves the metrics (em, ex, containerWidth, etc.) for a specific DOM element using MathJax.getMetricsFor, and then converts a TeX expression to SVG using these metrics.  It appends the resulting SVG to the target DOM node. It requires MathJax to be loaded with the TeX input and SVG output jax.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/typeset.rst#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlet node = document.querySelector('#math');\nlet options = MathJax.getMetricsFor(node, true);\nlet html = MathJax.tex2svg('\\\\sqrt{x^2+1}', options);\nnode.appendChild(html);\n```\n\n----------------------------------------\n\nTITLE: Custom MathJax v2 Script Finder in MathJax v3 (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to create a custom finder function within MathJax v3 to locate and process MathJax v2-style script tags. It iterates through script tags with the type attribute starting with 'math/tex', extracts the math content, creates MathItem objects, replaces the script tags with text nodes, and adds the math items to the document for processing. The 'renderActions' option in the MathJax configuration is used to inject this custom finder function.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/v2.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  options: {\n    renderActions: {\n      find: [10, function (doc) {\n        for (const node of document.querySelectorAll('script[type^=\"math/tex\"]')) {\n          const display = !!node.type.match(/; *mode=display/);\n          const math = new doc.options.MathItem(node.textContent, doc.inputJax[0], display);\n          const text = document.createTextNode('');\n          node.parentNode.replaceChild(text, node);\n          math.start = {node: text, delim: '', n: 0};\n          math.end = {node: text, delim: '', n: 0};\n          doc.math.push(math);\n        }\n      }, '']\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using combined config file with custom configuration HTML\nDESCRIPTION: This HTML snippet shows how to use a pre-defined configuration file while modifying some of the configuration parameters. A text/x-mathjax-config block is used in combination with a config=filename parameter.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/earlier/upgrade.rst#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({\n    tex2jax: {\n      inlineMath: [ ['$','$'], ['\\\\(','\\\\)'] ],\n      processEscapes: true\n    }\n  });\n</script>\n<script type=\"text/javascript\" src=\"/MathJax/MathJax.js?config=TeX-AMS_CHTML\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring MathJax to Load Cancel Extension\nDESCRIPTION: This JavaScript code configures MathJax to load the cancel extension. It demonstrates two methods: explicitly loading via the `loader` block and adding the `cancel` package to the `tex` block. This ensures the cancel macros are available for use in TeX expressions.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/cancel.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/cancel']},\n  tex: {packages: {'[+]': ['cancel']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Loading MathJax with inline configuration and combined config HTML\nDESCRIPTION: This HTML snippet shows the original way of using inline configuration with combined configuration.  This configures the TeX input jax and enables the tex2jax extension using inline javascript within the MathJax script.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/earlier/upgrade.rst#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"/MathJax/MathJax.js\">\n  MathJax.Hub.Config({\n    jax: [\"input/TeX\",\"output/CommonHTML\"],\n    extensions: [\"tex2jax.js\",\"AMSmath.js\",\"AMSsymbols.js\"]\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling HTML Special Characters in AsciiMath (Incorrect)\nDESCRIPTION: This LaTeX snippet demonstrates an incorrect usage of HTML special characters within AsciiMath delimiters. The browser will interpret `x<y` as an HTML tag, leading to rendering issues. This highlights the importance of properly handling HTML special characters within math expressions.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/asciimath.rst#_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\t... when `x<y` we have ...\n```\n\n----------------------------------------\n\nTITLE: Loading TeX Extension at Run Time\nDESCRIPTION: This LaTeX snippet demonstrates how to load the 'color' TeX extension at run time within a math expression using the \\require macro. This allows loading extensions on pages where they were not initially configured.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions.rst#_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n \\(\\require{color}\\)\n```\n\n----------------------------------------\n\nTITLE: Enclose Macro Examples LaTeX\nDESCRIPTION: Demonstrates the usage of the \\enclose macro with different notations and attributes to enclose math expressions. This includes examples with circle, box, color attributes, and nested enclosures.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/enclose.rst#_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\enclose{circle}[mathcolor=\"red\"]{x}\n\\enclose{circle}[mathcolor=\"red\"]{\\color{black}{x}}\n\\enclose{circle,box}{x}\n\\enclose{circle}{\\enclose{box}{x}}\n```\n\n----------------------------------------\n\nTITLE: Configuring AsciiMath Options in MathJax\nDESCRIPTION: This code block demonstrates how to configure the AsciiMath input processor options within the MathJax global object. It includes settings for fixphi (TeX vs. Unicode mapping), displaystyle (displayed vs. in-line equations), and decimalsign (decimal separator character).\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/input/asciimath.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  asciimath: {\n    fixphi: true,              // true for TeX mapping, false for unicode mapping\n    displaystyle: true,        // true for displaystyle typesetting, false for in-line\n    decimalsign: '.'           // character to use for decimal separator\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Removing Packages from MathJax Configuration\nDESCRIPTION: This code snippet shows how to remove the `autoload` and `require` packages from the default `packages` array in the MathJax configuration. This is achieved using the `'[-]'` notation within the `packages` option.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/index.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npackages: {'[-]': ['autoload', 'require']}\n```\n\n----------------------------------------\n\nTITLE: x-mathjax-config Script Check (v2 Compatibility)\nDESCRIPTION: This JavaScript code checks for the presence of 'script[type=\"text/x-mathjax-config\"]' tags in the document, which were used to configure MathJax in version 2. If such a tag is found, it throws an error, indicating that these scripts should be converted to the MathJax global variable format for version 3.  This enforces migration towards the new configuration method.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/v2.rst#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n//\n         //  Warn about x-mathjax-config scripts\n         //\n         if (document.querySelector('script[type=\"text/x-mathjax-config\"]')) {\n           throw Error('x-mathjax-config scripts should be converted to MathJax global variable');\n         }\n```\n\n----------------------------------------\n\nTITLE: Configure MathJax Menu Developer Options\nDESCRIPTION: This code block demonstrates how to configure developer-level options for the MathJax menu, including specifying a custom `Menu` class and defining output jax instances. The `MenuClass` option allows you to override the default menu class with a custom subclass.  The `jax` option lets you manage the output jax instances used for different output formats.  This example requires the MathJax library to be included.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/menu.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  options: {\n    MenuClass: Menu,\n    menuOptions: {\n      jax: {\n        CHTML: null,\n        SVG: null\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading cases Extension via Autoload Configuration\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure MathJax to automatically load the `cases` extension using the `autoload` feature. This allows MathJax to automatically load the `cases` extension when the `numcases` or `subnumcases` environments are encountered in a TeX expression. This requires that the `autoload` extension is enabled.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/cases.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {\n    autoload: {\n      cases: [[], ['numcases', 'subnumcases']]\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Example of \\color in Version 3 (Standard)\nDESCRIPTION: This LaTeX code snippet illustrates the standard LaTeX way of using the \\color macro, which is the default in MathJax version 3. The \\color command is a switch, affecting all subsequent text within the same scope, so {\\color{red} x} + {\\color{blue} y} will render a red 'x' and a blue 'y'.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/color.rst#_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n{\\color{red} x} + {\\color{blue} y}\n```\n\n----------------------------------------\n\nTITLE: Explicitly load the autoload extension\nDESCRIPTION: This code snippet demonstrates how to explicitly load the `autoload` extension when using `input/tex-base`. It adds `'[tex]/autoload'` to the `load` array of the `loader` block and `'autoload'` to the `packages` array of the `tex` block.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/autoload.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/autoload']},\n  tex: {packages: {'[+]': ['autoload']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Semantic Enrichment Component in MathJax\nDESCRIPTION: This code snippet demonstrates how to load the `semantic-enrich` accessibility component in MathJax.  It adds the component name to the `load` array within the `loader` block of the MathJax configuration. This allows MathJax to generate speech strings for mathematics processed.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/components/accessibility.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\nMathJax = {\n  loader: {\n    load: ['a11y/semantic-enrich']\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading the Lazy Typesetting Extension in MathJax\nDESCRIPTION: This snippet demonstrates how to load the `ui/lazy` extension in the MathJax configuration to enable lazy typesetting. It adjusts the typesetting pipeline to only process expressions when they come into view.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/output/lazy.rst#_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\nMathJax = {\n  loader: {load: ['ui/lazy']}\n};\n```\n\n----------------------------------------\n\nTITLE: Autoloading Colorv2 Extension\nDESCRIPTION: This snippet shows how to configure MathJax to autoload the `colorv2` extension when the `\\color` macro is used, instead of the default `color` extension. It disables autoloading for `color` and enables it for `colorv2`, making the MathJax v2 version the default.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/colorv2.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {\n    autoload: {\n      color: [],            // don't autoload the color extension\n      colorv2: ['color']    // autoload colorv2 on the first use of \\color\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Install MathJax via npm\nDESCRIPTION: This command installs MathJax version 3 using npm. It downloads the pre-built components into the `node_modules/mathjax/es5` directory.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/hosting.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install mathjax@3\n```\n\n----------------------------------------\n\nTITLE: Combined config file with custom tex2jax config HTML\nDESCRIPTION: This HTML snippet shows how to use combined configuration with combined configuration, and customize inlineMath and processEscapes options, using text/x-mathjax-config block. This allows the user to configure MathJax and single dollar delimiters.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/earlier/upgrade.rst#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({\n    tex2jax: {\n      inlineMath: [ ['$','$'], ['\\\\(','\\\\)'] ],\n      processEscapes: true\n    }\n  });\n</script>\n<script type=\"text/javascript\" src=\"/MathJax/MathJax.js?config=TeX-AMS_CHTML\"></script>\n```\n\n----------------------------------------\n\nTITLE: Loading the noundefined Extension in MathJax\nDESCRIPTION: This code snippet demonstrates how to load the `noundefined` extension explicitly when using `input/tex-base`. It adds `[tex]/noundefined` to the `load` array of the `loader` block and `noundefined` to the `packages` array of the `tex` block. This ensures that undefined control sequences are displayed as their macro names.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/noundefined.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/noundefined']},\n  tex: {packages: {'[+]': ['noundefined']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Dependencies in MathJax\nDESCRIPTION: This code snippet demonstrates how to configure MathJax to specify dependencies between extensions.  It uses the loader configuration to define paths and dependencies, ensuring that custom extensions are loaded after their dependencies, such as the TeX input jax.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/webpack.rst#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\nMathJax = {\n   loader: {\n      load: ['input/tex', 'output/chtml', '[custom]/mml.min.js'],\n      paths: {custom: '.'},\n      dependencies: {'[custom]/mml.min.js': ['input/tex']}\n   },\n   tex: {\n      packages: {'[+]': ['mml']}\n   }\n};\n</script>\n<script type=\"text/javascript\" id=\"MathJax-script\" async\n  src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/startup.js\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Link to MathJax in HTML\nDESCRIPTION: This HTML snippet shows how to link to a locally hosted MathJax file within a web page.  The `path-to-MathJax` should be updated to reflect the correct URL.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/hosting.rst#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"path-to-MathJax/tex-chtml.js\" id=\"MathJax-script\" async></script>\n```\n\n----------------------------------------\n\nTITLE: Disable autoloading of the color extension (example 2)\nDESCRIPTION: This code snippet shows how to prevent the `color` extension from being autoloaded. By setting the value of the `color` key to an empty array, the extension will not load even if the `\\color` macro is used.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/autoload.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  tex: {\n    autoload: expandable({\n      color: []\n    })\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring renderActions in MathJax\nDESCRIPTION: This snippet configures the `renderActions` option within MathJax, specifying the actions to be performed during typesetting and conversion. It sets priorities for actions and defines methods to be called on both MathDocument and MathItem objects.  This allows for customization of the rendering pipeline.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/document.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  options: {\n    renderActions: {\n      compile: [MathItem.STATE.COMPILED],\n      metrics: [MathItem.STATE.METRICS, 'getMetrics', '', false]\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Colorv2 Extension\nDESCRIPTION: This code snippet demonstrates how to explicitly load the `colorv2` extension in MathJax using the `loader` configuration option.  It also shows how to add 'color' to the `packages` array of the `tex` block, though that refers to the LaTeX-compatible color extension.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/colorv2.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/colorv2']},\n  tex: {packages: {'[+]': ['color']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring AsciiMath Delimiters\nDESCRIPTION: This JavaScript code snippet configures MathJax to use specific delimiters for AsciiMath notation.  It sets the delimiters to single dollar signs ('$') and backticks ('`').  This allows MathJax to identify and process AsciiMath expressions enclosed within these delimiters within the HTML document.  It is important to note potential conflicts when using dollar signs, especially when TeX notation is also used.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/asciimath.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n      loader: {\n        load: ['input/asciimath']\n      },\n      asciimath: {\n        delimiters: [['$','$'], ['`','`']]\n      }\n    });\n```\n\n----------------------------------------\n\nTITLE: Configure require options\nDESCRIPTION: This JavaScript snippet illustrates how to configure the `require` extension by setting the `allow` and `defaultAllow` options within the `require` sub-block of the `tex` configuration block. This controls which extensions can be loaded using `\\require`.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/require.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  tex: {\n    require: {\n      allow: {\n        base: false,\n        'all-packages': false\n      },\n      defaultAllow: true\n   }\n  };\n\n```\n\n----------------------------------------\n\nTITLE: Removing and Adding TeX Extensions Simultaneously\nDESCRIPTION: This snippet demonstrates how to both remove default TeX extensions and add new ones at the same time. It removes the `noundefined` and `autoload` extensions while adding the `enclose` extension. This allows for fine-grained control over which extensions are active in MathJax.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/input/tex.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  loader: {load: ['[tex]/enclose']},\n  tex: {\n    packages: {'[-]': ['noundefined', 'autoload'], '[+]': ['enclose']}\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Disable require extension\nDESCRIPTION: This JavaScript snippet demonstrates how to disable the `require` extension by removing it from the `packages` array of the `tex` block.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/require.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {packages: {'[-]': ['require']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring IE Emulation Mode in HTML\nDESCRIPTION: This snippet shows how to force Internet Explorer to use the highest standards mode, which is optimal for MathJax performance. It uses the X-UA-Compatible meta tag with the value \"IE=edge\". This tag should be placed at the very beginning of the <head> section.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/output/browser.rst#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n```\n\n----------------------------------------\n\nTITLE: Configuring amscd Options in MathJax\nDESCRIPTION: This code snippet shows how to configure the options for the `amscd` extension within the `tex` configuration block in MathJax.  It allows customization of column and row spacing, horizontal and vertical arrow sizes, and whether to hide horizontal labels. These settings affect the appearance of commutative diagrams.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/amscd.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  tex: {\n    amscd: {\n      colspace: '5pt',\n      rowspace: '5pt',\n      harrowsize: '2.75em',\n      varrowsize: '1.75em',\n      hideHorizontalLabels: false\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Textmacros with Additional Packages\nDESCRIPTION: This code shows how to configure the `textmacros` extension to use additional packages, similar to configuring math TeX packages. Specifically, it adds the `bbox` package to the `textmacros` configuration, making the `\\bbox` command available within `\\text{}`.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/textmacros.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  loader: {load: ['[tex]/textmacros', '[tex]/bbox']},\n  tex: {\n    packages: {'[+]': {'textmacros'}},\n    textmacros: {\n      packages: {'[+]': ['bbox']}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Load Verb Extension via MathJax Configuration\nDESCRIPTION: This snippet demonstrates how to load the verb extension explicitly using the MathJax configuration. It adds '[tex]/verb' to the load array and 'verb' to the packages array.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/verb.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/verb']},\n  tex: {packages: {'[+]': ['verb']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Define a Custom Extensible Arrow in LaTeX\nDESCRIPTION: This LaTeX code defines a new extensible right harpoon with barb up using the `\\Newextarrow` macro provided by the `extpfeil` extension. It specifies the control sequence name, spacing, and Unicode character.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/extpfeil.rst#_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\Newextarrow{\\xrightharpoonup}{5,10}{0x21C0}\n```\n\n----------------------------------------\n\nTITLE: Performing Actions During MathJax Initialization\nDESCRIPTION: This JavaScript code snippet overrides the `ready()` function in the MathJax startup configuration. It logs messages before and after calling `MathJax.startup.defaultReady()`, allowing you to execute custom code before MathJax is fully initialized and after the initial typesetting is queued.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/configuration.rst#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n     startup: {\n       ready: () => {\n         console.log('MathJax is loaded, but not yet initialized');\n         MathJax.startup.defaultReady();\n         console.log('MathJax is initialized, and the initial typeset is queued');\n       }\n     }\n   };\n```\n\n----------------------------------------\n\nTITLE: Customizing Regular Expression for Digits\nDESCRIPTION: This snippet demonstrates customizing the regular expression used to identify numbers in TeX expressions. It modifies the `digits` option to use `{,}`` as the decimal indicator instead of `.` which is the default.  This allows MathJax to correctly parse numbers with this alternative format.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/input/tex.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  tex: {\n    digits: /^(?:[0-9]+(?:\\{,\\}[0-9]*)?|\\{,\\}[0-9]+)/\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Typesetting Options in MathJax\nDESCRIPTION: This snippet showcases the configuration options available for the lazy typesetting extension, including `lazyMargin` and `lazyAlwaysTypeset`. `lazyMargin` specifies the extent of the typesetting margin outside the viewport, while `lazyAlwaysTypeset` allows defining containers whose math should always be typeset during the initial pass.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/output/lazy.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  options: {\n    lazyMargin: '200px',\n    lazyAlwaysTypeset: null\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling TeX Extension\nDESCRIPTION: This JavaScript snippet shows how to disable the 'require' and 'autoload' TeX extensions by removing them from the packages array in the tex block of the MathJax configuration. This is useful when using combined component files that include extensions that are not needed.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {packages: {'[-]': ['require', 'autoload']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Configure MathJax with jsMath2jax extension\nDESCRIPTION: This code snippet configures MathJax to use the `jsMath2jax` extension. This extension helps to process mathematics marked up using jsMath's `span` and `div` tags when migrating to MathJax. The `extensions` array includes `jsMath2jax.js`, and the `jax` array should include `input/TeX` to specify the input format.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/earlier/jsMath.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/x-mathjax-config\">\n   MathJax.Hub.Config({\n    extensions: [\"jsMath2jax.js\"]\n  });\n</script>\n<script\n  src=\"https://example.com/MathJax.js?config=TeX-AMS_CHTML\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading the upgreek Extension\nDESCRIPTION: This code snippet demonstrates how to load the `upgreek` extension in MathJax using the `loader` and `tex` configuration options.  It adds `'[tex]/upgreek'` to the `load` array of the `loader` block and `'upgreek'` to the `packages` array of the `tex` block. This ensures that the upgreek extension is available for rendering upright Greek characters in mathematical expressions.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/upgreek.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/upgreek']},\n  tex: {packages: {'[+]': ['upgreek']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Explicitly Loading the configmacros Extension\nDESCRIPTION: This snippet shows how to explicitly load the `configmacros` extension when using `input/tex-base`. It adds `'[tex]/configmacros'` to the `load` array of the `loader` block and `'configmacros'` to the `packages` array of the `tex` block.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/configmacros.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/configmacros']},\n  tex: {packages: {'[+]': ['configmacros']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Component Dependencies\nDESCRIPTION: This JavaScript code defines dependencies for a custom TeX extension. It specifies that 'input/tex-base', '[tex]/newcommand', and '[tex]/enclose' must be loaded before '[tex]/myExtension'. The 'source' property also specifies the location of the custom extension.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/startup/loader.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  loader: {\n    source: {\n      '[tex]/myExtension: 'https://my.site.com/mathjax/tex/myExtension.js'},\n    },\n    dependencies: {\n      '[tex]/myExtension': ['input/tex-base', '[tex]/newcommand', '[tex]/enclose']\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Custom MathJax Build File (mathjax-speech.js)\nDESCRIPTION: This JavaScript file defines a custom MathJax build for generating speech strings from TeX input. It loads the necessary MathJax components, initializes MathJax with a blank DOM, configures the TeX input jax, and defines a global MathJax object with a tex2speech() function.  It requires mathjax-full and related modules.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/webpack.rst#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n//\n//  Load the desired components\n//\nconst mathjax     = require('mathjax-full/js/mathjax.js').mathjax;      // MathJax core\nconst TeX         = require('mathjax-full/js/input/tex.js').TeX;        // TeX input\nconst MathML      = require('mathjax-full/js/input/mathml.js').MathML;  // MathML input\nconst browser     = require('mathjax-full/js/adaptors/browserAdaptor.js').browserAdaptor; // browser DOM\nconst Enrich      = require('mathjax-full/js/a11y/semantic-enrich.js').EnrichHandler;     // semantic enrichment\nconst Register    = require('mathjax-full/js/handlers/html.js').RegisterHTMLHandler;      // the HTML handler\nconst AllPackages = require('mathjax-full/js/input/tex/AllPackages').AllPackages;         // all TeX packages\nconst STATE       = require('mathjax-full/js/core/MathItem.js').STATE;\n\nconst sreReady    = require('mathjax-full/js/a11y/sre.js').sreReady();    // SRE promise;\n\n//\n//  Register the HTML handler with the browser adaptor and add the semantic enrichment\n//\nEnrich(Register(browser()), new MathML());\n\n//\n//  Initialize mathjax with a blank DOM.\n//\nconst html = mathjax.document('', {\n   sre: {\n     speech: 'shallow',           // add speech to the enriched MathML\n   },\n   InputJax: new TeX({\n      packages: AllPackages.filter((name) => name !== 'bussproofs'),  // Bussproofs needs an output jax\n      macros: {require: ['', 1]}      // Make \\require a no-op since all packages are loaded\n   })\n});\n\n//\n//  The user's configuration object\n//\nconst CONFIG = window.MathJax || {};\n\n//\n//  The global MathJax object\n//\nwindow.MathJax = {\n   version: mathjax.version,\n   html: html,\n   sreReady: sreReady,\n\n   tex2speech(tex, display = true) {\n     const math = new html.options.MathItem(tex, html.inputJax[0], display);\n     return mathjax.handleRetriesFor(() => math.convert(html, STATE.CONVERT)).then(() => {\n       let speech = '';\n       math.root.walkTree(node => {\n         const attributes = node.attributes.getAllAttributes();\n         console.log(attributes);\n         if (!speech && attributes['data-semantic-speech'] &&\n             !attributes['data-semantic-parent']) {\n           speech = attributes['data-semantic-speech'];\n         }\n       });\n       return speech || 'no speech text generated';\n     });\n   }\n};\n\n//\n// Perform ready function, if there is one\n//\nif (CONFIG.ready) {\n  sreReady.then(CONFIG.ready);\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting underscores from Markdown interpretation\nDESCRIPTION: This example demonstrates using back-ticks in Markdown to enclose LaTeX code, preventing Markdown from interpreting underscores as italics. This ensures that MathJax can process the subscript notation correctly.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/html.rst#_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\n    ... we have `\\(x_1 = 132\\)` and `\\(x_2 = 370\\)` and so ...\n```\n\n----------------------------------------\n\nTITLE: Loading Specific MathJax Version\nDESCRIPTION: This snippet demonstrates how to load a specific version (e.g., 3.0.0) of the `tex-svg` component from the jsdelivr CDN. This ensures that the same version is always used. The `async` attribute is used for asynchronous loading.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/configuration.rst#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" id=\"MathJax-script\" async\n  src=\"https://cdn.jsdelivr.net/npm/mathjax@3.0.0/es5/tex-svg.js\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring noundefined Options in MathJax\nDESCRIPTION: This code demonstrates how to configure the appearance of undefined macro names using the `noundefined` sub-block of the `tex` configuration.  It sets the color, background, and size properties. The `color` property sets the text color, `background` sets the background color, and `size` adjusts the size of the displayed macro name.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/noundefined.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  tex: {\n    noundefined: {\n      color: 'red',\n      background: '',\n      size: ''\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading amscd Extension in MathJax\nDESCRIPTION: This code snippet demonstrates how to load the `amscd` extension explicitly in MathJax. It adds '[tex]/amscd' to the `load` array of the `loader` block and 'amscd' to the `packages` array of the `tex` block. This configuration ensures that the amscd extension is available for rendering commutative diagrams.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/amscd.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/amscd']},\n  tex: {packages: {'[+]': ['amscd']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MathJax with TeX Extension\nDESCRIPTION: This HTML snippet demonstrates how to configure MathJax to load the 'enclose' TeX extension. It shows how to add the extension to the `load` array in the `loader` section and include it in the `packages` array within the `tex` section.  This configuration ensures that the enclose extension is available for use within MathJax.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/components/input.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/enclose']},\n  tex: {\n    packages: {'[+]', ['enclose']}\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MathJax to use begingroup extension in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure MathJax to use the `begingroup.js` extension. It shows the configuration option required to load the extension by adding it to the `extensions` array in the `TeX` block of the MathJax configuration. This extension is not included in combined configurations and must be explicitly included.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/begingroup.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nTeX: {\n  extensions: [\"begingroup.js\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MathJax from cdnjs CDN\nDESCRIPTION: This snippet demonstrates loading a specific version of the `tex-svg` component from the cdnjs CDN.  It loads version 3.0.0.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/configuration.rst#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" id=\"MathJax-script\" async\n  src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.0.0/es5/tex-svg.js\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Require package with options in LaTeX\nDESCRIPTION: This snippet demonstrates using `\\require` to load the `amscd` extension and set its `harrowsize` option to `3em` in a single command.  This is equivalent to `\\Require{amscd}\\setOptions[amscd]{harrowsize=3em}`.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/setoptions.rst#_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n\\require[harrowsize=3em]{amscd}\n```\n\n----------------------------------------\n\nTITLE: MathJax v2 Compatibility Configuration (HTML)\nDESCRIPTION: This HTML snippet configures MathJax v3 to emulate some behaviors of MathJax v2, specifically for handling the \\color macro and renaming required packages. It uses requireMap to map old extension names to new ones and overrides the require command map to translate old package names.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/v2.rst#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script>\n   MathJax = {\n     startup: {\n       //\n       //  Mapping of old extension names to new ones\n       //\n       requireMap: {\n         AMSmath: 'ams',\n         AMSsymbols: 'ams',\n         AMScd: 'amscd',\n         HTML: 'html',\n         noErrors: 'noerrors',\n         noUndefined: 'noundefined'\n       },\n       ready: function () {\n         //\n         //  Replace the require command map with a new one that checks for\n         //    renamed extensions and converts them to the new names.\n         //\n         var CommandMap = MathJax._.input.tex.SymbolMap.CommandMap;\n         var requireMap = MathJax.config.startup.requireMap;\n         var RequireLoad = MathJax._.input.tex.require.RequireConfiguration.RequireLoad;\n         var RequireMethods = {\n           Require: function (parser, name) {\n             var required = parser.GetArgument(name);\n             if (required.match(/[^_a-zA-Z0-9]/) || required === '') {\n               throw new TexError('BadPackageName', 'Argument for %1 is not a valid package name', name);\n             }\n             if (requireMap.hasOwnProperty(required)) {\n               required = requireMap[required];\n             }\n             RequireLoad(parser, required);\n           }\n         };\n         new CommandMap('require', {require: 'Require'}, RequireMethods);\n         //\n         //  Do the usual startup\n         //\n         return MathJax.startup.defaultReady();\n       }\n     },\n     tex: {\n       autoload: {\n         color: [],          // don't autoload the color extension\n         colorv2: ['color'], // do autoload the colorv2 extension\n       }\n     }\n   };\n   </script>\n   <script id=\"MathJax-script\" async\n    src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Loading HTML Extension via MathJax Configuration\nDESCRIPTION: This JavaScript code snippet demonstrates how to load the MathJax HTML extension by modifying the MathJax configuration.  It shows how to add '[tex]/html' to the loader's load array and 'html' to the tex's packages array to explicitly load the extension.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/html.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/html']},\n  tex: {packages: {'[+]': ['html']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport Meta Tag in HTML\nDESCRIPTION: This snippet demonstrates the recommended viewport meta tag for ensuring proper scaling and display of MathJax content on mobile devices. It sets the viewport width to the device width and initializes the zoom level to 1.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/output/browser.rst#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n\n----------------------------------------\n\nTITLE: Building the Custom MathJax File\nDESCRIPTION: This shell command executes the makeAll script from mathjax-full to build the custom MathJax file.  It processes the custom build based on the configuration specified in the webpack.config.js file and the custom mathjax-speech.js file. Requires node and mathjax-full.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/webpack.rst#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nnode ../node_modules/mathjax-full/components/bin/makeAll\n```\n\n----------------------------------------\n\nTITLE: MathJax.Callback Implementation (v2 Compatibility)\nDESCRIPTION: This JavaScript code snippet defines a compatibility layer for MathJax.Callback to allow MathJax v2 code to be used with MathJax v3. The implementation handles different types of arguments to emulate the original behavior of MathJax.Callback. It checks the types of arguments and uses Function.bind to create a callback function, throwing an error if a valid callback cannot be created.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/v2.rst#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nMathJax.Callback = function (args) {\n           if (typeof(args) === 'string') {return args}\n           if (!(args instanceof Array)) {args = [args]}\n           if (typeof(args[0]) === 'function') {\n             if (typeof(args[1]) === 'undefined') {args[1] = window}\n             return Function.bind.apply(args[0], [args[1]].concat(args.slice(2)));\n           } else if (typeof(args[0]) === 'string') {\n             if (typeof(args[1]) !== 'undefined' &&\n                         typeof(args[1][args[0]]) === 'function') {\n               return Function.bind.apply(args[1][args[0]], args.slice(1));\n             } else if (typeof(args[0]) === 'function') {\n               return Function.bind.apply(args[0], [window].concat(args.slice(1)));\n             } else if (typeof(args[1]) === 'function') {\n               return Function.bind.apply(args[1], [args[0]].concat(args.slice(2)));\n             }\n           } else if (typeof(args) === 'function') {\n             return args;\n           }\n           throw Error(\"Can't make callback from given data\");\n         };\n```\n\n----------------------------------------\n\nTITLE: Synchronizing with SRE Using the Ready Function\nDESCRIPTION: This JavaScript code demonstrates how to synchronize with the Speech-Rule Engine (SRE) using the ready() function.  It sets a global variable to true when SRE is ready, allowing you to check that value before generating speech. It defines a window.MathJax object with a ready function.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/webpack.rst#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.speechReady = false;\nwindow.MathJax = {\n   ready: () => {\n      window.speechReady = true;\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Compile and build MathJax components\nDESCRIPTION: These commands compile the TypeScript source files into JavaScript files and then build the MathJax components.  This assumes the MathJax-src repository has been cloned.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/hosting.rst#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd mathjax\nnpm install\nnpm run compile\nnpm run make-components\ncd ..\n```\n\n----------------------------------------\n\nTITLE: MathJax.Hub Replacement (v2 Compatibility)\nDESCRIPTION: This JavaScript code snippet defines a replacement for MathJax.Hub to maintain compatibility with MathJax v2. It includes implementations for Queue, Typeset, Register, and Config.  Queue uses promises for asynchronous execution, Typeset triggers the MathJax typesetting process, Register logs messages about unsupported hooks, and Config logs a message about the need to convert MathJax configurations for version 3.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/v2.rst#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n//\n         // Add a replacement for MathJax.Hub commands\n         //\n         MathJax.Hub = {\n           Queue: function () {\n             for (var i = 0, m = arguments.length; i < m; i++) {\n                var fn = MathJax.Callback(arguments[i]);\n                MathJax.startup.promise = MathJax.startup.promise.then(fn);\n             }\n             return MathJax.startup.promise;\n           },\n           Typeset: function (elements, callback) {\n              var promise = MathJax.typesetPromise(elements);\n              if (callback) {\n                promise = promise.then(callback);\n              }\n              return promise;\n           },\n           Register: {\n              MessageHook: function () {console.log('MessageHooks are not supported in version 3')},\n              StartupHook: function () {console.log('StartupHooks are not supported in version 3')},\n              LoadHook: function () {console.log('LoadHooks are not supported in version 3')}\n           },\n           Config: function () {console.log('MathJax configurations should be converted for version 3')}\n         };\n```\n\n----------------------------------------\n\nTITLE: Installing MathJax via bower\nDESCRIPTION: This command installs a fork of MathJax without PNG fonts using the bower package manager. This method offers a lightweight installation option suitable for web projects.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/earlier/whats-new-2.6.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbower install components/MathJax\n```\n\n----------------------------------------\n\nTITLE: Using HTML entities for less-than symbol in LaTeX\nDESCRIPTION: This example demonstrates the use of HTML entities (`&lt;`) to represent the less-than symbol. This ensures the browser correctly renders the symbol without interpreting it as the beginning of an HTML tag, allowing MathJax to process the LaTeX correctly.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/html.rst#_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n  ... when $x &lt; y$ we have ...\n```\n\n----------------------------------------\n\nTITLE: Disabling the configmacros Extension\nDESCRIPTION: This snippet demonstrates how to disable the `configmacros` extension by removing it from the `packages` array within the `tex` block of the MathJax configuration.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/configmacros.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {packages: {'[-]': ['configmacros']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Including the Conditional MathJax Loader - HTML\nDESCRIPTION: This HTML snippet includes the 'check-for-tex.js' script, which conditionally loads MathJax if math delimiters are detected in the page content. The 'defer' attribute ensures the script executes after the HTML is parsed. This approach avoids loading MathJax unnecessarily. The location of the script file must be specified correctly in the 'src' attribute.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/typeset.rst#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"check-for-tex.js\" defer></script>\n```\n\n----------------------------------------\n\nTITLE: Load extpfeil Extension via MathJax Configuration\nDESCRIPTION: This JavaScript code demonstrates how to load the `extpfeil` extension as part of the MathJax configuration. It adds `[tex]/extpfeil` to the `load` array of the `loader` block and `extpfeil` to the `packages` array of the `tex` block.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/extpfeil.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/extpfeil']},\n  tex: {packages: {'[+]': ['extpfeil']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring tex2jax with inlineMath and processEscapes HTML\nDESCRIPTION: This HTML snippet demonstrates how to configure tex2jax's inlineMath and processEscapes options to allow single-dollar delimiters and process escapes, placed in the <script> tag that loads MathJax.js.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/earlier/upgrade.rst#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({\n    jax: [\"input/TeX\",\"output/HTML-CSS\"],\n    extensions: [\"tex2jax.js\"],\n    tex2jax: {\n      inlineMath: [ ['$','$'], ['\\\\(','\\\\)'] ],\n      processEscapes: true\n    }\n  });\n</script>\n<script type=\"text/javascript\" src=\"/MathJax/MathJax.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including a Specific MathJax Version from jsdelivr\nDESCRIPTION: This code includes a specific version of MathJax (3.0.0) from the jsdelivr CDN.  The tex-mml-chtml.js component is loaded. This ensures that the same version is always used, regardless of updates.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/start.rst#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"MathJax-script\" async\n     src=\"https://cdn.jsdelivr.net/npm/mathjax@3.0.0/es5/tex-mml-chtml.js\">\n   </script>\n```\n\n----------------------------------------\n\nTITLE: Build Custom Component (Shell)\nDESCRIPTION: This shell command triggers the build process for the custom MathJax component using the `makeAll` script from MathJax components. It processes the component based on the provided webpack configuration and generates the final packaged file.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/webpack.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnode ../node_modules/mathjax-full/components/bin/makeAll\n```\n\n----------------------------------------\n\nTITLE: Using the braced Environment\nDESCRIPTION: This LaTeX code shows the usage of the `braced` environment defined in a previous javascript snippet. It places the fraction `x`/`y` inside stretchy braces.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/configmacros.rst#_snippet_5\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{braced} \\frac{x}{y} \\end{braced}\n```\n\n----------------------------------------\n\nTITLE: Defining TeX Macro with \\newcommand in MathJax\nDESCRIPTION: This snippet demonstrates how to define a TeX macro using the \\newcommand command within MathJax. The macro '\\water' is defined to represent the chemical formula for water (H₂O).\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/misc/faq.rst#_snippet_1\n\nLANGUAGE: TeX\nCODE:\n```\n\\newcommand{\\water}{{\\rm H_{2}O}}\n```\n\n----------------------------------------\n\nTITLE: Loading the ui/safe Extension in MathJax\nDESCRIPTION: This code snippet shows how to load the `ui/safe` extension in MathJax by adding `'ui/safe'` to the `load` array of the `loader` block in the MathJax configuration. This will enable the security filtering provided by the extension.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/safe.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['ui/safe']},\n};\n```\n\n----------------------------------------\n\nTITLE: Loading centernot Extension with Autoload\nDESCRIPTION: This JavaScript code demonstrates how to configure MathJax to autoload the centernot extension. It specifies 'centernot' and 'centerOver' as macros to be autoloaded from the centernot package.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/centernot.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {\n    autoload: {\n      centernot: ['centernot', 'centerOver']\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Nested Path Definitions in Loader\nDESCRIPTION: This JavaScript code demonstrates how to define nested path prefixes in the MathJax loader's `paths` option.  The 'extensions' prefix is defined in terms of the 'custom' prefix. This example loads 'myExtension' using the nested path.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/startup/loader.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  loader: {\n    paths: {\n      custom: 'https://my.site.com/mathjax',\n      extensions: '[custom]/extensions'\n    },\n    load: ['[extensions]/myExtension']\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using \\lt macro for less-than symbol in LaTeX\nDESCRIPTION: This example illustrates using the `\\lt` macro as a TeX-like syntax to represent the less-than symbol.  This approach ensures MathJax correctly interprets the symbol while avoiding conflicts with HTML parsing.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/html.rst#_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n        ... when $x \\lt y$ we have ...\n```\n\n----------------------------------------\n\nTITLE: Configure color macros with colorv2\nDESCRIPTION: This configuration example makes the standard `\\color` macro load the `colorv2` extension rather than the `color` extension, and disables autoloading for the `color` extension. This will load the non-standard version-2 `\\color` macro from the `tex-colorv2` extension. Requires both color and colorv2 extensions to be present.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/autoload.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {\n    autoload: {\n      color: [],\n      colorv2: ['color']\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Keyboard Symbols with CSS\nDESCRIPTION: This CSS code styles the <kbd> HTML tag to visually represent keyboard symbols. The styling includes padding, font size, color, background color, border, border-radius, and box-shadow to make the keys appear as clickable elements.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/basic/a11y-extensions.rst#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nkbd  {\n display: inline-block;\n padding: 3px 5px;\n font-size: 11px;\n line-height: 10px;\n color: #444d56;\n vertical-align: middle;\n background-color: #fafbfc;\n border: solid 1px #c6cbd1;\n border-bottom-color: #959da5;\n border-radius: 3px;\n box-shadow: inset 0 -1px 0 #959da5;\n }\n```\n\n----------------------------------------\n\nTITLE: Setting physics package option in LaTeX\nDESCRIPTION: This snippet illustrates changing an option for a specific package (physics) using the optional argument to `\\setOptions`.  Here, the `arrowdel` option is toggled, affecting the appearance of the gradient symbol.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/setoptions.rst#_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\[\n  \\setOptions[physics]{arrowdel=true}\n  \\grad\n  \\setOptions[physics]{arrowdel=false}\n\\]\n```\n\n----------------------------------------\n\nTITLE: Disabling AMS Extension in MathJax Configuration\nDESCRIPTION: This code snippet demonstrates how to disable the `ams` extension by removing it from the TeX packages list. This is useful when the extension is included in a combined component but needs to be excluded.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/ams.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {packages: {'[-]': ['ams']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Using \\bbox macro in LaTeX\nDESCRIPTION: Examples demonstrating the use of the \\bbox macro in LaTeX to add background colors, padding, and borders to math expressions. The macro takes an optional argument specifying the style.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/bbox.rst#_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\bbox[red]{x+y}      % a red box behind x+y\n\\bbox[2pt]{x+1}      % an invisible box around x+y with 2pt of extra space\n\\bbox[red,2pt]{x+1}  % a red box around x+y with 2pt of extra space\n\\bbox[5px, border: 2px solid red]\n                     % a 2px red border around the math 5px away\n```\n\n----------------------------------------\n\nTITLE: Resetting Equation Numbering and Typesetting\nDESCRIPTION: Shows how to reset automatic equation numbering, clear typeset math, and re-typeset the entire page. This is useful when inserting new content that requires adjustments to equation numbers.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/typeset.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax.startup.document.state(0);\nMathJax.texReset();\nMathJax.typeset();\n```\n\n----------------------------------------\n\nTITLE: Disable autoloading of the verb extension\nDESCRIPTION: This example disables the autoloading of the `verb` extension. By assigning an empty array to the `verb` key in the `autoload` configuration, MathJax will not automatically load the `tex-verb` extension when the `\\verb` command is encountered.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/autoload.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {\n    autoload: {\n      verb: []\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Escaping LaTeX array in Javascript strings\nDESCRIPTION: This example demonstrates escaping backslashes when using the LaTeX `\\\\` command (newline) inside a JavaScript string. The LaTeX `\\\\` needs to be represented as `\\\\\\\\` in the JavaScript string.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/basic/mathematics.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar array = '\\\\begin{array}{cc} a & b \\\\\\\\ c & d \\\\end{array}';\n```\n\n----------------------------------------\n\nTITLE: Loading bussproofs Extension via MathJax Configuration\nDESCRIPTION: This JavaScript snippet shows how to configure MathJax to load the `bussproofs` extension. It adds `[tex]/bussproofs` to the `load` array in the `loader` block and `bussproofs` to the `packages` array in the `tex` block. This allows MathJax to process `bussproofs` commands in LaTeX expressions.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/bussproofs.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/bussproofs']},\n  tex: {packages: {'[+]': ['bussproofs']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Handling less-than symbol in LaTeX\nDESCRIPTION: This example demonstrates how the browser interprets the less-than symbol incorrectly as an HTML tag, leading to rendering issues. It highlights the importance of properly handling special characters in LaTeX when embedding it within HTML.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/html.rst#_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n... when $x<y$ we have ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Complexity Extension in MathJax\nDESCRIPTION: This code snippet configures the complexity extension in MathJax. It shows how to enable or disable complexity computations and insert mactions to allow collapsing of complex expressions. These options allow for simplifying the presentation of complex mathematical expressions.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/accessibility.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  options: {\n    enableComplexity: true,       // set to false to disable complexity computations\n    makeCollapsible: true         // insert mactions to allow collapsing\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Obtaining the SVG Stylesheet - JavaScript\nDESCRIPTION: This JavaScript code retrieves the SVG stylesheet element by calling MathJax.svgStylesheet().  This stylesheet is required for proper rendering of SVG output. It requires MathJax to be loaded with the SVG output jax.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/typeset.rst#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax.svgStylesheet();\n```\n\n----------------------------------------\n\nTITLE: Escaping TeX in Javascript strings\nDESCRIPTION: This example illustrates how to properly escape backslashes in JavaScript strings when representing TeX expressions.  Each backslash in the TeX expression must be doubled to be correctly interpreted by JavaScript.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/basic/mathematics.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar math = '\\\\frac{1}{\\\\sqrt{x^2 + 1}}';\n```\n\n----------------------------------------\n\nTITLE: Use \\verb in MathJax.tex2chtml JavaScript\nDESCRIPTION: This snippet shows how to use the \\verb macro when passing TeX strings to MathJax.tex2chtml().  Braces don't need to be balanced in this context.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/verb.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst html = MathJax.tex2chtml('\\\\verb|{|');\n```\n\n----------------------------------------\n\nTITLE: Clone MathJax source from GitHub\nDESCRIPTION: This command clones the MathJax source code repository from GitHub, installing the source code in the `mathjax` subdirectory.  It requires manual compilation of the typescript source files and building of the component files.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/hosting.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/mathjax/MathJax-src.git mathjax\n```\n\n----------------------------------------\n\nTITLE: LaTeX centernot with parallel Example\nDESCRIPTION: This LaTeX code demonstrates the difference between the standard \\not command and the \\centernot command when negating the parallel symbol. It showcases the visual benefits of \\centernot.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/centernot.rst#_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{array}{c}\n  A \\nparallel B\\\\\n  A \\not\\parallel B\\\\\n  A \\centernot\\parallel B\n\\end{array}\n```\n\n----------------------------------------\n\nTITLE: Disable the autoload extension\nDESCRIPTION: This snippet shows how to disable the `autoload` extension. It removes `autload` from the `packages` array of the `tex` block, preventing it from being loaded.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/autoload.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {packages: {'[-]': ['autload']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MathJax SVG Output Options in JavaScript\nDESCRIPTION: This code block demonstrates how to configure the MathJax SVG output processor using a JavaScript object. It showcases various settings such as scaling, font caching strategy, speech title inclusion, and identifier management for developer use. These options affect how MathJax renders mathematical expressions in SVG format.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/output/svg.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  svg: {\n    scale: 1,                      // global scaling factor for all expressions\n    minScale: .5,                  // smallest scaling factor to use\n    mtextInheritFont: false,       // true to make mtext elements use surrounding font\n    merrorInheritFont: true,       // true to make merror text use surrounding font\n    mathmlSpacing: false,          // true for MathML spacing rules, false for TeX rules\n    skipAttributes: {},            // RFDa and other attributes NOT to copy to the output\n    exFactor: .5,                  // default size of ex in em units\n    displayAlign: 'center',        // default for indentalign when set to 'auto'\n    displayIndent: '0',            // default for indentshift when set to 'auto'\n    fontCache: 'local',            // or 'global' or 'none'\n    localID: null,                 // ID to use for local font cache (for single equation processing)\n    internalSpeechTitles: true,    // insert <title> tags with speech content\n    titleID: 0                     // initial id number to use for aria-labeledby titles\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining HTML raw tags for keyboard symbols\nDESCRIPTION: This code defines two raw HTML tags, |bkey| and |ekey|, to represent keyboard symbols.  These tags are used to render keyboard keys within the documentation.  The HTML tags are used as shorthand for <kbd> and </kbd> respectively.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/basic/a11y-extensions.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n.. |bkey| raw:: html\n\n <kbd>\n\n.. |ekey| raw:: html\n\n </kbd>\n```\n\n----------------------------------------\n\nTITLE: Path Filters Data Object Example\nDESCRIPTION: This JavaScript data object represents the structure of the data passed to path filter functions within the MathJax loader. The object contains properties like `name`, `path`, `component`, `ext`, and `url` which are used to generate the final URL for the component.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/startup/loader.rst#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: string,            // the current name for the package (this becomes the url in the end)\n```\n\n----------------------------------------\n\nTITLE: Loading Enclose Extension JavaScript\nDESCRIPTION: Configuration to load the enclose extension explicitly in MathJax. It adds '[tex]/enclose' to the loader.load array and 'enclose' to the packages array of the tex block.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/enclose.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  loader: {load: ['[tex]/enclose']},\n  tex: {packages: {'[+]': ['enclose']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Loading MathJax Startup Component\nDESCRIPTION: This code snippet demonstrates how to load the MathJax startup component using a `<script>` tag. The `startup.js` file manages the global MathJax object and provides typesetting and conversion methods. The `async` attribute allows the script to load asynchronously.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/components/misc.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" id=\"MathJax-script\" async\n     src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/startup.js\">\n   </script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Safe Extension Options\nDESCRIPTION: This code block illustrates the configuration options for the MathJax `ui/safe` extension, including settings for allowed URLs, classes, CSS IDs, and styles. It also defines safe protocols, styles, length limits, script size and level ranges, and patterns for class names, IDs, and data attributes. These options control the filtering behavior of the extension to prevent potentially unsafe content.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/safe.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  options: {\n    safeOptions: {\n      allow: {\n        //\n        //  Values can be \"all\", \"safe\", or \"none\"\n        //\n        URLs:    'safe',   // safe are in safeProtocols below\n        classes: 'safe',   // safe start with mjx- (can be set by pattern below)\n        cssIDs:  'safe',   // safe start with mjx- (can be set by pattern below)\n        styles:  'safe'    // safe are in safeStyles below\n      },\n      //\n      //  Which URL protocols are allowed\n      //\n      safeProtocols: {\n        http: true,\n        https: true,\n        file: true,\n        javascript: false,\n        data: false\n      },\n      //\n      //  Which styles are allowed\n      //\n      safeStyles: {\n        color: true,\n        backgroundColor: true,\n        border: true,\n        cursor: true,\n        margin: true,\n        padding: true,\n        textShadow: true,\n        fontFamily: true,\n        fontSize: true,\n        fontStyle: true,\n        fontWeight: true,\n        opacity: true,\n        outline: true\n      },\n      lengthMax: 3,                           // Largest padding/border/margin, etc. in em's\n      scriptsizemultiplierRange: [.6, 1],     // Valid range for scriptsizemultiplier\n      scriptlevelRange: [-2, 2],              // Valid range for scriptlevel\n      classPattern: /^mjx-[-a-zA-Z0-9_.]+$/,  // Pattern for allowed class names\n      idPattern: /^mjx-[-a-zA-Z0-9_.]+$/,     // Pattern for allowed ids\n      dataPattern: /^data-mjx-/               // Pattern for data attributes\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding MathJax Logo (PNG)\nDESCRIPTION: This HTML code snippet embeds the MathJax logo (PNG version) with a link back to the MathJax website. It employs an <img> tag within an <a> tag to create a clickable image of the logo.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/misc/badges.rst#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n&lt;a href=\"https://www.mathjax.org\"&gt;\n\t  &lt;img title=\"Powered by MathJax\"\n\t  src=\"https://www.mathjax.org/badge/mj_logo.png\"\n\t  border=\"0\" alt=\"Powered by MathJax\" /&gt;\n      &lt;/a&gt;\n```\n\n----------------------------------------\n\nTITLE: Clone MathJax from GitHub\nDESCRIPTION: This command clones the MathJax repository from GitHub, installing a copy of MathJax in the `mathjax/es5` directory.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/hosting.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/mathjax/MathJax.git mathjax\n```\n\n----------------------------------------\n\nTITLE: Setting IE Compatibility Meta Tag with HTML\nDESCRIPTION: This code snippet demonstrates how to set the X-UA-Compatible meta tag in the HTML document's head to ensure Internet Explorer uses its latest rendering engine for optimal MathJax compatibility.  It is important to include this tag before any other tags in the <head> section of the HTML document.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/misc/faq.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n```\n\n----------------------------------------\n\nTITLE: Custom CSS for Variant-Specific Unknown Characters in MathJax v3\nDESCRIPTION: This CSS snippet allows for setting specific fonts based on the variant of the text. It targets mjx-utext elements with a specific variant attribute (e.g., sans-serif) for CommonHTML output and svg text elements with a corresponding data-variant attribute for SVG output. This provides finer control over the appearance of fallback characters in different contexts.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/v2.rst#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nmjx-container mjx-utext[variant=\"sans-serif\"] {\n  font-family: my-sans-serif-font;\n}\nmjx-container svg text[data-variant=\"sans-serif\"] {\n  font-family: my-sans-serif-font;\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding MathJax Badge (Square PNG)\nDESCRIPTION: This HTML code snippet embeds a square MathJax \"Powered by MathJax\" badge (PNG version) with a link back to the MathJax website. It uses an <img> tag within an <a> tag to create a clickable image.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/misc/badges.rst#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n&lt;a href=\"https://www.mathjax.org\"&gt;\n    &lt;img title=\"Powered by MathJax\"\n    src=\"https://www.mathjax.org/badge/badge-square.png\"\n    border=\"0\" alt=\"Powered by MathJax\" /&gt;\n&lt;/a&gt;\n```\n\n----------------------------------------\n\nTITLE: Skipping Attributes in MathML Output\nDESCRIPTION: This JavaScript snippet demonstrates how to configure MathJax to skip specific attributes when transferring MathML elements to DOM elements in the output. In this example, the `data-my-attr` attribute will not be copied from the MathML element to the corresponding CommonHTML element.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/output/index.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nskipAttributes: {\n    data-my-attr: true\n}\n```\n\n----------------------------------------\n\nTITLE: Developer Options for Safe Extension\nDESCRIPTION: This code snippet presents advanced configuration options for developers using the MathJax `ui/safe` extension. It defines CSS styles that have Top/Right/Bottom/Left versions and CSS styles that are lengths requiring max/min testing, providing fine-grained control over style filtering.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/options/safe.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMathJax = {\n  options: {\n    safeOptions: {\n      //\n      //  CSS styles that have Top/Right/Bottom/Left versions\n      //\n      styleParts: {\n        border: true,\n        padding: true,\n        margin: true,\n        outline: true\n      },\n      //\n      //  CSS styles that are lengths needing max/min testing\n      //    A string value means test that style value;\n      //    An array gives [min,max] in em's\n      //    Otherwise use [-lengthMax,lengthMax] from above\n      //\n      styleLengths: {\n        borderTop: 'borderTopWidth',\n        borderRight: 'borderRightWidth',\n        borderBottom: 'borderBottomWidth',\n        borderLeft: 'borderLeftWidth',\n        paddingTop: true,\n        paddingRight: true,\n        paddingBottom: true,\n        paddingLeft: true,\n        marginTop: true,\n        marginRight: true,\n        marginBottom: true,\n        marginLeft: true,\n        outlineTop: true,\n        outlineRight: true,\n        outlineBottom: true,\n        outlineLeft: true,\n        fontSize: [.707, 1.44]\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling the noundefined Extension in MathJax\nDESCRIPTION: This snippet shows how to disable the `noundefined` extension if it's already included in the package list. It removes `noundefined` from the `packages` array of the `tex` block. This will revert to the default MathJax behavior for undefined control sequences, which is typically to generate an error message.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/noundefined.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MathJax = {\n  tex: {packages: {'[-]': ['noundefined']}}\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding MathJax Badge (Square 3 PNG)\nDESCRIPTION: This HTML code snippet embeds a square MathJax \"Powered by MathJax\" badge (PNG version) with another design variation, linking back to the MathJax website. It uses an <img> tag within an <a> tag to create a clickable image.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/misc/badges.rst#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n&lt;a href=\"https://www.mathjax.org\"&gt;\n    &lt;img title=\"Powered by MathJax\"\n    src=\"https://www.mathjax.org/badge/badge-square-3.png\"\n    border=\"0\" alt=\"Powered by MathJax\" /&gt;\n&lt;/a&gt;\n```\n\n----------------------------------------\n\nTITLE: Example of \\color in Version 2 (Non-Standard)\nDESCRIPTION: This LaTeX code snippet shows how the \\color macro was used in MathJax version 2.  The \\color command takes an argument that is the mathematics to be colored, so \\color{red}{x} + \\color{blue}{y} will render a red 'x' and a blue 'y'.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/color.rst#_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\color{red}{x} + \\color{blue}{y}\n```\n\n----------------------------------------\n\nTITLE: Loading MathJax with explicit configuration file HTML\nDESCRIPTION: This HTML snippet demonstrates how to load MathJax with the default configuration file specified explicitly.  The config parameter is added to the src URL to load config/default.js.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/earlier/upgrade.rst#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"/MathJax/MathJax.js?config=default\"></script>\n```\n\n----------------------------------------\n\nTITLE: Custom MathML Output with TeX Input in MathJax\nDESCRIPTION: This example demonstrates how to create custom MathML output using MathJax's MathML serialization features when using TeX input. It loads the TeX input and contextual menu components, defines a new render action that generates MathML output, and disables the assistive MathML extension. The code also configures CSS to handle display-style math.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/output/mathml.rst#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\nmjx-container[display=\"block\"] {\n  display: block;\n  margin: 1em 0;\n}\n</style>\n<script>\nMathJax = {\n  //\n  //  Load only TeX input and the contextual menu\n  //\n  loader: {load: ['input/tex', 'ui/menu']},\n  //\n  //  When page is ready, render the math in the document\n  //\n  //\n  //  When page is ready:\n  //    disable the assistive-mathml menu item\n  //    render the document, handling require and autoload calls\n  //\n  startup: {\n    pageReady() {\n      MathJax.startup.document.menu.menu.findID('Accessibility', 'AssistiveMml').disable();\n      MathJax._.mathjax.mathjax.handleRetriesFor(() => MathJax.startup.document.render());\n    }\n  },\n  //\n  //  Override the usual typeset render action with one that generates MathML output\n  //\n  options: {\n    renderActions: {\n      assistiveMml: [],  // disable assistive mathml\n      typeset: [150,\n        (doc) => {for (math of doc.math) {MathJax.config.renderMathML(math, doc)}},\n        (math, doc) => MathJax.config.renderMathML(math, doc)\n      ]\n    },\n    menuOptions: {\n      settings: {\n        assistiveMml: false\n      }\n    }\n  },\n  //\n  // The action to use for rendering MathML\n  //\n  renderMathML(math, doc) {\n    math.typesetRoot = document.createElement('mjx-container');\n    math.typesetRoot.innerHTML = MathJax.startup.toMML(math.root);\n    math.display && math.typesetRoot.setAttribute('display', 'block');\n  }\n};\n</script>\n<script type=\"text/javascript\" id=\"MathJax-script\" async\n  src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/startup.js\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Embedding MathJax Badge (Square 2 PNG)\nDESCRIPTION: This HTML code snippet embeds a square MathJax \"Powered by MathJax\" badge (PNG version) with a slightly different design, linking back to the MathJax website. It uses an <img> tag within an <a> tag to create a clickable image.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/misc/badges.rst#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n&lt;a href=\"https://www.mathjax.org\"&gt;\n    &lt;img title=\"Powered by MathJax\"\n    src=\"https://www.mathjax.org/badge/badge-square-2.png\"\n    border=\"0\" alt=\"Powered by MathJax\" /&gt;\n&lt;/a&gt;\n```\n\n----------------------------------------\n\nTITLE: LaTeX centernot Example\nDESCRIPTION: This LaTeX code demonstrates the difference between the standard \\not command and the \\centernot command for negating a relation. It showcases improved alignment with \\centernot.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/centernot.rst#_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{array}{c}\n  A \\not\\longrightarrow B\\\\\n  A \\centernot\\longrightarrow B\n\\end{array}\n```\n\n----------------------------------------\n\nTITLE: Unicode Macro Examples in LaTeX\nDESCRIPTION: Demonstrates the usage of the \\unicode{} macro for inserting Unicode characters into MathJax expressions.  It shows how to specify the Unicode code point, as well as optional height, depth, and font attributes. This allows precise control over the rendering of Unicode characters within mathematical formulas.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/unicode.rst#_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\unicode{65}                        % the character 'A'\n\\unicode{x41}                       % the character 'A'\n\\unicode[.55,0.05]{x22D6}           % less-than with dot, with height .55em and depth 0.05em\n\\unicode[.55,0.05][Geramond]{x22D6} % same taken from Geramond font\n\\unicode[Garamond]{x22D6}           % same, but with default height, depth of .8em,.2em\n```\n\n----------------------------------------\n\nTITLE: Typesetting Proof Trees with LaTeX\nDESCRIPTION: This LaTeX snippet demonstrates the usage of the `prooftree` environment and inference macros from the `bussproofs` package to construct a proof tree. It includes axioms, unary, binary inferences, and labels. The snippet should be enclosed in the `prooftree` environment.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/bussproofs.rst#_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{prooftree}\n\\AxiomC{}\n\\RightLabel{Hyp$^{1}$}\n\\UnaryInfC{$P$}\n\\AXC{$P\\to Q$}\n\\RL{$\\to_E$}\n\\BIC{$Q^2$}\n\\AXC{$Q\\to R$}\n\\RL{$\\to_E$}\n\\BIC{$R$}\n\\AXC{$Q$}\n\\RL{Rit$^2$}\n\\UIC{$Q$}\n\\RL{$\\wedge_I$}\n\\BIC{$Q\\wedge R$}\n\\RL{$\\to_I$$^1$}\n\\UIC{$P\\to Q\\wedge R$}\n\\end{prooftree}\n```\n\n----------------------------------------\n\nTITLE: Configuring MathJax with inline script tag HTML\nDESCRIPTION: This HTML snippet demonstrates the traditional method of configuring MathJax by placing a MathJax.Hub.Config() call within the <script> tag that loads MathJax.js. This method should still work in v1.1.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/earlier/upgrade.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"/MathJax/MathJax.js\">\n  MathJax.Hub.Config({\n    jax: [\"input/TeX\",\"output/HTML-CSS\"],\n    extensions: [\"tex2jax.js\"]\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration from File HTML\nDESCRIPTION: This snippet shows the HTML required to load MathJax configuration from a local file and then load MathJax itself using the tex-svg component. The `defer` attribute is used to ensure the correct order of execution.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/web/configuration.rst#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"mathjax-config.js\" defer></script>\n<script type=\"text/javascript\" id=\"MathJax-script\" defer\n  src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading MathJax with default configuration HTML\nDESCRIPTION: This HTML snippet shows how to load MathJax using config/MathJax.js. In v1.1, MathJax no longer loads a default configuration file by default, so you need to specify the configuration file explicitly. Also the file has been renamed to default.js.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/earlier/upgrade.rst#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"/MathJax/MathJax.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Hiding TeX Macros in HTML\nDESCRIPTION: This HTML snippet shows how to hide the TeX macros `\\nextSection` within a span element using CSS styling.  This prevents the macros from producing visible output on the page while still allowing MathJax to process them.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/input/tex/extensions/tagformat.rst#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<span style=\"display: hidden\">\\(\\nextSection\\)</span>\n```\n\n----------------------------------------\n\nTITLE: Embedding MathJax Badge (GIF)\nDESCRIPTION: This HTML code snippet embeds the standard MathJax \"Powered by MathJax\" badge (GIF version) with a link back to the MathJax website. It uses an <img> tag within an <a> tag to create a clickable image.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/misc/badges.rst#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n&lt;a href=\"https://www.mathjax.org\"&gt;\n    &lt;img title=\"Powered by MathJax\"\n    src=\"https://www.mathjax.org/badge/badge.gif\"\n    border=\"0\" alt=\"Powered by MathJax\" /&gt;\n&lt;/a&gt;\n```\n\n----------------------------------------\n\nTITLE: Enabling Single-Dollar Delimiters in MathJax HTML\nDESCRIPTION: This HTML snippet demonstrates how to explicitly enable single-dollar delimiters ($...$) for in-line math when using in-line configuration. It configures the tex2jax preprocessor to include single-dollar delimiters.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/earlier/upgrade.rst#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"/MathJax/MathJax.js\">\n  MathJax.Hub.Config({\n    jax: [\"input/TeX\",\"output/HTML-CSS\"],\n    extensions: [\"tex2jax.js\"]\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading MathJax with combined configuration file HTML\nDESCRIPTION: This HTML snippet demonstrates loading MathJax with a pre-built combined configuration file. The config parameter is used to specify the configuration file to load.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/earlier/upgrade.rst#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"/MathJax/MathJax.js?config=TeX-AMS_CHTML\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing MathJax via npm\nDESCRIPTION: This command allows you to install a copy of MathJax without PNG fonts using the npm package manager. It is a convenient way to include MathJax in your project as a dependency.\nSOURCE: https://github.com/mathjax/mathjax-docs/blob/master/upgrading/earlier/whats-new-2.6.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install mathjax\n```"
  }
]