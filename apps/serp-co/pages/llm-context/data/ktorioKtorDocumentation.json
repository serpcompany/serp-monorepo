[
  {
    "owner": "ktorio",
    "repo": "ktor-documentation",
    "content": "TITLE: Configuring Basic Authentication Provider in Ktor Client (Kotlin)\nDESCRIPTION: This snippet shows how to configure the basic authentication provider within the Auth plugin installation block. It provides a template for setting up basic authentication.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-auth.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Auth) {\n    basic {\n        // Configure basic authentication\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making API Requests with OAuth Token in Ktor\nDESCRIPTION: Function for making authenticated requests to Google API using the OAuth token stored in the session. Demonstrates how to use the token in the Authorization header.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-oauth.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun getPersonalGreeting(client: HttpClient, token: String): String {\n    val response = client.get(\"https://www.googleapis.com/oauth2/v3/userinfo\") {\n        headers {\n            append(HttpHeaders.Authorization, \"Bearer $token\")\n        }\n    }\n    return response.bodyAsText()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Plugins in Ktor Application Module\nDESCRIPTION: Shows how to install plugins within a Ktor application module. Demonstrates installation of CORS and Compression plugins.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-plugins.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.cors.*\nimport io.ktor.server.plugins.compression.*\n// ...\nfun Application.module() {\n    install(CORS)\n    install(Compression)\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling RequestValidationException in Ktor\nDESCRIPTION: Demonstrates how to handle RequestValidationException using the StatusPages plugin in Ktor.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-request-validation.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(StatusPages) {\n    exception<RequestValidationException> { call, cause ->\n        call.respond(HttpStatusCode.BadRequest, cause.reasons.joinToString())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Transformation Plugin in Kotlin\nDESCRIPTION: This example shows how to create a plugin that transforms data received from the client and data to be sent to the client. It intercepts both receive and send pipelines.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins-base-api.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DataTransformation {\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, DataTransformation> {\n        override val key = AttributeKey<DataTransformation>(\"DataTransformation\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): DataTransformation {\n            val plugin = DataTransformation()\n            val configuration = Configuration().apply(configure)\n            pipeline.receivePipeline.intercept(ApplicationReceivePipeline.Transform) { payload ->\n                if (payload is String) {\n                    val transformedPayload = configuration.requestTransform(payload)\n                    proceedWith(transformedPayload)\n                }\n            }\n            pipeline.sendPipeline.intercept(ApplicationSendPipeline.Transform) { payload ->\n                if (payload is String) {\n                    val transformedPayload = configuration.responseTransform(payload)\n                    proceedWith(transformedPayload)\n                }\n            }\n            return plugin\n        }\n    }\n    class Configuration {\n        var requestTransform: (String) -> String = { it }\n        var responseTransform: (String) -> String = { it }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Credentials with Basic Authentication in Ktor\nDESCRIPTION: Example showing how to implement credential validation for basic authentication using the validate() function. The function checks user credentials and returns a principal for successful authentication or null for failure.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-auth.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Authentication) {\n    basic {\n        realm = \"Access to the '/' path\"\n        validate { credentials ->\n            if (credentials.name == \"jetbrains\" && credentials.password == \"foobar\") {\n                UserIdPrincipal(credentials.name)\n            } else {\n                null\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Module in Kotlin for Ktor\nDESCRIPTION: This snippet demonstrates how to define a simple module in Ktor that handles GET requests to the '/module1' path. It shows the structure of a module as an extension function of the Application class.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-modules.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Application.module1() {\n    routing {\n        get(\"/module1\") {\n            call.respondText(\"Hello from module 1\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Ktor HTTP Client with Response Validation in Kotlin\nDESCRIPTION: Creates and configures a Ktor HTTP client with basic settings, enabling response validation through the expectSuccess property which will throw exceptions for non-2xx responses.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-and-configure.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    expectSuccess = true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Route Handler in Kotlin Ktor\nDESCRIPTION: This snippet shows how to define a route handler in Ktor using both the 'route' function and the more concise 'get' function. It demonstrates handling a GET request to the '/hello' endpoint.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-routing.md#2025-04-09_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.ktor.server.routing.*\nimport io.ktor.http.*\nimport io.ktor.server.response.*\n\nrouting {\n    route(\"/hello\", HttpMethod.Get) {\n        handle {\n            call.respondText(\"Hello\")\n        }\n    }\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.ktor.server.routing.*\nimport io.ktor.server.response.*\n\nrouting {\n    get(\"/hello\") {\n        call.respondText(\"Hello\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Login and Callback Routes in Ktor\nDESCRIPTION: Code for creating protected login and callback routes for the OAuth flow. The login route initiates authentication, while the callback route handles the authorization response and token storage.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-oauth.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nauthenticate(\"auth-oauth-google\") {\n    get(\"/login\") {\n        // Redirects to 'authorizeUrl' automatically\n    }\n\n    get(\"/callback\") {\n        val principal: OAuthAccessTokenResponse.OAuth2? = call.principal()\n        if (principal != null) {\n            call.sessions.set(OAuthSession(principal.accessToken))\n            val redirect = call.request.queryParameters[\"redirectUrl\"]?.let {\n                when {\n                    it.isBlank() -> null\n                    else -> it\n                }\n            }\n            call.respondRedirect(redirect ?: \"/home\")\n        } else {\n            call.respondRedirect(\"/home\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ContentNegotiation Plugin with JSON Serializer (Kotlin)\nDESCRIPTION: Demonstrates how to install the ContentNegotiation plugin and configure a JSON serializer using kotlinx.serialization in a Ktor server application. It also shows how to customize JSON serialization settings.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-serialization.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.plugins.contentnegotiation.*\nimport io.ktor.serialization.kotlinx.json.*\n\ninstall(ContentNegotiation) {\n    json()\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(ContentNegotiation) {\n    json(Json {\n        prettyPrint = true\n        isLenient = true\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a JSON POST Endpoint with Assertions\nDESCRIPTION: Complete example of testing a JSON POST endpoint. It configures a client with ContentNegotiation, makes a request with a JSON body, and asserts the response status and content.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-testing.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ntestApplication {\n    val client = createClient {\n        install(ContentNegotiation) {\n            json()\n        }\n    }\n\n    val response = client.post(\"/customer\") {\n        contentType(ContentType.Application.Json)\n        setBody(Customer(\"123\", \"Jet\", \"Brains\"))\n    }\n\n    assertEquals(HttpStatusCode.Created, response.status)\n    assertEquals(\"Customer stored correctly\", response.bodyAsText())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ktor HTTP Client with CIO Engine in Kotlin\nDESCRIPTION: Instantiates a Ktor HTTP client using the CIO (Coroutine-based I/O) engine. This is one way to explicitly specify which engine implementation to use.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-and-configure.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO)\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Route Handlers in Kotlin Ktor\nDESCRIPTION: These snippets demonstrate two approaches to defining multiple route handlers in Ktor: grouping by HTTP verbs and grouping by paths. Both methods show how to organize routes for customer and order endpoints.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-routing.md#2025-04-09_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nrouting {\n    get(\"/customer/{id}\") {\n\n    }\n    post(\"/customer\") {\n\n    }\n    get(\"/order\") {\n\n    }\n    get(\"/order/{id}\") {\n    \n    }\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nrouting {\n    route(\"/customer\") {\n        get {\n\n        }\n        post {\n\n        }\n    }\n    route(\"/order\") {\n        get {\n\n        }\n        get(\"/{id}\") {\n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ktor Server with embeddedServer\nDESCRIPTION: Example showing how to create a Ktor server using embeddedServer with Netty engine listening on port 8080\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-engines.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello World!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Logging Plugin in Ktor Client\nDESCRIPTION: Shows how to install the Logging plugin in a Ktor client configuration block. This adds logging capability to the client for debugging and monitoring.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-plugins.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient {\n    install(Logging)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters in Kotlin Ktor\nDESCRIPTION: This snippet demonstrates how to access path parameters in a Ktor route handler. It shows a route with a 'login' parameter and how to retrieve its value using call.parameters.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-routing.md#2025-04-09_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nget(\"/user/{login}\") {\n    val login = call.parameters[\"login\"]\n    call.respondText(\"Hello, $login!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Transformation Benchmark Plugin in Kotlin\nDESCRIPTION: This plugin demonstrates how to use call attributes to measure and log the time taken between receiving a request and reading its body. It stores the timestamp when the request is received and calculates the delay when the body is read.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval DataTransformationBenchmarkPlugin = createApplicationPlugin(name = \"DataTransformationBenchmarkPlugin\") {\n    // This plugin will intercept all calls and measure the time to obtain the request body\n    onCall { call ->\n        // Store the timestamp when the request is received\n        call.attributes.put(StartTimeKey, System.currentTimeMillis())\n    }\n\n    onCallReceive { call ->\n        // Calculate and log the delay when the request body is read\n        val delay = System.currentTimeMillis() - call.attributes[StartTimeKey]\n        call.application.log.info(\"Read body delay (ms): $delay\")\n    }\n}\n\nprivate val StartTimeKey = AttributeKey<Long>(\"StartTimeKey\")\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Basic Authentication in Ktor\nDESCRIPTION: This snippet demonstrates how to protect specific routes using basic authentication in a Ktor application. It uses the authenticate() function with a named provider to secure the /login and /orders routes.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-auth.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nrouting {\n    authenticate(\"auth-basic\") {\n        get(\"/login\") {\n            // ...\n        }    \n        get(\"/orders\") {\n            // ...\n        }    \n    }\n    get(\"/\") {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Metrics for Micrometer in Ktor\nDESCRIPTION: Shows how to customize the list of JVM and system metrics exposed by the MicrometerMetrics plugin. This example adds various JVM-related meter binders to monitor system resources and JVM performance.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-metrics-micrometer.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(MicrometerMetrics) {\n    registry = appMicrometerRegistry\n    meterBinders = listOf(\n        JvmMemoryMetrics(),\n        JvmGcMetrics(),\n        ProcessorMetrics()\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Header Plugin in Kotlin\nDESCRIPTION: This example demonstrates a complete implementation of a plugin that appends a custom header to each response. It includes configuration options for the header name and value.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins-base-api.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CustomHeader {\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {\n        override val key = AttributeKey<CustomHeader>(\"CustomHeader\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): CustomHeader {\n            val configuration = Configuration().apply(configure)\n            val name = configuration.name\n            val value = configuration.value\n            val plugin = CustomHeader()\n            pipeline.intercept(ApplicationCallPipeline.Plugins) {\n                call.response.header(name, value)\n            }\n            return plugin\n        }\n    }\n    class Configuration {\n        var name = \"X-Custom-Header\"\n        var value = \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Routes in Ktor\nDESCRIPTION: Demonstrates how to create nested routes in Ktor by using the route function to define hierarchical endpoints. Shows handling GET and POST requests for /order/shipment path.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-routing.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nrouting {\n    route(\"/order\") {\n        route(\"/shipment\") {\n            get {\n                \n            }\n            post {\n                \n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expressions in Ktor Routes\nDESCRIPTION: This snippet shows how to use regular expressions in Ktor route definitions. It includes an example of matching any path ending with '/hello' and demonstrates accessing named groups from the regex.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-routing.md#2025-04-09_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.ktor.server.routing.*\nimport io.ktor.server.response.*\n\nrouting {\n    get(Regex(\".+/hello\")) {\n        call.respondText(\"Hello\")\n    }\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.ktor.server.routing.*\nimport io.ktor.server.response.*\n\nrouting {\n    get(Regex(\"\"\"(?<id>\\d+)/hello\"\"\")) {\n        val id = call.parameters[\"id\"]!!\n        call.respondText(id)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Plugin in Ktor HTTP Client with Advanced Options in Kotlin\nDESCRIPTION: Demonstrates advanced configuration of the Logging plugin for Ktor HTTP client, including setting the logger, logging level, and filtering conditions for log messages.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-and-configure.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient {\n    install(Logging) {\n        logger = Logger.DEFAULT\n        level = LogLevel.HEADERS\n        filter { request ->\n            request.url.host.contains(\"ktor.io\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Content Type in Ktor\nDESCRIPTION: Shows how to manually specify content type when sending a response\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-responses.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/\") {\n    call.respondText(\"Hello, world!\", ContentType.Text.Plain, HttpStatusCode.OK)\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Basic Authentication in Ktor\nDESCRIPTION: This snippet demonstrates how to protect specific routes using basic authentication in a Ktor application. It uses the authenticate() function with a named provider to secure the /login and /orders routes.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-auth.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nrouting {\n    authenticate(\"auth-basic\") {\n        get(\"/login\") {\n            // ...\n        }    \n        get(\"/orders\") {\n            // ...\n        }    \n    }\n    get(\"/\") {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpSend Plugin for Request Retries in Ktor\nDESCRIPTION: Demonstrates how to configure the HttpSend plugin to intercept HTTP requests and implement retry logic. The example shows how to monitor response status codes and retry requests when server returns error responses (4xx or 5xx status codes).\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-http-send.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    plugin(HttpSend) {\n        maxSendCount = 2\n        intercept { request, pipeline ->\n            val response = pipeline.execute(request)\n            when (response.status.value) {\n                in 400..499 -> throw PrintError(response)\n                else -> response\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing RateLimit Plugin with Global Configuration in Ktor\nDESCRIPTION: Example of installing the RateLimit plugin with a global rate limiter configuration that limits requests to 5 per 60 seconds for the entire application.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-rate-limit.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(RateLimit) {\n    global {\n        rateLimiter(limit = 5, refillPeriod = 60.seconds)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Serializers in ContentNegotiation (Kotlin)\nDESCRIPTION: Demonstrates how to register custom serializers for specific content types in the ContentNegotiation plugin.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-serialization.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(ContentNegotiation) {\n    register(ContentType.Application.Json, CustomJsonConverter())\n    register(ContentType.Application.Xml, CustomXmlConverter())\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Session Content in Ktor\nDESCRIPTION: This snippet demonstrates how to retrieve session content using the call.sessions.get method. It retrieves the UserSession data and responds with the user's name.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-sessions.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/get-session\") {\n    val userSession = call.sessions.get<UserSession>()\n    call.respondText(userSession?.name ?: \"No session\")\n}\n```\n\n----------------------------------------\n\nTITLE: Data Transformation with Ktor Client Plugin in Kotlin\nDESCRIPTION: Demonstrates how to transform request and response bodies using the transformRequestBody and transformResponseBody hooks. This plugin allows modifying data before sending requests and after receiving responses.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-custom-plugins.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificate in Kotlin for Ktor Server\nDESCRIPTION: This snippet demonstrates how to generate a self-signed certificate programmatically using Ktor's buildKeyStore function and save it to a keystore file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-ssl.md#2025-04-09_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nval keyStoreFile = File(\"build/temporary.jks\")\nval keyStore = buildKeyStore {\n    certificate(\"sampleAlias\") {\n        password = \"foobar\"\n        domains = listOf(\"127.0.0.1\", \"0.0.0.0\", \"localhost\")\n    }\n}\nkeyStore.saveToFile(keyStoreFile, \"123456\")\n```\n\n----------------------------------------\n\nTITLE: Handling Calls in Custom Plugin by Intercepting Pipeline in Kotlin\nDESCRIPTION: This snippet demonstrates how to handle calls in a custom plugin by intercepting the ApplicationCallPipeline.Plugins phase. It shows how to append a custom header to each response.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins-base-api.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CustomHeader() {\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {\n        override val key = AttributeKey<CustomHeader>(\"CustomHeader\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): CustomHeader {\n            val plugin = CustomHeader()\n            pipeline.intercept(ApplicationCallPipeline.Plugins) {\n                call.response.header(\"X-Custom-Header\", \"Hello, world!\")\n            }\n            return plugin\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cookies to Ktor Client Request\nDESCRIPTION: This snippet demonstrates how to add cookies to a Ktor client request using the cookie function.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-requests.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval response: HttpResponse = client.get(\"https://ktor.io/\") {\n    cookie(\"yummy_cookie\", \"choco\")\n    cookie(\"tasty_cookie\", \"strawberry\")\n    cookie(\n        name = \"signed_cookie\",\n        value = \"my-secret\",\n        expires = GMTDate().plus(1, DateTimeUnit.DAY),\n        domain = \"ktor.io\",\n        path = \"/\"\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers in Ktor\nDESCRIPTION: Demonstrates different ways to set response headers including standard and custom headers\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-responses.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/\") {\n    call.response.headers.append(HttpHeaders.ETag, \"7c876b7e\")\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/\") {\n    call.response.header(HttpHeaders.ETag, \"7c876b7e\")\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/\") {\n    call.response.etag(\"7c876b7e\")\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/\") {\n    call.response.header(\"Custom-Header\", \"Some value\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SharedFlow for WebSocket Broadcasting in Ktor\nDESCRIPTION: This snippet defines a SharedFlow for broadcasting messages in a WebSocket implementation. It's used to efficiently manage multiple WebSocket sessions and handle broadcasting.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websockets.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval broadcaster = MutableSharedFlow<String>()\nval messages = mutableListOf<String>()\n```\n\n----------------------------------------\n\nTITLE: Installing Global Plugins in Ktor Server\nDESCRIPTION: Demonstrates how to install plugins globally in a Ktor server using embeddedServer. Shows installation of CORS and Compression plugins.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-plugins.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.cors.*\nimport io.ktor.server.plugins.compression.*\n// ...\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(CORS)\n        install(Compression)\n        // ...\n    }.start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Binary Data in Ktor Client\nDESCRIPTION: Demonstrates how to send binary data using ByteReadChannel with application/octet-stream content type. This example uses the File.readChannel function to stream file content in the request body.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-requests.md#2025-04-09_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = client.post(\"http://localhost:8080/upload\") {\n    setBody(File(\"ktor_logo.png\").readChannel())\n    header(HttpHeaders.ContentType, ContentType.Application.OctetStream)\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin to Specific Route\nDESCRIPTION: Demonstrates how to install a plugin (CachingHeaders) to a specific route rather than globally.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-plugins.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n```\n```\n\n----------------------------------------\n\nTITLE: Signing and Encrypting Session Data in Ktor\nDESCRIPTION: This snippet demonstrates how to sign and encrypt session data using SessionTransportTransformerEncrypt. It includes setting up encryption keys and configuring the session cookie.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-sessions.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Sessions) {\n    cookie<UserSession>(\"user_session\") {\n        cookie.path = \"/\"\n        cookie.maxAgeInSeconds = 60\n        transform(SessionTransportTransformerEncrypt(\n            encryptionKey = hex(\"00112233445566778899aabbccddeeff\"),\n            signKey = hex(\"6819b57a326945c1968f45236589\"),\n            // backwardCompatibleRead = true // for migration\n        ))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Serialized Data via WebSockets in Ktor Client\nDESCRIPTION: This snippet demonstrates how to send a serialized class instance within a text frame using the sendSerialized function in Ktor Client WebSockets.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-websocket-serialization.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nsession.sendSerialized(Customer(id = 1))\nsession.sendSerialized(Customer(id = 2))\nsession.sendSerialized(Customer(id = 3))\n```\n\n----------------------------------------\n\nTITLE: Authentication Plugin for Ktor Client in Kotlin\nDESCRIPTION: Creates a custom Ktor client plugin for handling authentication. This plugin uses the on(Send) hook to add a bearer token to the Authorization header when unauthorized responses are received.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-custom-plugins.md#2025-04-09_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSockets Plugin in Ktor Server\nDESCRIPTION: This snippet demonstrates how to configure the WebSockets plugin in a Ktor server application. It sets various options such as ping period, timeout, maximum frame size, masking, and content converter.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websockets.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(WebSockets) {\n    pingPeriod = Duration.ofSeconds(15)\n    timeout = Duration.ofSeconds(15)\n    maxFrameSize = Long.MAX_VALUE\n    masking = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Settings in HOCON Format\nDESCRIPTION: This configuration file snippet in HOCON format defines settings for a custom header plugin. It specifies the header name and value that will be used by the plugin when installed.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nktor {\n    application {\n        modules = [ com.example.ApplicationKt.module ]\n    }\n\n    http {\n        custom_header {\n            name = \"X-Engine-Version\"\n            value = \"Ktor/2.0.1\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving HttpResponse for GET Request in Ktor\nDESCRIPTION: This snippet demonstrates how to receive an HttpResponse object for a GET request without parameters using the Ktor client.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-responses.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval response: HttpResponse = client.get(\"https://ktor.io/\")\n```\n\n----------------------------------------\n\nTITLE: Generating Basic HTML Response in Ktor\nDESCRIPTION: Example of using HTML DSL to generate and respond with a simple HTML page including a title and heading.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-html-dsl.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.html.*\nimport io.ktor.server.routing.*\nimport kotlinx.html.*\n\n// ...\n\nfun Application.module() {\n    routing {\n        get(\"/\") {\n            call.respondHtml {\n                head {\n                    title { +\"Ktor\" }\n                }\n                body {\n                    h1 {\n                        +\"Hello from Ktor!\"\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Authenticated User Information in Ktor Route\nDESCRIPTION: Route implementation that retrieves the OAuth token from the session and uses it to get user information from the Google API. Shows how to handle the authenticated state.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-oauth.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/home\") {\n    val session = call.sessions.get<OAuthSession>()\n    if (session != null) {\n        val userInfo = getPersonalGreeting(httpClient, session.token)\n        call.respondText(userInfo, ContentType.Application.Json)\n    } else {\n        call.respondText(\"<a href='/login'>Login</a>\", ContentType.Text.Html)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Basic Ktor Application\nDESCRIPTION: Example showing how to test a simple Ktor application that responds to GET requests at the root path. The test configures the application module and verifies the response body and status code.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-testing.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\nimport io.ktor.server.testing.*\nimport kotlin.test.*\n\nclass EngineMainTest {\n    @Test\n    fun testRoot() = testApplication {\n        application {\n            // This adds the main module to the test application\n            modules(com.example.ApplicationKt::module)\n        }\n        val response = client.get(\"/\")\n        assertEquals(HttpStatusCode.OK, response.status)\n        assertEquals(\"Hello, world!\", response.bodyAsText())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Route Extension Functions in Ktor\nDESCRIPTION: Shows how to organize routes using extension functions on the Route type to improve code maintainability. Demonstrates separating route handlers into individual extension functions.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-routing.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nrouting {\n    listOrdersRoute()\n    getOrderRoute()\n    totalizeOrderRoute()\n}\n\nfun Route.listOrdersRoute() {\n    get(\"/order\") {\n\n    }\n}\n\nfun Route.getOrderRoute() {\n    get(\"/order/{id}\") {\n        \n    }\n}\n\nfun Route.totalizeOrderRoute() {\n    get(\"/order/{id}/total\") {\n        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Bearer Tokens in Ktor Client\nDESCRIPTION: Shows how to implement token refresh functionality when the original token expires.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-bearer-auth.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Auth) {\n    bearer {\n        // Load tokens ...\n        refreshTokens { // this: RefreshTokensParams\n            // Refresh tokens and return them as the 'BearerTokens' instance\n            BearerTokens(\"def456\", \"xyz111\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Raw Response Body as String in Ktor\nDESCRIPTION: This snippet demonstrates how to receive the raw response body as a String using the Ktor client.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-responses.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval response: HttpResponse = client.get(\"https://ktor.io/\")\nval responseBody: String = response.body()\n```\n\n----------------------------------------\n\nTITLE: Complete Rate Limiting Implementation in Ktor\nDESCRIPTION: Full example of implementing rate limiting in a Ktor application with StatusPages for handling rate limit errors, demonstrating both global and route-specific rate limiting with custom request keys.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-rate-limit.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example\n\nimport io.ktor.http.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.ratelimit.*\nimport io.ktor.server.plugins.statuspages.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport kotlin.time.Duration.Companion.seconds\n\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n\nfun Application.module() {\n    install(RateLimit) {\n        register {\n            rateLimiter(limit = 30, refillPeriod = 60.seconds)\n        }\n        \n        // To enable rate limiting for this rate limiter, see \"Define rate limiting scope\" section\n        register {\n            rateLimiter(limit = 30, refillPeriod = 60.seconds)\n            requestKey { call ->\n                call.request.queryParameters[\"login\"]?.let { KeyWithWeight(it) } ?: DefaultKeyWithWeight\n            }\n            requestWeight { key ->\n                when (key) {\n                    is KeyWithWeight -> if (key.user == \"vip\") 1 else 3\n                    else -> 1\n                }\n            }\n        }\n\n        register(RateLimitName(\"protected\")) {\n            rateLimiter(limit = 10, refillPeriod = 60.seconds)\n        }\n    }\n\n    install(StatusPages) {\n        status(HttpStatusCode.TooManyRequests) { call, _ ->\n            val retryAfter = call.response.headers[\"Retry-After\"]\n            call.respondText(text = \"Rate limit exceeded. Wait $retryAfter seconds.\", status = HttpStatusCode.TooManyRequests)\n        }\n    }\n\n    routing {\n        get(\"/\") {\n            call.respondText(\"Public route\")\n        }\n        \n        rateLimit {\n            get(\"/protected\") {\n                call.respondText(\"Protected route\")\n            }\n        }\n\n        rateLimit(RateLimitName(\"protected\")) {\n            get(\"/protected-by-name\") {\n                call.respondText(\"Protected by name route\")\n            }\n        }\n    }\n}\n\nprivate class KeyWithWeight(val user: String) {\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is KeyWithWeight) return false\n        return user == other.user\n    }\n\n    override fun hashCode(): Int {\n        return user.hashCode()\n    }\n}\n\nprivate object DefaultKeyWithWeight\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ContentConverter Interface (Kotlin)\nDESCRIPTION: This code snippet shows the ContentConverter interface definition for implementing custom serializers in Ktor. It includes methods for serializing and deserializing data.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-serialization.md#2025-04-09_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface ContentConverter {\n    suspend fun serialize(contentType: ContentType, charset: Charset, typeInfo: TypeInfo, value: Any): OutgoingContent?\n    suspend fun deserialize(charset: Charset, typeInfo: TypeInfo, content: ByteReadChannel): Any?\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Logging Plugin in Kotlin\nDESCRIPTION: This example shows a complete implementation of a custom plugin for logging incoming requests. It intercepts the Monitoring phase to log request details.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins-base-api.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass RequestLogging {\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, RequestLogging> {\n        override val key = AttributeKey<RequestLogging>(\"RequestLogging\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): RequestLogging {\n            val plugin = RequestLogging()\n            val configuration = Configuration().apply(configure)\n            pipeline.intercept(ApplicationCallPipeline.Monitoring) {\n                println(\"${configuration.prefix} Request: ${call.request.httpMethod.value} ${call.request.uri}\")\n            }\n            return plugin\n        }\n    }\n    class Configuration {\n        var prefix: String = \"LOG:\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Principal in Ktor Session Authentication\nDESCRIPTION: This code snippet shows how to retrieve a custom principal (UserSession) in a Ktor application using session authentication. It demonstrates the use of call.principal() with a specific data class.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-auth.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/hello\") {\n    val userSession = call.principal<UserSession>()\n    call.respondText(\"Hello, ${userSession?.name}!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Environment for Tests\nDESCRIPTION: Example showing how to use MapApplicationConfig to provide custom configuration properties for tests. This allows setting up test-specific configuration values before the application starts.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-testing.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ntestApplication {\n    environment {\n        config = MapApplicationConfig(\"ktor.deployment.port\" to \"8080\")\n    }\n    // Make test request\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing JSON Response in Ktor Client\nDESCRIPTION: This snippet shows how to deserialize a JSON response into a data class using the ContentNegotiation plugin in Ktor client.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-responses.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval customers: List<Customer> = client.get(\"https://example.com/customers\").body()\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Authentication Strategies in Ktor\nDESCRIPTION: This code snippet shows how to implement nested authentication strategies in Ktor. It combines session authentication with basic authentication, requiring both for accessing the /admin route.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-auth.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nrouting {\n    authenticate(\"auth-session\", strategy = AuthenticationStrategy.Required) {\n        get(\"/hello\") {\n            // ...\n        }    \n        authenticate(\"auth-basic\", strategy = AuthenticationStrategy.Required) {\n            get(\"/admin\") {\n                // ...\n            }\n        }  \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Article Resources for CRUD Operations\nDESCRIPTION: Example of defining a resource class hierarchy for articles with nested resources for specific CRUD operations. The class uses @Resource annotations to map to specific URL paths.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-resources.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Resource(\"/articles\")\nclass Articles {\n    @Resource(\"new\")\n    class New(val parent: Articles = Articles())\n\n    @Resource(\"{id}\")\n    class Id(val parent: Articles = Articles(), val id: Long) {\n        @Resource(\"edit\")\n        class Edit(val parent: Id)\n\n        @Resource(\"delete\")\n        class Delete(val parent: Id)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Header Plugin Class with Companion Object in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a custom plugin class with a companion object that implements the BaseApplicationPlugin interface. It includes the basic structure for the plugin class.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins-base-api.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CustomHeader() {\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Data Objects in Ktor Response (Kotlin)\nDESCRIPTION: This snippet demonstrates how to send a data object in a Ktor response using the respond method. It shows returning a list of customers as the response body.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-serialization.md#2025-04-09_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/customer\") {\n    if (customerStorage.isNotEmpty()) {\n        call.respond(customerStorage)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ProtoBuf Serializer for WebSockets in Ktor Server\nDESCRIPTION: This snippet illustrates how to configure the ProtoBuf serializer for WebSockets. It creates a KotlinxWebsocketSerializationConverter instance with the ProtoBuf parameter and assigns it to the contentConverter property.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-serialization.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.serialization.protobuf.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(ProtoBuf)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Routing Plugin in Kotlin Ktor\nDESCRIPTION: This snippet demonstrates how to install the Routing plugin in a Ktor server application. It shows both the standard installation method and the convenient 'routing' function approach.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-routing.md#2025-04-09_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.ktor.server.routing.*\n\ninstall(RoutingRoot) {\n    // ...\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.ktor.server.routing.*\n\nrouting {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Index File for Static Resources in Ktor\nDESCRIPTION: This code demonstrates how to set a custom index file for static resources in Ktor using the 'index' parameter. It serves 'custom_index.html' when '/custom' is requested.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-static-content.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nstaticResources(\"/custom\", \"static\", index = \"custom_index.html\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Wrapper Class in Kotlin\nDESCRIPTION: Demonstrates how to create an ApiClient wrapper class that takes an engine as a constructor parameter and contains shared client configuration including JSON serialization.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-testing.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ApiClient(private val engine: HttpClientEngine) {\n    private val client = HttpClient(engine) {\n        install(ContentNegotiation) {\n            json()\n        }\n    }\n\n    suspend fun getUsers(): List<User> {\n        return client.get(\"https://example.org/users\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Exceptions in Ktor StatusPages\nDESCRIPTION: Shows how to configure specific exception handlers for AuthenticationException and AuthorizationException with custom responses.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-status-pages.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(StatusPages) {\n    exception<AuthenticationException> { call, cause ->\n        call.respondText(text = \"403: $cause\" , status = HttpStatusCode.Forbidden)\n    }\n    exception<AuthorizationException> { call, cause ->\n        call.respondText(text = \"401: $cause\" , status = HttpStatusCode.Unauthorized)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Modules from Configuration in Test Application\nDESCRIPTION: Example showing how to load modules from a configuration file in a test application. This approach is useful when testing applications that use configuration-based module loading.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-testing.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ntestApplication {\n    environment {\n        config = MapApplicationConfig(\"oauth.mockLocation\" to \"http://localhost\")\n    }\n    // Test code\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logger with Napier in Ktor Client (Kotlin)\nDESCRIPTION: This snippet demonstrates how to implement a custom logger using the Napier library in a Ktor client application. It overrides the log function to use Napier for logging HTTP calls.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-logging.md#2025-04-09_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun main() {\n    Napier.base(DebugAntilog())\n    val client = HttpClient(CIO) {\n        install(Logging) {\n            logger = object : Logger {\n                override fun log(message: String) {\n                    Napier.v(tag = \"HTTP Client\", message = message)\n                }\n            }\n            level = LogLevel.BODY\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Ktor Plugin\nDESCRIPTION: Demonstrates creating a basic Ktor plugin using createApplicationPlugin function that logs a message when installed.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval SimplePlugin = createApplicationPlugin(name = \"SimplePlugin\") {\n    onCall {\n        println(\"SimplePlugin is installed!\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Form Authentication in Ktor Server\nDESCRIPTION: Code showing how to install the form authentication provider in a Ktor server application using the Authentication plugin.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-form-based-auth.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n// ...\ninstall(Authentication) {\n    form {\n        // Configure form authentication\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Route-Specific Plugin Installation Example\nDESCRIPTION: Shows how multiple installations of the same plugin on different routes are handled, with the last installation taking precedence.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-plugins.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nrouting {\n    route(\"index\") {\n        install(CachingHeaders) { /* First configuration */ }\n        get(\"a\") {\n            // ...\n        }\n    }\n    route(\"index\") {\n        install(CachingHeaders) { /* Second configuration */ }\n        get(\"b\") {\n            // ...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DAO Operations with Exposed DSL\nDESCRIPTION: Provides concrete implementations for the DAO interface using Exposed SQL DSL to perform database operations.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/db-persistence.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.dao\n\nimport com.example.dao.DatabaseSingleton.dbQuery\nimport com.example.models.Article\nimport com.example.models.Articles\nimport org.jetbrains.exposed.sql.*\nimport org.jetbrains.exposed.sql.SqlExpressionBuilder.eq\n\nclass DAOFacadeImpl : DAOFacade {\n    private fun resultRowToArticle(row: ResultRow) = Article(\n        id = row[Articles.id],\n        title = row[Articles.title],\n        body = row[Articles.body],\n    )\n\n    override suspend fun allArticles(): List<Article> = dbQuery {\n        Articles.selectAll().map(::resultRowToArticle)\n    }\n\n    override suspend fun article(id: Int): Article? = dbQuery {\n        Articles\n            .select { Articles.id eq id }\n            .map(::resultRowToArticle)\n            .singleOrNull()\n    }\n\n    override suspend fun addNewArticle(title: String, body: String): Article? = dbQuery {\n        val insertStatement = Articles.insert {\n            it[Articles.title] = title\n            it[Articles.body] = body\n        }\n        insertStatement.resultedValues?.singleOrNull()?.let(::resultRowToArticle)\n    }\n\n    override suspend fun editArticle(id: Int, title: String, body: String): Boolean = dbQuery {\n        Articles.update({ Articles.id eq id }) {\n            it[Articles.title] = title\n            it[Articles.body] = body\n        } > 0\n    }\n\n    override suspend fun deleteArticle(id: Int): Boolean = dbQuery {\n        Articles.deleteWhere { Articles.id eq id } > 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Ktor Application Implementation\nDESCRIPTION: Implementation of a simple Ktor application that responds with 'Hello, world!' to GET requests at the root path. It demonstrates the basic setup of a Ktor server application with routing.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-testing.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example\n\nimport io.ktor.server.application.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080, host = \"0.0.0.0\") {\n        module()\n    }.start(wait = true)\n}\n\nfun Application.module() {\n    routing {\n        get(\"/\") {\n            call.respondText(\"Hello, world!\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Logger in Ktor Application Module\nDESCRIPTION: This Kotlin code demonstrates how to access and use the Logger instance inside a Ktor application module. It shows logging a message at the INFO level.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-logging.md#2025-04-09_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.ktor.server.application.*\n\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n\nfun Application.module() {\n    log.info(\"Application module loaded\")\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Routes in Ktor\nDESCRIPTION: Example of route functions for customer endpoints in a separate file. This demonstrates grouping related routes in a single file approach.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-application-structure.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Route.customerByIdRoute() {\n    get(\"/customer/{id}\") {\n\n    }\n}\n\nfun Route.createCustomerRoute() {\n    post(\"/customer\") {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL in Ktor Using embeddedServer\nDESCRIPTION: This Kotlin code snippet shows how to configure SSL programmatically when using the embeddedServer function in Ktor.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-ssl.md#2025-04-09_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun main() {\n    val environment = applicationEngineEnvironment {\n        sslConnector(\n            keyStore = keyStore,\n            keyAlias = \"sampleAlias\",\n            keyStorePassword = { \"123456\".toCharArray() },\n            privateKeyPassword = { \"123456\".toCharArray() }\n        ) {\n            port = 8443\n            keyStorePath = keyStoreFile.absoluteFile\n        }\n        module(Application::module)\n    }\n    embeddedServer(Netty, environment).start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Greeting Class with Ktor Client\nDESCRIPTION: Implements a shared Greeting class that creates a Ktor HTTP client and provides a suspending function to make a network request. This code is shared between Android and iOS platforms.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-multiplatform-application.md#2025-04-09_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\npackage com.example.kmmktor\n\nimport io.ktor.client.*\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\n\nclass Greeting {\n    private val client = HttpClient()\n\n    @Throws(Exception::class)\n    suspend fun greeting(): String {\n        val response = client.get(\"https://ktor.io/\")\n        return response.bodyAsText()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Exception Handler in Ktor StatusPages\nDESCRIPTION: Demonstrates how to set up a basic exception handler that returns a 500 Internal Server Error response for any Throwable exception.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-status-pages.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(StatusPages) {\n    exception<Throwable> { call, cause ->\n        call.respondText(text = \"500: $cause\" , status = HttpStatusCode.InternalServerError)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HTTPS Endpoints in Ktor\nDESCRIPTION: Demonstrates how to test an HTTPS endpoint by changing the protocol used to make a request using URLBuilder.protocol property.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-testing.md#2025-04-09_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ApplicationTest {\n    @Test\n    fun testRoot() = testApplication {\n        val response = client.get(\"/\") {\n            url {\n                protocol = URLProtocol.HTTPS\n                port = 8443\n            }\n        }\n        assertEquals(HttpStatusCode.OK, response.status)\n        assertEquals(\"Hello, world!\", response.bodyAsText())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Client with Default Engine in Kotlin\nDESCRIPTION: Creates a Ktor HTTP client using the default engine, which is automatically selected based on the dependencies added to the project. This is useful for multiplatform projects targeting different platforms.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-engines.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient()\n```\n\n----------------------------------------\n\nTITLE: Handling Single WebSocket Session in Ktor Server\nDESCRIPTION: This example shows how to create an 'echo' WebSocket endpoint to handle a session with a single client. It demonstrates receiving messages, logging them, and sending them back to the client.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websockets.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwebSocket(\"/echo\") {\n    send(\"You are connected!\")\n    for (frame in incoming) {\n        frame as? Frame.Text ?: continue\n        val receivedText = frame.readText()\n        println(\"Received: $receivedText\")\n        send(\"You said: $receivedText\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ktor JWT Dependencies\nDESCRIPTION: Required dependencies for enabling JWT authentication in a Ktor server application.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-jwt.md#2025-04-09_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\nimplementation(\"io.ktor:ktor-server-auth-jwt:$ktor_version\")\n```\n\nLANGUAGE: Groovy\nCODE:\n```\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\nimplementation \"io.ktor:ktor-server-auth-jwt:$ktor_version\"\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n<groupId>io.ktor</groupId>\n<artifactId>ktor-server-auth-jvm</artifactId>\n<version>${ktor_version}</version>\n</dependency>\n<dependency>\n<groupId>io.ktor</groupId>\n<artifactId>ktor-server-auth-jwt-jvm</artifactId>\n<version>${ktor_version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Basic CORS Plugin Configuration in Ktor\nDESCRIPTION: Shows how to configure the CORS plugin in a Ktor application to allow cross-origin requests from any host.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-cors.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CORS) {\n    anyHost()\n}\n```\n\n----------------------------------------\n\nTITLE: Measuring Response Time with Ktor Client Plugin in Kotlin\nDESCRIPTION: Creates a custom Ktor client plugin that measures the time between sending a request and receiving a response. This plugin helps monitor performance of HTTP requests.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-custom-plugins.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL for OkHttp Engine in Ktor Client\nDESCRIPTION: This code configures SSL for the OkHttp engine by passing both SSLSocketFactory and X509TrustManager to the sslSocketFactory function.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-ssl.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval okHttpClient = HttpClient(OkHttp) {\n    engine {\n        config {\n            sslSocketFactory(sslSettings.sslSocketFactory, sslSettings.trustManager)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Raw Request Payload as ByteArray\nDESCRIPTION: Shows how to receive request payload as a ByteArray using call.receive<ByteArray>().\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-requests.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\npost(\"/\") {\n    val byteArray = call.receive<ByteArray>()\n    val text = String(byteArray)\n    call.respondText(\"Request body: $text\")\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Ktor Client Socket Example\nDESCRIPTION: This comprehensive example demonstrates a complete client-side socket implementation in Ktor, including creating a socket, sending and receiving data, and closing the connection.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-sockets.md#2025-04-09_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.network.selector.*\nimport io.ktor.network.sockets.*\nimport io.ktor.utils.io.*\nimport kotlinx.coroutines.*\n\nfun main() {\n    runBlocking {\n        val selectorManager = SelectorManager(Dispatchers.IO)\n        val socket = aSocket(selectorManager).tcp().connect(\"127.0.0.1\", 9002)\n        println(\"Connected to ${socket.remoteAddress}\")\n\n        val input = socket.openReadChannel()\n        val output = socket.openWriteChannel(autoFlush = true)\n\n        launch(Dispatchers.IO) {\n            while (true) {\n                val line = input.readUTF8Line()\n                println(line)\n            }\n        }\n\n        for (i in 1..3) {\n            output.writeStringUtf8(\"Hello $i\\n\")\n        }\n\n        socket.close()\n        selectorManager.close()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom 2xx Response Validation in Ktor Client (Kotlin)\nDESCRIPTION: This example shows how to add custom validation for 2xx responses using the HttpCallValidator plugin. It demonstrates raising a CustomResponseException for a 2xx response with error details in JSON format.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-response-validation.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        json()\n    }\n    HttpResponseValidator {\n        validateResponse { response ->\n            val error = response.body<ErrorResponse>()\n            if (error.status == \"error\") {\n                throw CustomResponseException(error.message)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing JSON Data Handling in Ktor\nDESCRIPTION: Demonstrates how to test a POST request to a '/customer' endpoint that handles JSON data. It shows setting up a test client with ContentNegotiation plugin and making a request with JSON body.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-testing.md#2025-04-09_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ApplicationTest {\n    @Test\n    fun testRoot() = testApplication {\n        val client = createClient {\n            install(ContentNegotiation) {\n                json()\n            }\n        }\n        client.post(\"/customer\") {\n            contentType(ContentType.Application.Json)\n            setBody(Customer(id = \"200\", firstName = \"Jane\", lastName = \"Smith\"))\n        }.apply {\n            assertEquals(HttpStatusCode.OK, status)\n            assertEquals(\"Customer received: 200\", bodyAsText())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Responding with Thymeleaf Template\nDESCRIPTION: Route handler code showing how to respond with a Thymeleaf template and pass model data.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-thymeleaf.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/\") {\n    val user = User(\"John\")\n    call.respond(ThymeleafContent(\"index\", mapOf(\"user\" to user)))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SslSettings Class for SSL Configuration in Kotlin\nDESCRIPTION: This snippet creates an SslSettings class that loads a certificate from an existing KeyStore file and provides functions for obtaining different SSL configurations like SSLContext, TrustManager, and SSLSocketFactory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-ssl.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SslSettings(private val keyStoreFile: String, private val keyStorePassword: String) {\n    // Load the KeyStore with the self-signed certificate\n    private val keyStore = KeyStore.getInstance(KeyStore.getDefaultType()).apply {\n        val file = File(keyStoreFile)\n        file.inputStream().use { fileInput ->\n            load(fileInput, keyStorePassword.toCharArray())\n        }\n    }\n\n    // TrustManager configured to trust the self-signed certificate\n    val trustManager: X509TrustManager = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()).apply {\n        init(keyStore)\n    }.trustManagers.first() as X509TrustManager\n\n    // SSLContext configured to use the custom TrustManager\n    val sslContext = SSLContext.getInstance(\"TLS\").apply {\n        init(null, arrayOf(trustManager), SecureRandom())\n    }\n\n    // SSLSocketFactory configured with the SSLContext\n    val sslSocketFactory: SSLSocketFactory = sslContext.socketFactory\n\n    fun sslContextFactory() = SslContextFactory.Client().apply {\n        sslContext = this@SslSettings.sslContext\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Hosts for CORS in Ktor\nDESCRIPTION: Demonstrates how to specify which hosts are allowed to make cross-origin requests, including configuration for specific ports, subdomains, and HTTP schemes.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-cors.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CORS) {\n    allowHost(\"client-host\")\n    allowHost(\"client-host:8081\")\n    allowHost(\"client-host\", subDomains = listOf(\"en\", \"de\", \"es\"))\n    allowHost(\"client-host\", schemes = listOf(\"http\", \"https\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Targets for Ktor Server in Gradle\nDESCRIPTION: This code snippet shows how to configure native targets and declare a native binary for a Ktor server in the build.gradle.kts file. It sets up targets for macOS, Linux, and iOS, and configures the binary type.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-native.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    val hostOs = System.getProperty(\"os.name\")\n    val isMingwX64 = hostOs.startsWith(\"Windows\")\n    val nativeTarget = when {\n        hostOs == \"Mac OS X\" -> macosX64(\"native\")\n        hostOs == \"Linux\" -> linuxX64(\"native\")\n        isMingwX64 -> mingwX64(\"native\")\n        else -> throw GradleException(\"Host OS is not supported in Kotlin/Native.\")\n    }\n\n    nativeTarget.apply {\n        binaries {\n            executable {\n                entryPoint = \"main\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Authentication Providers with Named Providers\nDESCRIPTION: Example demonstrating how to install multiple authentication providers with unique names. Named providers can be used to authenticate different routes using different authentication mechanisms.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-auth.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Authentication) {\n    basic(\"auth-basic\") {\n        // [[[Configure basic authentication|server-basic-auth.md]]]\n    }\n    form(\"auth-form\") {\n        // [[[Configure form authentication|server-form-based-auth.md]]]\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Plain Text Response in Ktor\nDESCRIPTION: Demonstrates how to send a simple plain text response using call.respondText()\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-responses.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/\") {\n    call.respondText(\"Hello, world!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Modules in Ktor using application.conf\nDESCRIPTION: This snippet demonstrates how to configure and load multiple modules in a Ktor application using the application.conf file. It shows how to reference modules by their fully qualified names.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-modules.md#2025-04-09_snippet_4\n\nLANGUAGE: hocon\nCODE:\n```\nktor {\n    application {\n        modules = [\n            com.example.ApplicationKt.module1,\n            com.example.ApplicationKt.module2,\n            org.sample.SampleKt.module3\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Ktor Server Socket Example\nDESCRIPTION: This comprehensive example demonstrates a complete server-side socket implementation in Ktor, including creating a socket, accepting connections, and handling data transfer.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-sockets.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.network.selector.*\nimport io.ktor.network.sockets.*\nimport io.ktor.utils.io.*\nimport kotlinx.coroutines.*\n\nfun main() {\n    runBlocking {\n        val selectorManager = SelectorManager(Dispatchers.IO)\n        val serverSocket = aSocket(selectorManager).tcp().bind(\"127.0.0.1\", 9002)\n        println(\"Server is listening at ${serverSocket.localAddress}\")\n        while (true) {\n            val socket = serverSocket.accept()\n            println(\"Accepted $socket\")\n            launch {\n                val input = socket.openReadChannel()\n                val output = socket.openWriteChannel(autoFlush = true)\n                try {\n                    while (true) {\n                        val line = input.readUTF8Line()\n                        println(\"${socket.remoteAddress}: $line\")\n                        output.writeStringUtf8(\"$line\\n\")\n                    }\n                } catch (e: Throwable) {\n                    e.printStackTrace()\n                    socket.close()\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL in Ktor Application.yaml\nDESCRIPTION: This YAML configuration snippet demonstrates how to enable SSL and specify keystore settings in a Ktor application.yaml file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-ssl.md#2025-04-09_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nktor:\n  deployment:\n    sslPort: 8443\n  security:\n    ssl:\n      keyStore: keystore.jks\n      keyAlias: sampleAlias\n      keyStorePassword: 123456\n      privateKeyPassword: 123456\n```\n\n----------------------------------------\n\nTITLE: Creating a TCP Client Socket in Ktor\nDESCRIPTION: This snippet demonstrates how to create a TCP client socket using Ktor's SocketBuilder.tcp() function and establish a connection.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-sockets.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval selectorManager = SelectorManager(Dispatchers.IO)\nval socket = aSocket(selectorManager).tcp().connect(\"127.0.0.1\", 9002)\n```\n\n----------------------------------------\n\nTITLE: Processing Request Payload with ByteReadChannel\nDESCRIPTION: Illustrates receiving request payload using ByteReadChannel for asynchronous reading.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-requests.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\npost(\"/\") {\n    val channel = call.receive<ByteReadChannel>()\n    val text = channel.readUTF8Line()\n    call.respondText(\"Request body: $text\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Call ID in MDC for Logging in Ktor Server\nDESCRIPTION: Example showing how to put a call ID in the MDC context for logging with CallLogging plugin. This setup allows the call ID to appear in log messages for easier request tracing.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-call-id.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CallLogging) {\n    callIdMdc(\"call-id\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Code Handler in Ktor StatusPages\nDESCRIPTION: Shows how to handle specific HTTP status codes, specifically demonstrating a 404 Not Found response handler.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-status-pages.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(StatusPages) {\n    status(HttpStatusCode.NotFound) { call, status ->\n        call.respondText(text = \"404: Page Not Found\", status = status)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing HttpCookies Plugin in Ktor Client\nDESCRIPTION: Basic installation of the HttpCookies plugin in a Ktor client configuration block to enable automatic cookie handling between requests.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-cookies.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    install(HttpCookies)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Caching Options at Call Level in Ktor\nDESCRIPTION: This snippet shows how to use the ApplicationCall.caching property to set fine-grained caching options at the call level, setting different caching strategies based on whether a user is logged in or not.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-caching-headers.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nrouting {\n    get(\"/user\") {\n        val userLoggedIn = call.sessions.get<UserSession>() != null\n        if (userLoggedIn) {\n            call.caching = CachingOptions(CacheControl.NoCache(null))\n        } else {\n            call.caching = CachingOptions(CacheControl.MaxAge(\n                maxAgeSeconds = 3600,\n                visibility = CacheControl.Visibility.Public\n            ))\n        }\n        call.respondText(\"This will use different caching strategies depending on whether the user is logged in\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Deserialized Data via WebSockets in Ktor Client\nDESCRIPTION: This code shows how to receive and convert the content of a text frame using the receiveDeserialized function in Ktor Client WebSockets. It deserializes the data into a Customer object.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-websocket-serialization.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval customers = mutableListOf<Customer>()\nfor (i in 1..3) {\n    customers += session.receiveDeserialized<Customer>()\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Data Objects in Ktor (Kotlin)\nDESCRIPTION: This snippet shows how to receive and convert request content to a data object using the receive method. It demonstrates processing a Customer object from the request body.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-serialization.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\npost(\"/customer\") {\n    val customer = call.receive<Customer>()\n    customerStorage.add(customer)\n    call.respondText(\"Customer stored correctly\", status = HttpStatusCode.Created)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Request with Ktor Client in Kotlin\nDESCRIPTION: This snippet demonstrates how to make a basic HTTP request using the Ktor client. It shows how to use the 'request' function to configure request parameters and obtain an HttpResponse object.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-requests.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\n\nval response: HttpResponse = client.request(\"https://ktor.io/\") {\n  // Configure request parameters exposed by [[[HttpRequestBuilder|https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/-http-request-builder/index.html]]]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Authentication Realms in Ktor Client (Kotlin)\nDESCRIPTION: This snippet shows how to set up multiple basic authentication providers with different realms. This allows the client to choose the appropriate provider based on the WWW-Authenticate response header.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-auth.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Auth) {\n    basic {\n        realm = \"Access to the '/' path\"\n        // ...\n    }\n    basic {\n        realm = \"Access to the '/admin' path\"\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger UI Endpoint in Ktor\nDESCRIPTION: This snippet demonstrates how to set up a basic Swagger UI endpoint in a Ktor application by specifying the path and OpenAPI specification file location.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-swagger-ui.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.plugins.swagger.*\n\n// ...\nrouting {\n    swaggerUI(path = \"swagger\", swaggerFile = \"openapi/documentation.yaml\")\n}\n```\n\n----------------------------------------\n\nTITLE: Listing iOS Target Presets in Markdown\nDESCRIPTION: Enumerates the target presets for iOS platforms in a markdown list format, including various ARM and x64 architectures.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-platforms.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<list>\n    <li>\n        <code>iosArm32</code>\n    </li>\n    <li>\n        <code>iosArm64</code>\n    </li>\n    <li>\n        <code>iosX64</code>\n    </li>\n    <li>\n        <code>iosSimulatorArm64</code>\n    </li>\n</list>\n```\n\n----------------------------------------\n\nTITLE: Using DataConversion Service for Value Conversion\nDESCRIPTION: Example showing how to manually call the conversion service to encode and decode values using the previously defined converters.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-data-conversion.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval format = application.conversionService.toValues(LocalDate.now())\nval date = application.conversionService.fromValues(format, typeInfo<LocalDate>())\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Type Compression in Ktor\nDESCRIPTION: This snippet shows how to configure compression for specific content types. It compresses JavaScript using gzip and all text subtypes using deflate.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-compression.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Compression) {\n    gzip {\n        matchContentType(\n            ContentType.Text.JavaScript\n        )\n    }\n    deflate {\n        matchContentType(\n            ContentType.Text.Any\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HSTS Plugin with Max Age in Ktor\nDESCRIPTION: This snippet demonstrates how to configure the HSTS plugin in a Ktor application by setting the maxAgeInSeconds property. This determines how long the client should keep the host in its list of known HSTS hosts.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-hsts.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(HSTS) {\n    maxAgeInSeconds = 31536000\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Retry Conditions\nDESCRIPTION: Configuration of custom retry conditions including max retries, response status checking, exception handling, and custom delay logic.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-request-retry.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(HttpRequestRetry) {\n    maxRetries = 5\n    retryIf { request, response ->\n        !response.status.isSuccess()\n    }\n    retryOnExceptionIf { request, cause -> \n        cause is NetworkError \n    }\n    delayMillis { retry -> \n        retry * 3000L \n    } // retries in 3, 6, 9, etc. seconds\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Call Logging Level in Ktor\nDESCRIPTION: Sets up basic call logging with a specified logging level using the CallLogging plugin.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-call-logging.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CallLogging) {\n    level = Level.INFO\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Form Parameter Submission\nDESCRIPTION: Example showing how to test form parameter submission using x-www-form-urlencoded content type. The test encodes form parameters and verifies the server's response.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-testing.md#2025-04-09_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\npackage formparameters\n\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\nimport io.ktor.server.testing.*\nimport kotlin.test.Test\nimport kotlin.test.assertEquals\n\nclass ApplicationTest {\n    @Test\n    fun testPostFormParameters() = testApplication {\n        val response = client.post(\"/\") {\n            header(HttpHeaders.ContentType, ContentType.Application.FormUrlEncoded.toString())\n            setBody(listOf(\n                \"name\" to \"Ktor\",\n                \"email\" to \"example@jetbrains.com\"\n            ).formUrlEncode())\n        }\n        assertEquals(\"The server says: Ktor (example@jetbrains.com) is registered\", response.bodyAsText())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CBOR Serializer in Ktor Client\nDESCRIPTION: Example of registering the CBOR serializer in a Ktor client for CBOR serialization/deserialization.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-serialization.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.kotlinx.cbor.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        cbor()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple WebSocket Sessions with SharedFlow in Ktor\nDESCRIPTION: This example demonstrates how to handle multiple WebSocket sessions using SharedFlow. It includes logic for broadcasting messages to all connected clients and processing incoming messages.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websockets.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nwebSocket(\"/chat\") {\n    val user = call.parameters[\"user\"] ?: \"Anonymous\"\n    try {\n        send(\"You are connected! There are ${messages.size} messages.\")\n        val collectJob = launch {\n            broadcaster.collect { message ->\n                send(message)\n            }\n        }\n        for (frame in incoming) {\n            frame as? Frame.Text ?: continue\n            val receivedText = frame.readText()\n            runCatching {\n                val message = \"[$user]: $receivedText\"\n                messages.add(message)\n                broadcaster.emit(message)\n            }\n        }\n        collectJob.cancel()\n    } catch (e: Exception) {\n        println(e.localizedMessage)\n    } finally {\n        println(\"Removing $user!\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Session Content in Ktor\nDESCRIPTION: This snippet shows how to modify session content by using the copy method of the data class. It increments a counter in the UserSession.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-sessions.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/get-session\") {\n    val userSession = call.sessions.get<UserSession>()\n    if (userSession != null) {\n        val updatedSession = userSession.copy(counter = userSession.counter + 1)\n        call.sessions.set(updatedSession)\n        call.respondText(\"Counter: ${updatedSession.counter}\")\n    } else {\n        call.respondText(\"No session\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing ApiClient with MockEngine in Kotlin\nDESCRIPTION: Shows how to test the ApiClient by passing a MockEngine instance to validate that requests are properly made and responses are correctly processed.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-testing.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ApplicationTest {\n    @Test\n    fun testGetUsers() = runBlocking {\n        val mockEngine = MockEngine { request ->\n            assertEquals(\"https://example.org/users\", request.url.toString())\n            respond(\n                content = \"[{\\\"id\\\": 1, \\\"name\\\": \\\"Alice\\\"}, {\\\"id\\\": 2, \\\"name\\\": \\\"Bob\\\"}]\",\n                status = HttpStatusCode.OK,\n                headers = headersOf(HttpHeaders.ContentType, \"application/json\")\n            )\n        }\n        val client = ApiClient(mockEngine)\n        val users = client.getUsers()\n        \n        assertEquals(2, users.size)\n        assertEquals(User(1, \"Alice\"), users[0])\n        assertEquals(User(2, \"Bob\"), users[1])\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Encode Function in DataConversion Plugin\nDESCRIPTION: Code snippet showing how to implement a custom encode function for the DataConversion plugin to serialize a value into a list of strings.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-data-conversion.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nencode { value -> // converter: (value: Any?) -> List<String>\n   //serialize value\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Authentication Provider in Ktor\nDESCRIPTION: Code snippet showing how to configure a form authentication provider with custom userParamName, passwordParamName, credential validation, and challenge handling.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-form-based-auth.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Authentication) {\n    form(\"auth-form\") {\n        userParamName = \"username\"\n        passwordParamName = \"password\"\n        validate { credentials ->\n            if (credentials.name == \"jetbrains\" && credentials.password == \"foobar\") {\n                UserIdPrincipal(credentials.name)\n            } else {\n                null\n            }\n        }\n        challenge {\n            call.respondRedirect(\"/login\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Decode Function in DataConversion Plugin\nDESCRIPTION: Code snippet showing how to implement a custom decode function for the DataConversion plugin to deserialize a list of string values into a specific type.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-data-conversion.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndecode { values -> // converter: (values: List<String>) -> Any?\n  //deserialize values\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Resources Plugin in Ktor Client\nDESCRIPTION: Code example showing how to install the Resources plugin in a Ktor HTTP client configuration block. This enables type-safe requests functionality in the client.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-resources.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.resources.*\n//...\nval client = HttpClient(CIO) {\n    install(Resources)\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with JWT Authentication in Ktor\nDESCRIPTION: This snippet demonstrates how to protect specific routes using JWT authentication in Ktor. It shows how to retrieve the authenticated JWTPrincipal and access custom claims from the JWT payload.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-jwt.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nrouting {\n    authenticate(\"auth-jwt\") {\n        get(\"/hello\") {\n            val principal = call.principal<JWTPrincipal>()\n            val username = principal!!.payload.getClaim(\"username\").asString()\n            val expiresAt = principal.expiresAt?.time?.minus(System.currentTimeMillis())\n            call.respondText(\"Hello, $username! Token is expired at $expiresAt ms.\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Digest Table with MD5 Hashing in Kotlin\nDESCRIPTION: Defines a user table with HA1 parts of digest messages generated from usernames, realm, and passwords using MD5 hashing. Includes a helper function to create MD5 digests from strings.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-digest-auth.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun getMd5Digest(str: String): ByteArray = MessageDigest.getInstance(\"MD5\").digest(str.toByteArray())\n\nval myRealm = \"Access to the '/' path\"\nval userTable: Map<String, ByteArray> = mapOf(\n    // pass=jetbrains\n    \"jetbrains\" to getMd5Digest(\"jetbrains:$myRealm:jetbrains\"),\n    // pass=1234\n    \"user\" to getMd5Digest(\"user:$myRealm:1234\")\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Test-Specific Routes\nDESCRIPTION: Example showing how to add test-specific routes to a test application. This code adds a /login-test endpoint used to initialize a user session only for testing purposes.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-testing.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntestApplication {\n    routing {\n        get(\"/login-test\") {\n            call.sessions.set(UserSession(id = \"id1\", name = \"Test user\"))\n            call.respondText(\"Logged in as Test user\")\n        }\n    }\n    // Test code\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication Provider in Kotlin\nDESCRIPTION: This code snippet shows how to configure the basic authentication provider in Ktor. It sets the realm and implements a validate function to check user credentials.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-basic-auth.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Authentication) {\n    basic(name = \"auth-basic\") {\n        realm = \"Access to the '/' path\"\n        validate { credentials ->\n            if (credentials.name == \"jetbrains\" && credentials.password == \"foobar\") {\n                UserIdPrincipal(credentials.name)\n            } else {\n                null\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Logging Plugin in Ktor Client (Kotlin)\nDESCRIPTION: This snippet demonstrates how to install the Logging plugin in a Ktor client configuration block. It uses the CIO engine and installs the Logging plugin.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-logging.md#2025-04-09_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.logging.*\n//...\nval client = HttpClient(CIO) {\n    install(Logging)\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files Using MultiPartFormDataContent in Ktor Client\nDESCRIPTION: Shows how to upload a file by using the post function with MultiPartFormDataContent. This approach allows for more control over the request, including the ability to specify a boundary value and monitor upload progress.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-requests.md#2025-04-09_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    expectSuccess = true\n}\n\nsuspend fun main() {\n    try {\n        val response = client.post(\"http://localhost:8080/upload\") {\n            onUpload { bytesSentTotal, contentLength ->\n                println(\"Sent $bytesSentTotal bytes from $contentLength\")\n            }\n            setBody(\n                MultiPartFormDataContent(\n                    formData {\n                        append(\"description\", \"Ktor logo\")\n                        append(\"image\", File(\"ktor_logo.png\").readBytes(), Headers.build {\n                            append(HttpHeaders.ContentType, \"image/png\")\n                            append(HttpHeaders.ContentDisposition, \"filename=\\\"ktor_logo.png\\\"\")\n                        })\n                    }\n                )\n            )\n        }\n        println(\"Response status: ${response.status}\")\n    } finally {\n        client.close()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Proxy Request Information in Ktor Server\nDESCRIPTION: This snippet demonstrates how to access information about the proxy request using the call.request.local property inside a route handler. It shows how to obtain details about the proxy address and host.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-forward-headers.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/\") {\n    call.respondText(\"Hello, world!\")\n    println(\"Local information: host=${call.request.local.remoteHost}, port=${call.request.local.remotePort}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Article Template in Ktor\nDESCRIPTION: Implementation of a child template for article content with placeholders for title, text and a list of items.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-html-dsl.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ArticleTemplate: Template<FlowContent> {\n    val articleTitle = Placeholder<FlowContent>()\n    val articleText = Placeholder<FlowContent>()\n    val list = TemplatePlaceholder<ULTemplate>()\n    override fun FlowContent.apply() {\n        article {\n            h2 {\n                insert(articleTitle)\n            }\n            p {\n                insert(articleText)\n            }\n            insert(list)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jackson Serializer in Ktor Client\nDESCRIPTION: Example of registering the Jackson serializer for JSON processing in a Ktor client.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-serialization.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.jackson.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        jackson()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking External Services in Tests\nDESCRIPTION: Example showing how to mock external services in tests using the externalServices function. This approach simulates responses from external APIs without making real network calls.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-testing.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ntestApplication {\n    externalServices {\n        hosts(\"https://www.googleapis.com\") {\n            routing {\n                get(\"/oauth2/v1/userinfo\") {\n                    call.respondText(\n                        \"\"\"\n                        {\n                            \"id\": \"id1\",\n                            \"name\": \"Test User\"\n                        }\n                        \"\"\".trimIndent(),\n                        ContentType.Application.Json\n                    )\n                }\n            }\n        }\n    }\n    // Test code\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Users with UserHashedTableAuth in Kotlin\nDESCRIPTION: This code demonstrates how to use UserHashedTableAuth to validate user credentials in the basic authentication provider's validate function.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-basic-auth.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Authentication) {\n    basic(\"auth-basic\") {\n        realm = \"Access to the '/' path\"\n        validate { credentials ->\n            hashedUserTable.authenticate(credentials)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Proxy Configuration in Ktor Client\nDESCRIPTION: Basic structure for configuring a proxy in Ktor HTTP client using the engine configuration block.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-proxy.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient() {\n    engine {\n        proxy = // Create proxy configuration\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Server with EngineMain in Kotlin\nDESCRIPTION: Example of the main function used to start a Ktor server with the Netty engine. This approach enables configuration through external files and command-line arguments.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-run.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n```\n\n----------------------------------------\n\nTITLE: Nested Resource Classes in Ktor\nDESCRIPTION: Shows how to create nested resource classes for handling multiple path segments.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-resources.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@Resource(\"/articles\")\nclass Articles() {\n    @Resource(\"new\")\n    class New(val parent: Articles = Articles())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the Logging Plugin in Ktor Client\nDESCRIPTION: Demonstrates how to configure the Logging plugin in a Ktor client by specifying the logger, logging level, and condition for filtering log messages.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-plugins.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient {\n    install(Logging) {\n        logger = Logger.DEFAULT\n        level = LogLevel.HEADERS\n        filter { request ->\n            request.url.host.contains(\"ktor.io\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Session Content in Ktor\nDESCRIPTION: This snippet shows how to set session content for a specific route using the call.sessions property. It creates a new session instance with user data.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-sessions.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/set-session\") {\n    call.sessions.set(UserSession(name = \"John\", age = 30))\n    call.respondText(\"Session set\")\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Serialized Data through WebSocket in Ktor Server\nDESCRIPTION: This snippet shows how to send serialized data through a WebSocket using the sendSerialized function. It passes a data object to be serialized in the specified format.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-serialization.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nsendSerialized(Customer(1, \"John\"))\n// Sends: {\"id\":1,\"name\":\"John\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring FreeMarker Template Loading in Ktor\nDESCRIPTION: Sets up FreeMarker in a Ktor application by installing the FreeMarker plugin and configuring the ClassTemplateLoader to load templates from the templates directory in the classpath.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-freemarker.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.freemarker.*\nimport freemarker.cache.*\n\nfun Application.configureFreeMarker() {\n    install(FreeMarker) {\n        templateLoader = ClassTemplateLoader(this::class.java.classLoader, \"templates\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Data with Ktor Client\nDESCRIPTION: Sets a data class instance as the request body with JSON content type. This snippet demonstrates how to send a class instance within a request body by calling setBody and setting the appropriate content type.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-serialization.md#2025-04-09_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nclient.post(\"http://localhost:8080/customer\") {\n    contentType(ContentType.Application.Json)\n    setBody(customer)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling ApplicationStarted Event in Ktor\nDESCRIPTION: Demonstrates how to subscribe to and handle the ApplicationStarted lifecycle event.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-events.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        monitor.subscribe(ApplicationStarted) {\n            log.info(\"Application started\")\n        }\n    }.start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Example with X-Http-Method-Override Header\nDESCRIPTION: An example HTTP request using POST with X-Http-Method-Override header set to DELETE. This shows how clients can tunnel HTTP verbs through headers when they're limited to specific HTTP methods.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-method-override.md#2025-04-09_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:8080/json\nContent-Type: application/json\nX-Http-Method-Override: DELETE\n\n{\n  \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ContentNegotiation Plugin in Ktor Client\nDESCRIPTION: Basic example of installing the ContentNegotiation plugin in a Ktor client configuration block.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-serialization.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    install(ContentNegotiation)\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Session in Ktor\nDESCRIPTION: This snippet demonstrates how to clear a session using the call.sessions.clear method. It's typically used when a user logs out.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-sessions.md#2025-04-09_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/clear-session\") {\n    call.sessions.clear<UserSession>()\n    call.respondText(\"Session cleared\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Client with Apache5 Engine in Kotlin\nDESCRIPTION: Creates a Ktor HTTP client using the Apache5 engine, which supports HTTP/1.1 and HTTP/2. Apache5 is available for JVM platforms.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-engines.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.apache5.*\n\nval client = HttpClient(Apache5)\n```\n\n----------------------------------------\n\nTITLE: Configuring CBOR Serializer in ContentNegotiation (Kotlin)\nDESCRIPTION: Demonstrates the setup and customization of the CBOR serializer in the ContentNegotiation plugin for Ktor server applications.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-serialization.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.plugins.contentnegotiation.*\nimport io.ktor.serialization.kotlinx.cbor.*\nimport kotlinx.serialization.cbor.*\n\ninstall(ContentNegotiation) {\n    cbor(Cbor {\n        ignoreUnknownKeys = true\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Serializer for WebSockets in Ktor Server (kotlinx.serialization)\nDESCRIPTION: This snippet demonstrates how to configure the JSON serializer for WebSockets using kotlinx.serialization. It creates a KotlinxWebsocketSerializationConverter instance with the Json parameter and assigns it to the contentConverter property.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-serialization.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.serialization.kotlinx.*\nimport kotlinx.serialization.json.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(Json)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Digest Authentication Provider in Ktor\nDESCRIPTION: Sets up the digest authentication provider with realm and digest provider function. Implements optional validation to map credentials to a custom principal and configures authenticated routes to protect specific resources.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-digest-auth.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Authentication) {\n    digest(\"auth-digest\") {\n        realm = myRealm\n        digestProvider { userName, realm ->\n            userTable[userName]\n        }\n        validate { credentials ->\n            if (credentials.userName.isNotEmpty()) {\n                // Store user's name in a principal\n                UserIdPrincipal(credentials.userName)\n            } else {\n                null\n            }\n        }\n    }\n}\n\nrouting {\n    authenticate(\"auth-digest\") {\n        get(\"/\") {\n            // Get authenticated user's principal\n            val principal = call.principal<UserIdPrincipal>()!!\n            call.respondText(\"Hello, ${principal.name}!\")\n        }\n    }\n\n    // Public route\n    get(\"/public\") {\n        call.respondText(\"Hello, guest!\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jackson Serializer for WebSockets in Ktor Client\nDESCRIPTION: This code shows how to register the Jackson serializer for WebSockets in Ktor Client by assigning JacksonWebsocketContentConverter to the contentConverter property.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-websocket-serialization.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.serialization.jackson.*\n\ninstall(WebSockets) {\n    contentConverter = JacksonWebsocketContentConverter()\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Call ID from ApplicationCall in Ktor Server\nDESCRIPTION: Example showing how to retrieve a call ID from the ApplicationCall. This approach provides more flexibility by allowing custom logic to extract the call ID from the request.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-call-id.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CallId) {\n    retrieve { call ->\n        call.request.header(HttpHeaders.XRequestId)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Request Timeout in Ktor Client\nDESCRIPTION: This code shows how to set a global request timeout that applies to all HTTP calls made by the client. It uses requestTimeoutMillis to specify the timeout duration in milliseconds.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-timeout.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    install(HttpTimeout) {\n        requestTimeoutMillis = 10000\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ktor Dependencies in Multiplatform Project's Version Catalog\nDESCRIPTION: Shows how to define the Ktor version and client core dependency in a Gradle version catalog (libs.versions.toml) for a Kotlin Multiplatform project.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-dependencies.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n[versions]\n# ...\nktor = \"2.3.3\"\n\n[libraries]\n# ...\nktor-client-core = { module = \"io.ktor:ktor-client-core\", version.ref = \"ktor\" }\n# ...\n\n```\n\n----------------------------------------\n\nTITLE: Handling Multipart Form Data Upload\nDESCRIPTION: Comprehensive example of handling multipart form data including file uploads and form fields with size limits.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-requests.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\npost(\"/upload\") {\n    val multipart = call.receiveMultipart(formFieldLimit = 100L * 1024L * 1024L)\n    multipart.forEachPart { part ->\n        when (part) {\n            is PartData.FormItem -> {\n                val name = part.name\n                val value = part.value\n                // Handle form field\n            }\n            is PartData.FileItem -> {\n                val name = part.name\n                val originalFileName = part.originalFileName\n                part.provider().use { input ->\n                    File(\"uploads/$originalFileName\").writeBytes(input.readBytes())\n                }\n            }\n            else -> {}\n        }\n        part.dispose()\n    }\n    call.respondText(\"Upload successful\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default File Response for Static Routes in Ktor\nDESCRIPTION: This snippet shows how to use the default() function in Ktor to serve a default file (index.html) for any request inside a static route that has no corresponding file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-static-content.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nstaticFiles(\"/\") {\n    default(\"index.html\")\n}\n```\n\n----------------------------------------\n\nTITLE: Complete CallId Plugin Configuration for Ktor Client\nDESCRIPTION: A comprehensive example showing how to configure the CallId plugin to generate IDs and add them to request headers. It combines both using the coroutine context and generating new IDs when needed.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-call-id.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CallId) {\n    generate { UUID.randomUUID().toString() }\n    addToHeader()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Serializable Data Class (Kotlin)\nDESCRIPTION: Shows how to create a data class for serialization/deserialization in Ktor, including the necessary annotation for kotlinx.serialization.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-serialization.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.serialization.Serializable\n\n@Serializable\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n\n----------------------------------------\n\nTITLE: Loading Modules from Configuration in TestApplication\nDESCRIPTION: Demonstrates how to load modules from a configuration file in a test environment using the environment function to specify the configuration file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migrating-3.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntestApplication {\n    environment {\n        config = MapApplicationConfig(\"google.clientId\" to \"test-client-id\")\n    }\n    // rest of the test\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CSS Response Handler in Ktor\nDESCRIPTION: Extension function for ApplicationCall to respond with CSS content. Serializes stylesheet to string and sets content type to CSS.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-css-dsl.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend inline fun ApplicationCall.respondCss(builder: CSSBuilder.() -> Unit) {\n    this.respondText(CSSBuilder().apply(builder).toString(), ContentType.Text.CSS)\n}\n```\n\n----------------------------------------\n\nTITLE: Intercepting Requests to Add Call ID in Ktor Client\nDESCRIPTION: Demonstrates using the intercept function to add a call ID to outgoing requests using a custom CallIdInterceptor. This approach provides full control over how call IDs are attached to requests.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-call-id.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CallId) {\n    intercept { callIdValue, request ->\n        request.headers.append(HttpHeaders.XRequestId, callIdValue)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Metric Prefix in Ktor's DropwizardMetrics Plugin\nDESCRIPTION: This snippet demonstrates how to customize the prefix for metrics names in the DropwizardMetrics plugin for Ktor. It changes the default 'ktor.calls' prefix to a custom one.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-metrics-dropwizard.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(DropwizardMetrics) {\n    baseName = \"my.prefix\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Logger for Ktor Plugins\nDESCRIPTION: This Kotlin code demonstrates how to create a custom logger for use in Ktor plugins or files using the KtorSimpleLogger class. It's suitable for multiplatform projects.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-logging.md#2025-04-09_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.util.logging.*\n\nval requestTraceLogger = KtorSimpleLogger(\"RequestTrace\")\n\nclass RequestTracePlugin : Plugin<Application, RequestTracePluginConfiguration> {\n    override val key: AttributeKey<RequestTracePluginConfiguration> =\n        AttributeKey(\"RequestTracePlugin\")\n\n    override fun install(pipeline: Application, configure: RequestTracePluginConfiguration.() -> Unit) {\n        requestTraceLogger.trace(\"Installing request trace plugin\")\n        // Plugin implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Templates to Generate Complex HTML in Ktor\nDESCRIPTION: Example showing how to use the defined templates together to generate a complex HTML page with nested components.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-html-dsl.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Application.module() {\n    routing {\n        get(\"/\") {\n            call.respondHtmlTemplate(LayoutTemplate()) {\n                header {\n                    +\"Ktor\"\n                }\n                content {\n                    articleTitle {\n                        +\"Hello from Ktor!\"\n                    }\n                    articleText {\n                        +\"Kotlin Framework for creating connected systems.\"\n                    }\n                    list {\n                        items {\n                            item {\n                                +\"One\"\n                            }\n                            first {\n                                +(true)\n                            }\n                        }\n                        items {\n                            item {\n                                +\"Two\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Tracing Output Example in Ktor\nDESCRIPTION: Example of route tracing output that helps debug route matching issues. Shows the trace log for an unmatched route request.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-routing.md#2025-04-09_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nTRACE Application - Trace for [missing-page]\n/, segment:0 -> SUCCESS @ /\n  /, segment:0 -> SUCCESS @ /\n    /(method:GET), segment:0 -> FAILURE \"Not all segments matched\" @ /(method:GET)\nMatched routes:\n  No results\nRoute resolve result:\n  FAILURE \"No matched subtrees found\" @ /\n```\n\n----------------------------------------\n\nTITLE: Defining a Module in a Separate Package for Ktor\nDESCRIPTION: This snippet shows how to define a Ktor module in a separate package. It demonstrates creating a module in a different file and package structure.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-modules.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\npackage org.sample\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun Application.module3() {\n    routing {\n        get(\"/module3\") {\n            call.respondText(\"Hello from module 3\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Cookie Preservation in Ktor\nDESCRIPTION: Shows how to test cookie preservation between requests. It creates a client with HttpCookies plugin and makes multiple requests to check if the reload count increases.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-testing.md#2025-04-09_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ApplicationTest {\n    @Test\n    fun testRoot() = testApplication {\n        val client = createClient {\n            install(HttpCookies)\n        }\n        client.get(\"/\").apply {\n            assertEquals(HttpStatusCode.OK, status)\n            assertEquals(\"Hello, 1\", bodyAsText())\n        }\n        client.get(\"/\").apply {\n            assertEquals(HttpStatusCode.OK, status)\n            assertEquals(\"Hello, 2\", bodyAsText())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Cookies in Ktor\nDESCRIPTION: Shows how to add cookies to the response\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-responses.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/\") {\n    call.response.cookies.append(\"yummy_cookie\", \"choco\")\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Authentication with Session\nDESCRIPTION: Implements form-based authentication and stores user data in a session.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-session-auth.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\npost(\"/login\") {\n    val formParameters = call.receiveParameters()\n    val username = formParameters[\"username\"] ?: return@post call.respondRedirect(\"/login\")\n    call.sessions.set(UserSession(name = username))\n    call.respondRedirect(\"/hello\")\n}\n```\n\n----------------------------------------\n\nTITLE: Making Parallel Requests in Ktor Client\nDESCRIPTION: Shows how to perform multiple HTTP requests in parallel using coroutines. This approach uses the async function to execute requests concurrently and await their results.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-requests.md#2025-04-09_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    // ...\n}\n\nsuspend fun makeRequests() = coroutineScope {\n    val first = async {\n        client.get(\"http://localhost:8080/first\")\n    }\n    val second = async {\n        client.get(\"http://localhost:8080/second\")\n    }\n    println(\"The first answer is ${first.await()}\")\n    println(\"The second answer is ${second.await()}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Accepting Incoming Connections in Ktor Server\nDESCRIPTION: This code shows how to accept an incoming socket connection using the ServerSocket.accept function, which returns a connected Socket instance.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-sockets.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval socket = serverSocket.accept()\n```\n\n----------------------------------------\n\nTITLE: Configuring ConstantCookiesStorage in Ktor Client\nDESCRIPTION: Example showing how to configure HttpCookies with ConstantCookiesStorage to add specific cookies to each request for a domain. Useful for testing server responses.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-cookies.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    install(HttpCookies) {\n        storage = ConstantCookiesStorage(Cookie(name = \"user_name\", value = \"jetbrains\", domain = \"0.0.0.0\"))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Single-Page Application Settings in Ktor\nDESCRIPTION: Configures Ktor to serve a single-page application from resources with customized settings. Specifies a custom default page, ignores certain file patterns, and sets the resources path.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-serving-spa.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.http.content.*\nimport io.ktor.server.routing.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080, host = \"0.0.0.0\") {\n        routing {\n            singlePageApplication {\n                useResources = true\n                filesPath = \"sample-web-app\"\n                defaultPage = \"main.html\"\n                ignoreFiles { it.endsWith(\".txt\") }\n            }\n        }\n    }.start(wait = true)\n```\n\n----------------------------------------\n\nTITLE: Auto-reload Thymeleaf Templates Configuration\nDESCRIPTION: Complete example showing how to configure Thymeleaf templates to auto-reload in development mode.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-thymeleaf.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example\n\nimport io.ktor.server.application.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.thymeleaf.*\nimport org.thymeleaf.templateresolver.ClassLoaderTemplateResolver\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Thymeleaf) {\n            setTemplateResolver(ClassLoaderTemplateResolver().apply {\n                prefix = \"templates/\"\n                suffix = \".html\"\n                // Enable template caching.\n                setCacheable(System.getenv(\"DEVELOPMENT\").toBoolean())\n                // Set template cache TTL to 1 second.\n                setCacheTTLMs(1000L)\n            })\n        }\n        routing {\n            get(\"/\") {\n                val user = User(\"John\")\n                call.respond(ThymeleafContent(\"index\", mapOf(\"user\" to user)))\n            }\n        }\n    }.start(wait = true)\n}\n\ndata class User(val name: String)\n```\n\n----------------------------------------\n\nTITLE: Using JTE Templates in Route Handlers\nDESCRIPTION: Demonstrates how to respond with a JTE template in a Ktor route handler by passing data to the template.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-jte.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/\") {\n    call.respond(JteContent(\"index.kte\", mapOf(\"data\" to \"Hello, World!\")))\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Static Resources from Classpath in Ktor\nDESCRIPTION: This snippet illustrates how to use the staticResources() function to serve static content from the classpath in Ktor. It maps requests from '/resources' to the 'static' package in application resources.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-static-content.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nrouting {\n    staticResources(\"/resources\", \"static\")\n}\n```\n\n----------------------------------------\n\nTITLE: Testing WebSocket Conversations in Ktor\nDESCRIPTION: Shows how to test WebSocket conversations using the WebSockets plugin provided by the client. It sets up a WebSocket session and tests sending and receiving messages.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-testing.md#2025-04-09_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ModuleTest {\n    @Test\n    fun testConversation() = testApplication {\n        val client = createClient {\n            install(WebSockets)\n        }\n        client.webSocket(\"/chat\") {\n            sendSerialized(Frame.Text(\"Hello, WebSocket server!\"))\n            val frame = incoming.receive()\n            assertTrue(frame is Frame.Text)\n            assertEquals(\"Hello, WebSocket client!\", (frame as Frame.Text).readText())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making GET Request with Ktor Client in Kotlin\nDESCRIPTION: This snippet demonstrates how to make a GET request using the specific 'get' function provided by the Ktor HttpClient.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-requests.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval response: HttpResponse = client.get(\"https://ktor.io/\")\n```\n\n----------------------------------------\n\nTITLE: Receiving Data from Client in Ktor Server\nDESCRIPTION: This snippet demonstrates how to open a read channel on a socket to receive data from a client.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-sockets.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval input = socket.openReadChannel()\n```\n\n----------------------------------------\n\nTITLE: Canceling Requests in Ktor Client\nDESCRIPTION: Demonstrates how to cancel an ongoing HTTP request by canceling the coroutine that runs it. This technique uses the Job returned by the launch function to cancel the operation.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-requests.md#2025-04-09_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.coroutines.*\n\nval client = HttpClient(CIO)\nval job = launch {\n    val requestContent: String = client.get(\"http://localhost:8080\")\n}\njob.cancel()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Status File Handler in Ktor StatusPages\nDESCRIPTION: Demonstrates how to configure status file handling to serve HTML pages for specific HTTP status codes from the resources directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-status-pages.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(StatusPages) {\n    statusFile(HttpStatusCode.Unauthorized, HttpStatusCode.PaymentRequired, filePattern = \"error#.html\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SLF4J Reporter for Dropwizard Metrics in Ktor\nDESCRIPTION: This snippet demonstrates how to set up the SLF4J reporter for Dropwizard Metrics in a Ktor application. It configures the metrics to be reported every 10 seconds.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-metrics-dropwizard.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(DropwizardMetrics) {\n    val reporter = Slf4jReporter.forRegistry(registry)\n        .outputTo(log)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .build()\n    reporter.start(10, TimeUnit.SECONDS)\n}\n```\n\n----------------------------------------\n\nTITLE: File Upload Using ByteReadChannel\nDESCRIPTION: Example of handling file upload using ByteReadChannel in Ktor.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-requests.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\npost(\"/upload\") {\n    val channel = call.receive<ByteReadChannel>()\n    channel.copyAndClose(File(\"upload.txt\").writeChannel())\n    call.respondText(\"File uploaded!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Making Cross-Origin Requests with JavaScript Fetch API\nDESCRIPTION: A JavaScript example showing how to make a cross-origin request to a Ktor server using the Fetch API. This demonstrates the client-side code that would require CORS configuration on the server.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-cors.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('http://0.0.0.0:8080/customer')\n```\n\n----------------------------------------\n\nTITLE: User Data Model Definition\nDESCRIPTION: Defines a data class representing user information for use with FreeMarker templates.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-freemarker.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name: String)\n```\n\n----------------------------------------\n\nTITLE: Server Implementation for Form Parameter Handling\nDESCRIPTION: Implementation of a Ktor server application that handles form parameters submitted via POST requests. It extracts the parameters and generates a response based on their values.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-testing.md#2025-04-09_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\npackage formparameters\n\nimport io.ktor.server.application.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.http.*\nimport io.ktor.server.request.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080, host = \"0.0.0.0\") {\n        module()\n    }.start(wait = true)\n}\n\nfun Application.module() {\n    routing {\n        post(\"/\") {\n            val parameters = call.receiveParameters()\n            val name = parameters[\"name\"] ?: return@post call.respondText(\n                \"Missing name\",\n                status = HttpStatusCode.BadRequest\n            )\n            val email = parameters[\"email\"] ?: return@post call.respondText(\n                \"Missing email\",\n                status = HttpStatusCode.BadRequest\n            )\n            call.respondText(\"The server says: $name ($email) is registered\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Modules with embeddedServer in Ktor\nDESCRIPTION: This snippet shows how to use a separate module with the embeddedServer function in Ktor. It demonstrates extracting application logic into a module and passing it as a parameter to embeddedServer.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-modules.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080, module = Application::module).start(wait = true)\n}\n\nfun Application.module() {\n    routing {\n        get(\"/\") {\n            call.respondText(\"Hello, world!\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Ktor Dependencies for Native Server in Gradle\nDESCRIPTION: This snippet shows how to add the required Ktor dependencies for a Native server in the build.gradle.kts file. It includes the core server dependency and the CIO engine dependency for the nativeMain source set.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-native.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        val nativeMain by getting {\n            dependencies {\n                implementation(\"io.ktor:ktor-server-core:$ktorVersion\")\n                implementation(\"io.ktor:ktor-server-cio:$ktorVersion\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Non-2xx Response Handling in Ktor Client (Kotlin)\nDESCRIPTION: This snippet illustrates how to customize the handling of non-2xx responses using the handleResponseExceptionWithRequest function. It shows raising a custom MissingPageException for 404 responses instead of the default ClientRequestException.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-response-validation.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    expectSuccess = true\n    HttpResponseValidator {\n        handleResponseExceptionWithRequest { exception, _ ->\n            val clientException = exception as? ClientRequestException\n                ?: return@handleResponseExceptionWithRequest\n            val exceptionResponse = clientException.response\n            if (exceptionResponse.status == HttpStatusCode.NotFound) {\n                throw MissingPageException(exceptionResponse)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Credentials for CORS in Ktor\nDESCRIPTION: Demonstrates how to allow credential information like cookies or authentication data to be sent with cross-origin requests by setting the Access-Control-Allow-Credentials header.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-cors.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CORS) {\n    allowCredentials = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Ktor Application (Maven)\nDESCRIPTION: Dockerfile for building and running a Ktor application using Maven and multi-stage builds.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/docker.md#2025-04-09_snippet_10\n\nLANGUAGE: Docker\nCODE:\n```\n# Stage 1: Cache Maven dependencies\nFROM maven:3.8-amazoncorretto-21 AS cache\nWORKDIR /app\nCOPY pom.xml .\nRUN mvn dependency:go-offline\n\n# Stage 2: Build Application\nFROM maven:3.8-amazoncorretto-21 AS build\nWORKDIR /app\nCOPY --from=cache /root/.m2 /root/.m2\nCOPY . .\nRUN mvn clean package\n\n# Stage 3: Create the Runtime Image\nFROM amazoncorretto:21-slim AS runtime\nEXPOSE 8080\nWORKDIR /app\nCOPY --from=build /app/target/*-with-dependencies.jar app.jar\nENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]\n```\n\n----------------------------------------\n\nTITLE: Responding with Pebble Template\nDESCRIPTION: Shows how to respond to a route request using PebbleContent with a template and model data.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-pebble.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/\") {\n    call.respond(PebbleContent(\"index.html\", mapOf(\"user\" to User(\"John\"))))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Ktor Plugin Configuration in Gradle\nDESCRIPTION: Configuration snippet showing how to add the Ktor plugin to the Gradle build file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-fatjar.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    id(\"io.ktor.plugin\") version \"2.3.7\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Monitoring Plugin in Ktor\nDESCRIPTION: Implements a custom plugin that handles application lifecycle events using MonitoringEvent hook.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-events.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval ApplicationMonitoringPlugin = createApplicationPlugin(name = \"ApplicationMonitoringPlugin\") {\n    application.log.info(\"Configuring monitoring plugin...\")\n    on(MonitoringEvent) { application ->\n        application.monitor.subscribe(ApplicationStarted) {\n            application.log.info(\"Application started\")\n        }\n        application.monitor.subscribe(ApplicationStopped) {\n            application.log.info(\"Application stopped\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mustache Template Loading in Ktor\nDESCRIPTION: This snippet demonstrates how to configure the MustacheFactory for loading Mustache templates from the 'templates' package in the classpath.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-mustache.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.mustache.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Mustache) {\n            mustacheFactory = DefaultMustacheFactory(\"templates\")\n        }\n        // ...\n    }.start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing DataConversion Service in Ktor\nDESCRIPTION: Shows how to access the DataConversion service from the application context to use its conversion capabilities.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-data-conversion.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval dataConversion = application.conversionService\n```\n\n----------------------------------------\n\nTITLE: Creating a Session Data Class in Kotlin\nDESCRIPTION: Creates a data class for storing session information including the session ID and a count of page views, which is required before configuring the Sessions plugin.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-sessions.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class UserSession(val id: String, val count: Int)\n```\n\n----------------------------------------\n\nTITLE: Adding LDAP Dependencies in Gradle (Kotlin)\nDESCRIPTION: This snippet shows how to add the required dependencies for LDAP authentication in a Gradle build script using Kotlin DSL.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-ldap.md#2025-04-09_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\nimplementation(\"io.ktor:ktor-server-auth-ldap:$ktor_version\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Configuration in Plugin\nDESCRIPTION: Shows how to access the HTTP client configuration within a plugin to retrieve proxy settings.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-custom-plugins.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.plugins.api.*\n\nval SimplePlugin = createClientPlugin(\"SimplePlugin\") {\n    val proxyAddress = client.engineConfig.proxy?.address()\n    println(\"Proxy address: $proxyAddress\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpsRedirect Plugin in Ktor\nDESCRIPTION: Demonstrates how to configure the HttpsRedirect plugin with custom HTTPS port and 301 redirect status code. This configuration is applied to the Ktor application module.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-https-redirect.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(HttpsRedirect) {\n    sslPort = 8443\n    permanentRedirect = true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Ktor Test Dependency for Native Server in Gradle\nDESCRIPTION: This snippet demonstrates how to add the Ktor server test dependency to the nativeTest source set in the build.gradle.kts file. This is necessary for testing a Native server.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-native.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        val nativeTest by getting {\n            dependencies {\n                implementation(\"io.ktor:ktor-server-test-host:$ktorVersion\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Log Requests in Ktor\nDESCRIPTION: Implements request filtering for logging based on specific URL patterns using the CallLogging plugin.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-call-logging.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CallLogging) {\n    filter { call ->\n        call.request.path().startsWith(\"/api/v1\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Status Code in Ktor\nDESCRIPTION: Shows how to set HTTP status codes in responses using both predefined and custom status codes\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-responses.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/\") {\n    call.response.status(HttpStatusCode.OK)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/\") {\n    call.response.status(HttpStatusCode(418, \"I'm a tea pot\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Velocity Template in HTML\nDESCRIPTION: This snippet shows an example of a Velocity template named 'index.vl' stored in the resources/templates directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-velocity.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<body>\n<h1>Hello, $user.name!</h1>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Exposed and H2 Dependencies in Gradle\nDESCRIPTION: Adds the required dependencies for Exposed ORM framework and H2 database in the build.gradle.kts file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/db-persistence.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Configurable Custom Header Plugin in Ktor\nDESCRIPTION: This example shows how to create a plugin that appends a custom header to each response. It accepts a configuration class that specifies the header name and value, allowing for customization when the plugin is installed.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins.md#2025-04-09_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval CustomHeader = createApplicationPlugin(name = \"CustomHeader\", ::CustomHeaderConfig) {\n    // Retrieve the configuration values when the plugin is installed\n    val headerName = pluginConfig.name\n    val headerValue = pluginConfig.value\n    \n    // Add the custom header to each response\n    onCallRespond { call ->\n        call.response.header(headerName, headerValue)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring War Plugin in Gradle\nDESCRIPTION: Gradle configuration for installing the War plugin to generate WAR archives\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-war.md#2025-04-09_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n    war\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Ktor Client Core Dependency to Common Source Set\nDESCRIPTION: Adds the Ktor client core dependency to the commonMain source set in the shared module. This allows using Ktor client in shared code across platforms.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-multiplatform-application.md#2025-04-09_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\ncommonMain.dependencies {\n    implementation(libs.ktor.client.core)\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression Priorities in Ktor\nDESCRIPTION: This example demonstrates how to set priorities for different compression algorithms in the Compression plugin. Higher priority values take precedence.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-compression.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Compression) {\n    gzip {\n        priority = 0.9\n    }\n    deflate {\n        priority = 1.0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JRE Version for Docker Image\nDESCRIPTION: Specify the JRE version to use in the Docker image using the Ktor plugin configuration.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/docker.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nktor {\n    docker {\n        jreVersion.set(JavaVersion.VERSION_17)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Jetty Dockerfile for WAR Deployment\nDESCRIPTION: Dockerfile configuration for deploying WAR archive to Jetty container\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-war.md#2025-04-09_snippet_6\n\nLANGUAGE: Docker\nCODE:\n```\nFROM jetty:10-jdk11\nCOPY ./build/libs/jetty-war.war /var/lib/jetty/webapps/root.war\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Client with CIO Engine in Kotlin\nDESCRIPTION: Creates a Ktor HTTP client instance using the CIO (Coroutine I/O) engine. CIO is a cross-platform engine that works on JVM, Android, and Native platforms.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-engines.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO)\n```\n\n----------------------------------------\n\nTITLE: Receiving JSON Data with Ktor Client\nDESCRIPTION: Deserializes a JSON response into a specified data class. This shows how to handle responses with application/json content type by providing the target data class as a parameter to the body function.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-serialization.md#2025-04-09_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nval customer: Customer = client.get(\"http://localhost:8080/customer\").body()\n```\n\n----------------------------------------\n\nTITLE: Configuring JMX Reporter for Dropwizard Metrics in Ktor\nDESCRIPTION: This code snippet shows how to configure the JMX reporter for Dropwizard Metrics in a Ktor application, allowing metrics to be exposed via JMX for monitoring with tools like jconsole.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-metrics-dropwizard.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(DropwizardMetrics) {\n    val reporter = JmxReporter.forRegistry(registry)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .build()\n    reporter.start()\n}\n```\n\n----------------------------------------\n\nTITLE: Configurable Custom Header Plugin Implementation\nDESCRIPTION: Complete implementation of a configurable custom header plugin that allows specifying header name and value through configuration.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-custom-plugins.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.plugins.api.*\n\nval CustomHeaderPlugin = createClientPlugin(\"CustomHeaderPlugin\", ::CustomHeaderConfig) {\n    val headerName = pluginConfig.headerName\n    val headerValue = pluginConfig.headerValue\n    \n    onRequest { request ->\n        request.header(headerName, headerValue)\n    }\n}\n\nclass CustomHeaderConfig {\n    var headerName: String = \"X-Custom-Header\"\n    var headerValue: String = \"HeaderValue\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication Provider for LDAP in Ktor\nDESCRIPTION: This Kotlin snippet demonstrates how to set up a basic authentication provider for LDAP authentication in a Ktor application.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-ldap.md#2025-04-09_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\nimport io.ktor.server.auth.ldap.*\n//...\ninstall(Authentication) {\n    basic {\n        validate { credentials ->\n            // Authenticate an LDAP user\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Servlet in web.xml for Jakarta EE\nDESCRIPTION: XML configuration for registering Ktor servlet using ServletApplicationEngine in web.xml file for Tomcat/Jetty v10.x+\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-war.md#2025-04-09_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<servlet>\n    <display-name>KtorServlet</display-name>\n    <servlet-name>KtorServlet</servlet-name>\n    <servlet-class>io.ktor.server.servlet.jakarta.ServletApplicationEngine</servlet-class>\n    <init-param>\n        <param-name>io.ktor.ktor.config</param-name>\n        <param-value>application.conf</param-value>\n    </init-param>\n    <async-supported>true</async-supported>\n</servlet>\n```\n\n----------------------------------------\n\nTITLE: Adding OkHttp Engine Dependency for Android\nDESCRIPTION: Adds the OkHttp engine dependency to the androidMain source set, providing Android-specific HTTP implementation for Ktor client.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-multiplatform-application.md#2025-04-09_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nandroidMain.dependencies {\n    implementation(libs.ktor.client.okhttp)\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Customer Object in Ktor\nDESCRIPTION: Shows how to receive a Customer object on the server side in a Ktor application.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-request-validation.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\npost(\"/customer\") {\n    val customer = call.receive<Customer>()\n    call.respondText(\"Successfully received $customer\")\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Docker Image Name and Tag\nDESCRIPTION: Set custom image name and tag in the Ktor plugin configuration for Docker tasks.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/docker.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nktor {\n    docker {\n        localImageName.set(\"my-application\")\n        imageTag.set(\"1.0.0\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bearer Authentication in Ktor\nDESCRIPTION: Shows how to install and set up the basic Bearer authentication provider in a Ktor application\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-bearer-auth.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n// ...\ninstall(Authentication) {\n    bearer {\n        // Configure bearer authentication\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Basic Authentication in Kotlin\nDESCRIPTION: This snippet demonstrates how to protect specific routes using basic authentication in a Ktor server application. It shows how to use the authenticate function and retrieve the authenticated principal.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-basic-auth.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nrouting {\n    authenticate(\"auth-basic\") {\n        get(\"/\") {\n            val principal = call.principal<UserIdPrincipal>()\n            call.respondText(\"Hello, ${principal?.name}!\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example X-Forwarded-For HTTP Header with Multiple Proxies\nDESCRIPTION: This HTTP header example shows the X-Forwarded-For format when a request passes through multiple proxies, containing the client IP address followed by each proxy IP address.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-forward-headers.md#2025-04-09_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nX-Forwarded-For: <client>, <proxy1>, <proxy2>\n```\n\n----------------------------------------\n\nTITLE: Installing Custom Plugin in Ktor HTTP Client\nDESCRIPTION: Shows how to install a custom plugin in the Ktor HTTP client configuration using the install function.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-custom-plugins.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.example.plugins.*\n\nval client = HttpClient(CIO) {\n    install(CustomHeaderPlugin)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LocalDate Converter in DataConversion Plugin\nDESCRIPTION: Complete example showing how to define a custom converter for LocalDate type with encoding and decoding functions for date format conversion.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-data-conversion.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(DataConversion) {\n    convert<LocalDate> {\n        // DateTimeFormatter is used to declare the date format\n        val format = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")\n        \n        // deserialization: string -> LocalDate\n        decode { values ->\n            values.singleOrNull()?.let { LocalDate.parse(it, format) }\n        }\n        \n        // serialization: LocalDate -> string\n        encode { value ->\n            when (value) {\n                null -> listOf()\n                is LocalDate -> listOf(value.format(format))\n                else -> throw DataConversionException(\"Cannot convert $value as LocalDate\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Extension Negotiation\nDESCRIPTION: Demonstrates the implementation of negotiation methods for WebSocket extensions including protocol handling and negotiation logic.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-extensions.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n    /** A list of protocols to be sent in a client request for negotiation **/\n    override val protocols: List<WebSocketExtensionHeader> = emptyList()\n   \n    /** \n      * This method will be called for server and will process `requestedProtocols` from the client.\n      * As a result, it will return a list of extensions that server agrees to use.\n      */\n    override fun serverNegotiation(requestedProtocols: List<WebSocketExtensionHeader>): List<WebSocketExtensionHeader> {\n        logger.log(\"Server negotiation\")\n        return emptyList()\n    }\n\n    /**\n      * This method will be called on the client with a list of protocols, produced by `serverNegotiation`. It will decide if these extensions should be used. \n      */ \n    override fun clientNegotiation(negotiatedProtocols: List<WebSocketExtensionHeader>): Boolean {\n        logger.log(\"Client negotiation\")\n        return true\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Darwin Engine Dependency for iOS\nDESCRIPTION: Adds the Darwin engine dependency to the iosMain source set, providing iOS-specific HTTP implementation for Ktor client.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-multiplatform-application.md#2025-04-09_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\niosMain.dependencies {\n    implementation(libs.ktor.client.darwin)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CachingHeaders Plugin Globally in Ktor\nDESCRIPTION: This snippet shows how to install and configure the CachingHeaders plugin on the application level to add Cache-Control headers with max-age option for plain text and HTML content types.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-caching-headers.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CachingHeaders) {\n    options { call, outgoingContent ->\n        when (outgoingContent.contentType?.withoutParameters()) {\n            ContentType.Text.Plain, ContentType.Text.Html -> {\n                CachingOptions(\n                    cacheControl = CacheControl.MaxAge(\n                        maxAgeSeconds = 24 * 60 * 60,\n                        visibility = CacheControl.Visibility.Public,\n                        mustRevalidate = true\n                    )\n                )\n            }\n            else -> null\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Run Task\nDESCRIPTION: Gradle configuration for the run task to execute the servlet application\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-war.md#2025-04-09_snippet_4\n\nLANGUAGE: Groovy\nCODE:\n```\ntasks.withType<JavaExec> {\n    classpath += files(\"src/main/resources\")\n    jvmArgs = listOf(\"-Dio.ktor.development=true\")\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Log Message Format in Ktor\nDESCRIPTION: Demonstrates how to customize log message format to include response status, HTTP method, and User-Agent header information.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-call-logging.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CallLogging) {\n    format { call ->\n        val status = call.response.status()\n        val httpMethod = call.request.httpMethod.value\n        val userAgent = call.request.headers[\"User-Agent\"]\n        \"Status: $status, HTTP method: $httpMethod, User agent: $userAgent\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Application Module with Route Extensions in Ktor\nDESCRIPTION: Example of using Application extension functions for routes in the main module. This approach eliminates the need for a routing block in the main module.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-application-structure.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Application.module() {\n    // Init....\n    customerRoutes()\n    orderRoutes()\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Form Authentication in Ktor\nDESCRIPTION: Code demonstrating how to protect specific routes with form authentication using the authenticate function and how to retrieve the authenticated principal.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-form-based-auth.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nrouting {\n    post(\"/login\") {\n        // ... handling login form submission\n    }\n    authenticate(\"auth-form\") {\n        get(\"/protected\") {\n            val principal = call.principal<UserIdPrincipal>()\n            call.respondText(\"Hello, ${principal?.name}!\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Articles in Ktor Route Handler\nDESCRIPTION: This snippet shows how to use the DAOFacade to retrieve all articles within a Ktor GET route handler. It calls the allArticles() function and passes the result to the FreeMarker template.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/db-persistence.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nget {\n    call.respond(FreeMarkerContent(\"index.ftl\", mapOf(\"articles\" to dao.allArticles())))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Transformation Plugin in Ktor Application\nDESCRIPTION: Shows how to use the data transformation plugin in a Ktor client application. This example demonstrates setting up and configuring the client with the custom data transformation plugin.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-custom-plugins.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Creating Root Layout Template in Ktor\nDESCRIPTION: Implementation of a root template class that defines the overall HTML structure with placeholders for header content and a child template.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-html-dsl.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LayoutTemplate: Template<HTML> {\n    val header = Placeholder<FlowContent>()\n    val content = TemplatePlaceholder<ArticleTemplate>()\n    override fun HTML.apply() {\n        body {\n            h1 {\n                insert(header)\n            }\n            insert(content)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Files from Static Serving in Ktor\nDESCRIPTION: This code demonstrates how to use the exclude() function in Ktor to prevent certain files from being served as static content. Excluded files will result in a 403 Forbidden response.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-static-content.md#2025-04-09_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nstaticFiles(\"/\") {\n    exclude { it.name.contains(\"secret\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Coroutines Versions and Libraries in Gradle\nDESCRIPTION: Specifies the kotlinx.coroutines version and defines library dependencies in the Gradle libraries versions file. These settings ensure consistent coroutines usage across the project.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-multiplatform-application.md#2025-04-09_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\n[versions]\ncoroutines = \"1.7.3\"\n\n[libraries]\nkotlinx-coroutines-core = { group = \"org.jetbrains.kotlinx\", name = \"kotlinx-coroutines-core\", version.ref = \"coroutines\" }\nkotlinx-coroutines-android = { group = \"org.jetbrains.kotlinx\", name = \"kotlinx-coroutines-android\", version.ref = \"coroutines\" }\n```\n\n----------------------------------------\n\nTITLE: Custom Web Application Directory Structure\nDESCRIPTION: Example directory structure of a custom web application served from resources, showing main.html as the entry point with CSS, JavaScript, and image assets.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-serving-spa.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nsample-web-app\n├── main.html\n├── ktor_logo.png\n├── css\n│   └──styles.css\n└── js\n    └── script.js\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Client Download File Sample via Gradle\nDESCRIPTION: Command to execute the Ktor client download file sample using Gradle. When run, this command executes the sample application which demonstrates downloading a file and saving it to the default temporary-file directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-download-file/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-download-file:run\n```\n\n----------------------------------------\n\nTITLE: Exposing Prometheus Metrics Endpoint in Ktor\nDESCRIPTION: Creates a dedicated route that exposes a metrics endpoint for Prometheus scraping. This endpoint returns the collected metrics in a format that Prometheus can understand and process.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-metrics-micrometer.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval appMicrometerRegistry = PrometheusMeterRegistry(PrometheusConfig.DEFAULT)\n\nfun main() {\n    embeddedServer(Netty, port = 8080, host = \"0.0.0.0\") {\n        install(MicrometerMetrics) {\n            registry = appMicrometerRegistry\n            // ...\n        }\n        routing {\n            get(\"/metrics\") {\n                call.respond(appMicrometerRegistry.scrape())\n            }\n        }\n    }.start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Headers for CORS in Ktor\nDESCRIPTION: Shows how to configure which response headers should be accessible to JavaScript in browsers through the Access-Control-Expose-Headers header.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-cors.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CORS) {\n    // ...\n    exposeHeader(\"X-My-Custom-Header\")\n    exposeHeader(\"X-Another-Custom-Header\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HikariCP DataSource for Connection Pooling\nDESCRIPTION: Implements a function to create a HikariDataSource for database connection pooling.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/db-connection-pooling-caching.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.zaxxer.hikari.*\n\nfun createHikariDataSource(\n    driverClassName: String,\n    jdbcURL: String\n) = HikariDataSource(HikariConfig().apply {\n    driverClassName = driverClassName\n    jdbcUrl = jdbcURL\n    maximumPoolSize = 3\n    isAutoCommit = false\n    transactionIsolation = \"TRANSACTION_REPEATABLE_READ\"\n    validate()\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Plugin in Ktor Application\nDESCRIPTION: Shows how to set up and use the authentication plugin in a Ktor client application. This example demonstrates configuring a client with the custom authentication plugin.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-custom-plugins.md#2025-04-09_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Adding HTML DSL Dependency in Ktor\nDESCRIPTION: Shows how to add the required dependency for HTML DSL in your Ktor project's build script.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-html-dsl.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<include from=\"lib.topic\" element-id=\"add_ktor_artifact\"/>\n```\n\n----------------------------------------\n\nTITLE: Serving Pre-Compressed Static Files in Ktor\nDESCRIPTION: This snippet shows how to configure Ktor to serve pre-compressed static files using the preCompressed() function. It allows serving .br or .gz versions of files if available.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-static-content.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nstaticFiles(\"/\") {\n    preCompressed(CompressedFileType.BROTLI, CompressedFileType.GZIP) {\n        files(\"js\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Coroutines Dependency to Common Source Set\nDESCRIPTION: Adds the kotlinx-coroutines-core dependency to the commonMain source set in the shared module. This enables using coroutines in shared code across platforms.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-multiplatform-application.md#2025-04-09_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\ncommonMain.dependencies {\n    implementation(libs.ktor.client.core)\n    implementation(libs.kotlinx.coroutines.core)\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Resource with Path Parameter in Ktor\nDESCRIPTION: Example of adding a path parameter to a resource class for capturing article IDs.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-resources.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n@Resource(\"/articles\")\nclass Articles() {\n    @Resource(\"{id}\")\n    class Id(val parent: Articles = Articles(), val id: Long)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Darwin Client Sample in Gradle\nDESCRIPTION: This command executes the Ktor Darwin client sample project using Gradle. It runs the release executable for the native target.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-engine-darwin/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-engine-darwin:runReleaseExecutableNative\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Server Project with Gradle\nDESCRIPTION: This command runs the 'tutorial-server-get-started' Gradle task, which starts the Ktor server. It should be executed from the repository's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/tutorial-server-get-started/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :tutorial-server-get-started:run\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Refresh in Ktor OAuth Client\nDESCRIPTION: This snippet demonstrates how to configure the refreshTokens callback to obtain a new access token using the refresh_token grant type.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-bearer-auth.md#2025-04-09_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Auth) {\n    oauth {\n        refreshTokens {\n            client.submitForm(\n                url = \"https://oauth2.googleapis.com/token\",\n                formParameters = Parameters.build {\n                    append(\"grant_type\", \"refresh_token\")\n                    append(\"client_id\", clientId)\n                    append(\"client_secret\", clientSecret)\n                    append(\"refresh_token\", oldTokens.refreshToken!!)\n                }\n            ) {\n                markAsRefreshTokenRequest()\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Session Authentication Provider in Ktor\nDESCRIPTION: Shows how to install and configure the session authentication provider in Ktor using the Authentication plugin.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-session-auth.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\nimport io.ktor.server.sessions.*\n//...\ninstall(Authentication) {\n    session<UserSession> {\n        // Configure session authentication\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests for Task Manager Application\nDESCRIPTION: This command runs all integration tests in the 'integration-test' module of the Task Manager application. It's used to verify the functionality of the entire application stack.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/tutorial-full-stack-task-manager/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :integration-test:test\n```\n\n----------------------------------------\n\nTITLE: Mitigating BREACH Attack in Ktor Compression\nDESCRIPTION: This example demonstrates how to mitigate the BREACH attack by disabling compression for cross-site requests based on the referrer header.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-compression.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Compression) {\n    gzip {\n        condition {\n            request.headers[HttpHeaders.Referrer]?.startsWith(\"https://my.domain/\") == true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Response Data in Ktor Client\nDESCRIPTION: This example demonstrates how to stream response data in chunks using HttpStatement and ByteReadChannel in Ktor client, saving the content to a file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-responses.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun downloadFileWithStreaming(client: HttpClient, url: String, fileName: String) {\n    val file = File(fileName)\n    client.prepareGet(url).execute { response ->\n        val channel = response.body<ByteReadChannel>()\n        val fileSize = response.contentLength()?.toString() ?: \"unknown\"\n        var offset = 0\n        do {\n            val packet = channel.readRemaining(DEFAULT_BUFFER_SIZE.toLong())\n            val bytes = packet.readBytes()\n            file.appendBytes(bytes)\n            if (!response.call.isActive) {\n                break\n            }\n            offset += bytes.size\n            println(\"Received $offset bytes from $fileSize\")\n        } while (!packet.isEmpty)\n        println(\"A file saved to ${file.path}\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Caching for Static Files in Ktor\nDESCRIPTION: This snippet shows how to configure the Cache-Control header for HTTP caching of static files in Ktor using the cacheControl() function. It sets different caching policies based on file extensions.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-static-content.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CachingHeaders) {\n    options { _, outgoingContent ->\n        when (outgoingContent.contentType?.withoutParameters()) {\n            ContentType.Text.CSS -> CachingOptions(CacheControl.MaxAge(maxAgeSeconds = 24 * 60 * 60))\n            ContentType.Application.JavaScript -> CachingOptions(CacheControl.MaxAge(maxAgeSeconds = 24 * 60 * 60))\n            else -> null\n        }\n    }\n}\nrouting {\n    staticFiles(\"/\", File(\"files\")) {\n        cacheControl {\n            when {\n                url.encodedPath.endsWith(\".css\") -> listOf(CacheControl.MaxAge(maxAgeSeconds = 24 * 60 * 60))\n                url.encodedPath.endsWith(\".js\") -> listOf(CacheControl.MaxAge(maxAgeSeconds = 24 * 60 * 60))\n                else -> emptyList()\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS App Entry Point\nDESCRIPTION: Implements the iOS application entry point, which serves as the main entry point for the iOS app. This code initializes the app structure and sets up the initial view.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-multiplatform-application.md#2025-04-09_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\nimport SwiftUI\n\n@main\nstruct iOSApp: App {\n    var body: some Scene {\n        WindowGroup {\n            ContentView()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Client for OAuth Requests in Ktor\nDESCRIPTION: Configuration for setting up an HTTP client with JSON content negotiation. This client will be used by the server to make requests to the OAuth provider.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-oauth.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.kotlinx.json.*\n\nval httpClient = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        json()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Request Configuration Sample\nDESCRIPTION: Gradle command to execute the client-configure-request sample application from the repository root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-configure-request/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-configure-request:run\n```\n\n----------------------------------------\n\nTITLE: Allowing Any Host for CORS in Ktor\nDESCRIPTION: Shows how to configure the CORS plugin to accept cross-origin requests from any host, which is useful for development but may be less secure for production.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-cors.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CORS) {\n    anyHost()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bearer Authentication Provider\nDESCRIPTION: Demonstrates how to configure the Bearer authentication provider with realm and token validation logic\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-bearer-auth.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Authentication) {\n    bearer {\n        realm = \"Access to the '/'\"\n        authenticate { bearerToken ->\n            if (bearerToken == \"abc123\") {\n                UserIdPrincipal(\"jetbrains\")\n            } else {\n                null\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Static Resources Demo\nDESCRIPTION: Gradle command to run the static resources sample project, which starts a server on port 8080 serving different types of static content.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/static-resources/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :static-resources:run\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Response Size for Compression in Ktor\nDESCRIPTION: This example demonstrates how to set a minimum response size for compression. Responses smaller than the specified size will not be compressed.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-compression.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n    install(Compression) {\n        deflate {\n            minimumSize(1024)\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Downloading File with Progress in Ktor Client\nDESCRIPTION: This example demonstrates how to download a file using Ktor client, saving the response as a ByteArray and displaying download progress.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-responses.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun downloadFile(client: HttpClient, url: String, fileName: String) {\n    val file = File(fileName)\n    val response = client.get(url) {\n        onDownload { bytesSentTotal, contentLength ->\n            println(\"Received $bytesSentTotal bytes from $contentLength\")\n        }\n    }\n    val responseBody: ByteArray = response.body()\n    file.writeBytes(responseBody)\n    println(\"A file saved to ${file.path}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PartialContent Plugin in Ktor\nDESCRIPTION: This snippet demonstrates how to install the PartialContent plugin in a Ktor application. It can be installed for all routes or for a specific route.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-partial-content.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.plugins.partialcontent.*\n\ninstall(PartialContent) {\n    // Configure plugin\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.plugins.partialcontent.*\n\nrouting {\n    route(\"/files\") {\n        install(PartialContent) {\n            // Configure plugin\n        }\n        // Handle requests\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS ContentView with Ktor Network Call\nDESCRIPTION: Implements the iOS ContentView that calls the shared greeting function. This Swift code integrates with Kotlin code, handles the loading state, and displays the result or error message.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-multiplatform-application.md#2025-04-09_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\nimport SwiftUI\nimport shared\n\nstruct ContentView: View {\n    @State private var text = \"Loading...\"\n\n    var body: some View {\n        ScrollView {\n            Text(text)\n        }\n        .padding()\n        .onAppear {\n            Greeting().greeting { result, error in\n                if let result = result {\n                    self.text = result\n                } else if let error = error {\n                    self.text = \"Error: \\(error)\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jackson Serializer for WebSockets in Ktor Server\nDESCRIPTION: This code snippet demonstrates how to configure the Jackson serializer for WebSockets. It assigns JacksonWebsocketContentConverter to the contentConverter property in the WebSockets configuration.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-serialization.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.serialization.jackson.*\n\ninstall(WebSockets) {\n    contentConverter = JacksonWebsocketContentConverter()\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Timeout Example with Gradle\nDESCRIPTION: Gradle command to execute the timeout demonstration project from the repository root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/timeout/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :timeout:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Session Header Server Demo Application\nDESCRIPTION: Command to execute the session-header-server demo application using Gradle. This launches the Ktor server that demonstrates custom header-based session management.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/session-header-server/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :session-header-server:run\n```\n\n----------------------------------------\n\nTITLE: Allowing Custom Header Prefixes for CORS in Ktor\nDESCRIPTION: Demonstrates how to allow headers with specific prefixes in cross-origin requests, useful for custom application-specific headers.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-cors.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CORS) {\n    allowHeadersPrefixed(\"custom-\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating List Template in Ktor\nDESCRIPTION: Implementation of a template for generating unordered lists with special formatting for the first item.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-html-dsl.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ULTemplate: Template<FlowContent> {\n    val items = PlaceholderList<ULItemTemplate>()\n    override fun FlowContent.apply() {\n        ul {\n            for (i in items) {\n                insert(i)\n            }\n        }\n    }\n}\n\nclass ULItemTemplate: Template<UL> {\n    val item = Placeholder<FlowContent>()\n    val first = Placeholder<Boolean>()\n    override fun UL.apply() {\n        li {\n            if (first.get()) {\n                b { insert(item) }\n            } else {\n                insert(item)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Project Command\nDESCRIPTION: Command to run the client-json sample project using Gradle wrapper\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-json/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :client-json:run\n```\n\n----------------------------------------\n\nTITLE: Installing Basic Authentication Provider in Ktor\nDESCRIPTION: Example showing how to install the Basic authentication provider in Ktor's Authentication plugin. Inside the authentication block, you configure the basic authentication mechanism.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-auth.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n// ...\ninstall(Authentication) {\n    basic {\n        // [[[Configure basic authentication|server-basic-auth.md]]]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Ktor HTTP Client with Automatic Resource Cleanup in Kotlin\nDESCRIPTION: Demonstrates the use of the 'use' function with a Ktor HTTP client to automatically close the client after executing the code block, ensuring proper resource cleanup.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-and-configure.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval status = HttpClient().use { client ->\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pebble Template Engine in Ktor\nDESCRIPTION: Demonstrates how to install and configure the Pebble plugin in a Ktor application to load templates from the classpath.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-pebble.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Pebble) {\n    templateDir = \"templates\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OkHttp Engine Dependency to Version Catalog\nDESCRIPTION: Shows how to add the OkHttp engine dependency to the Gradle version catalog for a Kotlin Multiplatform project.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-dependencies.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n[versions]\n# ...\nktor = \"2.3.3\"\n\n[libraries]\n# ...\nktor-client-core = { module = \"io.ktor:ktor-client-core\", version.ref = \"ktor\" }\nktor-client-okhttp = { module = \"io.ktor:ktor-client-okhttp\", version.ref = \"ktor\" }\n# ...\n\n```\n\n----------------------------------------\n\nTITLE: Receiving Deserialized Data from WebSocket in Ktor Server\nDESCRIPTION: This code demonstrates how to receive and deserialize data from a WebSocket using the receiveDeserialized function. It accepts a data class as a parameter for deserialization.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-serialization.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval received = receiveDeserialized<Customer>()\nprintln(received)\n// Customer(id=1, name=John)\nsendSerialized(received.copy(name = received.name.uppercase()))\n```\n\n----------------------------------------\n\nTITLE: Running the Ktor Application Server\nDESCRIPTION: Command for running the Ktor application with auto-reload enabled via Gradle.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/autoreload-embedded-server/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :autoreload-embedded-server:run\n```\n\n----------------------------------------\n\nTITLE: Signing Session Data for Security\nDESCRIPTION: Adds signing to session data to prevent unauthorized modification while still allowing users to see the content. Uses HmacSHA256 as the default authentication algorithm.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-sessions.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ncookie<UserSession>(\"user_session\") {\n    cookie.path = \"/\"\n    cookie.maxAgeInSeconds = 60\n    transform(SessionTransportTransformerMessageAuthentication(\n        hashKey = hex(\"00112233445566778899aabbccddeeff\")\n    ))\n    storage = SessionStorageMemory()\n}\n```\n\n----------------------------------------\n\nTITLE: Resource with Query Parameter in Ktor\nDESCRIPTION: Demonstrates creating a resource class with a query parameter for sorting articles.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-resources.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Resource(\"/articles\")\nclass Articles(val sort: String? = \"new\")\n```\n\n----------------------------------------\n\nTITLE: Running CORS Server Command for Ktor\nDESCRIPTION: Command to run the CORS server example which needs to be configured to allow cross-origin requests from any host.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-engine-js/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :cors:run\n```\n\n----------------------------------------\n\nTITLE: Setting Max Age for CORS Preflight Responses in Ktor\nDESCRIPTION: Shows how to configure the maximum time (in seconds) that the results of a preflight request can be cached, which can reduce the number of preflight requests needed.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-cors.md#2025-04-09_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CORS) {\n    maxAgeInSeconds = 3600\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection Settings in application.conf\nDESCRIPTION: Extracts database connection settings into a custom configuration group in the application.conf file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/db-connection-pooling-caching.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nstorage {\n    driverClassName = \"org.h2.Driver\"\n    jdbcURL = \"jdbc:h2:file:./build/db\"\n    ehcacheFilePath = ./build/ehcache\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Engine for HTTP Client in Kotlin\nDESCRIPTION: Demonstrates how to configure the Apache engine with custom settings, including timeouts, connection configuration, and SSL options. Apache supports HTTP/1.1.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-engines.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(Apache) {\n    engine {\n        // this: [ApacheEngineConfig](https://api.ktor.io/ktor-client/ktor-client-apache/io.ktor.client.engine.apache/-apache-engine-config/index.html)\n        followRedirects = true\n        socketTimeout = 10_000\n        connectTimeout = 10_000\n        connectionRequestTimeout = 20_000\n        customizeClient {\n            // this: HttpClientBuilder\n            setMaxConnTotal(1000)\n            setMaxConnPerRoute(100)\n        }\n        customizeRequest {\n            // this: RequestConfig.Builder\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CBOR Serializer for WebSockets in Ktor Server\nDESCRIPTION: This code demonstrates how to configure the CBOR serializer for WebSockets. It creates a KotlinxWebsocketSerializationConverter instance with the Cbor parameter and assigns it to the contentConverter property.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-serialization.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.serialization.kotlinx.cbor.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(Cbor)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ktor SSL Server with Gradle\nDESCRIPTION: Command to run the SSL-enabled Ktor server using Gradle. This executes the ssl-engine-main sample project.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/ssl-engine-main/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n./gradlew :ssl-engine-main:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor LDAP Authentication Application\nDESCRIPTION: Gradle command to run the LDAP authentication sample application, which will start the server on localhost:8080.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/auth-ldap/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :auth-ldap:run\n```\n\n----------------------------------------\n\nTITLE: Configuring CachingHeaders Plugin at Route Level in Ktor\nDESCRIPTION: This snippet demonstrates how to install and configure the CachingHeaders plugin for a specific route, adding caching headers only for the /index endpoint with a max-age of 10 minutes.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-caching-headers.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nrouting {\n    route(\"/index\") {\n        install(CachingHeaders) {\n            options {\n                CachingOptions(CacheControl.MaxAge(maxAgeSeconds = 600))\n            }\n        }\n        get {\n            call.respondText(\"This will be cached for 10 minutes\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Compression Conditions in Ktor\nDESCRIPTION: This snippet shows how to provide a custom condition for compression based on the request URI.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-compression.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Compression) {\n    gzip {\n        condition {\n            request.uri == \"/orders\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Form Authentication Sample\nDESCRIPTION: Gradle command to run the form authentication sample application. The application starts a server on localhost:8080 and accepts credentials jetbrains/foobar for authentication.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/auth-form-html-dsl/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :auth-form-html-dsl:run\n```\n\n----------------------------------------\n\nTITLE: Creating a Prometheus Registry for Micrometer Metrics in Ktor\nDESCRIPTION: Creates a PrometheusMeterRegistry instance that can be reused across the application. This registry is required for the MicrometerMetrics plugin to collect and expose metrics for Prometheus.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-metrics-micrometer.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval appMicrometerRegistry = PrometheusMeterRegistry(PrometheusConfig.DEFAULT)\n\nfun main() {\n    embeddedServer(Netty, port = 8080, host = \"0.0.0.0\") {\n        install(MicrometerMetrics) {\n            registry = appMicrometerRegistry\n            // ...\n        }\n    }.start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MockEngine for Testing in Kotlin\nDESCRIPTION: Demonstrates how to create a MockEngine instance with a handler that checks request parameters and responds with predefined JSON data for testing purposes.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-testing.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval mockEngine = MockEngine { request ->\n    assertEquals(\"https://example.org/users\", request.url.toString())\n    respond(\n        content = \"[{\\\"id\\\": 1, \\\"name\\\": \\\"Alice\\\"}, {\\\"id\\\": 2, \\\"name\\\": \\\"Bob\\\"}]\",\n        status = HttpStatusCode.OK,\n        headers = headersOf(HttpHeaders.ContentType, \"application/json\")\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Static Content from ZIP File in Ktor\nDESCRIPTION: This code shows how to use the staticZip() function to serve static content from a ZIP file in Ktor. It maps requests from the root URL '/' to the contents of the 'text-files.zip' file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-static-content.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(StaticContentKt) {\n    staticZip(\"text-files.zip\") {\n        root = \"/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Engine for HTTP Client in Kotlin\nDESCRIPTION: Demonstrates how to configure the Java engine with custom settings, including HTTP version, connect timeout, and SSL context. This engine requires Java 11 or higher.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-engines.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(Java) {\n    engine {\n        // this: [JavaHttpConfig](https://api.ktor.io/ktor-client/ktor-client-java/io.ktor.client.engine.java/-java-http-config/index.html)\n        config {\n            // this: HttpClient.Builder\n            // Configure version\n            version(HttpClient.Version.HTTP_2)\n        }\n        connectTimeout = 100_000\n        socketTimeout = 100_000\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a User Data Model in Kotlin\nDESCRIPTION: This snippet defines a simple data class for a User model to be used with the Velocity template.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-velocity.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name: String)\n```\n\n----------------------------------------\n\nTITLE: Starting WebSocket Server Command\nDESCRIPTION: Gradle command to start the Ktor WebSocket server component required for the example\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-websockets-serialization/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :server-websockets-serialization:run\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Compression Conditions\nDESCRIPTION: Example of how to specify custom conditions for frame compression using the compressIf method. Shows how to selectively compress only text frames.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-deflate.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncompressIf { frame -> \n    frame is Frame.Text\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Modifications to Static File Responses in Ktor\nDESCRIPTION: This code demonstrates how to use the modify() function in Ktor to apply custom modifications to static file responses. It adds a custom header to responses for files with the .js extension.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-static-content.md#2025-04-09_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nstaticFiles(\"/\") {\n    modify { file, call ->\n        if (file.extension == \"js\") {\n            call.response.headers.append(\"X-Custom-Header\", \"CustomValue\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote for Ktor Documentation\nDESCRIPTION: Command to add the original Ktor documentation repository as an upstream remote. This allows synchronizing with the main repository.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/CONTRIBUTING.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/ktorio/ktor-documentation.git\n```\n\n----------------------------------------\n\nTITLE: Implementing NotFound Event Handler in Ktor\nDESCRIPTION: Creates a plugin that raises custom NotFoundEvent when a 404 status code is encountered.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-events.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval ApplicationMonitoringPlugin = createApplicationPlugin(name = \"ApplicationMonitoringPlugin\") {\n    on(ResponseSent) { call ->\n        if (call.response.status()?.value == 404) {\n            application.monitor.raise(NotFoundEvent, call)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ContentEncoding with Custom Encoders in Ktor Client\nDESCRIPTION: This code snippet shows how to configure the ContentEncoding plugin with custom encoders. It enables 'deflate' and 'gzip' encodings with specific quality values.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-content-encoding.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(ContentEncoding) {\n    deflate(1.0F)\n    gzip(0.9F)\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Request Body as String in Ktor\nDESCRIPTION: Demonstrates how to receive a request body as a String value using the receive function in Ktor.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-request-validation.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npost(\"/string\") {\n    val body = call.receive<String>()\n    call.respondText(\"Successfully received $body\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WinHttp Client in Ktor\nDESCRIPTION: Demonstrates WinHttp engine configuration for Windows platforms with custom protocol version setting.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-engines.md#2025-04-09_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(WinHttp) {\n    engine {\n        protocolVersion = \"HTTP/1.1\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logback with STDOUT Appender in XML\nDESCRIPTION: This XML configuration sets up Logback with a STDOUT appender to output logs to the console. It defines the root logger level and appender settings.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-logging.md#2025-04-09_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <pattern>%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n    <root level=\"trace\">\n        <appender-ref ref=\"STDOUT\"/>\n    </root>\n    <logger name=\"org.eclipse.jetty\" level=\"INFO\"/>\n    <logger name=\"io.netty\" level=\"INFO\"/>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Creating Google Cloud Project\nDESCRIPTION: Command to create a new Google Cloud project and set it as the default project. Requires replacing the placeholder with a unique project ID.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/google-appengine-standard/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud projects create <unique-project-id> --set-as-default\n```\n\n----------------------------------------\n\nTITLE: Cloning Forked Ktor Documentation Repository\nDESCRIPTION: Command to clone the forked Ktor documentation repository to local machine. Requires Git to be installed and SSH key to be configured.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/CONTRIBUTING.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:YOUR-USERNAME/ktor-documentation.git\n```\n\n----------------------------------------\n\nTITLE: Running a Packaged Ktor Application with Command-line Arguments\nDESCRIPTION: Bash command to run a Ktor application packaged as a fat JAR while overriding the configured port using a command-line argument.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-run.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njava -jar sample-app.jar -port=8080\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed HTTP Methods for CORS in Ktor\nDESCRIPTION: Demonstrates how to specify which HTTP methods are allowed for cross-origin requests beyond the default GET, POST, and HEAD methods.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-cors.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CORS) {\n    allowMethod(HttpMethod.Options)\n    allowMethod(HttpMethod.Put)\n    allowMethod(HttpMethod.Patch)\n    allowMethod(HttpMethod.Delete)\n}\n```\n\n----------------------------------------\n\nTITLE: Running the client-download-file-range sample in Bash\nDESCRIPTION: Command to run the client-download-file-range sample, which demonstrates the Ktor client's ability to download files using HTTP range requests.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-download-file-range/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-download-file-range:run\n```\n\n----------------------------------------\n\nTITLE: Disabling JVM Metrics in Ktor's DropwizardMetrics Plugin\nDESCRIPTION: This code shows how to disable the default JVM metrics that are exposed by the DropwizardMetrics plugin in Ktor. It uses the registerJvmMetricSets property to control this behavior.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-metrics-dropwizard.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(DropwizardMetrics) {\n    registerJvmMetricSets = false\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Common HTTP Client Function in Kotlin Multiplatform\nDESCRIPTION: This snippet defines an expect function for creating an HTTP client with optional configuration. It's placed in the common module to be implemented separately for each platform.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-engines.md#2025-04-09_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nexpect fun httpClient(config: HttpClientConfig<*>.() -> Unit = {}): HttpClient\n```\n\n----------------------------------------\n\nTITLE: Installing ContentNegotiation with JSON in Ktor\nDESCRIPTION: Installs the ContentNegotiation plugin with JSON serializer in a Ktor application.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-request-validation.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(ContentNegotiation) {\n    json()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Client for Android using OkHttp Engine\nDESCRIPTION: This code implements the httpClient function for Android, using the OkHttp engine. It configures retry on connection failure and sets a custom connect timeout.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-engines.md#2025-04-09_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.okhttp.*\nimport java.util.concurrent.TimeUnit\n\nactual fun httpClient(config: HttpClientConfig<*>.() -> Unit) = HttpClient(OkHttp) {\n   config(this)\n\n   engine {\n      config {\n         retryOnConnectionFailure(true)\n         connectTimeout(0, TimeUnit.SECONDS)\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Ktor Server HOCON Configuration\nDESCRIPTION: HOCON configuration file for Ktor server settings including port and host\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-engines.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nktor {\n    deployment {\n        port = 8080\n        port = ${?PORT}\n    }\n    application {\n        modules = [ com.example.ApplicationKt.module ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing watchOS Target Presets in Markdown\nDESCRIPTION: Presents the target presets for watchOS platforms in a markdown list format, covering various ARM and x86/x64 architectures including simulator targets.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-platforms.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<list>\n    <li>\n        <code>watchosArm32</code>\n    </li>\n    <li>\n        <code>watchosArm64</code>\n    </li>\n    <li>\n        <code>watchosX86</code>\n    </li>\n    <li>\n        <code>watchosX64</code>\n    </li>\n    <li>\n        <code>watchosSimulatorArm64</code>\n    </li>\n</list>\n```\n\n----------------------------------------\n\nTITLE: Creating Digest Function for UserHashedTableAuth in Kotlin\nDESCRIPTION: This code creates a digest function using SHA-256 algorithm for use with UserHashedTableAuth in Ktor.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-basic-auth.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval digester = getDigestFunction(\"SHA-256\") { \"ktor${it.length}\" }\n```\n\n----------------------------------------\n\nTITLE: Creating a Serializable Data Class for WebSockets in Ktor Server\nDESCRIPTION: This snippet shows how to create a serializable data class for use with WebSockets serialization. It includes the @Serializable annotation required for kotlinx.serialization.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-serialization.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable\ndata class Customer(val id: Int, val name: String)\n```\n\n----------------------------------------\n\nTITLE: Starting the download-file server sample in Bash\nDESCRIPTION: Command to start the download-file server sample, which is a prerequisite for running the client downloader.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-download-file-range/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :download-file:run\n```\n\n----------------------------------------\n\nTITLE: Configuring Gson Serializer for WebSockets in Ktor Server\nDESCRIPTION: This snippet shows how to configure the Gson serializer for WebSockets. It assigns GsonWebsocketContentConverter to the contentConverter property in the WebSockets configuration.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-serialization.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.serialization.gson.*\n\ninstall(WebSockets) {\n    contentConverter = GsonWebsocketContentConverter()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Client with Apache Engine in Kotlin\nDESCRIPTION: Creates a Ktor HTTP client using the Apache engine which supports HTTP/1.1. Apache is available for JVM platforms.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-engines.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(Apache)\n```\n\n----------------------------------------\n\nTITLE: Receiving and Validating Byte Array in Ktor\nDESCRIPTION: Shows how to receive data as a byte array and validate it using custom validation rules in Ktor.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-request-validation.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\npost(\"/byteArray\") {\n    val body = call.receive<ByteArray>()\n    call.respondText(\"Successfully received ${body.decodeToString()}\")\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(RequestValidation) {\n    validate(\"custom-length-validation\") { body: ByteArray ->\n        if (body.size < 5) {\n            ValidationResult.Invalid(\"Request body should contain at least 5 bytes\")\n        } else if (body.decodeToString().contains(\"ktor\")) {\n            ValidationResult.Valid\n        } else {\n            ValidationResult.Invalid(\"Request body should contain 'ktor'\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxy Using JVM Proxy Class\nDESCRIPTION: JVM-specific implementation for configuring HTTP proxy using the Java Proxy class with InetSocketAddress.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-proxy.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient() {\n    engine {\n        proxy = Proxy(Proxy.Type.HTTP, InetSocketAddress(\"sample-proxy-server\", 3128))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Netty HTTP/2 Dependencies in Gradle\nDESCRIPTION: Gradle configuration that adds the necessary dependencies for enabling HTTP/2 in a Ktor application using the Netty engine with OpenSSL bindings through tcnative.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-http2.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval tcnativeVersion = \"2.0.54.Final\"\nval tcnativeClassifier = when {\n    System.getProperty(\"os.name\").contains(\"Windows\") -> \"windows-x86_64\"\n    System.getProperty(\"os.name\").contains(\"Mac\") -> \"osx-x86_64\"\n    System.getProperty(\"os.name\").contains(\"Linux\") -> \"linux-x86_64\"\n    else -> error(\"Unsupported OS\")\n}\n\ndependencies {\n    // ...\n    implementation(\"io.netty:netty-tcnative:$tcnativeVersion:$tcnativeClassifier\")\n    implementation(\"io.netty:netty-tcnative-boringssl-static:$tcnativeVersion:$tcnativeClassifier\")\n    implementation(\"io.netty:netty-tcnative-boringssl-static:$tcnativeVersion\")\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Object Assign License Header\nDESCRIPTION: MIT license header for the object-assign utility created by Sindre Sorhus\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/single-page-application/react-app/static/js/main.1ab8e223.js.LICENSE.txt#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Extension Class\nDESCRIPTION: Shows the initial class definition for a frame logging WebSocket extension.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-extensions.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FrameLoggerExtension(val logger: Logger) : WebSocketExtension<FrameLogger.Config> {\n```\n\n----------------------------------------\n\nTITLE: Configuring File Extension Fallbacks for Static Resources in Ktor\nDESCRIPTION: This snippet shows how to configure Ktor to add file extensions when searching for static resources. It allows serving 'index.html' when '/index' is requested.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-static-content.md#2025-04-09_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nstaticResources(\"/\", \"static\") {\n    extensions(\"html\")\n}\n```\n\n----------------------------------------\n\nTITLE: React JSX Runtime License Header\nDESCRIPTION: MIT license header for React JSX Runtime v17.0.2 production build\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/single-page-application/react-app/static/js/main.1ab8e223.js.LICENSE.txt#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/** @license React v17.0.2\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Headers in Ktor\nDESCRIPTION: Demonstrates how to configure the ConditionalHeaders plugin in a Ktor application to add Etag and Last-Modified headers for CSS content. The example shows version configuration using both EntityTagVersion and LastModifiedVersion.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-conditional-headers.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(ConditionalHeaders) {\n    version { call, content ->\n        when (call.request.local.uri) {\n            \"/styles.css\" -> listOf(\n                EntityTagVersion(\"abc\"),\n                LastModifiedVersion(Date(1577881200000))\n            )\n            else -> emptyList()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gson Serializer in Ktor Client\nDESCRIPTION: Example of registering the Gson serializer for JSON processing in a Ktor client.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-serialization.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.gson.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        gson()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating String Request Body in Ktor\nDESCRIPTION: Shows how to validate a request body representing a String value using the RequestValidation plugin in Ktor.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-request-validation.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(RequestValidation) {\n    validate<String> { body ->\n        if (body.length < 3) {\n            ValidationResult.Invalid(\"Text length should be at least 3 symbols\")\n        } else ValidationResult.Valid\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authorization Header Example\nDESCRIPTION: Example of Authorization header containing Base64 encoded credentials\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-basic-auth.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAuthorization: Basic amV0YnJhaW5zOmZvb2Jhcg\n```\n\n----------------------------------------\n\nTITLE: Tomcat Dockerfile for WAR Deployment\nDESCRIPTION: Dockerfile configuration for deploying WAR archive to Tomcat container\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-war.md#2025-04-09_snippet_7\n\nLANGUAGE: Docker\nCODE:\n```\nFROM tomcat:10-jdk11\nCOPY ./build/libs/tomcat-war.war /usr/local/tomcat/webapps/ROOT.war\n```\n\n----------------------------------------\n\nTITLE: Creating User Session Data Class\nDESCRIPTION: Defines a data class for storing user session information.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-session-auth.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class UserSession(val name: String)\n```\n\n----------------------------------------\n\nTITLE: Using Named Rate Limiters with Specific Routes\nDESCRIPTION: Example showing how to apply a named rate limiter to specific routes, using the RateLimitName to reference a previously registered limiter named 'protected'.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-rate-limit.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nrouting {\n    get(\"/\") {\n        call.respondText(\"Public route\")\n    }\n    \n    rateLimit(RateLimitName(\"protected\")) {\n        get(\"/protected-by-name\") {\n            call.respondText(\"Protected by name route\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Version Number Reference\nDESCRIPTION: Inline code references to version numbers throughout the documentation.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/releases.md#2025-04-09_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n`kotlinx.coroutines`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`1.6.2`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`1.6.21`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`1.x.x`\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files from Local Filesystem in Ktor\nDESCRIPTION: This snippet demonstrates how to use the staticFiles() function to serve static files from a local filesystem directory in Ktor. It maps requests from '/resources' to the 'files' folder in the current working directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-static-content.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(StaticFiles) {\n    staticRootFolder = File(\"files\")\n    serveFilesFrom(\"/resources\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Serializer with Custom Options\nDESCRIPTION: Configuring the XML serializer with custom options to control XML serialization behavior.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-serialization.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.kotlinx.xml.*\nimport nl.adaptivity.xmlutil.*\nimport nl.adaptivity.xmlutil.serialization.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        xml(format = XML {\n            xmlDeclMode = XmlDeclMode.Charset\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webjars Plugin in Ktor Application\nDESCRIPTION: Demonstrates how to install and configure the Webjars plugin in a Ktor application, showing how to set a custom path for serving WebJars assets.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-webjars.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.webjars.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Webjars) {\n            path = \"/assets\" // defaults to /webjars\n        }\n    }.start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: TokenInfo Data Class Definition\nDESCRIPTION: Defines the data structure for storing OAuth token information.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-bearer-auth.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable\ndata class TokenInfo(\n    @SerialName(\"access_token\") val accessToken: String,\n    @SerialName(\"expires_in\") val expiresIn: Int,\n    val scope: String,\n    @SerialName(\"token_type\") val tokenType: String,\n    @SerialName(\"refresh_token\") val refreshToken: String? = null\n)\n```\n\n----------------------------------------\n\nTITLE: Mapping WebSocket API Events to Ktor Server Handlers\nDESCRIPTION: This example illustrates how standard WebSocket API events are mapped to Ktor server handlers. It includes handling for onConnect, onMessage, onClose, and onError events.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websockets.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nwebSocket(\"/echo\") {\n    println(\"onConnect\")\n    try {\n        for (frame in incoming){\n            val text = (frame as Frame.Text).readText()\n            println(\"onMessage\")\n            received += text\n            outgoing.send(Frame.Text(text))\n        }\n    } catch (e: ClosedReceiveChannelException) {\n        println(\"onClose ${closeReason.await()}\")\n    } catch (e: Throwable) {\n        println(\"onError ${closeReason.await()}\")\n        e.printStackTrace()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Extension Configuration\nDESCRIPTION: Shows the implementation of configuration class and factory reference for the WebSocket extension.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-extensions.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n    class Config {\n        lateinit var logger: Logger\n    }\n\n    /**\n    * A factory which can create a current extension instance. \n    */\n    override val factory: WebSocketExtensionFactory<Config, FrameLogger> = FrameLoggerExtension\n```\n\n----------------------------------------\n\nTITLE: Configuring DoubleReceive Cache Settings in Ktor\nDESCRIPTION: Configuration example showing how to disable raw request caching in the DoubleReceive plugin.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-double-receive.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(DoubleReceive) {\n    cacheRawRequest = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Type for Static Files in Ktor\nDESCRIPTION: This code demonstrates how to explicitly set the Content-Type header for static files in Ktor using the contentType() function. It sets text/html for 'html-file.txt' and uses default behavior for other files.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-static-content.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nstaticFiles(\"/\") {\n    contentType { file, call ->\n        when {\n            file.extension == \"txt\" && file.name.startsWith(\"html\") -> ContentType.Text.Html\n            else -> null\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ProtoBuf Serializer with Custom Options\nDESCRIPTION: Configuring the ProtoBuf serializer with custom options to control ProtoBuf serialization behavior.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-serialization.md#2025-04-09_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.kotlinx.protobuf.*\nimport kotlinx.serialization.protobuf.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        protobuf(ProtoBuf {\n            encodeDefaults = true\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WebSocket Deflate Extension in Ktor\nDESCRIPTION: Basic installation and configuration of WebSocket Deflate extension with compression settings. Includes options for compression level and minimum size threshold for compression.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-deflate.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(WebSockets) {\n    extensions {\n        install(WebSocketDeflateExtension) {\n            /**\n             * Compression level to use for [java.util.zip.Deflater].\n             */\n            compressionLevel = Deflater.DEFAULT_COMPRESSION\n\n            /**\n             * Prevent compressing small outgoing frames.\n             */\n            compressIfBiggerThan(bytes = 4 * 1024)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cookies from Ktor Client\nDESCRIPTION: Using the cookies function to obtain all the cookies for a specified URL from the Ktor client.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-cookies.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclient.cookies(\"http://0.0.0.0:8080/\")\n```\n\n----------------------------------------\n\nTITLE: Adding MDC Context in Ktor Logging\nDESCRIPTION: Shows how to add query parameters to MDC (Mapped Diagnostic Context) for enhanced logging context.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-call-logging.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CallLogging) {\n    mdc(\"name-parameter\") { call ->\n        call.request.queryParameters[\"name\"]\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.slf4j.MDC\n// ...\nMDC.get(\"name-parameter\")\n```\n\n----------------------------------------\n\nTITLE: Installing ShutDownUrl Plugin in Kotlin\nDESCRIPTION: This Kotlin code snippet shows how to install and configure the ShutDownUrl plugin programmatically in a Ktor application. It sets the shutDownUrl property to specify the URL for shutting down the server.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-shutdown-url.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(ShutDownUrl.ApplicationCallPlugin) {\n    shutDownUrl = \"/ktor/application/shutdown\"\n    exitCodeSupplier = { 0 }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Realm for Basic Authentication in Ktor Client (Kotlin)\nDESCRIPTION: This snippet demonstrates how to configure the realm property for basic authentication. The realm is used to specify the protected area or resource being accessed.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-auth.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Auth) {\n    basic {\n        realm = \"Access to the '/' path\"\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Query Parameters in Ktor Client Request URL\nDESCRIPTION: This snippet shows how to add query parameters to a URL using the parameters property in a Ktor client request.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-requests.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval response: HttpResponse = client.get {\n    url {\n        protocol = URLProtocol.HTTPS\n        host = \"ktor.io\"\n        parameters.append(\"key1\", \"value1\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Bearer Tokens in Ktor Client\nDESCRIPTION: Demonstrates how to configure token loading functionality for Bearer authentication, including initial access and refresh tokens.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-bearer-auth.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Auth) {\n    bearer {\n        loadTokens {\n            // Load tokens from a local storage and return them as the 'BearerTokens' instance\n            BearerTokens(\"abc123\", \"xyz111\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Request Weights in Rate Limiter Configuration\nDESCRIPTION: Advanced rate limiter configuration that assigns different weights to requests based on the user, where requests from VIP users consume fewer tokens than regular users.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-rate-limit.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nregister {\n    rateLimiter(limit = 30, refillPeriod = 60.seconds)\n    requestKey { call ->\n        call.request.queryParameters[\"login\"]?.let { KeyWithWeight(it) } ?: DefaultKeyWithWeight\n    }\n    requestWeight { key ->\n        when (key) {\n            is KeyWithWeight -> if (key.user == \"vip\") 1 else 3\n            else -> 1\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cookie Storage in Ktor Client\nDESCRIPTION: Example of creating and using a custom cookie storage by implementing the CookiesStorage interface for the HttpCookies plugin.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-cookies.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    install(HttpCookies) {\n        storage = CustomCookiesStorage()\n    }\n}\n\npublic class CustomCookiesStorage : CookiesStorage {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Application Extension for Order Routes in Ktor\nDESCRIPTION: Extension function for Application that groups all order-related routes. This approach keeps routing organized by domain area.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-application-structure.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Application.orderRoutes() {\n    routing {\n        listOrdersRoute()\n        getOrderRoute()\n        totalizeOrderRoute()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Swagger UI Configuration in Ktor\nDESCRIPTION: This snippet shows how to customize the Swagger UI by applying specific configuration options including version selection and styling.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-swagger-ui.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Routing) {\n    swaggerUI(path = \"swagger\", swaggerFile = \"openapi/documentation.yaml\") {\n        version = \"4.15.5\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Serving a React Single-Page Application in Ktor\nDESCRIPTION: Configures Ktor to serve a React single-page application from a local 'react-app' directory. This uses the react() helper function that automatically looks for index.html as the default page.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-serving-spa.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.http.content.*\nimport io.ktor.server.routing.*\n\nfun Application.module() {\n    routing {\n        singlePageApplication {\n            react(\"react-app\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting URL Fragment in Ktor Client Request\nDESCRIPTION: This snippet demonstrates how to set a URL fragment using the fragment property in a Ktor client request.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-requests.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval response: HttpResponse = client.get {\n    url {\n        protocol = URLProtocol.HTTPS\n        host = \"ktor.io\"\n        fragment = \"fragment\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Protected Resource Response with Error Handling in Kotlin\nDESCRIPTION: This code demonstrates how to handle the response from a protected resource, including error handling for 401 Unauthorized responses.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-bearer-auth.md#2025-04-09_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval response: HttpResponse = client.get(\"https://www.googleapis.com/oauth2/v2/userinfo\")\nif (response.status.value == 401) {\n    val errorInfo = json.decodeFromString<ErrorInfo>(response.bodyAsText())\n    println(\"Error: ${errorInfo.error}\")\n    println(\"Error description: ${errorInfo.error_description}\")\n} else {\n    val userInfo = json.decodeFromString<UserInfo>(response.bodyAsText())\n    println(\"Hello, ${userInfo.name}!\")\n}\nresponse.close()\n```\n\n----------------------------------------\n\nTITLE: Creating Procfile for Heroku (Plain Text)\nDESCRIPTION: This Procfile specifies the command to start the Ktor application on Heroku. It points to the executable generated by the 'stage' task in the build directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/heroku.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nweb: ./build/install/ktor-get-started-sample/bin/ktor-get-started-sample\n```\n\n----------------------------------------\n\nTITLE: Adding SLF4J Android Library Dependency (Gradle Groovy)\nDESCRIPTION: This snippet shows how to add the SLF4J Android library dependency to a Gradle build script using Groovy syntax.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-logging.md#2025-04-09_snippet_4\n\nLANGUAGE: Groovy\nCODE:\n```\nimplementation \"org.slf4j:slf4j-android:$slf4j_version\"\n```\n\n----------------------------------------\n\nTITLE: Defining Order Routes in Ktor\nDESCRIPTION: Example of route functions for order endpoints in a separate file. Shows how to organize related routes together.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-application-structure.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Route.getOrderRoute() {\n    get(\"/order/{id}\") {\n\n    }\n}\n\nfun Route.totalizeOrderRoute() {\n    get(\"/order/{id}/total\") {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Modules in Ktor using application.yaml\nDESCRIPTION: This snippet shows how to configure and load multiple modules in a Ktor application using the application.yaml file. It demonstrates referencing modules by their fully qualified names in YAML format.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-modules.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nktor:\n  application:\n    modules:\n      - com.example.ApplicationKt.module1\n      - com.example.ApplicationKt.module2\n      - org.sample.SampleKt.module3\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Protocols\nDESCRIPTION: Example showing how to modify the list of WebSocket protocols using the configureProtocols method. Demonstrates clearing and adding new protocols.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-deflate.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nconfigureProtocols { protocols ->\n    protocols.clear()\n    protocols.add(...)\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Resources with LDAP Authentication in Ktor\nDESCRIPTION: This Kotlin snippet demonstrates how to protect specific routes using LDAP authentication and retrieve the authenticated user's principal in a Ktor application.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-ldap.md#2025-04-09_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nrouting {\n    authenticate(\"auth-ldap\") {\n        get(\"/hello\") {\n            val principal = call.principal<UserIdPrincipal>()!!\n            call.respondText(\"Hello, ${principal.name}!\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication in Ktor Client\nDESCRIPTION: Code showing how to configure basic authentication provider with credentials and realm settings\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-basic-auth.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Auth) {\n    basic {\n        // ...\n        sendWithoutRequest { request ->\n            request.url.host == \"0.0.0.0\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Port for Heroku in application.conf (HOCON)\nDESCRIPTION: This snippet demonstrates how to configure the port in the application.conf file to use the PORT environment variable provided by Heroku. It uses HOCON syntax to set a default port and override it with the environment variable if available.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/heroku.md#2025-04-09_snippet_1\n\nLANGUAGE: hocon\nCODE:\n```\nktor {\n    deployment {\n        port = 8080\n        port = ${?PORT}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Form Parameters with Ktor Client\nDESCRIPTION: This snippet demonstrates how to submit form parameters using the submitForm function in a Ktor client request. It shows how to set the URL and form parameters.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-requests.md#2025-04-09_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval response = client.submitForm(\n    url = \"https://my-api.com/login\",\n    formParameters = parameters {\n        append(\"username\", \"jetbrains\")\n        append(\"password\", \"foobar\")\n        append(\"rememberMe\", \"true\")\n    }\n) {\n    onUpload { bytesSentTotal, contentLength ->\n        println(\"Sent $bytesSentTotal bytes from $contentLength\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Configuration Class in Kotlin\nDESCRIPTION: This code defines a configuration class inside a plugin's class to allow for flexible configuration of the plugin. It includes properties for the header name and value.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins-base-api.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Configuration {\n    var name = \"X-Custom-Header\"\n    var value = \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenAPI Generation in Ktor\nDESCRIPTION: Demonstrates how to customize the OpenAPI documentation generation by specifying configuration options within the openAPI block.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-openapi.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nopenAPI(path = \"openapi\") {\n    swaggerFile = \"openapi/documentation.yaml\"\n    codegen = StaticHtml2Codegen()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sessions Plugin\nDESCRIPTION: Demonstrates installation and configuration of the Sessions plugin with cookie settings.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-session-auth.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Sessions) {\n    cookie<UserSession>(\"user_session\") {\n        cookie.path = \"/\"\n        cookie.maxAgeInSeconds = 600\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating JWT Payload in Ktor\nDESCRIPTION: This snippet demonstrates how to validate the JWT payload using the 'validate' function in Ktor. It checks a custom 'username' claim and returns a JWTPrincipal on successful authentication.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-jwt.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\njwt {\n    verifier(jwkProvider, issuer) {\n        acceptLeeway(3)\n    }\n    validate { credential ->\n        if (credential.payload.getClaim(\"username\").asString() != \"\") {\n            JWTPrincipal(credential.payload)\n        } else {\n            null\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Auth Plugin in Ktor Client (Kotlin)\nDESCRIPTION: This snippet demonstrates how to install the Auth plugin in a Ktor client configuration block. It sets up the basic structure for configuring authentication.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-auth.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.auth.*\n//...\nval client = HttpClient(CIO) {\n    install(Auth) {\n        // Configure authentication\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Application via Gradle\nDESCRIPTION: Executes the Gradle task to deploy the application to Google App Engine.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/google-app-engine.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew appengineDeploy\n```\n\n----------------------------------------\n\nTITLE: Receiving Raw Response Body as ByteArray in Ktor\nDESCRIPTION: This code shows how to receive the raw response body as a ByteArray using the Ktor client.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-responses.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval response: HttpResponse = client.get(\"https://ktor.io/\")\nval responseBody: ByteArray = response.body()\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Event in Ktor\nDESCRIPTION: Creates a custom NotFoundEvent that accepts ApplicationCall as a parameter for monitoring 404 responses.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-events.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval NotFoundEvent = EventDefinition<ApplicationCall>()\n```\n\n----------------------------------------\n\nTITLE: Handling ApplicationStopped Event in Ktor\nDESCRIPTION: Shows how to subscribe to and handle the ApplicationStopped lifecycle event.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-events.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        val client = HttpClient()\n        monitor.subscribe(ApplicationStopped) {\n            client.close()\n            log.info(\"Application stopped: cleaning up...\")\n        }\n    }.start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: Closing a Ktor HTTP Client in Kotlin\nDESCRIPTION: Shows how to properly close a Ktor HTTP client to free up resources like threads, connections, and coroutine scopes after use.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-and-configure.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclient.close()\n```\n\n----------------------------------------\n\nTITLE: Including WebJars Assets in HTML\nDESCRIPTION: Shows how to reference WebJars assets in HTML files after configuring the plugin, using Bootstrap CSS as an example.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-webjars.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/webjars/bootstrap/css/bootstrap.min.css\">\n</head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Plugin in Ktor Client (Kotlin)\nDESCRIPTION: This snippet shows how to configure the Logging plugin in a Ktor client. It sets the logger, logging level, request filter, and header sanitization.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-logging.md#2025-04-09_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    install(Logging) {\n        logger = Logger.DEFAULT\n        level = LogLevel.HEADERS\n        filter { request ->\n            request.url.host.contains(\"ktor.io\")\n        }\n        sanitizeHeader { header -> header == HttpHeaders.Authorization }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Plugin in Kotlin Gradle\nDESCRIPTION: Applies the Shadow plugin in the build.gradle.kts file to generate fat JARs for deployment.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/google-app-engine.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"jvm\") version \"1.9.10\"\n    id(\"com.github.johnrengelman.shadow\") version \"8.1.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Response to File using ByteReadChannel in Ktor\nDESCRIPTION: This snippet shows how to save a response body directly to a file using ByteReadChannel.copyAndClose() in Ktor client, reducing unnecessary allocations.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-responses.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclient.prepareGet(\"https://httpbin.org/bytes/$fileSize\").execute { httpResponse ->\n    val channel: ByteReadChannel = httpResponse.body()\n    channel.copyAndClose(file.writeChannel())\n    println(\"A file saved to ${file.path}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Module Loading in Test Application\nDESCRIPTION: Example showing how to explicitly load a module in a test application using the application function. This approach allows manually adding modules to the test environment.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-testing.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test\nfun testModule1() = testApplication {\n    application {\n        module1()\n    }\n    // Make assertions\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OAuth Provider in Ktor Server\nDESCRIPTION: Code for installing the OAuth authentication provider with a specific provider name. This setup creates a foundation for the OAuth authentication flow.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-oauth.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.auth.*\n\ninstall(Authentication) {\n    oauth(\"auth-oauth-google\") {\n        // Configuration will be added here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Application Class in Gradle\nDESCRIPTION: Gradle configuration for specifying the main application class entry point for the Ktor application.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-fatjar.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\napplication {\n    mainClass.set(\"com.example.ApplicationKt\")\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Bearer Authentication in Ktor 2.0.0\nDESCRIPTION: The refreshTokens function now uses RefreshTokenParams as the lambda receiver instead of HttpResponse as a lambda argument in Ktor 2.0.0.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migration-to-20x.md#2025-04-09_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nbearer {\n    refreshTokens {  // it: HttpResponse\n        // ...\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbearer {\n    refreshTokens { // this: RefreshTokenParams\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Basic Request Information in Ktor\nDESCRIPTION: Shows how to access basic request information like URI using call.request property in a Ktor route handler.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-requests.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nrouting {\n    get(\"/\") {\n        val uri = call.request.uri\n        call.respondText(\"Request uri: $uri\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Ktor Fat JAR with Maven\nDESCRIPTION: This Bash command builds the Ktor application and creates a fat JAR using the Maven package goal. It should be executed in the project's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/maven-assembly-plugin.md#2025-04-09_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nmvn package\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL for Apache Engine in Ktor Client\nDESCRIPTION: This snippet shows how to configure SSL for the Apache engine in Ktor by passing an SSLContext to the engine configuration.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-ssl.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval apacheClient = HttpClient(Apache) {\n    engine {\n        customizeClient {\n            setSSLContext(sslSettings.sslContext)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Principal from Nested Authentication in Ktor\nDESCRIPTION: This snippet illustrates how to retrieve a principal from a specific provider in a nested authentication scenario. It uses the provider name 'auth-session' to get the principal for the topmost session provider.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-auth.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/admin\") {\n    val sessionPrincipal = call.principal<UserSession>(\"auth-session\")\n    if (sessionPrincipal != null) {\n        call.respondText(\"Hello, ${sessionPrincipal.name} (session)!\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Call ID from Header in Ktor Server\nDESCRIPTION: Example showing how to retrieve a call ID from the X-Request-Id header. This configuration enables the server to extract an existing request identifier from incoming requests.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-call-id.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CallId) {\n    retrieveFromHeader(HttpHeaders.XRequestId)\n}\n```\n\n----------------------------------------\n\nTITLE: Responding with a Velocity Template in Kotlin\nDESCRIPTION: This snippet demonstrates how to use a Velocity template for a specific route by passing VelocityContent to the call.respond method.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-velocity.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/\") {\n    val user = User(\"John\")\n    call.respond(VelocityContent(\"templates/index.vl\", mapOf(\"user\" to user)))\n}\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration Changes - Kotlin\nDESCRIPTION: Illustrates the renamed configuration functions in CORS plugin between versions. Functions are renamed for better clarity: host->allowHost, header->allowHeader, method->allowMethod.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migration-to-20x.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CORS) {\n    host(\"0.0.0.0:5000\")\n    header(HttpHeaders.ContentType)\n    method(HttpMethod.Options)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CORS) {\n    allowHost(\"0.0.0.0:5000\")\n    allowHeader(HttpHeaders.ContentType)\n    allowMethod(HttpMethod.Options)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Class in Gradle for Ktor Application\nDESCRIPTION: This snippet demonstrates how to configure the main application class in the build.gradle.kts file for a Ktor application.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/elastic-beanstalk.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\napplication {\n    mainClass.set(\"com.example.ApplicationKt\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Assembly Plugin for Ktor Fat JAR\nDESCRIPTION: This XML configuration block sets up the Maven Assembly plugin to create a fat JAR for a Ktor application. It specifies the main class, output name, and includes all dependencies.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/maven-assembly-plugin.md#2025-04-09_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-assembly-plugin</artifactId>\n    <version>3.1.0</version>\n    <configuration>\n        <descriptorRefs>\n            <descriptorRef>jar-with-dependencies</descriptorRef>\n        </descriptorRefs>\n        <archive>\n            <manifest>\n                <addClasspath>true</addClasspath>\n                <mainClass>${main.class}</mainClass>\n            </manifest>\n        </archive>\n    </configuration>\n    <executions>\n        <execution>\n            <id>assemble-all</id>\n            <phase>package</phase>\n            <goals>\n                <goal>single</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL for Jetty Engine in Ktor Client\nDESCRIPTION: This snippet demonstrates configuring SSL for the Jetty engine by creating an instance of SslContextFactory and passing an SSLContext to it.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-ssl.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval jettyClient = HttpClient(Jetty) {\n    engine {\n        sslContextFactory = sslSettings.sslContextFactory()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Login Form with Ktor HTML DSL\nDESCRIPTION: Example of generating an HTML form for authentication with input fields for username and password.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-html-dsl.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncall.respondHtml {\n    body {\n        form(action = \"/login\", encType = FormEncType.applicationXWwwFormUrlEncoded, method = FormMethod.post) {\n            p {\n                +(\"Username:\")\n                textInput(name = \"username\")\n            }\n            p {\n                +(\"Password:\")\n                passwordInput(name = \"password\")\n            }\n            p {\n                submitInput { value = \"Login\" }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Call ID with Counter in Ktor Server\nDESCRIPTION: Example showing how to generate a custom call ID using an atomic counter. This approach creates sequential identifiers that include a custom prefix for easier tracking.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-call-id.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CallId) {\n    val counter = atomic(0)\n    generate {\n        \"generated-call-id-${counter.getAndIncrement()}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML DSL Integration with CSS\nDESCRIPTION: Example showing how to create an HTML document using HTML DSL with references to the defined CSS styles.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-css-dsl.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/\") {\n    call.respondHtml {\n        head {\n            link(rel = \"stylesheet\", href = \"/styles.css\")\n        }\n        body {\n            h1(classes = \"page-title\") {\n                +\"Hello from Ktor!\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Bearer Authentication\nDESCRIPTION: Shows how to protect specific routes using Bearer authentication and access the authenticated principal\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-bearer-auth.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nrouting {\n    authenticate {\n        get(\"/\") {\n            val principal = call.principal<UserIdPrincipal>()\n            call.respondText(\"Hello, ${principal?.name}!\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google OAuth Provider in Ktor\nDESCRIPTION: Complete configuration for the OAuth provider, specifying authorization endpoints, client credentials, scopes, and callback URLs for Google OAuth integration.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-oauth.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Authentication) {\n    oauth(\"auth-oauth-google\") {\n        urlProvider = { \"http://localhost:8080/callback\" }\n        providerLookup = {\n            OAuthServerSettings.OAuth2ServerSettings(\n                name = \"google\",\n                authorizeUrl = \"https://accounts.google.com/o/oauth2/auth\",\n                accessTokenUrl = \"https://accounts.google.com/o/oauth2/token\",\n                requestMethod = HttpMethod.Post,\n                clientId = System.getenv(\"GOOGLE_CLIENT_ID\"),\n                clientSecret = System.getenv(\"GOOGLE_CLIENT_SECRET\"),\n                defaultScopes = listOf(\"https://www.googleapis.com/auth/userinfo.profile\"),\n                // This can be used instead of defaultScopes\n                // extraAuthParameters = listOf(\"scope\" to \"profile\")\n                // See: https://developers.google.com/identity/protocols/oauth2/web-server#creatingclient\n            )\n        }\n        client = httpClient\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Hub Credentials (Linux/macOS)\nDESCRIPTION: Set environment variables for Docker Hub credentials on Linux or macOS systems.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/docker.md#2025-04-09_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nexport DOCKER_HUB_USERNAME=yourHubUsername\nexport DOCKER_HUB_PASSWORD=yourHubPassword\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL for CIO Engine in Ktor Client\nDESCRIPTION: This code shows how to configure HTTPS settings for the CIO engine by using a TrustManager instance inside the https block to set up a certificate.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-ssl.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval cioClient = HttpClient(CIO) {\n    engine {\n        https {\n            trustManager = sslSettings.trustManager\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Token Generation - HS256\nDESCRIPTION: Generating JWT tokens using HS256 algorithm with shared secret.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-jwt.md#2025-04-09_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\npost(\"/login\") {\n    val user = call.receive<User>()\n    val token = JWT.create()\n        .withAudience(jwtAudience)\n        .withIssuer(jwtIssuer)\n        .withClaim(\"username\", user.username)\n        .withExpiresAt(Date(System.currentTimeMillis() + 60000))\n        .sign(Algorithm.HMAC256(jwtSecret))\n    call.respond(hashMapOf(\"token\" to token))\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Call ID with Custom Condition in Ktor Server\nDESCRIPTION: Example showing how to apply custom verification rules to call IDs. This configuration ensures that call IDs match specific criteria, in this case requiring a minimum length of 8 characters.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-call-id.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CallId) {\n    verify { callId ->\n        callId.isNotEmpty() && callId.length >= 8\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Serializer with kotlinx.serialization\nDESCRIPTION: Example of registering the JSON serializer using kotlinx.serialization in a Ktor client.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-serialization.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.kotlinx.json.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        json()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ktor Server YAML Configuration\nDESCRIPTION: YAML configuration file for Ktor server settings including port and host\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-engines.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nktor:\n  deployment:\n    port: 8080\n  application:\n    modules:\n      - com.example.ApplicationKt.module\n```\n\n----------------------------------------\n\nTITLE: Installing HttpRequestRetry Plugin in Ktor Client\nDESCRIPTION: Basic installation of the HttpRequestRetry plugin in a Ktor client configuration block using CIO engine.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-request-retry.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.*\n//...\nval client = HttpClient(CIO) {\n    install(HttpRequestRetry)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Port Mapping\nDESCRIPTION: Specify custom port mapping for the Docker container using the Ktor plugin configuration.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/docker.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nktor {\n    docker {\n        portMappings.set([\n            DockerPortMapping(\n                80,\n                8080,\n                DockerPortMappingProtocol.TCP\n            )\n        ])\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL for Android Engine in Ktor Client\nDESCRIPTION: This snippet demonstrates using the sslManager property for the Android engine to configure SSL settings by passing SSLSocketFactory to HttpsURLConnection.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-ssl.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval androidClient = HttpClient(Android) {\n    engine {\n        sslManager = { httpsURLConnection ->\n            httpsURLConnection.sslSocketFactory = sslSettings.sslSocketFactory\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing macOS Target Presets in Markdown\nDESCRIPTION: Displays the target presets for macOS platforms in a markdown list format, covering both x64 and ARM64 architectures.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-platforms.md#2025-04-09_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<list>\n    <li>\n        <code>macosX64</code>\n    </li>\n    <li>\n        <code>macosArm64</code>\n    </li>\n</list>\n```\n\n----------------------------------------\n\nTITLE: User Data Model Definition\nDESCRIPTION: Kotlin data class definition for the User model used in the template.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-thymeleaf.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name: String)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gson Serializer in ContentNegotiation (Kotlin)\nDESCRIPTION: Shows how to configure the Gson serializer for JSON handling in the ContentNegotiation plugin, including customization of Gson settings.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-serialization.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(ContentNegotiation) {\n    gson {\n        setPrettyPrinting()\n        disableHtmlEscaping()\n        setLenient()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling POST Request with DoubleReceive in Ktor\nDESCRIPTION: Example demonstrating how to receive request body in a POST route handler after it has been consumed by another plugin.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-double-receive.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npost(\"/\") {\n    val text = call.receiveText()\n    call.respondText(\"Request body: $text\")\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Mustache Template Response in Ktor Route\nDESCRIPTION: This snippet demonstrates how to use the Mustache template within a Ktor route, responding with MustacheContent that includes the template name and model data.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-mustache.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nrouting {\n    get(\"/\") {\n        call.respond(MustacheContent(\"index.hbs\", mapOf(\"user\" to User(\"John\"))))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Modulus and Exponent from Public Key\nDESCRIPTION: Command to display information about the public key, including the modulus and exponent, in a human-readable format using OpenSSL.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/rsa-keys-generation.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenssl pkey -in ktor.spki -pubin -noout -text\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Serializer for WebSockets in Ktor Client\nDESCRIPTION: This snippet illustrates how to register the XML serializer for WebSockets in Ktor Client using a KotlinxWebsocketSerializationConverter instance with the XML parameter.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-websocket-serialization.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport nl.adaptivity.xmlutil.serialization.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(XML)\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Call ID in Specific Response Header in Ktor Server\nDESCRIPTION: Example showing how to send a call ID in a specific header. This configuration ensures the client receives the call ID for tracking purposes.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-call-id.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CallId) {\n    replyToHeader(HttpHeaders.XRequestId)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Directory-based Session Storage\nDESCRIPTION: Shows how to configure directory-based storage for server-side session data, which stores session information in files under a specified directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-sessions.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nheader<CartSession>(\"cart_session\") {\n    storage = directorySessionStorage(File(\"build/.sessions\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Writing UTF-8 String to Socket in Ktor\nDESCRIPTION: This code shows how to write a line of UTF-8 characters to a ByteWriteChannel in Ktor.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-sockets.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\noutput.writeStringUtf8(\"$line\\n\")\noutput.flush()\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL for Java Engine in Ktor Client\nDESCRIPTION: This code configures SSL for the Java engine in Ktor client by passing an SSLContext to the sslContext function inside the config block.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-ssl.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval javaClient = HttpClient(Java) {\n    engine {\n        config {\n            sslContext(sslSettings.sslContext)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mustache Template in HTML\nDESCRIPTION: This snippet shows the content of a Mustache template file 'index.hbs' located in the resources/templates directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-mustache.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<body>\n<h1>Hello, {{user.name}}!</h1>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Location to Resources Plugin Migration - Ktor 2.2.x vs 3.0.x\nDESCRIPTION: Compares the implementation of type-safe routing using the Locations plugin in Ktor 2.2.x versus the Resources plugin in Ktor 3.0.x, showing necessary import and class definition changes.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migrating-3.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.locations.*\n\n@Location(\"/articles\")\nclass article(val value: Int)\n\nfun Application.module() {\n    install(Locations)\n    routing {\n        get<article> {\n            // Get all articles ...\n            call.respondText(\"List of articles\")\n        }\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.resources.Resource\nimport io.ktor.server.resources.*\n\n@Resource(\"/articles\")\nclass Articles(val value: Int)\n\nfun Application.module() {\n    install(Resources)\n    routing {\n        get<Articles> {\n            // Get all articles ...\n            call.respondText(\"List of articles\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating HttpResponseValidator in Ktor 2.0.0\nDESCRIPTION: The handleResponseException function is replaced with handleResponseExceptionWithRequest in Ktor 2.0.0, providing access to HttpRequest for additional information in exceptions.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migration-to-20x.md#2025-04-09_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nHttpResponseValidator {\n    handleResponseException { exception ->\n        // ...\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nHttpResponseValidator {\n    handleResponseExceptionWithRequest { exception, request ->\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Logging Plugin in Ktor HTTP Client in Kotlin\nDESCRIPTION: Shows how to install the Logging plugin for a Ktor HTTP client to enable HTTP call logging. This is added in the client configuration block using the install function.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-and-configure.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    install(Logging)\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Raw Request Payload as String\nDESCRIPTION: Demonstrates receiving raw request payload as a String using call.receive<String>() or receiveText().\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-requests.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npost(\"/\") {\n    val text = call.receiveText()\n    call.respondText(\"Request body: $text\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Basic Authentication Provider in Kotlin\nDESCRIPTION: This snippet demonstrates how to install the basic authentication provider in a Ktor server application. It shows the basic structure of the installation block where configuration can be added.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-basic-auth.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n// ...\ninstall(Authentication) {\n    basic {\n        // Configure basic authentication\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Caching with Ehcache in Kotlin\nDESCRIPTION: Creates a DAOFacadeCacheImpl class that implements caching using Ehcache for database operations.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/db-connection-pooling-caching.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.ehcache.config.builders.*\nimport org.ehcache.CacheManager\n\nclass DAOFacadeCacheImpl(\n    private val delegate: DAOFacade,\n    storagePath: String\n) : DAOFacade {\n    private val cacheManager: CacheManager = CacheManagerBuilder.newCacheManagerBuilder()\n        .with(CacheManagerBuilder.persistence(storagePath))\n        .withCache(\n            \"articles\",\n            CacheConfigurationBuilder.newCacheConfigurationBuilder(\n                Int::class.javaObjectType,\n                Article::class.java,\n                ResourcePoolsBuilder.newResourcePoolsBuilder()\n                    .heap(1000, EntryUnit.ENTRIES)\n                    .offheap(10, MemoryUnit.MB)\n                    .disk(100, MemoryUnit.MB, true)\n            )\n        )\n        .build(true)\n\n    private val articlesCache = cacheManager.getCache(\"articles\", Int::class.javaObjectType, Article::class.java)\n\n    override suspend fun allArticles(): List<Article> = delegate.allArticles()\n\n    override suspend fun article(id: Int): Article? = articlesCache[id] ?: delegate.article(id)?.also { articlesCache.put(id, it) }\n\n    override suspend fun addNewArticle(title: String, body: String): Article? =\n        delegate.addNewArticle(title, body)?.also { articlesCache.put(it.id, it) }\n\n    override suspend fun editArticle(id: Int, title: String, body: String): Boolean {\n        articlesCache.put(id, Article(id, title, body))\n        return delegate.editArticle(id, title, body)\n    }\n\n    override suspend fun deleteArticle(id: Int): Boolean {\n        articlesCache.remove(id)\n        return delegate.deleteArticle(id)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Data Model in Kotlin\nDESCRIPTION: This snippet defines a simple data class 'User' with a 'name' property, used as a model for the Mustache template.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-mustache.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name: String)\n```\n\n----------------------------------------\n\nTITLE: Server Socket Binding in Coroutine Context\nDESCRIPTION: Shows how to properly bind a server socket within a coroutine context in Ktor 3.0.x, where the bind() function is now suspending for better support in JS and WasmJS environments.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migrating-3.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nrunBlocking {\n    val selectorManager = SelectorManager(Dispatchers.IO)\n    val serverSocket = aSocket(selectorManager).tcp().bind(\"127.0.0.1\", 9002)\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating HttpSend Plugin Usage in Ktor 2.0.0\nDESCRIPTION: The API of the HttpSend plugin is changed in Ktor 2.0.0, with changes to how the original call is accessed and executed.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migration-to-20x.md#2025-04-09_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nclient[HttpSend].intercept { originalCall, request ->\n    if (originalCall.something()) {\n        val newCall = execute(request)\n        // ...\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclient.plugin(HttpSend).intercept { request ->\n    val originalCall = execute(request)\n    if (originalCall.something()) {\n        val newCall = execute(request)\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Retry Policy\nDESCRIPTION: Configuring basic retry policy with server error handling and exponential backoff delay.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-request-retry.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nretryOnServerErrors(maxRetries = 5)\nexponentialDelay()\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirects in Ktor\nDESCRIPTION: Demonstrates how to create redirect responses with the respondRedirect function\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-responses.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/\") {\n    call.respondRedirect(\"/moved\", permanent = true)\n}\n\nget(\"/moved\") {\n    call.respondText(\"Moved content\")\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Call ID Response Header in Ktor Server\nDESCRIPTION: Example showing how to use ApplicationCall to send a call ID in a custom response header. This approach provides flexibility in how the call ID is included in the response.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-call-id.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nreply { call, callId ->\n    call.response.header(HttpHeaders.XRequestId, callId)\n}\n```\n\n----------------------------------------\n\nTITLE: DataTransformationBenchmarkPlugin Console Output\nDESCRIPTION: Console output showing the delay calculated by DataTransformationBenchmarkPlugin between receiving a request and reading the body.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/custom-plugin/README.md#2025-04-09_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nRequest URL: http://localhost:8080/transform-data\nRead body delay (ms): 52\n```\n\n----------------------------------------\n\nTITLE: Configuring Velocity Tools in Kotlin\nDESCRIPTION: This snippet shows how to add standard and custom Velocity tools using the VelocityTools plugin, including engine configuration and tool addition.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-velocity.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(VelocityTools) {\n    engine {\n        // Engine configuration\n        setProperty(\"resource.loader\", \"string\")\n        addProperty(\"resource.loader.string.name\", \"myRepo\")\n        addProperty(\"resource.loader.string.class\", StringResourceLoader::class.java.name)\n        addProperty(\"resource.loader.string.repository.name\", \"myRepo\")\n    }\n    addDefaultTools() // Add a default tool\n    tool(\"foo\", MyCustomTool::class.java) // Add a custom tool\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Streaming Responses in Ktor 2.0.0\nDESCRIPTION: Ktor 2.0.0 introduces 'prepare' prefix functions like prepareGet for handling streaming responses, replacing the generic arguments approach.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migration-to-20x.md#2025-04-09_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclient.get<HttpStatement>(\"https://ktor.io/\").execute { httpResponse ->\n    val channel: ByteReadChannel = httpResponse.receive()\n    while (!channel.isClosedForRead) {\n        // Read data\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclient.prepareGet(\"https://ktor.io/\").execute { httpResponse ->\n    val channel: ByteReadChannel = httpResponse.body()\n    while (!channel.isClosedForRead) {\n        // Read data\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugins in Ktor 2.0.0\nDESCRIPTION: In Ktor 2.0.0, indexed access for plugins is not available. Use the HttpClient.plugin function instead of HttpClient.get or indexed access.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migration-to-20x.md#2025-04-09_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nclient.get(HttpSend).intercept { ... }\n// or\nclient[HttpSend].intercept { ... }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclient.plugin(HttpSend).intercept { ... }\n```\n\n----------------------------------------\n\nTITLE: Uploading Files Using submitFormWithBinaryData in Ktor Client\nDESCRIPTION: Demonstrates how to upload a file using the submitFormWithBinaryData function. This approach automatically generates a boundary for the multipart form data and requires building form data using the formData function.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-requests.md#2025-04-09_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    expectSuccess = true\n}\n\nsuspend fun main() {\n    try {\n        val response = client.submitFormWithBinaryData(\n            url = \"http://localhost:8080/upload\",\n            formData = formData {\n                append(\"description\", \"Ktor logo\")\n                append(\"image\", File(\"ktor_logo.png\").readBytes(), Headers.build {\n                    append(HttpHeaders.ContentType, \"image/png\")\n                    append(HttpHeaders.ContentDisposition, \"filename=\\\"ktor_logo.png\\\"\")\n                })\n            }\n        )\n        println(\"Response status: ${response.status}\")\n    } finally {\n        client.close()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Pattern for Ktor Servlet\nDESCRIPTION: XML configuration for setting up the URL pattern mapping for the Ktor servlet\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-war.md#2025-04-09_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<servlet-mapping>\n    <servlet-name>KtorServlet</servlet-name>\n    <url-pattern>/</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Customizing Boundary and Content Type in MultiPartFormDataContent\nDESCRIPTION: Shows how to override the boundary and content type when using MultiPartFormDataContent for file uploads. This provides more control over the multipart form data structure.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-requests.md#2025-04-09_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nval multiPartFormDataContent = MultiPartFormDataContent(\n    formData {\n        // form data\n    }, boundary = \"my-special-boundary\", contentType = ContentType.MultiPart.FormData\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Route Handler for Resources in Ktor\nDESCRIPTION: Demonstrates how to define a basic route handler for a typed resource.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-resources.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@Resource(\"/articles\")\nclass Articles()\n\nfun Application.module() {\n    install(Resources)\n    routing {\n        get<Articles> { articles ->\n            // Get all articles ...\n            call.respondText(\"List of articles: $articles\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Request-Specific Timeout in Ktor Client\nDESCRIPTION: This snippet demonstrates how to set a timeout for a specific HTTP request using the HttpRequestBuilder.timeout property. This overrides any global timeout configuration for this specific request only.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-timeout.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclient.get(\"https://ktor.io/\") {\n    timeout {\n        requestTimeoutMillis = 5000\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Request Body in Ktor 2.0.0\nDESCRIPTION: The HttpRequestBuilder.body property is replaced with the HttpRequestBuilder.setBody function in Ktor 2.0.0 for setting the request body.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migration-to-20x.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclient.post(\"http://localhost:8080/post\") {\n    body = \"Body content\"\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclient.post(\"http://localhost:8080/post\") {\n    setBody(\"Body content\")\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Multipart Form Data Limit\nDESCRIPTION: Shows how to override the new default 50MB limit for binary and file items when receiving multipart form data in Ktor 3.0.x using the formFieldLimit parameter.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migrating-3.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval multipart = call.receiveMultipart(formFieldLimit = Long.MAX_VALUE)\n```\n\n----------------------------------------\n\nTITLE: Adding Headers to Ktor Client Request\nDESCRIPTION: This snippet shows how to add multiple headers to a Ktor client request using the headers function.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-requests.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval response: HttpResponse = client.get(\"https://ktor.io/\") {\n    headers {\n        append(HttpHeaders.Accept, \"text/html\")\n        append(HttpHeaders.Authorization, \"Basic $encodedCredentials\")\n        append(HttpHeaders.UserAgent, \"ktor client\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ktor Plugin\nDESCRIPTION: Shows how to install a custom plugin in a Ktor application's initialization code.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    embeddedServer(Netty, port = 8080, host = \"0.0.0.0\") {\n        install(SimplePlugin)\n    }.start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Velocity Template Loading in Kotlin\nDESCRIPTION: This snippet demonstrates how to configure the VelocityEngine to use templates from the classpath using a resource loader.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-velocity.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.velocity.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Velocity) {\n            setProperty(\"resource.loader\", \"class\")\n            setProperty(\"class.resource.loader.class\", \"org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader\")\n        }\n    }.start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers in Ktor with DefaultHeaders\nDESCRIPTION: Shows how to add a custom HTTP header that's not part of the standard HttpHeaders enum. The header name is specified as a string along with its value.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-default-headers.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(DefaultHeaders) {\n    header(\"Custom-Header\", \"Some value\")\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating LDAP User in Ktor\nDESCRIPTION: This Kotlin snippet shows how to authenticate an LDAP user using the ldapAuthenticate function in a Ktor application.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-ldap.md#2025-04-09_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nldapAuthenticate(credentials, \"ldap://localhost:389\", \"cn=%s,dc=ktor,dc=io\") {\n    if (it.name.isNotEmpty() && it.password.isNotEmpty()) {\n        UserIdPrincipal(it.name)\n    } else {\n        null\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Responses in Ktor 2.0.0\nDESCRIPTION: In Ktor 2.0.0, request functions return a HttpResponse object. The 'body' function with a generic argument is used to receive a specific type instance.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migration-to-20x.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval httpResponse: HttpResponse = client.get(\"https://ktor.io/\")\nval stringBody: String = httpResponse.receive()\nval byteArrayBody: ByteArray = httpResponse.receive()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval httpResponse: HttpResponse = client.get(\"https://ktor.io/\")\nval stringBody: String = httpResponse.body()\nval byteArrayBody: ByteArray = httpResponse.body()\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Attribute Key Usage in Ktor 3.0\nDESCRIPTION: Demonstrates the proper usage of AttributeKey with exact type matching, which is now required in Ktor 3.0.0 for type safety.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migrating-3.md#2025-04-09_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval attrs = Attributes()\n\nattrs.put(AttributeKey<Boolean>(\"key\"), true)\nattrs.getOrNull<Boolean>(\"key\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Bearer Token Sending\nDESCRIPTION: Demonstrates how to configure conditional token sending based on request properties.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-bearer-auth.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Auth) {\n    bearer {\n        // Load and refresh tokens ...\n        sendWithoutRequest { request ->\n            request.url.host == \"www.googleapis.com\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Request Logging Plugin\nDESCRIPTION: Creates a plugin that logs all incoming request URLs using the onCall handler.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval RequestLoggingPlugin = createApplicationPlugin(name = \"RequestLoggingPlugin\") {\n    onCall { call ->\n        val requestUrl = call.request.uri\n        println(\"Request URL: $requestUrl\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Configuration Class in Ktor\nDESCRIPTION: This code defines a configuration class for a custom header plugin. It contains properties for the header name and value that will be added to each response by the plugin.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CustomHeaderConfig {\n    var name: String = \"X-Custom-Header\"\n    var value: String = \"DefaultValue\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JTE Template Engine in Ktor\nDESCRIPTION: Shows how to install and configure the JTE plugin in a Ktor application using DirectoryCodeResolver for template loading from a templates directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-jte.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.jte.*\nimport gg.jte.ContentType\nimport gg.jte.resolve.DirectoryCodeResolver\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Jte) {\n            val codeResolver = DirectoryCodeResolver(\"templates\")\n            templateEngine = TemplateEngine.create(codeResolver, ContentType.Html)\n        }\n    }.start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request for Form Authentication in Ktor\nDESCRIPTION: Example of an HTTP POST request containing form data with username and password for authenticating a user in a Ktor server application.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-form-based-auth.md#2025-04-09_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:8080/login\nContent-Type: application/x-www-form-urlencoded\n\nusername=jetbrains&password=foobar\n```\n\n----------------------------------------\n\nTITLE: Caching Headers Configuration - Kotlin\nDESCRIPTION: Demonstrates the updated options function signature for CachingHeaders plugin configuration. The new version adds ApplicationCall parameter to the lambda.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migration-to-20x.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CachingHeaders) {\n    options { outgoingContent ->\n        // ...\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CachingHeaders) {\n    options { call, outgoingContent ->\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Connection Singleton\nDESCRIPTION: Implements a DatabaseSingleton object to manage database connections and transactions using Exposed.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/db-persistence.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.dao\n\nimport kotlinx.coroutines.Dispatchers\nimport org.jetbrains.exposed.sql.*\nimport org.jetbrains.exposed.sql.transactions.experimental.newSuspendedTransaction\nimport org.jetbrains.exposed.sql.transactions.transaction\n\nobject DatabaseSingleton {\n    private const val driverClassName = \"org.h2.Driver\"\n    private const val jdbcURL = \"jdbc:h2:file:./build/db\"\n\n    fun init() {\n        // Database.connect() does not actually open a connection, \n        // but rather creates a descriptor for later use\n        val database = Database.connect(jdbcURL, driverClassName)\n        transaction(database) {\n            SchemaUtils.create(Articles)\n        }\n    }\n    \n    suspend fun <T> dbQuery(block: suspend () -> T): T =\n        newSuspendedTransaction(Dispatchers.IO) { block() }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Custom Header Plugin in Kotlin\nDESCRIPTION: Creates a simple client plugin that adds a custom header to each request using the createClientPlugin function.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-custom-plugins.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.plugins\n\nimport io.ktor.client.plugins.api.*\n\nval CustomHeaderPlugin = createClientPlugin(\"CustomHeaderPlugin\") {\n    // Configure the plugin ...\n}\n```\n\n----------------------------------------\n\nTITLE: POST Route Handler\nDESCRIPTION: Demonstrates handling POST requests and receiving body content as an integer.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\npost(\"/\") {\n    val receivedNumber = call.receive<Int>()\n    call.respond(receivedNumber)\n}\n```\n\n----------------------------------------\n\nTITLE: Reading UTF-8 Line from Socket in Ktor\nDESCRIPTION: This code shows how to read a line of UTF-8 characters from a ByteReadChannel in Ktor.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-sockets.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval line = input.readUTF8Line()\n```\n\n----------------------------------------\n\nTITLE: JTE Template Example\nDESCRIPTION: Example of a JTE template file showing basic HTML structure with parameter binding.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-jte.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n@param data: String\n\n<html>\n    <body>\n        <h1>${data}</h1>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Validating Customer Object Properties in Ktor\nDESCRIPTION: Demonstrates how to validate the id property of a Customer object using the RequestValidation plugin in Ktor.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-request-validation.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(RequestValidation) {\n    validate<Customer> { customer ->\n        if (customer.id <= 0) {\n            ValidationResult.Invalid(\"Customer ID should be positive\")\n        } else ValidationResult.Valid\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Linux ARM64 Platform Reference\nDESCRIPTION: Code reference to the linuxArm64 platform that received client and server support in a patch release. This shows how architecture targets are displayed in the release notes.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/releases.md#2025-04-09_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<code>linuxArm64</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring Exposed and H2 Dependencies in Gradle Properties\nDESCRIPTION: Specifies the versions of Exposed and H2 libraries in the gradle.properties file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/db-persistence.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Status Code in Ktor\nDESCRIPTION: This code shows how to retrieve the status code from an HttpResponse object in Ktor.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-responses.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval response: HttpResponse = client.get(\"https://ktor.io/\")\nval statusCode: HttpStatusCode = response.status\nprintln(statusCode)\n```\n\n----------------------------------------\n\nTITLE: Installing Ktor Plugin in Gradle (Kotlin)\nDESCRIPTION: Add the Ktor plugin to the plugins block of the Gradle build file using Kotlin DSL.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/docker.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    id(\"io.ktor.plugin\") version \"%ktor_version%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Serializable Data Class with kotlinx.serialization\nDESCRIPTION: Example of a data class annotated with @Serializable for use with kotlinx.serialization in Ktor client.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-serialization.md#2025-04-09_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n\n----------------------------------------\n\nTITLE: FreeMarker Template Example\nDESCRIPTION: Example FreeMarker template showing user data rendering with a header and user information display.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-freemarker.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<body>\n    <h1>Hello, ${user.name}!</h1>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Multipart FileItem Provider Migration - Ktor 2.x.x vs 3.0.x\nDESCRIPTION: Compares the deprecated streamProvider() method to the new provider() method for handling multipart file uploads in Ktor 3.0.x, using ByteReadChannel for non-blocking file operations.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migrating-3.md#2025-04-09_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Application.main() {\n    routing {\n        post(\"/upload\") {\n            val multipart = call.receiveMultipart()\n            multipart.forEachPart { partData ->\n                if (partData is PartData.FileItem) {\n                    var fileName = partData.originalFileName as String\n                    val file = File(\"uploads/$fileName\")\n                    file.writeBytes(partData.streamProvider().readBytes())\n                }\n                // ...\n            }\n        }\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Application.main() {\n    routing {\n        post(\"/upload\") {\n            val multipart = call.receiveMultipart()\n            multipart.forEachPart { partData ->\n                if (partData is PartData.FileItem) {\n                    var fileName = partData.originalFileName as String\n                    val file = File(\"uploads/$fileName\")\n                    partData.provider().copyAndClose(file.writeChannel())\n                }\n                // ...\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Version Reference\nDESCRIPTION: Code reference to the Kotlin version that was upgraded in a patch release. This shows how version numbers are displayed in the release notes.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/releases.md#2025-04-09_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<code>1.8.22</code>\n```\n\n----------------------------------------\n\nTITLE: Defining Database Table Model with Exposed\nDESCRIPTION: Creates an Article model class that extends Table from Exposed to represent the database structure.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/db-persistence.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Adding SLF4J Android Library Dependency (Gradle Kotlin DSL)\nDESCRIPTION: This snippet shows how to add the SLF4J Android library dependency to a Gradle build script using Kotlin DSL.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-logging.md#2025-04-09_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nimplementation(\"org.slf4j:slf4j-android:$slf4j_version\")\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Hub Credentials (Windows)\nDESCRIPTION: Set environment variables for Docker Hub credentials on Windows systems.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/docker.md#2025-04-09_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nsetx DOCKER_HUB_USERNAME yourHubUsername\nsetx DOCKER_HUB_PASSWORD yourHubPassword\n```\n\n----------------------------------------\n\nTITLE: Setting Main Class in Maven\nDESCRIPTION: Configuration for setting EngineMain as the main class in Maven pom.xml\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-engines.md#2025-04-09_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<properties>\n    <main.class>io.ktor.server.netty.EngineMain</main.class>\n</properties>\n```\n\n----------------------------------------\n\nTITLE: Thymeleaf Template Example\nDESCRIPTION: Example HTML template file demonstrating Thymeleaf syntax with user data binding.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-thymeleaf.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<body>\n<h1>Hello, <span th:text=\"${user.name}\">Anonymous</span>!</h1>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to NotFound Event in Ktor\nDESCRIPTION: Demonstrates how to subscribe to and handle the custom NotFoundEvent.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-events.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        monitor.subscribe(NotFoundEvent) { call ->\n            log.info(\"404 Not Found: ${call.request.uri}\")\n        }\n    }.start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Code Formatting in Ktor Release Notes\nDESCRIPTION: This HTML code snippet demonstrates how inline code elements are formatted within release note descriptions. It shows the use of the code tag to highlight technical references like method names and target platforms.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/releases.md#2025-04-09_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<code>browserProductionWebpack</code>\n```\n\n----------------------------------------\n\nTITLE: Implementing DAO Interface for Article Operations\nDESCRIPTION: Creates a Data Access Object (DAO) interface with functions for CRUD operations on articles.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/db-persistence.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.dao\n\nimport com.example.models.Article\n\ninterface DAOFacade {\n    suspend fun allArticles(): List<Article>\n    suspend fun article(id: Int): Article?\n    suspend fun addNewArticle(title: String, body: String): Article?\n    suspend fun editArticle(id: Int, title: String, body: String): Boolean\n    suspend fun deleteArticle(id: Int): Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Making Type-Safe Requests to Article Resources\nDESCRIPTION: Example demonstrating how to make type-safe HTTP requests to article resources using the Resources plugin. It shows GET, POST, and PUT requests for CRUD operations on articles.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-resources.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    runBlocking {\n        val client = HttpClient(CIO) {\n            install(Resources)\n            install(ContentNegotiation) {\n                json()\n            }\n            defaultRequest {\n                url(\"http://localhost:8080/\")\n            }\n        }\n\n        // Get all articles\n        val articles: List<Article> = client.get(Articles()).body()\n        println(articles)\n\n        // Create a new article\n        val newArticle = client.post(Articles.New()) {\n            contentType(ContentType.Application.Json)\n            setBody(Article(0, \"Ktor client\", \"Ktor client is cool!\"))\n        }.body<Article>()\n        println(newArticle)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Ktor Application\nDESCRIPTION: Command to build and tag a Docker image for a Ktor application.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/docker.md#2025-04-09_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\ndocker build -t my-application .\n```\n\n----------------------------------------\n\nTITLE: Creating a Secure TLS Socket in Ktor Client\nDESCRIPTION: This code demonstrates how to create a secure TLS socket connection in Ktor client, including TLS configuration options.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-sockets.md#2025-04-09_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval socket = aSocket(selectorManager).tcp().connect(\"127.0.0.1\", 8443).tls {\n    trustManager = myCustomTrustManager\n    random = mySecureRandom\n    cipherSuites = listOf(\"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\")\n    serverName = \"example.com\"\n    certificates = myListOfCertificates\n    privateKey = myPrivateKey\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sessions Plugin for OAuth Token Storage in Ktor\nDESCRIPTION: Configuration for installing the Sessions plugin to store OAuth access tokens between requests. This setup uses a client-side cookie session with basic configurations.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-oauth.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.sessions.*\n\ninstall(Sessions) {\n    cookie<OAuthSession>(\"oauthSess\") {\n        cookie.path = \"/\"\n    }\n}\n\ndata class OAuthSession(val token: String)\n```\n\n----------------------------------------\n\nTITLE: Installing Monitoring Plugin in Ktor Application\nDESCRIPTION: Shows how to install the custom monitoring plugin in a Ktor application.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-events.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(ApplicationMonitoringPlugin)\n    }.start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ktor HTTP Client Engine Options in Kotlin\nDESCRIPTION: Demonstrates how to configure engine-specific options for a Ktor HTTP client using the engine function inside the client configuration block.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-and-configure.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    engine {\n        maxConnectionsCount = 1000\n        endpoint {\n            maxConnectionsPerRoute = 100\n            pipelineMaxSize = 20\n            keepAliveTime = 5000\n            connectTimeout = 5000\n            connectAttempts = 5\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Article in Ktor POST Route Handler\nDESCRIPTION: This snippet demonstrates how to add a new article using the DAOFacade within a Ktor POST route handler. It extracts title and body from form parameters and calls addNewArticle() function.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/db-persistence.md#2025-04-09_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\npost {\n    val formParameters = call.receiveParameters()\n    val title = formParameters[\"title\"].toString()\n    val body = formParameters[\"body\"].toString()\n    dao.addNewArticle(title, body)\n    call.respondRedirect(\"/\")\n}\n```\n\n----------------------------------------\n\nTITLE: Complete DefaultRequest Configuration Example\nDESCRIPTION: Full example showing DefaultRequest configuration with URL components and custom headers.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-default-request.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    defaultRequest {\n        url {\n            protocol = URLProtocol.HTTPS\n            host = \"ktor.io\"\n            path(\"docs\")\n            parameters.append(\"version\", \"2.0.0\")\n        }\n        header(\"X-Custom-Header\", \"Hello\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Database Configuration in Application Startup\nDESCRIPTION: Initializes the database connection when the Ktor application starts by calling DatabaseSingleton.init() in the Application.module function.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/db-persistence.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example\n\nimport com.example.dao.DatabaseSingleton\nimport io.ktor.server.application.*\n\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n\nfun Application.module() {\n    DatabaseSingleton.init()\n    \n    // ... rest of your application configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Port for Embedded Server in Kotlin\nDESCRIPTION: This snippet shows how to configure the port for an embedded Ktor server, using an environment variable or defaulting to 5000 if not specified.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/elastic-beanstalk.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n   embeddedServer(Netty, port = (System.getenv(\"PORT\")?:\"5000\").toInt()) {\n   // ...\n   }.start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing UserHashedTableAuth in Kotlin\nDESCRIPTION: This snippet shows how to initialize UserHashedTableAuth with a table of usernames and hashed passwords, and assign the digest function.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-basic-auth.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval hashedUserTable = UserHashedTableAuth(\n    table = mapOf(\n        \"jetbrains\" to digester(\"foobar\"),\n        \"admin\" to digester(\"password\")\n    ),\n    digester = digester\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Hub Registry\nDESCRIPTION: Set up Docker Hub registry configuration for publishing Docker images using the Ktor plugin.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/docker.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nktor {\n    docker {\n        externalRegistry.set(\n            DockerImageRegistry.dockerHub(\n                appName = provider { \"my-application\" },\n                username = providers.environmentVariable(\"DOCKER_HUB_USERNAME\"),\n                password = providers.environmentVariable(\"DOCKER_HUB_PASSWORD\")\n            )\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Darwin HTTP Client in Ktor\nDESCRIPTION: Example showing how to configure Darwin engine for macOS/iOS with custom request configuration using NSMutableURLRequest.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-engines.md#2025-04-09_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(Darwin) {\n    engine {\n        configureRequest {\n            setAllowsCellularAccess(false)\n            setAllowsExpensiveNetworkAccess(false)\n            setAllowsConstrainedNetworkAccess(false)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HikariCP and Ehcache Dependencies in Gradle\nDESCRIPTION: Adds the necessary dependencies for HikariCP and Ehcache to the Gradle build file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/db-connection-pooling-caching.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"org.jetbrains.exposed:exposed-core:$exposed_version\")\n    implementation(\"org.jetbrains.exposed:exposed-dao:$exposed_version\")\n    implementation(\"org.jetbrains.exposed:exposed-jdbc:$exposed_version\")\n    implementation(\"com.h2database:h2:$h2_version\")\n    implementation(\"com.zaxxer:HikariCP:$hikaricp_version\")\n    implementation(\"org.ehcache:ehcache:$ehcache_version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Custom User Agent in Ktor Client\nDESCRIPTION: Shows how to install and configure the UserAgent plugin with a custom agent string in a Ktor HTTP client using CIO engine.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-user-agent.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.*\n// ...\nval client = HttpClient(CIO) {\n    install(UserAgent) {\n        agent = \"Ktor client\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Database Connection Settings in Kotlin\nDESCRIPTION: Updates the DatabaseSingleton to load storage settings from the configuration file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/db-connection-pooling-caching.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.config.*\n\nobject DatabaseSingleton {\n    fun init(config: ApplicationConfig) {\n        val driverClassName = config.property(\"storage.driverClassName\").getString()\n        val jdbcURL = config.property(\"storage.jdbcURL\").getString()\n        val database = Database.connect(createHikariDataSource(driverClassName, jdbcURL))\n        transaction(database) {\n            SchemaUtils.create(Articles)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gretty Plugin in Gradle\nDESCRIPTION: Gradle configuration for installing and setting up the Gretty plugin for running servlet applications\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-war.md#2025-04-09_snippet_2\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n    id(\"org.gretty\") version \"4.0.3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Takeover Settings\nDESCRIPTION: Configuration for client and server compression window settings. These parameters control whether compression context is maintained between frames.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-deflate.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclientNoContextTakeOver = false\n\nserverNoContextTakeOver = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Thymeleaf Template Loading in Ktor\nDESCRIPTION: Configuration code for setting up Thymeleaf template resolver in Ktor to load HTML templates from the templates directory in the classpath.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-thymeleaf.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.thymeleaf.*\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Thymeleaf) {\n            setTemplateResolver(ClassLoaderTemplateResolver().apply {\n                prefix = \"templates/\"\n                suffix = \".html\"\n            })\n        }\n    }.start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Common HTTP Client Engine Properties in Kotlin\nDESCRIPTION: Demonstrates how to configure common properties for any Ktor HTTP client engine using the engine method. The example shows setting timeouts, proxy, and thread count configuration.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-engines.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    engine {\n        // this: [HttpClientEngineConfig](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.engine/-http-client-engine-config/index.html)\n        request {\n            // this: [HttpRequestData](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/-http-request-data/index.html)\n        }\n        proxy = ProxyBuilder.http(\"http://proxy-server:3128\")\n        threadsCount = 4\n        pipelining = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DAOFacadeCacheImpl in Ktor Routing\nDESCRIPTION: Sets up the DAOFacadeCacheImpl instance and initializes it with a sample article in the Ktor routing configuration.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/db-connection-pooling-caching.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Application.configureRouting() {\n    val dao = DAOFacadeCacheImpl(\n        DAOFacadeImpl(),\n        environment.config.property(\"storage.ehcacheFilePath\").getString()\n    ).apply {\n        runBlocking {\n            if (allArticles().isEmpty()) {\n                addNewArticle(\"HTML\", \"<h1>HTML</h1>\")\n                addNewArticle(\"CSS\", \"body { background: #f0f0f0 }\")\n            }\n        }\n    }\n    // ... rest of the routing configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Redirects in Ktor HTTP Client\nDESCRIPTION: This code snippet demonstrates how to disable automatic URL redirections in a Ktor HTTP client. The followRedirects property is set to false in the client configuration block, which prevents the client from automatically following redirects specified in the Location header.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-redirect.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    followRedirects = false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorInfo Data Class in Kotlin\nDESCRIPTION: This snippet defines the ErrorInfo data class used to store error information received in case of a 401 Unauthorized response.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-bearer-auth.md#2025-04-09_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable\ndata class ErrorInfo(\n    val error: String,\n    val error_description: String,\n    val error_uri: String? = null,\n    val state: String? = null,\n    val error_subtype: String? = null,\n    val error_reason: String? = null,\n    val error_time: Long? = null,\n    val error_code: String? = null\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Ktor Application (Gradle)\nDESCRIPTION: Dockerfile for building and running a Ktor application using Gradle and multi-stage builds.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/docker.md#2025-04-09_snippet_9\n\nLANGUAGE: Docker\nCODE:\n```\n# Stage 1: Cache Gradle dependencies\nFROM gradle:8.4-amazoncorretto-21 AS cache\nCOPY settings.gradle.kts build.gradle.kts gradle.properties /home/gradle/src/\nRUN gradle --no-daemon build --info\n\n# Stage 2: Build Application\nFROM gradle:8.4-amazoncorretto-21 AS build\nCOPY --from=cache /home/gradle/.gradle /home/gradle/.gradle\nCOPY . /home/gradle/src\nWORKDIR /home/gradle/src\nRUN gradle --no-daemon build --info\n\n# Stage 3: Create the Runtime Image\nFROM amazoncorretto:21-slim\nEXPOSE 8080\nRUN mkdir /app\nCOPY --from=build /home/gradle/src/build/libs/*all.jar /app/ktor-docker-sample.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app/ktor-docker-sample.jar\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Extension Factory\nDESCRIPTION: Demonstrates the implementation of the companion object factory for creating WebSocket extension instances.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-extensions.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n    companion object : WebSocketExtensionFactory<Config, FrameLogger> {\n        /* Key to discover installed extension instance */\n        override val key: AttributeKey<FrameLogger> = AttributeKey(\"frame-logger\")\n\n        /** List of occupied rsv bits.\n         * If the extension occupies a bit, it can't be used in other installed extensions. We use these bits to prevent plugin conflicts(prevent installing multiple compression plugins). If you're implementing a plugin using some RFC, rsv occupied bits should be referenced there.\n         */\n        override val rsv1: Boolean = false\n        override val rsv2: Boolean = false\n        override val rsv3: Boolean = false\n\n       /** Create plugin instance. Will be called for each WebSocket session **/\n        override fun install(config: Config.() -> Unit): FrameLogger {\n            return FrameLogger(Config().apply(config).logger)\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Compression Plugin in Ktor\nDESCRIPTION: This snippet shows how to install the Compression plugin in a Ktor server application. It enables gzip, deflate, and identity encoders by default.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-compression.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Compression) {\n    gzip()\n    deflate()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Serializer in Ktor Client\nDESCRIPTION: Example of registering the XML serializer in a Ktor client for XML serialization/deserialization.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-serialization.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.kotlinx.xml.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        xml()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Ktor Server with EngineMain\nDESCRIPTION: Example demonstrating how to start a Ktor server using EngineMain with configuration loaded from external files\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-engines.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(args: Array<String>) {\n    EngineMain.main(args)\n}\n\nfun Application.module() {\n    routing {\n        get(\"/\") {\n            call.respondText(\"Hello World!\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetty Engine for HTTP Client in Kotlin\nDESCRIPTION: Demonstrates how to configure the Jetty engine with custom settings. Jetty supports HTTP/2 only and requires Java 11 or higher.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-engines.md#2025-04-09_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(Jetty) {\n    engine {\n        // this: [JettyEngineConfig](https://api.ktor.io/ktor-client/ktor-client-jetty-jakarta/io.ktor.client.engine.jetty.jakarta/-jetty-engine-config/index.html)\n        pipelining = true\n        sslContextFactory = SslContextFactory.Client().apply {\n            // Configure SSL\n        }\n        customizeHttpClient {\n            // this: HttpClientTransport\n        }\n        clientCacheSize = 12\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bearer Token HTTP Header Example\nDESCRIPTION: Shows the HTTP header format used when sending Bearer authentication tokens.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-bearer-auth.md#2025-04-09_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:8080/\nAuthorization: Bearer abc123\n```\n\n----------------------------------------\n\nTITLE: Listing tvOS Target Presets in Markdown\nDESCRIPTION: Shows the target presets for tvOS platforms in a markdown list format, including ARM64 and x64 architectures, as well as simulator targets.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-platforms.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<list>\n    <li>\n        <code>tvosArm64</code>\n    </li>\n    <li>\n        <code>tvosX64</code>\n    </li>\n    <li>\n        <code>tvosSimulatorArm64</code>\n    </li>\n</list>\n```\n\n----------------------------------------\n\nTITLE: Checking WebSocket Extension Negotiation\nDESCRIPTION: Demonstrates how to check if a WebSocket extension is negotiated using extension and extensionOrNull methods.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-extensions.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwebSocket(\"/echo\") {\n    val myExtension = extension(MyWebSocketExtension) // will throw if `MyWebSocketExtension` is not negotiated\n    // or\n    val myExtension = extensionOrNull(MyWebSocketExtension) ?: close() // will close the session if `MyWebSocketExtension` is not negotiated\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Client with Jetty Engine in Kotlin\nDESCRIPTION: Creates a Ktor HTTP client using the Jetty engine. Jetty is available for JVM platforms and supports only HTTP/2.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-engines.md#2025-04-09_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(Jetty)\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Serializer with Custom Options\nDESCRIPTION: Configuring the JSON serializer with custom options using JsonBuilder API to control serialization behavior.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-serialization.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(ContentNegotiation) {\n    json(Json {\n        prettyPrint = true\n        isLenient = true\n        ignoreUnknownKeys = true\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Main Class in Gradle (Kotlin)\nDESCRIPTION: Configuration for setting EngineMain as the main class in Gradle Kotlin build script\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-engines.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\napplication {\n    mainClass.set(\"io.ktor.server.netty.EngineMain\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Ktor Version to Gradle Dependencies\nDESCRIPTION: Specifies the Ktor version in the Gradle libraries versions file. This setting determines which version of Ktor will be used throughout the project.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-multiplatform-application.md#2025-04-09_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\n[versions]\nktor = \"2.3.6\"\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Header Example\nDESCRIPTION: Example of WWW-Authenticate header format used in Basic authentication response\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-basic-auth.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nWWW-Authenticate: Basic realm=\"Access to the '/' path\", charset=\"UTF-8\"\n```\n\n----------------------------------------\n\nTITLE: Applying Ktor Plugin in Gradle Build Script\nDESCRIPTION: This snippet shows how to apply the Ktor plugin in the build.gradle.kts file to enable Fat JAR generation for deployment.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/elastic-beanstalk.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"jvm\") version \"1.9.10\"\n    id(\"io.ktor.plugin\") version \"2.3.4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AutoHeadResponse Plugin in Ktor Application\nDESCRIPTION: This snippet demonstrates how to install the AutoHeadResponse plugin in a Ktor application. The plugin automatically responds to HEAD requests for routes with GET handlers, as shown with the /home route example.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-autoheadresponse.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.plugins.autohead.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(AutoHeadResponse) // install AutoHeadResponse plugin\n        routing {\n            get(\"/home\") {\n                call.respondText(\"Hello, World!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Key and Install Members for Custom Plugin in Kotlin\nDESCRIPTION: This code shows how to implement the required 'key' and 'install' members for a custom plugin. The 'key' is used to identify the plugin, while the 'install' function configures how the plugin works.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins-base-api.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CustomHeader() {\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {\n        override val key = AttributeKey<CustomHeader>(\"CustomHeader\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): CustomHeader {\n            val plugin = CustomHeader()\n            // Intercept a pipeline ...\n            return plugin\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Object in Ktor Client Request Body\nDESCRIPTION: This snippet shows how to send a JSON object in the request body using the setBody function and ContentNegotiation plugin in a Ktor client request.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-requests.md#2025-04-09_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclient.post(\"$BASE_URL/customer\") {\n    contentType(ContentType.Application.Json)\n    setBody(Customer(id, firstName, lastName))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL in Ktor Application.conf\nDESCRIPTION: This HOCON configuration snippet shows how to enable SSL and specify keystore settings in a Ktor application.conf file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-ssl.md#2025-04-09_snippet_4\n\nLANGUAGE: HOCON\nCODE:\n```\nktor {\n    deployment {\n        sslPort = 8443\n    }\n    security {\n        ssl {\n            keyStore = keystore.jks\n            keyAlias = sampleAlias\n            keyStorePassword = 123456\n            privateKeyPassword = 123456\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Response Validation in Ktor Client (Kotlin)\nDESCRIPTION: This snippet demonstrates how to enable default validation by setting the expectSuccess property to true in the Ktor client configuration. This will throw exceptions for non-2xx responses.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-response-validation.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    expectSuccess = true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL in DefaultRequest\nDESCRIPTION: Configuring a base URL for all requests using DefaultRequest plugin.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-default-request.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndefaultRequest {\n    url(\"https://ktor.io/docs/\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Settings in YAML Format\nDESCRIPTION: This configuration file snippet in YAML format defines settings for a custom header plugin. It specifies the header name and value under the http.custom_header path.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins.md#2025-04-09_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nktor:\n  http:\n    custom_header:\n      name: \"X-Engine-Version\"\n      value: \"Ktor/2.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Server - Migration Example\nDESCRIPTION: Shows how to migrate server configuration code from 2.2.x to 3.0.x, demonstrating the new way to configure connectors and environment settings.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migrating-3.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.cio.*\nimport io.ktor.server.engine.*\nimport org.slf4j.helpers.NOPLogger\n\nfun defaultServer(module: Application.() -> Unit) =\n  embeddedServer(CIO,\n    environment = applicationEngineEnvironment {\n      log = NOPLogger.NOP_LOGGER\n      connector { \n          port = 8080\n      }\n      module(module)\n    }\n  )\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.cio.*\nimport io.ktor.server.engine.*\nimport org.slf4j.helpers.NOPLogger\n\nfun defaultServer(module: Application.() -> Unit) =\n  embeddedServer(CIO,\n    environment = applicationEnvironment { log = NOPLogger.NOP_LOGGER },\n    configure = {\n      connector {\n          port = 8080\n      }\n    },\n    module\n  )\n```\n\n----------------------------------------\n\nTITLE: Converting PKCS12 to JKS Format\nDESCRIPTION: This Bash command uses keytool to convert a PKCS12 keystore to JKS format for use with Ktor.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-ssl.md#2025-04-09_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nkeytool -importkeystore -srckeystore keystore.p12 -srcstoretype pkcs12 -destkeystore keystore.jks\n```\n\n----------------------------------------\n\nTITLE: Appending Path Segments in Ktor Client Request URL\nDESCRIPTION: This snippet demonstrates how to append path segments to a URL using the appendPathSegments function in a Ktor client request.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-requests.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval response: HttpResponse = client.get {\n    url {\n        protocol = URLProtocol.HTTPS\n        host = \"ktor.io\"\n        appendPathSegments(\"docs\", \"welcome\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Transformation Plugin\nDESCRIPTION: Plugin implementation showing how to transform request and response data using onCallReceive and onCallRespond handlers.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nonCallReceive { body ->\n    body.transformBody { data ->\n        when (requestedType) {\n            Int::class -> {\n                val line = data.readUTF8Line()\n                line?.toInt()?.plus(1) ?: 0\n            }\n            else -> {\n                data\n            }\n        }\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nonCallRespond { body ->\n    body.transformBody { data ->\n        when (data) {\n            is Int -> data + 1\n            else -> data\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ApiClient with CIO Engine in Kotlin\nDESCRIPTION: Shows how to use the ApiClient wrapper with the CIO engine to make HTTP requests in a production environment.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-testing.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() = runBlocking {\n    val client = ApiClient(CIO.create())\n    val users = client.getUsers()\n    println(users)\n    // Prints: [User(id=1, name=Alice), User(id=2, name=Bob)]\n}\n```\n\n----------------------------------------\n\nTITLE: Header Appending in DefaultRequest\nDESCRIPTION: Example of appending headers with duplicate prevention in DefaultRequest configuration.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-default-request.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ndefaultRequest {\n    headers.appendIfNameAbsent(\"X-Custom-Header\", \"Hello\")\n}\n```\n\n----------------------------------------\n\nTITLE: POST Request Example\nDESCRIPTION: Sample HTTP POST request demonstrating the request format for data transformation examples.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins.md#2025-04-09_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:8080\nContent-Type: text/plain\n\n10\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Encryption with Backward Compatibility in Ktor\nDESCRIPTION: Demonstrates how to configure session encryption with the updated SessionTransportTransformerEncrypt method, including the new backwardCompatibleRead property for compatibility with existing sessions.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migrating-3.md#2025-04-09_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Sessions) {\n  cookie<UserSession>(\"user_session\") {\n    // ...\n    transform(\n      SessionTransportTransformerEncrypt(\n        secretEncryptKey, // your encrypt key here\n        secretSignKey, // your sign key here\n        backwardCompatibleRead = true\n      )\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Components in Ktor Client Request\nDESCRIPTION: This snippet shows how to configure URL components separately using the URLBuilder in a Ktor client request. It demonstrates setting the protocol, host, and path.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-requests.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval response: HttpResponse = client.get {\n    url {\n        protocol = URLProtocol.HTTPS\n        host = \"ktor.io\"\n        path(\"docs/welcome\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying HTTP Method in Ktor Client Request\nDESCRIPTION: This snippet shows how to specify an HTTP method when making a request with the Ktor client. It uses the 'method' property to set the HTTP method to GET.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-requests.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\n\nval response: HttpResponse = client.request(\"https://ktor.io/\") {\n    method = HttpMethod.Get\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Application Lifecycle Events in Ktor\nDESCRIPTION: This snippet shows how to handle application shutdown events using the ApplicationStopped event. The plugin registers a handler that will be called when the application is stopping, allowing for proper resource cleanup.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval ApplicationMonitoringPlugin = createApplicationPlugin(name = \"ApplicationMonitoringPlugin\") {\n    on(ApplicationStopped) { application ->\n        application.log.info(\"Application stopped: ${application.environment.config.propertyOrNull(\"ktor.application.id\")?.getString()}\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Predefined User Agents in Ktor Client\nDESCRIPTION: Demonstrates how to use predefined browser-like or curl-like User-Agent values in a Ktor client configuration.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-user-agent.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    BrowserUserAgent()\n    // ... or\n    CurlUserAgent()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Digest Authentication in Ktor Client\nDESCRIPTION: This code snippet demonstrates how to configure digest authentication for a Ktor client by installing the Auth plugin and setting up the digest authentication provider with credentials.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-digest-auth.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient {\n    install(Auth) {\n        digest {\n            credentials {\n                DigestAuthCredentials(username = \"jetbrains\", password = \"foobar\")\n            }\n            realm = \"Access to the '/' path\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Populating jwks.json with RSA Public Key Information for Ktor JWT Authentication\nDESCRIPTION: This JSON snippet shows how to structure the jwks.json file with RSA public key information. It includes the key type (kty), exponent (e), key ID (kid), and modulus (n) in Base64URL format.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/rsa-keys-generation.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keys\": [\n    {\n      \"kty\": \"RSA\",\n      \"e\": \"AQAB\",\n      \"kid\": \"6f8856ed-9189-488f-9011-0ff4b6c08edc\",\n      \"n\":\"tfJaLrzXILUg1U3N1KV8yJr92GHn5OtYZR7qWk1Mc4cy4JGjklYup7weMjBD9f3bBVoIsiUVX6xNcYIr0Ie0AQ\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Application Class in build.gradle.kts\nDESCRIPTION: Specifies the main application class for the Ktor application in the build.gradle.kts file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-packaging.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\napplication {\n    mainClass.set(\"com.example.ApplicationKt\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Serializer for WebSockets in Ktor Client (kotlinx.serialization)\nDESCRIPTION: This snippet shows how to register the JSON serializer for WebSockets using kotlinx.serialization in Ktor Client. It creates a KotlinxWebsocketSerializationConverter instance with the Json parameter.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-websocket-serialization.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.serialization.kotlinx.*\nimport kotlinx.serialization.json.*\n\nval client = HttpClient(CIO) {\n    install(WebSockets) {\n        contentConverter = KotlinxWebsocketSerializationConverter(Json)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CBOR Serializer for WebSockets in Ktor Client\nDESCRIPTION: This code demonstrates how to register the CBOR serializer for WebSockets in Ktor Client using a KotlinxWebsocketSerializationConverter instance with the Cbor parameter.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-websocket-serialization.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.serialization.kotlinx.cbor.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(Cbor)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Header Plugin with Configuration File Support\nDESCRIPTION: This implementation of the CustomHeader plugin uses a configuration path to source its settings from a configuration file. It specifies \"http.custom_header\" as the configurationPath parameter.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-custom-plugins.md#2025-04-09_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nval CustomHeader = createApplicationPlugin(\n    name = \"CustomHeader\",\n    createConfiguration = ::CustomHeaderConfig,\n    configurationPath = \"http.custom_header\"\n) {\n    val headerName = pluginConfig.name\n    val headerValue = pluginConfig.value\n    \n    onCallRespond { call ->\n        call.response.header(headerName, headerValue)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Android MainActivity with Coroutines\nDESCRIPTION: Implements the Android MainActivity that uses coroutines to call the shared greeting function. It handles potential exceptions and displays the result in the UI.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-multiplatform-application.md#2025-04-09_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\npackage com.example.kmmktor.android\n\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport com.example.kmmktor.Greeting\nimport kotlinx.coroutines.launch\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MyApplicationTheme {\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                    val scope = rememberCoroutineScope()\n                    var text by remember { mutableStateOf(\"Loading\") }\n                    LaunchedEffect(true) {\n                        scope.launch {\n                            text = try {\n                                Greeting().greeting()\n                            } catch (e: Exception) {\n                                e.localizedMessage ?: \"error\"\n                            }\n                        }\n                    }\n                    LazyColumn(modifier = Modifier.padding(16.dp)) {\n                        item {\n                            Text(text = text)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Ktor HTTP Client with Android Engine\nDESCRIPTION: Demonstrates how to create and configure an HttpClient specifically for Android platform with custom engine configuration.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-multiplatform.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(Android) {\n    engine {\n        // Android engine configuration\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: User Model Class for Data Transformation in Ktor\nDESCRIPTION: Defines a User data class that is used with the data transformation plugin. This model represents the structure of the data being transformed in the requests and responses.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-custom-plugins.md#2025-04-09_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Configuring App Engine Plugin in Gradle Settings\nDESCRIPTION: Adds the Google App Engine Gradle plugin repository to the settings.gradle.kts file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/google-app-engine.md#2025-04-09_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\npluginManagement {\n    repositories {\n        gradlePluginPortal()\n        mavenCentral()\n    }\n    resolutionStrategy {\n        eachPlugin {\n            if (requested.id.id.startsWith(\"com.google.cloud.tools.appengine\")) {\n                useModule(\"com.google.cloud.tools:appengine-gradle-plugin:${requested.version}\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Serializable Data Class in Kotlin\nDESCRIPTION: This code snippet defines a serializable data class named Customer with an id property. It uses the @Serializable annotation from kotlinx.serialization.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-websocket-serialization.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable\ndata class Customer(val id: Int)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gson Serializer for WebSockets in Ktor Client\nDESCRIPTION: This snippet demonstrates how to register the Gson serializer for WebSockets in Ktor Client by assigning GsonWebsocketContentConverter to the contentConverter property.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-websocket-serialization.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.serialization.gson.*\n\ninstall(WebSockets) {\n    contentConverter = GsonWebsocketContentConverter()\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding the Server Header in Ktor\nDESCRIPTION: Demonstrates how to override the default Server header with a custom value using the DefaultHeaders plugin. The Server header is specified using the HttpHeaders.Server enum.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-default-headers.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(DefaultHeaders) {\n    header(HttpHeaders.Server, \"Custom\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Default Ktor HTTP Client in Common Code\nDESCRIPTION: Shows how to create a basic HttpClient instance in common code that automatically selects the appropriate engine based on platform-specific dependencies.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-multiplatform.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient()\n```\n\n----------------------------------------\n\nTITLE: Modifying Requests Before Retry\nDESCRIPTION: Example of modifying HTTP requests before retry attempts by adding custom headers.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-request-retry.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(HttpRequestRetry) {\n    // Retry conditions\n    modifyRequest { request ->\n        request.headers.append(\"x-retry-count\", retryCount.toString())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying App Engine Plugin in Kotlin Gradle\nDESCRIPTION: Applies the Google App Engine plugin in the build.gradle.kts file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/google-app-engine.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"jvm\") version \"1.9.10\"\n    id(\"com.google.cloud.tools.appengine\") version \"2.4.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ProtoBuf Serializer in Ktor Client\nDESCRIPTION: Example of registering the ProtoBuf serializer in a Ktor client for ProtoBuf serialization/deserialization.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-serialization.md#2025-04-09_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.kotlinx.protobuf.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        protobuf()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TCP Server Socket in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a TCP server socket using Ktor's SocketBuilder.tcp() function and bind it to a specific port.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-sockets.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval selectorManager = SelectorManager(Dispatchers.IO)\nval serverSocket = aSocket(selectorManager).tcp().bind(\"127.0.0.1\", 9002)\n```\n\n----------------------------------------\n\nTITLE: Configuring SOCKS Proxy Using JVM Proxy Class\nDESCRIPTION: JVM-specific implementation for configuring SOCKS proxy using the Java Proxy class with InetSocketAddress.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-proxy.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient() {\n    engine {\n        proxy = Proxy(Proxy.Type.SOCKS, InetSocketAddress(\"sample-proxy-server\", 1080))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example X-Forwarded-For Header with skipKnownProxies Configuration\nDESCRIPTION: An example HTTP header demonstrating a sample X-Forwarded-For header format that would be processed by the skipKnownProxies configuration to extract 'proxy-2' when 'proxy-1' and 'proxy-3' are specified as known proxies.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-forward-headers.md#2025-04-09_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nX-Forwarded-For: 10.0.0.123, proxy-1, proxy-2, proxy-3\n```\n\n----------------------------------------\n\nTITLE: Retrieving Call ID on Ktor Server\nDESCRIPTION: Demonstrates how a Ktor server can retrieve the call ID from an incoming request header and apply it to the current call. This allows for end-to-end tracing of requests across services.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-call-id.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CallId) {\n    retrieve { call -> call.request.header(HttpHeaders.XRequestId) }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Text and Charsets Plugin for Ktor HTTP Client in Kotlin\nDESCRIPTION: This code snippet demonstrates how to configure the Text and Charsets plugin for a Ktor HTTP client. It shows how to register specific charsets, set quality values, and specify default charsets for sending requests and receiving responses.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-text-and-charsets.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(HttpClientEngine) {\n    Charsets {\n        // Allow using `UTF_8`.\n        register(Charsets.UTF_8)\n\n        // Allow using `ISO_8859_1` with quality 0.1.\n        register(Charsets.ISO_8859_1, quality=0.1f)\n        \n        // Specify Charset to send request(if no charset in request headers).\n        sendCharset = ...\n\n        // Specify Charset to receive response(if no charset in response headers).\n        responseCharsetFallback = ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ktor Libraries in Gradle Dependencies\nDESCRIPTION: Configures Ktor library dependencies in the Gradle libraries versions file. These definitions are later referenced in build scripts to include the required Ktor modules.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-multiplatform-application.md#2025-04-09_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nktor-client-core = { group = \"io.ktor\", name = \"ktor-client-core\", version.ref = \"ktor\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache5 Engine for HTTP Client in Kotlin\nDESCRIPTION: Demonstrates how to configure the Apache5 engine with custom settings, including timeouts, connection configuration, and SSL options. Apache5 supports HTTP/2 by default.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-engines.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.apache5.*\n\nval client = HttpClient(Apache5) {\n    engine {\n        // this: Apache5EngineConfig\n        followRedirects = true\n        socketTimeout = 10_000\n        connectTimeout = 10_000\n        connectionRequestTimeout = 20_000\n        customizeClient {\n            // this: HttpAsyncClientBuilder\n            setMaxConnTotal(1000)\n            setMaxConnPerRoute(100)\n        }\n        customizeRequest {\n            // this: RequestConfig.Builder\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Closing a Socket in Ktor Server\nDESCRIPTION: This snippet demonstrates how to close a connected socket to release associated resources.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-sockets.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nsocket.close()\n```\n\n----------------------------------------\n\nTITLE: Building OAuth Authorization URL\nDESCRIPTION: Shows how to construct the authorization URL for Google OAuth flow.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-bearer-auth.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval authorizationUrl = \"https://accounts.google.com/o/oauth2/v2/auth?\" +\n    \"client_id=$CLIENT_ID\" +\n    \"&scope=https://www.googleapis.com/auth/userinfo.profile\" +\n    \"&response_type=code\" +\n    \"&redirect_uri=http://127.0.0.1:8080\" +\n    \"&access_type=offline\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Logback with FILE Appender in XML\nDESCRIPTION: This XML configuration sets up Logback with a FILE appender to output logs to a file. It defines the root logger level, appender settings, and file output location.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-logging.md#2025-04-09_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">\n        <file>logback.log</file>\n        <append>true</append>\n        <encoder>\n            <pattern>%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n    <root level=\"trace\">\n        <appender-ref ref=\"FILE\"/>\n    </root>\n    <logger name=\"org.eclipse.jetty\" level=\"INFO\"/>\n    <logger name=\"io.netty\" level=\"INFO\"/>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Ktor 2.x File Download Streaming Implementation\nDESCRIPTION: Shows the legacy approach for handling large file downloads in Ktor 2.x using ByteReadChannel and manual byte array handling.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migrating-3.md#2025-04-09_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO)\nval file = File.createTempFile(\"files\", \"index\")\n\nrunBlocking {\n    client.prepareGet(\"https://ktor.io/\").execute { httpResponse ->\n        val channel: ByteReadChannel = httpResponse.body()\n        while (!channel.isClosedForRead) {\n            val packet = channel.readRemaining(DEFAULT_BUFFER_SIZE.toLong())\n            while (!packet.isEmpty) {\n                val bytes = packet.readBytes()\n                file.appendBytes(bytes)\n                println(\"Received ${file.length()} bytes from ${httpResponse.contentLength()}\")\n            }\n        }\n        println(\"A file saved to ${file.path}\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Call ID Generation in Ktor Client\nDESCRIPTION: Configures the CallId plugin to generate custom call IDs using the generate function. This approach allows for creating unique identifiers for each outgoing request.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-call-id.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CallId) {\n    generate { UUID.randomUUID().toString() }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificate Using Keytool\nDESCRIPTION: This Bash command uses the keytool utility to generate a self-signed certificate and save it to a JKS file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-ssl.md#2025-04-09_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nkeytool -keystore keystore.jks -alias sampleAlias -genkeypair -keyalg RSA -keysize 4096 -validity 3 -dname 'CN=localhost, OU=ktor, O=ktor, L=Unspecified, ST=Unspecified, C=US'\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Client with Java Engine in Kotlin\nDESCRIPTION: Creates a Ktor HTTP client using the Java engine, which utilizes the Java HTTP Client introduced in Java 11. This engine supports both HTTP/2 and WebSockets.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-engines.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(Java)\n```\n\n----------------------------------------\n\nTITLE: Generating Call ID with Specific Characters in Ktor Server\nDESCRIPTION: Example showing how to generate a call ID with a specific length and character set. This is useful when incoming requests don't include a call ID and you need to create one with a controlled format.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-call-id.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CallId) {\n    generate(10, \"abcde12345\")\n}\n```\n\n----------------------------------------\n\nTITLE: XML POST Request Example (HTTP)\nDESCRIPTION: This HTTP client request example shows how to send XML data to create a new customer. It includes the Content-Type header set to application/xml.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-serialization.md#2025-04-09_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST http://0.0.0.0:8080/customer\nContent-Type: application/xml\n\n<customer id='1'>\n    <firstName>John</firstName>\n    <lastName>Smith</lastName>\n    <email>john@smith.com</email>\n</customer>\n```\n\n----------------------------------------\n\nTITLE: Configuring XHttpMethodOverride Plugin in Ktor Server\nDESCRIPTION: Demonstrates how to configure a Ktor server with the XHttpMethodOverride plugin. The example includes route handlers for different HTTP methods and shows how the plugin processes requests with the X-Http-Method-Override header.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-method-override.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example\n\nimport io.ktor.http.*\nimport io.ktor.serialization.kotlinx.json.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.contentnegotiation.*\nimport io.ktor.server.plugins.methodoverride.*\nimport io.ktor.server.request.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\n// ...\n\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n\nfun Application.module() {\n    install(ContentNegotiation) {\n        json()\n    }\n    install(XHttpMethodOverride)\n\n    routing {\n        route(\"/json\") {\n            get {\n                call.respond(mapOf(\"message\" to \"GET request\"))\n            }\n            post {\n                val jsonText = call.receive<Map<String, Any>>()\n                println(jsonText)\n                call.respond(mapOf(\"message\" to \"POST request\"))\n            }\n            delete {\n                val jsonText = call.receive<Map<String, Any>>()\n                println(jsonText)\n                call.respond(mapOf(\"message\" to \"DELETE request\"))\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: WebSockets Duration Configuration Migration - Ktor 2.x.x vs 3.0.x\nDESCRIPTION: Shows the migration from java.time.Duration to Kotlin's Duration for configuring WebSockets timeout and pingPeriod properties in Ktor 3.0.x.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migrating-3.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport java.time.Duration\n  \ninstall(WebSockets) {\n    pingPeriod = Duration.ofSeconds(15)\n    timeout = Duration.ofSeconds(15)\n    //..\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.Duration.Companion.seconds\n\ninstall(WebSockets) {\n    pingPeriod = 15.seconds\n    timeout = 15.seconds\n    //..\n}\n```\n\n----------------------------------------\n\nTITLE: Installing HttpCache Plugin for In-Memory Caching in Ktor Client\nDESCRIPTION: This snippet demonstrates how to install the HttpCache plugin for in-memory caching in a Ktor client configuration block. It enables the client to save previously fetched resources in an in-memory cache.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-caching.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.cache.*\n//...\nval client = HttpClient(CIO) {\n    install(HttpCache)\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PEM Certificate to PKCS12 Format\nDESCRIPTION: This Bash command uses openssl to convert a PEM certificate and private key into PKCS12 format.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-ssl.md#2025-04-09_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nopenssl pkcs12 -export -in cert.pem -inkey key.pem -out keystore.p12 -name \"sampleAlias\"\n```\n\n----------------------------------------\n\nTITLE: Adding Ktor Client Core Dependency to Common Source Set\nDESCRIPTION: Shows how to add the ktor-client-core dependency to the commonMain source set in a Kotlin Multiplatform project's build.gradle.kts file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-dependencies.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    // ...\n    \n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation(libs.ktor.client.core)\n            }\n        }\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Sending Call ID in Same Header in Ktor Server\nDESCRIPTION: Example showing how to retrieve a call ID from a header and send it back in the same header. This configuration simplifies handling when the same header is used for both incoming and outgoing call IDs.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-call-id.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CallId) {\n    header(HttpHeaders.XRequestId)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Multiple Connectors Server\nDESCRIPTION: Gradle command to run the embedded server sample with multiple connectors. This command executes the sample from the repository's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/embedded-server-multiple-connectors/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :embedded-server-multiple-connectors:run\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Modules in Kotlin for Ktor\nDESCRIPTION: This snippet demonstrates defining multiple modules in different packages for a Ktor application. It shows how to structure modules in separate files and packages.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-modules.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun Application.module1() {\n    routing {\n        get(\"/module1\") {\n            call.respondText(\"Hello from module 1\")\n        }\n    }\n}\n\nfun Application.module2() {\n    routing {\n        get(\"/module2\") {\n            call.respondText(\"Hello from module 2\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ktor Plugin in Gradle (Groovy)\nDESCRIPTION: Add the Ktor plugin to the plugins block of the Gradle build file using Groovy DSL.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/docker.md#2025-04-09_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id \"io.ktor.plugin\" version \"%ktor_version%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent Cache with FileStorage in Ktor Client\nDESCRIPTION: This snippet shows how to create a persistent cache using FileStorage in Ktor client. It demonstrates creating a file cache storage and passing it to the publicStorage function for use as a shared cache.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-caching.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    install(HttpCache) {\n        val cacheFile = File.createTempFile(\"ktor_cache\", \"bin\")\n        publicStorage(FileStorage(cacheFile))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Modulus to Base64URL Encoding\nDESCRIPTION: Command to convert the hexadecimal representation of the modulus to its Base64URL encoding, removing colons, spaces, and newlines, and replacing '+' and '/' with '-' and '_' respectively.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/rsa-keys-generation.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\necho \"b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:\n    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:\n    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:\n    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:\n    2b:d0:87:b4:01\" | tr -d \": \\n\" | xxd -p -r | base64 | tr +/ -_ | tr -d \"=\\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining Ktor Engine Libraries in Gradle Dependencies\nDESCRIPTION: Specifies the platform-specific Ktor engine libraries in the Gradle dependencies configuration. These engines provide the actual HTTP implementation for different platforms.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-multiplatform-application.md#2025-04-09_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nktor-client-okhttp = { group = \"io.ktor\", name = \"ktor-client-okhttp\", version.ref = \"ktor\" }\nktor-client-darwin = { group = \"io.ktor\", name = \"ktor-client-darwin\", version.ref = \"ktor\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Port for Heroku in Ktor Application (Kotlin)\nDESCRIPTION: This snippet shows how to configure the port in a Ktor application to use the PORT environment variable provided by Heroku. It demonstrates setting the port for the embedded server in the main function.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/heroku.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    embeddedServer(Netty, port = System.getenv(\"PORT\").toInt()) {\n        // ...\n    }.start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ktor DoubleReceive Sample Project using Gradle\nDESCRIPTION: This command runs the 'double-receive' sample project using Gradle. It should be executed in the repository's root directory to start the Ktor application.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/double-receive/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :double-receive:run\n```\n\n----------------------------------------\n\nTITLE: Basic OpenAPI Configuration in Ktor\nDESCRIPTION: Sets up a basic OpenAPI documentation endpoint by creating a GET route at the specified path that renders documentation from an OpenAPI specification file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-openapi.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.server.plugins.openapi.*\n\n// ...\nrouting {\n    openAPI(path=\"openapi\", swaggerFile = \"openapi/documentation.yaml\")\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Main Application Class in Maven POM for Ktor\nDESCRIPTION: This XML snippet shows how to specify the main application class in the Maven POM file for a Ktor project. It's a crucial step in configuring the project for creating a fat JAR.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/maven-assembly-plugin.md#2025-04-09_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<properties>\n    <main.class>com.example.ApplicationKt</main.class>\n</properties>\n```\n\n----------------------------------------\n\nTITLE: Installing BOMRemover Plugin in Ktor Client\nDESCRIPTION: Code example showing how to install and configure the BOMRemover plugin in a Ktor HTTP client. The plugin is installed within the client configuration block and handles BOM removal from response bodies.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-bom-remover.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.compression.*\n//...\nval client = HttpClient(CIO) {\n    install(BOMRemover)\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Docker Image from Tarball\nDESCRIPTION: Command to load a Docker image from a tarball file generated by the buildImage task.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/docker.md#2025-04-09_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ndocker load < build/jib-image.tar\n```\n\n----------------------------------------\n\nTITLE: Adding Coroutines Android Dependency to Android App\nDESCRIPTION: Adds the kotlinx-coroutines-android dependency to the Android app module. This provides Android-specific coroutine dispatchers and utilities.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-multiplatform-application.md#2025-04-09_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\ndependencies {\n    //...\n    implementation(libs.kotlinx.coroutines.android)\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling CoroutineContext for Call ID Generation in Ktor Client\nDESCRIPTION: Configures the CallId plugin to disable the default behavior of retrieving call IDs from the current CoroutineContext. This is done by setting the useCoroutineContext property to false.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-call-id.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CallId) {\n    useCoroutineContext = false\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Tomcat WAR Application with Gradle\nDESCRIPTION: Command to run the Tomcat WAR sample application using Gradle. After execution, the application will be available at http://localhost:8080/.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/tomcat-war/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :tomcat-war:run\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Rate Limiter with Request Keys in Ktor\nDESCRIPTION: Basic configuration of a rate limiter allowing 30 requests per minute, with rate limiting applied separately for different users based on their login query parameter.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-rate-limit.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nregister {\n    rateLimiter(limit = 30, refillPeriod = 60.seconds)\n    requestKey { call ->\n        call.request.queryParameters[\"login\"]?.let { KeyWithWeight(it) } ?: DefaultKeyWithWeight\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Parallel Requests Client\nDESCRIPTION: Command to execute the client application that sends parallel HTTP requests to the slow server.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-parallel-requests/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-parallel-requests:run\n```\n\n----------------------------------------\n\nTITLE: Response Time Tracking Plugin Example\nDESCRIPTION: Demonstrates how to create a plugin that measures the time between sending a request and receiving a response using call attributes.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-custom-plugins.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval ResponseTimePlugin = createClientPlugin(\"ResponseTimePlugin\") {\n    val requestTime = AttributeKey<Long>(\"RequestTime\")\n    \n    onRequest { request ->\n        request.attributes.put(requestTime, System.currentTimeMillis())\n    }\n    \n    onResponse { response ->\n        val startTime = response.call.attributes[requestTime]\n        val endTime = System.currentTimeMillis()\n        println(\"Request took ${endTime - startTime} ms\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Fat JAR Name in Gradle\nDESCRIPTION: Optional configuration for customizing the output name of the generated fat JAR using the ktor.fatJar extension.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-fatjar.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nktor {\n    fatJar {\n        archiveFileName.set(\"fat.jar\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Specific Function in Documentation\nDESCRIPTION: Markdown syntax for including a specific function from a Kotlin source file using both src and include-symbol attributes.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/README.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n```kotlin\n```\n{src=\"snippets/autohead/src/main/kotlin/com/example/Application.kt\" include-symbol=\"main\"}\n```\n\n----------------------------------------\n\nTITLE: Updating DefaultRequest Plugin Configuration in Ktor Client (Kotlin)\nDESCRIPTION: Demonstrates the change in the DefaultRequest plugin configuration from using HttpRequestBuilder in version 1.6.x to DefaultRequestBuilder in version 2.0.0. This update affects how default request properties are set when creating an HttpClient instance.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migration-to-20x.md#2025-04-09_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    defaultRequest {\n        // this: HttpRequestBuilder\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    defaultRequest {\n        // this: DefaultRequestBuilder\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Application with Thymeleaf\nDESCRIPTION: Command to run the Thymeleaf sample application using Gradle. After execution, the application will be accessible at http://localhost:8080/index.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/thymeleaf/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :thymeleaf:run\n```\n\n----------------------------------------\n\nTITLE: Responding with FreeMarker Template\nDESCRIPTION: Demonstrates how to respond to a route request using a FreeMarker template with provided user data.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-freemarker.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/\") {\n    val user = User(\"John\")\n    call.respond(FreeMarkerContent(\"index.ftl\", mapOf(\"user\" to user)))\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Jackson Sample with Gradle\nDESCRIPTION: Command to execute the Jackson sample application from the repository's root directory using Gradle.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/jackson/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :jackson:run\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Serializer for WebSockets in Ktor Server\nDESCRIPTION: This snippet shows how to configure the XML serializer for WebSockets. It creates a KotlinxWebsocketSerializationConverter instance with the XML parameter and assigns it to the contentConverter property.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-serialization.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport nl.adaptivity.xmlutil.serialization.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(XML)\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Kotlin Version in Gradle Dependencies\nDESCRIPTION: Configures the Kotlin version in the Gradle libraries versions file. This setting ensures the project uses the specified version of Kotlin.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-create-multiplatform-application.md#2025-04-09_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin = \"1.9.21\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: A standard robots.txt configuration that allows all web crawlers (User-agent: *) full access to the site with no paths disallowed. This configuration follows the standard Robot Exclusion Protocol.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/single-page-application/react-app/robots.txt#2025-04-09_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Receiving Custom Objects with ContentNegotiation in Ktor 2.0.0\nDESCRIPTION: When using the ContentNegotiation plugin, receiving a custom object requires calling the body() function on the response in Ktor 2.0.0.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migration-to-20x.md#2025-04-09_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval customer: Customer = client.get(\"http://localhost:8080/customer/3\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval customer: Customer = client.get(\"http://localhost:8080/customer/3\").body()\n```\n\n----------------------------------------\n\nTITLE: Building the Ktor Application using Gradle\nDESCRIPTION: Command to build the Ktor application from the project's root directory using Gradle.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/migrating-express-ktor/5_send_response/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew build\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for Ktor Application\nDESCRIPTION: Command to run a Docker container with a Ktor application, mapping port 8080.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/docker.md#2025-04-09_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run -p 8080:8080 my-application\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Task Management Application with Gradle\nDESCRIPTION: This command runs the Ktor task management web application using Gradle. It should be executed in the repository's root directory to start the server.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/tutorial-server-web-application/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :tutorial-server-web-application:run\n```\n\n----------------------------------------\n\nTITLE: Configuring Shutdown URL in YAML Configuration File\nDESCRIPTION: This snippet demonstrates how to configure a shutdown URL in a YAML configuration file for a Ktor server. It sets the ktor.deployment.shutdown.url property.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-shutdown-url.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nktor:\n  deployment:\n    shutdown.url: \"/ktor/application/shutdown\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Full Source File in Documentation\nDESCRIPTION: Markdown syntax for including a complete Kotlin source file in documentation using the src attribute.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/README.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n```kotlin\n```\n{src=\"snippets/autohead/src/main/kotlin/com/example/Application.kt\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring CallLogging with DoubleReceive in Ktor\nDESCRIPTION: Example showing how to configure the CallLogging plugin to log request bodies using DoubleReceive.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-double-receive.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(CallLogging) {\n    level = Level.INFO\n    format { call ->\n        val body = call.receiveText()\n        \"Body: $body\"\n    }\n    filter { true }\n    mdc(\"mdc-key\") { \"mdc-value\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Client with SSL Config\nDESCRIPTION: Command to execute the client SSL configuration example using Gradle, which makes a secure request to the server.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-ssl-config/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-ssl-config:run\n```\n\n----------------------------------------\n\nTITLE: Configuring App Engine Settings in Kotlin Gradle\nDESCRIPTION: Sets up App Engine deployment configuration in the build.gradle.kts file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/google-app-engine.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nappengine {\n    stage {\n        setArtifact(tasks.named(\"shadowJar\").flatMap { it.archiveFile })\n    }\n    deploy {\n        version = \"GCLOUD_CONFIG\"\n        projectId = \"GCLOUD_CONFIG\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Ktor Static Content Application\nDESCRIPTION: Gradle command to build the Ktor application from the project's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/migrating-express-ktor/2_static/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew build\n```\n\n----------------------------------------\n\nTITLE: Configuring Jackson Serializer in ContentNegotiation (Kotlin)\nDESCRIPTION: Demonstrates the configuration of the Jackson serializer for JSON in the ContentNegotiation plugin, with examples of customizing Jackson's ObjectMapper.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-serialization.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(ContentNegotiation) {\n    jackson {\n        enable(SerializationFeature.INDENT_OUTPUT)\n        writerWithDefaultPrettyPrinter()\n        registerModule(JavaTimeModule())  // support java.time.* types\n        disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)\n        enable(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES)\n        enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ktor WebSockets Server Sample\nDESCRIPTION: Command to execute the WebSockets echo server sample using Gradle. This runs the server-websockets module from the codeSnippets Gradle project.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/server-websockets/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :server-websockets:run\n```\n\n----------------------------------------\n\nTITLE: Sample Server Response Output\nDESCRIPTION: Example output showing the response times from parallel requests, demonstrating that they complete at nearly the same time.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-parallel-requests/README.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nResponse time: 14:42:58.737571\nResponse time: 14:42:58.737577\n```\n\n----------------------------------------\n\nTITLE: Implementing Frame Processing Methods\nDESCRIPTION: Shows the implementation of methods for processing incoming and outgoing WebSocket frames.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-extensions.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n    override fun processOutgoingFrame(frame: Frame): Frame {\n        logger.log(\"Process outgoing frame: $frame\")\n        return frame\n    }\n\n    override fun processIncomingFrame(frame: Frame): Frame {\n        logger.log(\"Process incoming frame: $frame\")\n        return frame\n    }\n```\n\n----------------------------------------\n\nTITLE: Running the Client Upload Component\nDESCRIPTION: Command to execute the client application that performs the binary file upload.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-upload-binary-data/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-upload-binary-data:run\n```\n\n----------------------------------------\n\nTITLE: Creating Google Cloud Project via Command Line\nDESCRIPTION: Uses gcloud command to create a new Google Cloud project for the application.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/google-app-engine.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngcloud projects create ktor-sample-app-engine --set-as-default\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Sample Project Locally\nDESCRIPTION: This command runs the AWS Elastic Beanstalk sample project locally using Gradle. It should be executed in the repository's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/aws-elastic-beanstalk/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :aws-elastic-beanstalk:run\n```\n\n----------------------------------------\n\nTITLE: Listing Linux Target Preset in Markdown\nDESCRIPTION: Shows the target preset for Linux platforms in a markdown list format, specifically for x64 architecture.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-platforms.md#2025-04-09_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<list>\n    <li>\n        <code>linuxX64</code>\n    </li>\n</list>\n```\n\n----------------------------------------\n\nTITLE: Starting the Server Component\nDESCRIPTION: Command to run the server-side application that will receive the uploaded binary data.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-upload-binary-data/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :post-raw-data:run\n```\n\n----------------------------------------\n\nTITLE: Starting the Simulated Slow Server\nDESCRIPTION: Command to start a test server that adds a 2-second delay to each response, used for demonstrating parallel request handling.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-parallel-requests/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :simulate-slow-server:run\n```\n\n----------------------------------------\n\nTITLE: Installing WebSocket Extensions in Ktor\nDESCRIPTION: Shows how to install and configure WebSocket extensions using the extensions and install methods in Ktor.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-websocket-extensions.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(WebSockets) {\n    extensions { /* WebSocketExtensionConfig.() -> Unit */\n        install(MyWebSocketExtension) { /* MyWebSocketExtensionConfig.() -> Unit */\n        /* Optional extension configuration. */ \n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Thymeleaf Auto-reload Sample Project with Gradle\nDESCRIPTION: Command to execute the Thymeleaf auto-reload sample project using Gradle. After running this command, developers can access the application at http://localhost:8080/index and modify the templates to see auto-reload in action.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/thymeleaf-auto-reload/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :thymeleaf-auto-reload:run\n```\n\n----------------------------------------\n\nTITLE: Creating App Engine Application via Command Line\nDESCRIPTION: Initializes an App Engine application for the Google Cloud project using gcloud command.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/google-app-engine.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app create\n```\n\n----------------------------------------\n\nTITLE: Running Individual Ktor Subprojects\nDESCRIPTION: Example command showing how to run individual subprojects using Gradle, specifically demonstrating with the '1_hello' project.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/migrating-express-ktor/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :1_hello:run\n```\n\n----------------------------------------\n\nTITLE: Setting Main Class in Gradle (Groovy)\nDESCRIPTION: Configuration for setting EngineMain as the main class in Gradle Groovy build script\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-engines.md#2025-04-09_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nmainClassName = \"io.ktor.server.netty.EngineMain\"\n```\n\n----------------------------------------\n\nTITLE: Executing Client File Upload in Bash\nDESCRIPTION: Command to run the client sample that uploads a file to the server. This should be executed after the server is running.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-upload/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-upload:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor OpenAPI Sample Project with Gradle\nDESCRIPTION: Command to execute the Kotlin Ktor sample project that demonstrates OpenAPI integration. This command runs the project from the repository's root directory using Gradle.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/json-kotlinx-openapi/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :json-kotlinx-openapi:run\n```\n\n----------------------------------------\n\nTITLE: Installing libcurl Dependencies\nDESCRIPTION: Bash command for installing required libcurl dependencies on Ubuntu systems.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-engines.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libcurl4-gnutls-dev\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Rate Limiting Sample\nDESCRIPTION: Gradle command to execute the rate limiting sample application from the repository root directory. After running, the server starts and exposes endpoints for testing rate limiting behavior.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/rate-limit/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :rate-limit:run\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for GraalVM Native Image Build\nDESCRIPTION: Example of a build.gradle.kts file configuration for using the GraalVM Gradle plugin to build a native image of a Ktor application.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/graalvm.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// build.gradle.kts\n// Configuration for GraalVM native image build\n```\n\n----------------------------------------\n\nTITLE: Running Caching Headers Sample Project with Gradle\nDESCRIPTION: Command to run the caching-headers sample from the repository's root directory using Gradle wrapper.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/caching-headers/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :caching-headers:run\n```\n\n----------------------------------------\n\nTITLE: Converting Exponent to Base64URL Encoding\nDESCRIPTION: Command to convert the hexadecimal representation of the exponent to its Base64URL encoding.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/rsa-keys-generation.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\necho 010001 | xxd -p -r | base64\n```\n\n----------------------------------------\n\nTITLE: Running Client Digest Authentication Example with Gradle\nDESCRIPTION: Command to execute the client-auth-digest sample application using Gradle. This command runs the client that authenticates using digest authentication against the auth-digest server example.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-auth-digest/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-auth-digest:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor SSE Server\nDESCRIPTION: Command to run the Ktor SSE server sample. This should be executed in the repository's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/server-sse/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :server-sse:run\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Private Key in Ktor application.conf\nDESCRIPTION: This HOCON configuration snippet demonstrates how to set up the JWT section in the application.conf file for a Ktor project. It includes the private key (referenced from an environment variable), issuer, audience, and realm settings.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/rsa-keys-generation.md#2025-04-09_snippet_6\n\nLANGUAGE: hocon\nCODE:\n```\njwt {\n  privateKey = ${jwt_pk}\n  issuer = \"http://0.0.0.0:8080/\"\n  audience = \"http://0.0.0.0:8080/login\"\n  realm = \"MyProject\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Keystore for SSL in Ktor HSTS Sample\nDESCRIPTION: This command creates a keystore file for SSL configuration in the Ktor HSTS sample project. It generates a key pair with RSA algorithm, 4096-bit key size, and sets up the certificate for localhost.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/ssl-engine-main-hsts/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nkeytool -keystore snippets/ssl-engine-main-hsts/keystore.jks -alias sampleAlias -genkeypair -keyalg RSA -keysize 4096 -validity 3 -dname 'CN=localhost, OU=ktor, O=ktor, L=Unspecified, ST=Unspecified, C=US' -ext 'SAN:c=DNS:localhost,IP:127.0.0.1'\n```\n\n----------------------------------------\n\nTITLE: Deploying Ktor Application to Heroku (Bash)\nDESCRIPTION: This series of Bash commands demonstrates the process of deploying a Ktor application to Heroku using Git. It includes steps for committing changes, logging into Heroku CLI, creating a Heroku application, and pushing the code to Heroku for deployment.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/heroku.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"Prepare app for deploying\"\nheroku login\nheroku create ktor-sample-heroku\ngit push heroku main\n```\n\n----------------------------------------\n\nTITLE: Running WebSocket Client in Ktor\nDESCRIPTION: Command to run the Ktor WebSocket client sample in quiet mode with plain console output.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-websockets/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-websockets:run -q --console=plain\n```\n\n----------------------------------------\n\nTITLE: Running Server Application for Ktor Client Sockets Sample\nDESCRIPTION: Command to start the server application for the client sockets sample project. This should be executed in the repository's root directory before running the client.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/sockets-client/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :sockets-server:run\n```\n\n----------------------------------------\n\nTITLE: Setting Google OAuth Environment Variables\nDESCRIPTION: Commands to set the Google OAuth client ID and secret as environment variables for both Unix-based systems and Windows.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/auth-oauth-google/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# macOS/Linux\nexport GOOGLE_CLIENT_ID=yourClientId\nexport GOOGLE_CLIENT_SECRET=yourClientSecret\n   \n# Windows\nsetx GOOGLE_CLIENT_ID yourClientId\nsetx GOOGLE_CLIENT_SECRET yourClientSecret\n```\n\n----------------------------------------\n\nTITLE: Apple Platform Target Reference\nDESCRIPTION: Code reference to the watchosDeviceArm64 target platform that was added in a patch release. This shows how platform targets are displayed in the release notes.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/releases.md#2025-04-09_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<code>watchosDeviceArm64</code>\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor Gson Endpoint with cURL\nDESCRIPTION: cURL command to test the Ktor server endpoint that returns JSON data. It specifies the Accept header for JSON and enables compression.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/gson/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v --compressed --header \"Accept: application/json\" http://localhost:8080/v1\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Fat JAR Application\nDESCRIPTION: This Bash command demonstrates how to run the Ktor application from the generated fat JAR. It uses the java -jar command followed by the path to the JAR file.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/maven-assembly-plugin.md#2025-04-09_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\njava -jar target/tutorial-server-get-started-maven-0.0.1-jar-with-dependencies.jar\n```\n\n----------------------------------------\n\nTITLE: Running Client Timeout Sample with Gradle\nDESCRIPTION: Command to execute the client-timeout sample using Gradle. The sample demonstrates HttpTimeout plugin usage against a simulated slow server that adds a two-second delay to each response.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-timeout/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-timeout:run\n```\n\n----------------------------------------\n\nTITLE: Configuring Port in application.conf for Ktor\nDESCRIPTION: This snippet demonstrates how to configure the port in the application.conf file for a Ktor application, using an environment variable with a default value.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/elastic-beanstalk.md#2025-04-09_snippet_1\n\nLANGUAGE: hocon\nCODE:\n```\nktor {\n    deployment {\n        port = ${?PORT}\n    }\n    application {\n        modules = [ com.example.ApplicationKt.module ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Client Caching Example with Gradle\nDESCRIPTION: Command to execute the client-caching sample using Gradle. The sample demonstrates how the client caches the result of the first GET request and avoids making a second request for the same resource.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-caching/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-caching:run\n```\n\n----------------------------------------\n\nTITLE: Running the HTTPS Redirect Sample Project with Gradle\nDESCRIPTION: Command for executing the sample application using Gradle. This runs the ssl-engine-main-redirect module which demonstrates the HttpsRedirect plugin functionality.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/ssl-engine-main-redirect/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n./gradlew :ssl-engine-main-redirect:run\n```\n\n----------------------------------------\n\nTITLE: Listing JVM Target Preset in Markdown\nDESCRIPTION: Displays the target preset for Kotlin/JVM in a markdown list format.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/server-platforms.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<list>\n    <li>\n        <code>jvm</code>\n    </li>\n</list>\n```\n\n----------------------------------------\n\nTITLE: Shutdown URL Console Output\nDESCRIPTION: Example console output displayed when the shutdown URL endpoint is accessed, showing the warning message before server shutdown.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/shutdown-url/README.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nWARN  Application - Shutdown URL was called: server is going down\n```\n\n----------------------------------------\n\nTITLE: Conditional Headers Configuration - Kotlin\nDESCRIPTION: Shows changes to the version function signature for ConditionalHeaders plugin. The new version includes ApplicationCall parameter in the lambda.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migration-to-20x.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(ConditionalHeaders) {\n    version { outgoingContent ->\n        // ... \n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(ConditionalHeaders) {\n    version { call, outgoingContent ->\n        // ... \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Image with Gradle\nDESCRIPTION: Command to build and run a Docker image for the deployment-ktor-plugin project using Gradle wrapper.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/deployment-ktor-plugin/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :deployment-ktor-plugin:runDocker\n```\n\n----------------------------------------\n\nTITLE: Running a Ktor Static Website Project\nDESCRIPTION: Command to run the static website sample using Gradle. After execution, the static website will be accessible at the provided URL.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/tutorial-website-static/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :tutorial-website-static:run\n```\n\n----------------------------------------\n\nTITLE: Running the Nested Authentication Sample with Gradle\nDESCRIPTION: Command to execute the auth-form-session-nested sample from the repository's root directory using Gradle wrapper.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/auth-form-session-nested/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :auth-form-session-nested:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Server with Micrometer Metrics\nDESCRIPTION: Command to run the Ktor server sample application with Micrometer metrics enabled using Gradle.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/micrometer-metrics/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :micrometer-metrics:run\n```\n\n----------------------------------------\n\nTITLE: Running HTTP/2 Netty Sample Project\nDESCRIPTION: Command to execute the HTTP/2 Netty sample project from the repository's root directory. After running this command, the server will be available at https://localhost:8443 where you can verify HTTP/2 is being used.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/http2-netty/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :http2-netty:run\n```\n\n----------------------------------------\n\nTITLE: React Scheduler License Header\nDESCRIPTION: MIT license header for React Scheduler v0.20.2 production build\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/single-page-application/react-app/static/js/main.1ab8e223.js.LICENSE.txt#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @license React v0.20.2\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n```\n\n----------------------------------------\n\nTITLE: Server Configuration with ServerConfigBuilder\nDESCRIPTION: Shows how to use the new ServerConfigBuilder to configure server properties in Ktor 3.0.x.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migrating-3.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(args: Array<String>) {\n    embeddedServer(Netty,\n        serverConfig {\n            developmentMode = true\n            module(Application::module)\n        },\n        configure = {\n            connector { port = 12345 }\n        }\n    ).start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: Building Fat JAR with Gradle\nDESCRIPTION: Command to build a fat JAR for the deployment-ktor-plugin project using Gradle wrapper.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/deployment-ktor-plugin/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :deployment-ktor-plugin:buildFatJar\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Client Sample Project with Gradle\nDESCRIPTION: This command runs the Ktor Client sample project using Gradle. It should be executed in the repository's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/tutorial-client-get-started/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :tutorial-client-get-started:run\n```\n\n----------------------------------------\n\nTITLE: Creating SSL Certificate using keytool\nDESCRIPTION: Command to generate a keystore file with RSA key pair for localhost testing. Creates a self-signed certificate with a validity of 3 days and Subject Alternative Names for localhost.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-ssl-config/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -keystore snippets/ssl-engine-main/keystore.jks -alias sampleAlias -genkeypair -keyalg RSA -keysize 4096 -validity 3 -dname 'CN=localhost, OU=ktor, O=ktor, L=Unspecified, ST=Unspecified, C=US' -ext 'SAN:c=DNS:localhost,IP:127.0.0.1'\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Webjars Sample Project\nDESCRIPTION: Command to run the Webjars sample project using Gradle. This command should be executed in the repository's root directory to start the Ktor application.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/webjars/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :webjars:run\n```\n\n----------------------------------------\n\nTITLE: Running HTTP/2 Jetty Sample Project\nDESCRIPTION: Command to execute the HTTP/2 Jetty sample from the project's root directory. After running this command, the server will be available at https://localhost:8443 where you can verify HTTP/2 is being used.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/http2-jetty/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :http2-jetty:run\n```\n\n----------------------------------------\n\nTITLE: Running the Request Validation Sample Project\nDESCRIPTION: Command to execute the request validation sample application from the repository's root directory using Gradle. After running, you can use the post.http file to test how request validation works.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/request-validation/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :request-validation:run\n```\n\n----------------------------------------\n\nTITLE: Explicit Module Loading in TestApplication - Ktor 2.2.x vs 3.0.x\nDESCRIPTION: Shows the difference between test application setup in Ktor 2.2.x and 3.0.x, demonstrating how to explicitly load modules in Ktor 3.0.x using the application function within testApplication.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/migrating-3.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\nimport io.ktor.server.testing.*\nimport kotlin.test.*\n\n\nclass ApplicationTest {\n  @Test\n  fun testRoot() = testApplication {\n    client.get(\"/\").apply {\n      assertEquals(HttpStatusCode.OK, status)\n      assertEquals(\"Hello World!\", bodyAsText())\n    }\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.example.plugins.*\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\nimport io.ktor.server.testing.*\nimport kotlin.test.*\n\n\nclass ApplicationTest {\n  @Test\n  fun testRoot() = testApplication {\n    application {\n      configureRouting()\n    }\n    client.get(\"/\").apply {\n      assertEquals(HttpStatusCode.OK, status)\n      assertEquals(\"Hello World!\", bodyAsText())\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ktor File Upload Sample in Bash\nDESCRIPTION: Command to execute the Ktor file upload sample project using Gradle. This will start the server and make it ready to accept file upload requests.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/upload-file/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :upload-file:run\n```\n\n----------------------------------------\n\nTITLE: Running the TLS Sockets Client Sample with Gradle\nDESCRIPTION: Command to execute the TLS sockets client sample application using Gradle. This command should be run from the repository's root directory to start the demonstration application.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/sockets-client-tls/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :sockets-client-tls:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Custom Plugin Sample Project\nDESCRIPTION: Command to run the custom plugin sample project using Gradle in the repository's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/custom-plugin/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :custom-plugin:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Client Cookies Example\nDESCRIPTION: Command to execute the client cookies sample project using Gradle wrapper.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-cookies/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-cookies:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Server in Kotlin/Native\nDESCRIPTION: Command to run the Ktor server sample in a Kotlin/Native application. This command executes the release executable for the embedded-server-native project.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/embedded-server-native/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :embedded-server-native:runReleaseExecutableNative\n```\n\n----------------------------------------\n\nTITLE: Running Ktor JWT Authentication Sample\nDESCRIPTION: Gradle command to run the JWT authentication sample project with HS256 signing. This command should be executed from the repository's root directory to start the server.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/auth-jwt-hs256/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :auth-jwt-hs256:run\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Ktor Release History\nDESCRIPTION: This HTML table structure displays Ktor release history with version numbers, release dates, and highlight summaries. Each row includes a version variable tag and a link to detailed release notes.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/releases.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n<tr><td>Version</td><td>Release Date</td><td>Highlights</td></tr>\n<tr><td>3.1.2</td><td>March 27, 2025</td><td><p>\nA patch release that updates Kotlin to 2.1.20 and fixes various issues, including Base64 decoding, auth token clearing,\nAndroid server startup errors, WebSocket header formatting, and SSE session cancellation. \n</p>\n<var name=\"version\" value=\"3.1.2\"/>\n<include from=\"lib.topic\" element-id=\"release_details_link\"/>\n</td></tr>\n```\n\n----------------------------------------\n\nTITLE: CustomHeaderPlugin HTTP Response\nDESCRIPTION: HTTP response header demonstrating the custom header added by CustomHeaderPlugin.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/custom-plugin/README.md#2025-04-09_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nX-Custom-Header: Hello, world!\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Sample Project for Raw Data Reception\nDESCRIPTION: This command runs the Ktor sample project for receiving raw request data. It uses Gradle to execute the 'post-raw-data:run' task from the root directory of the repository.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/post-raw-data/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :post-raw-data:run\n```\n\n----------------------------------------\n\nTITLE: Running the Ktor SSE Client Application\nDESCRIPTION: Command to start the client application that demonstrates Server-Sent Events (SSE) functionality. This should be executed after the server is running.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-sse/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-sse:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Client Default Request Sample Project\nDESCRIPTION: This command executes the Gradle task to run the client-default-request sample project. It should be run from the root directory of the repository.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-default-request/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-default-request:run\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor Server in Kotlin/Native\nDESCRIPTION: Command to run the native tests for the Ktor server sample in a Kotlin/Native application. This command executes the nativeTest task for the embedded-server-native project.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/embedded-server-native/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :embedded-server-native:nativeTest\n```\n\n----------------------------------------\n\nTITLE: Starting the Ktor SSE Server Application\nDESCRIPTION: Command to start the Server-Sent Events (SSE) server application required for the client demo. This needs to be executed before running the client application.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-sse/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :server-sse:run\n```\n\n----------------------------------------\n\nTITLE: Form Field Limit Configuration Reference\nDESCRIPTION: Code reference to the FormFieldLimit configuration property that was fixed in a patch release. This shows how technical properties are displayed in the release notes.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/releases.md#2025-04-09_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<code>FormFieldLimit</code>\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Basic Auth Sample Application\nDESCRIPTION: Gradle command to run the basic authentication sample project that demonstrates UserHashedTableAuth functionality. The command should be executed from the repository's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/auth-basic-hash-table/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :auth-basic-hash-table:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Pebble Sample with Gradle\nDESCRIPTION: Command to execute the Pebble template sample application using Gradle. After running this command, the sample will be accessible at http://localhost:8080/index.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/pebble/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :pebble:run\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Ktor Tomcat WAR with Docker\nDESCRIPTION: Commands to build a WAR file, create a Docker image, and run the application in a container. After deployment, the application will be accessible at http://localhost:8080/tomcat-war/.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/tomcat-war/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :tomcat-war:war\ndocker build -t my-application snippets/tomcat-war\ndocker run -p 8080:8080 my-application\n```\n\n----------------------------------------\n\nTITLE: Running the Ktor Templates Application\nDESCRIPTION: Command to run the Ktor application from the project's root directory. The application will be accessible at http://0.0.0.0:8080.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/migrating-express-ktor/6_templates/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Project with Guice using Gradle\nDESCRIPTION: This command executes the Guice sample project using Gradle. It should be run from the repository's root directory to start the Ktor server.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/guice/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :guice:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Static Files Sample Project\nDESCRIPTION: Gradle command to run the static files sample project from the repository root directory. This command executes the static-files module of the project.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/static-files/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :static-files:run\n```\n\n----------------------------------------\n\nTITLE: Static Zip Support Reference\nDESCRIPTION: Code reference to the staticZip feature that was extended in a release candidate. This shows how feature names are displayed in the release notes.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/releases.md#2025-04-09_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<code>staticZip</code>\n```\n\n----------------------------------------\n\nTITLE: Creating App Engine Application\nDESCRIPTION: Command to create a new App Engine application in the Google Cloud project.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/google-appengine-standard/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app create\n```\n\n----------------------------------------\n\nTITLE: Building Ktor Migration Project\nDESCRIPTION: Command to build all projects in the Express to Ktor migration repository from the root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/migrating-express-ktor/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew build\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Non-2xx Response Validation Example\nDESCRIPTION: Gradle command to execute the sample project that demonstrates handling non-2xx HTTP responses with custom validation.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-validate-non-2xx-response/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-validate-non-2xx-response:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Application with Gradle\nDESCRIPTION: Command to run the Ktor application using Gradle. This should be executed from the project's root directory. Once running, the application will be accessible at http://0.0.0.0:8080.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/migrating-express-ktor/3_router/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew run\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Single Item from Ktor Gson Endpoint\nDESCRIPTION: Sample JSON response for a single item request, showing the key-value structure returned by the Ktor server.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/gson/README.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"A\",\n  \"value\": \"Apache\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Ktor Session Cookie Client Sample\nDESCRIPTION: Command to run the session-cookie-client sample from the repository's root directory using Gradle. This will start the application on localhost:8080.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/session-cookie-client/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :session-cookie-client:run\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Private Key with OpenSSL\nDESCRIPTION: Command to generate a 2048-bit RSA private key using OpenSSL and save it to a file named ktor.pk8.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/rsa-keys-generation.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenssl genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:2048 > ktor.pk8\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Conditional Headers Sample\nDESCRIPTION: Command to execute the conditional headers sample project using Gradle. After running, the server starts and serves content with ETag and Last-Modified headers at localhost:8080.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/conditional-headers/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :conditional-headers:run\n```\n\n----------------------------------------\n\nTITLE: Building Ktor Application with Gradle\nDESCRIPTION: Command to build the Ktor application using Gradle. This should be run from the project's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/migrating-express-ktor/3_router/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew build\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Status Pages Sample\nDESCRIPTION: Command to execute the status pages sample application using Gradle wrapper from the repository root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/status-pages/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :status-pages:run\n```\n\n----------------------------------------\n\nTITLE: Running the Ktor Middleware Application\nDESCRIPTION: Command to run the Ktor application that demonstrates custom middleware implementation. The application will be accessible at http://0.0.0.0:8080 after execution.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/migrating-express-ktor/8_middleware/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew run\n```\n\n----------------------------------------\n\nTITLE: Running the Client Submit Form Example with Gradle\nDESCRIPTION: Command to execute the client-submit-form sample using Gradle. This sample requires the server from the post-form-parameters example to be running.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-submit-form/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-submit-form:run\n```\n\n----------------------------------------\n\nTITLE: Running Type-safe Requests Example with Gradle\nDESCRIPTION: Gradle command to execute the client-type-safe-requests example application. This requires the resource-routing server example to be running.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-type-safe-requests/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-type-safe-requests:run\n```\n\n----------------------------------------\n\nTITLE: Deriving Public Key from Private Key with OpenSSL\nDESCRIPTION: Command to derive the public key from the previously generated private key using OpenSSL, and save it to a file named ktor.spki.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/rsa-keys-generation.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenssl rsa -in ktor.pk8 -pubout | tee ktor.spki\n```\n\n----------------------------------------\n\nTITLE: Running HTTP/2 Push Sample with Gradle\nDESCRIPTION: Command to execute the HTTP/2 push sample application using Gradle. This command should be run in the repository's root directory and will start the server on https://localhost:8443/.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/http2-push/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :http2-push:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor JSON Serialization Sample Project\nDESCRIPTION: Command to run the sample project demonstrating JSON serialization with kotlinx.serialization in Ktor. This command should be executed in the repository's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/json-kotlinx/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :json-kotlinx:run\n```\n\n----------------------------------------\n\nTITLE: Running WebSocket Server with Gradle\nDESCRIPTION: Command to start the WebSocket server which will listen on http://0.0.0.0:8080. Clients can connect via ws://localhost:8080/ws endpoint.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/server-websockets-sharedflow/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :server-websockets-sharedflow:run\n```\n\n----------------------------------------\n\nTITLE: Running Configured Ktor Embedded Server with Gradle\nDESCRIPTION: This command runs a configured Ktor server using the embeddedServer function. It is executed from the codeSnippets directory and uses Gradle to run the configured server in the embedded-server module.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/embedded-server/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :embedded-server:runConfiguredServer\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Data Conversion Example Service using Gradle\nDESCRIPTION: Command to run the data-conversion sample service from the repository's root directory using Gradle wrapper.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/data-conversion/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :data-conversion:run\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor Client with MockEngine\nDESCRIPTION: Command to run the tests for the Ktor client project that uses MockEngine. This command executes the test suite for the client-testing-mock module.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-testing-mock/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-testing-mock:test\n```\n\n----------------------------------------\n\nTITLE: Running a Ktor EngineMain YAML Sample with Gradle\nDESCRIPTION: Command for running the engine-main-yaml sample application using the Gradle wrapper from the repository's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/engine-main-yaml/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :engine-main-yaml:run\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Google OAuth Credentials\nDESCRIPTION: Commands to set the GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET environment variables for macOS/Linux and Windows systems. These credentials are required for OAuth authentication with Google APIs.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-auth-oauth-google/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# macOS/Linux\nexport GOOGLE_CLIENT_ID=yourClientId\nexport GOOGLE_CLIENT_SECRET=yourClientSecret\n\n# Windows\nsetx GOOGLE_CLIENT_ID yourClientId\nsetx GOOGLE_CLIENT_SECRET yourClientSecret\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Gson Sample with Gradle\nDESCRIPTION: Command to run the Gson sample project using Gradle in the repository's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/gson/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :gson:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Static Content Server\nDESCRIPTION: Gradle command to run the static content server example. After running this command, the static content will be accessible at http://localhost:8080/.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/static-zip/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :static-zip:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor embeddedServer Module Example with Gradle\nDESCRIPTION: This command runs the Ktor sample project demonstrating module loading with embeddedServer. It uses Gradle to execute the 'embedded-server-modules' task.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/embedded-server-modules/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :embedded-server-modules:run\n```\n\n----------------------------------------\n\nTITLE: Running Mustache Sample Ktor Project\nDESCRIPTION: This command executes the Mustache sample project using Gradle. It runs the application, making it accessible at http://localhost:8080/index.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/mustache/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :mustache:run\n```\n\n----------------------------------------\n\nTITLE: Expected Response from Data Conversion Example\nDESCRIPTION: Example of the expected response when calling the /date endpoint with parameter date=20170501, showing the successfully converted date value.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/data-conversion/README.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThe date is 2017-05-01\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from Ktor Gson Endpoint\nDESCRIPTION: Sample JSON response from the Ktor server, demonstrating the structure of the returned data including a name, items array, and date.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/gson/README.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"root\",\n  \"items\": [\n    {\n      \"key\": \"A\",\n      \"value\": \"Apache\"\n    },\n    {\n      \"key\": \"B\",\n      \"value\": \"Bing\"\n    }\n  ],\n  \"date\": \"2018-04-13\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Application\nDESCRIPTION: Command to run the Ktor application with auto-reload enabled.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/autoreload-engine-main/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :autoreload-engine-main:run\n```\n\n----------------------------------------\n\nTITLE: Running Basic Ktor Embedded Server with Gradle\nDESCRIPTION: This command runs a basic Ktor server using the embeddedServer function. It is executed from the codeSnippets directory and uses Gradle to run the embedded-server module.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/embedded-server/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :embedded-server:run\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for XForwardedHeader Demo\nDESCRIPTION: Command to start the Docker Compose environment for the XForwardedHeader demo application. This sets up the necessary containers and proxy configuration.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/forwarded-header/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ndocker compose --project-directory snippets/forwarded-header up\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Application with Gradle\nDESCRIPTION: Gradle command to run the Ktor application with custom environment configuration from the repository root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/engine-main-custom-environment/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :engine-main-custom-environment:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor XHttpMethodOverride Sample with Gradle\nDESCRIPTION: This command executes the Gradle task to run the json-kotlinx-method-override sample project, which demonstrates the XHttpMethodOverride plugin functionality in Ktor.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/json-kotlinx-method-override/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :json-kotlinx-method-override:run\n```\n\n----------------------------------------\n\nTITLE: Building Ktor Application with Gradle\nDESCRIPTION: Command to build the Ktor application from the project's root directory using Gradle wrapper.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/migrating-express-ktor/1_hello/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew build\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor Gson Item Endpoint with cURL\nDESCRIPTION: cURL command to test a specific item endpoint on the Ktor server, requesting JSON data for item 'A'.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/gson/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v --compress --header \"Accept: application/json\" http://localhost:8080/v1/item/A\n```\n\n----------------------------------------\n\nTITLE: Running the client component for file upload with progress in Ktor\nDESCRIPTION: Command to run the client-side component that demonstrates uploading a file to the server with progress tracking.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-upload-progress/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-upload-progress:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor EngineMain Server with Gradle\nDESCRIPTION: Command to run the Ktor server sample project using Gradle wrapper from the repository root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/engine-main/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :engine-main:run\n```\n\n----------------------------------------\n\nTITLE: SimplePlugin Console Output\nDESCRIPTION: Console output demonstrating the installation of SimplePlugin, which displays a greeting message.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/custom-plugin/README.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n2021-10-14 14:54:08.269 [main] INFO  Application - Autoreload is disabled because the development mode is off.\nSimplePlugin is installed!\n2021-10-14 14:54:08.900 [main] INFO  Application - Responding at http://0.0.0.0:8080\n```\n\n----------------------------------------\n\nTITLE: Running Slow Server Simulation in Ktor\nDESCRIPTION: This command executes the Gradle task to run the 'simulate-slow-server' sample project. It should be run from the root directory of the repository.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/simulate-slow-server/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :simulate-slow-server:run\n```\n\n----------------------------------------\n\nTITLE: Starting WebSocket Server in Ktor\nDESCRIPTION: Command to start the Ktor WebSocket server component using Gradle.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-websockets/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :server-websockets:run\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure from Root Endpoint\nDESCRIPTION: Sample JSON response showing the structure returned by the root endpoint, including name, items array with key-value pairs, and a date array.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/jackson/README.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\" : \"root\",\n  \"items\" : [ {\n    \"key\" : \"A\",\n    \"value\" : \"Apache\"\n  }, {\n    \"key\" : \"B\",\n    \"value\" : \"Bing\"\n  } ],\n  \"date\" : [ 2018, 3, 2 ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing JSON Serialization in Ktor\nDESCRIPTION: Instructions for testing the JSON serialization functionality. It includes accessing a specific URL to receive a JSON response and using a HTTP file to send a POST request with JSON data.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/json-kotlinx/README.md#2025-04-09_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:8080/customer/1\n```\n\n----------------------------------------\n\nTITLE: Running Ktor RESTful API Server with Gradle\nDESCRIPTION: This command runs the Ktor server for the RESTful API project using Gradle. It should be executed in the repository's root directory to start the server.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/tutorial-server-restful-api/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :tutorial-server-restful-api:run\n```\n\n----------------------------------------\n\nTITLE: Running Dropwizard Metrics Ktor Sample in Bash\nDESCRIPTION: This command runs the Dropwizard Metrics sample project using Gradle. It should be executed in the repository's root directory. After running, the sample home page can be accessed at http://localhost:8080/.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/dropwizard-metrics/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :dropwizard-metrics:run\n```\n\n----------------------------------------\n\nTITLE: Sample Log Output with Request ID\nDESCRIPTION: Example log output showing how the CallId plugin includes the request ID in application logs. The ID '13a3feb9-d83b-40ad-839a-d7d5cb147f54' was provided in the X-Request-ID header.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/call-id/README.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n2021-10-26 18:22:55.164 [eventLoopGroupProxy-4-1] 13a3feb9-d83b-40ad-839a-d7d5cb147f54 INFO  Application - 200 OK: GET - /\n```\n\n----------------------------------------\n\nTITLE: Running Ktor SSL Embedded Server Sample Project\nDESCRIPTION: This bash command runs the SSL embedded server sample project using Gradle. It executes the project from the repository's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/ssl-embedded-server/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :ssl-embedded-server:run\n```\n\n----------------------------------------\n\nTITLE: Building the Ktor Templates Application\nDESCRIPTION: Command to build the Ktor application from the project's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/migrating-express-ktor/6_templates/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew build\n```\n\n----------------------------------------\n\nTITLE: Testing Jackson API with cURL - Item Endpoint\nDESCRIPTION: cURL command to test retrieving a specific item by key from the /v1/item/{key} endpoint with compressed output and application/json accept header.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/jackson/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v --compress --header \"Accept: application/json\" http://localhost:8080/v1/item/A\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Application with Gradle\nDESCRIPTION: Command to run the built Ktor application using Gradle wrapper. The application will start a server on http://0.0.0.0:8080.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/migrating-express-ktor/1_hello/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew run\n```\n\n----------------------------------------\n\nTITLE: Running CORS Sample Project with Gradle\nDESCRIPTION: Command to execute the CORS sample project from the repository's root directory using Gradle. This command runs both the frontend and backend modules.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/cors/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :cors:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Custom Plugin Sample\nDESCRIPTION: Command to run the custom plugin sample application using Gradle. The application will start a server on localhost:8080.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/custom-plugin-base-api/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :custom-plugin-base-api:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Engine Modules Sample Application\nDESCRIPTION: Command to execute the Ktor modules sample application using Gradle from the repository root directory. This command runs the engine-main-modules project.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/engine-main-modules/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :engine-main-modules:run\n```\n\n----------------------------------------\n\nTITLE: Running SSL Server Example with Gradle\nDESCRIPTION: Command to start the Ktor server with SSL configuration from the ssl-engine-main example using Gradle.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-ssl-config/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :ssl-engine-main:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Jetty WAR Project Locally\nDESCRIPTION: Command to run the Ktor Jetty WAR project locally using Gradle. After execution, the application will be accessible at http://localhost:8080/.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/jetty-war/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :jetty-war:run\n```\n\n----------------------------------------\n\nTITLE: Interacting with Ktor Server via Telnet\nDESCRIPTION: This snippet shows the expected interaction with the Ktor server after connecting via telnet. It demonstrates entering a name and receiving a personalized greeting from the server.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/sockets-server/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n% ≈\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nPlease enter your name\nJetBrains\nHello, JetBrains!\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Static Content Application\nDESCRIPTION: Gradle command to run the Ktor application, which will start serving static content at http://0.0.0.0:8080.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/migrating-express-ktor/2_static/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew run\n```\n\n----------------------------------------\n\nTITLE: Running Server Sample for File Upload in Bash\nDESCRIPTION: Command to run the server sample for file uploading. This needs to be executed in the repository's root folder before running the client.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-upload/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :upload-file:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Compression Sample Project\nDESCRIPTION: Gradle command to execute the compression sample project from the repository root directory. After running, the server will start and compress responses using deflate encoding.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/compression/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :compression:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Basic Auth Sample\nDESCRIPTION: Command to run the basic authentication sample project using Gradle. The command needs to be executed from the repository's root directory and will start a server on localhost:8080.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/auth-basic/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :auth-basic:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Form Authentication Sample\nDESCRIPTION: Gradle command to run the form authentication sample application that demonstrates session-based authentication with a web form login.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/auth-form-session/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :auth-form-session:run\n```\n\n----------------------------------------\n\nTITLE: Copying Keystore to Client Directory\nDESCRIPTION: Command to copy the generated keystore file from the server example to the client SSL configuration example directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-ssl-config/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp snippets/ssl-engine-main/keystore.jks snippets/client-ssl-config/keystore.jks\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Client Logging Sample with Gradle\nDESCRIPTION: This command runs the Ktor client logging sample project using Gradle. It executes the project from the repository's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-logging-napier/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-logging-napier:run\n```\n\n----------------------------------------\n\nTITLE: Building Ktor Application with Gradle\nDESCRIPTION: Command to build the Ktor application using Gradle wrapper from the project's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/migrating-express-ktor/7_receive_request/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew build\n```\n\n----------------------------------------\n\nTITLE: Running the Ktor Application using Gradle\nDESCRIPTION: Command to run the Ktor application from the project's root directory using Gradle. The application will be accessible at http://0.0.0.0:8080.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/migrating-express-ktor/5_send_response/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew run\n```\n\n----------------------------------------\n\nTITLE: Running the server component for file upload in Ktor\nDESCRIPTION: Command to run the server-side component of the file upload example which will receive uploaded files from the client.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-upload-progress/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :upload-file:run\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Ktor Jetty WAR Project with Docker\nDESCRIPTION: Commands to build the WAR file, create a Docker image, and run the application in a Docker container. After execution, the application will be accessible at http://localhost:8080/jetty-war.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/jetty-war/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :jetty-war:war\ndocker build -t my-application snippets/jetty-war\ndocker run -p 8080:8080 my-application\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Digest Authentication Sample Project\nDESCRIPTION: This command runs the digest authentication sample project using Gradle. It should be executed in the repository's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/auth-digest/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :auth-digest:run\n```\n\n----------------------------------------\n\nTITLE: User Interaction Example for Ktor Client Sockets Sample\nDESCRIPTION: Example of user interaction with the client sockets sample application. It shows how to enter a name and receive a personalized greeting.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/sockets-client/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPlease enter your name\nJetBrains\nHello, JetBrains!\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Ktor Client Logging with Napier\nDESCRIPTION: This snippet shows an example of the logging output produced by the Ktor client when using Napier for logging. It includes details of the HTTP request such as the URL, method, and headers.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-logging-napier/README.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nFINEST: [VERBOSE] REQUEST: https://ktor.io/\nMETHOD: HttpMethod(value=GET)\nCOMMON HEADERS\n-> Accept: */*\n-> Accept-Charset: UTF-8\n...\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Application with Gradle\nDESCRIPTION: Command to run the Ktor application using Gradle wrapper. The application will be accessible at http://0.0.0.0:8080.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/migrating-express-ktor/7_receive_request/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew run\n```\n\n----------------------------------------\n\nTITLE: Running the CallId Sample Project with Gradle\nDESCRIPTION: Command to execute the CallId sample project using Gradle. This will start the Ktor server that demonstrates the CallId plugin functionality.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/call-id/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :call-id:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Client Sample with MockEngine\nDESCRIPTION: Command to run the Ktor client sample project that demonstrates testing with MockEngine. This command should be executed in the repository's root folder.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-testing-mock/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-testing-mock:run\n```\n\n----------------------------------------\n\nTITLE: Testing Jackson API with cURL - Root Endpoint\nDESCRIPTION: cURL command to test the root endpoint that returns a JSON response with compressed output and application/json accept header.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/jackson/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v --compressed --header \"Accept: application/json\" http://localhost:8080/v1\n```\n\n----------------------------------------\n\nTITLE: Running the Client Basic Authentication Example in Gradle\nDESCRIPTION: Command to run the client-auth-basic sample using Gradle. This sample depends on the auth-basic server example and should respond with a 'Hello, jetbrains!' message when executed correctly.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-auth-basic/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-auth-basic:run\n```\n\n----------------------------------------\n\nTITLE: Sample Output: OAuth Authorization URL\nDESCRIPTION: Example of the program output showing the OAuth authorization URL. Users need to open this URL in a browser to log in and obtain the authorization code.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-auth-oauth-google/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n10:00:00: Executing task ' run --console=plain --quiet'...\n\nhttps://accounts.google.com/o/oauth2/auth?client_id=21966501804...\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Client Retry Sample\nDESCRIPTION: Gradle command to execute the client retry example. The command runs the client application which demonstrates automatic request retries against a test server that returns success only on the third attempt.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-retry/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-retry:run\n```\n\n----------------------------------------\n\nTITLE: Running Minimized JAR with Gradle Task\nDESCRIPTION: Alternative command to directly run the minimized JAR using a dedicated Gradle task.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/proguard/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :proguard:runMinimizedJar\n```\n\n----------------------------------------\n\nTITLE: Running Ktor File Download Application with Gradle\nDESCRIPTION: Command to start the Ktor application that serves downloadable files. The application runs on localhost:8080 and provides endpoints for downloading PNG and TXT files.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/download-file/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :download-file:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Call ID Client Sample\nDESCRIPTION: Command to execute the client sample application that makes 3 requests to the API service and demonstrates call ID functionality.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-call-id/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-call-id:run\n```\n\n----------------------------------------\n\nTITLE: Starting OpenLDAP Docker Container\nDESCRIPTION: Command to start the LDAP server using Docker Compose, which pulls and builds necessary images and starts the containers.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/auth-ldap/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Running the Curl Engine Sample Application with Gradle\nDESCRIPTION: Command to execute the Curl engine sample application using Gradle. This command runs the release version of the native executable from the repository's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-engine-curl/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-engine-curl:runReleaseExecutableNative\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Ktor\nDESCRIPTION: Commands for setting the KTOR_ENV environment variable on different operating systems. Shows both macOS/Linux export command and Windows setx command.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/engine-main-custom-environment/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# macOS/Linux\nexport KTOR_ENV=dev\n   \n# Windows\nsetx KTOR_ENV dev\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Client Content Encoding Example\nDESCRIPTION: Gradle command to execute the client content encoding sample application. Requires the compression server example to be running.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-content-encoding/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-content-encoding:run\n```\n\n----------------------------------------\n\nTITLE: Running Resource Routing Example with Gradle\nDESCRIPTION: Command to execute the resource routing sample application using Gradle wrapper from the repository's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/resource-routing/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :resource-routing:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Authorization Plugin Sample\nDESCRIPTION: Command to run the custom authorization plugin sample application using Gradle. The application exposes admin and profile endpoints that require authentication with specific usernames.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/custom-plugin-authorization/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :custom-plugin-authorization:run\n```\n\n----------------------------------------\n\nTITLE: Building Ktor Project with Auto-reload\nDESCRIPTION: Command to enable automatic project rebuilding for auto-reload functionality. The -t flag enables continuous build mode.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/autoreload-engine-main/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew -t :autoreload-engine-main:build\n```\n\n----------------------------------------\n\nTITLE: Connecting to Ktor Server using Telnet\nDESCRIPTION: This command uses telnet to connect to the running Ktor server application on localhost at port 9002. It allows users to interact with the server through a terminal interface.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/sockets-server/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntelnet 127.0.0.1 9002\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Server Sockets Example with Gradle\nDESCRIPTION: This command runs the sockets-server example using Gradle. It should be executed in the repository's root directory to start the server application.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/sockets-server/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :sockets-server:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor Auth Example via Gradle\nDESCRIPTION: Command to run a basic HTTP authentication example using Gradle from the codeSnippets folder.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :auth-basic:run\n```\n\n----------------------------------------\n\nTITLE: Running Ktor HTML DSL Sample Project\nDESCRIPTION: Command to run the Ktor HTML DSL sample project using Gradle. This command should be executed in the repository's root directory to start the server.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/html/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :html:run\n```\n\n----------------------------------------\n\nTITLE: Running WebSocket Server Tests\nDESCRIPTION: Command to execute unit tests located in src/test/kotlin/com/example directory using Gradle.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/server-websockets-sharedflow/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :server-websockets-sharedflow:test\n```\n\n----------------------------------------\n\nTITLE: Running the Ktor Application with Gradle\nDESCRIPTION: Command to run the built Ktor application using Gradle wrapper from the project's root directory. The application will be accessible at http://0.0.0.0:8080.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/migrating-express-ktor/4_parameters/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew run\n```\n\n----------------------------------------\n\nTITLE: Running JTE Sample Ktor Application\nDESCRIPTION: Command to run the JTE sample Ktor application using Gradle. After execution, the application will be accessible at http://localhost:8080/index.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/jte/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :jte:run\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Bearer Authentication in Ktor Client\nDESCRIPTION: Shows how to install and configure basic Bearer authentication in a Ktor client using the Auth plugin.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/topics/client-bearer-auth.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO) {\n    install(Auth) {\n       bearer {\n          // Configure bearer authentication\n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: React Core License Header\nDESCRIPTION: MIT license header for React core library v17.0.2 production build\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/single-page-application/react-app/static/js/main.1ab8e223.js.LICENSE.txt#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @license React v17.0.2\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n```\n\n----------------------------------------\n\nTITLE: Running the Ktor Client Validation Example with Gradle\nDESCRIPTION: Command to execute the client-validate-2xx-response example using Gradle. Before running this command, you need to start a server that simulates sending error details in 2XX responses with JSON format.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/client-validate-2xx-response/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :client-validate-2xx-response:run\n```\n\n----------------------------------------\n\nTITLE: Creating SSL Keystore with Keytool for Ktor Server\nDESCRIPTION: Command for generating a keystore file with RSA keys for SSL configuration in Ktor. It creates a keystore with a localhost certificate valid for both the domain name and IP address.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/ssl-engine-main/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nkeytool -keystore snippets/ssl-engine-main/keystore.jks -alias sampleAlias -genkeypair -keyalg RSA -keysize 4096 -validity 3 -dname 'CN=localhost, OU=ktor, O=ktor, L=Unspecified, ST=Unspecified, C=US' -ext 'SAN:c=DNS:localhost,IP:127.0.0.1'\n```\n\n----------------------------------------\n\nTITLE: Building Fat JAR for Ktor Application\nDESCRIPTION: Command to create a fat JAR containing the Ktor application with XForwardedHeader plugin implementation.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/forwarded-header/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n./gradlew :forwarded-header:buildFatJar\n```\n\n----------------------------------------\n\nTITLE: RequestLoggingPlugin Console Output\nDESCRIPTION: Console output showing the logged URLs from RequestLoggingPlugin when visiting different pages.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/custom-plugin/README.md#2025-04-09_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nRequest URL: http://localhost:8080/\nRequest URL: http://localhost:8080/index\n```\n\n----------------------------------------\n\nTITLE: React DOM License Header\nDESCRIPTION: MIT license header for React DOM v17.0.2 production build\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/single-page-application/react-app/static/js/main.1ab8e223.js.LICENSE.txt#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @license React v17.0.2\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n```\n\n----------------------------------------\n\nTITLE: Running Ktor WebSockets Task Application\nDESCRIPTION: Command to run the Ktor WebSockets task application using Gradle. This command should be executed from the repository's root directory to start the server on port 8080.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/tutorial-server-websockets/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :tutorial-server-websockets:run\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch from Main\nDESCRIPTION: Command to create and checkout a new branch from the upstream main branch for making contributions.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/CONTRIBUTING.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b your_branch_name upstream/main\n```\n\n----------------------------------------\n\nTITLE: Running Ktor HSTS Sample Project with Gradle\nDESCRIPTION: This command runs the Ktor HSTS sample project using Gradle. It executes the 'run' task for the 'ssl-engine-main-hsts' subproject.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/ssl-engine-main-hsts/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n./gradlew :ssl-engine-main-hsts:run\n```\n\n----------------------------------------\n\nTITLE: Running CSS DSL Sample Project with Gradle\nDESCRIPTION: Command to execute the CSS DSL sample project using Gradle from the repository's root directory. After running, the application will be accessible at http://localhost:8080/html-dsl.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/css-dsl/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :css-dsl:run\n```\n\n----------------------------------------\n\nTITLE: Building the Ktor Middleware Application\nDESCRIPTION: Command to build the Ktor application that demonstrates custom middleware implementation. This should be executed from the project's root directory.\nSOURCE: https://github.com/ktorio/ktor-documentation/blob/main/codeSnippets/snippets/migrating-express-ktor/8_middleware/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew build\n```"
  }
]