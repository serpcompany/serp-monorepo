[
  {
    "owner": "bigcommerce",
    "repo": "docs",
    "content": "TITLE: Fetching Product Listings with GraphQL Storefront API in JavaScript\nDESCRIPTION: A JavaScript function that queries the BigCommerce GraphQL Storefront API to retrieve product listing information. It handles pagination using the GraphQL Cursor Connections Specification model and returns product details including ID, name, SKU, description, and pricing.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/products/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getProductInfo(params) {\n    const storeUrl = new URL(params.store_url);\n\n    // Use the store's canonical URL which should always resolve\n    const graphQLUrl = `${storeUrl.origin}/graphql`;\n\n    // Set up GraphQL query\n    const graphQLQuery = `\n        query productListing {\n            site {\n                products {\n                    pageInfo {\n                        startCursor\n                        endCursor\n                        }\n                    edges {\n                        cursor\n                        node {\n                            id\n                            entityId\n                            name\n                            sku\n                            description\n                            prices {\n                                price {\n                                    value\n                                    currencyCode\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }`\n\n    // Fetch data from the GraphQL Storefront API\n    return fetch(graphQLUrl, {\n        method: 'POST',\n        credentials: 'include',\n        mode: 'cors',\n        headers: { \n            'Content-Type': 'application/json', \n            'Authorization': `Bearer ${params.token}`},\n            body: JSON.stringify({ query: graphQLQuery}),\n        })\n        .then(res => res.json())\n        .then(res => res.data);\n    }\n\n    // Set up default params\n    let params = {\n        store_url: null,\n        token: null\n    };\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer Access Token with GraphQL Login Mutation\nDESCRIPTION: This snippet demonstrates how to create a customer access token by using the login mutation with GraphQL Storefront API. The token is required for authenticating customer-specific requests. Variables include user email and password.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/graphql-storefront.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"user@email.com\", \n  \"pass\": \"password\"\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\n# Create a customer access token\nPOST https:{{storeDomain}}/graphql\nAuthorization: Bearer {{STOREFRONT_TOKEN}}\nAccept: application/json\nContent-Type: application/json\n\nmutation Login($email: String!, $pass: String!) {\n  login(email: $email, password: $pass) {\n   result\n   customer {\n     entityId\n     email\n   }\n   customerAccessToken {\n     value\n     expiresAt\n }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Order with BigCommerce REST API\nDESCRIPTION: This snippet demonstrates how to create an order using the BigCommerce REST API. It includes the minimum required fields for a create order request, including billing address and product details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v2/orders\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"billing_address\": {\n    \"first_name\": \"Jane\",\n    \"last_name\": \"Doe\",\n    \"street_1\": \"123 Main Street\",\n    \"city\": \"Austin\",\n    \"state\": \"Texas\",\n    \"zip\": \"78751\",\n    \"country\": \"United States\",\n    \"country_iso2\": \"US\",\n    \"email\": \"janedoe@email.com\"\n  },\n  \"products\": [\n    {\n      \"name\": \"BigCommerce Coffee Mug\",\n      \"quantity\": 1,\n      \"price_inc_tax\": 50,\n      \"price_ex_tax\": 45\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Customer using GraphQL Mutation\nDESCRIPTION: This mutation demonstrates how to register a new customer with various details including personal information, address, and custom form fields. It also shows how to handle potential errors.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/customers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  customer {\n    registerCustomer(\n      reCaptchaV2: { token: \"\" }\n      input: {\n        firstName: \"Jon\"\n        lastName: \"Smith\"\n        email: \"jon@example.com\"\n        password: \"Password123!\"\n        phone: \"123-456-7890\"\n        company: \"BC\"\n        address: {\n          firstName: \"Jon\"\n          lastName: \"Smith\"\n          address1: \"1234 Fake Street\"\n          address2: \"\"\n          city: \"Austin\"\n          company: \"BC\"\n          countryCode: \"US\"\n          stateOrProvince: \"TX\"\n          phone: \"123-456-7890\"\n          postalCode: \"78610\"\n        }\n        formFields: {\n          checkboxes: [{ fieldEntityId: 1, fieldValueEntityIds: [1, 2, 3] }]\n          multipleChoices: [{ fieldEntityId: 1, fieldValueEntityId: 2 }]\n          numbers: [{ fieldEntityId: 1, number: 1.0 }]\n          texts: [{ fieldEntityId: 1, text: \"text\" }]\n          passwords: [{ fieldEntityId: 1, password: \"password\" }]\n        }\n      }\n    ) {\n      customer {\n        firstName\n        lastName\n      }\n      errors {\n        __typename\n        ... on ValidationError {\n          message\n        }\n        ... on CustomerRegistrationError {\n          message\n        }\n        ... on EmailAlreadyInUseError {\n          message\n        }\n        ... on AccountCreationDisabledError {\n          message\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Blog Posts with GraphQL in BigCommerce\nDESCRIPTION: GraphQL query to retrieve blog posts with filters for tags, including post metadata, content, author information, and SEO details. Supports filtering by tags and includes image URL customization options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/site-content.mdx#2025-04-16_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    content {\n      blog {\n        name\n        description\n        path\n        posts (filters: {tags:[\"Most Popular\", \"Holiday\"]}) {\n          edges {\n            node {\n              entityId\n              name\n              tags\n              htmlBody\n              plainTextSummary (characterLimit: 100)\n              author\n              path\n              publishedDate {\n                utc\n              }\n              thumbnailImage {\n                url (width: 100, height: 200)\n                urlOriginal\n                altText\n                isDefault\n              }\n              seo {\n                pageTitle\n                metaKeywords\n                metaDescription\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Product with BigCommerce API\nDESCRIPTION: This snippet demonstrates how to create a basic physical product using a POST request to the BigCommerce API. It includes essential product details such as name, price, categories, weight, and type.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"name\": \"BigCommerce Coffee Mug\",\n  \"price\": \"10.00\",\n  \"categories\": [\n    23,\n    21\n  ],\n  \"weight\": 4,\n  \"type\": \"physical\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Country Data by ID in BigCommerce with JavaScript\nDESCRIPTION: This example demonstrates how to retrieve standardized country names by numeric ID using the utils.api.countries.getById method. It sends a GET request to the endpoint with the provided country ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nutils.api.countries.getById(countryId, (err, res) => {\n  const url = this.endpoint + countryId;\n  this.remoteRequest(url, 'GET', {}, callback);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Checkout SDK\nDESCRIPTION: Async function to initialize the Checkout SDK, create a checkout service, and load the checkout with the current cart ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/checkout-sdk/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n        const initSdk = async () => {\n            window.module = await checkoutKitLoader.load('checkout-sdk');\n            window.service = module.createCheckoutService();\n            window.state = await service.loadCheckout('{{{ checkout.id }}}');\n        };\n        initSdk();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Content Override with partial Helper in Handlebars\nDESCRIPTION: Shows how to use the partial helper to override content defined by the block helper. It takes a string parameter to identify the block to override.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_100\n\nLANGUAGE: handlebars\nCODE:\n```\n{{partial string}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#partial \"head\"}}\n    {{#if pagination.category.previous}}\n        <link rel=\"prev\" href=\"{{pagination.category.previous}}\">\n    {{/if}}\n    {{#if pagination.category.next}}\n        <link rel=\"next\" href=\"{{pagination.category.next}}\">\n    {{/if}}\n{{/partial}}\n```\n\n----------------------------------------\n\nTITLE: Making GraphQL Requests in Stencil Theme\nDESCRIPTION: Example implementation showing how to make GraphQL API calls from within a Stencil theme using the Fetch API and auto-generated tokens for authentication.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  fetch('/graphql', {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer {{ settings.storefront_api.token }}' // use auto-generated token\n    },\n    body: JSON.stringify({\n      query: `query MyFirstQuery {\n        site {\n          settings {\n            storeName\n          }\n          products {\n            edges {\n              node {\n                name\n                sku\n                defaultImage {\n                  url(width: 1280)\n                }\n              }\n            }\n          }\n        }\n      }`\n    })\n  })\n  .then(res => res.json())\n  .then(data => console.log(data)) // will log JSON result to browser console\n  .catch(error => console.error(error));\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Product with Variant Options in BigCommerce API\nDESCRIPTION: This example shows how to create a product with variant options (like color) using the BigCommerce API. It includes a variants array in the request body to specify different SKUs and option values.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"name\": \"BigCommerce Coffee Mug\",\n  \"price\": \"10.00\",\n  \"categories\": [\n    23,\n    21\n  ],\n  \"weight\": 4,\n  \"type\": \"physical\",\n  \"variants\": [\n    {\n      \"sku\": \"SKU-BLU\",\n      \"option_values\": [\n        {\n          \"option_display_name\": \"Mug Color\",\n          \"label\": \"Blue\"\n        }\n      ]\n    },\n    {\n      \"sku\": \"SKU-GRAY\",\n      \"option_values\": [\n        {\n          \"option_display_name\": \"Mug Color\",\n          \"label\": \"Gray\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Visit with VisitStartedEvent Mutation in GraphQL\nDESCRIPTION: This GraphQL mutation initiates a visit in the BigCommerce analytics system. It requires a visitId and visitorId in UUID format, along with request details and consent information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/data-events.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\nmutation VisitStartedEvent {\n    analytics {\n        visitStartedEvent(input: {\n            commonInput: {\n                initiator: {\n                    visitId: \"5acfce80-0d45-47b9-adca-d2d894e60444\",\n                    visitorId: \"a1711d5c-59a1-4b67-8880-cff92d591444\"\n                },\n                request: {\n                    url: \"www.bigcommerce.com\",\n                    userAgent: \"PostmanRuntime\"\n                },\n                consent: {\n                    targeting: true,\n                    analytics: true,\n                    functional: true\n                }\n            }\n        }) {\n            executed\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Product Images Query in JSON\nDESCRIPTION: This JSON object contains the response from the GraphQL query for product images, detailing the URLs and properties of the images retrieved for the specified product. The response includes multiple image nodes with URLs for different resolutions along with metadata such as alt text and default status.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"product\": {\n        \"images\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"url\": \"https://cdn11.bigcommerce.com/s-{store_hash}/images/stencil/1w/products/113/379/IMAG0729__87810.1662649673.jpg\",\n                \"urlOriginal\": \"https://cdn11.bigcommerce.com/s-{store_hash}/images/stencil/original/products/113/379/IMAG0729__87810.1662649673.jpg\",\n                \"altText\": \"\",\n                \"isDefault\": false\n              }\n            },\n            {\n              \"node\": {\n                \"url\": \"https://cdn11.bigcommerce.com/s-{store_hash}/images/stencil/1w/products/113/378/IMAG0724__62769.1662649673.jpg\",\n                \"urlOriginal\": \"https://cdn11.bigcommerce.com/s-{store_hash}/images/stencil/original/products/113/378/IMAG0724__62769.1662649673.jpg\",\n                \"altText\": \"\",\n                \"isDefault\": true\n              }\n            }\n          ]\n        },\n        \"defaultImage\": {\n          \"url\": \"https://cdn11.bigcommerce.com/s-{store_hash}/images/stencil/1w/products/113/378/IMAG0724__62769.1662649673.jpg\",\n          \"urlOriginal\": \"https://cdn11.bigcommerce.com/s-{store_hash}/images/stencil/original/products/113/378/IMAG0724__62769.1662649673.jpg\",\n          \"altText\": \"\",\n          \"isDefault\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Billing Address to BigCommerce Checkout in JavaScript\nDESCRIPTION: Helper function for adding a billing address to a checkout using the BigCommerce Storefront API. Requires the cart/checkout ID and address details to create or update the billing information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addBillingAddress(url, cartId, data) {\n  return fetch(url + cartId + `/billing-address`,  {\n    method: \"POST\",\n    credentials: \"same-origin\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  })\n  .then(response => response.json())\n  .catch(error => console.error(error));\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Cart Information with GraphQL in BigCommerce\nDESCRIPTION: This GraphQL query retrieves comprehensive cart information including entity ID, currency, pricing, discounts, and line items. It showcases how to access physical items, digital items, gift certificates, and custom items with their associated properties and selected options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/graphql-storefront.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery getCart {\n  site {\n    cart {\n      entityId\n      currencyCode\n      isTaxIncluded\n      baseAmount {\n        currencyCode\n        value\n      }\n      discountedAmount {\n        currencyCode\n        value\n      }\n      amount {\n        currencyCode\n        value\n      }\n      discounts {\n        entityId\n        discountedAmount {\n          currencyCode\n          value\n        }\n      }\n      lineItems {\n        physicalItems {\n          entityId\n          parentEntityId\n          variantEntityId\n          productEntityId\n          sku\n          name\n          path\n          imageUrl\n          brand\n          quantity\n          isTaxable\n          discounts {\n            entityId\n            discountedAmount {\n              currencyCode\n              value\n            }\n          }\n          discountedAmount {\n            currencyCode\n            value\n          }\n          couponAmount {\n            currencyCode\n            value\n          }\n          listPrice {\n            currencyCode\n            value\n          }\n          originalPrice {\n            currencyCode\n            value\n          }\n          salePrice {\n            currencyCode\n            value\n          }\n          extendedListPrice {\n            currencyCode\n            value\n          }\n          extendedSalePrice {\n            currencyCode\n            value\n          }\n          isShippingRequired\n          selectedOptions {\n            entityId\n            name\n            ... on CartSelectedCheckboxOption {\n              value\n              valueEntityId\n            }\n            ... on CartSelectedDateFieldOption {\n              date {\n                utc\n              }\n            }\n            ... on CartSelectedFileUploadOption {\n              fileName\n            }\n            ... on CartSelectedMultiLineTextFieldOption {\n              text\n            }\n            ... on CartSelectedMultipleChoiceOption {\n              value\n              valueEntityId\n            }\n            ... on CartSelectedNumberFieldOption {\n              number\n            }\n            ... on CartSelectedTextFieldOption {\n              text\n            }\n          }\n          giftWrapping {\n            name\n            amount {\n              currencyCode\n              value\n            }\n            message\n          }\n        }\n        digitalItems {\n          entityId\n          parentEntityId\n          variantEntityId\n          productEntityId\n          sku\n          name\n          path\n          imageUrl\n          brand\n          quantity\n          isTaxable\n          discounts {\n            entityId\n            discountedAmount {\n              currencyCode\n              value\n            }\n          }\n          discountedAmount {\n            currencyCode\n            value\n          }\n          couponAmount {\n            currencyCode\n            value\n          }\n          listPrice {\n            currencyCode\n            value\n          }\n          originalPrice {\n            currencyCode\n            value\n          }\n          salePrice {\n            currencyCode\n            value\n          }\n          extendedListPrice {\n            currencyCode\n            value\n          }\n          extendedSalePrice {\n            currencyCode\n            value\n          }\n          selectedOptions {\n            entityId\n            name\n            ... on CartSelectedCheckboxOption {\n              value\n              valueEntityId\n            }\n            ... on CartSelectedDateFieldOption {\n              date {\n                utc\n              }\n            }\n            ... on CartSelectedFileUploadOption {\n              fileName\n            }\n            ... on CartSelectedMultiLineTextFieldOption {\n              text\n            }\n            ... on CartSelectedMultipleChoiceOption {\n              value\n              valueEntityId\n            }\n            ... on CartSelectedNumberFieldOption {\n              number\n            }\n            ... on CartSelectedTextFieldOption {\n              text\n            }\n          }\n        }\n        giftCertificates {\n          entityId\n          name\n          theme\n          amount {\n            currencyCode\n            value\n          }\n          isTaxable\n          sender {\n            name\n            email\n          }\n          recipient {\n            name\n            email\n          }\n          message\n        }\n        customItems {\n          entityId\n          sku\n          name\n          quantity\n          listPrice {\n            currencyCode\n            value\n          }\n          extendedListPrice {\n            currencyCode\n            value\n          }\n        }\n        totalQuantity\n      }\n      createdAt {\n        utc\n      }\n      updatedAt {\n        utc\n      }\n      locale\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Choice Product Options Query Response in JSON\nDESCRIPTION: Example JSON response for a query retrieving multiple choice product options and their values. It shows a Size option with swatch values that include hex color codes and default status indicators.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"product\": {\n        \"productOptions\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"displayStyle\": \"Swatch\",\n                \"entityId\": 126,\n                \"displayName\": \"Size\",\n                \"isRequired\": true,\n                \"isVariantOption\": true,\n                \"values\": {\n                  \"edges\": [\n                    {\n                      \"node\": {\n                        \"hexColors\": [\n                          \"#912727\",\n                          \"#D6A67C\"\n                        ],\n                        \"imageUrl\": null,\n                        \"entityId\": 129,\n                        \"label\": \"Small\",\n                        \"isDefault\": false\n                      }\n                    },\n                    {\n                      \"node\": {\n                        \"hexColors\": [\n                          \"#46A754\",\n                          \"#487790\",\n                          \"#5645AF\"\n                        ],\n                        \"imageUrl\": null,\n                        \"entityId\": 130,\n                        \"label\": \"Medium\",\n                        \"isDefault\": true\n                      }\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Single Product with GraphQL\nDESCRIPTION: Basic GraphQL query to retrieve a single product by entityId from the storefront API.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    product (entityId: 111) {\n      # fields on the Product object type\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Products with REST API Batch Request\nDESCRIPTION: An HTTP PUT request example for updating multiple products in a single operation using BigCommerce's REST Products API. The request includes a JSON array of product objects with updated values for fields like name, inventory level, and price.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/products/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n[\n  {\n    \"id\": 77,\n    \"name\": \"Fog Linen Chambray Towel - Beige Stripe\",\n    \"inventory_level\": 11,\n    \"price\": 55.97\n  },\n  {\n    \"id\": 80,\n    \"name\": \"Orbit Terrarium - Large\",\n    \"inventory_level\": 15,\n    \"price\": 100.99\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Endpoint in TypeScript\nDESCRIPTION: Sets up the authentication endpoint for app installation using NextApiRequest/Response. Handles authentication through getBCAuth and stores session data.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { encodePayload, getBCAuth, setSession } from '../../lib/auth';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function auth(req: NextApiRequest, res: NextApiResponse) {\n    try {\n        // Authenticate the app on install\n        const session = await getBCAuth(req.query);\n        const encodedContext = encodePayload(session); // Signed JWT to validate/ prevent tampering\n\n        await setSession(session);\n        res.redirect(302, `/?context=${encodedContext}`);\n    } catch (error) {\n        const { message, response } = error;\n        res.status(response?.status || 500).json({ message });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Orders with Status Filter in GraphQL\nDESCRIPTION: GraphQL query to fetch all completed orders including consignment details, line items, product options, and pricing information. Filters orders by COMPLETED status and returns detailed shipping and product information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/orders.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetAllOrders {\n  customer {\n    orders(filters: {status: COMPLETED}) {\n      edges {\n        node {\n          consignments {\n            shipping {\n              edges {\n                node {\n                  lineItems {\n                    edges {\n                      node {\n                        brand\n                        entityId\n                        name\n                        productOptions {\n                          name\n                          value\n                        }\n                        quantity\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          subTotal {\n            currencyCode\n            value\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating BigCommerce Webhook - HTTP POST Request\nDESCRIPTION: Example of creating a webhook subscription via the BigCommerce API. The request creates an active webhook that listens for order update events and sends notifications to a specified destination URL.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/events.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{STORE_HASH}/v2/hooks\nX-Auth-Token: {ACCESS_TOKEN}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"scope\": \"store/order/updated\",\n  \"destination\": \"https://665b65a6.ngrok.io/webhooks\",\n  \"is_active\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Response from Adding Consignment to Checkout\nDESCRIPTION: This response shows the checkout object after adding a consignment. It includes the cart details, billing address, and the newly created consignment with shipping address and line item IDs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/rest-management.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": \"3cae6525-d0e8-4252-afec-0890fbb710c5\",\n    \"cart\": {\n      \"id\": \"3cae6525-d0e8-4252-afec-0890fbb710c5\",\n      \"customer_id\": 0,\n      \"channel_id\": 1,\n      \"email\": \"Test.user@email.com\",\n      \"currency\": {\n        \"code\": \"USD\"\n      },\n      \"tax_included\": false,\n      \"base_amount\": 30,\n      \"discount_amount\": 4.5,\n      \"cart_amount_inc_tax\": 25.5,\n      \"cart_amount_ex_tax\": 23.56,\n      \"coupons\": [],\n      \"line_items\": {\n        \"physical_items\": [\n          {\n            \"id\": \"ca9ef0d1-1da9-48e5-a505-7051eb575432\",\n            \"parent_id\": null,\n            \"variant_id\": 118,\n            \"product_id\": 120,\n            \"sku\": \"SM-13\",\n            \"name\": \"mug\",\n            \"url\": \"https://arabic-store.mybigcommerce.com/bigcommerce-coffee-mug/\",\n            \"quantity\": 2,\n            \"is_taxable\": true,\n            \"image_url\": \"https://cdn11.bigcommerce.com/r-4b20dad619e29ebf3490f7f35369a8220637ce48/themes/ClassicNext/images/ProductDefault.gif\",\n            \"coupons\": [],\n            \"discount_amount\": 0,\n            \"coupon_amount\": 0,\n            \"original_price\": 15,\n            \"list_price\": 15,\n            \"sale_price\": 13.858823529412,\n            \"extended_list_price\": 30,\n            \"extended_sale_price\": 27.717647058824,\n            \"is_require_shipping\": true,\n            \"gift_wrapping\": null,\n            \"is_mutable\": true\n          }\n        ],\n        \"digital_items\": [],\n        \"gift_certificates\": [],\n        \"custom_items\": []\n      },\n      \"created_time\": \"2023-09-28T20:30:33+00:00\",\n      \"updated_time\": \"2023-09-29T16:34:35+00:00\"\n    },\n    \"billing_address\": {\n      \"id\": \"6516f14419a81\",\n      \"first_name\": \"Test\",\n      \"last_name\": \"User\",\n      \"email\": \"Test.user@email.com\",\n      \"company\": \"BigCommerce\",\n      \"address1\": \"555 Main Street\",\n      \"address2\": \"\",\n      \"city\": \"Austin\",\n      \"state_or_province\": \"Texas\",\n      \"state_or_province_code\": \"TX\",\n      \"country\": \"United States\",\n      \"country_code\": \"US\",\n      \"postal_code\": \"78701\",\n      \"phone\": \"555-555-5555\",\n      \"custom_fields\": []\n    },\n    \"consignments\": [\n      {\n        \"id\": \"6516fc9bbf6ef\",\n        \"shipping_cost_inc_tax\": 0,\n        \"shipping_cost_ex_tax\": 0,\n        \"handling_cost_inc_tax\": 0,\n        \"handling_cost_ex_tax\": 0,\n        \"coupon_discounts\": [],\n        \"discounts\": [],\n        \"line_item_ids\": [\n          \"ca9ef0d1-1da9-48e5-a505-7051eb575432\"\n        ],\n        \"shipping_address\": {\n          \"first_name\": \"\",\n          \"last_name\": \"\",\n          \"email\": \"\",\n          \"company\": \"\",\n          \"address1\": \"13409 GENT DR\",\n          \"address2\": \"\",\n          \"city\": \"AUSTIN\",\n          \"state_or_province\": \"Texas\",\n          \"state_or_province_code\": \"TX\",\n          \"country\": \"United States\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Customer with V3 API\nDESCRIPTION: Endpoint for creating a single customer using the V3 API, which allows creating customer attributes and address in one step.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/customers/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\n/customers\n```\n\n----------------------------------------\n\nTITLE: Updating a Customer using BigCommerce V3 API (HTTP)\nDESCRIPTION: This snippet demonstrates how to update a customer's information using the BigCommerce V3 API. It includes the necessary headers and JSON payload structure for a PUT request.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/customers/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/customers\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"id\": 12,\n    \"email\": \"janedoe@example.com\",\n    \"first_name\": \"Jane\",\n    \"last_name\": \"Doe\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTPS Webhook via REST API in BigCommerce\nDESCRIPTION: This snippet demonstrates how to create an HTTPS webhook using a POST request to the BigCommerce API. It includes the request payload and the expected response.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/https-webhook-overview.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/hooks\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"scope\": \"store/order/updated\",\n  \"destination\": \"https://yourapp.example.com/webhooks\", // custom ports are not supported\n  \"is_active\": true,\n  \"headers\": {\n\t\"username\": \"My-Custom-Header\"\n\t\"value\": \"My custom header value\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": 1580329317,\n  \"destination\": \"https://yourapp.example.com/webhooks\", // custom ports are not supported\n  \"headers\": {\n\t\"username\": \"My-Custom-Header\",\n\t\"value\": \"My custom header value\"\n  },\n  \"id\": 20172984,\n  \"is_active\": true,\n  \"scope\": \"store/order/updated\",\n  \"store_hash\": \"{{STORE_HASH}}\",\n  \"updated_at\": 1580329317\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a BOPIS Order with Pickup Details in BigCommerce Orders V2 API\nDESCRIPTION: This HTTP request creates a new order configured for in-store pickup using the BigCommerce Orders V2 API. The request includes billing address information, pickup method details, collection instructions, location information, and line items for the order.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/fulfillment.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v2/orders\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"billing_address\": {\n    \"state\": \"Washington\",\n    \"zip\": \"98006\",\n    \"country\": \"United States\"\n  },\n  \"consignments\": {\n    \"pickups\": [\n      {\n        \"pickup_method_id\": 1,\n        \"pickup_method_display_name\": \"Pick Up\",\n        \"collection_instructions\": \"Bring your ID\",\n        \"collection_time_description\": \"9am - 6pm\",\n        \"location\": {\n          \"name\": \"Location 1\",\n          \"code\": \"LOCATION-1\",\n          \"address_line_1\": \"123 Main Street\",\n          \"address_line_2\": \"Suite 101\",\n          \"city\": \"Austin\",\n          \"state\": \"Texas\",\n          \"postal_code\": \"78726\",\n          \"country_alpha2\": \"US\",\n          \"email\": \"location1@example.com\",\n          \"phone\": \"+1 111-111-1111\"\n        },\n        \"line_items\": [\n          {\n            \"name\": \"Fog Linen Chambray Towel - Beige Stripe\",\n            \"quantity\": 3,\n            \"price_ex_tax\": 0,\n            \"price_inc_tax\": 0\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Gift Wrapping Options with GraphQL in BigCommerce\nDESCRIPTION: This GraphQL query retrieves the first two gift wrapping options for a product with entityId 113. It returns the gift wrapping ID, name, whether comments are allowed, and the preview image URL.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    product (entityId: 113) {\n      giftWrappingOptions (first: 2) {\n        edges {\n          node {\n            entityId\n            name\n            allowComments\n            previewImageUrl\n          }\n        }\n      } \n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying First Three Products with Pagination in GraphQL\nDESCRIPTION: This query retrieves the first three products from a BigCommerce store with pagination information. It demonstrates basic cursor-based pagination by requesting pageInfo (including cursors and hasNextPage) and product details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery paginateProducts {\n  site {\n    products (first: 3) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n      }\n      edges {\n        cursor\n        node {\n          entityId\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Sample environment configuration file showing required variables for app authentication, database setup, and API endpoints\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/quick-start.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Get the Client ID and Secret from the Developer Portal\nCLIENT_ID={app client id}\nCLIENT_SECRET={app secret}\n\n# Test locally with ngrok\n# https://developer.bigcommerce.com/api-docs/apps/guide/development#testing-locally-with-ngrok\n\nAUTH_CALLBACK=https://{ngrok_url}/api/auth\n\n# Replace jwt key with a 32+ random character secret\nJWT_KEY={SECRET}\n\n# Specify the type of database\nDB_TYPE=firebase\n\n# If using firebase, enter your config here\nFIRE_API_KEY={firebase key}\nFIRE_DOMAIN={firebase domain}\nFIRE_PROJECT_ID={firebase project id}\n\n# If using mysql, enter your config here and change DB_TYPE to mysql\nMYSQL_HOST={mysql host}\nMYSQL_DATABASE={mysql database name}\nMYSQL_USERNAME={mysql username}\nMYSQL_PASSWORD={mysql password}\nMYSQL_PORT={mysql port *optional*}\n\nAPI_URL=api.bigcommerce.com\n```\n\n----------------------------------------\n\nTITLE: Querying Location Data with Distance Filters in GraphQL\nDESCRIPTION: This GraphQL query retrieves location data based on specified criteria, including country, state, city, and distance from a given point. The `distanceFilter` allows specifying a radius, longitude, latitude, and length unit to find locations within a certain range. The query returns detailed information about each location, including its address, operating hours, and distance from the specified coordinates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/locations/queries.mdx#2025-04-16_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  inventory {\n    locations (\n      countryCodes: [US]\n      states: [\"TX\"]\n      cities: [\"Austin\"]\n      distanceFilter: {\n        radius: 1.0\n        longitude: 122.4194\n        latitude: 37.7749\n        lengthUnit: Kilometres\n      }\n    ) {\n      edges {\n        node {\n          entityId\n          code\n          label\n          description\n          typeId\n          distance {\n            value\n            lengthUnit\n          }\n          timeZone\n          address {\n            city\n            address1\n            address2\n            postalCode\n            stateOrProvince\n            email\n            phone\n            latitude\n            longitude\n            countryCode\n          }\n          operatingHours {\n            sunday {\n              open\n              opening\n              closing\n            }\n            monday {\n              open\n              opening\n              closing\n            }\n            tuesday {\n              open\n              opening\n              closing\n            }\n            wednesday {\n              open\n              opening\n              closing\n            }\n            thursday {\n              open\n              opening\n              closing\n            }\n            friday {\n              open\n              opening\n              closing\n            }\n            saturday {\n              open\n              opening\n              closing\n            }\n          }\n          specialHours {\n            label\n            open\n            opening\n            closing\n          }\n        }\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Single Product with REST API\nDESCRIPTION: An HTTP PUT request example for updating a single product using BigCommerce's REST Products API. The request sends a JSON object with the updated product details including name, inventory level, and price to the specific product endpoint.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/products/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n    \"name\": \"Fog Linen Chambray Towel - Beige Stripe\",\n    \"inventory_level\": 10,\n    \"price\": 55.97\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Gift Certificates in BigCommerce Cart with JavaScript\nDESCRIPTION: This code snippet demonstrates how to apply a gift certificate to a cart using the utils.api.cart.applyGiftCertificate method. It handles success by refreshing content and displays errors in an alert.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nutils.api.cart.applyGiftCertificate(code, (err, resp) => {\n  if (resp.data.status === 'success') {\n    this.refreshContent();\n  } else {\n    alert({\n      text: resp.data.errors.join('\\n'),\n      type: 'error',\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Cart Quantity with getCartQuantity Method in JavaScript\nDESCRIPTION: Demonstrates how to use the getCartQuantity method to retrieve the total quantity of items in the cart.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nutils.api.cart.getCartQuantity({}, (err, response) => {\n  console.log(response);\n  console.log(err);\n});\n\nutils.api.cart.getCartQuantity({includeOptions: true}, (err, response) => {\n  console.log(response);\n  console.log(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Store and Product Data with GraphQL\nDESCRIPTION: Example GraphQL query that fetches store settings and product information including name, SKU, and pricing details in multiple currencies.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyFirstQuery {\n  site {\n    settings {\n      storeName\n    }\n    products {\n      edges {\n        node {\n          name\n          sku\n          prices {\n            retailPrice {\n              value\n              currencyCode\n            }\n            price {\n              value\n              currencyCode\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Customer Address Response Example\nDESCRIPTION: Example JSON response for the deleteCustomerAddress mutation showing a successful deletion operation with an empty errors array.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/customers.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"customer\": {\n      \"deleteCustomerAddress\": {\n        \"errors\": []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Storefront API Checkout Request\nDESCRIPTION: Example of completing a checkout operation using the GraphQL Storefront API with correlation ID header. Shows how to send the request with proper authentication and correlation tracking.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://store.example.com/graphql\nAccept: application/json\nContent-Type: application/json\n# Customer impersonation token\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n# Correlation header matches next request\nX-Correlation-Id: a7d28ca2-d4b2-4dc8-9f07-0706c431a372\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation completeCheckout($completeCheckoutInput: CompleteCheckoutInput!) {\n  checkout {\n    completeCheckout(input:$completeCheckoutInput) {\n      orderEntityId\n      paymentAccessToken\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"completeCheckoutInput\": {\n    \"checkoutEntityId\": \"812ece1a-da23-46eb-ab6b-c2ee210aae54\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Product with Variants and SKUs using V3 Catalog API in JSON\nDESCRIPTION: This snippet demonstrates how to create a complex product with SKUs in one request using the V3 Catalog API. It includes product details, categories, and variants with SKUs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"BigCommerce Cutting Board\",\n  \"price\": \"15.00\",\n  \"categories\": [\n    23,\n    21\n  ],\n  \"weight\": 4,\n  \"type\": \"physical\",\n  \"variants\": [\n    {\n      \"sku\": \"SKU-MUL\",\n      \"option_values\": [\n        {\n          \"option_display_name\": \"Board Color\",\n          \"label\": \"Confetti\"\n        }\n      ]\n    },\n    {\n      \"sku\": \"SKU-WOOD\",\n      \"option_values\": [\n        {\n          \"option_display_name\": \"Board Color\",\n          \"label\": \"Wood\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Variant Options using GraphQL in BigCommerce\nDESCRIPTION: This GraphQL query retrieves the first two variant options associated with a base product for a specific variant. It uses interfaces to query common fields across different option types and retrieves details like entity ID, display name, and various option settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/variants.mdx#2025-04-16_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n# This query uses interfaces. For more, see https://graphql.org/learn/schema#interfaces.\n\nquery {\n  site {\n    product (entityId: 113) {\n      variants (entityIds: [127]) {\n        edges {\n          node {\n            productOptions (first: 2) {\n              edges {\n                node {\n                  ... on MultipleChoiceOption { \n                    entityId                              \n                    displayName\n                    isRequired\n                    isVariantOption\n                    displayStyle\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combined Products and Facets Query with Search Term and Rating Filter\nDESCRIPTION: A GraphQL query that retrieves both products and facets in a single request. The query uses a search term 'Sample', rating filter, and sorts results alphabetically (A to Z), limiting product results to 2 items.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/products/faceted-textual-search.mdx#2025-04-16_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    search {\n      searchProducts(\n        filters: {\n          searchTerm: \"Sample\"\n           rating:{\n             minRating:3,\n             maxRating:5\n           }\n        }\n        sort: A_TO_Z\n      ) {\n        products(first: 2) {\n          edges {\n            node {\n              entityId\n              name\n              prices {\n                price {\n                  value\n                }\n              }\n            }\n          }\n        }\n         filters {\n           edges {\n             node {\n               __typename\n               name\n               isCollapsedByDefault\n               ... on CategorySearchFilter {\n                 name\n                 displayProductCount\n                 isCollapsedByDefault\n                 categories {\n                   edges {\n                     node {\n                       entityId\n                       isSelected\n                       productCount\n                       subCategories {\n                         edges {\n                           node {\n                             entityId\n                             name\n                           }\n                         }\n                       }\n                     }\n                   }\n                 }\n               }\n               ... on OtherSearchFilter {\n                 name\n                 displayProductCount\n                 isCollapsedByDefault\n                 freeShipping {\n                   isSelected\n                   productCount\n                 }\n                 isInStock {\n                   isSelected\n                   productCount\n                 }\n                 isFeatured {\n                   isSelected\n                   productCount\n                 }\n               }\n             }\n           }\n         }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cart with GraphQL Mutation\nDESCRIPTION: This mutation creates a new cart by adding a simple product. The request includes the product entity ID and quantity to be added to the cart. The response includes the cart's entity ID and line items.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/graphql-storefront.mdx#2025-04-16_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://store.example.com/graphql\nAccept: application/json\nAuthorization: Bearer {{STOREFRONT_TOKEN}}\nX-Bc-Customer-Access-Token: {{CUSTOMER_ACCESS_TOKEN}}\n\n# Creates a new cart, adding a simple product.\n\nmutation createCartSimple($createCartInput: CreateCartInput!) {\n  cart {\n    createCart(input: $createCartInput) {\n      cart {\n        entityId\n        lineItems {\n          physicalItems {\n            name\n            quantity\n          }\n          digitalItems {\n            name\n            quantity\n          }\n          giftCertificates {\n            name\n          }\n          customItems {\n            name\n            quantity\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Percentage Discount on Most Expensive Item in BigCommerce (JSON)\nDESCRIPTION: This snippet shows how to create a promotion that applies a 20% discount to the most expensive item in the cart. It includes rules for discount application and notification settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/product.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Apply 20% off most expensive cart item\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"percentage_amount\": \"20\"\n          },\n          \"quantity\": 1,\n          \"strategy\": \"MOST_EXPENSIVE\",\n          \"as_total\": false\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": false\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ],\n  \"stop\": false,\n  \"current_uses\": 0,\n  \"max_uses\": null,\n  \"start_date\": \"2019-01-31T05:00:00+00:00\",\n  \"end_date\": null,\n  \"status\": \"ENABLED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Locations via BigCommerce API\nDESCRIPTION: GET request to retrieve all inventory locations with their details including operating hours, addresses, and special hours. Returns detailed location information including IDs, codes, operating hours, and geographical coordinates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/locations\nX-Auth-Token: {{access_token}}\nAccept: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 2,\n      \"code\": \"DTOWN_PARK_ST\",\n      \"label\": \"Downtown Location - Park Lane\",\n      \"description\": \"Customer-facing additional details about this location.\",\n      \"managed_by_external_source\": false, \n      \"type_id\": \"PHYSICAL\",    \n      \"enabled\": true,\n      \"operating_hours\": {...},\n      \"time_zone\": \"Etc/UTC\",\n      \"created_at\": \"2022-01-01T00:00:00.0001\",\n      \"updated_at\": \"2022-02-02T00:00:00.0001\",\n      \"address\": {...},\n      \"storefront_visibility\": true,\n      \"special_hours\": [...]\n    }\n  ],\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Metafields with GraphQL\nDESCRIPTION: This GraphQL query retrieves metafields associated with a product by specifying the metafield's namespace and entity ID. The query limits the output to only those metafields that have storefront permissions, thus ensuring proper access control for sensitive data.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    product (entityId: 113) {\n      metafields (first: 2 namespace: \"Warehouse Locations\") {\n        edges {\n          node {\n            id\n            entityId\n            key\n            value\n          }\n        }\n      } \n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Products and Facets with GraphQL Storefront API\nDESCRIPTION: This code snippet demonstrates how to filter products and facets using various criteria including searchTerm, price range, rating, categories, brands, attributes, and other product properties. These filters affect both the products and facets returned in search results.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/products/faceted-textual-search.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n...\n  searchProducts(\n  filters: {\n    searchTerm: \"Sample\"\n    price:{\n      minPrice:11,\n      maxPrice:200\n    },\n    rating:{\n      minRating:3,\n      maxRating:5\n    },\n    categoryEntityId:24,\n    searchSubCategories:false,\n    categoryEntityIds:[23],\n    brandEntityIds:[35],\n    productAttributes:[\n      {\n        attribute:\"Color\",\n        values:[\"Black\"]\n      }\n    ],\n    isFreeShipping:true,\n    isFeatured:true,\n    isInStock:true\n  }\n  ... \n)\n...\n```\n\n----------------------------------------\n\nTITLE: Cart Creation with Option Selections\nDESCRIPTION: JSON request body for creating a cart with option selections, including locale and currency specifications.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/carts.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customer_id\": 0,\n  \"line_items\": [\n    {\n      \"quantity\": 2,\n      \"product_id\": 118,\n      \"list_price\": 25,\n      \"variant_id\": 140,\n      \"name\": \"قميص\",\n      \"option_selections\": [\n        {\n          \"option_id\": 125,\n          \"option_value\": 127,\n          \"name\": \"بحجم\",\n          \"value\": \"صغير\"\n        }\n      ]\n    }\n  ],\n  \"channel_id\": 1,\n  \"currency\": {\n    \"code\": \"JOD\"\n  },\n  \"locale\": \"ar-JO\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cart with BigCommerce REST Management API\nDESCRIPTION: HTTP request to create a cart using the BigCommerce REST Management API. The request includes product details, quantity, channel ID, and locale information. This is the first step in the checkout flow.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/rest-management.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/carts\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n{\n  \"customer_id\": 0,\n  \"line_items\": [\n      {\n      \"quantity\": 2,\n      \"product_id\": 120,\n      \"list_price\": 15,\n      \"name\": \"mug\"\n      }\n  ],\n  \"channel_id\": 1,\n  \"currency\": {\n      \"code\": \"USD\"\n  },\n  \"locale\": \"en-US\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Cart Item with the BigCommerce Storefront API in JavaScript\nDESCRIPTION: Helper function for deleting a specific item from a cart using the BigCommerce Storefront API. Requires the cart ID and item ID to identify which item to remove.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction deleteCartItem(routeStart, cartId, itemId) {\n  var route = routeStart + cartId + '/items/' + itemId;\n  return fetch(route, {\n    method: \"DELETE\",\n    credentials: \"same-origin\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    }\n  })\n  .then(response => response.json())\n  .then(result => console.log(result))\n  .catch(error => console.error(error));\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Product with Single Option to Cart using REST Management API in HTTP\nDESCRIPTION: Demonstrates how to add a product with a single option (radio button) to the cart using the REST Management API. This example uses the variant_id in the request to the /v3/carts/{cartId}/items endpoint.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-management.mdx#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{store_hash}/v3/carts/{cartId}/items\nX-Auth-Token: {{access_token}}\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"line_items\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 1001,\n      \"variant_id\": 2331\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Limited Complexity\nDESCRIPTION: This GraphQL query demonstrates how to reduce complexity by limiting the number of products requested. By changing `first:50` to `first:10`, the quantity of products retrieved is reduced, which in turn lowers the complexity score of the query.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/index.mdx#2025-04-16_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    products(first:10) { // <--- reducing quantity requested reduces complexity score\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gift Wrapping Options with getItemGiftWrappingOptions in JavaScript\nDESCRIPTION: This code binds click events to gift wrapping elements and displays gift wrapping options in a modal. It uses the getItemGiftWrappingOptions method to fetch available gift wrapping options for a specific cart item.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nbindGiftWrappingEvents() {\n  const modal = defaultModal();\n\n  $('[data-item-giftwrap]').on('click', event => {\n    const itemId = $(event.currentTarget).data('itemGiftwrap');\n    const options = {\n      template: 'cart/modals/gift-wrapping-form',\n    };\n\n    event.preventDefault();\n    modal.open();\n\n    utils.api.cart.getItemGiftWrappingOptions(itemId, options, (err, response) => {\n      modal.updateContent(response.content);\n      this.bindGiftWrappingForm();\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Options with GraphQL Interfaces\nDESCRIPTION: Example GraphQL query that retrieves product options for a specific product while using interfaces to handle different option types. It demonstrates how to query common fields and specific fields for checkbox and datefield options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n# This query uses interfaces. To learn more about interfaces, see https://graphql.org/learn/schema#interfaces.\n\nquery {\n  site {\n    product (entityId: 115) {\n      productOptions (first: 3) {\n        edges {\n          node {\n            \n            # fields that all product options include\n            entityId                  \n            displayName\n            isRequired\n            isVariantOption\n            \n            # additional fields for checkbox options\n            ... on CheckboxOption {   \n              checkedByDefault\n              label\n            }\n            \n            # additional fields for datefield options\n            ... on DateFieldOption {  \n              earliest\n              latest\n              limitDateBy\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Store Profile Settings\nDESCRIPTION: Example of how to fetch the global default store profile settings using a GET request to the Settings API. Returns store profile data including phone, name, and address.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/settings/configuration.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/settings/store/profile\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"store_phone\": \"+1 123-456-7890\",\n    \"store_name\": \"My Default Store Name\",\n    \"store_address\": \"123 Default St\"\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Request Handler - JavaScript\nDESCRIPTION: Implements the request handling logic for the app extension using node-fetch. Manages GraphQL API calls to BigCommerce, including authentication and error handling.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/app-extensions/guide.mdx#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// set-app-extension.js\nimport fetch from 'node-fetch';\n\nconst newAppExtension = async(store, query, variables) => {\n\n  let {store_hash, access_token} = store;\n\n  try {\n\n    let response = await fetch({\n      method: 'POST',\n      url: `https://api.bigcommerce.com/stores/${store_hash}/graphql`,\n      headers: {\n        'X-Auth-Token': access_token,\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: {\n        query,\n        variables\n      }\n    });\n\n    let data = await response.json();\n    console.log(data);\n\n  } catch(error) {\n    console.log(error);\n  };\n}\n\nexport default async(store, query, variables) => await newAppExtension(store, query, variables);\n```\n\n----------------------------------------\n\nTITLE: Creating a Cart with Simple Product using GraphQL Mutation\nDESCRIPTION: This GraphQL mutation creates a new cart and adds a simple product to it. It demonstrates how to structure the mutation and variables to create a cart with a single product item.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/graphql-storefront.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation createCartSimple($createCartInput: CreateCartInput!) {\n  cart {\n    createCart(input: $createCartInput) {\n      cart {\n        entityId\n        lineItems {\n          physicalItems {\n            name\n            quantity\n          }\n          digitalItems {\n            name\n            quantity\n          }\n          giftCertificates {\n            name\n          }\n          customItems {\n            name\n            quantity\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"createCartInput\": {\n    \"lineItems\": [\n      {\n        \"quantity\": 1,\n        \"productEntityId\": 111\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Storefront API Call Function in JavaScript\nDESCRIPTION: This function, storefrontCall, makes client-side requests to the BigCommerce REST Storefront API. It handles GET, POST, PUT, and DELETE requests, including proper headers and error handling.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/index.mdx#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst storefrontCall = (endpoint, requestBody = null) => {\n  let resource = `${window.location.origin}/api/storefront${endpoint.route}`;\n  let init = {\n    method: endpoint.method,\n    credentials: \"same-origin\",\n    headers: {\n      // note: no authorization\n      \"Accept\": endpoint.accept,\n    }\n  }\n  if(requestBody) {\n    init.body = JSON.stringify(requestBody);\n    init.headers[\"Content-Type\"] = endpoint.content;\n  }\n\n  return fetch(resource, init)\n  .then(response => {\n    console.log(response);\n    if(response.status === endpoint.success) {\n      // resolve promise using the Fetch API method that correlates with the endpoint.accept value\n      return response.json(); // or response.text()\n    } else {\n      return new Error(`response.status is ${response.status}`);\n    }\n  })\n  .then(result => {\n    console.log(result); // requested data\n    // do stuff...\n  })\n  .catch(error => console.error(error));\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth Scopes Table in Markdown\nDESCRIPTION: A markdown table defining the available OAuth token creation scopes, their permissions, parameters, descriptions and associated endpoints.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/api-accounts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| UI Name | Permission | Parameter | Description | Endpoints |\n|:--------|:-----------|:----------|:------------|:----------|\n| Create Payments | modify | `store_payments_access_token_create` | Create payment access tokens, process payments | [Payments, Access Tokens](/docs/rest-payments/tokens#create-payment-access-token) <br /> [Payments, Process Payment](/docs/rest-payments/processing#process-payment) |\n| Storefront API Tokens | modify | `store_storefront_api` | Create GraphQL Storefront API bearer tokens | [Storefront API Token V3](/docs/rest-authentication/tokens#create-a-token) |\n| Storefront API Customer Impersonation Tokens | modify | `store_storefront_api_customer_impersonation` | Create GraphQL Storefront API bearer tokens that allow customer impersonation | [Storefront API Token V3, Customer Impersonation](/docs/rest-authentication/tokens/customer-impersonation-token#create-a-token) |\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Order Details in GraphQL\nDESCRIPTION: GraphQL query to fetch detailed information for a specific order by entityId, including billing address, shipping details, line items, pricing, and tracking information. Demonstrates how to retrieve comprehensive order information for order #106.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/orders.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetOrderDetails {\n  site {\n    order(filter: { entityId: 106 }) {\n      billingAddress {\n        address1\n        city\n        company\n        country\n        countryCode\n        email\n        firstName\n        lastName\n        phone\n        postalCode\n        stateOrProvince\n      }\n      consignments {\n        shipping {\n          edges {\n              cursor\n              node {\n              lineItems {\n                edges {\n                  node {\n                    brand\n                    entityId\n                    name\n                    subTotalListPrice {\n                      currencyCode\n                      value\n                    }\n                  }\n                }\n              }\n              shipments {\n                edges {\n                  node {\n                    shippingProviderName\n                    tracking {\n                      ... on OrderShipmentUrlOnlyTracking {\n                          __typename\n                      }\n                    }\n                  }\n                }\n              }\n              shippingAddress {\n                address1\n                city\n                firstName\n                lastName\n                postalCode\n                stateOrProvince\n              }\n              shippingCost {\n                currencyCode\n                  value\n              }\n            }\n          }\n        }\n      }\n      subTotal {\n        currencyCode\n        value\n      }\n      taxTotal {\n        currencyCode\n        value\n      }\n      totalIncTax {\n        currencyCode\n        value\n      }\n      updatedAt {\n        utc\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination Query Using a Cursor in GraphQL\nDESCRIPTION: This query demonstrates how to get the next page of products by using the 'after' parameter with a cursor value. It retrieves three products after the product with cursor 'YXJyYXljb25uZWN0aW9uOjE='.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery paginateProducts {\n  site {\n    products (first: 3, after: \"YXJyYXljb25uZWN0aW9uOjE=\") {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n      }\n      edges {\n        cursor\n        node {\n          entityId\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Products with GraphQL\nDESCRIPTION: GraphQL query using aliases and fragments to retrieve multiple products in a single request.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    product1: product(entityId: 113) {\n      ...ProductFields\n    }\n    product2: product(entityId: 115) {\n      ...ProductFields\n    }\n  }\n}\n\nfragment ProductFields on Product {\n  # fields on the Product object type \n}\n```\n\n----------------------------------------\n\nTITLE: Changing Customer Password using GraphQL Mutation\nDESCRIPTION: This mutation allows customers to change their password by providing their current password and desired new password. It includes error handling for validation failures.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/customers.mdx#2025-04-16_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  customer {\n    changePassword(\n      input: { currentPassword: \"Password1!\", newPassword: \"Password2!\" }\n    ) {\n      errors {\n        ... on ValidationError {\n          path\n          message\n        }\n        ... on CustomerPasswordError {\n          message\n        }\n        ... on CustomerDoesNotExistError {\n          message\n        }\n        ... on CustomerNotLoggedInError {\n          message\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Site Route for Abandoned Cart Recovery\nDESCRIPTION: Makes a POST request to create a recover_abandoned_cart site route with a specified matching pattern and route path\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/abandoned-carts.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/sites/{site_id}/routes\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n\"type\": \"recover_abandoned_cart\",\n\"matching\": \"*\",\n\"route\": \"/my-abandoned-cart-page/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Inventory Across All Locations in BigCommerce API\nDESCRIPTION: This snippet shows how to retrieve inventory information for a specific product across all locations using the BigCommerce API. It filters the results by variant_id.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{store_hash}/v3/inventory/items?variant_id=123\nX-Auth-Token: {{access_token}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Product Details with GraphQL Query\nDESCRIPTION: A GraphQL query example for retrieving detailed information about a specific product using its entity ID. The query returns the product's ID, entity ID, name, SKU, description, and price information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/products/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery SingleProduct {\n  site {\n    product (entityId: ${params.id}) {\n      id\n      entityId\n      name\n      sku\n      description\n      prices {\n        price {\n          value\n          currencyCode\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Order with BigCommerce API\nDESCRIPTION: HTTP POST request to create an order from an existing checkout. The request requires a checkout ID and appropriate authorization token. After processing, the API returns the ID of the newly created order with an initial status of 'incomplete'.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/rest-management.mdx#2025-04-16_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/checkouts/{{checkoutId}}/orders\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Product in BigCommerce during Import Process\nDESCRIPTION: This code shows how to import products to BigCommerce by sending a POST request to create a product. This is part of the product synchronization process where data from external channels is imported to BigCommerce.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/guide/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/endpoint\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  {\n    \"name\": \"Coffee Mug\",\n    \"price\": \"10.00\",\n    \"categories\": [\n      23,\n      21\n    ],\n    \"weight\": 4,\n    \"type\": \"physical\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Refund in BigCommerce API\nDESCRIPTION: This snippet shows how to create a refund using the BigCommerce API. It includes refunding a product, shipping, a tax-exempt order level refund, and a fee.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/refunds.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/orders/{order_id}/payment_actions/refunds\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"items\": [\n    {\n      \"item_type\": \"PRODUCT\",  // Refund a product\n      \"item_id\": 8,            // Order product ID\n      \"quantity\": 1            // Quantity to refund\n    },\n    {\n      \"item_type\": \"SHIPPING\", // Refund shipping\n      \"item_id\": 9,            // Order address ID\n      \"amount\": 10             // Amount to refund\n    },\n    {\n      \"item_type\": \"ORDER\",   // Tax-exempt order level refund\n      \"item_id\": 123,         // Order ID\n      \"amount\": 1,            // Amount to refund\n    },\n    {\n      \"item_type\": \"FEE\",     // Refund a fee\n      \"item_id\": 11,          // Fee ID\n      \"amount\": 1,            // Amount to refund\n    }\n  ],\n  \"payments\": [\n    {\n      \"provider_id\": \"braintree\",\n      \"amount\": 21.83,\n      \"offline\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Rules for Product Options\nDESCRIPTION: Creates complex rules that adjust product pricing based on multiple modifier selections. This example adds $10 to the price when two specific checkboxes are selected.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/index.mdx#2025-04-16_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/{{product_id}}/complex-rules\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"product_id\": 1200,\n  \"enabled\": true,\n  \"price_adjuster\": {\n    \"adjuster_value\": 10\n  },\n  \"conditions\": [\n    {\n      \"modifier_id\": 506,\n      \"modifier_value_id\": 852\n    },\n    {\n      \"modifier_id\": 507,\n      \"modifier_value_id\": 854\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Storefront API Token via REST API\nDESCRIPTION: Example of how to create a storefront API token using the BigCommerce REST API. The request includes channel IDs, expiration timestamp, and allowed CORS origins.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/graphql-storefront.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/storefront/api-token\nx-auth-token: {{access_token}}\naccept: application/json\ncontent-type: application/json\n\n{\n  \"channel_ids\": [1, 2, 3],            // array of integers (must be a valid channel IDs on the store)\n  \"expires_at\": 1602288000,   // when the token will expire, as an integer unix timestamp (in seconds)\n  \"allowed_cors_origins\": [   // array of origins (up to 2 origins per token)\n    \"https://example.com\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Library Implementation\nDESCRIPTION: Implementation of authentication functionality including JWT handling, session management, and BigCommerce client configuration.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport function bigcommerceClient(accessToken: string, storeHash: string) {\n    return new BigCommerce({\n        clientId: CLIENT_ID,\n        accessToken,\n        storeHash,\n        responseType: 'json',\n        apiVersion: 'v3'\n    });\n}\n\nexport function getBCAuth(query: QueryParams) {\n    return bigcommerce.authorize(query);\n}\n\nexport function getBCVerify({ signed_payload_jwt }: QueryParams) {\n    return bigcommerceSigned.verifyJWT(signed_payload_jwt);\n}\n\nexport async function setSession(session: SessionProps) {\n    db.setUser(session);\n    db.setStore(session);\n}\n\nexport async function getSession({ query: { context = '' } }: NextApiRequest) {\n    if (typeof context !== 'string') return;\n    const decodedContext = decodePayload(context)?.context;\n    const accessToken = await db.getStoreToken(decodedContext);\n\n    return { accessToken, storeHash: decodedContext };\n}\n\nexport async function removeDataStore(res: NextApiResponse, session: SessionProps) {\n    await db.deleteStore(session);\n}\n\nexport function encodePayload({ ...session }: SessionProps) {\n    const contextString = session?.context ?? session?.sub;\n    const context = contextString.split('/')[1] || '';\n\n    return jwt.sign({ context }, JWT_KEY, { expiresIn: '24h' });\n}\n\nexport function decodePayload(encodedContext: string) {\n    return jwt.verify(encodedContext, JWT_KEY);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an addCartItem() Helper Function in JavaScript\nDESCRIPTION: Defines an addCartItem() function that sends a POST request to add a new line item to an existing cart. It takes the API route start, cart ID, and cart items as parameters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addCartItem(routeStart, cartId, cartItems) {\n  var route = routeStart + cartId + '/items';\n  return fetch(route, {\n    method: \"POST\",\n    credentials: \"same-origin\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(cartItems),\n  })\n  .then(response => response.json())\n  .then(result => console.log(result))\n  .catch(error => console.error(error));\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Bulk Pricing Rules to a Product in BigCommerce API\nDESCRIPTION: This snippet demonstrates how to add bulk quantity-based pricing rules to a product using a PUT request to the BigCommerce API. It allows setting different price points based on quantity ranges.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products/{{product_id}}/bulk-pricing-rules\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"bulk_pricing_rules\": [\n    {\n      \"quantity_min\": 10,\n      \"quantity_max\": 15,\n      \"type\": \"price\",\n      \"amount\": 3\n    },\n    {\n      \"quantity_min\": 16,\n      \"quantity_max\": 25,\n      \"type\": \"price\",\n      \"amount\": 5\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkout Loader Script for BigCommerce Custom Checkout\nDESCRIPTION: This JavaScript code creates a script element to load the Checkout SDK, initializes the checkout service, and renders basic checkout information. It's designed to be saved as a checkout-loader-<version>.js file and uploaded to the store's server.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/checkout-sdk/tutorial.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar script = document.createElement('script');\nscript.onload = function () {\n    checkoutKitLoader.load('checkout-sdk')\n        .then(function (module) {\n            var checkoutService = module.createCheckoutService();\n            return checkoutService.loadCheckout(window.checkoutConfig.checkoutId);\n        })\n        .then(function (state) {\n            console.log('Checkout SDK Quickstart', state.data.getCheckout());\n            document.getElementById(window.checkoutConfig.containerId).innerHTML = 'Checkout ID: ' + state.data.getCheckout().id;\n        });\n};\nscript.src = 'https://checkout-sdk.bigcommerce.com/v1/loader.js';\ndocument.head.appendChild(script);\n```\n\n----------------------------------------\n\nTITLE: Querying Out-of-Stock Variant Inventories with GraphQL in BigCommerce\nDESCRIPTION: This GraphQL query attempts to retrieve inventory information for product variants that are out of stock at all locations. It demonstrates how the query handles variants with zero inventory across all locations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/inventory/queries.mdx#2025-04-16_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    products (entityIds:[113]) {\n      edges {\n        node {\n          entityId\n          name\n          variants (entityIds:[95,96]) {\n            edges {\n              node {\n                entityId\n                sku\n                inventory {\n                  aggregated {\n                    availableToSell\n                    warningLevel\n                  }\n                  byLocation {\n                    edges {\n                      node {\n                        locationEntityId\n                        locationEntityCode\n                        locationEntityTypeId\n                        locationDistance {\n                          value\n                          lengthUnit\n                        }\n                        availableToSell\n                        warningLevel\n                        isInStock\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Select Checkout Shipping Option GraphQL Mutation\nDESCRIPTION: GraphQL mutation to select a shipping option for a checkout. Requires checkout entity ID, consignment entity ID, and shipping option entity ID as input parameters. Returns the checkout entity ID upon successful selection.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/graphql-storefront.mdx#2025-04-16_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nmutation selectCheckoutShippingOption($selectCheckoutShippingOptionInput: SelectCheckoutShippingOptionInput!) {\n  checkout {\n    selectCheckoutShippingOption(input: $selectCheckoutShippingOptionInput) {\n      checkout {\n        entityId\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"selectCheckoutShippingOptionInput\": {\n    \"checkoutEntityId\": \"acd6f2ca-85c1-4b5f-8dab-d7d80521ecc5\",\n    \"consignmentEntityId\": \"6478ff925d33a\",\n    \"data\": {\n      \"shippingOptionEntityId\": \"9ba45e71fe66e1cd757f022dcae331b0\"\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"checkout\": {\n      \"selectCheckoutShippingOption\": {\n        \"checkout\": {\n          \"entityId\": \"acd6f2ca-85c1-4b5f-8dab-d7d80521ecc5\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Reviews with GraphQL in BigCommerce\nDESCRIPTION: This GraphQL query fetches product reviews for a specific product. It retrieves review details including entity ID, author name, title, text, rating, and creation date.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/product-reviews.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    products (entityIds: [81]) {\n      edges {\n        node {\n          reviews {\n            edges {\n              node {\n                entityId\n                author {\n                  name\n                }\n                title\n                text\n                rating\n                createdAt {\n                  utc\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cart Creation with Currency and Custom Items\nDESCRIPTION: Detailed JSON request body for creating a cart with custom items, gift certificates, and currency specifications.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/carts.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customer_id\": 0,\n  \"line_items\": [],\n  \"custom_items\": [\n    {\n      \"sku\": \"custom-item-sku\",\n      \"name\": \"table\",\n      \"quantity\": 1,\n      \"list_price\": 30,\n      \"gift_wrapping\": {\n        \"wrap_together\": true,\n        \"wrap_details\": [\n          {\n            \"id\": 0,\n            \"message\": \"Happy Birthday\"\n          }\n        ]\n      }\n    }\n  ],\n  \"gift_certificates\": [\n    {\n      \"name\": \"Tobi Day\",\n      \"theme\": \"Birthday\",\n      \"amount\": 1,\n      \"quantity\": 1,\n      \"sender\": {\n        \"name\": \"Brandi Tyler\",\n        \"email\": \"Brandi.Tyler@mail.com\"\n      },\n      \"recipient\": {\n        \"name\": \"Tobi Day\",\n        \"email\": \"Tobi.Day@mail.com\"\n      },\n      \"message\": \"Happy Birthday\"\n    }\n  ],\n  \"channel_id\": 1,\n  \"currency\": {\n    \"code\": \"usd\"\n  },\n  \"locale\": \"en-US\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Order with Products in BigCommerce (HTTP)\nDESCRIPTION: Demonstrates how to create an order with both custom and catalog products using the BigCommerce API. It shows the structure for specifying product details, including options for catalog products.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v2/orders\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"billing_address\": {...},\n  \"products\": [\n    {\n      \"name\": \"BigCommerce Coffee Mug\", # custom product\n      \"quantity\": 1,\n      \"price_inc_tax\": 50,\n      \"price_ex_tax\": 45\n    },\n    {\n      \"product_id\": 184,               # product from catalog\n      \"quantity\": 1,\n      \"product_options\": [\n        {\n          \"id\": 200,\n          \"value\": \"180\"\n        },\n        {\n          \"id\": 230,\n          \"value\": \"192\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Variant Inventories with GraphQL in BigCommerce\nDESCRIPTION: This GraphQL query retrieves inventory information for multiple product variants. It demonstrates how the query handles variants with different stock levels across locations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/inventory/queries.mdx#2025-04-16_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    products (entityIds:[113]) {\n      edges {\n        node {\n          entityId\n          name\n          variants (entityIds:[95,96]) {\n            edges {\n              node {\n                entityId\n                sku\n                inventory {\n                  aggregated {\n                    availableToSell\n                    warningLevel\n                  }\n                  byLocation {          // By default, returns only the default location\n                    edges {\n                      node {\n                        locationEntityId\n                        locationEntityCode\n                        locationEntityTypeId\n                        locationDistance {\n                          value\n                          lengthUnit\n                        }\n                        availableToSell\n                        warningLevel\n                        isInStock\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Items from Cart with itemRemove Method in JavaScript\nDESCRIPTION: This code snippet demonstrates how to remove an item from the cart using the itemRemove method from the Stencil Utils API. It shows the overlay during the operation and refreshes the content if successful, or displays an error message if the operation fails.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncartRemoveItem(itemId) {\n  this.$overlay.show();\n  utils.api.cart.itemRemove(itemId, (err, response) => {\n    if (response.data.status === 'succeed') {\n      this.refreshContent(true);\n    } else {\n      alert(response.data.errors.join('\\n'));\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Customer Password using GraphQL Mutation\nDESCRIPTION: This mutation completes the password reset process by accepting a new password along with the customer ID and reset token that were included in the reset password email link.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/customers.mdx#2025-04-16_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  customer {\n    resetPassword(\n      input: {\n        customerEntityId: 1 # Provided in the link contained in the reset password email\n        token: \"\" # Provided in the link contained in the reset password email\n        newPassword: \"NewPassword1234\"\n      }\n    ) {\n      errors {\n        ... on ValidationError {\n          message\n        }\n        ... on ChangePasswordError {\n          message\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Web Pages with GraphQL Storefront API\nDESCRIPTION: This GraphQL query retrieves web pages from a BigCommerce storefront with the isVisibleInNavigation filter. It demonstrates how to fetch different types of pages (normal pages, external links, contact forms, raw HTML pages, and blog index pages) with their respective fields.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/site-content.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    content {\n      pages (filters: {isVisibleInNavigation: true }) {\n        edges {\n          node {\n\n            # Fields that return for all web page types \n            ... on WebPage {\n              __typename\n              entityId\n              name\n              parentEntityId\n              seo {\n                pageTitle\n                metaKeywords\n                metaDescription\n              }\n            }\t\t\t\n              \n            # Fields that return for plain-text pages \n            ... on NormalPage {\n              plainTextSummary (characterLimit: 100)\n              path\n            }\n\n            # Fields that return for external link pages \n            ... on ExternalLinkPage {\n              link\n            }\n\n            # Fields that return for contact forms \n            ... on ContactPage {\n              path\n              plainTextSummary (characterLimit: 100)\n              contactFields\n            }\n\n            # Fields that return for raw HTML pages\n            ... on RawHtmlPage {\n              path\n              htmlBody\n            }\n\n            # Fields that return for main blog index page\n            ... on BlogIndexPage {\n              path\n            }\n          }\n        }\n      }\n    } \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a 'Buy 3 for 2' Category Discount in BigCommerce\nDESCRIPTION: This JSON request creates a promotion rule where customers buying three items from a specific category get the lowest-priced item for free. The rule applies automatically and can be used multiple times in a single order.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/category.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy three items in a category for the price of two (lowest priced item discounted)\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"apply_once\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"categories\": [\n              21\n            ]\n          },\n          \"minimum_quantity\": 2\n        }\n      },\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"percentage_amount\": \"100\"\n          },\n          \"strategy\": \"LEAST_EXPENSIVE\",\n          \"items\": {\n            \"categories\": [\n              21\n            ]\n          },\n          \"quantity\": 1\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Choice Product Options with Values\nDESCRIPTION: Example GraphQL query that retrieves a product option and its values for a specific product. It demonstrates how to query both common interface fields and specific fields for swatch option values like hex colors and image URLs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\n# This query uses interfaces. To learn more about interfaces, see https://graphql.org/learn/schema/#interfaces.\n\nquery {\n  site {\n    product (entityId: 113) {\n      productOptions (first: 1) {\n        edges {\n          node {\n            \n            # fields that all product options include\n            entityId                                \n            displayName\n            isRequired\n            isVariantOption\n            \n            # additional fields for multiple choice options\n            ... on MultipleChoiceOption {           \n              displayStyle\n              values (first: 2) {\n                edges {\n                  node {\n                    entityId\n                    label\n                    isDefault\n                    \n                    # additional fields for swatch options\n                    ... on SwatchOptionValue {      \n                      hexColors\n                      imageUrl (width: 2)\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Variant Options with GraphQL in BigCommerce\nDESCRIPTION: This GraphQL query retrieves variant information for a specific product, including option details like size, color, and fabric. It demonstrates how to request both global information and locale-specific overrides for a storefront channel. The query shows how to access option display names, values, default settings, and shared status.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-variant-options.mdx#2025-04-16_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\nquery {\n  store {\n    product(id: \"bc/store/product/111\") {\n      id\n      options (first: 3) {\n        edges {\n          node {\n            id\n            displayName\n            isShared\n            values {\n              id\n              label\n              isDefault\n            }\n            overridesForLocale(\n              localeContext: { channelId: \"bc/store/channel/2\", locale: \"uk\"}\n            ) {\n              displayName\n              values {\n                id\n                label\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}    \n```\n\n----------------------------------------\n\nTITLE: Example Response from BigCommerce Consignment Update\nDESCRIPTION: This JSON response shows the complete checkout data after updating a consignment with a shipping option. It includes the cart details, billing address, multiple consignments (one with the updated shipping option), and order totals.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"d4e978c2-bdcf-41b0-a49b-fecf4f5223c1\",\n  \"cart\": {\n    \"id\": \"d4e978c2-bdcf-41b0-a49b-fecf4f5223c1\",\n    \"customerId\": 0,\n    \"email\": \"janedoe@email.com\",\n    \"currency\": {\n      \"name\": \"US Dollars\",\n      \"code\": \"USD\",\n      \"symbol\": \"$\",\n      \"decimalPlaces\": 2\n    },\n    ...\n    \"coupons\": [],\n    \"discounts\": [\n      ...\n    ],\n    \"lineItems\": {\n      \"physicalItems\": [\n        {\n          \"id\": \"57a877e0-d898-47d0-910d-88656e8dee0c\",\n          \"parentId\": null,\n          \"variantId\": 66,\n          \"productId\": 86,\n          \"sku\": \"ABS\",\n          \"name\": \"[Sample] Able Brewing System\",\n          \"url\": \"https://{store_url}/able-brewing-system/\",\n          \"quantity\": 1,\n          ...\n          \"extendedSalePrice\": 225,\n          \"comparisonPrice\": 225,\n          \"extendedComparisonPrice\": 225,\n          \"isShippingRequired\": true,\n          \"giftWrapping\": null,\n          \"addedByPromotion\": false\n        },\n        {\n          \"id\": \"22c461a2-eff9-4b72-8d22-7c2792ce2c2d\",\n          \"parentId\": null,\n          \"variantId\": 67,\n          \"productId\": 88,\n          \"sku\": \"CC3C\",\n          \"name\": \"[Sample] Chemex Coffeemaker 3 Cup\",\n          \"url\": \"https://{store_url}/chemex-coffeemaker-3-cup/\",\n          \"quantity\": 1,\n          ...\n          \"extendedSalePrice\": 49.5,\n          \"comparisonPrice\": 49.5,\n          \"extendedComparisonPrice\": 49.5,\n          \"isShippingRequired\": true,\n          \"giftWrapping\": null,\n          \"addedByPromotion\": false\n        }\n      ],\n      ...\n    },\n    ...\n  },\n  \"billingAddress\": {\n    \"id\": \"5e6a8cad71318\",\n    \"firstName\": \"Jane\",\n    \"lastName\": \"Doe\",\n    \"email\": \"janedoe@email.com\",\n    \"company\": \"BigCommerce\",\n    \"address1\": \"123 Main Street\",\n    \"address2\": \"Apt 1\",\n    \"city\": \"Austin\",\n    \"stateOrProvince\": \"\",\n    \"stateOrProvinceCode\": \"\",\n    \"country\": \"\",\n    \"countryCode\": \"\",\n    \"postalCode\": \"78751\",\n    \"phone\": \"\",\n    \"customFields\": []\n  },\n  \"consignments\": [\n    {\n      \"id\": \"5e6a91ff83c6d\",\n      \"shippingCost\": 0,\n      \"handlingCost\": 0,\n      \"couponDiscounts\": [],\n      \"discounts\": [],\n      \"lineItemIds\": [\n        \"57a877e0-d898-47d0-910d-88656e8dee0c\"\n      ],\n      \"selectedShippingOption\": {\n        \"id\": \"4dcbf24f457dd67d5f89bcf374e0bc9b\",\n        \"type\": \"freeshipping\",\n        \"description\": \"Free Shipping\",\n        \"imageUrl\": \"\",\n        \"cost\": 0,\n        \"transitTime\": \"\",\n        \"additionalDescription\": \"\"\n      },\n      \"shippingAddress\": {\n        \"firstName\": \"Jane\",\n        \"lastName\": \"Doe\",\n        \"email\": \"janedoe@email.com\",\n        \"company\": \"BigCommerce\",\n        \"address1\": \"123 Main Street\",\n        \"address2\": \"Apt 1\",\n        \"city\": \"Austin\",\n        \"stateOrProvince\": \"Texas\",\n        \"stateOrProvinceCode\": \"TX\",\n        \"country\": \"United States\",\n        \"countryCode\": \"US\",\n        \"postalCode\": \"78751\",\n        \"phone\": \"\",\n        \"customFields\": []\n      }\n    },\n    {\n      \"id\": \"5e6a91ffeac84\",\n      \"shippingCost\": 0,\n      \"handlingCost\": 0,\n      \"couponDiscounts\": [],\n      \"discounts\": [],\n      \"lineItemIds\": [\n        \"22c461a2-eff9-4b72-8d22-7c2792ce2c2d\"\n      ],\n      \"selectedShippingOption\": null,\n      \"shippingAddress\": {\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"email\": \"johnedoe@email.com\",\n        \"company\": \"BigCommerce\",\n        \"address1\": \"123 South Street\",\n        \"address2\": \"Apt 5\",\n        \"city\": \"Austin\",\n        \"stateOrProvince\": \"Texas\",\n        \"stateOrProvinceCode\": \"TX\",\n        \"country\": \"United States\",\n        \"countryCode\": \"US\",\n        \"postalCode\": \"78726\",\n        \"phone\": \"\",\n        \"customFields\": []\n      }\n    }\n  ],\n  \"orderId\": null,\n  \"shippingCostTotal\": 0,\n  \"shippingCostBeforeDiscount\": 0,\n  \"handlingCostTotal\": 0,\n  \"taxTotal\": 22.65,\n  \"coupons\": [],\n  \"taxes\": [\n    {\n      \"name\": \"Tax\",\n      \"amount\": 22.65\n    }\n  ],\n  \"subtotal\": 274.5,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Headers for BigCommerce APIs\nDESCRIPTION: Standard HTTP request headers required for making API calls to BigCommerce endpoints. Includes Accept, Content-Type, User-Agent and Authorization headers with their expected values and usage.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/about/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nAccept: application/json\nContent-Type: application/json\nUser-Agent: PostmanRuntime/7.32.3\nAuthorization: Bearer {{STOREFRONT_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Example Response from GraphQL Web Pages Query\nDESCRIPTION: This JSON response shows the data returned from a GraphQL web pages query. It includes various page types ordered by entityId, including a normal page, blog index page, contact page, external link page, and raw HTML page with their specific fields.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/site-content.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n# The response lists web pages ordered by entityId, with the lowest IDs, returned first\n\n{\n  \"data\": {\n    \"site\": {\n      \"content\": {\n        \"pages\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"__typename\": \"NormalPage\",\n                \"entityId\": 2,\n                \"name\": \"Shipping & Returns\",\n                \"parentEntityId\": null,\n                \"seo\": {\n                  \"pageTitle\": \"Shipping & Returns\",\n                  \"metaKeywords\": \"Shipping and Return Policy\",\n                  \"metaDescription\": \"Shipping and Return Policy\"\n                },\n                \"plainTextSummary\": \"To edit this page, log in to your control panel and go to Storefront › Web Pages. Click Edit next...\",\n                \"path\": \"/shipping-returns/\"\n              }\n            },\n            {\n              \"node\": {\n                \"__typename\": \"BlogIndexPage\",\n                \"entityId\": 3,\n                \"name\": \"Blogs for the store\",\n                \"parentEntityId\": null,\n                \"seo\": {\n                  \"pageTitle\": \"Blogs for the store\",\n                  \"metaKeywords\": \"\",\n                  \"metaDescription\": \"Blogs about top products\"\n                },\n                \"path\": \"/blogs/\"\n              }\n            },\n            {\n              \"node\": {\n                \"__typename\": \"ContactPage\",\n                \"entityId\": 6,\n                \"name\": \"Contact Us Form\",\n                \"parentEntityId\": null,\n                \"seo\": {\n                  \"pageTitle\": \"Contact Us Now!!\",\n                  \"metaKeywords\": \"Contact Us\",\n                  \"metaDescription\": \"Contact Info\"\n                },\n                \"path\": \"/contact-us-form/\",\n                \"plainTextSummary\": \"Visitors can use the form on this page to submit questions or feedback.&nbsp;\\r\\nStore is located in...\",\n                \"contactFields\": [\n                  \"fullname\",\n                  \"phone\"\n                ]\n              }\n            },\n            {\n              \"node\": {\n                \"__typename\": \"ExternalLinkPage\",\n                \"entityId\": 8,\n                \"name\": \"Youtube page\",\n                \"parentEntityId\": null,\n                \"seo\": {\n                  \"pageTitle\": \"\",\n                  \"metaKeywords\": \"\",\n                  \"metaDescription\": \"\"\n                },\n                \"link\": \"https://www.youtube.com/\"\n              }\n            },\n            {\n              \"node\": {\n                \"__typename\": \"RawHtmlPage\",\n                \"entityId\": 9,\n                \"name\": \"Random page\",\n                \"parentEntityId\": null,\n                \"seo\": {\n                  \"pageTitle\": \"\",\n                  \"metaKeywords\": \"\",\n                  \"metaDescription\": \"\"\n                },\n                \"path\": \"/random-page/\",\n                \"htmlBody\": \"<html>\\r\\n\\r\\n<head>\\r\\n<title>\\r\\nExample page\\r\\n</title>\\r\\n</head>\\r\\n\\r\\n<body>\\r\\nExample body\\r\\n</body>\\r\\n\\r\\n</html>\"\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching a Checkout with GraphQL Query\nDESCRIPTION: This query fetches details of an existing checkout using its ID. It retrieves information such as account ID, checkout URL, status, and item details including product, scope, pricing plan, and subscription ID if available.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery Account($checkoutId: ID!) {\n  account {\n    checkout(id: $checkoutId) {\n      id\n      accountId\n      checkoutUrl\n      status\n      items {\n        edges {\n          node {\n            description\n            status\n            product {\n              id\n              productLevel\n              type\n            }\n            scope {\n              id\n              type\n            }\n            pricingPlan {\n              price {\n                value\n                currencyCode\n              }\n              interval\n              trialDays\n            }\n            subscriptionId\n            redirectUrl\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Access Token for BigCommerce Single-Click App\nDESCRIPTION: POST request to exchange the authorization code for an access_token. The request body combines query arguments from the auth callback with app credentials.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/auth.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST https://login.bigcommerce.com/oauth2/token\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"client_id\": {CLIENT_ID},\n  \"client_secret\": {CLIENT_SECRET},\n  \"code\": \"qr6h3thvbvag2ffq\",\n  \"context\": \"stores/g5cd38\",\n  \"scope\": \"store_v2_orders store_channel_listings_read_only\",\n  \"grant_type\": \"authorization_code\",\n  \"redirect_uri\": \"https://your_app.example.com/auth\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Shipping Consignment to Checkout with GraphQL\nDESCRIPTION: GraphQL mutation to add a shipping consignment to an existing checkout. Requires checkout entity ID and shipping address details. Returns consignment ID and available shipping options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/graphql-storefront.mdx#2025-04-16_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://store.example.com/graphql\nAuthorization: Bearer {{STOREFRONT_TOKEN}}\nX-Bc-Customer-Access-Token: {{CUSTOMER_ACCESS_TOKEN}}\n\nmutation addCheckoutShippingConsignments($addCheckoutShippingConsignmentsInput: AddCheckoutShippingConsignmentsInput!) {\n  checkout {\n    addCheckoutShippingConsignments(input: $addCheckoutShippingConsignmentsInput) {\n      checkout {\n        entityId\n        shippingConsignments {\n          entityId\n          availableShippingOptions {\n            entityId\n          }\n          selectedShippingOption {\n            entityId\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Endpoint in Next.js\nDESCRIPTION: This code implements the /auth API endpoint in Next.js. It handles the authorization process when the app is installed and redirects to the homepage upon successful authorization.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-connect.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { getBCAuth } from '../../lib/auth';\n\nexport default async function auth(req: NextApiRequest, res: NextApiResponse) {\n    try {\n        // First, authorize the application\n        // req.query: query param passed from the Control Panel to your app\n        await getBCAuth(req.query);\n        // Once the app has been authorized, redirect to the homepage (/pages/index.tsx)\n        res.redirect(302, '/');\n    } catch (error) {\n        const { message, response } = error;\n        res.status(response?.status || 500).json({ message });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscriber using BigCommerce V3 API (HTTP)\nDESCRIPTION: This snippet demonstrates how to create a new subscriber using the BigCommerce V3 API. It includes the necessary headers and JSON payload structure for a POST request, including fields for email, name, channel, consents, and source.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/customers/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/customers/subscribers\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"email\": \"string@test.com\",\n  \"first_name\": \"string\",\n  \"last_name\": \"string\",\n  \"channel_id\": 1,\n  \"consents\": [\"marketing_newsletter\", \"abandoned_cart\"],\n  \"source\": \"storefront\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving States by Country Name in BigCommerce with JavaScript\nDESCRIPTION: This code demonstrates how to retrieve states for a selected country using utils.api.country.getByName. It handles the country dropdown change event, fetches the states, and updates the state input field accordingly based on whether states exist for the selected country.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncallback(err, element) => {\n  if(err) {\n    console.log(err);\n    return;\n  }\n  if(element) {\n    console.log(element);\n    //do something\n  }\n}\n\n$('select[data-field-type=\"Country\"]').on('change', (event) => {\n  const countryName = $(event.currentTarget).val();\n  if (countryName === '') {\n    return;\n  }\n  utils.api.country.getByName(countryName, (err, response) => {\n    if (err) {\n      alert(context.state_error);\n      return callback(err);\n    }\n    const $currentInput = $('[data-field-type=\"State\"]');\n    if (!_.isEmpty(response.data.states)) {\n      // The element may have been replaced with a select, reselect it\n      const $selectElement = makeStateRequired($currentInput, context);\n      addOptions(response.data, $selectElement, options);\n      callback(null, $selectElement);\n    } else {\n      const newElement = makeStateOptional($currentInput, context);\n      callback(null, newElement);\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Cart Response Object\nDESCRIPTION: Example JSON response showing the structure of cart data returned by the Checkout SDK.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/checkout-sdk/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"78fbb9bd-0489-4f6f-aeb7-60a697ccb63a\",\n  \"customerId\": 0,\n  \"email\": \"\",\n  \"currency\": {\n    \"name\": \"US Dollar\",\n    \"code\": \"USD\",\n    \"symbol\": \"$\",\n    \"decimalPlaces\": 2\n  },\n  \"isTaxIncluded\": true,\n  \"baseAmount\": 57,\n  \"discountAmount\": 0,\n  \"cartAmount\": 57,\n  \"coupons\": [],\n  \"discounts\": [\n    {\n      \"id\": \"ce448bc8-2f35-40d1-a0a6-f5a7e2882c5c\",\n      \"discountedAmount\": 0\n    }\n  ],\n  \"lineItems\": {\n    \"physicalItems\": [],\n    \"digitalItems\": [\n      {\n        \"id\": \"ce448bc8-2f35-40d1-a0a6-f5a7e2882c5c\",\n        \"parentId\": null,\n        \"variantId\": 5851,\n        \"productId\": 5860,\n        \"sku\": \"\",\n        \"name\": \"Handcrafted Rubber Table\",\n        \"url\": \"https://example.com/handcrafted-rubber-table\",\n        \"quantity\": 1,\n        \"brand\": \"\",\n        \"isTaxable\": true,\n        \"imageUrl\": \"https://cdn11.bigcommerce.com/s-xxxyyyzzz/products/5860/images/588/dzn_Handcrafted-Rubber-Table-7__57890.1685111102.220.290.jpg?c=1\",\n        \"discounts\": [],\n        \"discountAmount\": 0,\n        \"couponAmount\": 0,\n        \"originalPrice\": 57,\n        \"listPrice\": 57,\n        \"salePrice\": 57,\n        \"retailPrice\": null,\n        \"extendedListPrice\": 57,\n        \"extendedSalePrice\": 57,\n        \"comparisonPrice\": 57,\n        \"extendedComparisonPrice\": 57,\n        \"isShippingRequired\": false,\n        \"type\": \"digital\",\n        \"isMutable\": true,\n        \"options\": []\n      }\n    ],\n    \"giftCertificates\": [],\n    \"customItems\": []\n  },\n  \"createdTime\": \"2023-07-12T13:59:48+00:00\",\n  \"updatedTime\": \"2023-07-12T13:59:48+00:00\",\n  \"locale\": \"en\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Billing Address to Checkout - GraphQL\nDESCRIPTION: This GraphQL mutation allows users to add a billing address to an existing checkout using a specified input structure. It will respond with the updated checkout entity ID upon successful execution.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/graphql-storefront.mdx#2025-04-16_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://store.example.com/graphql\nAuthorization: Bearer {{STOREFRONT_TOKEN}}\nX-Bc-Customer-Access-Token: {{CUSTOMER_ACCESS_TOKEN}}\n\nmutation addCheckoutBillingAddress($addCheckoutBillingAddressInput: AddCheckoutBillingAddressInput!) {\n  checkout {\n    addCheckoutBillingAddress(input: $addCheckoutBillingAddressInput) {\n      checkout {\n        entityId\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finalizing an Order in BigCommerce Checkout API\nDESCRIPTION: This snippet demonstrates how to finalize an order using the BigCommerce API. It includes the request to create an order from a checkout and the response containing the created order ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/checkout.mdx#2025-04-16_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/checkouts/{{checkout_id}}/orders\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 126\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Cart for Existing Customer\nDESCRIPTION: JSON request body for creating a cart for an existing customer with customer_id.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/carts.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel_id\": 1,\n  \"customer_id\": 1,\n  \"line_items\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 80,\n      \"variant_id\": 64\n    }\n  ],\n  \"locale\": \"en-us\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Webhook with Authentication Headers\nDESCRIPTION: Example of creating a webhook with custom authentication headers for securing webhook callbacks using basic authentication.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/overview.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/hooks\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"scope\": \"store/cart/lineItem/*\",\n  \"destination\": \"https://yourapp.example.com/webhooks\",\n  \"is_active\": true,\n  \"headers\": {\n    \"username\": \"Hello\",\n    \"password\": \"Goodbye\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom React Hook for Products\nDESCRIPTION: Implements a custom React hook using SWR for fetching and caching product data from the API.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWR from 'swr';\nimport { useSession } from '../context/session';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fetcher(url: string, encodedContext: string) {\n    return fetch(`${url}?context=${encodedContext}`).then(res => res.json());\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useProducts() {\n    const encodedContext = useSession()?.context;\n    // Request is deduped and cached; Can be shared across components\n    const { data, error } = useSWR(encodedContext ? ['/api/products', encodedContext] : null, fetcher);\n\n    return {\n        summary: data,\n        isError: error,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Data with GraphQL\nDESCRIPTION: This GraphQL query retrieves product data from a store using the product's entity ID. It includes basic product information like name, SKU, description, and pricing details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/graphql-storefront.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET https://store.example.com/graphql\nAuthorization: Bearer {{STOREFRONT_TOKEN}}\nAccept: application/json\nX-Bc-Customer-Access-Token: {{CUSTOMER_ACCESS_TOKEN}}\n\n# This query retrieves one product.\nquery SingleProduct ($entityId: Int) {\n  site {\n    product(entityId: $entityId) {\n      id\n      entityId\n      name\n      sku\n      description\n      prices {\n        price {\n          value\n          currencyCode\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Completing Checkout with GraphQL\nDESCRIPTION: GraphQL mutation to complete a checkout and create an incomplete order. Returns order entity ID and payment access token for subsequent payment processing.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/graphql-storefront.mdx#2025-04-16_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://store.example.com/graphql\nAuthorization: Bearer {{STOREFRONT_TOKEN}}\nX-Bc-Customer-Access-Token: {{CUSTOMER_ACCESS_TOKEN}}\n\nmutation completeCheckout($completeCheckoutInput: CompleteCheckoutInput!) {\n    checkout {\n      completeCheckout(input:$completeCheckoutInput) {\n        orderEntityId\n        paymentAccessToken\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting up a Local Development Environment with Express and ngrok for BigCommerce Apps\nDESCRIPTION: A sequence of shell commands for setting up a local development environment for BigCommerce apps using Express and ngrok. This allows developers to expose their locally-running app to the internet for testing with the BigCommerce platform.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install express-generator -g      # install express generate\n\nexpress myapp                         # generate new express app\n\ncd myapp                              # move into app dir\n\nbrew install ngrok/ngrok/ngrok        # install ngrok using homebrew\n\nngrok config add-authtoken <TOKEN>    # Obtain your authtoken by going to https://dashboard.ngrok.com/get-started/your-authtoken            \n\nnpm install                           # install dependencies\n\nngrok http http://localhost:8080      # start app\n```\n\n----------------------------------------\n\nTITLE: Installing Stencil CLI and Dependencies on Mac\nDESCRIPTION: Commands for installing Node Version Manager (nvm), the appropriate Node.js version, and Stencil CLI on Mac. This ensures compatibility with Stencil CLI requirements.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/install.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Install Node Version Manager ([nvm](https://github.com/nvm-sh/nvm?tab=readme-ov-file#installing-and-updating) or any other version manager of your flavor)\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\n\n# Install Stencil CLI supported version of Node.js\nnvm install 20.16.0\n\n# Switch to Stencil CLI supported version of Node.js:\nnvm use 20.16.0\n\n# Install Stencil CLI\nnpm install -g @bigcommerce/stencil-cli\n```\n\n----------------------------------------\n\nTITLE: Creating Channel Listings via BigCommerce API\nDESCRIPTION: Example of creating channel listings by sending a POST request to the BigCommerce API. Shows how to create listings with product variants and their associated states.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/guide/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/channels/{{CHANNEL_ID}}/listings\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"product_id\": 117,\n    \"state\": \"active\",\n    \"name\": \"baseball hat\",\n    \"description\": \"Baseball hat with your favorite team's name.\",\n    \"external_id\": \"listing1\",\n    \"variants\": [\n      {\n        \"variant_id\": 82,\n        \"name\": \"blue baseball bat\",\n        \"product_id\": 117,\n        \"state\": \"disabled\",\n        \"external_id\": \"Var1\"\n      },\n      {\n        \"variant_id\": 83,\n        \"product_id\": 117,\n        \"state\": \"active\",\n        \"external_id\": \"Var2\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Complete Checkout GraphQL Mutation\nDESCRIPTION: GraphQL mutation to complete a checkout process. Takes a checkout entity ID as input and returns the order entity ID and payment access token upon successful completion.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/graphql-storefront.mdx#2025-04-16_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nmutation completeCheckout($completeCheckoutInput: CompleteCheckoutInput!) {\n  checkout {\n    completeCheckout(input:$completeCheckoutInput) {\n      orderEntityId\n      paymentAccessToken\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"completeCheckoutInput\": {\n    \"checkoutEntityId\": \"812ece1a-da23-46eb-ab6b-c2ee210aae54\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"checkout\": {\n      \"completeCheckout\": {\n        \"orderEntityId\": 106,\n        \"paymentAccessToken\": \"JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyMywiZW1haWwiOiJleGFtcGxlQGVtYWlsLmNvbSIsImlhdCI6MTcwODg1NzIwMCwiZXhwIjoxNzA4ODU5MDAwfQ._d2ZZMtkQFPhd4Gje22D8vTep7YXmA9z_o3F9Nv8LJc\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Coupon Codes in BigCommerce Cart with JavaScript\nDESCRIPTION: This method binds event listeners for coupon code interactions in the cart page. It handles showing/hiding the coupon form and submits the coupon code using the utils.api.cart.applyCode method to apply codes to the cart.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nbindPromoCodeEvents() {\n  const $couponContainer = $('.coupon-code');\n  const $couponForm = $('.coupon-form');\n  const $codeInput = $('[name=\"couponcode\"]', $couponForm);\n\n  $('.coupon-code-add').on('click', (event) => {\n    event.preventDefault();\n\n    $(event.currentTarget).hide();\n    $couponContainer.show();\n    $('.coupon-code-cancel').show();\n    $codeInput.focus();\n  });\n\n  $('.coupon-code-cancel').on('click', (event) => {\n    event.preventDefault();\n\n    $couponContainer.hide();\n    $('.coupon-code-cancel').hide();\n    $('.coupon-code-add').show();\n  });\n\n  $couponForm.on('submit', (event) => {\n    const code = $codeInput.val();\n\n    event.preventDefault();\n\n    // Empty code\n    if (!code) {\n      return alert($codeInput.data('error'));\n    }\n\n    utils.api.cart.applyCode(code, (err, response) => {\n      if (response.data.status === 'success') {\n        this.refreshContent();\n      } else {\n        alert(response.data.errors.join('\\n'));\n      }\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Access Token via Login Mutation\nDESCRIPTION: GraphQL mutation to log in a customer and obtain a customer access token. This mutation requires a storefront token for authorization and customer credentials in the variables.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/graphql-storefront.mdx#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n# Creates a customer access token\nPOST https://{{storeDomain}}/graphql\nAuthorization: Bearer {Storefront token}\naccept: application/json\ncontent-type: application/json\n\nmutation Login($email: String!, $pass: String!) {\n login(email: $email, password: $pass) {\n   result\n   customer {\n     entityId\n     email\n   }\n   customerAccessToken {\n     value\n     expiresAt\n   }\n }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"email\": \"user@email.com\", \n\"pass\": \"password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Images with GraphQL\nDESCRIPTION: This GraphQL query retrieves the first two images and the default image for a specified product by its entity ID. The expected input is the entityId of the product, and the output includes the image URLs along with alt text and whether the image is the default. Uses GraphQL syntax and requires access to the BigCommerce GraphQL API.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    product (entityId: 113) {\n      images (first: 2) {\n        edges {\n          node {\n            url (width: 1)\n            urlOriginal\n            altText\n            isDefault\n          }\n        }\n      } \n      defaultImage {\n        url (width: 1)\n        urlOriginal\n        altText\n        isDefault\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Layer with GraphQL Mutation\nDESCRIPTION: This GraphQL mutation enables the data layer in the store. It sets the isDataLayerEnabled flag to true and returns the updated status.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/settings/data.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  settings {\n    dataSolutions {\n      updateDataLayer (input: {isDataLayerEnabled: true}) {\n        dataSolutions {\n          isDataLayerEnabled\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"settings\": {\n      \"dataSolutions\": {\n        \"updateDataLayer\": {\n          \"dataSolutions\": {\n            \"isDataLayerEnabled\": true\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel in BigCommerce using the Channels API\nDESCRIPTION: This HTTP request creates a new channel in BigCommerce by sending a POST request to the /v3/channels endpoint. The request includes channel configuration parameters like name, type, platform, and visibility settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/quick-start.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/channels\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"name\": \"Solution Name\",\n  \"type\": \"storefront\",\n  \"platform\": \"drupal\",\n  \"external_id\": \"\",\n  \"is_enabled\": true,\n  \"is_listable_from_ui\": true,\n  \"is_visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating App Extension with GraphQL Mutation\nDESCRIPTION: GraphQL mutation to create an App Extension that adds a side panel for customer interactions. Includes support for localized labels and custom URL patterns.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/app-extensions/guide.mdx#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation AppExtension($input: CreateAppExtensionInput!) {\n  appExtension {\n    createAppExtension(input: $input) {\n      appExtension {\n        id\n        context\n        model\n        url\n        label {\n          defaultValue\n          locales {\n            value\n            localeCode\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"context\": \"PANEL\",\n    \"model\": \"CUSTOMERS\",\n    \"url\": \"/customers/${id}/interactions\",\n    \"label\": {\n      \"defaultValue\": \"Interactions\",\n      \"locales\": [\n        {\n          \"value\": \"Interaction Notes\",\n          \"localeCode\": \"en-US\"\n        },\n        {\n          \"value\": \"Notas de interacción\",\n          \"localeCode\": \"es-MX\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Token for BigCommerce API Authentication\nDESCRIPTION: Example HTTP request to generate a dynamic token for BigCommerce API authentication. This token is then used in subsequent API calls.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/some-token-generating-endpoint\nX-Auth-Token: {{access_token}}\nAccept: application/json\nContent-Type: application/json\n\n{\n  // request body per token request endpoint documentation\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Buy One Get One Free Promotion using BigCommerce Promotions API\nDESCRIPTION: This JSON snippet demonstrates how to create a 'Buy One Get One Free' promotion using the BigCommerce Promotions API. It includes the promotion name, redemption type, rules with conditions and actions, and notification settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy One Get One Free\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"gift_item\": {\n          \"product_id\": 174,\n          \"quantity\": 1\n        }\n      },\n      \"apply_once\": false,\n      \"stop\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"products\": [\n              174\n            ]\n          },\n          \"minimum_quantity\": 1\n        }\n      }\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"Buy one Le Parfait Jar, Get One Free!\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"You are eligible for a free Le Parfait Jar.\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"Congratulations, you have received a free Le Parfait Jar.\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ],\n  \"stop\": false,\n  \"start_date\": \"2019-01-28T00:00:00+00:00\",\n  \"status\": \"ENABLED\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Brands Pagination Query\nDESCRIPTION: This JSON response shows the result of querying the first thirty brands. It includes pagination metadata with startCursor and endCursor, along with the first brand's details (with others truncated in the example).\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"brands\": {\n        \"pageInfo\": {\n          \"startCursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n          \"endCursor\": \"YXJyYXljb25uZWN0aW9uOjM=\"\n        },\n        \"edges\": [\n          {\n            \"cursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n            \"node\": {\n              \"name\": \"Sagaform\"\n            }\n          },\n          ...\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Catalog Price Object Including and Excluding Tax with Sale Price in JSON\nDESCRIPTION: Offers a JSON structure representing catalog price objects when a sale price is defined, including tax-inclusive settings. Dependencies include BigCommerce's tax settings, and key inputs involve product pricing data with tax and sale price configurations. The structure outputs values ready for dynamic storefront representation under varying tax settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/catalog-price-object.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"product\": {\n    \"price\": {\n      \"with_tax\": {\n        \"formatted\": \"$135.30\",\n        \"value\": 135.3\n      },\n      \"without_tax\": {\n        \"formatted\": \"$123.00\",\n        \"value\": 123\n      },\n      \"sale_price_without_tax\": {\n        \"formatted\": \"123.00\",\n        \"value\": 123\n      },\n      \"sale_price_with_tax\": {\n        \"formatted\": \"135.30\",\n        \"value\": 135.3\n      },\n      \"rrp_with_tax\": {\n        \"formatted\": \"$275.00\",\n        \"value\": 275\n      },\n      \"rrp_without_tax\": {\n        \"formatted\": \"$250.00\",\n        \"value\": 250\n      },\n      \"saved\": {\n        \"formatted\": \"$139.70\",\n        \"value\": 139.7\n      },\n      \"non_sale_price_without_tax\": {\n        \"formatted\": \"$150.00\",\n        \"value\": 150\n      },\n      \"non_sale_price_with_tax\": {\n        \"formatted\": \"$165.00\",\n        \"value\": 165\n      },\n      \"tax_label\": \"Tax\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Shipping Addresses to Order with BigCommerce REST API\nDESCRIPTION: This snippet demonstrates how to include shipping addresses when creating an order using the BigCommerce REST API. It shows the structure of the shipping_addresses array in the request body.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v2/orders\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"billing_address\": {...},\n  \"shipping_addresses\": [\n    {\n      \"first_name\": \"Rusty\",\n      \"last_name\": \"Gates\",\n      \"company\": \"Example LLC\",\n      \"street_1\": \"123 Example ST\",\n      \"street_2\": \"\",\n      \"city\": \"Austin\",\n      \"state\": \"Texas\",\n      \"zip\": \"12345\",\n      \"country\": \"United States\",\n      \"country_iso2\": \"US\",\n      \"phone\": \"5128675309\",\n      \"email\": \"rusty.gates@example.com\"\n    }\n  ],\n  \"products\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Live Previewing a BigCommerce Theme with Stencil CLI\nDESCRIPTION: Commands for initializing and previewing a BigCommerce theme with Stencil CLI. This workflow enables developers to make changes and see them reflected in real-time via Browsersync.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/install.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# move into theme dir\ncd ~/path/to/theme/dir\n\n# install theme modules\nnpm install\n\n# initialize a new .stencil config for the theme\nstencil init\n\n# serve a live, Browsersync enabled preview of the theme\nstencil start\n```\n\n----------------------------------------\n\nTITLE: Setting Authorization Headers with Customer Access Token\nDESCRIPTION: Example of how to add the customer access token to the request headers. This is required for API endpoints that need customer authentication.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/graphql-storefront.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"X-Bc-Customer-Access-Token\": \"{{customer access token}}\",\n  \"Authorization\": \"Bearer {{STOREFRONT_TOKEN}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Free Shipping Promotion Request - JSON\nDESCRIPTION: API request to create a promotion rule that offers free shipping when customers order at least 2 units of product ID 129. Includes notification settings for cart page display and promotion validity period.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/shipping.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Order at least 2X of product and get free shipping\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"shipping\": {\n          \"free_shipping\": true,\n          \"zone_ids\": \"*\"\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"products\": [\n              129\n            ]\n          },\n          \"minimum_quantity\": 2\n        }\n      }\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ],\n  \"stop\": false,\n  \"status\": \"ENABLED\",\n  \"start_date\": \"2019-02-06T05:00:00+00:00\",\n  \"end_date\": \"2019-02-09T04:59:59+00:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Reviews with GraphQL in BigCommerce\nDESCRIPTION: This GraphQL query retrieves the first review for a product with entityId 113. It returns the review's ID, author name, title, text content, rating, and creation date.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_23\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    product (entityId: 113) {\n      reviews (first: 1) {\n        edges {\n          node {\n            entityId\n            author {\n              name\n            }\n            title\n            text\n            rating\n            createdAt {\n              utc\n            }\n          }\n        }\n      } \n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating BigCommerce Instances in TypeScript\nDESCRIPTION: This code creates two BigCommerce instances: one for the initial authorization step and another for signed requests. It also defines an interface for query parameters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-connect.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Create BigCommerce instance\n// https://github.com/bigcommerce/node-bigcommerce/\nconst bigcommerce = new BigCommerce({\n    logLevel: 'info',\n    clientId: process.env.CLIENT_ID,\n    secret: process.env.CLIENT_SECRET,\n    callback: process.env.AUTH_CALLBACK,\n    responseType: 'json',\n    headers: { 'Accept-Encoding': '*' },\n    apiVersion: 'v3'\n});\n\nconst bigcommerceSigned = new BigCommerce({\n    secret: process.env.CLIENT_SECRET,\n    responseType: 'json'\n});\n\ninterface QueryParams {\n    [key: string]: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Billing Address to Checkout with GraphQL Mutation\nDESCRIPTION: This GraphQL mutation adds a billing address to a checkout. It requires the checkout entity ID and address details as input variables.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/graphql-storefront.mdx#2025-04-16_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation addCheckoutBillingAddress($addCheckoutBillingAddressInput: AddCheckoutBillingAddressInput!) {\n  checkout {\n    addCheckoutBillingAddress(input: $addCheckoutBillingAddressInput) {\n      checkout {\n        entityId\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"addCheckoutBillingAddressInput\": {\n    \"checkoutEntityId\": \"812ece1a-da23-46eb-ab6b-c2ee210aae54\",\n    \"data\": {\n      \"address\": {\n        \"firstName\": \"Joe\",\n        \"lastName\": \"Blogs\",\n        \"email\": \"joe@example.com\",\n        \"company\": \"BlogIndustries\",\n        \"address1\": \"123 Yar st\",\n        \"address2\": \"\",\n        \"city\": \"RWC\",\n        \"stateOrProvince\": \"CA\",\n        \"stateOrProvinceCode\": \"CA\",\n        \"countryCode\": \"US\",\n        \"postalCode\": \"94061\",\n        \"phone\": \"6501231212\",\n        \"shouldSaveAddress\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Customer Address using GraphQL Mutation\nDESCRIPTION: This mutation demonstrates how to add a new address to a customer's account, including address details and optional form fields. It also includes error handling for various scenarios.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/customers.mdx#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  customer {\n    addCustomerAddress(\n      reCaptchaV2: { token: \"\" }\n      input: {\n        firstName: \"Jon\"\n        lastName: \"Smith\"\n        address1: \"1234 Fake Street\"\n        address2: \"\"\n        city: \"Austin\"\n        company: \"BC\"\n        countryCode: \"US\"\n        stateOrProvince: \"TX\"\n        phone: \"123-456-7890\"\n        postalCode: \"78610\"\n        formFields: {\n          checkboxes: [{ fieldEntityId: 1, fieldValueEntityIds: [1, 2, 3] }]\n          multipleChoices: [{ fieldEntityId: 1, fieldValueEntityId: 2 }]\n          numbers: [{ fieldEntityId: 1, number: 1.0 }]\n          texts: [{ fieldEntityId: 1, text: \"text\" }]\n          passwords: [{ fieldEntityId: 1, password: \"password\" }]\n        }\n      }\n    ) {\n      errors {\n        __typename\n        ... on ValidationError {\n          message\n        }\n        ... on CustomerNotLoggedInError {\n          message\n        }\n        ... on CustomerAddressCreationError {\n          message\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Variants with Fragments\nDESCRIPTION: Advanced GraphQL query showing how to retrieve multiple variants using aliases and fragments, with option value specifications for each variant.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/variants.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    product (entityId: 113) {       \n      v1: variants (optionValueIds: [{optionEntityId: 116, valueEntityId: 108} {optionEntityId: 126, valueEntityId: 129}]) {\n        edges {\n          node {\n            ...VariantFields\n          }\n        }\n      }\n      v2: variants (optionValueIds: [{optionEntityId: 116, valueEntityId: 109} {optionEntityId: 126, valueEntityId: 129}]){\n        edges {\n          node {\n            ...VariantFields\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment VariantFields on Variant {\n  # fields on the Variant object type\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Locations by Location Data in GraphQL\nDESCRIPTION: This GraphQL snippet demonstrates filtering locations based on country codes, states, cities, and proximity to a specific location using latitude and longitude coordinates. It utilizes the `locations` query with arguments such as `countryCodes`, `states`, `cities`, and `distanceFilter` to refine the search results.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/locations/queries.mdx#2025-04-16_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n\n...\nlocations(\n      countryCodes: [US, AU]\n      states: [\"TX\", \"CA\"]\n      cities: [\"Austin\", \"San Francisco\"]\n      distanceFilter: {\n        radius: 1.0\n        longitude: 122.4194\n        latitude: 37.7749\n        lengthUnit: Kilometres\n      }\n  )\n...\n\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Cart and Displaying Results in Modal (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to add an item to the shopping cart using the cart.itemAdd function, handle errors, and display the cart contents in a custom modal dialog. It uses ES6 JavaScript conventions and includes error handling and UI updates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/queries.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Add item to cart\nutils.api.cart.itemAdd(new FormData(form), (err, response) => {\n    const errorMessage = err || response.data.error;\n\n    $addToCartBtn\n        .val(originalBtnVal)\n        .prop('disabled', false);\n\n    this.$overlay.hide();\n\n    // Guard statement\n    if (errorMessage) {\n        // Strip the HTML from the error message\n        const tmp = document.createElement('DIV');\n        tmp.innerHTML = errorMessage;\n\n        return alert(tmp.textContent || tmp.innerText);\n    }\n\n    // Open preview modal and update content\n    if (this.previewModal) {\n        this.previewModal.open();\n\n        this.updateCartContent(this.previewModal, response.data.cart_item.hash);\n    } else {\n        this.$overlay.show();\n        // if no modal, redirect to the cart page\n        this.redirectTo(response.data.cart_item.cart_url || this.context.urls.cart);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Location Metafields with GraphQL\nDESCRIPTION: GraphQL query to fetch location metafields along with basic location data. Requires specifying the metafield namespace and only returns metafields with appropriate storefront access permissions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/locations/queries.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  inventory {\n    locations {\n      edges {\n        node {\n          metafields(namespace: \"examplespace\") {\n            edges {\n              node {\n                entityId\n                key\n                value\n              }\n            }\n          }\n          entityId\n          code\n          label\n          description\n          typeId\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Location Data with Distance Filters in JSON\nDESCRIPTION: This JSON snippet represents the response from a GraphQL query that retrieves location data based on specified filters, including distance. The response includes details about each location, such as its entity ID, code, label, address, operating hours, and distance from the queried coordinates. The `distance` field indicates the distance value and its unit (e.g., kilometers).\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/locations/queries.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"inventory\": {\n      \"locations\": {\n        \"edges\": [\n          {\n            \"node\": {\n              \"entityId\": 1,\n              \"code\": \"BC-LOCATION-1\",\n              \"label\": \"Default location\",\n              \"description\": \"\",\n              \"typeId\": \"PHYSICAL\",\n              \"distance\": {\n                \"value\": 0,\n                \"lengthUnit\": \"Kilometres\"\n              },\n              \"timeZone\": \"Etc/UTC\",\n              \"address\": {\n                \"city\": \"Austin\",\n                \"address1\": \"103 Example Drive\",\n                \"address2\": \"\",\n                \"postalCode\": \"78726\",\n                \"stateOrProvince\": \"TX\",\n                \"email\": \"person@person.com\",\n                \"phone\": \"\",\n                \"latitude\": 37.7749,\n                \"longitude\": 122.4194,\n                \"countryCode\": \"US\"\n              },\n              \"operatingHours\": {\n                \"sunday\": {\n                  \"open\": true,\n                  \"opening\": \"09:30\",\n                  \"closing\": \"20:00\"\n                },\n                \"monday\": {\n                  \"open\": true,\n                  \"opening\": \"09:00\",\n                  \"closing\": \"17:00\"\n                },\n                \"tuesday\": {\n                  \"open\": true,\n                  \"opening\": \"09:00\",\n                  \"closing\": \"17:00\"\n                },\n                \"wednesday\": {\n                  \"open\": true,\n                  \"opening\": \"09:00\",\n                  \"closing\": \"17:00\"\n                },\n                \"thursday\": {\n                  \"open\": true,\n                  \"opening\": \"09:00\",\n                  \"closing\": \"17:00\"\n                },\n                \"friday\": {\n                  \"open\": true,\n                  \"opening\": \"09:00\",\n                  \"closing\": \"17:00\"\n                },\n                \"saturday\": {\n                  \"open\": false,\n                  \"opening\": \"00:00\",\n                  \"closing\": \"00:00\"\n                }\n              },\n              \"specialHours\": []\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Transactions in BigCommerce API\nDESCRIPTION: Example of how to get order transactions using the BigCommerce REST API. This GET request requires the store hash, order ID, and an access token for authentication. It returns transaction details for the specified order.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/index.mdx#2025-04-16_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/orders/{{order_id}}/transactions\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Querying Variant Inventory by Location with GraphQL\nDESCRIPTION: This GraphQL query retrieves inventory information for a specific product variant across locations. It requests details such as location ID, availability, stock status, and warning levels by filtering for a specific product (entityId: 113) and variant (entityId: 95).\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/inventory/queries.mdx#2025-04-16_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    products (entityIds:[113]) {\n      edges {\n        node {\n          entityId\n          name\n          variants (entityIds:[95]) {\n            edges {\n              node {\n                entityId\n                sku\n                inventory {\n                  byLocation {     // By default, returns only the default location \n                    edges {\n                      node {\n                        locationEntityId\n                        locationEntityCode\n                        locationEntityTypeId\n                        locationDistance {\n                          value\n                          lengthUnit\n                        }\n                        availableToSell\n                        warningLevel\n                        isInStock\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing a Payment with JWT Authentication in BigCommerce\nDESCRIPTION: Example HTTP request demonstrating how to process a payment using JWT authentication in the Authorization header for BigCommerce Payments API.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/index.mdx#2025-04-16_snippet_10\n\nLANGUAGE: http\nCODE:\n```\n# example TOKEN is BigCommerceProvidedJwt.dotDelimited.threePartString\n\nPOST https://payments.bigcommerce.com/stores/{{STORE_HASH}}/payments\nAccept: application/vnd.bc.v1+json # note uncommon accept header value\nAuthorization: PAT {{TOKEN}} # there's a space between \"PAT\" and the token\nContent-Type: application/json\n\n{\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Creating a Cart with Simple Product\nDESCRIPTION: This JSON response shows the result of creating a cart with a simple product. It includes the cart's entity ID and details of the added line item.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/graphql-storefront.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"cart\": {\n      \"createCart\": {\n        \"cart\": {\n          \"entityId\": \"bb916deb-ddd6-4586-b65b-b8385e0e7a9d\",\n          \"lineItems\": {\n            \"physicalItems\": [\n              {\n                \"name\": \"[Sample] Smith Journal 13\",\n                \"quantity\": 1\n              }\n            ],\n            \"digitalItems\": [],\n            \"giftCertificates\": [],\n            \"customItems\": []\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Redirect URL with GraphQL Mutation\nDESCRIPTION: This mutation creates a cart redirect URL that can be used for session synchronization between headless storefronts and BigCommerce-hosted pages. It returns a redirectedCheckoutUrl that maintains consistent login state.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/customers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmutation createRedirectUrl($input: CreateCartRedirectUrlsInput!) {\n  cart {\n    createCartRedirectUrls(input: $input) {\n      redirectUrls {\n        redirectedCheckoutUrl\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cart with Option ID in BigCommerce REST Management API\nDESCRIPTION: This request creates a cart with a product that has options by specifying the option_id and option_value. Use the Get Products or Get Product Variant Options endpoints to retrieve the correct option_id values.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-management.mdx#2025-04-16_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{store_hash}/v3/carts\nX-Auth-Token: {{access_token}}\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"line_item\": {\n    \"quantity\": 1,\n    \"product_id\": 76,\n    \"list_price\": 170.00,\n    \"option_selections\": [\n      {\n        \"option_id\": 21506,\n        \"option_value\": 10090\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Checkout Information with GraphQL\nDESCRIPTION: This GraphQL query retrieves detailed information about a checkout, including billing address, shipping consignments, order details, costs, taxes, and promotions. It uses fragments to modularize the query structure.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/graphql-storefront.mdx#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery getCheckout {\n  site {\n    checkout {\n      entityId\n      billingAddress {\n        ...CheckoutBillingAddressFields\n      }\n      shippingConsignments {\n        ...CheckoutShippingConsignmentFields\n      }\n      order {\n        entityId\n      }\n      shippingCostTotal {\n        ...MoneyFields\n      }\n      giftWrappingCostTotal {\n        ...MoneyFields\n      }\n      handlingCostTotal {\n        ...MoneyFields\n      }\n      taxTotal {\n        ...MoneyFields\n      }\n      taxes {\n        ...CheckoutTaxFields\n      }\n      subtotal {\n        ...MoneyFields\n      }\n      grandTotal {\n        ...MoneyFields\n      }\n      createdAt {\n        utc\n      }\n      updatedAt {\n        utc\n      }\n      customerMessage\n      outstandingBalance {\n        ...MoneyFields\n      }\n      coupons {\n        ...CheckoutCouponFields\n      }\n      promotions {\n        ...CheckoutPromotionFields\n      }\n    }\n  }\n}\n\nfragment CheckoutConsignmentAddressFields on CheckoutConsignmentAddress {\n  ...CheckoutAddressFields\n}\n\nfragment CheckoutBillingAddressFields on CheckoutBillingAddress {\n  entityId\n  ...CheckoutAddressFields\n}\n\nfragment CheckoutAddressFields on CheckoutAddress {\n  firstName\n  lastName\n  email\n  company\n  address1\n  address2\n  city\n  stateOrProvince\n  stateOrProvinceCode\n  countryCode\n  postalCode\n  phone\n  customFields {\n    entityId\n    ... on CheckoutAddressCheckboxesCustomField {\n      valueEntityIds\n    }\n    ... on CheckoutAddressDateCustomField {\n      date {\n        utc\n      }\n    }\n    ... on CheckoutAddressMultipleChoiceCustomField {\n      valueEntityId\n    }\n    ... on CheckoutAddressNumberCustomField {\n      number\n    }\n    ... on CheckoutAddressPasswordCustomField {\n      password\n    }\n    ... on CheckoutAddressTextFieldCustomField {\n      text\n    }\n  }\n}\n\nfragment CheckoutShippingConsignmentFields on CheckoutShippingConsignment {\n  entityId\n  address {\n    ...CheckoutConsignmentAddressFields\n  }\n  availableShippingOptions {\n    ...CheckoutAvailableShippingOptionFields\n  }\n  selectedShippingOption {\n    ...CheckoutSelectedShippingOptionFields\n  }\n  coupons {\n    ...CheckoutCouponFields\n  }\n  shippingCost {\n    ...MoneyFields\n  }\n  handlingCost {\n    ...MoneyFields\n  }\n  lineItemIds\n}\n\nfragment CheckoutAvailableShippingOptionFields on CheckoutAvailableShippingOption {\n  entityId\n  description\n  type\n  imageUrl\n  cost {\n    ...MoneyFields\n  }\n  transitTime\n  isRecommended\n}\n\nfragment CheckoutSelectedShippingOptionFields on CheckoutSelectedShippingOption {\n  entityId\n  description\n  type\n  imageUrl\n  cost {\n    ...MoneyFields\n  }\n  transitTime\n}\n\nfragment MoneyFields on Money {\n  value\n  currencyCode\n}\n\nfragment CheckoutCouponFields on CheckoutCoupon {\n  entityId\n  code\n  couponType\n  discountedAmount {\n    ...MoneyFields\n  }\n}\n\nfragment CheckoutTaxFields on CheckoutTax {\n  name\n  amount {\n    ...MoneyFields\n  }\n}\n\nfragment CheckoutPromotionFields on CheckoutPromotion {\n  banners {\n    entityId\n    type\n    locations\n    text\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Handlebars Context into BigCommerce Product Page\nDESCRIPTION: Demonstrates how to inject Handlebars context variables into client-side JavaScript using the {{inject}} expression. This allows access to server-side variables in the front-end code.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/javascript/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{inject 'productThumbSize' theme_settings.productthumb_size}}\n```\n\nLANGUAGE: html\nCODE:\n```\nproduct:\n    videos:\n        limit: {{theme_settings.productpage_videos_count}}\n    reviews:\n        limit: {{theme_settings.productpage_reviews_count}}\n    related_products:\n        limit: {{theme_settings.productpage_related_products_count}}\n    similar_by_views:\n        limit: {{theme_settings.productpage_similar_by_views_count}}\n\n{{#partial \"page\"}}\n    <!-- Context Injection Example: -->\n    {{inject 'productThumbSize' theme_settings.productthumb_size}}\n    <!-- End Context Injection Example -->\n    <!-- ... -->\n{{/partial}}\n{{> layout/base}}\n```\n\n----------------------------------------\n\nTITLE: Creating Cart Metafields with GraphQL\nDESCRIPTION: Mutation to create a new cart metafield. Requires cart entity ID and metafield data (key-value pair). Limited to 10 metafields per client per cart.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/metafields.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation createCartMetafield { \n cart {\n  createCartMetafield(input:{\n    cartEntityId: \"4a5fd706-beb9-41b5-9ac2-01593b471168\"\n    data: {\n      key: \"size\"\n      value: \"small\"\n    }\n  }) {\n    metafield {\n      id\n      entityId\n      key\n      value\n    }\n    errors {\n      ...on Error {\n        message\n      }\n    }\n  }\n}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"cart\": {\n      \"createCartMetafield\": {\n        \"metafield\": {\n          \"id\": \"TWV0YWZpZWxkczo1Mw==\",\n          \"entityId\": 53,\n          \"key\": \"size\",\n          \"value\": \"small\"\n        },\n        \"errors\": []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Same-Origin GraphQL Request in JavaScript\nDESCRIPTION: Example of making a GraphQL request from a coupled storefront using fetch API with same-origin credentials and proper authorization headers.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('/graphql', {\n  method: 'POST',\n  credentials: 'same-origin',\n  headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + {{storefrontToken}}\n  },\n  body: JSON.stringify({\n    query: gqlQueryString\n  })\n})\n.then(response => response.json())\n.then(result => console.log(result))\n.catch(error => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Adding Consignment to Checkout in BigCommerce API\nDESCRIPTION: This request adds a consignment to a checkout with shipping address and line item information. It includes the 'include=consignments.available_shipping_options' query parameter to return available shipping options in the response.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/rest-management.mdx#2025-04-16_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/checkouts/{{checkoutId}}/consignments?include=consignments.available_shipping_options\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n[\n  {\n    \"shipping_address\": {\n      \"first_name\": \"Test\",\n      \"last_name\": \"User\",\n      \"email\": \"Test.User@example.com\",\n      \"company\": \"BigCommerce\",\n      \"address1\": \"555 Main Street\",\n      \"address2\": \"\",\n      \"city\": \"Austin\",\n      \"state_or_province\": \"Texas\",\n      \"state_or_province_code\": \"TX\",\n      \"country_code\": \"US\",\n      \"postal_code\": \"78701\",\n      \"phone\": \"555-555-5555\"\n    },\n    \"line_items\": [\n      {\n        \"item_id\": \"ca9ef0d1-1da9-48e5-a505-7051eb575432\",\n        \"quantity\": 2\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Aggregate Product Inventory with GraphQL\nDESCRIPTION: GraphQL query to retrieve aggregate inventory levels for products. Returns product entity ID, name, available stock, and warning level for each product. By default, includes inventory only from the default location.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/inventory/queries.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    products {\n      edges {\n        node {\n          entityId\n          name\n          inventory {\n            aggregated {         // By default, includes inventory from only the default location \n              availableToSell\n              warningLevel\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting JavaScript Context Variables in BigCommerce Theme Templates\nDESCRIPTION: This example shows how to use the 'inject' and 'jsContext' Handlebars helpers to make store data accessible in JavaScript. The code injects a product title as a custom variable and then logs it to the console, demonstrating how to pass server-side data to client-side scripts.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/performance-optimization.mdx#2025-04-16_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n{{inject \"myProductName\" product.title}}\n\n<script>\n    console.log({{jsContext}}); //type: string\n    // {{jsContext}} outputs the string {\"myProductName\": \"Sample Product\"}\n    console.log(jsContext); //type: object\n    console.log(jsContext.myProductName)\n    // Will output: Sample Product\n</script>\n```\n\n----------------------------------------\n\nTITLE: Specifying WebDAV Script URL for BigCommerce Custom Checkout\nDESCRIPTION: This code snippet demonstrates how to specify the WebDAV script URL for a custom checkout in the BigCommerce control panel. It uses the 'webdav:' prefix to indicate that the file is located in the remote WebDAV directory.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/checkout-sdk/tutorial.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwebdav:checkout/checkout-loader-<version>.js\n```\n\n----------------------------------------\n\nTITLE: Filtering Subscriptions - GraphQL\nDESCRIPTION: This GraphQL query allows filtering of subscriptions by various criteria, including productId, productType, updatedAfter, and status. It uses a filters input object to specify the filter criteria and returns subscription data relevant to the specified filters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nquery ($filters: SubscriptionFiltersInput) {\n  account {\n    subscriptions(filters: $filters) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          accountId\n          activationDate\n          pricePerInterval {\n            value\n            currencyCode\n          }\n          billingInterval\n          status\n          scope {\n            type\n            id\n          }\n          product {\n            productLevel\n            id\n            type\n          }\n          createdAt\n          currentPeriodEnd\n          updatedAt\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tax Rates via BigCommerce API\nDESCRIPTION: Creates new tax rates by sending a POST request. Requires tax zone ID, rate name, and tax class rates. Returns the created tax rate details including a unique ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/tax-rates-zones.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/tax/rates\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"class_rates\": [\n      {\n        \"rate\": 5,\n        \"tax_class_id\": 0\n      },\n      {\n        \"rate\": 5,\n        \"tax_class_id\": 1\n      }\n    ],\n    \"enabled\": true,\n    \"name\": \"Sales Tax\",\n    \"priority\": 1,\n    \"tax_zone_id\": 2\n  }\n]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"class_rates\": [\n        {\n          \"rate\": 5,\n          \"tax_class_id\": 0\n        },\n        {\n          \"rate\": 5,\n          \"tax_class_id\": 1\n        }\n      ],\n      \"enabled\": true,\n      \"id\": 3,\n      \"name\": \"Sales Tax\",\n      \"priority\": 1,\n      \"tax_zone_id\": 2\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Product Option Changes in BigCommerce with JavaScript\nDESCRIPTION: This code updates product attributes when an option changes, such as color or size selection. It uses utils.api.productAttributes.optionChange to retrieve updated product data and then refreshes the product view with the new information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Update product attributes. If we're in quick view and the product has options, then also update the initial view in case items are oos\nif (_.isEmpty(productAttributesData) && hasOptions) {\n  const $productId = $('[name=\"product_id\"]', $form).val();\n\n  utils.api.productAttributes.optionChange($productId, $form.serialize(), (err, response) => {\n    const attributesData = response.data || {};\n\n    this.updateProductAttributes(attributesData);\n    this.updateView(attributesData);\n  });\n} else {\n  this.updateProductAttributes(productAttributesData);\n}\n```\n\n----------------------------------------\n\nTITLE: Response from Multi-Language Product Query in GraphQL Storefront API\nDESCRIPTION: This JSON response shows the result of querying products with a French locale preference. It includes the resolved locale (fr), available locales with their default status, and product names translated into French.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/multi-language-support.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"shopperPreferences\": {\n            \"locale\": {\n                \"resolved\": \"fr\"\n            }\n        },\n        \"site\": {\n            \"settings\": {\n                \"locales\": [\n                    {\n                        \"code\": \"fr\",\n                        \"isDefault\": true\n                    },\n                    {\n                        \"code\": \"en\",\n                        \"isDefault\": false\n                    }\n                ]\n            },\n            \"products\": {\n                \"edges\": [\n                    {\n                        \"node\": {\n                            \"name\": \"Serviette en chambray en lin brouillard\"\n                        }\n                    },\n                    {\n                        \"node\": {\n                            \"name\": \"Terrarium en orbite\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Digital Product in BigCommerce API\nDESCRIPTION: This snippet illustrates how to create a digital product (like an ebook) using the BigCommerce API. It sets the type to 'digital' and includes an image URL for the product thumbnail.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"name\": \"ebook: A Guide to Coffee\",\n  \"price\": \"10.00\",\n  \"categories\": [\n    23,\n    21\n  ],\n  \"type\": \"digital\",\n  \"images\": [\n    {\n      \"is_thumbnail\": true,\n      \"image_url\": \"{{image_url}}\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cart Helper Function in JavaScript\nDESCRIPTION: Defines a createCart() function that sends a POST request to create a new cart with the specified line items. It takes the API route and cart items as parameters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createCart(route, cartItems) {\n  return fetch(route, {\n    method: \"POST\",\n    credentials: \"same-origin\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(cartItems),\n  })\n  .then(response => response.json())\n  .then(result => console.log(result))\n  .catch(error => console.error(error));\n};\n```\n\n----------------------------------------\n\nTITLE: Location Stock Response from BigCommerce API (JSON)\nDESCRIPTION: This snippet shows an example response when retrieving location stock information. It includes fields for available to sell and total inventory on hand.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/inventory-adjustments.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"available_to_sell\": 20,\n  \"total_inventory_onhand\": 30,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Product Variant Options at Global Level in GraphQL\nDESCRIPTION: This GraphQL mutation sets the store's global product variant option information. It allows setting the name and values for existing variant options, which channels inherit by default.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-variant-options.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($input: SetProductOptionsInformationInput!) {\n  product {\n    setProductOptionsInformation (input: $input) {\n      product {\n        id\n        options (first: 2) {\n          edges {\n            node {\n              id\n              displayName\n              isShared\n              values {\n                id\n                label\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"data\": {\n      \"options\": [\n        {\n          \"optionId\": \"bc/store/productOption/108\",\n          \"data\": {\n            \"dropdown\": {\n              \"displayName\": \"Size US\",\n              \"values\": [\n                {\n                  \"valueId\": \"bc/store/productOptionValue/68\",\n                  \"label\": \"Small US\"\n                },\n                {\n                  \"valueId\": \"bc/store/productOptionValue/69\",\n                  \"label\": \"Medium US\"\n                },\n                {\n                  \"valueId\": \"bc/store/productOptionValue/70\",\n                  \"label\": \"Large US\"\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Buy One Get One Free Promotion in BigCommerce\nDESCRIPTION: Example of creating a BOGO (Buy One Get One Free) promotion where purchasing one product automatically qualifies for a free unit of the same product. The promotion includes notification settings and date constraints.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/product.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy one and get one free\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"gift_item\": {\n          \"product_id\": 130,\n          \"quantity\": 1\n        }\n      },\n      \"apply_once\": false,\n      \"stop\": false,\n      \"currency_code\": \"AUD\",\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"products\": [\n              130\n            ]\n          },\n          \"minimum_quantity\": 1\n        }\n      }\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ],\n  \"stop\": false,\n  \"status\": \"ENABLED\",\n  \"start_date\": \"2019-02-06T05:00:00+00:00\",\n  \"end_date\": \"2019-02-09T04:59:59+00:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Variant Option Values with Interface Extensions in BigCommerce\nDESCRIPTION: GraphQL query that retrieves variant option values for a specific variant, demonstrating the use of interfaces and type-specific fields. This query shows how to retrieve common fields from the CatalogProductOptionValue interface and additional fields for swatch option types.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/variants.mdx#2025-04-16_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\n# This query uses interfaces. For more, see https://graphql.org/learn/schema#interfaces.\n\nquery {\n  site {\n    product (entityId: 113) {\n      variants (entityIds: [127]) {\n        edges {\n          node {\n            productOptions (first: 2) {\n              edges {\n                node {\n                  \n                  # fields all muliple choice options include\n                  ... on MultipleChoiceOption {           \n                    values {\n                      edges {\n                        node {\n                          entityId\n                          label\n                          isDefault\n                          \n                          # additional fields for swatch options\n                          ... on SwatchOptionValue {      \n                            hexColors\n                            imageUrl (width: 2)\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Product Views with ProductViewedEvent Mutation in GraphQL\nDESCRIPTION: This GraphQL mutation tracks product views in the BigCommerce analytics system. It requires the same visitId and visitorId as the VisitStartedEvent, along with product details and search information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/data-events.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\nmutation ProductViewedEvent {\n    analytics {\n        productViewedEvent(input: {\n            commonInput: {\n                initiator: {\n                    visitId: \"5acfce80-0d45-47b9-adca-d2d894e60444\",\n                    visitorId: \"a1711d5c-59a1-4b67-8880-cff92d591444\"\n                },\n                request: {\n                    url: \"www.bigcommerce.com\",\n                    userAgent: \"PostmanRuntime\"\n                },\n                consent: {\n                    targeting: true,\n                    analytics: true,\n                    functional: true\n                }\n            },\n            productInput: {\n                productEntityId: 88,\n                searchKeyword: \"test\"\n            }\n        }) {\n            executed\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cart Line Item with REST Management API in HTTP\nDESCRIPTION: Shows how to update a cart line item using the REST Management API. This example demonstrates fixing an incorrect or missing text modifier by sending a PUT request to the /v3/carts/{cartId}/items/{itemId} endpoint.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-management.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{store_hash}/v3/carts/{cartId}/items/{itemId}\nX-Auth-Token: {{access_token}}\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"line_items\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 1001,\n      \"option_selections\": [\n        {\n          \"option_id\": 123,\n          \"option_value\": \"Hello!\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Information using GraphQL Mutation\nDESCRIPTION: This mutation shows how to update customer information such as name, email, phone, and company. It also includes optional form fields and error handling for various scenarios.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/customers.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  customer {\n    updateCustomer(\n      reCaptchaV2: { token: \"\" }\n      input: {\n        firstName: \"Jon\"\n        lastName: \"Smith\"\n        email: \"jon@test.com\"\n        phone: \"123-456-7890\"\n        company: \"BC\"\n        formFields: {\n          # optional\n          checkboxes: [{ fieldEntityId: 1, fieldValueEntityIds: [1, 2, 3] }]\n          multipleChoices: [{ fieldEntityId: 1, fieldValueEntityId: 2 }]\n          numbers: [{ fieldEntityId: 1, number: 1.0 }]\n          texts: [{ fieldEntityId: 1, text: \"text\" }]\n          passwords: [{ fieldEntityId: 1, password: \"password\" }]\n        }\n      }\n    ) {\n      customer {\n        firstName\n        lastName\n      }\n      errors {\n        __typename\n        ... on ValidationError {\n          message\n        }\n        ... on CustomerDoesNotExistError {\n          message\n        }\n        ... on EmailAlreadyInUseError {\n          message\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Basic Product Information\nDESCRIPTION: GraphQL query to retrieve basic product information like IDs, SKU, name, and description.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    product (entityId: 111) {\n      id\n      entityId\n      sku\n      path\n      name\n      description\n      addToCartUrl\n      upc\n      mpn\n      gtin  \n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Single Variant Stock Levels with V3 Catalog API\nDESCRIPTION: This JSON payload updates stock levels for a specific product variant by sending a PUT request to the V3 Catalog API variants endpoint. It sets the current inventory level to 100 and the warning level to 10.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"inventory_level\": 100,\n  \"inventory_warning_level\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Checkout Billing Address with Email for Abandoned Cart Recovery\nDESCRIPTION: This HTTP request adds a billing address to a checkout, including an email address which enables abandoned cart saver notifications for guest checkouts. It contains complete contact and address information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/abandoned-carts.mdx#2025-04-16_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/checkouts/{checkoutId}/billing-address\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"first_name\": \"Jane\",\n  \"last_name\": \"Doe\",\n  \"email\": \"jane@example.com\",\n  \"address1\": \"123 Main Street\",\n  \"address2\": \"\",\n  \"city\": \"Austin\",\n  \"state_or_province\": \"Texas\",\n  \"state_or_province_code\": \"TX\",\n  \"country_code\": \"US\",\n  \"postal_code\": \"78751\",\n  \"phone\": \"1234567890\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cart Creation Input Variables\nDESCRIPTION: JSON input variables for creating a cart with a simple product. This specifies adding one unit of product with entity ID 111.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/graphql-storefront.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n  {\n    \"createCartInput\": {\n      \"lineItems\": [\n        {\n          \"quantity\": 1,\n          \"productEntityId\": 111\n        }\n      ]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Editing Transactional Email Template with Handlebars in BigCommerce\nDESCRIPTION: This snippet demonstrates how to use Handlebars expressions to create a dynamic order status email template. It includes localization and iterates through ordered products.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/emails/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n<p>{{ lang 'hello' name=order.customer_name }}. Below are the products you ordered.</p>\n\n{{#each order.products}}\n<tr>\n    <td style=\"padding:5px; font-size:12px; border-bottom:solid 1px #CACACA\"><strong>{{ name }}</strong></td>\n    <td style=\"padding:5px; font-size:12px; border-bottom:solid 1px #CACACA\" width=\"100\" align=\"center\">{{#if sku }}{{ sku }}{{else}}&nbsp;{{/if}}</td>\n    <td style=\"padding:5px; font-size:12px; border-bottom:solid 1px #CACACA\" width=\"100\" align=\"center\">{{ quantity }}</td>\n</tr>\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Images at Different Resolutions with GraphQL\nDESCRIPTION: This GraphQL query retrieves the first image for a specified product at various resolutions (320, 640, 960, and 1280 widths). The output provides the URLs for each resolution, facilitating flexibility in image rendering across different display environments.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    product(entityId: 113) {\n      images (first: 1) {\n        edges {\n          node {\n            url320wide: url(width: 320)\n            url640wide: url(width: 640)\n            url960wide: url(width: 960)\n            url1280wide: url(width: 1280)\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Product Image in BigCommerce API\nDESCRIPTION: This example demonstrates how to add an image to a product using a POST request to the BigCommerce API. It includes options to set the image as a thumbnail and specify a sort order.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products/{{product_id}}/images\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"is_thumbnail\": true,\n  \"sort_order\": 1,\n  \"description\": \"Yellow Large Bath Towel\",\n  \"image_url\": \"{{image_url}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Consignments via REST API\nDESCRIPTION: Example HTTP request demonstrating how to create multiple consignments with shipping addresses and line items. The request includes address details, custom fields, and line item information for two separate consignments.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/consignments.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/checkouts/{checkoutId}/consignments?include=consignments.available_shipping_options\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n  [\n    {\n      \"address\": {\n        \"email\": \"jane2@example.com\",\n        \"country_code\": \"US\",\n        \"first_name\": \"BigCommerce\",\n        \"last_name\": \"Cart/Checkout\",\n        \"address1\": \"123 Main Street\",\n        \"city\": \"Austin\",\n        \"state_or_province\": \"Texas\",\n        \"state_or_province_code\": \"TX\",\n        \"postal_code\": \"78751\",\n        \"phone\": \"688546\",\n        \"custom_fields\": [\n          {\n            \"field_id\": \"field_25\",\n            \"field_value\": \"Great!\"\n          }\n        ]\n      },\n      \"line_items\": [\n        {\n          \"item_id\": \"00a8e1c3-996f-4786-96ca-2a8a887b6648\",\n          \"quantity\": 1\n        }\n      ]\n    },\n    {\n      \"address\": {\n        \"email\": \"testing@example.com\",\n        \"country_code\": \"US\",\n        \"first_name\": \"Testing\",\n        \"last_name\": \"BigCommerce\",\n        \"company\": \"BigCommerce\",\n        \"address1\": \"111 Main Street\",\n        \"address2\": \"#1324\",\n        \"city\": \"Austin\",\n        \"state_or_province\": \"Texas\",\n        \"state_or_province_code\": \"TX\",\n        \"postal_code\": \"78751\",\n        \"phone\": \"+5185158x1{1-5}\",\n        \"custom_fields\": [\n          {\n            \"field_id\": \"field_25\",\n            \"field_value\": \"You're Welcome\"\n          }\n        ]\n      },\n      \"line_items\": [\n        {\n          \"item_id\": \"00a8e1c3-996f-4786-96ca-2a8a887b6648\",\n          \"quantity\": 1\n        }\n      ]\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Querying GraphQL Storefront API with JWT Authentication\nDESCRIPTION: JavaScript function demonstrating how to make a GraphQL Storefront API query using JWT authentication in the Authorization header.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst gqlStorefrontQuery = (token, gqlQueryString) => {\n  // example token is \"BigCommerceProvidedJwt.dotDelimited.threePartString\"\n  let authHeader = `Bearer ${token}`; // there's a space between \"Bearer\" and the token\n  let requestBody = {\n    query: gqlQueryString\n  };\n  return fetch('/graphql', {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': authHeader\n    },\n    body: JSON.stringify(requestBody)\n  })\n  .then(response => response.json())\n  .then(result => {\n    console.log(result); // GraphQL query response\n    // do stuff...\n  })\n  .catch(error => console.error(error));\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Routes with GraphQL in BigCommerce\nDESCRIPTION: GraphQL query to fetch page information using URL paths. Supports multiple page types including web pages, contact forms, blog index pages, and blog posts with type-specific field selections.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/site-content.mdx#2025-04-16_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    route(path: \"/blogs/\") {\n      node {\n        id\n        \n        # Fields that return for plain-text pages, contact forms, and raw HTML pages\n        ... on WebPage {\n          entityId\n          parentEntityId\n          name\n          isVisibleInNavigation\n          seo {\n            metaKeywords\n            metaDescription\n          }\n        }\n\n        # Fields that return for plain-text pages \n        ... on NormalPage {\n          path\n          plainTextSummary (characterLimit: 100)\n        }\n\n        # Fields that return for contact forms\n        ... on ContactPage {\n          path\n          plainTextSummary (characterLimit: 100)\n          contactFields\n        }\n\n        # Fields that return for raw HTML pages\n        ... on RawHtmlPage {\n          path\n          htmlBody\n        }\n\n        # Fields that return for main blog index page\n        ... on Blog {\n          name\n          description\n          path\n          isVisibleInNavigation\n          posts {\n            edges {\n              node {\n                name\n                tags\n              }\n            }\n          }\n        }\n\n        # Fields that return for blog posts\n        ... on BlogPost {\n          name\n          tags\n        }\n      }\n    }\n  } \n}\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Address using GraphQL Mutation\nDESCRIPTION: This mutation allows customers to update an existing address in their address book. It requires the address ID and updated address information including contact details and optional form fields.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/customers.mdx#2025-04-16_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  customer {\n    updateCustomerAddress(\n    reCaptchaV2: { token: \"\" },\n    input: {\n        addressEntityId: 1,\n        data: {\n        firstName: \"Jon\",\n        lastName: \"Smith\",\n        address1: \"1234 Fake Street\",\n        address2: \"\",\n        city: \"Austin\",\n        company: \"BC\",\n        countryCode: \"US\",\n        stateOrProvince: \"TX\",\n        phone: \"123-456-7890\",\n        postalCode: \"78610\",\n        formFields: {\n            checkboxes: [\n            {\n                fieldEntityId: 1,\n                fieldValueEntityIds: [1,2,3]\n            }\n            ],\n            multipleChoices: [\n            {\n                fieldEntityId: 1,\n                fieldValueEntityId: 2\n            }\n            ],\n            numbers: [\n            {\n                fieldEntityId: 1,\n                number: 1.0\n            }\n            ],\n            texts: [\n            {\n                fieldEntityId: 1,\n                text: \"text\"\n            }\n            ],\n            passwords: [\n            {\n                fieldEntityId: 1,\n                password: \"password\"\n            }\n            ],\n        } \n        }\n    }\n    ) {\n    errors {\n        __typename\n        ... on ValidationError {\n        message\n        }\n        ... on CustomerNotLoggedInError {\n        message\n        }\n        ... on AddressDoesNotExistError {\n        message\n        }\n        ... on CustomerAddressUpdateError {\n        message\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Rendered Regions with GraphQL\nDESCRIPTION: GraphQL query to retrieve rendered regions and HTML content for normal pages, allowing developers to inspect widget placements and content on storefront pages\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/site-content.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    content {\n      pages (filters: {pageType: NORMAL}) {\n        edges {\n          node {\n            ... on NormalPage {\n              path\n              renderedRegions {\n                regions {\n                  name\n                  html\n                }\n              }\n            }\n          }\n        }\n      }\n    } \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Product Hooks in TypeScript\nDESCRIPTION: Custom React hooks for managing product data state and fetching, including loading states and error handling using SWR.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useProducts() {\n    const encodedContext = useSession()?.context;\n    const { data, error } = useSWR(encodedContext ? ['/api/products', encodedContext] : null, fetcher);\n\n    return {\n        summary: data,\n        isLoading: !data && !error,\n        isError: error,\n    };\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useProductList() {\n    const encodedContext = useSession()?.context;\n    const { data, error, mutate: mutateList } = useSWR(encodedContext ? ['/api/products/list', encodedContext] : null, fetcher);\n\n    return {\n        list: data,\n        isLoading: !data && !error,\n        isError: error,\n        mutateList,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Checkout Details with Fetch API in JavaScript\nDESCRIPTION: Demonstrates how to fetch and log checkout details using the Fetch API. This snippet first retrieves the cart ID, then uses it to fetch checkout information from the /api/storefront/checkouts endpoint.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-management.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('Log Checkout');\nfetch('/api/storefront/carts', {\n  credentials: 'include'\n}).then(function (response) {\n  return response.json();\n}).then(function (cartJson) {\n  console.log(cartJson);\n  return cartJson[0].id;\n}).catch(function (error) {\n  console.log(error);\n}).then(function (cartId) {\n  return fetch('/api/storefront/checkouts/' + cartId, {\n    credentials: 'include'\n  })\n}).then(function (response) {\n  return response.json();\n}).then(function (checkoutJson) {\n  console.log(checkoutJson);\n}).catch(function (error) {\n  console.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Stencil Utils as ES6 Module in JavaScript\nDESCRIPTION: Instructions for installing Stencil Utils via npm and importing it as an ES6 module in a JavaScript project.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @bigcommerce/stencil-utils\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport utils from 'bigcommerce/stencil-utils';\n```\n\n----------------------------------------\n\nTITLE: Implementing Cart Item Added Hook in JavaScript\nDESCRIPTION: This function demonstrates how to set up an event listener for items added to the shopping cart. It uses the 'data-cart-item-add' data tag and emits a 'cart-item-add' event.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/events.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nitemAdd() {\n    this.$body.on('submit', '[data-cart-item-add]', (event) => {\n        this.emit('cart-item-add', event, event.target);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CatalogProductOptionValue Interface in GraphQL\nDESCRIPTION: The interface for product option values, specifically for multiple choice options. It defines common fields that all option value types implement, including entity ID, label, and default status.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\n# Fields common among multiple choice values\n\ninterface CatalogProductOptionValue {\n  entityId: Int!\n  label: String!\n  isDefault: Boolean!`\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with IGNORE Redirect Behavior\nDESCRIPTION: This GraphQL query demonstrates using the IGNORE redirect behavior (default) when querying a route. With this setting, redirects are ignored and prioritize direct entity lookups via custom URLs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/routes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n     route(path: \"/mug\" redirectBehavior: IGNORE) {\n       redirect {__typename to {__typename ...on ProductRedirect{entityId path}} toUrl} \n       node {\n         id\n         ... on Product {\n           name\n           }\n          }\n         }\n       }\n     }\n```\n\n----------------------------------------\n\nTITLE: Requesting Tax Estimates with Product Tax Properties\nDESCRIPTION: An HTTP POST request to a tax provider's estimate endpoint that includes product tax properties. This example shows how BigCommerce sends tax properties for items in a consignment when requesting tax estimates from external providers.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/tax-properties.mdx#2025-04-16_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST https://store.example.com/estimate\nAuthorization: Basic ZGVtbzpwQDU1dzByZA==\nContent-Type: application/json\nAccept: application/json\n\n{\n  ...\n  \"items\": [\n    {\n      \"id\": \"1\",\n      \"price\": {\n        \"amount\": 10.0,\n        \"tax_inclusive\": false\n      },\n      \"quantity\": 1,\n      \"tax_class\": {\n        \"code\": \"custom-tax\",\n        \"class_id\": \"1\",\n        \"name\": \"Custom Tax\"\n      },\n      \"tax_properties\": [\n        {\n          \"code\": \"alcohol-percentage\",\n          \"value\": \"4.9\"\n        },\n        {\n          \"code\": \"netvolume-milliliters\",\n          \"value\": \"400\"\n        }\n      ],\n      \"type\": \"item\",\n      \"wrapping\": null\n    }\n  ]\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Calling the addCartItem() Function to Add an Item to a Cart\nDESCRIPTION: Example of how to call the addCartItem() function to add a new line item to an existing cart. Replace the cartId and productId with actual values from your store.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\naddCartItem(`/api/storefront/carts/`, `d4e978c2-bdcf-41b0-a49b-fecf4f5223c1`, {\n  \"lineItems\": [\n    {\n      \"quantity\": 1,\n      \"productId\": 97\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Set Product Image Information GraphQL Mutation\nDESCRIPTION: GraphQL mutation to update product image properties both globally and for specific channel locales. Allows setting properties like sort order, alt text, and thumbnail status for images at both global and channel-specific levels.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-images.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($input: UpdateProductImagePropertiesInput!) {\n  product {\n    updateProductImageProperties(input: $input) {\n      images {\n        edges {\n          node {\n            id         \n            altText  \n            isThumbnail  \n            sortOrder  \n            urlStandard \n            urlZoom\n            addedToProduct    \n            overrides( context: {channelId: \"bc/store/channel/1\", locale: \"en\"}) {\n              edges {\n                node {\n                  ... on ProductImagesOverridesForChannelLocale {\n                    context {\n                      channelId\n                      locale\n                    }\n                    sortOrder\n                    altText\n                    isThumbnail\n                    addedToProduct\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"data\": [\n      {\n        \"imageId\": \"bc/store/productImage/371\",\n        \"sortOrder\": 2, \n        \"altText\": \"Global alt text\", \n        \"isThumbnail\": true, \n        \"overrides\": [\n          {\n            \"channelLocaleOverrides\": {\n              \"context\": {\n                \"channelId\": \"bc/store/channel/1\", \n                \"locale\": \"en\"\n              },\n              \"data\": {\n                \"sortOrder\": 1, \n                \"altText\": \"Channel-specific alt text\",\n                \"isThumbnail\": true \n              }\n            }\n          }\n        ]\n      },\n      {\n        \"imageId\": \"bc/store/productImage/372\", \n        \"sortOrder\": 1, \n        \"altText\": \"Global alt text\",\n        \"isThumbnail\": false\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Cart Details\nDESCRIPTION: Makes a GET request to retrieve detailed cart information using the cart ID\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/abandoned-carts.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/carts/{cartId}\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Implementing Products API Endpoint in TypeScript\nDESCRIPTION: Creates a products endpoint that interfaces with BigCommerce's Catalog API to retrieve product summaries.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { bigcommerceClient, getSession } from '../../../lib/auth';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function products(req: NextApiRequest, res: NextApiResponse) {\n    try {\n        // First, retrieve the session by calling:\n        const { accessToken, storeHash } = await getSession(req);\n        // Then, connect the Node API client (to make API calls to BigCommerce)\n        const bigcommerce = bigcommerceClient(accessToken, storeHash);\n        // For this example, we'll be connecting to the Catalog API\n        const { data } = await bigcommerce.get('/catalog/summary');\n        res.status(200).json(data);\n        // Finally, handle errors\n    } catch (error) {\n        const { message, response } = error;\n        res.status(response?.status || 500).json({ message });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Cart using BigCommerce Cart API\nDESCRIPTION: This snippet demonstrates how to add items to a cart using the BigCommerce Cart API. It shows the HTTP POST request structure for adding line items to a specific cart.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/guide/add-to-cart.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://{store_domain}/api/storefront/carts/{cartId}/items\nContent-Type: application/json\nAccept: application/json\n\n{\n  ...\n\n  \"lineItems\": [\n    {\n      \"quantity\": 1,\n      \"productId\": 5,\n      \"variantId\": 55\n    }\n  ]\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Price Lists via HTTP GET Request\nDESCRIPTION: Shows how to make an HTTP GET request to retrieve all price lists, including necessary headers and authentication.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/pricing/price-lists.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{store_hash}}/v3/pricelists\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\nContent-Type: application/json\n\n{}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cart with Variant ID in BigCommerce REST Management API\nDESCRIPTION: When products have options, a variant ID is required in the cart creation request. Use the Get Products or Get Variants endpoints to retrieve the correct variant_id for the desired product configuration.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-management.mdx#2025-04-16_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{store_hash}/v3/carts\nX-Auth-Token: {{access_token}}\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"line_items\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 1001,\n      \"variant_id\": 2331\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Query Account Users Using GraphQL\nDESCRIPTION: GraphQL query to retrieve a list of users associated with an account, including their IDs, email addresses, and names. Supports cursor-based pagination.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/graphql-account/users.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  account {\n    id\n    users {\n      edges {\n        node {\n          id\n          email\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"account\": {\n      \"id\": \"bc/account/account/{account_uuid}\",\n      \"users\": {\n        \"edges\": [\n          {\n            \"node\": {\n              \"id\": \"bc/account/user/{user_id}\",\n              \"email\": \"jane.doe@example.com\",\n              \"firstName\": \"Jane\",\n              \"lastName\": \"Doe\"\n            }\n          },\n          {\n            \"node\": {\n              \"id\": \"bc/account/user/{user_id}\",\n              \"email\": \"jane.doe@example.com\",\n              \"firstName\": \"Jane\",\n              \"lastName\": \"Doe\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Access Token\nDESCRIPTION: Generate a payment access token (PAT) required for processing payments. The request includes the order ID and returns a token used in subsequent payment processing calls.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/orders.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{store_hash}/v3/payments/access_tokens\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"order\": {\n    \"id\": 125,\n    \"is_recurring\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Product SEO Information with GraphQL in BigCommerce\nDESCRIPTION: This GraphQL mutation sets global product SEO information for the store, including page title and meta description. It requires the product ID and SEO data as input.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-seo-info.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\nmutation (\n  $input: SetProductSeoInformationInput!\n) {\n  product {\n    setProductSeoInformation(input: $input) {\n      product {\n        id\n        seoInformation {\n          pageTitle\n          metaDescription\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"data\": {\n      \"pageTitle\": \"Global page title\",\n      \"metaDescription\": \"Global meta description\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Variant Images with GraphQL in BigCommerce\nDESCRIPTION: This GraphQL query retrieves the default image for a specific product variant. It includes fields for the image URL, original URL, alt text, and whether it's the default image.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/variants.mdx#2025-04-16_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    product (entityId: 113) {\n      variants (entityIds: [127]) {\n        edges {\n          node {\n            defaultImage {\n              url (width: 1)\n              urlOriginal\n              altText\n              isDefault\n            } \n          }\n        }\n      }  \n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating POST Request with X-Auth-Token Header\nDESCRIPTION: Example of how to authenticate a POST request to BigCommerce API using the X-Auth-Token header with an access token and including a request body.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v... # endpoint\nX-Auth-Token: {{access_token}}\nAccept: application/json\nContent-Type: application/json\n\n{\n  // request body\n}\n```\n\n----------------------------------------\n\nTITLE: Creating BigCommerce Webhook\nDESCRIPTION: HTTP request to create a webhook subscription for product updates in BigCommerce.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/tutorial.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/hooks\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\nContent-Type: application/json\n\n{\n \"scope\": \"store/product/updated\",\n \"destination\": \"https://6a35e97b.ngrok.io/webhooks\",\n \"is_active\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Billing Address to Checkout in BigCommerce API\nDESCRIPTION: This request adds a billing address to a cart to transform it into a checkout. It requires a checkoutId (same as cart_id) and sends customer billing information in the request body.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/rest-management.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/checkouts/{{checkoutId}}/billing-address\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n{\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\",\n  \"email\": \"Test.User@email.com\",\n  \"company\": \"BigCommerce\",\n  \"address1\": \"555 Main Street\",\n  \"address2\": \"\",\n  \"city\": \"Austin\",\n  \"state_or_province\": \"TX\",\n  \"state_or_province_code\": \"TX\",\n  \"country_code\": \"US\",\n  \"postal_code\": \"78701\",\n  \"phone\": \"555-555-5555\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Session Sync JWT with Parameters in GraphQL\nDESCRIPTION: A GraphQL mutation for generating a session sync JWT token with various parameters. This mutation accepts redirectTo (required), cartId, visitorId, and ipAddress parameters to sync session details across different contexts.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n# Low-level session sync JWT generation\n# Returns JUST a JWT, *not* a URL\n# Can \"sync\" any arbitrary combination of parameters\n# e.g., just sync analytics ID, just sync customer ID, just sync analytics + customer, etc\n# Designed to be used omni-directionally\n# e.g., headless -> stencil, stencil-> headless, headless->headless, stencil->stencil\n\nmutation GenerateSessionSyncJwt ($redirectTo: String!,$cartId: String,$visitorId: String,$ipAddress: IpAddress){\n   generateSessionSyncJwt(redirectTo:$redirectTo,cartId: $cartId, visitorId: $visitorId, ipAddress: $ipAddress){\n      result { \n        token\n        url\n        }\n     }\n  }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tax Rates via BigCommerce API\nDESCRIPTION: Retrieves tax rates by sending a GET request. Can filter rates by tax zone IDs using query parameters. Returns matching tax rate details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/tax-rates-zones.mdx#2025-04-16_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/tax/rates?tax_zone_id:in=2\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"class_rates\": [\n        {\n          \"rate\": 10,\n          \"tax_class_id\": 0\n        },\n        {\n          \"rate\": 5,\n          \"tax_class_id\": 1\n        }\n      ],\n      \"enabled\": false,\n      \"id\": 3,\n      \"name\": \"Excise Tax\",\n      \"priority\": 2,\n      \"tax_zone_id\": 4\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Inventory Settings for Products in BigCommerce API\nDESCRIPTION: This snippet demonstrates how to update inventory settings for a product at a specific location using the BigCommerce API. It sets the safety stock and warning level for a product.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/locations/{location_id}/items\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"settings\": [\n    {\n      \"identity\": {\n        \"product_id\": 111\n      },\n      \"safety_stock\": 2,\n      \"warning_level\": 5\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response from Adding a Cart Item\nDESCRIPTION: Sample JSON response returned after successfully adding a new item to an existing cart. It includes updated details about the cart and all line items.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"d4e978c2-bdcf-41b0-a49b-fecf4f5223c1\",\n  \"customerId\": 0,\n  \"email\": \"\",\n  \"currency\": {\n    \"name\": \"US Dollars\",\n    \"code\": \"USD\",\n    \"symbol\": \"$\",\n    \"decimalPlaces\": 2\n  },\n  \"isTaxIncluded\": false,\n  \"baseAmount\": 394.45,\n  \"discountAmount\": 0,\n  \"cartAmount\": 394.45,\n  \"coupons\": [],\n  \"discounts\": [\n    ...\n  ],\n  \"lineItems\": {\n    \"physicalItems\": [\n      {\n        \"id\": \"57a877e0-d898-47d0-910d-88656e8dee0c\",\n        \"parentId\": null,\n        \"variantId\": 66,\n        \"productId\": 86,\n        \"sku\": \"ABS\",\n        \"name\": \"[Sample] Able Brewing System\",\n        \"url\": \"https://{store_url}/able-brewing-system/\",\n        \"quantity\": 1,\n          ...\n        \"extendedSalePrice\": 225,\n        \"isShippingRequired\": true,\n        \"type\": \"physical\",\n        \"giftWrapping\": null\n      },\n      {\n        \"id\": \"22c461a2-eff9-4b72-8d22-7c2792ce2c2d\",\n        \"parentId\": null,\n        \"variantId\": 67,\n        \"productId\": 88,\n        \"sku\": \"CC3C\",\n        \"name\": \"[Sample] Chemex Coffeemaker 3 Cup\",\n        \"url\": \"https://{store_url}/chemex-coffeemaker-3-cup/\",\n        \"quantity\": 1,\n          ...\n        \"extendedSalePrice\": 49.5,\n        \"isShippingRequired\": true,\n        \"type\": \"physical\",\n        \"giftWrapping\": null\n      },\n      {\n        \"id\": \"3f8dd1ed-f917-41be-b7f7-20c10f406e09\",\n        \"parentId\": null,\n        \"variantId\": 69,\n        \"productId\": 97,\n        \"sku\": \"TWB\",\n        \"name\": \"[Sample] Tiered Wire Basket\",\n        \"url\": \"https://{store_url}/tiered-wire-basket/\",\n        \"quantity\": 1,\n          ...\n        \"extendedSalePrice\": 119.95,\n        \"isShippingRequired\": true,\n        \"type\": \"physical\",\n        \"giftWrapping\": null\n      }\n    ],\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Complete _app.tsx implementation with BigDesign components\nDESCRIPTION: Shows the full implementation of the _app.tsx file with BigDesign's Box and GlobalStyles components, Header component, and SessionProvider to create the app's layout structure.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyApp = ({ Component, pageProps }: AppProps) => (\n    <>\n        <GlobalStyles />\n        <Box marginHorizontal=\"xxxLarge\" marginVertical=\"xxLarge\">\n            <Header />\n            <SessionProvider>\n                <Component {...pageProps} />\n            </SessionProvider>\n        </Box>\n    <>\n);\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Querying Checkout Details - GraphQL\nDESCRIPTION: This GraphQL query fetches the details of a checkout by its entity ID. It retrieves billing addresses, shipping consignments, order information, costs, and additional details such as applied coupons and promotions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/graphql-storefront.mdx#2025-04-16_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nGET https://store.example.com/graphql\nAuthorization: Bearer {{STOREFRONT_TOKEN}}\nX-Bc-Customer-Access-Token: {{CUSTOMER_ACCESS_TOKEN}}\n\nquery getCheckout($entityId: Int) {\n  site {\n    checkout(entityId: $entityId) {\n      entityId\n      billingAddress {\n        ...CheckoutBillingAddressFields\n      }\n      shippingConsignments {\n        ...CheckoutShippingConsignmentFields\n      }\n      order {\n        entityId\n      }\n      shippingCostTotal {\n        ...MoneyFields\n      }\n      giftWrappingCostTotal {\n        ...MoneyFields\n      }\n      handlingCostTotal {\n        ...MoneyFields\n      }\n      taxTotal {\n        ...MoneyFields\n      }\n      taxes {\n        ...CheckoutTaxFields\n      }\n      subtotal {\n        ...MoneyFields\n      }\n      grandTotal {\n        ...MoneyFields\n      }\n      createdAt {\n        utc\n      }\n      updatedAt {\n        utc\n      }\n      customerMessage\n      outstandingBalance {\n        ...MoneyFields\n      }\n      coupons {\n        ...CheckoutCouponFields\n      }\n      promotions {\n        ...CheckoutPromotionFields\n      }\n    }\n  }\n}\n\nfragment CheckoutConsignmentAddressFields on CheckoutConsignmentAddress {\n  ...CheckoutAddressFields\n}\n\nfragment CheckoutBillingAddressFields on CheckoutBillingAddress {\n  entityId\n  ...CheckoutAddressFields\n}\n\nfragment CheckoutAddressFields on CheckoutAddress {\n  firstName\n  lastName\n  email\n  company\n  address1\n  address2\n  city\n  stateOrProvince\n  stateOrProvinceCode\n  countryCode\n  postalCode\n  phone\n  customFields {\n    entityId\n    ... on CheckoutAddressCheckboxesCustomField {\n      valueEntityIds\n    }\n    ... on CheckoutAddressDateCustomField {\n      date {\n        utc\n      }\n    }\n    ... on CheckoutAddressMultipleChoiceCustomField {\n      valueEntityId\n    }\n    ... on CheckoutAddressNumberCustomField {\n      number\n    }\n    ... on CheckoutAddressPasswordCustomField {\n      password\n    }\n    ... on CheckoutAddressTextFieldCustomField {\n      text\n    }\n  }\n}\n\nfragment CheckoutShippingConsignmentFields on CheckoutShippingConsignment {\n  entityId\n  address {\n    ...CheckoutConsignmentAddressFields\n  }\n  availableShippingOptions {\n    ...CheckoutAvailableShippingOptionFields\n  }\n  selectedShippingOption {\n    ...CheckoutSelectedShippingOptionFields\n  }\n  coupons {\n    ...CheckoutCouponFields\n  }\n  shippingCost {\n    ...MoneyFields\n  }\n  handlingCost {\n    ...MoneyFields\n  }\n  lineItemIds\n}\n\nfragment CheckoutAvailableShippingOptionFields on CheckoutAvailableShippingOption {\n  entityId\n  description\n  type\n  imageUrl\n  cost {\n    ...MoneyFields\n  }\n  transitTime\n  isRecommended\n}\n\nfragment CheckoutSelectedShippingOptionFields on CheckoutSelectedShippingOption {\n  entityId\n  description\n  type\n  imageUrl\n  cost {\n    ...MoneyFields\n  }\n  transitTime\n}\n\nfragment MoneyFields on Money {\n  value\n  currencyCode\n}\n\nfragment CheckoutCouponFields on CheckoutCoupon {\n  entityId\n  code\n  couponType\n  discountedAmount {\n    ...MoneyFields\n  }\n}\n\nfragment CheckoutTaxFields on CheckoutTax {\n  name\n  amount {\n    ...MoneyFields\n  }\n}\n\nfragment CheckoutPromotionFields on CheckoutPromotion {\n  banners {\n    entityId\n    type\n    locations\n    text\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding SRI Hash to Custom Checkout Script Tag (HTML)\nDESCRIPTION: This HTML snippet shows how to add the generated SRI hash to the script tag for the custom checkout. The 'integrity' attribute contains the hash, ensuring the script's integrity when loaded.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/open-checkouts/pci-compliance-guide.mdx#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"http://127.0.0.1:8080/autoloader.js\" integrity=\"sha256-UBTNJgpQN2JFDVDfkWo2E8YjORLhYFMs3J8OJEfXbeg\" crossorigin=\"anonymous\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Logging Cart Details with Fetch API in JavaScript\nDESCRIPTION: Uses the Fetch API to retrieve and log cart details to the console. This snippet demonstrates how to make a GET request to the /api/storefront/carts endpoint and handle the response.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-management.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('Log Cart');\nfetch('/api/storefront/carts', {\n  credentials: 'include'\n}).then(function(response) {\n  return response.json();\n}).then(function(myJson) {\n  console.log(myJson);\n}).catch(function (error) {\n  console.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Modals with Aria-Label for Accessibility\nDESCRIPTION: This HTML snippet creates a popup modal with an aria-label attribute for improved accessibility. The `aria-label` attribute provides text to assistive technologies when `alt` text may not be present. The code formats a modal and includes an element with an `aria-label`, ensuring compliance with WCAG guidelines.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/accessibility/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"elementID\" class=\"modal modal--large\" data-reveal>\n    <a href=\"#\" class=\"modal-close\" aria-label=\"Popup text\" role=\"button\">\n        <span aria-hidden=\"true\">&#215;</span>\n    </a>\n    <div class=\"modal-content\"></div>\n    <div class=\"loadingOverlay\"></div>\n</div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<!--open custom modal-->\n       <div class=\"modal-button-container\">\n                <a class=\"button\" href=\"#elementID\" data-reveal-id=\"elementID\">Descriptive text</a>\n        </div>\n```\n\n----------------------------------------\n\nTITLE: Querying Subscriptions with GraphQL\nDESCRIPTION: GraphQL query to retrieve subscription details including pagination info, account details, billing information, product data, and subscription status. This query returns a paginated list of subscriptions with a default of 10 items per page.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  account {\n    subscriptions {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          accountId\n          activationDate\n          pricePerInterval {\n            value\n            currencyCode\n          }\n          billingInterval\n          status\n          scope {\n            type\n            id\n          }\n          product {\n            productLevel\n            id\n            type\n          }\n          createdAt\n          currentPeriodEnd\n          updatedAt\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Base Pagination Query with Complete PageInfo in GraphQL\nDESCRIPTION: This query serves as a base query for bi-directional pagination, retrieving the first 50 products with complete pagination metadata. It includes both forward and backward pagination indicators (hasNextPage and hasPreviousPage).\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/index.mdx#2025-04-16_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\n query {\n  site {\n    products(first: 50) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        cursor\n        node {\n          entityId\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Consignment Helper Function in JavaScript\nDESCRIPTION: This function sends a POST request to create a new consignment in a BigCommerce checkout. It includes the cart ID and consignment data in the request, and returns available shipping options for the address.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createConsignment(url, cartId, data) {\n  return fetch(url + cartId + `/consignments?include=consignments.availableShippingOptions`,   {\n    method: \"POST\",\n    credentials: \"same-origin\",\n    headers: {\n      \"Content-Type\": \"application/json\" ,\n    },\n    body: JSON.stringify(data),\n  })\n  .then(response => response.json())\n  .catch(error => console.error(error));\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Cart Module in JavaScript for BigCommerce Stencil Theme\nDESCRIPTION: This snippet shows the structure of the Cart class in cart.js, including imports, initialization, and a cartUpdate method. It demonstrates how to handle quantity updates and display error messages.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/javascript/extend.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport PageManager from './page-manager';\nimport _ from 'lodash';\nimport giftCertCheck from './common/gift-certificate-validator';\nimport utils from '@bigcommerce/stencil-utils';\nimport ShippingEstimator from './cart/shipping-estimator';\nimport { defaultModal } from './global/modal';\nimport swal from './global/sweet-alert';\n\nexport default class Cart extends PageManager {\n    onReady() {\n        this.$cartContent = $('[data-cart-content]');\n        this.$cartMessages = $('[data-cart-status]');\n        this.$cartTotals = $('[data-cart-totals]');\n        this.$overlay = $('[data-cart] .loadingOverlay')\n            .hide(); // TODO: temporary until roper pulls in his cart components\n\n        this.bindEvents();\n    }\n\n    cartUpdate($target) {\n        const itemId = $target.data('cartItemid');\n        const $el = $(`#qty-${itemId}`);\n        const oldQty = parseInt($el.val(), 10);\n        const maxQty = parseInt($el.data('quantityMax'), 10);\n        const minQty = parseInt($el.data('quantityMin'), 10);\n        const minError = $el.data('quantityMinError');\n        const maxError = $el.data('quantityMaxError');\n        const newQty = $target.data('action') === 'inc' ? oldQty + 1 : oldQty - 1;\n        // Does not quality for min/max quantity\n        if (newQty < minQty) {\n            return swal({\n                text: minError,\n                type: 'error',\n            });\n        } else if (maxQty > 0 && newQty > maxQty) {\n            return swal({\n                text: maxError,\n                type: 'error',\n            });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customer Logout Mutation\nDESCRIPTION: GraphQL mutation to log out a customer and invalidate their session.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/graphql-storefront.mdx#2025-04-16_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nmutation Logout {\n  logout {\n    result\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Consignment Update Function in JavaScript for BigCommerce Checkouts\nDESCRIPTION: This function makes a PUT request to the BigCommerce API to update a consignment with shipping option details. It accepts URL, cart ID, consignment ID, and data parameters, then returns a Promise with the JSON response.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updateConsignment(url, cartId, consignmentId, data,) {\n  return fetch(url + cartId + `/consignments/` + consignmentId,   {\n    method: \"PUT\",\n    credentials: \"same-origin\",\n    headers: {\n      \"Content-Type\": \"application/json;\",\n    },\n    body: JSON.stringify(data),\n  })\n  .then(response => response.json())\n  .catch(error => console.error(error));\n};\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Sorted Products Query\nDESCRIPTION: This JSON response shows the data structure returned when querying products with a search term and sorting alphabetically. It demonstrates how products are returned in alphabetical order based on their names.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/products/faceted-textual-search.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"search\": {\n        \"searchProducts\": {\n          \"products\": {\n            \"edges\": [\n              {\n                \"node\": {\n                  \"entityId\": 93,\n                  \"name\": \"[Sample] 1 L Le Parfait Jar\",\n                  \"prices\": {\n                    \"price\": {\n                      \"value\": 7\n                    }\n                  }\n                }\n              },\n              {\n                \"node\": {\n                  \"entityId\": 86,\n                  \"name\": \"[Sample] Able Brewing System\",\n                  \"prices\": {\n                    \"price\": {\n                      \"value\": 225\n                    }\n                  }\n                }\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Variant by Option Values\nDESCRIPTION: GraphQL query to retrieve variants using option value entity IDs. Demonstrates both single and multiple variant retrieval with option values.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/variants.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    product (entityId: 113) {       \n      variants (optionValueIds: [{optionEntityId: 116, valueEntityId: 108} {optionEntityId: 126, valueEntityId: 129}]) {\n        edges {\n          node {\n            # fields on the Variant object type\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Products via API in Next.js\nDESCRIPTION: Handles a PUT request to update product details using BigCommerce's API. Uses authentication data from 'getSession' to access BigCommerce and allows updating product data dynamically. Expects 'pid' as query parameter and product details in the body, returns updated product data or error message.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function products(req: NextApiRequest, res: NextApiResponse) {\n    const {\n        body,\n        query: { pid },\n    } = req;\n\n    try {\n        const { accessToken, storeHash } = await getSession(req);\n        const bigcommerce = bigcommerceClient(accessToken, storeHash);\n\n        const { data } = await bigcommerce.put(`/catalog/products/${pid}`, body);\n        res.status(200).json(data);\n    } catch (error) {\n        const { message, response } = error;\n        res.status(response?.status || 500).json({ message });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Homepage Component\nDESCRIPTION: Creates the main homepage component that displays product summary information using BigDesign components.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Box, Flex, Panel, Text } from '@bigcommerce/big-design';\nimport { useProducts } from '../lib/hooks';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst Index = () => {\n    const { summary } = useProducts();\n\n    return (\n        <Panel header=\"Homepage\">\n            {summary &&\n                <Flex>\n                    <Box marginRight=\"xLarge\">\n                        <Text>Inventory Count</Text>\n                        <Text>{summary.inventory_count}</Text>\n                    </Box>\n                    <Box marginRight=\"xLarge\">\n                        <Text>Variant Count</Text>\n                        <Text>{summary.variant_count}</Text>\n                    </Box>\n                    <Box>\n                        <Text>Primary Category</Text>\n                        <Text>{summary.primary_category_name}</Text>\n                    </Box>\n                </Flex>\n            }\n        </Panel>\n    );\n};\n\nexport default Index;\n```\n\n----------------------------------------\n\nTITLE: Converting Newlines to Break Tags - JavaScript\nDESCRIPTION: Replaces newline characters in a string with HTML <br> tags for proper formatting in HTML.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction nl2br(str) { return str.replace(/\\n/g, '<br>'); }\n```\n\n----------------------------------------\n\nTITLE: Querying Variant Prices and Dimensions\nDESCRIPTION: Detailed GraphQL query using fragments to retrieve pricing and dimensional information for variants, along with the expected JSON response.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/variants.mdx#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    product (entityId: 113) {\n      variants (entityIds: [98]) {\n        edges {\n          node {\n            prices {\n              price {\n                ...PriceFields\n              }\n              salePrice {\n                ...PriceFields\n              }\n              basePrice {\n                ...PriceFields\n              }\n              retailPrice {\n                ...PriceFields\n              }\n            }\n            width {\n              ...DimensionFields\n            }\n            height {\n              ...DimensionFields\n            }\n            depth {\n              ...DimensionFields\n            }\n            weight {\n              ...DimensionFields\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment PriceFields on Money {               \n  value\n  currencyCode\n}\n\nfragment DimensionFields on Measurement {     \n  value\n  unit\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"product\": {\n        \"variants\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"prices\": {\n                  \"price\": {\n                    \"value\": 4.5,\n                    \"currencyCode\": \"USD\"\n                  },\n                  \"salePrice\": {\n                    \"value\": 5,\n                    \"currencyCode\": \"USD\"\n                  },\n                  \"basePrice\": {\n                    \"value\": 10,\n                    \"currencyCode\": \"USD\"\n                  },\n                  \"retailPrice\": {\n                    \"value\": 20,\n                    \"currencyCode\": \"USD\"\n                  }\n                },\n                \"width\": {\n                  \"value\": 2,\n                  \"unit\": \"in\"\n                },\n                \"height\": {\n                  \"value\": 2,\n                  \"unit\": \"in\"\n                },\n                \"depth\": {\n                  \"value\": 2,\n                  \"unit\": \"in\"\n                },\n                \"weight\": {\n                  \"value\": 37,\n                  \"unit\": \"oz\"\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Location Settings via BigCommerce REST API\nDESCRIPTION: HTTP PUT request to enable and set visibility for a location through the BigCommerce REST Management API. This request updates location settings to make them accessible via the GraphQL Storefront API.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/locations/settings.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/locations\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"id\": 2,\n    \"enabled\": true,\n    \"storefront_visibility\": true\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Widget using BigCommerce Widgets API\nDESCRIPTION: This HTTP POST request creates a new widget based on a previously created widget template. It requires the widget template UUID and sets the widget configuration.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/versioning.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /stores/{{STORE_HASH}}/v3/content/widgets\nHost: api.bigcommerce.com\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"name\": \"Version 1 Widget\",\n  \"widget_configuration\": {\n    \"textContent\": \"Hello, World!\"\n  },\n  \"widget_template_uuid\": \"{your-widget-template-uuid}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkout with GraphQL Mutation\nDESCRIPTION: This mutation creates a checkout for charging a merchant. It requires input variables including account ID, product details, pricing plan, and redirect URL. The response includes the checkout ID, status, and a URL for the merchant to complete the checkout.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($checkout: CreateCheckoutInput!) {\n  checkout {\n    createCheckout(input: $checkout) {\n      checkout {\n          id\n          accountId\n          status\n          checkoutUrl\n          items(first: 1) {\n            edges {\n              node {\n                subscriptionId\n                status\n                product {\n                  id\n                  type\n                  productLevel\n                }\n                scope {\n                  id\n                  type\n                }\n                pricingPlan {\n                  interval\n                  price {\n                    value\n                    currencyCode\n                  }\n                  trialDays\n                }\n                redirectUrl\n                description\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Product Reviews with GraphQL Mutation in BigCommerce\nDESCRIPTION: This GraphQL mutation creates a product review in BigCommerce. It requires a product ID, review details (title, text, author name, rating), and optionally an email for guest shoppers. If reCAPTCHA is enabled, a token must be included.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/product-reviews.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  catalog {\n    addProductReview (\n      reCaptchaV2: \"12345\"\n      input: {\n        productEntityId: 81\n          review: {\n            title: \"Great product\"\n            text: \"Would recommend\"\n            author: \"example author\"\n            rating: 4  # integer value between 1 and 5\n            email: \"name@example.com\"\n        }\n      }\n    ){\n      errors {\n        ...on NotAuthorizedToAddProductReviewError {\n          message\n        }\n        ...on CustomerAlreadyReviewedProductError {\n          message\n        }\n        ...on ProductIdNotFoundError {\n          message\n        }\n        ...on InvalidInputFieldsError {\n          message fields\n        }\n        ...on Error{\n          message\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cart Items with update Method in JavaScript\nDESCRIPTION: This code demonstrates the itemUpdate method that uses the update method to modify item quantities in the cart. It handles both single item updates and bulk updates with arrays, and emits a cart-item-update-remote hook after completion.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nitemUpdate(itemId, qty, callback) {\n  let callbackArg = callback;\n  let items;\n\n  if (Array.isArray(itemId) && typeof qty === 'function') {\n    callbackArg = qty;\n    items = itemId;\n  } else {\n    items = [\n        {\n            id: itemId,\n            quantity: qty,\n        },\n    ];\n  }\n\n  this.update(items, (err, response) => {\n    const emitData = {\n        items,\n        err,\n        response,\n    };\n\n    Hooks.emit('cart-item-update-remote', emitData);\n    callbackArg(err, response);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Global Store Profile Settings\nDESCRIPTION: Shows how to modify global store profile settings using a PUT request. Updates can be made to store name and other profile properties.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/settings/configuration.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/settings/store/profile\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"store_name\": \"The new global store name\",\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Featured Flag Status - GraphQL Query\nDESCRIPTION: GraphQL query to retrieve a product's featured status, including both global store information and channel-specific overrides.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-attributes.mdx#2025-04-16_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\nquery {\n  store {\n    product (id: \"bc/store/product/111\") {\n      isFeatured\n      overridesForChannel (channelId: \"bc/store/channel/2\") {\n        isFeatured\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Variant by Entity ID\nDESCRIPTION: GraphQL query to retrieve a single variant using its entity ID. The query targets a specific product and variant through their respective entity IDs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/variants.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    product (entityId: 113) {         \n      variants (entityIds: [98]) {    \n        edges {\n          node {\n            # fields on the Variant object type\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Cart Contents (JavaScript)\nDESCRIPTION: This code snippet shows how to fetch the cart contents using the cart.getContent function and display it in a preview format. It uses a template option with a value of 'cart/preview' and includes configuration for cart suggestions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/queries.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n     * Get cart contents\n     *\n     * @param {String} cartItemHash\n     * @param {Function} onComplete\n     */\n    getCartContent(cartItemHash, onComplete) {\n        const options = {\n            template: 'cart/preview',\n            params: {\n                suggest: cartItemHash,\n            },\n            config: {\n                cart: {\n                    suggestions: {\n                        limit: 4,\n                    },\n                },\n            },\n        };\n\n        utils.api.cart.getContent(options, onComplete);\n    }\n```\n\n----------------------------------------\n\nTITLE: Configure Tiered Product Discount Request\nDESCRIPTION: JSON request payload for creating a tiered discount promotion. Sets up three discount tiers based on product quantities across different categories, with fixed amount discounts of $20, $15, and $10 respectively when minimum quantities are met. Includes notification configurations for cart page display.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/multiple-rules.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Apply a tiered discount to applicable products based on the quantity of items ordered within X \",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"fixed_amount\": \"20\"\n          },\n          \"strategy\": \"LEAST_EXPENSIVE\",\n          \"as_total\": true,\n          \"include_items_considered_by_condition\": true,\n          \"items\": {\n            \"categories\": [\n              24\n            ]\n          }\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": true,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"categories\": [\n              35\n            ]\n          },\n          \"minimum_quantity\": 4\n        }\n      }\n    },\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"fixed_amount\": \"15\"\n          },\n          \"strategy\": \"LEAST_EXPENSIVE\",\n          \"as_total\": true,\n          \"include_items_considered_by_condition\": true,\n          \"items\": {\n            \"categories\": [\n              25\n            ]\n          }\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": true,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"categories\": [\n              25\n            ]\n          },\n          \"minimum_quantity\": 3\n        }\n      }\n    },\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"fixed_amount\": \"10\"\n          },\n          \"strategy\": \"LEAST_EXPENSIVE\",\n          \"as_total\": true,\n          \"include_items_considered_by_condition\": true,\n          \"items\": {\n            \"categories\": [\n              30\n            ]\n          }\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": true,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"categories\": [\n              36\n            ]\n          },\n          \"minimum_quantity\": 2\n        }\n      }\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ],\n  \"stop\": true,\n  \"start_date\": \"2019-02-01T05:00:00+00:00\",\n  \"status\": \"ENABLED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Webhook in BigCommerce\nDESCRIPTION: Example of creating a webhook via POST request to BigCommerce API. Shows how to set up a webhook to monitor order updates with required headers and payload structure.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/overview.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/hooks\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"scope\": \"store/order/updated\",\n  \"destination\": \"https://yourapp.example.com/webhooks\",\n  \"is_active\": true,\n  \"headers\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Product-Based Conditional Discount Promotion\nDESCRIPTION: Creates a $50 discount when customers purchase either two tiered wire baskets or one small purple towel. Uses OR operator to combine multiple product conditions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/order.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"$50 off when you buy two tiered wire baskets or a small purple towel\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"condition\": {\n        \"or\": [\n          {\n            \"cart\": {\n              \"items\": {\n                \"products\": [\n                  118\n                ]\n              },\n              \"minimum_quantity\": 2\n            }\n          },\n          {\n            \"cart\": {\n              \"items\": {\n                \"variants\": [\n                  134\n                ]\n              },\n              \"minimum_quantity\": 1\n            }\n          }\n        ]\n      },\n      \"action\": {\n        \"cart_value\": {\n          \"discount\": {\n            \"fixed_amount\": \"50\"\n          }\n        }\n      },\n      \"apply_once\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Currency Promotion in BigCommerce API\nDESCRIPTION: HTTP request to create a promotion that applies a 10% discount across all currencies. The promotion is configured with a coupon redemption type and uses percentage-based discount to ensure consistent application across different currencies.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/multi-currency.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/promotions\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"name\": \"10% off entire order\",\n  \"currency_code\": \"*\",\n  \"redemption_type\": \"COUPON\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_value\": {\n          \"discount\": {\n            \"percentage_amount\": \"10\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with FOLLOW Redirect Behavior\nDESCRIPTION: This GraphQL query demonstrates using the FOLLOW redirect behavior when querying a route. With this setting, the node returns the entity targeted by dynamic redirects as part of the response.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/routes.mdx#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n     route(path: \"/mug\" redirectBehavior: FOLLOW) {\n       redirect {__typename to {__typename ...on ProductRedirect{entityId path}} toUrl} \n       node {\n         id\n         ... on Product {\n           name\n           }\n          }\n         }\n       }\n     }\n```\n\n----------------------------------------\n\nTITLE: Creating Free Gift with Minimum Spend Promotion\nDESCRIPTION: Creates a promotion that adds a free gift product when cart total exceeds $200. Specifies product ID and quantity for the gift item.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/order.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Order at least $X and get X item free\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"gift_item\": {\n          \"product_id\": 130,\n          \"quantity\": 1\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": false,\n      \"currency_code\": \"AUD\",\n      \"condition\": {\n        \"cart\": {\n          \"minimum_spend\": \"200\"\n        }\n      }\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ],\n  \"stop\": false,\n  \"status\": \"ENABLED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Shipping Method for a Connected Carrier\nDESCRIPTION: Example of a POST request to create a shipping method for a connected carrier in a specific shipping zone. The response shows the created shipping method details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/shipping.mdx#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v2/shipping/zones/{{zone_id}}/methods\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n{\n  \"name\": \"Example Shipping Carrier\",\n  \"type\": \"carrier_33\",\n  \"settings\": {\n    \"carrier_options\": {\n      \"account_id\": \"a1ty\"\n    }\n  },\n  \"enabled\": true\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 24,\n  \"name\": \"Per Order Test\",\n  \"type\": \"perorder\",\n  \"settings\": {\n    \"rate\": 8.3\n  },\n  \"enabled\": true,\n  \"handling_fees\": {\n    \"fixed_surcharge\": 3\n  },\n  \"is_fallback\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Product Reviews in BigCommerce API\nDESCRIPTION: This snippet illustrates how to add product reviews to a product using a POST request to the BigCommerce API. It includes fields for the review title, text, status, rating, and reviewer information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products/{{product_id}}/reviews\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"title\": \"Great Coffee Mug\",\n  \"text\": \"This coffee mug kept my liquids hot for several hours.\",\n  \"status\": \"pending\",\n  \"rating\": 5,\n  \"email\": \"testing@bigcommerce.com\",\n  \"name\": \"BigCommerce\",\n  \"date_reviewed\": \"2018-07-20T17:45:13+00:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Rule with V3 Catalog API in JSON\nDESCRIPTION: This snippet shows how to create a complex rule for a product using the V3 Catalog API. It demonstrates setting conditions based on modifier values and applying a price adjuster.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"product_id\": 124,\n  \"enabled\": true,\n  \"price_adjuster\": {\n    \"adjuster\": \"relative\",\n    \"adjuster_value\": 10\n  },\n  \"conditions\": [\n    {\n      \"modifier_id\": 118,\n      \"modifier_value_id\": 113\n    },\n    {\n      \"modifier_id\": 120,\n      \"modifier_value_id\": 115\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Cart Content with getContent Method in JavaScript\nDESCRIPTION: This code demonstrates how to refresh the cart's content using the getContent method. It updates the cart content, totals, status messages, and page title. If the last item is being removed, it reloads the page instead of updating the content.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nrefreshContent(remove) {\n  const $cartItemsRows = $('[data-item-row]', this.$cartContent);\n  const $cartPageTitle = $('[data-cart-page-title]');\n  const options = {\n    template: {\n        content: 'cart/content',\n        totals: 'cart/totals',\n        pageTitle: 'cart/page-title',\n        statusMessages: 'cart/status-messages',\n    },\n  };\n\n  this.$overlay.show();\n\n  // Remove last item from cart? Reload\n  if (remove && $cartItemsRows.length === 1) {\n    return window.location.reload();\n  }\n\n  utils.api.cart.getContent(options, (err, response) => {\n    this.$cartContent.html(response.content);\n    this.$cartTotals.html(response.totals);\n    this.$cartMessages.html(response.statusMessages);\n\n    $cartPageTitle.replaceWith(response.pageTitle);\n    this.bindEvents();\n    this.$overlay.hide();\n\n    const quantity = $('[data-cart-quantity]', this.$cartContent).data('cart-quantity') || 0;\n\n    $('body').trigger('cart-quantity-update', quantity);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CatalogProductOption Interface in GraphQL\nDESCRIPTION: The base interface that defines common fields for all product option types in BigCommerce's catalog. It includes essential properties like entity ID, display name, and required status flags.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ninterface CatalogProductOption {\n  entityId: Int!\n  displayName: String!\n  isRequired: Boolean!\n  isVariantOption: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Pickup Consignment Details via BigCommerce Orders API\nDESCRIPTION: This snippet demonstrates how to update pickup consignment details for an existing order using the BigCommerce Orders API. It includes the PUT request with the updated consignment information and the expected JSON response.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_34\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v2/orders/{{order_id}}\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"consignments\": {\n    \"pickups\": [\n      {\n        \"id\": 13,\n        \"pickup_method_id\": 1,\n        \"pickup_method_display_name\": \"Pickup Method 1 name - override\",\n        \"collection_instructions\": \"Pickup Method 1 instructions - override\",\n        \"collection_time_description\": \"Pickup Method 1 time - override\",\n        \"location\": {\n          \"name\": \"Location 1 - override\",\n          \"code\": \"LOCATION-1 - override\",\n          \"address_line_1\": \"123 Main Street - override\",\n          \"address_line_2\": \"Suite 101 - override\",\n          \"city\": \"Austin - override\",\n          \"state\": \"Texas - override\",\n          \"postal_code\": \"78726 - override\",\n          \"country_alpha2\": \"US\",\n          \"email\": \"location1_override@example.com\",\n          \"phone\": \"+1 111-111-1111 - override\"\n        }\n      }\n    ]\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 126,\n  ...\n  \"consignments\": {\n    \"url\": \"https://api.bigcommerce.com/stores/cc8eopdesv/v2/orders/126/consignments\",\n    \"resource\": \"/orders/126/consignments\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New User with GraphQL\nDESCRIPTION: GraphQL mutation to create a new user with password authentication. Requires email, name, locale and password details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/graphql-account/users.mdx#2025-04-16_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  user {\n    createUserWithPassword(\n      input: {\n        email: \"jane.doe@example.com\",\n        firstName: \"Jane\",\n        lastName: \"Doe\",\n        locale: \"en-US\",\n        password: \"Password1234!\",\n        passwordConfirmation: \"Password1234!\"\n      }\n    ) {\n      user {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Call to Update a BigCommerce Checkout Consignment\nDESCRIPTION: This example demonstrates how to call the updateConsignment function with actual values. It includes a cart ID, consignment ID, and shipping option ID as parameters, and logs the response data to the console.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nupdateConsignment(`/api/storefront/checkouts/`, `d4e978c2-bdcf-41b0-a49b-fecf4f5223c1`, `5e6a91ff83c6d`,{\n  \"shippingOptionId\": \"4dcbf24f457dd67d5f89bcf374e0bc9b\"\n})\n.then(data => console.log(JSON.stringify(data)))\n.catch(error => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Paginating Through Brands in GraphQL\nDESCRIPTION: This query retrieves the first thirty brands from a BigCommerce store. It demonstrates how to use the 'first' parameter to specify a larger slice size for pagination.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery brands {\n  site {\n    brands (first: 30) {\n      pageInfo {\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Method for Moving Content to Dropzones\nDESCRIPTION: JavaScript function that moves HTML content from temporary gr-dropzone elements to their target locations. This method finds all elements with the gr-dropzone class, extracts the target zone id, copies the HTML to that target, and removes the original element.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/dynamic-content-rendering.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngr_moveHtmlToDropzones () {\n  $(\".gr-dropzone\").each(function () {\n    const $this = $(this);\n    const zoneId = $this.data(\"gr-zone\");\n    if (zoneId) {\n      $(\"#\" + zoneId).html($this.html());   // copy the html to where it should be\n      $this.remove();             // remove the html from its temporary location\n    } else {\n      console.warn(\"PageManager.gr_moveHtmlToDropzones: dropzone has no target.\");\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Product with Variants using HTTP POST\nDESCRIPTION: This request creates a new product with variants using the BigCommerce Catalog API. It defines a coffee mug product with two color variants (Blue and Gray) in a single API call.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/index.mdx#2025-04-16_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n\n{\n  \"name\": \"BigCommerce Coffee Mug\",\n  \"price\": \"10.00\",\n  \"categories\": [\n    23,\n    21\n  ],\n  \"weight\": 4,\n  \"type\": \"physical\",\n  \"variants\": [\n    {\n      \"sku\": \"SKU-BLU\",\n      \"option_values\": [\n        {\n          \"option_display_name\": \"Mug Color\",\n          \"label\": \"Blue\"\n        }\n      ]\n    },\n    {\n      \"sku\": \"SKU-GRAY\",\n      \"option_values\": [\n        {\n          \"option_display_name\": \"Mug Color\",\n          \"label\": \"Gray\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Storefront API Request with Bearer Token\nDESCRIPTION: Example of how to structure a GraphQL Storefront API request using a bearer token for authentication. The request is sent as a POST to the store's GraphQL endpoint with the Authorization header containing the token.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/graphql-storefront.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://your_store.example.com/graphql\nAuthorization: Bearer {token}\nAccept: application/json\nContent-Type: application/json\n\n{\n  // request body\n}\n```\n\n----------------------------------------\n\nTITLE: Incorporating Breadcrumbs with Handlebars\nDESCRIPTION: This snippet shows how to include breadcrumbs in pages to satisfy the WCAG 'location' guideline. It uses a partial template to render breadcrumb navigation in the context of a 'contact-us' page. The snippet is part of a template that respects theme settings for page headings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/accessibility/implementing-wcag-guidelines.mdx#2025-04-16_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#partial \"page\"}} {{> components/common/breadcrumbs breadcrumbs=breadcrumbs}}\n{{#unless theme_settings.hide_contact_us_page_heading}}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Add to Cart Link in HTML\nDESCRIPTION: Simple HTML anchor tag example showing how to construct a purchase link with product ID parameter.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/add-to-cart-url.mdx#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://example.com/cart.php?action=buy&product_id=123\">Purchase Our New Product Now!</a>\n```\n\n----------------------------------------\n\nTITLE: Processing Credit Card Payment with BigCommerce Payments API\nDESCRIPTION: Example of processing a credit card payment using the Payments API. The request requires a PAT token and credit card details including card number, cardholder name, expiry date, and CVV.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/payments/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST https://payments.bigcommerce.com/stores/{{STORE_HASH}}/payments\nAccept: application/vnd.bc.v1+json\nAuthorization: PAT {{PAT_TOKEN}}\nContent-Type: application/json\n\n{\n  \"payment\": {\n    \"instrument\": {\n      \"type\": \"card\",\n      \"number\": \"4242424242424242\",\n      \"cardholder_name\": \"Jane Doe\",\n      \"expiry_month\": 12,\n      \"expiry_year\": 2020,\n      \"verification_value\": \"422\"\n    },\n    \"payment_method_id\": \"stripe.card\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Product Form Component\nDESCRIPTION: Complete implementation of the Form component with state management, event handlers, and form rendering using BigDesign components.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nconst Form = ({ formData, onCancel, onSubmit }: FormProps) => {\n    const { description, isVisible, name, price, type } = formData;\n    const [form, setForm] = useState<FormData>({ description, isVisible, name, price, type });\n    const [errors, setErrors] = useState<StringKeyValue>({});\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const { name: formName, value } = event?.target;\n        setForm(prevForm => ({ ...prevForm, [formName]: value }));\n\n        // Add error if it exists in FormErrors and the input is empty, otherwise remove from errors\n        !value && FormErrors[formName]\n            ? setErrors(prevErrors => ({ ...prevErrors, [formName]: FormErrors[formName] }))\n            : setErrors(({ [formName]: removed, ...prevErrors }) => ({ ...prevErrors }));\n    };\n\n    const handleSelectChange = (value: string) => {\n        setForm(prevForm => ({ ...prevForm, type: value }));\n    };\n\n    const handleCheckboxChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { checked, name: formName } = event?.target;\n        setForm(prevForm => ({ ...prevForm, [formName]: checked }));\n    };\n\n    const handleSubmit = (event: FormEvent<EventTarget>) => {\n        event.preventDefault();\n\n        // If there are errors, do not submit the form\n        const hasErrors = Object.keys(errors).length > 0;\n        if (hasErrors) return;\n\n        onSubmit(form);\n    };\n\n    return (\n        <StyledForm onSubmit={handleSubmit}>\n            <Panel header=\"Basic Information\">\n                <FormGroup>\n                    <Input\n                        error={errors?.name}\n                        label=\"Product name\"\n                        name=\"name\"\n                        required\n                        value={form.name}\n                        onChange={handleChange}\n                    />\n                </FormGroup>\n                <FormGroup>\n                    <Select\n                        label=\"Product type\"\n                        name=\"type\"\n                        options={[\n                            { value: 'physical', content: 'Physical' },\n                            { value: 'digital', content: 'Digital' }\n                        ]}\n                        required\n                        value={form.type}\n                        onOptionChange={handleSelectChange}\n                    />\n                </FormGroup>\n                <FormGroup>\n                    <Input\n                        error={errors?.price}\n                        iconLeft={'$'}\n                        label=\"Default price (excluding tax)\"\n                        name=\"price\"\n                        placeholder=\"10.00\"\n                        required\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={form.price}\n                        onChange={handleChange}\n                    />\n                </FormGroup>\n                <FormGroup>\n                    <Checkbox\n                        name=\"isVisible\"\n                        checked={form.isVisible}\n                        onChange={handleCheckboxChange}\n                        label=\"Visible on storefront\"\n                    />\n                </FormGroup>\n            </Panel>\n            <Panel header=\"Description\">\n                <FormGroup>\n                    <Textarea\n                        label=\"Description\"\n                        name=\"description\"\n                        placeholder=\"Product info\"\n                        value={form.description}\n                        onChange={handleChange}\n                    />\n                </FormGroup>\n            </Panel>\n            <Flex justifyContent=\"flex-end\">\n                <Button\n                    marginRight=\"medium\"\n                    type=\"button\"\n                    variant=\"subtle\"\n                    onClick={onCancel}\n                >\n                    Cancel\n                </Button>\n                <Button type=\"submit\">Save</Button>\n            </Flex>\n        </StyledForm>\n    );\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel for Headless Platform in BigCommerce\nDESCRIPTION: API request to create a channel for a headless storefront platform using the BigCommerce Channels API. This requires TOKEN_A with appropriate permissions and returns a channel ID needed for subsequent operations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/b2b-edition/headless.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{store_hash}/v3/channels\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{TOKEN_A}}\n\n{\n    \"name\": \"<the name you want for your channel>\",\n    \"platform\": \"<desired platform>\",\n    \"type\": \"storefront\",\n    \"status\": \"active\",\n    \"is_listable_from_ui\": true,\n    \"is_visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Region Translations in schema_translations.json\nDESCRIPTION: This JSON snippet shows how to define translations for various regions in different languages. It includes translations for home page sections, carousel, featured products, and header regions in English, French, and Chinese.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/page-regions.mdx#2025-04-16_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n \"i18n.RegionName.HomeBelowMenu\": {\n   \"default\": \"Home Below Menu\",\n   \"en\": \"Home Below Menu\",\n   \"fr-FR\": \"Accueil Ci-dessous Menu\",\n   \"zh\": \"主页下方菜单\",\n   \"zh-CN\": \"主页下方菜单\"\n },\n \"i18n.RegionName.HomeBelowCarousel\": {\n   \"default\": \"Home Below Carousel\",\n   \"en\": \"Home Below Carousel\",\n   \"fr-FR\": \"Accueil Ci-dessous Carrousel\",\n   \"zh\": \"旋转木马下方的主页\",\n   \"zh-CN\": \"旋转木马下方的主页\"\n },\n \"i18n.RegionName.HomeBelowFeaturedProducts\": {\n   \"default\": \"Home Below Featured Products\",\n   \"en\": \"Home Below Featured Products\",\n   \"fr-FR\": \"Accueil Ci-dessous Produits en vedette\",\n   \"zh\": \"主页 特色产品\",\n   \"zh-CN\": \"主页 特色产品\"\n },\n \"i18n.RegionName.HomeBelowTopProducts\": {\n   \"default\": \"Home Below Top Products\",\n   \"en\": \"Home Below Top Products\",\n   \"fr-FR\": \"Accueil Ci-dessous Top Produits\",\n   \"zh\": \"主页 热门产品下方\",\n   \"zh-CN\": \"主页 热门产品下方\"\n },\n \"i18n.RegionName.HomeBelowNewProducts\": {\n   \"default\": \"Home Below New Products\",\n   \"en\": \"Home Below New Products\",\n   \"fr-FR\": \"Accueil Ci-dessous Nouveaux produits\",\n   \"zh\": \"新产品首页\",\n   \"zh-CN\": \"新产品首页\"\n },\n \"i18n.RegionName.HeaderBottomGlobal\": {\n   \"default\": \"Header Bottom (Global)\",\n   \"en\": \"Header Bottom (Global)\",\n   \"fr-FR\": \"Bas de l'en-tête (global)\",\n   \"zh\": \"标题底部（全局）\",\n   \"zh-CN\": \"标题底部（全局）\"\n },\n \"i18n.RegionName.HeaderBottom\": {\n   \"default\": \"Header Bottom\",\n   \"en\": \"Header Bottom\",\n   \"fr-FR\": \"Bas de l'en-tête\",\n   \"zh\": \"标题底部\",\n   \"zh-CN\": \"标题底部\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging BODL Events to Browser Console\nDESCRIPTION: A JavaScript script that subscribes to various BODL events and logs their payloads to the browser console. The script handles events for consent, products, banners, cart operations, and checkout processes. It includes validation for required BODL objects and initializes necessary data structures.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/hosted-analytics.mdx#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n\nfunction subscribeOnBodlEvents() {\n  // log to verify that the function is executing\n  console.log('run subscribeOnBodlEvents()');\n\n  if (\n    // window is falsy\n    !window ||\n    // window.bodlEvents is not defined\n    typeof window.bodlEvents === 'undefined' ||\n    // window.bodlEvents.banner is not defined\n    typeof window.bodlEvents.banner === 'undefined' ||\n    // window.bodlEvents.checkout is not defined\n    typeof window.bodlEvents.checkout === 'undefined' ||\n    // window.bodlEvents.cart is not defined\n    typeof window.bodlEvents.cart === 'undefined' ||\n    // window.bodlEvents.product is not defined\n    typeof window.bodlEvents.product === 'undefined' ||\n    // window.bodlEvents.consent is not defined\n    typeof window.bodlEvents.consent === 'undefined'  \n  ) {\n    // log 'not defined' to the console\n    console.log('not defined');\n    // and end script execution\n    return;\n  }\n\n  // if window.dataLayer doesn't exist, make it an empty array\n  window.dataLayer = window.dataLayer || [];\n\n  // If window.bodlEvents.consent.loaded is available, then...\n  if (typeof window.bodlEvents.consent.loaded === 'function') {\n    // run the loaded function to get the payload\n    window.bodlEvents.consent.loaded((payload) => {\n      // log the event payload\n      console.log(\n        'window.bodlEvents.consent.loaded ~ payload',\n        payload\n      );\n    });\n  }\n \n  // If window.bodlEvents.consent.updated is available, then...\n  if (typeof window.bodlEvents.consent.updated === 'function') {\n    // run the updated function to get the payload\n    window.bodlEvents.consent.updated((payload) => {\n      // log the event payload\n      console.log(\n        'window.bodlEvents.consent.updated ~ payload',\n        payload\n      );\n    });\n  } \n\n  // If window.bodlEvents.product.searchPerformed is available, then...\n  if (typeof window.bodlEvents.product.searchPerformed === 'function') {\n    // run the searchPerformed function to get the payload\n    window.bodlEvents.product.searchPerformed((payload) => {\n      // log the event payload\n      console.log(\n        'window.bodlEvents.product.searchPerformed ~ payload',\n        payload\n      );\n    });\n  }    \n\n  // If window.bodlEvents.banner.viewed is available, then...\n  if (typeof window.bodlEvents.banner.viewed === 'function') {\n    // run the viewed function to get the payload\n    window.bodlEvents.banner.viewed((payload) => {\n      // log the event payload\n      console.log(\n        'window.bodlEvents.banner.viewed ~ payload',\n        payload\n      );\n    });\n  }    \n\n  // If window.bodlEvents.product.pageViewed is available, then...\n  if (typeof window.bodlEvents.product.pageViewed === 'function') {\n    // run the pageViewed function to get the payload\n    window.bodlEvents.product.pageViewed((payload) => {\n      // log the event payload\n      console.log(\n        'window.bodlEvents.product.pageViewed ~ payload',\n        payload\n      );\n    });\n  }\n    \n  // If window.bodlEvents.product.categoryViewed is available, then...\n  if (typeof window.bodlEvents.product.categoryViewed === 'function') {\n    // run the categoryViewed function to get the payload\n    window.bodlEvents.product.categoryViewed((payload) => {\n      // log the event payload\n      console.log(\n        'window.bodlEvents.product.categoryViewed ~ payload',\n        payload\n      );\n    });\n  }\n    \n  // If window.bodlEvents.cart.addItem is available, then...\n  if (typeof window.bodlEvents.cart.addItem === 'function') {\n    // run the addItem function to get the payload\n    window.bodlEvents.cart.addItem((payload) => {\n      // log the event payload\n      console.log(\n        'window.bodlEvents.cart.addItem ~ payload',\n        payload\n      );\n    });\n  }\n    \n  // If window.bodlEvents.cart.viewed is available, then...\n  if (typeof window.bodlEvents.cart.viewed === 'function') {\n    // run the viewed function to get the payload\n    window.bodlEvents.cart.viewed((payload) => {\n      // log the event payload\n      console.log(\n        'window.bodlEvents.cart.viewed ~ payload',\n        payload\n      );\n    });\n  }\n    \n  // If window.bodlEvents.cart.removeItem is available, then...\n  if (typeof window.bodlEvents.cart.removeItem === 'function') {\n    // run the removeItem function to get the payload\n    window.bodlEvents.cart.removeItem((payload) => {\n      // log the event payload\n      console.log(\n        'window.bodlEvents.cart.removeItem ~ payload',\n        payload\n      );\n    });\n  }\n    \n  //   If window.bodlEvents.checkout.checkoutBegin is available, then...\n  if (typeof window.bodlEvents.checkout.checkoutBegin === 'function') {\n    // run the checkoutBegin function to get the payload\n    window.bodlEvents.checkout.checkoutBegin((payload) => {\n      // log the event payload\n      console.log(\n        'window.bodlEvents.checkout.checkoutBegin ~ payload',\n        payload\n      );\n    });    \n  }\n\n  // If window.bodlEvents.checkout.shippingDetailsProvided is available, then...\n  if (typeof window.bodlEvents.checkout.shippingDetailsProvided === 'function') {\n    // run the shippingDetailsProvided function to get the payload\n    window.bodlEvents.checkout.shippingDetailsProvided((payload) => {\n      // log the event payload\n      console.log(\n        'window.bodlEvents.checkout.shippingDetailsProvided ~ payload',\n        payload\n      );\n    });\n  }\n\n  // If window.bodlEvents.checkout.paymentDetailsProvided is available, then...\n  if (typeof window.bodlEvents.checkout.paymentDetailsProvided === 'function') {\n    // run the paymentDetailsProvided function to get the payload\n    window.bodlEvents.checkout.paymentDetailsProvided((payload) => {\n      // log the event payload\n      console.log(\n        'window.bodlEvents.checkout.paymentDetailsProvided ~ payload',\n        payload\n      );\n    });\n  }\n\n  // If window.bodlEvents.checkout.orderPurchased is available, then...\n  if (typeof window.bodlEvents.checkout.orderPurchased === 'function') {\n    // run the orderPurchase function to get the payload\n    window.bodlEvents.checkout.orderPurchased((payload) => {\n      // log the event payload\n      console.log(\n        'window.bodlEvents.checkout.orderPurchased ~ payload',\n        payload\n      );\n    });\n  }\n}\n\n// when the page window loads, run the subscribeOnBodlEvents function\nwindow.addEventListener('load', subscribeOnBodlEvents, false);\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Theme Regions in BigCommerce API\nDESCRIPTION: HTTP request to get available theme regions for a specific template file, which helps determine the valid values for the region property when creating widget placements.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/graphql-templates.mdx#2025-04-16_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/content/regions?template_file={{TEMPLATE_FILE}}\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Processing Payment with Stored PayPal Account\nDESCRIPTION: Processes a payment using a stored PayPal account by making a POST request with the stored PayPal account token.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/payments/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST https://payments.bigcommerce.com/stores/{{STORE_HASH}}/payments\nAccept: application/vnd.bc.v1+json\nContent-Type: application/json\n\n{\n  \"payment\": {\n    \"instrument\": {\n      \"type\": \"stored_paypal_account\",\n      \"token\": \"52fa5598d41ed987c76fef61f0adef2f2a90da024a3b50e71c2273419d24fd90\"\n    },\n    \"payment_method_id\": \"braintree.paypal\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Order Metafields with GraphQL\nDESCRIPTION: This query retrieves metafields for order #102 using GraphQL. It uses entityId to filter for a specific order and returns both order metafields and cart metafields within a specified namespace.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/orders.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery Order($namespace: String!) {\n    site {\n        order(filter: {entityId: 102}) {\n            id\n            entityId\n            billingAddress {\n                firstName\n            }\n            metafields(namespace: $namespace) {\n                edges {\n                    node {\n                        key\n                        value\n                    }\n                }\n            }\n            cartMetafields(namespace: $namespace) {\n                edges {\n                     node {\n                        key\n                        value\n                    }\n                }\n            }\n            \n        }\n    }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Adding Line Items to an Existing Cart\nDESCRIPTION: This mutation adds new items to an existing cart using the cart's entity ID. The request specifies the cart ID and additional items to be added.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/graphql-storefront.mdx#2025-04-16_snippet_8\n\nLANGUAGE: http\nCODE:\n```\n  POST https://store.example.com/graphql\n  Authorization: Bearer {{STOREFRONT_TOKEN}}\n  X-Bc-Customer-Access-Token: {{CUSTOMER_ACCESS_TOKEN}}\n\n  mutation addCartLineItems($addCartLineItemsInput: AddCartLineItemsInput!) {\n    cart {\n      addCartLineItems(input: $addCartLineItemsInput) {\n        cart {\n          entityId\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Category Tree data with BigCommerce API in HTTP\nDESCRIPTION: An HTTP GET request example for fetching the category tree from the BigCommerce API. Requires authentication with an access token and provides the hierarchical structure of all categories in the store.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/index.mdx#2025-04-16_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/trees/{{TREE_ID}}/categories\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cart with Redirect URLs in BigCommerce\nDESCRIPTION: This HTTP request creates a cart with the 'include=redirect_urls' parameter, which returns URLs that can be used to redirect customers to BigCommerce's hosted checkout page. The response includes cart_url, checkout_url, and embedded_checkout_url parameters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/checkout.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{store_hash}/v3/carts?include=redirect_urls\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Statuses with BigCommerce REST API\nDESCRIPTION: This snippet shows how to get a list of order statuses using the BigCommerce REST API. It includes both the request and response examples.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v2/order_statuses\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Querying Product Modifier Options with GraphQL in BigCommerce\nDESCRIPTION: This snippet shows how to query product modifier options using GraphQL in BigCommerce. It retrieves information about modifier options, including those set at the global level and any overrides.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    products {\n      edges {\n        node {\n          entityId\n          name\n          modifierOptions {\n            edges {\n              node {\n                entityId\n                displayName\n                values {\n                  edges {\n                    node {\n                      entityId\n                      label\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Product Bundle Discount Promotion in BigCommerce\nDESCRIPTION: Example of creating a conditional promotion where buying product X qualifies for a 10% discount on product Y. The promotion includes product targeting, discount calculation settings, and notification configurations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/product.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy two X and get 10% off Y\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"percentage_amount\": \"10\"\n          },\n          \"strategy\": \"LEAST_EXPENSIVE\",\n          \"as_total\": false,\n          \"include_items_considered_by_condition\": false,\n          \"items\": {\n            \"products\": [\n              130\n            ]\n          },\n          \"quantity\": 1\n        }\n      },\n      \"apply_once\": false,\n      \"stop\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"products\": [\n              129\n            ]\n          },\n          \"minimum_quantity\": 1\n        }\n      }\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ],\n  \"stop\": false,\n  \"status\": \"ENABLED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a 10% Off Storewide Promotion with Brand Exclusions in BigCommerce API\nDESCRIPTION: This JSON request creates a promotion for 10% off storewide, excluding 'Huggies', 'Munchkin', and 'Pampers' brand products. It uses the NOT operator to specify brand exclusions and sets up an automatic redemption type.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/storewide.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"10% off storewide except 'Huggies', 'Munchkin', and 'Pampers' brand products\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"percentage_amount\": \"10\"\n          },\n          \"items\": {\n            \"not\": {\n              \"brands\": [\n                35,\n                36,\n                37\n              ]\n            }\n          }\n        }\n      },\n      \"apply_once\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Widget with POST Request to Widgets API\nDESCRIPTION: This HTTP request creates a new widget based on the previously created widget template. It includes configuration data for the three images to be displayed in the widget.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /stores/{{STORE_HASH}}/v3/content/widgets\nHost: api.bigcommerce.com\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"name\": \"Header Images\",\n  \"template\": \"{{#each images}}<a href='{{image_url}}'><img src={{image_source}} style='width:33.3%'/></a>{{/each}}\",\n  \"widget_configuration\": {\n  \t\"images\": [{\n  \t\"image_source\": \"https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/1280x1280/products/109/361/kinfolkessentialissue_1024x1024__22507.1456436715.jpg?c=2&imbypass=on\"\n  \t},\n  \t{\n  \t\"image_source\":\"https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/500x659/products/85/282/livingwithplants_grande__26452.1456436666.jpg?c=2&imbypass=on\"\n  },\n  {\n  \"image_source\":\n  \t\"https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/1280x1280/products/109/361/kinfolkessentialissue_1024x1024__22507.1456436715.jpg?c=2&imbypass=on\"\n\t}\n  ]\n  },\n  \"widget_template_uuid\":\"{your-widget-template-uuid}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing BigCommerce SDK with Logout Callback\nDESCRIPTION: Demonstrates how to initialize the BigCommerce SDK in the browser with an onLogout callback function. This should be done in the first part of the application that has access to the window object, such as inside useEffect or componentDidMount in React applications.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/best-practices.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.bcAsyncInit = function() {\n  Bigcommerce.init({\n    onLogout: callback\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Credit Card While Processing Payment\nDESCRIPTION: Example of processing a payment while simultaneously saving the credit card for future use by setting save_instrument to true.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/payments/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST https://payments.bigcommerce.com/stores/{{STORE_HASH}}/payments\nAccept: application/vnd.bc.v1+json\nAuthorization: PAT {{PAT_TOKEN}}\nContent-Type: application/json\n\n{\n  \"payment\": {\n    \"instrument\": {\n      \"type\": \"card\",\n      \"number\": \"4111111111111111\",\n      \"cardholder_name\": \"BP\",\n      \"expiry_month\": 12,\n      \"expiry_year\": 2020,\n      \"verification_value\": \"411\"\n    },\n    \"payment_method_id\": \"authorizenet.card\",\n    \"save_instrument\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Customer Group Pricing with REST API\nDESCRIPTION: HTTP request example for retrieving customer group-specific pricing using the REST Management API. The request includes channel ID, currency code, and customer group ID to get the appropriate pricing for specific products.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/customers.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{store_hash}/v3/pricing/products\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"channel_id\": 1,\n  \"currency_code\": \"USD\",\n  \"customer_group_id\": 0,\n  \"items\": [\n    {\n      \"product_id\": 0,\n      \"variant_id\": 0,\n      \"options\": [\n        {\n          \"option_id\": 0,\n          \"value_id\": 0\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Segments for a Shopper Profile using BigCommerce API\nDESCRIPTION: This HTTP GET request retrieves all segments associated with a given shopper profile. It requires the store hash and shopper profile ID as parameters, and an access token for authentication.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/segments/user-guide.mdx#2025-04-16_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/shopper-profiles/{{shopperProfileId}}/segments\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Order Transactions Response in BigCommerce API\nDESCRIPTION: Example JSON response from the BigCommerce API for an order transaction request. It includes transaction details such as ID, order ID, payment method, amount, currency, gateway information, status, and various payment-related fields.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/index.mdx#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 85926313,\n      \"order_id\": \"121\",\n      \"event\": \"purchase\",\n      \"method\": \"nonce\",\n      \"amount\": 1,\n      \"currency\": \"USD\",\n      \"gateway\": \"squarev2\",\n      \"gateway_transaction_id\": \"pN5Kd7R9ilEI2ygBawCy7tMF|qwnAFAxRZ7tYRtIpZULg1yMF\",\n      \"status\": \"ok\",\n      \"test\": false,\n      \"fraud_review\": false,\n      \"reference_transaction_id\": {},\n      \"date_created\": \"2018-05-08T15:06:12+00:00\",\n      \"avs_result\": {...},\n      \"cvv_result\": {...},\n      \"credit_card\": {},\n      \"gift_certificate\": {},\n      \"store_credit\": {},\n      \"offline\": {},\n      \"custom\": {},\n      \"payment_instrument_token\": {},\n      \"payment_method_id\": \"squarev2.card\"\n    }\n  ],\n  \"meta\": {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Quick View Functionality with BigCommerce Product API\nDESCRIPTION: This code implements a quick view feature for products. When a user clicks on a quick view button, it opens a modal and uses utils.api.product.getById to fetch the product details with a specific template for display in the modal.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n$('body').on('click', '.quickview', (event) => {\n    event.preventDefault();\n    const productId = $(event.currentTarget).data('product-id');\n    modal.open({ size: 'large' });\n\n    utils.api.product.getById(productId, { template: 'products/quick-view' }, (err, response) => {\n      modal.updateContent(response);\n\n      modal.$content.find('.productView').addClass('productView--quickView');\n\n      return new ProductDetails(modal.$content.find('.quickView'), context);\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Category-Specific Available Filters with Settings API (HTTP)\nDESCRIPTION: This snippet demonstrates how to make a GET request to retrieve available filters for a specific category in a BigCommerce store using the Settings API.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/contextual-filters.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/settings/search/filters/available?channel_id=1&category_id={{CATEGORY_ID}}\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Processing Payment Response\nDESCRIPTION: Example of a successful payment processing response showing transaction details including status and ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/orders.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": \"693bb4cd-3f20-444a-8315-6369f582c68a\",\n    \"status\": \"success\",\n    \"transaction_type\": \"purchase\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BigCommerce Checkout Order Response JSON\nDESCRIPTION: Partial JSON response showing the structure of a checkout including billing address, taxes, coupons, shipping costs, and totals. This snippet demonstrates the comprehensive order data that the BigCommerce API provides when creating or retrieving checkout information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/rest-management.mdx#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n                },\n                \"address\": {\n                  \"first_name\": \"Test\",\n                  \"last_name\": \"User\",\n                  \"email\": \"Test.User@example.com\",\n                  \"company\": \"BigCommerce\",\n                  \"address1\": \"555 Main Street\",\n                  \"address2\": \"\",\n                  \"city\": \"Austin\",\n                  \"state_or_province\": \"Texas\",\n                  \"state_or_province_code\": \"TX\",\n                  \"country\": \"United States\",\n                  \"country_code\": \"US\",\n                  \"postal_code\": \"78701\",\n                  \"phone\": \"555-555-5555\",\n                  \"custom_fields\": []\n                }\n              }\n            ],\n            \"taxes\": [],\n            \"coupons\": [],\n            \"order_id\": null,\n            \"shipping_cost_total_inc_tax\": 0,\n            \"shipping_cost_total_ex_tax\": 0,\n            \"handling_cost_total_inc_tax\": 0,\n            \"handling_cost_total_ex_tax\": 0,\n            \"tax_total\": 0,\n            \"subtotal_inc_tax\": 13.5,\n            \"subtotal_ex_tax\": 13.5,\n            \"grand_total\": 0,\n            \"created_time\": \"2023-10-04T18:32:27+00:00\",\n            \"updated_time\": \"2023-10-04T19:45:40+00:00\",\n            \"customer_message\": \"\",\n            \"fees\": []\n          },\n          \"meta\": {}\n        }\n```\n\n----------------------------------------\n\nTITLE: Example API Call for Creating Consignments in BigCommerce\nDESCRIPTION: This code snippet demonstrates how to use the createConsignment function to add multiple consignments to a checkout. It includes two shipping addresses with associated line items and handles the API response.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncreateConsignment(`/api/storefront/checkouts/`, `d4e978c2-bdcf-41b0-a49b-fecf4f5223c1`,\n  [{\n    \"shippingAddress\": {\n        \"firstName\": \"Jane\",\n        \"lastName\": \"Doe\",\n        \"email\": \"janedoe@email.com\",\n        \"company\": \"BigCommerce\",\n        \"address1\": \"123 Main Street\",\n        \"address2\": \"Apt 1\",\n        \"city\": \"Austin\",\n        \"stateOrProvinceCode\": \"TX\",\n        \"countryCode\": \"US\",\n        \"postalCode\": \"78751\"\n    },\n    \"lineItems\": [{\n        \"itemId\": \"57a877e0-d898-47d0-910d-88656e8dee0c\",\n        \"quantity\": 1\n    }]\n  },\n  {\n    \"shippingAddress\": {\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"email\": \"johnedoe@email.com\",\n        \"company\": \"BigCommerce\",\n        \"address1\": \"123 South Street\",\n        \"address2\": \"Apt 5\",\n        \"city\": \"Austin\",\n        \"stateOrProvinceCode\": \"TX\",\n        \"countryCode\": \"US\",\n        \"postalCode\": \"78726\"\n    },\n    \"lineItems\": [{\n        \"itemId\": \"22c461a2-eff9-4b72-8d22-7c2792ce2c2d\",\n        \"quantity\": 1\n    }]\n  }]\n)\n.then(data => console.log(JSON.stringify(data)))\n.catch(error => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: BigCommerce Promotion: 15% Off Except Sale Items\nDESCRIPTION: This code snippet configures a BigCommerce promotion that provides a 15% discount on all items in the cart except for those in the \"sale\" category (category ID 18). It uses the `not` operator to exclude items matching the specified category. The promotion is set to apply automatically (`redemption_type`: \"AUTOMATIC\") and includes notifications for different stages of the shopping experience.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/index.mdx#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"15% off store except sale items\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"percentage_amount\": \"15\"\n          },\n          \"items\": {\n            \"not\": {\n              \"categories\": [\n                18\n              ]\n            }\n          }\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": true\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"15% off store except sale\",\n      \"locations\": [\n        \"HOME_PAGE\",\n        \"PRODUCT_PAGE\",\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"15% off store except sale\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"15% off store except sale\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response from Creating a Cart\nDESCRIPTION: Sample JSON response returned after successfully creating a cart. It includes details about the cart, currency, and line items added.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"d4e978c2-bdcf-41b0-a49b-fecf4f5223c1\",\n  \"customerId\": 0,\n  \"email\": \"\",\n  \"currency\": {\n    \"name\": \"US Dollars\",\n    \"code\": \"USD\",\n    \"symbol\": \"$\",\n    \"decimalPlaces\": 2\n  },\n  \"isTaxIncluded\": false,\n  \"baseAmount\": 274.5,\n  \"discountAmount\": 0,\n  \"cartAmount\": 274.5,\n  \"coupons\": [],\n  \"discounts\": [\n    ...\n  ],\n  \"lineItems\": {\n    \"physicalItems\": [\n      {\n        \"id\": \"57a877e0-d898-47d0-910d-88656e8dee0c\",\n        \"parentId\": null,\n        \"variantId\": 66,\n        \"productId\": 86,\n        \"sku\": \"ABS\",\n        \"name\": \"[Sample] Able Brewing System\",\n        \"url\": \"https://{store_url}/all/able-brewing-system/\",\n        \"quantity\": 1,\n      ...\n        \"extendedSalePrice\": 225,\n        \"isShippingRequired\": true,\n        \"type\": \"physical\",\n        \"giftWrapping\": null\n      },\n      {\n        \"id\": \"22c461a2-eff9-4b72-8d22-7c2792ce2c2d\",\n        \"parentId\": null,\n        \"variantId\": 67,\n        \"productId\": 88,\n        \"sku\": \"CC3C\",\n        \"name\": \"[Sample] Chemex Coffeemaker 3 Cup\",\n        \"url\": \"https://{store_url}/all/chemex-coffeemaker-3-cup/\",\n        \"quantity\": 1,\n      ...\n        \"extendedSalePrice\": 49.5,\n        \"isShippingRequired\": true,\n        \"type\": \"physical\",\n        \"giftWrapping\": null\n      }\n    ],\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Custom Fields with GraphQL in BigCommerce\nDESCRIPTION: This GraphQL query retrieves the first two custom fields for a product with entityId 113. It returns the custom field ID, name, and value for each custom field.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    product (entityId: 113) {\n      customFields (first: 2) {\n        edges {\n          node {\n            entityId\n            name\n            value\n          }\n        }\n      } \n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Store Metafield with Global ID - GraphQL Mutation\nDESCRIPTION: GraphQL mutation to create a store metafield using the store's Global ID. This approach explicitly specifies the resource ID in the mutation variables.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/metafields/store-metafields.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation Metafield($input: CreateMetafieldInput!) {\n     metafield {\n       createMetafield(input: $input) {\n           metafield {\n               id\n               description\n               key\n               namespace\n               permissionSet\n               resourceId\n               value\n               ownerClientId\n           }\n       }\n   }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"input\":{\n       \"namespace\": \"Warehouse Locations\",\n       \"key\": \"Location\",\n       \"value\": \"4HG\",\n       \"permissionSet\": \"APP_ONLY\",\n       \"resourceId\": \"bc/store/store/1001197568\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Shipping Consignment to Checkout with GraphQL Mutation\nDESCRIPTION: This GraphQL mutation adds a shipping consignment to a checkout. It requires the checkout entity ID, shipping address, and line item details as input variables.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/graphql-storefront.mdx#2025-04-16_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation addCheckoutShippingConsignments($addCheckoutShippingConsignmentsInput: AddCheckoutShippingConsignmentsInput!) {\n  checkout {\n    addCheckoutShippingConsignments(input: $addCheckoutShippingConsignmentsInput) {\n      checkout {\n        entityId\n        shippingConsignments {\n          entityId\n          availableShippingOptions {\n            entityId\n          }\n          selectedShippingOption {\n            entityId\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"addCheckoutShippingConsignmentsInput\": {\n    \"checkoutEntityId\": \"812ece1a-da23-46eb-ab6b-c2ee210aae54\",\n    \"data\": {\n      \"consignments\": [\n        {\n          \"address\": {\n            \"firstName\": \"Joe\",\n            \"lastName\": \"Blogs\",\n            \"email\": \"joe@example.com\",\n            \"company\": \"BlogIndustries\",\n            \"address1\": \"123 Yar st\",\n            \"city\": \"RWC\",\n            \"stateOrProvince\": \"CA\",\n            \"stateOrProvinceCode\": \"CA\",\n            \"countryCode\": \"US\",\n            \"postalCode\": \"94061\",\n            \"phone\": \"6501231212\",\n            \"shouldSaveAddress\": false\n          },\n          \"lineItems\": [\n            {\n              \"lineItemEntityId\": \"0a281902-d548-4d2e-a930-dc2aae9bfc39\",\n              \"quantity\": 1\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Widget Template using BigCommerce Widgets API\nDESCRIPTION: This HTTP POST request creates a new widget template with a simple text schema and HTML template. It requires an API access token with 'content modify' scope.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/versioning.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /stores/{{store_hash}}/v3/content/widget-templates\nHost: api.bigcommerce.com\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"name\": \"Simple Text\",\n  \"schema\": [\n    {\n      \"type\": \"tab\",\n      \"label\": \"Content\",\n      \"sections\": [\n        {\n          \"settings\": [\n            {\n              \"type\": \"text\",\n              \"label\": \"Text Content\",\n              \"id\": \"textContent\",\n              \"typeMeta\": {\n                \"maxLength\": 1000\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"template\": \"<h1>{{textContent}}</h1>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Query Popular Brands\nDESCRIPTION: GraphQL query to retrieve a list of popular brands with their entity IDs, counts, names, and paths.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    popularBrands {\n      edges {\n        node {\n          entityId\n          count\n          name\n          path\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Shipping Promotion for Multiple Product Purchases with Free Shipping (JSON)\nDESCRIPTION: This JSON request creates a shipping promotion that offers free shipping to all zones when customers buy two of product X and two of product Y. The promotion is time-limited and applies automatically.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/shipping.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy two of X, buy two of Y and get free shipping to all zones\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"shipping\": {\n          \"free_shipping\": true,\n          \"zone_ids\": \"*\"\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": false,\n      \"currency_code\": \"AUD\",\n      \"condition\": {\n        \"and\": [\n          {\n            \"cart\": {\n              \"items\": {\n                \"products\": [\n                  118\n                ]\n              },\n              \"minimum_quantity\": 2\n            }\n          },\n          {\n            \"cart\": {\n              \"items\": {\n                \"variants\": [\n                  134\n                ]\n              },\n              \"minimum_quantity\": 2\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"notifications\": [],\n  \"stop\": false,\n  \"status\": \"ENABLED\",\n  \"start_date\": \"2019-02-06T05:00:00+00:00\",\n  \"end_date\": \"2019-02-09T04:59:59+00:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cart with Customer ID in BigCommerce\nDESCRIPTION: This HTTP request creates a cart associated with a customer account. It includes product details, pricing information, customer ID, and channel ID to ensure proper routing in transactional emails.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/abandoned-carts.mdx#2025-04-16_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/carts\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"base_amount\": 25,\n  \"cart_amount\": 25,\n  \"channel_id\": 773240,\n  \"currency\": {\n    \"code\": \"USD\"\n  },\n  \"customer_id\": 2,\n  \"discount_amount\": 0,\n  \"line_items\": [\n      {\n        \"coupon_amount\": 0,\n        \"coupons\": [],\n        \"discount_amount\": 0,\n        \"discounts\": [],\n        \"extended_list_price\": 25,\n        \"extended_sale_price\": 25,\n        \"id\": \"5572bddf-f24d-4f4a-a1b6-29d4519494a6\",\n        \"image_url\": \"https://cdn11.bigcommerce.com/s-hg3tj17dfi/product_images/attribute_rule_images/8_thumb_1629748882.png\",\n        \"is_mutable\": true,\n        \"is_require_shipping\": true,\n        \"list_price\": 25,\n        \"name\": \"Short sleeve t-shirt\",\n        \"parent_id\": null,\n        \"product_id\": 114,\n        \"quantity\": 1,\n        \"sale_price\": 25,\n        \"sku\": \"5F6D82D6569C0_8579\",\n        \"taxable\": true,\n        \"url\": \"https://next-storefront2.mybigcommerce.com/ladies-short-sleeve-t-shirt/\",\n        \"variant_id\": 85\n      }\n    ],\n  \"locale\": \"en\",\n  \"tax_included\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Relative Adjustment with Buffer\nDESCRIPTION: Example of making a relative inventory adjustment with a safety buffer consideration.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/inventory-adjustments.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/inventory/adjustments/relative\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"reason\": \"single relative adjustment operation\",\n  \"items\": [\n    {\n      \"location_id\": 1,\n      \"variant_id\": 74,\n      \"quantity\": -20\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Shipments for an Order in BigCommerce (HTTP)\nDESCRIPTION: Illustrates how to create multiple shipments for a single order, each with a different shipping address. It includes examples for specifying the order address ID and shipping items.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/index.mdx#2025-04-16_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}}/v2/orders/{{order_id}}/shipments\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"order_address_id\": \"123\",\n  \"shipping_provider\": \"usps\",\n  \"items\": [\n    {\n      \"order_product_id\": 2,\n      \"quantity\": 1\n    }\n  ]\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}}/v2/orders/{{order_id}}/shipments\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"order_address_id\": \"456\",\n  \"shipping_provider\": \"\",\n  \"items\": [\n    {\n      \"order_product_id\": 5,\n      \"quantity\": 1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Variant Inventory Query Response\nDESCRIPTION: Example JSON response showing inventory data for multiple variants of a product, including SKUs and stock levels.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/inventory/queries.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n      \"site\": {\n        \"products\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"entityId\": 113,\n                \"name\": \"Example Product 1\",\n                \"variants\": {\n                  \"edges\": [\n                    {\n                      \"node\": {\n                        \"entityId\": 95,\n                        \"sku\": \"ABC-1111-PI\",\n                        \"inventory\": {\n                          \"aggregated\": {\n                            \"availableToSell\": 11,\n                            \"warningLevel\": 20\n                          }\n                        }\n                      }\n                    },\n                    {\n                      \"node\": {\n                        \"entityId\": 96,\n                        \"sku\": \"ABC-1111-PU\",\n                        \"inventory\": {\n                          \"aggregated\": {\n                            \"availableToSell\": 0,\n                            \"warningLevel\": 0\n                          }\n                        }\n                      }\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel via REST API\nDESCRIPTION: HTTP request and response example for creating a new channel using the BigCommerce Channels API. The channel is configured as a custom storefront platform.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/embedded-checkout/tutorial.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/channels\nX-Auth-Token: {{access_token}}\nAccept: application/json\nContent-Type: application/json\n{\n  \"type\": \"storefront\",\n  \"platform\": \"custom\",\n  \"name\": \"My Custom Store\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 20266,\n    \"name\": \"My Custom Store\",\n    \"platform\": \"custom\",\n    \"type\": \"storefront\",\n    \"date_created\": \"2019-09-18T22:28:36Z\",\n    \"date_modified\": \"2019-09-18T22:28:36Z\",\n    \"external_id\": \"\",\n    \"is_enabled\": true\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cart Item Quantity with itemUpdate Method in JavaScript\nDESCRIPTION: Demonstrates how to use the itemUpdate method to change the quantity of an item in the cart, including validation and error handling.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncartUpdate($target) {\n  const itemId = $target.data('cartItemid');\n  const $el = $(`#qty-${itemId}`);\n  const oldQty = parseInt($el.val(), 10);\n  const maxQty = parseInt($el.data('quantityMax'), 10);\n  const minQty = parseInt($el.data('quantityMin'), 10);\n  const minError = $el.data('quantityMinError');\n  const maxError = $el.data('quantityMaxError');\n  const newQty = $target.data('action') === 'inc' ? oldQty + 1 : oldQty - 1;\n  // Does not quality for min/max quantity\n  if (newQty < minQty) {\n    return swal({\n        text: minError,\n        type: 'error',\n    });\n  } else if (maxQty > 0 && newQty > maxQty) {\n    return swal({\n        text: maxError,\n        type: 'error',\n    });\n  }\n\n  this.$overlay.show();\n\n  utils.api.cart.itemUpdate(itemId, newQty, (err, response) => {\n    this.$overlay.hide();\n\n    if (response.data.status === 'succeed') {\n      // if the quantity is changed \"1\" from \"0\", we have to remove the row.\n      const remove = (newQty === 0);\n\n      this.refreshContent(remove);\n    } else {\n      $el.val(oldQty);\n      swal({\n          text: response.data.errors.join('\\n'),\n          type: 'error',\n      });\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: BigCommerce User Profile and Permissions\nDESCRIPTION: Detailed user profile structure showing personal information, locale settings, permissions array, last login timestamp, and account status. Includes comprehensive list of platform permissions and access rights.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/graphql-account/users.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"node\": {\n    \"id\": \"bc/account/user/{user_id}\",\n    \"email\": \"tamara.test@example.com\",\n    \"firstName\": \"Tamara\",\n    \"lastName\": \"Test\",\n    \"locale\": \"en\",\n    \"lastLoginAt\": \"2022-11-19T09:10:25Z\",\n    \"permissions\": [...],\n    \"status\": \"ACTIVE\",\n    \"updatedAt\": \"2021-11-03T15:09:49Z\",\n    \"apps\": {\n      \"edges\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Price List to Customer Group via HTTP PUT Request\nDESCRIPTION: Shows how to assign a price list to a customer group using an HTTP PUT request, including discount rules configuration.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/pricing/price-lists.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v2/customer_groups/{{customer_group_id}}\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\nContent-Type: application/json\n\n[\n  {\n    \"id\": 1,\n    \"name\": \"VIP Price List\",\n    \"is_default\": false,\n    \"category_access\": {\n      \"type\": \"all\"\n    },\n    \"discount_rules\": [\n      {\n        \"type\": \"price_list\",\n        \"price_list_id\": 2\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Filtered Location Query\nDESCRIPTION: The JSON response returned when querying location data with filters. It contains the detailed information about a single location matching the filter criteria, including its address, operating hours, and other attributes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/locations/queries.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"inventory\": {\n      \"locations\": {\n        \"edges\": [\n          {\n            \"node\": {\n              \"entityId\": 2,\n              \"code\": \"BC-LOCATION-2\",\n              \"label\": \"ExampleLocation\",\n              \"description\": \"Open only on weekdays\",\n              \"typeId\": \"PHYSICAL\",\n              \"distance\": null,\n              \"timeZone\": \"Etc/UTC\",\n              \"address\": {\n                \"city\": \"San Francisco\",\n                \"address1\": \"123 Example St\",\n                \"address2\": \"\",\n                \"postalCode\": \"94105\",\n                \"stateOrProvince\": \"CA\",\n                \"email\": \"email@example.com\",\n                \"phone\": \"\",\n                \"latitude\": 37.7877,\n                \"longitude\": 122.4026,\n                \"countryCode\": \"US\"\n              },\n              \"operatingHours\": {\n                \"sunday\": {\n                  \"open\": false,\n                  \"opening\": \"00:00\",\n                  \"closing\": \"00:00\"\n                },\n                \"monday\": {\n                  \"open\": true,\n                  \"opening\": \"09:00\",\n                  \"closing\": \"17:00\"\n                },\n                \"tuesday\": {\n                  \"open\": true,\n                  \"opening\": \"09:00\",\n                  \"closing\": \"17:00\"\n                },\n                \"wednesday\": {\n                  \"open\": true,\n                  \"opening\": \"09:00\",\n                  \"closing\": \"17:00\"\n                },\n                \"thursday\": {\n                  \"open\": true,\n                  \"opening\": \"09:00\",\n                  \"closing\": \"17:00\"\n                },\n                \"friday\": {\n                  \"open\": true,\n                  \"opening\": \"09:00\",\n                  \"closing\": \"17:00\"\n                },\n                \"saturday\": {\n                  \"open\": false,\n                  \"opening\": \"00:00\",\n                  \"closing\": \"00:00\"\n                }\n              },\n              \"specialHours\": []\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Channel Customer Settings Response\nDESCRIPTION: Example JSON response showing customer settings for a channel, including global login permissions and customer group settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/customers/channel-specific-customers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"allow_global_logins\": true,\n    \"customer_group_settings\": {\n      \"default_customer_group_id\": null,\n      \"guest_customer_group_id\": null\n    },\n    \"privacy_settings\": {\n      \"ask_shopper_for_tracking_consent\": null,\n      \"ask_shopper_for_tracking_consent_on_checkout\": null,\n      \"policy_url\": null\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Action and Condition for Buy One Get One Promotion\nDESCRIPTION: This JSON snippet shows the configuration of the action and condition for a 'Buy One Get One Free' promotion. It includes the gift item action and the cart condition.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy One Get One Free\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"gift_item\": {\n          \"product_id\": 174,\n          \"quantity\": 1\n        }\n      },\n      \"apply_once\": false,\n      \"stop\": false,\n      \"currency_code\": \"USD\",\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"products\": [\n              174\n            ]\n          },\n          \"minimum_quantity\": 1\n        }\n      }\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"Buy one Le Parfait Jar, Get One Free!\",\n      \"locations\": [\n        \"HOME_PAGE\",\n        \"PRODUCT_PAGE\",\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"You are eligible for a free Le Parfait Jar.\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"Congratulations, you have received a free Le Parfait Jar.\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ],\n  \"stop\": false,\n  \"start_date\": \"2019-01-28T00:00:00+00:00\",\n  \"status\": \"ENABLED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Buy One Get One Free Promotion Configuration in JSON\nDESCRIPTION: This JSON snippet shows the complete configuration for a Buy One Get One Free promotion, including action, condition, notifications, and additional settings such as start date and status.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy One Get One Free\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"gift_item\": {\n          \"product_id\": 174,\n          \"quantity\": 1\n        }\n      },\n      \"apply_once\": false,\n      \"stop\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"products\": [\n              174\n            ]\n          },\n          \"minimum_quantity\": 1\n        }\n      }\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"Buy one Le Parfait Jar, Get One Free!\",\n      \"locations\": [\n        \"HOME_PAGE\",\n        \"PRODUCT_PAGE\",\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"You are eligible for a free Le Parfait Jar.\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"Congratulations, you have received a free Le Parfait Jar.\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ],\n  \"stop\": false,\n  \"start_date\": \"2019-01-28T00:00:00+00:00\",\n  \"status\": \"ENABLED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cart Redirect URL Response\nDESCRIPTION: Example JSON response containing cart, checkout, and embedded checkout URLs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/carts.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cart_url\": \"https://store-id30h7ohwf.mybigcommerce.com/cart.php?action=load&id=bc218c65-7a32-4ab7-8082-68730c074d02&token=aa958e2b7922035bf3339215d95d145ebd9193deb36ae847caa780aa2e003e4b\",\n  \"checkout_url\": \"https://store-id30h7ohwf.mybigcommerce.com/cart.php?action=loadInCheckout&id=bc218c65-7a32-4ab7-8082-68730c074d02&token=aa958e2b7922035bf3339215d95d145ebd9193deb36ae847caa780aa2e003e4b\",\n  \"embedded_checkout_url\": \"https://store-id30h7ohwf.mybigcommerce.com/cart.php?embedded=1&action=loadInCheckout&id=bc218c65-7a32-4ab7-8082-68730c074d02&token=aa958e2b7922035bf3339215d95d145ebd9193deb36ae847caa780aa2e003e4b\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Locations for Buy Online, Pick up in Store via BigCommerce API\nDESCRIPTION: This snippet demonstrates how to create pickup locations using the BigCommerce API. It includes details such as location code, label, operating hours, address, and special hours. The request is sent as a POST to the /v3/inventory/locations endpoint.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/locations\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"code\": \"DTOWN_PARK_ST\",\n    \"label\": \"Downtown Location - Park Lane\",\n    \"description\": \"Customer-facing additional details about this location\",\n    \"managed_by_external_source\": false,\n    \"type_id\": \"PHYSICAL\",\n    \"enabled\": true,\n    \"operating_hours\": {\n      \"sunday\": {\n        \"open\": false,\n        \"opening\": \"00:00\",\n        \"closing\": \"00:00\"\n      },\n      \"monday\": {\n        \"open\": true,\n        \"opening\": \"09:00\",\n        \"closing\": \"17:00\"\n      },\n      \"tuesday\": {\n        \"open\": true,\n        \"opening\": \"09:00\",\n        \"closing\": \"17:00\"\n      },\n      \"wednesday\": {\n        \"open\": true,\n        \"opening\": \"09:00\",\n        \"closing\": \"17:00\"\n      },\n      \"thursday\": {\n        \"open\": true,\n        \"opening\": \"09:00\",\n        \"closing\": \"17:00\"\n      },\n      \"friday\": {\n        \"open\": true,\n        \"opening\": \"09:00\",\n        \"closing\": \"17:00\"\n      },\n      \"saturday\": {\n        \"open\": false,\n        \"opening\": \"00:00\",\n        \"closing\": \"00:00\"\n      }\n    },\n    \"time_zone\": \"Etc/UTC\",\n    \"address\": { \n      \"email\": \"jane.doe@bigcommerce.com\",\n      \"address1\": \"100 Park Lane\",\n      \"address2\": \"\",\n      \"city\": \"Austin\",\n      \"state\": \"TX\",\n      \"zip\": \"78726\",\n      \"country_code\": \"US\",\n      \"phone\": \"+15128654500\",\n      \"geo_coordinates\": {\n        \"longitude\": -97.849560,\n        \"latitude\": 30.404500\n      } \n    },\n    \"storefront_visibility\": true,\n    \"special_hours\": [\n      {\n        \"label\": \"Christmas Eve\",\n        \"date\": \"2022-12-25\",\n        \"open\": true,\n        \"opening\": \"00:00\",\n        \"closing\": \"09:00\",\n        \"all_day\": false,\n        \"annual\": false\n      }\n    ]  \n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Webhook in BigCommerce\nDESCRIPTION: This snippet shows how to create a GraphQL webhook using a mutation. It includes the GraphQL mutation, variables, and the expected response.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/https-webhook-overview.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateHTTPWebhook($input:CreateHttpsWebhookInput!) {\n  webhook {\n    createHttpsWebhook(input: $input) {\n      webhook {\n        id\n        scope\n        destination\n        status\n\tisActive\n        createdAt\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  \"input\": {\n    \n\t\"scope\": \"store/order/updated\",\n \t\"destination\": \"https://6676-8-29-231-139.ngrok-free.app/\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"webhook\": {\n            \"createHttpsWebhook\": {\n                \"webhook\": {\n                    \"id\": \"bc/store/webhook/26713462\",\n                    \"scope\": \"store/order/updated\",\n                    \"destination\": \"https://yourapp.example.com/\",\n                    \"status\": ACTIVE,\n\t\t    \"isActive\": true,\n                    \"createdAt\": \"2023-07-05T20:14:05Z\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Brand Percentage Discount\nDESCRIPTION: Example of creating a promotion that applies a 15% discount to items from specific brands while excluding certain categories. Uses AND/NOT operators for complex targeting rules.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/brand.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Apply a $ or % discount to each item in one or more brands\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"percentage_amount\": \"15\"\n          },\n          \"strategy\": \"LEAST_EXPENSIVE\",\n          \"as_total\": false,\n          \"include_items_considered_by_condition\": false,\n          \"items\": {\n            \"and\": [\n              {\n                \"brands\": [\n                  38,\n                  37,\n                  36,\n                  35\n                ]\n              },\n              {\n                \"not\": {\n                  \"categories\": [\n                    19\n                  ]\n                }\n              }\n            ]\n          }\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": false\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"Get 15% off in Common Good, Chemex, Barr-Co and Kinfolk.\\r\\n<div>&nbsp;</div>\",\n      \"locations\": [\n        \"HOME_PAGE\",\n        \"PRODUCT_PAGE\",\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"You are eligible for 15% off!\\r\\n<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"Congratulations you have earned 15% off.\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ],\n  \"stop\": false,\n  \"status\": \"ENABLED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Faceted Search Events in JavaScript\nDESCRIPTION: This function sets up event listeners for faceted search interactions. It handles both facet clicks and range submissions, emitting corresponding events for each action.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/events.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsearchEvents() {\n  this.$body.on('click', '[data-faceted-search-facet]', (event) => {\n        this.emit('facetedSearch-facet-clicked', event);\n  });\n\n  this.$body.on('submit', '[data-faceted-search-range]', (event) => {\n\t\tthis.emit('facetedSearch-range-submitted', event);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods\nDESCRIPTION: Request to get available payment methods for an order. This is the first step in processing payments using stored cards.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/orders.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{store_hash}/v3/payments/methods\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Querying Location Data with GraphQL\nDESCRIPTION: GraphQL query to fetch detailed store location data including entity ID, address, operating hours, and special hours. Returns data for enabled and visible store locations with complete location details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/locations/queries.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  inventory {\n    locations {\n      edges {\n        node {\n          entityId\n          code\n          label\n          description\n          typeId\n          timeZone\n          address {\n            city\n            address1\n            address2\n            postalCode\n            stateOrProvince\n            email\n            phone\n            latitude\n            longitude\n            countryCode\n          }\n          operatingHours {\n            sunday {\n              open\n              opening\n              closing\n            }\n            monday {\n              open\n              opening\n              closing\n            }\n            tuesday {\n              open\n              opening\n              closing\n            }\n            wednesday {\n              open\n              opening\n              closing\n            }\n            thursday {\n              open\n              opening\n              closing\n            }\n            friday {\n              open\n              opening\n              closing\n            }\n            saturday {\n              open\n              opening\n              closing\n            }\n          }\n          specialHours {\n            label\n            open\n            opening\n            closing\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to BigCommerce Webhook using GraphQL\nDESCRIPTION: This GraphQL mutation creates a Pub/Sub webhook subscription for BigCommerce. It specifies the destination topic, sets the webhook as active, and defines the scope for store metafield creation events.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/pubsub-webhooks-overview.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\n\nmutation Webhook {\n  webhook {\n    createPubSubWebhook(\n        input: {\n            destination: \"projects/projectName/topics/webhookName\"\n            isActive: true\n            scope: \"store/metafield/created\"\n        }\n    ) {\n        errors {\n            ... on AlreadyExistsError {\n                message\n            }\n            ... on ValidationError {\n                message\n            }\n            ... on PubSubTopicNotFoundError {\n                topic\n                message\n            }\n\n        }\n        webhook {\n            destination\n            clientId\n            createdAt\n            id\n            scope\n            status\n            updatedAt\n                 }\n          }\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Product Featured Flag for Channel - GraphQL Mutation\nDESCRIPTION: GraphQL mutation to set whether a product should be featured in a specific storefront channel. The operation overrides global store settings using setProductIsFeatured mutation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-attributes.mdx#2025-04-16_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\nmutation ($input: SetProductIsFeaturedInput!) {\n  product {\n    setProductIsFeatured (input: $input) {\n      product {\n        overridesForChannel (channelId: \"bc/store/channel/2\") {\n          isFeatured\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"channelId\": \"bc/store/channel/2\",\n    \"productId\": \"bc/store/product/111\",\n    \"data\": {\n      \"isFeatured\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Store Pickup Locations with BigCommerce Inventory API\nDESCRIPTION: This HTTP request updates an existing pickup location with modified details. The request requires proper authentication and the location ID must be specified. The payload includes all location attributes that need to be updated.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/locations\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"id\": 2,\n    \"code\": \"DTOWN_PARKST\",\n    \"label\": \"Downtown Location - Park Lane\",\n    \"description\": \"Customer-facing additional details about this location.\",\n    \"managed_by_external_source\": false,\n    \"type_id\": \"PHYSICAL\",\n    \"enabled\": true,\n    \"operating_hours\": {\n      \"sunday\": {\n        \"open\": false,\n        \"opening\": \"00:00\",\n        \"closing\": \"00:00\"\n      },\n      \"monday\": {\n        \"open\": true,\n        \"opening\": \"09:00\",\n        \"closing\": \"17:00\"\n      },\n      \"tuesday\": {\n        \"open\": true,\n        \"opening\": \"09:00\",\n        \"closing\": \"17:00\"\n      },\n      \"wednesday\": {\n        \"open\": true,\n        \"opening\": \"09:00\",\n        \"closing\": \"17:00\"\n      }\n    },\n    \"time_zone\": \"Etc/UTC\",\n    \"address\": {\n      \"email\": \"jane.doe@bigcommerce.com\",\n      \"address1\": \"100 Park Lane\",\n      \"address2\": \"\",\n      \"city\": \"Austin\",\n      \"state\": \"TX\",\n      \"zip\": \"78726\",\n      \"country_code\": \"US\",\n      \"phone\": \"+15128654500\",\n      \"geo_coordinates\": {\n        \"longitude\": -97.849560,\n        \"latitude\": 30.404500\n      }\n    },\n    \"storefront_visibility\": true,\n    \"special_hours\": [\n      {\n        \"label\": \"Christmas Eve\",\n        \"date\": \"2022-12-25\",\n        \"open\": true,\n        \"opening\": \"00:00\",\n        \"closing\": \"09:00\",\n        \"all_day\": false,\n        \"annual\": false\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Cart with Customer ID in BigCommerce Server to Server API\nDESCRIPTION: This request creates a cart with a specific customer ID and line items. Using the customer_id parameter allows you to link customers to their specific pricing and discounts, but note that price-affecting changes can invalidate the cart.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-management.mdx#2025-04-16_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{store_hash}/v3/carts\nX-Auth-Token: {{access_token}}\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"customer_id\": 12,\n  \"line_items\": [\n    {\n      \"quantity\": 5,\n      \"product_id\": 191\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Product Modifier Options for a Locale using GraphQL in BigCommerce\nDESCRIPTION: This GraphQL mutation sets product modifier option information for a specific locale within a storefront channel. It allows setting the modifier option name and values, overriding global store information. The mutation includes various modifier types like checkbox, text field, dropdown, and more.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($input: SetProductModifiersInformationInput!) {\n  product {\n    setProductModifiersInformation (input: $input) {\n      product {\n        id\n        modifiers {\n          edges {\n            node {\n              id\n              displayName\n              ... on CheckboxProductModifier {\n                overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\"}) {\n                  displayName\n                  fieldValue\n                }\n              }\n              ... on TextFieldProductModifier {\n                overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\"}) {\n                  displayName\n                  defaultValue\n                }\n              }\n              ... on MultilineTextFieldProductModifier {\n                overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\"}) {\n                  displayName\n                  defaultValue\n                }\n              }\n              ... on NumbersOnlyTextFieldProductModifier {\n                overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\"}) {\n                  displayName\n                  defaultValueFloat: defaultValue\n                }\n              }\n              ... on DropdownProductModifier {\n                overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\"}) {\n                  displayName\n                  values {\n                    id\n                    label\n                  }\n                }\n              }\n              ... on RadioButtonsProductModifier {\n                overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\"}) {\n                  displayName\n                  values {\n                    id\n                    label\n                  }\n                }\n              }\n              ... on RectangleListProductModifier {\n                overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\"}) {\n                  displayName\n                  values {\n                    id\n                    label\n                  }\n                }\n              }\n              ... on SwatchProductModifier {\n                overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\"}) {\n                  displayName\n                  values {\n                    id\n                    label\n                  }\n                }\n              }\n              ... on FileUploadProductModifier {\n                overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\"}) {\n                  displayName\n                }\n              }\n              ... on DateFieldProductModifier {\n                overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\"}) {\n                  displayName\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Products Information for a Specific Locale in GraphQL Storefront API\nDESCRIPTION: This GraphQL query demonstrates how to request product information for a specific locale (French) using the @shopperPreferences directive. The query retrieves the resolved locale, list of enabled locales for the channel, and localized product names.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/multi-language-support.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://your_store.example.com/graphql\nAuthorization: Bearer {token}\nAccept: application/json\nContent-Type: application/json\n\nquery @shopperPreferences(locale:\"fr\") { # specific requested locale via directive\n  shopperPreferences {\n    locale {\n      resolved # resolved locale\n    }\n  }\n  site {\n    settings {\n      locales { # list of enabled locales\n        code\n        isDefault\n      }\n    }\n    products {\n      edges {\n        node {\n          name # localized name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bundling and Uploading a Theme with Stencil CLI\nDESCRIPTION: Command to bundle a theme and upload it to the associated BigCommerce store in one process.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/upload.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nstencil push\n```\n\n----------------------------------------\n\nTITLE: Calling the getCart() Function to Retrieve Cart Contents\nDESCRIPTION: Example of how to call the getCart() function to retrieve the contents of a cart, including full details of line items.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngetCart('/api/storefront/carts?include=lineItems.digitalItems.options,lineItems.physicalItems.options');\n```\n\n----------------------------------------\n\nTITLE: CatalogProductOptionValue Interface Definition in BigCommerce GraphQL\nDESCRIPTION: Interface definition for CatalogProductOptionValue which provides common fields for multiple choice values in BigCommerce's GraphQL API. This interface defines the basic properties all option values must implement.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/variants.mdx#2025-04-16_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n# Fields common among multiple choice values \n\ninterface CatalogProductOptionValue {\n  entityId: Int!\n  label: String!\n  isDefault: Boolean!`\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Email Template via BigCommerce API\nDESCRIPTION: This HTTP request shows how to update an email template using the BigCommerce API. It includes the template type, body content, translations, and subject in the request body.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/emails/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPUT /stores/{{STORE_HASH}}/v3/marketing/email-templates/account_reset_password_email\nHost: api.bigcommerce.com\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"type_id\": \"account_reset_password_email\",\n  \"body\": \"<!DOCTYPE html> <html lang=\\\"en\\\"> <head>     <meta charset=\\\"UTF-8\\\">     <title>Title</title> </head> <body> <p>     {{lang \\\"reset_password\\\" name=store.name}} </p> <br/> <br/> <a href='{{account.reset_password_link}}'>     {{account.reset_password_link}} </a>  </body> </html>\",\n  \"translations\": [\n    {\n      \"locale\": \"en\",\n      \"keys\": {\n        \"reset_password\": \"To change your customer account password at {name} please click this link or copy and paste it into your browser:\"\n      }\n    }\n  ],\n  \"subject\": \"Reset your password at {{store.name}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Widget Template with GraphQL Query in BigCommerce\nDESCRIPTION: HTTP POST request to create a widget template with a GraphQL query for product data. The template includes settings for product selection and HTML for displaying product information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/graphql-templates.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/content/widget-templates\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n \n{\n  \"name\": \"Product Widget\",\n  \"storefront_api_query\": \"query Product($productId: Int = 1, $activeCurrencyCode: currencyCode) { site { product(entityId: $productId) { name entityId prices(currencyCode: $activeCurrencyCode) { price { currencyCode value } } defaultImage { url(width: 500, height: 500) } } } } \",\n  \"schema\": [\n    {\n      \"type\": \"hidden\",\n      \"settings\": [\n        {\n          \"type\": \"graphQl\",\n          \"id\": \"graphQueries\",\n          \"typeMeta\": {\n            \"mappings\": {\n              \"productId\": {\n                \"reads\": \"productId\",\n                \"type\": \"Int!\"\n              }\n            }\n          }\n        }\n      ]\n    },\n    {\n      \"type\": \"tab\",\n      \"label\": \"Content\",\n      \"sections\": [\n        {\n          \"label\": \"Product\",\n          \"settings\": [\n            {\n              \"type\": \"productId\",\n              \"label\": \"Product\",\n              \"id\": \"productId\",\n              \"default\": \"\",\n              \"typeMeta\": {\n                \"placeholder\": \"Search by name or SKU\"\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"template\": \"<div style=\\\"text-align:center\\\">\\n<h1>{{_.data.site.product.name}}</h1>\\n<div>\\n<img src=\\\"{{_.data.site.product.defaultImage.url}}\\\">\\n</div>\\n<div>\\n<p>${{_.data.site.product.prices.price.value}}</p>\\n</div>\\n</div>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a List Widget Template in JSON\nDESCRIPTION: This JSON snippet defines a widget template for creating a list where each item can have a different color. It uses Handlebars syntax to loop through list items and apply styling.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"List\",\n  \"template\": \"<ul>{{#each list_items}}<li style='color:{{color}};'>{{text}}</li>{{/each}}</ul>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting B2B Edition Management V3 API Token using JavaScript Fetch\nDESCRIPTION: Uses JavaScript's Fetch API to make a POST request to the B2B Edition API for obtaining a Management V3 API token. This function includes store hash, user credentials, and optional parameters in the request body.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/b2b-edition/authentication/hosted-auth.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function() {\n  try {\n    let authToken = await fetch({\n      method: \"post\",\n      url: \"https://api-b2b.bigcommerce.com/api/io/auth/backend\",\n      body:{\n        storeHash: \"theStoreHash\",\n        email: \"b2bEditionControlPanelUserLoginEmail\",\n        password: \"b2bEditionControlPanelUserPassword\",\n        channelId: 1,\n        name: \"optionalTokenName\",\n        beginAt: 1000,\n        endAt: 17219304,\n      }\n    });\n    return authToken;\n  } catch(error) {\n    console.log(error);\n    throw error;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Products with Search Term in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to search for products using a search term ('Sample') and sort the returned products alphabetically (A_TO_Z). It returns the first two products matching the search criteria.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/products/faceted-textual-search.mdx#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    search {\n      searchProducts(\n        filters: {\n          searchTerm: \"Sample\"\n        }\n        sort: A_TO_Z\n      ) {\n        products(first: 2) {\n          edges {\n            node {\n              entityId\n              name\n              prices {\n                price {\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Data with Handlebars Conditionals and Iterators\nDESCRIPTION: Example of using Handlebars template syntax to conditionally render a navigation bar and iterate through sub-pages. This demonstrates how to access dynamic page data in Stencil templates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/theme-objects.mdx#2025-04-16_snippet_2\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if page.sub_pages}}\n<nav class=\"navBar navBar--sub\">\n    <ul class=\"navBar-section account-navigation\">\n    {{#each page.sub_pages}}\n        <li class=\"navBar-item\"><a class=\"navBar-action\" href=\"{{url}}\">{{title}}</a></li>\n    {{/each}}\n    </ul>\n</nav>\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Adding Product with Option and Modifier to Cart using REST Management API in HTTP\nDESCRIPTION: Shows how to add a product with both an option and a modifier to the cart using the REST Management API. This example uses option_id and option_value for a radio button (option) and a text field (modifier).\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-management.mdx#2025-04-16_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{store_hash}/v3/carts/{cartId}/items\nX-Auth-Token: {{access_token}}\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"line_items\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 101,\n      \"option_selections\": [\n        {\n          \"option_id\": 231,\n          \"option_value\": 456\n        },\n        {\n          \"option_id\": 123,\n          \"option_value\": \"Hello!\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel with POST Request in BigCommerce\nDESCRIPTION: This code demonstrates how to create a channel on a merchant's store after the OAuth flow by sending a POST request to the Create a Channel endpoint. This allows merchants to assign product listings to the storefront.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/guide/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/channels\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"name\": \"Example POS Channel\",\n  \"type\": \"pos\",\n  \"platform\": \"custom\",\n  \"external_id\": \"\",\n  \"status\": \"connected\",\n  \"is_listable_from_ui\": true,\n  \"is_visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Tracking Script to Order Status Update Email Template in Handlebars\nDESCRIPTION: This code example shows how to add a tracking script to the Order Status Update email template. It includes conditional logic to display tracking information or a message if no tracking numbers are available.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/emails/examples.mdx#2025-04-16_snippet_3\n\nLANGUAGE: handlebars\nCODE:\n```\n <th>\n   <h2>{{lang 'tracking_title'}}</h2>\n   {{#if order.tracking}}\n      <ul class=\"tracking\">\n         {{#each order.tracking}}\n            <li>\n               <p>\n                  <a href=\"{{link}}\" target=\"_blank\">\n                     {{#if id}}\n                        {{id}}\n                     {{else}}\n                        {{lang 'tracking_label'}}\n                     {{/if}}\n                  </a>\n                  {{#if shipping_method}}\n                     ({{shipping_method}})\n                  {{/if}}\n               </p>\n            </li>\n         {{/each}}\n      </ul>\n   {{else}}\n      <p class=\"tracking\">{{lang 'no_tracking_numbers'}}</p>\n   {{/if}}\n</th>\n```\n\n----------------------------------------\n\nTITLE: Getting Payment Methods in BigCommerce\nDESCRIPTION: Makes a GET request to retrieve available payment methods for an order, including stored instruments like cards and PayPal accounts.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/payments/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/payments/methods?order_id={{ORDER_ID}}\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Updating a Subscriber using BigCommerce V3 API (JavaScript/HTTP)\nDESCRIPTION: This snippet shows how to update an existing subscriber using the BigCommerce V3 API. It includes the necessary headers and JSON payload structure for a POST request to a specific subscriber ID, allowing updates to email, name, channel, consents, and source.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/customers/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/customers/subscribers/1\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"email\": \"string@test.com\",\n  \"first_name\": \"string\",\n  \"last_name\": \"string\",\n  \"channel_id\": 1,\n  \"consents\": [],\n  \"source\": \"order\"\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Order Details with Fetch API in JavaScript\nDESCRIPTION: Shows how to fetch and log order details using the Fetch API. This snippet makes a GET request to the /api/storefront/order endpoint with the order ID to retrieve order information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-management.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('Log Order');\nfetch('/api/storefront/order/' + checkout.order.id, {\n  credentials: 'include'\n}).then(function (response) {\n  return response.json();\n}).then(function (myJson) {\n  console.log(myJson);\n}).catch(function (error) {\n  console.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing BigCommerce SDK in JavaScript Applications\nDESCRIPTION: Shows how to import the BigCommerce SDK at the top of an application's main index. The SDK keeps apps synchronized with the control panel and must be executed in the browser to function properly.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/best-practices.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'bigcommerce-app-sdk-js';\n```\n\n----------------------------------------\n\nTITLE: Creating Cart with Product Modifier using REST Management API in HTTP\nDESCRIPTION: Demonstrates how to create a cart with a product modifier using the REST Management API. This example shows a POST request to the /v3/carts endpoint with a product that includes a modifier.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-management.mdx#2025-04-16_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{store_hash}/v3/carts\nX-Auth-Token: {{access_token}}\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"line_items\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 1001,\n      \"option_selections\": [\n        {\n          \"option_id\": 123,\n          \"option_value\": \"Hello!\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Brand List Page in JSON\nDESCRIPTION: JSON configuration for limiting the number of brands displayed on the brand list page to 5.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"brands\": {\n    \"limit\": 5\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finalizing an Order with BigCommerce API\nDESCRIPTION: Shows how to finalize an order creation by completing the checkout process. This converts the checkout to an order and returns the order ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_30\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/checkouts/{{checkout_id}}/orders\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Conditional Free Shipping and Order Discount Promotion\nDESCRIPTION: JSON response after creating a promotion with conditional free shipping and percentage-based cart discount. The response includes the promotion ID, creation details, rule configurations with conditions, and promotion metadata like status and date information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/multiple-rules.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 27,\n    \"name\": \"Buy two of product X, get free shipping to all zones, and 10% off order\",\n    \"created_from\": \"api\",\n    \"customer\": {\n      \"group_ids\": [],\n      \"minimum_order_count\": 0,\n      \"excluded_group_ids\": [],\n      \"segments\": null\n    },\n    \"rules\": [\n      {\n        \"action\": {\n          \"shipping\": {\n            \"free_shipping\": true,\n            \"zone_ids\": \"*\"\n          }\n        },\n        \"apply_once\": true,\n        \"stop\": false,\n        \"condition\": {\n          \"cart\": {\n            \"items\": {\n              \"products\": [\n                118\n              ]\n            },\n            \"minimum_quantity\": 2\n          }\n        }\n      },\n      {\n        \"action\": {\n          \"cart_value\": {\n            \"discount\": {\n              \"percentage_amount\": \"10\"\n            }\n          }\n        },\n        \"apply_once\": true,\n        \"stop\": false,\n        \"condition\": {\n          \"cart\": {\n            \"items\": {\n              \"products\": [\n                130\n              ]\n            },\n            \"minimum_quantity\": 2\n          }\n        }\n      }\n    ],\n    \"notifications\": [],\n    \"stop\": false,\n    \"currency_code\": \"USD\",\n    \"redemption_type\": \"AUTOMATIC\",\n    \"shipping_address\": null,\n    \"current_uses\": 0,\n    \"max_uses\": null,\n    \"start_date\": \"2022-07-21T16:17:01+00:00\",\n    \"end_date\": null,\n    \"status\": \"ENABLED\",\n    \"schedule\": null,\n    \"can_be_used_with_other_promotions\": true\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Price List Assignment via HTTP POST Request\nDESCRIPTION: Demonstrates how to create a price list assignment using an HTTP POST request, associating a price list with a customer group and channel.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/pricing/price-lists.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/pricelists/assignments\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\nContent-Type: application/json\n\n[\n  {\n    \"customer_group_id\": 3,\n    \"price_list_id\": 2,\n    \"channel_id\": 1\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Cart with Products\nDESCRIPTION: Examples of creating a cart via API, including options for both guest and customer-specific carts with product line items.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/embedded-checkout/tutorial.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/carts\nX-Auth-Token: {{access_token}}\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"channel_id\": 20266,\n  \"line_items\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 80,\n      \"variant_id\": 64\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customer_id\": 42,\n  \"line_items\": [\n    {\n      \"quantity\": 5,\n      \"product_id\": 191\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: PUT Request for Updating Category Contextual Filters\nDESCRIPTION: Makes a PUT request to update contextual filter settings for a category, including customizing display names, visibility, and collapse states for multiple filter types.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/contextual-filters.mdx#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPUT /stores/{{STORE_HASH}}/v3/settings/search/filters/contexts\nHost: api.bigcommerce.com\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"data\": [\n      {\n        \"id\": \"U2l6ZQ==\",\n        \"display_name\": \"Kitchen Size\",\n        \"type\": \"product\",\n        \"display_product_count\": false,\n        \"collapsed_by_default\": true,\n        \"items_to_show\": 5,\n        \"sort_by\": \"alpha\",\n        \"is_enabled\": false\n      },\n      {\n        \"id\": \"cHJpY2U=\",\n        \"display_name\": \"Product Price\",\n        \"type\": \"price\",\n        \"collapsed_by_default\": false,\n        \"is_enabled\": true\n      },\n      {\n        \"id\": \"cmF0aW5n\",\n        \"display_name\": \"Item Rating\",\n        \"type\": \"rating\",\n        \"collapsed_by_default\": true,\n        \"is_enabled\": true\n      },\n      {\n        \"id\": \"YnJhbmQ=\",\n        \"display_name\": \"Brand\",\n        \"type\": \"brand\",\n        \"sort_by\": \"alpha\",\n        \"items_to_show\": 10,\n        \"collapsed_by_default\": false,\n        \"display_product_count\": true,\n        \"is_enabled\": true\n      },\n      {\n        \"id\": \"Q29sb3I=\",\n        \"display_name\": \"Color\",\n        \"type\": \"product\",\n        \"display_product_count\": true,\n        \"collapsed_by_default\": false,\n        \"items_to_show\": 10,\n        \"sort_by\": \"alpha\",\n        \"is_enabled\": true\n      },\n      {\n        \"id\": \"Ym9vbA==\",\n        \"display_name\": \"Other\",\n        \"type\": \"other\",\n        \"is_enabled\": true,\n        \"display_product_count\": true,\n        \"collapsed_by_default\": true,\n        \"show_free_shipping_filter\": true,\n        \"show_is_featured_filter\": true,\n        \"show_in_stock_filter\": true\n      }\n    ],\n    \"context\": {\n      \"channel_id\": 1,\n      \"category_id\": 21\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Redirect URLs Response Object from BigCommerce Cart Creation\nDESCRIPTION: This JSON snippet shows the redirect_urls object returned when creating a cart with the 'include=redirect_urls' parameter. It contains the URLs needed to redirect customers to the BigCommerce hosted checkout, cart page, or embedded checkout.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/checkout.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"redirect_urls\": {\n    \"cart_url\": \"https://store-id30h7ohwf.mybigcommerce.com/cart.php?action=load&id=1687e279-6813-44a8-aee7-1cbe4c01297c&token=cb6d14d60b724cd844b3f21ccaaaa69d66f3fdb327baea08dfb176c15e0dcc4f\",\n    \"checkout_url\": \"https://store-id30h7ohwf.mybigcommerce.com/cart.php?action=loadInCheckout&id=1687e279-6813-44a8-aee7-1cbe4c01297c&token=cb6d14d60b724cd844b3f21ccaaaa69d66f3fdb327baea08dfb176c15e0dcc4f\",\n    \"embedded_checkout_url\": \"https://store-id30h7ohwf.mybigcommerce.com/cart.php?embedded=1&action=loadInCheckout&id=1687e279-6813-44a8-aee7-1cbe4c01297c&token=cb6d14d60b724cd844b3f21ccaaaa69d66f3fdb327baea08dfb176c15e0dcc4f\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Currency-Specific Promotion via BigCommerce API\nDESCRIPTION: API request example demonstrating how to create a promotion that applies only when USD is the selected transaction currency. The example shows a $20 discount on garden materials category items.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/currency-specific-promotions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/promotions\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"name\": \"20 USD dollar off all Garden material\",\n  \"currency_code\": \"USD\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"fixed_amount\": \"20\"\n          },\n          \"items\": {\n            \"categories\": [\n              19\n            ]\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Meta Keys in config.json - JSON\nDESCRIPTION: This snippet illustrates the required keys in the `meta` object of the `config.json` file. It defines attributes such as price, author details, support URLs, and features, which are necessary for proper theme configuration.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/global-styles.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"meta\": {\n    \"price\": 15000, // in cents; non-negative integer, minimum 0\n    \"author_name\": \"eCommerce Themes, Inc.\", // Must be a string, not null\n    \"author_email\": \"support@example.com\", // Must be a string, should be a valid email address, not null\n    \"author_support_url\": \"http://example.com/contactus\", //  Must be a string, should be a valid URL, not null\n    \"documentation_url\": \"http://example.com/guide\", // Must be a string, limit of 255 characters, not null\n    \"composed_image\": \"path/to/composed.png\", // Must be a string path to the composed-image file\n    \"features\": [ \n      // Array of feature strings, all of which must be in the list enumerated here:\n          // https://github.com/bigcommerce/theme-registry/blob/master/app/schemas/theme_config.json#L33\n      \"fully_responsive\" // Must include at least one feature, and no duplicate entries\n    ]\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Product Stock Levels with V3 Catalog API\nDESCRIPTION: This JSON payload is used to update a product's inventory levels by sending a PUT request to the V3 Catalog API endpoint. It sets the current inventory level to 100 and the warning level to 10.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"inventory_level\": 100,\n  \"inventory_warning_level\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Schema for And Item Matcher in BigCommerce Cart Condition\nDESCRIPTION: This code snippet shows the schema for an \"AndItemMatcher\" within a BigCommerce cart condition. It illustrates how you can combine different item matchers (e.g., `BrandItemMatcher`, `CategoriesItemMatcher`) using the \"and\" operator to create more specific item selection criteria. This allows you to target items that meet multiple characteristics simultaneously.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/index.mdx#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Rule\": {\n    \"Condition\": {\n      \"CartCondition\": {\n        \"minimum_quantity\": \"number\",\n        \"ItemMatcher\": {\n          \"AndItemMatcher\": [{\n            \"BrandItemMatcher(SimpleItemMatcher)\": [],\n            \"CategoriesItemMatcher(SimpleItemMatcher)\": []\n          }]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Translations for Theme Variations in config.json\nDESCRIPTION: This JSON snippet demonstrates how to add translations for theme variation descriptions in the config.json file. It includes examples for 'Light' and 'Dark' variations with translations in English, Chinese, and French.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/translations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n \"variations\": [\n   {\n     \"name\": \"Light\",\n     \"id\": \"light\",\n     \"meta\": {\n       \"desktop_screenshot\": \"desktop_light.png\",\n       \"mobile_screenshot\": \"mobile_light.png\",\n       \"description\": \"This is the light variation for this theme!\",\n       \"demo_url\": \"https://cornerstone-light-demo.mybigcommerce.com\",\n       \"optimized_for\": [\n         \"multi_purpose\",\n         \"mobile_tablet_desktop\",\n         \"sales_discounts\",\n         \"large_catalog\"\n       ],\n       \"industries\": [\n         \"home_garden\"\n       ],\n       \"translations\": {\n         \"i18n.description\": {\n           \"default\": \"This is the light variation for this theme!\",\n           \"en\": \"This is the light variation for this theme!\",\n           \"zh-CN\": \"这是这个主题的轻微变化！\",\n           \"fr-FR\": \"C'est la variation de lumière pour ce thème!\"\n         }\n       }\n     },\n     \"images\": {},\n     \"settings\": {}\n   },\n   {\n     \"name\": \"Dark\",\n     \"id\": \"dark\",\n     \"meta\": {\n       \"desktop_screenshot\": \"desktop_light.png\",\n       \"mobile_screenshot\": \"mobile_light.png\",\n       \"description\": \"This is the dark variation for this theme!\",\n       \"demo_url\": \"https://cornerstone-light-demo.mybigcommerce.com\",\n       \"optimized_for\": [\n         \"multi_purpose\",\n         \"mobile_tablet_desktop\",\n         \"sales_discounts\",\n         \"large_catalog\"\n       ],\n       \"industries\": [\n         \"home_garden\"\n       ],\n       \"translations\": {\n         \"i18n.description\": {\n           \"default\": \"This is the dark variation for this theme!\",\n           \"en\": \"This is the dark variation for this theme!\",\n           \"zh-CN\": \"这是这个主题的黑暗变体！\",\n           \"fr-FR\": \"C'est la variation sombre pour ce thème!\"\n         }\n       }\n     },\n     \"images\": {},\n     \"settings\": {}\n   }\n ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Shared Modifier Options at Global Level using GraphQL\nDESCRIPTION: This mutation sets global shared modifier information for the entire store, which channels inherit by default. It allows setting the display name and values for existing modifiers.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\nmutation ($input: SetSharedProductModifiersInformationInput!) {\n  sharedProductModifiers {\n    setSharedProductModifiersInformation (input: $input) {\n      sharedProductModifiers {\n        id\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"data\": {\n      \"modifiers\": [\n        {\n          \"modifierId\": \"bc/store/sharedProductModifier/2\",\n          \"data\": {\n            \"rectangleList\": {\n              \"displayName\": \"Button type\",\n              \"values\": [\n                {\n                  \"valueId\": \"bc/store/sharedProductModifierValue/107\",\n                  \"label\": \"Large buttons\"\n                },\n                {\n                  \"valueId\": \"bc/store/sharedProductModifierValue/108\",\n                  \"label\": \"Small buttons\"\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shopper Profiles for a Segment using BigCommerce API\nDESCRIPTION: This HTTP GET request retrieves all shopper profiles belonging to a specific segment. It requires the store hash and segment ID as parameters, and an access token for authentication.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/segments/user-guide.mdx#2025-04-16_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/segments/{{segmentId}}/shopper-profiles\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for BigCommerce App\nDESCRIPTION: Initial configuration of the .env file containing client credentials and authentication callback URL for a BigCommerce app. Includes placeholders for app client ID, secret, and authentication callback URL using ngrok.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-connect.mdx#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nCLIENT_ID={app client id}\nCLIENT_SECRET={app secret}\n\nAUTH_CALLBACK=https://{ngrok_url}/api/auth\n\n# Most users do not need to change this\nAPI_URL=api.bigcommerce.com\n```\n\n----------------------------------------\n\nTITLE: Updating Pickup Consignment in BigCommerce API\nDESCRIPTION: HTTP PUT request to update pickup consignment details for an order. Includes payload with updated pickup method information and location attributes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/orders.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v2/orders/{{order_id}}\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"consignments\": {\n    \"pickups\": [\n      {\n        \"id\": 13,\n        \"pickup_method_id\": 1,\n        \"pickup_method_display_name\": \"Pickup Method 1 name - override\",\n        \"collection_instructions\": \"Pickup Method 1 instructions - override\",\n        \"collection_time_description\": \"Pickup Method 1 time - override\",\n        \"location\": {\n          \"name\": \"Location 1 - override\",\n          \"code\": \"LOCATION-1 - override\",\n          \"address_line_1\": \"123 Main Street - override\",\n          \"address_line_2\": \"Suite 101 - override\",\n          \"city\": \"Austin - override\",\n          \"state\": \"Texas - override\",\n          \"postal_code\": \"78726 - override\",\n          \"country_alpha2\": \"US\",\n          \"email\": \"location1_override@example.com\",\n          \"phone\": \"+1 111-111-1111 - override\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Paginated System Logs with BigCommerce API\nDESCRIPTION: Makes a GET request to retrieve system logs with pagination parameters. Uses page=2 and limit=2 to fetch the third and fourth oldest entries from the system logs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/settings/logs.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/store/systemlogs?page=2&limit=2\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Querying Product Custom Fields with GraphQL in BigCommerce\nDESCRIPTION: This GraphQL query retrieves custom fields for a specific product. It fetches global store information and overrides for a specified channel locale. The query includes details such as field ID, name, value, and visibility for both global and channel-specific contexts.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-custom-fields.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\nquery {\n  store {\n    product(id: \"bc/store/product/111\") {\n      customFields {\n        edges {\n          node {\n            id\n\n            # For the global store\n            name\n            value\n\n            # For the channel locale\n            overrides (context: { channelId: \"bc/store/channel/1\", locale: \"en-US\" }) {\n              edges {\n                node {\n                  ... on ProductCustomFieldOverridesForChannelLocale {\n                    name\n                    value\n                    isVisible\n                    context {\n                      channelId\n                      locale\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook with Node.js Google Cloud Function\nDESCRIPTION: This snippet sets up an HTTP function in Node.js to verify incoming webhooks. It encodes the client secret from environment variables, logs webhook headers and payload, and uses the StandardWebhooks library for verification.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/https-webhook-overview.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst functions = require('@google-cloud/functions-framework');\nconst { Webhook } = require('standardwebhooks');\n\n// Fetch the client secret from environment variables and encode it in base64\nconst client_secret = process.env.CLIENT_SECRET;\nconst encoded_client_secret = Buffer.from(client_secret).toString('base64');\n\nfunctions.http('helloHttp', (req, res) => {\n\n    try {\n        const webhook_headers = req.headers;\n        console.log(webhook_headers);\n\n        const webhook_payload = req.rawBody;\n        console.log(webhook_payload);\n        console.log(typeof(webhook_payload));\n\n        // Use the encoded client secret\n        const wh = new Webhook(encoded_client_secret);\n        console.log(JSON.stringify(wh.verify(webhook_payload, webhook_headers)));\n    } catch (error) {\n        console.error(error);\n    }\n\n    res.send(`Success`);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Absolute Inventory Adjustment in BigCommerce\nDESCRIPTION: Example of making an absolute inventory adjustment via PUT request to set inventory to a specific value. Shows how to adjust inventory for a single variant at a specific location.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/inventory-adjustments.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/inventory/adjustments/absolute\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"reason\": \"absolute adjustment example\",\n  \"items\": [\n    {\n      \"location_id\": 1,\n      \"variant_id\": 74,\n      \"quantity\": 100\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Query Product Image Information in BigCommerce GraphQL\nDESCRIPTION: GraphQL query to retrieve detailed product image information including both global store data and channel-specific locale overrides. Returns image properties like URLs, alt text, thumbnail status, and sort order.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-images.mdx#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  store {\n    product(id: \"bc/store/product/111\") {\n      images {\n        edges {\n          node {\n            id        \n            altText    \n            isThumbnail  \n            sortOrder  \n            urlStandard \n            urlZoom\n            addedToProduct\n            overrides( context: {channelId: \"bc/store/channel/1\", locale: \"en\"}) {\n              edges {\n                node {\n                  ... on ProductImagesOverridesForChannelLocale {\n                    context {\n                      channelId\n                      locale\n                    }\n                    altText\n                    isThumbnail\n                    sortOrder\n                    addedToProduct\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Relative Inventory Adjustment with BigCommerce API (HTTP)\nDESCRIPTION: This snippet demonstrates how to make a POST request to create a relative inventory adjustment. It includes the necessary headers, endpoint, and JSON payload with the adjustment details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/inventory-adjustments.mdx#2025-04-16_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/inventory/adjustments/relative\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"reason\": \"single relative adjustment operation\",\n  \"items\": [\n    {\n      \"location_id\": 1,\n      \"variant_id\": 74,\n      \"quantity\": -41\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Express Webhook Listener Implementation\nDESCRIPTION: Node.js Express application code that sets up a webhook listener and integrates with ngrok for tunnel creation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/tutorial.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst ngrok = require('ngrok')\nconst app = express();\n\n// when there's a post request to /webhooks...\napp.post('/webhooks', function (req, res) {\n\n    // respond with 200 OK\n    res.send('OK');\n});\n\n// listen to port 3000\napp.listen(3000, function () {\n    console.log('Listening for webhooks on port 3000');\n\n    // start ngrok and create a tunnel to port 3000\n    (async function() {\n        const url = await ngrok.connect(3000);\n    })();\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Cart Item Add Event in JavaScript\nDESCRIPTION: This code shows how to use the 'cart-item-add' event hook. It prevents the default action when an item is added to the cart, allowing for custom behavior implementation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/events.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*  \n * Import all product-specific js\n */\n[...]\nimport utils from '@bigcommerce/stencil-utils';\n[...]\naddProductToCart() {\n    utils.hooks.on('cart-item-add', (event) => {\n        event.preventDefault();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Forward Pagination Example in GraphQL\nDESCRIPTION: This query demonstrates forward pagination by retrieving the first 5 products. It includes complete pageInfo with hasNextPage and hasPreviousPage flags to determine available pagination directions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/index.mdx#2025-04-16_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\n query {\n  site {\n    products(first: 5) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        cursor\n        node {\n          entityId\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Category Tree for a Specific Channel using BigCommerce REST API\nDESCRIPTION: This HTTP request retrieves the category tree associated with a specific channel (channel ID 3) using the BigCommerce Catalog API. The request includes authentication via X-Auth-Token and specifies the channel ID as a query parameter to filter results.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/multi-storefront/guide.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/trees?channel_id:in=3\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Creating an Order with Pickup Consignment via BigCommerce API\nDESCRIPTION: This snippet shows how to create a new order with pickup consignment details using the BigCommerce API. It includes the POST request with order and consignment information, and the expected JSON response structure.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_35\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v2/orders\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"billing_address\": {\n    \"state\": \"Washington\",\n    \"zip\": \"98006\",\n    \"country\": \"United States\"\n  },\n  \"consignments\": {\n    \"pickups\": [\n      {\n        \"pickup_method_id\": 1,\n        \"pickup_method_display_name\": \"Pick Up\",\n        \"collection_instructions\": \"Bring your ID\",\n        \"collection_time_description\": \"9am - 6pm\",\n        \"location\": {\n          \"name\": \"Location 1\",\n          \"code\": \"LOCATION-1\",\n          \"address_line_1\": \"123 Main Street\",\n          \"address_line_2\": \"Suite 101\",\n          \"city\": \"Austin\",\n          \"state\": \"Texas\",\n          \"postal_code\": \"78726\",\n          \"country_alpha2\": \"US\",\n          \"email\": \"location1@example.com\",\n          \"phone\": \"+1 111-111-1111\"\n        },\n        \"line_items\": [\n          {\n            \"name\": \"Fog Linen Chambray Towel - Beige Stripe\",\n            \"quantity\": 3,\n            \"price_ex_tax\": 0,\n            \"price_inc_tax\": 0\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1234000049,\n  ...\n  \"billing_address\": {\n    \"first_name\": \"\",\n    \"last_name\": \"\",\n    \"company\": \"\",\n    \"street_1\": \"\",\n    \"street_2\": \"\",\n    \"city\": \"\",\n    \"state\": \"Washington\",\n    \"zip\": \"98006\",\n    \"country\": \"United States\",\n    \"country_iso2\": \"US\",\n    \"phone\": \"\",\n    \"email\": \"\",\n    \"form_fields\": []\n  },\n  \"consignments\": {\n    \"url\": \"https://api.bigcommerce.com/stores/o8ertuc7vw/v2/orders/1234000049/consignments\",\n    \"resource\": \"/orders/1234000049/consignments\"\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a getCart() Helper Function in JavaScript\nDESCRIPTION: Defines a getCart() function that sends a GET request to retrieve the contents of a cart. It takes the API route as a parameter.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCart(route) {\n  return fetch(route, {\n    method: \"GET\",\n    credentials: \"same-origin\"\n  })\n  .then(response => response.json())\n  .then(result => console.log(result))\n  .catch(error => console.error(error));\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Product URL for a Locale with GraphQL\nDESCRIPTION: This GraphQL mutation sets a product's URL for a specific locale within a storefront channel, overriding the global store information. It requires the product ID, channel ID, locale, and the new URL path.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-url.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($input: SetProductUrlPathInput!) {\n  product {\n    setProductUrlPath (input: $input) {\n      product {\n        id\n        overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"uk\" }) {\n          urlPath {\n            path\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"localeContext\": {\n      \"channelId\": \"bc/store/channel/2\",\n      \"locale\": \"uk\"\n    },\n    \"data\": {\n      \"path\": \"/overrides-product-111\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Locale-Specific Storefront Details\nDESCRIPTION: GraphQL mutation to set product storefront details for a specific locale within a channel. These settings override the global store values for the specified locale.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-attributes.mdx#2025-04-16_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($input: SetProductStorefrontDetailsInput!) {\n  product {\n    setProductStorefrontDetails (input: $input) {\n      product {\n        overridesForLocale (localeContext: {locale: \"fr\", channelId: \"bc/store/channel/2\"}) {\n          storefrontDetails {\n            warranty\n            availabilityDescription\n            searchKeywords\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"localeContext\": {\n      \"locale\": \"fr\",\n      \"channelId\": \"bc/store/channel/2\"\n    },\n    \"data\": {\n      \"warranty\": \"Garantie un an\",\n      \"availabilityDescription\": \"Disponible dans un mois\",\n      \"searchKeywords\": \"meilleure vente\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling GET /load Callback in BigCommerce Single-Click App\nDESCRIPTION: Example of a GET request to the /load endpoint of a BigCommerce single-click app. This callback is triggered when a user loads the app from the store control panel.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/callbacks.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://your_app.example.com/load?signed_payload_jwt={header_b64.payload_claims_b64.signature_b64}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Using join Helper in Handlebars for Array to String Conversion\nDESCRIPTION: The join helper combines array elements into a single string with a specified separator. An optional limit parameter can be provided.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_80\n\nLANGUAGE: handlebars\nCODE:\n```\n{{join values separator}}\n```\n\n----------------------------------------\n\nTITLE: Adding a Product Video in BigCommerce API\nDESCRIPTION: This snippet shows how to add a YouTube video as a product video using the BigCommerce API. It requires the YouTube video ID and allows setting a title, description, and sort order.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products/{{product_id}}/videos\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"title\": \"BigCommerce Mug Video\",\n  \"description\": \"Video Describing the Mug\",\n  \"sort_order\": 1,\n  \"type\": \"youtube\",\n  \"video_id\": \"R12345677\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customer Login Mutation\nDESCRIPTION: GraphQL mutation for customer login with email and password variables, returning customer details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/graphql-storefront.mdx#2025-04-16_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nmutation Login($email: String!, $pass: String!) {\n  login(email: $email, password: $pass) {\n    customer {\n      entityId\n      firstName\n      email\n      taxExemptCategory\n      storeCredit {\n        currencyCode\n        value\n      }\n      formFields {\n        entityId\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Styled Text Widget in BigCommerce JSON\nDESCRIPTION: This JSON configuration sets up a styled text widget with specific text content, styling properties, and layout settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/examples.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Simple Text with Styling\",\n  \"widget_configuration\": {\n    \"text\": \"Simple Text with Styling\",\n    \"_.id\": \"1\",\n    \"color\": \"white\",\n    \"background_color\": \"#3C1F8C\",\n    \"font_size\": \"45px\",\n    \"font_weight\": \"bold\",\n    \"font_family\": \"'Palatino Linotype', 'Book Antiqua', Palatino, serif\",\n    \"text_align\": \"center\",\n    \"margin_right\": \"50px\",\n    \"margin_left\": \"50px\",\n    \"padding_top\": \"25px\",\n    \"padding_bottom\": \"25px\"\n  },\n  \"widget_template_uuid\": \"your-template-uuid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Storefront Details\nDESCRIPTION: GraphQL query to retrieve both global and locale-specific storefront details for a product. Shows both default store values and any locale overrides.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-attributes.mdx#2025-04-16_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  store {\n    product (id: \"bc/store/product/111\") {\n      storefrontDetails {\n        warranty\n        availabilityDescription\n        searchKeywords\n      }\n      overridesForLocale (localeContext: {locale: \"fr\", channelId: \"bc/store/channel/2\"}) {\n        storefrontDetails {\n          warranty\n          availabilityDescription\n          searchKeywords\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Product Custom Fields Overrides with GraphQL Mutation\nDESCRIPTION: GraphQL mutation to remove custom field overrides for a specific channel locale. Takes product ID and context data as input parameters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-custom-fields.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($input: RemoveProductCustomFieldsOverridesInput!) {\n  product {\n    removeProductCustomFieldsOverrides(input: $input) {\n      product {\n        customFields {\n          edges {\n            node {\n              id\n              name\n              value\n              overrides (context: { channelId: \"bc/store/channel/1\", locale: \"en-US\" }) {\n                edges {\n                  node {\n                    ... on ProductCustomFieldOverridesForChannelLocale {\n                      name\n                      value\n                      isVisible\n                      context {\n                        channelId\n                        locale\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"data\": [\n      {\n        \"customFieldId\": \"bc/store/productCustomField/1\",\n        \"channelLocaleContextData\": {\n          \"context\": {\n            \"channelId\": \"bc/store/channel/1\",\n            \"locale\": \"en-US\"\n          },\n          \"attributes\": [\"NAME\", \"VALUE\", \"IS_VISIBLE\"]\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Information\nDESCRIPTION: Shows how to retrieve both global and locale-specific product information in a single query. Returns basic product details including name and description for both global and overridden values.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-basic-info.mdx#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  store {\n    products (filters: {ids: [\"bc/store/product/111\"]}) {\n      edges {\n        node {\n          id\n          basicInformation {\n            name\n            description\n          }\n          overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\" }) {\n            basicInformation {\n              name\n              description\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Percentage Off Promotion in BigCommerce API\nDESCRIPTION: Example JSON request for creating a promotion that gives 75% off a specific product when another product is purchased. The promotion is configured to apply automatically without requiring a code.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/product.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"US 15% off a specific product\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"apply_once\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"products\": [\n              129\n            ]\n          },\n          \"minimum_quantity\": 1\n        }\n      },\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"percentage_amount\": \"75\"\n          },\n          \"items\": {\n            \"products\": [\n              130\n            ]\n          },\n          \"quantity\": 1,\n          \"include_items_considered_by_condition\": true\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Order via Orders API\nDESCRIPTION: Example of creating an order using the Orders API with status_id set to 0 (Incomplete). Includes customer details, billing address, shipping address, and product information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/payments/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v2/orders\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"status_id\": 0,\n  \"customer_id\": 11,\n  \"billing_address\": {\n    \"first_name\": \"Jane\",\n    \"last_name\": \"Does\",\n    \"company\": \"\",\n    \"street_1\": \"123 Main Street\",\n    \"street_2\": \"\",\n    \"city\": \"Austin\",\n    \"state\": \"Texas\",\n    \"zip\": \"78751\",\n    \"country\": \"United States\",\n    \"country_iso2\": \"US\",\n    \"email\": \"janedoe@email.com\"\n  },\n  \"shipping_addresses\": [\n    {\n      \"first_name\": \"Trishy\",\n      \"last_name\": \"Test\",\n      \"company\": \"Acme Pty Ltd\",\n      \"street_1\": \"666 Sussex St\",\n      \"street_2\": \"\",\n      \"city\": \"Anywhere\",\n      \"state\": \"Some State\",\n      \"zip\": \"12345\",\n      \"country\": \"United States\",\n      \"country_iso2\": \"US\",\n      \"phone\": \"\",\n      \"email\": \"janedoe@email.com\"\n    }\n  ],\n  \"products\": [\n    {\n      \"name\": \"BigCommerce Poster\",\n      \"quantity\": 1,\n      \"price_inc_tax\": 10.98,\n      \"price_ex_tax\": 10\n    },\n    {\n      \"name\": \"BigCommerce Poster II\",\n      \"quantity\": 1,\n      \"price_inc_tax\": 50,\n      \"price_ex_tax\": 45\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Relative Inventory Adjustment\nDESCRIPTION: Example of making a relative inventory adjustment via POST request to modify inventory by a relative amount.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/inventory-adjustments.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/inventory/adjustments/relative\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"reason\": \"single relative adjustment operation\",\n  \"items\": [\n    {\n      \"location_id\": 1,\n      \"variant_id\": 74,\n      \"quantity\": -25\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Response for FOLLOW Redirect Behavior\nDESCRIPTION: This JSON response shows the result of querying a route with FOLLOW redirect behavior. Both the redirect information and the target entity details are returned in the response.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/routes.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"route\": {\n        \"redirect\": {\n          \"__typename\": \"Redirect\",\n          \"to\": {\n            \"__typename\": \"ProductRedirect\",\n            \"entityId\": 132,\n            \"path\": \"/austin-coffee-cup/\"\n          },\n          \"toUrl\": \"https://store.mybigcommerce.com/austin-coffee-cup/\"\n        },\n        \"node\": {\n            \"id\": \"UHJvZHVjdDoxMzI=\",\n            \"name\": \"Austin Coffee Cup\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spend Threshold Brand Discount\nDESCRIPTION: API request and response for setting up a promotion where spending $200 on brand ID 36 items gives 10% off those items. Includes automatic redemption and notification configuration.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/brand.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Spend X amount in brand Y and get X% off in brand Y\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"percentage_amount\": \"10\"\n          },\n          \"strategy\": \"LEAST_EXPENSIVE\",\n          \"as_total\": true,\n          \"include_items_considered_by_condition\": true,\n          \"items\": {\n            \"brands\": [\n              36\n            ]\n          }\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"brands\": [\n              36\n            ]\n          },\n          \"minimum_spend\": \"200\",\n          \"minimum_quantity\": 1\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Checkout SDK Script\nDESCRIPTION: HTML script tag to load the BigCommerce Checkout SDK loader.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/checkout-sdk/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://checkout-sdk.bigcommerce.com/v1/loader.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Querying Product URL with GraphQL\nDESCRIPTION: This GraphQL query retrieves a product's URL, including both global information for the store and overrides for a specific locale within a storefront channel. It requires the product ID, channel ID, and locale.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-url.mdx#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  store {\n    product (id: \"bc/store/product/111\") {\n      id\n      urlPath {\n        path\n      }\n      overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"uk\" }) {\n        urlPath {\n          path\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Inventory Webhook in BigCommerce\nDESCRIPTION: Example request showing how to create a webhook that subscribes to inventory settings changes. The webhook will monitor events across all storefront channels and requires a secure HTTPS destination.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/inventory-location.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/hooks\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"scope\": \"store/channel/*/inventory/product/settings_changed\",\n  \"destination\": \"https://placeholder.ngrok.io/webhooks\",\n  \"is_active\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Information Gathering Table for Unified Billing in Markdown\nDESCRIPTION: A markdown table listing the necessary values to collect for implementing Unified Billing, including authentication headers, partner ID, partner account UUID, application ID, and merchant account UUID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Value | Description | \n|:--------|:-----------|\n| Authentication headers | To authenticate API requests, visit the [account center](https://accounts.bigcommerce.com/tokens) and generate a new account-level API account. [Note the X-Auth-Token property](/docs/start/authentication) because you must include it in the request headers. You can't reaccess the credentials from this page, so save them somewhere safe. Use the following list of [OAuth scopes](/docs/integrations/apps/unified-billing#oauth-scopes) to inform the scopes you select for the API account. | \n| Partner ID | To retrieve the partner ID, sign in to the [partner portal (Impartner)](https://partners.bigcommerce.com/) and go to your account profile. |\n| Partner account UUID | To retrieve your partner account UUID, sign in to the [Developer portal](https://devtools.bigcommerce.com/my/apps) and copy the Account UUID from the top nav bar. | \n| Application ID | Create your app in the staging [developer portal](https://devtools.bigcommerce.com/my/apps) and record your application ID. Make sure to also input your partner information associated with the app, especially the partner ID from the [partner portal (Impartner)](https://partners.bigcommerce.com/). |\n| Merchant account UUID | To retrieve the merchant account UUID, send a request to the [Get Store Information](/docs/rest-management/store-information#get-store-information) endpoint and record the merchant's account_uuid from the response. |\n```\n\n----------------------------------------\n\nTITLE: Creating a Cart with API in HTTP\nDESCRIPTION: HTTP request example for creating a new cart using the BigCommerce REST API. The request includes a line item with quantity and product ID, and returns a cart ID that can be used in subsequent operations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/checkout.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/carts\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"line_items\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 97\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limit Retry Logic in PHP\nDESCRIPTION: Demonstrates how to implement a retry mechanism in PHP that respects rate limits. The code retrieves the reset time from the response header and pauses execution for the specified duration before retrying the request.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/api-docs/getting-started/api-rate-limits.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$milliseconds = $response->getHeader(\"X-Rate-Limit-Time-Reset-Ms\");\nusleep($milliseconds * 1000);\n```\n\n----------------------------------------\n\nTITLE: Requesting B2B Edition Storefront API Token using JavaScript Fetch\nDESCRIPTION: Uses JavaScript's Fetch API to make a GET request to the B2B Edition API for obtaining a Storefront API token. This asynchronous function handles the request and potential errors.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/b2b-edition/authentication/hosted-auth.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function() {\n  try {\n    let authToken = await fetch({\n      method: \"get\",\n      url: \"https://api-b2b.bigcommerce.com/api/io/auth/storefront\",\n      query:{\n        jwtToken: \"bigCommerce.currentCustomerResponse.jwtString\"\n      }\n    });\n    return authToken;\n  } catch(error) {\n    console.log(error);\n    throw error;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Most-Expensive-Item Brand Discount\nDESCRIPTION: API request and response for implementing a promotion that gives 50% off the most expensive item when buying two items from brand ID 36. Uses automatic redemption with most expensive item strategy.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/brand.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy two brand items and get the most expensive one at 50% off\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"apply_once\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"brands\": [\n              36\n            ]\n          },\n          \"minimum_quantity\": 2\n        }\n      },\n      \"action\": {\n        \"cart_items\": {\n          \"strategy\": \"MOST_EXPENSIVE\",\n          \"include_items_considered_by_condition\": true,\n          \"discount\": {\n            \"percentage_amount\": \"50\"\n          },\n          \"items\": {\n            \"brands\": [\n              36\n            ]\n          },\n          \"quantity\": 1\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: BigCommerce Cart Event Webhook Payload\nDESCRIPTION: Example payload for cart-related events like creation, updates, and deletion.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/cart/created\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"cart\",\n    \"id\": \"09346904-4175-44fd-be53-f7e598531b6c\"\n  },\n  \"hash\": \"352e4afc6dd3fc85ea26bfdf3f91852604d57528\",\n  \"created_at\": 1561482670,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Absolute Inventory Adjustment for Variants using BigCommerce API (HTTP)\nDESCRIPTION: This HTTP PUT request demonstrates how to make absolute adjustments to inventory quantities for multiple variants at a specific location. It includes the necessary headers and a JSON payload specifying the location, variant IDs, and new quantities.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/adjustments/absolute\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"items\": [\n    {\n      \"location_id\": 2,\n      \"variant_id\": 78,\n      \"quantity\": 5\n    },\n    {\n      \"location_id\": 2,\n      \"variant_id\": 79,\n      \"quantity\": 5\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Widget Template with POST Request to Widgets API\nDESCRIPTION: This HTTP request creates a new widget template using the Widgets API. The template defines the structure for a row of three images that will be used in the widget.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /stores/{{store_hash}}/v3/content/widget-templates\nHost: api.bigcommerce.com\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"name\": \"Header Images\",\n  \"template\": \"{{#each images}}<a href='{{image_url}}'><img src={{image_source}} style='width:33.3%'/></a>{{/each}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Update Customer Address Response Examples\nDESCRIPTION: Example JSON responses for the updateCustomerAddress mutation, showing both a successful update and an error response when the address doesn't exist.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/customers.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n# Success\n\n{\n  \"data\": {\n    \"customer\": {\n      \"updateCustomerAddress\": {\n        \"errors\": []\n      }\n    }\n  }\n}\n\n# Error\n# Address Does Not Exist\n\n{\n  \"data\": {\n    \"customer\": {\n      \"updateCustomerAddress\": {\n        \"errors\": [\n          {\n            \"__typename\": \"AddressDoesNotExistError\",\n            \"message\": \"An address with the supplied ID does not exist.\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Products Display Shortcode\nDESCRIPTION: The primary shortcode for displaying BigCommerce products on WordPress pages. Supports filtering by IDs, SKUs, categories, brands, and various product attributes. Includes pagination and sorting options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/content/shortcodes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shortcode\nCODE:\n```\n[bigcommerce_product id=\"11,13\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Cart via POST Request\nDESCRIPTION: Base HTTP request for creating a new cart using the BigCommerce Carts API endpoint.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/carts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/carts\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Setting Product Modifier Options GraphQL Mutation\nDESCRIPTION: GraphQL mutation for setting global product modifier information. The mutation accepts product ID and modifier data, allowing configuration of different modifier types like checkboxes, text fields, rectangle lists, and more.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($input: SetProductModifiersInformationInput!) {\n  product {\n    setProductModifiersInformation (input: $input) {\n      product {\n        id\n        modifiers {\n          edges {\n            node {\n              id\n              displayName\n              isRequired\n              isShared\n              ... on CheckboxProductModifier {\n                checkedByDefault\n                fieldValue\n              }\n              ... on TextFieldProductModifier {\n                defaultValue\n              }\n              ... on MultilineTextFieldProductModifier {\n                defaultValue\n              }\n              ... on NumbersOnlyTextFieldProductModifier {\n                defaultValueFloat: defaultValue\n              }\n              ... on DropdownProductModifier {\n                values {\n                  id\n                  label\n                  isDefault\n                }\n              }\n              ... on RadioButtonsProductModifier {\n                values {\n                  id\n                  label\n                  isDefault\n                }\n              }\n              ... on RectangleListProductModifier {\n                values {\n                  id\n                  label\n                  isDefault\n                }\n              }\n              ... on SwatchProductModifier {\n                values {\n                  id\n                  label\n                  isDefault\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Segment Based Discount in BigCommerce\nDESCRIPTION: Beta feature example showing how to create a 10% automatic discount for customers belonging to specific segments identified by segment IDs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/customer.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"10% off for customers who belong to segment 1 or segment 2\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"customer\": {\n    \"segments\": {\n      \"isd\": [\n        \"61fd72bc-7400-4a7b-ac64-96c0d315c464\",\n        \"d52fb39d-6715-430e-a0bf-21a192d790f0\"\n      ]\n    }\n  },\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_value\": {\n          \"discount\": {\n            \"percentage_amount\": \"10\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating BODL Script via BigCommerce Scripts API\nDESCRIPTION: An HTTP POST request example demonstrating how to create a BODL tracking script through the BigCommerce Scripts API. The request includes script configuration options such as load method, location, visibility, consent category, and channel ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/hosted-analytics.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/content/scripts\nX-Auth-Token: {{ACCESS_TOKEN}}     //scope should include Checkout Content when adding script to a checkout page\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"name\": \"BODL script\",\n  \"description\": \"view BODL in the browser console\",\n  \"html\": \"<script> function subscribeOnBodlEvents() {console.log('run subscribeOnBodlEvents()'); window.dataLayer = window.dataLayer || []; if (!window || typeof window.bodlEvents === 'undefined' || typeof window.bodlEvents.checkout === 'undefined') {console.log('not defined'); return;} if (typeof window.bodlEvents.checkout.checkoutBegin === 'function') {window.bodlEvents.checkout.checkoutBegin((payload) => {console.log('window.bodlEvents.checkout.checkoutBegin ~ payload', payload);});} if (typeof window.bodlEvents.checkout.orderPurchased === 'function') {window.bodlEvents.checkout.orderPurchased((payload) => {console.log('window.bodlEvents.checkout.orderPurchased ~ payload', payload);});}}  window.addEventListener('load', subscribeOnBodlEvents, false); </script>\",\n  \"load_method\": \"default\",\n  \"location\": \"head\",\n  \"visibility\": \"all_pages\",            //set which pages can access the script\n  \"kind\": \"script_tag\",\n  \"consent_category\": \"essential\",      //script is set to a category of consent\n  \"enabled\": true,\n  \"channel_id\": 2                       //storefront channel ID\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cart Data with getCart Method in JavaScript\nDESCRIPTION: Examples of using the getCart method to retrieve cart data with and without product variant options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nutils.api.cart.getCart({}, (err, response) => {\n  console.log(response);\n  console.log(err);\n});\n\nutils.api.cart.getCart({includeOptions: true}, (err, response) => {\n  console.log(response);\n  console.log(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Product Information via GraphQL Mutation\nDESCRIPTION: Demonstrates how to set global basic product information including name and description that channels inherit by default. Requires product ID in the input and returns the updated product information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-basic-info.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation (\n  $input: SetProductBasicInformationInput!\n) {\n  product {\n    setProductBasicInformation(input: $input) {\n      product {\n        id\n        basicInformation {\n          name\n          description\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"data\": {\n      \"name\": \"Global Name\",\n      \"description\": \"Global Description\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refunding Products and Gift Wrapping in BigCommerce API\nDESCRIPTION: This snippet demonstrates how to refund a product or gift wrapping using the BigCommerce API by setting the item_type to PRODUCT or GIFT_WRAPPING and specifying the quantity to refund.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/refunds.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/orders/{order_id}/payment_actions/refunds\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"order_id\": 1234,\n  \"items\": [\n    {\n      \"item_type\": \"PRODUCT\",       // Refund a product\n      \"item_id\": 1234,              // Order product ID\n      \"quantity\": 1,                // Quantity to refund\n    },\n    {\n      \"item_type\": \"GIFT_WRAPPING\", // Refund gift wrapping\n      \"item_id\": 1234,              // Order product ID\n      \"quantity\": 1,                // Quantity to refund\n    }\n  ],\n  \"payments\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Order Confirmation Component in React\nDESCRIPTION: This code snippet demonstrates how to render the OrderConfirmation component using React, utilizing the order ID from the window.checkoutConfig object.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/order-confirmation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nReactDOM.render(\n  <OrderConfirmation orderId={ window.checkoutConfig.orderId } />,\n  document.getElementById(window.checkoutConfig.containerId)\n);\n```\n\n----------------------------------------\n\nTITLE: Changing Order Status with BigCommerce REST API\nDESCRIPTION: This snippet demonstrates how to update an order's status using the BigCommerce REST API. It shows a PUT request to change the status_id of an order.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v2/orders/{{order_id}}\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"status_id\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Category Breadcrumb with unless Helper in Handlebars\nDESCRIPTION: Example showing the unless helper being used to conditionally render separator characters between category breadcrumb items, except after the last item.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_70\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#each category_results}}\n<li class=\"category-suggestion\">\n    {{#each this}}\n        <a href=\"{{url}}\">{{name}}</a>\n        {{#unless @last}} > {{/unless}}\n    {{/each}}\n</li>\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Updating a Locale with GraphQL Mutation\nDESCRIPTION: This GraphQL mutation updates an existing locale for a specified channel. It can modify the status and default flag of the locale, returning the updated locale information and any errors.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/settings/locales.mdx#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  locale {\n     updateLocale(input: {\n        channelId: \"bc/store/channel/1\",\n        code: \"fr\",\n        status: ACTIVE,\n        isDefault: false\n        }) {\n              locale {\n                  code\n                  status\n                  isDefault\n            }\n              errors {\n                  ... on Error {\n                      message\n                        }\n                    }\n                }\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Multiple Product Addition with jQuery\nDESCRIPTION: JavaScript/jQuery implementation for adding multiple products to cart sequentially using chained AJAX requests. Shows error handling and cart redirection.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/add-to-cart-url.mdx#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n\n<button type=\"button\" id=\"addToCart\">Add Bundle to Cart</button>\n\n<script>\n// when #addToCart is clicked...\n$(\"button#addToCart\").click(function() {\n\n\t// add product id 123\n    return $.get(\"/cart.php?action=add&product_id=123\")\n\t.done(function(data, status, xhr) {\n\t\tconsole.log('first item complete with status ' + status);\n\t})\n\t.then(function() {\n\t\t// add product id 456\n\t\treturn $.get(\"/cart.php?action=add&product_id=456\");\n\t})\n\t.done(function(data, status, xhr) {\n\t\tconsole.log('second item complete with status ' + status);\n\t})\n\t// chain more async GET requests using .then & .done\n\t.fail(function(xhr, status, error) {\n\t\tconsole.log('oh noes, error with status ' + status + ' and error: ');\n\t\tconsole.error(error);\n\t\treturn xhr.done();\n\t})\n\t.always(function() {\n\t\t// go to cart\n\t\treturn window.location = \"/cart.php\";\n\t});\n\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Category Tree Query Example\nDESCRIPTION: GraphQL query demonstrating how to fetch a three-level deep category tree structure using fragments for repeated fields.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter-reference.mdx#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ngql: \"query CategoryTree3LevelsDeep {\n  site {\n    categoryTree {\n      ...CategoryFields\n      children {\n        ...CategoryFields\n        children {\n          ...CategoryFields\n        }\n      }\n    }\n  }\n}\n\nfragment CategoryFields on CategoryTreeItem {\n  name\n  path\n  entityId\n}\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Customer Address using GraphQL Mutation\nDESCRIPTION: This mutation allows customers to delete an address from their address book by specifying the address ID. It includes error handling for various failure cases.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/customers.mdx#2025-04-16_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  customer {\n    deleteCustomerAddress(\n      reCaptchaV2: { token: \"\" }\n      input: { addressEntityId: 1 }\n    ) {\n      errors {\n        __typename\n        ... on CustomerNotLoggedInError {\n          message\n        }\n        ... on CustomerAddressDeletionError {\n          message\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Stencil Development Server\nDESCRIPTION: This command launches the Stencil development server locally to test your theme and view changes in real-time.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/unexpected-behavior.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nstencil start\n```\n\n----------------------------------------\n\nTITLE: Creating an Order from Checkout\nDESCRIPTION: Example of how to create an order from a checkout using the BigCommerce REST Management API. The request requires a checkout ID and returns an order ID upon success.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/orders.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{store_hash}/v3/checkouts/{checkoutId}/orders\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 125\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Main Configuration File for Cornerstone Themes\nDESCRIPTION: This JSON snippet represents the main configuration file for a Cornerstone theme, storing metadata, settings, and resources needed for theme operation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/directory-structure.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Cornerstone\",\n  \"version\": \"4.9.0-rc.1\",\n  \"meta\": {...},\n  \"css_compiler\": \"scss\",\n  \"autoprefixer_cascade\": true,\n  \"autoprefixer_browsers\": [...],\n  \"settings\": {...},\n  \"read_only_files\": [...],\n  \"resources\": {...},\n  \"variations\": [...] \n}\n```\n\n----------------------------------------\n\nTITLE: Querying Rendered Widget Content by Page Type using GraphQL in BigCommerce\nDESCRIPTION: This GraphQL query demonstrates how to request rendered widget content by page type. It retrieves the content of all widgets for the HOME page type, returning an array of regions with their names and HTML content.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/draft/rendering-widgets.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    content {\n      renderedRegionsByPageType(pageType: HOME) {\n        regions {\n          name\n          html\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Header Component\nDESCRIPTION: React functional component for header navigation using BigDesign Tabs with route management and prefetching.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst Header = () => {\n    const [activeTab, setActiveTab] = useState<string>('');\n    const [headerType, setHeaderType] = useState<string>(HeaderTypes.GLOBAL);\n    const router = useRouter();\n    const { pathname } = router;\n\n    useEffect(() => {\n        if (InnerRoutes.includes(pathname)) {\n            // Use InnerHeader if route matches inner routes\n            setHeaderType(HeaderTypes.INNER);\n        } else {\n            // Check if new route matches TabRoutes\n            const tabKey = Object.keys(TabRoutes).find(key => TabRoutes[key] === pathname);\n\n            // Set the active tab to tabKey or set no active tab if route doesn't match (404)\n            setActiveTab(tabKey ?? '');\n            setHeaderType(HeaderTypes.GLOBAL);\n        }\n\n    }, [pathname]);\n\n    useEffect(() => {\n        // Prefetch products page to reduce latency (doesn't prefetch in dev)\n        router.prefetch('/products');\n    });\n\n    const items = [\n        { id: TabIds.HOME, title: 'Home' },\n        { id: TabIds.PRODUCTS, title: 'Products' },\n    ];\n\n    const handleTabClick = (tabId: string) => {\n        setActiveTab(tabId);\n\n        return router.push(TabRoutes[tabId]);\n    };\n\n    if (headerType === HeaderTypes.INNER) return <InnerHeader />;\n\n    return (\n        <Box marginBottom=\"xxLarge\">\n            <Tabs\n                activeTab={activeTab}\n                items={items}\n                onTabClick={handleTabClick}\n            />\n        </Box>\n    );\n};\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: Payment API Endpoints\nDESCRIPTION: The two main endpoints required for processing payments through the BigCommerce Payments API.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/payments/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/payments/access_tokens\n```\n\nLANGUAGE: http\nCODE:\n```\nhttps://payments.bigcommerce.com/stores/{{STORE_HASH}}/payments\n```\n\n----------------------------------------\n\nTITLE: Getting Location Stock Information\nDESCRIPTION: Example request and response for retrieving inventory stock levels at a specific location for a variant.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/inventory-adjustments.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/locations/1/items?variant_id:in=74\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":[\n    {\n      \"identity\":{\n        \"sku\": \"SM13\",\n        \"variant_id\": 74,\n        \"product_id\": 111\n      },\n      \"available_to_sell\": 100,\n      \"total_inventory_onhand\": 100,\n      \"settings\":{\n        \"safety_stock\": 0,\n        \"is_in_stock\": true,\n        \"warning_level\": 5\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Making Absolute Inventory Adjustments - Variant Level\nDESCRIPTION: PUT request to set absolute inventory quantities for product variants. Allows setting specific inventory quantities for multiple variants at specified locations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/adjustments/absolute\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"items\": [\n    {\n      \"location_id\": 2,\n      \"variant_id\": 78,\n      \"quantity\": 5\n    },\n    {\n      \"location_id\": 2,\n      \"variant_id\": 79,\n      \"quantity\": 5\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Category Spend Promotion Request\nDESCRIPTION: JSON request to create a promotion rule where spending $300 in category ID 19 grants a free product (ID 81). The promotion applies automatically and offers 100% discount on the reward product.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/category.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy $X from category X and get product Y free\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"apply_once\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"categories\": [\n              19\n            ]\n          },\n          \"minimum_spend\": 300\n        }\n      },\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"percentage_amount\": 100\n          },\n          \"items\": {\n            \"products\": [\n              81\n            ]\n          },\n          \"quantity\": 1\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a List Widget in BigCommerce JSON\nDESCRIPTION: This JSON configuration specifies the structure and content for a list widget, including the widget name, list items with their colors and text, and the template UUID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/examples.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Simple List Test\",\n  \"widget_configuration\": {\n    \"list_items\": [\n      {\n        \"color\": \"blue\",\n        \"text\": \"The color is blue\"\n      },\n      {\n        \"color\": \"green\",\n        \"text\": \"The color is green\"\n      },\n      {\n        \"color\": \"red\",\n        \"text\": \"The color is red\"\n      }\n    ]\n  },\n  \"widget_template_uuid\": \"your-template-uuid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cart Metafields with GraphQL\nDESCRIPTION: Mutation to update an existing cart metafield. Requires cart entity ID, metafield entity ID, and updated metafield data.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/metafields.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation updateCartMetafield {\n   cart {\n    updateCartMetafield(input:{\n      cartEntityId: \"4a5fd706-beb9-41b5-9ac2-01593b471168\"\n      metafieldEntityId:53\n      data: {\n        key: \"Size\",\n\tvalue: \"medium\"\n      }\n    }) {\n      metafield {\n        id\n        entityId\n        key\n        value\n      }\n      errors {\n        ...on Error {\n          message\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"cart\": {\n      \"updateCartMetafield\": {\n        \"metafield\": {\n          \"id\": \"TWV0YWZpZWxkczo1Mw==\",\n          \"entityId\": 53,\n          \"key\": \"Size\",\n          \"value\": \"medium\"\n        },\n        \"errors\": []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Search with Stencil Utils API in JavaScript\nDESCRIPTION: Demonstrates how to use the search method from the Stencil Utils API. It includes debouncing the search function and handling the response.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst doSearch = _.debounce((searchQuery) => {\n  utils.api.search.search(searchQuery, { template: 'search/quick-results' }, (err, response) => {\n    if (err) {\n      return false;\n    }\n\n    $quickSearchResults.html(response);\n  });\n}, 200);\n```\n\n----------------------------------------\n\nTITLE: Querying Facets with Rating Filter in GraphQL Storefront API\nDESCRIPTION: A GraphQL query example that retrieves facets for products with ratings between 3 and 5. The query demonstrates how to structure a request for CategorySearchFilter and OtherSearchFilter facets.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/products/faceted-textual-search.mdx#2025-04-16_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    search {\n      searchProducts(\n        filters: {\n           rating:{\n             minRating:3,\n             maxRating:5\n           }\n        }\n      ) {\n         filters {\n           edges {\n             node {\n               __typename\n               name\n               isCollapsedByDefault\n               ... on CategorySearchFilter {\n                 name\n                 displayProductCount\n                 isCollapsedByDefault\n                 categories {\n                   edges {\n                     node {\n                       entityId\n                       isSelected\n                       productCount\n                       subCategories {\n                         edges {\n                           node {\n                             entityId\n                             name\n                           }\n                         }\n                       }\n                     }\n                   }\n                 }\n               }\n               ... on OtherSearchFilter {\n                 name\n                 displayProductCount\n                 isCollapsedByDefault\n                 freeShipping {\n                   isSelected\n                   productCount\n                 }\n                 isInStock {\n                   isSelected\n                   productCount\n                 }\n                 isFeatured {\n                   isSelected\n                   productCount\n                 }\n               }\n             }\n           }\n         }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Customer Addresses with V2 API\nDESCRIPTION: Example of retrieving customer addresses using the V2 API, which requires specific customer and address IDs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/customers/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\n/customers/{{customer_id}}/addresses/{{customer_address_id}}\n```\n\n----------------------------------------\n\nTITLE: Remove Product Image Visibility GraphQL Mutation\nDESCRIPTION: GraphQL mutation to remove product image visibility from a specific channel locale. The mutation takes a product ID, channel context, and image IDs as input parameters and returns updated image information including visibility status.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-images.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($input: RemoveImagesFromProductInput!) {\n  product {\n    removeImagesFromProduct(input: $input) {\n      images {\n        edges {\n          node {\n            id\n            altText\n            isThumbnail\n            sortOrder\n            urlStandard\n            urlZoom\n            addedToProduct\n            overrides(context: { channelId: \"bc/store/channel/1\", locale: \"fr\" }) {\n              edges {\n                node {\n                  ... on ProductImagesOverridesForChannelLocale {\n                    context {\n                      channelId\n                      locale\n                    }\n                    altText\n                    sortOrder\n                    addedToProduct\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"context\": {\n      \"channelId\": \"bc/store/channel/1\",\n      \"locale\": \"fr\"\n    },\n    \"ids\": [\"bc/store/productImage/371\", \"bc/store/productImage/372\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Session Sync JWT in GraphQL\nDESCRIPTION: A GraphQL mutation that validates a session sync JWT token and returns its content. The mutation extracts analytics information, cart details, customer data, and customer access token from the provided JWT.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n# \nmutation ValidateJwt{\n  validateSessionSyncJwt(jwt: \"eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJpc3MiOiJCQyIsImlhdCI6MTczMDQwMTc3MiwiZWF0IjoxNzMwNDAxODAyLCJqdGkiOiI2NTI5NDAyMi02MDA4LTRmY2YtOTUxOC03MWE5NjA0MjEyMjgiLCJvcGVyYXRpb24iOiJzZXNzaW9uX3N5bmMiLCJzaWQiOjczMzE5Nywic2Vzc2lvbl9wYXlsb2FkIjp7ImNhcnRfaWQiOm51bGwsImN1c3RvbWVyX2lkIjpudWxsLCJ2aXNpdG9yX2lkIjoiYWJjMTIzIn0sInJlcXVlc3RfaXAiOm51bGwsInJlZGlyZWN0X3RvIjoiaHR0cHM6Ly9iaWdjb21tZXJjZS5zdXBwb3J0L2ZvbyJ9.TAueByfTCdpw3UwwuKElUoeEjYcqCT13H3pt7UzIh6t6682_w4aaz1akS-FOyyOstOUYcjyUPLN5qi04eXXKKA\"){\n   content{\n     analytics{\n       visitorId\n}\n     cart{\n       entityId    \n}\n     customer {\n       firstName\n}\n     customerAccessToken{\n       expiresAt\n       value    \n}\n     redirectTo\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product and Inventory Data with GraphQL in BigCommerce Storefront\nDESCRIPTION: This GraphQL query fetches product details, including name, overall inventory, and variant-specific inventory information. It's designed to be used with the Stencil theme's front matter to retrieve data for display on the product page.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/guide/storefront.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ngql: \"query($productId: Int!) {\\n  site {\\n    product(entityId: $productId) {\\n      name\\n      inventory {\\n        aggregated {\\n          availableToSell\\n        }\\n      }\\n      variants {\\n        edges {\\n          node {\\n            sku\\n            inventory {\\n              aggregated {\\n                availableToSell\\n              }\\n              byLocation {\\n                edges {\\n                  node {\\n                    locationEntityCode\\n                    availableToSell\\n                    isInStock\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using compare Helper for Conditional Logic in Handlebars\nDESCRIPTION: Shows how to use the compare helper which evaluates two values with a specified JavaScript operator and renders a block if the comparison returns true.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_59\n\nLANGUAGE: handlebars\nCODE:\n```\n{{compare a operator b}}\n```\n\n----------------------------------------\n\nTITLE: Querying Variant Inventory with GraphQL in BigCommerce\nDESCRIPTION: This GraphQL query retrieves inventory information for a specific product variant. It includes aggregated inventory data and inventory by location, focusing on the default location.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/inventory/queries.mdx#2025-04-16_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    products (entityIds:[113]) {\n      edges {\n        node {\n          entityId\n          name\n          variants (entityIds: [95]) {\n            edges {\n              node {\n                entityId\n                sku\n                inventory {\n                  aggregated {\n                    availableToSell\n                    warningLevel\n                  }\n                  byLocation {         // By default, returns only the default location \n                    edges {\n                      node {\n                        locationEntityId\n                        locationEntityCode\n                        locationEntityTypeId\n                        locationDistance {\n                          value\n                          lengthUnit\n                        }\n                        availableToSell\n                        warningLevel\n                        isInStock\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Location Data Response Structure\nDESCRIPTION: Example JSON response showing the structure of location data returned by the GraphQL API, including multiple location entries with their details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/locations/queries.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"inventory\": {\n      \"locations\": {\n        \"edges\": [\n          {\n            \"node\": {\n              \"entityId\": 1,\n              \"code\": \"BC-LOCATION-1\",\n              \"label\": \"Default location\",\n              \"description\": \"\",\n              \"typeId\": \"PHYSICAL\",\n              \"timeZone\": \"Etc/UTC\",\n              \"address\": {\n                \"city\": \"Austin\",\n                \"address1\": \"103 Example Drive\",\n                \"address2\": \"\",\n                \"postalCode\": \"78726\",\n                \"stateOrProvince\": \"TX\",\n                \"email\": \"person@person.com\",\n                \"phone\": \"\",\n                \"latitude\": 37.7749,\n                \"longitude\": 122.4194,\n                \"countryCode\": \"US\"\n              },\n              \"operatingHours\": {\n                \"sunday\": {\n                  \"open\": true,\n                  \"opening\": \"09:30\",\n                  \"closing\": \"20:00\"\n                },\n                \"monday\": {\n                  \"open\": true,\n                  \"opening\": \"09:00\",\n                  \"closing\": \"17:00\"\n                },\n                \"tuesday\": {\n                  \"open\": true,\n                  \"opening\": \"09:00\",\n                  \"closing\": \"17:00\"\n                },\n                \"wednesday\": {\n                  \"open\": true,\n                  \"opening\": \"09:00\",\n                  \"closing\": \"17:00\"\n                },\n                \"thursday\": {\n                  \"open\": true,\n                  \"opening\": \"09:00\",\n                  \"closing\": \"17:00\"\n                },\n                \"friday\": {\n                  \"open\": true,\n                  \"opening\": \"09:00\",\n                  \"closing\": \"17:00\"\n                },\n                \"saturday\": {\n                  \"open\": false,\n                  \"opening\": \"00:00\",\n                  \"closing\": \"00:00\"\n                }\n              },\n              \"specialHours\": []\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Banner Objects with JSON in Stencil Themes\nDESCRIPTION: Example of a Banner object in JSON format that can be accessed through Handlebars.js on a category page. Shows how structured data is made available to templates, including banner content and metadata.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/start/tech-stack.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"banners\": {\n    \"top\": [\n      \"For the week of May 20th, all apparel available at the online store will be 25% off the standard store price.\"\n    ],\n    \"bottom\": [ ],\n    \"top_metadata\": [\n      {\n        \"id\": \"3\",\n        \"banner-name\": \"All Apparel 25% off for a limited time!\",\n        \"content\": \"<p>For the week of May 20th, all apparel available at the online store will be 25% off the standard store price.</p>\",\n        \"location\": \"top\"\n      }\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Deleting Category Translations using GraphQL Mutation in BigCommerce\nDESCRIPTION: This GraphQL mutation deletes translations for specific fields of a category. It allows deleting translations for multiple fields such as name, page title, and meta description for a given resourceId, channel, and locale.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/translations/categories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  translation {\n    deleteTranslations(input: {\n      resourceType: CATEGORIES,\n      channelId: \"bc/store/channel/1\",\n      localeId: \"bc/store/locale/en\",\n      resources: [\n          {\n              resourceId: \"bc/store/category/18\",\n              fields: [\"name\", \"page_title\", \"meta_description\"]\n          }\n      ]\n  }) {\n      __typename\n      errors {\n          __typename\n          ... on Error {\n              message\n          }\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer Address Book using GraphQL Query\nDESCRIPTION: This query retrieves all addresses associated with a customer's account, including detailed address information and any custom form fields associated with the customer and their addresses.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/customers.mdx#2025-04-16_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n    customer {\n      firstName\n      lastName\n      formFields {\n          entityId\n          name\n      }\n      addresses {\n          collectionInfo {\n              totalItems\n          }\n          edges {\n              node {\n                  entityId\n                  firstName\n                  lastName\n                  address1\n                  city\n                  stateOrProvince\n                  postalCode\n                  formFields {\n                      entityId\n                      name\n                  }\n              }\n          }\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Images with getImageManagerImage Helper\nDESCRIPTION: Helper for retrieving URLs for images uploaded via Image Manager, supporting width and height parameters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_50\n\nLANGUAGE: handlebars\nCODE:\n```\n{{getImageManagerImage path width height}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<!-- Original image URL returned if no size or invalid size is passed in -->\n{{getImageManagerImage \"asset.jpg\"}}\n<!-- => https://cdn.bcapp/3dsf74g/images/stencil/original/image-manager/asset.jpg -->\n\n<!-- height must be accompanied by width -->\n{{getImageManagerImage \"folder/asset.jpg\" height=123}}\n<!-- => https://cdn.bcapp/3dsf74g/images/stencil/original/image-manager/folder/asset.jpg -->\n\n<!-- Sized image URL returned if valid height and/or width passed in -->\n{{getImageManagerImage \"asset.jpg\" width=123}}\n<!-- => https://cdn.bcapp/3dsf74g/images/stencil/123w/image-manager/asset.jpg -->\n\n{{getImageManagerImage \"folder/asset.jpg\" width=123 height=321}}\n<!-- => https://cdn.bcapp/3dsf74g/images/stencil/123x321/image-manager/folder/asset.jpg -->\n```\n\n----------------------------------------\n\nTITLE: Creating a Storewide Discount with Specific Exclusions in BigCommerce API (JSON)\nDESCRIPTION: This code snippet shows how to create a storewide discount of 10% with specific product and category exclusions. It uses the NOT operator to exclude particular products and categories from the discount, allowing for precise control over discount application.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/logical-operators.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"10% off storewide except 'Able Brewing System' or 'Chemex Coffeemaker' or any garden products\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"percentage_amount\": 10\n          },\n          \"items\": {\n            \"and\": [\n              {\n                \"not\": {\n                  \"products\": [\n                    129,\n                    130                 ]\n                }\n              },\n              {\n                \"not\": {\n                  \"categories\": [\n                    24\n                  ]\n                }\n              }\n            ]\n          }\n        }\n      },\n      \"apply_once\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Order Level Refunds in BigCommerce API\nDESCRIPTION: This snippet demonstrates how to create a tax-exempt custom amount refund at the order level using the BigCommerce API.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/refunds.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/orders/{order_id}/payment_actions/refunds\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"order_id\": 1234,\n  \"items\": [\n    {\n      \"item_type\": \"ORDER\", // Refund a tax-exempt custom amount\n      \"item_id\": 1234,      // Order ID\n      \"amount\": 1,          // Amount to refund\n    }\n  ],\n  \"payments\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Auth Callback Query Parameters for BigCommerce Single-Click App\nDESCRIPTION: JSON representation of the URL-decoded query parameters received in the auth callback. These parameters are used in the subsequent access_token request.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/auth.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"account_uuid\": \"12345678-90ab-cdef-1234-567890abcdef\",\n  \"code\": \"qr6h3thvbvag2ffq\",\n  \"context\": \"stores/g5cd38\",\n  \"scope\": \"store_v2_orders store_channel_listings_read_only\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Front Matter Objects in YAML\nDESCRIPTION: This code snippet declares the products object with a new attribute that is used to specify how many new products should be displayed on a storefront page. The 'limit' value can be directly hardcoded or retrieved from a configuration file using Handlebars.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nproducts:\n  new:\n    limit: {{theme_settings.homepage_new_products_count}}\n```\n\n----------------------------------------\n\nTITLE: Updating Tax Rates via BigCommerce API\nDESCRIPTION: Updates existing tax rates by sending a PUT request. Requires tax rate ID and updated values. Returns the modified tax rate details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/tax-rates-zones.mdx#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/tax/rates\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"class_rates\": [\n      {\n        \"rate\": 10,\n        \"tax_class_id\": 0\n      }\n    ],\n    \"enabled\": false,\n    \"id\": 3,\n    \"name\": \"Excise Tax\",\n    \"priority\": 2,\n    \"tax_zone_id\": 4\n  }\n]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"class_rates\": [\n        {\n          \"rate\": 10,\n          \"tax_class_id\": 0\n        },\n        {\n          \"rate\": 5,\n          \"tax_class_id\": 1\n        }\n      ],\n      \"enabled\": false,\n      \"id\": 3,\n      \"name\": \"Excise Tax\",\n      \"priority\": 2,\n      \"tax_zone_id\": 4\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Wallet Buttons to Product Page in Cornerstone Themes\nDESCRIPTION: This code snippet adds wallet buttons to the product page and implements the necessary JavaScript functionality to handle product updates and form validation. It includes conditional rendering of wallet buttons, event listeners for form interactions, and methods to update and reset product details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/checkout-enhancements/wallet-buttons.mdx#2025-04-16_snippet_7\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if this.with_wallet_buttons}}\n  {{#if wallet_buttons}}\n    <div class=\"your-class-for-wallet-buttons-list\">\n      {{{wallet_buttons}}}\n    </div>\n\n    <script type=\"text/javascript\">\n      function updateProductDetailsData(form) {\n        const productDetails = {};\n        const formData = new FormData(form);\n\n        for (const [fieldName, fieldValue] of formData) {\n          if (fieldName === 'product_id') {\n            productDetails.productId = Number(fieldValue);\n          }\n\n          if (fieldName === 'qty[]') {\n            productDetails.quantity = Number(fieldValue);\n          }\n\n          if (fieldName.match(/attribute/)) {\n            const productOption = {\n              optionId: Number(fieldName.match(/\\d+/g)[0]),\n              optionValue: fieldValue,\n            };\n\n            productDetails.optionSelections = productDetails?.optionSelections\n              ? [...productDetails.optionSelections, productOption]\n              : [productOption];\n          }\n        }\n\n        document.dispatchEvent(new CustomEvent('onProductUpdate', {\n          bubbles: true,\n          detail: { productDetails },\n        }));\n      }\n\n      function resetProductDetailsData() {\n        const productDetails = {};\n\n        document.dispatchEvent(new CustomEvent('onProductUpdate', {\n          bubbles: true,\n          detail: { productDetails },\n        }));\n      }\n\n      function init() {\n        const form = document.querySelector('form[data-cart-item-add]');\n        const submitButton = form.querySelector('input[type=\"submit\"]');\n        const walletButtonsContainer = document.getElementById('bc-smart-payment-buttons');\n\n        if (!walletButtonsContainer) {\n          return;\n        }\n\n        const submitObserver = new MutationObserver(((mutations) => {\n          mutations.forEach((mutation) => {\n            if (mutation.type === 'attributes') {\n              if (!mutation.target.disabled && form.checkValidity()) {\n                walletButtonsContainer.style.display = 'block';\n                updateProductDetailsData(form);\n              } else {\n                walletButtonsContainer.style.display = 'none';\n                resetProductDetailsData();\n              }\n            }\n          });\n        }));\n\n        submitObserver.observe(submitButton, { attributes: true });\n\n        form.addEventListener('click', () => {\n          setTimeout(() => updateProductDetailsData(form), 0);\n        });\n\n        form.addEventListener('change', () => {\n          if (form.checkValidity() && !submitButton.disabled) {\n            walletButtonsContainer.style.display = 'block';\n            updateProductDetailsData(form);\n          } else {\n            walletButtonsContainer.style.display = 'none';\n            resetProductDetailsData();\n          }\n        });\n\n        form.addEventListener('touchend', () => {\n          setTimeout(() => updateProductDetailsData(form), 0);\n        });\n\n        form.addEventListener('keyup', () => updateProductDetailsData(form));\n\n        if (form.checkValidity() && !submitButton.disabled) {\n          updateProductDetailsData(form);\n        } else {\n          walletButtonsContainer.style.display = 'none';\n          resetProductDetailsData();\n        }\n      }\n\n      init();\n    </script>\n\n  {{/if}}\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Discount Rule with Brand and Category Conditions in BigCommerce API (JSON)\nDESCRIPTION: This code snippet demonstrates how to create a discount rule that applies 20% off to specific brands and categories, with exceptions. It uses OR and AND operators to combine different conditions, allowing for complex targeting of products.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/logical-operators.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Get 20% off all coffee makers except for those using new arrivals coffee filters\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"items\": {\n            \"or\": [\n              {\n                \"and\": [\n                  {\n                    \"brands\": [\n                      37\n                    ]\n                  },\n                  {\n                    \"categories\": [\n                      25\n                    ]\n                  }\n                ]\n              },\n              {\n                \"and\": [\n                  {\n                    \"brands\": [\n                      38\n                    ]\n                  },\n                  {\n                    \"categories\": [\n                      35\n                    ]\n                  },\n                  {\n                    \"not\": {\n                      \"categories\": [\n                        24\n                      ]\n                    }\n                  }\n                ]\n              }\n            ]\n          },\n          \"discount\": {\n            \"percentage_amount\": \"20\"\n          }\n        }\n      },\n      \"apply_once\": true,\n      \"currency_code\": \"AUD\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Order Creation in BigCommerce\nDESCRIPTION: JSON response from the BigCommerce API after successfully creating an order. The response contains a data object with the ID of the newly created order (125 in this example) and an empty meta object.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/rest-management.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 125\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Coupon Code with BigCommerce API\nDESCRIPTION: HTTP request to create a coupon promotion code with specified usage limits. Requires store hash and access token for authentication.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/promotions/{{promotion_id}}/codes\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"code\": \"30off100\",\n  \"max_uses\": 100\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Password Reset using GraphQL Mutation\nDESCRIPTION: This mutation initiates a password reset process for a customer by sending a reset email to the specified email address. It requires reCAPTCHA verification and handles validation errors.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/customers.mdx#2025-04-16_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  customer {\n    requestResetPassword(\n      reCaptchaV2: { token: \"\" }\n      input: { email: \"jon@test.com\" }\n    ) {\n      errors {\n        ... on ValidationError {\n          message\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Directory Structure for Theme Functionalities\nDESCRIPTION: This snippet details the specific layout of JavaScript files in the theme's assets directory, including folders for testing and a primary app JavaScript file.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/directory-structure.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n├── assets\n│   ├── js                  # javascript\n│   │   ├── test-unit       # tests\n│   │   ├── theme           # global and page level js\n│   │   └── app.js          # main js file; page js mapped here\n```\n\n----------------------------------------\n\nTITLE: Creating Promotion with AND and NOT Operators for Category Exclusions\nDESCRIPTION: API request and response for creating a promotion that applies a percentage discount to items in a category while excluding specific products. Uses AND and NOT operators for conditional logic.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/logical-operators.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Get 20% off all kitchen items, excluding Able Brewing System\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"items\": {\n            \"and\": [\n              {\n                \"categories\": [\n                  25\n                ]\n              },\n              {\n                \"not\": {\n                  \"products\": [\n                    129\n                  ]\n                }\n              }\n            ]\n          },\n          \"discount\": {\n            \"percentage_amount\": \"20\"\n          }\n        }\n      },\n      \"apply_once\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Slider Widget in BigCommerce HTML and JavaScript\nDESCRIPTION: This template creates an image slider widget using HTML for structure and JavaScript for functionality. It cycles through images automatically every 4 seconds.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/examples.mdx#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"slider\">{{#each slides}}<ul class=\"slide\"><img class=\"mySlides\" src=\"{{image}}\"/></ul>{{/each}}</ul><script>var slideIndex=0;carousel();function carousel(){var i;var x=document.getElementsByClassName(\"mySlides\");for (i=0; i < x.length; i++){x[i].style.display=\"none\";}slideIndex++;if (slideIndex > x.length){slideIndex=1}x[slideIndex-1].style.display=\"block\"; setTimeout(carousel, 4000); // Change image every 4 seconds}</script>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Products by Rating with GraphQL\nDESCRIPTION: This example demonstrates how to query for products with a specific rating range (3-5). The request returns the first two products matching the criteria, including their entityId, name, and price information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/products/faceted-textual-search.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    search {\n      searchProducts(\n        filters: {\n          rating:{\n             minRating:3,\n             maxRating:5\n           }\n        }\n      ) {\n        products(first: 2) {\n          edges {\n            node {\n              entityId\n              name\n              prices {\n                price {\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Access Token via JWT Login Mutation\nDESCRIPTION: GraphQL mutation to log in a customer using a JWT and obtain a customer access token. This method allows third-party authentication integration.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/graphql-storefront.mdx#2025-04-16_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n# Creates a customer access token\nPOST https://{{storeDomain}}/graphql\nAuthorization: Bearer {Storefront token}\naccept: application/json\ncontent-type: application/json\n\nmutation Login($jwt: String!) {\n loginWithCustomerLoginJwt(jwt: $jwt) {\n   customer {\n     entityId\n     email\n   }\n   customerAccessToken {\n     value\n     expiresAt\n   }\n }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"jwt\": \"your_jwt_token\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Order Shipment with BigCommerce REST API\nDESCRIPTION: This snippet shows how to create an order shipment using the BigCommerce REST API. It includes details such as tracking number, comments, order address ID, and item information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}}/v2/orders/{{order_id}}/shipments\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n  \"tracking_number\": \"EJ958083578UK\",\n  \"comments\": \"Janes Order\",\n  \"order_address_id\": \"128\",\n  \"shipping_provider\": \"\",\n  \"items\": [\n    {\n      \"order_product_id\": 194,\n      \"quantity\": 1\n    },\n    {\n      \"order_product_id\": 195,\n      \"quantity\": 1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Substring in Subject String - JavaScript\nDESCRIPTION: Replaces some or all occurrences of a specified substring within a subject string.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction strReplace(str, target, replacement) { return str.split(target).join(replacement); }\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Headers for GraphQL Admin API Requests\nDESCRIPTION: This snippet shows the required HTTP configuration for making requests to the BigCommerce GraphQL Admin API. It includes the endpoint URL, authentication token, and content type headers.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/settings/locales.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/graphql\nX-Auth-Token: {{access_token}}\nAccept: application/json\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Validating Webhook Signature in Python for BigCommerce\nDESCRIPTION: This Python code snippet demonstrates how to validate the webhook signature using the Standard Webhook library in BigCommerce.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/https-webhook-overview.mdx#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport functions_framework\nfrom standardwebhooks.webhooks import Webhook\nfrom os import getenv\nimport base64\n\n# Fetch the client secret from environment variables\nclient_secret = getenv('CLIENT_SECRET')\n```\n\n----------------------------------------\n\nTITLE: Response Format for Variant Option Values Query in BigCommerce\nDESCRIPTION: JSON response showing variant option values that includes both standard fields for all option values and specific fields for swatch options. The response shows color and size options with their respective values, including hex color codes for the swatch type.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/variants.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"product\": {\n        \"variants\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"productOptions\": {\n                  \"edges\": [\n                    {\n                      \"node\": {\n                        \"values\": {\n                          \"edges\": [\n                            {\n                              \"node\": {\n                                \"entityId\": 108,\n                                \"label\": \"Pink\",\n                                \"isDefault\": true\n                              }\n                            }\n                          ]\n                        }\n                      }\n                    },\n                    {\n                      \"node\": {\n                        \"values\": {\n                          \"edges\": [\n                            {\n                              \"node\": {\n                                \"entityId\": 129,\n                                \"label\": \"Small\",\n                                \"isDefault\": false,\n                                \"hexColors\": [\n                                  \"#912727\",\n                                  \"#D6A67C\"\n                                ],\n                                \"imageUrl\": null\n                              }\n                            }\n                          ]\n                        }\n                      }\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Customer Details with Attributes\nDESCRIPTION: GraphQL query to fetch customer information including custom attributes like shirt size and favorite color.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery CustomerAttributes {\n  customer {\n    firstName\n    lastName\n    email\n    entityId\n    customerGroupId\n    attributeCount\n    attributes {\n      shirtSize: attribute(entityId:123) {\n        entityId\n        value\n      }\n      favoriteColor: attribute(entityId:456) {\n        entityId\n        value\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Gift Certificate with BigCommerce Marketing API\nDESCRIPTION: This snippet illustrates how to create a gift certificate using a POST request to the BigCommerce Marketing API. It includes the necessary headers and a JSON payload with gift certificate details such as template, message, amount, recipient and sender information, code, and status.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/draft/marketing-api-overview.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v2/gift_certificates\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"template\": \"Birthday\",\n  \"message\": \"Congratulations!\",\n  \"amount\": \"700.0000\",\n  \"to_name\": \"Jane\",\n  \"to_email\": \"test@test.com\",\n  \"from_name\": \"John\",\n  \"from_email\": \"test1@test.com\",\n  \"code\": \"XQ2-1R7-7C1-Q0C\",\n  \"status\": \"active\"\n}\n```\n\n----------------------------------------\n\nTITLE: Category Spend Promotion Response\nDESCRIPTION: API response showing the created promotion details including configuration settings, dates, redemption rules and usage limits. Includes expanded parameters like strategy settings and cart conditions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/category.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 16,\n    \"name\": \"Buy $X from category X and get product Y free\",\n    \"created_from\": \"api\",\n    \"customer\": {\n      \"group_ids\": [],\n      \"minimum_order_count\": 0,\n      \"excluded_group_ids\": [],\n      \"segments\": null\n    },\n    \"rules\": [\n      {\n        \"action\": {\n          \"cart_items\": {\n            \"discount\": {\n              \"percentage_amount\": \"100\"\n            },\n            \"strategy\": \"LEAST_EXPENSIVE\",\n            \"add_free_item\": true,\n            \"as_total\": false,\n            \"include_items_considered_by_condition\": false,\n            \"exclude_items_on_sale\": false,\n            \"items\": {\n                \"products\": [\n                  123\n                ]\n            },\n            \"quantity\": 1\n          }\n        },\n        \"apply_once\": false,\n        \"stop\": false,\n        \"condition\": {\n          \"cart\": {\n            \"items\": {\n              \"categories\": [\n                24\n              ]\n            },\n            \"minimum_spend\": \"300\"\n          }\n        }\n      }\n    ],\n    \"notifications\": [],\n    \"stop\": false,\n    \"currency_code\": \"USD\",\n    \"redemption_type\": \"AUTOMATIC\",\n    \"shipping_address\": null,\n    \"current_uses\": 0,\n    \"max_uses\": null,\n    \"start_date\": \"2022-07-18T20:07:24+00:00\",\n    \"end_date\": null,\n    \"status\": \"ENABLED\",\n    \"schedule\": null,\n    \"can_be_used_with_other_promotions\": true\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Category Translations using GraphQL Mutation in BigCommerce\nDESCRIPTION: This GraphQL mutation updates translations for a specific category. It allows updating multiple fields such as name, description, page title, meta description, and search keywords for a given resourceId, channel, and locale.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/translations/categories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  translation {\n      updateTranslations(input: {\n          resourceType: CATEGORIES,\n          channelId: \"bc/store/channel/1\",\n          localeId: \"bc/store/locale/en\",\n          entities: [\n              {\n                  resourceId: \"bc/store/category/18\",\n                  fields: [\n                      {\n                        fieldName: \"name\",\n                        value: \"name (OVR)\"\n                      },\n                      {\n                        fieldName: \"description\",\n                        value: \"description (OVR)\"\n                      },\n                      {\n                        fieldName: \"page_title\",\n                        value: \"page_title (OVR)\"\n                      },\n                      {\n                        fieldName: \"meta_description\",\n                        value: \"meta_description (OVR)\"\n                      },\n                      {\n                        fieldName: \"search_keywords\",\n                        value: \"search_keywords (OVR)\"\n                  }\n              ]\n          }\n      ]\n  }) {\n      __typename\n      errors {\n          __typename\n          ... on Error {\n              message\n          }\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Category Tree Response Structure in JSON\nDESCRIPTION: Example JSON response from the Category Tree endpoint showing the hierarchical parent-child relationship of categories. The response includes category IDs, names, visibility status, URLs, and nested child categories.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/index.mdx#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 25,\n      \"parent_id\": 0,\n      \"name\": \"Towels\",\n      \"is_visible\": true,\n      \"url\": \"/towels/\",\n      \"children\": [\n        {\n          \"id\": 26,\n          \"parent_id\": 25,\n          \"name\": \"Bath Towels\",\n          \"is_visible\": true,\n          \"url\": \"/towels/bath-towels/\",\n          \"children\": [\n            {\n              \"...\"\n              \"children\": [\n                \"...\"\n                ]\n            },\n            \"...\"\n          ]\n        },\n        \"..\"\n      ]\n    },\n    \"...\"\n  ],\n  \"meta\": {...}\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Generation and URL Creation\nDESCRIPTION: JavaScript function to generate a JWT token and create a customer login URL. Takes customer ID, store hash, store URL, client ID, and client secret as parameters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/customer-login.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwt = require('jsonwebtoken');\nconst {v4: uuidv4} = require('uuid');\n \nfunction getLoginUrl(customerId, storeHash, storeUrl, clientId, clientSecret) {\n   const dateCreated = Math. round((new Date()). getTime() / 1000);\n   const  payload = {\n       \"iss\": clientId,\n       \"iat\": dateCreated,\n       \"jti\": uuidv4(),\n       \"operation\": \"customer_login\",\n       \"store_hash\": storeHash,\n       \"customer_id\": customerId,\n   }\n   let token = jwt.sign(payload, clientSecret, {algorithm:'HS256'});\n   return `${storeUrl}/login/token/${token}`;\n};\n \nconst clientId = \"Your client id\";\nconst clientSecret = \"Your client secret\";\nconst customerId = \"Your customer id\";\nconst storeHash = \"Your store hash\";\nconst storeUrl = \"Your store url\";\n \nconst loginUrl = getLoginUrl(customerId, storeHash, storeUrl, clientId, clientSecret);\nconsole.log(loginUrl);\n```\n\n----------------------------------------\n\nTITLE: Adding Shopper Profiles to Segments via POST Request\nDESCRIPTION: Associates shopper profiles with a specific segment by sending a POST request with an array of shopper profile IDs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/segments/user-guide.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/segments/{{segmentId}}/shopper-profiles\nX-Auth Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n]\n```\n\n----------------------------------------\n\nTITLE: Authenticating Customer Login API in BigCommerce\nDESCRIPTION: JavaScript function demonstrating how to make a Customer Login API request using a user-generated JWT for authentication in BigCommerce.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/index.mdx#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst loginCustomer = (yourJwt) => {\n  let resource = `${window.location.origin}/login/token/${yourJwt}`;\n  return fetch(resource)\n  .then(response => {\n    console.log(response);\n    if(response.status === 200) {\n      // resolve any parts of the response to work with...\n      return Promise.all([response.url, response.text()]);\n    } else {\n      return new Error(`response.status is ${response.status}`);\n    }\n  })\n  .then(([url, content]) => {\n    console.log(url); // navigate to URL, or\n    console.log(content); // work with page content\n    // etc...\n  })\n  .catch(error => console.error(error));\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Tax Settings via BigCommerce API\nDESCRIPTION: Shows how to retrieve tax settings using a GET request to the BigCommerce API. The endpoint returns tax configuration including price display settings, fallback strategy, and tax zone settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/tax/settings\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"tax_entered_with_prices\": true,\n    \"price_display_settings\": {\n      \"show_inclusive_in_control_panel\": true,\n      \"invoice_price_display_strategy\": \"ZONE\"\n    },\n    \"fallback_strategy\": \"DISABLE\",\n    \"should_subtract_store_tax\": false,\n    \"should_use_geolocation_to_determine_guest_shopper_tax_zone\": true,\n    \"guest_shopper_tax_zone_id\": 1,\n    \"store_tax_zone_id\": 1,\n    \"document_submission_strategy\": \"ON_ORDER_CREATION\"\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Locations for Buy Online, Pick up in Store via BigCommerce API\nDESCRIPTION: This snippet demonstrates how to update existing pickup locations using the BigCommerce API. It includes details such as location ID, code, label, operating hours, address, and special hours. The request is sent as a PUT to the /v3/inventory/locations endpoint.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/locations\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"id\": 2,\n    \"code\": \"DTOWN_PARKST\",\n    \"label\": \"Downtown Location - Park Lane\",\n    \"description\": \"Customer-facing additional details about this location.\",\n    \"managed_by_external_source\": false,\n    \"type_id\": \"PHYSICAL\",\n    \"enabled\": true,\n    \"operating_hours\": {\n      \"sunday\": {\n        \"open\": false,\n        \"opening\": \"00:00\",\n        \"closing\": \"00:00\"\n      },\n      \"monday\": {\n        \"open\": true,\n        \"opening\": \"09:00\",\n        \"closing\": \"17:00\"\n      },\n      \"tuesday\": {\n        \"open\": true,\n        \"opening\": \"09:00\",\n        \"closing\": \"17:00\"\n      },\n      \"wednesday\": {\n        \"open\": true,\n        \"opening\": \"09:00\",\n        \"closing\": \"17:00\"\n      }\n    },\n    \"time_zone\": \"Etc/UTC\",\n    \"address\": {\n      \"email\": \"jane.doe@bigcommerce.com\",\n      \"address1\": \"100 Park Lane\",\n      \"address2\": \"\",\n      \"city\": \"Austin\",\n      \"state\": \"TX\",\n      \"zip\": \"78726\",\n      \"country_code\": \"US\",\n      \"phone\": \"+15128654500\",\n      \"geo_coordinates\": {\n        \"longitude\": -97.849560,\n        \"latitude\": 30.404500\n      }\n    },\n    \"storefront_visibility\": true,\n    \"special_hours\": [\n      {\n        \"label\": \"Christmas Eve\",\n        \"date\": \"2022-12-25\",\n        \"open\": true,\n        \"opening\": \"00:00\",\n        \"closing\": \"09:00\",\n        \"all_day\": false,\n        \"annual\": false\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Site for Channel\nDESCRIPTION: API request and response for creating a site associated with a channel, including the base URL configuration.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/embedded-checkout/tutorial.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/channels/{{channel_id}}/site\nX-Auth-Token: {{access_token}}\nAccept: application/json\nContent-Type: application/json\n{\n  \"channel_id\": 20266,\n  \"url\": \"https://store.example.com\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 6,\n    \"url\": \"https://store.example.com\",\n    \"channel_id\": 20266,\n    \"created_at\": \"2019-09-19T17:08:44Z\",\n    \"updated_at\": \"2019-09-19T17:08:44Z\"\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a 'Buy 3 Get 1 Free' Category Promotion in BigCommerce\nDESCRIPTION: This JSON request creates a promotion rule where customers buying three items from a specific category get one item from the same category for free. The rule applies automatically and can be used multiple times in a single order.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/category.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy three from category X and get one from category Y free\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"apply_once\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"categories\": [\n              24\n            ]\n          },\n          \"minimum_quantity\": 3\n        }\n      },\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"percentage_amount\": 100\n          },\n          \"items\": {\n            \"categories\": [\n              24\n            ]\n          },\n          \"quantity\": 1\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Product Option Value with V3 Catalog API\nDESCRIPTION: This JSON payload is used to update a specific product option value by sending a PUT request to the V3 Catalog API. In this example, it changes the label of a size option from \"Small\" to \"Small T-Shirt\".\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"label\": \"Small T-Shirt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Response for Create Locations in BigCommerce API\nDESCRIPTION: This snippet shows the expected JSON response after successfully creating locations using the BigCommerce API. The response includes a transaction ID for the operation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transaction_id\": \"f2e9c9da-8f35-403c-8f9f-d0b1b3302efbv\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Metafields to a Product in BigCommerce API\nDESCRIPTION: This example shows how to add metafields to a product using the BigCommerce API. Metafields are key-value pairs for storing additional data that doesn't appear in the storefront or control panel.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products/{{product_id}}/metafields\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"permission_set\": \"read\",\n  \"namespace\": \"Location\",\n  \"key\": \"bin_number\",\n  \"value\": \"#4456\",\n  \"description\": \"location of the product\",\n  \"resource_type\": \"product\",\n  \"resource_id\": 131\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Category\nDESCRIPTION: Creates a new product category in the BigCommerce catalog hierarchy with specified parent ID, name, description and visibility settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/index.mdx#2025-04-16_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/categories\n\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"parent_id\": 18,\n  \"name\": \"Shoes\",\n  \"description\": \"Shoes Available for purchase\",\n  \"sort_order\": 1,\n  \"page_title\": \"Shoes\",\n  \"is_visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Tax Settings via BigCommerce API\nDESCRIPTION: Demonstrates how to update tax settings using a PUT request to the BigCommerce API. The example shows updating tax_entered_with_prices and invoice_price_display_strategy settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/tax/settings\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"tax_entered_with_prices\": false,\n  \"price_display_settings\": {\n    \"invoice_price_display_strategy\": \"INCLUSIVE\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"tax_entered_with_prices\": false,\n    \"price_display_settings\": {\n      \"show_inclusive_in_control_panel\": true,\n      \"invoice_price_display_strategy\": \"INCLUSIVE\"\n    },\n    \"fallback_strategy\": \"DISABLE\",\n    \"should_subtract_store_tax\": false,\n    \"should_use_geolocation_to_determine_guest_shopper_tax_zone\": true,\n    \"guest_shopper_tax_zone_id\": 1,\n    \"store_tax_zone_id\": 1,\n    \"document_submission_strategy\": \"ON_ORDER_CREATION\"\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-Browser Custom Font Declaration for BigCommerce Themes\nDESCRIPTION: Comprehensive @font-face declaration to support custom fonts across various browsers in BigCommerce themes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/style/fonts-and-icons.mdx#2025-04-16_snippet_2\n\nLANGUAGE: handlebars\nCODE:\n```\n<style type=\"text/css\" media=\"screen, print\">\n    @font-face {\n    font-family: \"MyFont\";\n        src: url(\"{{cdn 'webdav:MyFontFile.eot'}}\"); /* IE9 Compat Modes */\n        src: url(\"{{cdn 'webdav:MyFontFile.eot?#iefix'}}\"), /* IE6-IE8 */\n                url(\"{{cdn 'webdav:MyFontFile.woff2'}}\"), /* Super Modern Browsers */\n                url(\"{{cdn 'webdav:MyFontFile.woff'}}\"), /* Pretty Modern Browsers */\n                url(\"{{cdn 'webdav:MyFontFile.svg#svgFontName'}}\"); /* Legacy iOS */\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Adding Item to Cart with itemAdd Method in JavaScript\nDESCRIPTION: Example of using the itemAdd method to add an item to the cart, including error handling and modal updates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nutils.api.cart.itemAdd(this.filterEmptyFilesFromForm(new FormData(form)), (err, response) => {\n  const errorMessage = err || response.data.error;\n\n  $addToCartBtn\n  .val(originalBtnVal)\n  .prop('disabled', false);\n\n  this.$overlay.hide();\n\n  // Guard statement\n  if (errorMessage) {\n    // Strip the HTML from the error message\n    const tmp = document.createElement('DIV');\n    tmp.innerHTML = errorMessage;\n    return showAlertModal(tmp.textContent || tmp.innerText);\n  }\n\n  // Open preview modal and update content\n  if (this.previewModal) {\n    this.previewModal.open();\n    this.updateCartContent(this.previewModal, response.data.cart_item.id);\n  } else {\n    this.$overlay.show();\n    // if no modal, redirect to the cart page\n    this.redirectTo(response.data.cart_item.cart_url || this.context.urls.cart);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Uninstall Endpoint in Next.js\nDESCRIPTION: This code implements the /uninstall API endpoint in Next.js. It handles the process of removing a user who has uninstalled the application from their BigCommerce account.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-connect.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { getBCVerify } from '../../lib/auth';\n\nexport default async function uninstall(req: NextApiRequest, res: NextApiResponse) {\n    try {\n        await getBCVerify(req.query);\n\n        res.status(200).end();\n    } catch (error) {\n        const { message, response } = error;\n        res.status(response?.status || 500).json(message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Variant Options Query in BigCommerce\nDESCRIPTION: JSON response for a variant options query, showing two different variant options (Color and Size) with their properties. The response includes entity IDs, display names, requirement status, and display styles for each option.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/variants.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"product\": {\n        \"variants\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"productOptions\": {\n                  \"edges\": [\n                    {\n                      \"node\": {\n                        \"entityId\": 116,\n                        \"displayName\": \"Color\",\n                        \"isRequired\": true,\n                        \"isVariantOption\": true,\n                        \"displayStyle\": \"RadioButtons\",\n                      }\n                    },\n                    {\n                      \"node\": {\n                        \"entityId\": 126,\n                        \"displayName\": \"Size\",\n                        \"isRequired\": true,\n                        \"isVariantOption\": true,\n                        \"displayStyle\": \"Swatch\",\n                      }\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inventory by Location\nDESCRIPTION: Demonstrates how to fetch inventory information for all products at a specific location, including available quantities and settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/locations/{location_id}/items\nX-Auth-Token: {{access_token}}\nAccept: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"identity\": {\n        \"sku\": \"SM13\",\n        \"variant_id\": 74,\n        \"product_id\": 111\n      },\n      \"available_to_sell\": 8,\n      \"total_inventory_onhand\": 10,\n      \"settings\": {\n        \"safety_stock\": 2,\n        \"is_in_stock\": true,\n        \"warning_level\": 5\n        }\n    },\n    {\n      \"identity\": {\n        \"sku\": \"SM14-SM\",\n        \"variant_id\": 78,\n        \"product_id\": 112\n      },\n      \"available_to_sell\": 5,\n      \"total_inventory_onhand\": 5,\n      \"settings\": {\n        \"safety_stock\": 0,\n        \"is_in_stock\": true,\n        \"warning_level\": 0\n      }\n    },\n    {\n      \"identity\": {\n        \"sku\": \"SM14-ME\",\n        \"variant_id\": 79,\n        \"product_id\": 112\n      },\n      \"available_to_sell\": ,\n      \"total_inventory_onhand\": 5,\n      \"settings\": {\n        \"safety_stock\": 0,\n        \"is_in_stock\": true,\n        \"warning_level\": 0\n      }\n    }\n  ],\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Query Category and Products by URL\nDESCRIPTION: GraphQL query to fetch category details and associated products using a URL path, including product images, brands, and pricing information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery CategoryByUrl {\n  site {\n    route(path: \"/shop-all/\") {\n      node {\n        id\n        ... on Category {\n          name\n          entityId\n          description\n          products {\n            edges {\n              node {\n                name\n                defaultImage {\n                  url(width: 1200)\n                }\n                brand {\n                  name\n                  defaultImage {\n                    url(width: 200)\n                  }\n                }\n                prices {\n                  price {\n                    ...PriceFields\n                  }\n                  priceRange {\n                    min {\n                      ...PriceFields\n                    }\n                    max {\n                      ...PriceFields\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment PriceFields on Money {\n  value\n  currencyCode\n}\n```\n\n----------------------------------------\n\nTITLE: Response from Cart Creation API\nDESCRIPTION: JSON response from the BigCommerce cart creation endpoint. The response contains the cart ID, product details, pricing information, and cart metadata that will be used in subsequent API calls.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/rest-management.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n  \"id\": \"3cae6525-d0e8-4252-afec-0890fbb710c5\",\n  \"customer_id\": 0,\n  \"channel_id\": 1,\n  \"email\": \"\",\n  \"currency\": {\n      \"code\": \"USD\"\n      },\n  \"tax_included\": false,\n  \"base_amount\": 30,\n  \"discount_amount\": 4.5,\n  \"cart_amount\": 25.5,\n  \"coupons\": [],\n  \"line_items\": {\n      \"physical_items\": [\n      {\n        \"id\": \"ca9ef0d1-1da9-48e5-a505-7051eb575432\",\n        \"parent_id\": null,\n        \"variant_id\": 118,\n        \"product_id\": 120,\n        \"sku\": \"SM-13\",\n        \"name\": \"mug\",\n        \"url\": \"https://arabic-store.mybigcommerce.com/bigcommerce-coffee-mug/\",\n        \"quantity\": 2,\n        \"taxable\": true,\n        \"image_url\": \"https://cdn11.bigcommerce.com/r-4b20dad619e29ebf3490f7f35369a8220637ce48/themes/ClassicNext/images/ProductDefault.gif\",\n        \"coupons\": [],\n        \"discount_amount\": 0,\n        \"coupon_amount\": 0,\n        \"original_price\": 15,\n        \"list_price\": 15,\n        \"sale_price\": 13.86,\n        \"extended_list_price\": 30,\n        \"extended_sale_price\": 27.72,\n        \"is_require_shipping\": true,\n        \"is_mutable\": true\n      }\n        ],\n        \"digital_items\": [],\n        \"gift_certificates\": [],\n        \"custom_items\": []\n      },\n        \"created_time\": \"2023-09-28T20:30:33+00:00\",\n        \"updated_time\": \"2023-09-28T20:30:33+00:00\",\n        \"locale\": \"en-US\"\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Locations by Identity Parameters in GraphQL\nDESCRIPTION: This snippet demonstrates the basic syntax for filtering locations by their identity parameters including entityIds, codes, and typeIds. These filters allow you to request data for only specific locations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/locations/queries.mdx#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n...\nlocations(\n      entityIds: [1, 2, 3]\n      codes: [\"BC-LOCATION-2\", \"BC-LOCATION-1\", \"BC-LOCATION-3\"]\n      typeIds: [\"PHYSICAL\", \"VIRTUAL\"]\n      )\n...\n```\n\n----------------------------------------\n\nTITLE: Executing POST Request to Add Cart Line Items in BigCommerce REST Storefront API\nDESCRIPTION: This snippet shows how to make a POST request to add line items to a cart using the REST Storefront API. It includes the endpoint configuration and the request body with product details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/index.mdx#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlet endpoint = {\n  route: \"/carts/123abc45-de67-89f0-123a-bcd456ef7890/items\",\n  method: \"POST\",\n  accept: \"application/json\",\n  content: \"application/json\",\n  success: 200\n}\n\nlet requestBody = {\n  lineItems: [\n    {\n      productId: 123,\n      quantity: 3\n    }\n  ]\n}\n\nstorefrontCall(endpoint, requestBody);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filtered Product Data with Field Selection in BigCommerce API\nDESCRIPTION: Example of using include_fields parameter to retrieve specific product fields (name and price) from the BigCommerce catalog API. The request demonstrates how to optimize response time by selecting only necessary fields.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/about/common-query-params.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products?include_fields=name,price\n\n{\n    \"data\": [\n        {\n            \"id\": 77,\n            \"name\": \"Red printed scarf\",\n            \"price\": 12\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Available Pickup Options via Storefront REST API\nDESCRIPTION: POST request to find available pickup options based on location coordinates and item details. Includes search radius and product variant information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nPOST https://{{yourstore.example.com}}/api/storefront/pickup-options\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"searchArea\": {\n    \"radius\": {\n      \"value\": 25,\n      \"unit\": \"MI\"\n    },\n    \"coordinates\": {\n      \"latitude\": 32.8058616,\n      \"longitude\": -98.0105544\n    }\n  },\n  \"items\": [\n    {\n      \"variantId\": 1,\n      \"quantity\": 1\n    },\n    {\n      \"variantId\": 2,\n      \"quantity\": 2\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Webhook with Custom Headers\nDESCRIPTION: Example of creating a webhook with custom authorization headers for additional security.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/tutorial.mdx#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/hooks\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"scope\": \"store/cart/lineItem/*\",\n  \"destination\": \"https://myapp.herokuapp.com/\",\n  \"is_active\": true,\n  \"headers\": {\n    \"Authorization\": \"Basic SGVsbG86R29vZGJ5ZQ==\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Banner with BigCommerce Marketing API\nDESCRIPTION: This snippet demonstrates how to create a banner using a POST request to the BigCommerce Marketing API. It includes the necessary headers and a JSON payload with banner details such as name, content, page, location, and visibility.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/draft/marketing-api-overview.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v2/banners\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"name\": \"Sale Banner\",\n  \"content\": \"<p> Sale! Tuesday at 9am! </p>\",\n  \"page\": \"home_page\",\n  \"location\": \"top\",\n  \"date_type\": \"always\",\n  \"visible\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Banners with GraphQL in BigCommerce\nDESCRIPTION: GraphQL query to retrieve banner content for different page types including home page, search page, category page, and brand page. Returns banner metadata and content for visible banners only.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/site-content.mdx#2025-04-16_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    content {\n      banners {\n        homePage {\n          edges {\n            node {\n              entityId\n              name\n              content\n              location\n            }\n          }\n        }\n        searchPage {\n          edges {\n            node {\n              entityId\n              name\n              content\n              location\n            }\n          }\n        }\n        categoryPage (categoryEntityId: 29) {\n          edges {\n            node {\n              entityId\n              name\n              content\n              location\n            }\n          }\n        }\n        brandPage (brandEntityId: 41) {\n          edges {\n            node {\n              entityId\n              name\n              content\n              location\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Widget Template using BigCommerce Widgets API\nDESCRIPTION: This HTTP PUT request updates an existing widget template, creating a new version without affecting existing widgets. It uses the 'create_new_version' parameter set to true.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/versioning.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPUT /stores/{{store_hash}}v3/content/widget-templates/{uuid}\nHost: api.bigcommerce.com\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"name\": \"Red Text\",\n  \"schema\": [\n    {\n      \"type\": \"tab\",\n      \"label\": \"Content\",\n      \"sections\": [\n        {\n          \"settings\": [\n            {\n              \"type\": \"text\",\n              \"label\": \"Text Content\",\n              \"id\": \"textContent\",\n              \"typeMeta\": {\n                \"maxLength\": 1000\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"template\": \"<h1 style='color:red;'>{{textContent}}</h1>\",\n  \"create_new_version\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Theme Variation in config.json\nDESCRIPTION: This snippet shows how to insert a custom theme variation into the `variations` object of a BigCommerce Stencil theme's `config.json` file. It includes settings for the variation's name, ID, desktop and mobile screenshots, description, demo URL, and optimization criteria.  No dependencies are required.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/variations.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"variations\": [\n// ...\n  {\n    \"name\": \"MyCustomVariation\",\n    \"id\": \"my_custom_variation\",\n    \"meta\": {\n      \"desktop_screenshot\": \"my_custom_desktop_screenshot.jpg\",\n      \"mobile_screenshot\": \"my_custom_mobile_screenshot.png\",\n      \"description\": \"This is a really cool custom style of the Stencil Theme\",\n      \"demo_url\": \"https://stencil-custom.mybigcommerce.com\",\n      \"optimized_for\": [\"fashion\", \"image_heavy\", \"etc\"],\n      \"industries\": []\n    },\n  },\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Pickup Consignment for Checkout in BigCommerce API\nDESCRIPTION: Demonstrates how to add a pickup consignment to a checkout using the BigCommerce API. The request specifies the pickup method ID and the line items to be included in the pickup consignment.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/checkouts/{{checkout_id}}/consignments\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"pickup_option\": {\n      \"pickup_method_id\": 2\n    },\n    \"line_items\": [\n      {\n        \"item_id\": \"67642f07-49d1-4501-8b7d-2e589aec34b8\",\n        \"quantity\": 1\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: String Replacement with strReplace Helper in Handlebars\nDESCRIPTION: Demonstrates the usage of the strReplace helper to replace occurrences of a substring within a string. It shows examples of replacing all instances, some instances, and no instances based on different parameter configurations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_93\n\nLANGUAGE: handlebars\nCODE:\n```\n<!-- Replace all instances -->\n{{strReplace \"Buy one, get one half price. Limit one per customer.\" \"one\" \"two\"}}\n<!-- output: Buy two, get two half price. Limit two per customer. -->\n\n{{strReplace \"Buy one, get one half price. Limit one per customer.\" \"one\" \"two\" 3}}\n<!-- output: Buy two, get two half price. Limit two per customer. -->\n\n{{strReplace \"Buy one, get one half price. Limit one per customer.\" \"one\" \"two\" 100}}\n<!-- output: Buy two, get two half price. Limit two per customer. -->\n\n\n<!-- Replace some instances -->\n{{strReplace \"Buy one, get one half price. Limit one per customer.\" \"one\" \"two\" 2}}\n<!-- output: Buy two, get two half price. Limit one per customer. -->\n\n\n<!-- Replace no instances -->\n{{strReplace \"Buy one, get one half price. Limit one per customer.\" \"one\" \"two\" 0}}\n<!-- output: Buy one, get one half price. Limit one per customer. -->\n\n{{strReplace \"Buy one, get one half price. Limit one per customer.\" \"one\" \"two\" -2}}\n<!-- output: Buy one, get one half price. Limit one per customer. -->\n```\n\n----------------------------------------\n\nTITLE: Creating a Widget Template - BigCommerce API\nDESCRIPTION: This snippet details the process of making a POST request to create a new widget template in the BigCommerce system. It specifies the required parameters to include in the request body for successful creation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/content/widgets.mdx#2025-04-16_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nTo expose a third-party widget template in Page Builder, make a `POST` request for the [Widget Template](/docs/rest-content/widgets/widget-template#create-a-widget-template). Include the widget's `name`, `template`, and `schema` in the body of your request.\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for BigCommerce App\nDESCRIPTION: Environment configuration file specifying client credentials, callback URLs, database settings, and API endpoints for a BigCommerce app.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/app-extensions/guide.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n#Get the Client ID and Secret from the Developer Portal\n# https://developer.bigcommerce.com/api-docs/apps/quick-start#register-a-draft-app\nCLIENT_ID={app client id}\nCLIENT_SECRET={app secret}\n\n# Test locally with ngrok\n# https://developer.bigcommerce.com/api-docs/apps/guide/development#testing-locally-with-ngrok\nAUTH_CALLBACK=https://{ngrok_url}/api/auth\n\n# Replace jwt key with a 32+ random character secret\nJWT_KEY={SECRET}\n\n# Specify the type of database\nDB_TYPE=firebase\n\n# If using firebase, enter your config here\nFIRE_API_KEY={firebase key}\nFIRE_DOMAIN={firebase domain}\nFIRE_PROJECT_ID={firebase project id}\n\n# If using mysql, enter your config here\nMYSQL_HOST={mysql host}\nMYSQL_DATABASE={mysql database name}\nMYSQL_USERNAME={mysql username}\nMYSQL_PASSWORD={mysql password}\nMYSQL_PORT={mysql port *optional*}\n\n# BigCommerce API URL\nAPI_URL=api.bigcommerce.com\n```\n\n----------------------------------------\n\nTITLE: Adding User to Account with GraphQL\nDESCRIPTION: GraphQL mutation to add a new user to a BigCommerce account by email address. Returns the account name after successful addition.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/graphql-account/users.mdx#2025-04-16_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  account {\n    addUserToAccount(\n      input: {\n        email: \"jane.doe@example.com\"\n      }\n    ) {\n      account {\n        accountInfo {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Current Customer JWT from BigCommerce API\nDESCRIPTION: Makes a GET request to the BigCommerce Current Customer API to obtain a JSON Web Token (JWT) for the current customer. This token is used in subsequent authentication steps.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/b2b-edition/authentication/hosted-auth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://{yourstore.example.com}/customer/current.jwt?app_client_id=dl7c39mdpul6hyc489yk0vzxl6jesyx\n```\n\n----------------------------------------\n\nTITLE: Customizing Quick View Template in JavaScript\nDESCRIPTION: JavaScript code for rendering a custom quick view template. It shows how to handle click events, open a modal, and load product details using an API call.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/dynamic-rendering.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet $modal = $('#modal'),\n  $modalContent = $('.modal-content', $modal),\n  $modalOverlay = $('.loadingOverlay', $modal),\n  modalModifierClasses = 'modal--large';\n\n$('body').on('click', '.quickview', (event) => {\n  let productId = $(event.currentTarget).data('product-id');\n\n  event.preventDefault();\n\n  // clear the modal\n  $modalContent.html('');\n  $modalOverlay.show();\n\n  // open modal\n  $modal.foundation('reveal', 'open');\n\n\t//quicker-view.html statement, replacing the standard template's quick-view.html template\n  utils.api.product.getById(productId, {template: 'products/quicker-view'}, function done(err, response) {\n      $modalOverlay.hide();\n      $modalContent.html(response);\n\n      return new ProductDetails($modalContent, context);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating 5% Non-VIP Customer Discount in BigCommerce\nDESCRIPTION: Example showing how to create a 5% automatic discount for non-VIP customers by excluding VIP group (group_id: 1). Applies to guests and registered customers not in VIP group.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/customer.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"5% off for non-VIP customers\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"customer\": {\n    \"excluded_group_ids\": [\n      1\n    ]\n  },\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_value\": {\n          \"discount\": {\n            \"percentage_amount\": \"5\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Calling the deleteCartItem() Function with BigCommerce API Parameters\nDESCRIPTION: Example of how to call the deleteCartItem() helper function with the appropriate parameters: the API endpoint, cart ID, and item ID to be deleted.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndeleteCartItem(`/api/storefront/carts/`, `d4e978c2-bdcf-41b0-a49b-fecf4f5223c1`, `3f8dd1ed-f917-41be-b7f7-20c10f406e09`);\n```\n\n----------------------------------------\n\nTITLE: Updating Channel-Specific Store Profile Settings\nDESCRIPTION: Demonstrates how to update channel-specific store profile settings and how to reset them back to global defaults using null values.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/settings/configuration.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/settings/store/profile?channel_id=123\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"store_name\": \"A different Channel-Specific Name for Channel 123\",\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/settings/store/profile?channel_id=124\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n\n{\n  \"store_address\": null,\n  \"store_email\": null,\n  \"store_name\": null,\n  \"store_phone\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Consignment Shipping Option\nDESCRIPTION: Example HTTP request showing how to update a consignment's shipping option ID. This request updates an existing consignment with a new shipping option selected from the available options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/consignments.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/checkouts/{checkoutId}/consignments/{consignmentId}\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"shipping_option_id\": \"9241669174884c2f2e83b3adabf03f83\"\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Pickup Options with Stock via REST API\nDESCRIPTION: POST request to check available pickup options with stock information, including location coordinates and item quantities.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/pickup/options\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"search_area\": {\n    \"coordinates\": {\n      \"latitude\": 32.8058616,\n      \"longitude\": -98.0105544\n    },\n    \"radius\": {\n      \"value\": 25,\n      \"unit\": \"MI\"\n    }\n  },\n  \"items\": [\n    {\n      \"variant_id\": 1,\n      \"quantity\": 1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Translation Fields to Home Page Template in HTML\nDESCRIPTION: This snippet demonstrates how to add translation fields to region elements in the home page template. It includes examples for featured products, top sellers, new products, and global content regions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/page-regions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"main full\">\n    {{#if products.featured}}\n        {{> components/products/featured products=products.featured \ncolumns=theme_settings.homepage_featured_products_column_count}}\n    {{/if}}\n    {{{region name=\"home_below_featured_products\" \ntranslation=\"i18n.RegionName.HomeBelowFeaturedProducts\"}}}\n\n    {{#if products.top_sellers}}\n        {{> components/products/top products=products.top_sellers \ncolumns=theme_settings.homepage_top_products_column_count}}\n    {{/if}}\n    {{{region name=\"home_below_top_products\" \ntranslation=\"i18n.RegionName.HomeBelowTopProducts\"}}}\n\n    {{#if products.new}}\n        {{> components/products/new products=products.new \ncolumns=theme_settings.homepage_new_products_column_count}}\n    {{/if}}\n    {{{region name=\"home_below_new_products\" \ntranslation=\"i18n.RegionName.HomeBelowNewProducts\"}}}\n    {{{region name=\"below_content--global\" \ntranslation=\"i18n.RegionName.HomeBelowContentGlobal\"}}} \n</div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Submitting Shipping Quotes in JavaScript\nDESCRIPTION: This code demonstrates how to fetch shipping quotes with getShippingQuotes and then submit a selected quote with submitShippingQuote. It collects shipping address information, fetches available shipping options, and handles the selection and submission of the chosen shipping method.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nbindEstimatorEvents() {\n  const $estimatorContainer = $('.shipping-estimator');\n  const $estimatorForm = $('.estimator-form');\n\n  $estimatorForm.on('submit', (event) => {\n    const params = {\n      country_id: $('[name=\"shipping-country\"]', $estimatorForm).val(),\n      state_id: $('[name=\"shipping-state\"]', $estimatorForm).val(),\n      city: $('[name=\"shipping-city\"]', $estimatorForm).val(),\n      zip_code: $('[name=\"shipping-zip\"]', $estimatorForm).val(),\n    };\n\n    event.preventDefault();\n\n    utils.api.cart.getShippingQuotes(params, 'cart/shipping-quotes', (err, response) => {\n      $('.shipping-quotes').html(response.content);\n\n      // bind the select button\n      $('.select-shipping-quote').on('click', (clickEvent) => {\n        const quoteId = $('.shipping-quote:checked').val();\n\n        clickEvent.preventDefault();\n\n        utils.api.cart.submitShippingQuote(quoteId, () => {\n          location.reload();\n        });\n      });\n    });\n  }); \n}\n```\n\n----------------------------------------\n\nTITLE: Creating Products Page Component with BigDesign\nDESCRIPTION: React component implementation using BigDesign's StatefulTable for displaying product data with sorting, pagination, and custom rendering.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button, Dropdown, Panel, Small, StatefulTable, Link as StyledLink } from '@bigcommerce/big-design';\nimport { MoreHorizIcon } from '@bigcommerce/big-design-icons';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport { ReactElement } from 'react';\nimport { useProductList } from '../../lib/hooks';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst Products = () => {\n    const router = useRouter();\n    const { isError, isLoading, list = [] } = useProductList();\n    const tableItems = list.map(({ id, inventory_level: stock, name, price }) => ({\n        id,\n        name,\n        price,\n        stock,\n    }));\n\n    const renderName = (id: number, name: string): ReactElement => (\n        <Link href={`/products/${id}`}>\n            <StyledLink>{name}</StyledLink>\n        </Link>\n    );\n\n    const renderPrice = (price: number): string => (\n        new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(price)\n    );\n\n    const renderStock = (stock: number): ReactElement => (stock > 0\n        ? <Small>{stock}</Small>\n        : <Small bold marginBottom=\"none\" color=\"danger\">0</Small>\n    );\n\n    const renderAction = (id: number): ReactElement => (\n        <Dropdown\n            items={[ { content: 'Edit product', onItemClick: () => router.push(`/products/${id}`), hash: 'edit' } ]}\n            toggle={<Button iconOnly={<MoreHorizIcon color=\"secondary60\" />} variant=\"subtle\" />}\n        />\n    );\n\n    return (\n        <Panel>\n            <StatefulTable\n                columns={[\n                    { header: 'Product name', hash: 'name', render: ({ id, name }) => renderName(id, name), sortKey: 'name' },\n                    { header: 'Stock', hash: 'stock', render: ({ stock }) => renderStock(stock), sortKey: 'stock' },\n                    { header: 'Price', hash: 'price', render: ({ price }) => renderPrice(price), sortKey: 'price' },\n                    { header: 'Action', hideHeader: true, hash: 'id', render: ({ id }) => renderAction(id), sortKey: 'id' },\n                ]}\n                items={tableItems}\n                itemName=\"Products\"\n                stickyHeader\n            />\n        </Panel>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Locations using BigCommerce API (HTTP)\nDESCRIPTION: This snippet demonstrates how to make an HTTP GET request to retrieve all locations from the BigCommerce API. It includes the necessary headers for authentication and specifies the Accept header for JSON responses.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/locations\nX-Auth-Token: {{access_token}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Loading Pickup Options with Checkout SDK in JavaScript\nDESCRIPTION: This code demonstrates how to load pickup options using the Checkout SDK's loadPickupOptions method. It specifies a consignment ID and search area (with radius and coordinates) to fetch available pickup options, which are then cached for future use unless parameters change.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/checkout.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst consignmentId = '123';\nconst searchArea = {\n  radius: {\n    value: 1.4,\n    unit: 'KM' // Another unit allowed here is 'MI'\n  },\n  coordinates: {\n    latitude: 1.4,\n    longitude: 0\n  }\n};\n\nconst query: PickupOptionRequestBody = { consignmentId, searchArea };\n\nconst state = await checkoutService.loadPickupOptions(query: PickupOptionRequestBody);\n\n/*\n* Pickup options are once fetched and then cached against the consignmentId and\n* searchArea. So unless you change either of the parameters the options there won't \n* be an API call to the server and memoized options will be returned to checkout App\n*/\n\n// To log and see pickup options\nconsole.log(state.data.getPickupOptions(consignmentId, searchArea));\n```\n\n----------------------------------------\n\nTITLE: Coupon Promotion Response Structure\nDESCRIPTION: JSON response showing the complete structure of a coupon promotion with $30 off $100 spend configuration, including rules, notifications, and redemption settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Get $30 off $100\",\n  \"customer\": {\n    \"group_ids\": [],\n    \"minimum_order_count\": 0\n  },\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_value\": {\n          \"discount\": {\n            \"fixed_amount\": \"30\"\n          }\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": true,\n      \"condition\": {\n        \"cart\": {\n          \"minimum_spend\": \"100\"\n        }\n      }\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ],\n  \"stop\": false,\n  \"currency_code\": \"USD\",\n  \"current_uses\": 0,\n  \"max_uses\": 100,\n  \"start_date\": \"2019-07-26T05:00:00+00:00\",\n  \"end_date\": null,\n  \"status\": \"ENABLED\",\n  \"redemption_type\": \"COUPON\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Free Shipping and Order Discount Based on Product Quantity\nDESCRIPTION: JSON request for creating a promotion that offers free shipping to all zones when a customer buys at least 2 of product ID 118, and 10% off the entire order when purchasing at least 2 of product ID 130. The promotion is set to apply automatically.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/multiple-rules.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy two of product X, get free shipping to all zones, and 10% off order\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"products\": [\n              118\n            ]\n          },\n          \"minimum_quantity\": 2\n        }\n      },\n      \"action\": {\n        \"shipping\": {\n          \"free_shipping\": true,\n          \"zone_ids\": \"*\"\n        }\n      }\n    },\n    {\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"products\": [\n              130\n            ]\n          },\n          \"minimum_quantity\": 2\n        }\n      },\n      \"action\": {\n        \"cart_value\": {\n          \"discount\": {\n            \"percentage_amount\": 10\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Process Payment Request with Correlation\nDESCRIPTION: Example of processing a payment using the Payments API with correlation ID header matching the previous checkout request. Demonstrates payment instrument configuration and authorization.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://payments.bigcommerce.com/stores/{{STORE_HASH}}/payments\nAccept: application/vnd.bc.v1+json\nContent-Type: application/json\n# Payment access token from the GraphQL Storefront API response\nAuthorization: PAT eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2ODU3MjQwMzQsIm5iZiI6MTY4NTcyMDQzNCwiaXNzIjoicGF5bWVudHMuYmlnY29tbWVyY2UuY29tIiwic3ViIjoidmpid3FiYWJwMSIsImp0aSI6IjAzODU3ODk2LTdkY2YtNDIzNi04OTQ5LWU0MjcyYWU3ZGZjMSIsImlhdCI6MTY4NTcyMDQzNCwiZGF0YSI6eyJzdG9yZV9pZCI6IjEwMDI4ODA3NDYiLCJvcmRlcl9pZCI6IjEwNiIsImFtb3VudCI6MjUwMCwiY3VycmVuY3kiOiJVU0QifX0.iiJ96cYKtk2-oLRXvZHs1lWUl9v8JkEkCdHShbyfEK4\n# Correlation header matches previous request\nX-Correlation-Id: a7d28ca2-d4b2-4dc8-9f07-0706c431a372\n\n{\n  \"payment\": {\n    \"instrument\": {\n      \"type\": \"stored_card\",\n      \"token\": \"050a1e5c982e5905288ec5ec33f292772762033a0704f46fccb16bf1940b51ef\",\n      \"verification_value\": \"900\"\n    },\n    \"payment_method_id\": \"stripe.card\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting and Responding with Shipping Rates\nDESCRIPTION: Example of a POST request to obtain shipping rates, including origin, destination, and item details. The response demonstrates how to return multiple carrier quotes with various shipping options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/shipping.mdx#2025-04-16_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST https://example.com/rate\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"base_options\": {\n    \"origin\": {\n      \"street_1\": \"685 MARKET ST\",\n      \"street_2\": \"\",\n      \"zip\": \"94105\",\n      \"city\": \"SAN FRANCISCO\",\n      \"state_iso2\": \"CA\",\n      \"country_iso2\": \"US\",\n      \"address_type\": \"commercial\"\n    },\n    \"destination\": {\n      \"street_1\": \"\",\n      \"street_2\": \"\",\n      \"zip\": \"94103\",\n      \"city\": \"\",\n      \"state_iso2\": \"CA\",\n      \"country_iso2\": \"US\",\n      \"address_type\": \"residential\",\n      \"form_fields\": {\n          \"1234\": \"checkbox_selection_1\"\n      }\n    },\n    \"items\": [\n      {\n        \"sku\": \"SKU-100\",\n        \"variant_id\": \"1\",\n        \"product_id\": \"1\",\n        \"name\": \"Shirt\",\n        \"length\": {\n          \"units\": \"in\",\n          \"value\": 1\n        },\n        \"width\": {\n          \"units\": \"in\",\n          \"value\": 1\n        },\n        \"height\": {\n          \"units\": \"in\",\n          \"value\": 1\n        },\n        \"weight\": {\n          \"units\": \"oz\",\n          \"value\": 1\n        },\n        \"discounted_price\": {\n          \"currency\": \"USD\",\n          \"amount\": \"10\"\n        },\n        \"declared_value\": {\n          \"currency\": \"USD\",\n          \"amount\": \"10\"\n        },\n        \"quantity\": 1,\n        \"attributes\": []\n      }\n    ],\n    \"customer\": {\n      \"customer_groups\": [\n        {\n          \"customer_group_id\": 5,\n          \"customer_group_name\": \"Retail\"\n        }\n      ],\n      \"customer_id\": 6\n    },\n    \"store_id\": \"ru7t7fv9\",\n    \"request_context\": {\n      \"reference_values\": [\n        {\n          \"name\": \"cart_id\",\n          \"value\": \"8\"\n        }\n      ]\n    }\n  },\n  \"connection_options\": {\n    \"key\": \"userKey\",\n    \"account_number\": \"userAccountNumber\"\n  },\n  \"zone_options\": {\n    \"show_transit_time\": true\n  },\n  \"rate_options\": []\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"quote_id\": \"example_quote\",\n  \"messages\": [],\n  \"carrier_quotes\": [\n    {\n      \"carrier_info\": {\n        \"code\": \"usps_pitney_bowes\",\n        \"display_name\": \"USPS\"\n      },\n      \"quotes\": [\n        {\n          \"code\": \"\",\n          \"rate_id\": \"9vcV1JfckPJZW2pjeNXcKP5y\",\n          \"display_name\": \"USPS Priority Mail\",\n          \"cost\": {\n            \"currency\": \"USD\",\n            \"amount\": 6.35\n          },\n          \"transit_time\": {\n            \"units\": \"BUSINESS_DAYS\",\n            \"duration\": 1\n          },\n          \"dispatch_date\": \"2018-08-29T00:00:00-05:00\"\n        },\n        {\n          \"code\": \"\",\n          \"rate_id\": \"EakTRTvck2XYGVAQw9Mza8WW\",\n          \"display_name\": \"USPS Priority Mail Express\",\n          \"cost\": {\n            \"currency\": \"USD\",\n            \"amount\": 22.98\n          },\n          \"transit_time\": {\n            \"units\": \"BUSINESS_DAYS\",\n            \"duration\": 1\n          },\n          \"dispatch_date\": \"2018-08-29T00:00:00-05:00\"\n        }\n      ]\n    },\n    {\n      \"carrier_info\": {\n        \"code\": \"fedex\",\n        \"display_name\": \"FedEx\"\n      },\n      \"quotes\": [\n        {\n          \"code\": \"GND\",\n          \"rate_id\": \"JnQ2MPqkAMX9cBsw0jyt551R\",\n          \"display_name\": \"FedEx Ground\",\n          \"cost\": {\n            \"currency\": \"USD\",\n            \"amount\": 8.53\n          },\n          \"transit_time\": {\n            \"units\": \"BUSINESS_DAYS\",\n            \"duration\": 1\n          },\n          \"dispatch_date\": \"2018-09-05T11:00:00-05:00\"\n        },\n        {\n          \"code\": \"2DA\",\n          \"rate_id\": \"QwygEz9XjZx1bT9rfDZsVxSy\",\n          \"display_name\": \"FedEx 2 Day\",\n          \"cost\": {\n            \"currency\": \"USD\",\n            \"amount\": 10.47\n          },\n          \"transit_time\": {\n            \"units\": \"BUSINESS_DAYS\",\n            \"duration\": 2\n          },\n          \"dispatch_date\": \"2018-09-05T11:00:00-05:00\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Query Three-Level Category Tree\nDESCRIPTION: GraphQL query to retrieve the first three levels of the category hierarchy using fragments for consistent field selection.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery CategoryTree3LevelsDeep {\n  site {\n    categoryTree {\n      ...CategoryFields\n      children {\n        ...CategoryFields\n        children {\n          ...CategoryFields\n        }\n      }\n    }\n  }\n}\n\nfragment CategoryFields on CategoryTreeItem {\n  name\n  path\n  entityId\n}\n```\n\n----------------------------------------\n\nTITLE: Example Payload Claims in BigCommerce Single-Click App Callbacks\nDESCRIPTION: JSON example of the payload claims encoded in the signed_payload_jwt sent to app callback endpoints. It includes information about the store, user, and app.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/callbacks.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aud\": \"U8RphZeDjQc4kLVSzNjePo0CMjq7yOg\",\n  \"iss\": \"bc\",\n  \"iat\": 1659031626,\n  \"nbf\": 1659031621,\n  \"exp\": 1659118026,\n  \"jti\": \"c5f0bcf5-a504-4ae6-8dcc-0e40eaa5a070\",\n  \"sub\": \"stores/z4zn3wo\",\n  \"user\": {\n    \"id\": 9876543,\n    \"email\": \"authorized_user@example.com\",\n    \"locale\": \"en-US\"\n  },\n  \"owner\": {\n    \"id\": 7654321,\n    \"email\": \"owner@example.com\"\n  },\n  \"url\": \"/\", \n  \"channel_id\": null \n}\n```\n\n----------------------------------------\n\nTITLE: Installing Open Source Checkout Dependencies\nDESCRIPTION: Commands for cloning the checkout-js repository and installing required dependencies. Requires Node >= v20.x and NPM >= v9.x on a Unix-based system.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/open-checkouts/guide.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone the repo\ngit clone https://github.com/bigcommerce/checkout-js\n\n# Install dependencies\ncd checkout-js\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Initializing Product List API Endpoint with TypeScript\nDESCRIPTION: Implements a Next.js API endpoint for fetching product data from BigCommerce's Catalog API. Includes error handling and session management.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { bigcommerceClient, getSession } from '../../../lib/auth';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function list(req: NextApiRequest, res: NextApiResponse) {\n    try {\n        const { accessToken, storeHash } = await getSession(req);\n        const bigcommerce = bigcommerceClient(accessToken, storeHash);\n        // Optional: pass in API params here\n        const params = new URLSearchParams({ limit: '11' }).toString();\n\n        const { data } = await bigcommerce.get(`/catalog/products?${params}`);\n        res.status(200).json(data);\n    } catch (error) {\n        const { message, response } = error;\n        res.status(response?.status || 500).json({ message });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Pickup Method Details in BigCommerce\nDESCRIPTION: This HTTP request updates a specific detail (collection instructions) for an existing pickup method. The request only needs to include the pickup method ID and the fields to be updated.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/pickup/methods\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"id\": 2,\n    \"collection_instructions\": \"See our friendly staff member outside the store.\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using the limit Helper in Handlebars with BigCommerce\nDESCRIPTION: The limit helper restricts the number of items returned from an array or string. It takes two parameters: the data to limit and the maximum number of items to return.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_30\n\nLANGUAGE: handlebars\nCODE:\n```\n{{limit data limit}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<!-- context = {var: 'This is longer than the chosen limit'} -->\n{{limit var 10}}\n<!-- => This is lo -->\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<!-- context = {var: 'This is longer than the chosen limit'} -->\n{{limit var 10}}\n<!-- results in: 'This is lo' -->\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#each (limit cart.items 4)}}\n    <li class=\"previewCartItem\">\n        <div class=\"previewCartItem-image\">\n            {{#if type '==' 'GiftCertificate'}}\n                <img src=\"{{cdn ../../theme_settings.default_image_gift_certificate}}\" alt=\"GiftCertificate\" title=\"GiftCertificate\">\n            {{else}}\n                {{> components/common/responsive-img\n                    image=image\n                    fallback_size=../../theme_settings.productthumb_size\n                    lazyload=../../theme_settings.lazyload_mode\n                    default_image=../../theme_settings.default_image_product\n                }}\n            {{/if}}\n        </div>\n    </li>\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Response for Product Metafields Query in JSON\nDESCRIPTION: The JSON response illustrates the output for the query that fetches product metafields. It includes the metafield IDs, product entity IDs, keys, and values, allowing developers to programmatically access product-specific metadata crucial for store management.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"product\": {\n        \"metafields\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"id\": \"TWV0YWZpZWxkczoxNQ==\",\n                \"entityId\": 15,\n                \"key\": \"Location\",\n                \"value\": \"4HG\"\n              }\n            },\n            {\n              \"node\": {\n                \"id\": \"TWV0YWZpZWxkczoxNg==\",\n                \"entityId\": 16,\n                \"key\": \"Site\",\n                \"value\": \"2SL\"\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Category Translations using GraphQL in BigCommerce\nDESCRIPTION: This GraphQL query retrieves a paginated list of translations for categories by resourceType, channel, and locale. It returns up to 50 results per request, including the resourceId and translated fields.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/translations/categories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n    store {\n        translations(filters: {\n            resourceType: CATEGORIES,\n            channelId: \"bc/store/channel/3\",\n            localeId: \"bc/store/locale/en\"\n        } first: 50) {\n            edges {\n                node {\n                      resourceId\n                        fields {\n                            fieldName\n                            original\n                            translation\n                        }\n                    }\n                cursor\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Shipping Options in BigCommerce Checkout - JSON\nDESCRIPTION: JSON structure showing available shipping options for a checkout including pickup in store, flat rate, and shipping by weight options. Each option includes an ID, type, description, cost and other metadata.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/rest-management.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"available_shipping_options\": [\n  {\n    \"id\": \"6ded13392879983ee32a3563f5fa6a7b\",\n    \"type\": \"shipping_pickupinstore\",\n    \"description\": \"Pickup In Store\",\n    \"image_url\": \"\",\n    \"cost\": 0,\n    \"transit_time\": \"\",\n    \"additional_description\": \"\"\n  },\n  {\n    \"id\": \"26fb2db4ad77b0f039328d22d2869617\",\n    \"type\": \"shipping_flatrate\",\n    \"description\": \"Flat Rate\",\n    \"image_url\": \"\",\n    \"cost\": 5,\n    \"transit_time\": \"\",\n    \"additional_description\": \"\"\n  },\n  {\n    \"id\": \"508540c73074d5ffa2cc3dced0adc552\",\n    \"type\": \"shipping_byweight\",\n    \"description\": \"Ship by Weight\",\n    \"image_url\": \"\",\n    \"cost\": 8,\n    \"transit_time\": \"\",\n    \"additional_description\": \"\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Deleting Cart Line Item\nDESCRIPTION: HTTP request for removing a specific line item from a cart.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/carts.mdx#2025-04-16_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nDELETE https://api.bigcommerce.com/stores/{{store_hash}}/v3/carts/{{cartId}}/items/{{itemId}}\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Component Insertion with dynamicComponent Helper in Handlebars\nDESCRIPTION: Demonstrates how to use the dynamicComponent helper to insert a dynamic partial at a specified path. It takes a single parameter indicating the path to insert the dynamic component.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_97\n\nLANGUAGE: handlebars\nCODE:\n```\n{{dynamicComponent path}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#each forms.create_account.address_fields }}\n    {{{dynamicComponent 'components/common/forms'}}}\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Fetching Product Reviews with GraphQL - GraphQL\nDESCRIPTION: Provides a sample GraphQL query for fetching product reviews exceeding defined limits. It retrieves 250 reviews at a time for a specified product, highlighting usage of pagination with cursors.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter-reference.mdx#2025-04-16_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\n# Fetch product reviews for a product\nquery reviewsByProductId(\n  $productId: Int!\n  $cursor: String\n  # Use GraphQL Query Variables to inject your product ID\n) {\n  site {\n    product(entityId: $productId) {\n      reviews(first:250, after:$cursor) {\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n        edges {\n          node {\n            rating\n            title\n            text\n            createdAt {\n              utc\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Widget in BigCommerce HTML and CSS\nDESCRIPTION: This template creates a customizable button widget with extensive styling options, including alignment, padding, margins, colors, and hover effects.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/examples.mdx#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<style>.sd-button-{{_.id}}{display:flex;align-items:center;{{#if alignment.horizontal '===' 'center'}}justify-content: center;{{else if alignment.horizontal '===' 'left'}}justify-content: flex-start;{{else if alignment.horizontal '===' 'right'}}justify-content: flex-end;{{/if}}}.sd-button-{{_.id}}a{color:{{textColor}};font-size:{{textSize.value}}{{textSize.type}};font-family:{{fontFamily}};font-weight:{{fontWeight}};padding-top:{{buttonPadding.top.value}}{{buttonPadding.top.type}};padding-right:{{buttonPadding.right.value}}{{buttonPadding.right.type}};padding-bottom:{{buttonPadding.bottom.value}}{{buttonPadding.bottom.type}};padding-left:{{buttonPadding.left.value}}{{buttonPadding.left.type}};margin-top:{{buttonMargin.top.value}}{{buttonMargin.top.type}};margin-right:{{buttonMargin.right.value}}{{buttonMargin.right.type}};margin-bottom:{{buttonMargin.bottom.value}}{{buttonMargin.bottom.type}};margin-left:{{buttonMargin.left.value}}{{buttonMargin.left.type}};text-align:center;text-decoration:none}.sd-button-{{_.id}}a{background-color:{{backgroundColor}};border:{{buttonBorder}}px solid{{borderColor}};border-radius:{{borderRadius}}px}.sd-button-{{_.id}}a:hover{background-color:{{backgroundColorHover}};border-color:{{borderColorHover}};color:{{textColorHover}}}@media only screen and (max-width: 700px){.sd-button-{{_.id}}{}}</style><div class=\"sd-button-widget sd-button-{{_.id}}\"> <a href=\"{{buttonLink}}\" role=\"button\">{{buttonText}}</a></div>\n```\n\n----------------------------------------\n\nTITLE: Using all Helper for Conditional Rendering in Handlebars\nDESCRIPTION: Demonstrates the all helper which renders a block if all parameters evaluate to true. The example shows how to check multiple conditions before displaying a custom fields tab.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_58\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#all items theme_settings.optionA theme_settings.optionB}}\n   <!-- block to display if all items evaluate to true -->\n{{/all}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#all product.custom_fields theme_settings.show_custom_fields_tabs}}\n    <li class=\"tab\">\n        <a class=\"tab-title\" href=\"#tab-{{dashcase (lowercase (sanitize theme_settings.pdp-custom-fields-tab-label))}}\">{{sanitize theme_settings.pdp-custom-fields-tab-label}}</a>\n    </li>\n{{/all}}\n```\n\n----------------------------------------\n\nTITLE: Creating Minimum Spend Discount Promotion\nDESCRIPTION: Creates a promotion offering $20 off when cart total exceeds $200. Includes notification settings for upsell, eligibility, and applied states.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/order.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Spend $X and get $X off order\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_value\": {\n          \"discount\": {\n            \"fixed_amount\": \"20\"\n          }\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": true,\n      \"condition\": {\n        \"cart\": {\n          \"minimum_spend\": \"200\"\n        }\n      }\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ],\n  \"stop\": false,\n  \"currency_code\": \"USD\",\n  \"status\": \"ENABLED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Subscription Data with Pagination - GraphQL\nDESCRIPTION: This GraphQL query retrieves subscription data associated with an account, allowing pagination through 'first' and 'after' parameters. It returns subscription details such as id, accountId, activation date, pricing information, status, and product scope.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  account {\n    subscriptions(first: 10, after: \"WzE3MTk3NDYxNzUyNjg2NDUsNzdd\") {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          accountId\n          activationDate\n          pricePerInterval {\n            value\n            currencyCode\n          }\n          billingInterval\n          status\n          scope {\n            type\n            id\n          }\n          product {\n            productLevel\n            id\n            type\n          }\n          createdAt\n          currentPeriodEnd\n          updatedAt\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Widget Placement with POST Request to Widgets API\nDESCRIPTION: This HTTP request creates a placement for the widget in the 'category_header_banner' region of a specific category page. It specifies the widget's position and status.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /stores/{{store_hash}}/v3/content/placements\nHost: api.bigcommerce.com\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"widget_uuid\": \"{your-widget-uuid}\",\n  \"entity_id\": \"{your-category-id}\",\n  \"sort_order\": 1,\n  \"region\": \"category_header_banner\",\n  \"template_file\": \"pages/category\",\n  \"status\": \"active\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Brand-Specific Free Shipping Promotion\nDESCRIPTION: Example of creating a promotion that offers free shipping when customers spend $100 or more on specific brand products. Includes zone-specific shipping rules and multiple notification types for cart display.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/brand.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Order $100 of this common good brand and get free shipping\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"shipping\": {\n          \"free_shipping\": true,\n          \"zone_ids\": [\n            1,\n            3\n          ]\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"brands\": [\n              37\n            ]\n          },\n          \"minimum_quantity\": 1,\n          \"minimum_spend\": 100\n        }\n      }\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"Get Free Shipping for Common Good Upsell\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"On the Cart Page, Eligible\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"Applied Cart Page\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ],\n  \"stop\": false,\n  \"status\": \"ENABLED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Store with Product Filtering Disabled\nDESCRIPTION: A JSON response example when product filtering is disabled on the store. The response still returns product data but contains an empty array for the filters, indicating that faceted search functionality is not enabled.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/products/faceted-textual-search.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"search\": {\n        \"searchProducts\": {\n          \"products\": {\n            \"edges\": [\n              {\n                \"node\": {\n                  \"entityId\": 93,\n                  \"name\": \"[Sample] 1 L Le Parfait Jar\",\n                  \"prices\": {\n                    \"price\": {\n                      \"value\": 7\n                    }\n                  }\n                }\n              },\n              {\n                \"node\": {\n                  \"entityId\": 80,\n                  \"name\": \"[Sample] Orbit Terrarium - Large\",\n                  \"prices\": {\n                    \"price\": {\n                      \"value\": 109\n                    }\n                  }\n                }\n              }\n            ]\n          },\n          \"filters\": {\n            \"edges\": []\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer List with BigCommerce REST API\nDESCRIPTION: This snippet shows how to get a list of customers using the BigCommerce REST API. It demonstrates a GET request to retrieve customer information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/customers\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Sample Variables for Updating a Subscription in JSON\nDESCRIPTION: These sample variables are used with the createCheckout mutation to update a subscription. They include the account ID, product level, pricing plan details, redirect URL, description, and the subscription ID to be updated.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"checkout\": {\n    \"accountId\": \"bc/account/account/2a159c53-1caa-4ce8-af4f-6b00da294e2a\",\n    \"items\": [\n      {\n        \"product\": {\n          \"productLevel\": \"Premium\"\n        },\n        \"pricingPlan\": {\n          \"interval\": \"ANNUAL\",\n          \"price\": {\n            \"value\": 129.99,\n            \"currencyCode\": \"USD\"\n          }\n        },\n        \"redirectUrl\": \"bigcommerce.com/checkout_success\",\n        \"description\": \"test application\",\n        \"subscriptionId\": \"bc/account/subscription/9cf1f949-8a74-4938-bd13-64d9741a9685\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Access Token Response for BigCommerce Single-Click App\nDESCRIPTION: JSON response containing the access_token and other relevant information. This token is used to authenticate API requests made on behalf of the store.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/auth.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"xxxxalphanumstringxxxx\",\n  \"scope\": \"store_v2_orders store_channel_listings_read_only\",\n  \"user\": {\n    \"id\": 24654,\n    \"username\": \"merchant@example.com\",\n    \"email\": \"merchant@example.com\"\n  },\n  \"owner\": {\n    \"id\": 12345,\n    \"username\": \"owner@example.com\",\n    \"email\": \"owner@example.com\"\n  },\n  \"context\": \"stores/g5cd38\",\n  \"account_uuid\": \"12345678-90ab-cdef-1234-567890abcdef\"\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Translations JSON Structure\nDESCRIPTION: Example JSON structure showing translations for widget settings in multiple languages including default, French, English and Chinese.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/localization.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n \"i18n.LineColor\": {\n   \"default\": \"Line color\",\n   \"fr-FR\": \"Couleur de la ligne\",\n   \"en\": \"Line color\",\n   \"zh-CN\": \"线条颜色\"\n },\n \"i18n.LineStyle\": {\n   \"default\": \"Line style\",\n   \"fr-FR\": \"Style de ligne\",\n   \"en\": \"Line style\",\n   \"zh-CN\": \"线型\"\n },\n \"i18n.LineWidth\": {\n   \"default\": \"Line width\",\n   \"fr-FR\": \"Largeur de ligne\",\n   \"en\": \"Line width\",\n   \"zh-CN\": \"行宽\"\n },\n \"i18n.LineThickness\": {\n   \"default\": \"Line Thickness\",\n   \"fr-FR\": \"Épaisseur de ligne\",\n   \"en\": \"Line Thickness\",\n   \"zh-CN\": \"线的粗细\"\n },\n \"i18n.Alignment\": {\n   \"default\": \"Alignment\",\n   \"fr-FR\": \"Alignement\",\n   \"en\": \"Alignment\",\n   \"zh-CN\": \"结盟\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Data Layer with GraphQL Mutation\nDESCRIPTION: This GraphQL mutation disables the data layer in the store. It sets the isDataLayerEnabled flag to false and returns the updated status.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/settings/data.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  settings {\n    dataSolutions {\n      updateDataLayer (input: {isDataLayerEnabled: false}) {\n        dataSolutions {\n          isDataLayerEnabled\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"settings\": {\n      \"dataSolutions\": {\n        \"updateDataLayer\": {\n          \"dataSolutions\": {\n            \"isDataLayerEnabled\": false\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Endpoint References for Channel Creation\nDESCRIPTION: List of relevant BigCommerce API endpoints needed for channel creation and configuration. These endpoints handle channel creation, site URL setup, checkout configuration, SSL certificates, and authentication token generation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/channels.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\n/docs/rest-management/channels#create-a-channel\n/docs/rest-management/channels/site#create-a-channel-site\n/docs/rest-management/channels/site-checkout-url#upsert-a-siteʼs-checkout-url\n/docs/rest-management/settings\n/docs/rest-management/sites/site-certificate#upsert-a-site's-ssl/tls-certificate-information\n/docs/rest-authentication/tokens/customer-impersonation-token#create-a-token\n/docs/rest-authentication/tokens#create-a-token\n```\n\n----------------------------------------\n\nTITLE: Create Cart with Redirect URLs\nDESCRIPTION: HTTP request for creating a cart that includes redirect URLs in the response.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/carts.mdx#2025-04-16_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/carts?include=redirect_urls\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  // request body\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Consignment to Pickup in BigCommerce Checkout API\nDESCRIPTION: This snippet shows how to update a consignment from shipping to pickup. It includes the request to update the consignment with a new pickup method ID and the response showing the updated consignment with the selected pickup option.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/checkout.mdx#2025-04-16_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/checkouts/{{checkout_id}}/consignments/{{consignment_id}}\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"pickup_option\": {\n    \"pickup_method_id\": 1\n  },\n  \"line_items\": [\n    {\n      \"item_id\": \"67642f07-49d1-4501-8b7d-2e589aec34b8\",\n      \"quantity\": 1\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    ...\n    \"consignments\": [\n      {\n        \"id\": \"6218019d81754\",\n        \"shipping_cost_inc_tax\": 0,\n        \"shipping_cost_ex_tax\": 0,\n        \"handling_cost_inc_tax\": 0,\n        \"handling_cost_ex_tax\": 0,\n        \"coupon_discounts\": [],\n        \"discounts\": [],\n        \"line_item_ids\": [\n          \"67642f07-49d1-4501-8b7d-2e589aec34b8\"\n        ],\n        \"selected_pickup_option\": {\n          \"pickup_method_id\": 1\n        }...\n      }\n    ]\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Embedded Checkout Styles in WordPress for BigCommerce\nDESCRIPTION: This PHP function demonstrates how to customize the styles of the BigCommerce embedded checkout in WordPress. It modifies the colors of the checkout step header, step number icons, and body text using the bigcommerce/checkout/config filter.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/themes/index.mdx#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nfunction myCheckoutFunction($checkout_config) {\n  $checkout_config['styles']['heading']['color'] = '#C70039'; //red\n  $checkout_config['styles']['step']['icon']['backgroundColor'] = '#AE0BE6'; //purple\n  $checkout_config['styles']['step']['color'] = '#0BE640'; //green\n  return $checkout_config;\n}\nadd_filter('bigcommerce/checkout/config', 'myCheckoutFunction');\n```\n\n----------------------------------------\n\nTITLE: Creating a Storewide Discount with Category Exclusion in BigCommerce API (JSON)\nDESCRIPTION: This JSON request creates a promotion for 15% off storewide, excluding items from a specific category. It includes automatic redemption, rules for discount application, and notification settings for various pages.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/order.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"15% off store except sale\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"percentage_amount\": \"15\"\n          },\n          \"items\": {\n            \"not\": {\n              \"categories\": [\n                24\n              ]\n            }\n          }\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": true\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"15% off store except sale\",\n      \"locations\": [\n        \"HOME_PAGE\",\n        \"PRODUCT_PAGE\",\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"15% off store except sale\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"15% off store except sale\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Pickup Method in BigCommerce API\nDESCRIPTION: This snippet demonstrates how to update a specific detail for an existing pickup method using the BigCommerce API. It updates the collection instructions for a pickup method.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/pickup/methods\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"id\": 2,\n    \"collection_instructions\": \"See our friendly staff member outside of the store\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a POS Channel with the BigCommerce API\nDESCRIPTION: This HTTP request creates a new POS channel in a BigCommerce store. It sets the channel type to 'pos', platform to 'custom', and configures visibility settings to ensure the channel appears in the merchant's Channel Manager.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/draft/channels-pos-tutorial.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/channels\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"name\": \"Sample POS\",\n  \"type\": \"pos\",\n  \"platform\": \"custom\",\n  \"external_id\": \"\",\n  \"status\": \"connected\",\n  \"is_listable_from_ui\": true,\n  \"is_visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie Notification Hook in JavaScript\nDESCRIPTION: This code demonstrates how to use the 'cookie-privacy-notification' hook to customize the alert for EU-required cookie notifications. It overrides the default browser alert with a custom implementation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/events.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function() {\n\n  // Here you can override the default browser alert box by\n  // hooking to the 'cookie-privacy-notification' hook.\n  utils.hooks.on('cookie-privacy-notification', (event, privacyMessage) => {\n\n    // You can make your own custom modal or alert box\n    // appear in your theme using the privacyMessage provided\n    myCustomAlert(privacyMessage);\n\n    // Call event.preventDefault() to prevent the default\n    // browser alert from occurring in stencil-utils\n    event.preventDefault();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Example BigCommerce Webhook Callback Payload\nDESCRIPTION: Base structure for webhook callback payloads containing scope, store ID, event data, hash, timestamp and producer information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/order/created\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"order\",\n    \"id\": 250\n  },\n  \"hash\": \"dd70c0976e06b67aaf671e73f49dcb79230ebf9d\",\n  \"created_at\": 1561479335,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using getPage Method to Refresh Page Content in JavaScript\nDESCRIPTION: Example of using the api.getPage() method to asynchronously update page content in response to user interactions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nupdateView() {\n  $(this.options.blockerSelector).show();\n\n  api.getPage(urlUtils.getUrl(), this.requestOptions, (err, content) => {\n    $(this.options.blockerSelector).hide();\n\n    if (err) {\n      throw new Error(err);\n    }\n\n    // Refresh view with new content\n    this.refreshView(content);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Cart with Product via REST API\nDESCRIPTION: POST request to create a new cart with a single product item, demonstrating cart creation for BOPIS implementation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/carts\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"line_items\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 97\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fields to a Product in BigCommerce API\nDESCRIPTION: This example illustrates how to add custom fields to a product using the BigCommerce API. Custom fields allow for additional product information to be stored and are limited to 250 characters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/{{product_id}}/custom-fields\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"name\": \"Release Year\",\n  \"value\": \"2018\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-encoded Image Slider Widget Template for BigCommerce\nDESCRIPTION: This is a JSON-encoded version of the image slider widget template, suitable for API submissions in BigCommerce.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/examples.mdx#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\\\"slider\\\">\\n{{#each slides}}\\n<ul class=\\\"slide\\\"><img class=\\\"mySlides\\\" src=\\\"{{image}}\\\"\\/>\\<\\/ul>\\n{{\\/each}}\\n\\<\\/ul>\\n<script>\\nvar slideIndex = 0;\\ncarousel();\\nfunction carousel() {\\nvar i;\\nvar x = document.getElementsByClassName(\\\"mySlides\\\");\\nfor (i = 0; i < x.length; i++) {\\nx[i].style.display = \\\"none\\\"; \\n}\\nslideIndex++;\\nif (slideIndex > x.length) {slideIndex = 1} \\nx[slideIndex-1].style.display = \\\"block\\\"; \\nsetTimeout(carousel, 4000); \\/\\/\\ Change image every 4 seconds\\n}\\n<\\/script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Wallet Buttons in theme markup with Handlebars\nDESCRIPTION: This code snippet shows how to implement the display of wallet buttons in the theme's HTML markup using Handlebars. It checks for the existence of wallet buttons and renders them in a specified div below the \"Add to Cart\" section, allowing for integration into custom themes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/checkout-enhancements/wallet-buttons.mdx#2025-04-16_snippet_6\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if this.with_wallet_buttons}}\n  {{#if wallet_buttons}}\n    <div class=\"your-class-for-wallet-buttons-list\">\n      {{{wallet_buttons}}}\n    </div>\n  {{/if}}\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Options in Cart with BigCommerce JavaScript API\nDESCRIPTION: This snippet demonstrates how to configure product options for items already in the cart using utils.api.productAttributes.configureInCart. It updates a modal with the response content and binds gift wrapping functionality.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nutils.api.productAttributes.configureInCart(itemId, options, (err, response) => {\n  modal.updateContent(response.content);\n  this.bindGiftWrappingForm();\n});\n```\n\n----------------------------------------\n\nTITLE: Example JSON Product Object Request Structure\nDESCRIPTION: Demonstrates the basic JSON structure for a product object in API requests with essential fields like id, name and description.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/about/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"id\": 5,\n \"name\": \"iPod\",\n \"description\": \"A portable MP3 music player.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Product Data in PHP\nDESCRIPTION: Demonstrates how to create and access a Product object using WordPress post ID or BigCommerce product ID\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/themes/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$post_id = get_the_ID();\n$product = new \\BigCommerce\\Post_Types\\Product\\Product( $post_id );\n```\n\n----------------------------------------\n\nTITLE: Combined Products and Facets Response Structure\nDESCRIPTION: The JSON response for a combined product and facet query, showing sample product data (names, IDs, prices) along with category and filter information. This structure demonstrates how both datasets are returned in a single API response.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/products/faceted-textual-search.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n      \"site\": {\n        \"search\": {\n          \"searchProducts\": {\n            \"products\": {\n              \"edges\": [\n                {\n                  \"node\": {\n                    \"entityId\": 93,\n                    \"name\": \"[Sample] 1 L Le Parfait Jar\",\n                    \"prices\": {\n                      \"price\": {\n                        \"value\": 7\n                      }\n                    }\n                  }\n                },\n                {\n                  \"node\": {\n                    \"entityId\": 80,\n                    \"name\": \"[Sample] Orbit Terrarium - Large\",\n                    \"prices\": {\n                      \"price\": {\n                        \"value\": 109\n                      }\n                    }\n                  }\n                }\n              ]\n            },\n            \"filters\": {\n              \"edges\": [\n                {\n                  \"node\": {\n                    \"__typename\": \"CategorySearchFilter\",\n                    \"name\": \"Category\",\n                    \"isCollapsedByDefault\": false,\n                    \"displayProductCount\": true,\n                    \"categories\": {\n                      \"edges\": [\n                        {\n                          \"node\": {\n                            \"entityId\": 19,\n                            \"isSelected\": false,\n                            \"productCount\": 1,\n                            \"subCategories\": {\n                              \"edges\": []\n                            }\n                          }\n                        },\n                        {\n                          \"node\": {\n                            \"entityId\": 21,\n                            \"isSelected\": false,\n                            \"productCount\": 1,\n                            \"subCategories\": {\n                              \"edges\": []\n                            }\n                          }\n                        }\n                      ]\n                    }\n                  }\n                },\n                {\n                  \"node\": {\n                    \"__typename\": \"OtherSearchFilter\",\n                    \"name\": \"Other\",\n                    \"isCollapsedByDefault\": true,\n                    \"displayProductCount\": true,\n                    \"freeShipping\": null,\n                    \"isInStock\": {\n                      \"isSelected\": false,\n                      \"productCount\": 2\n                    },\n                    \"isFeatured\": null\n                  }\n                }\n              ]\n            }\n          }\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a Pickup Consignment in BigCommerce Checkout API\nDESCRIPTION: This snippet demonstrates how to create a pickup consignment for a checkout using the BigCommerce API. It includes the request to add a consignment with a pickup option and the corresponding response showing the created consignment.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/checkout.mdx#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/checkouts/{{checkout_id}}/consignments\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"pickup_option\": {\n      \"pickup_method_id\": 2\n    },\n    \"line_items\": [\n      {\n        \"item_id\": \"67642f07-49d1-4501-8b7d-2e589aec34b8\",\n        \"quantity\": 1\n      }\n    ]\n  }\n]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    ...\n    \"consignments\": [\n      {\n        \"id\": \"6218019d81754\",\n        \"shipping_cost_inc_tax\": 0,\n        \"shipping_cost_ex_tax\": 0,\n        \"handling_cost_inc_tax\": 0,\n        \"handling_cost_ex_tax\": 0,\n        \"coupon_discounts\": [],\n        \"discounts\": [],\n        \"line_item_ids\": [\n          \"67642f07-49d1-4501-8b7d-2e589aec34b8\"\n        ],\n        \"selected_pickup_option\": {\n          \"pickup_method_id\": 2\n        }\n        ...\n      }\n    ]\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the CDN Handlebars Helper for Image Imports in BigCommerce\nDESCRIPTION: This snippet demonstrates how to reference images uploaded via WebDAV in a BigCommerce theme using the 'cdn' Handlebars helper. This method allows access to images stored in the WebDAV content directory.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/performance-optimization.mdx#2025-04-16_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{cdn \"webdav:/img/image.jpg\"}}\n```\n\n----------------------------------------\n\nTITLE: Using getImageSrcset Helper with Inherent Width\nDESCRIPTION: Demonstrates combining getImage and getImageSrcset helpers to provide both src and srcset attributes for responsive images with different widths that can be selected by the browser.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_56\n\nLANGUAGE: handlebars\nCODE:\n```\n<img src=\"{{getImage image 'default'}}\" srcset=\"{{getImageSrcset image 100w='100w' 200w='200w' 300w='300w'}}\" />\n\n<!-- =>\n<img src=\"https://cdn11.bigcommerce.com/s-abc123/images/stencil/640x640/products/86/286/ablebrewingsystem4_1024x1024__07155.1456436672.jpg?c=2\" srcset=\"https://cdn11.bigcommerce.com/s-abc123/images/stencil/100w/products/86/286/ablebrewingsystem4_1024x1024__07155.1456436672.jpg?c=2 100w, https://cdn11.bigcommerce.com/s-abc123/images/stencil/200w/products/86/286/ablebrewingsystem4_1024x1024__07155.1456436672.jpg?c=2 200w,https://cdn11.bigcommerce.com/s-abc123/images/stencil/300w/products/86/286/ablebrewingsystem4_1024x1024__07155.1456436672.jpg?c=2 300w\" /> -->\n\n<img src=\"{{getImageSrcSet image 1x='1000x1000'}}\" srcset=\"{{getImageSrcset image 1x='1000x1000' 2x='2000x2000'}}\" />\n\n<!-- =>\n<img src=\"https://cdn11.bigcommerce.com/s-abc123/images/stencil/640x640/products/86/286/ablebrewingsystem4_1024x1024__07155.1456436672.jpg?c=2\" srcset=\"https://cdn11.bigcommerce.com/s-abc123/images/stencil/100w/products/86/286/ablebrewingsystem4_1024x1024__07155.1456436672.jpg?c=2 100w, https://cdn11.bigcommerce.com/s-abc123/images/stencil/200w/products/86/286/ablebrewingsystem4_1024x1024__07155.1456436672.jpg?c=2 200w,https://cdn11.bigcommerce.com/s-abc123/images/stencil/300w/products/86/286/ablebrewingsystem4_1024x1024__07155.1456436672.jpg?c=2 300w\" /> -->\n```\n\n----------------------------------------\n\nTITLE: Querying Variant Metafields with GraphQL in BigCommerce\nDESCRIPTION: This GraphQL query retrieves the first metafield for a specific product variant within the 'Warehouse Locations' namespace. It includes fields for the metafield ID, entity ID, key, and value.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/variants.mdx#2025-04-16_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    product (entityId: 113) {\n      variants (entityIds: [127]) {\n        edges {\n          node {\n            metafields (first: 1 namespace: \"Warehouse Locations\") {\n              edges {\n                node {\n                  id\n                  entityId\n                  key\n                  value\n                }\n              }\n            }  \t \n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing PUT Request to Update Checkout Billing Address in BigCommerce REST Storefront API\nDESCRIPTION: This example demonstrates how to make a PUT request to update the billing address for a checkout using the REST Storefront API. It includes the endpoint configuration and a detailed request body with address information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/index.mdx#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlet endpoint = {\n  route: \"/checkouts/123abc45-de67-89f0-123a-bcd456ef7890/billing-address/123abc456def7\",\n  method: \"PUT\",\n  accept: \"application/json\",\n  content: \"application/json\",\n  success: 200\n}\n\nlet requestBody = {\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Doe\",\n  \"email\": \"janedoe@example.com\",\n  \"company\": \"BigCommerce\",\n  \"address1\": \"123 Main Street\",\n  \"address2\": \"Apt 1\",\n  \"city\": \"Austin\",\n  \"stateOrProvinceCode\": \"TX\",\n  \"countryCode\": \"US\",\n  \"postalCode\": \"78701\"\n}\n\nstorefrontCall(endpoint, requestBody);\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Variant Inventory Location Query\nDESCRIPTION: This JSON response shows the result of querying variant inventory by location. It includes product details (ID: 113), variant information (ID: 95), and inventory data for multiple locations, showing fields like availability, stock status, and location identifiers.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/inventory/queries.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n      \"site\": {\n        \"products\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"entityId\": 113,\n                \"name\": \"Example Product 1\",\n                \"variants\": {\n                  \"edges\": [\n                    {\n                      \"node\": {\n                        \"entityId\": 95,\n                        \"sku\": \"ABC-1111-PI\",\n                        \"inventory\": {\n                          \"byLocation\": {\n                            \"edges\": [\n                              {\n                                \"node\": {\n                                  \"locationEntityId\": 1,\n                                  \"locationEntityCode\": \"BC-LOCATION-1\",\n                                  \"locationEntityTypeId\": \"PHYSICAL\",\n                                  \"locationDistance\": null,\n                                  \"availableToSell\": 6,\n                                  \"warningLevel\": 20,\n                                  \"isInStock\": false\n                                }\n                              },\n\n                              // By default, responses don't include non-default locations\n                              {\n                                \"node\": {\n                                  \"locationEntityId\": 2,\n                                  \"locationEntityCode\": \"BC-LOCATION-2\",\n                                  \"locationEntityTypeId\": \"PHYSICAL\",\n                                  \"locationDistance\": null,\n                                  \"availableToSell\": 5,\n                                  \"warningLevel\": 20,\n                                  \"isInStock\": false\n                                }\n                              }\n                            ]\n                          }\n                        }\n                      }\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Checkout SDK Implementation for BOPIS\nDESCRIPTION: JavaScript implementation using the Checkout SDK to load pickup options. Requires SDK version 1.224.0 or above.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst consignmentId = '123';\nconst searchArea = {\n  radius: {\n    value: 1.4,\n    unit: 'KM' // Another unit allowed here is 'MI'\n  },\n  coordinates: {\n    latitude: 1.4,\n    longitude: 0\n  }\n};\n\nconst query: PickupOptionRequestBody = { consignmentId, searchArea };\n\nconst state = await checkoutService.loadPickupOptions(query: PickupOptionRequestBody);\n\nconsole.log(state.data.getPickupOptions(consignmentId, searchArea));\n```\n\n----------------------------------------\n\nTITLE: Querying Product Modifiers with Locale Overrides in BigCommerce GraphQL API\nDESCRIPTION: GraphQL query that fetches a product's modifier options with localization overrides for multiple locales (UK and France) in a specific channel. This demonstrates how to retrieve product modifiers with their default values and locale-specific overrides in a single query.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\nquery {\n    store {\n        product (id: \"bc/store/product/111\") {\n            id\n            modifiers (first: 1) {\n                edges {\n                    node {\n                        __typename\n                        id\n                        displayName\n                        isShared\n                        isRequired\n\n                        // modifier values for rectangle List product modifiers\n                        ... on RectangleListProductModifier {\n\n                            // global values for the store\n                            values {\n                                id\n                                label\n                                isDefault\n                            }\n\n                            // overrides for the UK locale in channel 2\n                            uk: overridesForLocale(localeContext: { channelId: \"bc/store/channel/2\", locale: \"uk\" }) {\n                                displayName\n                                values {\n                                id\n                                label\n                                }\n                            }\n\n                            // overrides for the France locale in channel 2\n                            fr: overridesForLocale(localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\" }) {\n                                displayName\n                                values {\n                                id\n                                label\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Lifecycle Method Values for B2B Edition Quick Order Pad Module\nDESCRIPTION: This example demonstrates how to configure JavaScript customization for the B2B Edition Quick Order Pad module using the available lifecycle methods. It shows implementation of callback(), beforeMount(), and mounted() functions with console trace statements to demonstrate execution order.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/b2b-edition/stencil.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.b3themeConfig.useJavaScript = {\n  quickorderpad: {\n    overwrite: false,\n    callback() {\n      console.trace(`quickorderpad.callback() runs after all other quickorderpad functions`);\n    },\n    beforeMount() {\n      console.trace(`quickorderpad.beforeMount() runs before quickorderpad mounts`);\n    },\n    mounted() {\n      console.trace(`quickorderpad.mounted() runs after quickorderpad mounts`);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Customer Addresses with V3 API\nDESCRIPTION: Example of querying customer addresses using the V3 API, which allows filtering by company name and customer IDs in a single request.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/customers/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\n/customers/addresses?company:in=bigcommerce,commongood&customer_id:in1,2,3\n```\n\n----------------------------------------\n\nTITLE: Adding Product Video with V2 API in JSON\nDESCRIPTION: This snippet shows how to add a product video using the V2 API. It requires the full YouTube video URL in the request body.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"https://www.youtube.com/watch?v=4wZ3ZG_Wams\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Shipping Promotion for Specific Product with Free Shipping to Selected Zones (JSON)\nDESCRIPTION: This JSON request creates a shipping promotion offering free shipping to specific zones when customers order at least one unit of a particular product. The promotion includes notifications, is limited to 50 uses, and has a defined time period.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/shipping.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Order at least X units of product Y and get free shipping to specific shipping zones\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"shipping\": {\n          \"free_shipping\": true,\n          \"zone_ids\": [\n            2,\n            3\n          ]\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"products\": [\n              129\n            ]\n          },\n          \"minimum_quantity\": 1\n        }\n      }\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"Get free shipping for purchasing Twine Stand with Cutter. Limited to first 50 customers!\\r\\n<div>&nbsp;</div>\",\n      \"locations\": [\n        \"HOME_PAGE\",\n        \"PRODUCT_PAGE\",\n        \"CART_PAGE\",\n        \"CHECKOUT_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"You are eligible for free shipping.\\r\\n<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"Congratulations you get free shipping!\\r\\n<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ],\n  \"stop\": false,\n  \"max_uses\": 50,\n  \"start_date\": \"2019-02-01T05:00:00+00:00\",\n  \"end_date\": \"2019-02-05T04:59:59+00:00\",\n  \"status\": \"ENABLED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Protected Sections for a BigCommerce Channel\nDESCRIPTION: HTTP request that enables specific BigCommerce-managed settings pages in a channel's menu. This example enables storefront settings, currencies, and domains sections.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/guide/storefronts.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/channels/{{CHANNEL_ID}}/channel-menus\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"bigcommerce_protected_app_sections\": [\n    \"storefront_settings\",\n    \"currencies\",\n    \"domains\"\n  ],\n  \"custom_app_sections\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Product with Both Option and Modifier in REST Storefront API\nDESCRIPTION: This example shows how to add a product that has both an option (radio button) and a modifier (text field) to a cart using the REST Storefront API. Multiple optionSelections are used to specify both the option and modifier values.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-management.mdx#2025-04-16_snippet_13\n\nLANGUAGE: http\nCODE:\n```\n{\n  \"lineItems\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 101,\n      \"optionSelections\": [\n        {\n          \"optionId\": 231,\n          \"optionValue\": 456\n        },\n        {\n          \"optionId\": 123,\n          \"optionValue\": \"Hello!\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Fixed Discount to Category Items\nDESCRIPTION: Demonstrates how to apply a $20 fixed discount to items in a specific category. The promotion is set to automatic redemption and includes notification settings for cart page display.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/category.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"20 dollars off all garden material\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"fixed_amount\": \"20\"\n          },\n          \"strategy\": \"LEAST_EXPENSIVE\",\n          \"as_total\": false,\n          \"include_items_considered_by_condition\": false,\n          \"items\": {\n            \"categories\": [\n              24\n            ]\n          }\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Channel-Specific Shipping Method - API Response\nDESCRIPTION: JSON response showing the created shipping method configuration including the assigned channel IDs, rates, and handling fees.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/shipping/msf-international-enhancements.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 5,\n  \"name\": \"Per Order\",\n  \"type\": \"perorder\",\n  \"settings\": {\n      \"rate\": 8\n  },\n  \"enabled\": true,\n  \"handling_fees\": {\n      \"fixed_surcharge\": \"3\"\n  },\n  \"channel_ids\": [1, 3]\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting a Carrier Using BigCommerce API\nDESCRIPTION: Examples of POST requests to connect a carrier using the BigCommerce API. The first example includes connection settings, while the second shows a request without connection settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/shipping.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST https://example.com/shipping/carrier/connection\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"carrier_id\": \"carrier_33\",\n  \"connection\": {\n    \"key\": \"userKey\",\n    \"account_number\": \"userAccountNumber\"\n  }\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST https://example.com/shipping/carrier/connection\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"carrier_id\": \"carrier_33\",\n  \"connection\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Product Review Query Response Structure in BigCommerce\nDESCRIPTION: Example JSON response for a product review query showing the structure of returned data including entity ID, author information, review content, rating, and timestamp.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/product-reviews.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"products\": {\n        \"edges\": [\n          {\n            \"node\": {\n              \"reviews\": {\n                \"edges\": [\n                  {\n                    \"node\": {\n                      \"entityId\": 3,\n                      \"author\": {\n                        \"name\": \"example author\"\n                      },\n                      \"title\": \"Great product\",\n                      \"text\": \"Would recommend\",\n                      \"rating\": 4,\n                      \"createdAt\": {\n                        \"utc\": \"2024-05-15T15:16:30Z\"\n                      }\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Discount with Complex Segment Logic\nDESCRIPTION: Example of creating a 10% discount using complex segment logic combining 'or' and 'and' operators. Applies to customers in segment 3 OR customers who belong to both segments 1 and 2.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/customer.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"10% off for customers who belong to segment 3 or customers who belong to segment 1 and segment 2\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"customer\": {\n    \"segments\": {\n      \"or\": [\n        {\n          \"id\": [\"4d843892-d90c-4f01-a36e-ce810172c094\"]\n        },\n        {\n          \"and\": [\n            {\n              \"id\": [\"61fd72bc-7400-4a7b-ac64-96c0d315c464\"]\n            },\n            {\n              \"id\": [\"d52fb39d-6715-430e-a0bf-21a192d790f0\"]\n            }\n          ]\n        }\n      ]\n    }\n  },\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_value\": {\n          \"discount\": {\n            \"percentage_amount\": \"10\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Channel-Specific Store Profile Settings\nDESCRIPTION: Demonstrates how to fetch channel-specific store profile settings by including the channel_id query parameter. Shows examples for channels with no overrides and with partial/full overrides.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/settings/configuration.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/settings/store/profile?channel_id=122\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {},\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Metafield Updated Webhook Payload in JSON\nDESCRIPTION: This snippet shows the payload structure for the store/metafield/updated webhook event. It includes the metafield ID, resource ID, resource type, and other relevant information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/metafield/updated\",\n  \"store_id\": \"1001197568\",\n  \"data\": {\n    \"metafield_id\": 10,\n    \"resource_id\": \"1\",  // Location ID\n    \"resource_type\": \"location\"\n  },\n  \"hash\": \"e0c298b8097a6a2f39d17e593a9b360f5b2fef7d\",\n  \"created_at\": 1683303055,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling GET /remove_user Callback in BigCommerce Single-Click App\nDESCRIPTION: Example of a GET request to the /remove_user endpoint of a BigCommerce single-click app. This callback is triggered when the store owner revokes a user's access to the app.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/callbacks.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET https://your_app.example.com/remove_user?signed_payload_jwt={header_b64.payload_claims_b64.signature_b64}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Creating Channel-Specific Customer Request\nDESCRIPTION: JSON request body for creating a new customer with specific channel access permissions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/customers/channel-specific-customers.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"string@example.com\",\n  \"first_name\": \"string\",\n  \"last_name\": \"string\",\n  \"channel_ids\": [1]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Cursor-Based Pagination Query\nDESCRIPTION: This JSON response shows the results of using a cursor for pagination. It returns the three products after the specified cursor, illustrating how the product with entityId 82 now appears as the first item in the results.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"products\": {\n        \"pageInfo\": {\n          \"startCursor\": \"YXJyYXljb25uZWN0aW9uOjI=\",\n          \"endCursor\": \"YXJyYXljb25uZWN0aW9uOjQ=\",\n          \"hasNextPage\": true\n        },\n        \"edges\": [\n          {\n            \"cursor\": \"YXJyYXljb25uZWN0aW9uOjI=\",\n            \"node\": {\n              \"entityId\": 82,\n              \"name\": \"Chambray Towel\"\n            }\n          },\n          {\n            \"cursor\": \"YXJyYXljb25uZWN0aW9uOjM=\",\n            \"node\": {\n              \"entityId\": 83,\n              \"name\": \"Hand & Body Cream\"\n            }\n          },\n          {\n            \"cursor\": \"YXJyYXljb25uZWN0aW9uOjQ=\",\n            \"node\": {\n              \"entityId\": 84,\n              \"name\": \"Room Spray\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel with HTTP POST Request\nDESCRIPTION: Example HTTP request that creates a sales channel by sending a POST request to the Channels API. The request includes channel type, platform, name, and status information needed to register a channel in BigCommerce's Channel Manager.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/guide/extending-existing-apps.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/channels\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n    \"type\": \"pos\",  // type of channel\n    \"platform\": \"custom\",  //sales channel platform\n    \"name\": \"name of the sales channel\",  // Name displayed to merchant\n    \"external_id\": \"\",\n    \"status\": \"connected\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Location Translations using GraphQL\nDESCRIPTION: GraphQL query to retrieve a paginated list of translations filtered by resourceType, channel, and locale. Returns up to 50 results per request with translation details for various location fields.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/translations/locations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n    store {\n        translations(filters: {\n            resourceType: INVENTORY_LOCATIONS,\n            channelId: \"bc/store/channel/1\",\n            localeId: \"bc/store/locale/en\"\n        } first: 50) {\n            edges {\n                node {\n                      resourceId\n                        fields {\n                            fieldName\n                            original\n                            translation\n                        }\n                    }\n                cursor\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Brand\nDESCRIPTION: Creates a new brand in the BigCommerce catalog with name, page title, meta keywords and image URL.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/index.mdx#2025-04-16_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/brands\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"name\": \"BigCommerce\",\n  \"page_title\": \"BigCommerce\",\n  \"meta_keywords\": [\n    \"ecommerce\",\n    \"best in class\",\n    \"grow your business\"\n  ],\n  \"image_url\": \"{{image_url}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Billing Address Response - JSON\nDESCRIPTION: This JSON response showcases the result of the addCheckoutBillingAddress mutation. It includes the entity ID of the updated checkout object, confirming the successful addition of the new billing address.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/graphql-storefront.mdx#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"checkout\": {\n      \"addCheckoutBillingAddress\": {\n        \"checkout\": {\n          \"entityId\": \"812ece1a-da23-46eb-ab6b-c2ee210aae54\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Order Response in BigCommerce API\nDESCRIPTION: JSON response after updating an order's pickup consignment, containing order ID and a URL reference to the consignments resource.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/orders.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 126,\n  ...\n  \"consignments\": {\n    \"url\": \"https://api.bigcommerce.com/stores/cc8eopdesv/v2/orders/126/consignments\",\n    \"resource\": \"/orders/126/consignments\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Product URL at Global Level with GraphQL\nDESCRIPTION: This GraphQL mutation sets a product's URL for a store, which channels inherit by default. It requires the product ID and the new URL path.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-url.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($input: SetProductUrlPathInput!) {\n  product {\n    setProductUrlPath (input: $input) {\n      product {\n        id\n        urlPath {\n          path\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"data\": {\n      \"path\": \"/global-product-111\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing a Cart via API - HTTP\nDESCRIPTION: This snippet demonstrates how to clear a cart by sending a DELETE request to the BigCommerce API. It requires the store hash, cart ID, and an authentication token in the headers for successful execution. The expected output is a successful deletion of the specified cart.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/carts.mdx#2025-04-16_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nDELETE https://api.bigcommerce.com/stores/{{store_hash}}/v3/carts/{{cartId}}\\nAccept: application/json\\nContent-Type: application/json\\nX-Auth-Token: {{ACCESS_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL and Implementing Database Functions\nDESCRIPTION: Sets up MySQL configuration and implements functions for user and store management in the database.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst MYSQL_CONFIG = {\n    host: process.env.MYSQL_HOST,\n    database: process.env.MYSQL_DATABASE,\n    user: process.env.MYSQL_USERNAME,\n    password: process.env.MYSQL_PASSWORD,\n    ...(process.env.MYSQL_PORT && { port: process.env.MYSQL_PORT }),\n};\n\n// For use with Heroku ClearDB\n// Other mysql: https://www.npmjs.com/package/mysql#pooling-connections\nconst pool = mysql.createPool(process.env.CLEARDB_DATABASE_URL ? process.env.CLEARDB_DATABASE_URL : MYSQL_CONFIG);\nconst query = promisify(pool.query.bind(pool));\n\nexport async function setUser({ user }: SessionProps) {\n    if (!user) return null;\n\n    const { email, id, username } = user;\n    const userData = { email, userId: id, username };\n\n    await query('REPLACE INTO users SET ?', userData);\n}\n\nexport async function setStore(session: SessionProps) {\n    const { access_token: accessToken, context, scope } = session;\n    // Only set on app install or update\n    if (!accessToken || !scope) return null;\n\n    const storeHash = context?.split('/')[1] || '';\n\n    const storeData: StoreData = { accessToken, scope, storeHash };\n    await query('REPLACE INTO stores SET ?', storeData);\n}\n\nexport async function getStoreToken(storeHash: string) {\n    if (!storeHash) return null;\n\n    const results = await query('SELECT accessToken from stores limit 1');\n\n    return results.length ? results[0].accessToken : null;\n}\n\nexport async function deleteStore({ store_hash: storeHash }: SessionProps) {\n    await query('DELETE FROM stores WHERE storeHash = ?', storeHash);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Object from Context by Property Path - JavaScript\nDESCRIPTION: Uses property paths to retrieve an object from the context, allowing access to nested structures.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getObject(obj, path) { return path.split('.').reduce((o, p) => (o ? o[p] : {}), obj); }\n```\n\n----------------------------------------\n\nTITLE: Creating Channel-Specific Shipping Method - API Request\nDESCRIPTION: HTTP POST request to create a shipping method for specific channels within a shipping zone. The request includes method configuration with per-order pricing, handling fees, and channel assignments.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/shipping/msf-international-enhancements.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v2/shipping/zones/{{zone_id}}/methods\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"name\": \"Per Order\",\n  \"type\": \"perorder\",\n  \"settings\": {\n    \"rate\": 8\n  },\n  \"enabled\": true,\n  \"handling_fees\": {\n    \"fixed_surcharge\": \"3\"\n  },\n  \"channel_ids\": [1, 3]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sections in Widget Schema\nDESCRIPTION: Shows how to structure sections within tabs to group related settings. Sections can have optional labels and contain multiple settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/input-reference/schema.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[{\n  \"type\": \"tab\",\n  \"label\": \"Content\",\n  \"sections\": {\n    \"label\": \"Text\",\n    \"settings\": [...]\n  }\n}]\n```\n\n----------------------------------------\n\nTITLE: Modifying Widget Template Schema - BigCommerce API\nDESCRIPTION: This snippet describes how to modify the schema of a BigCommerce widget template to allow customization options to be displayed in the Page Builder UI. By changing the widget's schema, merchants can define how the widget should appear.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/content/widgets.mdx#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n|Parameter|Description|\n|---|---|\n|`name`|The name of the widget.|\n|`template`|The skeleton UI of the widget rendered as Handlebars HTML.|\n|`schema`|The JSON schema of data for the widget template. The schema represents the customizable options available in the sidebar of Page Builder.|\n```\n\n----------------------------------------\n\nTITLE: Configuring Quick Payment Buttons in config.json\nDESCRIPTION: This snippet shows how to enable the display of wallet buttons by default in the theme configuration. It involves setting a 'show_quick_payment_buttons' property to true within the 'config.json' file. This file should exist in the theme's configuration folder and requires familiarity with JSON configuration structure.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/checkout-enhancements/wallet-buttons.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...,\n  \"settings\": {\n    ..., \n    \"show_quick_payment_buttons\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Customer Access Token Creation\nDESCRIPTION: Example response when successfully creating a customer access token via login mutation. It includes customer details and the generated token with its expiration.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/graphql-storefront.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"login\": {\n            \"result\": \"success\",\n            \"customer\": {\n                \"entityId\": 21,\n                \"email\": \"user@email.com\"\n            },\n            \"customerAccessToken\": {\n                \"value\": \"53ea9099d5484cdedddbf8f59a73bc284afefd7943c4dbe578db52435e0c0de7_1721406629\",\n                \"expiresAt\": \"2024-07-19T16:30:29Z\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Checkout Component in React\nDESCRIPTION: Example code change to add a custom div element to the Checkout component in the src/app/checkout/Checkout.tsx file.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/open-checkouts/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Checkout extends Component<CheckoutProps & WithCheckoutProps & WithLanguageProps, CheckoutState> {\n    // ...\n    render(): ReactNode {\n        // ...\n        return <>\n            <div className={ classNames({ 'is-embedded': isEmbedded() }) }>\n                <div className=\"layout optimizedCheckout-contentPrimary\">\n                    <div>Open Checkout Quick Start Example</div>\n                    { this.renderContent() }\n                </div>\n                { errorModal }\n            </div>\n\n        </>;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Store App Extension Configuration in JSON\nDESCRIPTION: JSON schema defining an App Extension for the Orders page that renders in a panel context. Includes configuration for localization support and custom URL routing.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/app-extensions/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"bc/store/appExtension/2\",\n  \"model\": \"ORDERS\",\n  \"context\": \"PANEL\",\n  \"url\": \"/orders/${id}/personal-thanks\",\n  \"label\": {\n    \"defaultValue\": \"Add personal thanks\",\n    \"locales\": [\n      {\n        \"value\": \"Envie pessoal obrigado\",\n        \"localeCode\": \"pt-BR\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Variant Options with HTTP GET\nDESCRIPTION: This request fetches variant options for a specific product using the BigCommerce Catalog API. It returns details about each option, including their values and configurations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/index.mdx#2025-04-16_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products/{{product_id}}/options\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"data\": [\n    {\n      \"id\": 193,\n      ...\n      \"option_values\": [\n        {\n          \"id\": 163,\n          \"label\": \"S\",\n          \"sort_order\": 0,\n          \"value_data\": null,\n          \"is_default\": false\n        },\n        ...\n      ],\n      \"config\": []\n    },\n    {\n      \"id\": 194,\n      ...\n      \"option_values\": [\n        {\n          \"id\": 166,\n          \"label\": \"Blue\",\n          \"sort_order\": 1,\n          \"value_data\": {\n            \"colors\": [\n              \"#123C91\"\n            ]\n          },\n          ...\n      ],\n      \"config\": []\n    }\n  ],\n  \"meta\": {\n    ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Absolute Inventory Adjustment Example\nDESCRIPTION: Example JSON payload for making bulk absolute inventory adjustments grouped by location for optimal performance.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/inventory-adjustments.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reason\": \"Bulk absolute adjustment\",\n  \"items\": [\n    {\n      \"location_id\": 1,\n      \"variant_id\": 15,\n      \"quantity\": 100\n    },\n    {\n      \"location_id\": 1,\n      \"variant_id\": 20,\n      \"quantity\": 100\n    },\n    {\n      \"location_id\": 2,\n      \"variant_id\": 15,\n      \"quantity\": 100\n    },\n    {\n      \"location_id\": 2,\n      \"variant_id\": 20,\n      \"quantity\": 100\n    }    \n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Customer-Specific Promotion\nDESCRIPTION: JSON request to create a promotion targeted at VIP customers with minimum order requirements, demonstrating customer group targeting.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/index.mdx#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"10 % Off for VIP Customers With Minimum Total Order Count of 10\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"customer\": {\n    \"group_ids\": [\n      1\n    ],\n    \"minimum_order_count\": 10\n  },\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_value\": {\n          \"discount\": {\n            \"percentage_amount\": \"10\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Order Customer with BigCommerce REST API\nDESCRIPTION: This snippet demonstrates how to specify a customer when creating an order using the BigCommerce REST API. It includes the customer_id in the request body.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v2/orders\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n\n{\n  \"customer_id\": 1,\n  \"billing_address\": {...},\n  \"products\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Product Image Visibility to Channel Locale using GraphQL\nDESCRIPTION: This GraphQL mutation adds visibility for product images in a specific channel locale. It demonstrates how to set image attributes globally and override them for a particular channel and locale context.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-images.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($input: AddImagesToProductInput!) {\n  product {\n    addImagesToProduct(input: $input) {\n      images {\n        edges {\n          node {\n            id\n\n            # For the global store         \n            altText   \n            isThumbnail \n            sortOrder  \n            urlStandard  \n            urlZoom\n            addedToProduct\n\n            # For the channel locale\n            overrides (context: {channelId: \"bc/store/channel/1\", locale: \"en\"} ) {\n              edges {\n                node {\n                  ... on ProductImagesOverridesForChannelLocale {\n                    context {\n                      channelId\n                      locale\n                    }\n                    altText\n                    sortOrder\n                    addedToProduct\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n      \"productId\": \"bc/store/product/111\",\n\n      // For the channel locale\n      \"context\": {\n        \"channelId\": \"bc/store/channel/1\",\n        \"locale\": \"en\"\n      },\n      \"ids\": [\"bc/store/productImage/371\", \"bc/store/productImage/372\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Payment with Stored Card\nDESCRIPTION: Processes a payment using a stored card by making a POST request with the stored card token and verification value.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/payments/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST https://payments.bigcommerce.com/stores/{{STORE_HASH}}/payments\nAccept: application/vnd.bc.v1+json\nAuthorization: PAT {{PAT_TOKEN}}\nContent-Type: application/json\n\n{\n  \"payment\": {\n    \"instrument\": {\n      \"type\": \"stored_card\",\n      \"token\": \"050a1e5c982e5905288ec5ec33f292772762033a0704f46fccb16bf1940b51ef\",\n      \"verification_value\": \"900\"\n    },\n    \"payment_method_id\": \"stripe.card\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Product Variants in PHP\nDESCRIPTION: Example of accessing and iterating through product variants to retrieve variant-specific information\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/themes/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$variant_ids = wp_list_pluck( $variants, 'id' );\nforeach ( $variants as $variant ) {\n  $sku = $variant->sku;\n  $inventory = $variant->inventory_level;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tax Zones via BigCommerce API\nDESCRIPTION: POST request to create a new tax zone with subdivision-based settings. Demonstrates setting up zones based on specific countries, subdivisions and customer groups with price display preferences.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/tax-rates-zones.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/tax/zones\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"name\": \"example zone\",\n    \"enabled\": true,\n    \"price_display_settings\": {\n      \"show_inclusive\": true,\n      \"show_both_on_detail_view\": true,\n      \"show_both_on_list_view\": true\n    },\n    \"shopper_target_settings\": {\n      \"locations\": [\n        {\n          \"country_code\": \"AR\",\n          \"subdivision_codes\": [\n            \"T\",\n            \"V\"\n          ]\n        },\n        {\n          \"country_code\": \"AU\",\n          \"subdivision_codes\": [\n            \"WA\",\n            \"VIC\"\n          ]\n        }\n      ],\n      \"customer_groups\": [\n        0\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel Webhook HTTP Request\nDESCRIPTION: Example POST request to create a webhook subscription for channel events. Requires store hash and access token for authentication. The destination URL must use port 443.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/hooks\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"scope\": \"store/channel/{channel_id}/cart/created\",\n  \"destination\": \"https://placeholder.ngrok.io/webhooks\",\n  \"is_active\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Product Reviews Query in BigCommerce\nDESCRIPTION: The JSON response for the product reviews query, showing a single review with details including the author's name, review title, content, rating (4 out of 5), and the date it was created.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"product\": {\n        \"reviews\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"entityId\": 3,\n                \"author\": {\n                  \"name\": \"example name\"\n                },\n                \"title\": \"Excellent Flowers\",\n                \"text\": \"The best flowers for Valentine's Day. Would recommend.\",\n                \"rating\": 4,\n                \"createdAt\": {\n                  \"utc\": \"2021-12-22T22:29:48Z\"\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Product with Variant to Cart in REST Storefront API\nDESCRIPTION: This request demonstrates how to add a product with an option (radio button) to a cart using only the variant_id parameter in the REST Storefront API. The variant_id identifies the specific combination of product options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-management.mdx#2025-04-16_snippet_12\n\nLANGUAGE: http\nCODE:\n```\n{\n  \"lineItems\": [\n    {\n      \"quantity\": 1,\n      \"productId\": 1001,\n      \"variantId\": 2331\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Channel Customer Settings Request\nDESCRIPTION: HTTP PUT request to update customer settings for a specific channel, demonstrating how to modify global login permissions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/customers/channel-specific-customers.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{store-hash}/v3/customers/settings/channels/{channel_id}\nContent-Type: application/json\nAccept: application/json\nX-Auth-Token: {{X-Auth-Token}}\n\n{\n  \"allow_global_logins\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Subscription with createCheckout Mutation in GraphQL\nDESCRIPTION: This GraphQL mutation updates an existing subscription's pricing plan and product level. It requires a subscriptionId in the request to process as an update. The mutation returns details about the updated checkout, including account ID, status, checkout URL, and subscription information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($checkout: CreateCheckoutInput!) {\n  checkout {\n    createCheckout(input: $checkout) {\n      checkout {\n        accountId\n        status\n        checkoutUrl\n        items(first: 1) {\n          edges {\n            node {\n              subscriptionId\n              status\n              product {\n                id\n                type\n                productLevel\n              }\n              scope {\n                id\n                type\n              }\n              pricingPlan {\n                interval\n                price {\n                  value\n                  currencyCode\n                }\n                trialDays\n              }\n              redirectUrl\n              description\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Product SEO Information for a Specific Locale with GraphQL in BigCommerce\nDESCRIPTION: This GraphQL mutation sets product SEO information for a specified storefront channel and locale, overriding global store information. It requires the product ID, channel ID, locale, and SEO data as input.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-seo-info.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\nmutation (\n  $input: SetProductSeoInformationInput!\n) {\n  product {\n    setProductSeoInformation(input: $input) {\n      product {\n        id\n        overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\" }) {\n          seoInformation {\n            pageTitle\n            metaDescription\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"localeContext\": {\n      \"channelId\": \"bc/store/channel/2\",\n      \"locale\": \"fr\"\n    },\n    \"data\": {\n      \"pageTitle\": \"Page title override FR\",\n      \"metaDescription\": \"Meta description override FR\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tax Properties in BigCommerce\nDESCRIPTION: Creates new tax properties for a store with code and display name. Example shows creating alcohol percentage and fuel type properties.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/tax-properties.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/tax/properties\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"code\": \"alcohol-percentage\",\n    \"display_name\": \"Alcohol Percentage\",\n    \"description\": \"Beverage Industry\"\n  },\n  {\n    \"code\": \"fuel-type\",\n    \"display_name\": \"Fuel Type\",\n    \"description\": \"Oil and Natural Gas Industry\"\n  }  \n]\n```\n\n----------------------------------------\n\nTITLE: Creating Spanish JSON Language File for Stencil Theme\nDESCRIPTION: This snippet demonstrates the Spanish language file (es.json) with translations corresponding to the English version. It follows the same structure as en.json but with Spanish text.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/tutorial.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"header\": {\n  \"welcome_back\": \"Bienvenidos, {name}\",\n  \"skip_to_main\": \"Saltar a la principal\"\n   },\n }\n```\n\n----------------------------------------\n\nTITLE: Removing Product SEO Information for a Specific Locale with GraphQL in BigCommerce\nDESCRIPTION: This GraphQL mutation removes product SEO information for a specified channel and locale. It allows for selective removal of overrides or removal of all overrides if the 'overridesToRemove' field is omitted.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-seo-info.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\nmutation (\n  $input: RemoveProductSeoInformationOverridesInput!\n) {\n  product {\n    removeProductSeoInformationOverrides(input: $input) {\n      product {\n        id\n        overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\" }) {\n          seoInformation {\n            pageTitle\n            metaDescription\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"localeContext\": {\n      \"channelId\": \"bc/store/channel/2\",\n      \"locale\": \"fr\"\n    },\n    \"overridesToRemove\": [\"PRODUCT_PAGE_TITLE_FIELD\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Widget Creation Response in BigCommerce API\nDESCRIPTION: Example JSON response from the Create a widget endpoint, containing the unique identifier (UUID) needed for widget placement.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/graphql-templates.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"uuid\": \"{{WIDGET_UUID}}\",\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Locale-Specific Product Information Override\nDESCRIPTION: Shows how to set product information overrides for a specific channel and locale combination. This allows for localized product names and descriptions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-basic-info.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation (\n  $input: SetProductBasicInformationInput!\n) {\n  product {\n    setProductBasicInformation(input: $input) {\n      product {\n        id\n        overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"en\" }) {\n          basicInformation {\n            name\n            description\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"localeContext\": {\n      \"channelId\": \"bc/store/channel/2\",\n      \"locale\": \"fr\"\n    },\n    \"data\": {\n      \"name\": \"name override\",\n      \"description\": \"description override\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Picker App Extension - JavaScript\nDESCRIPTION: Sets up the configuration for a BigCommerce app extension that creates a color picker panel. Includes store credentials, GraphQL mutation definition, and multilingual label configuration for the extension interface.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/app-extensions/guide.mdx#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport setAppExtension from \"./set-app-extension\";\n\n// Hardcoded example of store-specific credentials\nconst subjectStore = {\n  store_hash: \"qwerty\",\n  // the store's access_token from your DB\n  access_token: \"xxxxxalphanumxxxxx\"\n};\n\n// stringified GraphQL Mutation\nconst registerAppExtensionMutation = `\nmutation AppExtension($input: CreateAppExtensionInput!) {\n  appExtension {\n    createAppExtension(input: $input) {\n      appExtension {\n        id\n        context\n        model\n        url\n        label {\n          defaultValue\n          locales {\n            value\n            localeCode\n          }\n        }\n      }\n    }\n  }\n}`;\n\n// This GraphQL variable describes the particular App Extension your app is registering; modify for your use case\nconst colorPickerExtension = {\n  input: {\n    context: \"PANEL\",\n    model: \"PRODUCTS\",\n    url: \"/product/${id}/pigment\",\n    label: {\n      defaultValue: \"Select Color\",\n      locales: [\n        {\n          value: \"Pick Color\",\n          localeCode: \"en-US\"\n        },\n        {\n          value: \"Choisissez la couleur\",\n          localeCode: \"fr-FR\"\n        },\n      ],\n    },\n  },\n};\n\nreturn setAppExtension(\n  subjectStore,\n  registerAppExtensionMutation,\n  colorPickerExtension\n);\n```\n\n----------------------------------------\n\nTITLE: Appending URL Query Parameters - JavaScript\nDESCRIPTION: Appends key-value pairs as URL query parameters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction setURLQueryParam(url, key, value) { const separator = url.includes('?') ? '&' : '?'; return `${url}${separator}${key}=${value}`; }\n```\n\n----------------------------------------\n\nTITLE: Cart Creation Response Example\nDESCRIPTION: The response from cart creation showing the new cart's entity ID and line items. The cart contains one physical item with name and quantity information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/graphql-storefront.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n  {\n    \"data\": {\n      \"cart\": {\n        \"createCart\": {\n          \"cart\": {\n            \"entityId\": \"bb916deb-ddd6-4586-b65b-b8385e0e7a9d\",\n            \"lineItems\": {\n              \"physicalItems\": [\n                {\n                  \"name\": \"[Sample] Smith Journal 13\",\n                  \"quantity\": 1\n                }\n              ],\n              \"digitalItems\": [],\n              \"giftCertificates\": [],\n              \"customItems\": []\n            }\n          }\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Selecting Shipping Option for Checkout with GraphQL\nDESCRIPTION: GraphQL mutation to select a shipping option for an existing checkout consignment. Requires checkout ID, consignment ID, and shipping option ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/graphql-storefront.mdx#2025-04-16_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://store.example.com/graphql\nAuthorization: Bearer {{STOREFRONT_TOKEN}}\nX-Bc-Customer-Access-Token: {{CUSTOMER_ACCESS_TOKEN}}\n\nmutation selectCheckoutShippingOption($selectCheckoutShippingOptionInput: SelectCheckoutShippingOptionInput!) {\n    checkout {\n      selectCheckoutShippingOption(input: $selectCheckoutShippingOptionInput) {\n        checkout {\n          entityId\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a Cart with Specific Currency via BigCommerce API\nDESCRIPTION: JSON payload for creating a server-to-server cart with a specific currency (GBP) using the Create a Cart API endpoint. This example adds multiple product variants to the cart.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/currencies/guide.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customer_id\": 1,\n  \"line_items\": [\n    {\n      \"product_id\": 77,\n      \"variant_id\": 1,\n      \"quantity\": 3\n    },\n    {\n      \"product_id\": 77,\n      \"variant_id\": 2,\n      \"quantity\": 3\n    }\n  ],\n  \"channel_id\": 1,\n  \"currency\": {\n    \"code\": \"GBP\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Context Retrieval with jsContext Helper in Handlebars\nDESCRIPTION: Demonstrates the usage of the jsContext helper, which returns a JSON representation of the data injected by the inject helper. It takes no parameters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_99\n\nLANGUAGE: handlebars\nCODE:\n```\n{{jsContext}}\n```\n\n----------------------------------------\n\nTITLE: Defining a Theme Variation in config.json\nDESCRIPTION: This snippet shows how to define a theme variation in the `config.json` file of a BigCommerce Stencil theme. It includes settings for the variation's name, ID, desktop and mobile screenshots, description, demo URL, and optimization criteria. No dependencies are required.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/variations.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"variations\": [\n    {\n      \"name\": \"Light\",\n      \"id\": \"light\",\n      \"meta\": {\n        \"desktop_screenshot\": \"desktop_light.png\",\n        \"mobile_screenshot\": \"mobile_light.png\",\n        \"description\": \"Ideal for a wide range of businesses and brands, this design is fully responsive, simple, and ready for you to add your branding, logo, and products. It comes ready to build a clean looking and beautiful store with features such as homepage carousel, social media icons, featured and top selling products, and faceted search (which is available on select BigCommerce plans). Fully express your brand by using our Theme Editor to quickly and easily style your site's fonts and colors, all without the need to write code.\",\n        \"demo_url\": \"https://cornerstone-light-demo.mybigcommerce.com\",\n        \"optimized_for\": [\n          \"multi_purpose\",\n          \"mobile_tablet_desktop\",\n          \"sales_discounts\",\n          \"large_catalog\"\n        ],\n        //...\n      },\n      //..\n    },\n```\n\n----------------------------------------\n\nTITLE: Configuring Shipping Settings for BigCommerce Provider\nDESCRIPTION: JSON configuration schema for shipping-specific settings including destination types and delivery services. Defines the selectable options that merchants can configure for the shipping service.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/shipping.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"code\": \"destination_type\",\n        \"type\": \"select\",\n        \"label\": \"Destination Type\",\n        \"description\": \"Selection of either residential or commercial destination type.\",\n        \"required\": false,\n        \"map\": {\n            \"residential\": \"Residential\",\n            \"commercial\": \"Commercial\"\n        }\n    },\n    {\n        \"code\": \"delivery_services\",\n        \"type\": \"multiselect\",\n        \"label\": \"Delivery Services\",\n        \"description\": \"Checklist of delivery services to support\",\n        \"required\": true,\n        \"map\": {\n            \"1_day_air\": \"1 Day Air\",\n            \"2_day_air\": \"2 Day Air\",\n            \"1 day ground\": \"1 Day Ground Delivery\",\n            \"2 day ground\": \"2 Day Ground Delivery\"\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Global Featured Product Flag\nDESCRIPTION: GraphQL mutation to set whether a product is featured at the global store level. This setting serves as the default for all channels.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-attributes.mdx#2025-04-16_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($input: SetProductIsFeaturedInput!) {\n  product {\n    setProductIsFeatured (input: $input) {\n      product {\n        isFeatured\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"data\": {\n      \"isFeatured\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Backward Pagination Example in GraphQL\nDESCRIPTION: This query demonstrates backward pagination by retrieving the last 5 products before a specific cursor. It uses the 'last' and 'before' parameters to navigate backwards through the result set.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/index.mdx#2025-04-16_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\n  query {\n  site {\n    products(last: 5, before: \"YXJyYXljb25uZWN0aW9uOjU=\") {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        cursor\n        node {\n          entityId\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Absolute Inventory Adjustment for Products using BigCommerce API (HTTP)\nDESCRIPTION: This HTTP PUT request demonstrates how to make an absolute adjustment to inventory quantity for a product at a specific location. It includes the necessary headers and a JSON payload specifying the location, product, and new quantity.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/adjustments/absolute\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"items\": [\n    {\n      \"location_id\": 1,\n      \"product_id\": 111,\n      \"quantity\": 10\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Template with GraphQL Query using getPageByGQL in JavaScript\nDESCRIPTION: Demonstrates how to use the getPageByGQL method to render a template using an inline GraphQL query for dynamic content.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nutils.api.getPageByGQL('pages/store-locator', (err, response) => {\n  if(err) {\n    console.error(err);\n  }\n  // Server returns HTML template in the response, even if response is unsuccessful\n  modal.updateContent(response);\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Products with Pickup Information via BigCommerce API\nDESCRIPTION: This snippet shows how to retrieve products associated with a specific order, including pickup consignment information, using the BigCommerce API. It includes the GET request and the expected JSON response structure.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_33\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{store_hash}}/v2/orders/{{order_id}}/products\nX-Auth-Token: {{access_token}}\nAccept: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 22,\n    \"order_id\": 126,\n    \"product_id\": 97,\n    \"variant_id\": 69,\n    \"order_pickup_method_id\": 13,\n    …\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Requesting Order Products in BigCommerce API\nDESCRIPTION: HTTP GET request to retrieve products associated with a specific order. Requires store hash, order ID, and access token for authentication.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/orders.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{store_hash}}/v2/orders/{{order_id}}/products\nX-Auth-Token: {{access_token}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Adding ShipperHQ Metafield to BigCommerce Product\nDESCRIPTION: This HTTP POST request adds a ShipperHQ metafield to a BigCommerce product. It sets shipping origins for the product using the ShipperHQ namespace.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/shipping/shipper-hq.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/{{product_id}}/metafields\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n\t\"permission_set\": \"write\",\n\t\"key\": \"shipping-origins\",\n\t\"value\": \"[\\\"Alaska\\\",\\\"California\\\"]\",\n\t\"namespace\": \"shipping.shipperhq\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product List with GraphQL\nDESCRIPTION: Query to retrieve a list of products by entityIds using the products field.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    products (entityIds: [111]) {\n      edges {\n        node {\n          # fields on the Product object type\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Modifiers with GraphQL\nDESCRIPTION: A comprehensive GraphQL query to retrieve product modifier information including localized values. The query fetches modifier details like display names, default values, and locale-specific overrides for a specific product and channel.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  store {\n    product (id: \"bc/store/product/111\") {\n      id\n      modifiers (first: 10) {\n        edges {\n          node {\n            __typename\n            id\n            displayName\n            isShared\n            isRequired\n            ... on CheckboxProductModifier {\n              checkedByDefault\n              fieldValue\n              overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\" }) {\n                displayName\n                fieldValue\n              }\n            }\n            ... on TextFieldProductModifier {\n              defaultValue\n              overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\" }) {\n                displayName\n                defaultValue\n              }\n            }\n            ... on MultilineTextFieldProductModifier {\n              defaultValue\n              overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\" }) {\n                displayName\n                defaultValue\n              }\n            }\n            ... on NumbersOnlyTextFieldProductModifier {\n              defaultValueFloat: defaultValue\n              overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\" }) {\n                displayName\n                defaultValueFloat: defaultValue\n              }\n            }\n            ... on DropdownProductModifier {\n              values {\n                id\n                label\n                isDefault\n              }\n              overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\" }) {\n                displayName\n                values {\n                  id\n                  label\n                }\n              }\n            }\n            ... on RadioButtonsProductModifier {\n              values {\n                id\n                label\n                isDefault\n              }\n              overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\" }) {\n                displayName\n                values {\n                  id\n                  label\n                }\n              }\n            }\n            ... on RectangleListProductModifier {\n              values {\n                id\n                label\n                isDefault\n              }\n              overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\" }) {\n                displayName\n                values {\n                  id\n                  label\n                }\n              }\n            }\n            ... on SwatchProductModifier {\n              values {\n                id\n                label\n                isDefault\n              }\n              overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\" }) {\n                displayName\n                values {\n                  id\n                  label\n                }\n              }\n            }\n            ... on FileUploadProductModifier {\n              overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\" }) {\n                displayName\n              }\n            }\n            ... on DateFieldProductModifier {\n              overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\" }) {\n                displayName\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Price Record Structure in JavaScript\nDESCRIPTION: Demonstrates the structure of a price record object, which includes variant ID, various price types, and currency.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/pricing/price-lists.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"variant_id\": 3121,\n  \"price\": 10.0,\n  \"sale_price\": 8.0,\n  \"retail_price\": 12.0,\n  \"map_price\": 6.0,\n  \"currency\": \"EUR\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inventory Information for a Location in BigCommerce API\nDESCRIPTION: This snippet demonstrates how to retrieve inventory information for a specific location using the BigCommerce API. It returns details about products and variants at the location.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/locations/{location_id}/items\nX-Auth-Token: {{access_token}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Removing Locale-Specific Product Information Override\nDESCRIPTION: Demonstrates how to remove specific product information overrides for a channel and locale combination. This returns the product to using global values.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-basic-info.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation (\n  $input: RemoveProductBasicInformationOverridesInput!\n) {\n  product {\n    removeProductBasicInformationOverrides(input: $input) {\n      product {\n        id\n        overridesForLocale (localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\" }) {\n          basicInformation {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"localeContext\": {\n      \"channelId\": \"bc/store/channel/2\",\n      \"locale\": \"fr\"\n    },\n    \"overridesToRemove\": [\"PRODUCT_NAME_FIELD\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropzone Object Properties Schema\nDESCRIPTION: Specifies the structure of a dropzone object with configuration and widgets array properties.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/page-widgets/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Type | Description |\n|:---------|:-----|:------------|\n| `configuration` | object | A JSON object that describes the Page Builder options menu that corresponds with the dropzone. |\n| `widgets` | array  | Consists of [widget](#widgets) objects. |\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Page in JSON\nDESCRIPTION: JSON configuration for limiting various elements on the product page, including videos, images, reviews, related products, and similar products.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"product\": {\n    \"videos\": {\n      \"limit\": 11\n    },\n    \"images\": {\n      \"limit\": 12\n    },\n    \"reviews\": {\n      \"limit\": 13\n    },\n    \"related_products\": {\n      \"limit\": 14\n    },\n    \"similar_by_views\": {\n      \"limit\": 15\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Login Mutation Response Example\nDESCRIPTION: The response from a successful login mutation which includes the customer access token. This token has an expiration date and is required for authenticating customer-specific API requests.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/graphql-storefront.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"login\": {\n            \"result\": \"success\",\n            \"customer\": {\n                \"entityId\": 21,\n                \"email\": \"user@email.com\"\n            },\n            \"customerAccessToken\": {\n                \"value\": \"53ea9099d5484cdedddbf8f59a73bc284afefd7943c4dbe578db52435e0c0de7_1721406629\",\n                \"expiresAt\": \"2024-07-19T16:30:29Z\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Global Region to Category Page Template in HTML\nDESCRIPTION: This code snippet demonstrates how to add the 'below_content--global' global region to the category.html template file in a BigCommerce theme. It shows the placement of the global region within the main content area of the category page.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/global-regions.mdx#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<main class=\"page-content\" id=\"product-listing-container\">\n    {{> components/category/product-listing}}\n    {{{region name=\"category_below_content\"}}}\n    {{{region name=\"below_content--global\"}}}\n</main>\n```\n\n----------------------------------------\n\nTITLE: Customer Account Shortcodes\nDESCRIPTION: Collection of shortcodes for customer account functionality including signin form, registration form, cart display, profile management, order history, and shipping address management.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/content/shortcodes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shortcode\nCODE:\n```\n[bigcommerce_signin_form]\n```\n\nLANGUAGE: shortcode\nCODE:\n```\n[bigcommerce_registration_form]\n```\n\nLANGUAGE: shortcode\nCODE:\n```\n[bigcommerce_cart]\n```\n\nLANGUAGE: shortcode\nCODE:\n```\n[bigcommerce_account_profile]\n```\n\nLANGUAGE: shortcode\nCODE:\n```\n[bigcommerce_order_history]\n```\n\nLANGUAGE: shortcode\nCODE:\n```\n[bigcommerce_shipping_address_list]\n```\n\n----------------------------------------\n\nTITLE: Absolute Inventory Adjustment for Variants Response from BigCommerce API (JSON)\nDESCRIPTION: This JSON response example shows the structure of the data returned when making absolute adjustments to inventory for variants. It includes a transaction ID for tracking the adjustments.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transaction_id\": \"b8dfdfbd-bfaa-40f4-b1b1-04d540604867\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Checkout Consignment from Shipping to Pickup\nDESCRIPTION: Shows how to convert a shipping consignment to a pickup consignment by specifying a pickup method ID. The request includes the line items to be included in the pickup consignment.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_28\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/checkouts/{{checkout_id}}/consignments/{{consignment_id}}\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"pickup_option\": {\n    \"pickup_method_id\": 1\n  },\n  \"line_items\": [\n    {\n      \"item_id\": \"67642f07-49d1-4501-8b7d-2e589aec34b8\",\n      \"quantity\": 1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Cart Metafields with GraphQL\nDESCRIPTION: Query to retrieve cart metafields from a specific namespace. Returns metafield ID, key, and value from the bc_storefront namespace.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/metafields.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery getCartMetafields {\n   site{\n     cart{\n      metafields(namespace: \"bc_storefront\"){\n        edges{\n          node{\n            id\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"cart\": {\n        \"metafields\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"id\": \"TWV0YWZpZWxkczo1NQ==\",\n                \"key\": \"size\",\n                \"value\": \"small\"\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Abandoned Cart Information\nDESCRIPTION: Makes a GET request to retrieve abandoned cart details using a token parameter\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/abandoned-carts.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/abandoned-carts/{token}\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Paginated System Logs Response from BigCommerce API\nDESCRIPTION: JSON response showing two system log entries with pagination metadata. Includes log entry details such as ID, type, severity, summary, and creation date, along with pagination information showing current page, total pages, and navigation links.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/settings/logs.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 3,\n      \"type\": \"general\",\n      \"module\": \"\",\n      \"severity\": \"notices\",\n      \"summary\": \"Marking order 1234000002 as deleted.\",\n      \"message\": \"Marking order 1234000002 as deleted.\",\n      \"date_created\": \"2021-12-19T19:12:31+00:00\"\n    },\n    {\n      \"id\": 4,\n      \"type\": \"general\",\n      \"module\": \"\",\n      \"severity\": \"notices\",\n      \"summary\": \"Restoring order 1234000002\",\n      \"message\": \"Restoring order 1234000002\",\n      \"date_created\": \"2021-12-19T19:15:56+00:00\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"total\": 2,\n      \"count\": 2,\n      \"per_page\": 2,\n      \"current_page\": 2,\n      \"total_pages\": 1,\n      \"links\": {\n        \"previous\": \"?page=1&limit=2\",\n        \"current\": \"?page=2&limit=2\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Region to Category Page Template in HTML\nDESCRIPTION: This snippet shows how to add a new region called 'category_header_banner' to the category page template. The region is placed below the page heading and will be used to position the widget.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{#unless theme_settings.hide_category_page_heading }}\n    <h1 class=\"page-heading\">{{category.name}}</h1>\n    {{{region name=\"category_below_header\"}}}\n{{/unless}}\n<!-- Add category_header_banner region -->\n{{{region name=\"category_header_banner\"}}}\n<!-- End of Add category_header_banner region -->\n{{{category.description}}}\n```\n\n----------------------------------------\n\nTITLE: Validating Connection Options for BigCommerce Shipping Carrier\nDESCRIPTION: Example of a POST request to validate connection options for a shipping carrier. The request includes connection options, and the response indicates whether the credentials are valid along with any error messages.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/shipping.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n{\n  \"connection_options\": {\n    \"account_id\": \"a1ty\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"valid\": false,\n  \"messages\": [\n    {\n      \"text\": \"Your account ID is invalid\",\n      \"type\": \"ERROR\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Language Support in Checkout Header (HTML)\nDESCRIPTION: This snippet demonstrates how to use the {{lang}} statement in the header of the default checkout page to enable automatic rendering of text in the store's default language.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/localization.mdx#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{#partial \"head\"}}\n\n{{{ checkout.checkout_head }}}\n{{{ stylesheet '/assets/css/optimized-checkout.scss' }}}\n{{ getFontsCollection }}\n\n<script type=\"text/javascript\">\n    window.language = {{{langJson 'optimized_checkout'}}};\n</script>\n\n{{{head.scripts}}}\n\n{{/partial}}\n\n{{#partial \"page\"}}\n<header class=\"checkoutHeader optimizedCheckout-header\">\n    <div class=\"checkoutHeader-content\">\n        <h1 class=\"is-srOnly\">{{lang 'checkout.title'}}</h1>\n        <h2 class=\"checkoutHeader-heading\">\n            <a class=\"checkoutHeader-link\" href=\"{{urls.home}}\">\n                {{#if checkout.header_image}}\n                    <img alt=\"{{settings.store_logo.title}}\" class=\"checkoutHeader-logo\" id=\"logoImage\" src=\"{{ checkout.header_image }}\"/>\n                {{ else }}\n                    <span class=\"header-logo-text\">{{settings.store_logo.title}}</span>\n                {{/if}}\n            </a>\n        </h2>\n    </div>\n</header>\n\n{{{ checkout.checkout_content }}}\n\n{{{ footer.scripts }}}\n\n{{/partial}}\n\n{{> layout/empty}}\n```\n\n----------------------------------------\n\nTITLE: Mapping Custom JavaScript Modules in BigCommerce Stencil Theme\nDESCRIPTION: This JavaScript snippet shows how to map custom page templates to JavaScript modules in the app.js file. It includes the customClasses object and the stencilBootstrap function for loading appropriate modules.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/javascript/extend.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst customClasses = {\n    'pages/custom/product/customProd': () => import('./theme/custom'), // Mac/Linux\n    'pages\\\\custom\\\\product\\\\customProd': () => import('./theme/custom'), // Windows\n};\n/**\n * This function gets added to the global window and then called\n * on page load with the current template loaded and JS Context passed in\n * @param pageType String\n * @param contextJSON\n * @returns {*}\n */\nwindow.stencilBootstrap = function stencilBootstrap(pageType, contextJSON = null, loadGlobal = true) {\n    const context = JSON.parse(contextJSON || '{}');\n\n    return {\n        load() {\n            $(() => {\n                // Load globals\n                if (loadGlobal) {\n                    Global.load(context);\n                }\n\n                const importPromises = [];\n\n                // Find the appropriate page loader based on pageType\n                const pageClassImporter = pageClasses[pageType];\n                if (typeof pageClassImporter === 'function') {\n                    importPromises.push(pageClassImporter());\n                }\n\n                // See if there is a page class default for a custom template\n                const customTemplateImporter = customClasses[context.template];\n                if (typeof customTemplateImporter === 'function') {\n                    importPromises.push(customTemplateImporter());\n                }\n\n                // Wait for imports to resolve, then call load() on them\n                Promise.all(importPromises).then(imports => {\n                    imports.forEach(imported => {\n                        imported.default.load(context);\n                    });\n                });\n            });\n        },\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Brand List in Handlebars\nDESCRIPTION: Handlebars expression to access the list of brands on the brands page template. Each brand in the list contains basic data like url, name, id, and image.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_3\n\nLANGUAGE: handlebars\nCODE:\n```\n{{brands}}\n```\n\n----------------------------------------\n\nTITLE: Customer Order Metafields GraphQL Response Format\nDESCRIPTION: Example response from querying customer order metafields. The response shows multiple orders belonging to the customer with their respective entityIds, though in this example none of the orders have metafields in the requested namespace.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/orders.mdx#2025-04-16_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    \"data\": {\n        \"customer\": {\n            \"orders\": {\n                \"edges\": [\n                    {\n                        \"node\": {\n                            \"entityId\": 1234000006,\n                            \"metafields\": {\n                                \"edges\": []\n                            }\n                        }\n                    },\n                    {\n                        \"node\": {\n                            \"entityId\": 1234000005,\n                            \"metafields\": {\n                                \"edges\": []\n                            }\n                        }\n                    },\n                    {\n                        \"node\": {\n                            \"entityId\": 1234000004,\n                            \"metafields\": {\n                                \"edges\": []\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Converting Pickup to Shipping Consignment\nDESCRIPTION: Shows the response when a pickup consignment is successfully converted to a shipping consignment. The response includes the shipping address details and available shipping options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    ...\n    \"consignments\": [\n      {\n        \"id\": \"6218019d81754\",\n        \"shipping_cost_inc_tax\": 0,\n        \"shipping_cost_ex_tax\": 0,\n        \"handling_cost_inc_tax\": 0,\n        \"handling_cost_ex_tax\": 0,\n        \"coupon_discounts\": [],\n        \"discounts\": [],\n        \"line_item_ids\": [\n          \"67642f07-49d1-4501-8b7d-2e589aec34b8\"\n        ],\n        \"shipping_address\": {\n          \"first_name\": \"abc1\",\n          \"last_name\": \"abc1\",\n          \"email\": \"abc1@bigcommerce.com\",\n          \"company\": \"a\",\n          \"address1\": \"2808 Skyway Cir\",\n          \"address2\": \"\",\n          \"city\": \"Austin\",\n          \"state_or_province\": \"Texas\",\n          \"state_or_province_code\": \"TX\",\n          \"country\": \"United States\",\n          \"country_code\": \"US\",\n          \"postal_code\": \"78704\",\n          \"phone\": \"0410123456\",\n          \"custom_fields\": []\n        },\n        \"available_shipping_options\": [\n          {\n            \"id\": \"4dcbf24f457dd67d5f89bcf374e0bc9b\",\n            \"type\": \"freeshipping\",\n            \"description\": \"Free Shipping\",\n            \"image_url\": \"\",\n            \"cost\": 0,\n            \"transit_time\": \"\",\n            \"additional_description\": \"\"\n          }\n        ]\n      }\n    ]\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Billing Address Input Variables - JSON\nDESCRIPTION: This JSON snippet illustrates the input structure necessary for the billing address mutation. It contains the checkout entity ID and the address details including name, email, and location information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/graphql-storefront.mdx#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"addCheckoutBillingAddressInput\": {\n    \"checkoutEntityId\": \"812ece1a-da23-46eb-ab6b-c2ee210aae54\",\n    \"data\": {\n      \"address\": {\n        \"firstName\": \"Joe\",\n        \"lastName\": \"Blogs\",\n        \"email\": \"joe@example.com\",\n        \"company\": \"BlogIndustries\",\n        \"address1\": \"123 Yar st\",\n        \"address2\": \"\",\n        \"city\": \"RWC\",\n        \"stateOrProvince\": \"CA\",\n        \"stateOrProvinceCode\": \"CA\",\n        \"countryCode\": \"US\",\n        \"postalCode\": \"94061\",\n        \"phone\": \"6501231212\",\n        \"shouldSaveAddress\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Page Types to JavaScript Modules\nDESCRIPTION: This code shows how page types are mapped to their corresponding JavaScript modules in the `assets/js/app.js` file. It uses import statements and an object `pageClasses` to define the mappings.  When a specific page type is loaded, its corresponding JavaScript module is loaded as well.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/javascript/extend.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Global from './theme/global';\n\nconst getAccount = () => import('./theme/account');\nconst getLogin = () => import('./theme/auth');\nconst noop = null;\n\nconst pageClasses = {\n    account_orderstatus: getAccount,\n    account_order: getAccount,\n    account_addressbook: getAccount,\n    shippingaddressform: getAccount,\n    account_new_return: getAccount,\n    'add-wishlist': () => import('./theme/wishlist'),\n    account_recentitems: getAccount,\n    account_downloaditem: getAccount,\n    editaccount: getAccount,\n    account_inbox: getAccount,\n    account_saved_return: getAccount,\n    account_returns: getAccount,\n    account_paymentmethods: getAccount,\n    account_addpaymentmethod: getAccount,\n    account_editpaymentmethod: getAccount,\n    login: getLogin,\n    createaccount_thanks: getLogin,\n    createaccount: getLogin,\n    getnewpassword: getLogin,\n    forgotpassword: getLogin,\n    blog: noop,\n    blog_post: noop,\n    brand: () => import('./theme/brand'),\n    brands: noop,\n    cart: () => import('./theme/cart'),\n    category: () => import('./theme/category'),\n    compare: () => import('./theme/compare'),\n    page_contact_form: () => import('./theme/contact-us'),\n    error: noop,\n    404: noop,\n    giftcertificates: () => import('./theme/gift-certificate'),\n    giftcertificates_balance: () => import('./theme/gift-certificate'),\n    giftcertificates_redeem: () => import('./theme/gift-certificate'),\n    default: noop,\n    page: noop,\n    product: () => import('./theme/product'),\n    amp_product_options: () => import('./theme/product'),\n    search: () => import('./theme/search'),\n    rss: noop,\n    sitemap: noop,\n    newsletter_subscribe: noop,\n    wishlist: () => import('./theme/wishlist'),\n    wishlists: () => import('./theme/wishlist'),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Widget with Layout Settings in BigCommerce Storefront JSON\nDESCRIPTION: Complex JSON structure defining product widgets with their configurations within dropzones. Each product widget includes appearance settings, product details, content alignment, and visibility options for various product elements.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/page-widgets/guide.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"buttonColor\": \"rgba(68,68,68,1)\",\n\"textStyle\": \"default\",\n\"buttonTextColor\": \"rgba(255,255,255,1)\",\n\"buttonActionType\": \"addToCart\"\n},\n\"productId\": \"77\"\n},\n\"storefront_api_query_params\": {\n  \"productId\": 77\n},\n\"name\": \"Product\",\n\"description\": \"\",\n\"type\": \"widget\"\n}\n]\n},\n{\n\"configuration\": {\n  \"dropzoneBackgroundColor\": \"rgba(0,0,0,0)\",\n  \"dropzoneBackgroundImageAlignment\": {\n    \"horizontal\": \"center\",\n    \"vertical\": \"middle\"\n  },\n  \"dropzoneBackgroundImageFit\": \"fill\",\n  \"dropzoneBackgroundImageOpacity\": 100,\n  \"dropzoneBackgroundImageUrl\": \"\",\n  \"dropzoneBorderColor\": \"#333333\",\n  \"dropzoneBorderStyle\": \"solid\",\n  \"dropzoneBorderThickness\": 0,\n  \"dropzoneHeight\": \"\",\n  \"dropzoneJustifyContent\": \"center\",\n  \"dropzoneMargin\": {\n    \"bottom\": {\n      \"type\": \"px\",\n      \"value\": \"0\"\n    },\n    \"left\": {\n      \"type\": \"px\",\n      \"value\": \"0\"\n    },\n    \"right\": {\n      \"type\": \"px\",\n      \"value\": \"0\"\n    },\n    \"top\": {\n      \"type\": \"px\",\n      \"value\": \"0\"\n    }\n  },\n  \"dropzonePadding\": {\n    \"bottom\": {\n      \"type\": \"px\",\n      \"value\": \"0\"\n    },\n    \"left\": {\n      \"type\": \"px\",\n      \"value\": \"10.5\"\n    },\n    \"right\": {\n      \"type\": \"px\",\n      \"value\": \"10.5\"\n    },\n    \"top\": {\n      \"type\": \"px\",\n      \"value\": \"0\"\n    }\n  },\n  \"dropzoneZIndex\": \"auto\",\n  \"dropzoneBackgroundType\": \"\"\n},\n\"widgets\": [\n  {\n    \"widget_template_uuid\": \"e59c1412-2d85-4f18-ab4b-8a55412d945c\",\n    \"configuration\": {\n      \"productCardContentAlignment\": {\n        \"horizontal\": \"center\"\n      },\n      \"productImage\": {\n        \"visibility\": \"show\",\n        \"imageFit\": \"fill\"\n      },\n      \"brand\": {\n        \"visibility\": \"show\",\n        \"textStyle\": \"default\",\n        \"color\": \"#444444\"\n      },\n      \"productName\": {\n        \"visibility\": \"show\",\n        \"textStyle\": \"default\",\n        \"color\": \"#444444\"\n      },\n      \"price\": {\n        \"visibility\": \"show\",\n        \"textStyle\": \"default\",\n        \"color\": \"#444444\"\n      },\n      \"productRating\": {\n        \"visibility\": \"hide\",\n        \"starColorFilled\": \"#3C64F4\",\n        \"starColorEmpty\": \"#ECEEF5\",\n        \"reviewsColor\": \"#8C93AD\"\n      },\n      \"button\": {\n        \"visibility\": \"hide\",\n        \"shape\": \"round\",\n        \"buttonColor\": \"rgba(68,68,68,1)\",\n        \"textStyle\": \"default\",\n        \"buttonTextColor\": \"rgba(255,255,255,1)\",\n        \"buttonActionType\": \"addToCart\"\n      },\n      \"productId\": \"80\"\n    },\n    \"storefront_api_query_params\": {\n      \"productId\": 80\n    },\n    \"name\": \"Product\",\n    \"description\": \"\",\n    \"type\": \"widget\"\n  }\n]\n},\n{\n\"configuration\": {\n  \"dropzoneBackgroundColor\": \"rgba(0,0,0,0)\",\n  \"dropzoneBackgroundImageAlignment\": {\n    \"horizontal\": \"center\",\n    \"vertical\": \"middle\"\n  },\n  \"dropzoneBackgroundImageFit\": \"fill\",\n  \"dropzoneBackgroundImageOpacity\": 100,\n  \"dropzoneBackgroundImageUrl\": \"\",\n  \"dropzoneBorderColor\": \"#333333\",\n  \"dropzoneBorderStyle\": \"solid\",\n  \"dropzoneBorderThickness\": 0,\n  \"dropzoneHeight\": \"\",\n  \"dropzoneJustifyContent\": \"center\",\n  \"dropzoneMargin\": {\n    \"bottom\": {\n      \"type\": \"px\",\n      \"value\": \"0\"\n    },\n    \"left\": {\n      \"type\": \"px\",\n      \"value\": \"0\"\n    },\n    \"right\": {\n      \"type\": \"px\",\n      \"value\": \"0\"\n    },\n    \"top\": {\n      \"type\": \"px\",\n      \"value\": \"0\"\n    }\n  },\n  \"dropzonePadding\": {\n    \"bottom\": {\n      \"type\": \"px\",\n      \"value\": \"0\"\n    },\n    \"left\": {\n      \"type\": \"px\",\n      \"value\": \"10.5\"\n    },\n    \"right\": {\n      \"type\": \"px\",\n      \"value\": \"10.5\"\n    },\n    \"top\": {\n      \"type\": \"px\",\n      \"value\": \"0\"\n    }\n  },\n  \"dropzoneZIndex\": \"auto\",\n  \"dropzoneBackgroundType\": \"\"\n},\n\"widgets\": [\n  {\n    \"widget_template_uuid\": \"e59c1412-2d85-4f18-ab4b-8a55412d945c\",\n    \"configuration\": {\n      \"productCardContentAlignment\": {\n        \"horizontal\": \"center\"\n      },\n      \"productImage\": {\n        \"visibility\": \"show\",\n        \"imageFit\": \"fill\"\n      },\n      \"brand\": {\n        \"visibility\": \"show\",\n        \"textStyle\": \"default\",\n        \"color\": \"#444444\"\n      },\n      \"productName\": {\n        \"visibility\": \"show\",\n        \"textStyle\": \"default\",\n        \"color\": \"#444444\"\n      },\n      \"price\": {\n        \"visibility\": \"show\",\n        \"textStyle\": \"default\",\n        \"color\": \"#444444\"\n      },\n      \"productRating\": {\n        \"visibility\": \"hide\",\n        \"starColorFilled\": \"#3C64F4\",\n        \"starColorEmpty\": \"#ECEEF5\",\n        \"reviewsColor\": \"#8C93AD\"\n      },\n      \"button\": {\n        \"visibility\": \"hide\",\n        \"shape\": \"round\",\n        \"buttonColor\": \"rgba(68,68,68,1)\",\n        \"textStyle\": \"default\",\n        \"buttonTextColor\": \"rgba(255,255,255,1)\",\n        \"buttonActionType\": \"addToCart\"\n      },\n      \"productId\": \"93\"\n    },\n    \"storefront_api_query_params\": {\n      \"productId\": 93\n    },\n    \"name\": \"Product\",\n    \"description\": \"\",\n    \"type\": \"widget\"\n  }\n]\n},\n],\n\"type\": \"layout\"\n}\n]\n}\n]\n},\n\"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Product Stock Levels with V2 Products API\nDESCRIPTION: This JSON payload is used to update a product's inventory levels by sending a PUT request to the V2 Products API endpoint. It sets the current inventory level to 15 and the warning level to 5.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"inventory_level\": 15,\n  \"inventory_warning_level\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Example Page Payload Object in BigCommerce Webhooks\nDESCRIPTION: This JSON snippet shows the structure of a payload object for page-related webhook events in BigCommerce. It contains store ID, producer, creation timestamp, event scope, page ID data, and a hash for verification.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\": \"11111\",\n \"producer\": \"stores/abcde\",\n \"created_at\": 1641641646,\n \"scope\": \"store/channel/1/page/created\",\n  \"data\": {\n    \"page_id\": 11 // ID of the page\n  },\n \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Pre-order Settings in BigCommerce GraphQL\nDESCRIPTION: This query retrieves a product's pre-order settings, including both global information for the store and overrides for a specific locale within a storefront channel.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-attributes.mdx#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  store {\n    product (id: \"bc/store/product/111\") {\n      preOrderSettings {\n        message\n      }\n      overridesForLocale (localeContext: {locale: \"fr\", channelId: \"bc/store/channel/2\"}) {\n        preOrderSettings {\n          message\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a VerticalStepper component\nDESCRIPTION: This snippet outlines the creation of a VerticalStepper component using Material UI's Stepper functionality. It manages the step states and displays corresponding content based on the active step.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/react.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport Stepper from \"@mui/material/Stepper\";\nimport Step from \"@mui/material/Step\";\nimport StepLabel from \"@mui/material/StepLabel\";\nimport StepContent from \"@mui/material/StepContent\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"./TextField\";\n\nfunction getSteps() {\n  return [\"Provide your email\", \"Receive your coupon!\"];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return \"Please enter your email address:\";\n    case 1:\n      return \"We have sent a coupon code to your email address.\";\n    default:\n      return \"Unknown step\";\n  }\n}\n\nexport default function VerticalLinearStepper() {\n  const [activeStep, setActiveStep] = React.useState(0);\n  const steps = getSteps();\n\n  const handleNext = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  };\n\n  return (\n    <Box sx={{ width: \"100%\" }}>\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        {steps.map((label, index) => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n            <StepContent>\n              <Typography>{getStepContent(index)}</Typography>\n              {activeStep === 0 ? <TextField /> : null}\n              <Box sx={{ mb: 2 }}>\n                {activeStep === 0 && (\n                  <div>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={handleNext}\n                      sx={{ mt: 1, mr: 1 }}\n                    >\n                      Submit\n                    </Button>\n                  </div>\n                )}\n              </Box>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n    </Box>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Currency Assignments for a BigCommerce Channel\nDESCRIPTION: HTTP request example for retrieving currency assignments specific to a channel. This shows which currencies are enabled for the channel.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/guide/storefronts.mdx#2025-04-16_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/channels/{{CHANNEL_ID}}/currency-assignments\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Modified Disqus Configuration for Stencil Product Pages\nDESCRIPTION: This code snippet shows the modified Disqus configuration function for use with Stencil product pages. It uses the product.url and product.id variables to set the page URL and identifier for Disqus comments.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/disqus.mdx#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar disqus_config = function () {\n    this.page.url = product.url;\n    this.page.identifier = product.id;\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Variant Information with Response\nDESCRIPTION: Complete example showing both the GraphQL query for variant identifiers and its JSON response structure.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/variants.mdx#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    product (entityId: 113) {\n      variants (entityIds: [127]) {\n        edges {\n          node {\n            id\n            entityId\n            sku  \n            upc\n            mpn\n          }\n        }\n      }   \n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"product\": {\n        \"variants\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"id\": \"VmFyaWFudDoxMjc=\",\n                \"entityId\": 127,\n                \"sku\": \"ABC-1111-PI-SM-CO-RE\",\n                \"upc\": \"123346\",\n                \"mpn\": \"9876543210\"\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response After Selecting a Shipping Option\nDESCRIPTION: Shows the response when a shipping option is successfully selected for a consignment. The response includes the selected shipping option details and the shipping address.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    ...\n    \"consignments\": [\n      {\n        \"id\": \"6218019d81754\",\n        \"shipping_cost_inc_tax\": 0,\n        \"shipping_cost_ex_tax\": 0,\n        \"handling_cost_inc_tax\": 0,\n        \"handling_cost_ex_tax\": 0,\n        \"coupon_discounts\": [],\n        \"discounts\": [],\n        \"line_item_ids\": [\n          \"67642f07-49d1-4501-8b7d-2e589aec34b8\"\n        ],\n        \"selected_shipping_option\": {\n          \"id\": \"4dcbf24f457dd67d5f89bcf374e0bc9b\",\n          \"type\": \"freeshipping\",\n          \"description\": \"Free Shipping\",\n          \"image_url\": \"\",\n          \"cost\": 0,\n          \"transit_time\": \"\",\n          \"additional_description\": \"\"\n        },\n        \"shipping_address\": {\n          \"first_name\": \"Jane\",\n          \"last_name\": \"Doe\",\n          \"email\": \"jane.doe@bigcommerce.com\",\n          \"company\": \"Acme Inc\",\n          \"address1\": \"2808 Skyway Cir\",\n          \"address2\": \"\",\n          \"city\": \"Austin\",\n          \"state_or_province\": \"Texas\",\n          \"state_or_province_code\": \"TX\",\n          \"country\": \"United States\",\n          \"country_code\": \"US\",\n          \"postal_code\": \"78704\",\n          \"phone\": \"0410123456\",\n          \"custom_fields\": []\n        }\n      }\n    ]\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Consignment from Pickup to Shipping in BigCommerce Checkout API\nDESCRIPTION: This snippet shows how to update a consignment from pickup to shipping. It includes the request to update the consignment with shipping address details and the response showing the updated consignment with available shipping options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/checkout.mdx#2025-04-16_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/checkouts/{{checkout_id}}/consignments/{{consignment_id}}?include=consignments.available_shipping_options\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"shipping_address\": {\n    \"first_name\": \"abc1\",\n    \"last_name\": \"abc1\",\n    \"company\": \"a\",\n    \"email\": \"abc1@bigcommerce.com\",\n    \"phone\": \"0410123456\",\n    \"address1\": \"2808 Skyway Cir\",\n    \"address2\": \"\",\n    \"city\": \"Austin\",\n    \"country_code\": \"US\",\n    \"state_or_province\": \"\",\n    \"state_or_province_code\": \"TX\",\n    \"postal_code\": \"78704\",\n    \"custom_fields\": []\n  },\n  \"line_items\": [\n    {\n      \"item_id\": \"67642f07-49d1-4501-8b7d-2e589aec34b8\",\n      \"quantity\": 1\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    ...\n    \"consignments\": [\n      {\n        \"id\": \"6218019d81754\",\n        \"shipping_cost_inc_tax\": 0,\n        \"shipping_cost_ex_tax\": 0,\n        \"handling_cost_inc_tax\": 0,\n        \"handling_cost_ex_tax\": 0,\n        \"coupon_discounts\": [],\n        \"discounts\": [],\n        \"line_item_ids\": [\n          \"67642f07-49d1-4501-8b7d-2e589aec34b8\"\n        ],\n        \"shipping_address\": {\n          \"first_name\": \"abc1\",\n          \"last_name\": \"abc1\",\n          \"email\": \"abc1@bigcommerce.com\",\n          \"company\": \"a\",\n          \"address1\": \"2808 Skyway Cir\",\n          \"address2\": \"\",\n          \"city\": \"Austin\",\n          \"state_or_province\": \"Texas\",\n          \"state_or_province_code\": \"TX\",\n          \"country\": \"United States\",\n          \"country_code\": \"US\",\n          \"postal_code\": \"78704\",\n          \"phone\": \"0410123456\",\n          \"custom_fields\": []\n        },\n        \"available_shipping_options\": [\n          {\n            \"id\": \"4dcbf24f457dd67d5f89bcf374e0bc9b\",\n            \"type\": \"freeshipping\",\n            \"description\": \"Free Shipping\",\n            \"image_url\": \"\",\n            \"cost\": 0,\n            \"transit_time\": \"\",\n            \"additional_description\": \"\"\n          }\n        ]\n      }\n    ]\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BigDesign Form Components in TypeScript\nDESCRIPTION: Imports required components from BigDesign library and React hooks for form implementation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button, Checkbox, Flex, FormGroup, Input, Panel, Select, Form as StyledForm, Textarea } from '@bigcommerce/big-design';\nimport { ChangeEvent, FormEvent, useState } from 'react';\nimport { FormData, StringKeyValue } from '../types';\n```\n\n----------------------------------------\n\nTITLE: Getting Pickup Methods via REST API\nDESCRIPTION: HTTP GET request to retrieve configured pickup methods for a store location, showing available pickup options and their details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{store_hash}}/v3/pickup/methods\nX-Auth-Token: {{access_token}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email Templates via BigCommerce API\nDESCRIPTION: This HTTP request demonstrates how to get a list of email templates using the BigCommerce API. It requires authentication and accepts JSON responses.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/emails/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/marketing/email-templates\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Using Handlebars Partial Blocks in Stencil\nDESCRIPTION: Example of using Handlebars partial blocks to create reusable templates with dynamic content. It demonstrates how to define and use partial blocks for creating a list structure.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/dynamic-rendering.mdx#2025-04-16_snippet_2\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#> components/ul }}\n    {{> components/li text=\"Item 1\" link=\"item_link_1\"}}\n    {{> components/li text=\"Item 2\" link=\"item_link_2\"}}\n    {{> components/li text=\"Item 3\" link=\"item_link_3\"}}\n{{/components/ul}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<ul>\n    {{> @partial-block }}\n</ul>\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<li>\n    <a href=\"{{link}}\">{{text}}</a>\n</li>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n    <li>\n       <a href=\"item_link_1\">Item 1</a>\n    </li>\n    <li>\n       <a href=\"item_link_2\">Item 2</a>\n    </li>\n    <li>\n       <a href=\"item_link_3\">Item 3</a>\n    </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Updating App Extension Properties\nDESCRIPTION: GraphQL mutation to update an existing App Extension's URL and label properties. Note that changes to labels are complete overwrites, not updates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/app-extensions/guide.mdx#2025-04-16_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation AppExtension($input: UpdateAppExtensionInput!) {\n  appExtension {\n    updateAppExtension(input: $input) {\n      appExtension {\n        id\n        url\n        label {\n          defaultValue\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"id\": \"bc/store/appExtension/2\",\n    \"data\": {\n      \"url\": \"/interactions/customers/${id}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Tax Zones via BigCommerce API\nDESCRIPTION: PUT request to modify existing tax zone settings including enabling/disabling zones, updating price display settings and customer group targeting.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/tax-rates-zones.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/tax/zones\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"id\": 2,\n    \"enabled\": false,\n    \"price_display_settings\": {\n      \"show_inclusive\": false,\n      \"show_both_on_detail_view\": false,\n      \"show_both_on_list_view\": false\n    },\n    \"shopper_target_settings\": {\n      \"customer_groups\": [\n        2\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Variant Option Values using the options Field in BigCommerce\nDESCRIPTION: Alternative GraphQL query that uses the 'options' field to retrieve variant option values for a specific variant. This approach provides a simpler way to access option values associated with a variant compared to using productOptions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/variants.mdx#2025-04-16_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    product(entityId: 113) {\n      variants(entityIds: [127]) {\n        edges {\n          node {\n            options (first: 2) {\n              edges {\n                node {\n                  entityId\n                  displayName\n                  isRequired\n                  values {\n                    edges {\n                      node {\n                        entityId\n                        label\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Customer Group Pricing\nDESCRIPTION: Example JSON response from the pricing API showing the detailed pricing structure returned for a product. It includes various price types like retail price, sale price, and bulk pricing options specific to a customer group.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/customers.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"product_id\": 1,\n      \"variant_id\": 1,\n      \"options\": [...],\n      \"retail_price\": {\n        \"as_entered\": 1.5,\n        \"entered_inclusive\": true,\n        \"tax_exclusive\": 1.1,\n        \"tax_inclusive\": 1.5\n      },\n      \"sale_price\": {...},\n      \"minimum_advertised_price\": {...},\n      \"price\": {...},\n      \"calculated_price\": {...},\n      \"price_range\": {...},\n      \"retail_price_range\": {...},\n      \"bulk_pricing\": [...]\n    }\n  ],\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Available Pickup Options with REST Storefront API\nDESCRIPTION: This snippet demonstrates how to use the REST Storefront API to find available pickup options with stock. It includes both the request and response examples for the 'Find available pickup options' endpoint.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/shopping.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://{{yourstore.example.com}}/api/storefront/pickup-options\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"searchArea\": {\n    \"radius\": {\n      \"value\": 25,\n      \"unit\": \"MI\"\n    },\n    \"coordinates\": {\n      \"latitude\": 32.8058616,\n      \"longitude\": -98.0105544\n    }\n  },\n  \"items\": [\n    {\n      \"variantId\": 1,\n      \"quantity\": 1\n    },\n    {\n      \"variantId\": 2,\n      \"quantity\": 2\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"pickupOptions\": [\n        {\n          \"pickupMethod\": {\n            \"id\": 1,\n            \"locationId\": 1,\n            \"displayName\": \"Office Pickup\",\n            \"collectionInstructions\": \"Bring your ID\",\n            \"collectionTimeDescription\": \"Collect during our opening hours of 0900 - 1700\"\n          },\n          \"availableItems\": [\n            {\n              \"variantId\": 1,\n              \"quantity\": 1\n            },\n            {\n              \"variantId\": 2,\n              \"quantity\": 2\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"pickupOptions\": [\n        {\n          \"pickupMethod\": {\n            \"id\": 2,\n            \"locationId\": 2,\n            \"displayName\": \"Pickup method 2\",\n            \"collectionInstructions\": \"Instructions\",\n            \"collectionTimeDescription\": \"Desc\"\n          },\n          \"availableItems\": [\n            {\n              \"variantId\": 1,\n              \"quantity\": 1\n            },\n            {\n              \"variantId\": 2,\n              \"quantity\": 2\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Translation JSON with langJson Helper\nDESCRIPTION: Helper that returns language translation keys as a JSON string for specified key filters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_46\n\nLANGUAGE: handlebars\nCODE:\n```\n{{langJson keyFilter}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{langJson 'validation_messages'}}\n<!-- This will load validation messages in JSON format for the storefront locale/language. -->\n```\n\n----------------------------------------\n\nTITLE: Out of Stock Products Response\nDESCRIPTION: JSON response example when out-of-stock products are hidden in store settings, showing only in-stock products.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/inventory/queries.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"products\": {\n        \"edges\": [\n          {\n            \"node\": {\n              \"entityId\": 113,\n              \"name\": \"Example Product 1\",\n              \"inventory\": {\n                \"aggregated\": {\n                  \"availableToSell\": 20,\n                  \"warningLevel\": 5\n                }\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Product with Text Modifier to Cart in REST Storefront API\nDESCRIPTION: This example shows how to add a product with a text field modifier to a cart using the REST Storefront API. The optionId and optionValue parameters are used instead of variant_id when adding products with modifiers.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-management.mdx#2025-04-16_snippet_11\n\nLANGUAGE: http\nCODE:\n```\n{\n  \"lineItems\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 1001,\n      \"optionSelections\": [\n        {\n          \"optionId\": 123,\n          \"optionValue\": \"Hello!\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Buy One Get One Free Promotion with Condition in JSON\nDESCRIPTION: This JSON snippet demonstrates the basic structure of a Buy One Get One Free promotion, including the action to add a free item and the condition to check for a minimum quantity in the cart.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy One Get One Free\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"gift_item\": {\n          \"product_id\": 174,\n          \"quantity\": 1\n        }\n      },\n      \"apply_once\": false,\n      \"stop\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"products\": [\n              174\n            ]\n          },\n          \"minimum_quantity\": 1\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Pre-order Settings Globally in BigCommerce GraphQL\nDESCRIPTION: This mutation sets a product's pre-order settings at the global store level. It specifies a pre-order message that will be displayed for products not yet available for purchase.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-attributes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($input: SetProductPreOrderSettingsInput!) {\n  product {\n    setProductPreOrderSettings (input: $input) {\n      product {\n        preOrderSettings {\n          message\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"data\": {\n      \"message\": \"Product will be released soon\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Product Variant Options for a Locale in BigCommerce GraphQL\nDESCRIPTION: This GraphQL mutation sets product variant option information for a specific locale within a storefront channel. It allows overriding global store information by setting the name and values for existing variant options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-variant-options.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json      \n\nmutation ($input: SetProductOptionsInformationInput!) {\n  product {\n    setProductOptionsInformation (input: $input) {\n      product {\n        id\n        options (first: 2) {\n          edges {\n            node {\n              id\n              overridesForLocale(\n                localeContext: {\n                  channelId: \"bc/store/channel/2\",\n                  locale: \"uk\"\n                }\n              ) {\n                displayName\n                values {\n                  id\n                  label\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"localeContext\": {\n      \"channelId\": \"bc/store/channel/2\",\n      \"locale\": \"uk\"\n    },\n    \"data\": {\n      \"options\": [\n        {\n          \"optionId\": \"bc/store/productOption/108\",\n          \"data\": {\n            \"dropdown\": {\n              \"displayName\": \"Size UK\",\n              \"values\": [\n                {\n                  \"valueId\": \"bc/store/productOptionValue/68\",\n                  \"label\": \"Small UK\"\n                },\n                {\n                  \"valueId\": \"bc/store/productOptionValue/69\",\n                  \"label\": \"Medium UK\"\n                },\n                {\n                  \"valueId\": \"bc/store/productOptionValue/70\",\n                  \"label\": \"Large UK\"\n                } \n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Products from BigCommerce for Export to External Channels\nDESCRIPTION: This code demonstrates how to export catalog data from BigCommerce to an external channel by retrieving all products and their variants with a GET request. Filters and pagination can be used to manage large catalogs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/guide/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products?include=variants\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Deleting a Locale with GraphQL Mutation\nDESCRIPTION: This GraphQL mutation deletes a locale from a specified channel. It requires the channel ID and locale code, and returns the deleted locale code along with any errors encountered during the operation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/settings/locales.mdx#2025-04-16_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  locale {\n     deleteLocale(input: {\n        channelId: \"bc/store/channel/1\",\n        code: \"fr\",\n        }) {\n              code\n              errors {\n                  ... on Error {\n                  message\n                        }\n                    }\n                }\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Creating Widget Placement with Region in BigCommerce\nDESCRIPTION: Example JSON payload for creating a widget placement with a specified region and sort order on a category page. Demonstrates proper placement configuration with region, entity_id, and sort_order properties.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"widget_uuid\": \"2dfeb50e-5f8c-4df2-8525-a338091eed32\",\n  \"entity_id\": \"21\",\n  \"sort_order\": 1,\n  \"region\": \"header_bottom\",\n  \"template_file\": \"pages/category\",\n  \"status\": \"active\"\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Navigation Rendering with if Helper in Handlebars\nDESCRIPTION: Example using the if helper to conditionally render different navigation items based on the page type, showing either an active link or static text.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_65\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if page_type '===' 'account_order'}}\n    <li class=\"navBar-item is-active\">\n        <a class=\"navBar-action\" href=\"{{urls.account.orders.all}}\">{{lang 'account.nav.orders'}}</a>\n    </li>\n{{else}}\n    <li class=\"navBar-item is-active\">{{lang 'account.nav.orders'}}</li>\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Create Widget Template API Request\nDESCRIPTION: HTTP POST request to create a widget template with internationalized settings including design controls for line properties and alignment.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/localization.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /stores/{{store_hash}}/v3/content/widget-templates\nHost: api.bigcommerce.com\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"name\": \"Translated Text Widget\",\n  \"schema\": [\n {\n   \"type\": \"tab\",\n   \"label\": \"Design\",\n   \"sections\": [\n     {\n       \"settings\": [\n         {\n           \"type\": \"color\",\n           \"label\": \"i18n.LineColor\",\n           \"id\": \"color\",\n           \"default\": \"rgba(180, 186, 209, 1)\"\n         },\n         {\n           \"type\": \"select\",\n           \"label\": \"i18n.LineStyle\",\n           \"id\": \"style\",\n           \"default\": \"solid\",\n           \"typeMeta\": {\n             \"selectOptions\" : [\n               {\n                 \"label\": \"Solid\",\n                 \"value\": \"solid\"\n               },\n               {\n                 \"label\": \"Dashed\",\n                 \"value\": \"dashed\"\n               },\n               {\n                 \"label\": \"Dotted\",\n                 \"value\": \"dotted\"\n               }\n             ]\n           }\n         },\n         {\n          \"type\": \"range\",\n           \"label\": \"i18n.LineWidth\",\n           \"id\": \"width\",\n           \"default\": 100,\n           \"typeMeta\": {\n             \"rangeValues\": {\n               \"min\": 1,\n               \"max\": 100,\n               \"step\": 1,\n               \"unit\": \"%\"\n             }\n           }\n         },\n         {\n          \"type\": \"range\",\n           \"label\": \"i18n.LineThickness\",\n           \"id\": \"thickness\",\n           \"default\": 1,\n           \"typeMeta\": {\n             \"rangeValues\": {\n               \"min\": 1,\n               \"max\": 10,\n               \"step\": 1,\n               \"unit\": \"px\"\n             }\n           }\n         },\n         {\n           \"type\": \"alignment\",\n           \"label\": \"i18n.Alignment\",\n           \"id\": \"alignment\",\n           \"default\": {\n             \"horizontal\": \"center\",\n             \"vertical\": \"middle\"\n           },\n           \"typeMeta\": {\n             \"display\": \"both\"\n           }\n         }\n       ]\n     }\n   ]\n }\n],\n  \"schema_translations\": \"{\n \\\"i18n.LineColor\\\": {\n   \\\"default\\\": \\\"Line color\\\",\n   \\\"fr-FR\\\": \\\"Couleur de la ligne\\\",\n   \\\"en\\\": \\\"Line color\\\",\n   \\\"zh-CN\\\": \\\"线条颜色\\\"\n },\n \\\"i18n.LineStyle\\\": {\n   \\\"default\\\": \\\"Line style\\\",\n   \\\"fr-FR\\\": \\\"Style de ligne\\\",\n   \\\"en\\\": \\\"Line style\\\",\n   \\\"zh-CN\\\": \\\"线型\\\"\n },\n \\\"i18n.LineWidth\\\": {\n   \\\"default\\\": \\\"Line width\\\",\n   \\\"fr-FR\\\": \\\"Largeur de ligne\\\",\n   \\\"en\\\": \\\"Line width\\\",\n   \\\"zh-CN\\\": \\\"行宽\\\"\n },\n \\\"i18n.LineThickness\\\": {\n   \\\"default\\\": \\\"Line Thickness\\\",\n   \\\"fr-FR\\\": \\\"Épaisseur de ligne\\\",\n   \\\"en\\\": \\\"Line Thickness\\\",\n   \\\"zh-CN\\\": \\\"线的粗细\\\"\n },\n \\\"i18n.Alignment\\\": {\n   \\\"default\\\": \\\"Alignment\\\",\n   \\\"fr-FR\\\": \\\"Alignement\\\",\n   \\\"en\\\": \\\"Alignment\\\",\n   \\\"zh-CN\\\": \\\"结盟\\\"\n }\n}\",\n  \"template\": \"<h1>{{textContent}}</h1>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Product Tax Properties in BigCommerce\nDESCRIPTION: JSON response structure when retrieving product tax properties, showing tax properties like alcohol percentage and net volume for multiple products. The response includes pagination metadata for navigating through results.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/tax-properties.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"product_id\": 113,\n      \"tax_properties\": {\n        \"alcohol-percentage\": \"4.9\",\n        \"netvolume-milliliters\": \"400\"\n      }\n    },\n    {\n      \"product_id\": 117,\n      \"tax_properties\": {\n        \"alcohol-percentage\": \"10\",\n        \"netvolume-milliliters\": \"200\"\n      }\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"total\": 2,\n      \"count\": 2,\n      \"per_page\": 50,\n      \"current_page\": 1,\n      \"total_pages\": 1,\n      \"links\": {\n        \"current\": \"?product_id%3Ain=113%2C117&page=1&limit=50\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Tabindex for Keyboard Accessibility in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates setting the `tabindex` attribute to make elements accessible via the keyboard. This attribute allows users to navigate webpages using the `Tab` key, crucial for accessibility. The code sets a `tabindex` of 0, making elements focusable, and assumes integration into broader keyboard navigation testing practices.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/accessibility/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\na.setAttribute(\"tabindex\",\"0\")\n```\n\n----------------------------------------\n\nTITLE: Example Response for Rendered Regions\nDESCRIPTION: JSON response demonstrating the structure of rendered regions, including page path, region names, and detailed HTML content for widgets\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/site-content.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"content\": {\n        \"pages\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"path\": \"/shipping-returns/\",\n                \"renderedRegions\": {\n                  \"regions\": [\n                    {\n                      \"name\": \"header_below_nav--global\",\n                      \"html\": \"<div data-layout-id=\\\"10261eed-02ac-4110-9166-faf03b27c776\\\">...\"\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unified Billing API Postman Collection Definition in JSON\nDESCRIPTION: A complete Postman collection for BigCommerce's Unified Billing API. This collection includes GraphQL operations for querying checkout details, listing subscriptions, creating checkouts, updating subscriptions, and canceling subscriptions. Each request includes the necessary headers, GraphQL queries, and variable templates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/postman-collection.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"info\": {\n\t\t\"_postman_id\": \"9ae83029-8429-4cac-944e-630a27a99f52\",\n\t\t\"name\": \"Unified Billing API\",\n\t\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\",\n\t\t\"_exporter_id\": \"12045254\"\n\t},\n\t\"item\": [\n\t\t{\n\t\t\t\"name\": \"Checkout Query\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"X-Auth-Token\",\n\t\t\t\t\t\t\"value\": \"{{token}}\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Accept\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"graphql\",\n\t\t\t\t\t\"graphql\": {\n\t\t\t\t\t\t\"query\": \"query q1($id: ID!) {\\n  account {\\n    checkout(id: $id) {\\n      id\\n      accountId\\n      status\\n      checkoutUrl\\n      items {\\n        edges {\\n          node {\\n            subscriptionId\\n            status\\n            product {\\n              id\\n              type\\n            }\\n            scope {\\n              id\\n              type\\n            }\\n            pricingPlan {\\n              interval\\n              price {\\n                value\\n                currencyCode\\n              }\\n              trialDays\\n            }\\n            redirectUrl\\n            description\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\n\t\t\t\t\t\t\"variables\": \"{\\n    \\\"id\\\": \\\"bc/account/checkout/{{checkout_id}}\\\"\\n}\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"https://{{environment}}/accounts/{{partner_account_uuid}}/graphql\",\n\t\t\t\t\t\"protocol\": \"https\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{environment}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"accounts\",\n\t\t\t\t\t\t\"{{partner_account_uuid}}\",\n\t\t\t\t\t\t\"graphql\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Subscriptions Query\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"X-Auth-Token\",\n\t\t\t\t\t\t\"value\": \"{{token}}\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Accept\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"graphql\",\n\t\t\t\t\t\"graphql\": {\n\t\t\t\t\t\t\"query\": \"query ($filters: SubscriptionFiltersInput) {\\n  account {\\n    subscriptions(filters: $filters) {\\n      pageInfo {\\n        hasNextPage\\n        hasPreviousPage\\n        startCursor\\n        endCursor\\n      }\\n      edges {\\n        cursor\\n        node {\\n          id\\n          accountId\\n          activationDate\\n          billingInterval\\n          currentPeriodEnd\\n          pricePerInterval {\\n            value\\n            currencyCode\\n          }\\n          product {\\n            productLevel\\n            id\\n            type\\n          }\\n          scope {\\n            type\\n            id\\n          }\\n          status\\n          createdAt\\n          updatedAt\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\n\t\t\t\t\t\t\"variables\": \"{\\n    \\\"filters\\\": {\\n       \\\"ids\\\": [\\\"bc/account/subscription/{{subscription_id}}\\\"],\\n       \\\"productId\\\": \\\"bc/account/product/{{application_id}}\\\",\\n       \\\"productType\\\": \\\"APPLICATION\\\",\\n       \\\"updatedAfter\\\": \\\"2024-10-21T11:00:00Z\\\",\\n       \\\"status\\\": \\\"ACTIVE\\\"\\n    }\\n}\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"https://{{environment}}/accounts/{{partner_account_uuid}}/graphql\",\n\t\t\t\t\t\"protocol\": \"https\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{environment}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"accounts\",\n\t\t\t\t\t\t\"{{partner_account_uuid}}\",\n\t\t\t\t\t\t\"graphql\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Create Checkout\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"X-Auth-Token\",\n\t\t\t\t\t\t\"value\": \"{{token}}\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Accept\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"graphql\",\n\t\t\t\t\t\"graphql\": {\n\t\t\t\t\t\t\"query\": \"mutation ($checkout: CreateCheckoutInput!) {\\n  checkout {\\n    createCheckout(input: $checkout) {\\n      checkout {\\n        id\\n        accountId\\n        status\\n        checkoutUrl\\n        items(first: 1) {\\n          edges {\\n            node {\\n              subscriptionId\\n              status\\n              product {\\n                id\\n                type\\n                productLevel\\n              }\\n              scope {\\n                id\\n                type\\n              }\\n              pricingPlan {\\n                interval\\n                price {\\n                  value\\n                  currencyCode\\n                }\\n                trialDays\\n              }\\n              redirectUrl\\n              description\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\n\t\t\t\t\t\t\"variables\": \"{\\n    \\\"checkout\\\": {\\n        \\\"accountId\\\": \\\"bc/account/account/{{merchant_account_uuid}}\\\",\\n        \\\"items\\\": [\\n            {\\n                \\\"product\\\": {\\n                    \\\"type\\\": \\\"APPLICATION\\\",\\n                    \\\"id\\\": \\\"bc/account/product/{{application_id}}\\\",\\n                    \\\"productLevel\\\": \\\"Standard Plan\\\"\\n                },\\n                \\\"scope\\\": {\\n                    \\\"type\\\": \\\"STORE\\\",\\n                    \\\"id\\\": \\\"bc/account/scope/{{store_hash}}\\\"\\n                },\\n                \\\"description\\\": \\\"App Name\\\",\\n                \\\"pricingPlan\\\": {\\n                    \\\"interval\\\": \\\"MONTH\\\",\\n                     \\\"price\\\": {\\n                         \\\"value\\\": 3.99,\\n                         \\\"currencyCode\\\": \\\"USD\\\"\\n                    }\\n                },\\n        \\\"redirectUrl\\\": \\\"myapp.com\\\"\\n        }\\n        ]\\n    }\\n}\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"https://{{environment}}/accounts/{{partner_account_uuid}}/graphql\",\n\t\t\t\t\t\"protocol\": \"https\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{environment}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"accounts\",\n\t\t\t\t\t\t\"{{partner_account_uuid}}\",\n\t\t\t\t\t\t\"graphql\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Update Subscription\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"X-Auth-Token\",\n\t\t\t\t\t\t\"value\": \"{{token}}\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Accept\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"graphql\",\n\t\t\t\t\t\"graphql\": {\n\t\t\t\t\t\t\"query\": \"mutation ($checkout: CreateCheckoutInput!) {\\n  checkout {\\n    createCheckout(input: $checkout) {\\n      checkout {\\n        id\\n        accountId\\n        status\\n        checkoutUrl\\n        items(first: 1) {\\n          edges {\\n            node {\\n              subscriptionId\\n              status\\n              product {\\n                id\\n                type\\n                productLevel\\n              }\\n              scope {\\n                id\\n                type\\n              }\\n              pricingPlan {\\n                interval\\n                price {\\n                  value\\n                  currencyCode\\n                }\\n                trialDays\\n              }\\n              redirectUrl\\n              description\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\n\t\t\t\t\t\t\"variables\": \"{\\n    \\\"checkout\\\": {\\n        \\\"accountId\\\": \\\"bc/account/account/{{merchant_account_uuid}}\\\",\\n        \\\"items\\\": [\\n            {\\n                \\\"subscriptionId\\\": \\\"bc/account/subscription/{{subscription_id}}\\\",\\n                \\\"product\\\": {\\n                    \\\"productLevel\\\": \\\"Premium Plan\\\"\\n                },\\n                \\\"description\\\": \\\"App Name\\\",\\n                \\\"pricingPlan\\\": {\\n                    \\\"interval\\\": \\\"ANNUAL\\\",\\n                     \\\"price\\\": {\\n                         \\\"value\\\": 49.99,\\n                         \\\"currencyCode\\\": \\\"USD\\\"\\n                    }\\n                },\\n        \\\"redirectUrl\\\": \\\"myapp.com\\\"\\n        }\\n        ]\\n    }\\n}\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"https://{{environment}}/accounts/{{partner_account_uuid}}/graphql\",\n\t\t\t\t\t\"protocol\": \"https\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{environment}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"accounts\",\n\t\t\t\t\t\t\"{{partner_account_uuid}}\",\n\t\t\t\t\t\t\"graphql\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Cancel Subscription\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"X-Auth-Token\",\n\t\t\t\t\t\t\"value\": \"{{token}}\",\n\t\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Accept\",\n\t\t\t\t\t\t\"value\": \"application/json\",\n\t\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"graphql\",\n\t\t\t\t\t\"graphql\": {\n\t\t\t\t\t\t\"query\": \"mutation ($subscription: CancelSubscriptionInput!) {\\n  subscription {\\n    cancelSubscription(input: $subscription) {\\n      subscriptionId\\n      cancelledAt\\n    }\\n  }\\n}\\n\",\n\t\t\t\t\t\t\"variables\": \"{\\n  \\\"subscription\\\": {\\n    \\\"id\\\": \\\"bc/account/subscription/{{subscription_id}}\\\"\\n  }\\n}\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"https://{{environment}}/accounts/{{partner_account_uuid}}/graphql\",\n\t\t\t\t\t\"protocol\": \"https\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{environment}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"accounts\",\n\t\t\t\t\t\t\"{{partner_account_uuid}}\",\n\t\t\t\t\t\t\"graphql\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Product Query Response Example\nDESCRIPTION: The response from a product query showing detailed information about a computer product including its ID, name, SKU, description, and price in USD.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/graphql-storefront.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\n  {\n    \"data\": {\n        \"site\": {\n            \"product\": {\n                \"id\": \"UHJvZHVjdDoxNTk=\",\n                \"entityId\": 159,\n                \"name\": \"computer\",\n                \"sku\": \"CMP-1-223\",\n                \"description\": \"<p><span>High speed Computer</span></p>\",\n                \"prices\": {\n                    \"price\": {\n                        \"value\": 739.03,\n                        \"currencyCode\": \"USD\"\n                    }\n                }\n            }\n        }\n    }\n}   \n```\n\n----------------------------------------\n\nTITLE: Getting Customer Storefront AuthToken using BigCommerce REST API\nDESCRIPTION: Makes a POST request to BigCommerce's B2B API endpoint to obtain a storefront authentication token for a specific customer. Requires store hash, customer email, password, channel ID, and optional token name.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/b2b-edition/authentication/headless-auth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api-b2b.bigcommerce.com/api/io/auth/customers\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"storeHash\": \"theStoreHash\",\n  \"email\": \"bigCommerceCustomerEmail\",\n  \"password\": \"bigCommerceCustomerPassword\",\n  \"channelId\": 1,\n  \"name\": \"optionalTokenName\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Product Response - V3 Catalog API\nDESCRIPTION: Example response from the V3 Catalog API GET /v3/catalog/products/{product_id} endpoint showing product details in the V3 format.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"availability\": \"available\",\n    \"availability_description\": \"\",\n    \"base_variant_id\": null,\n    \"bin_picking_number\": \"\",\n    \"brand_id\": 0,\n    \"calculated_price\": 49,\n    \"categories\": [\n      23\n    ],\n    \"condition\": \"New\",\n    \"cost_price\": 0,\n    \"custom_url\": {\n      \"is_customized\": false,\n      \"url\": \"/fog-linen-chambray-towel-beige-stripe/\"\n    },\n    \"date_created\": \"2015-07-03T17:57:10+00:00\",\n    \"date_modified\": \"2020-04-24T19:56:35+00:00\",\n    \"depth\": 0,\n    \"description\": \"<p>The perfect beach towel: thin, lightweight and highly absorbent. Crafted by Fog Linen in Japan using soft Lithuanian linen, each towel rolls up for compact stowaway. Dry off after a refreshing dip in the ocean and stretch out on it for a sun bath. The thinness ensures a quick dry so you can have it rolled back up in your bag without soaking your belongings.</p>\\r\\n<p>Measures 75 x 145 cm/29.5 x 57 in</p>\\r\\n<p>100% Linen</p>\"\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Delivery Exception Webhook Payload in JSON\nDESCRIPTION: This snippet demonstrates the payload structure for the store/hook/deliveryException webhook event. It includes the webhook ID, error code, and a message describing the delivery exception.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/hook/deliveryException\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"webhook\",\n    \"id\": 123, // ID of the webhook\n    \"error_code\": 90001, // some error code for type of failure? retry vs deactivation, etc\n    \"message\": \"Non-200 response received when delivering to https://app.com/bc/webhook, will retry\"\n  },\n  \"hash\": \"e0c298b8097a6a2f39d17e593a9b360f5b2fef7d\",\n  \"created_at\": 1561482670,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Buy-One-Get-One-Free Promotion in BigCommerce (JSON)\nDESCRIPTION: This snippet demonstrates how to create a buy-one-get-one-free promotion for specific product variants. It includes rules for triggering the free item and notification settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/product.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy X product variant and get X product variant free\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"gift_item\": {\n          \"variant_id\": 151,\n          \"quantity\": 1\n        }\n      },\n      \"apply_once\": false,\n      \"stop\": false,\n      \"currency_code\": \"GBP\",\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"variants\": [\n              139\n            ]\n          },\n          \"minimum_quantity\": 2\n        }\n      }\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"<div>&nbsp;</div>\\r\\n<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"<div>&nbsp;</div>\\r\\n<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"<div>&nbsp;</div>\\r\\n<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ],\n  \"stop\": false,\n  \"status\": \"ENABLED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Route Payload Object in JSON\nDESCRIPTION: This JSON object illustrates the payload structure for route-related webhook events. It contains store ID, producer, creation timestamp, scope, site ID, and a hash value.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\": \"11111\",\n \"producer\": \"stores/abcde\",\n \"created_at\": 1641641646,\n \"scope\": \"store/channel/1/settings/route/updated\",\n \"data\": {\n    \"site_id\": 1000\n  },\n \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customer Wishlists Handlebars Expression\nDESCRIPTION: Array of product wishlists specific to the current customer and store, including wishlist metadata and URLs for viewing, editing, deleting and sharing.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_9\n\nLANGUAGE: handlebars\nCODE:\n```\n{{customer.wishlists}}\n```\n\n----------------------------------------\n\nTITLE: Example Category API Request and Response\nDESCRIPTION: Shows a complete API request and response example for retrieving a category, including the HTTP GET request and the full JSON response structure with category details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/about/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/categories/{{category_id}}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 39,\n    \"parent_id\": 19,\n    \"name\": \"Bath\",\n    \"description\": \"\",\n    \"views\": 0,\n    \"sort_order\": 0,\n    \"page_title\": \"\",\n    \"meta_keywords\": [\n      \"\"\n    ],\n    \"meta_description\": \"\",\n    \"layout_file\": \"category.html\",\n    \"image_url\": \"\",\n    \"is_visible\": true,\n    \"search_keywords\": \"\",\n    \"default_product_sort\": \"use_store_settings\",\n    \"custom_url\": {\n      \"url\": \"/garden/bath/\",\n      \"is_customized\": false\n    }\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Tax Rates via BigCommerce API\nDESCRIPTION: Deletes tax rates by sending a DELETE request. Specify tax rate IDs to delete using the id:in query parameter. Returns 204 No Content on success.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/tax-rates-zones.mdx#2025-04-16_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nDELETE https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/tax/rates?id:in=3,5\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP 204 No content\n```\n\n----------------------------------------\n\nTITLE: Implementing Uninstall Endpoint in TypeScript\nDESCRIPTION: Manages app uninstallation by verifying the request and removing the session data.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { getBCVerify, removeSession } from '../../lib/auth';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function uninstall(req: NextApiRequest, res: NextApiResponse) {\n    try {\n        const session = await getBCVerify(req.query);\n\n        await removeSession(res, session);\n        res.status(200).end();\n    } catch (error) {\n        const { message, response } = error;\n        res.status(response?.status || 500).json(message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Action-Only Promotion\nDESCRIPTION: JSON request to create an automatic promotion with brand-specific discount, without additional conditions or requirements.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/index.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"10% off Fog Linen Work\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n             \"percentage_amount\": \"10\"\n          },\n          \"items\": {\n            \"brands\": [\n              40\n            ]\n          }\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": false\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"<div>&nbsp;Get 10% off All Linen Fog Work.</div>\\r\\n<div>&nbsp;</div>\",\n      \"locations\": [\n        \"HOME_PAGE\",\n        \"PRODUCT_PAGE\",\n        \"CART_PAGE\",\n        \"CHECKOUT_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"<div>You are eligible for 10% off Linen Fog Work.</div>\\r\\n<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"<div>&nbsp;Congratulations! You saved 10% on Linen Fog Work.&nbsp; %</div>\\r\\n<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ],\n  \"stop\": false,\n  \"max_uses\": 200,\n  \"start_date\": \"2019-02-07T05:00:00+00:00\",\n  \"end_date\": \"2019-02-14T04:59:59+00:00\",\n  \"status\": \"ENABLED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Size Variant Option with HTTP POST\nDESCRIPTION: This request creates a size variant option for a product using the BigCommerce Catalog API. It defines three size options (S, M, L) with M as the default.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/index.mdx#2025-04-16_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/{{product_id}}/options\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"product_id\": 134,\n  \"name\": \"Size Rectangle\",\n  \"display_name\": \"Size\",\n  \"type\": \"rectangles\",\n  \"option_values\": [\n    {\n      \"label\": \"S\",\n      \"sort_order\": 0,\n      \"is_default\": false\n    },\n    {\n      \"label\": \"M\",\n      \"sort_order\": 1,\n      \"is_default\": true\n    },\n    {\n      \"label\": \"L\",\n      \"sort_order\": 2,\n      \"is_default\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Add Product Image - V3 Catalog API\nDESCRIPTION: Example request to add an image to a product using the V3 Catalog API POST /v3/catalog/products/{product_id}/images endpoint.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"is_thumbnail\": true,\n  \"sort_order\": 1,\n  \"description\": \"Top View\",\n  \"image_url\": \"https://upload.wikimedia.org/wikipedia/commons/7/7f/Anglel_Bless_Legendary_Hills_1_m%C4%9Bs%C3%ADc_st%C3%A1%C5%99%C3%AD.jpg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Segments via POST Request\nDESCRIPTION: Creates new customer segments by sending a POST request to the segments endpoint. Requires segment name and description in the request body.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/segments/user-guide.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/segments\nX-Auth Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"name\": \"My Segment\",\n    \"description\": \"Segment description.\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using getImageSrcset Helper with Default Sizes\nDESCRIPTION: Shows how to use the getImageSrcset helper with default sizes parameter to generate a srcset string with pre-defined optimal sizes chosen by BigCommerce.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_53\n\nLANGUAGE: handlebars\nCODE:\n```\n{{getImageSrcset image use_default_sizes=true}}\n{{getImageSrcset image \"https://place-hold.it/500x300\" use_default_sizes=true}}\n```\n\n----------------------------------------\n\nTITLE: Creating Discount for Multiple Segment Membership\nDESCRIPTION: Example of creating a 10% discount for customers who belong to both segment 1 and segment 2. Uses the 'and' operator to require membership in multiple segments.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/customer.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"10% off for customers who belong to segment 1 and segment 2\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"customer\": {\n    \"segments\": {\n      \"and\": [\n        {\n          \"id\": [\"61fd72bc-7400-4a7b-ac64-96c0d315c464\"]\n        },\n        {\n          \"id\": [\"d52fb39d-6715-430e-a0bf-21a192d790f0\"]\n        }\n      ]\n    }\n  },\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_value\": {\n          \"discount\": {\n            \"percentage_amount\": \"10\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Cart Retrieval in BigCommerce\nDESCRIPTION: This JSON response shows the structure of data returned when querying a cart, containing details about a single physical item. It includes information about the cart's total value, currency code, item details, and timestamps for cart creation and updates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/graphql-storefront.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"cart\": {\n        \"entityId\": \"bb916deb-ddd6-4586-b65b-b8385e0e7a9d\",\n        \"currencyCode\": \"USD\",\n        \"isTaxIncluded\": false,\n        \"baseAmount\": {\n          \"currencyCode\": \"USD\",\n          \"value\": 25\n        },\n        \"discountedAmount\": {\n          \"currencyCode\": \"USD\",\n          \"value\": 0\n        },\n        \"amount\": {\n          \"currencyCode\": \"USD\",\n          \"value\": 25\n        },\n        \"discounts\": [\n          {\n            \"entityId\": \"50892aad-8e57-4a86-9668-c1f1ee493cff\",\n            \"discountedAmount\": {\n              \"currencyCode\": \"USD\",\n              \"value\": 0\n            }\n          }\n        ],\n        \"lineItems\": {\n          \"physicalItems\": [\n            {\n              \"entityId\": \"50892aad-8e57-4a86-9668-c1f1ee493cff\",\n              \"parentEntityId\": null,\n              \"variantEntityId\": 74,\n              \"productEntityId\": 111,\n              \"sku\": \"SM13\",\n              \"name\": \"[Sample] Smith Journal 13\",\n              \"path\": \"/{product-slug}/\",\n              \"imageUrl\": \"https://cdn11.bigcommerce.com/s-{store_hash}/products/111/images/300/journal.jpg\",\n              \"brand\": null,\n              \"quantity\": 1,\n              \"isTaxable\": true,\n              \"discounts\": [],\n              \"discountedAmount\": {\n                \"currencyCode\": \"USD\",\n                \"value\": 0\n              },\n              \"couponAmount\": {\n                \"currencyCode\": \"USD\",\n                \"value\": 0\n              },\n              \"listPrice\": {\n                \"currencyCode\": \"USD\",\n                \"value\": 25\n              },\n              \"originalPrice\": {\n                \"currencyCode\": \"USD\",\n                \"value\": 25\n              },\n              \"salePrice\": {\n                \"currencyCode\": \"USD\",\n                \"value\": 25\n              },\n              \"extendedListPrice\": {\n                \"currencyCode\": \"USD\",\n                \"value\": 25\n              },\n              \"extendedSalePrice\": {\n                \"currencyCode\": \"USD\",\n                \"value\": 25\n              },\n              \"isShippingRequired\": true,\n              \"selectedOptions\": [],\n              \"giftWrapping\": null\n            }\n          ],\n          \"digitalItems\": [],\n          \"giftCertificates\": [],\n          \"customItems\": [],\n          \"totalQuantity\": 1\n        },\n        \"createdAt\": {\n          \"utc\": \"2023-06-01T17:45:23Z\"\n        },\n        \"updatedAt\": {\n          \"utc\": \"2023-06-01T17:45:23Z\"\n        },\n        \"locale\": \"en\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GET Request to Retrieve Cart in BigCommerce REST Storefront API\nDESCRIPTION: This snippet demonstrates how to make a GET request to retrieve cart information, including line items and physical item options, using the REST Storefront API.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/index.mdx#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlet endpoint = {\n  route: \"/carts?include=lineItems.physicalItems.options\",\n  method: \"GET\",\n  accept: \"application/json\",\n  // content: \"application/json\",\n  success: 200\n}\n\nstorefrontCall(endpoint);\n```\n\n----------------------------------------\n\nTITLE: Generating a Customer Impersonation Token in BigCommerce\nDESCRIPTION: API request to create a customer impersonation token for the new channel using TOKEN_B. This token allows for customer authentication in the headless storefront and requires specifying the channel ID from the previous step.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/b2b-edition/headless.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{store_hash}/v3/storefront/api-token-customer-impersonation\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{TOKEN_B}}\n\n{\n  \"channel_id\": <channel returned on the first request>,\n  \"expires_at\": <Unix timestamp (UTC time) defining when the token should expire. Supports seconds, but does not support milliseconds, microseconds, or nanoseconds.>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storewide Percentage Discounts with Category-specific Rules in BigCommerce\nDESCRIPTION: JSON request for setting up tiered percentage discounts across a store: 50% off for items in a specific category (ID 36) and 40% off for items not in another category (ID 24). The promotion is configured to apply automatically to all qualifying orders.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/multiple-rules.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Up to 50% off storewide (50% off category X items and 40% off everything else)\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"percentage_amount\": 50\n          },\n          \"items\": {\n            \"categories\": [\n              36\n            ]\n          }\n        }\n      },\n      \"apply_once\": true\n    },\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"percentage_amount\": 40\n          },\n          \"items\": {\n            \"not\": {\n              \"categories\": [\n                24\n              ]\n            }\n          }\n        }\n      },\n      \"apply_once\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Stencil Images with getImage Helper\nDESCRIPTION: Helper for retrieving image src values based on size configurations defined in config.json.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_49\n\nLANGUAGE: handlebars\nCODE:\n```\n{{getImage stencilImage size}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{getImage image \"logo\"}}\n```\n\n----------------------------------------\n\nTITLE: Example of setURLQueryParam Helper in Handlebars\nDESCRIPTION: Example showing the setURLQueryParam helper adding a parameter 'c=2' to an image URL.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_89\n\nLANGUAGE: handlebars\nCODE:\n```\n{{setURLQueryParam \"http://example.com/image.jpg\" \"c\" \"2\"}}\n<!-- results in: http://example.com/image.jpg?c=2 -->\n```\n\n----------------------------------------\n\nTITLE: Example Response for Route Query\nDESCRIPTION: This JSON response shows the result of querying a route that returns a Product entity. It includes the product's typename, ID, name, description, and image URLs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/routes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"route\": {\n        \"node\": {\n          \"__typename\": \"Product\",\n          \"id\": \"UHJvZHVjdDoxNDE=\",\n          \"name\": \"Blouse\",\n          \"description\": \"<p>Blouse</p>\\n<p>#blouse</p>\",\n          \"images\": {\n            \"edges\": [\n              {\n                \"node\": {\n                  \"url\": \"https://cdn11.bigcommerce.com/s-w0astee9jo/images/stencil/500x500/products/141/396/blouse__67850.1689699580.jpg\"\n                }\n              }\n            ]\n          }\n        },\n        \"redirect\": null\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Order Count Based Discount in BigCommerce\nDESCRIPTION: Example showing how to create a 10% automatic discount for customers with 10 or more total orders using the minimum_order_count parameter.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/customer.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"10% off for customers with total order count of 10 or more\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"customer\": {\n    \"minimum_order_count\": 10\n  },\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_value\": {\n          \"discount\": {\n            \"percentage_amount\": \"10\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Account Payments Microapp\nDESCRIPTION: The JavaScript snippet defines a wrapper function `initializeMicroapp` to call `window.BigCommerce.renderAccountPayments`, passing necessary parameters to initialize the microapp. This method requires style configurations, store context data, and an error handler function to manage form submission errors.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/checkout-enhancements/stored-payment-methods.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst initializeMicroapp = (style, storeContextData, errorHandler) => window.BigCommerce.renderAccountPayments(style, storeContextData, errorHandler);\n```\n\n----------------------------------------\n\nTITLE: Implementing Hidden Settings in Widget Schema\nDESCRIPTION: Shows how to configure hidden settings that don't appear in the Page Builder interface but can be used for complex widget interactions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/input-reference/schema.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"hidden\",\n  \"settings\": [\n    {\n      \"id\": \"title\",\n      \"default\": \"Sample title text\"\n    },\n    {\n      \"id\": \"subtitle\",\n      \"default\": \"Description text goes here\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Access Token in BigCommerce\nDESCRIPTION: Creates a payment access token required for processing payments by making a POST request with the order ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/payments/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/payments/access_tokens\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"order\": {\n    \"id\": 215\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Pickup Method for a Location in BigCommerce API\nDESCRIPTION: This snippet demonstrates how to create a pickup method and assign it to a location using the BigCommerce API. It specifies the display name, collection instructions, and time description.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/pickup/methods\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"location_id\": 1,\n    \"display_name\": \"In-store pickup\",\n    \"collection_instructions\": \"Visit the service desk on arrival with your order number\",\n    \"collection_time_description\": \"9 AM to 5 PM\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing Sale Price (including tax) in BigCommerce Stencil Templates\nDESCRIPTION: This snippet shows how to access the sale price including tax in BigCommerce Stencil templates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/catalog-price-object.mdx#2025-04-16_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n{{ product.sale_price_with_tax }}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Prices and Dimensions\nDESCRIPTION: GraphQL query with fragments to retrieve detailed pricing and dimensional information for a product.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    product (entityId: 111) {\n      prices(currencyCode: USD) {\n        price {\n          ...PriceFields\n        }\n        salePrice {\n          ...PriceFields\n        }\n        basePrice {\n          ...PriceFields\n        }\n        retailPrice {\n          ...PriceFields\n        }\n      }\n      weight {\n        ...DimensionFields\n      }\n      height {\n        ...DimensionFields\n      }\n      width {\n        ...DimensionFields\n      }\n      depth {\n        ...DimensionFields\n      }\n    }\n  }\n}\n\nfragment PriceFields on Money {\n  currencyCode\n  value\n}\n\nfragment DimensionFields on Measurement {\n  value\n  unit\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Channel-Specific Storefront Category Settings\nDESCRIPTION: HTTP request example for fetching storefront category settings for a specific channel using the Settings API. This includes details like listing mode and default product sort order.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/guide/storefronts.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /stores/{{STORE_HASH}}/v3/settings/storefront/category?channel_id={{CHANNEL_ID}}\nHost: api.bigcommerce.com\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Creating Tiered Discount Promotion - Response\nDESCRIPTION: JSON response structure showing the created promotion with assigned ID and additional system-generated fields. Includes confirmation of the tiered discount rules and notification settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/multiple-rules.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 24,\n    \"name\": \"Tiered $ off order based on order value\",\n    \"created_from\": \"api\",\n    \"customer\": {\n      \"group_ids\": [],\n      \"minimum_order_count\": 0,\n      \"excluded_group_ids\": [],\n      \"segments\": null\n    },\n    \"rules\": [\n      {\n        \"action\": {\n          \"cart_value\": {\n            \"discount\": {\n              \"fixed_amount\": \"45\"\n            }\n          }\n        },\n        \"apply_once\": true,\n        \"stop\": true,\n        \"condition\": {\n          \"cart\": {\n            \"minimum_spend\": \"175\"\n          }\n        }\n      },\n      {\n        \"action\": {\n          \"cart_value\": {\n            \"discount\": {\n              \"fixed_amount\": \"30\"\n            }\n          }\n        },\n        \"apply_once\": true,\n        \"stop\": true,\n        \"condition\": {\n          \"cart\": {\n            \"minimum_spend\": \"150\"\n          }\n        }\n      },\n      {\n        \"action\": {\n          \"cart_value\": {\n            \"discount\": {\n              \"fixed_amount\": \"15\"\n            }\n          }\n        },\n        \"apply_once\": true,\n        \"stop\": true,\n        \"condition\": {\n          \"cart\": {\n            \"minimum_spend\": \"100\"\n          }\n        }\n      }\n    ],\n    \"notifications\": [\n      {\n        \"type\": \"UPSELL\",\n        \"content\": \"<div>&nbsp;</div>\",\n        \"locations\": [\n          \"CART_PAGE\"\n        ]\n      },\n      {\n        \"type\": \"ELIGIBLE\",\n        \"content\": \"<div>&nbsp;</div>\",\n        \"locations\": [\n          \"CART_PAGE\"\n        ]\n      },\n      {\n        \"type\": \"APPLIED\",\n        \"content\": \"<div>&nbsp;</div>\",\n        \"locations\": [\n          \"CART_PAGE\"\n        ]\n      }\n    ],\n    \"stop\": false,\n    \"currency_code\": \"USD\",\n    \"redemption_type\": \"AUTOMATIC\",\n    \"shipping_address\": null,\n    \"current_uses\": 0,\n    \"max_uses\": null,\n    \"start_date\": \"2019-02-01T05:00:00+00:00\",\n    \"end_date\": null,\n    \"status\": \"ENABLED\",\n    \"schedule\": null,\n    \"can_be_used_with_other_promotions\": true\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating Brands Using endCursor in GraphQL\nDESCRIPTION: This query demonstrates how to retrieve the next page of brands by using the 'after' parameter with the endCursor from the previous query. It fetches 30 brands after the specified cursor.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery brands {\n  site {\n    brands (first: 30, after:\"YXJyYXljb25uZWN0aW9uOjM=\")  {\n      pageInfo {\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GET Request for BigCommerce Page Snapshot\nDESCRIPTION: HTTP GET request to retrieve a page snapshot with optional query parameters for channel_id, template_file, and entity_id.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/page-widgets/guide.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/content/page-widgets?channel_id={{CHANNEL_ID}}&template_file={{TEMPLATE_FILE}}&entity_id={{ENTITY_ID}}\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: BigCommerce API Response for Creating a Storewide Promotion\nDESCRIPTION: This JSON response shows the created promotion details, including the discount rules, redemption type, and other settings. It confirms the successful creation of the 10% off storewide promotion with brand exclusions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/storewide.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 46,\n    \"name\": \"10% off storewide except 'Huggies', 'Munchkin', and 'Pampers' brand products\",\n    \"created_from\": \"api\",\n    \"customer\": {\n      \"group_ids\": [],\n      \"minimum_order_count\": 0,\n      \"excluded_group_ids\": [],\n      \"segments\": null\n    },\n    \"rules\": [\n      {\n        \"action\": {\n          \"cart_items\": {\n            \"discount\": {\n              \"percentage_amount\": \"10\"\n            },\n            \"strategy\": \"LEAST_EXPENSIVE\",\n            \"add_free_item\": true,\n            \"as_total\": false,\n            \"include_items_considered_by_condition\": false,\n            \"exclude_items_on_sale\": false,\n            \"items\": {\n              \"not\": {\n                \"brands\": [\n                  35,\n                  36,\n                  37\n                ]\n              }\n            }\n          }\n        },\n        \"apply_once\": true,\n        \"stop\": false\n      }\n    ],\n    \"notifications\": [],\n    \"stop\": false,\n    \"currency_code\": \"USD\",\n    \"redemption_type\": \"AUTOMATIC\",\n    \"shipping_address\": null,\n    \"current_uses\": 0,\n    \"max_uses\": null,\n    \"start_date\": \"2022-07-21T20:21:08+00:00\",\n    \"end_date\": null,\n    \"status\": \"ENABLED\",\n    \"schedule\": null,\n    \"can_be_used_with_other_promotions\": true\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Consignment Information for an Order in BigCommerce API\nDESCRIPTION: HTTP GET request to retrieve consignment information for a specific order. Requires the store hash, order ID, and access token for authentication.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/orders.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{store_hash}}/v2/orders/{{order_id}}/consignments\nX-Auth-Token: {{access_token}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Accessing Sale Price (excluding tax) in BigCommerce Stencil Templates\nDESCRIPTION: This snippet demonstrates how to access the sale price excluding tax in BigCommerce Stencil templates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/catalog-price-object.mdx#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n{{product.price.sale_price_without_tax}}\n```\n\n----------------------------------------\n\nTITLE: Configuring All Global Objects in JSON\nDESCRIPTION: Comprehensive JSON configuration for various global objects including customer, products, carousel, blog, cart, shipping messages, categories, and shop by brand.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customer\": {\n    \"addresses\": false,\n    \"returns\": true,\n    \"wishlists\": {\n      \"limit\": 3\n    },\n    \"orders\": {\n      \"limit\": 4\n    },\n    \"recently_viewed_products\": true\n  },\n  \"products\": {\n    \"featured\": {\n      \"limit\": 3\n    },\n    \"new\": {\n      \"limit\": 4\n    },\n    \"top_sellers\": {\n      \"limit\": 5\n    }\n  },\n  \"carousel\": true,\n  \"blog\": {\n    \"recent_posts\": {\n      \"limit\": 7\n    },\n    \"summary\": 6\n  },\n  \"cart\": true,\n  \"shipping_messages\": true,\n  \"categories\": {\n    \"description\": true\n  },\n  \"shop_by_brand\": {\n    \"limit\": 4\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using get Helper in Handlebars for Property Path Access\nDESCRIPTION: The get helper allows accessing values using property paths, working as both a regular or block helper. Can be combined with concat for dynamic property paths.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_73\n\nLANGUAGE: handlebars\nCODE:\n```\n{{get (concat \"a.b.c.d\") someObject}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Page in JSON\nDESCRIPTION: JSON configuration for limiting the number of blog posts, pages, and summary length on the blog page.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"blog\": {\n    \"posts\": {\n      \"limit\": 5,\n      \"pages\": 3,\n      \"summary\": 10\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Product Modifier with V3 Catalog API in JSON\nDESCRIPTION: This snippet shows how to create a product modifier (checkbox) using the V3 Catalog API. It's part of the process to create a product with variants and modifiers.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"checkbox_label\": \"Check for Donation\",\n    \"checked_by_default\": false,\n    \"default_value\": \"Yes\"\n  },\n  \"display_name\": \"Add a $5 Donation\",\n  \"required\": false,\n  \"type\": \"checkbox\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Subscription with cancelSubscription Mutation in GraphQL\nDESCRIPTION: This GraphQL mutation cancels a subscription at the end of the merchant's current billing cycle. It requires the subscription ID as input and returns the subscription ID and the cancellation date.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($subscription: CancelSubscriptionInput!) {\n  subscription {\n    cancelSubscription(input: $subscription) {\n      subscriptionId\n      cancelledAt\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Channel-Attributed Orders with Inventory Management\nDESCRIPTION: Example showing how to create orders with channel attribution while managing inventory. The request includes channel_id for proper order attribution.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/guide/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v2/orders\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"billing_address\": {...},\n  \"products\": [...],\n  \"channel_id\": {{CHANNEL_ID}}\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Variables for Setting Product Modifier Options in BigCommerce\nDESCRIPTION: These GraphQL variables provide the input for setting product modifier options. They specify the product ID, locale context, and modifier data including the modifier ID, display name, and values for a rectangle list modifier.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"localeContext\": {\n        \"channelId\": \"bc/store/channel/2\",\n        \"locale\": \"fr\"\n    },\n    \"data\": {\n      \"modifiers\": [\n        {\n          \"modifierId\": \"bc/store/productModifier/121\",\n          \"data\": {\n            \"rectangleList\": {\n              \"displayName\": \"Thème de vacances\",\n              \"values\": [\n                {\n                  \"valueId\": \"bc/store/productModifierValue/113\",\n                  \"label\": \"Anniversaire\"\n                },\n                {\n                  \"valueId\": \"bc/store/productModifierValue/114\",\n                  \"label\": \"Noël\"\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Create Checkout Mutation\nDESCRIPTION: This is a sample response from the createCheckout mutation. It includes the created checkout's details such as ID, status, checkout URL, and item information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"checkout\": {\n      \"createCheckout\": {\n        \"checkout\": {\n          \"id\": \"bc/account/checkout/bf09f4d3-3250-4103-8735-e390c3a49aff\",\n          \"accountId\": \"bc/account/account/61db983a-cd07-4d6b-8b59-a5ffe285ca6a\",\n          \"status\": \"PENDING\",\n          \"checkoutUrl\": \"https://store-f0qyczpkb2.my-bigcommerce.com/manage/merchant-checkout?checkoutId=bf09f4d3-3250-4103-8735-e390c3a49aff\",\n          \"items\": {\n            \"edges\": [\n              {\n                \"node\": {\n                  \"subscriptionId\": null,\n                  \"status\": \"PENDING\",\n                  \"product\": {\n                    \"id\": \"bc/account/product/1234\",\n                    \"type\": \"APPLICATION\",\n                    \"productLevel\": \"Standard\"\n                  },\n                  \"scope\": {\n                    \"id\": \"bc/account/scope/f0qyczpkb2\",\n                    \"type\": \"STORE\"\n                  },\n                  \"pricingPlan\": {\n                    \"interval\": \"MONTH\",\n                    \"price\": {\n                      \"value\": 29.99,\n                      \"currencyCode\": \"USD\"\n                    },\n                    \"trialDays\": 0\n                  },\n                  \"redirectUrl\": \"https://store-f0qyczpkb2.mybigcommerce.com/manage/app/1234/upgrade_success\",\n                  \"description\": \"App Subscription - Standard\"\n                }\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Product Updated Payload Structure in JSON\nDESCRIPTION: This payload structure is used for a product updated event. It includes the store ID, product type, its unique identifier, and details regarding properties and context like channel and locale, along with hash for integrity and timestamp.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/product/updated\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"product\", // will always be product\n    \"id\": 205, // ID of the product\n    \"properties\": [\"warranty\", \"is_featured\", \"custom_fields\"],\n    \"context\": {\n      \"channel_id\": 2,\n      \"locale\": \"fr\"\n    } \n  },\n  \"hash\": \"a833a57fadd56a32dc752fb6ca0841dc9602a495\",\n  \"created_at\": 1561479233,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Price Difference in BigCommerce Stencil Templates\nDESCRIPTION: This snippet demonstrates how to access the difference between the Default Price and MSRP in BigCommerce Stencil templates, representing the customer's savings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/catalog-price-object.mdx#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n{{ product.price.saved }}\n```\n\n----------------------------------------\n\nTITLE: Create Product Request - V2 Products API\nDESCRIPTION: Example request to create a simple product using the V2 Products API POST /v2/products endpoint.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"BigCommerce Clay Vase\",\n  \"price\": \"20.00\",\n  \"categories\": [\n    23,\n    21\n  ],\n  \"weight\": 5,\n  \"type\": \"physical\",\n  \"availability\": \"available\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Discount for Extra-Small or Medium Item with Free Shipping - JSON\nDESCRIPTION: This JSON snippet defines a promotion that provides free shipping to customers who add extra-small or medium items to their cart. It includes rules about the types of items eligible for the promotion and the conditions that must be met.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/product.mdx#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy extra-small or medium item and get free shipping to zone id 1\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"condition\":{\n        \"cart\":{\n          \"items\": {\n            \"product_option\": {\n              \"type\": \"string_match\",\n              \"name\": \"Size\",\n              \"values\": [\n                \"XS\",\n                \"M\"\n              ]\n            }\n          },\n          \"minimum_quantity\": 1\n        }\n      },\n      \"action\":{\n        \"shipping\":{\n          \"free_shipping\":true,\n          \"zone_ids\":[\n            1\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Variants in BigCommerce (HTTP)\nDESCRIPTION: Shows how to get product variant information, which is necessary for specifying product options when creating an order. The response includes details about option values and IDs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products/{{product_id}}/variants\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 421,\n      \"product_id\": 184,\n      ...\n      \"option_values\": [\n        {\n          \"id\": 180,         // product_options.value\n          \"label\": \"Red\",\n          \"option_id\": 200,  // product_options.id\n          \"option_display_name\": \"Color\"\n        },\n        {\n          \"id\": 192,\n          \"label\": \"Small\",\n          \"option_id\": 230,\n          \"option_display_name\": \"T-Shirt Size\"\n        }\n      ]\n    }\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting a Shipping Option for a Consignment\nDESCRIPTION: Shows how to select a specific shipping option for a consignment using the shipping option ID retrieved from available shipping options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_26\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/checkouts/{{checkout_id}}/consignments/{{consignment_id}}\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"shipping_option_id\" : \"4dcbf24f457dd67d5f89bcf374e0bc9b\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Content Images with getContentImage Helper\nDESCRIPTION: Helper for retrieving URLs for images uploaded to /dav/content/. Supports specifying width and height parameters for image resizing.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_47\n\nLANGUAGE: handlebars\nCODE:\n```\n{{getContentImage path width height}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<!-- Original image URL returned if no size or invalid size is passed in -->\n{{getContentImage \"asset.jpg\"}}\n<!-- => https://cdn.bcapp/3dsf74g/images/stencil/original/content/asset.jpg -->\n\n{{getContentImage \"asset.jpg\" width=\"a\" height=\"a\"}}\n<!-- => https://cdn.bcapp/3dsf74g/images/stencil/original/content/asset.jpg -->\n\n<!-- Sized image URL returned if valid height and/or width passed in -->\n{{getContentImage \"asset.jpg\" width=123 height=321}}\n<!-- => https://cdn.bcapp/3dsf74g/images/stencil/123x321/content/asset.jpg -->\n\n{{getContentImage \"asset.jpg\" width=123}}\n<!-- => https://cdn.bcapp/3dsf74g/images/stencil/123w/content/folder/asset.jpg -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom CDN Endpoints in config.json\nDESCRIPTION: Example configuration for defining custom CDN endpoints in a theme's config.json file. This allows using external CDNs for large assets while staying under BigCommerce's 50MB theme limit.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Cornerstone\",\n  \"version\": \"1.3.5\",\n  \"settings\": {\n    \"homepage_new_products_count\": 12,\n    \"homepage_featured_products_count\": 8,\n    \"cdn\": {\n      \"customcdn\": \"https://bigcommerce.customcdn.net\"\n          }\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Supported Locales in GraphQL\nDESCRIPTION: This GraphQL query retrieves a static list of all locales currently supported by the platform. It returns the locale code, English name, and whether it has built-in translations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/settings/locales.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  i18n {\n    supportedLocales {\n        edges {\n            node {\n                code\n                englishName\n                hasBuiltInTranslations\n            }\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: GET Request for Retrieving Category Contextual Filters\nDESCRIPTION: Makes a GET request to fetch existing contextual filter overrides for a specific category. Requires store hash, category ID and access token for authentication.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/contextual-filters.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/settings/search/filters/contexts?channel_id=1&category_id={{CATEGORY_ID}}\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Creating Price Records in Multiple Currencies via BigCommerce API\nDESCRIPTION: JSON payload for creating price records in multiple currencies using the Set Price Records API endpoint. This example sets prices for a product variant in both AUD and EUR currencies.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/currencies/guide.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"variant_id\": 360,\n    \"price\": 27.57,\n    \"sale_price\": 12,\n    \"currency\": \"aud\",\n    \"product_id\": 189\n  },\n  {\n    \"variant_id\": 360,\n    \"price\": 27.57,\n    \"sale_price\": 12,\n    \"currency\": \"eur\",\n    \"product_id\": 189\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Currency Information via BigCommerce API\nDESCRIPTION: Example of a JSON response from the Currency API, showing the structure and properties of a currency object, including the new 'is_transactional' field.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/currencies/guide.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"country_iso2\": \"EU\",\n  \"currency_code\": \"EUR\",\n  \"currency_exchange_rate\": \"0.849\",\n  \"auto_update\": true,\n  \"token_location\": \"left\",\n  \"token\": \"€\",\n  \"decimal_token\": \".\",\n  \"thousands_token\": \",\",\n  \"decimal_places\": 2,\n  \"name\": \"Euro\",\n  \"is_transactional\": false,\n  \"id\": 2,\n  \"is_default\": false,\n  \"last_updated\": \"2018-06-12T14:41:56.000Z\",\n  \"enabled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Using replace Helper in Handlebars for Content Substitution\nDESCRIPTION: The replace helper replaces all instances of the first parameter in the second parameter with the child block content.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_86\n\nLANGUAGE: handlebars\nCODE:\n```\n{{replace firstParam secondParam string}}\n```\n\n----------------------------------------\n\nTITLE: Safe JSON Parsing - JavaScript\nDESCRIPTION: Safely parses a JSON string, handling errors without throwing exceptions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction JSONparseSafe(str) { try { return JSON.parse(str); } catch { return null; } }\n```\n\n----------------------------------------\n\nTITLE: Customer Login Access Point URL with JWT\nDESCRIPTION: Example of the access point URL used to sign in a customer, including a sample JWT token.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/customer-login.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttps://storedomain.com/login/token/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ7Y2xpZW50X2lkfSIsImlhdCI6MTUzNTM5MzExMywianRpIjoie3V1aWR9Iiwib3BlcmF0aW9uIjoiY3VzdG9tZXJfbG9naW4iLCJzdG9yZV9oYXNoIjoie3N0b3JlX2hhc2h9IiwiY3VzdG9tZXJfaWQiOjJ9.J-fAtbjRFGdLsT744DhoprFEDqIfVq72HbDzrbFy6Is\n```\n\n----------------------------------------\n\nTITLE: Deleting Cart Metafields with GraphQL\nDESCRIPTION: Mutation to delete a cart metafield. Requires cart entity ID and metafield entity ID. Includes error handling for not found, validation, and authorization errors.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/metafields.mdx#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation deleteCartMetafield {\n  cart {\n   deleteCartMetafield(input:{\n     cartEntityId: \"4a5fd706-beb9-41b5-9ac2-01593b471168\"\n     metafieldEntityId: 53\n  }) {\n  errors {\n        ... on NotFoundError {\n          __typename\n          message\n        }\n        ... on ValidationError {\n          __typename\n          message\n          path\n        }\n        ... on NotAuthorisedError {\n          __typename\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"cart\": {\n      \"deleteCartMetafield\": {\n        \"errors\": []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete GraphQL Query for Filtering Location Data\nDESCRIPTION: A comprehensive GraphQL query example that filters locations by entityId, code, and typeId. It retrieves detailed information about the matching locations including address information, operating hours, and special hours.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/locations/queries.mdx#2025-04-16_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  inventory {\n    locations (\n      entityIds: [2]\n      codes: [\"BC-LOCATION-2\"]\n      typeIds: [\"PHYSICAL\"]\n    ) {\n      edges {\n        node {\n          entityId\n          code\n          label\n          description\n          typeId\n          distance {\n            value\n            lengthUnit\n          }\n          timeZone\n          address {\n            city\n            address1\n            address2\n            postalCode\n            stateOrProvince\n            email\n            phone\n            latitude\n            longitude\n            countryCode\n          }\n          operatingHours {\n            sunday {\n              open\n              opening\n              closing\n            }\n            monday {\n              open\n              opening\n              closing\n            }\n            tuesday {\n              open\n              opening\n              closing\n            }\n            wednesday {\n              open\n              opening\n              closing\n            }\n            thursday {\n              open\n              opening\n              closing\n            }\n            friday {\n              open\n              opening\n              closing\n            }\n            saturday {\n              open\n              opening\n              closing\n            }\n          }\n          specialHours {\n            label\n            open\n            opening\n            closing\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Array Elements in Widget Schema\nDESCRIPTION: Illustrates how to implement array-type elements for building collections within widgets. Includes configuration for thumbnails, default counts, and nested schemas.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/input-reference/schema.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"array\",\n  \"label\": \"Carousel\",\n  \"id\": \"slides\",\n  \"defaultCount\": 2,\n  \"entryLabel\": \"Slide\",\n  \"thumbnail\": {\n    \"type\": \"image\",\n    \"valueKey\": \"imageUrl.src\"\n  },\n  \"schema\": [\n    {\n      \"type\": \"tab\",\n      \"label\": \"Content\",\n      \"sections\": [\n        ...\n        {\n          \"type\": \"imageManager\",\n          \"id\": \"imageUrl\",\n          \"default\": {\n            \"src\": \"https://example.com/example.png\",\n            \"type\": \"IMAGE_MANAGER\"\n          }\n        },\n        ...\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Order Refund Created Webhook Payload\nDESCRIPTION: Example payload structure for store/order/refund/created webhook event that fires when a refund is submitted against an order.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/order/refund/created\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"order\",\n    \"id\": 250,\n    \"refund\": {\n      \"refund_id\": 3\n    }\n  },\n  \"hash\": \"cb07cdbdda8b1965e812693d5988154807eeed02\",\n  \"created_at\": 1561479923,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Tax Properties in BigCommerce\nDESCRIPTION: Deletes specified tax properties using ID filters. Example shows deleting a single tax property by ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/tax-properties.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nDELETE https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/tax/properties?id:in=2\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Parsing Customer Address Created Webhook Payload in JSON\nDESCRIPTION: This snippet shows the payload structure for the store/customer/address/created webhook event. It includes the address ID, customer ID, and other relevant information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/customer/address/created\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"customer\", // will always be customer\n    \"id\": 60, // ID of the customer address\n    \"address\": {\n      \"customer_id\": 32 // ID of the customer\n    }\n  },\n  \"hash\": \"416ca9c01779515de91824aa1cac9012ee691e7a\",\n  \"created_at\": 1561481620,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Product Image Overrides Mutation in BigCommerce GraphQL\nDESCRIPTION: GraphQL mutation to remove product image property overrides for a specific channel locale. Includes both the mutation request and variables needed to identify the product, image, and channel locale context.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-images.mdx#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation removeProductImagePropertiesOverrides($input: RemoveProductImagePropertiesOverridesInput!) {\n  product {\n    removeProductImagePropertiesOverrides(input: $input) {\n      images {\n        edges {\n          node {            \n            id        \n            altText    \n            isThumbnail  \n            sortOrder  \n            urlStandard \n            urlZoom\n            addedToProduct\n            overrides ( context: { channelId: \"bc/store/channel/1\", locale: \"en\"}) {\n              edges {\n                node {\n                  ... on ProductImagesOverridesForChannelLocale {\n                    context {\n                      channelId\n                      locale\n                    }\n                    altText\n                    isThumbnail\n                    sortOrder\n                    addedToProduct\n                  }\n                }\n              }\n            }\n          } \n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"data\": [\n      {\n        \"imageId\": \"bc/store/productImage/371\",\n        \"contexts\": [\n          {\n            \"channelLocaleContext\": {\n              \"channelId\": \"bc/store/channel/1\", \n              \"locale\": \"en\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscription Query Response Format\nDESCRIPTION: Example JSON response showing the structure of subscription data returned by the API. Includes pagination information and detailed subscription records with billing, product, and scope details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"account\": {\n      \"subscriptions\": {\n        \"pageInfo\": {\n          \"hasNextPage\": true,\n          \"hasPreviousPage\": false,\n          \"startCursor\": \"WzE3MjQ0MzgzODk0MzY0NzYsODhd\",\n          \"endCursor\": \"WzE3MTk3NDYxNzUyNjg2NDUsNzdd\"\n        },\n        \"edges\": [\n          {\n            \"cursor\": \"WzE3MjQ0MzgzODk0MzY0NzYsODhd\",\n            \"node\": {\n              \"id\": \"bc/account/subscription/d7762d54-1aab-4243-938b-294b846222b5\",\n              \"accountId\": \"bc/account/account/0b2d26c8-e4e2-4635-9c99-8bf3cfd93153\",\n              \"activationDate\": \"2024-08-23T00:00:00Z\",\n              \"pricePerInterval\": {\n                \"value\": 14.99,\n                \"currencyCode\": \"USD\"\n              },\n              \"billingInterval\": \"ONCE\",\n              \"status\": \"ACTIVE\",\n              \"scope\": {\n                \"type\": \"STORE\",\n                \"id\": \"bc/account/scope/9godyw034y\"\n              },\n              \"product\": {\n                \"productLevel\": \"\",\n                \"id\": \"bc/account/product/16267\",\n                \"type\": \"APPLICATION\"\n              },\n              \"createdAt\": \"2024-08-23T18:39:48Z\",\n              \"currentPeriodEnd\": \"2024-08-24T00:00:00Z\",\n              \"updatedAt\": \"2024-08-23T18:39:48Z\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing BigCommerce Dependencies\nDESCRIPTION: Command to install main project dependencies including BigDesign, Next.js, and React\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-setup.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @bigcommerce/big-design @bigcommerce/big-design-icons @bigcommerce/big-design-theme dotenv next react react-dom styled-components\n```\n\n----------------------------------------\n\nTITLE: Concatenating Two Strings - JavaScript\nDESCRIPTION: Concatenates two strings into one single string.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction concat(str1, str2) { return str1 + str2; }\n```\n\n----------------------------------------\n\nTITLE: Example Response from BigCommerce Consignment Creation API\nDESCRIPTION: This JSON response shows the detailed structure of a successful consignment creation, including checkout details, billing address, consignments with shipping options, and order totals.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"d4e978c2-bdcf-41b0-a49b-fecf4f5223c1\",\n    \"cart\": {\n      \"id\": \"d4e978c2-bdcf-41b0-a49b-fecf4f5223c1\",\n      \"customerId\": 0,\n      \"email\": \"janedoe@email.com\",\n      \"currency\": {\n        \"name\": \"US Dollars\",\n        \"code\": \"USD\",\n        \"symbol\": \"$\",\n        \"decimalPlaces\": 2\n      },\n    ...\n      \"coupons\": [],\n      \"discounts\": [\n        ...\n      ],\n      \"lineItems\": {\n        \"physicalItems\": [\n          {\n            \"id\": \"57a877e0-d898-47d0-910d-88656e8dee0c\",\n            \"parentId\": null,\n            \"variantId\": 66,\n            \"productId\": 86,\n            \"sku\": \"ABS\",\n            \"name\": \"[Sample] Able Brewing System\",\n            \"url\": \"https://{store_url}/able-brewing-system/\",\n            \"quantity\": 1,\n            ...\n            \"extendedSalePrice\": 225,\n            \"comparisonPrice\": 225,\n            \"extendedComparisonPrice\": 225,\n            \"isShippingRequired\": true,\n            \"giftWrapping\": null,\n            \"addedByPromotion\": false\n          },\n          {\n            \"id\": \"22c461a2-eff9-4b72-8d22-7c2792ce2c2d\",\n            \"parentId\": null,\n            \"variantId\": 67,\n            \"productId\": 88,\n            \"sku\": \"CC3C\",\n            \"name\": \"[Sample] Chemex Coffeemaker 3 Cup\",\n            \"url\": \"https://{store_url}/chemex-coffeemaker-3-cup/\",\n            \"quantity\": 1,\n            ...\n            \"comparisonPrice\": 49.5,\n            \"extendedComparisonPrice\": 49.5,\n            \"isShippingRequired\": true,\n            \"giftWrapping\": null,\n            \"addedByPromotion\": false\n          }\n        ],\n        ...\n      },\n      ...\n    },\n    \"billingAddress\": {\n      \"id\": \"5e6a8cad71318\",\n      \"firstName\": \"Jane\",\n      \"lastName\": \"Doe\",\n      \"email\": \"janedoe@email.com\",\n      \"company\": \"BigCommerce\",\n      \"address1\": \"123 Main Street\",\n      \"address2\": \"Apt 1\",\n      \"city\": \"Austin\",\n      \"stateOrProvince\": \"\",\n      \"stateOrProvinceCode\": \"\",\n      \"country\": \"\",\n      \"countryCode\": \"\",\n      \"postalCode\": \"78751\",\n      \"phone\": \"\",\n      \"customFields\": []\n    },\n    \"consignments\": [\n      {\n        \"id\": \"5e6a91ff83c6d\",\n        \"shippingCost\": 0,\n        ...\n        \"lineItemIds\": [\n          \"57a877e0-d898-47d0-910d-88656e8dee0c\"\n        ],\n        \"selectedShippingOption\": null,\n        \"shippingAddress\": {\n          \"firstName\": \"Jane\",\n          \"lastName\": \"Doe\",\n          \"email\": \"janedoe@email.com\",\n          \"company\": \"BigCommerce\",\n          \"address1\": \"123 Main Street\",\n          \"address2\": \"Apt 1\",\n          \"city\": \"Austin\",\n          \"stateOrProvince\": \"Texas\",\n          \"stateOrProvinceCode\": \"TX\",\n          \"country\": \"United States\",\n          \"countryCode\": \"US\",\n          \"postalCode\": \"78751\",\n          \"phone\": \"\",\n          \"customFields\": []\n        },\n        \"availableShippingOptions\": [\n          {\n            \"id\": \"80ad65f7946c23bd4ee9a531d85c5e21\",\n            \"type\": \"shipping_pickupinstore\",\n            \"description\": \"Pickup In Store\",\n            \"imageUrl\": \"\",\n            \"cost\": 0,\n            ...\n          },\n          {\n            \"id\": \"4dcbf24f457dd67d5f89bcf374e0bc9b\",\n            \"type\": \"freeshipping\",\n            \"description\": \"Free Shipping\",\n            \"imageUrl\": \"\",\n            \"cost\": 0,\n            ...\n          }\n        ]\n      },\n      {\n        \"id\": \"5e6a91ffeac84\",\n        \"shippingCost\": 0,\n        ...\n        \"lineItemIds\": [\n          \"22c461a2-eff9-4b72-8d22-7c2792ce2c2d\"\n        ],\n        \"selectedShippingOption\": null,\n        \"shippingAddress\": {\n          \"firstName\": \"John\",\n          \"lastName\": \"Doe\",\n          \"email\": \"johnedoe@email.com\",\n          \"company\": \"BigCommerce\",\n          \"address1\": \"123 South Street\",\n          \"address2\": \"Apt 5\",\n          \"city\": \"Austin\",\n          \"stateOrProvince\": \"Texas\",\n          \"stateOrProvinceCode\": \"TX\",\n          \"country\": \"United States\",\n          \"countryCode\": \"US\",\n          \"postalCode\": \"78726\",\n          \"phone\": \"\",\n          \"customFields\": []\n        },\n        \"availableShippingOptions\": [\n          {\n            \"id\": \"80ad65f7946c23bd4ee9a531d85c5e21\",\n            \"type\": \"shipping_pickupinstore\",\n            \"description\": \"Pickup In Store\",\n            \"imageUrl\": \"\",\n            \"cost\": 0,\n            \"transitTime\": \"\",\n            \"isRecommended\": false,\n            \"additionalDescription\": \"\"\n          },\n          {\n            \"id\": \"4dcbf24f457dd67d5f89bcf374e0bc9b\",\n            \"type\": \"freeshipping\",\n            \"description\": \"Free Shipping\",\n            \"imageUrl\": \"\",\n            \"cost\": 0,\n            ...\n          },\n          {\n            \"id\": \"85dfaf5f834d7e594f0bd7cf67d5b200\",\n            \"type\": \"shipping_flatrate\",\n            \"description\": \"Flat Rate\",\n            \"imageUrl\": \"\",\n            \"cost\": 5,\n            ...\n          },\n          {\n            \"id\": \"8809b0bbcc8bdc2d5cad2a4fcbd6cf09\",\n            \"type\": \"shipping_byweight\",\n            \"description\": \"Ship by Weight\",\n            \"imageUrl\": \"\",\n            \"cost\": 10,\n            ...\n          }\n        ]\n      }\n    ],\n    \"orderId\": null,\n    \"shippingCostTotal\": 0,\n    \"shippingCostBeforeDiscount\": 0,\n    \"handlingCostTotal\": 0,\n    \"taxTotal\": 22.65,\n    ...\n    \"subtotal\": 274.5,\n    ...\n    \"customerMessage\": \"\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Customer Login JWT Payload Structure\nDESCRIPTION: Example JWT payload structure used for customer login operations. It includes store information, customer identification, and redirect parameters needed for the Customer Login API to authenticate customers across BigCommerce sessions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/customers.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"iss\": {{CLIENT_ID}},\n  \"iat\": 1535393113,\n  \"jti\": {{UUID}},\n  \"operation\": \"customer_login\",\n  \"store_hash\": {{STORE_HASH}},\n  \"customer_id\": {{CUSTOMER_ID}},\n  \"channel_id\": {{CHANNEL_ID}},\n  \"redirect_to\": \"/cart.php?embedded=1&action=loadInCheckout&id=bc218c65-7a32-4ab7-8082-68730c074d02&token=aa958e2b7922035bf3339215d95d145ebd9193deb36ae847caa780aa2e003e4b\",\n  \"request_ip\": \"111.222.333.444\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Location Metafield using BigCommerce REST API\nDESCRIPTION: This snippet demonstrates how to create a location metafield using the BigCommerce REST Management API. It includes the HTTP request format and required headers, as well as the JSON payload structure for creating a metafield with specific attributes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/inventory-locations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/inventory/locations/{{LOCATION_ID}}/metafields\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"key\": \"location status\",\n  \"value\": \"upcoming\",\n  \"namespace\": \"headquarters\",\n  \"permission_set\": \"write_and_sf_access\",\n  \"description\": \"new location\"\n}\n```\n\n----------------------------------------\n\nTITLE: Order Metafield Webhook Payload\nDESCRIPTION: Example payload structure for store/order/metafield/created, updated, and deleted webhook events that fire when order metafields are modified.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/order/metafield/created\",\n  \"store_id\": \"1001197568\",\n  \"data\": {\n    \"metafield_id\": 14,\n    \"resource_id\": \"270\"\n  },\n  \"hash\": \"8fd18449531d7e531587782eb200950cbad8cffe\",\n  \"created_at\": 1683315012,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Type in schema.json for BigCommerce Theme Styles\nDESCRIPTION: JSON configuration for select data type used to select custom values on theme settings. Requires type, label, id, and options fields, with an optional force_reload field. Options should all have the same data type.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/styles-and-properties.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n \"type\": \"select\",\n \"label\": \"i18n.BodyTextFontSize\",\n \"id\": \"fontSize-root\",\n \"options\": [\n   {\n     \"value\": 12,\n     \"label\": \"12px\"\n   },\n   {\n     \"value\": 13,\n     \"label\": \"13px\"\n   },\n   {\n     \"value\": 14,\n     \"label\": \"14px\"\n   },\n   {\n     \"value\": 16,\n     \"label\": \"16px\"\n   }\n ]\n},\n```\n\n----------------------------------------\n\nTITLE: Consignment Response Data Structure in BigCommerce API\nDESCRIPTION: JSON response structure showing pickup consignment details, including pickup method information, location data, and related line items for an order.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/orders.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pickups\": [\n    {\n      \"id\": 13,\n      \"pickup_method_id\": 2,\n      \"pickup_method_display_name\": \"Pickup Method 2\",\n      \"collection_instructions\": \"Pickup Method 2 instructions\",\n      \"collection_time_description\": \"Pickup Method 2 time\",\n      \"location\": {\n        \"id\": 2,\n        \"name\": \"location2\",\n        \"code\": \"LOCATION-2\",\n        \"address_line_1\": \"2802 Skyway Cir\",\n        \"address_line_2\": \"\",\n        \"city\": \"Austin\",\n        \"state\": \"Texas\",\n        \"postal_code\": \"78704\",\n        \"country_alpha2\": \"US\",\n        \"email\": \"location2@example.com\",\n        \"phone\": \"410123002\"\n      },\n      \"line_items\": [\n        {\n          \"url\": \"https://api.bigcommerce.com/stores/{{store_hash}}/v2/orders/126/products/22\",\n          \"resource\": \"/orders/126/products/22\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Product Inventory Update Webhook Payload in JSON\nDESCRIPTION: This snippet shows the structure of a payload object for a product inventory update event. It includes details such as the scope, store ID, product ID, inventory method, and value of change.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/product/inventory/updated\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"product\",\n    \"id\": 167,\n    \"inventory\": {\n      \"product_id\": 167,\n      \"method\": \"absolute\",\n      \"value\": 100000000\n    }\n  },\n  \"hash\": \"cba9eef399fbd6d384489bca6cacad24794b1086\",\n  \"created_at\": 1561478843,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Template Context to JavaScript\nDESCRIPTION: This code shows how to inject dynamic data from the template context into the client-side JavaScript code using the `inject` helper and the `jsContext` helper.  It sets the product name using `{{inject}}` and then retrieves the JSON object with `{{jsContext}}` within a `<script>` tag. This allows for dynamic data to be used in client-side logic.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/javascript/extend.mdx#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{inject \"myProductName\" product.title}}\n\n<script>\n// Note the lack of quotes around the jsContext handlebars helper, it becomes a string automatically.\nvar jsContext = JSON.parse({{jsContext}}); //jsContext would output \"{\\\"myProductName\\\": \\\"Sample Product\\\"}\" which can feed directly into your JavaScript\n\nconsole.log(jsContext.myProductName); // Will output: Sample Product\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Amount Off Promotion in BigCommerce API\nDESCRIPTION: Example JSON request for creating a promotion that gives $50 off a specific product when another product is purchased. The promotion applies automatically and is configured in USD currency.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/product.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"US $50 off a specific product\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"currency_code\": \"USD\",\n  \"rules\": [\n    {\n      \"apply_once\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"products\": [\n              129\n            ]\n          },\n          \"minimum_quantity\": 1\n        }\n      },\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"fixed_amount\": \"50\"\n          },\n          \"items\": {\n            \"products\": [\n              130\n            ]\n          },\n          \"quantity\": 1,\n          \"include_items_considered_by_condition\": true\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: BigCommerce Cart Coupon Webhook Payload\nDESCRIPTION: Payload structure for when a coupon is applied to a cart.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/cart/couponApplied\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"cart\",\n    \"id\": \"09346904-4175-44fd-be53-f7e598531b6c\",\n    \"couponId\": 1\n  },\n  \"hash\": \"4b7297d295141b660e8db5a0d99dfcdf459fe825\",\n  \"created_at\": 1561482761,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating webpack.common.js with React preset\nDESCRIPTION: This snippet demonstrates how to update the webpack configuration file to include the React preset, enabling the use of React features in the project.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/react.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n...\npresets: [\n    ['@babel/preset-env', {\n        ...\n    }], '@babel/react',\n  ],\n```\n\n----------------------------------------\n\nTITLE: Publishing or Overwriting a Page in BigCommerce REST API\nDESCRIPTION: This HTTP POST request publishes or overwrites page content in BigCommerce. It includes a JSON payload with channel ID, template file, entity ID, and widget configurations for a hero banner and layout. The request requires authentication via an access token.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/page-widgets/guide.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/content/page-widgets\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"channel_id\": 1,\n  \"template_file\": \"pages/page\",\n  \"entity_id\": \"5\",\n  \"regions\": [\n    {\n      \"name\": \"home_below_menu\",\n      \"children\": [\n        {\n          \"widget_template_uuid\": \"d181ebd5-f42c-4f96-8f9d-c605023f5cb6\",\n          \"configuration\": {\n            \"title\": \"Hero Banner Title\",\n            \"subtitle\": \"Add a description for this hero banner. This is a great place to highlight a promotion.\",\n            \"buttonText\": \"Shop now\",\n            \"contentAlignment\": {\n              \"horizontal\": \"left\"\n            },\n            \"containerHeight\": \"small\",\n            \"backgroundType\": \"image\",\n            \"backgroundColor\": \"#444444\",\n            \"imageUrl\": {\n              \"src\": \"https://images.unsplash.com/photo-1533038590840-1cde6e668a91?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2000&q=100\",\n              \"type\": \"IMAGE_MANAGER\"\n            },\n            \"imageFit\": \"fill\",\n            \"imageParallax\": \"off\",\n            \"imageAlignment\": {\n              \"horizontal\": \"center\",\n              \"vertical\": \"middle\"\n            },\n            \"imageOpacity\": 100,\n            \"titleVisible\": \"show\",\n            \"titleStyle\": \"default\",\n            \"titleFontFamily\": \"inherit\",\n            \"titleFontWeight\": \"400\",\n            \"titleFontSize\": {\n              \"value\": 36,\n              \"type\": \"px\"\n            },\n            \"descriptionVisible\": \"show\",\n            \"descriptionStyle\": \"default\",\n            \"descriptionFontFamily\": \"inherit\",\n            \"descriptionFontWeight\": \"400\",\n            \"descriptionFontSize\": {\n              \"value\": 21,\n              \"type\": \"px\"\n            },\n            \"textColor\": \"#444444\",\n            \"mobileTextColor\": \"#444444\",\n            \"buttonVisible\": \"show\",\n            \"buttonFont\": \"default\",\n            \"buttonFontFamily\": \"inherit\",\n            \"buttonStyle\": \"round\",\n            \"buttonColor\": \"#444444\",\n            \"mobileButtonColor\": \"#444444\",\n            \"buttonTextColor\": \"rgba(255,255,255,1)\",\n            \"mobileButtonTextColor\": \"rgba(255,255,255,1)\"\n          },\n          \"storefront_api_query_params\": {},\n          \"name\": \"Hero Banner\",\n          \"description\": \"\",\n          \"type\": \"widget\"\n        }\n      ]\n    },\n    {\n      \"name\": \"header_bottom\",\n      \"children\": [\n        {\n          \"layout_template_uuid\": \"7d42d0b1-1152-4ce3-a6c1-3709f786f295\",\n          \"configuration\": {\n            \"columnWeights\": [\n              \"33.333333%\",\n              \"33.333333%\",\n              \"33.333333%\"\n            ],\n            \"layoutBackgroundColor\": \"rgba(0,0,0,0)\",\n            \"layoutBackgroundImageAlignment\": {\n              \"horizontal\": \"center\",\n              \"vertical\": \"middle\"\n            },\n            \"layoutBackgroundImageFit\": \"fill\",\n            \"layoutBackgroundImageOpacity\": 100,\n            \"layoutBackgroundImageUrl\": \"\",\n            \"layoutBorderColor\": \"#333333\",\n            \"layoutBorderStyle\": \"solid\",\n            \"layoutBorderThickness\": 0,\n            \"layoutHeight\": \"\",\n            \"layoutMargin\": {\n              \"bottom\": {\n                \"type\": \"px\",\n                \"value\": \"0\"\n              },\n              \"left\": {\n                \"type\": \"px\",\n                \"value\": \"0\"\n              },\n              \"right\": {\n                \"type\": \"px\",\n                \"value\": \"0\"\n              },\n              \"top\": {\n                \"type\": \"px\",\n                \"value\": \"0\"\n              }\n            },\n            \"layoutPadding\": {\n              \"bottom\": {\n                \"type\": \"px\",\n                \"value\": \"0\"\n              },\n              \"left\": {\n                \"type\": \"px\",\n                \"value\": \"0\"\n              },\n              \"right\": {\n                \"type\": \"px\",\n                \"value\": \"0\"\n              },\n              \"top\": {\n                \"type\": \"px\",\n                \"value\": \"0\"\n              }\n            },\n            \"numberOfDropzones\": 3,\n            \"layoutBackgroundType\": \"\",\n            \"layoutZIndex\": \"auto\",\n            \"name\": \"Layout\"\n          },\n          \"name\": \"Layout\",\n          \"dropzones\": [\n            {\n              \"configuration\": {\n                \"dropzoneBackgroundColor\": \"rgba(0,0,0,0)\",\n                \"dropzoneBackgroundImageAlignment\": {\n                  \"horizontal\": \"center\",\n                  \"vertical\": \"middle\"\n                },\n                \"dropzoneBackgroundImageFit\": \"fill\",\n                \"dropzoneBackgroundImageOpacity\": 100,\n                \"dropzoneBackgroundImageUrl\": \"\",\n                \"dropzoneBorderColor\": \"#333333\",\n                \"dropzoneBorderStyle\": \"solid\",\n                \"dropzoneBorderThickness\": 0,\n                \"dropzoneHeight\": \"\",\n                \"dropzoneJustifyContent\": \"center\",\n                \"dropzoneMargin\": {\n                  \"bottom\": {\n                    \"type\": \"px\",\n                    \"value\": \"0\"\n                  },\n                  \"left\": {\n                    \"type\": \"px\",\n                    \"value\": \"0\"\n                  },\n                  \"right\": {\n                    \"type\": \"px\",\n                    \"value\": \"0\"\n                  },\n                  \"top\": {\n                    \"type\": \"px\",\n                    \"value\": \"0\"\n                  }\n                },\n                \"dropzonePadding\": {\n                  \"bottom\": {\n                    \"type\": \"px\",\n                    \"value\": \"0\"\n                  },\n                  \"left\": {\n                    \"type\": \"px\",\n                    \"value\": \"10.5\"\n                  },\n                  \"right\": {\n                    \"type\": \"px\",\n                    \"value\": \"10.5\"\n                  },\n                  \"top\": {\n                    \"type\": \"px\",\n                    \"value\": \"0\"\n                  }\n                },\n                \"dropzoneZIndex\": \"auto\",\n                \"dropzoneBackgroundType\": \"\"\n              },\n              \"widgets\": [\n                {\n                  \"widget_template_uuid\": \"e59c1412-2d85-4f18-ab4b-8a55412d945c\",\n                  \"configuration\": {\n                    \"productCardContentAlignment\": {\n                      \"horizontal\": \"center\"\n                    },\n                    \"productImage\": {\n                      \"visibility\": \"show\",\n                      \"imageFit\": \"fill\"\n                    },\n                    \"brand\": {\n                      \"visibility\": \"show\",\n                      \"textStyle\": \"default\",\n                      \"color\": \"#444444\"\n                    },\n                    \"productName\": {\n                      \"visibility\": \"show\",\n                      \"textStyle\": \"default\",\n                      \"color\": \"#444444\"\n                    }\n                  }\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Coupon Code for BigCommerce Promotion\nDESCRIPTION: HTTP request to create a coupon code 'WELCOME10' for an existing promotion. Requires the promotion ID from the previous promotion creation request.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/multi-currency.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/promotions/{{promotion_id}}/codes\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"code\": \"WELCOME10\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Channel-Specific Email Template in BigCommerce\nDESCRIPTION: This HTTP request demonstrates how to update a channel-specific email template override using the BigCommerce API. It includes a channel ID parameter and French language content.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/emails/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/marketing/email-templates?channel_id=123\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"type_id\": \"account_reset_password_email\",\n  \"body\": \"<!DOCTYPE html> <html lang=\\\"fr\\\"> <head>     <meta charset=\\\"UTF-8\\\">     <title>Title</title> </head> <body> <p>     {{lang \\\"reset_password\\\" name=store.name}} </p> <br/> <br/> <a href='{{account.reset_password_link}}'>     {{account.reset_password_link}} </a>  </body> </html>\",\n  \"translations\": [\n    {\n      \"locale\": \"fr\",\n      \"keys\": {\n        \"reset_password\": \"Pour modifier le mot de passe de votre compte client à {name}, veuillez cliquer sur ce lien ou le copier et le coller dans votre navigateur:\"\n      }\n    }\n  ],\n  \"subject\": \"Réinitialisez votre mot de passe sur {{store.name}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Client Secret and Verifying Webhook in Python\nDESCRIPTION: This snippet encodes the client secret in base64 and sets up an HTTP function to verify incoming webhooks using the Webhook class. It handles the webhook payload and headers, attempts verification, and returns the result.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/https-webhook-overview.mdx#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Encode the client secret in base64\nencoded_client_secret = base64.b64encode(client_secret.encode()).decode()\n\n@functions_framework.http\ndef hello_http(request):\n    webhook_payload = request.get_data()\n    webhook_headers = request.headers\n    print(str(webhook_payload))\n    print(str(webhook_headers))\n\n    result = 'no_result'\n    \n    # Use the encoded client secret\n    wh = Webhook(encoded_client_secret)\n    try:\n        result = str(wh.verify(webhook_payload, webhook_headers))\n        print('verified')\n    except Exception as e:\n        result = f\"Could not verify: {e}\"\n\n    print(result)\n    return result\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Content in BigCommerce Widget\nDESCRIPTION: This snippet shows how to create a widget that accepts and renders custom HTML content using a simple Handlebars template.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/examples.mdx#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{{{html}}}\n```\n\n----------------------------------------\n\nTITLE: Product Widget and Layout Configuration in JSON\nDESCRIPTION: Comprehensive JSON configuration for product page widgets including styling properties, product display settings, dropzone configurations, and layout parameters. Defines visibility, colors, dimensions, and behavior for product cards and their container elements.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/page-widgets/guide.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configuration\": {\n    \"dropzoneBackgroundColor\": \"rgba(0,0,0,0)\",\n    \"dropzoneBackgroundImageAlignment\": {\n      \"horizontal\": \"center\",\n      \"vertical\": \"middle\"\n    },\n    \"dropzoneBackgroundImageFit\": \"fill\",\n    \"dropzoneBackgroundImageOpacity\": 100,\n    \"dropzoneBackgroundImageUrl\": \"\",\n    \"dropzoneBorderColor\": \"#333333\",\n    \"dropzoneBorderStyle\": \"solid\",\n    \"dropzoneBorderThickness\": 0,\n    \"dropzoneHeight\": \"\",\n    \"dropzoneJustifyContent\": \"center\",\n    \"dropzoneMargin\": {\n      \"bottom\": {\n        \"type\": \"px\",\n        \"value\": \"0\"\n      },\n      \"left\": {\n        \"type\": \"px\", \n        \"value\": \"0\"\n      },\n      \"right\": {\n        \"type\": \"px\",\n        \"value\": \"0\"\n      },\n      \"top\": {\n        \"type\": \"px\",\n        \"value\": \"0\"\n      }\n    },\n    \"dropzonePadding\": {\n      \"bottom\": {\n        \"type\": \"px\",\n        \"value\": \"0\"\n      },\n      \"left\": {\n        \"type\": \"px\",\n        \"value\": \"10.5\"\n      },\n      \"right\": {\n        \"type\": \"px\",\n        \"value\": \"10.5\"\n      },\n      \"top\": {\n        \"type\": \"px\",\n        \"value\": \"0\"\n      }\n    },\n    \"dropzoneZIndex\": \"auto\",\n    \"dropzoneBackgroundType\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response from Adding Billing Address to Checkout\nDESCRIPTION: This response shows the checkout object after adding a billing address. It includes cart details, billing address information, tax calculations, and totals.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/rest-management.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": \"3cae6525-d0e8-4252-afec-0890fbb710c5\",\n    \"cart\": {\n      \"id\": \"3cae6525-d0e8-4252-afec-0890fbb710c5\",\n      \"customer_id\": 0,\n      \"channel_id\": 1,\n      \"email\": \"Test.user@email.com\",\n      \"currency\": {\n        \"code\": \"USD\"\n      },\n      \"tax_included\": false,\n      \"base_amount\": 30,\n      \"discount_amount\": 4.5,\n      \"cart_amount_inc_tax\": 25.5,\n      \"cart_amount_ex_tax\": 23.56,\n      \"coupons\": [],\n      \"line_items\": {\n        \"physical_items\": [\n          {\n            \"id\": \"ca9ef0d1-1da9-48e5-a505-7051eb575432\",\n            \"parent_id\": null,\n            \"variant_id\": 118,\n            \"product_id\": 120,\n            \"sku\": \"SM-13\",\n            \"name\": \"mug\",\n            \"url\": \"https://arabic-store.mybigcommerce.com/bigcommerce-coffee-mug/\",\n            \"quantity\": 2,\n            \"is_taxable\": true,\n            \"image_url\": \"https://cdn11.bigcommerce.com/r-4b20dad619e29ebf3490f7f35369a8220637ce48/themes/ClassicNext/images/ProductDefault.gif\",\n            \"coupons\": [],\n            \"discount_amount\": 0,\n            \"coupon_amount\": 0,\n            \"original_price\": 15,\n            \"list_price\": 15,\n            \"sale_price\": 13.858823529412,\n            \"extended_list_price\": 30,\n            \"extended_sale_price\": 27.717647058824,\n            \"is_require_shipping\": true,\n            \"gift_wrapping\": null,\n            \"is_mutable\": true\n          }\n        ],\n        \"digital_items\": [],\n        \"gift_certificates\": [],\n        \"custom_items\": []\n      },\n      \"created_time\": \"2023-09-28T20:30:33+00:00\",\n      \"updated_time\": \"2023-09-29T15:46:12+00:00\"\n    },\n    \"billing_address\": {\n      \"id\": \"6516f14419a81\",\n      \"first_name\": \"Test\",\n      \"last_name\": \"User\",\n      \"email\": \"Test.user@email.com\",\n      \"company\": \"BigCommerce\",\n      \"address1\": \"555 Main Street\",\n      \"address2\": \"\",\n      \"city\": \"Austin\",\n      \"state_or_province\": \"Texas\",\n      \"state_or_province_code\": \"TX\",\n      \"country\": \"United States\",\n      \"country_code\": \"US\",\n      \"postal_code\": \"78701\",\n      \"phone\": \"555-555-5555\",\n      \"custom_fields\": []\n    },\n    \"consignments\": [],\n    \"taxes\": [\n      {\n        \"name\": \"Texas Tax\",\n        \"amount\": 1.94\n      }\n    ],\n    \"coupons\": [],\n    \"order_id\": null,\n    \"shipping_cost_total_inc_tax\": 0,\n    \"shipping_cost_total_ex_tax\": 0,\n    \"handling_cost_total_inc_tax\": 0,\n    \"handling_cost_total_ex_tax\": 0,\n    \"tax_total\": 1.94,\n    \"subtotal_inc_tax\": 30,\n    \"subtotal_ex_tax\": 27.717647058823,\n    \"grand_total\": 25.5,\n    \"created_time\": \"2023-09-28T20:30:33+00:00\",\n    \"updated_time\": \"2023-09-29T15:46:12+00:00\",\n    \"customer_message\": \"\",\n    \"fees\": []\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Store App Extensions\nDESCRIPTION: GraphQL query to retrieve all App Extensions registered to the store, including their IDs, URLs, and models.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/app-extensions/guide.mdx#2025-04-16_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  store {\n    appExtensions {\n      edges {\n        node {\n          id\n          url\n          model\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Coupon with BigCommerce Marketing API\nDESCRIPTION: This snippet shows how to create a coupon using a POST request to the BigCommerce Marketing API. It includes the required headers and a JSON payload with coupon details such as name, type, code, amount, and the categories it applies to.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/draft/marketing-api-overview.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v2/coupons\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"name\": \"5% off order total\",\n  \"type\": \"per_item_discount\",\n  \"code\": \"4F75AF0C3802D39\",\n  \"enabled\": true,\n  \"amount\": \"5\",\n  \"applies_to\": {\n    \"entity\": \"categories\",\n    \"ids\": [\n      0\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting App Extension\nDESCRIPTION: GraphQL mutation to permanently delete an App Extension by ID. Returns the ID of the deleted extension.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/app-extensions/guide.mdx#2025-04-16_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nmutation AppExtension($input: DeleteAppExtensionInput!) {\n  appExtension {\n    deleteAppExtension(input: $input) {\n        deletedAppExtensionId\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"id\": \"bc/store/appExtension/2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Buy-Three-For-The-Price-Of-Two Promotion in BigCommerce API\nDESCRIPTION: Example JSON request for creating a 'buy 2, get 1 free' promotion. When a customer purchases at least 2 of product ID 129, they receive 1 of product ID 130 for free (100% discount).\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/product.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy three for the price of two\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"apply_once\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"products\": [\n              129\n            ]\n          },\n          \"minimum_quantity\": 2\n        }\n      },\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"percentage_amount\": \"100\"\n          },\n          \"items\": {\n            \"products\": [\n              130\n            ]\n          },\n          \"quantity\": 1\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Plucking Values from Collections - JavaScript\nDESCRIPTION: Uses a search key to extract values from an array of objects or collections.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction pluck(arr, key) { return arr.map(item => item[key]); }\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure of BigCommerce Documentation Repository\nDESCRIPTION: This code snippet shows the directory structure of the BigCommerce documentation repository, highlighting the organization of files and folders including GitHub workflows, assets, documentation, API specifications, and configuration files.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n.\n├── .github/                           # github config\n    └── workflows/                     # workflows to lint pull requests, etc.\n    └── ...\n├── .idea/                             # directory ignored by git - use for yourself\n├── .style/                            # CSPELL data files\n├── assets/ \n    ├── csv/                           # static files used in docs\n    ├── images/                        # images and screenshots\n    ├── json/                          # theme translation files\n    └── PO/\n├── diataxis-templates/                # templates for contributing to our documentation                             \n├── docs                               # narrative documentation\n    ├── api-docs/                      \n    ├── bigcommerce-for-wordpress/     \n    ├── legacy/                        # Blueprint and V2 API docs\n    ├── msf/                           # MSF docs\n    ├── partner-apps/                  # docs for some partner integrations\n    └── stencil-docs/   \n├── examples                           # example data for Stencil Handlebars context objects\n├── models                             # JSON schemas in YAML\n    ├── _root                          # YAML schemas for root Stencil Handlebars context objects\n    ├── ...\n├── reference/                         # OpenAPI specification files\n    ├── catalog/                       # catalog OAS API reference\n    ├── payments/                      # payments OAS API reference\n    └── ...                            # other OAS API reference\n├── theme-styles          \n    ├── _root                          # MDX files for Stencil style configuration options\n├── .cspell.json  \n├── .eslintrc.json                     # config for MDX linter\n├── .gitignore                         # gitignore\n├── .nojekyll    \n├── .nvmrc                             # config for NVM\n├── .spectral.yaml                     # config for OAS linter\n├── CODE_OF_CONDUCT.md                 # Code of Conduct for participants\n├── CONTRIBUTING.md                    # guidelines for contribution\n├── package-lock.json                  \n├── package.json                       \n├── pull_request_template.md           # template for most pull requests\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Complexity Error Response\nDESCRIPTION: This JSON snippet shows an example error response from the BigCommerce GraphQL API when a query exceeds the complexity limit. It indicates that the query's complexity score is higher than the allowed limit and suggests reducing the number of elements in the query.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/index.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"message\": \"The query is too complex as it has a complexity score of 12230 out of 10000. Please remove some elements and try again\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Checkout Page Template\nDESCRIPTION: Full HTML template for the checkout page including header configuration, SDK initialization, and page layout.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/checkout-sdk/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{{#partial \"head\"}}\n\n{{{ checkout.checkout_head }}}\n{{{ stylesheet '/assets/css/optimized-checkout.css' }}}\n{{ getFontsCollection }}\n\n<script type=\"text/javascript\">\n     window.language = {{{langJson 'optimized_checkout'}}};\n</script>\n\n{{{head.scripts}}}\n\n{{/partial}}\n\n{{#partial \"page\"}}\n\n<script src=\"https://checkout-sdk.bigcommerce.com/v1/loader.js\"></script>\n\n<script>\n    const initSdk = async () => {\n        window.module = await checkoutKitLoader.load('checkout-sdk');\n        window.service = module.createCheckoutService();\n        window.state = await service.loadCheckout('{{{ checkout.id }}}');\n        };\n       initSdk();\n</script>\n\n<header class=\"checkoutHeader optimizedCheckout-header\">\n     <div class=\"checkoutHeader-content\">\n          <h1 class=\"is-srOnly\">{{lang 'checkout.title'}}</h1>\n          <h2 class=\"checkoutHeader-heading\">\n              <a class=\"checkoutHeader-link\" href=\"{{urls.home}}\">\n                 {{#if checkout.header_image}}\n                       <img alt=\"{{settings.store_logo.title}}\" class=\"checkoutHeader-logo\" id=\"logoImage\" src=\"{{ checkout.header_image }}\"/>\n                 {{ else }}\n                       <span class=\"header-logo-text\">{{settings.store_logo.title}}</span>\n                 {{/if}}\n              </a>\n          </h2>\n     </div>\n</header>\n\n\n{{{ checkout.checkout_content }}}\n\n{{{ footer.scripts }}}\n\n{{/partial}}\n\n{{> layout/empty}}\n```\n\n----------------------------------------\n\nTITLE: Querying Product SEO Information with GraphQL in BigCommerce\nDESCRIPTION: This GraphQL query retrieves product SEO information, including global information for the store and overrides for a specified channel and locale. It requires the product ID, channel ID, and locale as input.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-seo-info.mdx#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\nquery {\n  store {\n    product (id: \"bc/store/product/111\") {\n      id\n      seoInformation {\n        pageTitle\n        metaDescription\n      }\n      overridesForLocale(localeContext: { channelId: \"bc/store/channel/2\", locale: \"fr\" }) {\n        seoInformation {\n          pageTitle\n          metaDescription\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring an Image Slider Widget in BigCommerce JSON\nDESCRIPTION: This JSON configuration sets up an image slider widget with specific images and widget identification details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/examples.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Home Page Slider\",\n  \"widget_configuration\": {\n    \"slides\": [\n      {\n        \"image\": \"https://upload.wikimedia.org/wikipedia/commons/3/3f/Puppy_French_Bulldog.jpg\"\n      },\n      {\n        \"image\": \"https://upload.wikimedia.org/wikipedia/commons/c/c1/2009-04-21_APBT_pup_on_deck.jpg\"\n      },\n      {\n        \"image\": \"https://upload.wikimedia.org/wikipedia/commons/e/e7/Beagle_puppy_Cadet.jpg\"\n      }\n    ]\n  },\n  \"widget_template_uuid\": \"your-widget-id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating 3% Guest Customer Discount in BigCommerce\nDESCRIPTION: Example showing how to create a 3% automatic discount specifically for guest customers or customers not assigned to any group (group_id: 0).\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/customer.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"3% off for guest customers or customers not assigned to any group\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"customer\": {\n    \"group_ids\": [\n      0\n    ]\n  },\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_value\": {\n          \"discount\": {\n            \"percentage_amount\": \"3\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Widget via REST API in BigCommerce\nDESCRIPTION: HTTP request to create a widget using the BigCommerce REST Content API. This request associates a widget with a template UUID and assigns it a name.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/graphql-templates.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/content/widgets\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"name\": \"Product Widget\",\n  \"widget_template_uuid\": \"{{TEMPLATE_UUID}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Checkout Response - JSON\nDESCRIPTION: This JSON response shows the structure of the data returned by the checkout query. It includes all relevant details such as entity IDs, costs, created/updated timestamps, and any applied coupons or promotions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/graphql-storefront.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"checkout\": {\n        \"entityId\": \"bb916deb-ddd6-4586-b65b-b8385e0e7a9d\",\n        \"billingAddress\": null,\n        \"shippingConsignments\": [],\n        \"order\": null,\n        \"shippingCostTotal\": {\n          \"value\": 0,\n          \"currencyCode\": \"USD\"\n        },\n        \"giftWrappingCostTotal\": {\n          \"value\": 0,\n          \"currencyCode\": \"USD\"\n        },\n        \"handlingCostTotal\": {\n          \"value\": 0,\n          \"currencyCode\": \"USD\"\n        },\n        \"taxTotal\": {\n          \"value\": 0,\n          \"currencyCode\": \"USD\"\n        },\n        \"taxes\": [\n          {\n            \"name\": \"Tax\",\n            \"amount\": {\n              \"value\": 0,\n              \"currencyCode\": \"USD\"\n            }\n          }\n        ],\n        \"subtotal\": {\n          \"value\": 59.95,\n          \"currencyCode\": \"USD\"\n        },\n        \"grandTotal\": {\n          \"value\": 59.95,\n          \"currencyCode\": \"USD\"\n        },\n        \"createdAt\": {\n          \"utc\": \"2023-06-01T17:45:23Z\"\n        },\n        \"updatedAt\": {\n          \"utc\": \"2023-06-01T19:07:15Z\"\n        },\n        \"customerMessage\": \"\",\n        \"outstandingBalance\": {\n          \"value\": 59.95,\n          \"currencyCode\": \"USD\"\n        },\n        \"coupons\": [],\n        \"promotions\": []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Management in PHP\nDESCRIPTION: Demonstrates how to access channel information using the Connections object\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/themes/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$connections = new \\BigCommerce\\Taxonomies\\Channel\\Connections();\n$channel     = $connections->current();\n```\n\n----------------------------------------\n\nTITLE: Limiting Array to Second Argument - JavaScript\nDESCRIPTION: Limits an array to the second argument, reducing its length based on the specified limit.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction limit(arr, num) { return arr.slice(0, num); }\n```\n\n----------------------------------------\n\nTITLE: Using getImageManagerImageSrcset Helper in Handlebars\nDESCRIPTION: Demonstrates how to use the getImageManagerImageSrcset helper to generate srcset attribute values for responsive images stored in the BigCommerce Image Manager. The helper creates multiple resolution variants for an image.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_52\n\nLANGUAGE: handlebars\nCODE:\n```\n{{getImageManagerImageSrcset \"asset.jpg\"}}\n<!-- =>\nhttps://cdn.bcapp/3dsf74g/images/stencil/80w/image-manager/asset.jpg 80w, https://cdn.bcapp/3dsf74g/images/stencil/160w/image-manager/asset.jpg 160w, https://cdn.bcapp/3dsf74g/images/stencil/320w/image-manager/asset.jpg 320w, https://cdn.bcapp/3dsf74g/images/stencil/640w/image-manager/asset.jpg 640w, https://cdn.bcapp/3dsf74g/images/stencil/960w/image-manager/asset.jpg 960w, https://cdn.bcapp/3dsf74g/images/stencil/1280w/image-manager/asset.jpg 1280w, https://cdn.bcapp/3dsf74g/images/stencil/1920w/image-manager/asset.jpg 1920w, https://cdn.bcapp/3dsf74g/images/stencil/2560w/image-manager/asset.jpg 2560w  -->\n\n{{getImageManagerImageSrcset \"folder/asset.jpg\"}}\n <!-- =>\nhttps://cdn.bcapp/3dsf74g/images/stencil/80w/image-manager/folder/asset.jpg 80w, https://cdn.bcapp/3dsf74g/images/stencil/160w/image-manager/folder/asset.jpg 160w, https://cdn.bcapp/3dsf74g/images/stencil/320w/image-manager/folder/asset.jpg 320w, https://cdn.bcapp/3dsf74g/images/stencil/640w/image-manager/folder/asset.jpg 640w, https://cdn.bcapp/3dsf74g/images/stencil/960w/image-manager/folder/asset.jpg 960w, https://cdn.bcapp/3dsf74g/images/stencil/1280w/image-manager/folder/asset.jpg 1280w, https://cdn.bcapp/3dsf74g/images/stencil/1920w/image-manager/folder/asset.jpg 1920w, https://cdn.bcapp/3dsf74g/images/stencil/2560w/image-manager/folder/asset.jpg 2560w -->\n```\n\n----------------------------------------\n\nTITLE: Adding Payment Buttons Settings to config.json\nDESCRIPTION: This JSON snippet demonstrates how to append payment button settings to the 'settings' object within the config.json file to enable PayPal Smart Buttons for a Stencil theme. It includes color, layout, and other customizable properties.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/checkout-enhancements/paypal-smart-buttons.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"settings\": {\n    \"...\"\n    \"color_badge_product_sale_badges\": \"#007dc6\",\n    \"color_text_product_sale_badges\": \"#ffffff\",\n    \"color_hover_product_sale_badges\": \"#000000\",\n    \"restrict_to_login\": false,\n    \"swatch_option_size\": \"22x22\",\n    \"social_icon_placement_top\": false,\n    \"social_icon_placement_bottom\": \"bottom_none\",\n    \"geotrust_ssl_common_name\": \"\",\n    \"geotrust_ssl_seal_size\": \"M\",\n    \"navigation_design\": \"simple\",\n    \"price_ranges\": true,\n    \"pdp-price-label\": \"\",\n    \"pdp-sale-price-label\": \"Now:\",\n    \"pdp-non-sale-price-label\": \"Was:\",\n    \"pdp-retail-price-label\": \"MSRP:\",\n    \"paymentbuttons-paypal-layout\": \"horizontal\",\n    \"paymentbuttons-paypal-color\": \"gold\",\n    \"paymentbuttons-paypal-shape\": \"pill\",\n    \"paymentbuttons-paypal-size\": \"small\",\n    \"paymentbuttons-paypal-label\": \"checkout\",\n    \"paymentbuttons-paypal-tagline\": true,\n    \"paymentbuttons-paypal-fundingicons\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Packages in TypeScript\nDESCRIPTION: Imports necessary Firebase packages and TypeScript definitions for database operations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initializeApp } from 'firebase/app';\nimport { deleteDoc, doc, getDoc, getFirestore, setDoc, updateDoc } from 'firebase/firestore';\nimport { SessionProps, UserData } from '../../types';\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Builder Compatible Widget Template\nDESCRIPTION: JSON template for creating a widget that's compatible with BigCommerce's Page Builder, including schema configuration for customizable header images.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\":\"Header Images\",\n   \"template\":\"{{#each images}}<a href='{{link}}'><img src={{imageUrl.src}} style='width:33.3%'/></a>{{/each}}\",\n   \"schema\":[\n      {\n         \"type\":\"array\",\n         \"label\":\"Images\",\n         \"id\":\"images\",\n         \"defaultCount\":3,\n         \"entryLabel\":\"Image\",\n         \"thumbnail\":\"imageUrl.src\",\n         \"schema\":[\n            {\n               \"type\":\"tab\",\n               \"label\":\"Content\",\n               \"sections\":[\n                  {\n                     \"settings\":[\n                        {\n                           \"type\":\"imageManager\",\n                           \"id\":\"imageUrl\",\n                           \"default\":{\n                              \"src\":\"https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/1280x1280/products/109/361/kinfolkessentialissue_1024x1024__22507.1456436715.jpg?c=2&imbypass=on\",\n                              \"type\":\"IMAGE_MANAGER\"\n                           }\n                        },\n                        {\n                           \"label\":\"Link\",\n                           \"type\":\"input\",\n                           \"id\":\"link\",\n                           \"default\":\"#\"\n                        }\n                     ]\n                  }\n               ]\n            }\n         ]\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Admin API Configuration\nDESCRIPTION: HTTP configuration for making GraphQL Admin API requests to BigCommerce, including required headers and endpoint structure.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/app-extensions/guide.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/graphql\nX-Auth-Token: {{access_token}}\nAccept: application/json\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: BigCommerce App Extensions Postman Collection Configuration\nDESCRIPTION: Complete Postman collection configuration containing GraphQL queries and mutations for App Extensions API operations. Includes authentication setup, environment variables, and request templates for managing app extensions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/app-extensions/postman.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"info\": {\n\t\t\"_postman_id\": \"e4f08356-fc98-4b78-8ccd-edb6e88ab7b2\",\n\t\t\"name\": \"BigCommerce App Extensions\",\n\t\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\",\n\t\t\"_exporter_id\": \"18111578\"\n\t},\n\t\"item\": [\n\t\t{\n\t\t\t\"name\": \"get a store's app extensions\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"graphql\",\n\t\t\t\t\t\"graphql\": {\n\t\t\t\t\t\t\"query\": \"query {\\n    store {\\n        appExtensions {\\n            edges {\\n                node {\\n                    id\\n                    url\\n                    context\\n                    model\\n                }\\n            }\\n        }\\n    }\\n}\",\n\t\t\t\t\t\t\"variables\": \"\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"https://api.bigcommerce.com/stores/{{store_hash}}/graphql\",\n\t\t\t\t\t\"protocol\": \"https\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"api\",\n\t\t\t\t\t\t\"bigcommerce\",\n\t\t\t\t\t\t\"com\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"stores\",\n\t\t\t\t\t\t\"{{store_hash}}\",\n\t\t\t\t\t\t\"graphql\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"create an app extension\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"graphql\",\n\t\t\t\t\t\"graphql\": {\n\t\t\t\t\t\t\"query\": \"mutation AppExtension($input: CreateAppExtensionInput!) {\\n  appExtension {\\n    createAppExtension(input: $input) {\\n      appExtension {\\n        id\\n        context\\n        label {\\n          defaultValue\\n          locales {\\n            value\\n            localeCode\\n          }\\n        }\\n        model\\n        url\\n      }\\n    }\\n  }\\n}\",\n\t\t\t\t\t\t\"variables\": \"{\\n  \\\"input\\\": {\\n    \\\"context\\\": \\\"PANEL\\\",\\n    \\\"model\\\": \\\"CUSTOMERS\\\",\\n    \\\"url\\\": \\\"/customers/${id}\\\",\\n    \\\"label\\\": {\\n      \\\"defaultValue\\\": \\\"Link Text\\\",\\n      \\\"locales\\\": [\\n        {\\n          \\\"value\\\": \\\"Link Text\\\",\\n          \\\"localeCode\\\": \\\"en-US\\\"\\n        },\\n        {\\n          \\\"value\\\": \\\"Texto del enlace\\\",\\n          \\\"localeCode\\\": \\\"es-MX\\\"\\n        },\\n        {\\n          \\\"value\\\": \\\"Texte du lien\\\",\\n          \\\"localeCode\\\": \\\"fr-FR\\\"\\n        }\\n      ]\\n    }\\n  }\\n}\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"https://api.bigcommerce.com/stores/{{store_hash}}/graphql\",\n\t\t\t\t\t\"protocol\": \"https\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"api\",\n\t\t\t\t\t\t\"bigcommerce\",\n\t\t\t\t\t\t\"com\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"stores\",\n\t\t\t\t\t\t\"{{store_hash}}\",\n\t\t\t\t\t\t\"graphql\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"update an app extension\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"graphql\",\n\t\t\t\t\t\"graphql\": {\n\t\t\t\t\t\t\"query\": \"mutation AppExtension($input: UpdateAppExtensionInput!) {\\n  appExtension {\\n    updateAppExtension(input: $input) {\\n      appExtension {\\n        id\\n        url\\n      }\\n    }\\n  }\\n}\",\n\t\t\t\t\t\t\"variables\": \"{\\n    \\\"input\\\": {\\n        \\\"id\\\": \\\"bc/store/appExtension/5\\\",\\n        \\\"data\\\": {\\n            \\\"url\\\": \\\"/customers/profile/${id}\\\"\\n        }   \\n    }\\n}\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"https://api.bigcommerce.com/stores/{{store_hash}}/graphql\",\n\t\t\t\t\t\"protocol\": \"https\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"api\",\n\t\t\t\t\t\t\"bigcommerce\",\n\t\t\t\t\t\t\"com\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"stores\",\n\t\t\t\t\t\t\"{{store_hash}}\",\n\t\t\t\t\t\t\"graphql\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"delete an app extension\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"graphql\",\n\t\t\t\t\t\"graphql\": {\n\t\t\t\t\t\t\"query\": \"mutation AppExtension($input: DeleteAppExtensionInput!) {\\n  appExtension {\\n    deleteAppExtension(input: $input) {\\n        deletedAppExtensionId\\n    }\\n  }\\n}\",\n\t\t\t\t\t\t\"variables\": \"{\\n    \\\"input\\\": {\\n        \\\"id\\\": \\\"bc/store/appExtension/5\\\" \\n    }\\n}\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"https://api.bigcommerce.com/stores/{{store_hash}}/graphql\",\n\t\t\t\t\t\"protocol\": \"https\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"api\",\n\t\t\t\t\t\t\"bigcommerce\",\n\t\t\t\t\t\t\"com\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"stores\",\n\t\t\t\t\t\t\"{{store_hash}}\",\n\t\t\t\t\t\t\"graphql\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t}\n\t],\n\t\"auth\": {\n\t\t\"type\": \"apikey\",\n\t\t\"apikey\": [\n\t\t\t{\n\t\t\t\t\"key\": \"value\",\n\t\t\t\t\"value\": \"{{access_token}}\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"key\": \"key\",\n\t\t\t\t\"value\": \"X-Auth-Token\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t]\n\t},\n\t\"event\": [\n\t\t{\n\t\t\t\"listen\": \"prerequest\",\n\t\t\t\"script\": {\n\t\t\t\t\"type\": \"text/javascript\",\n\t\t\t\t\"exec\": [\n\t\t\t\t\t\"\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"listen\": \"test\",\n\t\t\t\"script\": {\n\t\t\t\t\"type\": \"text/javascript\",\n\t\t\t\t\"exec\": [\n\t\t\t\t\t\"\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t],\n\t\"variable\": [\n\t\t{\n\t\t\t\"key\": \"access_token\",\n\t\t\t\"value\": \"\",\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"store_hash\",\n\t\t\t\"value\": \"\",\n\t\t\t\"type\": \"string\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Translations with lang Helper\nDESCRIPTION: Helper for mapping translation keys to localized strings based on visitor's browser locale. Supports optional parameters for string interpolation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_45\n\nLANGUAGE: handlebars\nCODE:\n```\n{{lang translationKey}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<label class=\"form-label\" for=\"search_query_adv\">\n  {{lang 'forms.search.query' }}\n  <small>{{lang 'common.required' }}</small>\n</label>\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<!-- context = {name: 'BigCommerce'} -->\n{{lang 'powered_by' name=name}}\n<!-- => Powered By BigCommerce -->\n```\n\n----------------------------------------\n\nTITLE: Adding Nonce Handlebar to Custom Script (HTML)\nDESCRIPTION: This example demonstrates how to add the nonce handlebar to a custom script tag in Stencil theme files. The nonce provides a unique, one-time-use random code for script verification.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/open-checkouts/pci-compliance-guide.mdx#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script nonce=\"{{nonce}}\">console.log(\"this is a sample nonce\"); </script>\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies\nDESCRIPTION: Command to install TypeScript and other development dependencies\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-setup.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev babel-plugin-styled-components @types/node @types/react @types/react-dom @types/styled-components typescript\n```\n\n----------------------------------------\n\nTITLE: Pickup Options API Response in JSON\nDESCRIPTION: JSON response from the Find Available Pickup Options endpoint, showing available pickup methods and items. The response includes pickup method details (location ID, display name, instructions) and information about available items.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/checkout.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"pickup_options\": [\n        {\n          \"pickup_method\": {\n            \"id\": 1,\n            \"location_id\": 1,\n            \"display_name\": \"Office Pickup\",\n            \"collection_instructions\": \"Bring your ID\",\n            \"collection_time_description\": \"Collect during our opening hours of 0900 - 1700\"\n          },\n          \"available_items\": [\n            {\n              \"variant_id\": 1,\n              \"quantity\": 1\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Response from Spend Threshold Free Gift Promotion Creation in BigCommerce API\nDESCRIPTION: The API response showing the successful creation of a promotion that gives a free product when customers spend a minimum amount on a specific brand. The response includes promotion ID 9, configuration details, and shows the promotion is enabled starting July 15, 2022.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/brand.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 9,\n    \"name\": \"Spend $X on brand Y and get product Z for free\",\n    \"created_from\": \"api\",\n    \"customer\": {\n      \"group_ids\": [],\n      \"minimum_order_count\": 0,\n      \"excluded_group_ids\": [],\n      \"segments\": null\n    },\n    \"rules\": [\n      {\n        \"action\": {\n          \"gift_item\": {\n            \"quantity\": 1,\n            \"product_id\": 130\n          }\n        },\n        \"apply_once\": false,\n        \"stop\": false,\n        \"condition\": {\n          \"cart\": {\n            \"items\": {\n              \"brands\": [\n                38\n              ]\n            },\n            \"minimum_spend\": \"10\"\n          }\n        }\n      }\n    ],\n    \"notifications\": [],\n    \"stop\": false,\n    \"currency_code\": \"USD\",\n    \"redemption_type\": \"AUTOMATIC\",\n    \"shipping_address\": null,\n    \"current_uses\": 0,\n    \"max_uses\": null,\n    \"start_date\": \"2022-07-15T21:15:28+00:00\",\n    \"end_date\": null,\n    \"status\": \"ENABLED\",\n    \"schedule\": null,\n    \"can_be_used_with_other_promotions\": true\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tab HTML Structure (External Content)\nDESCRIPTION: HTML structure for creating dynamic tabs with content loaded from an external file. This approach allows tabs to share content across multiple pages without duplication.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/dynamic-content-rendering.mdx#2025-04-16_snippet_4\n\nLANGUAGE: handlebars\nCODE:\n```\n<div class=\"gr-tab\" data-gr-content=\"CONTENT URL\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Microapp Initialization\nDESCRIPTION: These TypeScript interfaces declare the configuration structure expected by the `renderAccountPayments` method. They define various types, including styles options, store context data, and payment provider initialization data, to ensure type safety and proper initialization of the microapp.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/checkout-enhancements/stored-payment-methods.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AppConfigInterface {\n  styles?: AppStyles;\n  storeContextData: StoreContextDataInterface;\n  errorHandler(error: string): void;\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AppStyles {\n    inputBase?: CSSProperties;\n    inputValidationError?: CSSProperties;\n    inputValidationSuccess?: CSSProperties;\n    submitButton?: CSSProperties;\n    cancelButton?: CSSProperties;\n    label?: CSSProperties;\n    inputWrapper?: CSSProperties;\n    validationError?: CSSProperties;\n    heading?: CSSProperties;\n    formRow?: CSSProperties;\n    formActions?: CSSProperties;\n}\n\ninterface StoreContextDataInterface {\n    countries: Country[];\n    paymentsUrl: string;\n    storeHash: string;\n    storeLocale: string;\n    vaultToken: string;\n    shopperId: string;\n    customerEmail: string;\n    providerId: PaymentProviders;\n    currencyCode: string;\n    paymentMethodsUrl: string;\n    paymentProviderInitializationData: PaymentProviderInitializationData;\n}\n\ntype PaymentProviderInitializationData =\n  AdyenV2InitializationData\n  | AdyenV3InitializationData;\n\ninterface AdyenV2InitializationData {\n    clientKey?: string;\n    environment: string;\n    gateway: string;\n    originKey: string;\n}\n\ninterface AdyenV3InitializationData {\n    clientKey: string;\n    environment: string;\n    gateway: string;\n    originKey?: string;\n}\n\ninterface Country {\n    code: string;\n    label: string;\n    states?: State[];\n    value: string;\n}\n\ninterface State {\n    code: string;\n    name: string;\n    value: string;\n}\n\nenum PaymentProviders {\n    Adyenv2 = 'adyenv2',\n    Adyenv3 = 'adyenv3',\n}\n\n```\n\n----------------------------------------\n\nTITLE: Switching Channels Based on Query String\nDESCRIPTION: A filter for switching the current BigCommerce channel based on the 'region' query parameter, displaying the appropriate channel and adjusting the currency.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/platform-integration/multi-channel.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'bigcommerce/channel/current', function( $channel ) {\n\n    // add logic here to determine the channel to use\n    // note: replace '31' with the WordPress term_id of your connected channel\n    return get_term( 31, \\BigCommerce\\Taxonomies\\Channel\\Channel::NAME );\n});\n```\n\n----------------------------------------\n\nTITLE: Using contains Helper for Collection Checking in Handlebars\nDESCRIPTION: Demonstrates the contains helper which renders a block if a collection has a specific value, using strict equality for comparison.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_60\n\nLANGUAGE: handlebars\nCODE:\n```\n{{contains collection value}}\n```\n\n----------------------------------------\n\nTITLE: Referencing Image Assets in Stencil Handlebars Templates\nDESCRIPTION: Demonstrates how to use the Stencil 'cdn' Handlebars helper to reference image assets in theme templates. This approach ensures proper asset loading in the BigCommerce storefront.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/style/assets.mdx#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"{{cdn 'assets/img/image.jpg'}}\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"{{cdn 'assets/img/size-chart.png'}}\">\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment with assignVar Helper in Handlebars\nDESCRIPTION: Shows how to use the assignVar helper to assign a variable for later use in the template. It has a limit of 50 variables in storage and takes two parameters: the key and the value to assign.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_102\n\nLANGUAGE: handlebars\nCODE:\n```\n{{assignVar key value}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{assignVar \"foo\" 10}}\n```\n\n----------------------------------------\n\nTITLE: Deleting Location Translations using GraphQL\nDESCRIPTION: GraphQL mutation to delete specific field translations for a location resource. Allows removal of translations for selected fields from a specified location.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/translations/locations.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  translation {\n    deleteTranslations(input: {\n      resourceType: INVENTORY_LOCATIONS,\n      channelId: \"bc/store/channel/1\",\n      localeId: \"bc/store/locale/en\",\n      resources: [\n          {\n              resourceId: \"bc/store/inventoryLocation/2\",\n              fields: [\"city\", \"state\"],\n          }\n      ]\n  }) {\n      __typename\n      errors {\n          __typename\n          ... on Error {\n              message\n          }\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Currency Information in BigCommerce API\nDESCRIPTION: This JSON snippet shows the structure of currency-related fields returned when retrieving order information via the BigCommerce API. It includes fields for currency codes, exchange rates, and default currency information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/currencies/guide.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  //...   \n  \"currency_id\": 4,\n  \"currency_code\": \"EUR\",\n  \"currency_exchange_rate\": 1,\n  \"default_currency_id\": 4,\n  \"default_currency_code\": \"EUR\",\n  \"store_default_currency_code\": \"USD\",\n  \"store_default_to_transactional_exchange_rate\": \"100.0000000000\"\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Key-Value Pairs in JSON\nDESCRIPTION: Example of how to structure translation key-value pairs in a JSON file for a Stencil theme. This snippet shows grouping of keys into objects for different sections of the storefront.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/translation-keys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"header\": {\n    \"welcome_back\": \"Welcome back, {name}\"\n    },\n  \"prelaunch\": {\n    \"coming_soon\": \"Coming Soon\",\n    \"intro\": \"This store will be launching shortly. Please visit again!\"\n    },\n  \"cart\": {\n    \"items\": \"{NUM, plural, =0{(0 items)} one {(# item)} other {(# items)}}\",\n    \"label\": \"Your Cart ({quantity, plural, one {# item} other {# items}})\",\n    \"is_empty\": \"Your cart is empty\",\n    \"coupon_code\": \"Coupon Code\",\n    \"discount\": \"Discount\",\n    \"gift_certificate\": \"Gift Certificate\",\n    \"freeshipping\": \"Free Shipping\",\n    \"shipping_peritem\": \"Per Item Shipping\",\n    \"shipping_estimator\": {\n      \"add_info\": \"Add Info\",\n      \"select_a_country\": \"Country\",\n      \"select_a_state\": \"State/province\",\n      \"estimate_shipping\": \"Estimate Shipping\"\n      }\n    },\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Pickup Method for a Location in BigCommerce\nDESCRIPTION: This HTTP request creates a new pickup method (curbside pickup) and assigns it to an existing location. The request includes display name, collection instructions, and time description for the pickup option.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/pickup/methods\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"location_id\": 1,\n    \"display_name\": \"Curbside pickup\",\n    \"collection_instructions\": \"See our staff member outside the store\",\n    \"collection_time_description\": \"Wait for a pickup confirmation and visit during business hours.\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Cart Shortcode Implementation\nDESCRIPTION: WordPress shortcode for displaying the BigCommerce shopping cart on a page.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/start/plugin-settings.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shortcode\nCODE:\n```\n[bigcommerce_cart]\n```\n\n----------------------------------------\n\nTITLE: Updating Inventory Settings by Variant\nDESCRIPTION: Shows how to update inventory settings like warning level and safety stock for variants at a specific location.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/locations/{location_id}/items\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"settings\": [\n    {\n      \"identity\": {\n        \"variant_id\": 78\n      },\n      \"safety_stock\": 2,\n      \"warning_level\": 5\n    },\n    {\n      \"identity\": {\n        \"variant_id\": 79\n      },\n      \"safety_stock\": 2,\n      \"warning_level\": 5\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transaction_id\": \"6e172496-b0bb-46d5-adf5-855ba901cae7\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response with BigCommerce Cart Redirect URLs\nDESCRIPTION: JSON response containing the generated redirect URLs for the cart and checkout pages. These URLs allow customers to be directed to BigCommerce-hosted cart and checkout pages from a headless storefront.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/rest-management.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"cart_url\": \"https://test-store.mybigcommerce.com/cart.php?action=load&id=3cae6525-d0e8-4252-afec-0890fbb710c5&token=888dbf8bc89d5bc925ed40d39996387574f8deceaf759c64c101679d1f164f4f\",\n    \"checkout_url\": \"https://test-store.mybigcommerce.com/cart.php?action=loadInCheckout&id=3cae6525-d0e8-4252-afec-0890fbb710c5&token=888dbf8bc89d5bc925ed40d39996387574f8deceaf759c64c101679d1f164f4f\",\n    \"embedded_checkout_url\": \"https://test-store.mybigcommerce.com/cart.php?embedded=1&action=loadInCheckout&id=3cae6525-d0e8-4252-afec-0890fbb710c5&token=888dbf8bc89d5bc925ed40d39996387574f8deceaf759c64c101679d1f164f4f\"\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Update Product Modifier Value with Price Adjuster\nDESCRIPTION: Updates an existing product modifier value to add a relative price adjustment of $5 when the option is selected.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/index.mdx#2025-04-16_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products/{{product_id}}/modifiers/{{modifier_id}}/values/{value_id}\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n    \"option_values\": [\n        {\n            \"id\": {existing value ID},\n            \"is_default\": false,\n            \"adjusters\": {\n                \"price\": {\n                    \"adjuster\": \"relative\",\n                    \"adjuster_value\": 5\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Absolute Inventory Adjustment Response from BigCommerce API (JSON)\nDESCRIPTION: This JSON response example shows the structure of the data returned when making an absolute adjustment to inventory. It includes a transaction ID for tracking the adjustment.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transaction_id\": \"6e172496-b0bb-46d5-adf5-855ba901cae7\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Resource Hints for Google Fonts\nDESCRIPTION: Helper that outputs DNS prefetch and preconnect link tags for Google Fonts optimization.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_43\n\nLANGUAGE: handlebars\nCODE:\n```\n{{resourceHints}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{resourceHints}}\n<!-- => <link rel=\"dns-prefetch preconnect\" href=\"https://fonts.googleapis.com\" crossorigin><link rel=\"dns-prefetch preconnect\" href=\"https://fonts.gstatic.com\" crossorigin> -->\n```\n\n----------------------------------------\n\nTITLE: Converting Newlines to BR Tags with nl2br Helper\nDESCRIPTION: Helper function that converts newline characters in text to HTML <br> tags. Takes a text string parameter and outputs formatted HTML.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_41\n\nLANGUAGE: handlebars\nCODE:\n```\n{{nl2br text}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{nl2br settings.address}}\n<!-- => <br>685 Market St<br>San Francisco<br>94105<br>CA<br> -->\n```\n\n----------------------------------------\n\nTITLE: Filtering Store Logs by Type - HTTP Request\nDESCRIPTION: Makes a GET request to retrieve store log entries filtered by type using the type query parameter.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/settings/logs.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/store/systemlogs?type=shipping\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Updating a Customer using BigCommerce V2 API (HTTP)\nDESCRIPTION: This snippet shows how to update a customer's information using the BigCommerce V2 API. It includes the necessary headers and JSON payload structure for a PUT request to a specific customer group.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/customers/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v2/customer_groups/{{customer_group_id}}\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"first_name\": \"Jane\",\n  \"email\": \"jane@example.com\",\n  \"phone\": \"1234567890\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response Schema for Variant Options Query in BigCommerce\nDESCRIPTION: This JSON response shows the structure of variant option data returned from the GraphQL API. It includes three product options (Size, Color, and Fabric) with their respective values and locale-specific overrides for a UK storefront. The response demonstrates how shared options are indicated and how default values are specified.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-variant-options.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"store\": {\n      \"product\": {\n        \"id\": \"bc/store/product/111\",\n        \"options\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"id\": \"bc/store/productOption/108\",\n                \"displayName\": \"Size\",\n                \"isShared\": false,\n                \"values\": [\n                  {\n                    \"id\": \"bc/store/productOptionValue/68\",\n                    \"label\": \"Small US\",\n                    \"isDefault\": false\n                  },\n                  {\n                    \"id\": \"bc/store/productOptionValue/69\",\n                    \"label\": \"Medium US\",\n                    \"isDefault\": false\n                  },\n                  {\n                    \"id\": \"bc/store/productOptionValue/70\",\n                    \"label\": \"Large US\",\n                    \"isDefault\": false\n                  }\n                ],\n                \"overridesForLocale\": {\n                  \"displayName\": \"Size UK\",\n                  \"values\": [\n                    {\n                      \"id\": \"bc/store/productOptionValue/68\",\n                      \"label\": \"Small UK\"\n                    },\n                    {\n                      \"id\": \"bc/store/productOptionValue/69\",\n                      \"label\": \"Medium UK\"\n                    }\n                  ]\n                }\n              }\n            },\n            {\n              \"node\": {\n                \"id\": \"bc/store/productOption/109\",\n                \"displayName\": \"Color\",\n                \"isShared\": false,\n                \"values\": [\n                  {\n                    \"id\": \"bc/store/productOptionValue/7\",\n                    \"label\": \"Silver\",\n                    \"isDefault\": false\n                  },\n                  {\n                    \"id\": \"bc/store/productOptionValue/8\",\n                    \"label\": \"Black\",\n                    \"isDefault\": false\n                  }\n                ],\n                \"overridesForLocale\": {\n                  \"displayName\": null,\n                  \"values\": []\n                }\n              }\n            },\n            {\n              \"node\": {\n                \"id\": \"bc/store/productOption/130\",\n                \"displayName\": \"Fabric\",\n                \"isShared\": true,\n                \"values\": [\n                  {\n                    \"id\": \"bc/store/productOptionValue/123\",\n                    \"label\": \"Cotton\",\n                    \"isDefault\": true\n                  },\n                  {\n                    \"id\": \"bc/store/productOptionValue/124\",\n                    \"label\": \"Polyester\",\n                    \"isDefault\": false\n                  }\n                ],\n                \"overridesForLocale\": {\n                  \"displayName\": \"Fabric material\",\n                  \"values\": [\n                    {\n                      \"id\": \"bc/store/productOptionValue/123\",\n                      \"label\": \"Linen\"\n                    },\n                    {\n                      \"id\": \"bc/store/productOptionValue/124\",\n                      \"label\": \"Nylon\"\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Global Region in Handlebars\nDESCRIPTION: This snippet demonstrates how to create a global region in a Stencil theme using Handlebars syntax. Global regions allow widgets to be placed and managed sitewide.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{{region name=\"header_bottom--global\"}}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Promotion Codes\nDESCRIPTION: HTTP request to fetch all coupon codes associated with a specific promotion, including usage statistics and creation dates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/promotions/{{promotion_id}}/codes\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Response for Product Images at Different Resolutions in JSON\nDESCRIPTION: The JSON structure represents the response from the GraphQL query for product images at various resolutions. It includes the URLs for the specified widths and can be utilized to present images in different formats on various platforms.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"product\": {\n        \"images\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"url320wide\": \"https://cdn11.bigcommerce.com/s-{store_hash}/images/stencil/320w/products/113/379/IMAG0729__87810.1662649673.jpg\",\n                \"url640wide\": \"https://cdn11.bigcommerce.com/s-{store_hash}/images/stencil/640w/products/113/379/IMAG0729__87810.1662649673.jpg\",\n                \"url960wide\": \"https://cdn11.bigcommerce.com/s-{store_hash}/images/stencil/960w/products/113/379/IMAG0729__87810.1662649673.jpg\",\n                \"url1280wide\": \"https://cdn11.bigcommerce.com/s-{store_hash}/images/stencil/1280w/products/113/379/IMAG0729__87810.1662649673.jpg\"\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of join Helper in Handlebars\nDESCRIPTION: Examples of using the join helper with different separators (space and comma) to join an array of names into a single string.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_81\n\nLANGUAGE: handlebars\nCODE:\n```\n<!-- context = {\n    list: ['Mario', 'Chris', 'Mick', 'Hau', 'Cody']\n} -->\n{{join list \" \"}}\n<!-- => 'Mario Chris Mick Hau Cody' -->\n\n{{join list \", \"}}\n<!-- => 'Mario, Chris, Mick, Hau, Cody' -->\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Impersonation Token\nDESCRIPTION: HTTP request to create a customer impersonation token with channel IDs and expiration timestamp.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/graphql-storefront.mdx#2025-04-16_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/storefront/api-token-customer-impersonation\nX-Auth-Token: {{access_token}}\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"channel_ids\": [1, 2, 3]\n  \"expires_at\": 1602288000\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Preformatted Text with pre Helper\nDESCRIPTION: Helper that renders text in a preformatted format while escaping special characters. Takes a text value parameter and wraps it in pre tags.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_42\n\nLANGUAGE: handlebars\nCODE:\n```\n{{pre value}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<!-- context = {var: {}} -->\n{{pre var}}\n<!-- => <pre>{}</pre> -->\n\n<!-- context = {var: \"<div>&\\\"500\\\"</div>\"} -->\n{{pre var}}\n<!-- => <pre>&quot;&lt;div&gt;&amp;\\\\&quot;500\\\\&quot;&lt;/div&gt;&quot;</pre> -->\n```\n\n----------------------------------------\n\nTITLE: Using option Helper in Handlebars for Accessing Option Properties\nDESCRIPTION: The option helper returns the value of a property path from the options object in the current context.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_71\n\nLANGUAGE: handlebars\nCODE:\n```\n<!-- context = {options: {a: {b: {c: 'ddd'}}}} -->\n * {{option \"a.b.c\"}}\n * <!-- results => `ddd` -->\n```\n\n----------------------------------------\n\nTITLE: Example Customers Payload Object in BigCommerce Webhooks\nDESCRIPTION: This JSON snippet demonstrates the structure of a payload object for customer-related webhook events in BigCommerce. It includes store ID, producer, creation timestamp, event scope, customer data, and a hash for verification.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\": \"11111\",\n \"producer\": \"stores/abcde\",\n \"created_at\": 1641641646,\n \"scope\": \"store/customer/channel/login/access/updated\",\n \"data\": {\n    \"customer_id\": 22, // ID of the customer\n    \"channel_ids\": [ // array of channels that the customer has accessed\n      1\n   ]\n  },\n \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Button Quantity Selector in schema.json\nDESCRIPTION: This snippet defines how to add a selector in Page Builder for merchants to specify the number of wallet buttons visible by default. It includes settings for a select element with predefined options for one or two buttons visible.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/checkout-enhancements/wallet-buttons.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  ..., \n  {\n    \"name\": \"Payments\",\n    \"settings\": [\n      ..., \n      {\n        \"type\": \"heading\",\n        \"content\": \"Quick payment buttons\"\n      },\n      {\n        \"type\": \"select\",\n        \"label\": \"Number of buttons always visible\",\n        \"force_reload\": true, \n        \"id\": \"paymentbuttons-number-of-buttons\",\n        \"options\": [\n          {\n            \"value\": 1,\n            \"label\": \"1\"\n          },\n          {\n            \"value\": 2,\n            \"label\": \"2\"\n          }\n        ]\n      },\n      ...\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Wallet Button Checkbox in schema.json\nDESCRIPTION: This snippet provides code to add a checkbox for displaying wallet buttons in the Page Builder. It adds a new setting within the 'Products' section inside the 'schema.json' file. This involves defining the checkbox's type, label, and reload behavior, allowing merchants to toggle wallet buttons.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/checkout-enhancements/wallet-buttons.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ..., \n  {\n    \"name\": \"Products\",\n    \"settings\": [\n      ..., \n      {\n        \"type\": \"checkbox\",\n        \"label\": \"Show quick payment buttons\",\n        \"force_reload\": true, \n        \"id\": \"show_quick_payment_buttons\"\n      },\n      ..., \n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Widget Template Creation Response in BigCommerce\nDESCRIPTION: JSON response from the widget template creation API call. It includes details such as the template UUID, creation date, and the full schema for the widget.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/graphql-templates.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"channel_id\": 1,\n    \"client_rerender\": false,\n    \"current_version_uuid\": \"3f4defcf-2429-425d-8e5a-7c3807fa9896\",\n    \"date_created\": \"2021-04-09T21:23:16.274Z\",\n    \"date_modified\": \"2021-04-09T21:23:16.274Z\",\n    \"icon_name\": \"default\",\n    \"kind\": \"custom\",\n    \"name\": \"Product Widget\",\n    \"schema\": [\n      {\n        \"settings\": [\n          {\n            \"id\": \"graphQueries\",\n            \"type\": \"graphQl\",\n            \"typeMeta\": {\n              \"mappings\": {\n                \"productId\": {\n                  \"reads\": \"productId\",\n                  \"type\": \"Int!\"\n                }\n              }\n            }\n          }\n        ],\n        \"type\": \"hidden\"\n      },\n      {\n        \"label\": \"Content\",\n        \"sections\": [\n          {\n            \"label\": \"Product\",\n            \"settings\": [\n              {\n                \"default\": \"\",\n                \"id\": \"productId\",\n                \"label\": \"Product\",\n                \"type\": \"productId\",\n                \"typeMeta\": {\n                  \"placeholder\": \"Search by name or SKU\"\n                }\n              }\n            ]\n          }\n        ],\n        \"type\": \"tab\"\n      }\n    ],\n    \"storefront_api_query\": \"query Product($productId: Int = 1, $activeCurrencyCode: currencyCode) { site { product(entityId: $productId) { name entityId prices(currencyCode: $activeCurrencyCode) { price { currencyCode value } } defaultImage { url(width: 500, height: 500) } } } } \",\n    \"template\": \"<div style=\\\"text-align:center\\\">\\n<h1>{{_.data.site.product.name}}</h1>\\n<div>\\n<img src=\\\"{{_.data.site.product.defaultImage.url}}\\\">\\n</div>\\n<div>\\n<p>${{_.data.site.product.prices.price.value}}</p>\\n</div>\\n</div>\",\n    \"template_engine\": \"handlebars_v3\",\n    \"uuid\": \"95eaa664-b19e-4a31-b9c7-498f9bc60bae\"\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Comparison Helpers in Handlebars\nDESCRIPTION: Collection of comparison helpers for conditional rendering including ifEven, ifNth, ifOdd, is, isnt, lt, lte, neither, and various unless variants. These helpers enable complex conditional logic in templates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_27\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#ifEven value}}...{{/ifEven}}\n{{#ifNth a b}}...{{/ifNth}}\n{{#is a b}}...{{/is}}\n{{#lt a b}}...{{/lt}}\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Sass File in Stencil Theme\nDESCRIPTION: Demonstrates how to import a custom Sass file named 'foobar.scss' into the main theme.scss file. This allows for isolation of custom styles and ensures they are compiled with the theme.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/style/sass.mdx#2025-04-16_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@import \"foobar\";\n```\n\n----------------------------------------\n\nTITLE: Creating English JSON Language File for Stencil Theme\nDESCRIPTION: This snippet shows the structure of the English language file (en.json) used in Stencil themes. It defines key-value pairs for various text elements in the theme.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/tutorial.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"header\": {\n  \"welcome_back\": \"Welcome back, {name}\",\n  \"skip_to_main\": \"Skip to main content\"\n   },\n }\n```\n\n----------------------------------------\n\nTITLE: Category Tree Payload Structure\nDESCRIPTION: Example JSON payload structure for category tree events. Contains tree identification data.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\": \"11111\",\n \"producer\": \"stores/abcde\",\n \"created_at\": 1641641646,\n \"scope\": \"store/channel/1/categoryTree/updated\",\n \"data\": {\n    \"tree_id\": 1\n  },\n \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Product Modifier Options with GraphQL in BigCommerce\nDESCRIPTION: This snippet demonstrates how to set product modifier options using GraphQL mutations in BigCommerce. It allows setting options at the global level and for specific locales.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  catalog {\n    setProductModifierOptions(\n      input: {\n        productId: \"123\"\n        modifierOptions: [\n          {\n            id: \"456\"\n            name: \"Size\"\n            values: [\n              { id: \"789\", label: \"Small\" }\n              { id: \"101\", label: \"Medium\" }\n              { id: \"112\", label: \"Large\" }\n            ]\n          }\n        ]\n      }\n    ) {\n      product {\n        entityId\n        name\n        modifierOptions {\n          edges {\n            node {\n              entityId\n              displayName\n              values {\n                edges {\n                  node {\n                    entityId\n                    label\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Sorting in config.json\nDESCRIPTION: This snippet illustrates adding a 'paymentbuttons-provider-sorting' property to 'config.json' to manage the order of wallet button providers. The property is set as an empty array by default, allowing customizations via schema.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/checkout-enhancements/wallet-buttons.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...,\n  \"settings\": {\n    ..., \n    \"paymentbuttons-provider-sorting\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a Location via BigCommerce Inventory API\nDESCRIPTION: This snippet demonstrates how to disable a specific inventory location using the BigCommerce Inventory API. It includes the PUT request to update the location's enabled status and the expected JSON response.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_36\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/locations\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"id\": 2,\n    \"enabled\": false\n  }\n]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transaction_id\": \"e81ada43-fc10-41a0-9a61-b25d8223a71c\"\n}\n```\n\n----------------------------------------\n\nTITLE: Widget Region Specification with region Helper in Handlebars\nDESCRIPTION: Demonstrates how to use the region helper to specify a widget region. It takes a single parameter indicating the name of the region.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_101\n\nLANGUAGE: handlebars\nCODE:\n```\n{{region name}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<!-- context = {\n    banner-top: \"hello world\"\n    } -->\n{{region name=\"banner-top\"}}\n<!-- => <div data-content-region=\"banner-top\">hello world</div> -->\n```\n\n----------------------------------------\n\nTITLE: Adding Notifications to Buy One Get One Free Promotion in JSON\nDESCRIPTION: This JSON snippet expands on the previous example by adding notifications for different stages of the promotion, including upsell, eligible, and applied notifications with specific display locations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy One Get One Free\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"gift_item\": {\n          \"product_id\": 174,\n          \"quantity\": 1\n        }\n      },\n      \"apply_once\": false,\n      \"stop\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"products\": [\n              174\n            ]\n          },\n          \"minimum_quantity\": 1\n        }\n      }\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"Buy one Le Parfait Jar, Get One Free!\",\n      \"locations\": [\n        \"HOME_PAGE\",\n        \"PRODUCT_PAGE\",\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"You are eligible for a free Le Parfait Jar.\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"Congratulations, you have received a free Le Parfait Jar.\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using CDN Helper with Custom Endpoints\nDESCRIPTION: Examples showing how to use the CDN helper with custom endpoints in both development and production environments.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_34\n\nLANGUAGE: handlebars\nCODE:\n```\n<img src=\"{{cdn 'customcdn:img/image.jpg'}}\" />\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<img src=\"/assets/cdn/customcdn/img/image.jpg\"/>\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<img src=\"https://bigcommerce.customcdn.net/img/image.jpg\" />\n```\n\n----------------------------------------\n\nTITLE: Response for Creating Pickup Methods in BigCommerce\nDESCRIPTION: This JSON response confirms the successful creation of a curbside pickup method. It returns the newly created pickup method with its assigned ID and all specified details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 2,\n      \"location_id\": 1,\n      \"display_name\": \"Curbside pickup\",\n      \"collection_instructions\": \"See our staff member outside the store\",\n      \"collection_time_description\": \"Wait for a pickup confirmation and visit during business hours.\"\n    }\n  ],\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Configuration for Payment Methods\nDESCRIPTION: This snippet updates the Cornerstone theme's `config.json` to replace old payment method configurations with updated ones to enable CSRF protection and support for PayPal and other payment methods. It adds 'account_payment_methods_v2' and 'csrf_protection' to the features array and introduces 'supported_payment_methods' to allow cards and PayPal.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/checkout-enhancements/stored-payment-methods.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Cornerstone\",\n  \"version\": \"4.3.1\",\n  \"meta\": {\n    ...\n    \"features\": [\n      \"fully_responsive\",\n      \"mega_navigation\",\n      ...\n      \"csrf_protection\",        //  add csrf_protection\n      \"account_payment_methods\" //  replace with account_payment_methods_v2\n    ]\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"supported_card_type_icons\": [\n    ...\n  ],\n  \"supported_payment_methods\": [ //  Add supported_payment_methods array\n    \"card\",                      //  allowlist card and paypal\n    \"paypal\"\n  ],\n  \"lazyload_mode\": \"lazyload+lqip\"\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Inventory Settings for Variants in BigCommerce API\nDESCRIPTION: This snippet shows how to update inventory settings for multiple variants at a specific location using the BigCommerce API. It sets the safety stock and warning level for two variants.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/locations/{location_id}/items\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"settings\": [\n    {\n      \"identity\": {\n        \"variant_id\": 78\n      },\n      \"safety_stock\": 2,\n      \"warning_level\": 5\n    },\n    {\n      \"identity\": {\n        \"variant_id\": 79\n      },\n      \"safety_stock\": 2,\n      \"warning_level\": 5\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Pre-order Settings for a Locale in BigCommerce GraphQL\nDESCRIPTION: This mutation sets a product's pre-order settings for a specific locale within a storefront channel. These settings override the global store information for the specified locale.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-attributes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($input: SetProductPreOrderSettingsInput!) {\n  product {\n    setProductPreOrderSettings (input: $input) {\n      product {\n        overridesForLocale (localeContext: {channelId: \"bc/store/channel/2\", locale: \"fr\"}) {\n          preOrderSettings {\n            message\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"localeContext\": {\n      \"locale\": \"fr\",\n      \"channelId\": \"bc/store/channel/2\"\n    },\n    \"data\": {\n      \"message\": \"Le produit sortira dans un mois\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Account Apps with GraphQL\nDESCRIPTION: GraphQL query to retrieve details about apps installed on a BigCommerce account including app IDs and names.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/graphql-account/users.mdx#2025-04-16_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  account {\n    id\n    apps {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Filters with Settings API (HTTP)\nDESCRIPTION: This snippet shows how to make a GET request to retrieve all available filters for a BigCommerce store using the Settings API.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/contextual-filters.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/settings/search/filters/available\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Adding Login Form Redirect (HTML)\nDESCRIPTION: HTML code snippet demonstrating how to add a hidden input field to the login form for redirecting customers to a specific page after login.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/login.mdx#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" id=\"redirect_to\" name=\"redirect_to\" value=\"/shop-all\">\n```\n\n----------------------------------------\n\nTITLE: Defining Banner Layout Configuration in JSON\nDESCRIPTION: JSON structure that defines banner placements and their metadata. The configuration includes both top and bottom banners with their corresponding div elements and metadata properties like banner name, content, ID, and location.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/examples/banners.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"banners\": {\n    \"bottom\": [\n      \"<div id='1370512507'></div>\"\n    ],\n    \"bottom_metadata\": [\n      {\n        \"banner-name\": \"Example Bottom Banner\",\n        \"content\": \"\",\n        \"id\": \"3\",\n        \"location\": \"bottom\"\n      }\n    ],\n    \"top\": [\n      \"<div id='2102203073'></div>\"\n    ],\n    \"top_metadata\": [\n      {\n        \"banner-name\": \"Example Top Banner\",\n        \"content\": \"\",\n        \"id\": \"2\",\n        \"location\": \"top\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using occurrences Helper in Handlebars for Substring Counting\nDESCRIPTION: The occurrences helper returns the number of times a substring appears within a given string.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_84\n\nLANGUAGE: handlebars\nCODE:\n```\n{{occurrences str substring}}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for First Three Products Query\nDESCRIPTION: This is the JSON response to the first three products query. It shows the pagination structure with cursors for each product and pagination metadata in pageInfo, including startCursor, endCursor, and hasNextPage flags.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"products\": {\n        \"pageInfo\": {\n          \"startCursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n          \"endCursor\": \"YXJyYXljb25uZWN0aW9uOjI=\",\n          \"hasNextPage\": true\n        },\n        \"edges\": [\n          {\n            \"cursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n            \"node\": {\n              \"entityId\": 80,\n              \"name\": \"Orbit Terrarium - Large\"\n            }\n          },\n          {\n            \"cursor\": \"YXJyYXljb25uZWN0aW9uOjE=\",\n            \"node\": {\n              \"entityId\": 81,\n              \"name\": \"Shower Curtain\"\n            }\n          },\n          {\n            \"cursor\": \"YXJyYXljb25uZWN0aW9uOjI=\",\n            \"node\": {\n              \"entityId\": 82,\n              \"name\": \"Chambray Towel\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Block Usage of get Helper in Handlebars\nDESCRIPTION: Example showing the get helper being used as a block helper to retrieve posts from a blog object.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_74\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#get \"posts\" blog}}{{/get}}\n```\n\n----------------------------------------\n\nTITLE: Response for Retrieving Shopper's Segments in JSON\nDESCRIPTION: This JSON response provides a list of segments for a shopper profile. Each segment includes an ID, name, description, creation date, and last update date. It also includes pagination metadata.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/segments/user-guide.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"name\": \"My Segment\",\n      \"description\": \"New and improved segment description.\",\n      \"created_at\": \"2022-08-24T14:15:22Z\",\n      \"updated_at\": \"2022-08-24T14:15:22Z\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"total\": 1,\n      \"count\": 1,\n      \"per_page\": 50,\n      \"current_page\": 1,\n      \"total_pages\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a List Widget in BigCommerce HTML\nDESCRIPTION: This snippet demonstrates how to create a simple list widget using HTML and Handlebars templating. It iterates over list items and applies color styling to each item.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/examples.mdx#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n    {{#each list_items}}\n    <li style=\"color:{{color}};\">{{text}}</li>\n    {{/each}}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Querying Account Store Users with GraphQL in BigCommerce\nDESCRIPTION: This GraphQL query retrieves detailed information about users associated with stores under a BigCommerce account. It includes user details such as ID, email, name, permissions, and associated apps.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/graphql-account/users.mdx#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  account {\n    id\n    stores {\n      edges {\n        node {\n          id\n          name\n          storeHash\n          users {\n              collectionInfo {\n                totalItems\n              }\n            edges {\n              node {\n                id\n                email\n                firstName\n                lastName\n                locale\n                lastLoginAt\n                permissions\n                status\n                updatedAt\n                apps {\n                  edges {\n                    node {\n                      id\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          apps {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Cart API Response for Line Item IDs in BigCommerce\nDESCRIPTION: This JSON snippet shows the structure of the response from the Cart API after adding items. It highlights the location of the line item ID, which is needed for subsequent API calls.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/guide/add-to-cart.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n...\n  \"lineItems\": {\n    \"physicalItems\": [\n      {\n        \"id\": 20, // line item id\n        \"quantity\": 1,\n        \"productId\": 5,\n        \"variantId\": 55,\n        ...\n      }\n    ]\n  }\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Order Message Created Webhook Payload\nDESCRIPTION: Example payload structure for store/order/message/created webhook event that fires when an order message is created.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/order/message/created\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"order\",\n    \"id\": 250,\n    \"message\": {\n      \"order_message_id\": 3\n    }\n  },\n  \"hash\": \"cb07cdbdda8b1965e812693d5988154807eeed02\",\n  \"created_at\": 1561479923,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Font Loading Helpers\nDESCRIPTION: Helpers for managing font loading and configuration in themes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_39\n\nLANGUAGE: handlebars\nCODE:\n```\n{{getFontLoaderConfig 'Google_Karla_700'}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{getFontsCollection}}\n```\n\n----------------------------------------\n\nTITLE: String Conversion to Lowercase with toLowerCase Helper in Handlebars\nDESCRIPTION: Shows how to use the toLowerCase helper to convert a string to lowercase. It takes a single string parameter and returns the lowercase version of that string.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_94\n\nLANGUAGE: handlebars\nCODE:\n```\n{{toLowerCase string}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{toLowerCase 'I Love PIZZA'}}\n<!-- => i love pizza -->\n```\n\n----------------------------------------\n\nTITLE: Simple concat Helper Example in Handlebars\nDESCRIPTION: Example showing the concat helper joining two string literals 'hello' and 'world' into 'helloworld'.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_77\n\nLANGUAGE: handlebars\nCODE:\n```\n{{concat 'hello' 'world'}}\n<!-- => helloworld -->\n```\n\n----------------------------------------\n\nTITLE: Example Object Data Type Declaration in schema.json\nDESCRIPTION: Demonstrates how to declare a color data type in schema.json with necessary properties including type, label and ID. This structure defines how the color selection option appears in Store Design.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/defining-ui-options.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n {\n        \"type\": \"color\",\n        \"label\": \"Text Color\",\n        \"id\": \"body-font-color\"\n      },\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON String - JavaScript\nDESCRIPTION: Parses a given JSON string and converts it into a JavaScript object.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction JSONparse(str) { return JSON.parse(str); }\n```\n\n----------------------------------------\n\nTITLE: Example Scripts Payload Object in JSON\nDESCRIPTION: This JSON object demonstrates the payload structure for script-related webhook events. It includes store ID, producer, creation timestamp, scope, script UUID, and a hash value.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\": \"11111\",\n \"producer\": \"stores/abcde\",\n \"created_at\": 1641641646,\n \"scope\": \"store/channel/1/script/created\",\n \"data\": {\n   \"uuid\": \"0187cc6c-cebf-45f9-93b8-7dd0a2e09774\" // ID of the script\n },\n \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: External File Structure for Dynamic Tabs\nDESCRIPTION: HTML structure required in external files used by dynamic tabs. The file must start with position and title information in a hidden input field, followed by the tab content.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/dynamic-content-rendering.mdx#2025-04-16_snippet_5\n\nLANGUAGE: handlebars\nCODE:\n```\n<input id=\"gr-tab-data\" type=\"hidden\" data-gr-position=\"POSITION\" data-gr-title=\"TITLE\" /> \n CONTENT\n```\n\n----------------------------------------\n\nTITLE: Enabling PayPal Smart Buttons Customization via schema.json\nDESCRIPTION: This JSON snippet illustrates how to configure the schema.json file to enable the customization of PayPal Smart Buttons via Page Builder. It provides the required settings, types, and options for customizing button appearance.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/checkout-enhancements/paypal-smart-buttons.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Payment Buttons\",\n  \"enable\": \"smartButtons\",\n  \"settings\": [\n    {\n      \"type\": \"checkbox\",\n      \"label\": \"Show Paypal tagline\",\n      \"force_reload\": true,\n      \"id\": \"paymentbuttons-paypal-tagline\"\n    },\n    {\n      \"type\": \"checkbox\",\n      \"label\": \"Show funding icons\",\n      \"force_reload\": true,\n      \"id\": \"paymentbuttons-paypal-fundingicons\"\n    },\n    {\n      \"type\": \"select\",\n      \"label\": \"Button color\",\n      \"id\": \"paymentbuttons-paypal-color\",\n      \"force_reload\": true,\n      \"options\": [\n        {\n          \"value\": \"gold\",\n          \"label\": \"Gold\"\n        },\n        {\n          \"value\": \"blue\",\n          \"label\": \"Blue\"\n        },\n        {\n          \"value\": \"silver\",\n          \"label\": \"Silver\"\n        },\n        {\n          \"value\": \"black\",\n          \"label\": \"Black\"\n        }\n      ]\n    },\n    {\n      \"type\": \"select\",\n      \"label\": \"Button shape\",\n      \"id\": \"paymentbuttons-paypal-shape\",\n      \"force_reload\": true,\n      \"options\": [\n        {\n          \"value\": \"pill\",\n          \"label\": \"Pill\"\n        },\n        {\n          \"value\": \"rect\",\n          \"label\": \"Rectangle\"\n        }\n      ]\n    },\n    {\n      \"type\": \"select\",\n      \"label\": \"Button size\",\n      \"id\": \"paymentbuttons-paypal-size\",\n      \"force_reload\": true,\n      \"options\": [\n        {\n          \"value\": \"small\",\n          \"label\": \"Small\"\n        },\n        {\n          \"value\": \"medium\",\n          \"label\": \"Medium\"\n        },\n        {\n          \"value\": \"large\",\n          \"label\": \"Large\"\n        },\n        {\n          \"value\": \"responsive\",\n          \"label\": \"Responsive\"\n        }\n      ]\n    },\n    {\n      \"type\": \"select\",\n      \"label\": \"Button content\",\n      \"id\": \"paymentbuttons-paypal-label\",\n      \"force_reload\": true,\n      \"options\": [\n        {\n          \"value\": \"checkout\",\n          \"label\": \"Paypal Checkout\"\n        },\n        {\n          \"value\": \"pay\",\n          \"label\": \"Pay with Paypal\"\n        },\n        {\n          \"value\": \"buynow\",\n          \"label\": \"Buy Now\"\n        },\n        {\n          \"value\": \"paypal\",\n          \"label\": \"Paypal\"\n        }\n      ]\n    },\n    {\n      \"type\": \"select\",\n      \"label\": \"Display style\",\n      \"id\": \"paymentbuttons-paypal-layout\",\n      \"force_reload\": true,\n      \"options\": [\n        {\n          \"value\": \"horizontal\",\n          \"label\": \"Show buttons horizontally\"\n        },\n        {\n          \"value\": \"vertical\",\n          \"label\": \"Show buttons vertically\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Products Object in JSON\nDESCRIPTION: JSON configuration for limiting the number of featured, new, and top-selling products displayed globally.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"products\": {\n    \"featured\": 3,\n    \"new\": 4,\n    \"top_sellers\": 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handlebars Template for GraphQL Data Display\nDESCRIPTION: Handlebars template code showing how to access and iterate through GraphQL query results to display variant SKUs from the product query response.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter-reference.mdx#2025-04-16_snippet_14\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if gql.data.site.product}}\n{{#each gql.data.site.product.variants.edges}}\n  {{#with node}}\n    {{sku}} {{! - - sku code from each variant from GQL response}}\n  {{/with}}\n{{/each}}\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Defining Variations in config.json - JSON\nDESCRIPTION: This snippet demonstrates how to define variations within the `config.json` file for themes in BigCommerce. Each variation includes a name, ID, and meta information such as screenshots and descriptions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/global-styles.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variations\": [\n      {\n        \"name\": \"Light\",\n        \"id\": \"light\",\n        \"meta\": {\n          \"desktop_screenshot\": \"desktop_light.png\",\n          \"mobile_screenshot\": \"mobile_light.png\",\n          \"description\": \"Ideal for a wide range of businesses and brands, this design is fully responsive, simple, and ready for you to add your branding, logo, and products. ...\",\n          ...\n      }\n    }\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Constraining Brand List Displays - YAML\nDESCRIPTION: Sets the maximum limit for displaying brands using YAML front matter. This configuration is particularly useful for brand collection pages within a stencil theme.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter-reference.mdx#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nbrands:\n  limit: 50   # limits number of brands displayed in the list to 50\n```\n\n----------------------------------------\n\nTITLE: Structuring Catalog Price Object Without Sale Price in JSON\nDESCRIPTION: Provides a sample JSON structure for representing catalog price objects when no sale price is defined. Dependencies include the BigCommerce price object and control panel configurations. Expected input is defined product pricing data excluding a sale price, and the output is a formatted JSON object for storefront display.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/catalog-price-object.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"product\": {\n    // ...\n  },\n  \"price\": {\n    \"without_tax\": {\n      \"formatted\": \"$20.00\",\n      \"value\": 20\n    },\n    \"tax_label\": \"Sales Tax\",\n    \"rrp_without_tax\": {\n      \"formatted\": \"$25.00\",\n      \"value\": 25\n    },\n    \"saved\": {\n      \"formatted\": \"$5.00\",\n      \"value\": 5\n    },\n    \"retail_price_range\": {\n      \"min\": {\n        \"without_tax\": {\n          \"formatted\": \"$25.00\",\n          \"value\": 25\n        }\n      },\n      \"max\": {\n        \"without_tax\": {\n          \"formatted\": \"$25.00\",\n          \"value\": 25\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BigCommerce Cart Line Item Webhook Payload\nDESCRIPTION: Payload structure for cart line item events such as creation, updates and deletion.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/cart/lineItem/created\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"cart_line_item\",\n    \"id\": \"743bfd94-d5dd-47c5-9c19-6eec32ca6119\",\n    \"cartId\": \"b0386708-fef3-45de-9d8b-fbe3031450a4\"\n  },\n  \"hash\": \"399321a1bf1ac1331e12826fb89f264b4c8d21a6\",\n  \"created_at\": 1561481786,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Option Value with V2 API in JSON\nDESCRIPTION: This snippet demonstrates how to add an option value (e.g., Black color) to an existing option using the V2 API. It's part of the process to create a product with variants and SKUs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"label\": \"Black\",\n    \"sort_order\": 1,\n    \"value\": \"#000000\",\n    \"is_default\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ngrok with Homebrew\nDESCRIPTION: Commands to install and configure ngrok using Homebrew package manager.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/tutorial.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install ngrok/ngrok/ngrok\nngrok config add-authtoken <TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Replacing Predefined Header with Storewide Header in BigCommerce Checkout\nDESCRIPTION: HTML code block to be replaced with a Handlebars partial reference for applying a storewide header in the checkout page.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/checkout-confirmation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<header class=\"checkoutHeader optimizedCheckout-header\">\n    <div class=\"checkoutHeader-content\">\n        <h1 class=\"is-srOnly\">{{lang 'checkout.title'}}\n        <h2 class=\"checkoutHeader-heading\">\n            <a class=\"checkoutHeader-link\" href=\"{{urls.home}}\">\n                {{#if checkout.header_image}}\n                    <img alt=\"{{settings.store_logo.title}}\" class=\"checkoutHeader-logo\" id=\"logoImage\" src=\"{{ checkout.header_image }}\"/>\n                {{ else }}\n                    <span class=\"header-logo-text\">{{settings.store_logo.title}}</span>\n                {{/if}}\n            </a>\n        </h2>\n    </div>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Disabling Location Storefront Visibility via BigCommerce Inventory API\nDESCRIPTION: This snippet shows how to disable the storefront visibility for a specific inventory location using the BigCommerce Inventory API. It includes the PUT request to update the location's storefront visibility and the expected JSON response.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_37\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/locations\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"id\": 2,\n    \"storefront_visibility\": false\n  }\n]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transaction_id\": \"e81ada43-fc10-41a0-9a61-b25d8223a71c\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using unless Helper in Handlebars for Negative Condition Testing\nDESCRIPTION: The unless helper renders a block if a statement is false. It doesn't support operators for comparison expressions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_69\n\nLANGUAGE: handlebars\nCODE:\n```\n{{unless arg}}\n```\n\n----------------------------------------\n\nTITLE: Calling the addBillingAddress() Function with BigCommerce API Parameters\nDESCRIPTION: Example of how to call the addBillingAddress() helper function with the appropriate parameters: the API endpoint, cart ID, and customer address information to be added to the checkout.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\naddBillingAddress(`/api/storefront/checkouts/`, `d4e978c2-bdcf-41b0-a49b-fecf4f5223c1`, {\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Doe\",\n  \"email\": \"janedoe@email.com\",\n  \"company\": \"BigCommerce\",\n  \"address1\": \"123 Main Street\",\n  \"address2\": \"Apt 1\",\n  \"city\": \"Austin\",\n  \"stateOrProvinceCode\": \"TX\",\n  \"countryCode\": \"USA\",\n  \"postalCode\": \"78751\"\n})\n.then(data => console.log(JSON.stringify(data)))\n.catch(error => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Price (excluding tax) in BigCommerce Stencil Templates\nDESCRIPTION: This snippet demonstrates how to access the default price excluding tax in BigCommerce Stencil templates. It uses conditional logic to determine whether a sale price is defined.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/catalog-price-object.mdx#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ul><li>**Sale Price** is defined:</li> {{ product.price.non_sale_price_without_tax }}<li>**Sale Price** is not defined:</li> {{ product.price.without_tax }}</ul>\n```\n\n----------------------------------------\n\nTITLE: Specifying the POS Platform Type in Channel Creation\nDESCRIPTION: This HTTP request demonstrates how to specify the POS system by setting the 'platform' parameter when creating a channel. The platform value must be one of the accepted types that support 'pos' as a channel type.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/draft/channels-pos-tutorial.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/channels\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"name\": \"Sample POS\",\n  \"type\": \"pos\",\n  \"platform\": \"custom\",\n  ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Strikeout Pricing in Cart Content (Handlebars)\nDESCRIPTION: This code snippet demonstrates how to implement strikeout pricing in the cart content template. It iterates over cart items, checks for gift certificates, and displays strikeout pricing for regular items with an RRP (Recommended Retail Price) value.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_6\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#each cart.items}}\n   <!--...-->\n  {{#if type '==' 'GiftCertificate'}}\n      {{#if rrp}}\n          <!-- your code to display strike-thru pricing -->\n      {{else}}\n          <!-- your code to display normal pricing -->\n      {{/if}}\n  {{/if}}\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Customer JWT with Client ID\nDESCRIPTION: JavaScript function to fetch the current customer's JWT using the API account's client ID as a query parameter. The function makes a GET request and handles the response.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst customerJWT = (apiAccountClientId) => {\n  let resource = `/customer/current.jwt?app_client_id=${apiAccountClientId}`;\n  return fetch(resource)\n  .then(response => {\n    if(response.status === 200) {\n      return response.text();\n    } else {\n      return new Error(`response.status is ${response.status}`);\n    }\n  })\n  .then(jwt => {\n    console.log(jwt); // JWT here\n    // decode...\n  })\n  .catch(error => console.error(error));\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Product Variant Options for a Locale in BigCommerce GraphQL\nDESCRIPTION: This GraphQL mutation removes product variant option information for a specific locale within a storefront channel. It allows reverting localized overrides back to global store information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-variant-options.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\nmutation ($input: RemoveProductOptionsOverridesInput!) {\n  product {\n    removeProductOptionsOverrides (input: $input) {\n      product {\n        id\n        options (first: 2) {\n          edges {\n            node {\n              id\n              displayName\n              values {\n                id\n                label\n              }\n              overridesForLocale (localeContext: {channelId: \"bc/store/channel/2\", locale: \"uk\"}) {\n                displayName\n                values {\n                  id\n                  label\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"localeContext\": { \n      \"channelId\": \"bc/store/channel/2\",\n      \"locale\": \"uk\"\n    },\n    \"data\": {\n      \"options\": [\n        {\n          \"optionId\": \"bc/store/productOption/108\",\n          \"data\": {\n            \"dropdown\": {\n              \"fields\": [\"DROPDOWN_PRODUCT_OPTION_DISPLAY_NAME_FIELD\"],\n              \"values\": {\n                \"ids\": [\"bc/store/productOptionValue/70\"]\n              }\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Alt Text to Images in HTML\nDESCRIPTION: This snippet demonstrates how to add descriptive alt text to an `<img>` element within a BigCommerce theme using HTML. Providing alt text enhances accessibility for visually-impaired users. The `alt` attribute should contain a text description of the image, ensuring screen readers can interpret it. This example assumes a setup using the Cornerstone theme.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/accessibility/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"store_logo.jpeg\" alt=\"BigCommerce store logo\">\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tax Properties in BigCommerce\nDESCRIPTION: Gets tax properties from a store using optional ID filters. Example demonstrates retrieving specific tax properties by ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/tax-properties.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/tax/properties?id:in=1,2\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Creating a BigCommerce Channel with App Configuration\nDESCRIPTION: This HTTP request example demonstrates how to create a channel with app configuration using the BigCommerce API. It shows the proper format for including the app ID in the request body, along with other required parameters like channel type, platform, and name.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/id.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{STORE_HASH}/v3/channels\nX-Auth-Token: {ACCESS_TOKEN}\nContent-Type: application/json\nAccept: application/json\n\n[{\n    \"type\": \"type of channel\",\n    \"platform\": \"sales channel platform\",\n    \"name\": \"name of the sales channel\",\n    \"external_id\": \"\",\n    \"status\": \"connected\",\n    \"app\": {\n      \"id\": 123,                         // ID of the app\n      \"sections\": [{\n        \"title\": \"Overview\",\n        \"query_path\": \"overview\"\n       }, {\n       \"title\": \"Settings\",\n       \"query_path\": \"settings\"\n      }]\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Internationalized Shipping Estimator Template\nDESCRIPTION: An example of an internationalized template for a shipping estimator form, using translation keys for various form elements and buttons.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/translation-keys.mdx#2025-04-16_snippet_2\n\nLANGUAGE: handlebars\nCODE:\n```\n<div class=\"shipping-estimator\" style=\"display: none;\">\n  <form class=\"estimator-form\">\n    <button class=\"shipping-estimate-hide\">{{lang 'cancel'}}</button>\n    <select name=\"shipping-country\">\n      <option>{{lang 'cart.shipping_estimator.select_a_country'}}</option>\n      {{#each countries}}\n          <option value=\"{{id}}\" {{#if selected}}selected=\"selected\"{{/if}}>\n            {{name}}\n          </option>\n      {{/each}}\n    </select>\n    <select name=\"shipping-state\">\n      <option>{{lang 'cart.shipping_estimator.select_a_state'}}</option>\n      {{#each states}}\n          <option value=\"{{id}}\" {{#if selected}}selected=\"selected\"{{/if}}>\n            {{name}}\n          </option>\n      {{/each}}\n    </select>\n    <input type=\"text\" name=\"shipping-zip\" value=\"{{selected_zip}}\">\n    <button class=\"shipping-estimate-submit\">{{lang 'cart.shipping_estimator.estimate_shipping'}}\n    </button>\n  </form>\n  <div class=\"shipping-quotes\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Font Family for Theme Variation\nDESCRIPTION: This snippet demonstrates how to set the body font of a theme variation to a specific typeface/family by inserting the `body-font-family` key into the `settings` object within the `config.json` file.  This allows developers to easily customize the font used within a specific theme variation. No dependencies are required.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/variations.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"MyCustomVariation\",\n  \"id\": \"my_custom_variation\",\n  \"settings\": {\n    // ...\n    \"body-font-family\": \"MyCoolFont, AnotherFont, sans-serif\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checkout Consignment Update Response - JSON\nDESCRIPTION: Complete JSON response after updating a checkout consignment with shipping option, including cart details, billing address, and consignment information with the selected shipping method.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/rest-management.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": \"c3bf9d8c-2cae-43e0-a618-60e72255c75b\",\n    \"cart\": {\n      \"id\": \"c3bf9d8c-2cae-43e0-a618-60e72255c75b\",\n      \"customer_id\": 0,\n      \"channel_id\": 1,\n      \"email\": \"Test.User@email.com\",\n      \"currency\": {\n        \"code\": \"USD\"\n      },\n      \"tax_included\": false,\n      \"base_amount\": 100,\n      \"discount_amount\": 13.5,\n      \"cart_amount_inc_tax\": 0,\n      \"cart_amount_ex_tax\": 0,\n      \"coupons\": [],\n      \"discounts\": [],\n      \"line_items\": {\n        \"physical_items\": [\n          {\n            \"id\": \"b2f0d1b2-f505-479a-b79a-813b33ce2771\",\n            \"parent_id\": null,\n            \"variant_id\": 118,\n            \"product_id\": 120,\n            \"sku\": \"SM-13\",\n            \"name\": \"BigCommerce Coffee Mug\",\n            \"url\": \"https://arabic-store.mybigcommerce.com/bigcommerce-coffee-mug/\",\n            \"quantity\": 1,\n            \"is_taxable\": true,\n            \"image_url\": \"https://cdn11.bigcommerce.com/r-4b20dad619e29ebf3490f7f35369a8220637ce48/themes/ClassicNext/images/ProductDefault.gif\",\n            \"discounts\": [],\n            \"coupons\": [],\n            \"discount_amount\": 10,\n            \"coupon_amount\": 0,\n            \"original_price\": 10,\n            \"list_price\": 10,\n            \"sale_price\": 0,\n            \"extended_list_price\": 10,\n            \"extended_sale_price\": 0,\n            \"is_require_shipping\": true,\n            \"gift_wrapping\": null,\n            \"is_mutable\": true\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cart Information with Converted Currency via BigCommerce API\nDESCRIPTION: Abbreviated JSON response from the Create a Cart API, showing cart details with prices converted to Euros (EUR) from the store's default currency (USD).\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/currencies/guide.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"4c8681f7-cc64-4377-b5a3-cf5f762edf5d\",\n  \"cart\": {\n    \"id\": \"4c8681f7-cc64-4377-b5a3-cf5f762edf5d\",\n    \"customerId\": 19,\n    \"email\": \"cadenwhitfield@testing.com\",\n    \"currency\": {\n      \"name\": \"Euro\",\n      \"code\": \"EUR\",\n      \"symbol\": \"€\",\n      \"decimalPlaces\": 2\n    },\n    \"isTaxIncluded\": true,\n    \"baseAmount\": 6.97,\n    \"discountAmount\": 0,\n    \"cartAmount\": 6.97,\n    \"lineItems\": {\n      \"physicalItems\": [\n        {\n          \"id\": \"c56ab595-cc9f-4d52-abd3-065f6e7ad903\",\n          \"variantId\": 345,\n          \"productId\": 174,\n          \"name\": \"1L Le Parfait Jar\",\n          \"listPrice\": 6.97,\n          \"salePrice\": 6.97,\n          \"extendedListPrice\": 6.97,\n          \"extendedSalePrice\": 6.97\n        }\n      ]\n    },\n    \"createdTime\": \"2019-01-17T18:38:26+00:00\",\n    \"updatedTime\": \"2019-01-17T18:38:26+00:00\"\n  },\n  \"taxTotal\": 0.53,\n  \"taxes\": [\n    {\n      \"name\": \"Sales Tax\",\n      \"amount\": 0.53\n    }\n  ],\n  \"subtotal\": 6.97,\n  \"grandTotal\": 6.97\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Location Translations using GraphQL\nDESCRIPTION: GraphQL mutation to update translations for multiple location resources and fields simultaneously. Allows batch updates of translations for different locations in a specific locale.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/translations/locations.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  translation {\n      updateTranslations(input: {\n          resourceType: INVENTORY_LOCATIONS,\n          channelId: \"bc/store/channel/1\",\n          localeId: \"bc/store/locale/es\",\n          entities: [\n          {\n              resourceId: \"bc/store/inventoryLocation/1\",\n              fields: [\n                  {\n                      fieldName: \"city\",\n                      value: \"Ville (OVR) TEST ES\"\n                  },\n                  {\n                      fieldName: \"state\",\n                      value: \"État (OVR) TEST ES\"\n                  }\n              ]\n          },\n          {\n              resourceId: \"bc/store/inventoryLocation/2\",\n              fields: [\n                  {\n                      fieldName: \"city\",\n                      value: \"Ville (OVR) TEST ES\"\n                  },\n                  {\n                      fieldName: \"state\",\n                      value: \"État (OVR) TEST ES\"\n                  }\n              ]\n          }\n      ]\n  }) {\n      __typename\n      errors {\n          __typename\n          ... on Error {\n              message\n          }\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Buy-Three-For-The-Price-Of-Two Promotion API Response\nDESCRIPTION: Response from the BigCommerce API after creating a 'buy 2, get 1 free' promotion. It shows the complete configuration including the 100% discount on the third item and the promotion's enabled status.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/product.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 36,\n    \"name\": \"Buy three for the price of two\",\n    \"created_from\": \"api\",\n    \"customer\": {\n      \"group_ids\": [],\n      \"minimum_order_count\": 0,\n      \"excluded_group_ids\": [],\n      \"segments\": null\n    },\n    \"rules\": [\n      {\n        \"action\": {\n          \"cart_items\": {\n            \"discount\": {\n              \"percentage_amount\": \"100\"\n            },\n            \"strategy\": \"LEAST_EXPENSIVE\",\n            \"add_free_item\": true,\n            \"as_total\": false,\n            \"include_items_considered_by_condition\": false,\n            \"exclude_items_on_sale\": false,\n            \"items\": {\n              \"products\": [\n                130\n              ]\n            },\n            \"quantity\": 1\n          }\n        },\n        \"apply_once\": false,\n        \"stop\": false,\n        \"condition\": {\n          \"cart\": {\n            \"items\": {\n              \"products\": [\n                129\n              ]\n            },\n            \"minimum_quantity\": 2\n          }\n        }\n      }\n    ],\n    \"notifications\": [],\n    \"stop\": false,\n    \"currency_code\": \"USD\",\n    \"redemption_type\": \"AUTOMATIC\",\n    \"shipping_address\": null,\n    \"current_uses\": 0,\n    \"max_uses\": null,\n    \"start_date\": \"2022-07-21T19:03:50+00:00\",\n    \"end_date\": null,\n    \"status\": \"ENABLED\",\n    \"schedule\": null,\n    \"can_be_used_with_other_promotions\": true\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Pre-order Settings for a Locale in BigCommerce GraphQL\nDESCRIPTION: This mutation removes the overrides for a product's pre-order settings for a specific locale within a storefront channel. After removal, the pre-order setting defaults to its global store value.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-attributes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($input: RemoveProductPreOrderSettingsOverridesInput!) {\n  product {\n    removeProductPreOrderSettingsOverrides (input: $input) {\n      product {\n        overridesForLocale (localeContext: {channelId: \"bc/store/channel/2\", locale: \"fr\"}) {\n          preOrderSettings {\n            message\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"localeContext\": {\n      \"locale\": \"fr\",\n      \"channelId\": \"bc/store/channel/2\"\n    },\n    \"overridesToRemove\": [\"PRODUCT_PRE_ORDER_MESSAGE\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Option Webhook Payload Structure\nDESCRIPTION: Example payload structure for store/option/updated webhook event that fires when display name and values are customized for local or shared variant options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/option/updated\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"local_option\",\n    \"id\": 205,\n    \"affected_product_ids\": [1, 2],\n    \"context\": {\n      \"channel_id\": 2,\n      \"locale\": \"fr\"\n    } \n  },\n  \"hash\": \"a833a57fadd56a32dc752fb6ca0841dc9602a495\",\n  \"created_at\": 1561479233,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Background Images in SCSS for Stencil Themes\nDESCRIPTION: Shows the recommended way to reference background images in SCSS files for Stencil themes. Using short relative paths helps avoid unexpected 404 errors on production stores.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/style/assets.mdx#2025-04-16_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\nbackground: url('../img/header-bg.png');\n```\n\n----------------------------------------\n\nTITLE: Variable Retrieval with getVar Helper in Handlebars\nDESCRIPTION: Demonstrates how to use the getVar helper to retrieve a variable set by the assignVar helper. It takes a single parameter: the key of the variable to retrieve.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_103\n\nLANGUAGE: handlebars\nCODE:\n```\n{{getVar key}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{getVar \"foo\"}}\n```\n\n----------------------------------------\n\nTITLE: Example of replace Helper for RSS Feed in Handlebars\nDESCRIPTION: Example showing how to replace all instances of '%%Syndicate%%' in page content with an RSS feed component, or display the original content if no replacements occur.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_87\n\nLANGUAGE: handlebars\nCODE:\n```\n<!-- Replace all instances of `%%Syndicate%%` in `page.content` with `{{> components/page/rss_feed}}`. -->\n{{#replace '%%Syndicate%%' page.content}}\n    {{> components/page/rss_feed}}\n{{else}}\n    <p>{{{page.content}}}</p>\n{{/replace}}\n```\n\n----------------------------------------\n\nTITLE: Example of json Helper in Handlebars\nDESCRIPTION: Example showing the json helper converting a JavaScript object with numeric and string properties into a JSON string.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_83\n\nLANGUAGE: handlebars\nCODE:\n```\n<!-- context = {\n    object: { a: 1, b: \"hello\" }\n} -->\n{{json object}}\n<!-- => '{\"a\":1,\"b\":\"hello\"}' -->\n```\n\n----------------------------------------\n\nTITLE: String Truncation with truncate Helper in Handlebars\nDESCRIPTION: Demonstrates the usage of the truncate helper to shorten a string to a specified length. It takes two parameters: the string to truncate and the desired length of the truncated string.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_95\n\nLANGUAGE: handlebars\nCODE:\n```\n{{truncate string length}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{truncate \"This will be truncated to only the first part of the sentence.\" 22}}\n<!-- results in: 'This will be truncated' -->\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Setting Locale-Specific Shared Modifier Options\nDESCRIPTION: The response structure returned after setting shared modifier options for a specific locale. It confirms the update by returning the ID of the updated shared product modifier.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"sharedProductModifiers\": {\n      \"setSharedProductModifiersInformation\": {\n        \"sharedProductModifiers\": [\n          {\n            \"id\": \"bc/store/sharedProductModifier/2\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Variant Inventory Query in BigCommerce\nDESCRIPTION: This JSON response shows the inventory data for a specific product variant, including aggregated inventory and inventory by location. It demonstrates how the query returns data when a variant has stock in at least one location.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/inventory/queries.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n      \"site\": {\n        \"products\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"entityId\": 113,\n                \"name\": \"Example Product 1\",\n                \"variants\": {\n                  \"edges\": [\n                    {\n                      \"node\": {\n                        \"entityId\": 95,\n                        \"sku\": \"ABC-1111-PI\",\n                        \"inventory\": {\n                          \"aggregated\": {\n                            \"availableToSell\": 10,\n                            \"warningLevel\": 10\n                          },\n                          \"byLocation\": {\n                            \"edges\": [\n                              {\n                                \"node\": {\n                                  \"locationEntityId\": 1,\n                                  \"locationEntityCode\": \"BC-LOCATION-1\",\n                                  \"locationEntityTypeId\": \"PHYSICAL\",\n                                  \"locationDistance\": null,\n                                  \"availableToSell\": 10,\n                                  \"warningLevel\": 5,\n                                  \"isInStock\": true\n                                }\n                              },\n\n                              // By default, responses don't include non-default locations\n                              {\n                                \"node\": {\n                                  \"locationEntityId\": 2,\n                                  \"locationEntityCode\": \"BC-LOCATION-2\",\n                                  \"locationEntityTypeId\": \"PHYSICAL\",\n                                  \"locationDistance\": null,\n                                  \"availableToSell\": 0,\n                                  \"warningLevel\": 5,\n                                  \"isInStock\": false\n                                }\n                              }\n                            ]\n                          }\n                        }\n                      }\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Accessing Settings Object in Handlebars\nDESCRIPTION: Demonstrates how to access the global settings object in BigCommerce Handlebars templates. The settings object provides access to configuration properties and system-level information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/global-objects-and-properties.mdx#2025-04-16_snippet_7\n\nLANGUAGE: handlebars\nCODE:\n```\n{{settings}}\n```\n\n----------------------------------------\n\nTITLE: Setting up Draft App Environment with Node.js\nDESCRIPTION: Commands to clone the BigCommerce Next.js starter app, install dependencies, and start the development server with ngrok for HTTPS tunneling.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/app-extensions/guide.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:bigcommerce/sample-app-nodejs.git app-with-extensions\n\ncd app-with-extensions\n\nnpm install\n\nnpm run dev\n\n# open new terminal window\n\nnpm install ngrok\n\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Link Context App Extension Configuration\nDESCRIPTION: JSON schema for App Extension using link context, which redirects to the app's main interface rather than opening a panel.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/app-extensions/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"bc/store/appExtension/17\",\n  \"model\": \"ORDERS\",\n  \"context\": \"LINK\",\n  \"url\": \"/orders/${id}/personal-thanks\",\n  \"label\": {\n    \"defaultValue\": \"Add personal thanks\",\n    \"locales\": [\n      {\n        \"value\": \"Envie pessoal obrigado\",\n        \"localeCode\": \"pt-BR\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Localization Array for BigCommerce for WordPress Frontend Strings\nDESCRIPTION: A comprehensive array of translatable strings used by the BigCommerce for WordPress plugin on the frontend. This array contains text for cart messages, account actions, pagination errors, pricing, inventory, and wish list functionality.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/themes/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n\t$js_i18n_array = [\n\t\t'operations' => [\n\t\t\t'query_string_separator' => __( '&', 'bigcommerce' ),\n\t\t],\n\t\t'cart'       => [\n\t\t\t'items_url_param'          => '/items/',\n\t\t\t'mini_url_param'           => '/mini/',\n\t\t\t'quantity_param'           => 'quantity',\n\t\t\t'message_empty'            => __( 'Your cart is empty.', 'bigcommerce' ),\n\t\t\t'continue_shopping_label'  => esc_html( $empty_cart_data[ Cart_Empty::LINK_TEXT ] ),\n\t\t\t'continue_shopping_url'    => esc_url( $empty_cart_data[ Cart_Empty::LINK ] ),\n\t\t\t'cart_error_502'           => __( 'There was an error with your request. Please try again.', 'bigcommerce' ),\n\t\t\t'add_to_cart_error_502'    => __( 'There was an error adding this product to your cart. It might be out of stock or unavailable.', 'bigcommerce' ),\n\t\t\t'ajax_add_to_cart_error'   => __( 'There was an error adding this product to your cart.', 'bigcommerce' ),\n\t\t\t'ajax_add_to_cart_success' => __( 'Product successfully added to your cart.', 'bigcommerce' ),\n\t\t\t'mini_cart_loading'        => __( 'Loading', 'bigcommerce' ),\n\t\t\t'shipping_calc_error'      => __( 'There was an error calculating your shipping cost. Please try again.', 'bigcommerce' ),\n\t\t],\n\t\t'account'    => [\n\t\t\t'confirm_delete_message' => __( 'Are you sure you want to delete this address?', 'bigcommerce' ),\n\t\t\t'confirm_delete_address' => __( 'Confirm', 'bigcommerce' ),\n\t\t\t'cancel_delete_address'  => __( 'Cancel', 'bigcommerce' ),\n\t\t],\n\t\t'errors'     => [\n\t\t\t'pagination_error'         => __( 'There was an error processing your request. Please try again.', 'bigcommerce' ),\n\t\t\t'pagination_timeout_error' => __( 'The server took too long to complete this request. Please try again.', 'bigcommerce' ),\n\t\t],\n\t\t'pricing'    => [\n\t\t\t'loading_prices' => __( 'Retrieving current pricing data...', 'bigcommerce' ),\n\t\t],\n\t\t'inventory'    => [\n\t\t\t'in_stock' => __( 'in Stock', 'bigcommerce' ),\n\t\t\t'out_of_stock' => __( 'Out of Stock', 'bigcommerce' ),\n\t\t],\n\t\t'wish_lists' => [\n\t\t\t'copied' => __( 'Copied!', 'bigcommerce' ),\n\t\t\t'copy_link' => __( 'Copy link', 'bigcommerce' ),\n\t\t\t'copy_success' => __( 'Wish List URL copied to clipboard.', 'bigcommerce' ),\n\t\t]\n\t];\n```\n\n----------------------------------------\n\nTITLE: Example of occurrences Helper in Handlebars\nDESCRIPTION: Example showing the occurrences helper counting the number of times 'foo' appears in a string, returning 2.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_85\n\nLANGUAGE: handlebars\nCODE:\n```\n{{occurrences \"foo bar foo bar baz\" \"foo\"}}\n<!-- => 2 -->\n```\n\n----------------------------------------\n\nTITLE: Installing Theme Modules with NPM\nDESCRIPTION: Commands to navigate to the theme directory and install required NPM modules for themes version 1.10.0+. This installs dependencies needed to leverage the Stencil event framework.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/development-server.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# move into the theme dir\ncd ~/path/to/theme/dir\n\n# install modules using npm\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL Dependencies\nDESCRIPTION: NPM command to install required packages for MySQL integration including mysql2, jsonwebtoken, and swr.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save mysql2 jsonwebtoken swr\n```\n\n----------------------------------------\n\nTITLE: Updating Segments via PUT Request\nDESCRIPTION: Updates existing segment information by sending a PUT request with segment ID, name, and description.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/segments/user-guide.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/segments\nX-Auth Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"name\": \"My Segment\",\n    \"description\": \"New and improved segment description.\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Replacing Substring in String - JavaScript\nDESCRIPTION: Replaces all instances of a specified substring with another substring in a given string.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction replace(str, search, replacement) { return str.split(search).join(replacement); }\n```\n\n----------------------------------------\n\nTITLE: Using getImageSrcset Helper with Pixel Density\nDESCRIPTION: Shows how to generate a srcset with different image resolutions for different pixel density screens, such as providing 2x images for Retina displays.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_55\n\nLANGUAGE: handlebars\nCODE:\n```\n{{getImageSrcset image 1x=\"1280w\" 2x=\"2560w\"}}\n{{getImageSrcset image 1x=\"800w\" 1.5x=\"1200w\" 2x=\"1600w\"}}\n{{getImageSrcset image 1x=\"640x640\" 2x=\"1280x1280\"}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Storefront Channel with BigCommerce API\nDESCRIPTION: HTTP request example for creating a storefront channel by setting the type to 'storefront'. This allows merchants to assign product listings and configure storefront-specific settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/guide/storefronts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/channels\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"name\": \"Custom PWA Storefront\",\n  \"type\": \"storefront\",\n  \"platform\": \"custom\",\n  \"external_id\": \"\",\n  \"status\": \"connected\",\n  \"is_listable_from_ui\": true,\n  \"is_visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Catalog Price Object Including and Excluding Tax in JSON\nDESCRIPTION: Provides JSON examples for catalog price objects reflecting both tax-included and tax-excluded pricing configurations. The structure considers dependencies on BigCommerce's tax display settings and pricing data. The expected input involves product data with detailed tax settings and the output is a JSON structure adaptable for display according to tax configurations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/catalog-price-object.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"product\": {\n    \"price\": {\n      \"with_tax\": {\n        \"formatted\": \"$165.00\",\n        \"value\": 165\n      },\n      \"without_tax\": {\n        \"formatted\": \"$150.00\",\n        \"value\": 150\n      },\n      \"rrp_with_tax\": {\n        \"formatted\": \"$275.00\",\n        \"value\": 275\n      },\n      \"rrp_without_tax\": {\n        \"formatted\": \"$250.00\",\n        \"value\": 250\n      },\n      \"saved\": {\n        \"formatted\": \"$110.00\",\n        \"value\": 110\n        },\n      \"tax_label\": \"Tax\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response After Converting to Pickup Consignment\nDESCRIPTION: Shows the response when a shipping consignment is successfully converted to a pickup consignment. The response includes the selected pickup option with the specified pickup method ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    ...\n    \"consignments\": [\n      {\n        \"id\": \"6218019d81754\",\n        \"shipping_cost_inc_tax\": 0,\n        \"shipping_cost_ex_tax\": 0,\n        \"handling_cost_inc_tax\": 0,\n        \"handling_cost_ex_tax\": 0,\n        \"coupon_discounts\": [],\n        \"discounts\": [],\n        \"line_item_ids\": [\n          \"67642f07-49d1-4501-8b7d-2e589aec34b8\"\n        ],\n        \"selected_pickup_option\": {\n          \"pickup_method_id\": 1\n        }...\n      }\n    ]\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Product Modifier with Checkbox\nDESCRIPTION: Creates a product modifier with a checkbox type and donation option using the BigCommerce API. The request creates a checkbox modifier that adds a $5 donation option to a product.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/index.mdx#2025-04-16_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products/{{product_id}}/modifiers\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"type\": \"checkbox\",\n  \"required\": false,\n  \"config\": {\n    \"default_value\": \"Yes\",\n    \"checked_by_default\": false,\n    \"checkbox_label\": \"Check for Donation\"\n  },\n  \"display_name\": \"Add a $5 Donation\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Chocolatey PowerShell Execution Policy Error\nDESCRIPTION: PowerShell command to enable RemoteSigned execution policy, which resolves permission issues when installing Chocolatey on Windows systems.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/install.mdx#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned\n```\n\n----------------------------------------\n\nTITLE: Math Operation Helpers in Handlebars\nDESCRIPTION: Mathematical operation helpers including add, subtract, multiply, divide, avg, ceil, floor, round, random, and sum. These helpers perform basic arithmetic and mathematical calculations within templates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_29\n\nLANGUAGE: handlebars\nCODE:\n```\n{{add a b}}\n{{subtract a b}}\n{{multiply a b}}\n{{divide a b}}\n{{ceil number}}\n{{floor number}}\n```\n\n----------------------------------------\n\nTITLE: Response for Channel Currency Assignments\nDESCRIPTION: JSON response showing the currency configuration for a specific channel, including the default currency and all enabled currencies.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/guide/storefronts.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"channel_id\": 1,\n    \"default_currency\": \"USD\",\n    \"enabled_currencies\": [\"USD\", \"CAD\"]\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Tax Properties in BigCommerce\nDESCRIPTION: Updates existing tax properties by specifying the ID and fields to modify. Example shows updating the description of a tax property.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/tax-properties.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/tax/properties\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"id\": 1,\n    \"description\": \"Alcohol Industry\"\n  }  \n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Storefront Selector in JSON\nDESCRIPTION: Example JSON configuration for the storefront selector in the config.json file, including multiple storefronts and visibility setting.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/storefront-selector.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"settings\": {\n  \"channels\": [\n    {\n      \"id\": 1,\n      \"name\": \"Example storefront 1\",\n      \"code\": \"example-storefront-1\",\n      \"is_active\": true,\n      \"switch_url\": \"https://example-storefront-1.mybigcommerce.com\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Example storefront 2\",\n      \"code\": \"example-storefront-2\",\n      \"is_active\": false,\n      \"switch_url\": \"https://example-storefront-2.mybigcommerce.com\"\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Example storefront 3\",\n      \"code\": \"example-storefront-3\",\n      \"is_active\": false,\n      \"switch_url\": \"https://example-storefront-3.mybigcommerce.com\"\n    }\n  ],\n  \"show_channels\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Shoppers from Segments via DELETE Request\nDESCRIPTION: Removes shopper profiles from a specific segment using a DELETE request with segment ID and optional shopper profile IDs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/segments/user-guide.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nDELETE https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/segments/{{segmentId}}/shopper-profiles\nX-Auth Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Accessing Variants in JavaScript\nDESCRIPTION: Shows how to parse and access variant data from the product form on the client side\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/themes/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar variants = JSON.parse($('[data-js=\"product-variants-object\"]').attr('data-variants'));\nvar variant_ids = variants.map( variant => variant.variant_id );\n```\n\n----------------------------------------\n\nTITLE: Restarting Development Server for BigCommerce App\nDESCRIPTION: Command to restart the Next.js development server after updating environment variables to ensure changes take effect.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-connect.mdx#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: BigCommerce Cart Conversion Webhook Payload\nDESCRIPTION: Payload structure for when a cart is converted to an order.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/cart/converted\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"cart\",\n    \"id\": \"d30016e2-23c0-4a90-884f-2e92ac135476\",\n    \"orderId\": 252\n  },\n  \"hash\": \"b86db7c77d7ef8f90d6a8aefa56de32ccd776923\",\n  \"created_at\": 1561486893,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Product Inventory Query Response\nDESCRIPTION: Example JSON response showing aggregate inventory data for multiple products, including available stock and warning levels.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/inventory/queries.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"products\": {\n        \"edges\": [\n          {\n            \"node\": {\n              \"entityId\": 113,\n              \"name\": \"Example Product 1\",\n              \"inventory\": {\n                \"aggregated\": {\n                  \"availableToSell\": 20,\n                  \"warningLevel\": 5\n                }\n              }\n            }\n          },\n          {\n            \"node\": {\n              \"entityId\": 115,\n              \"name\": \"Example Product 2\",\n              \"inventory\": {\n                \"aggregated\": {\n                  \"availableToSell\": 0,\n                  \"warningLevel\": 0\n                }\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Shared Variant Options for a Locale in BigCommerce GraphQL\nDESCRIPTION: This GraphQL mutation removes shared variant option information for a specific locale within a storefront channel. It allows removing overrides for specified options and their values.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-variant-options.mdx#2025-04-16_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\nmutation ($input: RemoveSharedProductOptionsOverridesInput!) {\n  sharedProductOptions {\n    removeSharedProductOptionsOverrides (input: $input) {\n      sharedProductOptions {\n        id\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"localeContext\": {\n      \"channelId\": \"bc/store/channel/2\",\n      \"locale\": \"uk\"\n    },\n    \"data\": {\n      \"options\": [\n        {\n          \"optionId\": \"bc/store/sharedProductOption/2\",\n          \"data\": {\n            \"radioButtons\": {\n              \"fields\": [\"RADIO_BUTTONS_SHARED_PRODUCT_OPTION_DISPLAY_NAME_FIELD\"],\n              \"values\": {\n                \"ids\": [\"bc/store/sharedProductOptionValue/125\", \"bc/store/sharedProductOptionValue/126\"]\n              }\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"sharedProductOptions\": {\n      \"removeSharedProductOptionsOverrides\": {\n        \"sharedProductOptions\": [\n          {\n            \"id\": \"bc/store/sharedProductOption/2\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Product Modifier Options for a Locale using GraphQL\nDESCRIPTION: This mutation removes product modifier option information for a specific locale within a storefront channel. It requires the product ID, locale, channel ID, and the modifier details to be removed.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\nmutation ($input: RemoveProductModifiersOverridesInput!) {\n  product {\n    removeProductModifiersOverrides (input: $input) {\n      product {\n        id\n        modifiers {\n          edges {\n            node {\n              id\n              displayName\n            }\n          }   \n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"localeContext\": {\n      \"locale\": \"fr\",\n      \"channelId\": \"bc/store/channel/2\"\n    },\n    \"data\": {\n      \"modifiers\": [\n        {\n          \"modifierId\": \"bc/store/productModifier/118\",\n          \"data\": {\n            \"checkbox\": {\n              \"fields\": [\n                \"CHECKBOX_PRODUCT_MODIFIER_DISPLAY_NAME_FIELD\"\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Excessive Complexity\nDESCRIPTION: This GraphQL query demonstrates a scenario that can lead to complexity errors in the BigCommerce API. It requests data from multiple product collections with nested fields like prices, variants, and options, which increases the complexity score. Reducing the number of requested items or simplifying the nested structure can resolve the error.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/index.mdx#2025-04-16_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    products(first: 50) {\n      edges {\n        node {\n          ...ProductFields\n        }\n      }\n    }\n    featuredProducts(first:50) {\n      edges {\n        node {\n          ...ProductFields\n        }\n      }\n    }\n    newestProducts(first:50) {\n      edges {\n        node {\n          ...ProductFields\n        }\n      }\n    }\n    bestSellingProducts(first:50) {\n      edges {\n        node {\n          ...ProductFields\n        }\n      }\n    }\n  }\n}\n\nfragment ProductFields on Product {\n  name\n  prices {\n    price {\n      value\n      currencyCode\n    }\n    retailPrice {\n      value\n      currencyCode\n    }\n  }\n  variants(first: 250) {\n    edges {\n      node {\n        entityId\n        depth {\n          value\n          unit\n        }\n        sku\n      }\n    }\n  }\n  productOptions(first: 50) {\n    edges {\n      node {\n        displayName\n        ... on MultipleChoiceOption {\n          values(first: 50) {\n            edges {\n              node {\n                label\n                entityId\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Parsing with JSONparse Helper in Handlebars\nDESCRIPTION: Shows how to use the JSONparse helper to parse JSON data within a Handlebars template. It takes a single parameter: the JSON string to parse.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_106\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#JSONparse '{\"foo\": \"bar\"}'}\n  {{foo}}\n{{/JSONparse}}\n<!-- output: bar -->\n```\n\n----------------------------------------\n\nTITLE: Creating cPanel Cron Job for WordPress\nDESCRIPTION: Shell command for creating a cron job through cPanel that triggers WordPress cron events. The command uses wget to make an HTTP request to wp-cron.php at specified intervals.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/deployment/creating-reliable-cron-jobs.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwget -q -O - https://example.com/wp-cron.php?doing_wp_cron >/dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Text Widget in BigCommerce HTML\nDESCRIPTION: This template creates a text widget with extensive styling options, including color, font properties, alignment, margins, and padding. It uses inline styles for maximum flexibility.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/examples.mdx#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<style>#bc-simple-text-{{_.id}} {color: {{color}};background: {{background_color}};font-size: {{font_size}};font-style: {{font_style}};font-weight: {{font_weight}};font-family: {{font_family}};text-align: {{text_align}};margin-top: {{margin_top}};margin-bottom: {{margin_bottom}};margin-left: {{margin_left}};margin-right: {{margin_right}};padding-top: {{padding_top}};padding-bottom: {{padding_bottom}};padding-left: {{padding_left}};padding-right: {{padding_right}};}</style><p id='bc-simple-text-{{_.id}}'>{{text}}</p>\n```\n\n----------------------------------------\n\nTITLE: Defining ProductSaleBadgeLabel Setting in JSON\nDESCRIPTION: This snippet showcases how to define the 'ProductSaleBadgeLabel' setting in JSON format. The setting includes fields such as 'type', 'label', 'force_reload', 'id', 'reference', and 'reference_default'. It uses the 'reference' and 'reference_default' fields to toggle its visibility based on the value of the 'ShowProductSaleBadges' setting. The linkage allows it to be displayed or hidden according to specific conditions defined in the referenced setting.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/object-reference/elements/reference.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"text\",\n  \"label\": \"i18n.ProductSaleBadgeLabel\",\n  \"force_reload\": true,\n  \"id\": \"pdp_sale_badge_label\",\n  \"reference\": \"product_sale_badges\",\n  \"reference_default\": \"none\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Theme Changes with Stencil Push\nDESCRIPTION: Pushes the fixed theme changes to the live storefront after verifying there are no issues.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/node-sass.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nstencil push\n```\n\n----------------------------------------\n\nTITLE: Pushing a Theme with First Variation Activation\nDESCRIPTION: Command to push a theme and automatically activate the first variation without specifying a name.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/upload.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nstencil push -a\n```\n\n----------------------------------------\n\nTITLE: Defining Color Variables in config.json - JSON\nDESCRIPTION: This snippet shows how to define color variables in `config.json` that will be used for theming through Sass, allowing for dynamic styling based on the defined color values.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/global-styles.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"color-highlight\": \"#00abc9\",\n  \"color-highlightDark\": \"#f2f2f2\",\n  \"color-highlightDarker\": \"#dfdfdf\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Element with Conditional Shipping Phone Display\nDESCRIPTION: Example showing how to wrap a shipping phone variable with conditional display styling using BigCommerce global variables. This demonstrates the proper usage of Hide variables for conditional content display.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/shipping/packing-slips.mdx#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style=%%GLOBAL_HideShippingPhone%%>Phone number: %%GLOBAL_ShippingPhone%%</div>\n```\n\n----------------------------------------\n\nTITLE: Response for Multiple Variant Inventory Query in BigCommerce\nDESCRIPTION: This JSON response shows inventory data for multiple product variants. It illustrates how variants with no stock across all locations are omitted from the response when the 'hide out-of-stock options' setting is enabled.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/inventory/queries.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"products\": {\n        \"edges\": [\n          {\n            \"node\": {\n              \"entityId\": 113,\n              \"name\": \"Example Product 1\",\n              \"variants\": {\n                \"edges\": [\n                  {\n                    \"node\": {\n                      \"entityId\": 96,\n                      \"sku\": \"ABC-1111-PU\",\n                      \"inventory\": {\n                        \"aggregated\": {\n                          \"availableToSell\": 10,\n                          \"warningLevel\": 5\n                        },\n                        \"byLocation\": {\n                          \"edges\": [\n                            {\n                              \"node\": {\n                                \"locationEntityId\": 1,\n                                \"locationEntityCode\": \"BC-LOCATION-1\",\n                                \"locationEntityTypeId\": \"PHYSICAL\",\n                                \"locationDistance\": null,\n                                \"availableToSell\": 10,\n                                \"warningLevel\": 5,\n                                \"isInStock\": true\n                              }\n                            },\n\n                            // By default, responses don't include non-default locations\n                            {\n                              \"node\": {\n                                \"locationEntityId\": 2,\n                                \"locationEntityCode\": \"BC-LOCATION-2\",\n                                \"locationEntityTypeId\": \"PHYSICAL\",\n                                \"locationDistance\": null,\n                                \"availableToSell\": 0,\n                                \"warningLevel\": 0,\n                                \"isInStock\": false\n                              }\n                            }\n                          ]\n                        }\n                      }\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Logo Size in Order Email Template using Handlebars\nDESCRIPTION: This example shows how to modify the size of the logo in the Order Email template. It replaces the default img tag with one that specifies width and height attributes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/emails/examples.mdx#2025-04-16_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n<img src=\"{{store.logo.url}}\" alt=\"{{store.logo.title}}\" width=\"200\" height=\"200\">\n```\n\n----------------------------------------\n\nTITLE: Defining App Extension with Label in JSON\nDESCRIPTION: This JSON snippet demonstrates how to define an App Extension with a label for the 'Add personal thanks' action on the Orders page. It includes the extension ID, URL with a variable parameter, model type, and label with a default value.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/app-extensions/glossary.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"bc/store/appExtension/2\",\n  \"url\": \"/orders/${id}/personal-thanks\",\n  \"model\": \"ORDERS\",\n  \"label\": {\n    \"defaultValue\": \"Add personal thanks\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Standard Plan Rate Limit Headers in HTTP Response\nDESCRIPTION: Shows the structure of rate limit headers in a standard BigCommerce API response. These headers provide information about the current quota, requests remaining, time window, and time until reset.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/api-docs/getting-started/api-rate-limits.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nX-Rate-Limit-Time-Window-Ms: 30000\nX-Rate-Limit-Time-Reset-Ms: 15000\nX-Rate-Limit-Requests-Quota: 150\nX-Rate-Limit-Requests-Left: 35\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Checkout JS\nDESCRIPTION: Commands to start the webpack watch mode and launch the development server for Checkout JS.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/open-checkouts/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev & npm run dev:server\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Settings for BigCommerce Shipping Provider\nDESCRIPTION: JSON configuration schema defining connection settings for a shipping provider, including API token, account key, and sandbox mode settings. These configurations are used during carrier setup and included in API requests.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/shipping.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"code\": \"api_token\",\n        \"type\": \"password\",\n        \"label\": \"API Token\",\n        \"description\": \"API token to access the carrier.\",\n        \"required\": true\n    },\n    {\n        \"code\": \"account_key\",\n        \"type\": \"text\",\n        \"label\": \"Account Key\",\n        \"description\": \"Client ID for your carrier.\",\n        \"required\": true\n    },\n    {\n        \"code\": \"use_sandbox\",\n        \"type\": \"checkbox\",\n        \"label\": \"Sandbox\",\n        \"description\": \"When enabled sandbox mode is used\",\n        \"required\": false\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Inventory Settings by Product\nDESCRIPTION: Shows how to update inventory settings like warning level and safety stock for products at a specific location.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/locations/{location_id}/items\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"settings\": [\n    {\n      \"identity\": {\n        \"product_id\": 111\n      },\n      \"safety_stock\": 2,\n      \"warning_level\": 5\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transaction_id\": \"6e172496-b0bb-46d5-adf5-855ba901cae7\"\n}\n```\n\n----------------------------------------\n\nTITLE: Widget Builder Configuration Session\nDESCRIPTION: Interactive configuration session showing the prompts for setting up Widget Builder with store API credentials.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/widget-builder.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n~/bc-projects/tools-r-us/widget-workshop % widget-builder init\n\nThank you for using Widget Builder\n\nThis guide will help you get your environment set up.\n\nBefore continuing, please make sure you've created or received a Store API account.\nYou'll need those credentials in order to generate the appropriate configurations.\nYou can find more information here. https://support.bigcommerce.com/s/article/Store-API-Accounts#creating\n\n? Are you ready to continue? You may press any key to continue (Y/n) \n  > Y\n? What is the Client ID? \n  > xxxxxxxxxxxxx\n? What is the Access Token? \n  > xxxxxxxxxxxxx\n? What is the API Path? \n  > xxxxxxxxxxxxx\n[2021-09-08T15:12:40.271Z] Successfully created your configuration, you're all set!\n```\n\n----------------------------------------\n\nTITLE: Theme Webhook Payload Structure in JSON\nDESCRIPTION: Example payload structure for theme-related webhook events, showing the format when a theme is created or activated. Contains theme-specific data including theme ID, variation ID, version ID, and configuration ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\": \"11111\",\n \"producer\": \"stores/abcde\",\n \"created_at\": 1641641646,\n \"scope\": \"store/channel/1/theme/configuration/created\",\n  \"data\": {\n    \"theme_id\": \"e3d82ce0-9bae-0133-0de7-525400970412\",\n    \"variation_id\": \"f49489c0-8678-013a-2933-5227bc3d7181\",\n    \"version_id\": \"f4337c30-8678-013a-2933-5227bc3d7181\",\n    \"configuration_id\": \"2dc1c3f0-b2cf-013a-a341-2aac1278f99c\"\n  },\n \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Theme Changes to Storefront\nDESCRIPTION: This command pushes your local theme changes to the BigCommerce platform and deploys them to your storefront.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/unexpected-behavior.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nstencil push\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple Attributes with Handlebars\nDESCRIPTION: This code snippet demonstrates how to declare multiple attributes including product reviews and related products in YAML, and then use Handlebars to render the associated HTML for reviews and related products.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter.mdx#2025-04-16_snippet_5\n\nLANGUAGE: handlebars\nCODE:\n```\nproduct:\n  reviews:\n    limit: 9\n  related_products:\n    limit: 10\n\n<h2>{{ product.name }}</h2>\n  {{#each product.reviews.list}}\n    <p>{{text}}</p>\n  {{/each}}\n<h3>Related Products</h3>\n  {{#each product.related_products}}\n    <img src=\"{{getImage image 'gallery'}}\">\n    <p>{{ name }}</p>\n  {{/each}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Widget Placement via REST API in BigCommerce\nDESCRIPTION: HTTP request to create a placement for a widget using the BigCommerce REST Content API, which positions the widget on a specific template and region.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/graphql-templates.mdx#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/content/placements\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"widget_uuid\": \"{{WIDGET_UUID}}\",\n  \"template_file\": \"{{TEMPLATE_FILE}}\",\n  \"status\": \"active\",\n  \"region\": \"{{REGION}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Translation in Stencil Theme HTML\nDESCRIPTION: This HTML snippet demonstrates how to use the Handlebars 'lang' directive to display a translated string in a Stencil theme. It shows the implementation of the 'new_hours' translation key.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/tutorial.mdx#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{{/if}} \n{{> components/common/alert/alert-success (lang 'header.new_hours' hours=\"8 AM to 5 PM Central\" ) }}\n<header class=\"header\" role=\"banner\">\n```\n\n----------------------------------------\n\nTITLE: Using contains Helper in Handlebars for Array Membership Testing\nDESCRIPTION: The contains helper checks if an array contains a specific element and conditionally renders content based on the result. If the specified element is not found in the array, the else block is rendered.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_61\n\nLANGUAGE: handlebars\nCODE:\n```\n<!-- array = ['a', 'b', 'c'] -->\n{{#contains array \"d\"}}\n  This will not be rendered.\n{{else}}\n  This will be rendered.\n{{/contains}}\n```\n\n----------------------------------------\n\nTITLE: HTTP Configuration for GraphQL Account API\nDESCRIPTION: Base HTTP configuration required for making requests to the GraphQL Account API, including endpoint and required headers.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/graphql-account/users.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/accounts/{{account_uuid}}/graphql\nX-Auth-Token: {{access_token}}\nAccept: application/json\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Pushing a Theme and Applying to Specific Channels\nDESCRIPTION: Command to push a theme and apply it to selected channel IDs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/upload.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nstencil push -a -c 123 456\n```\n\n----------------------------------------\n\nTITLE: Removing Shared Product Modifier Overrides with GraphQL in BigCommerce\nDESCRIPTION: This GraphQL mutation removes shared modifier option information for a specific locale within a storefront channel. It requires authentication via X-Auth-Token and accepts input parameters for locale context and modifier data.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\nmutation ($input: RemoveSharedProductModifiersOverridesInput!) {\n  sharedProductModifiers {\n    removeSharedProductModifiersOverrides (input: $input) {\n      sharedProductModifiers {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging BigCommerce Checkout Object in Browser Console\nDESCRIPTION: This JavaScript command is used in the browser console to fetch and display the checkout content. It's useful for debugging and inspecting the checkout object during custom checkout development.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/checkout-sdk/tutorial.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstate.data.getCheckout();\n```\n\n----------------------------------------\n\nTITLE: Creating 10% VIP Customer Discount in BigCommerce\nDESCRIPTION: Example showing how to create a 10% automatic discount for customers in VIP group (group_id: 1). Includes request payload and response showing full promotion details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/customer.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"10% off for VIP customers\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"customer\": {\n    \"group_ids\": [\n      1\n    ]\n  },\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_value\": {\n          \"discount\": {\n            \"percentage_amount\": \"10\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Variables for Product Modifier Configuration\nDESCRIPTION: JSON variables used with the GraphQL mutation to specify product and modifier details. Shows how to structure the input data for setting rectangle list modifier values.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"data\": {\n      \"modifiers\": [\n        {\n          \"modifierId\": \"bc/store/productModifier/121\",\n          \"data\": {\n            \"rectangleList\": {\n              \"displayName\": \"Holiday Theme\",\n              \"values\": [\n                {\n                  \"valueId\": \"bc/store/productModifierValue/113\",\n                  \"label\": \"Birthday\"\n                },\n                {\n                  \"valueId\": \"bc/store/productModifierValue/114\",\n                  \"label\": \"Christmas\"\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Facets Response JSON Structure for Rating-Filtered Products\nDESCRIPTION: The JSON response structure for a facets query, showing category and other search filters returned for products with ratings between 3 and 5. The response includes category information with product counts and stock status.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/products/faceted-textual-search.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"search\": {\n        \"searchProducts\": {\n          \"filters\": {\n            \"edges\": [\n              {\n                \"node\": {\n                  \"__typename\": \"CategorySearchFilter\",\n                  \"name\": \"Category\",\n                  \"isCollapsedByDefault\": false,\n                  \"displayProductCount\": true,\n                  \"categories\": {\n                    \"edges\": [\n                      {\n                        \"node\": {\n                          \"entityId\": 19,\n                          \"isSelected\": false,\n                          \"productCount\": 1,\n                          \"subCategories\": {\n                            \"edges\": []\n                          }\n                        }\n                      },\n                      {\n                        \"node\": {\n                          \"entityId\": 21,\n                          \"isSelected\": false,\n                          \"productCount\": 1,\n                          \"subCategories\": {\n                            \"edges\": []\n                          }\n                        }\n                      }\n                    ]\n                  }\n                }\n              },\n              {\n                \"node\": {\n                  \"__typename\": \"OtherSearchFilter\",\n                  \"name\": \"Other\",\n                  \"isCollapsedByDefault\": true,\n                  \"displayProductCount\": true,\n                  \"freeShipping\": null,\n                  \"isInStock\": {\n                    \"isSelected\": false,\n                    \"productCount\": 2\n                  },\n                  \"isFeatured\": null\n                }\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Theme Dependencies with npm\nDESCRIPTION: Command to install the required node modules for the theme project.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/storefront-selector.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating Widget Placement without Region in BigCommerce\nDESCRIPTION: Example JSON payload for creating a widget placement without specifying a region, allowing for widget rendering using layouts. Shows minimal required properties for placement creation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"widget_uuid\": \"2dfeb50e-5f8c-4df2-8525-a338091eed32\",\n    \"entity_id\": \"21\",\n    \"template_file\": \"pages/category\",\n    \"status\": \"active\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Imports for API Endpoint\nDESCRIPTION: Imports necessary packages for setting up an API endpoint in Next.js that handles product updates with BigCommerce. Requires 'next' for request and response types, and local 'auth' library for authentication. Used in dynamic route files to enhance request handling capabilities.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { bigcommerceClient, getSession } from '../../../lib/auth';\n```\n\n----------------------------------------\n\nTITLE: Deleting Product Tax Properties in BigCommerce\nDESCRIPTION: An HTTP DELETE request to remove all tax properties from a specific product. This endpoint completely disassociates tax properties from the specified product ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/tax-properties.mdx#2025-04-16_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nDELETE https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/tax/products/properties?product_id:in=117\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Creating a Cart for Guest Customer in BigCommerce\nDESCRIPTION: This HTTP request creates a cart without a customer ID, suitable for guest checkout flows. It includes minimal required fields: channel ID and line items with product information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/abandoned-carts.mdx#2025-04-16_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/carts\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"channel_id\": 773240,\n  \"line_items\": [\n    {\n      \"quantity\": 5,\n      \"product_id\": 191\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Variables for Create Checkout Mutation\nDESCRIPTION: These are sample variables to be used with the createCheckout mutation. They include details such as account ID, product information, pricing plan, and redirect URL.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"checkout\": {\n    \"accountId\": \"bc/account/account/61db983a-cd07-4d6b-8b59-a5ffe285ca6a\",\n    \"items\": [\n      {\n        \"product\": {\n          \"id\": \"bc/account/product/1234\",\n          \"type\": \"APPLICATION\",\n          \"productLevel\": \"Standard\"\n        },\n        \"scope\": {\n          \"id\": \"bc/account/scope/f0qyczpkb2\",\n          \"type\": \"STORE\"\n        },\n        \"pricingPlan\": {\n          \"interval\": \"MONTH\",\n          \"price\": {\n            \"value\": 29.99,\n            \"currencyCode\": \"USD\"\n          },\n          \"trialDays\": 0\n        },\n        \"description\": \"App Subscription - Standard\",\n        \"redirectUrl\": \"https://store-f0qyczpkb2.mybigcommerce.com/manage/app/1234/upgrade_success\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the cdn Helper in Handlebars with BigCommerce\nDESCRIPTION: The cdn helper transforms asset paths into full CDN URLs. It can handle both theme assets and WebDAV-uploaded assets using different path prefixes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_32\n\nLANGUAGE: handlebars\nCODE:\n```\n{{cdn assetPath}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{cdn \"assets/img/image.jpg\"}}\n<!-- => https://cdn.bcapp/3dsf74g/stencil/123/img/image.jpg -->\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<img src=\"{{cdn 'webdav:img/image.jpg'}}\">\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<img src=\"https://cdn.bcapp/3dsf74g/content/img/image.jpg\">\n```\n\n----------------------------------------\n\nTITLE: OAuth Scope Configuration Table\nDESCRIPTION: Configuration table showing required OAuth scope settings for different import options (Full Import vs Fast Headless) when setting up BigCommerce API credentials for WordPress integration.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/start/multi-site.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| OAuth Scope       | Full Import           | Fast Headless     |\n|:------------------|:----------------------|:------------------|\n| Content           | None                  | None              |\n| Checkout content  | None                  | None              |\n| Customers         | Modify                | Modify            |\n| Customers login   | Login                 | Login             |\n| Information & settings | Modify           | Modify            |\n| Marketing         | Read-Only             | Read-Only         |\n| Orders            | Read-Only             | Read-Only         |\n| Order transactions| Read-Only             | Read-Only         |\n| Create payments   | None                  | None              |\n| Get payment methods | Read-Only           | Read-Only         |\n| Stored payment instruments| None          | None              |\n| Products          | Read-Only             | Read-Only         |\n| Themes            | None                  | None              |\n| Carts             | Modify                | Modify            |\n| Checkouts         | Modify                | Modify            |\n| Sites & routes    | Modify                | Modify            |\n| Channel settings  | Modify                | Modify            |\n| Channel listings  | Modify                | Modify            |\n| Storefront API tokens | None              | Manage            |\n| Storefront API customer impersonation tokens | None     | Manage |\n| Store logs        | None                  | None              |\n| Store locations   | None                  | None              |\n| Store inventory   | None                  | None              |\n| Fulfillment methods | None                | None              |\n| Order fulfillment | None                  | None              |\n```\n\n----------------------------------------\n\nTITLE: Response for IGNORE Redirect Behavior\nDESCRIPTION: This JSON response shows the result of querying a route with IGNORE redirect behavior. The node value is null because the redirect is ignored, but the redirect information is still provided.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/routes.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"route\": {\n        \"redirect\": {\n          \"__typename\": \"Redirect\",\n          \"to\": {\n            \"__typename\": \"ProductRedirect\",\n            \"entityId\": 132,\n            \"path\": \"/austin-coffee-cup/\"\n          },\n          \"toUrl\": \"https://store.mybigcommerce.com/austin-coffee-cup/\"\n        },\n        \"node\": null\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Sorting Feature in schema.json\nDESCRIPTION: This section of code adds a sorting interface to Page Builder within schema.json, allowing customizable sorting of wallet button providers. It lists several wallet services with an order configuration option for merchants.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/checkout-enhancements/wallet-buttons.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  ..., \n  {\n    \"name\": \"Payments\",\n    \"settings\": [\n      ..., \n      {\n        \"type\": \"heading\",\n        \"content\": \"i18n.QuickPaymentButtons\"\n      },\n      {\n        \"type\": \"sort\",\n        \"label\": \"i18n.ProviderSortingOrderLabel\",\n        \"id\": \"paymentbuttons-provider-sorting\",\n        \"force_reload\": true, \n        \"options\": [\n          {\n            \"value\": \"paypal\",\n            \"label\": \"i18n.PayPalProviderSortingLabel\",\n            \"enabledBy\": \"paypal\"\n          },\n          {\n            \"value\": \"paypal-credit\",\n            \"label\": \"i18n.PayPalCreditProviderSortingLabel\",\n            \"enabledBy\": \"paypal-credit\"\n          },\n          {\n            \"value\": \"paypal-venmo\",\n            \"label\": \"i18n.PayPalVenmoProviderSortingLabel\",\n            \"enabledBy\": \"paypal-venmo\"\n          },\n          {\n            \"value\": \"googlepay\",\n            \"label\": \"i18n.GooglepayProviderSortingLabel\",\n            \"enabledBy\": \"googlepay\"\n          },\n          {\n            \"value\": \"applepay\",\n            \"label\": \"i18n.ApplepayProviderSortingLabel\",\n            \"enabledBy\": \"applepay\"\n          },\n          {\n            \"value\": \"amazonpay\",\n            \"label\": \"i18n.AmazonProviderSortingLabel\",\n            \"enabledBy\": \"amazonpay\"\n          },\n        ]\n      },\n      ...\n    ]\n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Setting NVM Version for Linter\nDESCRIPTION: Command to set Node Version Manager (NVM) to version 18, which is required to run the linting script.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/guides/lint-a-document-with-dx-linter-script.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm use 18\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Selection Logic\nDESCRIPTION: Implements a switch statement to determine which database to use based on the DB_TYPE environment variable.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst { DB_TYPE } = process.env;\n\nlet db: Db;\n\nswitch (DB_TYPE) {\n    case 'firebase':\n        db = firebaseDB;\n        break;\n    case 'mysql':\n        db = sqlDB;\n        break;\n    default:\n        db = firebaseDB;\n        break;\n}\n\nexport default db;\n```\n\n----------------------------------------\n\nTITLE: Cloning the Cornerstone Theme from GitHub\nDESCRIPTION: Command to download BigCommerce's Cornerstone theme, which serves as the foundation for developing custom themes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/development-server.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/bigcommerce/cornerstone.git\n```\n\n----------------------------------------\n\nTITLE: Low Stock Level Response\nDESCRIPTION: JSON response when store is configured to show stock levels only for low stock items.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/inventory/queries.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"products\": {\n        \"edges\": [\n          {\n            \"node\": {\n              \"entityId\": 113,\n              \"name\": \"Example Product 1\",\n              \"inventory\": {\n                \"aggregated\": null\n              }\n            }\n          },\n          {\n            \"node\": {\n              \"entityId\": 115,\n              \"name\": \"Example Product 2\",\n              \"inventory\": {\n                \"aggregated\": {\n                  \"availableToSell\": 0,\n                  \"warningLevel\": 0\n                }\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Session Sync JWT Generation in GraphQL\nDESCRIPTION: A simplified GraphQL mutation example showing how to generate a session sync JWT token with minimal parameters. This example uses hard-coded values for redirectTo and visitorId parameters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n# Low-level session sync JWT generation\n# Returns JUST a JWT, *not* a URL\n# Can \"sync\" any arbitrary combination of parameters\n# e.g., just sync analytics ID, just sync customer ID, just sync analytics + customer, etc\n# Designed to be used omni-directionally\n# e.g., headless -> stencil, stencil-> headless, headless->headless, stencil->stencil\n\nmutation GenerateSessionSyncJwt {\n  generateSessionSyncJwt(redirectTo:\"/foo\",visitorId:\"abc123\"){\n    result {\n      token\n      url\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Widget Data JSON Response in BigCommerce\nDESCRIPTION: Example JSON response from the Get all widgets endpoint showing the structure of a product widget including its configuration, template details, and GraphQL query.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/graphql-templates.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"channel_id\": 1,\n      \"date_created\": \"2021-04-09T21:27:21.163Z\",\n      \"date_modified\": \"2021-04-09T21:40:47.892Z\",\n      \"description\": \"\",\n      \"name\": \"Product Widget\",\n      \"storefront_api_query_params\": {\n        \"productId\": 77\n      },\n      \"uuid\": \"7e6d7a11-164e-4eb1-ae0a-af07f3e2c8fb\",\n      \"version_uuid\": \"3f4defcf-2429-425d-8e5a-7c3807fa9896\",\n      \"widget_configuration\": {\n        \"_\": {\n          \"id\": \"7e6d7a11-164e-4eb1-ae0a-af07f3e2c8fb\"\n        },\n        \"productId\": \"77\"\n      },\n      \"widget_template\": {\n        \"channel_id\": 1,\n        \"client_rerender\": false,\n        \"current_version_uuid\": \"3f4defcf-2429-425d-8e5a-7c3807fa9896\",\n        \"date_created\": \"2021-04-09T21:23:16.274Z\",\n        \"date_modified\": \"2021-04-09T21:23:16.274Z\",\n        \"icon_name\": \"default\",\n        \"kind\": \"custom\",\n        \"name\": \"Product Widget\",\n        \"schema\": [\n          {\n            \"settings\": [\n              {\n                \"id\": \"graphQueries\",\n                \"type\": \"graphQl\",\n                \"typeMeta\": {\n                  \"mappings\": {\n                    \"productId\": {\n                      \"reads\": \"productId\",\n                      \"type\": \"Int!\"\n                    }\n                  }\n                }\n              }\n            ],\n            \"type\": \"hidden\"\n          },\n          {\n            \"label\": \"Content\",\n            \"sections\": [\n              {\n                \"label\": \"Product\",\n                \"settings\": [\n                  {\n                    \"default\": \"\",\n                    \"id\": \"productId\",\n                    \"label\": \"Product\",\n                    \"type\": \"productId\",\n                    \"typeMeta\": {\n                      \"placeholder\": \"Search by name or SKU\"\n                    }\n                  }\n                ]\n              }\n            ],\n            \"type\": \"tab\"\n          }\n        ],\n        \"storefront_api_query\": \"query Product($productId: Int = 1, $activeCurrencyCode: currencyCode) { site { product(entityId: $productId) { name entityId prices(currencyCode: $activeCurrencyCode) { price { currencyCode value } } defaultImage { url(width: 500, height: 500) } } } } \",\n        \"template\": \"<div style=\\\"text-align:center\\\">\\n<h1>{{_.data.site.product.name}}</h1>\\n<div>\\n<img src=\\\"{{_.data.site.product.defaultImage.url}}\\\">\\n</div>\\n<div>\\n<p>${{_.data.site.product.prices.price.value}}</p>\\n</div>\\n</div>\",\n        \"template_engine\": \"handlebars_v3\",\n        \"uuid\": \"95eaa664-b19e-4a31-b9c7-498f9bc60bae\"\n      }\n    }\n  ],\n  \"meta\": {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Properties in PHP\nDESCRIPTION: Shows different methods to access product properties including direct property access and get_property method\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/themes/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$weight = $product->get_property( 'weight' );\n$height = $product->get_property( 'height' );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Price List Information via BigCommerce API\nDESCRIPTION: Example JSON response from the Get All Price Lists API endpoint, showing price records for multiple product variants in USD currency.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/currencies/guide.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"price_list_id\": 4,\n      \"variant_id\": 361,\n      \"price\": 22.66,\n      \"sale_price\": null,\n      \"retail_price\": null,\n      \"map_price\": null,\n      \"calculated_price\": 22.66,\n      \"date_created\": \"2019-03-05T16:38:08Z\",\n      \"date_modified\": \"2019-03-05T16:38:08Z\",\n      \"currency\": \"usd\",\n      \"product_id\": 190\n    },\n    {\n      \"price_list_id\": 4,\n      \"variant_id\": 438,\n      \"price\": 18.62,\n      \"sale_price\": null,\n      \"retail_price\": null,\n      \"map_price\": null,\n      \"calculated_price\": 18.62,\n      \"date_created\": \"2019-03-05T16:38:08Z\",\n      \"date_modified\": \"2019-03-05T16:38:08Z\",\n      \"currency\": \"usd\",\n      \"product_id\": 200\n    },\n    {\n      \"price_list_id\": 4,\n      \"variant_id\": 439,\n      \"price\": 18.62,\n      \"sale_price\": null,\n      \"retail_price\": null,\n      \"map_price\": null,\n      \"calculated_price\": 18.62,\n      \"date_created\": \"2019-03-05T16:38:08Z\",\n      \"date_modified\": \"2019-03-05T16:38:08Z\",\n      \"currency\": \"usd\",\n      \"product_id\": 200\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"total\": 26,\n      \"count\": 26,\n      \"per_page\": 50,\n      \"current_page\": 1,\n      \"total_pages\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Responding with No Available Shipping Rates\nDESCRIPTION: Example of a JSON response when no shipping quotes are available for the given request. The response includes an empty array for carrier_quotes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/shipping.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"quote_id\": \"example_quote\",\n  \"messages\": [],\n  \"carrier_quotes\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Header Component with BigDesign\nDESCRIPTION: Implements a header component using BigDesign components for consistent UI styling.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Box, Link } from '@bigcommerce/big-design';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst Header = () => (\n    <Box marginBottom=\"xxLarge\">\n        <Link href=\"#\">Home</Link>\n    </Box>\n);\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Updating a Subscription in JSON\nDESCRIPTION: This JSON response shows the result of updating a subscription using the createCheckout mutation. It includes the updated checkout details, such as account ID, status, checkout URL, and the updated subscription information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"checkout\": {\n      \"createCheckout\": {\n        \"checkout\": {\n          \"accountId\": \"bc/account/account/2a159c53-1caa-4ce8-af4f-6b00da294e2a\",\n          \"status\": \"PENDING\",\n          \"checkoutUrl\": \"https://store-hqjwlmtf9q.mybigcommerce.com/manage/merchant-checkout?checkoutId=6869d437-5eb9-4ad9-8c4a-086e448bb6f6\",\n          \"items\": {\n            \"edges\": [\n              {\n                \"node\": {\n                  \"subscriptionId\": \"bc/account/subscription/9cf1f949-8a74-4938-bd13-64d9741a9685\",\n                  \"status\": \"PENDING\",\n                  \"product\": {\n                    \"id\": \"bc/account/product/16267\",\n                    \"type\": \"APPLICATION\",\n                    \"productLevel\": \"Premium\"\n                  },\n                  \"scope\": {\n                    \"id\": \"bc/account/scope/hqjwlmtf9q\",\n                    \"type\": \"STORE\"\n                  },\n                  \"pricingPlan\": {\n                    \"interval\": \"ANNUAL\",\n                    \"price\": {\n                      \"value\": 129.99,\n                      \"currencyCode\": \"USD\"\n                    },\n                    \"trialDays\": 0\n                  },\n                  \"redirectUrl\": \"bigcommerce.com/checkout_success\",\n                  \"description\": \"test application\"\n                }\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Region Creation with GET Request to Widgets API\nDESCRIPTION: This HTTP request retrieves the list of regions for the category template, allowing verification of the newly created region. It uses the Widgets API endpoint for getting theme regions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /stores/{{STORE_HASH}}/v3/content/regions?template_file=pages/category\nHost: api.bigcommerce.com\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Scripts\nDESCRIPTION: JSON configuration to add database setup script to package.json\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...,\n  \"scripts\": {\n    ...,\n    \"db:setup\": \"node scripts/db.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Config Variables in Sass - SCSS\nDESCRIPTION: This SCSS snippet demonstrates how to import color variables defined in `config.json`. These variables can then be used within stylesheets to ensure consistency throughout the theme's design.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/global-styles.mdx#2025-04-16_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n// ...\n$color-highlight:       stencilColor(\"color-highlight\");\n$color-highlightDarker: stencilColor(\"color-highlightDarker\");\n$color-highlightDark:   stencilColor(\"color-highlightDark\");\n// ...\n```\n\n----------------------------------------\n\nTITLE: Installing Widget Builder CLI\nDESCRIPTION: Command to install the Widget Builder CLI tool and its dependencies after cloning the repository.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/widget-builder.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install-cli\n```\n\n----------------------------------------\n\nTITLE: Pushing a Theme with Specific Variation Activation\nDESCRIPTION: Command to push a theme and automatically activate a specific variation without prompts.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/upload.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nstencil push -a VARIATION_NAME\n```\n\n----------------------------------------\n\nTITLE: Creating Price List Record Payload Structure in JSON\nDESCRIPTION: This payload structure is used for creating a price list record when the corresponding webhook event fires. It includes the store ID, record details including price list and variant IDs, currency, hash for integrity, created timestamp, and producer identifier.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/priceList/record/created\",\n  \"store_id\": \"1001197568\",\n  \"data\": {\n    \"price_list_id\": 1,\n    \"variant_id\": 179,\n    \"currency\": \"USD\"\n      },\n  \"hash\": \"0424a15f158bbfe7277c5f84f9c55a1d4a762e60\",\n  \"created_at\": 1709327895,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Content Blocks in Specific Page Template\nDESCRIPTION: Demonstrates how to replace content blocks defined in a base template with page-specific content. It replaces the 'head' block with a stylesheet link and the 'page' block with custom content.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/style/composition-and-styling.mdx#2025-04-16_snippet_2\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#partial \"head\"}}\n    <link href=\"{{cdn '/assets/css/invoice.scss'}}\" rel=\"stylesheet\">\n{{/partial}}\n\n{{#partial \"page\"}}\n    <p>An invoice for a particular order would go here</p>\n{{/partial}}\n{{> layout/empty}}\n```\n\n----------------------------------------\n\nTITLE: Variable Increment with incrementVar Helper in Handlebars\nDESCRIPTION: Demonstrates how to use the incrementVar helper to increase the value of a variable set by assignVar by 1. It takes a single parameter: the key of the variable to increment.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_105\n\nLANGUAGE: handlebars\nCODE:\n```\n{{incrementVar key}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{incrementVar \"foo\"}}\n```\n\n----------------------------------------\n\nTITLE: Creating BigCommerce Webhook with Required Headers\nDESCRIPTION: Example HTTP request showing the required headers for creating a webhook in BigCommerce API. The request must include Accept, Content-Type, and X-Auth-Token headers.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/overview.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/hooks\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Widget Builder Directory Setup\nDESCRIPTION: Commands to create and navigate to a widget development directory structure.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/widget-builder.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# organized by name of store \ncd ~/bc-projects/tools-r-us\nmkdir widget-workshop\ncd widget-workshop\n```\n\n----------------------------------------\n\nTITLE: Product Options Query Response in JSON\nDESCRIPTION: Example JSON response for a product options query, showing the structure of returned data. It includes three different product option types: a standard option (Color), a checkbox option (Special feed), and a datefield option (Custom date).\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"product\": {\n        \"productOptions\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"entityId\": 119,\n                \"displayName\": \"Color\",\n                \"isRequired\": true,\n                \"isVariantOption\": true\n              }\n            },\n            {\n              \"node\": {\n                \"entityId\": 137,\n                \"displayName\": \"Special feed\",\n                \"isRequired\": false,\n                \"isVariantOption\": false,\n                \"checkedByDefault\": false,\n                \"label\": \"YES\"\n              }\n            },\n            {\n              \"node\": {\n                \"entityId\": 138,\n                \"displayName\": \"Custom date\",\n                \"isRequired\": false,\n                \"isVariantOption\": false,\n                \"earliest\": \"2022-10-27T06:00:00Z\",\n                \"latest\": \"2022-12-08T06:00:00Z\",\n                \"limitDateBy\": \"RANGE\"\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Context Session Provider\nDESCRIPTION: React context implementation for managing session state across the application.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRouter } from 'next/router';\nimport { createContext, useContext, useEffect, useState } from 'react';\n\nconst SessionContext = createContext({ context: '' });\n\nconst SessionProvider = ({ children }) => {\n  const { query } = useRouter();\n  const [context, setContext] = useState('');\n\n  useEffect(() => {\n    if (query.context) {\n      setContext(query.context.toString());\n    }\n  }, [query.context]);\n\n  return (\n    <SessionContext.Provider value={{ context }}>\n        {children}\n    </SessionContext.Provider>\n  );\n};\n\nexport const useSession = () => useContext(SessionContext);\n\nexport default SessionProvider;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tax Zones via BigCommerce API\nDESCRIPTION: GET request to fetch specific tax zones using the id parameter filter. Returns zone configuration including location settings and customer group targeting.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/tax-rates-zones.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/tax/zones?id:in=2\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Creating a Site for a BigCommerce Channel\nDESCRIPTION: API request to create a site for the previously created channel using TOKEN_A. This associates a URL with the channel, enabling the headless storefront to connect to the BigCommerce backend.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/b2b-edition/headless.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{store_hash}/v3/sites\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{TOKEN_A}}\n\n{\n    \"url\": <url you want to point>,\n    \"channel_id\": <the channel id returned on step 1>\n}\n```\n\n----------------------------------------\n\nTITLE: Executing DELETE Request to Remove Cart in BigCommerce REST Storefront API\nDESCRIPTION: This snippet illustrates how to make a DELETE request to remove a cart using the REST Storefront API. It includes the endpoint configuration for the delete operation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/index.mdx#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nlet endpoint = {\n  route: \"/carts/123abc45-de67-89f0-123a-bcd456ef7890\",\n  method: \"DELETE\",\n  accept: \"application/json\",\n  // content: \"application/json\",\n  success: 204\n}\n\nstorefrontCall(endpoint);\n```\n\n----------------------------------------\n\nTITLE: Updating Modifier Value with V3 Catalog API in JSON\nDESCRIPTION: This snippet demonstrates how to update a modifier value using the V3 Catalog API. It shows how to add a price adjuster to the modifier.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"is_default\": false,\n  \"adjusters\": {\n    \"price\": {\n      \"adjuster\": \"relative\",\n      \"adjuster_value\": 5\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Product Page JavaScript in BigCommerce Cornerstone Theme\nDESCRIPTION: Example of adding a custom 'helloWorld' function to the Product class in the product.js file. This demonstrates how to extend the default page behavior with custom JavaScript.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/javascript/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class Product extends PageManager {\n    constructor(context) {\n        super(context);\n        this.url = window.location.href;\n        this.$reviewLink = $('[data-reveal-id=\"modal-review-form\"]');\n        this.$bulkPricingLink = $('[data-reveal-id=\"modal-bulk-pricing\"]');\n    }\n\n    onReady() {\n      // ...\n      // Example Code\n      this.helloWorld();\n    }\n    // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class Product extends PageManager {\n    constructor(context) {\n        super(context);\n        this.url = window.location.href;\n        this.$reviewLink = $('[data-reveal-id=\"modal-review-form\"]');\n        this.$bulkPricingLink = $('[data-reveal-id=\"modal-bulk-pricing\"]');\n    }\n\n    onReady() {\n      // ...\n\n      // Example Code\n      this.helloWorld();\n    }\n\n    // Example Code\n    helloWorld() {\n        console.log(\"[assets/js/theme/product.js]: Hello World!\");\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Page Type Module in JavaScript\nDESCRIPTION: This code defines an ES6 module for a specific page type (Blog) that extends the base PageManager class.  It shows how to create a class with a constructor for setup code. This snippet demonstrates the basic structure for creating page-specific JavaScript modules within a Stencil theme.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/javascript/extend.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class Blog extends PageManager {\n        constructor() {\n            //Setup code goes here – attach to internals, and use internals as you would 'this'\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Products Object with Limits in JSON\nDESCRIPTION: Alternative JSON configuration for limiting the number of featured, new, and top-selling products displayed globally.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"products\": {\n    \"featured\": {\n      \"limit\": \"5\"\n    },\n    \"new\": {\n      \"limit\": \"10\"\n    },\n    \"top_sellers\": {\n      \"limit\": \"15\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Emails Payload Object in BigCommerce Webhooks\nDESCRIPTION: This JSON snippet illustrates the structure of a payload object for email-related webhook events in BigCommerce. It contains store ID, producer, creation timestamp, event scope, email template data, and a hash for verification.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\": \"11111\",\n \"producer\": \"stores/abcde\",\n \"created_at\": 1641641646,\n \"scope\": \"store/channel/1/settings/emailStatus/updated\",\n \"data\": {\n    \"template_kind\": \"product_review_email\"\n  },\n \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing MSRP (excluding tax) in BigCommerce Stencil Templates\nDESCRIPTION: This snippet demonstrates how to access the Manufacturer's Suggested Retail Price (MSRP) excluding tax in BigCommerce Stencil templates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/catalog-price-object.mdx#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{{ product.price.rrp_without_tax }}\n```\n\n----------------------------------------\n\nTITLE: Declaring Navigation Constants\nDESCRIPTION: Definition of tab IDs, routes, and header types for navigation structure.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const TabIds = {\n    HOME: 'home',\n    PRODUCTS: 'products',\n};\n\nexport const TabRoutes = {\n    [TabIds.HOME]: '/',\n    [TabIds.PRODUCTS]: '/products',\n};\n\nconst InnerRoutes = [\n    '/products/[pid]',\n];\n\nconst HeaderTypes = {\n    GLOBAL: 'global',\n    INNER: 'inner',\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Widget Configuration Reuse in JSON\nDESCRIPTION: This JSON snippet shows an incorrect way to reuse a widget configuration. The array name doesn't match the original configuration, which would result in no data being displayed.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"List\",\n  \"widget_configuration\": {\n    \"list_items_two\": [\n      {\n        \"color\": \"orange\",\n        \"text\": \"Fifth item\"\n      },\n      {\n        \"color\": \"blue\",\n        \"text\": \"Sixth item\"\n      }\n    ]\n  },\n  \"widget_template_uuid\": \"7bfb9a46-75cc-45bc-bf39-a6a43b77111f\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Rule Configuration for Promotion\nDESCRIPTION: This JSON snippet demonstrates how to set the rule configuration for a promotion, including the 'apply_once', 'stop', and 'currency_code' fields.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy One Get One Free\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"gift_item\": {\n          \"product_id\": 174,\n          \"quantity\": 1\n        }\n      },\n      \"apply_once\": false,\n      \"stop\": false,\n      \"currency_code\": \"USD\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-Channel Capabilities\nDESCRIPTION: Enables multi-channel capabilities for BigCommerce on WordPress by using a specific filter.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/platform-integration/multi-channel.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'bigcommerce/channels/enable-multi-channel', '__return_true' );\n```\n\n----------------------------------------\n\nTITLE: Order Metafields GraphQL Response Format\nDESCRIPTION: Example response from querying order metafields for order #102. The response includes both order-specific metafields and cart metafields associated with the order.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/orders.mdx#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"order\": {\n        \"entityId\": 102,\n        \"metafields\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"key\": \"Order metafield for order 102\",\n                \"value\": \"Order metafield for order 102\"\n              }\n            }\n          ]\n        },\n        \"cartMetafields\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"key\": \"Cart metafield for order 102\",\n                \"value\": \"Cart metafield for order 102\"\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Concatenating Multiple Strings - JavaScript\nDESCRIPTION: Concatenates an array of strings into one single string.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction multiConcat(...strings) { return strings.join(''); }\n```\n\n----------------------------------------\n\nTITLE: Authenticating with B2B Storefront Token using JavaScript\nDESCRIPTION: Uses the Buyer Portal JavaScript API to authenticate a customer using the previously obtained authentication token.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/b2b-edition/authentication/headless-auth.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nb2b.utils.user.loginWithB2BStorefrontToken(authTokenFromPreviousStep);\n```\n\n----------------------------------------\n\nTITLE: Authenticating PUT Request with X-Auth-Token Header\nDESCRIPTION: Example of how to authenticate a PUT request to BigCommerce API using the X-Auth-Token header with an access token and including a request body.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v... # endpoint\nX-Auth-Token: {{access_token}}\nAccept: application/json\nContent-Type: application/json\n\n{\n  // request body\n}\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: NPM command to start the development server\nSOURCE: https://github.com/bigcommerce/docs/blob/main/guides/create-a-site-preview.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev script\n```\n\n----------------------------------------\n\nTITLE: Making Relative Inventory Adjustments - Variant Level\nDESCRIPTION: POST request to make relative adjustments to variant inventory quantities. Enables increasing or decreasing inventory quantities for multiple variants relative to their current values.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/adjustments/relative\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"items\": [\n    {\n      \"location_id\": 2,\n      \"variant_id\": 78,\n      \"quantity\": -2\n    },\n    {\n      \"location_id\": 2,\n      \"variant_id\": 79,\n      \"quantity\": 2\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Tiered Product Discount Response\nDESCRIPTION: JSON response showing the created promotion configuration with additional system-generated fields. Includes promotion ID, creation source, customer eligibility rules, and currency settings. Confirms the tiered discount rules and notification settings were successfully created.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/multiple-rules.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 25,\n    \"name\": \"Apply a tiered discount to applicable products based on the quantity of items ordered within X \",\n    \"created_from\": \"api\",\n    \"customer\": {\n      \"group_ids\": [],\n      \"minimum_order_count\": 0,\n      \"excluded_group_ids\": [],\n      \"segments\": null\n    },\n    \"rules\": [\n      {\n        \"action\": {\n          \"cart_items\": {\n            \"discount\": {\n              \"fixed_amount\": \"20\"\n            },\n            \"strategy\": \"LEAST_EXPENSIVE\",\n            \"add_free_item\": true,\n            \"as_total\": true,\n            \"include_items_considered_by_condition\": true,\n            \"exclude_items_on_sale\": false,\n            \"items\": {\n              \"categories\": [\n                24\n              ]\n            }\n          }\n        },\n        \"apply_once\": true,\n        \"stop\": true,\n        \"condition\": {\n          \"cart\": {\n            \"items\": {\n              \"categories\": [\n                35\n              ]\n            },\n            \"minimum_quantity\": 4\n          }\n        }\n      },\n      {\n        \"action\": {\n          \"cart_items\": {\n            \"discount\": {\n              \"fixed_amount\": \"15\"\n            },\n            \"strategy\": \"LEAST_EXPENSIVE\",\n            \"add_free_item\": true,\n            \"as_total\": true,\n            \"include_items_considered_by_condition\": true,\n            \"exclude_items_on_sale\": false,\n            \"items\": {\n              \"categories\": [\n                25\n              ]\n            }\n          }\n        },\n        \"apply_once\": true,\n        \"stop\": true,\n        \"condition\": {\n          \"cart\": {\n            \"items\": {\n              \"categories\": [\n                25\n              ]\n            },\n            \"minimum_quantity\": 3\n          }\n        }\n      },\n      {\n        \"action\": {\n          \"cart_items\": {\n            \"discount\": {\n              \"fixed_amount\": \"10\"\n            },\n            \"strategy\": \"LEAST_EXPENSIVE\",\n            \"add_free_item\": true,\n            \"as_total\": true,\n            \"include_items_considered_by_condition\": true,\n            \"exclude_items_on_sale\": false,\n            \"items\": {\n              \"categories\": [\n                30\n              ]\n            }\n          }\n        },\n        \"apply_once\": true,\n        \"stop\": true,\n        \"condition\": {\n          \"cart\": {\n            \"items\": {\n              \"categories\": [\n                36\n              ]\n            },\n            \"minimum_quantity\": 2\n          }\n        }\n      }\n    ],\n    \"notifications\": [\n      {\n        \"type\": \"UPSELL\",\n        \"content\": \"<div>&nbsp;</div>\",\n        \"locations\": [\n          \"CART_PAGE\"\n        ]\n      },\n      {\n        \"type\": \"ELIGIBLE\",\n        \"content\": \"<div>&nbsp;</div>\",\n        \"locations\": [\n          \"CART_PAGE\"\n        ]\n      },\n      {\n        \"type\": \"APPLIED\",\n        \"content\": \"<div>&nbsp;</div>\",\n        \"locations\": [\n          \"CART_PAGE\"\n        ]\n      }\n    ],\n    \"stop\": true,\n    \"currency_code\": \"USD\",\n    \"redemption_type\": \"AUTOMATIC\",\n    \"shipping_address\": null,\n    \"current_uses\": 0,\n    \"max_uses\": null,\n    \"start_date\": \"2019-02-01T05:00:00+00:00\",\n    \"end_date\": null,\n    \"status\": \"ENABLED\",\n    \"schedule\": null,\n    \"can_be_used_with_other_promotions\": true\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Footer Links with HTML and JQuery\nDESCRIPTION: This HTML and JavaScript snippet demonstrates how to add custom links to the footer section via the BigCommerce control panel. It uses JQuery to dynamically append list items containing links, satisfying the WCAG 'unusual words' guideline. User-defined links should replace placeholder text for full functionality.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/accessibility/implementing-wcag-guidelines.mdx#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"application/javascript\" src=\"//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\"></script>\n<script>\n    $(document).ready(function(){\n        $(\"footer article[data-section-type='footer-webPages'] ul\").append(\"<li><a href='/page-link1/'>Add Link Name1</a></li><li><a href='/page-link2/'>Add Link Name2</a></li><li><a href='/page-link3/'>Add Link Name3</a></li>\")\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding New Translation Key to English JSON File\nDESCRIPTION: This code shows how to add a new key-value pair to the English language file. It introduces a 'new_hours' key with a placeholder for dynamic content.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/tutorial.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"header\": {\n        \"welcome_back\": \"Welcome back, {name}\",\n        \"skip_to_main\": \"Skip to main content\",\n        \"new_hours\": \"Summer hours: {hours}\"\n    },\n```\n\n----------------------------------------\n\nTITLE: Testing SCSS Formatting Changes with Dry Run\nDESCRIPTION: This command shows potential formatting changes that would be applied to fix SCSS compatibility issues without actually making those changes, allowing you to preview the results first.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/unexpected-behavior.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nstencil scss-autofix --dry\n```\n\n----------------------------------------\n\nTITLE: Response for Fetch Checkout Query (Pending Checkout)\nDESCRIPTION: This is a sample response for fetching a pending checkout. It includes details of the checkout such as ID, status, and item information. The subscriptionId is null as the checkout is not yet completed.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"account\": {\n      \"checkout\": {\n        \"id\": \"bc/account/checkout/ab0a8354-3caf-423b-a3be-42a59c97fcf5\",\n        \"accountId\": \"bc/account/account/dbf77034-5440-4365-9aca-385ab27fe4bc\",\n        \"checkoutUrl\": \"https://store-fsm6cvyxbj.my-bigcommerce.com/manage/merchant-checkout?checkoutId=ab0a8354-3caf-423b-a3be-42a59c97fcf5\",\n        \"status\": \"PENDING\",\n        \"items\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"description\": \"Silver Tier Monthly Plan\",\n                \"status\": \"PENDING\",\n                \"product\": {\n                  \"id\": \"bc/account/product/5\",\n                  \"productLevel\": null,\n                  \"type\": \"APPLICATION\"\n                },\n                \"scope\": {\n                  \"id\": \"bc/account/scope/fsm6cvyxbj\",\n                  \"type\": \"STORE\"\n                },\n                \"pricingPlan\": {\n                  \"price\": {\n                    \"value\": 50,\n                    \"currencyCode\": \"USD\"\n                  },\n                  \"interval\": \"MONTH\",\n                  \"trialDays\": 0\n                },\n                \"subscriptionId\": null,\n                \"redirectUrl\": \"https://store-fsm6cvyxbj.my-bigcommerce.com/manage/app/5\"\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a List Widget in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure a widget using the list template. It defines an array of list items with color and text properties.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"list_items\": [{\n\t\t\t\"color\": \"orange\",\n\t\t\t\"text\": \"Item One\"\n\t\t},\n\t\t{\n\t\t\t\"color\": \"blue\",\n\t\t\t\"text\": \"Item Two\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: API Response for Email Templates in BigCommerce\nDESCRIPTION: This JSON response example shows the structure of data returned when retrieving email templates. It includes template type, body content, translations, and subject.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/emails/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"type_id\": \"account_reset_password_email\",\n      \"body\": \"<!DOCTYPE html> <html lang=\\\"en\\\"> <head>     <meta charset=\\\"UTF-8\\\">     <title>Title</title> </head> <body> <p>     {{lang \\\"reset_password\\\" name=store.name}} </p> <br/> <br/> <a href='{{account.reset_password_link}}'>     {{account.reset_password_link}} </a>  </body> </html>\",\n      \"translations\": [...],\n      \"subject\": \"Reset your password at {{store.name}}\"\n    }\n  ],\n  \"meta\": {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Heading Type Configuration in schema.json\nDESCRIPTION: Shows how to structure a section in schema.json using the 'heading' type to create UI subcategories within Store Design. This example demonstrates the hierarchical organization of customization options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/defining-ui-options.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Colors\",\n    \"settings\": [\n      {\n        \"type\": \"heading\",\n        \"content\": \"General\"\n      },\n      {\n        \"type\": \"color\",\n        \"label\": \"Text Color\",\n        \"id\": \"body-font-color\"\n      },\n    {...}\n     ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Stencil Utils in JavaScript\nDESCRIPTION: This snippet shows how to import the stencil-utils module, which is necessary for using event hooks in a Stencil theme.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/events.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport utils from '@bigcommerce/stencil-utils';\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Details in config.json\nDESCRIPTION: This snippet shows how to configure the basic details of a BigCommerce Stencil theme, such as name, version, price, and documentation URL, within the `config.json` file.  This allows developers to customize the theme's identity and provide relevant information to users. No dependencies are required.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/variations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Cornerstone\",\n  \"version\": \"4.9.0\",\n  \"meta\": {\n    \"price\": 0,\n    \"documentation_url\": \"https://support.bigcommerce.com/articles/Public/Cornerstone-Theme-Manual\",\n  // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Event Payload Structure\nDESCRIPTION: Example JSON payload structure for channel events. Contains store identification, event metadata, and channel-specific data.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\": \"11111\",\n \"producer\": \"stores/abcde\",\n \"created_at\": 1335335335,\n \"scope\": \"store/channel/created\",\n \"data\": {\n    \"type\": \"channel\",\n    \"id\": 2\n  },\n \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Widget Scaffold\nDESCRIPTION: Command to generate a new widget template and start the development server.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/widget-builder.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwidget-builder create <[path/to/]some-widget>\n```\n\n----------------------------------------\n\nTITLE: Using getObject Helper in Handlebars with with Block\nDESCRIPTION: The getObject helper retrieves an object via property path, differing from get by returning the object including the property key. Cannot be used as a block helper.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_75\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#with (getObject \"a.b.c\" someObject)}}...{{/with}}\n```\n\n----------------------------------------\n\nTITLE: Updating Product Tax Properties in BigCommerce\nDESCRIPTION: Associates tax properties with products by specifying product ID and property values. Example demonstrates setting alcohol percentage and volume properties.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/tax-properties.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/tax/products/properties\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"product_id\": 113,\n    \"tax_properties\": {\n      \"alcohol-percentage\": \"4.9\",\n      \"netvolume-milliliters\": \"400\"\n    }\n  },\n  {\n    \"product_id\": 117,\n    \"tax_properties\": {\n      \"alcohol-percentage\": \"10\",\n      \"netvolume-milliliters\": \"200\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Response for Product Videos Query in JSON\nDESCRIPTION: This JSON object captures the response for the GraphQL query that retrieves videos for specified products. It includes metadata about the products, pagination info, and an array of video objects with their titles and URLs, essential for displaying video content related to specified products.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"site\": {\n            \"products\": {\n                \"pageInfo\": {\n                    \"startCursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n                    \"endCursor\": \"YXJyYXljb25uZWN0aW9uOjM=\"\n                },\n                \"edges\": [\n                    {\n                        \"cursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n                        \"node\": {\n                            \"entityId\": 112,\n                            \"name\": \"Product_112\",\n                            \"videos\": {\n                                \"pageInfo\": {\n                                    \"startCursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n                                    \"endCursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n                                    \"hasNextPage\": false,\n                                    \"hasPreviousPage\": false\n                                },\n                                \"edges\": [\n                                    {\n                                        \"cursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n                                        \"node\": {\n                                            \"title\": \"What is BigCommerce\",\n                                            \"url\": \"https://www.youtube.com/watch?v=Vx0OmcMSWGQ&t=8s\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    },\n                    {\n                        \"cursor\": \"YXJyYXljb25uZWN0aW9uOjE=\",\n                        \"node\": {\n                            \"entityId\": 113,\n                            \"name\": \"Product_113\",\n                            \"videos\": {\n                                \"pageInfo\": {\n                                    \"startCursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n                                    \"endCursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n                                    \"hasNextPage\": false,\n                                    \"hasPreviousPage\": false\n                                },\n                                \"edges\": [\n                                    {\n                                        \"cursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n                                        \"node\": {\n                                            \"title\": \"BigCommerce is enterprise ecommerce, simplified.\",\n                                            \"url\": \"https://www.youtube.com/watch?v=vAZ0e5lomfk\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }                         \n                ]\n            }\n        }\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Installing required npm packages jsonwebtoken and uuid for JWT generation\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/customer-login.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install jsonwebtoken uuid\n```\n\n----------------------------------------\n\nTITLE: Using if Helper in Handlebars for Conditional Rendering\nDESCRIPTION: The if helper renders content conditionally based on whether an expression evaluates to true. If not, it renders the else block instead.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_64\n\nLANGUAGE: handlebars\nCODE:\n```\n{{if arg}}\n```\n\n----------------------------------------\n\nTITLE: Adding a Locale with GraphQL Mutation\nDESCRIPTION: This GraphQL mutation adds a new locale to a specified channel. It sets the locale code, status, and returns the created locale information along with any errors.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/settings/locales.mdx#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  locale {\n     addLocale(input: {\n        channelId: \"bc/store/channel/1\",\n        code: \"fr\",\n        status: INACTIVE\n        }) {\n              locale {\n                  code\n                  status\n            }\n              errors {\n                  ... on Error {\n                  message\n                        }\n                    }\n                }\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Buy X Get Y Free Category Promotion\nDESCRIPTION: Implements a buy X get Y free promotion within the same category, where the free items must be of equal or lesser value. Uses 100% discount on qualifying items with quantity conditions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/category.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy X units in (Category A) and get Y additional units in the same category free (must be of equal or lesser value)\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"percentage_amount\": \"100\"\n          },\n          \"strategy\": \"LEAST_EXPENSIVE\",\n          \"as_total\": false,\n          \"include_items_considered_by_condition\": false,\n          \"items\": {\n            \"categories\": [\n              23\n            ]\n          },\n          \"quantity\": 1\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"categories\": [\n              23\n            ]\n          },\n          \"minimum_quantity\": 1\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Product Option with V2 API in JSON\nDESCRIPTION: This snippet shows how to create a product option (e.g., Color) using the V2 API. It's part of a multi-step process to create a product with variants and SKUs in V2.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\": \"Color\",\n   \"display_name\": \"Choose a color\",\n   \"type\": \"CS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Order Created/Updated Webhook Payload\nDESCRIPTION: Example payload structure for store/order/created, updated, and archived webhook events that fire when orders are created, modified or archived.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/order/created\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"order\",\n    \"id\": 250\n  },\n  \"hash\": \"dd70c0976e06b67aaf671e73f49dcb79230ebf9d\",\n  \"created_at\": 1561479335,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Color Type in schema.json\nDESCRIPTION: This code snippet demonstrates how to declare a color type in the `schema.json` file for a BigCommerce theme. It sets the type to \"color\", defines the label that will be displayed in the Page Builder UI, and assigns an ID that links it to the corresponding entry in `config.json`.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/customizability.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"color\",\n    \"label\": \"Text Color\",\n    \"id\": \"body-font-color\"\n },\n```\n\n----------------------------------------\n\nTITLE: Price Lists Batch Delete Webhook Payload\nDESCRIPTION: Example payload structure for store/priceLists/deleted webhook event that fires when multiple price lists are deleted.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/priceLists/deleted\",\n  \"store_id\": \"1001197568\",\n  \"data\": {\n    \"price_list_ids\": [\n      5\n    ]\n  },\n  \"hash\": \"e0c298b8097a6a2f39d17e593a9b360f5b2fef7d\",\n  \"created_at\": 1709327895,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PayPal Icon in Payment Methods List\nDESCRIPTION: This snippet adds a PayPal icon to the payment methods list in `payment-methods-list.html`. The image source is dynamically rendered using Handlebars syntax, requiring the image to be available in the specified path.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/checkout-enhancements/stored-payment-methods.mdx#2025-04-16_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n<img class=\\\"methodHeader-icon\\\" src=\\\"{{cdn 'img/payment-methods/paypal.svg'}}\\\" alt=\\\"{{lang 'account.payment_methods.paypal'}}\\\" title=\\\"{{lang 'account.payment_methods.paypal'}}\\\">\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Empty String Concatenation Issue in SCSS\nDESCRIPTION: Example showing how concatenating an empty string with a quoted string leads to unquoting behavior in production but not in Stencil CLI. This operation should be carefully evaluated in SCSS functions that might receive empty strings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/incompatible-directives.mdx#2025-04-16_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@debug \"\\\"foo\\\"\" + \"\";\n```\n\n----------------------------------------\n\nTITLE: Wrapping Component with SessionProvider\nDESCRIPTION: Demonstrates how to wrap the main Component with the SessionProvider to ensure React Context is available to all pages in the application.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\n<SessionProvider>\n  <Component {...pageProps} />\n</SessionProvider>\n```\n\n----------------------------------------\n\nTITLE: Debugging Token Retrieval Error in BigCommerce for WordPress\nDESCRIPTION: Error trace showing 'Could not retrieve the token' error in the BigCommerce for WordPress plugin. This typically indicates API scope issues that can be resolved by creating a new token with the correct scopes in the BigCommerce Dashboard.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/platform-integration/unexpected-behavior.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nBigCommerce.ERROR: Could not retrieve the token\n{\n  \"trace\": \"\n    #0 /path/wp-content/plugins/bigcommerce/src/BigCommerce/GraphQL/BaseGQL.php(150): BigCommerce\\\\GraphQL\\\\BaseGQL->parse_response(Array)\n    #1 /path/wp-content/plugins/bigcommerce/src/BigCommerce/GraphQL/BaseGQL.php(111): BigCommerce\\\\GraphQL\\\\BaseGQL->make_request('{\\\"channel_id\\\":1...', Array, 'https://api.big...')\n    #2 /path/wp-content/plugins/bigcommerce/src/BigCommerce/GraphQL/BaseGQL.php(57): BigCommerce\\\\GraphQL\\\\BaseGQL->request_token()\n    #3 /path/wp-content/plugins/bigcommerce/src/BigCommerce/GraphQL/BaseGQL.php(32): BigCommerce\\\\GraphQL\\\\BaseGQL->get_token()\n    #4 /path/wp-content/plugins/bigcommerce/src/BigCommerce/GraphQL/GraphQL_Processor.php(14): BigCommerce\\\\GraphQL\\\\BaseGQL->__construct(Object(BigCommerce\\\\Api\\\\Configuration))\n    #5 /path/wp-content/plugins/bigcommerce/src/BigCommerce/Container/GraphQL.php(35): BigCommerce\\\\GraphQL\\\\GraphQL_Processor->__construct(Object(BigCommerce\\\\Api\\\\Configuration), Array)\n    #6 /path/wp-content/plugins/bigcommerce/vendor/pimple/pimple/src/Pimple/Container.php(118): BigCommerce\\\\Container\\\\GraphQL->BigCommerce\\\\Container\\\\{closure}(Object(Pimple\\\\Container))\n    #7 /path/wp-content/plugins/bigcommerce/src/BigCommerce/Container/Import.php(195): Pimple\\\\Container->offsetGet('bigcommerce.gra...')\n    #8 /path/wp-content/plugins/bigcommerce/vendor/pimple/pimple/src/Pimple/Container.php(118): BigCommerce\\\\Container\\\\Import->BigCommerce\\\\Container\\\\{closure}(Object(Pimple\\\\Container))\n    #9 /path/wp-content/plugins/bigcommerce/src/BigCommerce/Container/Import.php(294): Pimple\\\\Container->offsetGet('import.categori...')\n    #10 /path/wp-content/plugins/bigcommerce/src/BigCommerce/Import/Task_Manager.php(97): BigCommerce\\\\Container\\\\Import->BigCommerce\\\\Container\\\\{closure}('purged_brands')\n    #11 /path/wp-content/plugins/bigcommerce/src/BigCommerce/Container/Import.php(369): BigCommerce\\\\Import\\\\Task_Manager->run_next('purged_brands')\n    #12 /path/wp-includes/class-wp-hook.php(308): BigCommerce\\\\Container\\\\Import->BigCommerce\\\\Container\\\\{closure}('purged_brands')\n    #13 /path/wp-includes/class-wp-hook.php(332): WP_Hook->apply_filters(NULL, Array)\n    #14 /path/wp-includes/plugin.php(517): WP_Hook->do_action(Array)\n    #15 /path/wp-content/plugins/bigcommerce/src/BigCommerce/Import/Runner/Cron_Runner.php(53): do_action('bigcommerce/imp...', 'purged_brands')\n    #16 /path/wp-content/plugins/bigcommerce/src/BigCommerce/Container/Import.php(132): BigCommerce\\\\Import\\\\Runner\\\\Cron_Runner->continue_import()\n    #17 /path/wp-includes/class-wp-hook.php(306): BigCommerce\\\\Container\\\\Import->BigCommerce\\\\Container\\\\{closure}()\n    #18 /path/wp-includes/class-wp-hook.php(332): WP_Hook->apply_filters('', Array)\n    #19 /path/wp-includes/plugin.php(565): WP_Hook->do_action(Array)\n    #20 /path/wp-cron.php(188): do_action_ref_array('bigcommerce_con...', Array)\n    #21 {main}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Log Format Example in Shell\nDESCRIPTION: Example of a light, human-readable log format for channel apps that shows a summary of product sync operations with timestamp.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/guide/best-practices.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n20 Products Identified - 5 Products Created - 15 Products Updated - 0 Errors   |   12/10/19 @ 3:45PM CST\n```\n\n----------------------------------------\n\nTITLE: Customizing Display Text for Quick Order Button in JavaScript\nDESCRIPTION: This snippet demonstrates how to customize the display text for the Quick Order Pad button in B2B Edition. It uses the window.b3themeConfig.useText object to override the default text with a custom string.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/b2b-edition/stencil.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.b3themeConfig.useText = {\n/* B3 will now use the call to action \"Place Quick Order\" instead of the default \"Quick Order Pad\" for the button that is appended to the secondary navigation menu */\n 'nav.button.quickOrderPad': 'Place Quick Order',\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Men's Clothing Discount - JSON\nDESCRIPTION: This JSON response snippet returns details about the promotion for a 20% discount on men's clothing, including eligibility rules and customer details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/product.mdx#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 260,\n    \"name\": \"Apply 20% off all male clothing\",\n    \"channels\": [],\n    \"created_from\": \"api\",\n    \"customer\": {\n      \"group_ids\": [],\n      \"minimum_order_count\": 0,\n      \"excluded_group_ids\": [],\n      \"segments\": null\n    },\n    \"rules\": [\n      {\n        \"action\": {\n          \"cart_items\": {\n            \"discount\": {\n              \"percentage_amount\": \"20\"\n            },\n            \"strategy\": \"LEAST_EXPENSIVE\",\n            \"add_free_item\": true,\n            \"as_total\": false,\n            \"include_items_considered_by_condition\": false,\n            \"exclude_items_on_sale\": false,\n            \"items\": {\n              \"product_custom_field\": {\n                \"name\": \"Gender\",\n                \"values\": [\"Mens\"]\n              }\n            }\n          }\n        },\n        \"apply_once\": true,\n        \"stop\": false\n      }\n    ],\n    \"notifications\": [],\n    \"stop\": false,\n    \"currency_code\": \"USD\",\n    \"redemption_type\": \"AUTOMATIC\",\n    \"shipping_address\": null,\n    \"current_uses\": 0,\n    \"max_uses\": null,\n    \"start_date\": \"2023-04-20T01:27:36+00:00\",\n    \"end_date\": null,\n    \"status\": \"ENABLED\",\n    \"schedule\": null,\n    \"can_be_used_with_other_promotions\": true\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Auth Callback in BigCommerce Single-Click App\nDESCRIPTION: Example of the GET request sent to the app's /auth endpoint during the OAuth flow. It includes query parameters necessary for requesting an access_token.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/auth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://your_app.example.com/auth?account_uuid=12345678-90ab-cdef-1234-567890abcdef&code=qr6h3thvbvag2ffq&context=stores%2Fg5cd38&scope=store_v2_orders+store_channel_listings_read_only\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nReferer: https://login.bigcommerce.com/\n```\n\n----------------------------------------\n\nTITLE: Example of a 429 Too Many Requests HTTP Response\nDESCRIPTION: Shows a complete example of a 429 response from the BigCommerce API when rate limits are exceeded. The response includes headers with information about the rate limit window, reset time, quota, and remaining requests.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/api-docs/getting-started/api-rate-limits.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 429 Too Many Requests\nDate: Mon, 03 Feb 2022 20:36:00 GMT\nContent-Type: application/json\nX-Rate-Limit-Time-Window-Ms: 30000\nX-Rate-Limit-Time-Reset-Ms: 15000\nX-Rate-Limit-Requests-Quota: 150\nX-Rate-Limit-Requests-Left: 35\n```\n\n----------------------------------------\n\nTITLE: Safe JSON Parsing with JSONparseSafe Helper in Handlebars\nDESCRIPTION: Demonstrates the usage of the JSONparseSafe helper for safely parsing JSON data. It handles incorrect JSON and provides an else block for fallback. It takes a single parameter: the JSON string to parse.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_107\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#JSONparseSafe '{\"foo\": \"bar\"}'}\n  {{foo}}\n{{/JSONparseSafe}}\n<!-- output: bar -->\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#JSONparseSafe 'foo'}}\n  {{foo}}\n{{else}}\n  John Doe\n{{/JSONparseSafe}}\n<!-- output: John Doe -->\n```\n\n----------------------------------------\n\nTITLE: Rendering Account Payments Microapp in Handlebars\nDESCRIPTION: This snippet conditionally injects the `account_payments` variable into the `add-payment-method.html` template, rendering the microapp if the variable is defined. It also ensures that a `window.BigCommerce` object exists in order to initialize or render the microapp.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/checkout-enhancements/stored-payment-methods.mdx#2025-04-16_snippet_3\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if account_payments}}\n    {{{ account_payments }}}\n    <script>\n        window.BigCommerce = window.BigCommerce || {};\n    </script>\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Example Notifications Payload Object in BigCommerce Webhooks\nDESCRIPTION: This JSON snippet demonstrates the structure of a payload object for notification-related webhook events in BigCommerce. It contains store ID, producer, creation timestamp, event scope, an empty data object, and a hash for verification.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"store_id\": \"11111\",\n  \"producer\": \"stores/abcde\",\n  \"created_at\": 1641641646,\n  \"scope\": \"store/channel/1/notifications/abandonedCart/updated\",\n  \"data\": {},\n  \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency Values - JavaScript\nDESCRIPTION: Formats numerical values according to currency standards, including thousand and decimal delimiters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction money(value) { return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(value); }\n```\n\n----------------------------------------\n\nTITLE: Handling Response for Update Locations in BigCommerce API\nDESCRIPTION: This snippet shows the expected JSON response after successfully updating locations using the BigCommerce API. The response includes a transaction ID for the operation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transaction_id\": \"d3f9c9df-8d35-403c-8f9f-d1v1b3302efbv\"\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Olark Live Chat into BigCommerce Checkout\nDESCRIPTION: JavaScript code to inject Olark Live Chat app into the checkout or order confirmation page using BigCommerce's Script Manager or Scripts API.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/checkout-confirmation.mdx#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- begin olark code -->\n<script type=\"text/javascript\" async>\n  ;(function(o,l,a,r,k,y){if(o.olark)return;\n  r=\"script\";y=l.createElement(r);r=l.getElementsByTagName(r)[0];\n  y.async=1;y.src=\"//\"+a;r.parentNode.insertBefore(y,r);\n  y=o.olark=function(){k.s.push(arguments);k.t.push(+new Date)};\n  y.extend=function(i,j){y(\"extend\",i,j)};\n  y.identify=function(i){y(\"identifyv\",k.i=i)};\n  y.configure=function(i,j){y(\"configure\",i,j);k.c[i]=j};\n  k=y._={s:[],t:[+new Date],c:{},l:a};\n  })(window,document,\"static.olark.com/jsclient/loader.js\");\n  /* Add configuration calls bellow this comment */\n  olark.identify('4080-493-10-1035');\n</script>\n<!-- end olark code -->\n```\n\n----------------------------------------\n\nTITLE: Filtering Store Logs by Severity - HTTP Request\nDESCRIPTION: Makes a GET request to retrieve store log entries filtered by severity level using the severity query parameter.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/settings/logs.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/store/systemlogs?severity=2\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Handling GET /uninstall Callback in BigCommerce Single-Click App\nDESCRIPTION: Example of a GET request to the /uninstall endpoint of a BigCommerce single-click app. This callback is triggered when a user uninstalls the app from the store control panel.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/callbacks.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET https://your_app.example.com/uninstall?signed_payload_jwt={header_b64.payload_claims_b64.signature_b64}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Example Response for Account Store Users Query in BigCommerce\nDESCRIPTION: This JSON response provides an example of the data returned by the account store users query. It includes details about the account, stores, users, and associated apps.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/graphql-account/users.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"account\": {\n      \"id\": \"bc/account/account/{account_uuid}\",\n      \"stores\": {\n        \"edges\": [\n          {\n            \"node\": {\n              \"id\": \"bc/account/account/{account_uuid}\",\n              \"name\": \"Plant Market\",\n              \"storeHash\": \"{store_hash}\",\n              \"users\": {\n                \"collectionInfo\": {\n                  \"totalItems\": 4\n                },\n                \"edges\": [\n                  {\n                    \"node\": {\n                      \"id\": \"bc/account/user/{user_id}\",\n                      \"email\": \"jane.doe@example.com\",\n                      \"firstName\": \"Jane\",\n                      \"lastName\": \"Doe\",\n                      \"locale\": \"en-US\",\n                      \"lastLoginAt\": \"2023-04-12T15:17:25Z\",\n                      \"permissions\": [\n                        \"Manage_Products\",\n                        \"Create_Product\",\n                        \"Edit_Products\",\n                        \"Delete_Products\",\n                        \"Export_Products\",\n                        \"Import_Products\",\n                        \"Manage_Reviews\",\n                        \"Edit_Reviews\",\n                        \"Delete_Reviews\",\n                        \"Approve_Reviews\",\n                        \"Manage_Categories\",\n                        \"Create_Category\",\n                        \"Edit_Categories\",\n                        \"Delete_Categories\",\n                        \"Manage_Orders\",\n                        \"Edit_Orders\",\n                        \"Delete_Orders\",\n                        \"Export_Orders\",\n                        \"Add_Orders\",\n                        \"Import_Order_Tracking_Numbers\",\n                        \"Undelete_Orders\",\n                        \"Purge_Orders\",\n                        \"Refund_Orders\",\n                        \"Capture_Funds\",\n                        \"Customize_Order_Statuses\",\n                        \"Manage_Customers\",\n                        \"Add_Customer\",\n                        \"Edit_Customers\",\n                        \"Delete_Customers\",\n                        \"Export_Customers\",\n                        \"Import_Customers\",\n                        \"Manage_Store_Credit\",\n                        \"Manage_News\",\n                        \"Manage_Coupons\",\n                        \"Add_Coupons\",\n                        \"Edit_Coupons\",\n                        \"Delete_Coupons\",\n                        \"Newsletter_Subscribers\",\n                        \"Export_Froogle\",\n                        \"Manage_Settings\",\n                        \"Statistics_Overview\",\n                        \"Manage_Users\",\n                        \"Add_User\",\n                        \"Edit_Users\",\n                        \"Delete_Users\",\n                        \"Manage_Templates\",\n                        \"Manage_Pages\",\n                        \"Add_Pages\",\n                        \"Edit_Pages\",\n                        \"Delete_Pages\",\n                        \"Manage_Banners\",\n                        \"Manage_Brands\",\n                        \"Add_Brands\",\n                        \"Edit_Brands\",\n                        \"Delete_Brands\",\n                        \"Design_Mode\",\n                        \"Order_Messages\",\n                        \"Manage_Logs\",\n                        \"Manage_Returns\",\n                        \"Manage_GiftCertificates\",\n                        \"Manage_Addons\",\n                        \"Manage_ProductAttributes\",\n                        \"Customer_Groups\",\n                        \"Statistics_Products\",\n                        \"Statistics_Orders\",\n                        \"Statistics_Customers\",\n                        \"Statistics_Search\",\n                        \"Statistics_AbandonedCarts\",\n                        \"Statistics_JirafeOverview\",\n                        \"Statistics_JirafeRealTime\",\n                        \"Statistics_JirafeMerchandising\",\n                        \"Statistics_JirafeMarketing\",\n                        \"Statistics_JirafeOrders\",\n                        \"Statistics_JirafeCustomers\",\n                        \"Statistics_JirafePurchaseFunnel\",\n                        \"Statistics_JirafeAbandonedCarts\",\n                        \"Statistics_JirafeInsights\",\n                        \"Statistics_JirafeCarts\",\n                        \"Statistics_JirafeIntegrations\",\n                        \"Manage_ExportTemplates\",\n                        \"Manage_FormFields\",\n                        \"Add_FormFields\",\n                        \"Edit_FormFields\",\n                        \"Delete_FormFields\",\n                        \"Manage_Images\",\n                        \"View_XMLSitemap\",\n                        \"Manage_EmailAccounts\",\n                        \"Manage_DNS_Records\",\n                        \"See_Store_During_Maintenance\",\n                        \"Manage_Redirects\",\n                        \"Ebay_Selling\",\n                        \"Manage_EmailMarketing\",\n                        \"Facebook_Selling\",\n                        \"Shopping_Comparison\",\n                        \"Google_Adwords\",\n                        \"Yahoo_Search_Marketing\",\n                        \"Manage_AbandonedCartNotifications\",\n                        \"IntegratedApps_LoadApp\",\n                        \"IntegratedApps_InstallApp\",\n                        \"IntegratedApps_UninstallApp\",\n                        \"Manage_Payments\",\n                        \"Manage_Shipping\",\n                        \"Manage_Tax\",\n                        \"Manage_Promotions\",\n                        \"Add_Promotions\",\n                        \"Edit_Promotions\",\n                        \"Delete_Promotions\",\n                        \"Manage_PriceLists\",\n                        \"Manage_Scripts\",\n                        \"Purchase_Theme\",\n                        \"Manage_Order_Settings\",\n                        \"Manage_Customer_Settings\",\n                        \"Manage_Abandoned_Cart_Settings\",\n                        \"Manage_Cart_Settings\",\n                        \"Create_Channels\",\n                        \"Read_Channels\",\n                        \"Edit_Channels\",\n                        \"Delete_Channels\",\n                        \"Manage_Web_Analytics\",\n                        \"Manage_Data_Warehouses\",\n                        \"Manage_Customer_Data_Platforms\",\n                        \"Create_Locations\",\n                        \"Edit_Locations\",\n                        \"Delete_Locations\",\n                        \"Manage_Inventory\",\n                        \"Read_Locations\",\n                        \"Grant_High_Risk_Store_Permissions\",\n                        \"Create_Store_API_Tokens\",\n                        \"List_Store_API_Tokens\",\n                        \"Delete_Store_API_Tokens\",\n                        \"No_Permission_Required\"\n                      ],\n                      \"status\": \"ACTIVE\",\n                      \"updatedAt\": \"2023-04-12T17:46:27Z\",\n                      \"apps\": {\n                        \"edges\": [\n                          {\n                            \"node\": {\n                              \"id\": \"bc/account/app/4869\",\n                              \"name\": \"ShipperHQ\"\n                            }\n                          },\n                          {\n                            \"node\": {\n                              \"id\": \"bc/account/app/6824\",\n                              \"name\": \"Mailchimp\"\n                            }\n                          },\n                          {\n                            \"node\": {\n                              \"id\": \"bc/account/app/7488\",\n                              \"name\": \"Buy Buttons\"\n                            }\n                          },\n                          {\n                            \"node\": {\n                              \"id\": \"bc/account/app/13108\",\n                              \"name\": \"Abandoned Cart Recovery by Chated.io\"\n                            }\n                          }\n                        ]\n                      }\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BigCommerce User Account JSON Structure\nDESCRIPTION: JSON data structure showing user account details including personal information, permissions list, account status, and connected apps. Contains multiple user profiles with different permission sets and login histories.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/graphql-account/users.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"node\": {\n    \"id\": \"bc/account/app/14282\",\n    \"name\": \"BigCommerce for WordPress\"\n  }\n},\n{\n  \"node\": {\n    \"id\": \"bc/account/app/32120\",\n    \"name\": \"Avalara AvaTax\"\n  }\n},\n{\n  \"node\": {\n    \"id\": \"bc/account/app/31621\",\n    \"name\": \"developer-app\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling Product Metafield Creation Webhook Payload in JSON\nDESCRIPTION: This snippet demonstrates the structure of a payload object for a product metafield creation event. It includes the scope, store ID, metafield ID, resource ID (product ID), and resource type.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/metafield/created\",\n  \"store_id\": \"1001197568\",\n  \"data\": {\n    \"metafield_id\": 12,\n    \"resource_id\": \"118\",\n    \"resource_type\": \"product\"\n  },\n  \"hash\": \"60f42bd247b52f0647cbd16b1205c84260287141\",\n  \"created_at\": 1683305167,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Customer with V2 API\nDESCRIPTION: Endpoints required for creating a customer using the V2 API, showing multiple steps needed.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/customers/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\n/customers/{{customer_id}}\n/customers/{{customer_id}}/addresses\n```\n\n----------------------------------------\n\nTITLE: Implementing Font Type in schema.json for BigCommerce Theme Styles\nDESCRIPTION: JSON configuration for font data type used to select font values on theme settings. Requires type, label, id, and options fields, with an optional force_reload field.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/styles-and-properties.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n \"type\": \"font\",\n \"label\": \"i18n.BodyTextFontFamily\",\n \"id\": \"body-font\",\n \"options\": [\n   {\n     \"group\": \"i18n.Karla\",\n     \"label\": \"i18n.Karla\",\n     \"value\": \"Google_Karla_400\"\n   },\n   {\n     \"group\": \"i18n.Roboto\",\n     \"label\": \"i18n.Roboto\",\n     \"value\": \"Google_Roboto_400\"\n   },\n   {\n     \"group\": \"i18n.SourceSansPro\",\n     \"label\": \"i18n.SourceSansPro\",\n     \"value\": \"Google_Source+Sans+Pro_400\"\n   }\n ]\n}\n```\n\n----------------------------------------\n\nTITLE: Early Hints Usage Example\nDESCRIPTION: Example of using Early Hints with the CDN helper to improve page load performance by preloading critical assets.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n<script async src=\"{{cdn 'assets/dist/theme-bundle.head_async.js' resourceHint='preload' as='script'}}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Removing User from Store with GraphQL\nDESCRIPTION: GraphQL mutation to remove a user from a store using store and user IDs. Returns detailed user information after removal.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/graphql-account/users.mdx#2025-04-16_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  user {\n    removeUserFromStore(\n      input: {\n        storeId: \"bc/account/store/{store_hash}\"\n        userId: \"bc/account/user/{user_id}\"\n      }\n    ) {\n      storeId,\n      user {\n        id\n        email\n        firstName\n        lastName\n        locale\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Product Custom Fields with GraphQL Mutation\nDESCRIPTION: GraphQL mutation to set custom fields at both global store level and channel-specific locale level. Requires product ID and custom field data as input parameters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-custom-fields.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($input: UpdateProductCustomFieldsInput!) {\n  product {\n    updateProductCustomFields (input: $input) {\n      product {\n        customFields {\n          edges {\n            node {\n              id\n              name\n              value\n              overrides (context: { channelId: \"bc/store/channel/1\", locale: \"en-US\" }) {\n                edges {\n                  node {\n                  ... on ProductCustomFieldOverridesForChannelLocale {\n                      name\n                      value\n                      isVisible\n                      context {\n                        channelId\n                        locale\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"data\": [\n      {\n        \"customFieldId\": \"bc/store/productCustomField/1\",\n        \"name\": \"Global custom field name\",\n        \"value\": \"Global custom field value\",\n        \"overrides\": [\n          {\n            \"channelLocaleOverrides\": {\n              \"context\": {\n                \"channelId\": \"bc/store/channel/1\",\n                \"locale\": \"en-US\"     \n              },\n              \"data\": {\n                \"name\": \"Custom field name override\",\n                \"value\": \"Custom field value override\",\n                \"isVisible\": true\n              }\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recent Items Handlebars Expression\nDESCRIPTION: Retrieves recently viewed products for the current customer, referencing the standard product card model.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_8\n\nLANGUAGE: handlebars\nCODE:\n```\n{{customer.recently_viewed_products}}\n```\n\n----------------------------------------\n\nTITLE: Database Seeding Command\nDESCRIPTION: Command to seed the database with pre-configured collections and documents.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/point-of-sale.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run seed\n```\n\n----------------------------------------\n\nTITLE: Using any Helper for Conditional Rendering in Handlebars\nDESCRIPTION: Demonstrates the any helper which renders a block if one or more parameters evaluate to true. The example shows checking if any items have selected=true to display a reset button.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_57\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#any items selected=true}}\n  <!-- block to display if any items have selected=true -->\n{{/any}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#any shop_by_price selected=true}}\n    <li class=\"navList-item\">\n        <a href=\"{{category_url}}\" class=\"navList-action\">\n            {{lang 'category.reset'}}\n        </a>\n    </li>\n{{/any}}\n```\n\n----------------------------------------\n\nTITLE: Embedding Checkout Implementation\nDESCRIPTION: JavaScript and HTML code showing how to implement the embedded checkout using the Checkout SDK, including configuration and rendering.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/embedded-checkout/tutorial.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nembedCheckout({\n  \"containerId\": \"foo-bar-checkout\",\n  \"url\": \"https://store-id30h7ohwf.mybigcommerce.com/cart.php?embedded=1&action=loadInCheckout&id=bc218c65-7a32-4ab7-8082-68730c074d02&token=aa958e2b7922035bf3339215d95d145ebd9193deb36ae847caa780aa2e003e4b\"\n});\n```\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"foo-bar-checkout\"></div>\n```\n\n----------------------------------------\n\nTITLE: Querying Data Layer Status with GraphQL\nDESCRIPTION: This GraphQL query retrieves the current status of the data layer in the store. It returns a boolean value indicating whether the data layer is enabled or not.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/settings/data.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  store {\n    settings {\n      dataSolutions {\n        isDataLayerEnabled\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"store\": {\n      \"settings\": {\n        \"dataSolutions\": {\n          \"isDataLayerEnabled\": false\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cart Line Items Addition Response\nDESCRIPTION: The response from adding items to a cart, confirming the operation was successful and returning the cart's entity ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/graphql-storefront.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n  {\n    \"data\": {\n      \"cart\": {\n        \"addCartLineItems\": {\n          \"cart\": {\n            \"entityId\": \"bb916deb-ddd6-4586-b65b-b8385e0e7a9d\"\n          }\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Calling the createCart() Function to Create a New Cart\nDESCRIPTION: Example of how to call the createCart() function to create a new cart with two line items. Replace the productId values with actual product IDs from your store.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncreateCart(`/api/storefront/carts`, {\n  \"lineItems\": [\n    {\n      \"quantity\": 1,\n      \"productId\": 86\n    },\n    {\n      \"quantity\": 1,\n      \"productId\": 88\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Color Theme Setting in BigCommerce\nDESCRIPTION: This JSON snippet defines a theme setting of type `color`. The `label` provides a user-friendly name for the setting (localized using i18n), and the `id` serves as a unique identifier for accessing the setting's value. The user will be able to select a color using a color picker interface.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/object-reference/elements/color.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"color\",\n  \"label\": \"i18n.BannerBackground\",\n  \"id\": \"color-primary\"\n}\n```\n\n----------------------------------------\n\nTITLE: Email Body Template\nDESCRIPTION: HTML template for the login email body, including the sign-in link and security notice. Contains variables for store name, token, and redirect URL.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/passwordless-login.mdx#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\nPlease click the link below to sign in to your account with {store name}.\n\nYou have requested a sign-in link. Please click here to sign in and continue.\n\nAlternatively, paste the following link in your browser:\nhttps://store-url/login.php?action=check_passwordless_login&token={token}&redirectUrl={redirect_URL}\n\nThis login is for {Store name} if you did not request this link, please ignore this email. Your account is still secure.\n```\n\n----------------------------------------\n\nTITLE: Response for Setting Product Modifier Options in BigCommerce\nDESCRIPTION: This JSON response shows the result of setting product modifier options for a locale. It includes the updated product information with modified display names and values for various modifier types in the specified locale (French).\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"product\": {\n      \"setProductModifiersInformation\": {\n        \"product\": {\n          \"id\": \"bc/store/product/111\",\n          \"modifiers\": {\n            \"edges\": [\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/118\",\n                  \"displayName\": \"Include Insurance?\",\n                  \"overridesForLocale\": null\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/119\",\n                  \"displayName\": \"Custom Message\",\n                  \"overridesForLocale\": null\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/121\",\n                  \"displayName\": \"Holiday Theme\",\n                  \"overridesForLocale\": {\n                    \"displayName\": \"Thème de vacances\",\n                    \"values\": [\n                      {\n                        \"id\": \"bc/store/productModifierValue/113\",\n                        \"label\": \"Anniversaire\"\n                      },\n                      {\n                        \"id\": \"bc/store/productModifierValue/114\",\n                        \"label\": \"Noël\"\n                      }\n                    ]\n                  }\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/122\",\n                  \"displayName\": \"Hood Color\",\n                  \"overridesForLocale\": {\n                    \"displayName\": \"Couleur du capot\",\n                    \"values\": [\n                      {\n                        \"id\": \"bc/store/productModifierValue/115\",\n                        \"label\": \"Rouge\"\n                      },\n                      {\n                        \"id\": \"bc/store/productModifierValue/116\",\n                        \"label\": \"Bleu\"\n                      }\n                    ]\n                  }\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/123\",\n                  \"displayName\": \"Pattern\",\n                  \"overridesForLocale\": {\n                    \"displayName\": \"Modèle\",\n                    \"values\": [\n                      {\n                        \"id\": \"bc/store/productModifierValue/117\",\n                        \"label\": \"Ordinaire\"\n                      },\n                      {\n                        \"id\": \"bc/store/productModifierValue/118\",\n                        \"label\": \"A carreaux\"\n                      }\n                    ]\n                  }\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/124\",\n                  \"displayName\": \"Fit Type\",\n                  \"overridesForLocale\": {\n                    \"displayName\": \"Type d'ajustement\",\n                    \"values\": [\n                      {\n                        \"id\": \"bc/store/productModifierValue/119\",\n                        \"label\": \"Régulière\"\n                      },\n                      {\n                        \"id\": \"bc/store/productModifierValue/120\",\n                        \"label\": \"Ample\"\n                      }\n                    ]\n                  }\n                }\n              },\n              {\n                \"node\": {\n                    \"id\": \"bc/store/productModifier/125\",\n                    \"displayName\": \"Optional details\",\n                    \"overridesForLocale\": null\n                }\n              },\n              {\n                \"node\": {\n                    \"id\": \"bc/store/productModifier/127\",\n                    \"displayName\": \"Number of Pockets\",\n                    \"overridesForLocale\": null\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/128\",\n                  \"displayName\": \"Anniversary Date\",\n                  \"overridesForLocale\": {\n                    \"displayName\": \"Date d'anniversaire\"\n                  }\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/129\",\n                  \"displayName\": \"Custom-printed Image\",\n                  \"overridesForLocale\": {\n                    \"displayName\": \"Image personnalisée\"\n                  }\n                }\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring New Products in Frontmatter - Handlebars - YAML\nDESCRIPTION: This YAML snippet demonstrates how to declare global new products in a BigCommerce page template using front matter. It sets a limit on the number of new products to display based on theme settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/global-objects-and-properties.mdx#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"products:\\n  new:\\n    limit: {{theme_settings.homepage_new_products_count}}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Category Page in JSON\nDESCRIPTION: JSON configuration for disabling shop by price and limiting the number of products displayed on a category page.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"category\": {\n    \"shop_by_price\": false,\n    \"products\": {\n      \"limit\": 5\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Options Field Query in BigCommerce\nDESCRIPTION: JSON response for a variant option values query using the options field. This response shows a more direct structure for retrieving option values, including entity IDs, display names, and labels for both Color and Size options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/variants.mdx#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"product\": {\n        \"variants\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"options\": {\n                  \"edges\": [\n                    {\n                      \"node\": {\n                        \"entityId\": 116,\n                        \"displayName\": \"Color\",\n                        \"isRequired\": true,\n                        \"values\": {\n                          \"edges\": [\n                            {\n                              \"node\": {\n                                \"entityId\": 108,\n                                \"label\": \"Pink\"\n                              }\n                            }\n                          ]\n                        }\n                      }\n                    },\n                    {\n                      \"node\": {\n                        \"entityId\": 126,\n                        \"displayName\": \"Size\",\n                        \"isRequired\": true,\n                        \"values\": {\n                          \"edges\": [\n                            {\n                              \"node\": {\n                                \"entityId\": 129,\n                                \"label\": \"Small\"\n                              }\n                            }\n                          ]\n                        }\n                      }\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Account Orders Handlebars Expression\nDESCRIPTION: Manages completed orders for the current customer, including order metadata, product details, URLs for returns/reorders and pagination.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_12\n\nLANGUAGE: handlebars\nCODE:\n```\n{{customer.orders}}\n```\n\n----------------------------------------\n\nTITLE: Running Stencil Bundle for Theme Validation\nDESCRIPTION: Executes the stencil bundle command to validate your theme's code and identify any SCSS errors.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/node-sass.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nstencil bundle\n```\n\n----------------------------------------\n\nTITLE: Exporting getBCVerify Function in TypeScript\nDESCRIPTION: This function is exported to handle JWT verification for the /load and /uninstall API endpoints. It uses the bigcommerceSigned.verifyJWT method to authenticate requests.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-connect.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getBCVerify({ signed_payload_jwt }: QueryParams) {\n    return bigcommerceSigned.verifyJWT(signed_payload_jwt);\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Box Styles in Next.js Home Page\nDESCRIPTION: Styles a homepage by extending BigDesign Box component for consistent styling and information display. Ensures layout consistency using Flex and Box components, showcases inventory, variant counts, and primary category using styled Box components with BigDesign typography.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst Index = ({ context }: { context: string }) => {\n    const { isError, isLoading, summary } = useProducts();\n    const { setContext } = useSession();\n\n    useEffect(() => {\n        if (context) setContext(context);\n    }, [context, setContext]);\n\n    if (isLoading) return <Loading />;\n    if (isError) return <ErrorMessage />;\n\n    return (\n        <Panel header=\"Homepage\">\n            <Flex>\n                <StyledBox border=\"box\" borderRadius=\"normal\" marginRight=\"xLarge\" padding=\"medium\">\n                    <H4>Inventory count</H4>\n                    <H1 marginBottom=\"none\">{summary.inventory_count}</H1>\n                </StyledBox>\n                <StyledBox border=\"box\" borderRadius=\"normal\" marginRight=\"xLarge\" padding=\"medium\">\n                    <H4>Variant count</H4>\n                    <H1 marginBottom=\"none\">{summary.variant_count}</H1>\n                </StyledBox>\n                <StyledBox border=\"box\" borderRadius=\"normal\" padding=\"medium\">\n                    <H4>Primary category</H4>\n                    <H1 marginBottom=\"none\">{summary.primary_category_name}</H1>\n                </StyledBox>\n            </Flex>\n        </Panel>\n    );\n};\n\nconst StyledBox = styled(Box)`\n    min-width: 10rem;\n`;\n\nexport const getServerSideProps = async ({ query }) => ({\n    props: { context: query?.context ?? '' }\n});\n\nexport default Index;\n```\n\n----------------------------------------\n\nTITLE: Creating a CouponDrawer component\nDESCRIPTION: This code defines a functional React component named CouponDrawer that utilizes Material UI's Drawer and Button components. It manages its open/close state and allows users to click a button to reveal the coupon form.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/react.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport Drawer from '@mui/material/Drawer';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport VerticalStepper from './VerticalStepper';\n\nexport default function CouponDrawer() {\n  const [state, setState] = React.useState({\n    right: false,\n  });\n\n  const toggleDrawer = (side, open) => (event) => {\n    if (\n      event.type === 'keydown' &&\n      (event.key === 'Tab' || event.key === 'Shift')\n    ) {\n      return;\n    }\n\n    setState((prevState) => ({ ...prevState, [side]: open }));\n  };\n\n  return (\n    <div>\n      <Button\n        color=\"secondary\"\n        variant=\"contained\"\n        onClick={toggleDrawer('right', true)}\n        aria-label=\"Open coupon drawer\"\n      >\n        Click Here For A Coupon\n      </Button>\n      <Drawer\n        anchor=\"right\"\n        open={state.right}\n        onClose={toggleDrawer('right', false)}\n      >\n        <Box sx={{ width: 320, p: 2 }}>\n          <VerticalStepper />\n        </Box>\n      </Drawer>\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Load Endpoint in Next.js\nDESCRIPTION: This code implements the /load API endpoint in Next.js. It handles the process of signing in a user when the app is launched and redirects to the homepage upon successful verification.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-connect.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { getBCVerify } from '../../lib/auth';\n\nexport default async function load(req: NextApiRequest, res: NextApiResponse) {\n    try {\n        await getBCVerify(req.query);\n\n        res.redirect(302, '/');\n    } catch (error) {\n        const { message, response } = error;\n        res.status(response?.status || 500).json({ message });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Refund Quote in BigCommerce API\nDESCRIPTION: This snippet demonstrates how to create a refund quote using the BigCommerce API. It includes refunding a product, shipping, a tax-exempt order level refund, and a fee.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/refunds.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/orders/{order_id}/payment_actions/refund_quotes\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"items\": [\n    {\n      \"item_type\": \"PRODUCT\",  // Refund a product\n      \"item_id\": 8,            // Order product ID\n      \"quantity\": 1,           // Quantity to refund\n    },\n    {\n      \"item_type\": \"SHIPPING\", // Refund shipping\n      \"item_id\": 9,            // Order address ID\n      \"amount\": 10,            // Amount to refund\n    },\n    {\n      \"item_type\": \"ORDER\",    // Tax-exempt order level refund\n      \"item_id\": 9,            // Order ID\n      \"amount\": 1,             // Amount to refund\n    },\n    {\n      \"item_type\": \"FEE\",     // Refund a fee\n      \"item_id\": 11,          // Fee ID\n      \"amount\": 1,            // Amount to refund\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Response from Brand Item Discount Promotion Creation in BigCommerce API\nDESCRIPTION: The API response showing the successful creation of a promotion that gives $50 off the most expensive item when buying two items from brand ID 36. The response includes promotion ID, configuration details, and promotion status.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/brand.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 8,\n    \"name\": \"Buy two brand items and get the most expensive one at $50 off\",\n    \"created_from\": \"api\",\n    \"customer\": {\n      \"group_ids\": [],\n      \"minimum_order_count\": 0,\n      \"excluded_group_ids\": [],\n      \"segments\": null\n    },\n    \"rules\": [\n      {\n        \"action\": {\n          \"cart_items\": {\n            \"discount\": {\n              \"fixed_amount\": \"50\"\n            },\n            \"strategy\": \"MOST_EXPENSIVE\",\n            \"add_free_item\": true,\n            \"as_total\": false,\n            \"include_items_considered_by_condition\": true,\n            \"exclude_items_on_sale\": false,\n            \"items\": {\n              \"brands\": [\n                36\n              ]\n            },\n            \"quantity\": 1\n          }\n        },\n        \"apply_once\": false,\n        \"stop\": false,\n        \"condition\": {\n          \"cart\": {\n            \"items\": {\n              \"brands\": [\n                36\n              ]\n            },\n            \"minimum_quantity\": 2\n          }\n        }\n      }\n    ],\n    \"notifications\": [],\n    \"stop\": false,\n    \"currency_code\": \"USD\",\n    \"redemption_type\": \"AUTOMATIC\",\n    \"shipping_address\": null,\n    \"current_uses\": 0,\n    \"max_uses\": null,\n    \"start_date\": \"2022-07-15T21:01:36+00:00\",\n    \"end_date\": null,\n    \"status\": \"ENABLED\",\n    \"schedule\": null,\n    \"can_be_used_with_other_promotions\": true\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Database Setup Commands\nDESCRIPTION: Commands to set up the database and restart the development server for a BigCommerce app.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/app-extensions/guide.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run db:setup\n\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Referencing Original CSS Stylesheet in BigCommerce Theme\nDESCRIPTION: Shows how to reference the default CSS file in a BigCommerce theme using Handlebars syntax. This demonstrates the original stylesheet that developers should avoid directly modifying.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/updates-and-version-control.mdx#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{{stylesheet '/assets/css/theme.css'}}}\n```\n\n----------------------------------------\n\nTITLE: Minimal Cart Creation\nDESCRIPTION: Simplified JSON request body for creating a basic cart with minimal details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/carts.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel_id\": 1,\n  \"line_items\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 80,\n      \"variant_id\": 64\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Front Matter Configuration in home.html - HTML\nDESCRIPTION: This HTML snippet shows how to reference the `homepage_new_products_count` value from `config.json` within the front matter of a template file. It allows dynamic control over displayed product limits based on theme settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/global-styles.mdx#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\nproducts:\n  new:\n    limit: {{theme_settings.homepage_new_products_count}}\n  featured:\n    limit: {{theme_settings.homepage_featured_products_count}}\n  top_sellers:\n    limit: {{theme_settings.homepage_top_products_count}}\ncarousel: {{theme_settings.homepage_show_carousel}}\nblog:\n    recent_posts:\n        limit: {{theme_settings.homepage_blog_posts_count}}\n{{#partial \"hero\"}}\n<!-- [...] -->\n{{/partial}}\n{{> layout/base}}\n```\n\n----------------------------------------\n\nTITLE: Using Stencil Image Helper\nDESCRIPTION: Demonstrates how to use the getImage Handlebars helper to display images in Stencil themes with a specific size option.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/common-objects.mdx#2025-04-16_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n{{getImage image \"thumbnail\"}}\n```\n\n----------------------------------------\n\nTITLE: Response for Retrieving Shopper Profiles in JSON\nDESCRIPTION: This JSON response provides a list of shopper profiles for a segment. Each profile includes an ID, customer ID, creation date, and last update date. It also includes pagination metadata.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/segments/user-guide.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"customer_id\": 1,\n      \"created_at\": \"2022-08-24T14:15:22Z\",\n      \"updated_at\": \"2022-08-24T14:15:22Z\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"total\": 1,\n      \"count\": 1,\n      \"per_page\": 50,\n      \"current_page\": 1,\n      \"total_pages\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Attributes in YAML\nDESCRIPTION: This code snippet demonstrates how to declare front matter for filtering similar products based on views, with a specified limit to control the number of products returned.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter.mdx#2025-04-16_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nproducts:\n  similar_by_views:\n    limit: 6\n```\n\n----------------------------------------\n\nTITLE: Installing Stencil CLI Manually on Windows\nDESCRIPTION: Command for installing Stencil CLI globally via npm after manually installing the required dependencies (Git and Node.js).\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/install.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g @bigcommerce/stencil-cli\n```\n\n----------------------------------------\n\nTITLE: Query Object Lookup by URL\nDESCRIPTION: GraphQL query to look up different types of objects (Category, Brand, Product) by URL path using inline fragments.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery LookUpUrl {\n  site {\n    route(path: \"/shop-all/\") {\n      node {\n        __typename\n        id\n        ... on Category {\n          name\n          description\n        }\n        ... on Brand {\n          name\n          defaultImage {\n            url(width: 200)\n          }\n        }\n        ... on Product {\n          name\n          description\n          images {\n            edges {\n              node {\n                url(width: 500, height: 500)\n              }\n            }\n          }\n          brand {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Price List Single Event Webhook Payload\nDESCRIPTION: Example payload structure for individual price list events like created, updated, activated, deactivated and deleted.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/priceList/created\",\n  \"store_id\": \"1001197568\",\n  \"data\": {\n    \"price_list_id\": 5\n  },\n  \"hash\": \"e0c298b8097a6a2f39d17e593a9b360f5b2fef7d\",\n  \"created_at\": 1709327895,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Structure in Widget Schema\nDESCRIPTION: Demonstrates the basic structure for creating tabs in a widget template schema. Tabs are required at the root level to contain all visible sections.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/input-reference/schema.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{\n  \"type\": \"tab\",\n  \"label\": \"Content\",\n  \"sections\": [...]\n}]\n```\n\n----------------------------------------\n\nTITLE: Executing BigCommerce Product Import via WP-CLI\nDESCRIPTION: Basic command to import products from BigCommerce to WordPress using WP-CLI.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/deployment/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwp bigcommerce import products\n```\n\n----------------------------------------\n\nTITLE: Using Moment.js to Format Dates - JavaScript\nDESCRIPTION: Utilizes the Moment.js library to format and calculate dates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction formatDate(date, format) { return moment(date).format(format); }\n```\n\n----------------------------------------\n\nTITLE: Creating Theme Bundle with Stencil CLI\nDESCRIPTION: Command to create a deployable theme bundle with updated changes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/storefront-selector.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nstencil bundle\n```\n\n----------------------------------------\n\nTITLE: Accessing Product Data in Handlebars Templates\nDESCRIPTION: Handlebars expression to access the Product object which provides detailed product data in Stencil templates. This is used in various product-related templates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n{{product}}\n```\n\n----------------------------------------\n\nTITLE: Real-world Dropzone HTML Example for GORUCK\nDESCRIPTION: A practical example of dropzone HTML used on the GORUCK site. This creates a section at the bottom of the page with a heading and a grid gallery div with additional data attributes for group and tag filtering.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/dynamic-content-rendering.mdx#2025-04-16_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n<div class=\"gr-dropzone\" data-gr-zone=\"gr-dropzone-bottom\">\n    <h3>GORUCK GEAR IN THE FIELD</h3>\n    <div id=\"bv-grid-gallery\" data-gr-groups=\"goruck-rm-group\" data-gr-tags=\"gear\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Processing Payment Response\nDESCRIPTION: Example response from the Payments API after successful payment processing. Returns transaction ID and status.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/payments/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": \"693bb4cd-3f20-444a-8315-6369f582c68a\",\n    \"status\": \"success\",\n    \"transaction_type\": \"purchase\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Customer Created Webhook Payload in JSON\nDESCRIPTION: This snippet illustrates the payload structure for the store/customer/created webhook event. It includes the customer ID and other metadata associated with the event.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/customer/created\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"customer\", // will always be customer\n    \"id\": 32 // ID of the customer\n  },\n  \"hash\": \"8768ab15aa86c6d73c7e4c3efbaee072110ad1d2\",\n  \"created_at\": 1561481571,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Subscriber Event Webhook Payload Example\nDESCRIPTION: Example JSON payload structure for subscriber-related webhook events (created/updated/deleted). Includes subscriber identification and event metadata.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/subscriber/created\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"subscriber\",\n    \"id\": 5\n  },\n  \"hash\": \"bdb6c9c2d17ca7036538e483db0bdd7debc4beb4\",\n  \"created_at\": 1561482953,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase and Implementing Database Functions\nDESCRIPTION: Sets up Firebase configuration and implements functions for user and store management in the database.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Firebase config and initialization\n// Prod applications might use config file\nconst { FIRE_API_KEY, FIRE_DOMAIN, FIRE_PROJECT_ID } = process.env;\n\nconst firebaseConfig = {\n  apiKey: FIRE_API_KEY,\n  authDomain: FIRE_DOMAIN,\n  projectId: FIRE_PROJECT_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\n// Firestore data management functions\nexport async function setUser({ user }: SessionProps) {\n  if (!user) return null;\n\n  const { email, id, username } = user;\n  const ref = doc(db, 'users', String(id));\n  const data: UserData = { email };\n\n  if (username) {\n    data.username = username;\n  }\n\n  await setDoc(ref, data, { merge: true });\n}\n\nexport async function setStore(session: SessionProps) {\n  const {\n    access_token: accessToken,\n    context,\n    scope,\n    user: { id },\n  } = session;\n  // Only set on app install or update\n  if (!accessToken || !scope) return null;\n\n  const storeHash = context?.split('/')[1] || '';\n  const ref = doc(db, 'store', storeHash);\n  const data = { accessToken, adminId: id, scope };\n\n  await setDoc(ref, data);\n}\n\nexport async function getStoreToken(storeHash: string) {\n    if (!storeHash) return null;\n    const storeDoc = await getDoc(doc(db, 'store', storeHash));\n\n    return storeDoc.data()?.accessToken ?? null;\n}\n\nexport async function deleteStore({ store_hash: storeHash }: SessionProps) {\n    const ref = doc(db, 'store', storeHash);\n\n    await deleteDoc(ref);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Recovery Route for Headless Implementation\nDESCRIPTION: Makes a POST request to create a recover_abandoned_cart route for the headless storefront\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/abandoned-carts.mdx#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/sites/{site_id}/routes\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"matching\": \"*\",\n  \"route\": \"/my-abandoned-cart-page/\",\n  \"type\": \"recover_abandoned_cart\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Theme Settings in BigCommerce\nDESCRIPTION: JSON schema for defining font selection options in a BigCommerce theme, allowing users to choose from predefined font families like Karla, Roboto, and Source Sans Pro\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/object-reference/elements/font.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"font\",\n  \"label\": \"i18n.BodyTextFontFamily\",\n  \"id\": \"body-font\",\n  \"options\": [\n    {\n      \"group\": \"i18n.Karla\",\n      \"label\": \"i18n.Karla\",\n      \"value\": \"Google_Karla_400\"\n    },\n    {\n      \"group\": \"i18n.Roboto\",\n      \"label\": \"i18n.Roboto\",\n      \"value\": \"Google_Roboto_400\"\n    },\n    {\n      \"group\": \"i18n.SourceSansPro\",\n      \"label\": \"i18n.SourceSansPro\",\n      \"value\": \"Google_Source+Sans+Pro_400\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Logo Configuration for Optimized Checkout - JSON\nDESCRIPTION: This JSON snippet outlines the configuration for a custom logo to be displayed in the optimized checkout. It includes properties such as 'type', 'label', 'reference', and 'force_reload', which determine how the logo is incorporated into the checkout process.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/object-reference/elements/optimizedCheckout-image.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"optimizedCheckout-image\",\n  \"label\": \"i18n.250X100pxRecommended\",\n  \"reference\": \"optimizedCheckout-show-logo\",\n  \"reference_default\": \"none\",\n  \"force_reload\": true,\n  \"id\": \"optimizedCheckout-logo\"\n},\n```\n\n----------------------------------------\n\nTITLE: Missing Webpack Module Error Example\nDESCRIPTION: This error occurs when the webpack module is missing from the theme's dependencies. It's typically resolved by running npm install in the theme directory to install missing dependencies.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/unexpected-behavior.mdx#2025-04-16_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nmodule.js:327\nthrow err;\n^\n\nError: Cannot find module 'webpack'\nat Function.Module._resolveFilename (module.js:325:15)\nat Function.Module._load (module.js:276:25)\nat Module.require (module.js:353:17)\nat require (internal/module.js:12:17)\nat Object. (/Users/jane.doe/themes/cornerstone/stencil.conf.js:2:15)\nat Module._compile (module.js:409:26)\nat Object.Module._extensions..js (module.js:416:10)\nat Module.load (module.js:343:32)\nat Function.Module._load (module.js:300:12)\nat Module.require (module.js:353:17)\n```\n\n----------------------------------------\n\nTITLE: Using Debug Mode in Stencil Development\nDESCRIPTION: Code snippets demonstrating how to enable debug mode in Stencil to view available data on a page. This is useful for theme development to see what objects are available.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttp://localhost:3000/product/this-is-a-sample-product?debug=context\n```\n\nLANGUAGE: url\nCODE:\n```\nhttp://localhost:3000/product/this-is-a-sample-product?debug=bar\n```\n\n----------------------------------------\n\nTITLE: Response for Channel-Specific Storefront Category Settings\nDESCRIPTION: JSON response example showing the storefront category settings for a specific channel. It includes settings like default product sort and category tree depth.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/guide/storefronts.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"listing_mode\": null,\n    \"default_product_sort\": \"bestselling\",\n    \"category_tree_depth\": 0\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Product Modifiers Response Example\nDESCRIPTION: Sample JSON response showing product modifier data including checkbox, text field, rectangle list, and swatch modifiers with their localized French translations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"store\": {\n      \"product\": {\n        \"id\": \"bc/store/product/111\",\n        \"modifiers\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"__typename\": \"CheckboxProductModifier\",\n                \"id\": \"bc/store/productModifier/118\",\n                \"displayName\": \"Include Insurance?\",\n                \"isShared\": false,\n                \"isRequired\": true,\n                \"checkedByDefault\": true,\n                \"fieldValue\": \"Yes\",\n                \"overridesForLocale\": {\n                  \"displayName\": null,\n                  \"fieldValue\": null\n                }\n              }\n            },\n            {\n              \"node\": {\n                \"__typename\": \"TextFieldProductModifier\",\n                \"id\": \"bc/store/productModifier/119\",\n                \"displayName\": \"Custom Message\",\n                \"isShared\": false,\n                \"isRequired\": false,\n                \"defaultValue\": \"Enjoy your gift\",\n                \"overridesForLocale\": {\n                  \"displayName\": null,\n                  \"fieldValue\": null\n                }\n              }\n            },\n            {\n              \"node\": {\n                \"__typename\": \"RectangleListProductModifier\",\n                \"id\": \"bc/store/productModifier/121\",\n                \"displayName\": \"Holiday Theme\",\n                \"isShared\": false,\n                \"isRequired\": false,\n                \"values\": [\n                  {\n                    \"id\": \"bc/store/productModifierValue/113\",\n                    \"label\": \"Birthday\",\n                    \"isDefault\": true\n                  },\n                  {\n                    \"id\": \"bc/store/productModifierValue/114\",\n                    \"label\": \"Christmas\",\n                    \"isDefault\": true\n                  }\n                ],\n                \"overridesForLocale\": {\n                  \"displayName\": \"Thème de vacances\",\n                  \"values\": [\n                    {\n                      \"id\": \"bc/store/productModifierValue/113\",\n                      \"label\": \"Anniversaire\"\n                    },\n                    {\n                      \"id\": \"bc/store/productModifierValue/114\",\n                      \"label\": \"Noël\"\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-site Configuration Support Table\nDESCRIPTION: Table showing which multi-site configuration methods are supported for BigCommerce WordPress integration.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/start/multi-site.mdx#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Configuration Method | Is Supported |\n|:----------------------|:-----------:|\n| Subdirectories           | No               |\n| Subdomains               | Yes              |\n| Separate Domains         | Yes*             |\n```\n\n----------------------------------------\n\nTITLE: JWT Payload Structure for App Extensions\nDESCRIPTION: Example JWT payload containing user authentication and locale information used for App Extension authorization and localization.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/app-extensions/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aud\": \"xxxxxxAppClientIdxxxxx\",\n  \"iss\": \"bc\",\n  \"iat\": 1687811320,\n  \"nbf\": 1687811315,\n  \"exp\": 1687897720,\n  \"jti\": \"546b29bf-e648-45f9-911e-ad59df520cae\",\n  \"sub\": \"stores/{store_hash}\",\n  \"user\": {\n    \"id\": 2222222,\n    \"email\": \"shanice.jackson@example.com\",\n    \"locale\": \"en-US\"\n  },\n  \"owner\": {\n    \"id\": 1111111,\n    \"email\": \"ana.oliveiria@example.com\"\n  },\n  \"url\": \"/orders/106/personal-thanks\",\n  \"channel_id\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SSH Cron Job for WordPress\nDESCRIPTION: Shell command for creating a cron job through SSH using crontab. The command runs every 5 minutes and triggers WordPress cron events through an HTTP request to wp-cron.php.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/deployment/creating-reliable-cron-jobs.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n*/5 * * * * wget -q -O - https://example.com/wp-cron.php?doing_wp_cron >/dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Querying Customer Order Metafields with GraphQL\nDESCRIPTION: This query retrieves metafields for all orders belonging to the currently logged-in customer. It returns the order entityId and any metafields in the 'my-namespace' namespace for each order.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/orders.mdx#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n     customer {\n       orders {\n         edges {\n           node {\n             entityId\n             metafields(namespace: \"my-namespace\") {\n               edges {\n                 node {\n                   value\n                 }\n               }\n             }\n           }\n         }\n       }\n     }\n   }\n```\n\n----------------------------------------\n\nTITLE: Category Tree Query Response\nDESCRIPTION: Example JSON response showing the structured data returned from the category tree GraphQL query, including nested category relationships.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter-reference.mdx#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"categoryTree\": [\n        {\n          \"name\": \"Apparel\",\n          \"path\": \"/apparel/\",\n          \"entityId\": 25,\n          \"children\": [\n            {\n              \"name\": \"Shirts\",\n              \"path\": \"/apparel/shirts/\",\n              \"entityId\": 27,\n              \"children\": []\n            },\n            {\n              \"name\": \"Hoodies\",\n              \"path\": \"/hoodies/\",\n              \"entityId\": 28,\n              \"children\": []\n            },\n            {\n              \"name\": \"Caps\",\n              \"path\": \"/caps/\",\n              \"entityId\": 29,\n              \"children\": []\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Rate Limit Error\nDESCRIPTION: Error message showing a 429 rate limit response when attempting to access the BigCommerce API for category information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/platform-integration/unexpected-behavior.mdx#2025-04-16_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n[429] Error connecting to the API (https://api.bigcommerce.com/stores/hash/v3/catalog/categories?id%3Ain=138%2C139%2C140%2C142%2C143%2C144%2C145%2C146%2C147%2C149&limit=10&include_fields=id)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Distutils\nDESCRIPTION: Command for installing Python setuptools which include distutils, necessary when using Python version higher than 3.12.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/install.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install setuptools\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Depth of 11\nDESCRIPTION: This GraphQL query illustrates a query with a depth of 11, demonstrating how nested objects contribute to the overall query depth.  Each level of nesting increases the depth, which, if exceeding the limit of 16, will result in an error.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/index.mdx#2025-04-16_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nquery {                                 // depth 0\n  site {                                // depth 1\n    products {                          // depth 2\n      edges {                           // depth 3\n        node {                          // depth 4\n          entityId                      // depth 5\n          variants {                    // depth 5\n            edges {                     // depth 6\n              node {                    // depth 7\n                entityId                // depth 8\n                options {               // depth 8\n                  edges {               // depth 9\n                    node {              // depth 10\n                      entityId          // depth 11\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated WebDAV URL Structure in BigCommerce Stencil Themes\nDESCRIPTION: Example of the resulting HTML output after the {{cdn}} helper processes a WebDAV reference. This shows how the helper transforms the reference into a complete CDN URL.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/theme-size.mdx#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://cdn.bcapp/3dsf74g/content/img/image.jpg\">\n```\n\n----------------------------------------\n\nTITLE: Adding Spanish Localization Strings for Checkout\nDESCRIPTION: This JSON snippet demonstrates how to add localization strings for the checkout process in Spanish within the es.json file.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/order-confirmation.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"checkout\": {\n        \"title\": \"Pago\"\n    }\n```\n\n----------------------------------------\n\nTITLE: REST API Client Error Status Codes (4xx)\nDESCRIPTION: Table of client error HTTP status codes (4xx) returned when requests cannot be processed due to client-side issues, including invalid authentication, permissions, and request formatting.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/about/status-codes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Code | Text | Purpose |\n|:----:|:-----|:--------|\n| **400** | **Bad Request** | Issued when a malformed request was sent. |\n| **401** | **Unauthorized** | This response is sent when your client failed to provide credentials or its credentials were invalid. |\n| **403** | **Forbidden** | Returned when permissions do not allow the operation. |\n| **404** | **Does Not Exist** | The requested entity does not exist. |\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Settings Properties\nDESCRIPTION: Examples of retrieving specific properties from the settings object, such as store name, logo, and account creation settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/global-objects-and-properties.mdx#2025-04-16_snippet_8\n\nLANGUAGE: handlebars\nCODE:\n```\n{{settings.store_name}}\n{{settings.account_creation_enabled}}\n{{settings.store_logo.image.data}}\n```\n\n----------------------------------------\n\nTITLE: Add Product Image - V2 Products API\nDESCRIPTION: Example cURL request to add an image to a product using the V2 Products API POST /v2/products/{product_id}/images endpoint with multipart/form-data.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST \\\n  https://api.bigcommerce.com/stores/{store_hash}/v2/products/{product_id}/images \\\n  -H 'Accept: application/json' \\\n  -H 'Cache-Control: no-cache' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Postman-Token: 841f5f9a-244b-4d2c-900f-938ac2067a4a' \\\n  -H 'X-Auth-Token: {X-Auth-Token}' \\\n  -H 'content-type: multipart/form-data; boundary=-WebKitFormBoundary7MA4YWxkTrZu0gW' \\\n  -F image_file=@/Users/{user_name}/Documents/product_images/image_file.png\n```\n\n----------------------------------------\n\nTITLE: Creating Custom UI Navigation for a BigCommerce Channel\nDESCRIPTION: HTTP request that configures the navigation menu items displayed in a channel's control panel. This example adds a custom 'Overview' section to the channel menu.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/guide/storefronts.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/channels/{{CHANNEL_ID}}/channel-menus\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"bigcommerce_protected_app_sections\": [],\n  \"custom_app_sections\": [\n    {\n      \"title\": \"Overview\",\n      \"query_path\": \"overview\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing User from Account with GraphQL\nDESCRIPTION: GraphQL mutation to remove a user from a BigCommerce account using their email address. Returns the account and user IDs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/graphql-account/users.mdx#2025-04-16_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  account {\n    removeUserFromAccount(\n      input: {\n        email: \"jane.doe@example.com\"\n      }\n    ) {\n      accountId,\n      userId\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Ngrok for Local Development\nDESCRIPTION: Commands to install and configure ngrok for creating a public URL to the local development server\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/quick-start.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbrew install ngrok/ngrok/ngrok\nngrok config add-authtoken <TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Response for Getting All Pickup Methods in BigCommerce\nDESCRIPTION: This JSON response shows all configured pickup methods for the store. In this example, it shows two pickup methods (in-store and curbside) assigned to the same location, demonstrating multiple pickup options at a single store location.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"location_id\": 1,\n      \"display_name\": \"In-store pickup\",\n      \"collection_instructions\": \"Visit the service desk on arrival with your order number\",\n      \"collection_time_description\": \"9 AM to 5 PM\"\n    },\n    {\n      \"id\": 2,\n      \"location_id\": 1,\n      \"display_name\": \"Curbside pickup\",\n      \"collection_instructions\": \"See our staff member outside the store.\",\n      \"collection_time_description\": \"Wait for a pickup confirmation and visit during business hours.\"\n    }\n  ],\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Brand Display Limits - YAML\nDESCRIPTION: Controls the display of brands either by a limit value or by setting `shop_by_brand` property using YAML front matter. Useful for managing and customizing brand representation in specific sections like footers or sidebars.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter-reference.mdx#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nshop_by_brand: true   # displays brand list\n  limit: 10           # limits brands to 10\n```\n\n----------------------------------------\n\nTITLE: Browsersync Output from Stencil Start Command\nDESCRIPTION: Sample console output from the stencil start command, showing the various URLs generated by Browsersync for local and external access to the theme preview and Browsersync UI.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/development-server.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# ...\n[Browsersync] Proxying: http://localhost:3001\n[Browsersync] Access URLs:\n --\n       Local: http://localhost:3000  # preview real-time changes on your local machine\n    External: http://10.4.10.71:3000 # preview real-time changes across multiple devices\n --\n          UI: http://localhost:3002\n UI External: http://10.4.10.71:3002\n --\n[Browsersync] Watching files...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Taxes in BigCommerce (HTTP)\nDESCRIPTION: Demonstrates how to get tax information for an order. The example includes the API request and the response structure with details about tax rates and amounts.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/index.mdx#2025-04-16_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v2/orders/{{order_id}}/taxes\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 13,\n    \"order_id\": 138,\n    \"order_address_id\": 39,\n    \"tax_rate_id\": 1,\n    \"tax_class_id\": 0,\n    \"name\": \"Tax\",\n    \"class\": \"Default Tax Class\",\n    \"rate\": \"8.0000\",\n    \"priority\": 0,\n    \"priority_amount\": \"17.6400\",\n    \"line_amount\": \"17.6400\"\n  }\n]\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 13,\n    \"order_id\": 138,\n    \"order_address_id\": 39,\n    \"tax_rate_id\": 1,\n    \"tax_class_id\": 0,\n    \"name\": \"API Tax Override\",\n    ...\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Account Creation Form in Handlebars\nDESCRIPTION: Object for customer account creation form including reCAPTCHA integration and address fields. Used in the create-account template.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_15\n\nLANGUAGE: handlebars\nCODE:\n```\n{{forms.create_account}}\n```\n\n----------------------------------------\n\nTITLE: Example Price List Assignment Payload Object in BigCommerce Webhooks\nDESCRIPTION: This JSON snippet demonstrates the structure of a payload object for price list assignment webhook events in BigCommerce. It includes store ID, producer, creation timestamp, event scope, price list, channel, and customer group data, and a hash for verification.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\": \"11111\",\n \"producer\": \"stores/abcde\",\n \"created_at\": 1641641646,\n \"scope\": \"store/priceList/assignment/updated\",\n \"data\": {\n    \"price_list_id\": 2,\n    \"channel_id\": 1,\n    \"customer_group_id\" : 3\n  },\n \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: Money Formatting Helper\nDESCRIPTION: Helper for formatting currency values with custom decimal and thousands separators.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_38\n\nLANGUAGE: handlebars\nCODE:\n```\n{{money value n s c}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{money 1000 2 ',' '.'}}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Videos with GraphQL\nDESCRIPTION: This GraphQL query fetches video titles and URLs associated with multiple products based on their entity IDs. It includes pagination information (startCursor, endCursor) and lists videos with their respective titles and URLs for easy access.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    products (entityIds: [112, 113]) {\n      pageInfo {\n          startCursor\n          endCursor\n      }\n      edges {\n            cursor\n            node {\n                entityId\n                name\n                videos {\n                  pageInfo {\n                      startCursor\n                      endCursor\n                      hasNextPage\n                      hasPreviousPage\n                  }\n                  edges {\n                      cursor\n                      node {\n                          title\n                          url\n                      }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Image Manager Srcsets with getImageManagerImageSrcset Helper\nDESCRIPTION: Helper that generates srcset attribute values for responsive images uploaded via Image Manager.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_51\n\nLANGUAGE: handlebars\nCODE:\n```\n{{getImageManagerImageSrcset path}}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from BigCommerce addBillingAddress() Operation\nDESCRIPTION: Example response returned after adding a billing address to a checkout. Shows the updated checkout object with billing information, cart contents, and calculated totals including taxes and shipping.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"d4e978c2-bdcf-41b0-a49b-fecf4f5223c1\",\n  \"cart\": {\n    \"id\": \"d4e978c2-bdcf-41b0-a49b-fecf4f5223c1\",\n    \"customerId\": 0,\n    \"email\": \"janedoe@email.com\",\n    \"currency\": {\n      \"name\": \"US Dollars\",\n      \"code\": \"USD\",\n      \"symbol\": \"$\",\n      \"decimalPlaces\": 2\n    },\n    ...\n    \"coupons\": [],\n    \"discounts\": [\n      ...\n    ],\n    \"lineItems\": {\n      \"physicalItems\": [\n        {\n          \"id\": \"57a877e0-d898-47d0-910d-88656e8dee0c\",\n          \"parentId\": null,\n          \"variantId\": 66,\n          \"productId\": 86,\n          \"sku\": \"ABS\",\n          \"name\": \"[Sample] Able Brewing System\",\n          \"url\": \"https://{store_url}}/able-brewing-system/\",\n          \"quantity\": 1,\n          ...\n          \"extendedSalePrice\": 225,\n          \"comparisonPrice\": 225,\n          \"extendedComparisonPrice\": 225,\n          \"isShippingRequired\": true,\n          \"giftWrapping\": null,\n          \"addedByPromotion\": false\n        },\n        {\n          \"id\": \"22c461a2-eff9-4b72-8d22-7c2792ce2c2d\",\n          \"parentId\": null,\n          \"variantId\": 67,\n          \"productId\": 88,\n          \"sku\": \"CC3C\",\n          \"name\": \"[Sample] Chemex Coffeemaker 3 Cup\",\n          \"url\": \"https://{store_url}}/chemex-coffeemaker-3-cup/\",\n          \"quantity\": 1,\n          ...\n          \"extendedSalePrice\": 49.5,\n          \"comparisonPrice\": 49.5,\n          \"extendedComparisonPrice\": 49.5,\n          \"isShippingRequired\": true,\n          \"giftWrapping\": null,\n          \"addedByPromotion\": false\n        }\n      ],\n      ...\n    },\n    ...\n  },\n  \"billingAddress\": {\n    \"id\": \"5e6a8cad71318\",\n    \"firstName\": \"Jane\",\n    \"lastName\": \"Doe\",\n    \"email\": \"janedoe@email.com\",\n    \"company\": \"BigCommerce\",\n    \"address1\": \"123 Main Street\",\n    \"address2\": \"Apt 1\",\n    \"city\": \"Austin\",\n    \"stateOrProvince\": \"Texas\",\n    \"stateOrProvinceCode\": \"TX\",\n    \"country\": \"\",\n    \"countryCode\": \"\",\n    \"postalCode\": \"78751\",\n    \"phone\": \"\",\n    \"customFields\": []\n  },\n  \"consignments\": [],\n  \"orderId\": null,\n  \"shippingCostTotal\": 0,\n  \"shippingCostBeforeDiscount\": 0,\n  \"handlingCostTotal\": 0,\n  \"taxTotal\": 27.45,\n  \"coupons\": [],\n  \"taxes\": [\n    {\n      \"name\": \"Tax\",\n      \"amount\": 27.45\n    }\n  ],\n  \"subtotal\": 274.5,\n  \"grandTotal\": 301.95,\n  ...\n  \"customerMessage\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom HTML Template for BigCommerce Stencil Theme\nDESCRIPTION: This HTML snippet shows the structure of a custom product page template. It includes the necessary elements to inject the template, load webpack, and initialize stencilBootstrap.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/javascript/extend.mdx#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n{{~inject 'template' template}}\n<h2>Hello World!</h2>\n<body>\nSome custom content!\n<body>\n<script>window.__webpack_public_path__ = \"{{cdn 'assets/dist/'}}\";</script>\n<script src=\"{{cdn 'assets/dist/theme-bundle.main.js'}}\"></script>\n<script>window.stencilBootstrap(\"{{page_type}}\", {{jsContext}}).load();</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Defaults in config.json - JSON\nDESCRIPTION: This code snippet outlines the global settings defined in the `config.json` file, which specify default values for product display mode and the number of new products on the homepage.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/global-styles.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"settings\": {\n    \"homepage_new_products_count\": 5,\n    \"product_list_display_mode\": \"grid\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Removing Product Modifier Options\nDESCRIPTION: The response structure returned after removing product modifier options for a locale. It returns the product ID and information about all remaining modifiers including their IDs and display names.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"product\": {\n      \"removeProductModifiersOverrides\": {\n        \"product\": {\n          \"id\": \"bc/store/product/111\",\n          \"modifiers\": {\n            \"edges\": [\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/118\",\n                  \"displayName\": \"Include Insurance?\"\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/119\",\n                  \"displayName\": \"Custom Message\"\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/121\",\n                  \"displayName\": \"Holiday Theme\"\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/122\",\n                  \"displayName\": \"Hood Color\"\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/123\",\n                  \"displayName\": \"Pattern\"\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/124\",\n                  \"displayName\": \"Fit Type\"\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/125\",\n                  \"displayName\": \"Optional details\"\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/127\",\n                  \"displayName\": \"Number of Pockets\"\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/128\",\n                  \"displayName\": \"Anniversary Date\"\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/129\",\n                  \"displayName\": \"Custom-printed Image\"\n                }\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Buy-Two-Get-One-Free Brand Promotion\nDESCRIPTION: API request and response for creating a promotion where buying two items from brand ID 36 gives the cheapest item free. Uses automatic redemption with least expensive item strategy.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/brand.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy two items in brand and get the cheapest one free\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"apply_once\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"brands\": [\n              36\n            ]\n          },\n          \"minimum_quantity\": 2\n        }\n      },\n      \"action\": {\n        \"cart_items\": {\n          \"strategy\": \"LEAST_EXPENSIVE\",\n          \"include_items_considered_by_condition\": true,\n          \"discount\": {\n            \"percentage_amount\": \"100\"\n          },\n          \"items\": {\n            \"brands\": [\n              36\n            ]\n          },\n          \"quantity\": 1\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Context in PageManager JavaScript Class\nDESCRIPTION: Example showing how to access page context data within a JavaScript class that extends PageManager. The context property provides access to data like secureBaseUrl and cartId.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/theme-objects.mdx#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// assets/js/theme/global.js\n\nexport default class Global extends PageManager {\n    onReady() {\n        cartPreview(this.context.secureBaseUrl, this.context.cartId);\n        // ...\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Customer Attributes - YAML\nDESCRIPTION: Defines global customer attributes within a YAML front matter for use in a stencil template. Attributes include customer returns, wishlists, orders, and recently viewed products with options to limit entries. This is to control data rendering related to the customer.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter-reference.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncustomer:                         \n  returns: true                     # show product return requests for this customer\n  wishlists:     \n    limit: 10                       # limit the number of wishlists to 10\n  orders:\n    limit: 10                       # limit the number of orders displayed to 10\n  recently_viewed_products: true    # display recently viewed products\n```\n\n----------------------------------------\n\nTITLE: Amount Off Promotion API Response\nDESCRIPTION: Response from the BigCommerce API after creating a $50 off promotion. It includes the generated promotion ID, configuration details, and status information returned by the server.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/product.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 35,\n    \"name\": \"US $50 off a specific product\",\n    \"created_from\": \"api\",\n    \"customer\": {\n      \"group_ids\": [],\n      \"minimum_order_count\": 0,\n      \"excluded_group_ids\": [],\n      \"segments\": null\n    },\n    \"rules\": [\n      {\n        \"action\": {\n          \"cart_items\": {\n            \"discount\": {\n              \"fixed_amount\": \"50\"\n            },\n            \"strategy\": \"LEAST_EXPENSIVE\",\n            \"add_free_item\": true,\n            \"as_total\": false,\n            \"include_items_considered_by_condition\": true,\n            \"exclude_items_on_sale\": false,\n            \"items\": {\n              \"products\": [\n                130\n              ]\n            },\n            \"quantity\": 1\n          }\n        },\n        \"apply_once\": false,\n        \"stop\": false,\n        \"condition\": {\n          \"cart\": {\n            \"items\": {\n              \"products\": [\n                129\n              ]\n            },\n            \"minimum_quantity\": 1\n          }\n        }\n      }\n    ],\n    \"notifications\": [],\n    \"stop\": false,\n    \"currency_code\": \"USD\",\n    \"redemption_type\": \"AUTOMATIC\",\n    \"shipping_address\": null,\n    \"current_uses\": 0,\n    \"max_uses\": null,\n    \"start_date\": \"2022-07-21T18:21:18+00:00\",\n    \"end_date\": null,\n    \"status\": \"ENABLED\",\n    \"schedule\": null,\n    \"can_be_used_with_other_promotions\": true\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Shared Modifier Options for a Locale using GraphQL\nDESCRIPTION: This mutation sets shared modifier information for a specific locale within a storefront channel, overriding global store information. It allows setting the display name and values for existing modifiers in a localized format.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\nmutation ($input: SetSharedProductModifiersInformationInput!) {\n  sharedProductModifiers {\n    setSharedProductModifiersInformation (input: $input) {\n      sharedProductModifiers {\n        id\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"localeContext\": { \n      \"channelId\": \"bc/store/channel/2\",\n      \"locale\": \"fr\"\n    },\n    \"data\": {\n      \"modifiers\": [\n        {\n          \"modifierId\": \"bc/store/sharedProductModifier/2\",\n          \"data\": {\n            \"rectangleList\": {\n              \"displayName\": \"bouton\",\n              \"values\": [\n                {\n                  \"valueId\": \"bc/store/sharedProductModifierValue/107\",\n                  \"label\": \"grande\"\n                },\n                {\n                  \"valueId\": \"bc/store/sharedProductModifierValue/108\",\n                  \"label\": \"petite\"\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding User to Store by Email with GraphQL\nDESCRIPTION: GraphQL mutation to add a user to a store using their email address instead of ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/graphql-account/users.mdx#2025-04-16_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  user {\n    addUserToStore(\n      input: {\n        user: {\n          email: \"bc/account/user/{user_email}\"\n        },\n        storeId:\"bc/account/store/{store_id}\"\n      }\n    ) {\n      storeId\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Checkout Localization Warning\nDESCRIPTION: This snippet shows a Callout component in Markdown to warn users about checkout localization availability in BigCommerce.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/stores.mdx#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Callout type=\"warning\">\n #### Checkout localization\n Checkout localization is only available for [Optimized One-Page Checkout](/docs/storefront/cart-checkout/optimized-one-page-checkout).\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Access Token in BigCommerce\nDESCRIPTION: Example JSON response showing the structure of a created payment access token in BigCommerce.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/index.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": \"BigCommerceProvidedJwt.dotDelimited.threePartString\"\n  },\n  \"meta\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Favicon URL\nDESCRIPTION: Simple GraphQL query to fetch the storefront's favicon URL from site settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery Favicon {\n  site {\n    settings {\n      faviconUrl\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Early Hints with the cdn Handlebars Helper in BigCommerce Stencil\nDESCRIPTION: Example showing how to modify script tags in a Stencil theme to leverage Early Hints for improved page load performance. This demonstrates updating the cdn helper by adding resourceHint, rel, and as arguments to enable preloading of critical JavaScript assets.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/early-hints.mdx#2025-04-16_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n<script async src=\"{{cdn 'assets/dist/theme-bundle.head_async.js'}}\"></script>\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<script async src=\"{{cdn 'assets/dist/theme-bundle.head_async.js' resourceHint='preload' as='script'}}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Redirect URLs for BigCommerce Cart\nDESCRIPTION: HTTP request to generate redirect URLs for a cart using the BigCommerce REST Management API. This request uses the cart ID from the previous step to create links to the hosted cart and checkout pages.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/rest-management.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/carts/{{cartId}}/redirect_urls\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n{}\n```\n\n----------------------------------------\n\nTITLE: Implementing GlobalStyles Component in React\nDESCRIPTION: Example of how to import and use the GlobalStyles component from BigDesign in a React application, setting global styles and using a Button component.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/ui.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button, GlobalStyles } from '@bigcommerce/big-design';\n\n// ...\n\n<App>\n  <GlobalStyles />\n  <Button>Click me</Button>\n</App>\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase Environment Variables\nDESCRIPTION: Specifies the database type and Firebase configuration keys in the .env file.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nDB_TYPE=firebase\n```\n\nLANGUAGE: shell\nCODE:\n```\nFIRE_API_KEY={firebaseConfig.apiKey}\nFIRE_DOMAIN={firebaseConfig.authDomain}\nFIRE_PROJECT_ID={firebaseConfig.projectId}\n```\n\n----------------------------------------\n\nTITLE: Creating Pickup Methods for Locations\nDESCRIPTION: Demonstrates how to create pickup methods and assign them to specific locations, including display name and collection instructions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/pickup/methods\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"location_id\": 1,\n    \"display_name\": \"In-store pickup\",\n    \"collection_instructions\": \"Visit the service desk on arrival with your order number\",\n    \"collection_time_description\": \"9 AM to 5 PM\"\n  }\n]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"location_id\": 1,\n      \"display_name\": \"In-store pickup\",\n      \"collection_instructions\": \"Visit the service desk on arrival with your order number\",\n      \"collection_time_description\": \"9 AM to 5 PM\"\n    }\n  ],\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Callback URI\nDESCRIPTION: URI format for the Stripe webhook callback endpoint that handles Stripe Connect responses\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/subscriptions.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttps://{ngrok_url}/stripe/callback\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Depth of Six\nDESCRIPTION: This GraphQL query illustrates a query with a depth of 6.  The fragment `CategoryFields` increases the depth by one level where used.  Each level of nesting increases the depth, which, if exceeding the limit of 16, will result in an error.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/index.mdx#2025-04-16_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\nquery {                                 // depth 0\n  site {                                // depth 1\n    categoryTree {                      // depth 2\n      ...CategoryFields                 // depth 3\n      children {                        // depth 3  \n        ...CategoryFields               // depth 4\n        children {                      // depth 4\n          ...CategoryFields             // depth 5\n        }\n      }\n    }\n  }\n}\n\nfragment CategoryFields on CategoryTreeItem {\n  name\n}\n```\n\n----------------------------------------\n\nTITLE: Example Customer Data JSON Response\nDESCRIPTION: Sample JSON response from the Get All Customers endpoint, showing customer details including the customer_id needed for login.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/customer-login.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"accepts_product_review_abandoned_cart_emails\": true,\n    \"authentication\": {\n      \"force_password_reset\": false\n    },\n    \"company\": \"BigCommerce\",\n    \"customer_group_id\": 2,\n    \"date_created\": \"2020-02-06T17:46:33Z\",\n    \"date_modified\": \"2020-02-07T19:58:03Z\",\n    \"email\": \"customer@email.com\",\n    \"first_name\": \"Jane\",\n    \"id\": 1,    // customer_id\n    \"last_name\": \"Doe\",\n    \"notes\": \"\",\n    \"phone\": \"\",\n    \"registration_ip_address\": \"\",\n    \"tax_exempt_category\": \"D\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ErrorMessage Component\nDESCRIPTION: Component for displaying error messages using BigDesign Panel and Typography components.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { H3, Panel } from '@bigcommerce/big-design';\n\ninterface ErrorMessageProps {\n    error?: Error;\n}\n\nconst ErrorMessage = ({ error }: ErrorMessageProps) => (\n    <Panel>\n        <H3>Failed to load</H3>\n        {error && error.message}\n    </Panel>\n);\n\nexport default ErrorMessage;\n```\n\n----------------------------------------\n\nTITLE: Injecting Addrexx Address Verification into BigCommerce Checkout\nDESCRIPTION: JavaScript code to inject Addrexx Address Verification app into the checkout or order confirmation page via the BigCommerce control panel's Google Analytics box.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/checkout-confirmation.mdx#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- START  Addrexx -->\n<script type=\"text/javascript\">\n  wwPage = window.location.href;\n  if (wwPage.indexOf(\"billing_address\") >= 0 || wwPage.indexOf(\"create_account\") >= 0 || wwPage.indexOf(\"shipping_address\") >= 0 || wwPage.indexOf(\"checkout\") >= 0) {\n    function loadaddrexx() {\n      var _cc_url = \"xxredda.s3.amazonaws.com/bcmarket/loader.js\";\n      var _cc_s = document.createElement('script');\n      _cc_s.type = 'text/javascript';\n      _cc_s.src = ((\"http:\" === document.location.protocol) ? \"http:\" : \"https:\") + \"//\" + _cc_url;\n      document.getElementsByTagName(\"head\")[0].appendChild(_cc_s);\n    };\n    loadaddrexx();\n  }\n</script>\n<!-- END  Addrexx -->\n```\n\n----------------------------------------\n\nTITLE: Injecting Template Data for Client-side JavaScript\nDESCRIPTION: Example showing how to inject data from Handlebars templates into the JavaScript context using the inject helper. This allows template data to be used in client-side code.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/theme-objects.mdx#2025-04-16_snippet_4\n\nLANGUAGE: handlebars\nCODE:\n```\n<!-- templates/pages/category.html -->\n\n{{inject \"categoryId\" category.id}}\n```\n\nLANGUAGE: js\nCODE:\n```\n// onReady() in assets/js/theme/category.js\nconsole.log(this.context.categoryId);\n```\n\n----------------------------------------\n\nTITLE: Adding User to Store by ID with GraphQL\nDESCRIPTION: GraphQL mutation to add an existing user to a store using their user ID. User must already be part of the account.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/graphql-account/users.mdx#2025-04-16_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  user {\n    addUserToStore(\n      input: {\n        user: {\n          id: \"bc/account/user/{user_id}\"\n        },\n        storeId:\"bc/account/store/{store_id}\"\n      }\n    ) {\n      storeId\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Type in schema.json for BigCommerce Theme Styles\nDESCRIPTION: JSON configuration for color data type used to set color values (hex) on theme settings. Requires type, label, and id fields.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/styles-and-properties.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"type\": \"color\",\n \"label\": \"i18n.BannerBackground\",\n \"id\": \"color-primary\"\n},\n```\n\n----------------------------------------\n\nTITLE: Order Status Updated Webhook Payload\nDESCRIPTION: Example payload structure for store/order/statusUpdated webhook event that fires when an order's status changes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/order/statusUpdated\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"order\",\n    \"id\": 250,\n    \"status\": {\n      \"previous_status_id\": 0,\n      \"new_status_id\": 11\n    }\n  },\n  \"hash\": \"7ee67cd1cf2ca60bc1aa9e5fe957d2de373be4ca\",\n  \"created_at\": 1561479335,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Footer Scripts in BigCommerce Checkout Template\nDESCRIPTION: Handlebars statements to enable footer scripts in the checkout template (checkout.html). This should be added between existing statements at the bottom of the template.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/checkout-confirmation.mdx#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n    {{{ checkout.checkout_content }}}\n\n    {{{ footer.scripts }}}\n\n    {{/partial}}\n```\n\n----------------------------------------\n\nTITLE: Account-Level API OAuth Scopes Table\nDESCRIPTION: A markdown table defining the required OAuth scopes and permissions for Account-Level API access. Lists the scope names, permission levels, and descriptions for various API functionalities.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/graphql-account/draft/Account-level-API-accounts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Permission | Description |\n|:---|:---|:---|\n| Subscriptions | read-only | View or cancel subscriptions |\n| Checkouts | modify | View or cancel checkouts |\n| Charges | modify | Create or delete charges |\n| Account | read-only | View account information for Account level GraphQL |\n| Account Stores | read-only | View information for apps belonging to the account for the Account-level GraphQL |\n| Accounts Apps | read-only | View information for apps belonging to the account for Account-Level API |\n| Account User | modify | View/Write/Delete information for users belonging to the account for Account-Level GraphQL |\n```\n\n----------------------------------------\n\nTITLE: Cart Line Items Payload Structure\nDESCRIPTION: Example JSON payload structure for cart line item events. Contains both cart and line item identification.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\": \"11111\",\n \"producer\": \"stores/abcde\",\n \"created_at\": 1641641646,\n \"scope\": \"store/channel/1/cart/lineItems/created\",\n  \"data\": {\n    \"cart_id\": \"41696c19-486f-40a8-ae2a-389d5d24e0c9\",\n    \"cart_item_id\":  \"af133539-0d83-464d-870d-776e2672e8f4\"\n  },\n \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Creating a Location Metafield in BigCommerce\nDESCRIPTION: This snippet shows the JSON response structure when successfully creating a location metafield using the BigCommerce REST Management API. It includes details such as the metafield ID, key, value, namespace, permissions, and timestamps.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/inventory-locations.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n      \"id\": 4,\n      \"key\": \"location status\",\n      \"value\": \"upcoming\",\n      \"namespace\": \"headquarters\",\n      \"permission_set\": \"write_and_sf_access\",\n      \"resource_type\": \"location\",\n      \"resource_id\": 1,\n      \"description\": \"new location\",\n      \"date_created\": \"2023-03-16T15:14:47+00:00\",\n      \"date_modified\": \"2023-03-16T15:14:47+00:00\"\n},\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using setURLQueryParam Helper in Handlebars for URL Parameter Addition\nDESCRIPTION: The setURLQueryParam helper appends key-value pairs to a URL as query parameters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_88\n\nLANGUAGE: handlebars\nCODE:\n```\n{{setURLQueryParam url key value}}\n```\n\n----------------------------------------\n\nTITLE: Importing MySQL Packages in TypeScript\nDESCRIPTION: Imports necessary MySQL packages and TypeScript definitions for database operations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as mysql from 'mysql2';\nimport { promisify } from 'util';\nimport { SessionProps, StoreData } from '../../types';\n```\n\n----------------------------------------\n\nTITLE: Accessing Customer Returns Data in Handlebars\nDESCRIPTION: Object for managing customer returns, accessible in the returns template. Includes properties for return details like date, status, products and actions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_13\n\nLANGUAGE: handlebars\nCODE:\n```\n{{customer.returns}}\n```\n\n----------------------------------------\n\nTITLE: Updating Checkout Consignment from Pickup to Shipping\nDESCRIPTION: Shows how to convert a pickup consignment to a shipping consignment by updating with shipping address details. The response will include available shipping options when requested.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_24\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/checkouts/{{checkout_id}}/consignments/{{consignment_id}}?include=consignments.available_shipping_options\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"shipping_address\": {\n    \"first_name\": \"abc1\",\n    \"last_name\": \"abc1\",\n    \"company\": \"a\",\n    \"email\": \"abc1@bigcommerce.com\",\n    \"phone\": \"0410123456\",\n    \"address1\": \"2808 Skyway Cir\",\n    \"address2\": \"\",\n    \"city\": \"Austin\",\n    \"country_code\": \"US\",\n    \"state_or_province\": \"\",\n    \"state_or_province_code\": \"TX\",\n    \"postal_code\": \"78704\",\n    \"custom_fields\": []\n  },\n  \"line_items\": [\n    {\n      \"item_id\": \"67642f07-49d1-4501-8b7d-2e589aec34b8\",\n      \"quantity\": 1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Structure of signed_payload_jwt in BigCommerce Single-Click App Callbacks\nDESCRIPTION: Example showing the structure of the signed_payload_jwt used in BigCommerce single-click app callbacks. It consists of three base64URL-encoded strings concatenated with periods.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/callbacks.mdx#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nheader_b64.payload_claims_b64.signature_b64\n```\n\n----------------------------------------\n\nTITLE: Define Search Product Result Limits - YAML\nDESCRIPTION: Configures the limit on the number of product search results per page using YAML front matter. Essential for managing search result pagination in BigCommerce Stencil templates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter-reference.mdx#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nsearch: \n  product_results:\n    limit: 16   # limits product results to 16\n```\n\n----------------------------------------\n\nTITLE: Accessing Contact Us Form in Handlebars Templates\nDESCRIPTION: Handlebars expression for accessing the contact form object used in the Contact Us page.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_25\n\nLANGUAGE: handlebars\nCODE:\n```\n{{forms.contact}}\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Rule with V2 API in JSON\nDESCRIPTION: This snippet demonstrates how to create a complex rule for a product using the V2 API. It shows how to add a price adjuster based on a selected option.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"price_adjuster\": {\n    \"adjuster\": \"relative\",\n    \"adjuster_value\": 5\n  },\n  \"conditions\": [\n    {\n      \"product_option_id\": 117,\n      \"option_value_id\": 109\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Desktop Viewport Breakpoint in Optimized Checkout SCSS\nDESCRIPTION: CSS media query definition for setting the desktop viewport breakpoint in the optimized checkout. This code controls responsive behavior by defining the minimum width at which desktop styles are applied.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/optimized-one-page-checkout.mdx#2025-04-16_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n    // TODO:\n    // Configure media query to be 'desktop' breakpoint size\n    // --\n    @media (min-width: 801px) {\n        text-align: stencilString(\"optimizedCheckout-logo-position\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Deleting Pickup Methods via BigCommerce API\nDESCRIPTION: This snippet demonstrates how to delete multiple pickup methods using the BigCommerce API. It includes the DELETE request with query parameters to specify the pickup method IDs to be deleted.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_38\n\nLANGUAGE: http\nCODE:\n```\nDELETE https://api.bigcommerce.com/stores/{{store_hash}}/v3/pickup/methods?id:in=1,2\nX-Auth-Token: {{access_token}}\nAccept: application/json\n```\n\nLANGUAGE: http\nCODE:\n```\nNo Content\n```\n\n----------------------------------------\n\nTITLE: Customer Shipping Addresses in Handlebars\nDESCRIPTION: Object for managing customer shipping addresses in the address-list template. Contains comprehensive address and contact information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_16\n\nLANGUAGE: handlebars\nCODE:\n```\n{{customer.addresses}}\n```\n\n----------------------------------------\n\nTITLE: BigCommerce Cart Metafield Webhook Payload\nDESCRIPTION: Example payload for cart metafield events including creation, deletion and updates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/cart/metafield/created\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"metafield_id\": 20,\n    \"resource_id\": \"29520ea6-2d39-4b39-836e-06ea14bf9f69\"\n  },\n  \"hash\": \"352e4afc6dd3fc85ea26bfdf3f91852604d57528\",\n  \"created_at\": 1561482670,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Scripts\nDESCRIPTION: JSON configuration for npm scripts in package.json\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-setup.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next\",\n    \"build\": \"next build\",\n    \"start\": \"next start -p $PORT\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Channel Access Request\nDESCRIPTION: JSON request body for updating an existing customer's channel access permissions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/customers/channel-specific-customers.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 132,\n  \"channel_ids\": [1]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Category-Specific Attributes - YAML\nDESCRIPTION: Define category-specific attributes such as shop by price controls and product limits using YAML front matter. These settings are crucial for customizing category pages in the stencil template.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter-reference.mdx#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncategory:\t\n  shop_by_price: true   # displays shop by price controls\n  products:\n    limit:  10          # limits products per page for this category to 10\n```\n\n----------------------------------------\n\nTITLE: Decoding Current Customer JWT Payload in JSON\nDESCRIPTION: Example of a decoded JWT payload from the Current Customer API response. Contains customer identification information including ID, email, group ID, along with JWT standard claims and BigCommerce-specific metadata.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/current-customer.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customer\": {\n    \"id\": 4927,\n    \"email\": \"john.doe@gmail.com\",\n    \"group_id\": \"6\"\n  },\n  \"iss\": \"bc/apps\",\n  \"sub\": \"abc123\",\n  \"iat\": 1480831863,\n  \"exp\": 1480832763,\n  \"version\": 1,\n  \"aud\": \"6sv16tfx3j5gsopm42ss5dd67g2srvq\",\n  \"application_id\": \"6sv16tasdgr2b5hs5dd67g2srvq\",\n  \"store_hash\": \"abc123\",\n  \"operation\": \"current_customer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Adding Pickup Consignment to Checkout\nDESCRIPTION: Shows the response when a pickup consignment is successfully added to a checkout. The response includes the selected pickup option with the requested pickup method ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    ...\n    \"consignments\": [\n      {\n        \"id\": \"6218019d81754\",\n        \"shipping_cost_inc_tax\": 0,\n        \"shipping_cost_ex_tax\": 0,\n        \"handling_cost_inc_tax\": 0,\n        \"handling_cost_ex_tax\": 0,\n        \"coupon_discounts\": [],\n        \"discounts\": [],\n        \"line_item_ids\": [\n          \"67642f07-49d1-4501-8b7d-2e589aec34b8\"\n        ],\n        \"selected_pickup_option\": {\n          \"pickup_method_id\": 2\n        }\n        ...\n      }\n    ]\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting a Shipping Option in BigCommerce Checkout API\nDESCRIPTION: This snippet demonstrates how to select a shipping option for a consignment. It includes the request to update the consignment with a chosen shipping option ID and the response showing the updated consignment with the selected shipping option.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/checkout.mdx#2025-04-16_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/checkouts/{{checkout_id}}/consignments/{{consignment_id}}\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"shipping_option_id\" : \"4dcbf24f457dd67d5f89bcf374e0bc9b\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    ...\n    \"consignments\": [\n      {\n        \"id\": \"6218019d81754\",\n        \"shipping_cost_inc_tax\": 0,\n        \"shipping_cost_ex_tax\": 0,\n        \"handling_cost_inc_tax\": 0,\n        \"handling_cost_ex_tax\": 0,\n        \"coupon_discounts\": [],\n        \"discounts\": [],\n        \"line_item_ids\": [\n          \"67642f07-49d1-4501-8b7d-2e589aec34b8\"\n        ],\n        \"selected_shipping_option\": {\n          \"id\": \"4dcbf24f457dd67d5f89bcf374e0bc9b\",\n          \"type\": \"freeshipping\",\n          \"description\": \"Free Shipping\",\n          \"image_url\": \"\",\n          \"cost\": 0,\n          \"transit_time\": \"\",\n          \"additional_description\": \"\"\n        },\n        \"shipping_address\": {\n          \"first_name\": \"Jane\",\n          \"last_name\": \"Doe\",\n          \"email\": \"jane.doe@bigcommerce.com\",\n          \"company\": \"Acme Inc\",\n          \"address1\": \"2808 Skyway Cir\",\n          \"address2\": \"\",\n          \"city\": \"Austin\",\n          \"state_or_province\": \"Texas\",\n          \"state_or_province_code\": \"TX\",\n          \"country\": \"United States\",\n          \"country_code\": \"US\",\n          \"postal_code\": \"78704\",\n          \"phone\": \"0410123456\",\n          \"custom_fields\": []\n        }\n      }\n    ]\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Locations in BigCommerce API\nDESCRIPTION: This HTTP request deletes specified locations using the Delete locations endpoint. Multiple location IDs can be provided in the query parameter.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/retirement.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nDELETE https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/locations?location_id:in=1,2\nX-Auth-Token: {{access_token}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Missing schemaTranslations.json File Error\nDESCRIPTION: This error occurs when the schemaTranslations.json file is missing from the theme, which is required for proper theme functionality and localization.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/unexpected-behavior.mdx#2025-04-16_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nError: Missed schemaTranslations.json file\n```\n\n----------------------------------------\n\nTITLE: Authentication Header Structure for GraphQL Admin API\nDESCRIPTION: Required authentication header structure for making API requests, using X-Auth-Token with an access token for authorization.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/msf-international-enhancements.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nX-Auth-Token: access_token\n```\n\n----------------------------------------\n\nTITLE: Stock Changed Webhook Payload Example\nDESCRIPTION: Example payload object structure for a stock changed webhook event. Shows the format of data received when product inventory levels change at a specific location.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/inventory-location.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"producer\": \"stores/{store_hash}\",\n  \"hash\": \"996ea203c939d05ca667a515ef2f029976d6df80\",\n  \"created_at\": 1682624640,\n  \"store_id\": \"1234567890\",\n  \"scope\": \"store/channel/*/inventory/product/stock_changed\",\n  \"data\": {\n    \"variant_id\": 127,\n    \"product_id\": 113,\n    \"location_id\": 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Compiled Stylesheet in Handlebars Layout\nDESCRIPTION: Shows how to include the compiled CSS file in the base HTML layout using Handlebars syntax. This ensures that the custom styles are loaded with the theme.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/style/sass.mdx#2025-04-16_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n<head>\n<!-- ... -->\n{{stylesheet '/assets/css/theme.scss'}}\n<!-- ... -->\n</head>\n```\n\n----------------------------------------\n\nTITLE: Limit Brand Product Display - YAML\nDESCRIPTION: Defines the limit for displaying products associated with a brand using YAML front matter. The configuration targets brand-specific pages within the stencil template system.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter-reference.mdx#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nbrand:\n  products:\n    limit: 50   # limits products displayed for this brand to 50\n```\n\n----------------------------------------\n\nTITLE: Creating New Returns Form in Handlebars\nDESCRIPTION: Form object for handling new return requests in the add-return template. Contains properties for order details, return reasons, and product information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_14\n\nLANGUAGE: handlebars\nCODE:\n```\n{{forms.return}}\n```\n\n----------------------------------------\n\nTITLE: Making Relative Inventory Adjustments by Variant\nDESCRIPTION: Example of making relative adjustments to variant inventory quantities. The request adjusts inventory for multiple variants at a specific location.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/adjustments/relative\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"items\": [\n    {\n      \"location_id\": 2,\n      \"variant_id\": 78,\n      \"quantity\": -2\n    },\n    {\n      \"location_id\": 2,\n      \"variant_id\": 79,\n      \"quantity\": 2\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transaction_id\": \"d0e1c1ca-8f35-403c-8d9f-d9a1b3302efbv\"\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Object Properties Schema\nDESCRIPTION: Details the properties of a layout object including UUID, configuration, name, dropzones and type fields.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/page-widgets/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Type | Description |\n|:---------|:-----|:------------|\n| `layout_template_uuid` | UUID string | Set by BigCommerce. Read-only. |\n| `configuration` | object | A JSON object that describes the Page Builder options menu that corresponds with the layout. |\n| `name` | string | A human-readable label for the layout; displays in Page Builder. |\n| `dropzones` | array | Consists of [dropzone](#dropzones) objects. |\n| `type` | string, enum | `layout` |\n```\n\n----------------------------------------\n\nTITLE: Creating Custom CSS Stylesheet in BigCommerce Theme\nDESCRIPTION: Demonstrates how to reference a custom CSS file in a BigCommerce theme using Handlebars syntax. This approach allows developers to add custom styles without modifying the original theme files.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/updates-and-version-control.mdx#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{{stylesheet '/assets/css/my_custom_theme.css'}}}\n```\n\n----------------------------------------\n\nTITLE: Injecting Conversions on Demand into BigCommerce Checkout\nDESCRIPTION: JavaScript code to inject Conversions on Demand app into the checkout or order confirmation page using BigCommerce's Script Manager or Scripts API.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/checkout-confirmation.mdx#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script type='text/javascript'>// <![CDATA[\n    var cod_page_guid = 'CHECKOUT';\n    var COD_CONFIG = {'platform':'bigcommerce', 'stoken':'as2_bcmarket_org'};\n        (function(){\n            var divCOD = document.createElement('div');\n            divCOD.id = 'codScripts';\n            var bodytag = document.getElementsByTagName('body')[0];\n            bodytag.appendChild(divCOD);\n            var cod = document.createElement('script');\n            cod.type = 'text/javascript';\n            cod.src = 'https://www.conversionsondemand.com/codadmin2/framework/cod-scripts-loader.js';\n            var s = document.getElementById('codScripts');\n            s.parentNode.insertBefore(cod, s);\n        })(COD_CONFIG);\n// ]]></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Slider Widget in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure a widget using the slider template. It defines an array of slides with image URLs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slides\": [\n    {\"image\":\"http://imageurl.com/nh35jn/test.png\"},\n    {\"image\":\"http://imageurl.com/fdhdfh/test2.png\"}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Internal Server Error JSON Response\nDESCRIPTION: This JSON snippet illustrates a typical 500 Internal Server Error response. Such errors often indicate template syntax issues in Stencil themes, like unmatched or missing punctuation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/unexpected-behavior.mdx#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"statusCode\": 500,\n  \"error\": \"Internal Server Error\",\n  \"message\": \"An internal server error occurred\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Widget in BigCommerce JSON\nDESCRIPTION: This JSON configuration sets up an HTML widget, specifying the widget name, HTML content, and template UUID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/examples.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Simple List Test\",\n  \"widget_configuration\": {\n    \"html\": \"#  This widget will accept any HTML \"\n  },\n  \"widget_template_uuid\": \"your-template-uuid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Components in footer.html - Handlebars\nDESCRIPTION: This Handlebars snippet shows how to remove a component from the footer of a BigCommerce theme. The footer categories section is removed to clean up the displayed information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/global-styles.mdx#2025-04-16_snippet_7\n\nLANGUAGE: handlebars\nCODE:\n```\n<article class=\"footer-info-col footer-info-col--small\" data-section-type=\"footer-categories\">\n  <h3 class=\"footer-info-heading\">{{lang 'footer.categories'}}</h3>\n  <ul class=\"footer-info-list\">\n      {{#each categories}}\n      <li>\n          <a href=\"{{url}}\">{{name}}</a>\n      </li>\n      {{/each}}\n  </ul>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Response for Customer Access Token Creation via JWT\nDESCRIPTION: Example response when successfully creating a customer access token using JWT login mutation. It includes customer details and the generated token with its expiration.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/graphql-storefront.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"loginWithCustomerLoginJwt\": {\n            \"customer\": {\n                \"entityId\": 22,\n                \"email\": \"user@email.com\"\n            },\n            \"customerAccessToken\": {\n                \"value\": \"ee973d6566a7c691af4602f344d866ecaa45bdcbdf2075d29d5e70fd0716b7c5_1721657159\",\n                \"expiresAt\": \"2024-07-22T14:05:59Z\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Moment.js Integration Helper\nDESCRIPTION: Examples of using the moment helper for date formatting and calculations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_37\n\nLANGUAGE: handlebars\nCODE:\n```\n{{moment date format}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{moment \"5 hours ago\" \"MM/DD/YYYY HH:mm\"}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{moment date format datejs=false}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{moment \"January 1, 2022\" format=\"YYYY-MM-DD\"}}\n```\n\n----------------------------------------\n\nTITLE: Creating Discount for Non-Segment Customers\nDESCRIPTION: Example of creating a 10% discount for customers who do not belong to segment 1 or any segment. Uses the 'not' operator to exclude specific segment IDs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/customer.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"10% off for customers who do not belong to segment 1\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"customer\": {\n    \"segments\": {\n      \"not\": {\n        \"id\": [\n          \"61fd72bc-7400-4a7b-ac64-96c0d315c464\"\n        ]\n      }\n    }\n  },\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_value\": {\n          \"discount\": {\n            \"percentage_amount\": \"10\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Components in footer.html - Handlebars\nDESCRIPTION: This Handlebars snippet demonstrates adding a new component template to the footer of the theme. It references the newly created categories template, enabling dynamic category display in the footer.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/global-styles.mdx#2025-04-16_snippet_8\n\nLANGUAGE: handlebars\nCODE:\n```\n<footer class=\"footer\" role=\"contentinfo\">\n  <div class=\"container\">\n      <section class=\"footer-info\">\n          <!-- [...] -->\n          {{> components/footer/categories}}\n          <!-- [...] -->\n      </section>\n  </div>\n</footer>\n```\n\n----------------------------------------\n\nTITLE: IDs Filter for Specific Subscriptions - JSON\nDESCRIPTION: This JSON object provides an example of using the IDs filter to retrieve specific subscriptions, allowing multiple subscription IDs to be specified in the filters input.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"filters\": {\n       \"ids\": [\"bc/account/subscription/d7762d54-1aab-4243-938b-294b846222b5\", \"bc/account/subscription/f34807ed-493a-4d17-90f1-11b2c3283cfd\"]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Custom Fonts in HTML Head for BigCommerce Themes\nDESCRIPTION: Handlebars code to include a custom font file in the head section of a BigCommerce theme template.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/style/fonts-and-icons.mdx#2025-04-16_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n<style type=\"text/css\" media=\"screen, print\">\n    @font-face {\n        font-family: \"MyFont\";\n        src: url(\"{{cdn 'webdav:MyFontFile.ttf'}}\");\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Documents Directory\nDESCRIPTION: Command to change directory to the user's Documents folder\nSOURCE: https://github.com/bigcommerce/docs/blob/main/guides/create-a-site-preview.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/Documents\n```\n\n----------------------------------------\n\nTITLE: Get Product Response - V2 Products API\nDESCRIPTION: Example response from the V2 Products API GET /v2/products/{product_id} endpoint showing product details in the V2 format.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 77,\n    \"keyword_filter\": null,\n    \"name\": \"Fog Linen Chambray Towel - Beige Stripe\",\n    \"type\": \"physical\",\n    \"sku\": \"SLCTBS\",\n    \"description\": \"<p>The perfect beach towel: thin, lightweight and highly absorbent...</p>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Storewide Styles in BigCommerce Checkout\nDESCRIPTION: Handlebars statement to include themewide styles in the checkout or order confirmation page. This should be added before the existing checkout head statement.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/checkout-confirmation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{{stylesheet '/assets/css/theme.css'}}}\n```\n\n----------------------------------------\n\nTITLE: Installing Packages for Subscription Foundation\nDESCRIPTION: Command to install the necessary NPM packages for the Subscription Foundation app from the root directory of the cloned repository.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/subscriptions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting Development Environment\nDESCRIPTION: Command to start the application in development mode\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/quick-start.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Brand Page in JSON\nDESCRIPTION: JSON configuration for limiting the number of products displayed on a brand page to 5.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"brand\": {\n    \"products\": {\n      \"limit\": 5\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Categories Payload Structure\nDESCRIPTION: Example JSON payload structure for category events. Includes category and tree identification.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\": \"11111\",\n \"producer\": \"stores/abcde\",\n \"created_at\": 1641641646,\n \"scope\": \"store/channel/1/category/created\",\n \"data\": {\n    \"category_id\": 35,\n    \"tree_id\": 1\n  },\n \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modifier Webhook Payload Structure\nDESCRIPTION: Example payload structure for store/modifier/updated webhook event that fires when modifier attributes are edited for local or shared modifiers in a channel and locale context.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/modifier/updated\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"shared_modifier\",\n    \"id\": 205,\n    \"affected_product_ids\": [1, 2],\n    \"context\": {\n      \"channel_id\": 2,\n      \"locale\": \"fr\"\n    } \n  },\n  \"hash\": \"a833a57fadd56a32dc752fb6ca0841dc9602a495\",\n  \"created_at\": 1561479233,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropzone HTML Structure in Stencil\nDESCRIPTION: HTML structure for defining a dropzone that specifies where content should be inserted on a page. Content within a gr-dropzone div will be moved to the element with the matching id specified in the data-gr-zone attribute.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/dynamic-content-rendering.mdx#2025-04-16_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n<div class=\"gr-dropzone\" data-gr-zone=\"gr-dropzone-top\">\n    <p>This content will be placed in a dropzone at the top of the page, because that dropzone has the id matching our data-gr-zone attribute.</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Product or Category-Based Discount in BigCommerce\nDESCRIPTION: This JSON request creates a promotion rule where customers buying a specific product or from a specific category get $10 off items from another category. The rule applies automatically but only once per order.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/category.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy product X or items from category Y and get $10 off items from category Z\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"apply_once\": true,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"or\": [\n              {\n                \"categories\": [\n                  1\n                ]\n              },\n              {\n                \"products\": [\n                  1\n                ]\n              }\n            ]\n          },\n          \"minimum_quantity\": 1\n        }\n      },\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"fixed_amount\": 10\n          },\n          \"items\": {\n            \"categories\": [\n              31\n            ]\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Checkout Consignment with Shipping Option - HTTP Request\nDESCRIPTION: HTTP PUT request to update a checkout consignment with a selected shipping option ID. This endpoint requires authentication via X-Auth-Token and updates the shipping method for the specified consignment.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/rest-management.mdx#2025-04-16_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/checkouts/{{checkoutId}}/consignments/{{consignmentId}}\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n{\n  \"shipping_option_id\": \"6ded13392879983ee32a3563f5fa6a7b\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Product Gift Wrapping Options Query in BigCommerce\nDESCRIPTION: The JSON response for the gift wrapping options query, showing two gift wrapping options: Christmas Wrapping and Valentine's Day Wrapping with their respective entity IDs, comment settings, and preview image URLs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"product\": {\n        \"giftWrappingOptions\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"entityId\": 1,\n                \"name\": \"Christmas Wrapping\",\n                \"allowComments\": false,\n                \"previewImageUrl\": \"https://cdn11.bigcommerce.com/s-{store_hash}/product_images/wrap_images/christmas_1662668596__75551.jpg\"\n              }\n            },\n            {\n              \"node\": {\n                \"entityId\": 2,\n                \"name\": \"Valentine's Day Wrapping\",\n                \"allowComments\": true,\n                \"previewImageUrl\": null\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies\nDESCRIPTION: Command to install required npm packages for the BigCommerce sample app\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/quick-start.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Percentage Off Promotion API Response\nDESCRIPTION: Response from the BigCommerce API after creating a percentage off promotion. It includes the generated promotion ID, configuration details, and the default USD currency setting.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/product.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 37,\n    \"name\": \"US 15% off a specific product\",\n    \"created_from\": \"api\",\n    \"customer\": {\n      \"group_ids\": [],\n      \"minimum_order_count\": 0,\n      \"excluded_group_ids\": [],\n      \"segments\": null\n    },\n    \"rules\": [\n      {\n        \"action\": {\n          \"cart_items\": {\n            \"discount\": {\n              \"percentage_amount\": \"75\"\n            },\n            \"strategy\": \"LEAST_EXPENSIVE\",\n            \"add_free_item\": true,\n            \"as_total\": false,\n            \"include_items_considered_by_condition\": true,\n            \"exclude_items_on_sale\": false,\n            \"items\": {\n              \"products\": [\n                130\n              ]\n            },\n            \"quantity\": 1\n          }\n        },\n        \"apply_once\": false,\n        \"stop\": false,\n        \"condition\": {\n          \"cart\": {\n            \"items\": {\n              \"products\": [\n                129\n              ]\n            },\n            \"minimum_quantity\": 1\n          }\n        }\n      }\n    ],\n    \"notifications\": [],\n    \"stop\": false,\n    \"currency_code\": \"USD\",\n    \"redemption_type\": \"AUTOMATIC\",\n    \"shipping_address\": null,\n    \"current_uses\": 0,\n    \"max_uses\": null,\n    \"start_date\": \"2022-07-21T19:05:02+00:00\",\n    \"end_date\": null,\n    \"status\": \"ENABLED\",\n    \"schedule\": null,\n    \"can_be_used_with_other_promotions\": true\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Password Mismatch Error in BigCommerce for WordPress\nDESCRIPTION: Error log showing a webhook password mismatch issue. This can be resolved by resetting webhooks in the BigCommerce control panel through the Product Sync settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/platform-integration/unexpected-behavior.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nBigCommerce-webhooks.ERROR: Incoming webhook password does not match\n```\n\n----------------------------------------\n\nTITLE: CDN Asset Reference in BigCommerce Stencil Themes\nDESCRIPTION: Example showing how to reference assets that are stored in a CDN using the {{cdn}} Handlebars helper. This approach is used when organizing themes for CDN delivery to manage large static assets.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/theme-size.mdx#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"{{cdn \"webdav:img/image.jpg\"}}\">\n```\n\n----------------------------------------\n\nTITLE: HTTPS Webhook Callback Payload Example in BigCommerce\nDESCRIPTION: This snippet shows an example of the payload object sent by BigCommerce when a store/order/statusUpdated webhook is triggered.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/https-webhook-overview.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\":\"11111\",\n \"producer\":\"stores/abcde\",\n \"scope\":\"store/order/statusUpdated\",\n \"data\":{\n    \"type\":\"order\",\n    \"id\":173331\n  },\n \"hash\":\"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n }\n```\n\n----------------------------------------\n\nTITLE: Content Block Definition with block Helper in Handlebars\nDESCRIPTION: Shows how to use the block helper to define a block of content that can be overwritten using the partial helper. It takes a string parameter to name the block.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_96\n\nLANGUAGE: handlebars\nCODE:\n```\n{{block string}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<div class=\"container\">\n    {{#block \"page\"}} {{/block}}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Publishing Widget to Store\nDESCRIPTION: Command to publish a widget to your BigCommerce store.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/widget-builder.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwidget-builder publish <[path/to/]widget-name>\n```\n\n----------------------------------------\n\nTITLE: Parsing Inventory Location Metafield Payload in JSON\nDESCRIPTION: This snippet illustrates the payload structure for inventory location metafield events. It includes the metafield ID, resource ID (location ID), and other metadata associated with the event.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/inventory/location/metafield/created\",\n  \"store_id\": \"1001197568\",\n  \"data\": {\n    \"metafield_id\": 10,\n    \"resource_id\": \"1\" // Location ID\n  },\n  \"hash\": \"e0c298b8097a6a2f39d17e593a9b360f5b2fef7d\",\n  \"created_at\": 1683303055,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: POST Request Body for Passwordless Login\nDESCRIPTION: JSON structure for initiating a passwordless login request. Requires customer email and redirect URL parameters. The redirect_url must be on the same domain as the store.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/passwordless-login.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"email\": \"jane_doe@example.com\",\n\"redirect_url\": \"/checkout\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating create-account.html for reCAPTCHA V2\nDESCRIPTION: This snippet involves updating the script references in the create-account HTML template to integrate Google reCAPTCHA V2 for enhanced security in account creation forms.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/content/recaptcha.mdx#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Insert reCAPTCHA v2 script -->\n<script src=\"https://www.google.com/recaptcha/api.js\" async defer></script>\n```\n\n----------------------------------------\n\nTITLE: Getting Channel Site Information via BigCommerce API\nDESCRIPTION: Makes a GET request to retrieve channel site information including the channel ID and URL\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/abandoned-carts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/channels/{channel_id}/site\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Customizing Default Text in Login Template (HTML)\nDESCRIPTION: Example of HTML code for customizing the default text in the login page template. It uses handlebars syntax to reference language strings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/login.mdx#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<li class=\"new-customer-fact\">{{lang 'login.new_customer.fact1' }}</li>\n<li class=\"new-customer-fact\">{{lang 'login.new_customer.fact2' }}</li>\n```\n\n----------------------------------------\n\nTITLE: Customizing Styles for Trade Professional Application Button in JavaScript\nDESCRIPTION: This code snippet shows how to customize the styling of the Trade Professional Application button for new Company accounts in B2B Edition. It uses the window.b3themeConfig.useStyles object to define custom CSS properties.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/b2b-edition/stencil.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.b3themeConfig.useStyles = {\n/* B3 will use the specified styles for the \"Trade Professional Application\" button that is appended to the secondary navigation menu */\n  'tpa.entryButton': {\n    fontFamily: 'Karla,Arial,Helvetica,sans-serif',\n    fontSize: '1rem',\n    listStyle: 'none',\n    boxSizing: 'border-box',\n    lineHeight: 'inherit',\n    transition: 'color .15s ease',\n    display: 'block',\n    color: '#333',\n    fontWeight: 700,\n    padding: '1rem .78571rem',\n    textDecoration: 'none',\n    textTransform: 'uppercase',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Initial MySQL Database Migration\nDESCRIPTION: Executes a script to set up initial tables for MySQL database.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nnpm run db:setup\n```\n\n----------------------------------------\n\nTITLE: Generating Content Image Srcsets with getContentImageSrcset Helper\nDESCRIPTION: Helper that generates srcset attribute values for responsive images uploaded to /dav/content/.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_48\n\nLANGUAGE: handlebars\nCODE:\n```\n{{getContentImageSrcset path}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{getContentImageSrcset \"asset.jpg\"}}\n<!-- => https://cdn.bcapp/3dsf74g/images/stencil/80w/content/asset.jpg 80w, https://cdn.bcapp/3dsf74g/images/stencil/160w/content/asset.jpg 160w, https://cdn.bcapp/3dsf74g/images/stencil/320w/content/asset.jpg 320w, https://cdn.bcapp/3dsf74g/images/stencil/640w/content/asset.jpg 640w, https://cdn.bcapp/3dsf74g/images/stencil/960w/content/asset.jpg 960w, https://cdn.bcapp/3dsf74g/images/stencil/1280w/content/asset.jpg 1280w, https://cdn.bcapp/3dsf74g/images/stencil/1920w/content/asset.jpg 1920w, https://cdn.bcapp/3dsf74g/images/stencil/2560w/content/asset.jpg 2560w -->\n```\n\n----------------------------------------\n\nTITLE: Using json Helper in Handlebars for Object to JSON String Conversion\nDESCRIPTION: The json helper converts a JavaScript object into a JSON string representation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_82\n\nLANGUAGE: handlebars\nCODE:\n```\n{{json object}}\n```\n\n----------------------------------------\n\nTITLE: Example of stripQuerystring Helper in Handlebars\nDESCRIPTION: Example showing the stripQuerystring helper removing the '?tests=true' query string from a URL.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_91\n\nLANGUAGE: handlebars\nCODE:\n```\n{{stripQuerystring \"http://example.com?tests=true\"}}\n<!-- results in: http://example.com -->\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shipping Quotes in BigCommerce (HTTP)\nDESCRIPTION: Shows how to obtain shipping quotes for an order. The example includes both the request for getting quotes and the response structure containing shipping provider details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/index.mdx#2025-04-16_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v2/orders/{{order_id}}/shipping_addresses/{{shipping_address_id}}/shipping_quotes\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"16\",\n  \"uuid\": \"18aaa5eb-3c7a-4bf8-bfaa-d14d155606f1\",\n  \"timestamp\": \"Mon, 30 Jul 2018 15:32:35 +0000\",\n  \"shipping_provider_id\": \"bcproductbased\",\n  \"shipping_provider_quote\": [],\n  \"provider_code\": \"productfixedshipping\",\n  \"carrier_code\": \"\",\n  \"rate_code\": \"\",\n  \"rate_id\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Imports for Home Page Styling\nDESCRIPTION: Imports BigDesign and styled-components packages to style the home page of a Next.js application. Components include Error and Loading displays, leveraging BigDesign for consistent styling. Requires BigDesign and styled-components libraries, along with custom hooks for session and products information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Box, Flex, H1, H4, Panel } from '@bigcommerce/big-design';\nimport { useEffect } from 'react';\nimport styled from 'styled-components';\nimport ErrorMessage from '../components/error';\nimport Loading from '../components/loading';\nimport { useSession } from '../context/session';\nimport { useProducts } from '../lib/hooks';\n```\n\n----------------------------------------\n\nTITLE: Adding Cart Item Data Tag in Handlebars\nDESCRIPTION: This snippet from the product-view.html template shows how to add the 'data-cart-item-add' data tag to a form, which enables the emission of the 'cart-item-add' event.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/events.mdx#2025-04-16_snippet_2\n\nLANGUAGE: handlebars\nCODE:\n```\n<form class=\"form\" method=\"post\" action=\"{{product.cart_url}}\"\n    enctype=\"multipart/form-data\" data-cart-item-add>\n```\n\n----------------------------------------\n\nTITLE: Making Relative Inventory Adjustments - Product Level\nDESCRIPTION: POST request to make relative adjustments to product inventory quantities. Allows increasing or decreasing inventory quantities relative to current values.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/adjustments/relative\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"items\": [\n    {\n      \"location_id\": 2,\n      \"product_id\": 111,\n      \"quantity\": -2\n    },\n    {\n      \"location_id\": 2,\n      \"product_id\": 112,\n      \"quantity\": 2\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Category Contextual Filters\nDESCRIPTION: Example JSON response showing the structure of contextual filters data, including filter properties like display name, type, and visibility settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/contextual-filters.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"context\": {\n        \"channel_id\": 1,\n        \"category_id\": 21\n      },\n      \"data\": [\n        {\n          \"id\": \"U2l6ZQ==\",\n          \"display_name\": \"Size\",\n          \"type\": \"product\",\n          \"display_product_count\": false,\n          \"collapsed_by_default\": false,\n          \"items_to_show\": 5,\n          \"sort_by\": \"alpha\",\n          \"is_enabled\": false\n        },\n        {\n          \"id\": \"cHJpY2U=\",\n          \"display_name\": \"Price\",\n          \"type\": \"price\",\n          \"collapsed_by_default\": true,\n          \"is_enabled\": true\n        },\n        {\n          \"id\": \"Ym9vbA==\",\n          \"display_name\": \"Other\",\n          \"type\": \"other\",\n          \"is_enabled\": true,\n          \"display_product_count\": true,\n          \"collapsed_by_default\": true,\n          \"show_free_shipping_filter\": true,\n          \"show_is_featured_filter\": true,\n          \"show_in_stock_filter\": true\n        }\n      ]\n    }\n  ],\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Variables for Removing Shared Product Modifier Overrides in BigCommerce\nDESCRIPTION: These variables specify the input for the removeSharedProductModifiersOverrides mutation. It includes the locale context (channel ID and locale) and the modifier data to be removed.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"localeContext\": { \n      \"channelId\": \"bc/store/channel/2\",\n      \"locale\": \"fr\"\n    },\n    \"data\": {\n      \"modifiers\": [\n        {\n          \"modifierId\": \"bc/store/sharedProductModifier/1\",\n          \"data\": {\n            \"textField\": {\n              \"fields\": [\"SHARED_TEXT_FIELD_PRODUCT_MODIFIER_DEFAULT_VALUE_FIELD\"]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Email Template Directory Structure in Shell\nDESCRIPTION: Shows the directory structure for email template objects, including the data folder for JSON data and individual email template model files.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/emails/object-reference/draft/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n.\n├── data                                   # json data for generating and updating yaml schema\n├── _all.yml                               # Groups models together for docs\n├── account_details_changed_email.yml      # Individual email template models\n├── ...\n```\n\n----------------------------------------\n\nTITLE: Response for Product Custom Fields Query in BigCommerce\nDESCRIPTION: The JSON response for the custom fields query, showing two custom fields: an ISBN and a Serial number with their respective values and entity IDs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/products.mdx#2025-04-16_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"product\": {\n        \"customFields\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"entityId\": 4,\n                \"name\": \"ISBN\",\n                \"value\": \"9876543210\"\n              }\n            },\n            {\n              \"node\": {\n                \"entityId\": 5,\n                \"name\": \"Serial number\",\n                \"value\": \"1234567890\"\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying BigCommerce JS Localization Filter in WordPress\nDESCRIPTION: This snippet adds a filter to hook the custom update_add_to_cart_message function to the bigcommerce/js_localization filter, which will modify the internationalization array used by the plugin's frontend scripts.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/themes/index.mdx#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'bigcommerce/js_localization', 'update_add_to_cart_message' );\n```\n\n----------------------------------------\n\nTITLE: Paired Mode AMP URL Structure\nDESCRIPTION: URL pattern for previewing AMP pages in Paired mode using query parameter.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/platform-integration/enabling-amp.mdx#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nyourdomain.com/products/product-slug/amp\n```\n\n----------------------------------------\n\nTITLE: Handling Customer Address Addition Response in JSON\nDESCRIPTION: This JSON response shows a successful customer address addition operation, with an empty errors array indicating no errors occurred during the process.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/customers.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"customer\": {\n      \"addCustomerAddress\": {\n        \"errors\": []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Theme Configuration Details in config.json\nDESCRIPTION: This snippet shows how to modify the basic details of a BigCommerce Stencil theme, such as name, version, price, and documentation URL, within the `config.json` file. This allows developers to customize the theme's identity and provide relevant information to users. No dependencies are required.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/variations.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"name\": \"MyTheme\",\n\"version\": \"1.1.2\",\n\"meta\": {\n  \"price\": 10000,\n  \"documentation_url\": \"https://www.mywebsite.com/theme-docs/my-theme.html\",\n  // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom JavaScript Module for BigCommerce Stencil Theme\nDESCRIPTION: This snippet demonstrates how to create a custom JavaScript module that extends the PageManager class. It includes a basic onReady method that displays an alert.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/javascript/extend.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport PageManager from \"./page-manager\";\n\nexport default class Custom extends PageManager {\n    onReady(){\n        alert(\"Hello world!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response from Getting a Cart\nDESCRIPTION: Sample JSON response returned after successfully retrieving a cart. It includes detailed information about the cart and its line items.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"d4e978c2-bdcf-41b0-a49b-fecf4f5223c1\",\n    \"customerId\": 0,\n    \"email\": \"\",\n    \"currency\": {\n      \"name\": \"US Dollars\",\n      \"code\": \"USD\",\n      \"symbol\": \"$\",\n      \"decimalPlaces\": 2\n    },\n    \"isTaxIncluded\": false,\n    \"baseAmount\": 274.5,\n    \"discountAmount\": 0,\n    \"cartAmount\": 274.5,\n    \"coupons\": [],\n    \"discounts\": [\n      ...\n    ],\n    \"lineItems\": {\n      \"physicalItems\": [\n        {\n          \"id\": \"57a877e0-d898-47d0-910d-88656e8dee0c\",\n          \"parentId\": null,\n          \"variantId\": 66,\n          \"productId\": 86,\n          \"sku\": \"ABS\",\n          \"name\": \"[Sample] Able Brewing System\",\n          \"url\": \"https://{store_url}/able-brewing-system/\",\n          \"quantity\": 1,\n          ...\n          \"extendedSalePrice\": 225,\n          \"isShippingRequired\": true,\n          \"type\": \"physical\",\n          \"giftWrapping\": null,\n          \"options\": []\n        },\n        {\n          \"id\": \"22c461a2-eff9-4b72-8d22-7c2792ce2c2d\",\n          \"parentId\": null,\n          \"variantId\": 67,\n          \"productId\": 88,\n          \"sku\": \"CC3C\",\n          \"name\": \"[Sample] Chemex Coffeemaker 3 Cup\",\n          \"url\": \"https://{store_url}/chemex-coffeemaker-3-cup/\",\n          \"quantity\": 1,\n            ...\n          \"extendedSalePrice\": 49.5,\n          \"isShippingRequired\": true,\n          \"type\": \"physical\",\n          \"giftWrapping\": null,\n          \"options\": []\n        }\n      ],\n      ...\n    },\n    ...\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Bundle.js Loading Error Example\nDESCRIPTION: This error appears when there are issues loading the JavaScript bundle file during theme initialization. The error often indicates problems with the theme's JavaScript files.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/unexpected-behavior.mdx#2025-04-16_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nPotentially unhandled rejection [6] TypeError: Error loading \"js/bundle\"\nat file:/Users/<username>/Desktop/Fortune-1.4.6/assets/js/bundle.js\nError evaluating file:/Users/<username>/Desktop/Fortune-1.4.6/assets/js/bundle.js\nCannot read property 'createElement' of undefined...\n```\n\n----------------------------------------\n\nTITLE: Free Shipping Promotion Response - JSON\nDESCRIPTION: API response showing the created promotion details including the assigned promotion ID, currency settings, and usage statistics. Confirms the promotion configuration and provides additional system-generated fields.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/shipping.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 45,\n    \"name\": \"Order at least 2X of product and get free shipping\",\n    \"created_from\": \"api\",\n    \"customer\": {\n      \"group_ids\": [],\n      \"minimum_order_count\": 0,\n      \"excluded_group_ids\": [],\n      \"segments\": null\n    },\n    \"rules\": [\n      {\n        \"action\": {\n          \"shipping\": {\n            \"free_shipping\": true,\n            \"zone_ids\": \"*\"\n          }\n        },\n        \"apply_once\": true,\n        \"stop\": false,\n        \"condition\": {\n          \"cart\": {\n            \"items\": {\n              \"products\": [\n                129\n              ]\n            },\n            \"minimum_quantity\": 2\n          }\n        }\n      }\n    ],\n    \"notifications\": [\n      {\n        \"type\": \"UPSELL\",\n        \"content\": \"<div>&nbsp;</div>\",\n        \"locations\": [\n          \"CART_PAGE\"\n        ]\n      },\n      {\n        \"type\": \"ELIGIBLE\",\n        \"content\": \"<div>&nbsp;</div>\",\n        \"locations\": [\n          \"CART_PAGE\"\n        ]\n      },\n      {\n        \"type\": \"APPLIED\",\n        \"content\": \"<div>&nbsp;</div>\",\n        \"locations\": [\n          \"CART_PAGE\"\n        ]\n      }\n    ],\n    \"stop\": false,\n    \"currency_code\": \"USD\",\n    \"redemption_type\": \"AUTOMATIC\",\n    \"shipping_address\": null,\n    \"current_uses\": 0,\n    \"max_uses\": null,\n    \"start_date\": \"2019-02-06T05:00:00+00:00\",\n    \"end_date\": \"2019-02-09T04:59:59+00:00\",\n    \"status\": \"ENABLED\",\n    \"schedule\": null,\n    \"can_be_used_with_other_promotions\": true\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Gift Wrapping Options with submitItemGiftWrappingOption in JavaScript\nDESCRIPTION: This code shows the implementation of the submitItemGiftWrappingOption method, which sends a POST request to apply gift wrapping options to a specific cart item. It handles the submission of parameters and calls the provided callback with the results.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Submit giftwrapping options\n *\n * @param {String} itemId\n * @param {Function} callback\n */\nsubmitItemGiftWrappingOption(itemId, params, callback) {\n  this.remoteRequest(`/gift-wrapping/${itemId}`, 'POST', { params }, callback);\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Webhook Callback Payload Example in BigCommerce\nDESCRIPTION: This snippet demonstrates an example of the payload object sent by BigCommerce when a store/order/updated GraphQL webhook is triggered.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/https-webhook-overview.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"producer\": \"stores/abcde\",\n    \"hash\": \"0f1b5800def7b505369b08b4a3503a1db2c4b1a6\",\n    \"created_at\": 1688588419,\n    \"store_id\": \"1001197568\",\n    \"scope\": \"store/order/updated\",\n    \"data\": {\n        \"type\": \"order\",\n        \"id\": 272\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Stencil CLI for preview\nDESCRIPTION: This shell command snippet demonstrates how to start the Stencil CLI to preview the final product in a BigCommerce local development environment.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/react.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# move into theme dir\ncd ~/path/to/theme/dir\n\n# Preview store using Browsersync\nstencil start\n```\n\n----------------------------------------\n\nTITLE: Configuring a Button Widget in BigCommerce JSON\nDESCRIPTION: This JSON configuration sets up a button widget with specific styling, text, and behavior properties.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/examples.mdx#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Button\",\n  \"widget_configuration\": {\n    \"buttonText\": \"Button label\",\n    \"alignment\": {\n      \"horizontal\": \"center\"\n    },\n    \"buttonMargin\": {\n      \"top\": {\n        \"value\": \"0\",\n        \"type\": \"px\"\n      },\n      \"right\": {\n        \"value\": \"0\",\n        \"type\": \"px\"\n      },\n      \"bottom\": {\n        \"value\": \"0\",\n        \"type\": \"px\"\n      },\n      \"left\": {\n        \"value\": \"0\",\n        \"type\": \"px\"\n      }\n    },\n    \"buttonPadding\": {\n      \"top\": {\n        \"value\": \"8\",\n        \"type\": \"px\"\n      },\n      \"right\": {\n        \"value\": \"24\",\n        \"type\": \"px\"\n      },\n      \"bottom\": {\n        \"value\": \"8\",\n        \"type\": \"px\"\n      },\n      \"left\": {\n        \"value\": \"24\",\n        \"type\": \"px\"\n      }\n    },\n    \"fontFamily\": \"inherit\",\n    \"fontWeight\": \"400\",\n    \"textSize\": {\n      \"value\": 21,\n      \"type\": \"px\"\n    },\n    \"textColor\": \"#FFFFFF\",\n    \"textColorHover\": \"#FFFFFF\",\n    \"backgroundColor\": \"#444444\",\n    \"backgroundColorHover\": \"#666666\",\n    \"borderColor\": \"#444444\",\n    \"borderColorHover\": \"#666666\",\n    \"buttonBorder\": 1,\n    \"borderRadius\": 4\n  },\n  \"widget_template_uuid\": \"your-template-uuid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Variation Screenshots in config.json for BigCommerce Stencil Theme\nDESCRIPTION: This snippet demonstrates how to reference desktop and mobile screenshots for a theme variation in the config.json file. These screenshots are displayed in the Storefront > Theme Marketplace section of the BigCommerce control panel.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/theme-images.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// [...]\n  \"variations\": [\n    {\n      \"name\": \"Bright\",\n      \"id\": \"bright\",\n      \"meta\": {\n        \"desktop_screenshot\": \"desktop_bright.png\",\n        \"mobile_screenshot\": \"mobile_bright.jpg\",\n    // [...]\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Filter and Character Limit\nDESCRIPTION: This GraphQL query demonstrates the use of filters and character limits, which do not contribute to query complexity in the BigCommerce API. The query filters blog posts by tags and limits the character length of the plain text summary, showing that these features do not increase complexity.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/index.mdx#2025-04-16_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    content {\n      blog {\n        posts (filters: {tags:[\"Most Popular\"]}) { // Filter argument\n          edges {\n            node {\n              plainTextSummary (characterLimit: 100) // Character limit\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Widget Object Properties Schema\nDESCRIPTION: Defines the complete property set for a widget object including template UUID, configuration, API query params, name, description and type.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/page-widgets/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Type | Description |\n|:---------|:-----|:------------|\n| `widget_template_uuid` | UUID string | The unique identifier of the parent widget template; set by the store or channel where the widget template originated. |\n| `configuration` | object | A JSON object that describes the Page Builder options menu that corresponds with the widget. |\n| `storefront_api_query_params` | string | A comma-separated list of parameters used to query the GraphQL Storefront API. Used when the parent widget template is configured to request data directly from the GraphQL Storefront API; in this case, the parent widget template has the `storefront_api_query` property. |\n| `name` | string | A human-readable label for the widget. Retrievable using either the [Get a widget](/docs/rest-content/widgets/widget#get-a-widget) or the [Get all widgets](/docs/rest-content/widgets/widget#get-all-widgets) endpoint. |\n| `description` | string | A description of the widget. Retrievable using either the [Get a widget](/docs/rest-content/widgets/widget#get-a-widget) or the [Get all widgets](/docs/rest-content/widgets/widget#get-all-widgets) endpoint. |\n| `type` | string, enum | `widget` |\n```\n\n----------------------------------------\n\nTITLE: Configuring Disqus Universal Code for Stencil Themes\nDESCRIPTION: This code snippet shows the default Disqus configuration function that needs to be modified for use with Stencil themes. It sets the page URL and identifier for Disqus comments.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/disqus.mdx#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar disqus_config = function () {\n    this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable\n    this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Value from Object by Property Path - JavaScript\nDESCRIPTION: Utilizes property paths (e.g., 'a.b.c') to access a value or a nested value from the context.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction get(obj, path) { return path.split('.').reduce((o, p) => (o ? o[p] : undefined), obj); }\n```\n\n----------------------------------------\n\nTITLE: Schema for And Condition in BigCommerce Rule\nDESCRIPTION: This code snippet presents an approximate schema illustrating the structure of an \"AndCondition\" within a BigCommerce promotion rule.  It shows how multiple `CartCondition` elements can be nested under the `AndCondition` to create a combined requirement for the promotion. Each `CartCondition` typically includes an `ItemMatcher` and a `minimum_quantity` parameter to specify the item characteristics and quantity required.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/index.mdx#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Rule\": {\n    \"Condition\": {\n      \"AndCondition\": [{\n        \"CartCondition\": {\n          \"ItemMatcher\": {},\n          \"minimum_quantity\": \"number\"\n        },\n        \"CartCondition\": {\n          \"ItemMatcher\": {},\n          \"minimum_quantity\": \"number\"\n        }\n      }]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Product Import via WP-CLI\nDESCRIPTION: Command to manually trigger BigCommerce product import using WordPress CLI. This can be used when automatic cron sync is disabled.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/start/plugin-settings.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp bigcommerce import products\n```\n\n----------------------------------------\n\nTITLE: Exporting getBCAuth Function in TypeScript\nDESCRIPTION: This function is exported to handle the authorization process when installing or updating the app. It uses the bigcommerce.authorize method to retrieve the permanent access token.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-connect.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getBCAuth(query: QueryParams) {\n    return bigcommerce.authorize(query);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client\nDESCRIPTION: Command to generate a new Prisma client after changing database providers\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/subscriptions.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Rendering Featured Products with Conditional Template\nDESCRIPTION: Handlebars conditional statement that checks for the existence of featured products before rendering them. It uses a partial component to display the products in the specified column layout.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/global-objects-and-properties.mdx#2025-04-16_snippet_3\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if products.featured}}\n  {{> components/products/featured products=products.featured columns=theme_settings.homepage_featured_products_column_count}}\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Product Template GraphQL Configuration\nDESCRIPTION: Example of a front matter block configuration combining product settings with a GraphQL query to fetch product variants. The query requests variant SKUs and default images for a specific product.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter-reference.mdx#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nproduct:\n  videos:\n      limit: {{theme_settings.productpage_videos_count}}\n  reviews:\n      limit: {{theme_settings.productpage_reviews_count}}\n  related_products:\n      limit: {{theme_settings.productpage_related_products_count}}\n  similar_by_views:\n      limit: {{theme_settings.productpage_similar_by_views_count}}\ngql: \"query productById($productId: Int!) {\n  site {\n    product(entityId: $productId) {\n      variants(first: 25) {\n        edges {\n          node {\n            sku\n            defaultImage {\n              url(width: 1000)\n            }\n          }\n        }\n      }\n    }\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Importing Header component in index.tsx\nDESCRIPTION: Imports the Header component into the index.tsx file for use on the app's main page.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport Header from '../components/header';\n```\n\n----------------------------------------\n\nTITLE: HTML Divider Widget\nDESCRIPTION: This HTML code snippet represents a divider widget, consisting of a wrapper div and an hr element for creating a horizontal line. The associated CSS styles control the appearance of the divider, including its height, border, color, and width.  The widget is placed using data attributes indicating its ID and placement details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/site-content.mdx#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n\"<div data-widget-id=\\\"a49467eb-d5c0-47da-9dcc-4328efa8e6a4\\\" data-placement-id=\\\"18cc55cc-9364-40fb-802b-704e77c1cb25\\\" data-placement-status=\\\"ACTIVE\\\"><style>\\n  .sd-divider-wrapper-a49467eb-d5c0-47da-9dcc-4328efa8e6a4 {\\n    display: flex;\\n    height: 20px;\\n      align-items: center;\\n      justify-content: center;\\n      text-align: center;\\n  }\\n\\n  .sd-divider-a49467eb-d5c0-47da-9dcc-4328efa8e6a4 {\\n    height: 0;\\n    border-top: 1px;\\n    border-color: rgba(180, 186, 209, 1);\\n    border-style: solid;\\n    width: 100%;\\n    margin: 0;\\n  }\\n</style>\\n\\n<div class=\\\"sd-divider-wrapper-a49467eb-d5c0-47da-9dcc-4328efa8e6a4\\\">\\n  <hr class=\\\"sd-divider-a49467eb-d5c0-47da-9dcc-4328efa8e6a4\\\">\\n</div>\\n</div>\"\n```\n\n----------------------------------------\n\nTITLE: JSON-encoded List Widget Template for BigCommerce\nDESCRIPTION: This is a JSON-encoded version of the list widget template, which can be used when submitting the template through the BigCommerce API.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/examples.mdx#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ul>\\r\\n{{#each list_items}}\\r\\n <li style=\\\"color:{{color}};\\\">{{text}}<\\/li>\\r\\n{{\\/each}}\\r\\n<\\/ul>\n```\n\n----------------------------------------\n\nTITLE: Sample Variables for Subscriptions Query - JSON\nDESCRIPTION: This JSON object contains sample variables for filtering subscriptions in a GraphQL query, illustrating how to specify criteria such as product ID and status.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"filters\": {\n    \"productId\": \"bc/account/product/16267\",\n    \"productType\": \"APPLICATION\",\n    \"updatedAfter\": \"2024-05-01T00:00:00Z\",\n    \"status\": \"ACTIVE\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Font Size in Guest Account Email Template using Handlebars and HTML\nDESCRIPTION: This snippet demonstrates how to change the font size in the Guest Account email template. It shows two methods: using pixel values and using viewport width (vw) for responsive design.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/emails/examples.mdx#2025-04-16_snippet_2\n\nLANGUAGE: handlebars\nCODE:\n```\n<p style=\"font-size:16px;\">{{lang 'help'}}</p>\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<p style=\"font-size:2.0vw\">{{lang 'help'}}</p>\n```\n\n----------------------------------------\n\nTITLE: HTML Entity Encoding Helper\nDESCRIPTION: Helper for encoding HTML entities with various options for named references and encoding styles.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_40\n\nLANGUAGE: handlebars\nCODE:\n```\n{{encodeHtmlEntities string args}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{encodeHtmlEntities 'foo © bar ≠ baz 𝌆 qux'}}\n{{encodeHtmlEntities 'an ampersand: &'}}\n{{encodeHtmlEntities \"foo © bar ≠ baz 𝌆 qux\" useNamedReferences=\"true\"}}\n{{encodeHtmlEntities \"foo © bar ≠ baz 𝌆 qux\" decimal=\"true\"}}\n{{encodeHtmlEntities \"foo © bar ≠ baz 𝌆 qux\" encodeEverything=\"true\"}}\n{{encodeHtmlEntities \"foo © and & ampersand\" allowUnsafeSymbols=\"true\"}}\n```\n\n----------------------------------------\n\nTITLE: Accessing Wishlist Form in Handlebars Templates\nDESCRIPTION: Handlebars expression for accessing the wishlist form object used in the Add/Edit Wishlist page.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_23\n\nLANGUAGE: handlebars\nCODE:\n```\n{{forms.wishlist}}\n```\n\n----------------------------------------\n\nTITLE: Response for Updating Pickup Methods in BigCommerce\nDESCRIPTION: This JSON response shows the updated pickup method with the modified collection instructions. It returns the complete pickup method object with all fields, including those that weren't changed.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 2,\n      \"location_id\": 1,\n      \"display_name\": \"Curbside pickup\",\n      \"collection_instructions\": \"See our friendly staff member outside the store.\",\n      \"collection_time_description\": \"Wait for a pickup confirmation and visit during business hours.\"\n    }\n  ],\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Libraries in BigCommerce Cornerstone Theme\nDESCRIPTION: Demonstrates how to install and use additional JavaScript libraries in the Cornerstone theme using npm. This example shows installing jQuery and using it in the product.js file.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/javascript/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install jquery\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport $ from 'jquery';\n\n$('.myElement').click(() => {\n    alert(\"You clicked myElement\");\n});\n```\n\n----------------------------------------\n\nTITLE: Response for Creating a Storefront API Token\nDESCRIPTION: Example response when successfully creating a storefront API token. The response includes the generated token and additional metadata.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/graphql-storefront.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"...eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9...\",\n  \"meta\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Field Description Example - UUID Comparison\nDESCRIPTION: Example showing how to document UUID comparison logic in API fields\nSOURCE: https://github.com/bigcommerce/docs/blob/main/diataxis-templates/api-reference/api-reference.mdx#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nA UUID that is different from the active Theme Configuration UUID indicates that some changes have been saved in the control panel Theme Editor, but not yet published.\n```\n\n----------------------------------------\n\nTITLE: Updating writeReview.html for reCAPTCHA V2\nDESCRIPTION: This code snippet involves modifying the writeReview HTML template to implement Google reCAPTCHA V2, providing an additional security layer for product reviews submitted via the storefront.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/content/recaptcha.mdx#2025-04-16_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Insert reCAPTCHA v2 script -->\n<script src=\"https://www.google.com/recaptcha/api.js\" async defer></script>\n```\n\n----------------------------------------\n\nTITLE: JSON-encoded Styled Text Widget Template for BigCommerce\nDESCRIPTION: This is a JSON-encoded version of the styled text widget template, suitable for API submissions in BigCommerce.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/examples.mdx#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<style>#bc-simple-text-{{_.id}} {color: {{color}};background: {{background_color}};font-size: {{font_size}};font-style: {{font_style}};font-weight: {{font_weight}};font-family: {{font_family}};text-align: {{text_align}};margin-top: {{margin_top}};margin-bottom: {{margin_bottom}};margin-left: {{margin_left}};margin-right: {{margin_right}};padding-top: {{padding_top}};padding-bottom: {{padding_bottom}};padding-left: {{padding_left}};padding-right: {{padding_right}};}<\\/style><p id='bc-simple-text-{{_.id}}'>{{text}}<\\/p>\n```\n\n----------------------------------------\n\nTITLE: Price List Assignment Payload Structure in JSON\nDESCRIPTION: This payload structure is used for a price list assignment event, indicating updates to assignments for price lists. It includes the store ID, scope, timestamp, producer identifier, and details about the price list and its assignments.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\": \"11111\",\n \"producer\": \"stores/abcde\",\n \"created_at\": 1641641646,\n \"scope\": \"store/priceList/assignment/updated\",\n \"data\": {\n    \"price_list_id\": 2,\n    \"channel_id\": 1,\n    \"customer_group_id\" : 3\n  },\n \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cart Content Retrieval with Stencil Utils API in JavaScript\nDESCRIPTION: Shows how to use the config object when retrieving cart content. It sets up options for the template, parameters, and configuration for cart suggestions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ngetCartContent(cartItemHash, onComplete) {\n  const options = {\n    template: 'cart/preview',\n    params: {\n        suggest: cartItemHash,\n    },\n    config: {\n        cart: {\n            suggestions: {\n                limit: 4,\n            },\n        },\n    },\n  };\n  console.log(options);\n  return onComplete(options);\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Settings for Page Builder in JSON Format\nDESCRIPTION: This snippet outlines an array in JSON format representing the settings schema for the page builder, including names and configuration settings for various UI elements.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/directory-structure.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"i18n.Global\",\n    \"settings\": [\n      {\n        \"type\": \"heading\",\n        \"content\": \"i18n.BackgroundAndLines\"\n      },\n      {\n        \"type\": \"color\",\n        \"label\": \"i18n.BannerBackground\",\n        \"id\": \"color-primary\"\n      },\n      ...\n    ]\n  },\n  {\n    \"name\": \"i18n.HeaderAndFooter\",\n    \"settings\": [...],\n  },\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Defining App Extension with Localized Labels in JSON\nDESCRIPTION: This JSON snippet shows an App Extension definition with localized labels. It includes the default English label and a French translation, demonstrating how to provide multilingual support for App Extensions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/app-extensions/glossary.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"bc/store/appExtension/2\",\n  \"url\": \"/orders/${id}/personal-thanks\",\n  \"model\": \"ORDERS\",\n  \"label\": {\n    \"defaultValue\": \"Add personal thanks\",\n    \"locales\": [\n      {\n        \"value\": \"Envoyez un merci personnel\",\n        \"localeCode\": \"fr-FR\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Customer Registration Response in JSON\nDESCRIPTION: This JSON response shows successful customer registration and an error case where the email is already in use. It demonstrates how to handle both success and error scenarios.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/customers.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"customer\": {\n      \"registerCustomer\": {\n        \"customer\": {\n          \"firstName\": \"Jon\",\n          \"lastName\": \"Smith\"\n        },\n        \"errors\": []\n      }\n    }\n  }\n}\n\n\n{\n  \"data\": {\n    \"customer\": {\n      \"registerCustomer\": {\n        \"customer\": null,\n        \"errors\": [\n          {\n            \"__typename\": \"EmailAlreadyInUseError\",\n            \"message\": \"The email address is already in use.\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Substring Occurrences - JavaScript\nDESCRIPTION: Returns the number of times a substring appears within a given main string.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction occurrences(str, subStr) { return (str.match(new RegExp(subStr, 'g')) || []).length; }\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request to BigCommerce Install Success Endpoint\nDESCRIPTION: HTTP GET request to notify BigCommerce that an external app installation was successful. This endpoint should be called when there are no errors during installation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/buttons.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /app/{CLIENT_ID}/install/succeeded  HTTP/1.1\nHost: login.bigcommerce.com\n```\n\n----------------------------------------\n\nTITLE: Defining ShowProductSaleBadges Setting in JSON\nDESCRIPTION: This snippet demonstrates defining the 'ShowProductSaleBadges' setting in JSON format, where a select type input with several options determines the display logic for related settings. The snippet includes necessary fields such as 'type', 'label', 'id', 'force_reload', and 'options' which define the setting's characteristics and available choices. Each option corresponds to a different badge position or style, and the setting can trigger conditional logic for other settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/object-reference/elements/reference.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"select\",\n  \"label\": \"i18n.ShowProductSaleBadges\",\n  \"id\": \"product_sale_badges\",\n  \"force_reload\": true,\n  \"options\": [\n    {\n      \"value\": \"none\",\n      \"label\": \"i18n.None\"\n    },\n    {\n      \"value\": \"topleft\",\n      \"label\": \"i18n.TopLeft\"\n    },\n    {\n      \"value\": \"sash\",\n      \"label\": \"i18n.Diagonal\"\n    },\n    {\n      \"value\": \"burst\",\n      \"label\": \"i18n.Burst\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Language Translation File in JSON Format\nDESCRIPTION: This snippet gives an example of a language translation JSON file for French, showcasing how strings are structured and stored for internationalization.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/directory-structure.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// fr.json\n\n{\n    \"header\": {\n        \"welcome_back\": \"Bienvenue, {name}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cart Event Payload Structure\nDESCRIPTION: Example JSON payload structure for cart-related events. Includes cart identification and event details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\": \"11111\",\n \"producer\": \"stores/abcde\",\n \"created_at\": 1641641646,\n \"scope\": \"store/channel/1/cart/created\",\n  \"data\": {\n    \"cart_id\": \"41696c19-486f-40a8-ae2a-389d5d24e0c9\"\n  },\n \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Gift Certificate with Currency Specification in BigCommerce API\nDESCRIPTION: This JSON snippet demonstrates the structure for creating a gift certificate via the BigCommerce API. It includes a new 'currency_code' property to specify the currency of the gift certificate.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/currencies/guide.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"10R-6E3-AO4-RST\",\n  \"amount\": \"700.0000\",\n  \"status\": \"active\",\n  \"to_name\": \"Jane\",\n  \"to_email\": \"janedoe@email.com\",\n  \"from_name\": \"Tarzan\",\n  \"from_email\": \"test1@test.com\",\n  \"currency_code\": \"EUR\"           // new property\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Button to Account Created Email Template in Handlebars\nDESCRIPTION: This snippet demonstrates how to add a blue button with white text to the Account Created email template. It uses HTML table structure and Handlebars templating to create a clickable button that links to the store.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/emails/examples.mdx#2025-04-16_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n<table class=\"row\">\n   <tr>\n      <th class=\"column\">\n         <table>\n            <tr>\n               <th>\n                  <a href=\"{{store.path}}\" style = \"background-color:blue; color:white\" class=\"sign-in\">{{lang 'sign_in'}}</a>\n               </th>\n               <th class=\"expander\"></th>\n            </tr>\n         </table>\n      </th>\n   </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Context Example for option Helper in JavaScript\nDESCRIPTION: Example context object structure demonstrating the nested properties that can be accessed by the option helper using dot notation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\ncontext = {\n  \"options\": {\n    \"a\": {\n      \"b\": {\n        \"c\": \"ddd\"\n       }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Display Shortcode\nDESCRIPTION: Shortcode for displaying specific product components like SKU, image, title, description, or add-to-cart button. Requires a product ID and component type specification.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/content/shortcodes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shortcode\nCODE:\n```\n[bc-component id=\"163\" type=\"SKU\"]\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tab HTML Structure (Inline Content)\nDESCRIPTION: HTML structure for creating dynamic tabs with inline content. This defines a tab that can be positioned at a specific location among existing tabs with a custom title and content.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/dynamic-content-rendering.mdx#2025-04-16_snippet_3\n\nLANGUAGE: handlebars\nCODE:\n```\n<div class=\"gr-tab\" data-gr-position=\"POSITION\" data-gr-title=\"TITLE\"> \n     CONTENT \n</div>\n```\n\n----------------------------------------\n\nTITLE: Passwordless Login API Response\nDESCRIPTION: JSON response structure from the passwordless login API containing expiry time in seconds and email status indication.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/passwordless-login.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"expiry\": 900,\n\"sent_email\": \"sign_in\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the App in Production Environment\nDESCRIPTION: Compiles and starts the Next.js app in a production environment using npm scripts. Requires Node.js and npm installed in the system to use npm scripts. Ensures that the app is optimized, built, and served efficiently from the production-build folder.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Fetching Page Context with JavaScript Bookmark\nDESCRIPTION: A JavaScript bookmark that uses the fetch API to retrieve the current page's context data and output it to the console. This is useful for debugging and understanding available data during theme development.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/theme-objects.mdx#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\njavascript:void%20function(){fetch(window.location.pathname+%22%3Fdebug=context%22).then(function(n){n.json().then(function(n){console.log(n)})})}();\n```\n\n----------------------------------------\n\nTITLE: Finding Available Pickup Options API Request in HTTP\nDESCRIPTION: HTTP request example for finding available pickup options based on geographic coordinates, radius, and product information. The request specifies a search area and items (including variant ID and quantity) to check for pickup availability.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/checkout.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/pickup/options\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"search_area\": {\n    \"coordinates\": {\n      \"latitude\": 32.8058616,\n      \"longitude\": -98.0105544\n    },\n    \"radius\": {\n      \"value\": 25,\n      \"unit\": \"MI\"\n    }\n  },\n  \"items\": [\n    {\n      \"variant_id\": 1,\n      \"quantity\": 1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Header Scripts in BigCommerce Checkout Template\nDESCRIPTION: Handlebars statements to enable header scripts in the checkout template (checkout.html). This should be added between existing statements.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/checkout-confirmation.mdx#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\">\n    window.language = {{{langJson 'optimized_checkout'}}};\n</script>\n\n{{{head.scripts}}}\n\n{{/partial}}\n\n{{#partial \"page\"}}\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request to BigCommerce Install Failure Endpoint\nDESCRIPTION: HTTP GET request to notify BigCommerce that an external app installation failed. This endpoint should be called when errors occur during installation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/buttons.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /app/{CLIENT_ID}/install/failed  HTTP/1.1\nHost: login.bigcommerce.com\n```\n\n----------------------------------------\n\nTITLE: Importing and rendering the CouponDrawer in app.js\nDESCRIPTION: This snippet demonstrates the process of importing the CouponDrawer component into app.js and rendering it within a ThemeProvider for Material UI to apply styling.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/react.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n__webpack_public_path__ = window.__webpack_public_path__; // eslint-disable-line\n\nimport Global from \"./theme/global\";\nimport React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport CouponDrawer from \"./components/CouponDrawer\";\n\nconst theme = createTheme({\n    palette: {\n        primary: {\n            main: \"#555555\", // Customize to match your brand\n        },\n        secondary: {\n            main: \"#f44336\", // Customize to match your brand\n        },\n    },\n});\n\nconst couponContainer = document.querySelector(\"#coupondrawer\");\n\nif (couponContainer) {\n  const root = createRoot(couponContainer);\n  root.render(\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <CouponDrawer />\n    </ThemeProvider>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: TypeScript Database Type Definitions\nDESCRIPTION: TypeScript interface definitions for database types including StoreData, UserData, and Db.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionProps } from './index';\n\nexport interface StoreData {\n    accessToken?: string;\n    scope?: string;\n    storeHash: string;\n}\n\nexport interface UserData {\n    email: string;\n    username?: string;\n}\n\nexport interface Db {\n    setUser(session: SessionProps): Promise<void>;\n    setStore(session: SessionProps): Promise<void>;\n    getStoreToken(storeHash: string): string | null;\n    deleteStore(session: SessionProps): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Finalizing an Order\nDESCRIPTION: Shows the response when an order is successfully finalized. The response includes the order ID which can be used for further order management operations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 126\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Variant Inventory with GraphQL\nDESCRIPTION: GraphQL query to retrieve inventory levels for product variants, filtered by product entity ID. Returns variant details including SKU and stock levels.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/inventory/queries.mdx#2025-04-16_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    products (entityIds:[113]) {\n      edges {\n        node {\n          entityId\n          name\n          variants {\n            edges {\n              node {\n                entityId\n                sku\n                inventory {\n                  aggregated {        // By default, includes inventory from only the default location \n                    availableToSell\n                    warningLevel\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Analytics IDs\nDESCRIPTION: GraphQL query to retrieve analytics service IDs including Google Analytics 4, Meta Pixel, and Segment integration details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n    site {\n      settings {\n        webAnalytics {\n          ga4 {\n            tagId\n        }\n          metaPixel {\n            pixelId\n        }\n          segment {\n            writeKey\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Injected Context in BigCommerce Product JavaScript\nDESCRIPTION: Shows how to access the injected Handlebars context variable 'productThumbSize' within the product.js file. This allows server-side configuration to influence client-side behavior.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/javascript/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class Product extends PageManager {\n    constructor(context) {\n        super(context);\n        this.url = window.location.href;\n        this.$reviewLink = $('[data-reveal-id=\"modal-review-form\"]');\n        this.$bulkPricingLink = $('[data-reveal-id=\"modal-bulk-pricing\"]');\n    }\n\n    onReady() {\n      //...\n        // Example Code\n        this.helloWorld();\n    }\n\n    // Example Code\n    helloWorld() {\n      console.log(\"[assets/js/theme/product.js]: Hello World!\");\n      console.log(\"[assets/js/theme/product.js]: \" + this.context.productThumbSize);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Tax Zones via BigCommerce API\nDESCRIPTION: DELETE request to remove specified tax zones using id parameter filter. Deleting a zone will also remove all associated tax rates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/tax-rates-zones.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nDELETE https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/tax/zones?id:in=3,7\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Order Transaction Webhook Payload\nDESCRIPTION: Example payload structure for store/order/transaction/created and updated webhook events that fire when transaction records are created or modified.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/order/transaction/created\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"transaction\",\n    \"order_id\": 250,\n    \"transaction_id\": \"176342342\",\n    \"transaction_status\": \"complete\",\n    \"transaction_type\": \"capture\",\n    \"result\": {\n        \"code\": \"captured\",\n        \"message\": \"Captured\",\n        \"type\": \"success\"\n    },\n    \"platform_transaction_id\": \"964899682\",\n    \"provider_transaction_id\": \"CK65FBPKR472P4V5\"\n  },\n  \"hash\": \"dd70c0976e06b67aaf671e73f49dcb79230ebf9d\",\n  \"created_at\": 1561479335,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using for Helper in Handlebars for Range Iteration\nDESCRIPTION: The for helper repeats a block for a specified range from index a to index b. It's limited to 100 iterations to prevent infinite loops.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_62\n\nLANGUAGE: handlebars\nCODE:\n```\n{{for a b}}\n```\n\n----------------------------------------\n\nTITLE: Hidden Stock Levels Response\nDESCRIPTION: JSON response when store settings are configured to hide stock levels, showing null inventory values.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/inventory/queries.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"products\": {\n        \"edges\": [\n          {\n            \"node\": {\n              \"entityId\": 113,\n              \"name\": \"Example Product 1\",\n              \"inventory\": {\n                \"aggregated\": null\n              }\n            }\n          },\n          {\n            \"node\": {\n              \"entityId\": 115,\n              \"name\": \"Example Product 2\",\n              \"inventory\": {\n                \"aggregated\": null\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Shop by Brand Object in Handlebars\nDESCRIPTION: Handlebars expression to access the shop_by_brand object, which enables customers to shop by brand. It returns the top 10 brands by product count, including links and product counts for each brand.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_4\n\nLANGUAGE: handlebars\nCODE:\n```\n{{shop_by_brand}}\n```\n\n----------------------------------------\n\nTITLE: Adding SKU to Product with V2 API in JSON\nDESCRIPTION: This snippet demonstrates how to add a SKU to a product using the V2 API. It requires the product_option_id and option_value_id obtained from previous steps.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sku\": \"WHITE-1\",\n  \"options\": [\n    {\n      \"product_option_id\": 117,\n      \"option_value_id\": 108\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Object to JSON String - JavaScript\nDESCRIPTION: Converts a JavaScript object into a JSON string representation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction json(obj) { return JSON.stringify(obj); }\n```\n\n----------------------------------------\n\nTITLE: Accessing Debug Mode in Stencil Themes\nDESCRIPTION: Shows how to enable debug mode in Stencil by adding query parameters to the URL. The debug=context parameter shows available JSON objects in the page, while debug=bar displays both JSON objects and the rendered page.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/common-objects.mdx#2025-04-16_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttp://localhost:3000/product/this-is-a-sample-product?debug=context\n```\n\nLANGUAGE: url\nCODE:\n```\nhttp://localhost:3000/product/this-is-a-sample-product?debug=bar\n```\n\n----------------------------------------\n\nTITLE: Region Object Properties Schema\nDESCRIPTION: Defines the structure and properties of a region object in BigCommerce page widgets, containing a name and array of children elements.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/page-widgets/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Type | Description |\n|:---------|:-----|:------------|\n| `name` | string | Matches the name specified as `{{{region_name=\"...\"}}}`in a theme template file. |\n| `children` | array  | Consists of [layout](#layouts) and/or [widget](#widgets) objects.|\n```\n\n----------------------------------------\n\nTITLE: Specifying Node.js Version with NVM in Shell\nDESCRIPTION: This command allows you to switch to a specific Node.js version using NVM. It's used to resolve compatibility issues with Stencil CLI by ensuring the correct Node.js version is active.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/unexpected-behavior.mdx#2025-04-16_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnvm use <version_number>\n```\n\n----------------------------------------\n\nTITLE: Enabling Storefront Carousel Display - YAML\nDESCRIPTION: Configures the display of a carousel on the storefront through a boolean property in the YAML front matter. This property must be true to display the carousel; setting it to null prevents the carousel from showing.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter-reference.mdx#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncarousel: true    # displays carousel on the storefront unless set to null\n```\n\n----------------------------------------\n\nTITLE: Setting Shared Variant Options for a Locale in BigCommerce GraphQL\nDESCRIPTION: This GraphQL mutation sets shared variant option information for a specific locale within a storefront channel. It overrides global store information and allows setting the name and values for existing variant options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-variant-options.mdx#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json      \n\nmutation ($input: SetSharedProductOptionsInformationInput!) {\n  sharedProductOptions {\n    setSharedProductOptionsInformation (input: $input) {\n      sharedProductOptions {\n        id\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"localeContext\": {\n      \"channelId\": \"bc/store/channel/2\",\n      \"locale\": \"uk\"\n    },\n    \"data\": {\n      \"options\": [\n        {\n          \"optionId\": \"bc/store/sharedProductOption/1\",\n          \"data\": {\n            \"dropdown\": {\n              \"displayName\": \"Fabric material\",\n              \"values\": [\n                {\n                  \"valueId\": \"bc/store/sharedProductOptionValue/123\",\n                  \"label\": \"Linen\"\n                },\n                {\n                  \"valueId\": \"bc/store/sharedProductOptionValue/124\",\n                  \"label\": \"Nylon\"\n                }\n              ]\n            }\n          }\n        },\n        {\n          \"optionId\": \"bc/store/sharedProductOption/4\",\n          \"data\": {\n            \"swatch\": {\n              \"displayName\": \"Color of zipper\",\n              \"values\": [\n                {\n                  \"valueId\": \"bc/store/sharedProductOptionValue/129\",\n                  \"label\": \"Black\"\n                },\n                {\n                  \"valueId\": \"bc/store/sharedProductOptionValue/130\",\n                  \"label\": \"Brown\"\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"sharedProductOptions\": {\n      \"setSharedProductOptionsInformation\": {\n        \"sharedProductOptions\": [\n          {\n            \"id\": \"bc/store/sharedProductOption/1\"\n          },\n          {\n            \"id\": \"bc/store/sharedProductOption/4\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Stencil Bundle to Validate Theme Code\nDESCRIPTION: This command validates your Stencil theme's code to identify any compatibility issues. It generates errors in the console output for any problems found.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/unexpected-behavior.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nstencil bundle\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Environment Variables\nDESCRIPTION: Specifies the database type as MySQL and sets configuration keys in the .env file.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nDB_TYPE=mysql\n```\n\nLANGUAGE: shell\nCODE:\n```\nMYSQL_HOST={mysql host}\nMYSQL_DATABASE={mysql domain}\nMYSQL_USERNAME={mysql username}\nMYSQL_PASSWORD={mysql password}\nMYSQL_PORT={mysql port}\n```\n\n----------------------------------------\n\nTITLE: Using or Helper in Handlebars for Multiple Condition Testing\nDESCRIPTION: The or helper renders a block if one or more parameters evaluates to true. Parameters can be of mixed types.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_66\n\nLANGUAGE: handlebars\nCODE:\n```\n{{or arg}}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Blocks in Base Template\nDESCRIPTION: Shows how to define content blocks in a base template using the {{block}} Handlebars helper. It creates three blocks named 'head', 'hero', and 'page' within an HTML structure.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/style/composition-and-styling.mdx#2025-04-16_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>{{ head.title }}</title>\n        {{#block \"head\"}} {{/block}}\n    </head>\n    <body>\n        <div class=\"body\">\n\t\t    {{#block \"hero\"}} {{/block}}\n\t\t    <div class=\"container\">\n\t\t        {{#block \"page\"}} {{/block}}\n\t\t    </div>\n\t\t    {{> components/common/modal}}\n        </div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Display and Pagination - YAML\nDESCRIPTION: Establishes limits and pagination settings for blog posts within the stencil template using YAML front matter. Helps in defining the number of posts and characters displayed in summaries efficiently.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter-reference.mdx#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nblog: \n  posts:\n    limit: 10        # limits number of blog posts to 10\n    pages: 5        # displays 5 pages in pagination links\n    summary: 250    # displays 250 character summary of blog post\n```\n\n----------------------------------------\n\nTITLE: Adding Option to Option Set with V2 API in JSON\nDESCRIPTION: This snippet demonstrates how to add a previously created option to an option set using the V2 API. It's part of the process to create a product with variants and SKUs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"option_id\": 37\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Account Form in Handlebars Templates\nDESCRIPTION: Handlebars expression for accessing the account edit form object used to edit customer information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_21\n\nLANGUAGE: handlebars\nCODE:\n```\n{{forms.edit_account}}\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Tab in Handlebars Template for BigCommerce\nDESCRIPTION: This code snippet demonstrates how to add a dynamic tab to a BigCommerce product page template. It uses a div with a 'gr-tab' class and a data attribute to specify the content file location.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/dynamic-content-rendering.mdx#2025-04-16_snippet_6\n\nLANGUAGE: handlebars\nCODE:\n```\n<!-- GORUCK Customization: pull in a dynamic tab -->\n  <div class=\"gr-tab\" data-gr-content=\"/content/tabs/dynamicTab1.html?v=14\">\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Making Relative Inventory Adjustments by Product\nDESCRIPTION: Example of making relative adjustments to product inventory quantities. The request adjusts inventory for multiple products at a specific location, with positive and negative quantity changes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/adjustments/relative\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"items\": [\n    {\n      \"location_id\": 2,\n      \"product_id\": 111,\n      \"quantity\": -2\n    },\n    {\n      \"location_id\": 2,\n      \"product_id\": 112,\n      \"quantity\": 2\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transaction_id\": \"6511a3d1-5392-4d10-8a0b-910d95c48d1e\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Component\nDESCRIPTION: Loading indicator component using BigDesign ProgressCircle with flex layout.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flex, H3, Panel, ProgressCircle } from '@bigcommerce/big-design';\n\nconst Loading = () => (\n    <Panel>\n        <H3>Loading...</H3>\n        <Flex justifyContent=\"center\" alignItems=\"center\">\n            <ProgressCircle size=\"large\" />\n        </Flex>\n    </Panel>\n);\n\nexport default Loading;\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Search Results in JSON\nDESCRIPTION: JSON configuration for limiting product search results to 5 items.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"search\": {\n    \"product_results\": {\n        \"limit\": 5\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Type in schema.json for BigCommerce Theme Styles\nDESCRIPTION: JSON configuration for text data type used to set string values for theme settings. Requires type, label, and id fields, with an optional force_reload field.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/styles-and-properties.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n \"type\": \"text\",\n \"label\": \"i18n.ProductPriceLabelSale\",\n \"force_reload\": true,\n \"id\": \"pdp-sale-price-label\"\n},\n```\n\n----------------------------------------\n\nTITLE: Response for Out-of-Stock Variant Inventory Query in BigCommerce\nDESCRIPTION: This JSON response shows the result of querying for variants with zero inventory across all locations. The response is truncated, indicating that no variants are returned when they are out of stock at all locations and the 'hide out-of-stock options' setting is enabled.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/inventory/queries.mdx#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n      \"site\": {\n        \"products\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"entityId\": 113,\n                \"name\": \"Example Product 1\",\n                \"variants\": {\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Handling Shipment Creation Webhook Payload in JSON\nDESCRIPTION: This snippet shows the structure of a payload object for a shipment creation event. It includes the scope, store ID, shipment ID, and associated order ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/shipment/created\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"shipment\",\n    \"id\": 12,\n    \"orderId\": 251\n  },\n  \"hash\": \"8b98021cb0faa7e3a58a0e4182d3696a4bdd24ab\",\n  \"created_at\": 1561482857,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Context Injection with inject Helper in Handlebars\nDESCRIPTION: Shows how to use the inject helper to add key-value pairs to the jsContext. It takes two parameters: the key to inject and the value to associate with that key.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_98\n\nLANGUAGE: handlebars\nCODE:\n```\n{{inject value object}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{inject \"myProductName\" product.title}}\n\n<script>\nvar jsContext = JSON.parse({{jsContext}});\nconsole.log(jsContext.myProductName);\n// results in: \"BigCommerce Coffee Mug\"\n</script>\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{inject 'productSize' theme_settings.product_size}}\n<!-- Returns a JSON representation of an object of all the keys injected. -->\n```\n\n----------------------------------------\n\nTITLE: Correct Widget Configuration Reuse in JSON\nDESCRIPTION: This JSON snippet demonstrates the correct way to reuse a widget configuration. The array name matches the original configuration, ensuring proper data display.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"List\",\n  \"widget_configuration\": {\n    \"list_items\": [\n      {\n        \"color\": \"orange\",\n        \"text\": \"Fifth item\"\n      },\n      {\n        \"color\": \"blue\",\n        \"text\": \"Sixth item\"\n      }\n    ]\n  },\n  \"widget_template_uuid\": \"7bfb9a46-75cc-45bc-bf39-a6a43b77111f\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Product Assignment Payload Object in JSON\nDESCRIPTION: This JSON object represents the payload structure for product assignment webhook events. It includes store ID, producer, creation timestamp, scope, product ID, and a hash value.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\": \"11111\",\n \"producer\": \"stores/abcde\",\n \"created_at\": 1641641646,\n \"scope\": \"store/channel/1/product/assigned\",\n \"data\": {\n    \"product_id\": 127 // ID of the product\n  },\n \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: Including Stylesheets with stylesheet Helper\nDESCRIPTION: Helper for rendering stylesheet link tags that are compatible with Theme Editor. Takes an asset path and optional parameters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_44\n\nLANGUAGE: handlebars\nCODE:\n```\n{{stylesheet assetPath}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{stylesheet \"assets/css/style.scss\" class=\"myStylesheet\"}}\n```\n\n----------------------------------------\n\nTITLE: Accessing Account Address Form in Handlebars Templates\nDESCRIPTION: Handlebars expression for accessing the address form object used in the Add/Edit Address page.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_22\n\nLANGUAGE: handlebars\nCODE:\n```\n{{forms.address}}\n```\n\n----------------------------------------\n\nTITLE: Promotion Codes Response Format\nDESCRIPTION: JSON response showing the list of coupon codes with their usage statistics and pagination information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/index.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"code\": \"30off100\",\n      \"current_uses\": 0,\n      \"max_uses\": 100,\n      \"created\": \"2019-07-26T16:44:32+00:00\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"total\": 1,\n      \"count\": 1,\n      \"per_page\": 50,\n      \"current_page\": 1,\n      \"total_pages\": 1,\n      \"links\": {\n        \"current\": \"?page=1&limit=50\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Value of a Variable - JavaScript\nDESCRIPTION: Returns the current value stored in a specified variable.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getVar() { return variable; }\n```\n\n----------------------------------------\n\nTITLE: Example of multiConcat Helper in Handlebars\nDESCRIPTION: Example showing the multiConcat helper joining four string literals 'there', 'is', 'no', and 'spoon' into 'thereisnospoon'.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_79\n\nLANGUAGE: handlebars\nCODE:\n```\n{{concat 'there' 'is' 'no' 'spoon'}}\n<!-- => thereisnospoon -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Button Number in config.json\nDESCRIPTION: This snippet demonstrates how to set the default number of wallet buttons to be displayed on the product page by adjusting a 'paymentbuttons-number-of-buttons' property in 'config.json'. This ensures only the specified number of wallet buttons are visible at a time.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/checkout-enhancements/wallet-buttons.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...,\n  \"settings\": {\n    ..., \n    \"paymentbuttons-number-of-buttons\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BigCommerce Product Modifiers Response with Localization\nDESCRIPTION: JSON response showing product modifier data with localization overrides. The response includes a RectangleListProductModifier with default values and locale-specific overrides for UK and French locales, demonstrating BigCommerce's multi-language support capabilities.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"store\": {\n      \"product\": {\n        \"id\": \"bc/store/product/111\",\n        \"modifiers\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"__typename\": \"RectangleListProductModifier\",\n                \"id\": \"bc/store/productModifier/121\",\n                \"displayName\": \"Holiday Theme\",\n                \"isShared\": false,\n                \"isRequired\": false,\n                \"values\": [\n                  {\n                    \"id\": \"bc/store/productModifierValue/113\",\n                    \"label\": \"Birthday\",\n                    \"isDefault\": true\n                  },\n                  {\n                    \"id\": \"bc/store/productModifierValue/114\",\n                    \"label\": \"Christmas\",\n                    \"isDefault\": true\n                  }\n                ],\n                \"uk\": {\n                  \"displayName\": \"Public Holiday\",\n                  \"values\": [\n                    {\n                      \"id\": \"bc/store/productModifierValue/113\",\n                      \"label\": \"New Year's Day\"\n                    },\n                    {\n                      \"id\": \"bc/store/productModifierValue/114\",\n                      \"label\": \"Chrimbo\"\n                    }\n                  ]\n                },\n                \"fr\": {\n                  \"displayName\": \"Thème de vacances\",\n                  \"values\": [\n                    {\n                      \"id\": \"bc/store/productModifierValue/113\",\n                      \"label\": \"Anniversaire\"\n                    },\n                    {\n                      \"id\": \"bc/store/productModifierValue/114\",\n                      \"label\": \"Noël\"\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: WP-CLI Product Import Command for BigCommerce\nDESCRIPTION: Command line interface command to manually trigger product import from BigCommerce to WordPress. This command initiates the import process that synchronizes products between BigCommerce and WordPress.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/platform-integration/product-import.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp bigcommerce import products\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Theme Setting for Product Price Label\nDESCRIPTION: Defines a text configuration object for theme settings with type, label, and ID. Includes an optional force_reload flag to trigger page reloading when the setting changes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/object-reference/elements/text.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"text\",\n  \"label\": \"i18n.ProductPriceLabelSale\",\n  \"force_reload\": true,\n  \"id\": \"pdp-sale-price-label\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Pickup Methods in BigCommerce\nDESCRIPTION: This HTTP request fetches all pickup methods configured for a store. It requires only authentication headers and returns all pickup methods regardless of their location assignment.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{store_hash}}/v3/pickup/methods\nX-Auth-Token: {{access_token}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tab Content in Handlebars for BigCommerce\nDESCRIPTION: This snippet shows the contents of a dynamic tab file (dynamicTab1.html). It includes a hidden input for tab data and HTML structure for displaying product information and company policies.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/dynamic-content-rendering.mdx#2025-04-16_snippet_7\n\nLANGUAGE: handlebars\nCODE:\n```\n<input id=\"gr-tab-data\" type=\"hidden\" data-gr-position=\"3\" data-gr-title=\"Right By You\"/>\n<div class=\"container container-small gr-rightbyyou\">\n  <div style=\"display: flex; flex-direction: column\">\n    <div style=\"display: flex\">\n      <div>\n        <img style=\"display: block; width: 100px; max-width: 100px; margin-right: 24px\" \n        src=\"https://content.goruck.com/2017site/products/free-returns-icon.png\" height=\"auto\"/>\n      </div>\n    <div>\n      <h3 style=\"margin-top: 0\">Free &amp; Easy Returns</h3>\n      <p>Don't like it? Send it back for free. Returnable in like-new condition within 30 days and \n      every order comes with a free return shipping label. Too easy.</p>\n    </div>\n  </div>\n\n  <div style=\"display: flex; margin-top: 12px\">\n    <div>\n      <img style=\"display: block; width: 100px; max-width: 100px; margin-right: 24px\" \n      src=\"https://content.goruck.com/2017site/products/challenge-excellence.png\" height=\"auto\"/>\n    </div>\n\n    <div>\n      <h3 style=\"margin-top: 0\">Challenge Excellence</h3>\n      <p>We have two grades, A and F and A- rounds down. Excellence is the standard and please hold us to it, \n      we want you to love your gear as much as we do.</p>\n    </div>\n  </div>\n\n  <div style=\"display: flex; margin-top: 12px\">\n    <div>\n      <img style=\"display: block; width: 100px; max-width: 100px; margin-right: 24px\" \n      src=\"https://content.goruck.com/2017site/products/customer-service-icon.png\" height=\"auto\"/>\n    </div>\n      <div>\n        <h3 style=\"margin-top: 0\">Do Right By People</h3>\n        <p>Our goal is to run a company our grandfathers would be proud of. And the central tenet \n        &mdash; an oldie but a goodie &mdash; is that we do whatever it takes to do right by people.\n        Contact us at <a href=\"https://goruck.zendesk.com/hc/en-us/requests/new\" target=\"_blank\">\n        team@goruck.com</a> with any questions and we'll get back to you ASAP.</p>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Brand Object in Handlebars\nDESCRIPTION: Handlebars expression to access the brand object on the brand page template. The brand object contains properties like show_compare, url, name, pagination, image, and product-related information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_2\n\nLANGUAGE: handlebars\nCODE:\n```\n{{brand}}\n```\n\n----------------------------------------\n\nTITLE: Checking Out MDX Components Branch\nDESCRIPTION: Git command to switch to the mdx-components branch\nSOURCE: https://github.com/bigcommerce/docs/blob/main/guides/create-a-site-preview.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout mdx-components\n```\n\n----------------------------------------\n\nTITLE: Handling External Installation Errors in Lua\nDESCRIPTION: Lua code example showing how to handle external installation parameters and redirect to appropriate BigCommerce endpoints based on success or failure conditions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/buttons.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nif params['external_install']\n    return get 'https://login.bigcommerce.com/app/m8e1mkkmjw2xjinydqz7ie05to1y2nk/install/succeeded'\nend\n\nredirect '/'\n\nrescue => e\nif params['external_install']\n    return get 'https://login.bigcommerce.com/app/m8e1mkkmjw2xjinydqz7ie05to1y2nk/install/failed'\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Cart and Category Data - YAML\nDESCRIPTION: Includes configuration for displaying cart details and category descriptions in the stencil template using YAML. Booleans determine data visibility, ensuring dynamic data retrieval based on configuration.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter-reference.mdx#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncart: true    # show cart data\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncategories: true      # displays category tree\n  description: true   # displays category description\n```\n\n----------------------------------------\n\nTITLE: Implementing Skip to Main Link with Handlebars\nDESCRIPTION: This snippet demonstrates how to add a 'Skip to Main' link to meet the WCAG 'bypass blocks' guideline. It conditionally renders banners using the Handlebars templating language. The code is part of the header template, and integrates with existing top banners.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/accessibility/implementing-wcag-guidelines.mdx#2025-04-16_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{lang 'header.skip_to_main'}} {{#if banners.top}}\n  {{#each (limit banners.top_metadata 1)}}\n    {{{this.content}}}\n  {{/each}}\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Building Custom Checkout for Production\nDESCRIPTION: Command to build the custom checkout source code for production deployment, generating the loader file in the /dist folder.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/open-checkouts/guide.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating Store Pickup Locations with BigCommerce Inventory API\nDESCRIPTION: This HTTP request creates a new physical pickup location with detailed information including address, operating hours, and special hours. The request requires proper authentication with appropriate OAuth scopes and returns a transaction ID upon successful creation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/locations\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"code\": \"DTOWN_PARK_ST\",\n    \"label\": \"Downtown Location - Park Lane\",\n    \"description\": \"Customer-facing additional details about this location\",\n    \"managed_by_external_source\": false,\n    \"type_id\": \"PHYSICAL\",\n    \"enabled\": true,\n    \"operating_hours\": {\n      \"sunday\": {\n        \"open\": false,\n        \"opening\": \"00:00\",\n        \"closing\": \"00:00\"\n      },\n      \"monday\": {\n        \"open\": true,\n        \"opening\": \"09:00\",\n        \"closing\": \"17:00\"\n      },\n      \"tuesday\": {\n        \"open\": true,\n        \"opening\": \"09:00\",\n        \"closing\": \"17:00\"\n      },\n      \"wednesday\": {\n        \"open\": true,\n        \"opening\": \"09:00\",\n        \"closing\": \"17:00\"\n      },\n      \"thursday\": {\n        \"open\": true,\n        \"opening\": \"09:00\",\n        \"closing\": \"17:00\"\n      },\n      \"friday\": {\n        \"open\": true,\n        \"opening\": \"09:00\",\n        \"closing\": \"17:00\"\n      },\n      \"saturday\": {\n        \"open\": false,\n        \"opening\": \"00:00\",\n        \"closing\": \"00:00\"\n      }\n    },\n    \"time_zone\": \"Etc/UTC\",\n    \"address\": { \n      \"email\": \"jane.doe@bigcommerce.com\",\n      \"address1\": \"100 Park Lane\",\n      \"address2\": \"\",\n      \"city\": \"Austin\",\n      \"state\": \"TX\",\n      \"zip\": \"78726\",\n      \"country_code\": \"US\",\n      \"phone\": \"+15128654500\",\n      \"geo_coordinates\": {\n        \"longitude\": -97.849560,\n        \"latitude\": 30.404500\n      } \n    },\n    \"storefront_visibility\": true,\n    \"special_hours\": [\n      {\n        \"label\": \"Christmas Eve\",\n        \"date\": \"2022-12-25\",\n        \"open\": true,\n        \"opening\": \"00:00\",\n        \"closing\": \"09:00\",\n        \"all_day\": false,\n        \"annual\": false\n      }\n    ]  \n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Error Response for Multiple Pickup Consignments\nDESCRIPTION: Shows the error response when attempting to create multiple pickup consignments or mix pickup and shipping consignments. BOPIS currently only supports one consignment of type Pickup.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": 422,\n  \"title\": \"Pickup method is limited to 1 consignment.\",\n  \"type\": \"https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Dependencies\nDESCRIPTION: NPM command to install required packages for Firebase integration including firebase, jsonwebtoken, and swr.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save firebase jsonwebtoken swr\n```\n\n----------------------------------------\n\nTITLE: Using multiConcat Helper in Handlebars for Multiple String Concatenation\nDESCRIPTION: The multiConcat helper concatenates multiple strings together without adding spaces or separators between them.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_78\n\nLANGUAGE: handlebars\nCODE:\n```\n{{multiConcat value anotherValue andAnotherValue ...}}\n```\n\n----------------------------------------\n\nTITLE: Note on Ruby API Client Threading\nDESCRIPTION: Reference to the BigCommerce Ruby API client's thread-safe implementation that allows multiple threads to safely access shared data while ensuring exclusive access when needed. This enables efficient parallel request processing.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/best-practices/index.mdx#2025-04-16_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Implementing imageDimension Type in schema.json for BigCommerce Theme Styles\nDESCRIPTION: JSON configuration for imageDimension data type used to set image ratios on theme settings. Requires type, label, id, and options fields. Includes a 'custom' option to let users specify dimensions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/styles-and-properties.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n \"type\": \"imageDimension\",\n \"id\": \"blog_size\",\n \"force_reload\": true,\n \"label\": \"i18n.SizeOfImages\",\n \"options\": [\n   {\n     \"value\": \"190x250\",\n     \"label\": \"i18n.OptimizedForTheme\"\n   },\n   {\n     \"value\": \"custom\",\n     \"label\": \"i18n.SpecifyDimensions\"\n   }\n ]\n},\n```\n\n----------------------------------------\n\nTITLE: Sample Variables for Cancelling a Subscription in JSON\nDESCRIPTION: These sample variables are used with the cancelSubscription mutation. They include the subscription ID to be cancelled.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"subscription\": {\n    \"id\": \"bc/account/subscription/9bbe8843-27eb-4f78-b34b-c692d1016382\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BigCommerce API Response for Creating Storewide Discount with Exclusion (JSON)\nDESCRIPTION: This JSON response represents the created promotion object returned by the BigCommerce API. It includes details such as the promotion ID, rules, notifications, and various settings like currency, redemption type, and usage limits.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/order.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 30,\n    \"name\": \"15% off store except sale\",\n    \"created_from\": \"api\",\n    \"customer\": {\n      \"group_ids\": [],\n      \"minimum_order_count\": 0,\n      \"excluded_group_ids\": [],\n      \"segments\": null\n    },\n    \"rules\": [\n      {\n        \"action\": {\n          \"cart_items\": {\n            \"discount\": {\n              \"percentage_amount\": \"15\"\n            },\n            \"strategy\": \"LEAST_EXPENSIVE\",\n            \"add_free_item\": true,\n            \"as_total\": false,\n            \"include_items_considered_by_condition\": false,\n            \"exclude_items_on_sale\": false,\n            \"items\": {\n              \"not\": {\n                \"categories\": [\n                  24\n                ]\n              }\n            }\n          }\n        },\n        \"apply_once\": true,\n        \"stop\": false\n      }\n    ],\n    \"notifications\": [\n      {\n        \"type\": \"UPSELL\",\n        \"content\": \"15% off store except sale\",\n        \"locations\": [\n          \"HOME_PAGE\",\n          \"PRODUCT_PAGE\",\n          \"CART_PAGE\"\n        ]\n      },\n      {\n        \"type\": \"ELIGIBLE\",\n        \"content\": \"15% off store except sale\",\n        \"locations\": [\n          \"CART_PAGE\"\n        ]\n      },\n      {\n        \"type\": \"APPLIED\",\n        \"content\": \"15% off store except sale\",\n        \"locations\": [\n          \"CART_PAGE\"\n        ]\n      }\n    ],\n    \"stop\": false,\n    \"currency_code\": \"USD\",\n    \"redemption_type\": \"AUTOMATIC\",\n    \"shipping_address\": null,\n    \"current_uses\": 0,\n    \"max_uses\": null,\n    \"start_date\": \"2022-07-21T16:54:22+00:00\",\n    \"end_date\": null,\n    \"status\": \"ENABLED\",\n    \"schedule\": null,\n    \"can_be_used_with_other_promotions\": true\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Enabled Filters with Settings API (HTTP)\nDESCRIPTION: This snippet demonstrates how to make a GET request to retrieve all currently enabled filters for a BigCommerce store using the Settings API.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/contextual-filters.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/settings/search/filters\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Accessing MSRP (including tax) in BigCommerce Stencil Templates\nDESCRIPTION: This snippet shows how to access the Manufacturer's Suggested Retail Price (MSRP) including tax in BigCommerce Stencil templates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/catalog-price-object.mdx#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n{{ product.price.rrp_with_tax }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Blog Post Object in Handlebars Templates\nDESCRIPTION: Handlebars expression for accessing an individual blog post object in BigCommerce templates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_20\n\nLANGUAGE: handlebars\nCODE:\n```\n{{blog.post}}\n```\n\n----------------------------------------\n\nTITLE: Stringified Schema Translations\nDESCRIPTION: The schema translations JSON object converted to a string format for use in the API request.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/localization.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"{\n \\\"i18n.LineColor\\\": {\n   \\\"default\\\": \\\"Line color\\\",\n   \\\"fr-FR\\\": \\\"Couleur de la ligne\\\",\n   \\\"en\\\": \\\"Line color\\\",\n   \\\"zh-CN\\\": \\\"线条颜色\\\"\n },\n \\\"i18n.LineStyle\\\": {\n   \\\"default\\\": \\\"Line style\\\",\n   \\\"fr-FR\\\": \\\"Style de ligne\\\",\n   \\\"en\\\": \\\"Line style\\\",\n   \\\"zh-CN\\\": \\\"线型\\\"\n },\n \\\"i18n.LineWidth\\\": {\n   \\\"default\\\": \\\"Line width\\\",\n   \\\"fr-FR\\\": \\\"Largeur de ligne\\\",\n   \\\"en\\\": \\\"Line width\\\",\n   \\\"zh-CN\\\": \\\"行宽\\\"\n },\n \\\"i18n.LineThickness\\\": {\n   \\\"default\\\": \\\"Line Thickness\\\",\n   \\\"fr-FR\\\": \\\"Épaisseur de ligne\\\",\n   \\\"en\\\": \\\"Line Thickness\\\",\n   \\\"zh-CN\\\": \\\"线的粗细\\\"\n },\n \\\"i18n.Alignment\\\": {\n   \\\"default\\\": \\\"Alignment\\\",\n   \\\"fr-FR\\\": \\\"Alignement\\\",\n   \\\"en\\\": \\\"Alignment\\\",\n   \\\"zh-CN\\\": \\\"结盟\\\"\n }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Stripping Query String from URL - JavaScript\nDESCRIPTION: Removes the query string from a URL, returning the base URL.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction stripQuerystring(url) { return url.split('?')[0]; }\n```\n\n----------------------------------------\n\nTITLE: Success Response Structure for Product Review Creation in BigCommerce\nDESCRIPTION: Example of a successful JSON response when a product review is successfully created. An empty errors array indicates success.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/product-reviews.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"catalog\": {\n      \"addProductReview\": {\n        \"errors\": []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BigCommerce API Credentials in WordPress\nDESCRIPTION: Code snippet showing how to set up BigCommerce API credentials in the WordPress wp-config.php file. These credentials are used to connect WordPress to the BigCommerce API and override database options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/deployment/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'BIGCOMMERCE_API_URL', 'https://api.bigcommerce.com/stores/xxxxxxxxxx/v3/' );\ndefine( 'BIGCOMMERCE_CLIENT_ID', 'xxxxxxxxxx' );\ndefine( 'BIGCOMMERCE_CLIENT_SECRET', 'xxxxxxxxxx' );\ndefine( 'BIGCOMMERCE_ACCESS_TOKEN', 'xxxxxxxxxx' );\n```\n\n----------------------------------------\n\nTITLE: Product Modifier Configuration Response\nDESCRIPTION: Example response showing the configured product modifiers including various types like checkboxes, text fields, and lists with their respective values and settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"product\": {\n      \"setProductModifiersInformation\": {\n        \"product\": {\n          \"id\": \"bc/store/product/111\",\n          \"modifiers\": {\n            \"edges\": [\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/118\",\n                  \"displayName\": \"Include Insurance?\",\n                  \"isRequired\": true,\n                  \"isShared\": false,\n                  \"checkedByDefault\": true,\n                  \"fieldValue\": \"Yes\"\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/119\",\n                  \"displayName\": \"Custom Message\",\n                  \"isRequired\": false,\n                  \"isShared\": false,\n                  \"defaultValue\": \"Enjoy your gift\"\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/121\",\n                  \"displayName\": \"Holiday Theme\",\n                  \"isRequired\": false,\n                  \"isShared\": false,\n                  \"values\": [\n                    {\n                      \"id\": \"bc/store/productModifierValue/113\",\n                      \"label\": \"Birthday\",\n                      \"isDefault\": true\n                    },\n                    {\n                      \"id\": \"bc/store/productModifierValue/114\",\n                      \"label\": \"Christmas\",\n                      \"isDefault\": true\n                    }\n                  ]\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/122\",\n                  \"displayName\": \"Hood Color\",\n                  \"isRequired\": true,\n                  \"isShared\": false,\n                  \"values\": [\n                    {\n                      \"id\": \"bc/store/productModifierValue/115\",\n                      \"label\": \"Red Hood\",\n                      \"isDefault\": false\n                    },\n                    {\n                      \"id\": \"bc/store/productModifierValue/116\",\n                      \"label\": \"Blue Hood\",\n                      \"isDefault\": false\n                    }\n                  ]\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/123\",\n                  \"displayName\": \"Pattern\",\n                  \"isRequired\": false,\n                  \"isShared\": false,\n                  \"values\": [\n                    {\n                        \"id\": \"bc/store/productModifierValue/117\",\n                        \"label\": \"Plain\",\n                        \"isDefault\": true\n                    },\n                    {\n                        \"id\": \"bc/store/productModifierValue/118\",\n                        \"label\": \"Checkered\",\n                        \"isDefault\": true\n                    }\n                  ]\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"bc/store/productModifier/124\",\n                  \"displayName\": \"Fit Type\",\n                  \"isRequired\": false,\n                  \"isShared\": false,\n                  \"values\": [\n                    {\n                        \"id\": \"bc/store/productModifierValue/119\",\n                        \"label\": \"Regular fit\",\n                        \"isDefault\": false\n                    },\n                    {\n                        \"id\": \"bc/store/productModifierValue/120\",\n                        \"label\": \"Loose fit\",\n                        \"isDefault\": false\n                    }\n                  ]\n                }\n              },\n              {\n                \"node\": {\n                    \"id\": \"bc/store/productModifier/125\",\n                    \"displayName\": \"Optional details\",\n                    \"isRequired\": false,\n                    \"isShared\": false,\n                    \"defaultValue\": \"\"\n                }\n              },\n              {\n                \"node\": {\n                    \"id\": \"bc/store/productModifier/127\",\n                    \"displayName\": \"Number of Pockets\",\n                    \"isRequired\": true,\n                    \"isShared\": false,\n                    \"defaultValueFloat\": 1\n                }\n              },\n              {\n                \"node\": {\n                    \"id\": \"bc/store/productModifier/128\",\n                    \"displayName\": \"Anniversary Date\",\n                    \"isRequired\": false,\n                    \"isShared\": false\n                }\n              },\n              {\n                \"node\": {\n                    \"id\": \"bc/store/productModifier/129\",\n                    \"displayName\": \"Custom-printed Image\",\n                    \"isRequired\": false,\n                    \"isShared\": false\n                }\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying BigCommerce Product Template Path\nDESCRIPTION: Shows the source path of the default BigCommerce product template file in the WordPress plugins directory.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: copy\nCODE:\n```\nwp-content/plugins/bigcommerce/templates/public/single-bigcommerce_product.php\n```\n\n----------------------------------------\n\nTITLE: Using strReplace Helper in Handlebars for String Manipulation\nDESCRIPTION: The strReplace helper replaces occurrences of a target substring with a new substring in a string, with optional control over how many replacements to make.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_92\n\nLANGUAGE: handlebars\nCODE:\n```\n{{strReplace subjectString targetSubstring newSubstring occurrenceSelection}}\n```\n\n----------------------------------------\n\nTITLE: Pushing a Theme with Auto-Activation and Deletion\nDESCRIPTION: Command combination for automated deployments that activates the theme and deletes the oldest if at the theme limit.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/upload.mdx#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nstencil push -a -d\n```\n\n----------------------------------------\n\nTITLE: English Language JSON Translation File\nDESCRIPTION: Example of an English language JSON file (en.json) containing translation key definitions for various parts of a Stencil theme.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/translation-keys.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"header\": {\n    \"welcome_back\": \"Welcome back, {name}\",\n    \"skip_to_main\": \"Skip to main content\"\n    },\n  \"cart\": {\n    \"continue_shopping\": \"Click here to continue shopping\",\n      //...\n    \"label\": \"Your Cart ({quantity, plural, one {# item} other {# items}})\",\n    \"is_empty\": \"Your cart is empty\",\n    \"coupon_code\": \"Coupon Code\",\n    \"discount\": \"Discount\",\n    \"gift_certificate\": \"Gift Certificate\",\n    \"freeshipping\": \"Free Shipping\",\n    \"reconfigure_product\": \"Configure '{name}'\",\n    \"shipping_peritem\": \"Per Item Shipping\"\n    },\n  \"common\": {\n    \"currency\": \"Select Currency: {code}\",\n    \"newsletter_signup\": \"Register for our newsletter\",\n    \"form_submit\": \"Submit\",\n    \"required\": \"Required\",\n    \"optional\": \"Optional\",\n    \"email_address\": \"Email Address\",\n    \"sign_up\": \"Register\",\n    \"login\": \"Sign in\",\n    \"logout\": \"Sign out\",\n    \"cart\": \"Cart\",\n    \"search\": \"Search\",\n    \"paginator\": {\n        \"page_of\": \"Page {current} of {total}\"\n      },\n    //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding B2B Headless Script Tag to BigCommerce Application\nDESCRIPTION: HTML script tag that needs to be added to the headless application for integrating with BigCommerce B2B functionality. The script requires store hash and channel ID parameters to connect to the specific channel created earlier.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/b2b-edition/headless.mdx#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  type=\"module\"\n  data-storehash=\"{STORE_HASH}\"\n  data-channelid=\"{CHANNEL_ID}\"\n  src=\"https://cdn.bundleb2b.net/b2b/production/storefront/headless.js\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Preview\nDESCRIPTION: Example URL for accessing the local preview server\nSOURCE: https://github.com/bigcommerce/docs/blob/main/guides/create-a-site-preview.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nex. localhost:3000/preview\n```\n\n----------------------------------------\n\nTITLE: Rendering Quick View Template in Handlebars\nDESCRIPTION: Default code for rendering a quick view product template in Stencil. This snippet demonstrates how to include a partial component for product view.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/dynamic-rendering.mdx#2025-04-16_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n<div class=\"modal-body quickView\">\n    {{> components/products/product-view schema=false}}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Post Limits and Summary - YAML\nDESCRIPTION: Sets parameters for blog posts using YAML front matter, including the limit on the number of recent posts and the character count for post summaries. These settings aid in controlling blog content visibility within the template.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter-reference.mdx#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nblog:\t\n  recent_posts:\n    limit: 5    # limits recent blog posts to 5\n    summary: 100  # displays 100 character summary of blog post\n```\n\n----------------------------------------\n\nTITLE: Using getImageSrcset Helper with Single 1x Size\nDESCRIPTION: Demonstrates how to use the getImageSrcset helper to specify a single image resolution, either by referencing a theme_settings value or by providing an inline size.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_54\n\nLANGUAGE: handlebars\nCODE:\n```\n{{getImageSrcset image 1x=theme_settings.zoom_size}}\n{{getImageSrcset image 1x=\"1280x800\"}}\n{{getImageSrcset image 1x=\"1280w\"}}\n```\n\n----------------------------------------\n\nTITLE: Starting Webpack Dev Server for Checkout Development\nDESCRIPTION: Command to start the webpack development server in watch mode for local development and testing of checkout implementation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/open-checkouts/guide.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev & npm run dev:server\n```\n\n----------------------------------------\n\nTITLE: Displaying Product and Inventory Data with Handlebars in BigCommerce Storefront\nDESCRIPTION: This Handlebars template renders the product and inventory data fetched by the GraphQL query. It displays the overall available inventory for the product, as well as detailed inventory information for each variant and location.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/guide/storefront.mdx#2025-04-16_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if gql.data.site.product}}\\n\\n<b>Available to Sell:</b> {{gql.data.site.product.inventory.aggregated.availableToSell}} <br></br>\\n\\n{{#each gql.data.site.product.variants.edges}}\\n    {{#with node}}\\n\\n        <b>Variant SKU: </b> {{sku}} <br></br>\\n        Total Available to Sell: {{inventory.aggregated.availableToSell}} <br></br>                     \\n\\n        {{#each inventory.byLocation.edges}}\\n        {{#with node}}\\n\\n        {{#if isInStock}}\\n        {{locationEntityCode}} has {{availableToSell}} in stock <br></br>\\n        {{/if}}   \\n            \\n        {{/with}}\\n        {{/each}}\\n    {{/with}}\\n{{/each}}\\n\\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Processing SKU Creation Webhook Payload in JSON\nDESCRIPTION: This snippet demonstrates the structure of a payload object for a SKU creation event. It includes the scope, store ID, SKU ID, associated product ID, and variant ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/sku/created\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"sku\",\n    \"id\": 461,\n    \"sku\": {\n      \"product_id\": 206,\n      \"variant_id\": 509\n    }\n  },\n  \"hash\": \"7a0866943b1f46cfda31c3218931f5aab83a4c73\",\n  \"created_at\": 1561480465,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SessionProvider from Context\nDESCRIPTION: Imports the SessionProvider component from a custom context module to provide session state throughout the application.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport SessionProvider from '../context/session';\n```\n\n----------------------------------------\n\nTITLE: Specifying the Platform for a BigCommerce Channel\nDESCRIPTION: HTTP request example demonstrating how to specify a headless storefront platform when creating a channel. This example uses 'deity' as the platform value.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/guide/storefronts.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/channels\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"name\": \"Deity PWA Storefront\",\n  \"type\": \"storefront\",\n  \"platform\": \"deity\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Layout Structure\nDESCRIPTION: This HTML code defines the basic structure of a layout using nested `div` elements with custom data attributes for layout and container identification. The data attributes are used to associate the HTML elements with specific layout configurations and styles.  The structure includes containers and sub-layouts, potentially generated by a drag-and-drop interface or visual layout editor.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/site-content.mdx#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n\"<div data-layout-id=\\\"6aa907cf-e2aa-46df-8804-79c74c7971e0\\\"><div data-sub-layout-container=\\\"085accf0-fbd0-4808-aad5-034b85a61a20\\\" data-layout-name=\\\"Layout\\\">\\n  <style data-container-styling=\\\"085accf0-fbd0-4808-aad5-034b85a61a20\\\">\\n    [data-sub-layout-container=\\\"085accf0-fbd0-4808-aad5-034b85a61a20\\\"] {\\n      box-sizing: border-box;\\n      display: flex;\\n      flex-wrap: wrap;\\n      z-index: 0;\\n      position: relative;\\n    }\\n    [data-sub-layout-container=\\\"085accf0-fbd0-4808-aad5-034b85a61a20\\\"]:after {\\n      background-position: center center;\\n      background-size: cover;\\n      z-index: auto content: \\\"\\\";\\n      display: block;\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      bottom: 0;\\n      right: 0;\\n    }\\n  </style>\\n  <div data-sub-layout=\\\"7b6e28e6-4ada-4e47-b70f-514fd4a74279\\\">\\n    <style data-column-styling=\\\"7b6e28e6-4ada-4e47-b70f-514fd4a74279\\\">\\n      [data-sub-layout=\\\"7b6e28e6-4ada-4e47-b70f-514fd4a74279\\\"] {\\n        display: flex;\\n        flex-direction: column;\\n        box-sizing: border-box;\\n        flex-basis: 100%;\\n        max-width: 100%;\\n        z-index: 0;\\n        justify-content: center;\\n        padding-right: 10.5px;\\n        padding-left: 10.5px;\\n        position: relative;\\n      }\\n      [data-sub-layout=\\\"7b6e28e6-4ada-4e47-b70f-514fd4a74279\\\"]:after {\\n        background-position: center center;\\n        background-size: cover;\\n        z-index: auto content: \\\"\\\";\\n        display: block;\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        bottom: 0;\\n        right: 0;\\n      }\\n      @media only screen and (max-width: 700px) {\\n        [data-sub-layout=\\\"7b6e28e6-4ada-4e47-b70f-514fd4a74279\\\"] {\\n          flex-basis: 100%;\\n          max-width: 100%;\\n        }\\n      }\\n    </style>\\n  </div>\\n</div>\\n<div data-sub-layout-container=\\\"5698827f-1451-42fd-9506-c9fc12aa7efa\\\" data-layout-name=\\\"Layout\\\">\\n  <style data-container-styling=\\\"5698827f-1451-42fd-9506-c9fc12aa7efa\\\">\\n    [data-sub-layout-container=\\\"5698827f-1451-42fd-9506-c9fc12aa7efa\\\"] {\\n      box-sizing: border-box;\\n      display: flex;\\n      flex-wrap: wrap;\\n      z-index: 0;\\n      position: relative;\\n    }\\n    [data-sub-layout-container=\\\"5698827f-1451-42fd-9506-c9fc12aa7efa\\\"]:after {\\n      background-position: center center;\\n      background-size: cover;\\n      z-index: auto content: \\\"\\\";\\n      display: block;\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      bottom: 0;\\n      right: 0;\\n    }\\n  </style>\\n  <div data-sub-layout=\\\"b26dbb81-5281-44ea-9621-3fcecf3dcff7\\\">\\n    <style data-column-styling=\\\"b26dbb81-5281-44ea-9621-3fcecf3dcff7\\\">\\n      [data-sub-layout=\\\"b26dbb81-5281-44ea-9621-3fcecf3dcff7\\\"] {\\n        display: flex;\\n        flex-direction: column;\\n        box-sizing: border-box;\\n        flex-basis: 100%;\\n        max-width: 100%;\\n        z-index: 0;\\n        justify-content: center;\\n        padding-right: 10.5px;\\n        padding-left: 10.5px;\\n        position: relative;\\n      }\\n      [data-sub-layout=\\\"b26dbb81-5281-44ea-9621-3fcecf3dcff7\\\"]:after {\\n        background-position: center center;\\n        background-size: cover;\\n        z-index: auto content: \\\"\\\";\\n        display: block;\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        bottom: 0;\\n        right: 0;\\n      }\\n      @media only screen and (max-width: 700px) {\\n        [data-sub-layout=\\\"b26dbb81-5281-44ea-9621-3fcecf3dcff7\\\"] {\\n          flex-basis: 100%;\\n          max-width: 100%;\\n        }\\n      }\\n    </style>\\n    <div data-widget-id=\\\"a49467eb-d5c0-47da-9dcc-4328efa8e6a4\\\" data-placement-id=\\\"18cc55cc-9364-40fb-802b-704e77c1cb25\\\" data-placement-status=\\\"ACTIVE\\\"><style>\\n  .sd-divider-wrapper-a49467eb-d5c0-47da-9dcc-4328efa8e6a4 {\\n    display: flex;\\n    height: 20px;\\n      align-items: center;\\n      justify-content: center;\\n      text-align: center;\\n  }\\n\\n  .sd-divider-a49467eb-d5c0-47da-9dcc-4328efa8e6a4 {\\n    height: 0;\\n    border-top: 1px;\\n    border-color: rgba(180, 186, 209, 1);\\n    border-style: solid;\\n    width: 100%;\\n    margin: 0;\\n  }\\n</style>\\n\\n<div class=\\\"sd-divider-wrapper-a49467eb-d5c0-47da-9dcc-4328efa8e6a4\\\">\\n  <hr class=\\\"sd-divider-a49467eb-d5c0-47da-9dcc-4328efa8e6a4\\\">\\n</div>\\n</div>\\n  </div>\\n</div>\\n<div data-sub-layout-container=\\\"4416b66c-49c7-4104-92cb-6226127012b6\\\" data-layout-name=\\\"Layout\\\">\\n  <style data-container-styling=\\\"4416b66c-49c7-4104-92cb-6226127012b6\\\">\\n    [data-sub-layout-container=\\\"4416b66c-49c7-4104-92cb-6226127012b6\\\"] {\\n      box-sizing: border-box;\\n      display: flex;\\n      flex-wrap: wrap;\\n      z-index: 0;\\n      position: relative;\\n    }\\n    [data-sub-layout-container=\\\"4416b66c-49c7-4104-92cb-6226127012b6\\\"]:after {\\n      background-position: center center;\\n      background-size: cover;\\n      z-index: auto content: \\\"\\\";\\n      display: block;\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      bottom: 0;\\n      right: 0;\\n    }\\n  </style>\\n  <div data-sub-layout=\\\"e1b20ec7-2edd-48e7-bde4-99d1ef2a583c\\\">\\n    <style data-column-styling=\\\"e1b20ec7-2edd-48e7-bde4-99d1ef2a583c\\\">\\n      [data-sub-layout=\\\"e1b20ec7-2edd-48e7-bde4-99d1ef2a583c\\\"] {\\n        display: flex;\\n        flex-direction: column;\\n        box-sizing: border-box;\\n        flex-basis: 50%;\\n        max-width: 50%;\\n        z-index: 0;\\n        justify-content: center;\\n        padding-right: 10.5px;\\n        padding-left: 10.5px;\\n        position: relative;\\n      }\\n      [data-sub-layout=\\\"e1b20ec7-2edd-48e7-bde4-99d1ef2a583c\\\"]:after {\\n        background-position: center center;\\n        background-size: cover;\\n        z-index: auto content: \\\"\\\";\\n        display: block;\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        bottom: 0;\\n        right: 0;\\n      }\\n      @media only screen and (max-width: 700px) {\\n        [data-sub-layout=\\\"e1b20ec7-2edd-48e7-bde4-99d1ef2a583c\\\"] {\\n          flex-basis: 100%;\\n          max-width: 100%;\\n        }\\n      }\\n    </style>\\n  </div>\\n  <div data-sub-layout=\\\"d89fe399-1bf9-4bc4-a47d-3fe048a29fdc\\\">\\n    <style data-column-styling=\\\"d89fe399-1bf9-4bc4-a47d-3fe048a29fdc\\\">\\n      [data-sub-layout=\\\"d89fe399-1bf9-4bc4-a47d-3fe048a29fdc\\\"] {\\n        display: flex;\\n        flex-direction: column;\\n        box-sizing: border-box;\\n        flex-basis: 50%;\\n        max-width: 50%;\\n        z-index: 0;\\n        justify-content: center;\\n        padding-right: 10.5px;\\n        padding-left: 10.5px;\\n        position: relative;\\n      }\\n      [data-sub-layout=\\\"d89fe399-1bf9-4bc4-a47d-3fe048a29fdc\\\"]:after {\\n        background-position: center center;\\n        background-size: cover;\\n        z-index: auto content: \\\"\\\";\\n        display: block;\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        bottom: 0;\\n        right: 0;\\n      }\\n      @media only screen and (max-width: 700px) {\\n        [data-sub-layout=\\\"d89fe399-1bf9-4bc4-a47d-3fe048a29fdc\\\"] {\\n          flex-basis: 100%;\\n          max-width: 100%;\\n        }\\n      }\\n    </style>\\n  </div>\\n</div></div>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Product Display Limits - YAML\nDESCRIPTION: Specifies limits for displaying featured, new, and top-selling products through YAML front matter configuration. Each product type has a limit of 5, which determines the number of items shown on the store pages using the stencil template.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter-reference.mdx#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nproducts:\n  featured:\n    limit: 5   #limits the number of featured products to 5\n  new:\n    limit: 5   #limits the number of new products to 5\n  top_sellers: \n    limit: 5   # limits the number of top sellers to 5\n```\n\n----------------------------------------\n\nTITLE: GraphQL Admin API Request URL Configuration\nDESCRIPTION: The base URL pattern for making GraphQL Admin API requests to BigCommerce, including the store hash parameter which uniquely identifies a store.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/msf-international-enhancements.mdx#2025-04-16_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\n```\n\n----------------------------------------\n\nTITLE: CSS Minification Example for Performance Optimization\nDESCRIPTION: These snippets demonstrate CSS minification, a technique for improving page load performance. The first example shows CSS with normal formatting including whitespace and line breaks, while the second shows the same CSS minified by removing unnecessary characters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/performance-optimization.mdx#2025-04-16_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.element-class {\npadding: 1px 5px 1px 5px;\nfont-family: Consolas, Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, \n    Bitstream Vera Sans Mono, Courier New, monospace, serif;\nbackground-color: #eeeeee;}\n```\n\nLANGUAGE: css\nCODE:\n```\n.element-class{padding: 1px 5px 1px 5px;font-family: Consolas, Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace, serif;background-color: #eee;}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Pickup Consignments via BigCommerce API\nDESCRIPTION: This snippet demonstrates how to retrieve pickup consignments for a specific order using the BigCommerce API. It includes the GET request and the expected JSON response structure.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_32\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{store_hash}}/v2/orders/{{order_id}}/consignments\nX-Auth-Token: {{access_token}}\nAccept: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pickups\": [\n    {\n      \"id\": 13,\n      \"pickup_method_id\": 2,\n      \"pickup_method_display_name\": \"Pickup Method 2\",\n      \"collection_instructions\": \"Pickup Method 2 instructions\",\n      \"collection_time_description\": \"Pickup Method 2 time\",\n      \"location\": {\n        \"id\": 2,\n        \"name\": \"location2\",\n        \"code\": \"LOCATION-2\",\n        \"address_line_1\": \"2802 Skyway Cir\",\n        \"address_line_2\": \"\",\n        \"city\": \"Austin\",\n        \"state\": \"Texas\",\n        \"postal_code\": \"78704\",\n        \"country_alpha2\": \"US\",\n        \"email\": \"location2@example.com\",\n        \"phone\": \"410123002\"\n      },\n      \"line_items\": [\n        {\n          \"url\": \"https://api.bigcommerce.com/stores/{{store_hash}}/v2/orders/126/products/22\",\n          \"resource\": \"/orders/126/products/22\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Creating Store Pickup Locations\nDESCRIPTION: The JSON response received after successfully creating a store pickup location. It contains a transaction ID that can be used for tracking or reference purposes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transaction_id\": \"f2e9c9da-8f35-403c-8f9f-d0b1b3302efbv\"\n}\n```\n\n----------------------------------------\n\nTITLE: Incrementing a Variable by One - JavaScript\nDESCRIPTION: Increases the value of a variable by one.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction incrementVar() { variable += 1; }\n```\n\n----------------------------------------\n\nTITLE: Invoking Translation Keys in Handlebars Templates\nDESCRIPTION: Examples of how to use the {{lang}} Handlebars helper to invoke translation keys in Stencil theme templates. This includes both simple and parameterized translations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/translation-keys.mdx#2025-04-16_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n{{lang \"translation.key\" optionalVariable=\"someValue\"}}\n\n<a href=\"{{ urls.account }}\">{{ lang \"header.welcome_back\" name=customer.name }}</a>\n```\n\n----------------------------------------\n\nTITLE: Password Reset Request Response Example\nDESCRIPTION: Example JSON response for the requestResetPassword mutation showing a successful password reset request with an empty errors array.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/customers.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"customer\": {\n      \"requestResetPassword\": {\n        \"errors\": []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Storewide Header in BigCommerce Checkout\nDESCRIPTION: Handlebars partial reference to replace the predefined header with a storewide header in the checkout page.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/checkout-confirmation.mdx#2025-04-16_snippet_2\n\nLANGUAGE: handlebars\nCODE:\n```\n{{> components/common/header }}\n```\n\n----------------------------------------\n\nTITLE: Example JWT Response from Current Customer API\nDESCRIPTION: Example of the JWT string returned by the Current Customer API when authenticated successfully with a client ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjdXN0b21lciI6eyJpZCI6NDkyNywiZW1haWwiOiJqb2huLmRvZUBnbWFpbC5jb20iLCJncm91cF9pZCI6IjYifSwiaXNzIjoiYmMvYXBwcyIsInN1YiI6ImFiYzEyMyIsImlhdCI6MTQ4MDgzMTg2MywiZXhwIjoxNDgwODMyNzYzLCJ2ZXJzaW9uIjoxLCJhdWQiOiI2c3YxNnRmeDNqNWdzb3BtNDJzczVkZDY3ZzJzcnZxIiwiYXBwbGljYXRpb25faWQiOiI2c3YxNnRhc2RncjJiNWhzNWRkNjdnMnNydnEiLCJzdG9yZV9oYXNoIjoiYWJjMTIzIiwib3BlcmF0aW9uIjoiY3VycmVudF9jdXN0b21lciJ9.uYTDTJzhDOog7PE1yLNeP6zDNdFMb91fS-NZrJpsts0\n```\n\n----------------------------------------\n\nTITLE: Implementing Load Endpoint in TypeScript\nDESCRIPTION: Handles app loading verification using getBCVerify and manages session data with JWT encoding.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { encodePayload, getBCVerify, setSession } from '../../lib/auth';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function load(req: NextApiRequest, res: NextApiResponse) {\n    try {\n        // Verify when app loaded (launch)\n        const session = await getBCVerify(req.query);\n        const encodedContext = encodePayload(session); // Signed JWT to validate/ prevent tampering\n\n        await setSession(session);\n        res.redirect(302, `/?context=${encodedContext}`);\n    } catch (error) {\n        const { message, response } = error;\n        res.status(response?.status || 500).json({ message });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Auth Type Definitions\nDESCRIPTION: TypeScript interface definitions for authentication types including User, SessionProps, and QueryParams.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface User {\n    id: number;\n    username?: string;\n    email: string;\n}\n\nexport interface SessionProps {\n    access_token?: string;\n    scope?: string;\n    user: User;\n    context: string;\n    store_hash?: string;\n    timestamp?: number;\n}\n\nexport interface QueryParams {\n    [key: string]: string | string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Setting Global Shared Modifier Options\nDESCRIPTION: The response structure returned after setting shared modifier options at the global level. It confirms the update by returning the ID of the updated shared product modifier.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"sharedProductModifiers\": {\n      \"setSharedProductModifiersInformation\": {\n        \"sharedProductModifiers\": [\n          {\n            \"id\": \"bc/store/sharedProductModifier/2\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Copy Environment Variables Template\nDESCRIPTION: Command to copy the sample environment variables file to create a new .env configuration file.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/point-of-sale.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncp .env.sample .env\n```\n\n----------------------------------------\n\nTITLE: Variable Decrement with decrementVar Helper in Handlebars\nDESCRIPTION: Shows how to use the decrementVar helper to decrease the value of a variable set by assignVar by 1. It takes a single parameter: the key of the variable to decrement.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_104\n\nLANGUAGE: handlebars\nCODE:\n```\n{{decrementVar key}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{decrementVar \"foo\"}}\n```\n\n----------------------------------------\n\nTITLE: Configuring App Component\nDESCRIPTION: Next.js App component implementation with BigDesign global styles\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-setup.mdx#2025-04-16_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyApp = ({ Component, pageProps }: AppProps) => (\n   <>\n       <GlobalStyles />\n       <Component {...pageProps} />\n   </>\n);\n \nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Order Status Update Webhook Payload\nDESCRIPTION: Example of the payload object sent by BigCommerce when an order status is updated, demonstrating the minimal data structure returned in webhook callbacks.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/overview.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\":\"11111\",\n \"producer\":\"stores/abcde\",\n \"scope\":\"store/order/statusUpdated\",\n \"data\":{\n    \"type\":\"order\",\n    \"id\":173331\n  },\n \"hash\":\"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n }\n```\n\n----------------------------------------\n\nTITLE: Plugin Code for Region Activation\nDESCRIPTION: Demonstrates a simple WordPress plugin that activates different channels and currency symbols based on query string parameters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/platform-integration/multi-channel.mdx#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: BC4WP: Query String Region Activation\n * Plugin URI: http://www.bigcommerce.com/wordpress\n * Description: Proof of concept for region activation by query string\n * Version: 0.5\n * Author: BigCommerce\n * Author URI: http://www.bigcommerce.com\n */\n\n// Enable multi channel capabilities\nadd_filter( 'bigcommerce/channels/enable-multi-channel', '__return_true' );\n\n// If ?region=uk\nif ( $_GET[ 'region' ] !== 'us' && ($_GET[ 'region' ] === 'uk' || strpos($_SERVER['HTTP_REFERER'], 'region=uk') !== false) ) {\n\n\t// switch to the uk channel\n\tadd_filter( 'bigcommerce/channel/current', function( $channel ) {\n\n        // NOTE: change 31 to the  term_id of your channel\n\t\treturn get_term( 31, \\BigCommerce\\Taxonomies\\Channel\\Channel::NAME );\n\t}, 10, 1 );\n\n\t// set currency code to GBP\n\tadd_filter( 'pre_option_' . 'bigcommerce_currency_code', function() {\n\t\treturn 'GBP';\n\t}, 10, 0 );\n\n\t// Set currency symbol to £\n\tadd_filter( 'pre_option_bigcommerce_currency_symbol', function() {\n\t\treturn '£';\n\t}, 10, 0 );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing URLs in Handlebars Templates\nDESCRIPTION: Basic syntax for accessing the URLs object in Handlebars templates. This object provides access to all storefront page URLs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/global-objects-and-properties.mdx#2025-04-16_snippet_11\n\nLANGUAGE: handlebars\nCODE:\n```\n{{urls}}\n```\n\n----------------------------------------\n\nTITLE: Using Handlebars to Access Variables in Templates\nDESCRIPTION: A basic example of Handlebars.js syntax showing how to access and display a variable called 'title' within HTML markup. This demonstrates the core templating functionality that allows for dynamic content in Stencil themes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/start/tech-stack.mdx#2025-04-16_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n<div class=\"entry\">\n  <h1>{{title}}</h1>\n  <div class=\"body\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Response for BigCommerce Webhook Subscription\nDESCRIPTION: This JSON response shows the successful creation of a Pub/Sub webhook subscription. It includes details such as the destination topic, client ID, creation timestamp, webhook ID, scope, status, and update timestamp.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/pubsub-webhooks-overview.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n        \"webhook\": {\n            \"createPubSubWebhook\": {\n                \"errors\": [],\n                \"webhook\": {\n                    \"destination\": \"projects/projectName/topics/webhookName\",\n                    \"clientId\": \"a32wjpnre83zastlhhq0w0mqkygq7vt\",\n                    \"createdAt\": \"2025-02-19T16:05:22Z\",\n                    \"id\": \"bc/store/webhook/29098403\",\n                    \"scope\": \"store/metafield/created\",\n                    \"status\": \"ACTIVE\",\n                    \"updatedAt\": \"2025-02-19T16:05:22Z\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox Type in schema.json for BigCommerce Theme Styles\nDESCRIPTION: JSON configuration for checkbox data type used to toggle theme settings with boolean values. Requires type, label, and id fields, with an optional force_reload field that allows Page Builder to reload when the setting changes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/styles-and-properties.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n \"type\": \"checkbox\",\n \"label\": \"i18n.HideBreadcrumbs\",\n \"force_reload\": true,\n \"id\": \"hide_breadcrumbs\"\n},\n```\n\n----------------------------------------\n\nTITLE: Generating SRI Hash with OpenSSL for Custom Checkout (Bash)\nDESCRIPTION: This command generates a base64-encoded SHA256 Subresource Integrity (SRI) hash for the custom checkout entry file. The hash is used to ensure the integrity of the script when loaded.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/open-checkouts/pci-compliance-guide.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl dgst -sha256 -binary autoloader.js | openssl base64 -A\n```\n\n----------------------------------------\n\nTITLE: Scope Filters for Subscription Queries - JSON\nDESCRIPTION: This JSON object demonstrates how to use scope filters to retrieve subscriptions for a particular scope, specifying both 'scopeId' and 'scopeType' in the filters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"filters\": {\n       \"scopeId\": \"bc/account/scope/9godyw034y\",\n       \"scopeType\": \"STORE\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reference Fields in schema.json for BigCommerce Theme Styles - ShowProductSaleBadges\nDESCRIPTION: JSON configuration showing how to implement a select field that other fields can reference. This example creates a product sale badges selector that can be referenced by other settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/styles-and-properties.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n \"type\": \"select\",\n \"label\": \"i18n.ShowProductSaleBadges\",\n \"id\": \"product_sale_badges\",\n \"force_reload\": true,\n \"options\": [\n   {\n     \"value\": \"none\",\n     \"label\": \"i18n.None\"\n   },\n   {\n     \"value\": \"topleft\",\n     \"label\": \"i18n.TopLeft\"\n   },\n   {\n     \"value\": \"sash\",\n     \"label\": \"i18n.Diagonal\"\n   },\n   {\n     \"value\": \"burst\",\n     \"label\": \"i18n.Burst\"\n   }\n ]\n},\n```\n\n----------------------------------------\n\nTITLE: OAuth Scopes Table for Unified Partner Billing in Markdown\nDESCRIPTION: A markdown table listing OAuth scopes related to Unified Partner Billing, including UI names, scope values, parameters, descriptions, and associated resources.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| UI Name | Scopes | Parameter | Description | Resources |\n|:--------|:-----------|:----------|:------------|:----------|\n| Subscriptions | cancel | `account_subscriptions_cancel` | View or cancel account-level subscriptions | [GraphQL Account API](/docs/graphql-account/users-overview) |\n| Subscriptions | read | `account_subscriptions_read` | View account-level subscriptions | [GraphQL Account API](/docs/graphql-account/users-overview) |\n| Checkouts | modify | `account_checkouts_create` | Create account-level checkouts | [GraphQL Account API](/docs/graphql-account/users-overview) |\n| Checkouts | read-only | `account_checkouts_read` | View account-level checkouts | [GraphQL Account API](/docs/graphql-account/users-overview) |\n```\n\n----------------------------------------\n\nTITLE: Initializing Node Project\nDESCRIPTION: Command to initialize a new Node.js project\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/customer-login.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init\n```\n\n----------------------------------------\n\nTITLE: Performing a Dry Run of SCSS Autofix\nDESCRIPTION: Executes the scss-autofix command with the dry run option to preview potential changes without saving them.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/node-sass.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nstencil scss-autofix --dry\n```\n\n----------------------------------------\n\nTITLE: Defining Featured Products Limit in Front Matter\nDESCRIPTION: Front Matter configuration that declares and limits the number of featured products to be displayed on a page. It uses a theme setting variable to control the product count.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/global-objects-and-properties.mdx#2025-04-16_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nproducts:\n  [...]\n  featured:\n    limit: {{theme_settings.homepage_featured_products_count}} //limits the number of featured products to be displayed.\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure for Cornerstone Themes\nDESCRIPTION: The code snippet shows the top-level directory structure for a BigCommerce Cornerstone-based theme, listing main directories and files essential for theme development.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/directory-structure.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n.\n├── assets/\n├── lang/\n├── meta/\n├── templates/\n├── config.json\n├── schema.json\n└── schemaTranslations.json\n```\n\n----------------------------------------\n\nTITLE: HTML Manipulation Helpers in Handlebars\nDESCRIPTION: HTML-specific helpers for creating lists, sanitizing content, and generating thumbnail images. Includes sanitize, ul, ol, and thumbnailImage helpers for HTML content manipulation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_28\n\nLANGUAGE: handlebars\nCODE:\n```\n{{sanitize html}}\n{{#ul}}...{{/ul}}\n{{#ol}}...{{/ol}}\n{{thumbnailImage src alt}}\n```\n\n----------------------------------------\n\nTITLE: Creating Shopper Profiles via POST Request\nDESCRIPTION: Creates shopper profiles for registered customers by sending a POST request with customer IDs to the shopper-profiles endpoint.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/segments/user-guide.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/shopper-profiles\nX-Auth Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"customer_id\": 1\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Customer Data Access in PHP\nDESCRIPTION: Shows how to create a Customer object and access customer-specific information\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/themes/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$customer    = new \\BigCommerce\\Accounts\\Customer( get_current_user_id() );\n$customer_id = $customer->get_customer_id();\n```\n\n----------------------------------------\n\nTITLE: Assets Directory Structure for Theme Resources\nDESCRIPTION: This code snippet illustrates the structure of the 'assets' directory within a BigCommerce theme, outlining subdirectories for fonts, icons, images, JavaScript, and SCSS files.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/directory-structure.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n├── assets\n│   ├── fonts               # theme fonts\n│   ├── icons               # logos and ui icons\n│   ├── img                 # theme images\n│   │   ├── payment-methods # payment method icons\n│   │   ├── vendor          # third-party lib icons\n│   ├── js                  # javascript\n│   │   ├── test-unit       # tests\n│   │   ├── theme           # global and page level js\n│   │   └── app.js          # main js file; page js mapped here\n│   └── scss                # Sassy CSS files\n│       ├── components      # scss for ui components\n│       ├── fonts           # scss for fonts\n│       ├── layouts         # scss for layouts\n│       ├── settings        # scss variable definitions\n│       ├── tools           # scss functions\n│       ├── utilities       # scss utilities\n│       ├── vendor          # third-party lib scss\n```\n\n----------------------------------------\n\nTITLE: Adding New Translation Key to Spanish JSON File\nDESCRIPTION: This snippet shows the addition of the 'new_hours' key to the Spanish language file, with the corresponding translation in Spanish.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/tutorial.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"header\": {\n        \"welcome_back\": \"Bienvenidos, {name}\",\n        \"skip_to_main\": \"Saltar a la principal\",\n        \"new_hours\": \"Horario de verano: {hours}\"\n    },\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the Next.js development server\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-setup.mdx#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Site Webhook Payload Structure in JSON\nDESCRIPTION: Example payload structure for site-related webhook events, showing the format when a site is updated, created, or deleted. Contains store ID, producer, timestamp, scope, and site-specific data.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\": \"11111\",\n \"producer\": \"stores/abcde\",\n \"created_at\": 1641641646,\n \"scope\": \"store/channel/1/settings/site/updated\",\n  \"data\": {\n    \"site_id\": 1001 // ID of the site\n  },\n \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Extra-Small Blue or Medium Blue Item Promotion - JSON\nDESCRIPTION: This JSON response snippet details the promotion for extra-small blue or medium blue items, providing rules for free shipping and customer eligibility.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/product.mdx#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 43,\n    \"name\": \"Buy extra-small blue or medium blue item and receive free shipping\",\n    \"created_from\": \"api\",\n    \"customer\": {\n      \"group_ids\": [],\n      \"minimum_order_count\": 0,\n      \"excluded_group_ids\": [],\n      \"segments\": null\n    },\n    \"rules\": [\n      {\n        \"action\": {\n          \"shipping\": {\n            \"free_shipping\": true,\n            \"zone_ids\": [\n              1\n            ]\n          }\n        },\n        \"apply_once\": true,\n        \"stop\": false,\n        \"condition\": {\n          \"cart\": {\n            \"items\": {\n              {\n                \"product_option\": {\n                  \"type\": \"string_match\",\n                  \"name\": \"Size\",\n                  \"values\": [\n                    \"XS\",\n                    \"M\"\n                  ]\n                }\n              },\n              {\n                \"product_option\": {\n                  \"type\": \"string_match\",\n                  \"name\": \"Color\",\n                  \"values\": [\n                    \"Blue\"\n                  ]\n                }\n              }\n            },\n            \"minimum_quantity\": 1\n          }\n        }\n      }\n    ],\n    \"notifications\": [],\n    \"stop\": false,\n    \"currency_code\": \"USD\",\n    \"redemption_type\": \"AUTOMATIC\",\n    \"shipping_address\": null,\n    \"current_uses\": 0,\n    \"max_uses\": null,\n    \"start_date\": \"2022-07-21T20:03:22+00:00\",\n    \"end_date\": null,\n    \"status\": \"ENABLED\",\n    \"schedule\": null,\n    \"can_be_used_with_other_promotions\": true\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Header Scripts in BigCommerce Order Confirmation Template\nDESCRIPTION: Handlebars statements to enable header scripts in the order confirmation template (order-confirmation.html). This should be added between existing statements.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/checkout-confirmation.mdx#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\">\n    window.language = {{{langJson 'optimized_checkout'}}};\n</script>\n\n{{{head.scripts}}}\n\n{{/partial}}\n\n{{#partial \"page\"}}\n```\n\n----------------------------------------\n\nTITLE: Adding Global Region to Home Page Template in HTML\nDESCRIPTION: This code snippet shows how to add a global region called 'below_content--global' to the home.html template file in a BigCommerce theme. It demonstrates the placement of the global region alongside other existing regions and components.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/global-regions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"main full\">\n    {{#if products.featured}}\n        {{> components/products/featured products=products.featured columns=theme_settings.homepage_featured_products_column_count}}\n    {{/if}}\n    {{{region name=\"home_below_featured_products\"}}}\n\n    {{#if products.top_sellers}}\n        {{> components/products/top products=products.top_sellers columns=theme_settings.homepage_top_products_column_count}}\n    {{/if}}\n    {{{region name=\"home_below_top_products\"}}}\n\n    {{#if products.new}}\n        {{> components/products/new products=products.new columns=theme_settings.homepage_new_products_column_count}}\n    {{/if}}\n    {{{region name=\"home_below_new_products\"}}}\n    {{{region name=\"below_content--global\"}}} \n</div>\n```\n\n----------------------------------------\n\nTITLE: Response for Removing Shared Product Modifier Overrides in BigCommerce\nDESCRIPTION: This JSON response confirms the successful removal of shared product modifier overrides. It returns the ID of the affected shared product modifier.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-modifier-options.mdx#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"sharedProductModifiers\": {\n      \"removeSharedProductModifiersOverrides\": {\n        \"sharedProductModifiers\": [\n          {\n            \"id\": \"bc/store/sharedProductModifier/1\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Channel Menus for Navigation in BigCommerce\nDESCRIPTION: This HTTP request creates navigation sections for a channel using the Channel Menus API. It defines both protected BigCommerce sections and custom app sections to enhance the app's integration within the BigCommerce control panel.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/quick-start.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/channels/{{CHANNEL_ID}}/channel-menus\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n    \"bigcommerce_protected_app_sections\": [\n      \"domains\",\n      \"currencies\",\n      \"storefront_settings\"\n    ],\n    \"custom_app_sections\": [\n      {\n        \"title\": \"Overview\",\n        \"query_path\": \"overview\"\n      }\n    ]  \n}\n```\n\n----------------------------------------\n\nTITLE: Gift Certificate Form Shortcode\nDESCRIPTION: WordPress shortcode for displaying the gift certificate purchase form.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/start/plugin-settings.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shortcode\nCODE:\n```\n[bigcommerce_gift_form]\n```\n\n----------------------------------------\n\nTITLE: Debugging Product Sync State Message\nDESCRIPTION: Example of a notice message that appears when the product sync handler cannot be found for the completed state. This indicates an issue with the product synchronization process.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/platform-integration/unexpected-behavior.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nBigCommerce.NOTICE: No handler found for current import state {\"state\":\"completed\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer with Abandoned Cart Email Notifications in BigCommerce\nDESCRIPTION: This HTTP request creates a customer account with abandoned cart saver notifications enabled. It includes customer personal information, address details, and channel configuration.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/abandoned-carts.mdx#2025-04-16_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/customers\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n[\n{\n  \"email\": \"test_user@bigcommerce.com\",\n  \"first_name\": \"Jane\",\n  \"last_name\": \"Doe\",\n  \"addresses\": [\n      {\n        \"address1\": \"123 Main St\",\n        \"address2\": \"\",\n        \"address_type\": \"residential\",\n        \"city\": \"Austin\",\n        \"country_code\": \"US\",\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"phone\": \"512-111-0000\",\n        \"postal_code\": \"78701\",\n        \"state_or_province\": \"Texas\"\n      }\n    ],\n  \"accepts_product_review_abandoned_cart_emails\": true,\n  \"origin_channel_id\": 773240,\n  \"channel_ids\": [\n      773240\n    ]\n}\n]\n```\n\n----------------------------------------\n\nTITLE: Deleting Shopper Profiles via DELETE Request\nDESCRIPTION: Deletes specified shopper profiles using a DELETE request with optional profile IDs as query parameters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/segments/user-guide.mdx#2025-04-16_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nDELETE https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/shopper-profiles\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Installing node-bigcommerce Module\nDESCRIPTION: This command installs the BigCommerce node client from GitHub, which is necessary for authenticating and using the app with the BigCommerce API.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-connect.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install github:bigcommerce/node-bigcommerce\n```\n\n----------------------------------------\n\nTITLE: Installing npm packages for React customization in BigCommerce\nDESCRIPTION: This snippet outlines the installation of necessary npm packages for building a React-based coupon drawer component in a BigCommerce theme. Dependencies include React, React DOM, and Material UI components.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/react.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# navigate into theme dir\ncd ~/path/to/theme/dir\n\n# install dependencies\nnpm install react react-dom @mui/material @mui/styles @emotion/react @emotion/styled\nnpm install --save-dev @babel/preset-react\n```\n\n----------------------------------------\n\nTITLE: Processing Product Variant Metafield Creation Webhook Payload in JSON\nDESCRIPTION: This snippet illustrates the structure of a payload object for a product variant metafield creation event. It includes the scope, store ID, metafield ID, resource ID (variant ID), and resource type.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/metafield/created\",\n  \"store_id\": \"1001197568\",\n  \"data\": {\n    \"metafield_id\": 12,\n    \"resource_id\": \"118\",\n    \"resource_type\": \"variant\"\n  },\n  \"hash\": \"60f42bd247b52f0647cbd16b1205c84260287141\",\n  \"created_at\": 1683305167,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables Template\nDESCRIPTION: Shell command to copy the sample environment variables file to create a new .env configuration\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/subscriptions.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncp .env.sample .env\n```\n\n----------------------------------------\n\nTITLE: Initializing Stencil Configuration and Starting Live Preview\nDESCRIPTION: Commands to navigate to the theme directory, install modules, create a configuration file with store credentials, and start the live preview server. This enables real-time theme development.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/development-server.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# move into the theme's directory\ncd ~/path/to/theme/dir\n\n# install theme modules (if you haven't already)\nnpm install\n\n# create `.stencil` or `config.stencil.json` configuration file (if using Stencil V3.1 release or later)\nstencil init --url https://yourstore.com/ --token 19d3ae6-dc15-4af9-bead-a2c703aa7b --port 3000\n\n# serve a live preview of the theme:\nstencil start\n```\n\n----------------------------------------\n\nTITLE: Translations for Page Builder Settings in JSON Format\nDESCRIPTION: This JSON snippet provides translations for various settings used in the page builder, mapping default and localized strings to their respective keys.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/directory-structure.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"i18n.Global\": {\n    \"default\": \"Global\",\n    \"fr\": \"Global\",\n    \"it\": \"Globale\",\n    \"uk\": \"Глобально\",\n    \"zh\": \"全局\"\n  },\n  \"i18n.BackgroundAndLines\": {\n    \"default\": \"Background and lines\",\n    \"fr\": \"Arrière-plan et lignes\",\n    \"it\": \"Sfondo e linee\",\n    \"uk\": \"Фон та лінії\",\n    \"zh\": \"背景和线条\"\n  },\n  \"i18n.BannerBackground\": {\n    \"default\": \"Banner background\",\n    \"fr\": \"Bannière de l’arrière-plan\",\n    \"it\": \"Sfondo del banner\",\n    \"uk\": \"Фон банеру\",\n    \"zh\": \"横幅背景\"\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Limits for Product Attributes - YAML\nDESCRIPTION: Uses YAML front matter to set display limits for product-related data including videos, images, reviews, and related products. This ensures controlled data rendering on product pages.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter-reference.mdx#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nproduct:\n  videos:\n    limit: 5           # limits videos to 5\n  images:\n    limit: 5           # limits images to 5\n  reviews:\n    limit: 250         # limits reviews to 250\n  related_products:\n    limit: 10          # limits related products by name to 10\n  similar_by_views:\n      limit: 10        # limits similar products by views to 10\n```\n\n----------------------------------------\n\nTITLE: Location Details Response from BigCommerce API (JSON)\nDESCRIPTION: This JSON response example shows the structure of the data returned when retrieving location details. It includes information such as location IDs, codes, labels, operating hours, addresses, and special hours for multiple locations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 2,\n      \"code\": \"DTOWN_PARK_ST\",\n      \"label\": \"Downtown Location - Park Lane\",\n      \"description\": \"Customer-facing additional details about this location.\",\n      \"managed_by_external_source\": false, \n      \"type_id\": \"PHYSICAL\",    \n      \"enabled\": true,\n      \"operating_hours\": {\n        \"sunday\": {\n          \"open\": false,\n          \"opening\": \"00:00\",\n          \"closing\": \"00:00\"\n        },\n        \"monday\": {\n          \"open\": true,\n          \"opening\": \"09:00\",\n          \"closing\": \"17:00\"\n        },\n        \"tuesday\": {\n          \"open\": true,\n          \"opening\": \"09:00\",\n          \"closing\": \"17:00\"\n        },\n        \"wednesday\": {\n          \"open\": true,\n          \"opening\": \"09:00\",\n          \"closing\": \"17:00\"\n        },\n        \"thursday\": {\n          \"open\": true,\n          \"opening\": \"09:00\",\n          \"closing\": \"17:00\"\n        },\n        \"friday\": {\n          \"open\": true,\n          \"opening\": \"09:00\",\n          \"closing\": \"17:00\"\n        },\n        \"saturday\": {\n          \"open\": false,\n          \"opening\": \"00:00\",\n          \"closing\": \"00:00\"\n        }\n      },\n      \"time_zone\": \"Etc/UTC\",\n      \"created_at\": \"2022-01-01T00:00:00.0001\",\n      \"updated_at\": \"2022-02-02T00:00:00.0001\",\n      \"address\": {\n        \"address1\": \"100 Park Lane\",\n        \"address2\": \"\",\n        \"city\": \"Austin\",\n        \"state\": \"TX\",\n        \"zip\": \"78726\",\n        \"email\": \"jane.doe@bigcommerce.com\",\n        \"phone\": \"+15128654500\",\n        \"geo_coordinates\": {\n          \"longitude\": -97.849560,\n          \"latitude\": 30.404500\n        }\n        \"country_code\": \"US\"\n      },\n      \"storefront_visibility\": true,\n      \"special_hours\": [\n        {\n          \"label\": \"Christmas Eve\",\n          \"date\": \"2022-12-25T00:00:00.0001\",\n          \"open\": true,\n          \"opening\": \"00:00\",\n          \"closing\": \"09:00\",\n          \"all_day\": false,\n          \"annual\": false\n        }\n      ]\n    },\n    {\n      \"id\": 3,\n      \"code\": \"UPTOWN_MAYFAIR)LANE\",\n      \"label\": \"Uptown Location - Mayfair Lane\",\n      \"description\": \"Customer-facing additional details about this location.\",\n      \"managed_by_external_source\": false, \n      \"type_id\": \"PHYSICAL\",    \n      \"enabled\": true,\n      \"operating_hours\": {\n        \"sunday\": {\n          \"open\": false,\n          \"opening\": \"00:00\",\n          \"closing\": \"00:00\"\n        },\n        \"monday\": {\n          \"open\": true,\n          \"opening\": \"09:00\",\n          \"closing\": \"17:00\"\n        },\n        \"tuesday\": {\n          \"open\": true,\n          \"opening\": \"09:00\",\n          \"closing\": \"17:00\"\n        },\n        \"wednesday\": {\n          \"open\": true,\n          \"opening\": \"09:00\",\n          \"closing\": \"17:00\"\n        },\n        \"thursday\": {\n          \"open\": true,\n          \"opening\": \"09:00\",\n          \"closing\": \"17:00\"\n        },\n        \"friday\": {\n          \"open\": true,\n          \"opening\": \"09:00\",\n          \"closing\": \"17:00\"\n        },\n        \"saturday\": {\n          \"open\": false,\n          \"opening\": \"00:00\",\n          \"closing\": \"00:00\"\n        }\n      },\n      \"time_zone\": \"Etc/UTC\",\n      \"created_at\": \"2022-01-01T00:00:00.0001\",\n      \"updated_at\": \"2022-02-02T00:00:00.0001\",\n      \"address\": {\n        \"address1\": \"100 Park Lane\",\n        \"address2\": \"\",\n        \"city\": \"Austin\",\n        \"state\": \"TX\",\n        \"zip\": \"78726\",\n        \"email\": \"jane.doe@bigcommerce.com\",\n        \"phone\": \"+15128654500\",\n        \"geo_coordinates\": {\n          \"longitude\": -120.123456,\n          \"latitude\": 60.987654\n        }\n        \"country_code\": \"US\"\n      },\n      \"storefront_visibility\": true,\n      \"special_hours\": [\n        {\n          \"label\": \"Christmas Eve\",\n          \"date\": \"2022-12-25\",\n          \"open\": true,\n          \"opening\": \"00:00\",\n          \"closing\": \"09:00\",\n          \"all_day\": false,\n          \"annual\": false\n        }\n      ]\n    }\n  ],\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Variables for Fetch Checkout Query\nDESCRIPTION: These are the variables required for the fetch checkout query, containing the checkout ID to be retrieved.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"checkoutId\": \"bc/account/checkout/ab0a8354-3caf-423b-a3be-42a59c97fcf5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating with for Helper in Handlebars for Month Names\nDESCRIPTION: Example of using the for helper to iterate from 1 to 12, generating month names by accessing language strings with dynamic indices.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_63\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#for 1 12}}\n    {{lang (concat 'common.short_months.' $index)}}\n{{/for}}\n```\n\n----------------------------------------\n\nTITLE: Declaring Top Sellers Object in Handlebars Template Front Matter\nDESCRIPTION: Example of how to declare the global products.top_sellers object in the front matter of a Handlebars template file. This allows access to the top sellers data on the page.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/global-objects-and-properties.mdx#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nproducts:\n  top_sellers:\n```\n\n----------------------------------------\n\nTITLE: System Cron Job for WordPress Events\nDESCRIPTION: Cron configuration to run WordPress cron events from command line every minute.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/deployment/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n* * * * * /usr/bin/wp cron event run --due-now --quiet > /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Assigning Option Set to Product with V2 API in JSON\nDESCRIPTION: This snippet shows how to assign an option set to a product using the V2 API. It's part of the process to create a product with variants and SKUs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"option_set_id\": 20\n}\n```\n\n----------------------------------------\n\nTITLE: Installing POS Foundation Packages with npm\nDESCRIPTION: Command to install the default packages for the POS Foundation project using npm. This should be run in the root directory of the cloned repository.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/point-of-sale.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Overview in Shell\nDESCRIPTION: Shows the basic directory structure for email template schemas, including data directory and YAML schema files.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/emails/object-reference/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n.\n├── data                                   # json data for generating and updating yaml schema\n├── _all.yml                               # Groups models together for docs\n├── account_details_changed_email.yml      # Individual email template models\n├── ...\n```\n\n----------------------------------------\n\nTITLE: Displaying New Products with Handlebars\nDESCRIPTION: This snippet uses Handlebars to check if there are new products available, and if so, it renders the new products component, passing in the relevant products data and column count from theme settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter.mdx#2025-04-16_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if products.new}}\n  {{> components/products/new products=products.new columns=theme_settings.homepage_new_products_column_count}}\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Declaring Form Error Messages\nDESCRIPTION: Constant object defining validation error messages for required form fields.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst FormErrors = {\n    name: 'Product name is required',\n    price: 'Default price is required',\n};\n```\n\n----------------------------------------\n\nTITLE: Converting String to Lowercase - JavaScript\nDESCRIPTION: Converts all characters in a string to their lowercase representation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction toLowerCase(str) { return str.toLowerCase(); }\n```\n\n----------------------------------------\n\nTITLE: Checking NVM Node.js Versions in Shell\nDESCRIPTION: This command lists the installed Node.js versions in the NVM directory. It's used to troubleshoot 'stencil: command not found' errors by identifying available Node.js versions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/unexpected-behavior.mdx#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nls ~/.nvm/versions/node\n```\n\n----------------------------------------\n\nTITLE: Handling Customer Update Response in JSON\nDESCRIPTION: This JSON response demonstrates a successful customer update operation, returning the updated first name and last name of the customer.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/customers.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"customer\": {\n      \"updateCustomer\": {\n        \"customer\": {\n          \"firstName\": \"Jonathan\",\n          \"lastName\": \"Smith\"\n        },\n        \"errors\": []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Inventory Across Locations\nDESCRIPTION: Shows how to get aggregate inventory information for a specific product across all locations using variant ID filtering.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/configuration.mdx#2025-04-16_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{store_hash}/v3/inventory/items?variant_id=123\nX-Auth-Token: {{access_token}}\nAccept: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"identity\": {\n        \"product_id\": 123\n      },\n      \"locations\": [\n        {\n          \"location_id\": 1,\n          \"location_code\": \"BC-LOCATION-1\",\n          \"location_name\": \"Default location\",\n          \"available_to_sell\": 10,\n          \"total_inventory_onhand\": 11,\n          \"location_enabled\": true,\n          \"settings\": {\n            \"safety_stock\": 1,\n            \"is_in_stock\": true,\n            \"warning_level\": 1\n          }\n        }\n      ]\n    }\n  ],\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Database Modules in TypeScript\nDESCRIPTION: Imports Firebase and MySQL database modules for use in the main database configuration file.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as firebaseDB from './dbs/firebase';\nimport * as sqlDB from './dbs/mysql';\nimport { Db } from '../types';\n```\n\n----------------------------------------\n\nTITLE: Applying SCSS Fixes and Revalidating Theme\nDESCRIPTION: These commands apply the necessary SCSS formatting fixes to ensure compatibility with the latest Node.js version, then validate the updated theme code.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/unexpected-behavior.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nstencil scss-autofix \nstencil bundle\n```\n\n----------------------------------------\n\nTITLE: Truncating a String - JavaScript\nDESCRIPTION: Truncates a string to a specific length, adding ellipsis if necessary.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction truncate(str, length) { return str.length > length ? str.slice(0, length) + '...' : str; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Menu Navigation Items\nDESCRIPTION: This HTTP request creates navigation menu items for a POS channel's control panel. It defines custom app sections that will appear in the channel's dedicated menu, including an Overview section with a specific query path for routing.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/draft/channels-pos-tutorial.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/channels/{{CHANNEL_ID}}/channel-menus\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"bigcommerce_protected_app_sections\": [],\n  \"custom_app_sections\": [\n    {\n      \"title\": \"Overview\",\n      \"query_path\": \"overview\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Product Import Skip Message in BigCommerce for WordPress\nDESCRIPTION: Debug log message indicating that a product import was skipped because the product already exists in WordPress. This is informational and not an actual error.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/platform-integration/unexpected-behavior.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nBigCommerce.DEBUG: Product entity exists. Skipping. {\"product_id\":xxxx,\"channel_id\":\"xxxxx\"} []\n```\n\n----------------------------------------\n\nTITLE: PHP Extension Error in BigCommerce for WordPress Plugin\nDESCRIPTION: PHP fatal error showing a missing 'ctype_alpha' function, suggesting PHP extension issues. This error occurs in the Product_Builder.php file and may be resolved by checking PHP extensions or contacting support.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/platform-integration/unexpected-behavior.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nPHP Fatal error:  Uncaught Error: Call to undefined function BigCommerce\\Import\\Importers\\Products\\ctype_alpha() in path/wp-content/plugins/bigcommerce/src/BigCommerce/Import/Importers/Products/Product_Builder.php:461 \n```\n\n----------------------------------------\n\nTITLE: Starting Stencil Development Server\nDESCRIPTION: Command to start the local development server for the Stencil theme.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/storefront-selector.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nstencil start\n```\n\n----------------------------------------\n\nTITLE: Iterating AddThis Social Sharing Buttons\nDESCRIPTION: Demonstrates how to iterate through AddThis social sharing buttons using Handlebars each helper.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/global-objects-and-properties.mdx#2025-04-16_snippet_9\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#each settings.add_this.buttons}}\n  {{service}}\n  {{annotations}}\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Using concat Helper in Handlebars for String Concatenation\nDESCRIPTION: The concat helper concatenates two strings into a single string without adding spaces or separators between them.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_76\n\nLANGUAGE: handlebars\nCODE:\n```\n{{concat value otherValue}}\n```\n\n----------------------------------------\n\nTITLE: OAuth Scopes Table in Markdown\nDESCRIPTION: Markdown table defining the OAuth scopes available for the Translations Admin GraphQL API, including permission levels and descriptions for Store Translations access.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/translations/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Permission | Description |\n|:-----|:-----------|:------------|\n| Store Translations | read-only | View translation details |\n| Store Translations | modify | View and modify translation details |\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Storewide Percentage Discount Rule in BigCommerce\nDESCRIPTION: JSON response after creating a tiered percentage discount promotion, showing the full rule configuration with default settings applied. The response includes promotion details like ID, creation source, status, and complete rule specifications.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/multiple-rules.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  {\n    \"data\": {\n      \"id\": 26,\n      \"name\": \"Up to 50% off storewide (50% off category X items and 40% off everything else)\",\n      \"created_from\": \"api\",\n      \"customer\": {\n        \"group_ids\": [],\n        \"minimum_order_count\": 0,\n        \"excluded_group_ids\": [],\n        \"segments\": null\n      },\n      \"rules\": [\n        {\n          \"action\": {\n            \"cart_items\": {\n              \"discount\": {\n                \"percentage_amount\": \"50\"\n              },\n              \"strategy\": \"LEAST_EXPENSIVE\",\n              \"add_free_item\": true,\n              \"as_total\": false,\n              \"include_items_considered_by_condition\": false,\n              \"exclude_items_on_sale\": false,\n              \"items\": {\n                \"categories\": [\n                  36\n                ]\n              }\n            }\n          },\n          \"apply_once\": true,\n          \"stop\": false\n        },\n        {\n          \"action\": {\n            \"cart_items\": {\n              \"discount\": {\n                \"percentage_amount\": \"40\"\n              },\n              \"strategy\": \"LEAST_EXPENSIVE\",\n              \"add_free_item\": true,\n              \"as_total\": false,\n              \"include_items_considered_by_condition\": false,\n              \"exclude_items_on_sale\": false,\n              \"items\": {\n                \"not\": {\n                  \"categories\": [\n                    24\n                  ]\n                }\n              }\n            }\n          },\n          \"apply_once\": true,\n          \"stop\": false\n        }\n      ],\n      \"notifications\": [],\n      \"stop\": false,\n      \"currency_code\": \"USD\",\n      \"redemption_type\": \"AUTOMATIC\",\n      \"shipping_address\": null,\n      \"current_uses\": 0,\n      \"max_uses\": null,\n      \"start_date\": \"2022-07-21T14:54:01+00:00\",\n      \"end_date\": null,\n      \"status\": \"ENABLED\",\n      \"schedule\": null,\n      \"can_be_used_with_other_promotions\": true\n    },\n    \"meta\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wishlist Details Handlebars Expression\nDESCRIPTION: Detailed information for a specific wishlist including ID, name, visibility settings, and list of items with their associated properties and URLs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_10\n\nLANGUAGE: handlebars\nCODE:\n```\n{{wishlist}}\n```\n\n----------------------------------------\n\nTITLE: Testing Theme Changes with Stencil Start\nDESCRIPTION: Starts a local development server to preview the theme and check for visual regressions after SCSS fixes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/node-sass.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nstencil start\n```\n\n----------------------------------------\n\nTITLE: Creating a New Widget with Updated Template using BigCommerce Widgets API\nDESCRIPTION: This HTTP POST request creates a new widget based on the updated widget template. It uses the same widget template UUID as before but will create a widget with the latest version.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/versioning.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /stores/{{STORE_HASH}}/v3/content/widgets\nHost: api.bigcommerce.com\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"name\": \"Version 2 Widget\",\n  \"widget_configuration\": {\n    \"textContent\": \"Hello, World!\"\n  },\n  \"widget_template_uuid\": \"{your-widget-template-uuid}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Format for BigCommerce Shipping API\nDESCRIPTION: Example JSON structure for error responses from the shipping provider API, demonstrating how to include human-readable error messages in the response payload.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/shipping.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"valid\": false,\n  \"messages\": [\n    {\n      \"text\": \"Your account ID is invalid\",\n      \"type\": \"ERROR\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Orders with Channel Attribution\nDESCRIPTION: Example of creating an order in BigCommerce with channel attribution by setting the channel_id property. Demonstrates the basic structure of an order creation request.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/guide/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v2/orders\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"billing_address\": {...},\n  \"products\": [...],\n  \"channel_id\": {{CHANNEL_ID}}\n}\n```\n\n----------------------------------------\n\nTITLE: Order Products Response Structure in BigCommerce API\nDESCRIPTION: JSON response showing order product details including the order_pickup_method_id which corresponds to the pickup consignment ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/orders.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 22,\n    \"order_id\": 126,\n    \"product_id\": 97,\n    \"variant_id\": 69,\n    \"order_pickup_method_id\": 13,\n    …\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Stencil CLI on Windows via Chocolatey\nDESCRIPTION: PowerShell commands for installing Chocolatey package manager, Git, Node Version Manager, Node.js, and Stencil CLI on Windows. This method streamlines the installation process.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/install.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Install Chocolatey\niex ((New-Object System.Net.WebClient).DownloadString(\"https://chocolatey.org/install.ps1\"))\n\n# Install git if you don't have it\nchoco install git\n\n# Install nvm windows and stencil-compatible node.js\n\nchoco install nvm; nvm install 20.16.0; nvm use 20.16.0\n\n# Install Stencil CLI\nnpm install -g @bigcommerce/stencil-cli\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Layout Containers\nDESCRIPTION: These CSS snippets define the styling for layout containers and sub-layouts, including flexbox properties for controlling the layout, positioning, and responsive behavior. The styles include properties for display, flex direction, box-sizing, z-index, padding, and media queries for adapting to different screen sizes, primarily targeting responsiveness for smaller screens (max-width: 700px).\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/site-content.mdx#2025-04-16_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n\"[data-sub-layout-container=\\\"085accf0-fbd0-4808-aad5-034b85a61a20\\\"] {\\n      box-sizing: border-box;\\n      display: flex;\\n      flex-wrap: wrap;\\n      z-index: 0;\\n      position: relative;\\n    }\\n    [data-sub-layout-container=\\\"085accf0-fbd0-4808-aad5-034b85a61a20\\\"]:after {\\n      background-position: center center;\\n      background-size: cover;\\n      z-index: auto content: \\\"\\\";\\n      display: block;\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      bottom: 0;\\n      right: 0;\\n    }\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"[data-sub-layout=\\\"7b6e28e6-4ada-4e47-b70f-514fd4a74279\\\"] {\\n        display: flex;\\n        flex-direction: column;\\n        box-sizing: border-box;\\n        flex-basis: 100%;\\n        max-width: 100%;\\n        z-index: 0;\\n        justify-content: center;\\n        padding-right: 10.5px;\\n        padding-left: 10.5px;\\n        position: relative;\\n      }\\n      [data-sub-layout=\\\"7b6e28e6-4ada-4e47-b70f-514fd4a74279\\\"]:after {\\n        background-position: center center;\\n        background-size: cover;\\n        z-index: auto content: \\\"\\\";\\n        display: block;\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        bottom: 0;\\n        right: 0;\\n      }\\n      @media only screen and (max-width: 700px) {\\n        [data-sub-layout=\\\"7b6e28e6-4ada-4e47-b70f-514fd4a74279\\\"] {\\n          flex-basis: 100%;\\n          max-width: 100%;\\n        }\\n      }\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"[data-sub-layout-container=\\\"5698827f-1451-42fd-9506-c9fc12aa7efa\\\"] {\\n      box-sizing: border-box;\\n      display: flex;\\n      flex-wrap: wrap;\\n      z-index: 0;\\n      position: relative;\\n    }\\n    [data-sub-layout-container=\\\"5698827f-1451-42fd-9506-c9fc12aa7efa\\\"]:after {\\n      background-position: center center;\\n      background-size: cover;\\n      z-index: auto content: \\\"\\\";\\n      display: block;\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      bottom: 0;\\n      right: 0;\\n    }\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"[data-sub-layout=\\\"b26dbb81-5281-44ea-9621-3fcecf3dcff7\\\"] {\\n        display: flex;\\n        flex-direction: column;\\n        box-sizing: border-box;\\n        flex-basis: 100%;\\n        max-width: 100%;\\n        z-index: 0;\\n        justify-content: center;\\n        padding-right: 10.5px;\\n        padding-left: 10.5px;\\n        position: relative;\\n      }\\n      [data-sub-layout=\\\"b26dbb81-5281-44ea-9621-3fcecf3dcff7\\\"]:after {\\n        background-position: center center;\\n        background-size: cover;\\n        z-index: auto content: \\\"\\\";\\n        display: block;\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        bottom: 0;\\n        right: 0;\\n      }\\n      @media only screen and (max-width: 700px) {\\n        [data-sub-layout=\\\"b26dbb81-5281-44ea-9621-3fcecf3dcff7\\\"] {\\n          flex-basis: 100%;\\n          max-width: 100%;\\n        }\\n      }\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\".sd-divider-wrapper-a49467eb-d5c0-47da-9dcc-4328efa8e6a4 {\\n    display: flex;\\n    height: 20px;\\n      align-items: center;\\n      justify-content: center;\\n      text-align: center;\\n  }\\n\\n  .sd-divider-a49467eb-d5c0-47da-9dcc-4328efa8e6a4 {\\n    height: 0;\\n    border-top: 1px;\\n    border-color: rgba(180, 186, 209, 1);\\n    border-style: solid;\\n    width: 100%;\\n    margin: 0;\\n  }\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"[data-sub-layout-container=\\\"4416b66c-49c7-4104-92cb-6226127012b6\\\"] {\\n      box-sizing: border-box;\\n      display: flex;\\n      flex-wrap: wrap;\\n      z-index: 0;\\n      position: relative;\\n    }\\n    [data-sub-layout-container=\\\"4416b66c-49c7-4104-92cb-6226127012b6\\\"]:after {\\n      background-position: center center;\\n      background-size: cover;\\n      z-index: auto content: \\\"\\\";\\n      display: block;\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      bottom: 0;\\n      right: 0;\\n    }\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"[data-sub-layout=\\\"e1b20ec7-2edd-48e7-bde4-99d1ef2a583c\\\"] {\\n        display: flex;\\n        flex-direction: column;\\n        box-sizing: border-box;\\n        flex-basis: 50%;\\n        max-width: 50%;\\n        z-index: 0;\\n        justify-content: center;\\n        padding-right: 10.5px;\\n        padding-left: 10.5px;\\n        position: relative;\\n      }\\n      [data-sub-layout=\\\"e1b20ec7-2edd-48e7-bde4-99d1ef2a583c\\\"]:after {\\n        background-position: center center;\\n        background-size: cover;\\n        z-index: auto content: \\\"\\\";\\n        display: block;\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        bottom: 0;\\n        right: 0;\\n      }\\n      @media only screen and (max-width: 700px) {\\n        [data-sub-layout=\\\"e1b20ec7-2edd-48e7-bde4-99d1ef2a583c\\\"] {\\n          flex-basis: 100%;\\n          max-width: 100%;\\n        }\\n      }\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"[data-sub-layout=\\\"d89fe399-1bf9-4bc4-a47d-3fe048a29fdc\\\"] {\\n        display: flex;\\n        flex-direction: column;\\n        box-sizing: border-box;\\n        flex-basis: 50%;\\n        max-width: 50%;\\n        z-index: 0;\\n        justify-content: center;\\n        padding-right: 10.5px;\\n        padding-left: 10.5px;\\n        position: relative;\\n      }\\n      [data-sub-layout=\\\"d89fe399-1bf9-4bc4-a47d-3fe048a29fdc\\\"]:after {\\n        background-position: center center;\\n        background-size: cover;\\n        z-index: auto content: \\\"\\\";\\n        display: block;\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        bottom: 0;\\n        right: 0;\\n      }\\n      @media only screen and (max-width: 700px) {\\n        [data-sub-layout=\\\"d89fe399-1bf9-4bc4-a47d-3fe048a29fdc\\\"] {\\n          flex-basis: 100%;\\n          max-width: 100%;\\n        }\\n      }\"\n```\n\n----------------------------------------\n\nTITLE: Debug Mode Product Import Command\nDESCRIPTION: WP-CLI command to run product import with debug flag for additional diagnostic information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/deployment/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nwp bigcommerce import products --debug\n```\n\n----------------------------------------\n\nTITLE: Setting Shared Variant Options Globally in BigCommerce GraphQL\nDESCRIPTION: This GraphQL mutation sets global shared variant option information for the store. It allows setting the name and values for existing variant options, which channels inherit by default.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-variant-options.mdx#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json      \n\nmutation ($input: SetSharedProductOptionsInformationInput!) {\n  sharedProductOptions {\n    setSharedProductOptionsInformation (input: $input) {\n      sharedProductOptions {\n        id\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"data\": {\n      \"options\": [\n        {\n          \"optionId\": \"bc/store/sharedProductOption/1\",\n          \"data\": {\n            \"dropdown\": {\n              \"displayName\": \"Fabric\",\n              \"values\": [\n                {\n                  \"valueId\": \"bc/store/sharedProductOptionValue/123\",\n                  \"label\": \"Cotton\"\n                },\n                {\n                  \"valueId\": \"bc/store/sharedProductOptionValue/124\",\n                  \"label\": \"Polyester\"\n                }\n              ]\n            }\n          }\n        },\n        {\n          \"optionId\": \"bc/store/sharedProductOption/4\",\n          \"data\": {\n            \"swatch\": {\n              \"displayName\": \"Zipper color\",\n              \"values\": [\n                {\n                  \"valueId\": \"bc/store/sharedProductOptionValue/129\",\n                  \"label\": \"Orange\"\n                },\n                {\n                  \"valueId\": \"bc/store/sharedProductOptionValue/130\",\n                  \"label\": \"Green\"\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"sharedProductOptions\": {\n      \"setSharedProductOptionsInformation\": {\n        \"sharedProductOptions\": [\n          {\n            \"id\": \"bc/store/sharedProductOption/1\"\n          },\n          {\n            \"id\": \"bc/store/sharedProductOption/4\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Storefront Details with GraphQL\nDESCRIPTION: GraphQL mutation to set product storefront details (warranty, availability, search keywords) at the global store level. These settings serve as defaults for all channels.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-attributes.mdx#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($input: SetProductStorefrontDetailsInput!) {\n  product {\n    setProductStorefrontDetails (input: $input) {\n      product {\n        storefrontDetails {\n          warranty\n          availabilityDescription\n          searchKeywords\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"data\": {\n      \"warranty\": \"1 year warranty\",\n      \"availabilityDescription\": \"Available in a month\",\n      \"searchKeywords\": \"Best selling\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting ngrok Tunnel\nDESCRIPTION: This command starts an ngrok tunnel to expose the local web server (running on port 8080) to the internet, creating a publicly accessible HTTPS URL for the app.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-connect.mdx#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nngrok http http://localhost:8080              # Start the app\n```\n\n----------------------------------------\n\nTITLE: Accessing Gift Certificate Form in Handlebars Templates\nDESCRIPTION: Handlebars expression for accessing the gift certificate form object used to create and edit gift certificates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_24\n\nLANGUAGE: handlebars\nCODE:\n```\n{{forms.gift_certificate}}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Error Response Structure\nDESCRIPTION: Example of the error response structure returned when an invalid GraphQL query is submitted through Stencil.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter-reference.mdx#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gql\": {\n    \"errors\": [\n      {\n        \"locations\": [\n          {\n            \"column\": 1,\n            \"line\": 1\n          }\n        ],\n        \"message\": \"Syntax error while parsing GraphQL query.\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding English Localization Strings for Checkout\nDESCRIPTION: This JSON snippet shows how to add localization strings for the checkout process in English within the en.json file.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/order-confirmation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"checkout\": {\n        \"title\": \"Checkout\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Category via BigCommerce Catalog API\nDESCRIPTION: HTTP POST request to create a new category using the BigCommerce Catalog API, specifying custom template layout and URL settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /stores/{{store_hash}}/v3/catalog/categories\nHost: api.bigcommerce.com\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"custom_url\": {\n    \"is_customized\": false,\n    \"url\": \"/custom-widget-templates/\"\n  },\n  \"default_product_sort\": \"use_store_settings\",\n  \"description\": \"<p>Custom category</p>\",\n  \"is_visible\": true,\n  \"layout_file\": \"custom-category.html\",\n  \"name\": \"Custom Category\",\n  \"sort_order\": 1,\n  \"parent_id\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces\nDESCRIPTION: TypeScript interface definitions for form data and string key-value pairs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FormData {\n    description: string;\n    isVisible: boolean;\n    name: string;\n    price: number;\n    type: string;\n}\n\nexport interface StringKeyValue {\n    [key: string]: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting API Timeout Duration\nDESCRIPTION: JavaScript filter to increase the API timeout duration to 60 seconds for handling network latency.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/deployment/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nadd_filter( 'bigcommerce/api/timeout', function () {\n\treturn 60;\n} );\n```\n\n----------------------------------------\n\nTITLE: Default value for Similar Products Limit in YAML\nDESCRIPTION: This snippet showcases declaring an empty limit for similar products, which will default to displaying four products according to the established default value in the front matter reference.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter.mdx#2025-04-16_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nproducts:\n  similar_by_views:\n    limit:\n```\n\n----------------------------------------\n\nTITLE: Webhook Creation Response\nDESCRIPTION: Example response from BigCommerce API after successfully creating a webhook, showing the created webhook's details including ID and timestamps.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/overview.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": 1580329317,\n  \"destination\": \"https://yourapp.example.com/webhooks\",\n  \"headers\": null,\n  \"id\": 20172984,\n  \"is_active\": true,\n  \"scope\": \"store/order/updated\",\n  \"store_hash\": \"{{STORE_HASH}}\",\n  \"updated_at\": 1580329317\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Composite Image in config.json for BigCommerce Stencil Theme\nDESCRIPTION: This snippet shows how to reference a theme-wide composite image in the config.json file. The composite image is displayed in the Storefront > Themes section of the BigCommerce control panel.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/theme-images.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // [...]\n  \"meta\": {\n    [...]\n    \"composed_image\": \"composed.png\",\n    // [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Fetch Checkout Query (Completed Checkout)\nDESCRIPTION: This is a sample response for fetching a completed checkout. It includes details of the checkout such as ID, status, and item information. The subscriptionId is present as the checkout has been completed.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"account\": {\n      \"checkout\": {\n        \"id\": \"bc/account/checkout/6e3f0de4-5bb3-451e-8c1b-3f14c6798891\",\n        \"accountId\": \"bc/account/account/dbf77034-5440-4365-9aca-385ab27fe4bc\",\n        \"checkoutUrl\": \"https://store-q6sxaezcnf.my-bigcommerce.com/manage/merchant-checkout?checkoutId=6e3f0de4-5bb3-451e-8c1b-3f14c6798891\",\n        \"status\": \"COMPLETE\",\n        \"items\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"description\": \"Gold Tier Annual Plan\",\n                \"status\": \"COMPLETE\",\n                \"product\": {\n                  \"id\": \"bc/account/product/5\",\n                  \"productLevel\": null,\n                  \"type\": \"APPLICATION\"\n                },\n                \"scope\": {\n                  \"id\": \"bc/account/scope/fsm6cvyxbj\",\n                  \"type\": \"STORE\"\n                },\n                \"pricingPlan\": {\n                  \"price\": {\n                    \"value\": 499.99,\n                    \"currencyCode\": \"USD\"\n                  },\n                  \"interval\": \"ANNUAL\",\n                  \"trialDays\": 10\n                },\n                \"subscriptionId\": \"bc/account/subscription/9bbe8843-27eb-4f78-b34b-c692d1016382\",\n                \"redirectUrl\": \"https://store-q6sxaezcnf.my-bigcommerce.com/manage/app/5\"\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Missing Translation Key Error Example\nDESCRIPTION: This error appears during theme bundling when required translation keys are missing from the schemaTranslations.json file. The specific missing key is identified in the error message.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/unexpected-behavior.mdx#2025-04-16_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nError: Your theme's schemaTranslations.json has errors:\nmissing translation key \"i18n.HeaderAndFooter\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Slider Widget Template in JSON\nDESCRIPTION: This JSON snippet defines a widget template for creating an image slider. It uses Handlebars syntax to loop through slide items and display images.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\"name\": \"Slider\",\n\"template\": \"<ul class='slider'>{{#each slides}}<li class='slide'><img src={{image}}'/</li>{{/each}}</ul>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Value to a Variable - JavaScript\nDESCRIPTION: Saves a specified value to a defined variable.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet variable; function assignVar(value) { variable = value; }\n```\n\n----------------------------------------\n\nTITLE: Using stripQuerystring Helper in Handlebars for URL Cleaning\nDESCRIPTION: The stripQuerystring helper removes the query string portion from a URL, leaving only the base URL.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_90\n\nLANGUAGE: handlebars\nCODE:\n```\n{{stripQuerystring url}}\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Dynamic Routes\nDESCRIPTION: Import statements for dynamic product route implementation including router and custom hooks.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useRouter } from 'next/router';\nimport ErrorMessage from '../../components/error';\nimport Form from '../../components/form';\nimport Loading from '../../components/loading';\nimport { useSession } from '../../context/session';\nimport { useProductList } from '../../lib/hooks';\nimport { FormData } from '../../types';\n```\n\n----------------------------------------\n\nTITLE: Handling Conditional Pricing Logic in Handlebars\nDESCRIPTION: Illustrates the use of Handlebars for implementing conditional logic to check for sale prices in product pricing objects. This checks for the `sale_price_without_tax` property to determine conditional rendering. The expected input involves the presence of pricing data and the output is a logical structure for handling dynamic display of discounted or strikeout pricing.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/catalog-price-object.mdx#2025-04-16_snippet_2\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#or price.sale_price_without_tax price.sale_price_with_tax}}\n ... [code to display on-sale strikeout pricing or content for a discounted product]  ...\n{{/or}}\n```\n\n----------------------------------------\n\nTITLE: Initializing Stencil Project\nDESCRIPTION: Command to initialize the Stencil project, requiring store URL and access token.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/storefront-selector.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstencil init\n```\n\n----------------------------------------\n\nTITLE: Unhooking and Replacing Product Archive Template in BigCommerce for WordPress\nDESCRIPTION: This snippet demonstrates how to remove the default product archive rendering callback and replace it with a custom function. It uses the bigcommerce() function to access the plugin's dependency injection container.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/themes/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nremove_action( 'bigcommerce/template/product/archive', bigcommerce()->templates->product_archive, 10 );\n\nadd_action( 'bigcommerce/template/product/archive', 'your_callback_function', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: V2 Product Options API Response\nDESCRIPTION: Example response from the V2 Product Options API showing a t-shirt product with 'Color' and 'Size' global options. The response includes option values with their respective IDs, which will change when updated via V3 API.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": [\n        {\n            \"id\": 242,\n            \"product_id\": 201,\n            \"name\": \"Color\",\n            \"display_name\": \"Color\",\n            \"type\": \"swatch\",\n            \"sort_order\": 0,\n            \"option_values\": [\n                {\n                    \"id\": 180,\n                    \"label\": \"Red\",\n                    \"sort_order\": 1,\n                    \"value_data\": {\n                        \"colors\": [\n                            \"#ff0000\"\n                        ]\n                    },\n                    \"is_default\": false\n                },\n                {\n                    \"id\": 181,\n                    \"label\": \"Green\",\n                    \"sort_order\": 2,\n                    \"value_data\": {\n                        \"colors\": [\n                            \"#008000\"\n                        ]\n                    },\n                    \"is_default\": false\n                },\n                {\n                    \"id\": 182,\n                    \"label\": \"Blue\",\n                    \"sort_order\": 3,\n                    \"value_data\": {\n                        \"colors\": [\n                            \"#0000ff\"\n                        ]\n                    },\n                    \"is_default\": false\n                }\n            ],\n            \"config\": []\n        },\n        {\n            \"id\": 243,\n            \"product_id\": 201,\n            \"name\": \"Size\",\n            \"display_name\": \"T-Shirt Size\",\n            \"type\": \"rectangles\",\n            \"sort_order\": 1,\n            \"option_values\": [\n                {\n                    \"id\": 192,\n                    \"label\": \"Small\",\n                    \"sort_order\": 0,\n                    \"value_data\": null,\n                    \"is_default\": false\n                },\n                {\n                    \"id\": 193,\n                    \"label\": \"Medium\",\n                    \"sort_order\": 1,\n                    \"value_data\": null,\n                    \"is_default\": false\n                },\n                {\n                    \"id\": 194,\n                    \"label\": \"Large\",\n                    \"sort_order\": 2,\n                    \"value_data\": null,\n                    \"is_default\": false\n                }\n            ],\n            \"config\": []\n        }\n    ],\n    \"meta\": {\n        \"pagination\": {\n            \"total\": 2,\n            \"count\": 2,\n            \"per_page\": 50,\n            \"current_page\": 1,\n            \"total_pages\": 1,\n            \"links\": {\n                \"current\": \"?page=1&limit=50\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Deleting Product Tax Properties\nDESCRIPTION: HTTP response when successfully deleting tax properties from a product. A 204 No Content response indicates successful deletion with no body returned.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/tax-properties.mdx#2025-04-16_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nHTTP 204 No content\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Project Structure\nDESCRIPTION: Commands to create project directory and initialize a Node.js project for webhook handling.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/tutorial.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir webhooks-test         # Create project directory\n\ncd webhooks-test            # Move into project directory\n\nnpm init                    # Initialize a Node.js project (hit return to accept the default values)\n\ntouch index.js              # Create main app script file\n```\n\n----------------------------------------\n\nTITLE: Pushing a Theme with Automatic Deletion of Oldest Theme\nDESCRIPTION: Command to automatically delete the oldest theme when at the theme limit during push.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/upload.mdx#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nstencil push -d\n```\n\n----------------------------------------\n\nTITLE: Invoice Template Variables for Localization\nDESCRIPTION: Example variables used for localizing the merchant printable invoice template. These variables can be replaced with translated values to support different languages.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/invoice-templates.mdx#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n%%LNG_ShippingAddress%%\n%%LNG_Quantity%%\n%%LNG_Code%%\n%%LNG_ProdName%%\n```\n\n----------------------------------------\n\nTITLE: Importing BigDesign Components for Header\nDESCRIPTION: Import statements for Header component including BigDesign Tabs, Next.js router, and React hooks.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Box, Tabs } from '@bigcommerce/big-design';\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\nimport InnerHeader from './innerHeader';\n```\n\n----------------------------------------\n\nTITLE: Disabling WordPress Cron Configuration\nDESCRIPTION: PHP configuration to disable default WordPress cron functionality by setting a constant in wp-config.php.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/deployment/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'DISABLE_WP_CRON', true );\n```\n\n----------------------------------------\n\nTITLE: JSON Response for BigCommerce Page Snapshot\nDESCRIPTION: Example JSON response containing page regions data including a hero banner widget and layout configuration with dropzones.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/page-widgets/guide.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"regions\": [\n      {\n        \"name\": \"home_below_menu\",\n        \"children\": [\n          {\n            \"widget_template_uuid\": \"d181ebd5-f42c-4f96-8f9d-c605023f5cb6\",\n            \"configuration\": {\n              \"title\": \"Hero Banner Title\",\n              \"subtitle\": \"Add a description for this hero banner. This is a great place to highlight a promotion.\",\n              \"buttonText\": \"Shop now\",\n              \"contentAlignment\": {\n                \"horizontal\": \"left\"\n              },\n              \"containerHeight\": \"small\",\n              \"backgroundType\": \"image\",\n              \"backgroundColor\": \"#444444\",\n              \"imageUrl\": {\n                \"src\": \"https://images.unsplash.com/photo-1533038590840-1cde6e668a91?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2000&q=100\",\n                \"type\": \"IMAGE_MANAGER\"\n              },\n              \"imageFit\": \"fill\",\n              \"imageParallax\": \"off\",\n              \"imageAlignment\": {\n                \"horizontal\": \"center\",\n                \"vertical\": \"middle\"\n              },\n              \"imageOpacity\": 100,\n              \"titleVisible\": \"show\",\n              \"titleStyle\": \"default\",\n              \"titleFontFamily\": \"inherit\",\n              \"titleFontWeight\": \"400\",\n              \"titleFontSize\": {\n                \"value\": 36,\n                \"type\": \"px\"\n              },\n              \"descriptionVisible\": \"show\",\n              \"descriptionStyle\": \"default\",\n              \"descriptionFontFamily\": \"inherit\",\n              \"descriptionFontWeight\": \"400\",\n              \"descriptionFontSize\": {\n                \"value\": 21,\n                \"type\": \"px\"\n              },\n              \"textColor\": \"#444444\",\n              \"mobileTextColor\": \"#444444\",\n              \"buttonVisible\": \"show\",\n              \"buttonFont\": \"default\",\n              \"buttonFontFamily\": \"inherit\",\n              \"buttonStyle\": \"round\",\n              \"buttonColor\": \"#444444\",\n              \"mobileButtonColor\": \"#444444\",\n              \"buttonTextColor\": \"rgba(255,255,255,1)\",\n              \"mobileButtonTextColor\": \"rgba(255,255,255,1)\"\n            },\n            \"storefront_api_query_params\": {},\n            \"name\": \"Hero Banner\",\n            \"description\": \"\",\n            \"type\": \"widget\"\n          }\n        ]\n      },\n      {\n        \"name\": \"header_bottom\",\n        \"children\": [\n          {\n            \"layout_template_uuid\": \"7d42d0b1-1152-4ce3-a6c1-3709f786f295\",\n            \"configuration\": {\n              \"columnWeights\": [\"33.333333%\", \"33.333333%\", \"33.333333%\"],\n              \"layoutBackgroundColor\": \"rgba(0,0,0,0)\",\n              \"layoutBackgroundImageAlignment\": {\n                \"horizontal\": \"center\",\n                \"vertical\": \"middle\"\n              },\n              \"layoutBackgroundImageFit\": \"fill\",\n              \"layoutBackgroundImageOpacity\": 100,\n              \"layoutBackgroundImageUrl\": \"\",\n              \"layoutBorderColor\": \"#333333\",\n              \"layoutBorderStyle\": \"solid\",\n              \"layoutBorderThickness\": 0,\n              \"layoutHeight\": \"\",\n              \"layoutMargin\": {\n                \"bottom\": {\n                  \"type\": \"px\",\n                  \"value\": \"0\"\n                },\n                \"left\": {\n                  \"type\": \"px\",\n                  \"value\": \"0\"\n                },\n                \"right\": {\n                  \"type\": \"px\",\n                  \"value\": \"0\"\n                },\n                \"top\": {\n                  \"type\": \"px\",\n                  \"value\": \"0\"\n                }\n              },\n              \"layoutPadding\": {\n                \"bottom\": {\n                  \"type\": \"px\",\n                  \"value\": \"0\"\n                },\n                \"left\": {\n                  \"type\": \"px\",\n                  \"value\": \"0\"\n                },\n                \"right\": {\n                  \"type\": \"px\",\n                  \"value\": \"0\"\n                },\n                \"top\": {\n                  \"type\": \"px\",\n                  \"value\": \"0\"\n                }\n              },\n              \"numberOfDropzones\": 3,\n              \"layoutBackgroundType\": \"\",\n              \"layoutZIndex\": \"auto\",\n              \"name\": \"layout\"\n            },\n            \"name\": \"Layout\",\n            \"dropzones\": [\n              {\n                \"configuration\": {\n                  \"dropzoneBackgroundColor\": \"rgba(0,0,0,0)\",\n                  \"dropzoneBackgroundImageAlignment\": {\n                    \"horizontal\": \"center\",\n                    \"vertical\": \"middle\"\n                  },\n                  \"dropzoneBackgroundImageFit\": \"fill\",\n                  \"dropzoneBackgroundImageOpacity\": 100,\n                  \"dropzoneBackgroundImageUrl\": \"\",\n                  \"dropzoneBorderColor\": \"#333333\",\n                  \"dropzoneBorderStyle\": \"solid\",\n                  \"dropzoneBorderThickness\": 0,\n                  \"dropzoneHeight\": \"\",\n                  \"dropzoneJustifyContent\": \"center\",\n                  \"dropzoneMargin\": {\n                    \"bottom\": {\n                      \"type\": \"px\",\n                      \"value\": \"0\"\n                    },\n                    \"left\": {\n                      \"type\": \"px\",\n                      \"value\": \"0\"\n                    },\n                    \"right\": {\n                      \"type\": \"px\",\n                      \"value\": \"0\"\n                    },\n                    \"top\": {\n                      \"type\": \"px\",\n                      \"value\": \"0\"\n                    }\n                  },\n                  \"dropzonePadding\": {\n                    \"bottom\": {\n                      \"type\": \"px\",\n                      \"value\": \"0\"\n                    },\n                    \"left\": {\n                      \"type\": \"px\",\n                      \"value\": \"10.5\"\n                    },\n                    \"right\": {\n                      \"type\": \"px\",\n                      \"value\": \"10.5\"\n                    },\n                    \"top\": {\n                      \"type\": \"px\",\n                      \"value\": \"0\"\n                    }\n                  },\n                  \"dropzoneZIndex\": \"auto\",\n                  \"dropzoneBackgroundType\": \"\"\n                },\n                \"widgets\": [\n                  {\n                    \"widget_template_uuid\": \"e59c1412-2d85-4f18-ab4b-8a55412d945c\",\n                    \"configuration\": {\n                      \"productCardContentAlignment\": {\n                        \"horizontal\": \"center\"\n                      },\n                      \"productImage\": {\n                        \"visibility\": \"show\",\n                        \"imageFit\": \"fill\"\n                      },\n                      \"brand\": {\n                        \"visibility\": \"show\",\n                        \"textStyle\": \"default\",\n                        \"color\": \"#444444\"\n                      },\n                      \"productName\": {\n                        \"visibility\": \"show\",\n                        \"textStyle\": \"default\",\n                        \"color\": \"#444444\"\n                      },\n                      \"price\": {\n                        \"visibility\": \"show\",\n                        \"textStyle\": \"default\",\n                        \"color\": \"#444444\"\n                      },\n                      \"productRating\": {\n                        \"visibility\": \"hide\",\n                        \"starColorFilled\": \"#3C64F4\",\n                        \"starColorEmpty\": \"#ECEEF5\",\n                        \"reviewsColor\": \"#8C93AD\"\n                      },\n                      \"button\": {\n                        \"visibility\": \"hide\",\n                        \"shape\": \"round\"\n```\n\n----------------------------------------\n\nTITLE: Example Order Payload Object in BigCommerce Webhooks\nDESCRIPTION: This JSON snippet illustrates the structure of a payload object for order-related webhook events in BigCommerce. It includes store ID, producer, creation timestamp, event scope, order ID data, and a hash for verification.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\": \"11111\",\n \"producer\": \"stores/abcde\",\n \"created_at\": 1641641646,\n \"scope\": \"store/channel/1/order/updated\",\n \"data\": {\n    \"order_id\": 127 // ID of the order\n  },\n \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Product Custom Fields Query in BigCommerce\nDESCRIPTION: This JSON response corresponds to the GraphQL query for product custom fields. It includes the custom field information for both the global store and the specified channel locale, demonstrating the structure of the returned data including field names, values, visibility, and context.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-custom-fields.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"store\": {\n      \"product\": {\n        \"customFields\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"id\": \"bc/store/productCustomField/1\",\n\n                // For the global store\n                \"name\": \"Global Custom Field Name\",\n                \"value\": \"Global Custom Field Value\",\n\n                // For the channel locale\n                \"overrides\": {\n                  \"edges\": [\n                    {\n                      \"node\": {\n                        \"name\": \"Custom Field Name Override\",\n                        \"value\": \"Custom Field Value Override\",\n                        \"isVisible\": true,\n                        \"context\": {\n                          \"channelId\": \"bc/store/channel/1\",\n                          \"locale\": \"en-US\"\n                        }\n                      }\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Price (including tax) in BigCommerce Stencil Templates\nDESCRIPTION: This snippet shows how to access the default price including tax in BigCommerce Stencil templates. It uses conditional logic to determine whether a sale price is defined.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/catalog-price-object.mdx#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<ul><li>**Sale Price** is defined:</li> {{ product.price.non_sale_price_with_tax }}<li>**Sale Price** is not defined:</li> {{ product.price.with_tax }}</ul>\n```\n\n----------------------------------------\n\nTITLE: Checking Stencil CLI Version\nDESCRIPTION: Commands to verify the installed version of Stencil CLI.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/upload.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstencil --version\n```\n\n----------------------------------------\n\nTITLE: Customer Payment Methods in Handlebars\nDESCRIPTION: Object for viewing stored payment methods with detailed card and billing information. Used in the payment-methods template.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_17\n\nLANGUAGE: handlebars\nCODE:\n```\n{{customer.payment_methods}}\n```\n\n----------------------------------------\n\nTITLE: Production Output for if() Method Example\nDESCRIPTION: The CSS output when compiling the if() method example in the production environment, which incorrectly evaluates the parent selector as null and returns red.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/incompatible-directives.mdx#2025-04-16_snippet_4\n\nLANGUAGE: css\nCODE:\n```\ntest {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Product Deleted Payload Structure in JSON\nDESCRIPTION: This payload structure is used for a product deleted event. It contains the store ID, details about the product type, and its unique identifier, along with hash for integrity and timestamp.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/product/deleted\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"product\", // will always be product\n    \"id\": 205, // ID of the product\n  },\n  \"hash\": \"a833a57fadd56a32dc752fb6ca0841dc9602a495\",\n  \"created_at\": 1561479233,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create Cart API Response in JSON\nDESCRIPTION: JSON response from the Create a Cart endpoint, showing the structure of a successful cart creation. The response includes the new cart ID, line items details, and other cart metadata.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/checkout.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": \"76f1bfe4-dbbe-4018-8ee6-2e3c36bf1518\",\n    …\n    \"line_items\": {\n      \"physical_items\": [\n        {\n          \"id\": \"67642f07-49d1-4501-8b7d-2e589aec34b8\",\n          …\n        }\n      ],\n      \"digital_items\": [],\n      \"gift_certificates\": [],\n      \"custom_items\": []\n    },\n    …\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing System Check Components\nDESCRIPTION: Import statements for error and loading components in products page.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport ErrorMessage from '../../components/error';\nimport Loading from '../../components/loading';\n```\n\n----------------------------------------\n\nTITLE: Filtering Store Logs by Module - HTTP Request\nDESCRIPTION: Makes a GET request to retrieve store log entries filtered by a specific carrier module using URL-encoded module name.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/settings/logs.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/store/systemlogs?module=USPS+%28endicia%29\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Declaring a Heading Type in schema.json\nDESCRIPTION: This code snippet shows how to declare a heading type in the `schema.json` file for a BigCommerce theme. Headings are used to create subcategories in the Page Builder UI. The `content` field specifies the text that will be displayed as the heading.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/customizability.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"type\": \"heading\",\n        \"content\": \"General\"\n      },\n```\n\n----------------------------------------\n\nTITLE: Social Media Links Webhook Payload Structure in JSON\nDESCRIPTION: Example payload structure for social media link webhook events, demonstrating the format when social media links are updated for a channel. Includes store ID, producer, timestamp, and scope information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\": \"11111\",\n \"producer\": \"stores/abcde\",\n \"created_at\": 1641641646,\n \"scope\": \"store/channel/1/socialMediaLinks/updated\",\n \"data\": {},\n \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling WP-Cron in WordPress Configuration\nDESCRIPTION: PHP configuration code to disable the default WordPress cron system by adding a constant definition in wp-config.php file. This is a prerequisite for implementing server-side cron jobs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/deployment/creating-reliable-cron-jobs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndefine('DISABLE_WP_CRON', true);\n```\n\n----------------------------------------\n\nTITLE: Gift Certificate Balance Shortcode\nDESCRIPTION: WordPress shortcode for displaying the gift certificate balance checker.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/start/plugin-settings.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shortcode\nCODE:\n```\n[bigcommerce_gift_balance]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Location Stock with BigCommerce API (HTTP)\nDESCRIPTION: This snippet demonstrates how to make a GET request to retrieve the stock information for a specific location and variant using the BigCommerce API. It includes the necessary headers and endpoint structure.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/inventory-adjustments.mdx#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/inventory/locations/1/items?variant_id:in=74\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Start Development Server\nDESCRIPTION: Command to start the local development server for the POS system.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/point-of-sale.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Controlling Featured Products in home.html - HTML\nDESCRIPTION: This HTML snippet illustrates how to set the limit for featured products displayed on the homepage by using a hard-coded value instead of dynamic settings. This provides static control for design purposes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/global-styles.mdx#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\nproducts:\n  <!-- [...] -->\n  featured:\n      limit: 2\n  <!-- [...] -->\n<!-- [...] -->\n{{#partial \"page\"}}\n<!-- [...] -->\n<div class=\"main full\">\n  {{#if products.featured}}\n      {{> components/products/featured products=products.featured columns=2}}\n  {{/if}}\n</div>\n{{/partial}}\n{{> layout/base}}\n```\n\n----------------------------------------\n\nTITLE: Response for Updating Store Pickup Locations\nDESCRIPTION: The JSON response received after successfully updating a store pickup location. It contains a transaction ID that can be used for tracking or reference purposes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transaction_id\": \"d3f9c9df-8d35-403c-8f9f-d1v1b3302efbv\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying New Products Using Handlebars - Handlebars\nDESCRIPTION: This Handlebars conditional snippet checks for the existence of new products and includes a component to display them, utilizing the defined settings for the number of columns.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/global-objects-and-properties.mdx#2025-04-16_snippet_6\n\nLANGUAGE: handlebars\nCODE:\n```\n\"{{#if products.new}}\\n  {{> components/products/new products=products.new columns=theme_settings.homepage_new_products_column_count}}\\n{{/if}}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Heading Type in schema.json for BigCommerce Theme Styles\nDESCRIPTION: JSON configuration for heading data type used to create section headings in theme settings. Requires type and content fields.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/styles-and-properties.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n \"type\": \"heading\",\n \"content\": \"i18n.BackgroundAndLines\"\n},\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-Channel Mode in BigCommerce for WordPress\nDESCRIPTION: JavaScript code that activates multi-channel mode in BigCommerce for WordPress, allowing multiple channels to be connected for multi-region or complex shopper experiences.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/deployment/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nadd_filter( 'bigcommerce/channels/enable-multi-channel', '__return_true' );\n```\n\n----------------------------------------\n\nTITLE: Language Translation Files for Cornerstone Themes\nDESCRIPTION: This code snippet presents the structure of the 'lang' directory containing JSON files for language translations, along with examples of files for English and French.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/directory-structure.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n├── lang\n│   ├── en-CA.json  # English, Canada\n│   ├── en.json     # English\n│   ├── fr-CA.json  # French, Canada\n│   └── fr.json     # French\n```\n\n----------------------------------------\n\nTITLE: Email Subject Template\nDESCRIPTION: HTML template for the login email subject line, incorporating the store name variable.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/passwordless-login.mdx#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n**{Store name} - Log in to your account**\n```\n\n----------------------------------------\n\nTITLE: BigCommerce Brand Metafield Webhook Payload\nDESCRIPTION: Example payload structure for brand metafield events including creation, deletion and updates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/brand/metafield/created\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"metafield_id\": 16,\n    \"resource_id\": \"38\"\n  },\n  \"hash\": \"352e4afc6dd3fc85ea26bfdf3f91852604d57528\",\n  \"created_at\": 1561482670,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Store Metafield without Resource ID - GraphQL Mutation\nDESCRIPTION: GraphQL mutation to create a store metafield without specifying a resource ID. This mutation creates a metafield with warehouse location information and APP_ONLY permission set.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/metafields/store-metafields.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation Metafield($input: CreateMetafieldInput!) {\n     metafield {\n       createMetafield(input: $input) {\n           metafield {\n               id\n               description\n               key\n               namespace\n               permissionSet\n               resourceId\n               value\n               ownerClientId\n           }\n       }\n   }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"input\":{\n       \"namespace\": \"Warehouse Locations\",\n       \"key\": \"Location\",\n       \"value\": \"4HG\",\n       \"permissionSet\": \"APP_ONLY\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reference Fields in schema.json for BigCommerce Theme Styles - ProductSaleBadgeLabel\nDESCRIPTION: JSON configuration showing a text field that references another setting. This example creates a label field that is only shown when the referenced product_sale_badges setting has a value other than 'none'.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/styles-and-properties.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n \"type\": \"text\",\n \"label\": \"i18n.ProductSaleBadgeLabel\",\n \"force_reload\": true,\n \"id\": \"pdp_sale_badge_label\",\n \"reference\": \"product_sale_badges\",\n \"reference_default\": \"none\"\n},\n```\n\n----------------------------------------\n\nTITLE: Accessing Login Account Form in Handlebars Templates\nDESCRIPTION: Handlebars expression for accessing the login form object used in the Login page.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_26\n\nLANGUAGE: handlebars\nCODE:\n```\n{{forms.login}}\n```\n\n----------------------------------------\n\nTITLE: Bundling a BigCommerce Theme with Stencil CLI\nDESCRIPTION: Command to bundle a theme into a zip file that can be uploaded to a BigCommerce store.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/upload.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstencil bundle\n```\n\n----------------------------------------\n\nTITLE: Authenticating GET Request with X-Auth-Token Header\nDESCRIPTION: Example of how to authenticate a GET request to BigCommerce API using the X-Auth-Token header with an access token.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v... # endpoint\nX-Auth-Token: {{access_token}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Importing BigDesign components and Header in _app.tsx\nDESCRIPTION: Imports the Box and GlobalStyles components from BigDesign library and a custom Header component for use in the app layout.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Box, GlobalStyles } from '@bigcommerce/big-design';\nimport Header from '../components/header';\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Stencil CLI Globally with npm\nDESCRIPTION: This shell command uninstalls the Stencil CLI globally from your system. It's used as part of the process to completely remove Stencil CLI before performing a fresh reinstall to resolve persistent issues.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/unexpected-behavior.mdx#2025-04-16_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nnpm uninstall -g @bigcommerce/stencil-cli\n```\n\n----------------------------------------\n\nTITLE: Launch Prisma Studio\nDESCRIPTION: Command to launch Prisma Studio for database verification and management.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/point-of-sale.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx prisma studio\n```\n\n----------------------------------------\n\nTITLE: Order Details Handlebars Object\nDESCRIPTION: The order properties object {{order}} contains details for a specific order, used on order details and invoice pages. Includes order metadata, items, billing/shipping addresses, and payment information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_7\n\nLANGUAGE: handlebars\nCODE:\n```\n{{order}}\n```\n\n----------------------------------------\n\nTITLE: V3 Option Value Update Response\nDESCRIPTION: API response after updating a product option value using V3 Catalog API. Note that the option value ID has changed from the original ID (192) to a new ID (214), demonstrating how V3 creates local copies of global options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"id\": 214,\n        \"label\": \"Small T-Shirt\",\n        \"sort_order\": 0,\n        \"value_data\": null,\n        \"is_default\": false\n    },\n    \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tiered Discount Promotion - Request\nDESCRIPTION: JSON request structure for creating a tiered promotion with three discount levels based on minimum spend thresholds. Includes settings for automatic redemption, notifications, and validity period.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/multiple-rules.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Tiered $ off order based on order value\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_value\": {\n          \"discount\": {\n            \"fixed_amount\": \"45\"\n          }\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": true,\n      \"currency_code\": \"AUD\",\n      \"condition\": {\n        \"cart\": {\n          \"minimum_spend\": \"175\"\n        }\n      }\n    },\n    {\n      \"action\": {\n        \"cart_value\": {\n          \"discount\": {\n            \"fixed_amount\": \"30\"\n          }\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": true,\n      \"condition\": {\n        \"cart\": {\n          \"minimum_spend\": \"150\"\n        }\n      }\n    },\n    {\n      \"action\": {\n        \"cart_value\": {\n          \"discount\": {\n            \"fixed_amount\": \"15\"\n          }\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": true,\n      \"condition\": {\n        \"cart\": {\n          \"minimum_spend\": \"100\"\n        }\n      }\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ],\n  \"stop\": false,\n  \"start_date\": \"2019-02-01T05:00:00+00:00\",\n  \"status\": \"ENABLED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Homepage Featured Products in config.json\nDESCRIPTION: JSON configuration that defines settings for featured products display, including count and column layout. These settings are referenced in templates to control the product grid presentation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/global-objects-and-properties.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"settings\": {\n  // ...\n  \"homepage_featured_products_count\": 8,\n  // ...\n  \"homepage_featured_products_column_count\": 4,\n  // ...    \n}\n```\n\n----------------------------------------\n\nTITLE: Response for Variant Image Query in BigCommerce\nDESCRIPTION: This JSON response contains the data returned from the variant image query. It includes the default image details for the specified variant.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/variants.mdx#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"product\": {\n        \"variants\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"defaultImage\": {\n                  \"url\": \"https://cdn11.bigcommerce.com/s-{store_hash}/images/stencil/1w/attribute_rule_images/32_source_1667245516.png\",\n                  \"urlOriginal\": \"https://cdn11.bigcommerce.com/s-{store_hash}/images/stencil/original/attribute_rule_images/32_source_1667245516.png\",\n                  \"altText\": \"\",\n                  \"isDefault\": true\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links for BigCommerce API Endpoints\nDESCRIPTION: Markdown formatted links to BigCommerce API documentation for currency and price list management endpoints.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/currencies/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Endpoints\n- [Currency API](/docs/rest-management/currencies)\n- [Price List API](/docs/rest-management/price-lists)\n```\n\n----------------------------------------\n\nTITLE: Location Created Webhook Payload Example\nDESCRIPTION: Example payload object structure for a location created webhook event. Demonstrates the data format received when a new location is created in the system.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/inventory-location.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"producer\": \"stores/{store_hash}\",\n  \"hash\": \"f23133c2b4caa5a8763b678fed2e3b643348599d\",\n  \"created_at\": 1682627509,\n  \"store_id\": \"1234567890\",\n  \"scope\": \"store/inventory/location/created\",\n  \"data\": {\n    \"location_id\": 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Template Layout in BigCommerce\nDESCRIPTION: JSON configuration for custom template layout in config.stencil.json file. Defines custom category template mapping and store settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customLayouts\": {\n    \"brand\": {},\n    \"category\": {\n      \"custom-category.html\": \"/custom-widget-templates/\"\n    },\n    \"page\": {},\n    \"product\": {}\n  },\n  \"normalStoreUrl\": \"{STORE URL}\",\n  \"port\": \"3000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Developer Center Repository\nDESCRIPTION: Git command to clone the BigCommerce developer-center repository\nSOURCE: https://github.com/bigcommerce/docs/blob/main/guides/create-a-site-preview.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/bigcommerce/developer-center.git\n```\n\n----------------------------------------\n\nTITLE: Refunding Shipping and Handling in BigCommerce API\nDESCRIPTION: This snippet shows how to refund shipping or handling using the BigCommerce API by setting the item_type to SHIPPING or HANDLING and specifying the amount to refund.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/orders/refunds.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/orders/{order_id}/payment_actions/refunds\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"order_id\": 1234,\n  \"items\": [\n    {\n      \"item_type\": \"SHIPPING\", // Refund shipping\n      \"item_id\": 456,          // Order address ID\n      \"amount\": 1,             // Amount to refund\n    }\n  ],\n  \"payments\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BigCommerce in TypeScript\nDESCRIPTION: This code snippet imports the BigCommerce module at the top of the auth.ts file, which is required for setting up authentication.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-connect.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as BigCommerce from 'node-bigcommerce';\n```\n\n----------------------------------------\n\nTITLE: Combining Front Matter and Handlebars in HTML\nDESCRIPTION: This example combines front matter declaration for new products along with Handlebars to display each product's name in a loop, effectively rendering product information in the HTML.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/frontmatter.mdx#2025-04-16_snippet_4\n\nLANGUAGE: handlebars\nCODE:\n```\nproducts:\n  new:\n    limit: 4\n\n{{#each products.new}}\n  <p>{{name}}</p>\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Classic Mode AMP URL Structure\nDESCRIPTION: URL patterns for previewing AMP pages in Classic mode, showing both endpoint and query parameter approaches.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/platform-integration/enabling-amp.mdx#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nyourdomain.com/products/product-slug/amp\nyourdomain.com/products/product-slug/?amp\n```\n\n----------------------------------------\n\nTITLE: Closing Structure for GraphQL Query with Nested Edges\nDESCRIPTION: Shows the closing structure of a GraphQL query containing nested edge relationships. Includes properly nested closing brackets for what appears to be a paginated query structure.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/inventory/queries.mdx#2025-04-16_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\n                      \"edges\": []\n                    }\n                  }\n                }\n              ]\n            }\n          }\n        }\n      }\n```\n\n----------------------------------------\n\nTITLE: Configuring Cart Page in JSON\nDESCRIPTION: JSON configuration for limiting the number of product suggestions on the cart page to 5.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/utils/reference.mdx#2025-04-16_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cart\": {\n    \"suggestions\": {\n      \"limit\": 5\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Form Props Interface\nDESCRIPTION: TypeScript interface definition for form properties including form data and event handlers.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FormProps {\n    formData: FormData;\n    onCancel(): void;\n    onSubmit(form: FormData): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating $hue Parameter Incompatibility in SCSS\nDESCRIPTION: Example showing how the $hue parameter in SCSS color functions behaves differently between Stencil CLI and production environments. This parameter should be avoided until the node-sass fork is sunset.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/incompatible-directives.mdx#2025-04-16_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$color: #1caf9a;\n\nbody {\n  background: change-color($color, $hue: 120);\n}\n```\n\n----------------------------------------\n\nTITLE: Example Linter Usage with File Path\nDESCRIPTION: Example showing how to run the linter on a specific documentation file with its full path.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/guides/lint-a-document-with-dx-linter-script.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx github:bigcommerce/dev-docs-style-guide-linter ./start/authentication/index.mdx\n```\n\n----------------------------------------\n\nTITLE: Querying Customer Attributes with Access Token\nDESCRIPTION: GraphQL query to fetch customer attributes including personal information and custom attributes using a customer access token.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/graphql-storefront.mdx#2025-04-16_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery CustomerAttributes {\n  customer {\n    firstName\n    lastName\n    email\n    entityId\n    customerGroupId\n    attributeCount\n    attributes {\n      shirtSize: attribute(entityId:123) {\n        entityId\n        value\n      }\n      favoriteColor: attribute(entityId:456) {\n        entityId\n        value\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BigDesign Components\nDESCRIPTION: TypeScript import statement for BigDesign components\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-setup.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Panel, Text } from '@bigcommerce/big-design';\n```\n\n----------------------------------------\n\nTITLE: Creating Batch Price List Records Payload Structure in JSON\nDESCRIPTION: This payload structure is used for creating multiple price list records through a batch webhook event. It includes the store ID, an array of data objects for each price list record, hash for integrity, created timestamp, and producer identifier.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/priceList/records/created\",\n  \"store_id\": \"1001197568\",\n  \"data\": [\n     0: {\n    \"price_list_id\": 1,\n    \"variant_id\": 179,\n    \"currency\": \"USD\"\n        },\n     1: {\n    \"price_list_id\": 2,\n    \"variant_id\": 180,\n    \"currency\": \"USD\"\n        },\n   ],\n  \"hash\": \"0424a15f158bbfe7277c5f84f9c55a1d4a762e60\",\n  \"created_at\": 1709327895,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: API Request - Get Inventory Locations\nDESCRIPTION: Example API request to view aggregate inventory information for a product across all locations, filtered by variant_id.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/diataxis-templates/guide.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{store_hash}/v3/inventory/items?variant_id=123\nX-Auth-Token: {{access_token}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Installing Stencil CLI on Linux\nDESCRIPTION: Terminal commands for installing Node Version Manager, Node.js, and Stencil CLI on Debian-based Linux distributions. This ensures proper setup on Linux systems.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/install.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Download and install nvm if you don't have it.\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.36.0/install.sh | bash\n\n# Reload .bashrc so nvm command works\nsource ~/.bashrc\n\n# Explicitly install and use supported node version\nnvm install 20.16.0\n\nnvm use 20.16.0\n\n# Install stencil\nnpm install -g @bigcommerce/stencil-cli\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Tax Properties with BigCommerce API\nDESCRIPTION: An HTTP GET request to retrieve tax properties for specific products using their product IDs. This endpoint returns tax property details such as alcohol percentage and volume measurements for the specified products.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/tax/tax-properties.mdx#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/tax/products/properties?product_id:in=113,117\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Checkout with Redirect Mutation in GraphQL\nDESCRIPTION: This GraphQL mutation generates a redirected checkout URL. It requires the cart_id, visitId, and visitorId. This step is crucial for linking subsequent checkout and order events to the same visit.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/data-events.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\nmutation redirect {\n    cart {\n        createCartRedirectUrls (input: {\n            cartEntityId: \"2c0b561a-1288-4d21-b5b1-4009b75e38e2\",\n            visitId: \"5acfce80-0d45-47b9-adca-d2d894e60444\",\n            visitorId: \"a1711d5c-59a1-4b67-8880-cff92d591444\"\n        }) {\n            redirectUrls {\n              redirectedCheckoutUrl,\n              embeddedCheckoutUrl\n        }\n          errors {\n            ... on Error {\n                  message\n          }\n        }\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Product URL Override for a Locale with GraphQL\nDESCRIPTION: This GraphQL mutation removes the URL overrides for a product's locale within a storefront channel, reverting the product URL to its global store value. It requires the product ID, channel ID, and locale.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-url.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($input: RemoveProductUrlPathOverrideInput!) {\n  product {\n    removeProductUrlPathOverride (input: $input) {\n      product {\n        id\n        urlPath {\n          path\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"b/store/product/111\",\n    \"localeContext\": {\n      \"channelId\": \"bc/store/channel/2\",\n      \"locale\": \"uk\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Locale-Specific Storefront Details\nDESCRIPTION: GraphQL mutation to remove locale-specific overrides for product storefront details. This returns the specified fields to their global store values.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-attributes.mdx#2025-04-16_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($input: RemoveProductStorefrontDetailsOverridesInput!) {\n  product {\n    removeProductStorefrontDetailsOverrides (input: $input) {\n      product {\n        overridesForLocale (localeContext: {channelId: \"bc/store/channel/2\", locale: \"fr\"}) {\n          storefrontDetails {\n            warranty\n            availabilityDescription\n            searchKeywords\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"productId\": \"bc/store/product/111\",\n    \"localeContext\": {\n      \"locale\": \"fr\",\n      \"channelId\": \"bc/store/channel/2\"\n    },\n    \"overridesToRemove\": [\"PRODUCT_AVAILABILITY_DESCRIPTION_FIELD\", \"PRODUCT_SEARCH_KEYWORDS\", \"PRODUCT_WARRANTY\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CSS to Use Custom Font in BigCommerce Themes\nDESCRIPTION: CSS code snippet showing how to apply a custom font to the header logo text in a BigCommerce theme.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/style/fonts-and-icons.mdx#2025-04-16_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.header-logo-text {\n  display: block;\n  font-family: 'MyFont';\n  [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Field Reference Example - Exempt Code\nDESCRIPTION: Example showing how to document field validation requirements\nSOURCE: https://github.com/bigcommerce/docs/blob/main/diataxis-templates/api-reference/api-reference.mdx#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nThis code should match the exemption codes provided by the third-party integration.\n```\n\n----------------------------------------\n\nTITLE: V3 Product Options Response After Update\nDESCRIPTION: This response shows how all option value IDs change after updating just one option value through the V3 API. The global options are converted to local product options with new names that include timestamps and product IDs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": [\n        {\n            \"id\": 242,\n            \"product_id\": 201,\n            \"name\": \"Color1545071633-201\",\n            \"display_name\": \"Color\",\n            \"type\": \"swatch\",\n            \"sort_order\": 0,\n            \"option_values\": [\n                {\n                    \"id\": 211,\n                    \"label\": \"Red\",\n                    \"sort_order\": 1,\n                    \"value_data\": {\n                        \"colors\": [\n                            \"#ff0000\"\n                        ]\n                    },\n                    \"is_default\": false\n                },\n                {\n                    \"id\": 212,\n                    \"label\": \"Green\",\n                    \"sort_order\": 2,\n                    \"value_data\": {\n                        \"colors\": [\n                            \"#008000\"\n                        ]\n                    },\n                    \"is_default\": false\n                },\n                {\n                    \"id\": 213,\n                    \"label\": \"Blue\",\n                    \"sort_order\": 3,\n                    \"value_data\": {\n                        \"colors\": [\n                            \"#0000ff\"\n                        ]\n                    },\n                    \"is_default\": false\n                }\n            ],\n            \"config\": []\n        },\n        {\n            \"id\": 243,\n            \"product_id\": 201,\n            \"name\": \"T-Shirt-Size1545071633-201\",\n            \"display_name\": \"T-Shirt Size\",\n            \"type\": \"rectangles\",\n            \"sort_order\": 1,\n            \"option_values\": [\n                {\n                    \"id\": 214,\n                    \"label\": \"Small T-Shirt\",\n                    \"sort_order\": 0,\n                    \"value_data\": null,\n                    \"is_default\": false\n                },\n                {\n                    \"id\": 215,\n                    \"label\": \"Medium\",\n                    \"sort_order\": 1,\n                    \"value_data\": null,\n                    \"is_default\": false\n                },\n                {\n                    \"id\": 216,\n                    \"label\": \"Large\",\n                    \"sort_order\": 2,\n                    \"value_data\": null,\n                    \"is_default\": false\n                }\n            ],\n            \"config\": []\n        }\n    ],\n    \"meta\": {\n        \"pagination\": {\n            \"total\": 2,\n            \"count\": 2,\n            \"per_page\": 50,\n            \"current_page\": 1,\n            \"total_pages\": 1,\n            \"links\": {\n                \"current\": \"?page=1&limit=50\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Mount Node for Dashboard Container in JavaScript\nDESCRIPTION: This snippet demonstrates how to specify a custom mount node for the B2B Edition dashboard container in a Stencil theme. It uses the window.b3themeConfig.useContainers object to define the mounting point.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/b2b-edition/stencil.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.b3themeConfig.useContainers = {\n /* B3 will append the dashboard container to the first returned DOM node with a class of \"page\" that is a descendant of an element with the class of \"container\" */\n\t'dashboard.container': '.container .page',\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Source Map for Detailed JavaScript Diagnostics\nDESCRIPTION: This JavaScript configuration snippet for Webpack changes the source map option to provide more detailed error reporting. It's used to enable more verbose JavaScript error messages in the browser's developer tools.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/unexpected-behavior.mdx#2025-04-16_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n{\n  devtool: 'eval-source-map'\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Variant Metafield Query in BigCommerce\nDESCRIPTION: This JSON response contains the data returned from the variant metafield query. It includes details of the first metafield found for the specified variant in the 'Warehouse Locations' namespace.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/variants.mdx#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"product\": {\n        \"variants\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"metafields\": {\n                  \"edges\": [\n                    {\n                      \"node\": {\n                        \"id\": \"TWV0YWZpZWxkczoxOA==\",\n                        \"entityId\": 18,\n                        \"key\": \"Site number\",\n                        \"value\": \"3TZ\"\n                      }\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing BigCommerce Storefront Features Table\nDESCRIPTION: A markdown table comparing key features and characteristics between Stencil, Catalyst, and Custom Headless implementations, including architecture, frontend technology, hosting, API usage, customization options, performance considerations, development workflow, and integration support.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/choosing-a-storefront.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Feature | Stencil | Catalyst | Custom Headless |\n| --- | --- | --- | --- |\n| Architecture | Monolithic | Headless (Next.js) | Headless (Any framework) |\n| Frontend Tech | Handlebars.js, SaaS, JavaScript | React, Next.js, GraphQL | Any (React, Vue, Svelte, Angular, etc.) |\n| Hosting | Fully hosted by BigCommerce | External (Vercel, AWS, etc.) | External (AWS, GCP, Vercel, Netlify, etc.) |\n| API Usage | Directly integrated with BigCommerce backend | Requires GraphQL Storefront API for data | Requires Storefront API (GraphQL/REST) for data |\n| Customization | Limited to custom templates and client-side functionality | Fully customizable | Fully customizable, but requires more development effort |\n| Performance | Optimized via BigCommerce's CDN | Optimized via SSR/ISR | Depends on implementation and hosting |\n| Development Workflow | Theme customization via CLI | Git, CI/CD, and modern tooling | Custom CI/CD setup based on tech stack |\n| Integration Support | Supports BigCommerce apps and some third-party integrations | Easier to integrate with external APIs and third-party services | Fully flexible, but integrations require manual setup     |\n```\n\n----------------------------------------\n\nTITLE: Store Information Updated Webhook Payload Example\nDESCRIPTION: Example JSON payload structure for the store/information/updated webhook event that is triggered when store settings are modified. Contains basic store identification and event metadata.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/information/updated\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"store\"\n  },\n  \"hash\": \"c553845e0a5e28dc8b0ea494458692a25586a294\",\n  \"created_at\": 1535489273,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Select Options in Theme Settings JSON\nDESCRIPTION: This JSON snippet demonstrates how to define select options for theme settings. It outlines the use of a select type with required fields such as type, label, id, and options, where options should be a consistent data type. Each option is represented as an object with value and label properties. The snippet also mentions an optional field, force_reload, that can be used to refresh the settings if needed.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/object-reference/elements/select.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"select\",\n  \"label\": \"i18n.BodyTextFontSize\",\n  \"id\": \"fontSize-root\",\n  \"options\": [\n    {\n      \"value\": 12,\n      \"label\": \"12px\"\n    },\n    {\n      \"value\": 13,\n      \"label\": \"13px\"\n    },\n    {\n      \"value\": 14,\n      \"label\": \"14px\"\n    },\n    {\n      \"value\": 16,\n      \"label\": \"16px\"\n    }\n  ]\n},\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory\nDESCRIPTION: Terminal commands to create and navigate to a new project directory for the URL generator\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/customer-login.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir urlGenerator\n$ cd urlGenerator\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from BigCommerce deleteCartItem() Operation\nDESCRIPTION: Example response returned after deleting a cart item. Shows the updated cart contents with remaining items and their details, including pricing, tax information, and product metadata.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-storefront.mdx#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"d4e978c2-bdcf-41b0-a49b-fecf4f5223c1\",\n  \"customerId\": 0,\n  \"email\": \"\",\n  \"currency\": {\n    \"name\": \"US Dollars\",\n    \"code\": \"USD\",\n    \"symbol\": \"$\",\n    \"decimalPlaces\": 2\n  },\n  \"isTaxIncluded\": false,\n  \"baseAmount\": 274.5,\n  \"discountAmount\": 0,\n  \"cartAmount\": 274.5,\n  \"coupons\": [],\n  \"discounts\": [\n    ...\n  ],\n  \"lineItems\": {\n    \"physicalItems\": [\n      {\n        \"id\": \"57a877e0-d898-47d0-910d-88656e8dee0c\",\n        \"parentId\": null,\n        \"variantId\": 66,\n        \"productId\": 86,\n        \"sku\": \"ABS\",\n        \"name\": \"[Sample] Able Brewing System\",\n        \"url\": \"https://{store_url}/able-brewing-system/\",\n        \"quantity\": 1,\n        ...\n        \"extendedSalePrice\": 225,\n        \"isShippingRequired\": true,\n        \"type\": \"physical\",\n        \"giftWrapping\": null\n      },\n      {\n        \"id\": \"22c461a2-eff9-4b72-8d22-7c2792ce2c2d\",\n        \"parentId\": null,\n        \"variantId\": 67,\n        \"productId\": 88,\n        \"sku\": \"CC3C\",\n        \"name\": \"[Sample] Chemex Coffeemaker 3 Cup\",\n        \"url\": \"https://{store_url}/chemex-coffeemaker-3-cup/\",\n        \"quantity\": 1,\n        ...\n        \"extendedSalePrice\": 49.5,\n        \"isShippingRequired\": true,\n        \"type\": \"physical\",\n        \"giftWrapping\": null\n      }\n    ],\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cron Job for Automated Product Import\nDESCRIPTION: Cron configuration to automatically run BigCommerce product import every 10 minutes.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/deployment/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n*/10 * * * * /usr/bin/wp bigcommerce import products --quiet > /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Custom Button Styling in CSS\nDESCRIPTION: Example of overriding default BigCommerce button styles with custom CSS\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/themes/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: css\nCODE:\n```\nbutton.bc-btn.bc-btn--form-submit.bc-btn--add_to_cart {\n  background-color: #ff9c33;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Option Set with V2 API in JSON\nDESCRIPTION: This snippet shows how to create an option set using the V2 API. It's part of the process to create a product with variants and SKUs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Color\"\n}\n```\n\n----------------------------------------\n\nTITLE: EarlyHint Helper Usage\nDESCRIPTION: Example of using the EarlyHint helper to specify resource hints for critical assets.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_36\n\nLANGUAGE: handlebars\nCODE:\n```\n{{ earlyHint '{path}' '{rel}' [as='{script|style|font}'] [crossorigin='{no|anonymous|use-credentials}'] }}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{earlyHint 'https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js' 'preload' as='script' crossorigin='anonymous'}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<script async src=\"{{cdn 'assets/dist/theme-bundle.head_async.js' resourceHint='preload' as='script'}}\"></script>\n\n{{getFontsCollection font-display='block'}}\n\n<script async src=\"{{cdn 'assets/dist/theme-bundle.font.js' resourceHint='preload' as='script'}}\"></script>\n\n{{{stylesheet '/assets/css/theme.css'}}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Storefront Language Support Information\nDESCRIPTION: This snippet shows a Callout component in Markdown to inform users about storefront language support limitations in BigCommerce.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/stores.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Callout type=\"info\">\n #### Storefront language support\n Each storefront can only support a single language. To display multiple languages, we recommend setting up a separate store for each language.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Adding Root URL Handler\nDESCRIPTION: Express route handler for the root URL to respond to GET requests.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/tutorial.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/',(req, res)=>{\n    res.send('Hello!');\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Location Storefront Visibility in BigCommerce API\nDESCRIPTION: This HTTP request disables a location's storefront visibility by setting its 'storefront_visibility' property to false using the Update locations endpoint.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/retirement.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/locations\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"id\": 2,\n    \"storefront_visibility\": false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Complete import statements for _app.tsx\nDESCRIPTION: Shows all necessary import statements required for the _app.tsx file, including BigDesign components, Next.js types, custom components, and context provider.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Box, GlobalStyles } from '@bigcommerce/big-design';\nimport type { AppProps } from 'next/app';\nimport Header from '../components/header';\nimport SessionProvider from '../context/session';\n```\n\n----------------------------------------\n\nTITLE: Referencing WebDAV Assets with the cdn Handlebars Helper in BigCommerce Stencil Themes\nDESCRIPTION: Example showing how to reference an image stored in WebDAV using the {{cdn}} Handlebars helper with the 'webdav:' prefix. This approach allows storing large assets outside the theme bundle while maintaining references to them.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/theme-size.mdx#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"{{cdn \"webdav:img/image.jpg\"}}\">\n```\n\n----------------------------------------\n\nTITLE: Accessing Checkout Object with Handlebars in BigCommerce Templates\nDESCRIPTION: Demonstrates how to access the Checkout object and its properties in the order-confirmation.html template using Handlebars expressions. This syntax allows template developers to retrieve data such as order confirmation content, checkout head content, order details, and header image information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_27\n\nLANGUAGE: handlebars\nCODE:\n```\n{{checkout.*}}\n```\n\n----------------------------------------\n\nTITLE: Creating Discount for Extra-Small Blue or Medium Blue Item with Free Shipping - JSON\nDESCRIPTION: This JSON snippet defines a promotion providing free shipping for customers purchasing extra-small blue or medium blue items, outlining relevant rules about the eligible product options.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/product.mdx#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy extra-small blue or medium blue item and receive free shipping\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            {\n              \"product_option\": {\n                \"type\": \"string_match\",\n                \"name\": \"Size\",\n                \"values\": [\n                  \"XS\",\n                  \"M\"\n                ]\n              }\n            },\n            {\n              \"product_option\": {\n                \"type\": \"string_match\",\n                \"name\": \"Color\",\n                \"values\": [\n                  \"Blue\"\n                ]\n              }\n            }\n          },\n          \"minimum_quantity\": 1\n        }\n      },\n      \"action\": {\n        \"shipping\": {\n          \"free_shipping\": true,\n          \"zone_ids\": [\n            1\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Postgres Connection String\nDESCRIPTION: Sample connection string format for Postgres database hosted on Supabase\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/subscriptions.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npostgresql://postgres:[YOUR-PASSWORD]@db.uqchmyniufaqkijttavq.supabase.co:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Setting Node Engine Requirements\nDESCRIPTION: JSON configuration for Node.js and npm version requirements\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-setup.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engines\": {\n    \"node\": \">=16 <20\",\n    \"npm\": \">=8 <10\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing CSS Stylesheet in Handlebars Template\nDESCRIPTION: Demonstrates how to link a CSS stylesheet in a Stencil theme using Handlebars helpers. It uses the {{partial}} helper to define a 'head' block and the {{cdn}} helper to reference the stylesheet.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/style/composition-and-styling.mdx#2025-04-16_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#partial \"head\"}}\n    <link href=\"{{cdn '/assets/css/invoice.scss'}}\" rel=\"stylesheet\">\n{{/partial}}\n```\n\n----------------------------------------\n\nTITLE: Creating Spend Threshold Free Gift Promotion with Request in BigCommerce API\nDESCRIPTION: Example JSON request to create a promotion where customers receive a free product when spending a minimum amount on items from a specific brand. The promotion targets brand ID 38 with a $200 minimum spend threshold and offers product ID 130 as the free gift.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/brand.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Spend $X on brand Y and get product Z for free\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"apply_once\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"brands\": [\n              38\n            ]\n          },\n          \"minimum_spend\": 200\n        }\n      },\n      \"action\": {\n        \"gift_item\": {\n          \"product_id\": 130,\n          \"quantity\": 1\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Order Details from Order Confirmation Page in HTML and JavaScript\nDESCRIPTION: Demonstrates how to log order details from the order confirmation page by accessing the order ID from the Stencil theme's page context and using it to fetch order details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/guide/rest-management.mdx#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script>\n// assign order ID to a variable\nlet jsContextOrderId = {{checkout.order.id}};\n\n// use jsContextOrderId to fetch and log order details\nfetch(`/api/storefront/order/${jsContextOrderId}`, {\n  credentials: 'include'\n}).then(function (response) {\n  return response.json();\n}).then(function (myJson) {\n  console.log(myJson);\n}).catch(function (error) {\n  console.log(error);\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Checkout JS Dependencies\nDESCRIPTION: Commands to clone the checkout-js repository and install its dependencies using npm.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/open-checkouts/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone the repo\ngit clone https://github.com/bigcommerce/checkout-js\n\n# Install dependencies\ncd checkout-js\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Initializing package.json\nDESCRIPTION: Command to create a new package.json file using npm init\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-setup.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Deleting Segments via DELETE Request\nDESCRIPTION: Deletes specified segments using a DELETE request with optional segment IDs as query parameters.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/segments/user-guide.mdx#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nDELETE https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/segments\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: GraphQL API Error Status Codes\nDESCRIPTION: Table of GraphQL API error status codes and messages, all returning 401 Unauthorized with specific error descriptions for different authentication and authorization scenarios.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/about/status-codes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Code | Text | Purpose |\n|:----:|:-----|:--------|\n| **401** | **Unauthorized** | This response is sent when your client failed to provide credentials or its credentials were invalid. |\n| | \"GraphQL credentials were missing. No token was sent.\" | No token sent. The token was missing. |\n| | \"GraphQL invalid credentials. String is not a JWT\" | Invalid JWT sent. The token was not a well-formed JWT. |\n```\n\n----------------------------------------\n\nTITLE: Using Payment Methods Object in Handlebars Templates\nDESCRIPTION: Handlebars expressions for accessing the payment methods object in BigCommerce templates, used in the add-payment-method.html template.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_18\n\nLANGUAGE: handlebars\nCODE:\n```\n{{vault}}\n{{countries}}\n{{forms}}\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Storefront API Token in BigCommerce\nDESCRIPTION: Example JSON response showing the structure of a created GraphQL Storefront API token in BigCommerce.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\":\"BigCommerceProvidedJwt.dotDelimited.threePartString\",\n  \"meta\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Stencil CLI Installation\nDESCRIPTION: Command to check the installed version of Stencil CLI.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/storefront-selector.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstencil -V\n```\n\n----------------------------------------\n\nTITLE: Creating Consignment with Pickup Option in BigCommerce Checkout API\nDESCRIPTION: This HTTP POST request demonstrates how to create a consignment with a pickup option using the BigCommerce Checkout API. It includes the line item ID and pickup method ID in the request body.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/guide/add-to-cart.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST https://{store_domain}/api/storefront/checkouts/{checkoutId}/consignments\nContent-Type: application/json\nAccept: application/json\n\n[\n  ...\n\n  \"lineItems\": [\n    {\n      itemId: 20,\n      quantity: 1\n    }\n  ]\n  \"pickupOption\": {\n    \"pickupMethodId\": 1\n    }\n  \"address\": []\n]\n```\n\n----------------------------------------\n\nTITLE: Customizing Add to Cart Success Message with BigCommerce for WordPress\nDESCRIPTION: This function customizes the message displayed when a user adds an item to their cart. It modifies the 'ajax_add_to_cart_success' string in the localization array to include a link to the cart page.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/themes/index.mdx#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction update_add_to_cart_message( $js_i18n_array ){\n   $js_i18n_array['cart']['ajax_add_to_cart_success'] = 'Item added to cart. <a href=\"/cart\">View Cart!</a>';\n   return $js_i18n_array;\n};\n```\n\n----------------------------------------\n\nTITLE: Applying SCSS Autofix and Revalidating\nDESCRIPTION: Executes the scss-autofix command to automatically fix SCSS issues, followed by the bundle command to revalidate the theme.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/node-sass.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nstencil scss-autofix\n```\n\nLANGUAGE: shell\nCODE:\n```\nstencil bundle\n```\n\n----------------------------------------\n\nTITLE: Decrementing a Variable by One - JavaScript\nDESCRIPTION: Decreases the value of a variable by one.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction decrementVar() { variable -= 1; }\n```\n\n----------------------------------------\n\nTITLE: API Connection Error for Channel Listings\nDESCRIPTION: Error messages indicating connection issues when trying to access channel listings through the BigCommerce API. These errors typically occur when there are channel connectivity problems.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/platform-integration/unexpected-behavior.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n[502] Error connecting to the API (https://api.bigcommerce.com/stores/hash/v3/channels/channel_id/listings)\n[504] Error connecting to the API (https://api.bigcommerce.com/stores/hash/v3/channels/channel_id/listings/listing_id)\n```\n\n----------------------------------------\n\nTITLE: Downloading PayPal SVG Logo\nDESCRIPTION: This bash command uses `curl` to download the PayPal SVG image from a given URL and saves it to the specified directory. Ensure that the directory `assets/img/payment-methods` exists before running the command.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/checkout-enhancements/stored-payment-methods.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd assets/img/payment-methods/paypal.svg\ncurl -O https://raw.githubusercontent.com/leeBigCommerce/cornerstone/54f5681a6a15cd8477c51c6db9eb54ea3eb40972/assets/img/payment-methods/paypal.svg\n```\n\n----------------------------------------\n\nTITLE: Accessing Cart Object in Handlebars\nDESCRIPTION: Handlebars expression to access the cart object, which contains cart-specific properties for the current session. It includes information about quantity, checkout options, discounts, pricing, shipping, coupons, and gift certificates.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_5\n\nLANGUAGE: handlebars\nCODE:\n```\n{{cart}}\n```\n\n----------------------------------------\n\nTITLE: Category Discount Excluding Sale Items\nDESCRIPTION: Shows how to create a promotion that applies a $20 discount to category items while excluding items already on sale. Uses automatic redemption with the LEAST_EXPENSIVE strategy.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/category.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"20 dollars off all garden material, exclude items on sale\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"fixed_amount\": \"20\"\n          },\n          \"strategy\": \"LEAST_EXPENSIVE\",\n          \"as_total\": false,\n          \"include_items_considered_by_condition\": false,\n          \"exclude_items_on_sale\": true,\n          \"items\": {\n            \"categories\": [\n              19\n            ]\n          }\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TextField component\nDESCRIPTION: This code defines a BasicTextFields component that includes a Material UI TextField for user input. It is designed to capture the email address for sending the coupon.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/react.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\n\nexport default function BasicTextFields() {\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        '& > *': {\n          m: 1,\n          width: '200px',\n        },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <TextField\n        id=\"standard-basic\"\n        label=\"you@example.com\"\n        variant=\"standard\"\n      />\n    </Box>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating if() Method Parent Selector Evaluation Bug in SCSS\nDESCRIPTION: Example of how the if() method incorrectly evaluates its parent selector in production environments compared to Stencil CLI, leading to different color outputs.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/incompatible-directives.mdx#2025-04-16_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@function foo() {\n  @return if(& != null, green, red);\n}\n\ntest {\n  color: foo();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Homepage Component\nDESCRIPTION: React functional component implementation for the homepage using BigDesign components\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-setup.mdx#2025-04-16_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst Index = () => (\n    <Panel header=\"Homepage\" margin=\"xxLarge\">\n        <Text>Hello world</Text>\n    </Panel>\n);\n\nexport default Index;\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Database Migration\nDESCRIPTION: Command to execute Prisma migrations for database schema setup\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/subscriptions.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx prisma migrate dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Webhook Application\nDESCRIPTION: Commands to navigate to the project directory and start the ngrok tunnel.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/tutorial.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/path/to/webhooks-test # Make sure you're in your webhooks-test project directory\n\nngrok http http://localhost:8080              # Start the app\n```\n\n----------------------------------------\n\nTITLE: Templates Directory Structure for Theme HTML Files\nDESCRIPTION: This snippet details the structure of the 'templates' directory, which contains HTML files for various components and layouts of the theme.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/directory-structure.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n├── templates\n│   ├── components\n│   │   ├── common\n│   │   |   ├── header.html\n│   │   |   ├── footer.html\n│   │   |   ├── body.html\n│   │   |   ...\n│   ├── layout\n│   │   ├── base.html\n│   │   |   ...\n│   └── pages\n```\n\n----------------------------------------\n\nTITLE: Authenticating DELETE Request with X-Auth-Token Header\nDESCRIPTION: Example of how to authenticate a DELETE request to BigCommerce API using the X-Auth-Token header with an access token.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nDELETE https://api.bigcommerce.com/stores/{{STORE_HASH}}/v... # endpoint\nX-Auth-Token: {{access_token}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring ngrok\nDESCRIPTION: These commands install ngrok using Homebrew and configure it with an authtoken. ngrok is used to create a secure tunnel for exposing the local development server to the internet.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-connect.mdx#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbrew install ngrok/ngrok/ngrok\nngrok config add-authtoken <TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Using the pluck Helper in Handlebars with BigCommerce\nDESCRIPTION: The pluck helper retrieves values from a collection using specified search keys. It can return values as a comma-separated string or, when used with the each helper, as an array.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_31\n\nLANGUAGE: handlebars\nCODE:\n```\n{{pluck limit collection path}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{pluck ([limit] <collection> [<limit-value>]) '<path>'}}\n```\n\nLANGUAGE: json\nCODE:\n```\ncategories: [\n    { \"id\": 1, \"name\": \"Bakeware\", \"image\": { \"data\": \"http://...\", \"alt\": \"Bakeware image\"} },\n    { \"id\": 2, \"name\": \"Cookware\", \"image\": { \"data\": \"http://...\", \"alt\": \"Cookware image\"} },\n    { \"id\": 3, \"name\": \"Cutlery\", \"image\": { \"data\": \"http://...\", \"alt\": \"Cutlery image\"} }\n]\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{pluck (limit categories 2) 'image.data'}}\n<!-- Returns a comma-separated list of image URLs. -->\n```\n\nLANGUAGE: json\nCODE:\n```\nusers: [\n    { \"user\": \"barney\", \"age\": 36, \"image\": { \"url\": \"barney.jpg\" } },\n    { \"user\": \"fred\",   \"age\": 40, \"image\": { \"url\": \"fred.jpg\" } }\n]\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{pluck users \"age\"}}\n<!-- => 36,40 -->\n\n{{pluck users \"image.url\"}}'\n<!-- => barney.jpg,fred.jpg -->\n\nStandard pluck helper example:\n// {{pluck items \"data.title\"}}\nresults in: '[\"aa\", \"bb\", \"cc\"]'\n```\n\n----------------------------------------\n\nTITLE: Updating Checkout SDK with npm in JavaScript\nDESCRIPTION: This snippet demonstrates how to update the Checkout SDK package in an existing custom checkout implementation using npm. It shows two methods: directly specifying the version number or updating the package.json file.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/draft/checkout-sdk.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @bigcommerce/checkout-sdk@<latest-version-number>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: TypeScript Export Definitions\nDESCRIPTION: TypeScript export statements for type definitions.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-integrate.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from './auth';\nexport * from './db';\n```\n\n----------------------------------------\n\nTITLE: API Response - Inventory Locations Data\nDESCRIPTION: Example response showing inventory information including location details, available stock, and settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/diataxis-templates/guide.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"identity\": {\n        \"product_id\": 123\n      },\n      \"locations\": [\n        {\n          \"location_id\": 1,\n          \"location_code\": \"BC-LOCATION-1\",\n          \"location_name\": \"Default location\",\n          \"available_to_sell\": 10,\n          \"total_inventory_onhand\": 11,\n          \"location_enabled\": true,\n          \"settings\": {\n            \"safety_stock\": 1,\n            \"is_in_stock\": true,\n            \"warning_level\": 1\n          }\n        }\n      ]\n    }\n  ],\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Locations to Disable in BigCommerce API\nDESCRIPTION: This HTTP request disables a location by setting its 'enabled' property to false using the Update locations endpoint.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/retirement.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/locations\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"id\": 2,\n    \"enabled\": false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Metafields Payload Object in BigCommerce Webhooks\nDESCRIPTION: This JSON snippet shows the structure of a payload object for metafield-related webhook events in BigCommerce. It includes store ID, producer, creation timestamp, event scope, metafield and resource data, and a hash for verification.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"store_id\": \"11111\",\n  \"producer\": \"stores/abcde\",\n  \"created_at\": 1641641646,\n  \"scope\": \"store/channel/metafield/created\",\n  \"data\": {\n    \"metafield_id\": 21,\n    \"resource_id\": \"1\"    //channel ID\n  },\n  \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Studio\nDESCRIPTION: Command to launch Prisma Studio for database visualization and management\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/subscriptions.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx prisma studio\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Overview - Shell\nDESCRIPTION: Shows the hierarchical organization of webhook schema files, including data directory for JSON sources and individual YAML schema files.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/webhooks/callbacks/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n.\n├── data                      # json data for generating and updating yaml schema\n├── _all.yml                  # Groups models together for docs\n├── store_app_uninstalled.yml # Individual email template models\n├── ...\n```\n\n----------------------------------------\n\nTITLE: Making Absolute Inventory Adjustments - Product Level\nDESCRIPTION: PUT request to set absolute inventory quantities for products. Uses the /adjustments/absolute endpoint to set specific inventory quantities for products at specified locations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.bigcommerce.com/stores/{{store_hash}}/v3/inventory/adjustments/absolute\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"items\": [\n    {\n      \"location_id\": 1,\n      \"product_id\": 111,\n      \"quantity\": 10\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Cloud Connection String Example\nDESCRIPTION: Example connection string format for MongoDB Cloud database connection with placeholders for username and password authentication.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/point-of-sale.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmongodb+srv://<username>:<password>@cluster0.sdfdfg65.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\n```\n\n----------------------------------------\n\nTITLE: Unused Translation Keys Error Example\nDESCRIPTION: This error appears when there are translation keys in the schemaTranslations.json file that aren't used by the theme, which should be removed for cleaner code.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/unexpected-behavior.mdx#2025-04-16_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nError: Your theme's schemaTranslations.json has errors:\nunused translation key \"i18n.ProductSaleBadges\"\nunused translation key \"i18n.ShowProductSaleBadges\"\n```\n\n----------------------------------------\n\nTITLE: Joining Array into String - JavaScript\nDESCRIPTION: Joins an array of string elements into one single string with a specified separator.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction join(arr, separator) { return arr.join(separator); }\n```\n\n----------------------------------------\n\nTITLE: Generate Prisma Client\nDESCRIPTION: Command to generate a new Prisma client for database interaction.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/point-of-sale.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: NPM command to install dependencies with legacy peer deps flag\nSOURCE: https://github.com/bigcommerce/docs/blob/main/guides/create-a-site-preview.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --legacy-peer-deps\n```\n\n----------------------------------------\n\nTITLE: Rendering Categories List with Handlebars\nDESCRIPTION: Demonstrates how to display a list of categories in the current page context using Handlebars #each iterator. This code renders an unordered list of category names based on the categories object.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/global-objects-and-properties.mdx#2025-04-16_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n<!-- renders a UL of categories for the current page context -->\n<ul class=\"people_list\">\n  {{#each categories}}\n    <li>{{this.name}}</li>\n  {{/each}}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: JSON-encoded Button Widget Template for BigCommerce\nDESCRIPTION: This is a JSON-encoded version of the button widget template, suitable for API submissions in BigCommerce.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/examples.mdx#2025-04-16_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<style>.sd-button-{{_.id}}{display:flex;align-items:center;{{#if alignment.horizontal '===' 'center'}}justify-content: center;{{else if alignment.horizontal '===' 'left'}}justify-content: flex-start;{{else if alignment.horizontal '===' 'right'}}justify-content: flex-end;{{/if}}}.sd-button-{{_.id}}a{color:{{textColor}};font-size:{{textSize.value}}{{textSize.type}};font-family:{{fontFamily}};font-weight:{{fontWeight}};padding-top:{{buttonPadding.top.value}}{{buttonPadding.top.type}};padding-right:{{buttonPadding.right.value}}{{buttonPadding.right.type}};padding-bottom:{{buttonPadding.bottom.value}}{{buttonPadding.bottom.type}};padding-left:{{buttonPadding.left.value}}{{buttonPadding.left.type}};margin-top:{{buttonMargin.top.value}}{{buttonMargin.top.type}};margin-right:{{buttonMargin.right.value}}{{buttonMargin.right.type}};margin-bottom:{{buttonMargin.bottom.value}}{{buttonMargin.bottom.type}};margin-left:{{buttonMargin.left.value}}{{buttonMargin.left.type}};text-align:center;text-decoration:none}.sd-button-{{_.id}}a{background-color:{{backgroundColor}};border:{{buttonBorder}}px solid{{borderColor}};border-radius:{{borderRadius}}px}.sd-button-{{_.id}}a:hover{background-color:{{backgroundColorHover}};border-color:{{borderColorHover}};color:{{textColorHover}}}@media only screen and (max-width: 700px){.sd-button-{{_.id}}{}}<\\/style><div class=\\\"sd-button-widget sd-button-{{_.id}}\\\"> <a href=\\\"{{buttonLink}}\\\" role=\\\"button\\\">{{buttonText}}<\\/a><\\/div>\n```\n\n----------------------------------------\n\nTITLE: Creating Brand Item Discount Promotion with Request in BigCommerce API\nDESCRIPTION: Example JSON request to create a promotion where customers get $50 off the most expensive item when buying two items from a specific brand. The promotion applies automatically and targets brand ID 36.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/brand.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy two brand items and get the most expensive one at $50 off\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"apply_once\": false,\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"brands\": [\n              36\n            ]\n          },\n          \"minimum_quantity\": 2\n        }\n      },\n      \"action\": {\n        \"cart_items\": {\n          \"strategy\": \"MOST_EXPENSIVE\",\n          \"include_items_considered_by_condition\": true,\n          \"discount\": {\n            \"fixed_amount\": \"50\"\n          },\n          \"items\": {\n            \"brands\": [\n              36\n            ]\n          },\n          \"quantity\": 1\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Google Fonts in config.json for BigCommerce Themes\nDESCRIPTION: Example of how to change the body font in the theme's config.json file from Karla to Lato with a different weight.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/style/fonts-and-icons.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n//old\n{\n  \"body-font\": \"Google_Karla_400\"\n}\n\n//new\n{\n  \"body-font\": \"Google_Lato_700\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Heading for BigCommerce Theme\nDESCRIPTION: This JSON snippet is used to configure a heading element within BigCommerce documentation. It specifies the type as 'heading' and assigns content from the 'i18n' module, presumably to support internationalization. The 'type' and 'content' fields are required, indicating the kind of element and its display content respectively.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/object-reference/elements/heading.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"heading\",\n  \"content\": \"i18n.BackgroundAndLines\"\n},\n```\n\n----------------------------------------\n\nTITLE: Database Migration Setup\nDESCRIPTION: Command to run initial database migration for MySQL setup\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/quick-start.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run db:setup\n```\n\n----------------------------------------\n\nTITLE: Cloning Cornerstone Repository with Git\nDESCRIPTION: Command to clone the BigCommerce Cornerstone theme repository from GitHub.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/localization/storefront-selector.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/bigcommerce/cornerstone.git\n```\n\n----------------------------------------\n\nTITLE: Deleting Pickup Methods in BigCommerce API\nDESCRIPTION: This HTTP request deletes specified pickup methods using the Delete pickup methods endpoint. Multiple pickup method IDs can be provided in the query parameter.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/retirement.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nDELETE https://api.bigcommerce.com/stores/{{store_hash}}/v3/pickup/methods?id:in=1,2\nX-Auth-Token: {{access_token}}\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Running the Script\nDESCRIPTION: Command to execute the JavaScript file that generates the login URL\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/authentication/customer-login.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ node youFileName.js\n```\n\n----------------------------------------\n\nTITLE: Cart Line Items Addition Input Variables\nDESCRIPTION: JSON input variables for adding a line item to an existing cart. This specifies the cart's entity ID and details of the product to be added (one unit of product 107).\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/end-to-end-guides/graphql-storefront.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n  {\n    \"addCartLineItemsInput\": {\n      \"cartEntityId\": \"bb916deb-ddd6-4586-b65b-b8385e0e7a9d\",\n      \"data\": {\n        \"lineItems\": [\n          {\n            \"quantity\": 1,\n            \"productEntityId\": 107\n          }\n        ]\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Encoding HTML Entities - JavaScript\nDESCRIPTION: Converts special characters in a string to HTML entities for safe HTML rendering.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction encodeHtmlEntities(str) { return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;'); }\n```\n\n----------------------------------------\n\nTITLE: Field Reference Example - Default Currency\nDESCRIPTION: Example showing how to document currency-related field behavior\nSOURCE: https://github.com/bigcommerce/docs/blob/main/diataxis-templates/api-reference/api-reference.mdx#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nThe store uses `default_currency` on the storefront when it cannot use other currencies.\n```\n\n----------------------------------------\n\nTITLE: Image Download Failure in BigCommerce for WordPress\nDESCRIPTION: Error message showing a failed image download due to a cURL timeout. This can be caused by network/firewall settings, DNS failures, server limits, security modules, or IPv6/IPv4 resolution issues.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/platform-integration/unexpected-behavior.mdx#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nBigCommerce.NOTICE: Failed to download image {\"url\":\"https://cdn11.bigcommerce.com/s-hash/products/18id20/images/id/hps_bottle__13339.1611096484.1280.1280.png?c=2\",\"error\":[\"cURL error 28: Resolving timed out after 10000 milliseconds\"]} []\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Cancelling a Subscription in JSON\nDESCRIPTION: This JSON response shows the result of cancelling a subscription using the cancelSubscription mutation. It includes the subscription ID and the date when the subscription will be cancelled.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/unified-billing/example-queries.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"subscription\": {\n      \"cancelSubscription\": {\n        \"subscriptionId\": \"bc/account/subscription/9bbe8843-27eb-4f78-b34b-c692d1016382\",\n        \"cancelledAt\": \"2023-11-09T00:00:00.000Z\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Processing Email Template Models in Bash\nDESCRIPTION: Bash script for batch processing multiple JSON files to YAML schemas, converting and moving them to the appropriate directory.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/emails/object-reference/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfor f in models/email_templates/data/*.json; do cat $f | python models/json2schema.py > ${f%.*}.yml; mv ${f%.*}.yml models/email_templates/; done\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Parsing Error Example\nDESCRIPTION: This error indicates a syntax issue in the frontmatter of a template file, specifically a trailing comma in the home.html file that needs to be removed.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/unexpected-behavior.mdx#2025-04-16_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nError: Found unallowed trailing symbol in: \"4,\", while parsing frontmatter at \".....templates/pages/home.html\".\n```\n\n----------------------------------------\n\nTITLE: BigCommerce Blocks Reference Table\nDESCRIPTION: Markdown table showing all available BigCommerce blocks for WordPress Gutenberg editor, including block names, descriptions, and their configurable settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/content/gutenberg.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Block Name| Description| Settings|\n|:--|:--|:--|\n| BigCommerce Products| displays a list of products by brands, categories or individual products.| Edit Products, Additional CSS Class                 |\n| BigCommerce Cart                     | displays the items currently in the customer's cart                             | Additional CSS Class                                |\n| BigCommerce Checkout                 | displays an embedded checkout form                                              | Additional CSS Class                                |\n| BigCommerce Account Profile          | displays a customer information update form                                     | Additional CSS Class                                |\n| BigCommerce Address List             | displays a list of customer shipping addresses with edit UI                     | Additional CSS Class                                |\n| BigCommerce Order History            | displays list of the customer's past orders.                                    | Additional CSS Class                                |\n| BigCommerce Login Form               | displays customer login form                                                    | Additional CSS Class                                |\n| BigCommerce Gift Certificates        | displays gift certificate UI                                                    | Additional CSS Class                                |\n| BigCommerce Gift Certificate Balance | displays gift certificate balance                                               | Additional CSS Class                                |\n| BigCommerce Product Reviews          | displays product reviews for a product                                          | Product ID, Additional CSS Class                    |\n| BigCommerce Product Components       | displays a product's component(s) (sku, image, title, description, add to cart) | Product ID, Product Component, Additional CSS Class |\n```\n\n----------------------------------------\n\nTITLE: Fetching Page Context with Fetch API\nDESCRIPTION: JavaScript code using the fetch API to retrieve the page context data in JSON format and log it to the console. This is the uncompressed source of the bookmark in the previous snippet.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/theme-objects.mdx#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nfetch(window.location.pathname + \"?debug=context\")\n.then(function(response) {\n    response.json().then(function(data){\n        console.log(data);\n    })\n});\n```\n\n----------------------------------------\n\nTITLE: PHP getenv() Warning Message\nDESCRIPTION: Error message that appears when running the plugin on an incompatible PHP version (below 5.6). Shows a warning about incorrect parameters for the getenv() function.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/platform-integration/unexpected-behavior.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nPHP message: PHP Warning: getenv() expects exactly 1 parameter, 2 given in wp-content/plugins/bigcommerce-for-wordpress-0.11.1/bigcommerce.php on line 58\n```\n\n----------------------------------------\n\nTITLE: Implementing Snippets in Handlebars for BigCommerce\nDESCRIPTION: This code snippet shows how to implement a snippet in a BigCommerce template. It uses a div with a 'gr-snippet' class and a data attribute to specify the content URL.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/dynamic-content-rendering.mdx#2025-04-16_snippet_8\n\nLANGUAGE: handlebars\nCODE:\n```\n<div class=\"gr-snippet\" data-gr-content=\"CONTENT URL\">\n     <em>Loading...</em>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Starting Ngrok HTTP Tunnel\nDESCRIPTION: Command to start ngrok and expose the local web server to the internet\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/quick-start.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/path/to/sample-app-nodejs\nngrok http http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Response for Extra-Small or Medium Item Promotion - JSON\nDESCRIPTION: This JSON response snippet provides the details of the promotional offer for extra-small or medium items, including the promotion ID, customer eligibility, and rule conditions for free shipping.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/product.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 38,\n    \"name\": \"Buy extra-small or medium item and get free shipping to zone id 1\",\n    \"created_from\": \"api\",\n    \"customer\": {\n      \"group_ids\": [],\n      \"minimum_order_count\": 0,\n      \"excluded_group_ids\": [],\n      \"segments\": null\n    },\n    \"rules\": [\n      {\n        \"action\": {\n          \"shipping\": {\n            \"free_shipping\": true,\n            \"zone_ids\": [\n              1\n            ]\n          }\n        },\n        \"apply_once\": true,\n        \"stop\": false,\n        \"condition\": {\n          \"cart\": {\n            \"items\": {\n              \"product_option\": {\n                \"type\": \"string_match\",\n                \"name\": \"Size\",\n                \"values\": [\n                  \"XS\",\n                  \"M\"\n                ]\n              }\n            },\n            \"minimum_quantity\": 1\n          }\n        }\n      }\n    ],\n    \"notifications\": [],\n    \"stop\": false,\n    \"currency_code\": \"USD\",\n    \"redemption_type\": \"AUTOMATIC\",\n    \"shipping_address\": null,\n    \"current_uses\": 0,\n    \"max_uses\": null,\n    \"start_date\": \"2022-07-21T19:11:08+00:00\",\n    \"end_date\": null,\n    \"status\": \"ENABLED\",\n    \"schedule\": null,\n    \"can_be_used_with_other_promotions\": true\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Verbose CSV Log Format Example in Shell\nDESCRIPTION: Example of a more detailed CSV log format for channel apps that provides granular information about each product sync event, including IDs and error messages.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/channels/guide/best-practices.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nPOS ID, BC ID, EVENT\n34, 103, Product Created\n35, --, Error: Product Creation Skipped [Invalid product name]\n```\n\n----------------------------------------\n\nTITLE: Creating a Percentage Discount on Specific Product in BigCommerce (JSON)\nDESCRIPTION: This snippet demonstrates how to create a promotion that offers 10% off a specific product when the cart total reaches $100. It includes rules for discount application and notification settings.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/product.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Spend 100 dollars and get 10% off small orbit\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"percentage_amount\": \"10\"\n          },\n          \"strategy\": \"LEAST_EXPENSIVE\",\n          \"as_total\": false,\n          \"include_items_considered_by_condition\": false,\n          \"items\": {\n            \"products\": [\n              130\n            ]\n          },\n          \"quantity\": 1\n        }\n      },\n      \"apply_once\": true,\n      \"stop\": false,\n      \"condition\": {\n        \"cart\": {\n          \"minimum_spend\": \"100\"\n        }\n      }\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ],\n  \"stop\": false,\n  \"status\": \"ENABLED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to YAML Schema using Python in Bash\nDESCRIPTION: Demonstrates how to use the json2schema.py script to convert JSON data to a YAML schema file. This command reads from data.json and outputs to schema.yml.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/emails/object-reference/draft/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncat data.json | python json2schema.py > schema.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Page with YAML Front Matter in Cornerstone Theme\nDESCRIPTION: Example of YAML Front Matter from the home.html file in the Cornerstone theme, demonstrating how to configure product display limits, carousel visibility, and blog post counts for a storefront homepage.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/start/tech-stack.mdx#2025-04-16_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nproducts:\n  new:\n    limit: {{theme_settings.homepage_new_products_count}}\n  featured:\n    limit: {{theme_settings.homepage_featured_products_count}}\n  top_sellers:\n    limit: {{theme_settings.homepage_top_products_count}}\ncarousel: {{theme_settings.homepage_show_carousel}}\nblog:\n  recent_posts:\n    limit: {{theme_settings.homepage_blog_posts_count}}\n```\n\n----------------------------------------\n\nTITLE: Python Syntax Error in npm Installation\nDESCRIPTION: This error occurs when Stencil CLI is included as a dependency in a project's package.json file rather than being installed globally. It shows a Python syntax error during the npm install process.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/unexpected-behavior.mdx#2025-04-16_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nnpm ERR! gyp ERR! stack Error: Command failed: /usr/local/bin/python -c import sys; print \"%s.%s.%s\" % sys.version_info[:3];\nnpm ERR! gyp ERR! stack   File \"<string>\", line 1\nnpm ERR! gyp ERR! stack     import sys; print \"%s.%s.%s\" % sys.version_info[:3];\nnpm ERR! gyp ERR! stack                                ^\nnpm ERR! gyp ERR! stack SyntaxError: invalid syntax\n```\n\n----------------------------------------\n\nTITLE: Querying Channel Locales in GraphQL\nDESCRIPTION: This GraphQL query retrieves the locales for a specific channel. It returns the locale code, status, and whether it is the default locale.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/settings/locales.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  store {\n    locales(input: { channelId: \"bc/store/channel/1\"}) {\n      edges {\n        node {\n          code\n          status\n          isDefault\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to YAML Schema - Bash\nDESCRIPTION: Command for converting a single JSON file to YAML schema using the json2schema.py script.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/webhooks/callbacks/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncat data.json | python json2schema.py > schema.yml\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Packages Command\nDESCRIPTION: Command to install required npm packages in the project root directory.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/diataxis-templates/guide.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Structuring Catalog Price Object With Sale Price in JSON\nDESCRIPTION: Demonstrates a JSON structure for representing catalog price objects including a sale price. This includes dependencies on product pricing settings and control panel configurations. The expected input involves product data with sale price information, and output is a JSON structure for rendering in a storefront context.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/catalog-price-object.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"product\": {\n    // ...\n    \"price\": {\n      \"without_tax\": {\n        \"formatted\": \"$15.00\",\n        \"value\": 15\n      },\n      \"tax_label\": \"Sales Tax\",\n      \"sale_price_without_tax\": {\n        \"formatted\": \"$15.00\",\n        \"value\": 15\n      },\n      \"non_sale_price_without_tax\": {\n        \"formatted\": \"$20.00\",\n        \"value\": 20\n      },\n      \"rrp_without_tax\": {\n        \"formatted\": \"$25.00\",\n        \"value\": 25\n      },\n      \"saved\": {\n        \"formatted\": \"$10.00\",\n        \"value\": 10\n      },\n      \"retail_price_range\": {\n        \"min\": {\n          \"without_tax\": {\n            \"formatted\": \"$25.00\",\n            \"value\": 25\n          }\n        },\n        \"max\": {\n          \"without_tax\": {\n            \"formatted\": \"$25.00\",\n            \"value\": 25\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Settings Profile Payload Object in JSON\nDESCRIPTION: This JSON object shows the payload structure for settings-related webhook events, specifically for search context filters. It contains store ID, producer, creation timestamp, scope, category ID, and a hash value.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/channels.mdx#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n \"store_id\": \"11111\",\n \"producer\": \"stores/abcde\",\n \"created_at\": 1641641646,\n \"scope\": \"store/channel/1/settings/searchContextFilters/updated\",\n \"data\": {\n   \"category_id\": 29\n },\n \"hash\": \"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n}\n```\n\n----------------------------------------\n\nTITLE: Placing a Widget on the Storefront using BigCommerce Widgets API\nDESCRIPTION: This HTTP POST request places a created widget on the storefront in a specific region. It requires the widget UUID and specifies the placement details.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/guide/versioning.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /stores/{{STORE_HASH}}/v3/content/placements\nHost: api.bigcommerce.com\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"widget_uuid\": \"{your-widget-uuid}\",\n  \"entity_id\": \"\",\n  \"template_file\": \"pages/home\",\n  \"status\": \"active\",\n  \"sort_order\": 1,\n  \"region\": \"home_below_featured_products\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing System Checks\nDESCRIPTION: Conditional rendering for loading and error states in products component.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nif (isLoading) return <Loading />;\nif (isError) return <ErrorMessage />;\n```\n\n----------------------------------------\n\nTITLE: Basic or Helper Usage in Handlebars\nDESCRIPTION: Simple example showing the or helper rendering a block when at least one parameter (in this case, the first one) evaluates to true.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_67\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#or 1 0 0 0 0 0 0}}\n<!-- 1 evaluates to true, so block is rendered-->\n{{/or}}\n```\n\n----------------------------------------\n\nTITLE: Installing BigDesign React Components with npm\nDESCRIPTION: Command to install BigDesign and styled-components using npm package manager.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/ui.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @bigcommerce/big-design styled-components\n```\n\n----------------------------------------\n\nTITLE: Meta Directory Structure for Marketplace Screenshots\nDESCRIPTION: This code snippet outlines the contents of the 'meta' directory, which includes various screenshot images used for the marketplace.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/directory-structure.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n├── meta\n│   ├── composed.png\n│   ├── desktop_bold.png\n│   ├── desktop_light.png\n│   ├── desktop_warm.png\n│   ├── mobile_bold.png\n│   ├── mobile_light.png\n│   └── mobile_warm.png\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Range with Inclusion - JavaScript\nDESCRIPTION: Iterates from a starting number 'a' to an ending number 'b', including the endpoint.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction forEachRange(a, b, callback) { for (let i = a; i <= b; i++) { callback(i); } }\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Product Route Component\nDESCRIPTION: ProductInfo component implementation for handling individual product routes with data fetching and form submission.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nconst ProductInfo = () => {\n    const router = useRouter();\n    const encodedContext = useSession()?.context;\n    const { pid } = router.query;\n    const { isError, isLoading, list = [], mutateList } = useProductList();\n    const product = list.find(item => item.id === Number(pid));\n    const { description, is_visible: isVisible, name, price, type } = product ?? {};\n    const formData = { description, isVisible, name, price, type };\n\n    const handleCancel = () => router.push('/products');\n\n    const handleSubmit = async (data: FormData) => {\n        try {\n            const filteredList = list.filter(item => item.id !== Number(pid));\n            const { description, isVisible, name, price, type } = data;\n            const apiFormattedData = { description, is_visible: isVisible, name, price, type };\n\n            // Update local data immediately (reduce latency to user)\n            mutateList([...filteredList, { ...product, ...data }], false);\n\n            // Update product details\n            await fetch(`/api/products/${pid}?context=${encodedContext}`, {\n                method: 'PUT',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(apiFormattedData),\n            });\n\n            // Refetch to validate local data\n            mutateList();\n\n            router.push('/products');\n        } catch (error) {\n            console.error('Error updating the product: ', error);\n        }\n    };\n\n    if (isLoading) return <Loading />;\n    if (isError) return <ErrorMessage />;\n\n    return (\n        <Form formData={formData} onCancel={handleCancel} onSubmit={handleSubmit} />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Unsupported Node Version Error Example\nDESCRIPTION: This error message appears when using an incompatible Node.js version with Stencil CLI. It indicates a parsing method is missing, which requires updating to a supported Node.js version.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/unexpected-behavior.mdx#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nDebug: internal, implementation, error\n        TypeError: Uncaught error: Object #<Object> has no method 'parse'\n        at internals.implementation\n        (/usr/local/lib/node_modules/stencil-cli/server/plugins/CssCompiler/index.js:32:26)\n```\n\n----------------------------------------\n\nTITLE: Adding a Second Pickup Method to a Location in BigCommerce API\nDESCRIPTION: This snippet shows how to add another pickup method to an existing location using the BigCommerce API. It creates a curbside pickup option for the same location.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/api-guide.mdx#2025-04-16_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/pickup/methods\nX-Auth-Token: {{access_token}}\nContent-Type: application/json\nAccept: application/json\n\n[\n  {\n    \"location_id\": 1,\n    \"display_name\": \"Curb-side pickup\",\n    \"collection_instructions\": \"See our staff member outside of the store\",\n    \"collection_time_description\": \"Wait for a pickup confirmation and visit in business hours\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Conditional Edit Link with or Helper in Handlebars\nDESCRIPTION: Using the or helper to conditionally display an edit link based on whether options or configurable fields exist for a cart item.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_68\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#or options configurable_fields}}\n    <a href=\"#\" data-item-edit=\"{{id}}\">{{lang 'cart.checkout.change'}}</a>\n{{/or}}\n```\n\n----------------------------------------\n\nTITLE: Setting Image Dimensions for BigCommerce Theme in JSON\nDESCRIPTION: This JSON configuration sets the image ratio for theme settings in a BigCommerce project. It defines various options, including predefined and custom dimensions for blog images. The compulsory fields are `type`, `label`, `id`, and `options`. The 'custom' option allows users to manually specify dimensions, while other options let the theme developer set default values.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/object-reference/elements/imageDimension.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"imageDimension\",\n  \"id\": \"blog_size\",\n  \"force_reload\": true,\n  \"label\": \"i18n.SizeOfImages\",\n  \"options\": [\n    {\n      \"value\": \"190x250\",\n      \"label\": \"i18n.OptimizedForTheme\"\n    },\n    {\n      \"value\": \"custom\",\n      \"label\": \"i18n.SpecifyDimensions\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing BigDesign React Components with yarn\nDESCRIPTION: Command to install BigDesign and styled-components using yarn package manager.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/guide/ui.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @bigcommerce/big-design styled-components\n```\n\n----------------------------------------\n\nTITLE: Account Order Shipments Handlebars Expression\nDESCRIPTION: Manages shipment details for a specific order including shipping dates, carriers, methods and tracking information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_11\n\nLANGUAGE: handlebars\nCODE:\n```\n{{shipments}}\n```\n\n----------------------------------------\n\nTITLE: Creating Development Directory\nDESCRIPTION: Command to create a new directory named dev-center\nSOURCE: https://github.com/bigcommerce/docs/blob/main/guides/create-a-site-preview.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir dev-center\n```\n\n----------------------------------------\n\nTITLE: Creating Site for Headless Storefront\nDESCRIPTION: Makes a POST request to create a site and link it to a sales channel with specified URL\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/abandoned-carts.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/sites\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"url\": \"http://commerce-zr8y-teststore-bigcommerce.vercel.app\",\n  \"channel_id\": 773240\n}\n```\n\n----------------------------------------\n\nTITLE: Cart Condition with And Operator for Items in BigCommerce\nDESCRIPTION: This code snippet demonstrates using the \"and\" operator within the `items` section of a BigCommerce cart condition to specify that the items must belong to both brand X and category Y. The `minimum_quantity` parameter still applies, specifying the minimum number of items that must meet this combined condition. This is an alternative way of expressing the AND condition compared to the top-level \"and\" operator.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/index.mdx#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"cart\": {\n    \"minimum_quantity\": 2,\n    \"items\": {\n      \"and\": [\n        {\n          \"brands\": [x]\n        },\n        {\n          \"categories\": [y]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Category Metafield Created Webhook Payload in JSON\nDESCRIPTION: This snippet demonstrates the payload structure for the store/category/metafield/created webhook event. It includes the metafield ID, resource ID (category ID), and other relevant information.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/category/metafield/created\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"metafield_id\": 17,\n    \"resource_id\": \"24\"  // Category ID\n  },\n  \"hash\": \"dc3a47c15425d2c895dba674f86fe71a8f3b6459\",\n  \"created_at\": 1561480214,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Route Details with GraphQL Storefront API\nDESCRIPTION: This query retrieves details about a storefront entity (Product, Brand, or Category) based on a given URL path. It demonstrates how to retrieve entity-specific information using GraphQL fragments and shows URL variable usage.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/routes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery LookUpUrl(\n  $urlPath: String!\n  # Use GraphQL Query Variables to provide a path\n) {\n  site {\n    route(path: $urlPath) {\n      node {\n        __typename\n        id\n        # A different response is returned based on which type of object was matched\n        ... on Category {\n          name\n          description\n        }\n        ... on Brand {\n          name\n          defaultImage {\n            url(width: 200)\n          }\n        }\n        ... on Product {\n          name\n          description\n          images {\n            edges {\n              node {\n                url(width: 500, height: 500)\n              }\n            }\n          }\n        }\n       }\n        redirect {\n          toUrl\n          to {\n            ...on ProductRedirect {\n             path\n             entityId\n          }\n            ...on ManualRedirect {\n             url\n         }\n       }\n     }\n   }\n }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"urlPath\": \"/Blouse/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sass Functions for Font Handling in BigCommerce Themes\nDESCRIPTION: SCSS code demonstrating the use of Stencil's custom Sass functions to transform fonts specified in the theme's config.json file.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/style/fonts-and-icons.mdx#2025-04-16_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n$body-font-family: stencilFontFamily(\"body-font\");\n$body-font-weight: stencilFontWeight(\"body-font\");\n```\n\n----------------------------------------\n\nTITLE: Batch Update Webhook Models - Bash\nDESCRIPTION: Script for bulk converting all JSON files in the data directory to YAML schemas and moving them to the webhooks directory.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/webhooks/callbacks/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfor f in models/webhooks/data/*.json; do cat $f | python models/json2schema.py > ${f%.*}.yml; mv ${f%.*}.yml models/webhooks/; done\n```\n\n----------------------------------------\n\nTITLE: Parsing Category Created Webhook Payload in JSON\nDESCRIPTION: This snippet shows the structure of a payload object for the store/category/created webhook event. It includes the scope, store ID, category ID, and other metadata.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/category/created\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"category\", // will always be category\n    \"id\": 42 // ID of the category\n  },\n  \"hash\": \"dc3a47c15425d2c895dba674f86fe71a8f3b6459\",\n  \"created_at\": 1561480214,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: And Operator in BigCommerce Cart Condition\nDESCRIPTION: This code snippet demonstrates how to use the \"and\" operator in a BigCommerce promotion to require a customer to have at least two items from brand X and two items from category Y in their cart to qualify for the promotion. The `minimum_quantity` parameter specifies the minimum number of items required, and the `brands` and `categories` arrays define the specific brands and categories that must be present in the cart.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/index.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{ \"and\": [\n    {\n      \"cart\": {\n        \"minimum_quantity\": 2,\n        \"items\": {\n          \"brands\": [x]\n        }\n      }\n    },\n    {\n      \"cart\": {\n        \"minimum_quantity\": 2,\n        \"items\": {\n          \"categories\": [y]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Location Metafields Response Structure\nDESCRIPTION: Example JSON response showing the structure of location data with metafields returned by the GraphQL API.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/locations/queries.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"inventory\": {\n      \"locations\": {\n        \"edges\": [\n          {\n            \"node\": {\n              \"metafields\": {\n                \"edges\": []\n              },\n              \"entityId\": 1,\n              \"code\": \"BC-LOCATION-1\",\n              \"label\": \"Default location\",\n              \"description\": \"\",\n              \"typeId\": \"PHYSICAL\"\n            }\n          },\n          {\n            \"node\": {\n              \"metafields\": {\n                \"edges\": [\n                  {\n                    \"node\": {\n                      \"entityId\": 2,\n                      \"key\": \"example key\",\n                      \"value\": \"new location\"\n                    }\n                  }\n                ]\n              },\n              \"entityId\": 2,\n              \"code\": \"BC-LOCATION-2\",\n              \"label\": \"ExampleLocation\",\n              \"description\": \"Open only on weekdays\",\n              \"typeId\": \"PHYSICAL\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version\nDESCRIPTION: Command to verify the installed version of Node.js\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-setup.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Running BigCommerce Documentation Linter\nDESCRIPTION: Command to execute the documentation linter on a specific MDX file. The linter checks the file against BigCommerce's documentation style guide rules.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/guides/lint-a-document-with-dx-linter-script.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx github:bigcommerce/dev-docs-style-guide-linter ./{{yourfilename}}.mdx\n```\n\n----------------------------------------\n\nTITLE: Pushing a Theme and Applying to All Channels\nDESCRIPTION: Command to push a theme and apply it to all available channels.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/upload.mdx#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nstencil push -a -allc\n```\n\n----------------------------------------\n\nTITLE: Handling SKU Inventory Update Webhook Payload in JSON\nDESCRIPTION: This snippet illustrates the structure of a payload object for a SKU inventory update event. It includes the scope, store ID, SKU ID, product ID, inventory method, value of change, and variant ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/webhooks/events/index.mdx#2025-04-16_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"store/sku/inventory/updated\",\n  \"store_id\": \"1025646\",\n  \"data\": {\n    \"type\": \"sku\",\n    \"id\": 461,\n    \"inventory\": {\n      \"product_id\": 206,\n      \"method\": \"absolute\",\n      \"value\": 5,\n      \"variant_id\": 509\n    }\n  },\n  \"hash\": \"116ddb29d7bc1b2322cc1a4dc295221ee3637d4b\",\n  \"created_at\": 1561480673,\n  \"producer\": \"stores/{store_hash}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Query Account Details Using GraphQL\nDESCRIPTION: GraphQL query to retrieve basic account information including account ID and name.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/graphql-account/users.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  account {\n    id\n    accountInfo {\n      name\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"account\": {\n      \"id\": \"bc/account/account/{account_uuid}\",\n      \"accountInfo\": {\n        \"name\": \"Jane Doe\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to YAML Schema Using Python\nDESCRIPTION: Command to convert a single JSON data file to YAML schema using the json2schema.py script.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/emails/object-reference/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncat data.json | python json2schema.py > schema.yml\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Products by Rating Query\nDESCRIPTION: This JSON response shows the structure of data returned when querying products filtered by rating. It includes two sample products with their entity IDs, names, and price values.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/products/faceted-textual-search.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"search\": {\n        \"searchProducts\": {\n          \"products\": {\n            \"edges\": [\n              {\n                \"node\": {\n                  \"entityId\": 80,\n                  \"name\": \"[Sample] Orbit Terrarium - Large\",\n                  \"prices\": {\n                    \"price\": {\n                      \"value\": 109\n                    }\n                  }\n                }\n              },\n              {\n                \"node\": {\n                  \"entityId\": 93,\n                  \"name\": \"[Sample] 1 L Le Parfait Jar\",\n                  \"prices\": {\n                    \"price\": {\n                      \"value\": 7\n                    }\n                  }\n                }\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Pull Request Template Structure\nDESCRIPTION: Template for creating standardized pull requests for BigCommerce documentation changes. Includes placeholders for ticket numbers, change descriptions, release notes, and additional context.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/pull_request_template.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Ticket number or summary of work -->\n# [DEVDOCS-]\n\n\n## What changed?\n<!-- Provide a bulleted list in the present tense -->\n* \n\n## Release notes draft\n<!-- Provide an entry for the release notes using simple, conversational language. Don't be too technical. Explain how the change will benefit the merchant and link to the feature.\n\nExamples:\n* The newly-released [X feature] is now available to use. Now, you'll be able to [perform Y action].\n* We're happy to announce [X feature], which can help you  [perform Y action].\n* [X feature] helps you to create [Y response] using the [Z query parameter]. Now, you can deliver [ex, localized shopping experiences for your customers].\n* Fixed a bug in the [X endpoint]. Now the [Y field] will appear when you click [Z option]. -->\n* \n\n## Anything else?\n<!-- Add related PRs, salient notes, additional ticket numbers, etc. -->\n\nping {names}\n```\n\n----------------------------------------\n\nTITLE: REST API Success Status Codes (2xx)\nDESCRIPTION: Table of successful HTTP status codes (2xx) returned by BigCommerce REST APIs, including codes for successful GET, PUT, POST, and DELETE operations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/start/about/status-codes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Code | Text | Purpose |\n|:----:|:-----|:--------|\n| **200** | **OK** | For successful `GET` and `PUT` requests. |\n| **201** | **Created** | For a successful `POST` request. |\n| **202** | **Accepted** | For a request that resulted in a scheduled task being created to perform the actual request. |\n| **204** | **No Content** | For a successful request that produced no response (such as `DELETE` requests). |\n| **207** | **Multi-Status** | Multiple operations have taken place and the status for each operation can be viewed in the body of the response. |\n```\n\n----------------------------------------\n\nTITLE: Batch Processing Email Template Models in Bash\nDESCRIPTION: A Bash script to automatically process all JSON files in the data directory, convert them to YAML schemas, and overwrite the existing email template models.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/emails/object-reference/draft/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfor f in models/email_templates/data/*.json; do cat $f | python models/json2schema.py > ${f%.*}.yml; mv ${f%.*}.yml models/email_templates/; done\n```\n\n----------------------------------------\n\nTITLE: Processing Payment with Stored Card\nDESCRIPTION: Example of processing a payment using a stored card. This request requires a payment access token and includes the stored card token and verification value.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/orders.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST https://payments.bigcommerce.com/stores/{store_hash}/payments\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n  \"payment\": {\n    \"instrument\": {\n      \"type\": \"stored_card\",\n      \"token\": \"8cdf7b6ea1b27119463bf9e5106639618cc77a9adc49f0069ca8b756cc15caee\",\n      \"verification_value\": \"1142\"\n    },\n    \"payment_method_id\": \"adyenv2.scheme\",\n    \"save_instrument\": true\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": \"693bb4cd-3f20-444a-8315-6369f582c68a\",\n    \"status\": \"success\",\n    \"transaction_type\": \"purchase\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Discount for Men's Clothing - JSON\nDESCRIPTION: This JSON snippet defines a promotion for a 20% discount on all men's clothing, specifying the rules regarding item eligibility based on product custom fields.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/product.mdx#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Apply 20% off all male clothing\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"action\": {\n        \"cart_items\": {\n          \"discount\": {\n            \"percentage_amount\": \"20\"\n          },\n          \"items\": {\n            \"product_custom_field\": {\n              \"name\": \"Gender\",\n              \"values\": [\n                \"Mens\"\n              ]\n            }\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Single Variant Stock Levels with V2 Products API\nDESCRIPTION: This JSON payload updates stock levels for a specific product variant by sending a PUT request to the V2 Products API SKUs endpoint. It includes the SKU identifier \"WHITE-1\" in addition to inventory and warning levels.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"inventory_level\": 100,\n  \"inventory_warning_level\": 10,\n  \"sku\": \"WHITE-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating contact-us-form.html for reCAPTCHA V2\nDESCRIPTION: In this snippet, the contact-us-form HTML template is updated to include the Google reCAPTCHA V2 integration, enhancing form submission security against automated bots.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/content/recaptcha.mdx#2025-04-16_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Insert reCAPTCHA v2 script -->\n<script src=\"https://www.google.com/recaptcha/api.js\" async defer></script>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Theme Setting Definition\nDESCRIPTION: This JSON snippet defines a checkbox theme setting. It includes the required fields `type`, `label`, and `id`, as well as the optional `force_reload` field. When the checkbox value is toggled and `force_reload` is set to `true`, the page will reload.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/object-reference/elements/checkbox.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"checkbox\",\n  \"label\": \"i18n.HideBreadcrumbs\",\n  \"force_reload\": true,\n  \"id\": \"hide_breadcrumbs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Database Migration with Prisma\nDESCRIPTION: Command to execute Prisma database migration script for initializing the database schema.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/point-of-sale.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Adding CouponDrawer div to base.html\nDESCRIPTION: This snippet demonstrates how to modify the HTML layout file to include a div element that acts as a mount point for the CouponDrawer React component.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/foundations/react.mdx#2025-04-16_snippet_6\n\nLANGUAGE: handlebars\nCODE:\n```\n<body>\n  ...\n  <div id=\"coupondrawer\"></div>\n  \n  {{> components/common/header }}\n  {{> components/common/body }}\n  {{> components/common/footer }}\n\n  ...\n</body>\n```\n\n----------------------------------------\n\nTITLE: Configuring Styled Components\nDESCRIPTION: Custom Document implementation for server-side rendering of styled-components\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-setup.mdx#2025-04-16_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport default class MyDocument extends Document {\n  static async getInitialProps(ctx: DocumentContext) {\n    const sheet = new ServerStyleSheet();\n    const originalRenderPage = ctx.renderPage;\n\n    try {\n      ctx.renderPage = () =>\n        originalRenderPage({\n          enhanceApp: (App) => (props) => sheet.collectStyles(<App {...props} />),\n        })\n\n      const initialProps = await Document.getInitialProps(ctx);\n\n      return {\n        ...initialProps,\n        styles: (\n          <>\n            {initialProps.styles}\n            {sheet.getStyleElement()}\n          </>\n        ),\n      };\n    } finally {\n      sheet.seal();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Language Strings for Login Page (JSON)\nDESCRIPTION: JSON snippet showing how to modify the default language strings for the login page. It includes keys for new customer heading, intro, and facts.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/login.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"new_customer\": {\n        \"heading\": \"New Customer?\",\n        \"intro\": \"Create an account with us and you'll be able to:\",\n        \"fact1\": \"Get customer perks\",\n        \"fact2\": \"Place a recurring order\"\n        }\n```\n\n----------------------------------------\n\nTITLE: Force Update Product Import Command\nDESCRIPTION: WP-CLI command to force update all products regardless of their change status.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/deployment/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nwp bigcommerce import products --force\n```\n\n----------------------------------------\n\nTITLE: Adding Product Video with V3 Catalog API in JSON\nDESCRIPTION: This snippet demonstrates how to add a YouTube video to an existing product using the V3 Catalog API. It requires the product ID and the YouTube video ID.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Your Video\",\n  \"description\": \"Company Values\",\n  \"sort_order\": 1,\n  \"type\": \"youtube\",\n  \"video_id\": \"4wZ3ZG_Wams\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Stencil Theme Dependencies with NPM\nDESCRIPTION: Command to install JavaScript dependencies for a refreshed version of the Cornerstone theme.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/deployment/upload.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Requesting B2B Edition Storefront API Token using CURL\nDESCRIPTION: Uses CURL to make a GET request to the B2B Edition API to obtain a Storefront API token. This request uses the previously obtained JWT as a query parameter.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/b2b-edition/authentication/hosted-auth.mdx#2025-04-16_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl https://api-b2b.bigcommerce.com/api/io/auth/storefront?jwtToken=bigCommerce.currentCustomerResponse.jwtString\n```\n\n----------------------------------------\n\nTITLE: Customizing Mobile Menu Button Color Contrast\nDESCRIPTION: CSS snippet to improve color contrast for mobile menu toggle button, enhancing visual accessibility by using white background for menu icon\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/accessibility/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.mobileMenu-toggle .mobileMenu-toggleIcon, .mobileMenu-toggle .mobileMenu-toggleIcon:after, .mobileMenu-toggle .mobileMenu-toggleIcon:before {\nbackground: #fff;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Store Logs by ID - HTTP Request\nDESCRIPTION: Makes a GET request to retrieve store log entries filtered by specific log IDs using the id:in query parameter.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/settings/logs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/store/systemlogs?id:in=5,7\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Stencil CLI Output for if() Method Example\nDESCRIPTION: The CSS output when compiling the if() method example using Stencil CLI, which evaluates the parent selector as non-null and returns green.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/cli/incompatible-directives.mdx#2025-04-16_snippet_3\n\nLANGUAGE: css\nCODE:\n```\ntest {\n  color: green;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Footer Scripts in BigCommerce Order Confirmation Template\nDESCRIPTION: Handlebars statements to enable footer scripts in the order confirmation template (order-confirmation.html). This should be added between existing statements at the bottom of the template.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/templates/checkout-confirmation.mdx#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n{{{ checkout.order_confirmation_content }}}\n\n{{{ footer.scripts }}}\n\n{{/partial}}\n```\n\n----------------------------------------\n\nTITLE: Destination Path for Custom Product Template\nDESCRIPTION: Shows where to place the custom product template file in the WordPress theme directory for template overrides.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/wordpress/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: copy\nCODE:\n```\nwp-content/themes/<theme-name>/bigcommerce/single-bigcommerce_product.php\n```\n\n----------------------------------------\n\nTITLE: Server-to-Server GraphQL Configuration\nDESCRIPTION: HTTP configuration for making server-to-server requests to the GraphQL Storefront API with optional customer impersonation.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/graphql/examples/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://{{storeDomain}}/graphql\nAuthorization: Bearer {{storefrontOrCustomerImpersonationToken}}\nX-BC-Customer-ID: 123 # optional once a customer is signed in\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Create Product Request - V3 Catalog API\nDESCRIPTION: Example request to create a simple product using the V3 Catalog API POST /v3/catalog/products endpoint.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/migration/guide.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"BigCommerce Storage Basket\",\n  \"price\": \"10.00\",\n  \"categories\": [\n    23,\n    21\n  ],\n  \"weight\": 4,\n  \"type\": \"physical\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Blog Object in Handlebars Templates\nDESCRIPTION: Handlebars expression for accessing the blog object in BigCommerce templates, used in the blog/post.html partial.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/other-objects-and-properties-overview.mdx#2025-04-16_snippet_19\n\nLANGUAGE: handlebars\nCODE:\n```\n{{blog}}\n```\n\n----------------------------------------\n\nTITLE: Reversing a String - JavaScript\nDESCRIPTION: Reverses the order of characters in a given string.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/themes/context/handlebars-reference.mdx#2025-04-16_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction reverse(str) { return str.split('').reverse().join(''); }\n```\n\n----------------------------------------\n\nTITLE: Creating Cart Redirect URL\nDESCRIPTION: HTTP request for generating a cart redirect URL to BigCommerce hosted checkout.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/headless/cart-checkout/carts.mdx#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/carts/{{cartId}}/redirect_urls\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server for an existing widget.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/widgets/widget-builder.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwidget-builder start <[path/to/]widget-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Homepage New Products Count - JSON\nDESCRIPTION: This JSON snippet outlines the structure for storing configuration settings, specifically for the homepage new products count within BigCommerce. It provides necessary parameters to regulate the data displayed on the storefront.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/stencil/draft/reference-docs/global-objects-and-properties.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"{\\n  \\\"settings\\\": {\\n    \\\"homepage_new_products_count\\\": 5,\\n    // ...\\n    \\\"homepage_new_products_column_count\\\": 4,\\n    // ...\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the local development server\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/subscriptions.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Promotion with OR Operator for Product Combinations\nDESCRIPTION: API request and response for creating a promotion that triggers when customers buy either two of product X or two of product Y. Uses the OR operator to match different product combinations.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/promotions/examples/logical-operators.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Buy two of product X or buy two of product Y\",\n  \"redemption_type\": \"AUTOMATIC\",\n  \"rules\": [\n    {\n      \"condition\": {\n        \"cart\": {\n          \"items\": {\n            \"or\": [\n              {\n                \"products\": [\n                  118\n                ]\n              },\n              {\n                \"variants\": [\n                  134\n                ]\n              }\n            ]\n          },\n          \"minimum_quantity\": 2\n        }\n      },\n      \"action\": {\n        \"gift_item\": {\n          \"product_id\": 130,\n          \"quantity\": 1\n        }\n      }\n    }\n  ],\n  \"notifications\": [\n    {\n      \"type\": \"UPSELL\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"ELIGIBLE\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    },\n    {\n      \"type\": \"APPLIED\",\n      \"content\": \"<div>&nbsp;</div>\",\n      \"locations\": [\n        \"CART_PAGE\"\n      ]\n    }\n  ],\n  \"stop\": false,\n  \"start_date\": \"2019-02-01T05:00:00+00:00\",\n  \"status\": \"ENABLED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response from Creating a BOPIS Order in BigCommerce API\nDESCRIPTION: The JSON response returned when successfully creating a Buy Online, Pick up in Store order. It includes the order ID, billing address information, and a URL for accessing the order consignments. The ellipses indicate additional fields that were omitted from the example.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/buy-online-pick-up-in-store/end-to-end-guide/fulfillment.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1234000049,\n  ...\n  \"billing_address\": {\n    \"first_name\": \"\",\n    \"last_name\": \"\",\n    \"company\": \"\",\n    \"street_1\": \"\",\n    \"street_2\": \"\",\n    \"city\": \"\",\n    \"state\": \"Washington\",\n    \"zip\": \"98006\",\n    \"country\": \"United States\",\n    \"country_iso2\": \"US\",\n    \"phone\": \"\",\n    \"email\": \"\",\n    \"form_fields\": []\n  },\n  \"consignments\": {\n    \"url\": \"https://api.bigcommerce.com/stores/o8ertuc7vw/v2/orders/1234000049/consignments\",\n    \"resource\": \"/orders/1234000049/consignments\"\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Product Featured Flag Override - GraphQL Mutation\nDESCRIPTION: GraphQL mutation to remove channel-specific featured flag overrides, reverting the product's featured status to its global store value.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/store-operations/catalog/msf-international-enhancements/product-attributes.mdx#2025-04-16_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/graphql\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\nmutation ($input: RemoveProductIsFeaturedOverrideInput!) {\n  product {\n    removeProductIsFeaturedOverride (input: $input) {\n      product {\n        overridesForChannel (channelId: \"bc/store/channel/2\") {\n          isFeatured\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"channelId\": \"bc/store/channel/2\",\n    \"productId\": \"bc/store/product/111\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inner Header Component with BigDesign\nDESCRIPTION: React component for product detail page header using BigDesign components with back navigation and product name display.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/integrations/apps/tutorial/nextjs-enhance.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Box, Button, H1, HR, Text } from '@bigcommerce/big-design';\nimport { ArrowBackIcon } from '@bigcommerce/big-design-icons';\nimport { useRouter } from 'next/router';\nimport { useProductList } from '../lib/hooks';\nimport { TabIds, TabRoutes } from './header';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst InnerHeader = () => {\n    const router = useRouter();\n    const { pid } = router.query;\n    const { list = [] } = useProductList();\n    const { name } = list.find(item => item.id === Number(pid)) ?? {};\n\n    const handleBackClick = () => router.push(TabRoutes[TabIds.PRODUCTS]);\n\n    return (\n        <Box marginBottom=\"xxLarge\">\n            <Button iconLeft={<ArrowBackIcon color=\"secondary50\" />} variant=\"subtle\" onClick={handleBackClick}>\n                <Text bold color=\"secondary50\">Products</Text>\n            </Button>\n            {name &&\n                <H1>{name}</H1>\n            }\n            <HR color=\"secondary30\" />\n        </Box>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Cart Data Command\nDESCRIPTION: JavaScript console command to retrieve the current cart data from the checkout state.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/docs/storefront/cart-checkout/checkout-sdk/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstate.data.getCart();\n```\n\n----------------------------------------\n\nTITLE: Reference to Documentation Checklist File\nDESCRIPTION: Reference to a checklist file containing description requirements.\nSOURCE: https://github.com/bigcommerce/docs/blob/main/diataxis-templates/api-reference/api-reference.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nchecklist.mdx\n```"
  }
]