[
  {
    "owner": "nuxt-modules",
    "repo": "tailwindcss",
    "content": "TITLE: Adding TailwindCSS Module in Nuxt 3\nDESCRIPTION: Configures the @nuxtjs/tailwindcss module within a Nuxt 3 project. This TypeScript code snippet shows how to add the module to the `modules` array within the `nuxt.config.ts` file.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/1.installation.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/tailwindcss']\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TailwindCSS Module with yarn\nDESCRIPTION: Installs the @nuxtjs/tailwindcss module using yarn as a development dependency. This ensures the module is available during development but not included in production builds unless explicitly required.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/1.installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @nuxtjs/tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Installing TailwindCSS Module with pnpm\nDESCRIPTION: Installs the @nuxtjs/tailwindcss module using pnpm as a development dependency. It ensures the module is available during development but not included in production builds unless explicitly required.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/1.installation.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm i -D @nuxtjs/tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Installing TailwindCSS Module with npm\nDESCRIPTION: Installs the @nuxtjs/tailwindcss module using npm as a development dependency.  It ensures the module is available during development but not included in production builds unless explicitly required.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/1.installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @nuxtjs/tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Configure Nuxt Modules (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure the `@nuxtjs/tailwindcss` module within the `nuxt.config.ts` file.  By adding `'@nuxtjs/tailwindcss'` to the `modules` array, the module is enabled for the Nuxt application.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: [\n    '@nuxtjs/tailwindcss'\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TailwindCSS Module in Nuxt\nDESCRIPTION: Demonstrates how to configure the @nuxtjs/tailwindcss module within the nuxt.config file. It shows how to add the module to the `modules` array and specify the `tailwindcss` property with configuration options.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/1.installation.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/tailwindcss'],\n  tailwindcss: {\n    // Options\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Add TailwindCSS Module via Nuxt CLI (Bash)\nDESCRIPTION: This command uses the Nuxt CLI to add the `@nuxtjs/tailwindcss` module to a Nuxt project. It simplifies the installation process by automatically adding the module to the `nuxt.config.ts` file.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest module add tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Adding TailwindCSS Module in Nuxt 2\nDESCRIPTION: Configures the @nuxtjs/tailwindcss module within a Nuxt 2 project. This JavaScript code snippet shows how to add the module to the `buildModules` array within the `nuxt.config.js` file.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/1.installation.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  buildModules: ['@nuxtjs/tailwindcss']\n}\n```\n\n----------------------------------------\n\nTITLE: TailwindCSS Directives in CSS File\nDESCRIPTION: This CSS code includes the necessary Tailwind directives. It includes `@tailwind base`, `@tailwind components`, and `@tailwind utilities` in the `tailwind.css` file.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/1.installation.md#_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Initializing TailwindCSS with yarn\nDESCRIPTION: Initializes a basic Tailwind CSS configuration using yarn. This command generates a `tailwind.config.js` file in the project's root directory for customizing the Tailwind CSS setup.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/1.installation.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn tailwindcss init\n```\n\n----------------------------------------\n\nTITLE: Initializing TailwindCSS with pnpm\nDESCRIPTION: Initializes a basic Tailwind CSS configuration using pnpm. This command creates a `tailwind.config.js` file for customizing Tailwind CSS in the project.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/1.installation.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\npnpm dlx tailwindcss init\n```\n\n----------------------------------------\n\nTITLE: Install Tailwind CSS with npm\nDESCRIPTION: This bash command installs a specific version of Tailwind CSS (3.2.0) as a development dependency using npm. Using a specific version can be useful for compatibility with the module.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/2.tailwindcss/1.configuration.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss@3.2.0\n```\n\n----------------------------------------\n\nTITLE: Install Tailwind CSS with yarn\nDESCRIPTION: This bash command installs a specific version of Tailwind CSS (3.2.0) as a development dependency using yarn. Using a specific version can be useful for compatibility with the module.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/2.tailwindcss/1.configuration.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D tailwindcss@3.2.0\n```\n\n----------------------------------------\n\nTITLE: Install Tailwind CSS with pnpm\nDESCRIPTION: This bash command installs a specific version of Tailwind CSS (3.2.0) as a development dependency using pnpm. Using a specific version can be useful for compatibility with the module.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/2.tailwindcss/1.configuration.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\npnpm i -D tailwindcss@3.2.0\n```\n\n----------------------------------------\n\nTITLE: Install TailwindCSS Module (pnpm Bash)\nDESCRIPTION: This command installs the `@nuxtjs/tailwindcss` module as a development dependency using pnpm. The `--save-dev` flag ensures that the module is added to the `devDependencies` section of the `package.json` file.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add --save-dev @nuxtjs/tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Install TailwindCSS Module (yarn Bash)\nDESCRIPTION: This command installs the `@nuxtjs/tailwindcss` module as a development dependency using yarn. The `--dev` flag ensures that the module is added to the `devDependencies` section of the `package.json` file.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @nuxtjs/tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Install TailwindCSS Module (npm Bash)\nDESCRIPTION: This command installs the `@nuxtjs/tailwindcss` module as a development dependency using npm. The `--save-dev` flag ensures that the module is added to the `devDependencies` section of the `package.json` file.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nuxtjs/tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Extending Tailwind Configuration in Nuxt\nDESCRIPTION: This snippet demonstrates how to extend the Tailwind configuration directly within the nuxt.config.ts file using the `config` option. It shows examples of configuring the `content` property. The module uses defu to merge all configurations.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/2.module-options.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/tailwindcss'],\n  tailwindcss: {\n    config: {\n      content: [\n        'content/**/**.md'\n      ]\n    },\n    // config: './tw-config.mts',\n    // config: [\n    //   { theme: { extend: { primary: 'red' } } },\n    //   './tw-config.mts',\n    //   { content: ['content/**/*.md'] },\n    // ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Tailwind Config (CJS)\nDESCRIPTION: This CommonJS JavaScript code demonstrates how to extend the default Tailwind CSS configuration by adding a custom primary color using the `tailwindcss/colors` import. This file should be placed in the project root as `tailwind.config.cjs`. The `colors.green` value from tailwindcss/colors is used as the value for the new primary color.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/2.tailwindcss/1.configuration.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst colors = require('tailwindcss/colors')\n\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        primary: colors.green\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Tailwind Config (TS)\nDESCRIPTION: This TypeScript code demonstrates how to extend the default Tailwind CSS configuration by adding a custom primary color using the `tailwindcss/colors` import. This file should be placed in the project root as `tailwind.config.ts`. It also includes type definition for the Tailwind config. The `colors.green` value from tailwindcss/colors is used as the value for the new primary color.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/2.tailwindcss/1.configuration.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Config } from 'tailwindcss'\nimport colors from 'tailwindcss/colors'\n\nexport default <Partial<Config>>{\n\ttheme: {\n    extend: {\n      colors: {\n        primary: colors.green\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Tailwind Config (JS)\nDESCRIPTION: This JavaScript code demonstrates how to extend the default Tailwind CSS configuration by adding a custom primary color using the `tailwindcss/colors` import. This file should be placed in the project root as `tailwind.config.js`.  The `colors.green` value from tailwindcss/colors is used as the value for the new primary color.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/2.tailwindcss/1.configuration.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport colors from 'tailwindcss/colors'\n\nexport default {\n  theme: {\n    extend: {\n      colors: {\n        primary: colors.green\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind via nuxt.config (TS)\nDESCRIPTION: This TypeScript code demonstrates configuring Tailwind CSS within the `nuxt.config` file.  It sets the `tailwindcss.config` property to extend the default Tailwind theme with a custom primary color using `tailwindcss/colors`. This approach allows configuring Tailwind directly within the Nuxt configuration. The `defineNuxtConfig` helper is used for type safety and autocompletion.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/2.tailwindcss/1.configuration.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport colors from 'tailwindcss/colors'\n\nexport default defineNuxtConfig({\n  // ...\n  tailwindcss: {\n    config: {\n      theme: {\n        extend: {\n          colors: { primary: colors.green }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Exposing Tailwind Configuration in Nuxt\nDESCRIPTION: This snippet demonstrates how to expose the Tailwind configuration to the application runtime using the `exposeConfig` option.  This allows you to reference the Tailwind configuration in JavaScript code.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/2.module-options.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  tailwindcss: {\n    exposeConfig: true\n    // exposeConfig: { level: 2 }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Expose Tailwind Config (TS)\nDESCRIPTION: This TypeScript code shows how to enable the `exposeConfig` option in the `nuxt.config` file. By setting `exposeConfig: true`, the fully resolved Tailwind configuration becomes available for import at runtime via `#tailwind-config`.  Alternatively, `exposeConfig` can be an object with a `level` property to expose a specific level of the config for better tree-shaking.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/2.tailwindcss/1.configuration.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  // ...\n  tailwindcss: {\n    exposeConfig: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS in Nuxt Content Markdown\nDESCRIPTION: This Markdown snippet shows how to apply Tailwind CSS classes to text and divs within a Nuxt Content file using MDC syntax. It demonstrates styling text with background color and rounded corners, as well as applying width, background, and padding to a div.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/3.examples/3.content.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nHello, this is a [Markdown]{.px-1 .bg-blue-200 .rounded-lg} file!\n\n::div{.w-full .bg-green-200 .p-4}\nAnother way to use it!\n::\n```\n\n----------------------------------------\n\nTITLE: Initializing TailwindCSS Module with Default Options in Nuxt\nDESCRIPTION: This snippet demonstrates the basic setup of the @nuxtjs/tailwindcss module within a Nuxt configuration file (nuxt.config.ts). It showcases the default options for cssPath, config, viewer, and exposeConfig. The cssPath option specifies the location of the Tailwind CSS file. The config option allows for extending the Tailwind configuration. The viewer option enables the Tailwind config viewer and exposeConfig lets you reference the configuration in Javascript.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/2.module-options.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/tailwindcss'],\n  // Defaults options\n  tailwindcss: {\n    cssPath: [`${assetsDir}/css/tailwind.css`, { injectPosition: \"first\" }],\n    config: {},\n    viewer: true,\n    exposeConfig: false,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Default Tailwind Configuration JSON\nDESCRIPTION: This JSON snippet represents the default Tailwind CSS configuration when the @nuxtjs/tailwindcss module is installed. It defines the theme extension, content file patterns for scanning, and plugins.  The content files section shows common Nuxt directories and file extensions to be scanned for Tailwind classes. This configuration can be customized.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/2.tailwindcss/1.configuration.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"theme\": { \"extend\": {} },\n  \"content\": {\n    \"files\": [\n      \"{#srcDir}/components/**/*.{vue,js,jsx,mjs,ts,tsx}\",\n      \"{srcDir}/layouts/**/*.{vue,js,jsx,mjs,ts,tsx}\",\n      \"{srcDir}/pages/**/*.{vue,js,jsx,mjs,ts,tsx}\",\n      \"{srcDir}/plugins/**/*.{js,ts,mjs}\",\n      \"{srcDir}/composables/**/*.{js,ts,mjs}\",\n      \"{srcDir}/utils/**/*.{js,ts,mjs}\",\n      \"{srcDir}/{A,a}pp.{vue,js,jsx,mjs,ts,tsx}\",\n      \"{srcDir}/{E,e}rror.{vue,js,jsx,mjs,ts,tsx}\",\n      \"{srcDir}/app.config.{js,ts,mjs}\",\n      \"{srcDir}/app/spa-loading-template.html\"\n    ]\n  },\n  \"plugins\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Tailwind CSS Injection Position in Nuxt\nDESCRIPTION: This snippet demonstrates how to adjust the position of the Tailwind CSS injection using the `cssPath` option.  It shows how to configure the `injectPosition` property to control the CSS priority. Options for injectPosition are 'first', 'last', { after: 'some/existing/file.css' }, or an integer representing the array index.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/2.module-options.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/tailwindcss'],\n  css: [\n    'assets/low-priorty.pcss',\n    'assets/high-priorty.pcss'\n  ],\n  tailwindcss: {\n    cssPath: [\n      '~/assets/css/tailwind.css',\n      {\n        injectPosition: 'last'\n    //  injectPosition: {\n    //    // 'low-priority' will have lower priority than Tailwind stylesheet,\n    //    // while 'high-priorty' will override it\n    //    after: 'assets/low-priorty.pcss'\n    //  }\n    //  injectPosition: 'first'   // default, equal to nuxt.options.css.unshift(cssPath)\n    //  injectPosition: 'last'    // equal to nuxt.options.css.push(cssPath)\n    //  injectPosition: 1         // after 'low-priority.pcss'\n      },\n    ],\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS Hooks\nDESCRIPTION: This TypeScript code demonstrates how to use Nuxt hooks to manipulate the Tailwind CSS configuration. It modifies the `tailwindConfig` object within the `tailwindcss:config` hook and logs the resolved configuration in the `tailwindcss:resolvedConfig` hook. This is an advanced usage typically for module authors.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/2.tailwindcss/1.configuration.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// ~/modules/nuxt-tailwind-mod/index.ts\nimport { defineNuxtModule, addTemplate } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup (options, nuxt) {\n    nuxt.hook('tailwindcss:config', function (tailwindConfig) {\n      tailwindConfig.theme.colors.blue = '#fff'\n    })\n\n    nuxt.hook('tailwindcss:resolvedConfig', function (resolvedConfig) {\n      console.log('This is the resulting config', JSON.stringify(resolvedConfig))\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: VSCode Settings for Tailwind CSS Support\nDESCRIPTION: This configuration enables Tailwind CSS support in Visual Studio Code for CSS files and activates quick suggestions for strings. This enhances autocomplete, syntax highlighting, and linting for Tailwind directives.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/2.tailwindcss/2.editor-support.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"files.associations\": {\n    \"*.css\": \"tailwindcss\"\n},\n\"editor.quickSuggestions\": {\n    \"strings\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Enable String Classes Autocomplete in VSCode\nDESCRIPTION: This configuration adds a regular expression to enable IntelliSense suggestions when using strings of Tailwind classes. It configures VSCode to recognize Tailwind classes within tagged template literals.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/2.tailwindcss/2.editor-support.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n// ...\n+ \"tailwindCSS.experimental.classRegex\": [\"tw`(.*?)`\", \"tw\\('(.*?)'\\\\)\", \"tw\\\\(\\s*('(.*?)'|\"(.*?)\")\\s*\\\\)\"],\n\"files.associations\": {\n    \"*.css\": \"tailwindcss\"\n},\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Classes with Autocomplete in Vue\nDESCRIPTION: This Vue component demonstrates how to use the `tw` utility function with tagged template literals to apply Tailwind classes. The editor provides IntelliSense suggestions when writing Tailwind classes within the `tw` function.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/2.tailwindcss/2.editor-support.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst variantClasses = {\n  primary: tw`bg-red-400`,\n  secondary: tw('bg-green-400')\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Config Viewer in Nuxt\nDESCRIPTION: This snippet demonstrates how to configure the Tailwind config viewer using the `viewer` option. It shows how to set the endpoint and enable exporting the viewer as a static asset. You can disable the viewer by setting `viewer` to `false`.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/2.module-options.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  tailwindcss: {\n    viewer: { endpoint: '/_tailwind', exportViewer: true },\n    // viewer: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Tailwind CSS Path in Nuxt\nDESCRIPTION: This snippet demonstrates how to define the path to the Tailwind CSS file using the `cssPath` option.  It shows setting the path to a custom CSS file. If the file does not exist, the module's default CSS file will be imported instead.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/2.module-options.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/tailwindcss'],\n  tailwindcss: {\n    cssPath: '~/assets/css/tailwind.css',\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: VSCode Setting for Custom Tailwind Config\nDESCRIPTION: This configuration tells the Tailwind CSS IntelliSense extension in VSCode to use a custom configuration file located at `.nuxt/tailwind/postcss.mjs`. This is useful for complex Nuxt projects with multiple Tailwind configurations or configurations generated by the module.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/2.tailwindcss/2.editor-support.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n// ...\n+ \"tailwindCSS.experimental.configFile\": \".nuxt/tailwind/postcss.mjs\",\n\"files.associations\": {\n    \"*.css\": \"tailwindcss\"\n},\n// ...\n```\n\n----------------------------------------\n\nTITLE: Disabling Tailwind CSS Injection in Nuxt\nDESCRIPTION: This snippet demonstrates how to disable the injection of the Tailwind CSS file by setting the `cssPath` option to `false`. This is useful when you want to manage the CSS import manually.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/2.module-options.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/tailwindcss'],\n  tailwindcss: { cssPath: false }\n})\n```\n\n----------------------------------------\n\nTITLE: Opting into Nightly Release Channel\nDESCRIPTION: Updates the @nuxtjs/tailwindcss dependency in package.json to use the nightly release channel. This allows access to the latest changes and beta testing features before stable releases. Requires removing the lockfile and reinstalling dependencies.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/1.installation.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n-   \"@nuxtjs/tailwindcss\": \"^6.0.0\"\n+   \"@nuxtjs/tailwindcss\": \"npm:@nuxtjs/tailwindcss@nightly\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opting out from Nightly Release Channel\nDESCRIPTION: Reverts the @nuxtjs/tailwindcss dependency in package.json from the nightly release channel to a specific stable version. This ensures stability by using a tested and released version. Requires removing the lockfile and reinstalling dependencies.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/1.installation.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n-   \"@nuxtjs/tailwindcss\": \"npm:@nuxtjs/tailwindcss@nightly\"\n+   \"@nuxtjs/tailwindcss\": \"^6.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Editor Support for Tailwind CSS in Nuxt\nDESCRIPTION: This snippet demonstrates how to enable editor support for Tailwind CSS using the `editorSupport` option.  This can provide DX utilities while developing with Tailwind.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/2.module-options.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  tailwindcss: {\n    editorSupport: true\n    // editorSupport: { autocompleteUtil: { as: 'tailwindClasses' } }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Customize Tailwind Configuration with Nuxt Hook\nDESCRIPTION: This Nuxt module demonstrates how to use the `tailwindcss:resolvedConfig` hook to customize the Tailwind CSS configuration. It adds a template file with the customized configuration, allowing for further customization of the configuration used by the IntelliSense extension.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/2.tailwindcss/2.editor-support.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, addTemplate } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup (options, nuxt) {\n    nuxt.hook('tailwindcss:resolvedConfig', (config) => {\n      addTemplate({\n        filename: 'intellisense-tw.cjs', // gets prepended by .nuxt/\n        getContents: () => `\n          /* my-comment */\n          module.exports = ${JSON.stringify(config)}\n        `,\n        write: true\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TailwindCSS Module with nuxi\nDESCRIPTION: Installs the @nuxtjs/tailwindcss module using the nuxi command-line tool. This command adds the tailwindcss module as a dependency to the project.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/1.installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest module add tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Initializing TailwindCSS with npm\nDESCRIPTION: Initializes a basic Tailwind CSS configuration using npm. This command creates a `tailwind.config.js` file in the project root, which can then be customized.\nSOURCE: https://github.com/nuxt-modules/tailwindcss/blob/main/docs/content/1.getting-started/1.installation.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx tailwindcss init\n```"
  }
]